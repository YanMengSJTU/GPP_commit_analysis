diff --git a/.gitignore b/.gitignore
index 0f3b02d08..5b9a12a2c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,15 +1,40 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Intellij project files
+*.iml
+*.ipr
+*.iws
+.idea/
+
+# Gradle
+.gradle
+build
+
 *~
 *.DS_Store
-*.class
 *java#
 *.settings
-local.properties
 .arc/
-bin/
-gen/
 out/
 facebook/doc/
 facebook/lint.xml
 facebook/tests/lint.xml
 facebook/tests/assets/config.json
-.idea/
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 000000000..2d3bec743
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,9 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.7.+'
+    }
+}
diff --git a/facebook/.classpath b/facebook/.classpath
index e6810ebec..7bc01d9a9 100644
--- a/facebook/.classpath
+++ b/facebook/.classpath
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="lib" path="libs/android-support-v13.jar"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/facebook/TestApp/SdkTestApp.eml b/facebook/TestApp/SdkTestApp.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/TestApp/SdkTestApp.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/TestApp/SdkTestApp.iml b/facebook/TestApp/SdkTestApp.iml
deleted file mode 100644
index 04f3d28e2..000000000
--- a/facebook/TestApp/SdkTestApp.iml
+++ /dev/null
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="true" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-  </component>
-</module>
-
diff --git a/facebook/TestApp/build.gradle b/facebook/TestApp/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/facebook/TestApp/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/facebook/android-sdk.eml b/facebook/android-sdk.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/android-sdk.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/android-sdk.iml b/facebook/android-sdk.iml
deleted file mode 100644
index 0cd560145..000000000
--- a/facebook/android-sdk.iml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="true" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/res" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/build.gradle b/facebook/build.gradle
new file mode 100644
index 000000000..ea2914c49
--- /dev/null
+++ b/facebook/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android-library'
+
+dependencies {
+    compile 'com.android.support:support-v4:13.0.+'
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png
new file mode 100644
index 000000000..cf60eb0ac
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png
new file mode 100644
index 000000000..ece0c4c94
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png
new file mode 100644
index 000000000..a123c2555
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_icon.png b/facebook/res/drawable-hdpi/com_facebook_icon.png
deleted file mode 100644
index af8e077ac..000000000
Binary files a/facebook/res/drawable-hdpi/com_facebook_icon.png and /dev/null differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png
new file mode 100644
index 000000000..a7289c112
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_focused.png b/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_focused.png
deleted file mode 100644
index 7badb08d7..000000000
Binary files a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_focused.png and /dev/null differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_normal.png b/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_normal.png
deleted file mode 100644
index 7f71a8a6d..000000000
Binary files a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_normal.png and /dev/null differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_pressed.png b/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_pressed.png
deleted file mode 100644
index 7badb08d7..000000000
Binary files a/facebook/res/drawable-hdpi/com_facebook_loginbutton_blue_pressed.png and /dev/null differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png
new file mode 100644
index 000000000..d6ec37d04
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable-ldpi/com_facebook_icon.png b/facebook/res/drawable-ldpi/com_facebook_icon.png
deleted file mode 100644
index 5bbc2cc91..000000000
Binary files a/facebook/res/drawable-ldpi/com_facebook_icon.png and /dev/null differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png
new file mode 100644
index 000000000..cfb7a015c
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png
new file mode 100644
index 000000000..1e9390133
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png
new file mode 100644
index 000000000..d8427fdef
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png
new file mode 100644
index 000000000..a806a2f5d
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png
new file mode 100644
index 000000000..c5170c18b
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png
new file mode 100644
index 000000000..5a47068d7
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png
new file mode 100644
index 000000000..1449c8a13
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png
new file mode 100644
index 000000000..28bd184ed
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png
new file mode 100644
index 000000000..4192c4887
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_focused.png b/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_focused.png
deleted file mode 100644
index 93882b64b..000000000
Binary files a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_focused.png and /dev/null differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_normal.png b/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_normal.png
deleted file mode 100644
index 911feeee9..000000000
Binary files a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_normal.png and /dev/null differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_pressed.png b/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_pressed.png
deleted file mode 100644
index 93882b64b..000000000
Binary files a/facebook/res/drawable-xhdpi/com_facebook_loginbutton_blue_pressed.png and /dev/null differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png
new file mode 100644
index 000000000..a5b372468
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue.xml b/facebook/res/drawable/com_facebook_button_blue.xml
new file mode 100644
index 000000000..91aebe685
--- /dev/null
+++ b/facebook/res/drawable/com_facebook_button_blue.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+  <item
+      android:drawable="@drawable/com_facebook_button_blue_pressed"
+      android:state_focused="true"
+      android:state_pressed="true"
+      />
+  <item
+      android:drawable="@drawable/com_facebook_button_blue_pressed"
+      android:state_focused="false"
+      android:state_pressed="true"
+      />
+  <item
+      android:drawable="@drawable/com_facebook_button_blue_focused"
+      android:state_focused="true"
+      />
+  <item
+      android:drawable="@drawable/com_facebook_button_blue_normal"
+      android:state_focused="false"
+      android:state_pressed="false"
+      />
+
+</selector>
diff --git a/facebook/res/drawable/com_facebook_button_blue_focused.9.png b/facebook/res/drawable/com_facebook_button_blue_focused.9.png
new file mode 100644
index 000000000..cfb7a015c
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue_normal.9.png b/facebook/res/drawable/com_facebook_button_blue_normal.9.png
new file mode 100644
index 000000000..1e9390133
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable/com_facebook_button_blue_pressed.9.png
new file mode 100644
index 000000000..d8427fdef
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable/com_facebook_icon.png b/facebook/res/drawable/com_facebook_icon.png
deleted file mode 100644
index 413396be6..000000000
Binary files a/facebook/res/drawable/com_facebook_icon.png and /dev/null differ
diff --git a/facebook/res/drawable/com_facebook_inverse_icon.png b/facebook/res/drawable/com_facebook_inverse_icon.png
new file mode 100644
index 000000000..a806a2f5d
Binary files /dev/null and b/facebook/res/drawable/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable/com_facebook_loginbutton_blue.xml b/facebook/res/drawable/com_facebook_loginbutton_blue.xml
deleted file mode 100644
index 211df8627..000000000
--- a/facebook/res/drawable/com_facebook_loginbutton_blue.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<selector xmlns:android="http://schemas.android.com/apk/res/android" >
-    <item android:state_pressed="true" 
-          android:drawable="@drawable/com_facebook_loginbutton_blue_pressed" />
-    <item android:state_focused="true" 
-          android:drawable="@drawable/com_facebook_loginbutton_blue_focused" />
-    <item android:drawable="@drawable/com_facebook_loginbutton_blue_normal" />
-</selector>
diff --git a/facebook/res/drawable/com_facebook_loginbutton_blue_focused.png b/facebook/res/drawable/com_facebook_loginbutton_blue_focused.png
deleted file mode 100644
index 218b6e5d1..000000000
Binary files a/facebook/res/drawable/com_facebook_loginbutton_blue_focused.png and /dev/null differ
diff --git a/facebook/res/drawable/com_facebook_loginbutton_blue_normal.png b/facebook/res/drawable/com_facebook_loginbutton_blue_normal.png
deleted file mode 100644
index 121741085..000000000
Binary files a/facebook/res/drawable/com_facebook_loginbutton_blue_normal.png and /dev/null differ
diff --git a/facebook/res/drawable/com_facebook_loginbutton_blue_pressed.png b/facebook/res/drawable/com_facebook_loginbutton_blue_pressed.png
deleted file mode 100644
index 218b6e5d1..000000000
Binary files a/facebook/res/drawable/com_facebook_loginbutton_blue_pressed.png and /dev/null differ
diff --git a/facebook/res/layout/com_facebook_picker_search_box.xml b/facebook/res/layout/com_facebook_picker_search_box.xml
index 851b7d58a..616bba4e0 100644
--- a/facebook/res/layout/com_facebook_picker_search_box.xml
+++ b/facebook/res/layout/com_facebook_picker_search_box.xml
@@ -15,7 +15,15 @@
     limitations under the License.
 -->
 
-<EditText xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="wrap_content"
-              android:layout_height="fill_parent">
-</EditText>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:layout_width="match_parent"
+              android:layout_height="wrap_content"
+              android:orientation="vertical"
+        >
+    <include layout="@layout/com_facebook_search_bar_layout" />
+    <View
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/com_facebook_picker_divider_width"
+            android:background="@drawable/com_facebook_picker_default_separator_color"
+            />
+</LinearLayout>
diff --git a/facebook/res/layout/com_facebook_placepickerfragment.xml b/facebook/res/layout/com_facebook_placepickerfragment.xml
index d2003b58d..56c5cc8ee 100644
--- a/facebook/res/layout/com_facebook_placepickerfragment.xml
+++ b/facebook/res/layout/com_facebook_placepickerfragment.xml
@@ -24,18 +24,12 @@
 
     <include layout="@layout/com_facebook_picker_title_bar_stub"/>
 
-    <ViewStub android:id="@+id/com_facebook_placepickerfragment_search_box_stub"
-              android:inflatedId="@+id/search_box"
-              android:layout="@layout/com_facebook_picker_search_box"
-              android:layout_height="wrap_content"
-              android:layout_width="fill_parent"/>
-
     <ListView
             android:id="@+id/com_facebook_picker_list_view"
             android:layout_width="fill_parent"
             android:layout_height="fill_parent"
             android:layout_alignParentTop="true"
-            android:divider="@drawable/com_facebook_list_divider"
+            android:divider="@null"
             android:fastScrollEnabled="true"
             android:scrollbars="vertical"
             android:listSelector="@drawable/com_facebook_picker_list_selector"
diff --git a/facebook/res/layout/com_facebook_placepickerfragment_list_row.xml b/facebook/res/layout/com_facebook_placepickerfragment_list_row.xml
index e9177c1c2..09de356e8 100644
--- a/facebook/res/layout/com_facebook_placepickerfragment_list_row.xml
+++ b/facebook/res/layout/com_facebook_placepickerfragment_list_row.xml
@@ -15,56 +15,76 @@
     limitations under the License.
 -->
 
-<LinearLayout
+<RelativeLayout
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent">
-    <ViewStub
-            android:id="@+id/com_facebook_picker_profile_pic_stub"
-            android:inflatedId="@+id/com_facebook_picker_image"
-            android:layout="@layout/com_facebook_picker_image"
-            android:layout_width="50dip"
-            android:layout_height="50dip" />
+        android:layout_width="match_parent"
+        android:focusable="false">
     <LinearLayout
-            android:orientation="vertical"
-            android:focusable="false"
-            android:layout_width="0dip"
+            android:layout_width="match_parent"
             android:layout_height="wrap_content"
-            android:layout_marginRight="16dp"
-            android:layout_gravity="center_vertical"
-            android:layout_weight="1">
-        <TextView
-                android:id="@+id/com_facebook_picker_title"
-                android:layout_width="fill_parent"
+            android:orientation="horizontal"
+            android:focusable="false"
+            >
+        <FrameLayout
+                android:layout_width="80dp"
                 android:layout_height="wrap_content"
-                android:layout_weight="1.0"
-                android:paddingLeft="5dip"
-                android:ellipsize="end"
-                android:singleLine="true"
-                android:typeface="sans"
-                android:textColor="#000000"
-                android:lines="1"
-                android:textSize="16sp"
-                android:gravity="left|center_vertical"/>
-        <TextView
-                android:id="@+id/picker_subtitle"
-                android:layout_width="fill_parent"
+                >
+            <ViewStub
+                    android:id="@+id/com_facebook_picker_profile_pic_stub"
+                    android:inflatedId="@+id/com_facebook_picker_image"
+                    android:layout="@layout/com_facebook_picker_image"
+                    android:layout_gravity="left|center_vertical"
+                    android:layout_width="@dimen/com_facebook_picker_place_image_size"
+                    android:layout_height="@dimen/com_facebook_picker_place_image_size" />
+        </FrameLayout>
+        <LinearLayout
+                android:orientation="vertical"
+                android:focusable="false"
+                android:layout_width="0dip"
                 android:layout_height="wrap_content"
-                android:layout_weight="1.0"
-                android:paddingLeft="5dip"
-                android:ellipsize="end"
-                android:singleLine="true"
-                android:textColor="#666666"
-                android:lines="1"
-                android:typeface="sans"
-                android:textSize="12sp"
-                android:gravity="left|center_vertical"/>
+                android:layout_marginRight="16dp"
+                android:layout_gravity="center_vertical"
+                android:layout_weight="1">
+            <TextView
+                    android:id="@+id/com_facebook_picker_title"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:typeface="sans"
+                    android:textColor="#000000"
+                    android:lines="1"
+                    android:textSize="16sp"
+                    android:gravity="left|center_vertical"/>
+            <TextView
+                    android:id="@+id/picker_subtitle"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1.0"
+                    android:ellipsize="end"
+                    android:singleLine="true"
+                    android:textColor="#666666"
+                    android:lines="1"
+                    android:typeface="sans"
+                    android:textSize="12sp"
+                    android:gravity="left|center_vertical"/>
+        </LinearLayout>
+        <!--ViewStub
+                android:id="@+id/checkbox_stub"
+                android:inflatedId="@+id/picker_checkbox"
+                android:layout="@layout/checkbox_layout"
+                android:layout_width="23dip"
+                android:layout_height="23dip"
+                android:layout_marginRight="10dip"/-->
     </LinearLayout>
-    <!--ViewStub
-            android:id="@+id/checkbox_stub"
-            android:inflatedId="@+id/picker_checkbox"
-            android:layout="@layout/checkbox_layout"
-            android:layout_width="23dip"
-            android:layout_height="23dip"
-            android:layout_marginRight="10dip"/-->
-</LinearLayout>
+    <View
+            android:layout_width="0dp"
+            android:layout_height="@dimen/com_facebook_picker_divider_width"
+            android:layout_alignParentLeft="true"
+            android:layout_alignParentRight="true"
+            android:layout_alignParentBottom="true"
+            android:background="@drawable/com_facebook_picker_default_separator_color"
+            />
+</RelativeLayout>
diff --git a/facebook/res/layout/com_facebook_search_bar_layout.xml b/facebook/res/layout/com_facebook_search_bar_layout.xml
new file mode 100644
index 000000000..79dbabbf0
--- /dev/null
+++ b/facebook/res/layout/com_facebook_search_bar_layout.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/com_facebook_search_bar_view"
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingTop="0dp"
+        android:paddingBottom="0dp"
+        android:paddingLeft="5dp"
+        android:paddingRight="5dp"
+        android:background="@color/com_facebook_picker_search_bar_background"
+        >
+    <EditText
+            android:id="@+id/com_facebook_picker_search_text"
+            android:layout_width="match_parent"
+            android:layout_height="48dp"
+            android:layout_marginLeft="5dp"
+            android:singleLine="true"
+            android:layout_gravity="center"
+            android:gravity="center_vertical"
+            android:textSize="16dp"
+            android:textColor="@android:color/black"
+            android:textColorHint="@color/com_facebook_picker_search_bar_text"
+            android:background="@color/com_facebook_picker_search_bar_background"
+            android:drawableLeft="@drawable/com_facebook_picker_magnifier"
+            android:drawablePadding="5dp"
+            android:imeOptions="actionDone"
+            />
+</LinearLayout>
\ No newline at end of file
diff --git a/facebook/res/values-es/strings.xml b/facebook/res/values-es/strings.xml
index d73c5ab27..556a7a4f9 100644
--- a/facebook/res/values-es/strings.xml
+++ b/facebook/res/values-es/strings.xml
@@ -17,14 +17,14 @@
 
 <resources>
     <string name="com_facebook_dialogloginactivity_ok_button">Aceptar</string>
-    <string name="com_facebook_loginview_log_out_button">Cerrar Sesión</string>
-    <string name="com_facebook_loginview_log_in_button">Iniciar Sesión</string>
+    <string name="com_facebook_loginview_log_out_button">Cerrar sesión</string>
+    <string name="com_facebook_loginview_log_in_button">Iniciar sesión con Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Sesión iniciada como: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Sesión iniciada con Facebook</string>
     <string name="com_facebook_loginview_log_out_action">Cerrar sesión</string>
     <string name="com_facebook_loginview_cancel_action">Cancelar</string>
     <string name="com_facebook_logo_content_description">Logo de Facebook</string>
-    <string name="com_facebook_usersettingsfragment_log_in_button">Iniciar Sesión&#8230;</string>
+    <string name="com_facebook_usersettingsfragment_log_in_button">Iniciar sesión&#8230;</string>
     <string name="com_facebook_usersettingsfragment_logged_in">Sesión iniciada</string>
     <string name="com_facebook_usersettingsfragment_not_logged_in">No has iniciado sesión</string>
     <string name="com_facebook_placepicker_subtitle_format">%1$s • %2$,d estuvieron aquí</string>
diff --git a/facebook/res/values-hdpi/dimens.xml b/facebook/res/values-hdpi/dimens.xml
new file mode 100644
index 000000000..638b2b318
--- /dev/null
+++ b/facebook/res/values-hdpi/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="com_facebook_picker_divider_width">1px</dimen>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values-he/strings.xml b/facebook/res/values-he/strings.xml
index 385330517..4ab34a3e2 100644
--- a/facebook/res/values-he/strings.xml
+++ b/facebook/res/values-he/strings.xml
@@ -17,7 +17,7 @@
 
 <resources>
     <string name="com_facebook_loginview_log_out_button">התנתק</string>
-    <string name="com_facebook_loginview_log_in_button">התחבר</string>
+    <string name="com_facebook_loginview_log_in_button">התחבר לפייסבוק</string>
     <string name="com_facebook_loginview_logged_in_as">מחובר בשם: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">מחובר באמצעות פייסבוק</string>
     <string name="com_facebook_loginview_log_out_action">התנתק</string>
diff --git a/facebook/res/values-iw/strings.xml b/facebook/res/values-iw/strings.xml
index 385330517..4ab34a3e2 100644
--- a/facebook/res/values-iw/strings.xml
+++ b/facebook/res/values-iw/strings.xml
@@ -17,7 +17,7 @@
 
 <resources>
     <string name="com_facebook_loginview_log_out_button">התנתק</string>
-    <string name="com_facebook_loginview_log_in_button">התחבר</string>
+    <string name="com_facebook_loginview_log_in_button">התחבר לפייסבוק</string>
     <string name="com_facebook_loginview_logged_in_as">מחובר בשם: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">מחובר באמצעות פייסבוק</string>
     <string name="com_facebook_loginview_log_out_action">התנתק</string>
diff --git a/facebook/res/values-ldpi/dimens.xml b/facebook/res/values-ldpi/dimens.xml
new file mode 100644
index 000000000..638b2b318
--- /dev/null
+++ b/facebook/res/values-ldpi/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="com_facebook_picker_divider_width">1px</dimen>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values-mdpi/dimens.xml b/facebook/res/values-mdpi/dimens.xml
new file mode 100644
index 000000000..638b2b318
--- /dev/null
+++ b/facebook/res/values-mdpi/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="com_facebook_picker_divider_width">1px</dimen>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values-xhdpi/dimens.xml b/facebook/res/values-xhdpi/dimens.xml
new file mode 100644
index 000000000..17ff433c2
--- /dev/null
+++ b/facebook/res/values-xhdpi/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="com_facebook_picker_divider_width">2px</dimen>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values/colors.xml b/facebook/res/values/colors.xml
new file mode 100644
index 000000000..3bf48f417
--- /dev/null
+++ b/facebook/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="com_facebook_picker_place_image_size">64dp</dimen>
+    <color name="com_facebook_picker_search_bar_background">#f5f5f7</color>
+    <color name="com_facebook_picker_search_bar_text">#bcbdc2</color>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values/drawables.xml b/facebook/res/values/drawables.xml
new file mode 100644
index 000000000..a8f6af01e
--- /dev/null
+++ b/facebook/res/values/drawables.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <drawable name="com_facebook_picker_default_separator_color">#33464c59</drawable>
+</resources>
\ No newline at end of file
diff --git a/facebook/res/values/strings.xml b/facebook/res/values/strings.xml
index 8b09d84c1..022d85c80 100644
--- a/facebook/res/values/strings.xml
+++ b/facebook/res/values/strings.xml
@@ -17,16 +17,16 @@
 
 <resources>
     <string name="com_facebook_dialogloginactivity_ok_button">OK</string>
-    <string name="com_facebook_loginview_log_out_button">Log Out</string>
-    <string name="com_facebook_loginview_log_in_button">Log In</string>
+    <string name="com_facebook_loginview_log_out_button">Log out</string>
+    <string name="com_facebook_loginview_log_in_button">Log in with Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Logged in as: %1$s</string>
     <string name="com_facebook_loginview_logged_in_using_facebook">Logged in using Facebook</string>
-    <string name="com_facebook_loginview_log_out_action">Log Out</string>
+    <string name="com_facebook_loginview_log_out_action">Log out</string>
     <string name="com_facebook_loginview_cancel_action">Cancel</string>
     <string name="com_facebook_logo_content_description">Facebook Logo</string>
-    <string name="com_facebook_usersettingsfragment_log_in_button">Log In&#8230;</string>
-    <string name="com_facebook_usersettingsfragment_logged_in">Logged In</string>
-    <string name="com_facebook_usersettingsfragment_not_logged_in">Not Logged In</string>
+    <string name="com_facebook_usersettingsfragment_log_in_button">Log in&#8230;</string>
+    <string name="com_facebook_usersettingsfragment_logged_in">Logged in</string>
+    <string name="com_facebook_usersettingsfragment_not_logged_in">Not logged in</string>
     <string name="com_facebook_placepicker_subtitle_format">%1$s • %2$,d were here</string>
     <string name="com_facebook_placepicker_subtitle_catetory_only_format">%1$s</string>
     <string name="com_facebook_placepicker_subtitle_were_here_only_format">%1$,d were here</string>
diff --git a/facebook/res/values/styles.xml b/facebook/res/values/styles.xml
index 77fcb48ea..aafc79431 100644
--- a/facebook/res/values/styles.xml
+++ b/facebook/res/values/styles.xml
@@ -23,13 +23,12 @@
     <color name="com_facebook_usersettingsfragment_not_connected_text_color">#A6AED7</color>
     <dimen name="com_facebook_usersettingsfragment_profile_picture_width">64dp</dimen>
     <dimen name="com_facebook_usersettingsfragment_profile_picture_height">64dp</dimen>
-    
-    <dimen name="com_facebook_loginview_padding_left">42dp</dimen>
-    <dimen name="com_facebook_loginview_padding_right">0dp</dimen>
-    <dimen name="com_facebook_loginview_padding_top">0dp</dimen>
-    <dimen name="com_facebook_loginview_padding_bottom">0dp</dimen>
-    <dimen name="com_facebook_loginview_width">205dp</dimen>
-    <dimen name="com_facebook_loginview_height">44dp</dimen>
+
+    <dimen name="com_facebook_loginview_padding_left">12dip</dimen>
+    <dimen name="com_facebook_loginview_padding_right">16dp</dimen>
+    <dimen name="com_facebook_loginview_padding_top">12dp</dimen>
+    <dimen name="com_facebook_loginview_padding_bottom">12dp</dimen>
+    <dimen name="com_facebook_loginview_compound_drawable_padding">12dp</dimen>
     <color name="com_facebook_loginview_text_color">#FFFFFF</color>
     <dimen name="com_facebook_loginview_text_size">16.0sp</dimen>
 
@@ -38,11 +37,12 @@
     <dimen name="com_facebook_profilepictureview_preset_size_large">180dp</dimen>
 
     <style name="com_facebook_loginview_default_style" parent="@android:style/Widget.Button">
-        <item name="android:width">@dimen/com_facebook_loginview_width</item>
-        <item name="android:height">@dimen/com_facebook_loginview_height</item>
-        <item name="android:background">@drawable/com_facebook_loginbutton_blue</item>
+        <item name="android:layout_width">wrap_content</item>
+        <item name="android:layout_height">wrap_content</item>
+        <item name="android:background">@drawable/com_facebook_button_blue</item>
         <item name="android:textColor">@color/com_facebook_loginview_text_color</item>
         <item name="android:textSize">@dimen/com_facebook_loginview_text_size</item>
+        <item name="android:textStyle">bold</item>
         <item name="android:paddingLeft">@dimen/com_facebook_loginview_padding_left</item>
         <item name="android:gravity">center</item>
     </style>
diff --git a/facebook/src/com/facebook/AccessToken.java b/facebook/src/com/facebook/AccessToken.java
index 2e10bd0d5..374a2b498 100644
--- a/facebook/src/com/facebook/AccessToken.java
+++ b/facebook/src/com/facebook/AccessToken.java
@@ -20,6 +20,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 import android.text.TextUtils;
+import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
 
@@ -39,7 +40,7 @@
  * useful to deal with access tokens directly. Factory methods are provided to construct access tokens.
  * <p/>
  * For more information on access tokens, see
- * https://developers.facebook.com/docs/concepts/login/access-tokens-and-types/.
+ * <a href="https://developers.facebook.com/docs/facebook-login/access-tokens/">Access Tokens</a>.
  */
 public final class AccessToken implements Serializable {
     private static final long serialVersionUID = 1L;
diff --git a/facebook/src/com/facebook/AppEventsConstants.java b/facebook/src/com/facebook/AppEventsConstants.java
new file mode 100644
index 000000000..24fd13872
--- /dev/null
+++ b/facebook/src/com/facebook/AppEventsConstants.java
@@ -0,0 +1,168 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+/**
+ * Predefined event and parameter names for logging events common to many apps. Logging occurs through the
+ * {@link AppEventsLogger#logEvent(String, android.os.Bundle)} family of methods.
+ */
+public class AppEventsConstants {
+    // Event names
+
+    // General purpose
+
+    /** Log this event when an app is being activated. */
+    public static final String EVENT_NAME_ACTIVATED_APP = "fb_mobile_activate_app";
+
+    /** Log this event when a user has completed registration with the app. */
+    public static final String EVENT_NAME_COMPLETED_REGISTRATION = "fb_mobile_complete_registration";
+
+    /** Log this event when a user has viewed a form of content in the app. */
+    public static final String EVENT_NAME_VIEWED_CONTENT = "fb_mobile_content_view";
+
+    /** Log this event when a user has performed a search within the app. */
+    public static final String EVENT_NAME_SEARCHED = "fb_mobile_search";
+
+    /**
+     * Log this event when the user has rated an item in the app.
+     * The valueToSum passed to logEvent should be the numeric rating.
+     */
+    public static final String EVENT_NAME_RATED = "fb_mobile_rate";
+
+    /** Log this event when the user has completed a tutorial in the app. */
+    public static final String EVENT_NAME_COMPLETED_TUTORIAL = "fb_mobile_tutorial_completion";
+
+    // Ecommerce related
+
+    /**
+     * Log this event when the user has added an item to their cart.
+     * The valueToSum passed to logEvent should be the item's price.
+     */
+    public static final String EVENT_NAME_ADDED_TO_CART = "fb_mobile_add_to_cart";
+
+    /**
+     * Log this event when the user has added an item to their wishlist.
+     * The valueToSum passed to logEvent should be the item's price.
+     */
+    public static final String EVENT_NAME_ADDED_TO_WISHLIST = "fb_mobile_add_to_wishlist";
+
+    /**
+     * Log this event when the user has entered the checkout process.
+     * The valueToSum passed to logEvent should be the total price in the cart.
+     */
+    public static final String EVENT_NAME_INITIATED_CHECKOUT = "fb_mobile_initiated_checkout";
+
+    /** Log this event when the user has entered their payment info. */
+    public static final String EVENT_NAME_ADDED_PAYMENT_INFO = "fb_mobile_add_payment_info";
+
+    /**
+     * Log this event when the user has completed a purchase.
+     * The {@link AppEventsLogger#logPurchase(java.math.BigDecimal, java.util.Currency)} method is a shortcut for
+     * logging this event.
+     */
+    public static final String EVENT_NAME_PURCHASED = "fb_mobile_purchase";
+
+    // Gaming related
+
+    /** Log this event when the user has achieved a level in the app. */
+    public static final String EVENT_NAME_ACHIEVED_LEVEL = "fb_mobile_level_achieved";
+
+    /** Log this event when the user has unlocked an achievement in the app. */
+    public static final String EVENT_NAME_UNLOCKED_ACHIEVEMENT = "fb_mobile_achievement_unlocked";
+
+    /**
+     * Log this event when the user has spent app credits.
+     * The valueToSum passed to logEvent should be the number of credits spent.
+     */
+    public static final String EVENT_NAME_SPENT_CREDITS = "fb_mobile_spent_credits";
+
+
+
+
+    // Event parameters
+
+    /**
+     * Parameter key used to specify currency used with logged event.  E.g. "USD", "EUR", "GBP".
+     * See ISO-4217 for specific values.  One reference for these is <http://en.wikipedia.org/wiki/ISO_4217>.
+     */
+    public static final String EVENT_PARAM_CURRENCY = "fb_currency";
+
+    /**
+     * Parameter key used to specify method user has used to register for the app, e.g., "Facebook", "email",
+     * "Twitter", etc.
+     */
+    public static final String EVENT_PARAM_REGISTRATION_METHOD = "fb_registration_method";
+
+    /**
+     * Parameter key used to specify a generic content type/family for the logged event, e.g. "music", "photo",
+     * "video".  Options to use will vary based upon what the app is all about.
+     */
+    public static final String EVENT_PARAM_CONTENT_TYPE = "fb_content_type";
+
+    /**
+     * Parameter key used to specify an ID for the specific piece of content being logged about.
+     * Could be an EAN, article identifier, etc., depending on the nature of the app.
+     */
+    public static final String EVENT_PARAM_CONTENT_ID = "fb_content_id";
+
+    /** Parameter key used to specify the string provided by the user for a search operation. */
+    public static final String EVENT_PARAM_SEARCH_STRING = "fb_search_string";
+
+    /**
+     * Parameter key used to specify whether the activity being logged about was successful or not.
+     * EVENT_PARAM_VALUE_YES and EVENT_PARAM_VALUE_NO are good canonical values to use for this parameter.
+     */
+    public static final String EVENT_PARAM_SUCCESS = "fb_success";
+
+    /**
+     * Parameter key used to specify the maximum rating available for the EVENT_NAME_RATE event.
+     * E.g., "5" or "10".
+     */
+    public static final String EVENT_PARAM_MAX_RATING_VALUE = "fb_max_rating_value";
+
+    /**
+     * Parameter key used to specify whether payment info is available for the EVENT_NAME_INITIATED_CHECKOUT event.
+     * EVENT_PARAM_VALUE_YES and EVENT_PARAM_VALUE_NO are good canonical values to use for this parameter.
+     */
+    public static final String EVENT_PARAM_PAYMENT_INFO_AVAILABLE = "fb_payment_info_available";
+
+    /**
+     * Parameter key used to specify how many items are being processed for an EVENT_NAME_INITIATED_CHECKOUT
+     * or EVENT_NAME_PURCHASE event.
+     */
+    public static final String EVENT_PARAM_NUM_ITEMS = "fb_num_items";
+
+    /** Parameter key used to specify the level achieved in a EVENT_NAME_LEVEL_ACHIEVED event. */
+    public static final String EVENT_PARAM_LEVEL = "fb_level";
+
+    /**
+     * Parameter key used to specify a description appropriate to the event being logged.
+     * E.g., the name of the achievement unlocked in the EVENT_NAME_ACHIEVEMENT_UNLOCKED event.
+     */
+    public static final String EVENT_PARAM_DESCRIPTION = "fb_description";
+
+
+
+    // Parameter values
+
+    /** Yes-valued parameter value to be used with parameter keys that need a Yes/No value */
+    public static final String EVENT_PARAM_VALUE_YES = "1";
+
+    /** No-valued parameter value to be used with parameter keys that need a Yes/No value */
+    public static final String EVENT_PARAM_VALUE_NO = "0";
+
+}
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
new file mode 100644
index 000000000..0081ec8a8
--- /dev/null
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -0,0 +1,1302 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import com.facebook.internal.*;
+import com.facebook.model.GraphObject;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.*;
+import java.math.BigDecimal;
+import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
+
+
+/**
+ * <p>
+ * The AppEventsLogger class allows the developer to log various types of events back to Facebook.  In order to log
+ * events, the app must create an instance of this class via a {@link #newLogger newLogger} method, and then call
+ * the various "log" methods off of that.
+ * </p>
+ * <p>
+ * This client-side event logging is then available through Facebook App Insights
+ * and for use with Facebook Ads conversion tracking and optimization.
+ * </p>
+ * <p>
+ * The AppEventsLogger class has a few related roles:
+ * <ul>
+ * <li>
+ * Logging predefined and application-defined events to Facebook App Insights with a
+ * numeric value to sum across a large number of events, and an optional set of key/value
+ * parameters that define "segments" for this event (e.g., 'purchaserStatus' : 'frequent', or
+ * 'gamerLevel' : 'intermediate').  These events may also be used for ads conversion tracking,
+ * optimization, and other ads related targeting in the future.
+ * </li>
+ * <li>
+ * Methods that control the way in which events are flushed out to the Facebook servers.
+ * </li>
+ * </ul>
+ * Here are some important characteristics of the logging mechanism provided by AppEventsLogger:
+ * <ul>
+ * <li>
+ * Events are not sent immediately when logged.  They're cached and flushed out to the Facebook servers
+ * in a number of situations:
+ * <ul>
+ * <li>when an event count threshold is passed (currently 100 logged events).</li>
+ * <li>when a time threshold is passed (currently 60 seconds).</li>
+ * <li>when an app has gone to background and is then brought back to the foreground.</li>
+ * </ul>
+ * <li>
+ * Events will be accumulated when the app is in a disconnected state, and sent when the connection is
+ * restored and one of the above 'flush' conditions are met.
+ * </li>
+ * <li>
+ * The AppEventsLogger class is intended to be used from the thread it was created on.  Multiple AppEventsLoggers
+ * may be created on other threads if desired.
+ * </li>
+ * <li>
+ * The developer can call the setFlushBehavior method to force the flushing of events to only
+ * occur on an explicit call to the `flush` method.
+ * </li>
+ * <li>
+ * The developer can turn on console debug output for event logging and flushing to the server
+ * Settings.addLoggingBehavior(LoggingBehavior.APP_EVENTS);
+ * </li>
+ * </ul>
+ * Some things to note when logging events:
+ * <ul>
+ * <li>
+ * There is a limit on the number of unique event names an app can use, on the order of 300.
+ * </li>
+ * <li>
+ * There is a limit to the number of unique parameter names in the provided parameters that can
+ * be used per event, on the order of 10.  This is not just for an individual call, but for all
+ * invocations for that eventName.
+ * </li>
+ * <li>
+ * Event names and parameter names (the keys in the NSDictionary) must be between 2 and 40 characters, and
+ * must consist of alphanumeric characters, _, -, or spaces.
+ * </li>
+ * <li>
+ * The length of each parameter value can be no more than on the order of 100 characters.
+ * </li>
+ * </ul>
+ */
+public class AppEventsLogger {
+    // Enums
+
+    /**
+     * Controls when an AppEventsLogger sends log events to the server
+     */
+    public enum FlushBehavior {
+        /**
+         * Flush automatically: periodically (once a minute or after every 100 events), and always at app reactivation.
+         * This is the default value.
+         */
+        AUTO,
+
+        /**
+         * Only flush when AppEventsLogger.flush() is explicitly invoked.
+         */
+        EXPLICIT_ONLY,
+    }
+
+    private enum SuppressionTimeoutBehavior {
+        // Successfully logging an event will reset the timeout period (i.e., events will log no more than every N
+        // seconds).
+        RESET_TIMEOUT_WHEN_LOG_SUCCESSFUL,
+        // Attempting to log an event, even if it is suppressed, will reset the timeout period (i.e., events will not
+        // be logged until they have been "silent" for at least N seconds).
+        RESET_TIMEOUT_WHEN_LOG_ATTEMPTED,
+    }
+
+    private static class EventSuppression {
+        // Timeout period in seconds
+        private int timeoutPeriod;
+        private SuppressionTimeoutBehavior behavior;
+
+        EventSuppression(int timeoutPeriod, SuppressionTimeoutBehavior behavior) {
+            this.timeoutPeriod = timeoutPeriod;
+            this.behavior = behavior;
+        }
+
+        int getTimeoutPeriod() {
+            return timeoutPeriod;
+        }
+
+        SuppressionTimeoutBehavior getBehavior() {
+            return behavior;
+        }
+    }
+
+    // Constants
+    private static final String TAG = AppEventsLogger.class.getCanonicalName();
+
+    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER                  = 100;
+    private static final int FLUSH_PERIOD_IN_SECONDS                               = 60;
+    private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
+    private static final int APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS            = 5 * 60;
+
+    // Instance member variables
+    private final Context context;
+    private final AccessTokenAppIdPair accessTokenAppId;
+
+    private static Map<AccessTokenAppIdPair, SessionEventsState> stateMap =
+            new ConcurrentHashMap<AccessTokenAppIdPair, SessionEventsState>();
+    private static Timer flushTimer;
+    private static Timer supportsAttributionRecheckTimer;
+    private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
+    private static boolean requestInFlight;
+    private static Context applicationContext;
+    private static Object staticLock = new Object();
+    private static String hashedDeviceAndAppId;
+    private static Map<String, Date> mapEventsToSuppressionTime = new HashMap<String, Date>();
+    @SuppressWarnings("serial")
+    private static Map<String, EventSuppression> mapEventNameToSuppress = new HashMap<String, EventSuppression>() {
+        {
+            put(AppEventsConstants.EVENT_NAME_ACTIVATED_APP,
+                    new EventSuppression(APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS,
+                            SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED));
+        }
+    };
+
+    // Rather than retaining Sessions, we extract the information we need and track app events by
+    // application ID and access token (which may be null for Session-less calls). This avoids needing to
+    // worry about Session lifecycle and also allows us to coalesce app events from different Sessions
+    // that have the same access token/app ID.
+    private static class AccessTokenAppIdPair implements Serializable {
+        private static final long serialVersionUID = 1L;
+        private final String accessToken;
+        private final String applicationId;
+
+        AccessTokenAppIdPair(Session session) {
+            this(session.getAccessToken(), session.getApplicationId());
+        }
+
+        AccessTokenAppIdPair(String accessToken, String applicationId) {
+            this.accessToken = Utility.isNullOrEmpty(accessToken) ? null : accessToken;
+            this.applicationId = applicationId;
+        }
+
+        String getAccessToken() {
+            return accessToken;
+        }
+
+        String getApplicationId() {
+            return applicationId;
+        }
+
+        @Override
+        public int hashCode() {
+            return (accessToken == null ? 0 : accessToken.hashCode()) ^
+                    (applicationId == null ? 0 : applicationId.hashCode());
+        }
+
+        @Override
+        public boolean equals(Object o) {
+            if (!(o instanceof AccessTokenAppIdPair)) {
+                return false;
+            }
+            AccessTokenAppIdPair p = (AccessTokenAppIdPair) o;
+            return Utility.areObjectsEqual(p.accessToken, accessToken) &&
+                    Utility.areObjectsEqual(p.applicationId, applicationId);
+        }
+
+        private static class SerializationProxyV1 implements Serializable {
+            private static final long serialVersionUID = -2488473066578201069L;
+            private final String accessToken;
+            private final String appId;
+
+            private SerializationProxyV1(String accessToken, String appId) {
+                this.accessToken = accessToken;
+                this.appId = appId;
+            }
+
+            private Object readResolve() {
+                return new AccessTokenAppIdPair(accessToken, appId);
+            }
+        }
+
+        private Object writeReplace() {
+            return new SerializationProxyV1(accessToken, applicationId);
+        }
+    }
+
+    /**
+     * This method is deprecated.  Use {@link Settings#getLimitEventAndDataUsage(Context)} instead.
+     */
+    @Deprecated
+    public static boolean getLimitEventUsage(Context context) {
+        return Settings.getLimitEventAndDataUsage(context);
+    }
+
+    /**
+     * This method is deprecated.  Use {@link Settings#setLimitEventAndDataUsage(Context, boolean)} instead.
+     */
+    @Deprecated
+    public static void setLimitEventUsage(Context context, boolean limitEventUsage) {
+        Settings.setLimitEventAndDataUsage(context, limitEventUsage);
+    }
+
+    /**
+     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be called whenever
+     * your app becomes active, typically in the onResume() method of each long-running Activity of your app.
+     *
+     * Use this method if your application ID is stored in application metadata, otherwise see
+     * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
+     *
+     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     */
+    public static void activateApp(Context context) {
+        activateApp(context, Utility.getMetadataApplicationId(context));
+    }
+
+    /**
+     * Notifies the events system that the app has launched & logs an activatedApp event.  Should be called whenever
+     * your app becomes active, typically in the onResume() method of each long-running Activity of your app.
+     *
+     * @param context   Used to access the attributionId for non-authenticated users.
+     *
+     * @param applicationId  The specific applicationId to report the activation for.
+     */
+    @SuppressWarnings("deprecation")
+    public static void activateApp(Context context, String applicationId) {
+        if (context == null || applicationId == null) {
+            throw new IllegalArgumentException("Both context and applicationId must be non-null");
+        }
+
+        // activateApp supercedes publishInstall in the public API, so we need to explicitly invoke it, since the server
+        // can't reliably infer install state for all conditions of an app activate.
+        Settings.publishInstallAsync(context, applicationId);
+
+        AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
+        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
+    }
+
+    /**
+     * Build an AppEventsLogger instance to log events through.  The Facebook app that these events are targeted at
+     * comes from this application's metadata. The application ID used to log events will be determined from
+     * the app ID specified in the package metadata.
+     *
+     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     *
+     * @return          AppEventsLogger instance to invoke log* methods on.
+     */
+    public static AppEventsLogger newLogger(Context context) {
+        return new AppEventsLogger(context, null, null);
+    }
+
+    /**
+     * Build an AppEventsLogger instance to log events through.
+     *
+     * @param context        Used to access the attributionId for non-authenticated users.
+     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
+     *                       will be used if it's open, otherwise the logging will happen against the default
+     *                       app ID specified via the app ID specified in the package metadata.
+     *
+     * @return          AppEventsLogger instance to invoke log* methods on.
+     */
+    public static AppEventsLogger newLogger(Context context, Session session) {
+        return new AppEventsLogger(context, null, session);
+    }
+
+    /**
+     * Build an AppEventsLogger instance to log events through.
+     *
+     * @param context        Used to access the attributionId for non-authenticated users.
+     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                       app ID specified in the package metadata will be used.
+     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
+     *                       will be used if it's open, otherwise the logging will happen against the specified
+     *                       app ID.
+     *
+     * @return          AppEventsLogger instance to invoke log* methods on.
+     */
+    public static AppEventsLogger newLogger(Context context, String applicationId, Session session) {
+        return new AppEventsLogger(context, applicationId, session);
+    }
+
+    /**
+     * Build an AppEventsLogger instance to log events that are attributed to the application but not to
+     * any particular Session.
+     *
+     * @param context        Used to access the attributionId for non-authenticated users.
+     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                       app ID specified
+     *                       in the package metadata will be used.
+     *
+     * @return          AppEventsLogger instance to invoke log* methods on.
+     */
+    public static AppEventsLogger newLogger(Context context, String applicationId) {
+        return new AppEventsLogger(context, applicationId, null);
+    }
+
+    /**
+     * The action used to indicate that a flush of app events has occurred. This should
+     * be used as an action in an IntentFilter and BroadcastReceiver registered with
+     * the {@link android.support.v4.content.LocalBroadcastManager}.
+     */
+    public static final String ACTION_APP_EVENTS_FLUSHED = "com.facebook.sdk.APP_EVENTS_FLUSHED";
+
+    public static final String APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED = "com.facebook.sdk.APP_EVENTS_NUM_EVENTS_FLUSHED";
+    public static final String APP_EVENTS_EXTRA_FLUSH_RESULT = "com.facebook.sdk.APP_EVENTS_FLUSH_RESULT";
+
+    /**
+     * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the server. This
+     * setting applies to all instances of AppEventsLogger.
+     * @return specified flush behavior.
+     */
+    public static FlushBehavior getFlushBehavior() {
+        synchronized (staticLock) {
+            return flushBehavior;
+        }
+    }
+
+    /**
+     * Set the behavior that this AppEventsLogger uses to determine when to flush logged events to the server. This
+     * setting applies to all instances of AppEventsLogger.
+     * @param flushBehavior the desired behavior.
+     */
+    public static void setFlushBehavior(FlushBehavior flushBehavior) {
+        synchronized (staticLock) {
+            AppEventsLogger.flushBehavior = flushBehavior;
+        }
+    }
+
+    /**
+     * Log an app event with the specified name.
+     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                  constants are applicable.
+     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                  have no more than ~300 distinct event names.
+      */
+    public void logEvent(String eventName) {
+        logEvent(eventName, null);
+    }
+
+    /**
+     * Log an app event with the specified name and the supplied value.
+     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                  constants are applicable.
+     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                  have no more than ~300 distinct event names.
+     *                  * @param eventName
+     * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
+     *                   instances of the event, so that average values can be determined, etc.
+     */
+    public void logEvent(String eventName, double valueToSum) {
+        logEvent(eventName, valueToSum, null);
+    }
+
+    /**
+     * Log an app event with the specified name and set of parameters.
+     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                  constants are applicable.
+     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                  have no more than ~300 distinct event names.
+     * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
+     *                   events via different parameter values.  You can log on the order of 10 parameters with each
+     *                   distinct eventName.  It's advisable to keep the number of unique values provided for each
+     *                   parameter in the, at most, thousands.  As an example, don't attempt to provide a unique
+     *                   parameter value for each unique user in your app.  You won't get meaningful aggregate reporting
+     *                   on so many parameter values.  The values in the bundles should be Strings or numeric values.
+     */
+    public void logEvent(String eventName, Bundle parameters) {
+        logEvent(eventName, null, parameters, false);
+    }
+
+    /**
+     * Log an app event with the specified name, supplied value, and set of parameters.
+     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                  constants are applicable.
+     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                  have no more than ~300 distinct event names.
+     * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
+     *                   instances of the event, so that average values can be determined, etc.
+     * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
+     *                   events via different parameter values.  You can log on the order of 10 parameters with each
+     *                   distinct eventName.  It's advisable to keep the number of unique values provided for each
+     *                   parameter in the, at most, thousands.  As an example, don't attempt to provide a unique
+     *                   parameter value for each unique user in your app.  You won't get meaningful aggregate reporting
+     *                   on so many parameter values.  The values in the bundles should be Strings or numeric values.
+     */
+    public void logEvent(String eventName, double valueToSum, Bundle parameters) {
+        logEvent(eventName, valueToSum, parameters, false);
+    }
+
+    /**
+     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
+     *
+     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency        Currency used to specify the amount.
+     */
+    public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
+        logPurchase(purchaseAmount, currency, null);
+    }
+
+    /**
+     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.  Additional
+     * detail about the purchase can be passed in through the parameters bundle.
+     *
+     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency        Currency used to specify the amount.
+     * @param parameters      Arbitrary additional information for describing this event.  Should have no more than
+     *                        10 entries, and keys should be mostly consistent from one purchase event to the next.
+     */
+    public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
+
+        if (purchaseAmount == null) {
+            notifyDeveloperError("purchaseAmount cannot be null");
+            return;
+        } else if (currency == null) {
+            notifyDeveloperError("currency cannot be null");
+            return;
+        }
+
+        if (parameters == null) {
+            parameters = new Bundle();
+        }
+        parameters.putString(AppEventsConstants.EVENT_PARAM_CURRENCY, currency.getCurrencyCode());
+
+        logEvent(AppEventsConstants.EVENT_NAME_PURCHASED, purchaseAmount.doubleValue(), parameters);
+        eagerFlush();
+    }
+
+    /**
+     * Explicitly flush any stored events to the server.  Implicit flushes may happen depending on the value
+     * of getFlushBehavior.  This method allows for explicit, app invoked flushing.
+     */
+    public void flush() {
+        flush(FlushReason.EXPLICIT);
+    }
+
+    /**
+     * Call this when the consuming Activity/Fragment receives an onStop() callback in order to persist any
+     * outstanding events to disk, so they may be flushed at a later time. The next flush (explicit or not)
+     * will check for any outstanding events and, if present, include them in that flush. Note that this call
+     * may trigger an I/O operation on the calling thread. Explicit use of this method is not necessary
+     * if the consumer is making use of {@link UiLifecycleHelper}, which will take care of making the call
+     * in its own onStop() callback.
+     */
+    public static void onContextStop() {
+        PersistedEvents.persistEvents(applicationContext, stateMap);
+    }
+
+    boolean isValidForSession(Session session) {
+        AccessTokenAppIdPair other = new AccessTokenAppIdPair(session);
+        return accessTokenAppId.equals(other);
+    }
+
+    /**
+     * This method is intended only for internal use by the Facebook SDK and other use is unsupported.
+     */
+    public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters) {
+        logEvent(eventName, valueToSum, parameters, true);
+    }
+
+    /**
+     * Returns the app ID this logger was configured to log to.
+     * @return the Facebook app ID
+     */
+    public String getApplicationId() {
+        return accessTokenAppId.getApplicationId();
+    }
+
+    //
+    // Private implementation
+    //
+
+    private enum FlushReason {
+        EXPLICIT,
+        TIMER,
+        SESSION_CHANGE,
+        PERSISTED_EVENTS,
+        EVENT_THRESHOLD,
+        EAGER_FLUSHING_EVENT,
+    }
+
+    private enum FlushResult {
+        SUCCESS,
+        SERVER_ERROR,
+        NO_CONNECTIVITY,
+        UNKNOWN_ERROR
+    }
+
+    /**
+     * Constructor is private, newLogger() methods should be used to build an instance.
+     */
+    private AppEventsLogger(Context context, String applicationId, Session session) {
+
+        Validate.notNull(context, "context");
+        this.context = context;
+
+        if (session == null) {
+            session = Session.getActiveSession();
+        }
+
+        if (session != null) {
+            accessTokenAppId = new AccessTokenAppIdPair(session);
+        } else {
+            if (applicationId == null) {
+                applicationId = Utility.getMetadataApplicationId(context);
+            }
+            accessTokenAppId = new AccessTokenAppIdPair(null, applicationId);
+        }
+
+        synchronized (staticLock) {
+
+            if (hashedDeviceAndAppId == null) {
+                hashedDeviceAndAppId = Utility.getHashedDeviceAndAppID(context, applicationId);
+            }
+
+            if (applicationContext == null) {
+                applicationContext = context.getApplicationContext();
+            }
+        }
+
+        initializeTimersIfNeeded();
+    }
+
+    private static void initializeTimersIfNeeded() {
+        synchronized (staticLock) {
+            if (flushTimer != null) {
+                return;
+            }
+            flushTimer = new Timer();
+            supportsAttributionRecheckTimer = new Timer();
+        }
+
+        flushTimer.schedule(
+                new TimerTask() {
+                    @Override
+                    public void run() {
+                        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
+                            flushAndWait(FlushReason.TIMER);
+                        }
+                    }
+                },
+                0,  // start immediately
+                FLUSH_PERIOD_IN_SECONDS * 1000);
+
+        supportsAttributionRecheckTimer.schedule(
+                new TimerTask() {
+                    @Override
+                    public void run() {
+                        Set<String> applicationIds = new HashSet<String>();
+                        synchronized (staticLock) {
+                            for (AccessTokenAppIdPair accessTokenAppId  : stateMap.keySet()) {
+                                applicationIds.add(accessTokenAppId.getApplicationId());
+                            }
+                        }
+                        for (String applicationId : applicationIds) {
+                            Utility.queryAppSettings(applicationId, true);
+                        }
+                    }
+                },
+                0,   // start immediately
+                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS * 1000);
+    }
+
+    private void logEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
+
+        AppEvent event = new AppEvent(eventName, valueToSum, parameters, isImplicitlyLogged);
+        logEvent(context, event, accessTokenAppId);
+    }
+
+    private static void logEvent(Context context, AppEvent event, AccessTokenAppIdPair accessTokenAppId) {
+        if(shouldSuppressEvent(event)) {
+            return;
+        }
+
+        SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
+        state.addEvent(event);
+
+        flushIfNecessary();
+    }
+
+    // This will also update the timestamp based on specified behavior.
+    private static boolean shouldSuppressEvent(AppEvent event) {
+        EventSuppression suppressionInfo = mapEventNameToSuppress.get(event.getName());
+        if (suppressionInfo == null) {
+            return false;
+        }
+
+        Date timestamp = mapEventsToSuppressionTime.get(event.getName());
+        boolean suppressed;
+        if (timestamp == null) {
+            suppressed = false;
+        } else {
+            long delta = new Date().getTime() - timestamp.getTime();
+            suppressed = delta < (suppressionInfo.getTimeoutPeriod() * 1000);
+        }
+
+        // Update the time if we're not suppressed, OR if we are suppressed but the behavior is to reset even on
+        // suppressed events.
+        if (!suppressed ||
+                suppressionInfo.getBehavior() == SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED) {
+            mapEventsToSuppressionTime.put(event.getName(), new Date());
+        }
+
+        return suppressed;
+    }
+
+    static void eagerFlush() {
+        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
+            flush(FlushReason.EAGER_FLUSHING_EVENT);
+        }
+    }
+
+    private static void flushIfNecessary() {
+        synchronized (staticLock) {
+            if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
+                if (getAccumulatedEventCount() > NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER) {
+                    flush(FlushReason.EVENT_THRESHOLD);
+                }
+            }
+        }
+    }
+
+    private static int getAccumulatedEventCount() {
+        synchronized (staticLock) {
+
+            int result = 0;
+            for (SessionEventsState state : stateMap.values()) {
+                result += state.getAccumulatedEventCount();
+            }
+            return result;
+        }
+    }
+
+    // Creates a new SessionEventsState if not already in the map.
+    private static SessionEventsState getSessionEventsState(Context context, AccessTokenAppIdPair accessTokenAppId) {
+        synchronized (staticLock) {
+            SessionEventsState state = stateMap.get(accessTokenAppId);
+            if (state == null) {
+                // Retrieve attributionId, but we will only send it if attribution is supported for the app.
+                String attributionId = Settings.getAttributionId(context.getContentResolver());
+
+                state = new SessionEventsState(attributionId, context.getPackageName(), hashedDeviceAndAppId);
+                stateMap.put(accessTokenAppId, state);
+            }
+            return state;
+        }
+    }
+
+    private static SessionEventsState getSessionEventsState(AccessTokenAppIdPair accessTokenAppId) {
+        synchronized (staticLock) {
+            return stateMap.get(accessTokenAppId);
+        }
+    }
+
+    private static void flush(final FlushReason reason) {
+
+        Settings.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                flushAndWait(reason);
+            }
+        });
+    }
+
+    private static void flushAndWait(final FlushReason reason) {
+
+        Set<AccessTokenAppIdPair> keysToFlush;
+        synchronized (staticLock) {
+            if (requestInFlight) {
+                return;
+            }
+            requestInFlight = true;
+            keysToFlush = new HashSet<AccessTokenAppIdPair>(stateMap.keySet());
+        }
+
+        accumulatePersistedEvents();
+
+        FlushStatistics flushResults = null;
+        try {
+            flushResults = buildAndExecuteRequests(reason, keysToFlush);
+        } catch (Exception e) {
+            Log.d(TAG, "Caught unexpected exception while flushing: " + e.toString());
+        }
+
+        synchronized (staticLock) {
+            requestInFlight = false;
+        }
+
+        if (flushResults != null) {
+            final Intent intent = new Intent(ACTION_APP_EVENTS_FLUSHED);
+            intent.putExtra(APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, flushResults.numEvents);
+            intent.putExtra(APP_EVENTS_EXTRA_FLUSH_RESULT, flushResults.result);
+            LocalBroadcastManager.getInstance(applicationContext).sendBroadcast(intent);
+        }
+    }
+
+    private static FlushStatistics buildAndExecuteRequests(FlushReason reason, Set<AccessTokenAppIdPair> keysToFlush) {
+        FlushStatistics flushResults = new FlushStatistics();
+
+        boolean limitEventUsage = Settings.getLimitEventAndDataUsage(applicationContext);
+
+        List<Request> requestsToExecute = new ArrayList<Request>();
+        for (AccessTokenAppIdPair accessTokenAppId : keysToFlush) {
+            SessionEventsState sessionEventsState = getSessionEventsState(accessTokenAppId);
+            if (sessionEventsState == null) {
+                continue;
+            }
+
+            Request request = buildRequestForSession(accessTokenAppId, sessionEventsState, limitEventUsage,
+                    flushResults);
+            if (request != null) {
+                requestsToExecute.add(request);
+            }
+        }
+
+        if (requestsToExecute.size() > 0) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Flushing %d events due to %s.",
+                    flushResults.numEvents,
+                    reason.toString());
+
+            for (Request request : requestsToExecute) {
+                // Execute the request synchronously. Callbacks will take care of handling errors and updating
+                // our final overall result.
+                request.executeAndWait();
+            }
+            return flushResults;
+        }
+
+        return null;
+    }
+
+    private static class FlushStatistics {
+        public int numEvents = 0;
+        public FlushResult result = FlushResult.SUCCESS;
+    }
+
+    private static Request buildRequestForSession(final AccessTokenAppIdPair accessTokenAppId,
+            final SessionEventsState sessionEventsState, final boolean limitEventUsage,
+            final FlushStatistics flushState) {
+        String applicationId = accessTokenAppId.getApplicationId();
+
+        Utility.FetchedAppSettings fetchedAppSettings = Utility.queryAppSettings(applicationId, false);
+
+        final Request postRequest = Request.newPostRequest(
+                null,
+                String.format("%s/activities", applicationId),
+                null,
+                null);
+
+        Bundle requestParameters = postRequest.getParameters();
+        if (requestParameters == null) {
+            requestParameters = new Bundle();
+        }
+        requestParameters.putString("access_token", accessTokenAppId.getAccessToken());
+        postRequest.setParameters(requestParameters);
+
+        int numEvents = sessionEventsState.populateRequest(postRequest, fetchedAppSettings.supportsImplicitLogging(),
+                fetchedAppSettings.supportsAttribution(), limitEventUsage);
+        if (numEvents == 0) {
+            return null;
+        }
+
+        flushState.numEvents += numEvents;
+
+        postRequest.setCallback(new Request.Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                handleResponse(accessTokenAppId, postRequest, response, sessionEventsState, flushState);
+            }
+        });
+
+        return postRequest;
+    }
+
+    private static void handleResponse(AccessTokenAppIdPair accessTokenAppId, Request request, Response response,
+            SessionEventsState sessionEventsState, FlushStatistics flushState) {
+        FacebookRequestError error = response.getError();
+        String resultDescription = "Success";
+
+        FlushResult flushResult = FlushResult.SUCCESS;
+
+        if (error != null) {
+            final int NO_CONNECTIVITY_ERROR_CODE = -1;
+            if (error.getErrorCode() == NO_CONNECTIVITY_ERROR_CODE) {
+                resultDescription = "Failed: No Connectivity";
+                flushResult = FlushResult.NO_CONNECTIVITY;
+            } else {
+                resultDescription = String.format("Failed:\n  Response: %s\n  Error %s",
+                        response.toString(),
+                        error.toString());
+                flushResult = FlushResult.SERVER_ERROR;
+            }
+        }
+
+        if (Settings.isLoggingBehaviorEnabled(LoggingBehavior.APP_EVENTS)) {
+            String eventsJsonString = (String) request.getTag();
+            String prettyPrintedEvents;
+
+            try {
+                JSONArray jsonArray = new JSONArray(eventsJsonString);
+                prettyPrintedEvents = jsonArray.toString(2);
+            } catch (JSONException exc) {
+                prettyPrintedEvents = "<Can't encode events for debug logging>";
+            }
+
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG,
+                    "Flush completed\nParams: %s\n  Result: %s\n  Events JSON: %s",
+                    request.getGraphObject().toString(),
+                    resultDescription,
+                    prettyPrintedEvents);
+        }
+
+        sessionEventsState.clearInFlightAndStats(error != null);
+
+        if (flushResult == FlushResult.NO_CONNECTIVITY) {
+            // We may call this for multiple requests in a batch, which is slightly inefficient since in principle
+            // we could call it once for all failed requests, but the impact is likely to be minimal.
+            // We don't call this for other server errors, because if an event failed because it was malformed, etc.,
+            // continually retrying it will cause subsequent events to not be logged either.
+            PersistedEvents.persistEvents(applicationContext, accessTokenAppId, sessionEventsState);
+        }
+
+        if (flushResult != FlushResult.SUCCESS) {
+            // We assume that connectivity issues are more significant to report than server issues.
+            if (flushState.result != FlushResult.NO_CONNECTIVITY) {
+                flushState.result = flushResult;
+            }
+        }
+    }
+
+    private static int accumulatePersistedEvents() {
+        PersistedEvents persistedEvents = PersistedEvents.readAndClearStore(applicationContext);
+
+        int result = 0;
+        for(AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
+            SessionEventsState sessionEventsState = getSessionEventsState(applicationContext, accessTokenAppId);
+
+            List<AppEvent> events = persistedEvents.getEvents(accessTokenAppId);
+            sessionEventsState.accumulatePersistedEvents(events);
+            result += events.size();
+        }
+
+        return result;
+    }
+
+    /**
+     * Invoke this method, rather than throwing an Exception, for situations where user/server input might reasonably
+     * cause this to occur, and thus don't want an exception thrown at production time, but do want logging
+     * notification.
+     */
+    private static void notifyDeveloperError(String message) {
+        Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "AppEvents", message);
+    }
+
+
+    //
+    // Deprecated Stuff
+    //
+
+
+    static class SessionEventsState {
+        private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
+        private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
+        private int numSkippedEventsDueToFullBuffer;
+        private String attributionId;
+        private String packageName;
+        private String hashedDeviceAndAppId;
+
+        public static final String EVENT_COUNT_KEY = "event_count";
+        public static final String ENCODED_EVENTS_KEY = "encoded_events";
+        public static final String NUM_SKIPPED_KEY = "num_skipped";
+
+        private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
+
+        public SessionEventsState(String attributionId, String packageName, String hashedDeviceAndAppId) {
+            this.attributionId = attributionId;
+            this.packageName = packageName;
+            this.hashedDeviceAndAppId = hashedDeviceAndAppId;
+        }
+
+        // Synchronize here and in other methods on this class, because could be coming in from different
+        // AppEventsLoggers on different threads pointing at the same session.
+        public synchronized void addEvent(AppEvent event) {
+            if (accumulatedEvents.size() + inFlightEvents.size() >= MAX_ACCUMULATED_LOG_EVENTS) {
+                numSkippedEventsDueToFullBuffer++;
+            } else {
+                accumulatedEvents.add(event);
+            }
+        }
+
+        public synchronized int getAccumulatedEventCount() {
+            return accumulatedEvents.size();
+        }
+
+        public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
+            if (moveToAccumulated) {
+                accumulatedEvents.addAll(inFlightEvents);
+            }
+            inFlightEvents.clear();
+            numSkippedEventsDueToFullBuffer = 0;
+        }
+
+        public int populateRequest(Request request, boolean includeImplicitEvents,
+                boolean includeAttribution, boolean limitEventUsage) {
+
+            int numSkipped;
+            JSONArray jsonArray;
+            synchronized (this) {
+                numSkipped = numSkippedEventsDueToFullBuffer;
+
+                // move all accumulated events to inFlight.
+                inFlightEvents.addAll(accumulatedEvents);
+                accumulatedEvents.clear();
+
+                jsonArray = new JSONArray();
+                for (AppEvent event : inFlightEvents) {
+                    if (includeImplicitEvents || !event.getIsImplicit()) {
+                        jsonArray.put(event.getJSONObject());
+                    }
+                }
+
+                if (jsonArray.length() == 0) {
+                    return 0;
+                }
+            }
+
+            populateRequest(request, numSkipped, jsonArray, includeAttribution, limitEventUsage);
+            return jsonArray.length();
+        }
+
+        public synchronized List<AppEvent> getEventsToPersist() {
+            // We will only persist accumulated events, not ones currently in-flight. This means if an in-flight
+            // request fails, those requests will not be persisted and thus might be lost if the process terminates
+            // while the flush is in progress.
+            List<AppEvent> result = accumulatedEvents;
+            accumulatedEvents = new ArrayList<AppEvent>();
+            return result;
+        }
+
+        public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
+            // We won't skip events due to a full buffer, since we already accumulated them once and persisted
+            // them. But they will count against the buffer size when further events are accumulated.
+            accumulatedEvents.addAll(events);
+        }
+
+        private void populateRequest(Request request, int numSkipped, JSONArray events, boolean includeAttribution,
+                boolean limitEventUsage) {
+            GraphObject publishParams = GraphObject.Factory.create();
+            publishParams.setProperty("event", "CUSTOM_APP_EVENTS");
+
+            if (numSkippedEventsDueToFullBuffer > 0) {
+                publishParams.setProperty("num_skipped_events", numSkipped);
+            }
+
+            if (includeAttribution) {
+                Utility.setAppEventAttributionParameters(publishParams, attributionId,
+                        hashedDeviceAndAppId, limitEventUsage);
+            }
+
+            publishParams.setProperty("application_package_name", packageName);
+
+            request.setGraphObject(publishParams);
+
+            Bundle requestParameters = request.getParameters();
+            if (requestParameters == null) {
+                requestParameters = new Bundle();
+            }
+
+            String jsonString = events.toString();
+            if (jsonString != null) {
+                requestParameters.putByteArray("custom_events_file", getStringAsByteArray(jsonString));
+                request.setTag(jsonString);
+            }
+            request.setParameters(requestParameters);
+        }
+
+        private byte[] getStringAsByteArray(String jsonString) {
+            byte[] jsonUtf8 = null;
+            try {
+                jsonUtf8 = jsonString.getBytes("UTF-8");
+            } catch (UnsupportedEncodingException e) {
+                // shouldn't happen, but just in case:
+                Utility.logd("Encoding exception: ", e);
+            }
+            return jsonUtf8;
+        }
+    }
+
+    static class AppEvent implements Serializable {
+        private static final long serialVersionUID = 1L;
+
+        private JSONObject jsonObject;
+        private boolean isImplicit;
+        private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
+        private String name;
+
+        public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
+
+            validateIdentifier(eventName);
+
+            this.name = eventName;
+
+            isImplicit = isImplicitlyLogged;
+            jsonObject = new JSONObject();
+
+            try {
+
+                jsonObject.put("_eventName", eventName);
+                jsonObject.put("_logTime", System.currentTimeMillis() / 1000);
+
+                if (valueToSum != null) {
+                    jsonObject.put("_valueToSum", valueToSum.doubleValue());
+                }
+
+                if (isImplicit) {
+                    jsonObject.put("_implicitlyLogged", "1");
+                }
+
+                String appVersion = Settings.getAppVersion();
+                if (appVersion != null) {
+                    jsonObject.put("_appVersion", appVersion);
+                }
+
+                if (parameters != null) {
+                    for (String key : parameters.keySet()) {
+
+                        validateIdentifier(key);
+
+                        Object value = parameters.get(key);
+                        if (!(value instanceof String) && !(value instanceof Number)) {
+                            throw new FacebookException(
+                                    String.format("Parameter value '%s' for key '%s' should be a string or a numeric type.",
+                                            value, key));
+                        }
+
+                        jsonObject.put(key, value.toString());
+                    }
+                }
+
+                if (!isImplicit) {
+                    Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                            "Created app event '%s'", jsonObject.toString());
+                }
+            } catch (JSONException jsonException) {
+
+                // If any of the above failed, just consider this an illegal event.
+                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                        "JSON encoding for app event failed: '%s'", jsonException.toString());
+                jsonObject = null;
+
+            }
+        }
+
+        public String getName() {
+            return name;
+        }
+
+        private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
+            jsonObject = new JSONObject(jsonString);
+            this.isImplicit = isImplicit;
+        }
+
+        public boolean getIsImplicit() { return isImplicit; }
+
+        public JSONObject getJSONObject() {
+            return jsonObject;
+        }
+
+        // throw exception if not valid.
+        private void validateIdentifier(String identifier) {
+
+            // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen, and space (but no
+            // hyphen or space in the first position).
+            final String regex = "^[0-9a-zA-Z_]+[0-9a-zA-Z _-]*$";
+
+            final int MAX_IDENTIFIER_LENGTH = 40;
+            if (identifier == null || identifier.length() == 0 || identifier.length() > MAX_IDENTIFIER_LENGTH) {
+                if (identifier == null) {
+                    identifier = "<None Provided>";
+                }
+                throw new FacebookException(
+                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH));
+            }
+
+            boolean alreadyValidated = false;
+            synchronized (validatedIdentifiers) {
+                alreadyValidated = validatedIdentifiers.contains(identifier);
+            }
+
+            if (!alreadyValidated) {
+                if (identifier.matches(regex)) {
+                    synchronized (validatedIdentifiers) {
+                        validatedIdentifiers.add(identifier);
+                    }
+                } else {
+                    throw new FacebookException(
+                            String.format("Skipping event named '%s' due to illegal name - must be under 40 chars " +
+                                          "and alphanumeric, _, - or space, and not start with a space or hyphen.",
+                                          identifier));
+                }
+            }
+
+        }
+
+        private static class SerializationProxyV1 implements Serializable {
+            private static final long serialVersionUID = -2488473066578201069L;
+            private final String jsonString;
+            private final boolean isImplicit;
+
+            private SerializationProxyV1(String jsonString, boolean isImplicit) {
+                this.jsonString = jsonString;
+                this.isImplicit = isImplicit;
+            }
+
+            private Object readResolve() throws JSONException {
+                return new AppEvent(jsonString, isImplicit);
+            }
+        }
+
+        private Object writeReplace() {
+            return new SerializationProxyV1(jsonObject.toString(), isImplicit);
+        }
+
+        @Override
+        public String toString() {
+            return String.format("\"%s\", implicit: %b, json: %s", jsonObject.optString("_eventName"),
+                    isImplicit, jsonObject.toString());
+        }
+    }
+
+    // Read/write operations are thread-safe/atomic across all instances of PersistedEvents, but modifications
+    // to any individual instance are not thread-safe.
+    static class PersistedEvents {
+        static final String PERSISTED_EVENTS_FILENAME = "AppEventsLogger.persistedevents";
+
+        private static Object staticLock = new Object();
+
+        private Context context;
+        private HashMap<AccessTokenAppIdPair, List<AppEvent>> persistedEvents =
+                new HashMap<AccessTokenAppIdPair, List<AppEvent>>();
+
+        private PersistedEvents(Context context) {
+            this.context = context;
+        }
+
+        public static PersistedEvents readAndClearStore(Context context) {
+            synchronized (staticLock) {
+                PersistedEvents persistedEvents = new PersistedEvents(context);
+
+                persistedEvents.readAndClearStore();
+
+                return persistedEvents;
+            }
+        }
+        public static void persistEvents(Context context, AccessTokenAppIdPair accessTokenAppId,
+                SessionEventsState eventsToPersist) {
+            Map<AccessTokenAppIdPair, SessionEventsState> map = new HashMap<AccessTokenAppIdPair, SessionEventsState>();
+            map.put(accessTokenAppId, eventsToPersist);
+            persistEvents(context, map);
+        }
+
+        public static void persistEvents(Context context,
+                Map<AccessTokenAppIdPair, SessionEventsState> eventsToPersist) {
+            synchronized (staticLock) {
+                // Note that we don't track which instance of AppEventsLogger added a particular event to
+                // SessionEventsState; when a particular Context is being destroyed, we'll persist all accumulated
+                // events. More sophisticated tracking could be done to try to reduce unnecessary persisting of events,
+                // but the overall number of events is not expected to be large.
+                PersistedEvents persistedEvents = readAndClearStore(context);
+
+                for (Map.Entry<AccessTokenAppIdPair, SessionEventsState> entry : eventsToPersist.entrySet()) {
+                    List<AppEvent> events = entry.getValue().getEventsToPersist();
+                    if (events.size() == 0) {
+                        continue;
+                    }
+
+                    persistedEvents.addEvents(entry.getKey(), events);
+                }
+
+                persistedEvents.write();
+            }
+        }
+
+        public Set<AccessTokenAppIdPair> keySet() {
+            return persistedEvents.keySet();
+        }
+
+        public List<AppEvent> getEvents(AccessTokenAppIdPair accessTokenAppId) {
+            return persistedEvents.get(accessTokenAppId);
+        }
+
+        private void write() {
+            ObjectOutputStream oos = null;
+            try {
+                oos = new ObjectOutputStream(
+                        new BufferedOutputStream(context.openFileOutput(PERSISTED_EVENTS_FILENAME, 0)));
+                oos.writeObject(persistedEvents);
+            } catch (Exception e) {
+                Log.d(TAG, "Got unexpected exception: " + e.toString());
+            } finally {
+                Utility.closeQuietly(oos);
+            }
+        }
+
+        private void readAndClearStore() {
+            ObjectInputStream ois = null;
+            try {
+                ois = new ObjectInputStream(
+                        new BufferedInputStream(context.openFileInput(PERSISTED_EVENTS_FILENAME)));
+
+                @SuppressWarnings("unchecked")
+                HashMap<AccessTokenAppIdPair, List<AppEvent>> obj =
+                        (HashMap<AccessTokenAppIdPair, List<AppEvent>>) ois.readObject();
+
+                // Note: We delete the store before we store the events; this means we'd prefer to lose some
+                // events in the case of exception rather than potentially log them twice.
+                context.getFileStreamPath(PERSISTED_EVENTS_FILENAME).delete();
+                persistedEvents = obj;
+            } catch (FileNotFoundException e) {
+                // Expected if we never persisted any events.
+            } catch (Exception e) {
+                Log.d(TAG, "Got unexpected exception: " + e.toString());
+            } finally {
+                Utility.closeQuietly(ois);
+            }
+        }
+
+        public void addEvents(AccessTokenAppIdPair accessTokenAppId, List<AppEvent> eventsToPersist) {
+            if (!persistedEvents.containsKey(accessTokenAppId)) {
+                persistedEvents.put(accessTokenAppId, new ArrayList<AppEvent>());
+            }
+            persistedEvents.get(accessTokenAppId).addAll(eventsToPersist);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/AppLinkData.java b/facebook/src/com/facebook/AppLinkData.java
new file mode 100644
index 000000000..2c68b04cc
--- /dev/null
+++ b/facebook/src/com/facebook/AppLinkData.java
@@ -0,0 +1,361 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.Log;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.PlatformServiceClient;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Iterator;
+
+/**
+ * Class to encapsulate an app link, and provide methods for constructing the data from various sources
+ */
+public class AppLinkData {
+
+    /**
+     * Key that should be used to pull out the UTC Unix tap-time from the arguments for this app link.
+     */
+    public static final String ARGUMENTS_TAPTIME_KEY = "com.facebook.platform.APPLINK_TAP_TIME_UTC";
+    /**
+     * Key that should be used to get the "referer_data" field for this app link.
+     */
+    public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
+
+    static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
+    private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
+    private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
+    private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
+    private static final String APPLINK_VERSION_KEY = "version";
+    private static final String BRIDGE_ARGS_METHOD_KEY = "method";
+    private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
+    private static final String METHOD_ARGS_REF_KEY = "ref";
+    private static final String REFERER_DATA_REF_KEY = "fb_ref";
+    private static final String TAG = AppLinkData.class.getCanonicalName();
+
+    private String ref;
+    private Uri targetUri;
+    private JSONObject arguments;
+    private Bundle argumentBundle;
+
+    /**
+     * Asynchronously fetches app link information that might have been stored for use
+     * after installation of the app
+     * @param context The context
+     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null if none is
+     *                          available.  Must not be null.
+     */
+    public static void fetchDeferredAppLinkData(Context context, CompletionHandler completionHandler) {
+        fetchDeferredAppLinkData(context, null, completionHandler);
+    }
+
+    /**
+     * Asynchronously fetches app link information that might have been stored for use
+     * after installation of the app
+     * @param context The context
+     * @param applicationId Facebook application Id. If null, it is taken from the manifest
+     * @param completionHandler CompletionHandler to be notified with the AppLinkData object or null if none is
+     *                          available.  Must not be null.
+     */
+    public static void fetchDeferredAppLinkData(
+            Context context,
+            String applicationId,
+            final CompletionHandler completionHandler) {
+        Validate.notNull(context, "context");
+        Validate.notNull(completionHandler, "completionHandler");
+
+        if (applicationId == null) {
+            applicationId = Utility.getMetadataApplicationId(context);
+        }
+
+        Validate.notNull(applicationId, "applicationId");
+
+        DeferredAppLinkDataClient client = new DeferredAppLinkDataClient(context, applicationId);
+        DeferredAppLinkDataClient.CompletedListener callback = new DeferredAppLinkDataClient.CompletedListener() {
+            @Override
+            public void completed(Bundle result) {
+                AppLinkData appLinkData = null;
+                if (result != null) {
+                    final String appLinkArgsJsonString = result.getString(BUNDLE_APPLINK_ARGS_KEY);
+                    final long tapTimeUtc = result.getLong(ARGUMENTS_TAPTIME_KEY, -1);
+
+                    // Now create the app link
+                    appLinkData = createFromJson(appLinkArgsJsonString);
+                    if (tapTimeUtc != -1) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_TAPTIME_KEY, Long.toString(tapTimeUtc));
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+                }
+                completionHandler.onDeferredAppLinkDataFetched(appLinkData);
+            }
+        };
+        client.setCompletedListener(callback);
+
+        if (!client.start()) {
+            // there is not a sufficient version of fb4a present to return a deferred app link, so kick off
+            // a call to the completion handler.
+            Handler handler = new Handler(Looper.getMainLooper());
+            handler.post(new Runnable() {
+                @Override
+                public void run() {
+                    completionHandler.onDeferredAppLinkDataFetched(null);
+                }
+            });
+        }
+    }
+
+    /**
+     * Parses out any app link data from the Intent of the Activity passed in.
+     * @param activity Activity that was started because of an app link
+     * @return AppLinkData if found. null if not.
+     */
+    public static AppLinkData createFromActivity(Activity activity) {
+        Validate.notNull(activity, "activity");
+        Intent intent = activity.getIntent();
+        if (intent == null) {
+            return null;
+        }
+
+        AppLinkData appLinkData = createFromAlApplinkData(intent);
+        if (appLinkData == null) {
+            String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
+            appLinkData = createFromJson(appLinkArgsJsonString);
+        }
+        if (appLinkData == null) {
+            // Try regular app linking
+            appLinkData = createFromUri(intent.getData());
+        }
+
+        return appLinkData;
+    }
+
+    private static AppLinkData createFromAlApplinkData(Intent intent) {
+        Bundle applinks = intent.getBundleExtra(BUNDLE_AL_APPLINK_DATA_KEY);
+        if (applinks == null) {
+            return null;
+        }
+
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = intent.getData();
+        if (appLinkData.targetUri == null) {
+            String targetUriString = applinks.getString(METHOD_ARGS_TARGET_URL_KEY);
+            if (targetUriString != null) {
+                appLinkData.targetUri = Uri.parse(targetUriString);
+            }
+        }
+        appLinkData.argumentBundle = applinks;
+        appLinkData.arguments = null;
+        Bundle refererData = applinks.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        if (refererData != null) {
+            appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
+        }
+
+        return appLinkData;
+    }
+
+    private static AppLinkData createFromJson(String jsonString) {
+        if (jsonString  == null) {
+            return null;
+        }
+
+        try {
+            // Any missing or malformed data will result in a JSONException
+            JSONObject appLinkArgsJson = new JSONObject(jsonString);
+            String version = appLinkArgsJson.getString(APPLINK_VERSION_KEY);
+
+            JSONObject bridgeArgs = appLinkArgsJson.getJSONObject(APPLINK_BRIDGE_ARGS_KEY);
+            String method = bridgeArgs.getString(BRIDGE_ARGS_METHOD_KEY);
+            if (method.equals("applink") && version.equals("2")) {
+                // We have a new deep link
+                AppLinkData appLinkData = new AppLinkData();
+
+                appLinkData.arguments = appLinkArgsJson.getJSONObject(APPLINK_METHOD_ARGS_KEY);
+                // first look for the "ref" key in the top level args
+                if (appLinkData.arguments.has(METHOD_ARGS_REF_KEY)) {
+                    appLinkData.ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
+                } else if (appLinkData.arguments.has(ARGUMENTS_REFERER_DATA_KEY)) {
+                    // if it's not in the top level args, it could be in the "referer_data" blob
+                    JSONObject refererData = appLinkData.arguments.getJSONObject(ARGUMENTS_REFERER_DATA_KEY);
+                    if (refererData.has(REFERER_DATA_REF_KEY)) {
+                        appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
+                    }
+                }
+
+                if (appLinkData.arguments.has(METHOD_ARGS_TARGET_URL_KEY)) {
+                    appLinkData.targetUri = Uri.parse(appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
+                }
+
+                appLinkData.argumentBundle = toBundle(appLinkData.arguments);
+
+                return appLinkData;
+            }
+        } catch (JSONException e) {
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
+        } catch (FacebookException e) {
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
+        }
+
+        return null;
+    }
+
+    private static AppLinkData createFromUri(Uri appLinkDataUri) {
+        if (appLinkDataUri == null) {
+            return null;
+        }
+
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = appLinkDataUri;
+        return appLinkData;
+    }
+
+    private static Bundle toBundle(JSONObject node) throws JSONException {
+        Bundle bundle = new Bundle();
+        @SuppressWarnings("unchecked")
+        Iterator<String> fields = node.keys();
+        while (fields.hasNext()) {
+            String key = fields.next();
+            Object value;
+            value = node.get(key);
+
+            if (value instanceof JSONObject) {
+                bundle.putBundle(key, toBundle((JSONObject) value));
+            } else if (value instanceof JSONArray) {
+                JSONArray valueArr = (JSONArray) value;
+                if (valueArr.length() == 0) {
+                    bundle.putStringArray(key, new String[0]);
+                } else {
+                    Object firstNode = valueArr.get(0);
+                    if (firstNode instanceof JSONObject) {
+                        Bundle[] bundles = new Bundle[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            bundles[i] = toBundle(valueArr.getJSONObject(i));
+                        }
+                        bundle.putParcelableArray(key, bundles);
+                    } else if (firstNode instanceof JSONArray) {
+                        // we don't support nested arrays
+                        throw new FacebookException("Nested arrays are not supported.");
+                    } else { // just use the string value
+                        String[] arrValues = new String[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            arrValues[i] = valueArr.get(i).toString();
+                        }
+                        bundle.putStringArray(key, arrValues);
+                    }
+                }
+            } else {
+                bundle.putString(key, value.toString());
+            }
+        }
+        return bundle;
+    }
+
+
+    private AppLinkData() {
+    }
+
+    /**
+     * Returns the target uri for this App Link.
+     * @return target uri
+     */
+    public Uri getTargetUri() {
+        return targetUri;
+    }
+
+    /**
+     * Returns the ref for this App Link.
+     * @return ref
+     */
+    public String getRef() {
+        return ref;
+    }
+
+    /**
+     * This method has been deprecated. Please use {@link AppLinkData#getArgumentBundle()} instead.
+     * @return JSONObject property bag.
+     */
+    @Deprecated
+    public JSONObject getArguments() {
+        return arguments;
+    }
+
+    /**
+     * The full set of arguments for this app link. Properties like target uri & ref are typically
+     * picked out of this set of arguments.
+     * @return App link related arguments as a bundle.
+     */
+    public Bundle getArgumentBundle() {
+        return argumentBundle;
+    }
+
+    /**
+     * The referer data associated with the app link. This will contain Facebook specific information like
+     * fb_access_token, fb_expires_in, and fb_ref.
+     * @return the referer data.
+     */
+    public Bundle getRefererData() {
+        if (argumentBundle != null) {
+            return argumentBundle.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        }
+        return null;
+    }
+
+    /**
+     * Interface to asynchronously receive AppLinkData after it has been fetched.
+     */
+    public interface CompletionHandler {
+        /**
+         * This method is called when deferred app link data has been fetched. If no app link data was found,
+         * this method is called with null
+         * @param appLinkData The app link data that was fetched. Null if none was found.
+         */
+        void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
+    }
+
+    final static class DeferredAppLinkDataClient extends PlatformServiceClient {
+
+        DeferredAppLinkDataClient(Context context, String applicationId) {
+            super(context, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REQUEST, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REPLY,
+                    NativeProtocol.PROTOCOL_VERSION_20130618, applicationId);
+        }
+
+        @Override
+        protected void populateRequestBundle(Bundle data) {
+            String packageName = getContext().getPackageName();
+            data.putString(NativeProtocol.EXTRA_GET_INSTALL_DATA_PACKAGE, packageName);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index 13c8e5c9a..cbd308add 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -27,6 +27,8 @@
 import android.text.TextUtils;
 import android.webkit.CookieSyncManager;
 import com.facebook.android.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.model.GraphMultiResult;
@@ -34,10 +36,11 @@
 import com.facebook.model.GraphObjectList;
 import com.facebook.model.GraphUser;
 import com.facebook.widget.WebDialog;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 
 class AuthorizationClient implements Serializable {
     private static final long serialVersionUID = 1L;
@@ -46,6 +49,37 @@
             "com.facebook.AuthorizationClient.WebViewAuthHandler.TOKEN_STORE_KEY";
     private static final String WEB_VIEW_AUTH_HANDLER_TOKEN_KEY = "TOKEN";
 
+    // Constants for logging login-related data. Some of these are only used by Session, but grouped here for
+    // maintainability.
+    private static final String EVENT_NAME_LOGIN_METHOD_START = "fb_mobile_login_method_start";
+    private static final String EVENT_NAME_LOGIN_METHOD_COMPLETE = "fb_mobile_login_method_complete";
+    private static final String EVENT_PARAM_METHOD_RESULT_SKIPPED = "skipped";
+    static final String EVENT_NAME_LOGIN_START = "fb_mobile_login_start";
+    static final String EVENT_NAME_LOGIN_COMPLETE = "fb_mobile_login_complete";
+    // Note: to ensure stability of column mappings across the four different event types, we prepend a column
+    // index to each name, and we log all columns with all events, even if they are empty.
+    static final String EVENT_PARAM_AUTH_LOGGER_ID = "0_auth_logger_id";
+    static final String EVENT_PARAM_TIMESTAMP = "1_timestamp_ms";
+    static final String EVENT_PARAM_LOGIN_RESULT = "2_result";
+    static final String EVENT_PARAM_METHOD = "3_method";
+    static final String EVENT_PARAM_ERROR_CODE = "4_error_code";
+    static final String EVENT_PARAM_ERROR_MESSAGE = "5_error_message";
+    static final String EVENT_PARAM_EXTRAS = "6_extras";
+    static final String EVENT_EXTRAS_TRY_LOGIN_ACTIVITY = "try_login_activity";
+    static final String EVENT_EXTRAS_TRY_LEGACY = "try_legacy";
+    static final String EVENT_EXTRAS_LOGIN_BEHAVIOR = "login_behavior";
+    static final String EVENT_EXTRAS_REQUEST_CODE = "request_code";
+    static final String EVENT_EXTRAS_IS_LEGACY = "is_legacy";
+    static final String EVENT_EXTRAS_PERMISSIONS = "permissions";
+    static final String EVENT_EXTRAS_DEFAULT_AUDIENCE = "default_audience";
+    static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
+    static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
+    static final String EVENT_EXTRAS_NEW_PERMISSIONS = "new_permissions";
+    static final String EVENT_EXTRAS_SERVICE_DISABLED = "service_disabled";
+    static final String EVENT_EXTRAS_APP_CALL_ID = "call_id";
+    static final String EVENT_EXTRAS_PROTOCOL_VERSION = "protocol_version";
+    static final String EVENT_EXTRAS_WRITE_PRIVACY = "write_privacy";
+
     List<AuthHandler> handlersToTry;
     AuthHandler currentHandler;
     transient Context context;
@@ -54,6 +88,8 @@
     transient BackgroundProcessingListener backgroundProcessingListener;
     transient boolean checkedInternetPermission;
     AuthorizationRequest pendingRequest;
+    Map<String, String> loggingExtras;
+    private transient AppEventsLogger appEventsLogger;
 
     interface OnCompletedListener {
         void onCompleted(Result result);
@@ -177,7 +213,7 @@ boolean checkInternetPermission() {
         if (permissionCheck != PackageManager.PERMISSION_GRANTED) {
             String errorType = context.getString(R.string.com_facebook_internet_permission_error_title);
             String errorDescription = context.getString(R.string.com_facebook_internet_permission_error_message);
-            complete(Result.createErrorResult(errorType, errorDescription));
+            complete(Result.createErrorResult(pendingRequest, errorType, errorDescription));
 
             return false;
         }
@@ -187,6 +223,11 @@ boolean checkInternetPermission() {
     }
 
     void tryNextHandler() {
+        if (currentHandler != null) {
+            logAuthorizationMethodComplete(currentHandler.getNameForLogging(), EVENT_PARAM_METHOD_RESULT_SKIPPED,
+                    null, null, currentHandler.methodLoggingExtras);
+        }
+
         while (handlersToTry != null && !handlersToTry.isEmpty()) {
             currentHandler = handlersToTry.remove(0);
 
@@ -204,14 +245,35 @@ void tryNextHandler() {
     }
 
     private void completeWithFailure() {
-        complete(Result.createErrorResult("Login attempt failed.", null));
+        complete(Result.createErrorResult(pendingRequest, "Login attempt failed.", null));
+    }
+
+    private void addLoggingExtra(String key, String value, boolean accumulate) {
+        if (loggingExtras == null) {
+            loggingExtras = new HashMap<String, String>();
+        }
+        if (loggingExtras.containsKey(key) && accumulate) {
+            value = loggingExtras.get(key) + "," + value;
+        }
+        loggingExtras.put(key, value);
     }
 
     boolean tryCurrentHandler() {
         if (currentHandler.needsInternetPermission() && !checkInternetPermission()) {
+            addLoggingExtra(EVENT_EXTRAS_MISSING_INTERNET_PERMISSION, AppEventsConstants.EVENT_PARAM_VALUE_YES,
+                    false);
             return false;
         }
-        return currentHandler.tryAuthorize(pendingRequest);
+
+        boolean tried = currentHandler.tryAuthorize(pendingRequest);
+        if (tried) {
+            logAuthorizationMethodStart(currentHandler.getNameForLogging());
+        } else {
+            // We didn't try it, so we don't get any other completion notification -- log that we skipped it.
+            addLoggingExtra(EVENT_EXTRAS_NOT_TRIED, currentHandler.getNameForLogging(), true);
+        }
+
+        return tried;
     }
 
     void completeAndValidate(Result outcome) {
@@ -225,9 +287,22 @@ void completeAndValidate(Result outcome) {
     }
 
     void complete(Result outcome) {
+        // This might be null if, for some reason, none of the handlers were successfully tried (in which case
+        // we already logged that).
+        if (currentHandler != null) {
+            logAuthorizationMethodComplete(currentHandler.getNameForLogging(), outcome,
+                    currentHandler.methodLoggingExtras);
+        }
+
+        if (loggingExtras != null) {
+            // Pass this back to the caller for logging at the aggregate level.
+            outcome.loggingExtras = loggingExtras;
+        }
+
         handlersToTry = null;
         currentHandler = null;
         pendingRequest = null;
+        loggingExtras = null;
 
         notifyOnCompleteListener(outcome);
     }
@@ -347,14 +422,14 @@ public void onBatchCompleted(RequestBatch batch) {
                         AccessToken tokenWithPermissions = AccessToken
                                 .createFromTokenWithRefreshedPermissions(pendingResult.token,
                                         tokenPermissions);
-                        result = Result.createTokenResult(tokenWithPermissions);
+                        result = Result.createTokenResult(pendingRequest, tokenWithPermissions);
                     } else {
                         result = Result
-                                .createErrorResult("User logged in as different Facebook user.", null);
+                                .createErrorResult(pendingRequest, "User logged in as different Facebook user.", null);
                     }
                     complete(result);
                 } catch (Exception ex) {
-                    complete(Result.createErrorResult("Caught exception", ex.getMessage()));
+                    complete(Result.createErrorResult(pendingRequest, "Caught exception", ex.getMessage()));
                 } finally {
                     notifyBackgroundProcessingStop();
                 }
@@ -378,6 +453,13 @@ Request createGetProfileIdRequest(String accessToken) {
         return new Request(null, "me", parameters, HttpMethod.GET, null);
     }
 
+    private AppEventsLogger getAppEventsLogger() {
+        if (appEventsLogger == null || appEventsLogger.getApplicationId() != pendingRequest.getApplicationId()) {
+            appEventsLogger = AppEventsLogger.newLogger(context, pendingRequest.getApplicationId());
+        }
+        return appEventsLogger;
+    }
+
     private void notifyOnCompleteListener(Result outcome) {
         if (onCompletedListener != null) {
             onCompletedListener.onCompleted(outcome);
@@ -396,10 +478,70 @@ private void notifyBackgroundProcessingStop() {
         }
     }
 
+    private void logAuthorizationMethodStart(String method) {
+        Bundle bundle = newAuthorizationLoggingBundle(pendingRequest.getAuthId());
+        bundle.putLong(EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
+        bundle.putString(EVENT_PARAM_METHOD, method);
+
+        getAppEventsLogger().logSdkEvent(EVENT_NAME_LOGIN_METHOD_START, null, bundle);
+    }
+
+    private void logAuthorizationMethodComplete(String method, Result result, Map<String, String> loggingExtras) {
+        logAuthorizationMethodComplete(method, result.code.getLoggingValue(), result.errorMessage, result.errorCode,
+                loggingExtras);
+    }
+
+    private void logAuthorizationMethodComplete(String method, String result, String errorMessage, String errorCode,
+            Map<String, String> loggingExtras) {
+        Bundle bundle = null;
+        if (pendingRequest == null) {
+            // We don't expect this to happen, but if it does, log an event for diagnostic purposes.
+            bundle = newAuthorizationLoggingBundle("");
+            bundle.putString(EVENT_PARAM_LOGIN_RESULT, Result.Code.ERROR.getLoggingValue());
+            bundle.putString(EVENT_PARAM_ERROR_MESSAGE,
+                    "Unexpected call to logAuthorizationMethodComplete with null pendingRequest.");
+        } else {
+            bundle = newAuthorizationLoggingBundle(pendingRequest.getAuthId());
+            if (result != null) {
+                bundle.putString(EVENT_PARAM_LOGIN_RESULT, result);
+            }
+            if (errorMessage != null) {
+                bundle.putString(EVENT_PARAM_ERROR_MESSAGE, errorMessage);
+            }
+            if (errorCode != null) {
+                bundle.putString(EVENT_PARAM_ERROR_CODE, errorCode);
+            }
+            if (loggingExtras != null && !loggingExtras.isEmpty()) {
+                JSONObject jsonObject = new JSONObject(loggingExtras);
+                bundle.putString(EVENT_PARAM_EXTRAS, jsonObject.toString());
+            }
+        }
+        bundle.putString(EVENT_PARAM_METHOD, method);
+        bundle.putLong(EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
+
+        getAppEventsLogger().logSdkEvent(EVENT_NAME_LOGIN_METHOD_COMPLETE, null, bundle);
+    }
+
+    static Bundle newAuthorizationLoggingBundle(String authLoggerId) {
+        // We want to log all parameters for all events, to ensure stability of columns across different event types.
+        Bundle bundle = new Bundle();
+        bundle.putLong(EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
+        bundle.putString(EVENT_PARAM_AUTH_LOGGER_ID, authLoggerId);
+        bundle.putString(EVENT_PARAM_METHOD, "");
+        bundle.putString(EVENT_PARAM_LOGIN_RESULT, "");
+        bundle.putString(EVENT_PARAM_ERROR_MESSAGE, "");
+        bundle.putString(EVENT_PARAM_ERROR_CODE, "");
+        bundle.putString(EVENT_PARAM_EXTRAS, "");
+        return bundle;
+    }
+
     abstract class AuthHandler implements Serializable {
         private static final long serialVersionUID = 1L;
 
+        Map<String, String> methodLoggingExtras;
+
         abstract boolean tryAuthorize(AuthorizationRequest request);
+        abstract String getNameForLogging();
 
         boolean onActivityResult(int requestCode, int resultCode, Intent data) {
             return false;
@@ -415,11 +557,25 @@ boolean needsInternetPermission() {
 
         void cancel() {
         }
+
+        protected void addLoggingExtra(String key, Object value) {
+            if (methodLoggingExtras == null) {
+                methodLoggingExtras = new HashMap<String, String>();
+            }
+            methodLoggingExtras.put(key, value == null ? null : value.toString());
+        }
     }
 
     class WebViewAuthHandler extends AuthHandler {
         private static final long serialVersionUID = 1L;
         private transient WebDialog loginDialog;
+        private String applicationId;
+        private String e2e;
+
+        @Override
+        String getNameForLogging() {
+            return "web_view";
+        }
 
         @Override
         boolean needsRestart() {
@@ -443,18 +599,23 @@ void cancel() {
 
         @Override
         boolean tryAuthorize(final AuthorizationRequest request) {
-            String applicationId = request.getApplicationId();
+            applicationId = request.getApplicationId();
             Bundle parameters = new Bundle();
             if (!Utility.isNullOrEmpty(request.getPermissions())) {
-                parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, TextUtils.join(",", request.getPermissions()));
+                String scope = TextUtils.join(",", request.getPermissions());
+                parameters.putString(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
+                addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
             }
 
             String previousToken = request.getPreviousAccessToken();
             if (!Utility.isNullOrEmpty(previousToken) && (previousToken.equals(loadCookieToken()))) {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN, previousToken);
+                // Don't log the actual access token, just its presence or absence.
+                addLoggingExtra(ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN, AppEventsConstants.EVENT_PARAM_VALUE_YES);
             } else {
                 // The call to clear cookies will create the first instance of CookieSyncManager if necessary
                 Utility.clearFacebookCookies(context);
+                addLoggingExtra(ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN, AppEventsConstants.EVENT_PARAM_VALUE_NO);
             }
 
             WebDialog.OnCompleteListener listener = new WebDialog.OnCompleteListener() {
@@ -464,8 +625,12 @@ public void onComplete(Bundle values, FacebookException error) {
                 }
             };
 
+            e2e = getE2E();
+            addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+
             WebDialog.Builder builder =
                     new AuthDialogBuilder(getStartActivityDelegate().getActivityContext(), applicationId, parameters)
+                            .setE2E(e2e)
                             .setOnCompleteListener(listener);
             loginDialog = builder.build();
             loginDialog.show();
@@ -477,9 +642,14 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
                 FacebookException error) {
             Result outcome;
             if (values != null) {
+                // Actual e2e we got from the dialog should be used for logging.
+                if (values.containsKey(ServerProtocol.DIALOG_PARAM_E2E)) {
+                    e2e = values.getString(ServerProtocol.DIALOG_PARAM_E2E);
+                }
+
                 AccessToken token = AccessToken
                         .createFromWebBundle(request.getPermissions(), values, AccessTokenSource.WEB_VIEW);
-                outcome = Result.createTokenResult(token);
+                outcome = Result.createTokenResult(pendingRequest, token);
 
                 // Ensure any cookies set by the dialog are saved
                 // This is to work around a bug where CookieManager may fail to instantiate if CookieSyncManager
@@ -489,11 +659,26 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
                 saveCookieToken(token.getToken());
             } else {
                 if (error instanceof FacebookOperationCanceledException) {
-                    outcome = Result.createCancelResult("User canceled log in.");
+                    outcome = Result.createCancelResult(pendingRequest, "User canceled log in.");
                 } else {
-                    outcome = Result.createErrorResult(error.getMessage(), null);
+                    // Something went wrong, don't log a completion event since it will skew timing results.
+                    e2e = null;
+
+                    String errorCode = null;
+                    String errorMessage = error.getMessage();
+                    if (error instanceof FacebookServiceException) {
+                        FacebookRequestError requestError = ((FacebookServiceException)error).getRequestError();
+                        errorCode = String.format("%d", requestError.getErrorCode());
+                        errorMessage = requestError.toString();
+                    }
+                    outcome = Result.createErrorResult(pendingRequest, null, errorMessage, errorCode);
                 }
             }
+
+            if (!Utility.isNullOrEmpty(e2e)) {
+                logWebLoginCompleted(applicationId, e2e);
+            }
+
             completeAndValidate(outcome);
         }
 
@@ -522,6 +707,11 @@ private String loadCookieToken() {
         private static final long serialVersionUID = 1L;
         private transient GetTokenClient getTokenClient;
 
+        @Override
+        String getNameForLogging() {
+            return "get_token";
+        }
+
         @Override
         void cancel() {
             if (getTokenClient != null) {
@@ -530,6 +720,13 @@ void cancel() {
             }
         }
 
+        @Override
+        boolean needsRestart() {
+            // if the getTokenClient is null, that means an orientation change has occurred, and we need
+            // to recreate the GetTokenClient, so return true to indicate we need a restart
+            return getTokenClient == null;
+        }
+
         boolean tryAuthorize(final AuthorizationRequest request) {
             getTokenClient = new GetTokenClient(context, request.getApplicationId());
             if (!getTokenClient.start()) {
@@ -562,19 +759,23 @@ void getTokenCompleted(AuthorizationRequest request, Bundle result) {
                     // We got all the permissions we needed, so we can complete the auth now.
                     AccessToken token = AccessToken
                             .createFromNativeLogin(result, AccessTokenSource.FACEBOOK_APPLICATION_SERVICE);
-                    Result outcome = Result.createTokenResult(token);
+                    Result outcome = Result.createTokenResult(pendingRequest, token);
                     completeAndValidate(outcome);
                     return;
                 }
 
                 // We didn't get all the permissions we wanted, so update the request with just the permissions
                 // we still need.
-                ArrayList<String> newPermissions = new ArrayList<String>();
+                List<String> newPermissions = new ArrayList<String>();
                 for (String permission : permissions) {
                     if (!currentPermissions.contains(permission)) {
                         newPermissions.add(permission);
                     }
                 }
+                if (!newPermissions.isEmpty()) {
+                    addLoggingExtra(EVENT_EXTRAS_NEW_PERMISSIONS, TextUtils.join(",", newPermissions));
+                }
+
                 request.setPermissions(newPermissions);
             }
 
@@ -593,6 +794,8 @@ protected boolean tryIntent(Intent intent, int requestCode) {
             try {
                 getStartActivityDelegate().startActivityForResult(intent, requestCode);
             } catch (ActivityNotFoundException e) {
+                // We don't expect this to happen, since we've already validated the intent and bailed out before
+                // now if it couldn't be resolved.
                 return false;
             }
 
@@ -602,12 +805,35 @@ protected boolean tryIntent(Intent intent, int requestCode) {
 
     class KatanaLoginDialogAuthHandler extends KatanaAuthHandler {
         private static final long serialVersionUID = 1L;
+        private String applicationId;
+        private String callId;
+
+        @Override
+        String getNameForLogging() {
+            return "katana_login_dialog";
+        }
 
         @Override
         boolean tryAuthorize(AuthorizationRequest request) {
+            applicationId = request.getApplicationId();
+
             Intent intent = NativeProtocol.createLoginDialog20121101Intent(context, request.getApplicationId(),
                     new ArrayList<String>(request.getPermissions()),
                     request.getDefaultAudience().getNativeProtocolAudience());
+            if (intent == null) {
+                return false;
+            }
+
+            callId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
+
+            addLoggingExtra(EVENT_EXTRAS_APP_CALL_ID, callId);
+            addLoggingExtra(EVENT_EXTRAS_PROTOCOL_VERSION,
+                    intent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
+            addLoggingExtra(EVENT_EXTRAS_PERMISSIONS,
+                    TextUtils.join(",", intent.getStringArrayListExtra(NativeProtocol.EXTRA_PERMISSIONS)));
+            addLoggingExtra(EVENT_EXTRAS_WRITE_PRIVACY, intent.getStringExtra(NativeProtocol.EXTRA_WRITE_PRIVACY));
+            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_START,
+                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME, callId);
 
             return tryIntent(intent, request.getRequestCode());
         }
@@ -616,16 +842,18 @@ boolean tryAuthorize(AuthorizationRequest request) {
         boolean onActivityResult(int requestCode, int resultCode, Intent data) {
             Result outcome;
 
+            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_COMPLETE,
+                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME, callId);
+
             if (data == null) {
                 // This happens if the user presses 'Back'.
-                outcome = Result.createCancelResult("Operation canceled");
+                outcome = Result.createCancelResult(pendingRequest, "Operation canceled");
             } else if (NativeProtocol.isServiceDisabledResult20121101(data)) {
                 outcome = null;
             } else if (resultCode == Activity.RESULT_CANCELED) {
-                outcome = Result.createCancelResult(
-                        data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION));
+                outcome = createCancelOrErrorResult(pendingRequest, data);
             } else if (resultCode != Activity.RESULT_OK) {
-                outcome = Result.createErrorResult("Unexpected resultCode from authorization.", null);
+                outcome = Result.createErrorResult(pendingRequest, "Unexpected resultCode from authorization.", null);
             } else {
                 outcome = handleResultOk(data);
             }
@@ -643,25 +871,69 @@ private Result handleResultOk(Intent data) {
             Bundle extras = data.getExtras();
             String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
             if (errorType == null) {
-                return Result.createTokenResult(
+                return Result.createTokenResult(pendingRequest,
                         AccessToken.createFromNativeLogin(extras, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE));
             } else if (NativeProtocol.ERROR_SERVICE_DISABLED.equals(errorType)) {
+                addLoggingExtra(EVENT_EXTRAS_SERVICE_DISABLED, AppEventsConstants.EVENT_PARAM_VALUE_YES);
                 return null;
-            } else if (NativeProtocol.ERROR_USER_CANCELED.equals(errorType)) {
-                return Result.createCancelResult(null);
             } else {
-                return Result.createErrorResult(errorType, extras.getString("error_description"));
+                return createCancelOrErrorResult(pendingRequest, data);
+            }
+        }
+
+        private Result createCancelOrErrorResult(AuthorizationRequest request, Intent data) {
+            Bundle extras = data.getExtras();
+            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
+
+            if (NativeProtocol.ERROR_USER_CANCELED.equals(errorType) ||
+                    NativeProtocol.ERROR_PERMISSION_DENIED.equals(errorType)) {
+                return Result.createCancelResult(request, data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION));
+            } else {
+                // See if we can get an error code out of the JSON.
+                String errorJson = extras.getString(NativeProtocol.STATUS_ERROR_JSON);
+                String errorCode = null;
+                if (errorJson != null) {
+                    try {
+                        JSONObject jsonObject = new JSONObject(errorJson);
+                        errorCode = jsonObject.getString("error_code");
+                    } catch (JSONException e) {
+                    }
+                }
+                return Result.createErrorResult(request, errorType,
+                        data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION), errorCode);
+            }
+        }
+
+        private void logEvent(String eventName, String timeParameter, String callId) {
+            if (callId != null) {
+                AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
+                Bundle parameters = new Bundle();
+                parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
+                parameters.putString(AnalyticsEvents.PARAMETER_ACTION_ID, callId);
+                parameters.putLong(timeParameter, System.currentTimeMillis());
+                appEventsLogger.logSdkEvent(eventName, null, parameters);
             }
         }
     }
 
     class KatanaProxyAuthHandler extends KatanaAuthHandler {
         private static final long serialVersionUID = 1L;
+        private String applicationId;
+
+        @Override
+        String getNameForLogging() {
+            return "katana_proxy_auth";
+        }
 
         @Override
         boolean tryAuthorize(AuthorizationRequest request) {
-            Intent intent = NativeProtocol.createProxyAuthIntent(context,
-                    request.getApplicationId(), request.getPermissions());
+            applicationId = request.getApplicationId();
+
+            String e2e = getE2E();
+            Intent intent = NativeProtocol.createProxyAuthIntent(context, request.getApplicationId(),
+                    request.getPermissions(), e2e);
+
+            addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
 
             return tryIntent(intent, request.getRequestCode());
         }
@@ -673,11 +945,11 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
 
             if (data == null) {
                 // This happens if the user presses 'Back'.
-                outcome = Result.createCancelResult("Operation canceled");
+                outcome = Result.createCancelResult(pendingRequest, "Operation canceled");
             } else if (resultCode == Activity.RESULT_CANCELED) {
-                outcome = Result.createCancelResult(data.getStringExtra("error"));
+                outcome = Result.createCancelResult(pendingRequest, data.getStringExtra("error"));
             } else if (resultCode != Activity.RESULT_OK) {
-                outcome = Result.createErrorResult("Unexpected resultCode from authorization.", null);
+                outcome = Result.createErrorResult(pendingRequest, "Unexpected resultCode from authorization.", null);
             } else {
                 outcome = handleResultOk(data);
             }
@@ -696,34 +968,71 @@ private Result handleResultOk(Intent data) {
             if (error == null) {
                 error = extras.getString("error_type");
             }
+            String errorCode = extras.getString("error_code");
+            String errorMessage = extras.getString("error_message");
+            if (errorMessage == null) {
+                errorMessage = extras.getString("error_description");
+            }
 
-            if (error == null) {
+            String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
+            if (!Utility.isNullOrEmpty(e2e)) {
+                logWebLoginCompleted(applicationId, e2e);
+            }
+
+            if (error == null && errorCode == null && errorMessage == null) {
                 AccessToken token = AccessToken.createFromWebBundle(pendingRequest.getPermissions(), extras,
                         AccessTokenSource.FACEBOOK_APPLICATION_WEB);
-                return Result.createTokenResult(token);
+                return Result.createTokenResult(pendingRequest, token);
             } else if (ServerProtocol.errorsProxyAuthDisabled.contains(error)) {
                 return null;
             } else if (ServerProtocol.errorsUserCanceled.contains(error)) {
-                return Result.createCancelResult(null);
+                return Result.createCancelResult(pendingRequest, null);
             } else {
-                return Result.createErrorResult(error, extras.getString("error_description"));
+                return Result.createErrorResult(pendingRequest, error, errorMessage, errorCode);
             }
         }
     }
 
+    private static String getE2E() {
+        JSONObject e2e = new JSONObject();
+        try {
+            e2e.put("init", System.currentTimeMillis());
+        } catch (JSONException e) {
+        }
+        return e2e.toString();
+    }
+
+    private void logWebLoginCompleted(String applicationId, String e2e) {
+        AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
+
+        Bundle parameters = new Bundle();
+        parameters.putString(AnalyticsEvents.PARAMETER_WEB_LOGIN_E2E, e2e);
+        parameters.putLong(AnalyticsEvents.PARAMETER_WEB_LOGIN_SWITCHBACK_TIME, System.currentTimeMillis());
+        parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
+
+        appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_WEB_LOGIN_COMPLETE, null, parameters);
+    }
+
     static class AuthDialogBuilder extends WebDialog.Builder {
         private static final String OAUTH_DIALOG = "oauth";
         static final String REDIRECT_URI = "fbconnect://success";
+        private String e2e;
 
         public AuthDialogBuilder(Context context, String applicationId, Bundle parameters) {
             super(context, applicationId, OAUTH_DIALOG, parameters);
         }
 
+        public AuthDialogBuilder setE2E(String e2e) {
+            this.e2e = e2e;
+            return this;
+        }
+
         @Override
         public WebDialog build() {
             Bundle parameters = getParameters();
             parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
             parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, getApplicationId());
+            parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, e2e);
 
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
@@ -733,17 +1042,18 @@ public WebDialog build() {
         private static final long serialVersionUID = 1L;
 
         private transient final StartActivityDelegate startActivityDelegate;
-        private SessionLoginBehavior loginBehavior;
-        private int requestCode;
+        private final SessionLoginBehavior loginBehavior;
+        private final int requestCode;
         private boolean isLegacy = false;
         private List<String> permissions;
-        private SessionDefaultAudience defaultAudience;
-        private String applicationId;
-        private String previousAccessToken;
+        private final SessionDefaultAudience defaultAudience;
+        private final String applicationId;
+        private final String previousAccessToken;
+        private final String authId;
 
         AuthorizationRequest(SessionLoginBehavior loginBehavior, int requestCode, boolean isLegacy,
                 List<String> permissions, SessionDefaultAudience defaultAudience, String applicationId,
-                String validateSameFbidAsToken, StartActivityDelegate startActivityDelegate) {
+                String validateSameFbidAsToken, StartActivityDelegate startActivityDelegate, String authId) {
             this.loginBehavior = loginBehavior;
             this.requestCode = requestCode;
             this.isLegacy = isLegacy;
@@ -752,6 +1062,7 @@ public WebDialog build() {
             this.applicationId = applicationId;
             this.previousAccessToken = validateSameFbidAsToken;
             this.startActivityDelegate = startActivityDelegate;
+            this.authId = authId;
 
         }
 
@@ -798,6 +1109,10 @@ String getPreviousAccessToken() {
         boolean needsNewTokenValidation() {
             return previousAccessToken != null && !isLegacy;
         }
+
+        String getAuthId() {
+            return authId;
+        }
     }
 
 
@@ -805,35 +1120,54 @@ boolean needsNewTokenValidation() {
         private static final long serialVersionUID = 1L;
 
         enum Code {
-            SUCCESS,
-            CANCEL,
-            ERROR
+            SUCCESS("success"),
+            CANCEL("cancel"),
+            ERROR("error");
+
+            private final String loggingValue;
+
+            Code(String loggingValue) {
+                this.loggingValue = loggingValue;
+            }
+
+            // For consistency across platforms, we want to use specific string values when logging these results.
+            String getLoggingValue() {
+                return loggingValue;
+            }
         }
 
         final Code code;
         final AccessToken token;
         final String errorMessage;
+        final String errorCode;
+        final AuthorizationRequest request;
+        Map<String, String> loggingExtras;
 
-        private Result(Code code, AccessToken token, String errorMessage) {
+        private Result(AuthorizationRequest request, Code code, AccessToken token, String errorMessage,
+                String errorCode) {
+            this.request = request;
             this.token = token;
             this.errorMessage = errorMessage;
             this.code = code;
+            this.errorCode = errorCode;
         }
 
-        static Result createTokenResult(AccessToken token) {
-            return new Result(Code.SUCCESS, token, null);
+        static Result createTokenResult(AuthorizationRequest request, AccessToken token) {
+            return new Result(request, Code.SUCCESS, token, null, null);
         }
 
-        static Result createCancelResult(String message) {
-            return new Result(Code.CANCEL, null, message);
+        static Result createCancelResult(AuthorizationRequest request, String message) {
+            return new Result(request, Code.CANCEL, null, message, null);
         }
 
-        static Result createErrorResult(String errorType, String errorDescription) {
-            String message = errorType;
-            if (errorDescription != null) {
-                message += ": " + errorDescription;
-            }
-            return new Result(Code.ERROR, null, message);
+        static Result createErrorResult(AuthorizationRequest request, String errorType, String errorDescription) {
+            return createErrorResult(request, errorType, errorDescription, null);
+        }
+
+        static Result createErrorResult(AuthorizationRequest request, String errorType, String errorDescription,
+                String errorCode) {
+            String message = TextUtils.join(": ", Utility.asListNoNulls(errorType, errorDescription));
+            return new Result(request, Code.ERROR, null, message, errorCode);
         }
     }
 }
diff --git a/facebook/src/com/facebook/FacebookRequestError.java b/facebook/src/com/facebook/FacebookRequestError.java
index 5e9187904..937e2b580 100644
--- a/facebook/src/com/facebook/FacebookRequestError.java
+++ b/facebook/src/com/facebook/FacebookRequestError.java
@@ -340,7 +340,7 @@ public String toString() {
                 .append(", errorType: ")
                 .append(errorType)
                 .append(", errorMessage: ")
-                .append(errorMessage)
+                .append(getErrorMessage())
                 .append("}")
                 .toString();
     }
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 288cf7131..8973962d3 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,6 +17,6 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.0.0";
-    public static final String MIGRATION_BUNDLE = "fbsdk:20121026";
+    public static final String BUILD = "3.7.0";
+    public static final String MIGRATION_BUNDLE = "fbsdk:20131203";
 }
diff --git a/facebook/src/com/facebook/GetTokenClient.java b/facebook/src/com/facebook/GetTokenClient.java
index f7d23cdc8..23cb31bf8 100644
--- a/facebook/src/com/facebook/GetTokenClient.java
+++ b/facebook/src/com/facebook/GetTokenClient.java
@@ -17,112 +17,20 @@
 package com.facebook;
 
 
-import android.content.ComponentName;
 import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
 import android.os.*;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.PlatformServiceClient;
 
-final class GetTokenClient implements ServiceConnection {
-    final Context context;
-    final String applicationId;
-    final Handler handler;
-    CompletedListener listener;
-    boolean running;
-    Messenger sender;
+final class GetTokenClient extends PlatformServiceClient {
 
     GetTokenClient(Context context, String applicationId) {
-        Context applicationContext = context.getApplicationContext();
-
-        this.context = (applicationContext != null) ? applicationContext : context;
-        this.applicationId = applicationId;
-
-        handler = new Handler() {
-            @Override
-            public void handleMessage(Message message) {
-                GetTokenClient.this.handleMessage(message);
-            }
-        };
-    }
-
-    void setCompletedListener(CompletedListener listener) {
-        this.listener = listener;
-    }
-
-    boolean start() {
-        Intent intent = new Intent(NativeProtocol.INTENT_ACTION_PLATFORM_SERVICE);
-        intent.addCategory(Intent.CATEGORY_DEFAULT);
-        intent = NativeProtocol.validateKatanaServiceIntent(context, intent);
-
-        if (intent == null) {
-            callback(null);
-            return false;
-        } else {
-            running = true;
-            context.bindService(intent, this, Context.BIND_AUTO_CREATE);
-            return true;
-        }
-    }
-
-    void cancel() {
-        running = false;
-    }
-
-    @Override
-    public void onServiceConnected(ComponentName name, IBinder service) {
-        sender = new Messenger(service);
-        getToken();
+        super(context, NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REQUEST, NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REPLY,
+                NativeProtocol.PROTOCOL_VERSION_20121101, applicationId);
     }
 
     @Override
-    public void onServiceDisconnected(ComponentName name) {
-        sender = null;
-        context.unbindService(this);
-        callback(null);
-    }
-
-    private void getToken() {
-        Bundle data = new Bundle();
-        data.putString(NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
-
-        Message request = Message.obtain(null, NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REQUEST);
-        request.arg1 = NativeProtocol.PROTOCOL_VERSION_20121101;
-        request.setData(data);
-        request.replyTo = new Messenger(handler);
-
-        try {
-            sender.send(request);
-        } catch (RemoteException e) {
-            callback(null);
-        }
-    }
-
-    private void handleMessage(Message message) {
-        if (message.what == NativeProtocol.MESSAGE_GET_ACCESS_TOKEN_REPLY) {
-            Bundle extras = message.getData();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-            if (errorType != null) {
-                callback(null);
-            } else {
-                callback(extras);
-            }
-            context.unbindService(this);
-        }
-    }
-
-    private void callback(Bundle result) {
-        if (!running) {
-            return;
-        }
-        running = false;
-
-        CompletedListener callback = listener;
-        if (callback != null) {
-            callback.completed(result);
-        }
-    }
-
-    interface CompletedListener {
-        void completed(Bundle result);
+    protected void populateRequestBundle(Bundle data) {
     }
 }
+
diff --git a/facebook/src/com/facebook/InsightsLogger.java b/facebook/src/com/facebook/InsightsLogger.java
index 4634f4ed0..168125f73 100644
--- a/facebook/src/com/facebook/InsightsLogger.java
+++ b/facebook/src/com/facebook/InsightsLogger.java
@@ -19,176 +19,68 @@
 import android.content.Context;
 import android.os.Bundle;
 import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.model.GraphObject;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
 
 import java.math.BigDecimal;
 import java.util.Currency;
-import java.util.Set;
 
 /**
- * The InsightsLogger class allows the developer to log various types of events back to Facebook.  In order to log
- * events, the app must create an instance of this class via a {@link #newLogger newLogger} method, and then call
- * the various "log" methods off of that.  Note that a Client Token for the app is required in calls to newLogger so
- * apps that have not authenticated their users can still get meaningful user-demographics from the logged events
- * on Facebook.
+ * This class is deprecated. Please use {@link AppEventsLogger} instead.
  */
+@Deprecated
 public class InsightsLogger {
+    private static final String EVENT_PARAMETER_PIXEL_ID         = "fb_offsite_pixel_id";
+    private static final String EVENT_PARAMETER_PIXEL_VALUE      = "fb_offsite_pixel_value";
 
-    // Constants
+    private static final String EVENT_NAME_LOG_CONVERSION_PIXEL  = "fb_log_offsite_pixel";
 
-    // Event names, these match what the server expects.
-    private static final String EVENT_NAME_LOG_CONVERSION_PIXEL = "fb_log_offsite_pixel";
-    private static final String EVENT_NAME_LOG_MOBILE_PURCHASE  = "fb_mobile_purchase";
+    private AppEventsLogger appEventsLogger;
 
-    // Event parameter names, these match what the server expects.
-    private static final String EVENT_PARAMETER_CURRENCY        = "fb_currency";
-    private static final String EVENT_PARAMETER_PIXEL_ID        = "fb_offsite_pixel_id";
-    private static final String EVENT_PARAMETER_PIXEL_VALUE     = "fb_offsite_pixel_value";
-
-    // Static member variables
-    private static Session appAuthSession = null;
-
-    // Instance member variables
-    private final Context context;
-    private final String  clientToken;
-    private final String  applicationId;
-    private final Session specifiedSession;
-
-
-    /**
-     * Constructor is private, newLogger() methods should be used to build an instance.
-     */
-    private InsightsLogger(Context context, String clientToken, String applicationId, Session session) {
-
-        Validate.notNull(context, "context");
-
-        // Always ensure the client token is present, even if not needed for this particular logging (because at
-        // some point it will be required).  Be harsh by throwing an exception because this is all too easy to miss
-        // and things will work with authenticated sessions, but start failing with users that don't have
-        // authenticated sessions.
-        Validate.notNullOrEmpty(clientToken, "clientToken");
-
-        if (applicationId == null) {
-            applicationId = Utility.getMetadataApplicationId(context);
-        }
-
-        this.context = context;
-        this.clientToken = clientToken;
-        this.applicationId = applicationId;
-        this.specifiedSession = session;
+    private InsightsLogger(Context context, String applicationId, Session session) {
+        appEventsLogger = AppEventsLogger.newLogger(context, applicationId, session);
     }
 
     /**
-     * Build an InsightsLogger instance to log events through.  The Facebook app that these events are targeted at
-     * comes from this application's metadata.
-     *
-     * @param context      Used to access the applicationId and the attributionId for non-authenticated users.
-     * @param clientToken  The Facebook app's "client token", which, for a given appid can be found in the Security
-     *                     section of the Advanced tab of the Facebook App settings found
-     *                     at <https://developers.facebook.com/apps/[your-app-id]>.
-     *
-     * @return          InsightsLogger instance to invoke log* methods on.
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public static InsightsLogger newLogger(Context context, String clientToken) {
-        return new InsightsLogger(context, clientToken, null, null);
+        return new InsightsLogger(context, null, null);
     }
 
     /**
-     * Build an InsightsLogger instance to log events through.  Allow explicit specification of an Facebook app
-     * to target.
-     *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param clientToken    The Facebook app's "client token", which, for a given appid can be found in the Security
-     *                       section of the Advanced tab of the Facebook App settings found
-     *                       at <https://developers.facebook.com/apps/[your-app-id]>
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the
-     *                       applicationId embedded in the application metadata accessible from 'context' will
-     *                       be used.
-     *
-     * @return          InsightsLogger instance to invoke log* methods on.
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public static InsightsLogger newLogger(Context context, String clientToken, String applicationId) {
-        return new InsightsLogger(context, clientToken, applicationId, null);
+        return new InsightsLogger(context, applicationId, null);
     }
 
     /**
-     * Build an InsightsLogger instance to log events through.
-     *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param clientToken    The Facebook app's "client token", which, for a given appid can be found in the Security
-     *                       section of the Advanced tab of the Facebook App settings found
-     *                       at <https://developers.facebook.com/apps/[your-app-id]>
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the
-     *                       applicationId embedded in the application metadata accessible from 'context' will
-     *                       be used.
-     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
-     *                       will be used if it's open, otherwise the logging will happen via the "clientToken"
-     *                       and specified appId.
-     *
-     * @return          InsightsLogger instance to invoke log* methods on.
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public static InsightsLogger newLogger(Context context, String clientToken, String applicationId, Session session) {
-        return new InsightsLogger(context, clientToken, applicationId, session);
+        return new InsightsLogger(context, applicationId, session);
     }
 
     /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
-     *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
         logPurchase(purchaseAmount, currency, null);
     }
 
     /**
-     * Logs a purchase event with Facebook, in the specified amount and with the specified currency.  Additional
-     * detail about the purchase can be passed in through the parameters bundle.
-     *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
-     * @param parameters      Arbitrary additional information for describing this event.  Should have no more than
-     *                        10 entries, and keys should be mostly consistent from one purchase event to the next.
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
-
-        if (purchaseAmount == null) {
-            notifyDeveloperError("purchaseAmount cannot be null");
-            return;
-        } else if (currency == null) {
-            notifyDeveloperError("currency cannot be null");
-            return;
-        }
-
-        if (parameters == null) {
-            parameters = new Bundle();
-        }
-        parameters.putString(EVENT_PARAMETER_CURRENCY, currency.getCurrencyCode());
-
-        logEventNow(EVENT_NAME_LOG_MOBILE_PURCHASE, purchaseAmount.doubleValue(), parameters);
+        appEventsLogger.logPurchase(purchaseAmount, currency, parameters);
     }
 
     /**
-     * Log, or "Fire" a Conversion Pixel.  Conversion Pixels are used for Ads Conversion Tracking.  See
-     * https://www.facebook.com/help/435189689870514 to learn more.
-     *
-     * @param pixelId      Numeric ID for the conversion pixel to be logged.  See
-     *                     https://www.facebook.com/help/435189689870514 to learn how to create a conversion pixel.
-     * @param valueOfPixel Value of what the logging of this pixel is worth to the calling app.  The currency that this
-     *                     is expressed in doesn't matter, so long as it is consistent across all logging for this
-     *                     pixel. This value will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * Deprecated. Please use {@link AppEventsLogger} instead.
      */
     public void logConversionPixel(String pixelId, double valueOfPixel) {
 
         if (pixelId == null) {
-            notifyDeveloperError("pixelID cannot be null");
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "Insights", "pixelID cannot be null");
             return;
         }
 
@@ -196,160 +88,7 @@ public void logConversionPixel(String pixelId, double valueOfPixel) {
         parameters.putString(EVENT_PARAMETER_PIXEL_ID, pixelId);
         parameters.putDouble(EVENT_PARAMETER_PIXEL_VALUE, valueOfPixel);
 
-        logEventNow(EVENT_NAME_LOG_CONVERSION_PIXEL, valueOfPixel, parameters);
-    }
-
-    /**
-     * This is the workhorse function of the InsightsLogger class and does the packaging and POST.  As InsightsLogger
-     * is expanded to support more custom app events, this logic will become more complicated and allow for batching
-     * and flushing of multiple events, of persisting to disk so as to survive network outages, implicitly logging
-     * (with the dev's permission) SDK actions, etc.
-     */
-    private void logEventNow(
-            final String eventName,
-            final double valueToSum,
-            final Bundle parameters) {
-
-        // Run everything synchronously on a worker thread.
-        Settings.getExecutor().execute(new Runnable() {
-
-            @Override
-            public void run() {
-
-                final String eventJSON = buildJSONForEvent(eventName, valueToSum, parameters);
-                if (eventJSON == null) {
-                    // Failure in building JSON, already reported, so just return.
-                    return;
-                }
-
-                GraphObject publishParams = GraphObject.Factory.create();
-                publishParams.setProperty("event", "CUSTOM_APP_EVENTS");
-                publishParams.setProperty("custom_events", eventJSON);
-
-                if (Utility.queryAppAttributionSupportAndWait(applicationId)) {
-                    String attributionId = Settings.getAttributionId(context.getContentResolver());
-                    if (attributionId != null) {
-                        publishParams.setProperty("attribution", attributionId);
-                    }
-                }
-
-                String publishUrl = String.format("%s/activities", applicationId);
-
-                try {
-
-                    Request postRequest = Request.newPostRequest(sessionToLogTo(), publishUrl, publishParams, null);
-                    Response response = postRequest.executeAndWait();
-
-                    // A -1 error code happens if there is no connectivity.  No need to notify the
-                    // developer in that case.
-                    final int NO_CONNECTIVITY_ERROR_CODE = -1;
-                    if (response.getError() != null &&
-                        response.getError().getErrorCode() != NO_CONNECTIVITY_ERROR_CODE) {
-                        notifyDeveloperError(
-                                String.format(
-                                        "Error publishing Insights event '%s'\n  Response: %s\n  Error: %s",
-                                        eventJSON,
-                                        response.toString(),
-                                        response.getError().toString()));
-                    }
-
-                } catch (Exception e) {
-
-                    Utility.logd("Insights-exception: ", e);
-
-                }
-            }
-        });
-
-    }
-
-    private static String buildJSONForEvent(String eventName, double valueToSum, Bundle parameters) {
-        String result;
-        try {
-
-            // Build custom event payload
-            JSONObject eventObject = new JSONObject();
-            eventObject.put("_eventName", eventName);
-            if (valueToSum != 1.0) {
-                eventObject.put("_valueToSum", valueToSum);
-            }
-
-            if (parameters != null) {
-
-                Set<String> keys = parameters.keySet();
-                for (String key : keys) {
-                    Object value = parameters.get(key);
-
-                    if (!(value instanceof String) &&
-                        !(value instanceof Number)) {
-
-                        notifyDeveloperError(
-                                String.format("Parameter '%s' must be a string or a numeric type.", key));
-                    }
-
-                    eventObject.put(key, value);
-                }
-            }
-
-            JSONArray eventArray = new JSONArray();
-            eventArray.put(eventObject);
-
-            result = eventArray.toString();
-
-        } catch (JSONException exception) {
-
-            notifyDeveloperError(exception.toString());
-            result = null;
-
-        }
-
-        return result;
-    }
-
-    /**
-     * Using the specifiedSession member variable (which may be nil), find the real session to log to
-     * (with an access token).  Precedence: 1) specified session, 2) activeSession, 3) app authenticated
-     * session via Client Token.
-     */
-    private Session sessionToLogTo() {
-
-        synchronized (this) {
-
-            Session session = specifiedSession;
-
-            // Require an open session.
-
-            if (session == null || !session.isOpened()) {
-                session = Session.getActiveSession();
-            }
-
-            if (session == null || !session.isOpened() || session.getAccessToken() == null) {
-
-                if (appAuthSession == null) {
-
-                    // Build and stash a client-token based session.
-
-                    // Form the clientToken based access token from appID and client token.
-                    String tokenString = String.format("%s|%s", applicationId, clientToken);
-                    AccessToken token = AccessToken.createFromString(tokenString, null, AccessTokenSource.CLIENT_TOKEN);
-
-                    appAuthSession = new Session(null, applicationId, new NonCachingTokenCachingStrategy(), false);
-                    appAuthSession.open(token, null);
-                }
-
-                session = appAuthSession;
-            }
-
-            return session;
-        }
-    }
-
-    /**
-     * Invoke this method, rather than throwing an Exception, for situations where user/server input might reasonably
-     * cause this to occur, and thus don't want an exception thrown at production time, but do want logging
-     * notification.
-     */
-    private static void notifyDeveloperError(String message) {
-        Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "Insights", message);
+        appEventsLogger.logEvent(EVENT_NAME_LOG_CONVERSION_PIXEL, valueOfPixel, parameters);
+        AppEventsLogger.eagerFlush();
     }
 }
diff --git a/facebook/src/com/facebook/LoggingBehavior.java b/facebook/src/com/facebook/LoggingBehavior.java
index 5c251d017..5fb198e9c 100644
--- a/facebook/src/com/facebook/LoggingBehavior.java
+++ b/facebook/src/com/facebook/LoggingBehavior.java
@@ -38,8 +38,16 @@
      * Indicates that cache operations should be logged.
      */
     CACHE,
+    /**
+     * Indicates the App Events-related operations should be logged.
+     */
+    APP_EVENTS,
     /**
      * Indicates that likely developer errors should be logged.  (This is set by default in LoggingBehavior.)
      */
     DEVELOPER_ERRORS
+    ;
+
+    @Deprecated
+    public static final LoggingBehavior INSIGHTS = APP_EVENTS;
 }
diff --git a/facebook/src/com/facebook/LoginActivity.java b/facebook/src/com/facebook/LoginActivity.java
index 26e769a88..096f00eae 100644
--- a/facebook/src/com/facebook/LoginActivity.java
+++ b/facebook/src/com/facebook/LoginActivity.java
@@ -19,6 +19,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
+import android.util.Log;
 import android.view.View;
 import com.facebook.android.R;
 
@@ -38,6 +39,7 @@
 public class LoginActivity extends Activity {
     static final String RESULT_KEY = "com.facebook.LoginActivity:Result";
 
+    private static final String TAG = LoginActivity.class.getName();
     private static final String NULL_CALLING_PKG_ERROR_MSG =
             "Cannot call LoginActivity with a null calling package. " +
                     "This can occur if the launchMode of the caller is singleInstance.";
@@ -105,9 +107,11 @@ public void onResume() {
 
         // If the calling package is null, this generally means that the callee was started
         // with a launchMode of singleInstance. Unfortunately, Android does not allow a result
-        // to be set when the callee is a singleInstance, so we throw an exception here.
+        // to be set when the callee is a singleInstance, so we log an error and return.
         if (callingPackage == null) {
-            throw new FacebookException(NULL_CALLING_PKG_ERROR_MSG);
+            Log.e(TAG, NULL_CALLING_PKG_ERROR_MSG);
+            finish();
+            return;
         }
 
         authorizationClient.startOrContinueAuth(request);
diff --git a/facebook/src/com/facebook/NativeAppCallAttachmentStore.java b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
new file mode 100644
index 000000000..dc4108656
--- /dev/null
+++ b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
@@ -0,0 +1,225 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.util.Log;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+
+import java.io.*;
+import java.net.URLEncoder;
+import java.util.*;
+
+/**
+ * <p>This class works in conjunction with {@link NativeAppCallContentProvider} to allow apps to attach binary
+ * attachments (e.g., images) to native dialogs launched via the {@link com.facebook.widget.FacebookDialog}
+ * class. It stores attachments in temporary files and allows the Facebook application to retrieve them via
+ * the content provider.</p>
+ *
+ * <p>Callers are generally not expected to need to use this class directly;
+ * see {@link com.facebook.widget.FacebookDialog.OpenGraphActionDialogBuilder#setImageAttachmentsForObject(String,
+ * java.util.List) OpenGraphActionDialogBuilder.setImageAttachmentsForObject} for an example of a function
+ * that will accept attachments, attach them to the native dialog call, and add them to the content provider
+ * automatically.</p>
+ **/
+public final class NativeAppCallAttachmentStore implements NativeAppCallContentProvider.AttachmentDataSource {
+    private static final String TAG = NativeAppCallAttachmentStore.class.getName();
+    static final String ATTACHMENTS_DIR_NAME = "com.facebook.NativeAppCallAttachmentStore.files";
+    private static File attachmentsDirectory;
+
+    /**
+     * Adds a number of bitmap attachments associated with a native app call. The attachments will be
+     * served via {@link NativeAppCallContentProvider#openFile(android.net.Uri, String) openFile}.
+     *
+     * @param context the Context the call is being made from
+     * @param callId the unique ID of the call
+     * @param imageAttachments a Map of attachment names to Bitmaps; the attachment names will be part of
+     *                         the URI processed by openFile
+     * @throws java.io.IOException
+     */
+    public void addAttachmentsForCall(Context context, UUID callId, Map<String, Bitmap> imageAttachments) {
+        Validate.notNull(context, "context");
+        Validate.notNull(callId, "callId");
+        Validate.containsNoNulls(imageAttachments.values(), "imageAttachments");
+        Validate.containsNoNullOrEmpty(imageAttachments.keySet(), "imageAttachments");
+
+        addAttachments(context, callId, imageAttachments, new ProcessAttachment<Bitmap>() {
+            @Override
+            public void processAttachment(Bitmap attachment, File outputFile) throws IOException {
+                FileOutputStream outputStream = new FileOutputStream(outputFile);
+                try {
+                    attachment.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
+                } finally {
+                    Utility.closeQuietly(outputStream);
+                }
+            }
+        });
+    }
+
+    /**
+     * Adds a number of bitmap attachment files associated with a native app call. The attachments will be
+     * served via {@link NativeAppCallContentProvider#openFile(android.net.Uri, String) openFile}.
+     *
+     * @param context the Context the call is being made from
+     * @param callId the unique ID of the call
+     * @param imageAttachments a Map of attachment names to Files containing the bitmaps; the attachment names will be
+     *                         part of the URI processed by openFile
+     * @throws java.io.IOException
+     */
+    public void addAttachmentFilesForCall(Context context, UUID callId, Map<String, File> imageAttachmentFiles) {
+        Validate.notNull(context, "context");
+        Validate.notNull(callId, "callId");
+        Validate.containsNoNulls(imageAttachmentFiles.values(), "imageAttachmentFiles");
+        Validate.containsNoNullOrEmpty(imageAttachmentFiles.keySet(), "imageAttachmentFiles");
+
+        addAttachments(context, callId, imageAttachmentFiles, new ProcessAttachment<File>() {
+            @Override
+            public void processAttachment(File attachment, File outputFile) throws IOException {
+                FileOutputStream outputStream = new FileOutputStream(outputFile);
+                FileInputStream inputStream = null;
+                try {
+                    inputStream = new FileInputStream(attachment);
+
+                    byte[] buffer = new byte[1024];
+                    int len;
+                    while ((len = inputStream.read(buffer)) > 0) {
+                        outputStream.write(buffer, 0, len);
+                    }
+                } finally {
+                    Utility.closeQuietly(outputStream);
+                    Utility.closeQuietly(inputStream);
+                }
+            }
+        });
+    }
+
+    private <T> void addAttachments(Context context, UUID callId, Map<String, T> attachments,
+            ProcessAttachment<T> processor) {
+        if (attachments.size() == 0) {
+            return;
+        }
+
+        // If this is the first time we've been instantiated, clean up any existing attachments.
+        if (attachmentsDirectory == null) {
+            cleanupAllAttachments(context);
+        }
+
+        ensureAttachmentsDirectoryExists(context);
+
+        List<File> filesToCleanup = new ArrayList<File>();
+
+        try {
+            for (Map.Entry<String, T> entry : attachments.entrySet()) {
+                String attachmentName = entry.getKey();
+                T attachment = entry.getValue();
+
+                File file = getAttachmentFile(callId, attachmentName, true);
+                filesToCleanup.add(file);
+
+                processor.processAttachment(attachment, file);
+            }
+        } catch (IOException exception) {
+            Log.e(TAG, "Got unexpected exception:" + exception);
+            for (File file : filesToCleanup) {
+                try {
+                    file.delete();
+                } catch (Exception e) {
+                    // Always try to delete other files.
+                }
+            }
+            throw new FacebookException(exception);
+        }
+
+    }
+
+    interface ProcessAttachment<T> {
+        void processAttachment(T attachment, File outputFile) throws IOException;
+    }
+
+    /**
+     * Removes any temporary files associated with a particular native app call.
+     *
+     * @param context the Context the call is being made from
+     * @param callId the unique ID of the call
+     */
+    public void cleanupAttachmentsForCall(Context context, UUID callId) {
+        File dir = getAttachmentsDirectoryForCall(callId, false);
+        Utility.deleteDirectory(dir);
+    }
+
+    @Override
+    public File openAttachment(UUID callId, String attachmentName) throws FileNotFoundException {
+        if (Utility.isNullOrEmpty(attachmentName) ||
+                callId == null) {
+            throw new FileNotFoundException();
+        }
+
+        try {
+            return getAttachmentFile(callId, attachmentName, false);
+        } catch (IOException e) {
+            // We don't try to create the file, so we shouldn't get any IOExceptions. But if we do, just
+            // act like the file wasn't found.
+            throw new FileNotFoundException();
+        }
+    }
+
+    synchronized static File getAttachmentsDirectory(Context context) {
+        if (attachmentsDirectory == null) {
+            attachmentsDirectory = new File(context.getCacheDir(), ATTACHMENTS_DIR_NAME);
+        }
+        return attachmentsDirectory;
+    }
+
+    File ensureAttachmentsDirectoryExists(Context context) {
+        File dir = getAttachmentsDirectory(context);
+        dir.mkdirs();
+        return dir;
+    }
+
+    File getAttachmentsDirectoryForCall(UUID callId, boolean create) {
+        if (attachmentsDirectory == null) {
+            return null;
+        }
+
+        File dir = new File(attachmentsDirectory, callId.toString());
+        if (create && !dir.exists()) {
+            dir.mkdirs();
+        }
+        return dir;
+    }
+
+    File getAttachmentFile(UUID callId, String attachmentName, boolean createDirs) throws IOException {
+        File dir = getAttachmentsDirectoryForCall(callId, createDirs);
+        if (dir == null) {
+            return null;
+        }
+
+        try {
+            return new File(dir, URLEncoder.encode(attachmentName, "UTF-8"));
+        } catch (UnsupportedEncodingException e) {
+            return null;
+        }
+    }
+
+    void cleanupAllAttachments(Context context) {
+        // Attachments directory may or may not exist; we won't create it if not, since we are just going to delete it.
+        File dir = getAttachmentsDirectory(context);
+        Utility.deleteDirectory(dir);
+    }
+}
diff --git a/facebook/src/com/facebook/NativeAppCallContentProvider.java b/facebook/src/com/facebook/NativeAppCallContentProvider.java
new file mode 100644
index 000000000..bde165f58
--- /dev/null
+++ b/facebook/src/com/facebook/NativeAppCallContentProvider.java
@@ -0,0 +1,139 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.ParcelFileDescriptor;
+import android.util.Log;
+import android.util.Pair;
+
+import java.io.*;
+import java.util.*;
+
+/**
+ * <p>Implements a <a href="http://developer.android.com/reference/android/content/ContentProvider.html">
+ * ContentProvider</a> that can be used to provide binary attachments (e.g., images) to calls made
+ * via @link FacebookDialog}. The {@link NativeAppCallAttachmentStore} class provides methods to attach
+ * and clean up the attachments.
+ *
+ * <p>Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are
+ * stored in memory and do not have another way to be referenced by a content URI. For images obtained from,
+ * e.g., the Camera or Gallery, that already have a content URI associated with them, use of this class is not
+ * necessary.</p>
+ *
+ * <p>If an application wishes to attach images that are stored in-memory within the application, this content
+ * provider must be listed in the application's AndroidManifest.xml, and it should be named according to the
+ * pattern <code>"com.facebook.app.NativeAppCallContentProvider{FACEBOOK_APP_ID}"</code>. See the
+ * {@link NativeAppCallContentProvider#getAttachmentUrl(String) getContentProviderName} method.</p>
+ */
+public class NativeAppCallContentProvider extends ContentProvider {
+    private static final String TAG = NativeAppCallContentProvider.class.getName();
+    private static final String ATTACHMENT_URL_BASE = "content://com.facebook.app.NativeAppCallContentProvider";
+
+    private final AttachmentDataSource dataSource;
+
+    public NativeAppCallContentProvider() {
+        this(new NativeAppCallAttachmentStore());
+    }
+
+    NativeAppCallContentProvider(AttachmentDataSource dataSource) {
+        this.dataSource = dataSource;
+    }
+
+    interface AttachmentDataSource {
+        File openAttachment(UUID callId, String attachmentName) throws FileNotFoundException;
+    }
+
+    /**
+     * Returns the name of the content provider formatted correctly for constructing URLs.
+     * @param applicationId the Facebook application ID of the application
+     * @return the String to use as the authority portion of a content URI.
+     */
+    public static String getAttachmentUrl(String applicationId, UUID callId, String attachmentName) {
+        return String.format("%s%s/%s/%s", ATTACHMENT_URL_BASE, applicationId, callId.toString(), attachmentName);
+    }
+
+    @Override
+    public boolean onCreate() {
+        return true;
+    }
+
+    @Override
+    public Cursor query(Uri uri, String[] strings, String s, String[] strings2, String s2) {
+        return null;
+    }
+
+    @Override
+    public String getType(Uri uri) {
+        return null;
+    }
+
+    @Override
+    public Uri insert(Uri uri, ContentValues contentValues) {
+        return null;
+    }
+
+    @Override
+    public int delete(Uri uri, String s, String[] strings) {
+        return 0;
+    }
+
+    @Override
+    public int update(Uri uri, ContentValues contentValues, String s, String[] strings) {
+        return 0;
+    }
+
+    @Override
+    public android.os.ParcelFileDescriptor openFile(android.net.Uri uri, java.lang.String mode)
+            throws java.io.FileNotFoundException {
+
+        Pair<UUID, String> callIdAndAttachmentName = parseCallIdAndAttachmentName(uri);
+        if (callIdAndAttachmentName == null) {
+            throw new FileNotFoundException();
+        }
+
+        try {
+            File file = dataSource.openAttachment(callIdAndAttachmentName.first, callIdAndAttachmentName.second);
+
+            return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
+        } catch (FileNotFoundException exception) {
+            Log.e(TAG, "Got unexpected exception:" + exception);
+            throw exception;
+        }
+    }
+
+    Pair<UUID, String> parseCallIdAndAttachmentName(Uri uri) {
+        try {
+            // We don't do explicit format checking here. Malformed URIs may generate NullPointerExceptions or
+            // array bounds exceptions, which we'll catch and return null. All of these will result in a
+            // FileNotFoundException being thrown in openFile.
+            String callIdAndAttachmentName = uri.getPath().substring(1);
+            String [] parts = callIdAndAttachmentName.split("/");
+
+            String callIdString = parts[0];
+            String attachmentName = parts[1];
+            UUID callId = UUID.fromString(callIdString);
+
+            return new Pair<UUID, String>(callId, attachmentName);
+        } catch (Exception exception) {
+            return null;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/NativeProtocol.java b/facebook/src/com/facebook/NativeProtocol.java
deleted file mode 100644
index 279d08972..000000000
--- a/facebook/src/com/facebook/NativeProtocol.java
+++ /dev/null
@@ -1,254 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.ResolveInfo;
-import android.content.pm.Signature;
-import android.os.Bundle;
-import android.text.TextUtils;
-import com.facebook.internal.Utility;
-
-import java.util.ArrayList;
-import java.util.List;
-
-final class NativeProtocol {
-    static final String KATANA_PACKAGE = "com.facebook.katana";
-    static final String KATANA_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
-    static final String KATANA_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
-    static final String KATANA_SIGNATURE =
-            "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
-                    + "b3009060355040613025553310b30090603550408130243413112301006035504"
-                    + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
-                    + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
-                    + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
-                    + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
-                    + "55040613025553310b30090603550408130243413112301006035504071309506"
-                    + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
-                    + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
-                    + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
-                    + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
-                    + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
-                    + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
-                    + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
-                    + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
-                    + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
-                    + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
-                    + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
-                    + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
-                    + "928a2";
-    private static final String BASIC_INFO = "basic_info";
-    public static final String KATANA_PROXY_AUTH_PERMISSIONS_KEY = "scope";
-    public static final String KATANA_PROXY_AUTH_APP_ID_KEY = "client_id";
-
-    static final boolean validateSignature(Context context, String packageName) {
-        PackageInfo packageInfo = null;
-        try {
-            packageInfo = context.getPackageManager().getPackageInfo(packageName,
-                    PackageManager.GET_SIGNATURES);
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-
-        for (Signature signature : packageInfo.signatures) {
-            if (signature.toCharsString().equals(KATANA_SIGNATURE)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    static Intent validateKatanaActivityIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.activityInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    static Intent validateKatanaServiceIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.serviceInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions) {
-        Intent intent = new Intent()
-                .setClassName(KATANA_PACKAGE, KATANA_PROXY_AUTH_ACTIVITY)
-                .putExtra(KATANA_PROXY_AUTH_APP_ID_KEY, applicationId);
-
-        if (!Utility.isNullOrEmpty(permissions)) {
-            intent.putExtra(KATANA_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-        }
-
-        return validateKatanaActivityIntent(context, intent);
-    }
-
-    static Intent createTokenRefreshIntent(Context context) {
-        Intent intent = new Intent();
-        intent.setClassName(KATANA_PACKAGE, KATANA_TOKEN_REFRESH_ACTIVITY);
-
-        return validateKatanaServiceIntent(context, intent);
-    }
-
-    // ---------------------------------------------------------------------------------------------
-    // Native Protocol updated 2012-11
-
-    static final String INTENT_ACTION_PLATFORM_ACTIVITY = "com.facebook.platform.PLATFORM_ACTIVITY";
-    static final String INTENT_ACTION_PLATFORM_SERVICE = "com.facebook.platform.PLATFORM_SERVICE";
-
-    static final int PROTOCOL_VERSION_20121101 = 20121101;
-    static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
-    static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
-
-    // Messages supported by PlatformService:
-    static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST = 0x10000;
-    static final int MESSAGE_GET_ACCESS_TOKEN_REPLY   = 0x10001;
-
-    // MESSAGE_ERROR_REPLY data keys:
-    // See STATUS_*
-
-    // MESSAGE_GET_ACCESS_TOKEN_REQUEST data keys:
-    // EXTRA_APPLICATION_ID
-
-    // MESSAGE_GET_ACCESS_TOKEN_REPLY data keys:
-    // EXTRA_ACCESS_TOKEN
-    // EXTRA_EXPIRES_SECONDS_SINCE_EPOCH
-    // EXTRA_PERMISSIONS
-
-    // Values of EXTRA_PROTOCOL_ACTION supported by PlatformActivity:
-    static final String ACTION_LOGIN_DIALOG = "com.facebook.platform.action.request.LOGIN_DIALOG";
-
-    // Values of EXTRA_PROTOCOL_ACTION values returned by PlatformActivity:
-    static final String ACTION_LOGIN_DIALOG_REPLY =
-            "com.facebook.platform.action.reply.LOGIN_DIALOG";
-
-    // Extras supported for ACTION_LOGIN_DIALOG:
-    static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS";
-    static final String EXTRA_WRITE_PRIVACY = "com.facebook.platform.extra.WRITE_PRIVACY";
-    static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID";
-
-    // Extras returned by setResult() for ACTION_LOGIN_DIALOG
-    static final String EXTRA_ACCESS_TOKEN = "com.facebook.platform.extra.ACCESS_TOKEN";
-    static final String EXTRA_EXPIRES_SECONDS_SINCE_EPOCH =
-            "com.facebook.platform.extra.EXPIRES_SECONDS_SINCE_EPOCH";
-    // EXTRA_PERMISSIONS
-
-    // Keys for status data in MESSAGE_ERROR_REPLY from PlatformService and for error
-    // extras returned by PlatformActivity's setResult() in case of errors:
-    static final String STATUS_ERROR_TYPE = "com.facebook.platform.status.ERROR_TYPE";
-    static final String STATUS_ERROR_DESCRIPTION =
-            "com.facebook.platform.status.ERROR_DESCRIPTION";
-    static final String STATUS_ERROR_CODE = "com.facebook.platform.status.ERROR_CODE";
-    static final String STATUS_ERROR_SUBCODE = "com.facebook.platform.status.ERROR_SUBCODE";
-    static final String STATUS_ERROR_JSON = "com.facebook.platform.status.ERROR_JSON";
-
-    // Expected values for ERROR_KEY_TYPE.  Clients should tolerate other values:
-    static final String ERROR_UNKNOWN_ERROR = "UnknownError";
-    static final String ERROR_PROTOCOL_ERROR = "ProtocolError";
-    static final String ERROR_USER_CANCELED = "UserCanceled";
-    static final String ERROR_APPLICATION_ERROR = "ApplicationError";
-    static final String ERROR_NETWORK_ERROR = "NetworkError";
-    static final String ERROR_PERMISSION_DENIED = "PermissionDenied";
-    static final String ERROR_SERVICE_DISABLED = "ServiceDisabled";
-
-    static final String AUDIENCE_ME = "SELF";
-    static final String AUDIENCE_FRIENDS = "ALL_FRIENDS";
-    static final String AUDIENCE_EVERYONE = "EVERYONE";
-
-    static Intent createLoginDialog20121101Intent(Context context, String applicationId, ArrayList<String> permissions,
-            String audience) {
-        Intent intent = new Intent()
-                    .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
-                    .addCategory(Intent.CATEGORY_DEFAULT)
-                    .putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
-                    .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
-                    .putExtra(EXTRA_APPLICATION_ID, applicationId)
-                    .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
-                    .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
-        return validateKatanaActivityIntent(context, intent);
-    }
-
-    private static String ensureDefaultAudience(String audience) {
-        if (Utility.isNullOrEmpty(audience)) {
-            return AUDIENCE_ME;
-        } else {
-            return audience;
-        }
-    }
-
-    private static ArrayList<String> ensureDefaultPermissions(ArrayList<String> permissions) {
-        ArrayList<String> updated;
-
-        // Return if we are doing publish, or if basic_info is already included
-        if (Utility.isNullOrEmpty(permissions)) {
-            updated = new ArrayList<String>();
-        } else {
-            for (String permission : permissions) {
-                if (Session.isPublishPermission(permission) || BASIC_INFO.equals(permission)) {
-                    return permissions;
-                }
-            }
-            updated = new ArrayList<String>(permissions);
-        }
-
-        updated.add(BASIC_INFO);
-        return updated;
-    }
-
-    static boolean isServiceDisabledResult20121101(Intent data) {
-        int protocolVersion = data.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
-        String errorType = data.getStringExtra(STATUS_ERROR_TYPE);
-
-        return ((PROTOCOL_VERSION_20121101 == protocolVersion) && ERROR_SERVICE_DISABLED.equals(errorType));
-    }
-
-    static AccessTokenSource getAccessTokenSourceFromNative(Bundle extras) {
-        long expected = PROTOCOL_VERSION_20121101;
-        long actual = extras.getInt(EXTRA_PROTOCOL_VERSION, 0);
-
-        if (expected == actual) {
-            return AccessTokenSource.FACEBOOK_APPLICATION_NATIVE;
-        } else {
-            return AccessTokenSource.FACEBOOK_APPLICATION_WEB;
-        }
-    }
-}
diff --git a/facebook/src/com/facebook/ProgressNoopOutputStream.java b/facebook/src/com/facebook/ProgressNoopOutputStream.java
new file mode 100644
index 000000000..e0e3770df
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressNoopOutputStream.java
@@ -0,0 +1,74 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.OutputStream;
+import java.util.HashMap;
+import java.util.Map;
+
+class ProgressNoopOutputStream extends OutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap = new HashMap<Request, RequestProgress>();
+    private final Handler callbackHandler;
+
+    private Request currentRequest;
+    private RequestProgress currentRequestProgress;
+    private int batchMax;
+
+    ProgressNoopOutputStream(Handler callbackHandler) {
+        this.callbackHandler = callbackHandler;
+    }
+
+    public void setCurrentRequest(Request currentRequest) {
+        this.currentRequest = currentRequest;
+        this.currentRequestProgress = currentRequest != null? progressMap.get(currentRequest) : null;
+    }
+
+    int getMaxProgress() {
+        return batchMax;
+    }
+
+    Map<Request,RequestProgress> getProgressMap() {
+        return progressMap;
+    }
+
+    void addProgress(long size) {
+        if (currentRequestProgress == null) {
+            currentRequestProgress = new RequestProgress(callbackHandler, currentRequest);
+            progressMap.put(currentRequest, currentRequestProgress);
+        }
+
+        currentRequestProgress.addToMax(size);
+        batchMax += size;
+    }
+
+    @Override
+    public void write(byte[] buffer) {
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) {
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) {
+        addProgress(1);
+    }
+}
diff --git a/facebook/src/com/facebook/ProgressOutputStream.java b/facebook/src/com/facebook/ProgressOutputStream.java
new file mode 100644
index 000000000..780baffd6
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressOutputStream.java
@@ -0,0 +1,121 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.FilterOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Map;
+
+class ProgressOutputStream extends FilterOutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap;
+    private final RequestBatch requests;
+    private final long threshold;
+
+    private long batchProgress, lastReportedProgress, maxProgress;
+    private RequestProgress currentRequestProgress;
+
+    ProgressOutputStream(OutputStream out, RequestBatch requests, Map<Request, RequestProgress> progressMap, long maxProgress) {
+        super(out);
+        this.requests = requests;
+        this.progressMap = progressMap;
+        this.maxProgress = maxProgress;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    private void addProgress(long size) {
+        if (currentRequestProgress != null) {
+            currentRequestProgress.addProgress(size);
+        }
+
+        batchProgress += size;
+
+        if (batchProgress >= lastReportedProgress + threshold || batchProgress >= maxProgress) {
+            reportBatchProgress();
+        }
+    }
+
+    private void reportBatchProgress() {
+        if (batchProgress > lastReportedProgress) {
+            for (RequestBatch.Callback callback : requests.getCallbacks()) {
+                if (callback instanceof RequestBatch.OnProgressCallback) {
+                    final Handler callbackHandler = requests.getCallbackHandler();
+
+                    // Keep copies to avoid threading issues
+                    final RequestBatch.OnProgressCallback progressCallback = (RequestBatch.OnProgressCallback) callback;
+                    if (callbackHandler == null) {
+                        progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                    }
+                    else {
+                        callbackHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                            }
+                        });
+                    }
+                }
+            }
+
+            lastReportedProgress = batchProgress;
+        }
+    }
+
+    public void setCurrentRequest(Request request) {
+        currentRequestProgress = request != null? progressMap.get(request) : null;
+    }
+
+    long getBatchProgress() {
+        return batchProgress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    @Override
+    public void write(byte[] buffer) throws IOException {
+        out.write(buffer);
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) throws IOException {
+        out.write(buffer, offset, length);
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) throws IOException {
+        out.write(oneByte);
+        addProgress(1);
+    }
+
+    @Override
+    public void close() throws IOException {
+        super.close();
+
+        for (RequestProgress p : progressMap.values()) {
+            p.reportProgress();
+        }
+
+        reportBatchProgress();
+    }
+}
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index ac5fe2bdd..e7660f6c0 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -16,12 +16,11 @@
 
 package com.facebook;
 
+import android.content.Context;
 import android.graphics.Bitmap;
 import android.location.Location;
 import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.ParcelFileDescriptor;
+import android.os.*;
 import android.text.TextUtils;
 import android.util.Pair;
 import com.facebook.internal.ServerProtocol;
@@ -73,8 +72,12 @@
     private static final String MY_FRIENDS = "me/friends";
     private static final String MY_PHOTOS = "me/photos";
     private static final String MY_VIDEOS = "me/videos";
+    private static final String VIDEOS_SUFFIX = "/videos";
     private static final String SEARCH = "search";
     private static final String MY_FEED = "me/feed";
+    private static final String MY_STAGING_RESOURCES = "me/staging_resources";
+    private static final String MY_OBJECTS_FORMAT = "me/objects/%s";
+    private static final String MY_ACTION_FORMAT = "me/%s";
 
     private static final String USER_AGENT_BASE = "FBAndroidSDK";
     private static final String USER_AGENT_HEADER = "User-Agent";
@@ -99,6 +102,8 @@
     private static final String ATTACHED_FILES_PARAM = "attached_files";
     private static final String MIGRATION_BUNDLE_PARAM = "migration_bundle";
     private static final String ISO_8601_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ssZ";
+    private static final String STAGING_PARAM = "file";
+    private static final String OBJECT_PARAM = "object";
 
     private static final String MIME_BOUNDARY = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
 
@@ -115,6 +120,7 @@
     private Bundle parameters;
     private Callback callback;
     private String overriddenURL;
+    private Object tag;
 
     /**
      * Constructs a request without a session, graph path, or any other parameters.
@@ -422,12 +428,388 @@ public void onCompleted(Response response) {
      * @return a Request that is ready to execute
      */
     public static Request newStatusUpdateRequest(Session session, String message, Callback callback) {
+        return newStatusUpdateRequest(session, message, (String)null, null, callback);
+    }
+
+    /**
+     * Creates a new Request configured to post a status update to a user's feed.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param message
+     *            the text of the status update
+     * @param placeId
+     *            an optional place id to associate with the post
+     * @param tagIds
+     *            an optional list of user ids to tag in the post
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    private static Request newStatusUpdateRequest(Session session, String message, String placeId, List<String> tagIds,
+            Callback callback) {
+
         Bundle parameters = new Bundle();
         parameters.putString("message", message);
 
+        if (placeId != null) {
+            parameters.putString("place", placeId);
+        }
+
+        if (tagIds != null && tagIds.size() > 0) {
+            String tags = TextUtils.join(",", tagIds);
+            parameters.putString("tags", tags);
+        }
+
         return new Request(session, MY_FEED, parameters, HttpMethod.POST, callback);
     }
 
+    /**
+     * Creates a new Request configured to post a status update to a user's feed.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param message
+     *            the text of the status update
+     * @param place
+     *            an optional place to associate with the post
+     * @param tags
+     *            an optional list of users to tag in the post
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newStatusUpdateRequest(Session session, String message, GraphPlace place,
+            List<GraphUser> tags, Callback callback) {
+
+        List<String> tagIds = null;
+        if (tags != null) {
+            tagIds = new ArrayList<String>(tags.size());
+            for (GraphUser tag: tags) {
+                tagIds.add(tag.getId());
+            }
+        }
+        String placeId = place == null ? null : place.getId();
+        return newStatusUpdateRequest(session, message, placeId, tagIds, callback);
+    }
+
+    /**
+     * Creates a new Request configured to retrieve an App User ID for the app's Facebook user.  Callers
+     * will send this ID back to their own servers, collect up a set to create a Facebook Custom Audience with,
+     * and then use the resultant Custom Audience to target ads.
+     * <p/>
+     * The GraphObject in the response will include an "custom_audience_third_party_id" property, with the value
+     * being the ID retrieved.  This ID is an encrypted encoding of the Facebook user's ID and the
+     * invoking Facebook app ID.  Multiple calls with the same user will return different IDs, thus these IDs cannot be
+     * used to correlate behavior across devices or applications, and are only meaningful when sent back to Facebook
+     * for creating Custom Audiences.
+     * <p/>
+     * The ID retrieved represents the Facebook user identified in the following way: if the specified session
+     * (or activeSession if the specified session is `null`) is open, the ID will represent the user associated with
+     * the activeSession; otherwise the ID will represent the user logged into the native Facebook app on the device.
+     * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
+     * it, or c) the app has previously called
+     * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} with `true` for this user.
+     *
+     * @param session
+     *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
+     *            If there is no logged-in Facebook user, null is the expected choice.
+     * @param context
+     *            the Application context from which the app ID will be pulled, and from which the 'attribution ID'
+     *            for the Facebook user is determined.  If there has been no app ID set, an exception will be thrown.
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions.
+     *            The GraphObject in the Response will contain a "custom_audience_third_party_id" property that
+     *            represents the user as described above.
+     * @return a Request that is ready to execute
+     */
+    public static Request newCustomAudienceThirdPartyIdRequest(Session session, Context context, Callback callback) {
+        return newCustomAudienceThirdPartyIdRequest(session, context, null, callback);
+    }
+
+    /**
+     * Creates a new Request configured to retrieve an App User ID for the app's Facebook user.  Callers
+     * will send this ID back to their own servers, collect up a set to create a Facebook Custom Audience with,
+     * and then use the resultant Custom Audience to target ads.
+     * <p/>
+     * The GraphObject in the response will include an "custom_audience_third_party_id" property, with the value
+     * being the ID retrieved.  This ID is an encrypted encoding of the Facebook user's ID and the
+     * invoking Facebook app ID.  Multiple calls with the same user will return different IDs, thus these IDs cannot be
+     * used to correlate behavior across devices or applications, and are only meaningful when sent back to Facebook
+     * for creating Custom Audiences.
+     * <p/>
+     * The ID retrieved represents the Facebook user identified in the following way: if the specified session
+     * (or activeSession if the specified session is `null`) is open, the ID will represent the user associated with
+     * the activeSession; otherwise the ID will represent the user logged into the native Facebook app on the device.
+     * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
+     * it, or c) the app has previously called
+     * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} ;} with `true` for this user.
+     *
+     * @param session
+     *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
+     *            If there is no logged-in Facebook user, null is the expected choice.
+     * @param context
+     *            the Application context from which the app ID will be pulled, and from which the 'attribution ID'
+     *            for the Facebook user is determined.  If there has been no app ID set, an exception will be thrown.
+     * @param applicationId
+     *            explicitly specified Facebook App ID.  If null, and there's a valid session, then the application ID
+     *            from the session will be used, otherwise the application ID from metadata will be used.
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions.
+     *            The GraphObject in the Response will contain a "custom_audience_third_party_id" property that
+     *            represents the user as described above.
+     * @return a Request that is ready to execute
+     */
+    public static Request newCustomAudienceThirdPartyIdRequest(Session session,
+            Context context, String applicationId, Callback callback) {
+
+        // if provided session or activeSession is opened, use it.
+        if (session == null) {
+            session = Session.getActiveSession();
+        }
+
+        if (session != null && !session.isOpened()) {
+            session = null;
+        }
+
+        if (applicationId == null) {
+            if (session != null) {
+                applicationId = session.getApplicationId();
+            } else {
+                applicationId = Utility.getMetadataApplicationId(context);
+            }
+        }
+
+        if (applicationId == null) {
+            throw new FacebookException("Facebook App ID cannot be determined");
+        }
+
+        String endpoint = applicationId + "/custom_audience_third_party_id";
+
+        Bundle parameters = new Bundle();
+        if (session == null) {
+            // Only use the attributionID if we don't have an open session.  If we do have an open session, then
+            // the user token will be used to identify the user, and is more reliable than the attributionID.
+            String attributionId = Settings.getAttributionId(context.getContentResolver());
+            if (attributionId != null) {
+                parameters.putString("udid", attributionId);
+            }
+        }
+
+        // Server will choose to not provide the App User ID in the event that event usage has been limited for
+        // this user for this app.
+        if (Settings.getLimitEventAndDataUsage(context)) {
+            parameters.putString("limit_event_usage", "1");
+        }
+
+        return new Request(session, endpoint, parameters, HttpMethod.GET, callback);
+    }
+
+    /**
+     * Creates a new Request configured to upload an image to create a staging resource. Staging resources
+     * allow you to post binary data such as images, in preparation for a post of an Open Graph object or action
+     * which references the image. The URI returned when uploading a staging resource may be passed as the image
+     * property for an Open Graph object or action.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param image
+     *            the image to upload
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newUploadStagingResourceWithImageRequest(Session session,
+            Bitmap image, Callback callback) {
+        Bundle parameters = new Bundle(1);
+        parameters.putParcelable(STAGING_PARAM, image);
+
+        return new Request(session, MY_STAGING_RESOURCES, parameters, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to upload an image to create a staging resource. Staging resources
+     * allow you to post binary data such as images, in preparation for a post of an Open Graph object or action
+     * which references the image. The URI returned when uploading a staging resource may be passed as the image
+     * property for an Open Graph object or action.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param file
+     *            the file containing the image to upload
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newUploadStagingResourceWithImageRequest(Session session,
+            File file, Callback callback) throws FileNotFoundException {
+        ParcelFileDescriptor descriptor = ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
+        ParcelFileDescriptorWithMimeType descriptorWithMimeType = new ParcelFileDescriptorWithMimeType(descriptor, "image/png");
+        Bundle parameters = new Bundle(1);
+        parameters.putParcelable(STAGING_PARAM, descriptorWithMimeType);
+
+        return new Request(session, MY_STAGING_RESOURCES, parameters, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to create a user owned Open Graph object.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param openGraphObject
+     *            the Open Graph object to create; must not be null, and must have a non-empty type and title
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newPostOpenGraphObjectRequest(Session session,
+            OpenGraphObject openGraphObject, Callback callback) {
+        if (openGraphObject == null) {
+            throw new FacebookException("openGraphObject cannot be null");
+        }
+        if (Utility.isNullOrEmpty(openGraphObject.getType())) {
+            throw new FacebookException("openGraphObject must have non-null 'type' property");
+        }
+        if (Utility.isNullOrEmpty(openGraphObject.getTitle())) {
+            throw new FacebookException("openGraphObject must have non-null 'title' property");
+        }
+
+        String path = String.format(MY_OBJECTS_FORMAT, openGraphObject.getType());
+        Bundle bundle = new Bundle();
+        bundle.putString(OBJECT_PARAM, openGraphObject.getInnerJSONObject().toString());
+        return new Request(session, path, bundle, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to create a user owned Open Graph object.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param type
+     *            the fully-specified Open Graph object type (e.g., my_app_namespace:my_object_name); must not be null
+     * @param title
+     *            the title of the Open Graph object; must not be null
+     * @param imageUrl
+     *            the link to an image to be associated with the Open Graph object; may be null
+     * @param url
+     *            the url to be associated with the Open Graph object; may be null
+     * @param description
+     *            the description to be associated with the object; may be null
+     * @param objectProperties
+     *            any additional type-specific properties for the Open Graph object; may be null
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions;
+     *            may be null
+     * @return a Request that is ready to execute
+     */
+    public static Request newPostOpenGraphObjectRequest(Session session, String type, String title, String imageUrl,
+            String url, String description, GraphObject objectProperties, Callback callback) {
+        OpenGraphObject openGraphObject = OpenGraphObject.Factory.createForPost(OpenGraphObject.class, type, title,
+                imageUrl, url, description);
+        if (objectProperties != null) {
+            openGraphObject.setData(objectProperties);
+        }
+
+        return newPostOpenGraphObjectRequest(session, openGraphObject, callback);
+    }
+
+    /**
+     * Creates a new Request configured to publish an Open Graph action.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param openGraphAction
+     *            the Open Graph object to create; must not be null, and must have a non-empty 'type'
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newPostOpenGraphActionRequest(Session session, OpenGraphAction openGraphAction,
+            Callback callback) {
+        if (openGraphAction == null) {
+            throw new FacebookException("openGraphAction cannot be null");
+        }
+        if (Utility.isNullOrEmpty(openGraphAction.getType())) {
+            throw new FacebookException("openGraphAction must have non-null 'type' property");
+        }
+
+        String path = String.format(MY_ACTION_FORMAT, openGraphAction.getType());
+        return newPostRequest(session, path, openGraphAction, callback);
+    }
+
+    /**
+     * Creates a new Request configured to delete a resource through the Graph API.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param id
+     *            the id of the object to delete
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newDeleteObjectRequest(Session session, String id, Callback callback) {
+        return new Request(session, id, null, HttpMethod.DELETE, callback);
+    }
+
+    /**
+     * Creates a new Request configured to update a user owned Open Graph object.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param openGraphObject
+     *            the Open Graph object to update, which must have a valid 'id' property
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newUpdateOpenGraphObjectRequest(Session session, OpenGraphObject openGraphObject,
+            Callback callback) {
+        if (openGraphObject == null) {
+            throw new FacebookException("openGraphObject cannot be null");
+        }
+
+        String path = openGraphObject.getId();
+        if (path == null) {
+            throw new FacebookException("openGraphObject must have an id");
+        }
+
+        Bundle bundle = new Bundle();
+        bundle.putString(OBJECT_PARAM, openGraphObject.getInnerJSONObject().toString());
+        return new Request(session, path, bundle, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to update a user owned Open Graph object.
+     *
+     * @param session
+     *            the Session to use, or null; if non-null, the session must be in an opened state
+     * @param id
+     *            the id of the Open Graph object
+     * @param title
+     *            the title of the Open Graph object
+     * @param imageUrl
+     *            the link to an image to be associated with the Open Graph object
+     * @param url
+     *            the url to be associated with the Open Graph object
+     * @param description
+     *            the description to be associated with the object
+     * @param objectProperties
+     *            any additional type-specific properties for the Open Graph object
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @return a Request that is ready to execute
+     */
+    public static Request newUpdateOpenGraphObjectRequest(Session session, String id, String title, String imageUrl,
+            String url, String description, GraphObject objectProperties, Callback callback) {
+        OpenGraphObject openGraphObject = OpenGraphObject.Factory.createForPost(OpenGraphObject.class, null, title,
+                imageUrl, url, description);
+        openGraphObject.setId(id);
+        openGraphObject.setData(objectProperties);
+
+        return newUpdateOpenGraphObjectRequest(session, openGraphObject, callback);
+    }
+
     /**
      * Returns the GraphObject, if any, associated with this request.
      *
@@ -635,7 +1017,7 @@ public static final String getDefaultBatchApplicationId() {
      *            the Facebook application ID to use for batched requests if none can be determined
      */
     public static final void setDefaultBatchApplicationId(String applicationId) {
-        Request.defaultBatchApplicationId = applicationId;
+        defaultBatchApplicationId = applicationId;
     }
 
     /**
@@ -657,12 +1039,34 @@ public final void setCallback(Callback callback) {
         this.callback = callback;
     }
 
+    /**
+     * Sets the tag on the request; this is an application-defined object that can be used to distinguish
+     * between different requests. Its value has no effect on the execution of the request.
+     *
+     * @param tag an object to serve as a tag, or null
+     */
+    public final void setTag(Object tag) {
+        this.tag = tag;
+    }
+
+    /**
+     * Gets the tag on the request; this is an application-defined object that can be used to distinguish
+     * between different requests. Its value has no effect on the execution of the request.
+     *
+     * @return an object that serves as a tag, or null
+     */
+    public final Object getTag() {
+        return tag;
+    }
+
     /**
      * Starts a new Request configured to post a GraphObject to a particular graph path, to either create or update the
      * object at that path.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newPostRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param graphPath
@@ -673,16 +1077,19 @@ public final void setCallback(Callback callback) {
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executePostRequestAsync(Session session, String graphPath, GraphObject graphObject,
             Callback callback) {
         return newPostRequest(session, graphPath, graphObject, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to make a call to the Facebook REST API.
+     * Starts a new Request configured to make a call to the Facebook REST API.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newRestRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param restMethod
@@ -694,46 +1101,55 @@ public static RequestAsyncTask executePostRequestAsync(Session session, String g
      *            the HTTP method to use for the request; must be one of GET, POST, or DELETE
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeRestRequestAsync(Session session, String restMethod, Bundle parameters,
             HttpMethod httpMethod) {
         return newRestRequest(session, restMethod, parameters, httpMethod).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to retrieve a user's own profile.
+     * Starts a new Request configured to retrieve a user's own profile.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newMeRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param callback
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeMeRequestAsync(Session session, GraphUserCallback callback) {
         return newMeRequest(session, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to retrieve a user's friend list.
+     * Starts a new Request configured to retrieve a user's friend list.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newMyFriendsRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param callback
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeMyFriendsRequestAsync(Session session, GraphUserListCallback callback) {
         return newMyFriendsRequest(session, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to upload a photo to the user's default photo album.
+     * Starts a new Request configured to upload a photo to the user's default photo album.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newUploadPhotoRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param image
@@ -742,31 +1158,37 @@ public static RequestAsyncTask executeMyFriendsRequestAsync(Session session, Gra
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeUploadPhotoRequestAsync(Session session, Bitmap image, Callback callback) {
         return newUploadPhotoRequest(session, image, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to upload a photo to the user's default photo album. The photo
+     * Starts a new Request configured to upload a photo to the user's default photo album. The photo
      * will be read from the specified stream.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newUploadPhotoRequest(...).executeAsync();
+     *
      * @param session  the Session to use, or null; if non-null, the session must be in an opened state
      * @param file     the file containing the photo to upload
      * @param callback a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeUploadPhotoRequestAsync(Session session, File file,
             Callback callback) throws FileNotFoundException {
         return newUploadPhotoRequest(session, file, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request configured to retrieve a particular graph path.
+     * Starts a new Request configured to retrieve a particular graph path.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newGraphPathRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param graphPath
@@ -775,16 +1197,19 @@ public static RequestAsyncTask executeUploadPhotoRequestAsync(Session session, F
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeGraphPathRequestAsync(Session session, String graphPath, Callback callback) {
         return newGraphPathRequest(session, graphPath, callback).executeAsync();
     }
 
     /**
-     * Creates a new Request that is configured to perform a search for places near a specified location via the Graph
+     * Starts a new Request that is configured to perform a search for places near a specified location via the Graph
      * API.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newPlacesSearchRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param location
@@ -802,16 +1227,20 @@ public static RequestAsyncTask executeGraphPathRequestAsync(Session session, Str
      *
      * @throws FacebookException If neither location nor searchText is specified
      */
-    public static RequestAsyncTask executePlacesSearchRequestAsync(Session session, Location location, int radiusInMeters,
-            int resultsLimit, String searchText, GraphPlaceListCallback callback) {
-        return newPlacesSearchRequest(session, location, radiusInMeters, resultsLimit, searchText, callback).executeAsync();
+    @Deprecated
+    public static RequestAsyncTask executePlacesSearchRequestAsync(Session session, Location location,
+            int radiusInMeters, int resultsLimit, String searchText, GraphPlaceListCallback callback) {
+        return newPlacesSearchRequest(session, location, radiusInMeters, resultsLimit, searchText, callback)
+                .executeAsync();
     }
 
     /**
-     * Creates a new Request configured to post a status update to a user's feed.
+     * Starts a new Request configured to post a status update to a user's feed.
      * <p/>
      * This should only be called from the UI thread.
      *
+     * This method is deprecated. Prefer to call Request.newStatusUpdateRequest(...).executeAsync();
+     *
      * @param session
      *            the Session to use, or null; if non-null, the session must be in an opened state
      * @param message
@@ -820,6 +1249,7 @@ public static RequestAsyncTask executePlacesSearchRequestAsync(Session session,
      *            a callback that will be called when the request is completed to handle success or error conditions
      * @return a RequestAsyncTask that is executing the request
      */
+    @Deprecated
     public static RequestAsyncTask executeStatusUpdateRequestAsync(Session session, String message, Callback callback) {
         return newStatusUpdateRequest(session, message, callback).executeAsync();
     }
@@ -920,7 +1350,7 @@ public static HttpURLConnection toHttpConnection(RequestBatch requests) {
             } else {
                 // Batch case -- URL is just the graph API base, individual request URLs are serialized
                 // as relative_url parameters within each batch entry.
-                url = new URL(ServerProtocol.GRAPH_URL);
+                url = new URL(ServerProtocol.getGraphUrlBase());
             }
         } catch (MalformedURLException e) {
             throw new FacebookException("could not construct URL for request", e);
@@ -1334,17 +1764,38 @@ final String getUrlForSingleRequest() {
 
         String baseUrl;
         if (this.restMethod != null) {
-            baseUrl = ServerProtocol.REST_URL_BASE + this.restMethod;
+            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
         } else {
-            baseUrl = ServerProtocol.GRAPH_URL_BASE + this.graphPath;
+            if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
+                baseUrl = String.format("%s/%s", ServerProtocol.getGraphVideoUrlBase(), graphPath);
+            } else {
+                baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+            }
         }
 
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
 
+    private static class Attachment {
+        private final Request request;
+        private final Object value;
+
+        public Attachment(Request request, Object value) {
+            this.request = request;
+            this.value = value;
+        }
+
+        public Request getRequest() {
+            return request;
+        }
 
-    private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONException, IOException {
+        public Object getValue() {
+            return value;
+        }
+    }
+
+    private void serializeToBatch(JSONArray batch, Map<String, Attachment> attachments) throws JSONException, IOException {
         JSONObject batchEntry = new JSONObject();
 
         if (this.batchEntryName != null) {
@@ -1372,7 +1823,7 @@ private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONEx
                 // Make the name unique across this entire batch.
                 String name = String.format("%s%d", ATTACHMENT_FILENAME_PREFIX, attachments.size());
                 attachmentNames.add(name);
-                Utility.putObjectInBundle(attachments, name, value);
+                attachments.put(name, new Attachment(this, value));
             }
         }
 
@@ -1403,6 +1854,22 @@ private void validate() {
         }
     }
 
+    private static boolean hasOnProgressCallbacks(RequestBatch requests) {
+        for (RequestBatch.Callback callback : requests.getCallbacks()) {
+            if (callback instanceof RequestBatch.OnProgressCallback) {
+                return true;
+            }
+        }
+
+        for (Request request : requests) {
+            if (request.getCallback() instanceof OnProgressCallback) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
     final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnection connection)
     throws IOException, JSONException {
         Logger logger = new Logger(LoggingBehavior.REQUESTS, "Request");
@@ -1433,44 +1900,80 @@ final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnect
 
         connection.setDoOutput(true);
 
-        BufferedOutputStream outputStream = new BufferedOutputStream(connection.getOutputStream());
+        OutputStream outputStream = null;
         try {
-            Serializer serializer = new Serializer(outputStream, logger);
+            if (hasOnProgressCallbacks(requests)) {
+                ProgressNoopOutputStream countingStream = null;
+                countingStream = new ProgressNoopOutputStream(requests.getCallbackHandler());
+                processRequest(requests, null, numRequests, url, countingStream);
 
-            if (numRequests == 1) {
-                Request request = requests.get(0);
+                int max = countingStream.getMaxProgress();
+                Map<Request, RequestProgress> progressMap = countingStream.getProgressMap();
+
+                BufferedOutputStream buffered = new BufferedOutputStream(connection.getOutputStream());
+                outputStream = new ProgressOutputStream(buffered, requests, progressMap, max);
+            }
+            else {
+                outputStream = new BufferedOutputStream(connection.getOutputStream());
+            }
+
+            processRequest(requests, logger, numRequests, url, outputStream);
+        }
+        finally {
+            outputStream.close();
+        }
+
+        logger.log();
+    }
 
+    private static void processRequest(RequestBatch requests, Logger logger, int numRequests, URL url, OutputStream outputStream)
+            throws IOException, JSONException
+    {
+        Serializer serializer = new Serializer(outputStream, logger);
+
+        if (numRequests == 1) {
+            Request request = requests.get(0);
+
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            for(String key : request.parameters.keySet()) {
+                Object value = request.parameters.get(key);
+                if (isSupportedAttachmentType(value)) {
+                    attachments.put(key, new Attachment(request, value));
+                }
+            }
+
+            if (logger != null) {
                 logger.append("  Parameters:\n");
-                serializeParameters(request.parameters, serializer);
+            }
+            serializeParameters(request.parameters, serializer, request);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(request.parameters, serializer);
+            }
+            serializeAttachments(attachments, serializer);
 
-                if (request.graphObject != null) {
-                    processGraphObject(request.graphObject, url.getPath(), serializer);
-                }
-            } else {
-                String batchAppID = getBatchAppId(requests);
-                if (Utility.isNullOrEmpty(batchAppID)) {
-                    throw new FacebookException("At least one request in a batch must have an open Session, or a "
-                            + "default app ID must be specified.");
-                }
+            if (request.graphObject != null) {
+                processGraphObject(request.graphObject, url.getPath(), serializer);
+            }
+        } else {
+            String batchAppID = getBatchAppId(requests);
+            if (Utility.isNullOrEmpty(batchAppID)) {
+                throw new FacebookException("At least one request in a batch must have an open Session, or a "
+                        + "default app ID must be specified.");
+            }
 
-                serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
+            serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
 
-                // We write out all the requests as JSON, remembering which file attachments they have, then
-                // write out the attachments.
-                Bundle attachments = new Bundle();
-                serializeRequestsAsJSON(serializer, requests, attachments);
+            // We write out all the requests as JSON, remembering which file attachments they have, then
+            // write out the attachments.
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            serializeRequestsAsJSON(serializer, requests, attachments);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(attachments, serializer);
             }
-        } finally {
-            outputStream.close();
+            serializeAttachments(attachments, serializer);
         }
-
-        logger.log();
     }
 
     private static void processGraphObject(GraphObject graphObject, String path, KeyValueSerializer serializer)
@@ -1549,37 +2052,36 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
         }
     }
 
-    private static void serializeParameters(Bundle bundle, Serializer serializer) throws IOException {
+    private static void serializeParameters(Bundle bundle, Serializer serializer, Request request) throws IOException {
         Set<String> keys = bundle.keySet();
 
         for (String key : keys) {
             Object value = bundle.get(key);
             if (isSupportedParameterType(value)) {
-                serializer.writeObject(key, value);
+                serializer.writeObject(key, value, request);
             }
         }
     }
 
-    private static void serializeAttachments(Bundle bundle, Serializer serializer) throws IOException {
-        Set<String> keys = bundle.keySet();
+    private static void serializeAttachments(Map<String, Attachment> attachments, Serializer serializer) throws IOException {
+        Set<String> keys = attachments.keySet();
 
         for (String key : keys) {
-            Object value = bundle.get(key);
-            if (isSupportedAttachmentType(value)) {
-                serializer.writeObject(key, value);
+            Attachment attachment = attachments.get(key);
+            if (isSupportedAttachmentType(attachment.getValue())) {
+                serializer.writeObject(key, attachment.getValue(), attachment.getRequest());
             }
         }
     }
 
-    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Bundle attachments)
+    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Map<String, Attachment> attachments)
             throws JSONException, IOException {
         JSONArray batch = new JSONArray();
         for (Request request : requests) {
             request.serializeToBatch(batch, attachments);
         }
 
-        String batchAsString = batch.toString();
-        serializer.writeString(BATCH_PARAM, batchAsString);
+        serializer.writeRequestsAsJson(BATCH_PARAM, batch, requests);
     }
 
     private static String getMimeContentType() {
@@ -1625,7 +2127,8 @@ private static String getBatchAppId(RequestBatch batch) {
     }
 
     private static boolean isSupportedAttachmentType(Object value) {
-        return value instanceof Bitmap || value instanceof byte[] || value instanceof ParcelFileDescriptor;
+        return value instanceof Bitmap || value instanceof byte[] || value instanceof ParcelFileDescriptor ||
+                value instanceof ParcelFileDescriptorWithMimeType;
     }
 
     private static boolean isSupportedParameterType(Object value) {
@@ -1650,16 +2153,20 @@ private static String parameterToString(Object value) {
     }
 
     private static class Serializer implements KeyValueSerializer {
-        private final BufferedOutputStream outputStream;
+        private final OutputStream outputStream;
         private final Logger logger;
         private boolean firstWrite = true;
 
-        public Serializer(BufferedOutputStream outputStream, Logger logger) {
+        public Serializer(OutputStream outputStream, Logger logger) {
             this.outputStream = outputStream;
             this.logger = logger;
         }
 
-        public void writeObject(String key, Object value) throws IOException {
+        public void writeObject(String key, Object value, Request request) throws IOException {
+            if (outputStream instanceof RequestOutputStream) {
+                ((RequestOutputStream) outputStream).setCurrentRequest(request);
+            }
+
             if (isSupportedParameterType(value)) {
                 writeString(key, parameterToString(value));
             } else if (value instanceof Bitmap) {
@@ -1667,12 +2174,41 @@ public void writeObject(String key, Object value) throws IOException {
             } else if (value instanceof byte[]) {
                 writeBytes(key, (byte[]) value);
             } else if (value instanceof ParcelFileDescriptor) {
-                writeFile(key, (ParcelFileDescriptor) value);
+                writeFile(key, (ParcelFileDescriptor) value, null);
+            } else if (value instanceof ParcelFileDescriptorWithMimeType) {
+                writeFile(key, (ParcelFileDescriptorWithMimeType) value);
             } else {
                 throw new IllegalArgumentException("value is not a supported type: String, Bitmap, byte[]");
             }
         }
 
+        public void writeRequestsAsJson(String key, JSONArray requestJsonArray, Collection<Request> requests)
+                throws IOException, JSONException {
+            if (! (outputStream instanceof RequestOutputStream)) {
+                writeString(key, requestJsonArray.toString());
+                return;
+            }
+
+            RequestOutputStream requestOutputStream = (RequestOutputStream) outputStream;
+            writeContentDisposition(key, null, null);
+            write("[");
+            int i = 0;
+            for (Request request : requests) {
+                JSONObject requestJson = requestJsonArray.getJSONObject(i);
+                requestOutputStream.setCurrentRequest(request);
+                if (i > 0) {
+                    write(",%s", requestJson.toString());
+                } else {
+                    write("%s", requestJson.toString());
+                }
+                i++;
+            }
+            write("]");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, requestJsonArray.toString());
+            }
+        }
+
         public void writeString(String key, String value) throws IOException {
             writeContentDisposition(key, null, null);
             writeLine("%s", value);
@@ -1688,7 +2224,9 @@ public void writeBitmap(String key, Bitmap bitmap) throws IOException {
             bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, "<Image>");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, "<Image>");
+            }
         }
 
         public void writeBytes(String key, byte[] bytes) throws IOException {
@@ -1696,36 +2234,54 @@ public void writeBytes(String key, byte[] bytes) throws IOException {
             this.outputStream.write(bytes);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            }
         }
 
-        public void writeFile(String key, ParcelFileDescriptor descriptor) throws IOException {
-            writeContentDisposition(key, key, "content/unknown");
+        public void writeFile(String key, ParcelFileDescriptorWithMimeType descriptorWithMimeType) throws IOException {
+            writeFile(key, descriptorWithMimeType.getFileDescriptor(), descriptorWithMimeType.getMimeType());
+        }
+
+        public void writeFile(String key, ParcelFileDescriptor descriptor, String mimeType) throws IOException {
+            if (mimeType == null) {
+                mimeType = "content/unknown";
+            }
+            writeContentDisposition(key, key, mimeType);
 
-            ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
-            BufferedInputStream bufferedInputStream = null;
             int totalBytes = 0;
-            try {
-                inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
-                bufferedInputStream = new BufferedInputStream(inputStream);
-
-                byte[] buffer = new byte[8192];
-                int bytesRead;
-                while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
-                    this.outputStream.write(buffer, 0, bytesRead);
-                    totalBytes += bytesRead;
-                }
-            } finally {
-                if (bufferedInputStream != null) {
-                    bufferedInputStream.close();
-                }
-                if (inputStream != null) {
-                    inputStream.close();
+
+            if (outputStream instanceof ProgressNoopOutputStream) {
+                // If we are only counting bytes then skip reading the file
+                ((ProgressNoopOutputStream) outputStream).addProgress(descriptor.getStatSize());
+            }
+            else {
+                ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
+                BufferedInputStream bufferedInputStream = null;
+                try {
+                    inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
+                    bufferedInputStream = new BufferedInputStream(inputStream);
+
+                    byte[] buffer = new byte[8192];
+                    int bytesRead;
+                    while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
+                        this.outputStream.write(buffer, 0, bytesRead);
+                        totalBytes += bytesRead;
+                    }
+                } finally {
+                    if (bufferedInputStream != null) {
+                        bufferedInputStream.close();
+                    }
+                    if (inputStream != null) {
+                        inputStream.close();
+                    }
                 }
             }
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            }
         }
 
         public void writeRecordBoundary() throws IOException {
@@ -1776,6 +2332,23 @@ public void writeLine(String format, Object... args) throws IOException {
         void onCompleted(Response response);
     }
 
+    /**
+     * Specifies the interface that consumers of the Request class can implement in order to be notified when a
+     * progress is made on a particular request. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when progress is made.
+         *
+         * @param current
+         *            the current value of the progress of the request.
+         * @param max
+         *            the maximum value (target) value that the progress will have.
+         */
+        void onProgress(long current, long max);
+    }
+
     /**
      * Specifies the interface that consumers of
      * {@link Request#executeMeRequestAsync(Session, com.facebook.Request.GraphUserCallback)}
@@ -1820,4 +2393,48 @@ public void writeLine(String format, Object... args) throws IOException {
          */
         void onCompleted(List<GraphPlace> places, Response response);
     }
+
+    private static class ParcelFileDescriptorWithMimeType implements Parcelable {
+        private final String mimeType;
+        private final ParcelFileDescriptor fileDescriptor;
+
+        public String getMimeType() {
+            return mimeType;
+        }
+
+        public ParcelFileDescriptor getFileDescriptor() {
+            return fileDescriptor;
+        }
+
+        public int describeContents() {
+            return CONTENTS_FILE_DESCRIPTOR;
+        }
+
+        public void writeToParcel(Parcel out, int flags) {
+            out.writeString(mimeType);
+            out.writeFileDescriptor(fileDescriptor.getFileDescriptor());
+        }
+
+        @SuppressWarnings("unused")
+        public static final Parcelable.Creator<ParcelFileDescriptorWithMimeType> CREATOR
+                = new Parcelable.Creator<ParcelFileDescriptorWithMimeType>() {
+            public ParcelFileDescriptorWithMimeType createFromParcel(Parcel in) {
+                return new ParcelFileDescriptorWithMimeType(in);
+            }
+
+            public ParcelFileDescriptorWithMimeType[] newArray(int size) {
+                return new ParcelFileDescriptorWithMimeType[size];
+            }
+        };
+
+        public ParcelFileDescriptorWithMimeType(ParcelFileDescriptor fileDescriptor, String mimeType) {
+            this.mimeType = mimeType;
+            this.fileDescriptor = fileDescriptor;
+        }
+
+        private ParcelFileDescriptorWithMimeType(Parcel in) {
+            mimeType = in.readString();
+            fileDescriptor = in.readFileDescriptor();
+        }
+    }
 }
diff --git a/facebook/src/com/facebook/RequestBatch.java b/facebook/src/com/facebook/RequestBatch.java
index 7183a2ddb..9ecd7be18 100644
--- a/facebook/src/com/facebook/RequestBatch.java
+++ b/facebook/src/com/facebook/RequestBatch.java
@@ -217,6 +217,22 @@ public final RequestAsyncTask executeAsync() {
         void onBatchCompleted(RequestBatch batch);
     }
 
+    /**
+     * Specifies the interface that consumers of the RequestBatch class can implement in order to be notified when the
+     * batch makes progress. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}.
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when a batch makes progress.
+         *
+         * @param batch     the RequestBatch containing the Requests which were executed
+         * @param current   the current value of the progress
+         * @param max       the max (target) value of the progress
+         */
+        void onBatchProgress(RequestBatch batch, long current, long max);
+    }
+
     List<Response> executeAndWaitImpl() {
         return Request.executeBatchAndWait(this);
     }
diff --git a/facebook/src/com/facebook/RequestOutputStream.java b/facebook/src/com/facebook/RequestOutputStream.java
new file mode 100644
index 000000000..323b7c73d
--- /dev/null
+++ b/facebook/src/com/facebook/RequestOutputStream.java
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+interface RequestOutputStream {
+    void setCurrentRequest(Request r);
+}
diff --git a/facebook/src/com/facebook/RequestProgress.java b/facebook/src/com/facebook/RequestProgress.java
new file mode 100644
index 000000000..ef10361cf
--- /dev/null
+++ b/facebook/src/com/facebook/RequestProgress.java
@@ -0,0 +1,78 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+class RequestProgress {
+    private final Request request;
+    private final Handler callbackHandler;
+    private final long threshold;
+
+    private long progress, lastReportedProgress, maxProgress;
+
+    RequestProgress(Handler callbackHandler, Request request) {
+        this.request = request;
+        this.callbackHandler = callbackHandler;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    long getProgress() {
+        return progress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    void addProgress(long size) {
+        progress += size;
+
+        if (progress >= lastReportedProgress + threshold || progress >= maxProgress) {
+            reportProgress();
+        }
+    }
+
+    void addToMax(long size) {
+        maxProgress += size;
+    }
+
+    void reportProgress() {
+        if (progress > lastReportedProgress) {
+            Request.Callback callback = request.getCallback();
+            if (maxProgress > 0 && callback instanceof Request.OnProgressCallback) {
+                // Keep copies to avoid threading issues
+                final long currentCopy = progress;
+                final long maxProgressCopy = maxProgress;
+                final Request.OnProgressCallback callbackCopy = (Request.OnProgressCallback) callback;
+                if (callbackHandler == null) {
+                    callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                }
+                else {
+                    callbackHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                        }
+                    });
+                }
+                lastReportedProgress = progress;
+            }
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/Response.java b/facebook/src/com/facebook/Response.java
index cea5ed18a..4697aaf12 100644
--- a/facebook/src/com/facebook/Response.java
+++ b/facebook/src/com/facebook/Response.java
@@ -320,6 +320,9 @@ static FileLruCache getResponseCache() {
         } catch (IOException exception) {
             Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response <Error>: %s", exception);
             return constructErrorResponses(requests, connection, new FacebookException(exception));
+        } catch (SecurityException exception) {
+            Logger.log(LoggingBehavior.REQUESTS, RESPONSE_LOG_TAG, "Response <Error>: %s", exception);
+            return constructErrorResponses(requests, connection, new FacebookException(exception));
         } finally {
             Utility.closeQuietly(stream);
         }
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 8e3f4d410..e5b106af4 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -22,10 +22,11 @@
 import android.os.*;
 import android.support.v4.app.Fragment;
 import android.support.v4.content.LocalBroadcastManager;
+import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.SessionAuthorizationType;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
+import com.facebook.internal.*;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.io.*;
 import java.lang.ref.WeakReference;
@@ -40,7 +41,8 @@
  * Sessions must be opened before they can be used to make a Request. When a
  * Session is created, it attempts to initialize itself from a TokenCachingStrategy.
  * Closing the session can optionally clear this cache.  The Session lifecycle
- * uses {@link SessionState SessionState} to indicate its state.
+ * uses {@link SessionState SessionState} to indicate its state. Once a Session has
+ * been closed, it can't be re-opened; a new Session must be created.
  * </p>
  * <p>
  * Instances of Session provide state change notification via a callback
@@ -138,7 +140,7 @@
     private AccessToken tokenInfo;
     private Date lastAttemptedTokenExtendDate = new Date(0);
 
-    private AuthorizationRequest pendingRequest;
+    private AuthorizationRequest pendingAuthorizationRequest;
     private AuthorizationClient authorizationClient;
 
     // The following are not serialized with the Session object
@@ -150,6 +152,7 @@
     private final Object lock = new Object();
     private TokenCachingStrategy tokenCachingStrategy;
     private volatile TokenRefreshRequest currentTokenRefreshRequest;
+    private AppEventsLogger appEventsLogger;
 
     /**
      * Serialization proxy for the Session class. This is version 1 of
@@ -164,22 +167,22 @@
         private final AccessToken tokenInfo;
         private final Date lastAttemptedTokenExtendDate;
         private final boolean shouldAutoPublish;
-        private final AuthorizationRequest pendingRequest;
+        private final AuthorizationRequest pendingAuthorizationRequest;
 
         SerializationProxyV1(String applicationId, SessionState state,
                 AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
-                boolean shouldAutoPublish, AuthorizationRequest pendingRequest) {
+                boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
             this.applicationId = applicationId;
             this.state = state;
             this.tokenInfo = tokenInfo;
             this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
             this.shouldAutoPublish = shouldAutoPublish;
-            this.pendingRequest = pendingRequest;
+            this.pendingAuthorizationRequest = pendingAuthorizationRequest;
         }
 
         private Object readResolve() {
             return new Session(applicationId, state, tokenInfo,
-                    lastAttemptedTokenExtendDate, shouldAutoPublish, pendingRequest);
+                    lastAttemptedTokenExtendDate, shouldAutoPublish, pendingAuthorizationRequest);
         }
     }
 
@@ -188,12 +191,12 @@ private Object readResolve() {
      */
     private Session(String applicationId, SessionState state,
             AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
-            boolean shouldAutoPublish, AuthorizationRequest pendingRequest) {
+            boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest) {
         this.applicationId = applicationId;
         this.state = state;
         this.tokenInfo = tokenInfo;
         this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
-        this.pendingRequest = pendingRequest;
+        this.pendingAuthorizationRequest = pendingAuthorizationRequest;
         handler = new Handler(Looper.getMainLooper());
         currentTokenRefreshRequest = null;
         tokenCachingStrategy = null;
@@ -232,7 +235,7 @@ public Session(Context currentContext) {
         this.applicationId = applicationId;
         this.tokenCachingStrategy = tokenCachingStrategy;
         this.state = SessionState.CREATED;
-        this.pendingRequest = null;
+        this.pendingAuthorizationRequest = null;
         this.callbacks = new ArrayList<StatusCallback>();
         this.handler = new Handler(Looper.getMainLooper());
 
@@ -399,7 +402,12 @@ public final void openForRead(OpenRequest openRequest) {
      * <p>
      * The permissions associated with the openRequest passed to this method must
      * be publish or manage permissions only and must be non-empty. Any read permissions
-     * will result in a warning, and may fail during server-side authorization.
+     * will result in a warning, and may fail during server-side authorization. Also, an application
+     * must have at least basic read permissions prior to requesting publish permissions, so
+     * this method should only be used if the application knows that the user has already granted
+     * read permissions to the application; otherwise, openForRead should be used, followed by a
+     * call to requestNewPublishPermissions. For more information on this flow, see
+     * https://developers.facebook.com/docs/facebook-login/permissions/.
      * </p>
      * <p>
      * Any open method must be called at most once, and cannot be called after the
@@ -433,12 +441,15 @@ public final void openForPublish(OpenRequest openRequest) {
      */
     public final void open(AccessToken accessToken, StatusCallback callback) {
         synchronized (this.lock) {
-            if (pendingRequest != null) {
+            if (pendingAuthorizationRequest != null) {
                 throw new UnsupportedOperationException(
                         "Session: an attempt was made to open a session that has a pending request.");
             }
 
-            if (state != SessionState.CREATED && state != SessionState.CREATED_TOKEN_LOADED) {
+            if (state.isClosed()) {
+                throw new UnsupportedOperationException(
+                        "Session: an attempt was made to open a previously-closed session.");
+            } else if (state != SessionState.CREATED && state != SessionState.CREATED_TOKEN_LOADED) {
                 throw new UnsupportedOperationException(
                         "Session: an attempt was made to open an already opened session.");
             }
@@ -527,13 +538,13 @@ public final boolean onActivityResult(Activity currentActivity, int requestCode,
         initializeStaticContext(currentActivity);
 
         synchronized (lock) {
-            if (pendingRequest == null || (requestCode != pendingRequest.getRequestCode())) {
+            if (pendingAuthorizationRequest == null || (requestCode != pendingAuthorizationRequest.getRequestCode())) {
                 return false;
             }
         }
 
-        AccessToken newToken = null;
         Exception exception = null;
+        AuthorizationClient.Result.Code code = AuthorizationClient.Result.Code.ERROR;
 
         if (data != null) {
             AuthorizationClient.Result result = (AuthorizationClient.Result) data.getSerializableExtra(
@@ -549,9 +560,16 @@ public final boolean onActivityResult(Activity currentActivity, int requestCode,
             }
         } else if (resultCode == Activity.RESULT_CANCELED) {
             exception = new FacebookOperationCanceledException("User canceled operation.");
+            code = AuthorizationClient.Result.Code.CANCEL;
         }
 
-        finishAuthOrReauth(newToken, exception);
+        if (exception == null) {
+            exception = new FacebookException("Unexpected call to Session.onActivityResult");
+        }
+
+        logAuthorizationComplete(code, null, exception);
+        finishAuthOrReauth(null, exception);
+
         return true;
     }
 
@@ -559,7 +577,6 @@ public final boolean onActivityResult(Activity currentActivity, int requestCode,
      * Closes the local in-memory Session object, but does not clear the
      * persisted token cache.
      */
-    @SuppressWarnings("incomplete-switch")
     public final void close() {
         synchronized (this.lock) {
             final SessionState oldState = this.state;
@@ -578,6 +595,10 @@ public final void close() {
                     this.state = SessionState.CLOSED;
                     postStateChange(oldState, this.state, null);
                     break;
+
+                case CLOSED:
+                case CLOSED_LOGIN_FAILED:
+                    break;
             }
         }
     }
@@ -591,6 +612,7 @@ public final void closeAndClearTokenInformation() {
             this.tokenCachingStrategy.clear();
         }
         Utility.clearFacebookCookies(staticContext);
+        Utility.clearCaches(staticContext);
         close();
     }
 
@@ -650,7 +672,7 @@ void extendTokenCompleted(Bundle bundle) {
 
     private Object writeReplace() {
         return new SerializationProxyV1(applicationId, state, tokenInfo,
-                lastAttemptedTokenExtendDate, false, pendingRequest);
+                lastAttemptedTokenExtendDate, false, pendingAuthorizationRequest);
     }
 
     // have a readObject that throws to prevent spoofing
@@ -659,7 +681,8 @@ private void readObject(ObjectInputStream stream) throws InvalidObjectException
     }
 
     /**
-     * Save the Session object into the supplied Bundle.
+     * Save the Session object into the supplied Bundle. This method is intended to be called from an
+     * Activity or Fragment's onSaveInstanceState method in order to preserve Sessions across Activity lifecycle events.
      *
      * @param session the Session to save
      * @param bundle  the Bundle to save the Session to
@@ -679,7 +702,9 @@ public static final void saveSession(Session session, Bundle bundle) {
 
     /**
      * Restores the saved session from a Bundle, if any. Returns the restored Session or
-     * null if it could not be restored.
+     * null if it could not be restored. This method is intended to be called from an Activity or Fragment's
+     * onCreate method when a Session has previously been saved into a Bundle via saveState to preserve a Session
+     * across Activity lifecycle events.
      *
      * @param context         the Activity or Service creating the Session, must not be null
      * @param cachingStrategy the TokenCachingStrategy to use to load and store the token. If this is
@@ -773,8 +798,8 @@ public static final void setActiveSession(Session session) {
     }
 
     /**
-     * Create a new Session, and if a token cache is available, open the
-     * Session and make it active without any user interaction.
+     * If a cached token is available, creates and opens the session and makes it active without any user interaction,
+     * otherwise this does nothing.
      *
      * @param context The Context creating this session
      * @return The new session or null if one could not be created
@@ -887,10 +912,19 @@ void authorize(AuthorizationRequest request) {
 
         autoPublishAsync();
 
+        logAuthorizationStart();
+
         started = tryLoginActivity(request);
 
+        pendingAuthorizationRequest.loggingExtras.put(AuthorizationClient.EVENT_EXTRAS_TRY_LOGIN_ACTIVITY,
+                started ? AppEventsConstants.EVENT_PARAM_VALUE_YES : AppEventsConstants.EVENT_PARAM_VALUE_NO);
+
         if (!started && request.isLegacy) {
-            started = tryLegacyAuth(request);
+            pendingAuthorizationRequest.loggingExtras.put(AuthorizationClient.EVENT_EXTRAS_TRY_LEGACY,
+                    AppEventsConstants.EVENT_PARAM_VALUE_YES);
+
+            tryLegacyAuth(request);
+            started = true;
         }
 
         if (!started) {
@@ -904,7 +938,11 @@ void authorize(AuthorizationRequest request) {
 
                     default:
                         this.state = SessionState.CLOSED_LOGIN_FAILED;
-                        postStateChange(oldState, this.state, new FacebookException("Log in attempt failed."));
+
+                        Exception exception = new FacebookException(
+                                "Log in attempt failed: LoginActivity could not be started, and not legacy request");
+                        logAuthorizationComplete(AuthorizationClient.Result.Code.ERROR, null, exception);
+                        postStateChange(oldState, this.state, exception);
                 }
             }
         }
@@ -916,7 +954,7 @@ private void open(OpenRequest openRequest, SessionAuthorizationType authType) {
 
         SessionState newState;
         synchronized (this.lock) {
-            if (pendingRequest != null) {
+            if (pendingAuthorizationRequest != null) {
                 postStateChange(state, state, new UnsupportedOperationException(
                         "Session: an attempt was made to open a session that has a pending request."));
                 return;
@@ -929,15 +967,15 @@ private void open(OpenRequest openRequest, SessionAuthorizationType authType) {
                     if (openRequest == null) {
                         throw new IllegalArgumentException("openRequest cannot be null when opening a new Session");
                     }
-                    pendingRequest = openRequest;
+                    pendingAuthorizationRequest = openRequest;
                     break;
                 case CREATED_TOKEN_LOADED:
                     if (openRequest != null && !Utility.isNullOrEmpty(openRequest.getPermissions())) {
                         if (!Utility.isSubset(openRequest.getPermissions(), getPermissions())) {
-                            pendingRequest = openRequest;
+                            pendingAuthorizationRequest = openRequest;
                         }
                     }
-                    if (pendingRequest == null) {
+                    if (pendingAuthorizationRequest == null) {
                         this.state = newState = SessionState.OPENED;
                     } else {
                         this.state = newState = SessionState.OPENING;
@@ -964,22 +1002,23 @@ private void requestNewPermissions(NewPermissionsRequest newPermissionsRequest,
 
         if (newPermissionsRequest != null) {
             synchronized (this.lock) {
-                if (pendingRequest != null) {
+                if (pendingAuthorizationRequest != null) {
                     throw new UnsupportedOperationException(
                             "Session: an attempt was made to request new permissions for a session that has a pending request.");
                 }
-                switch (this.state) {
-                    case OPENED:
-                    case OPENED_TOKEN_UPDATED:
-                        pendingRequest = newPermissionsRequest;
-                        break;
-                    default:
-                        throw new UnsupportedOperationException(
-                                "Session: an attempt was made to request new permissions for a session that is not currently open.");
+                if (state.isOpened()) {
+                    pendingAuthorizationRequest = newPermissionsRequest;
+                } else if (state.isClosed()) {
+                    throw new UnsupportedOperationException(
+                            "Session: an attempt was made to request new permissions for a session that has been closed.");
+                } else {
+                    throw new UnsupportedOperationException(
+                            "Session: an attempt was made to request new permissions for a session that is not currently open.");
                 }
             }
 
             newPermissionsRequest.setValidateSameFbidAsToken(getAccessToken());
+            addCallback(newPermissionsRequest.getCallback());
             authorize(newPermissionsRequest);
         }
     }
@@ -1022,7 +1061,7 @@ private void validatePermissions(AuthorizationRequest request, SessionAuthorizat
         }
     }
 
-    static boolean isPublishPermission(String permission) {
+    public static boolean isPublishPermission(String permission) {
         return permission != null &&
                 (permission.startsWith(PUBLISH_PERMISSION_PREFIX) ||
                         permission.startsWith(MANAGE_PERMISSION_PREFIX) ||
@@ -1043,10 +1082,80 @@ private void handleAuthorizationResult(int resultCode, AuthorizationClient.Resul
             exception = new FacebookOperationCanceledException(result.errorMessage);
         }
 
+        logAuthorizationComplete(result.code, result.loggingExtras, exception);
+
         authorizationClient = null;
         finishAuthOrReauth(newToken, exception);
     }
 
+    private void logAuthorizationStart() {
+        Bundle bundle = AuthorizationClient.newAuthorizationLoggingBundle(pendingAuthorizationRequest.getAuthId());
+        bundle.putLong(AuthorizationClient.EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
+
+        // Log what we already know about the call in start event
+        try {
+            JSONObject extras = new JSONObject();
+            extras.put(AuthorizationClient.EVENT_EXTRAS_LOGIN_BEHAVIOR,
+                    pendingAuthorizationRequest.loginBehavior.toString());
+            extras.put(AuthorizationClient.EVENT_EXTRAS_REQUEST_CODE, pendingAuthorizationRequest.requestCode);
+            extras.put(AuthorizationClient.EVENT_EXTRAS_IS_LEGACY, pendingAuthorizationRequest.isLegacy);
+            extras.put(AuthorizationClient.EVENT_EXTRAS_PERMISSIONS,
+                    TextUtils.join(",", pendingAuthorizationRequest.permissions));
+            extras.put(AuthorizationClient.EVENT_EXTRAS_DEFAULT_AUDIENCE,
+                    pendingAuthorizationRequest.defaultAudience.toString());
+            bundle.putString(AuthorizationClient.EVENT_PARAM_EXTRAS, extras.toString());
+        } catch (JSONException e) {
+        }
+
+        AppEventsLogger logger = getAppEventsLogger();
+        logger.logSdkEvent(AuthorizationClient.EVENT_NAME_LOGIN_START, null, bundle);
+    }
+
+    private void logAuthorizationComplete(AuthorizationClient.Result.Code result, Map<String, String> resultExtras,
+            Exception exception) {
+        Bundle bundle = null;
+        if (pendingAuthorizationRequest == null) {
+            // We don't expect this to happen, but if it does, log an event for diagnostic purposes.
+            bundle = AuthorizationClient.newAuthorizationLoggingBundle("");
+            bundle.putString(AuthorizationClient.EVENT_PARAM_LOGIN_RESULT,
+                    AuthorizationClient.Result.Code.ERROR.getLoggingValue());
+            bundle.putString(AuthorizationClient.EVENT_PARAM_ERROR_MESSAGE,
+                    "Unexpected call to logAuthorizationComplete with null pendingAuthorizationRequest.");
+        } else {
+            bundle = AuthorizationClient.newAuthorizationLoggingBundle(pendingAuthorizationRequest.getAuthId());
+            if (result != null) {
+                bundle.putString(AuthorizationClient.EVENT_PARAM_LOGIN_RESULT, result.getLoggingValue());
+            }
+            if (exception != null && exception.getMessage() != null) {
+                bundle.putString(AuthorizationClient.EVENT_PARAM_ERROR_MESSAGE, exception.getMessage());
+            }
+
+            // Combine extras from the request and from the result.
+            JSONObject jsonObject = null;
+            if (pendingAuthorizationRequest.loggingExtras.isEmpty() == false) {
+                jsonObject = new JSONObject(pendingAuthorizationRequest.loggingExtras);
+            }
+            if (resultExtras != null) {
+                if (jsonObject == null) {
+                    jsonObject = new JSONObject();
+                }
+                try {
+                    for (Map.Entry<String, String> entry : resultExtras.entrySet()) {
+                        jsonObject.put(entry.getKey(), entry.getValue());
+                    }
+                } catch (JSONException e) {
+                }
+            }
+            if (jsonObject != null) {
+                bundle.putString(AuthorizationClient.EVENT_PARAM_EXTRAS, jsonObject.toString());
+            }
+        }
+        bundle.putLong(AuthorizationClient.EVENT_PARAM_TIMESTAMP, System.currentTimeMillis());
+
+        AppEventsLogger logger = getAppEventsLogger();
+        logger.logSdkEvent(AuthorizationClient.EVENT_NAME_LOGIN_COMPLETE, null, bundle);
+    }
+
     private boolean tryLoginActivity(AuthorizationRequest request) {
         Intent intent = getLoginActivityIntent(request);
 
@@ -1084,7 +1193,7 @@ private Intent getLoginActivityIntent(AuthorizationRequest request) {
         return intent;
     }
 
-    private boolean tryLegacyAuth(final AuthorizationRequest request) {
+    private void tryLegacyAuth(final AuthorizationRequest request) {
         authorizationClient = new AuthorizationClient();
         authorizationClient.setOnCompletedListener(new AuthorizationClient.OnCompletedListener() {
             @Override
@@ -1100,11 +1209,8 @@ public void onCompleted(AuthorizationClient.Result result) {
         });
         authorizationClient.setContext(getStaticContext());
         authorizationClient.startOrContinueAuth(request.getAuthorizationClientRequest());
-
-        return true;
     }
 
-    @SuppressWarnings("incomplete-switch")
     void finishAuthOrReauth(AccessToken newToken, Exception exception) {
         // If the token we came up with is expired/invalid, then auth failed.
         if ((newToken != null) && newToken.isInvalid()) {
@@ -1112,6 +1218,7 @@ void finishAuthOrReauth(AccessToken newToken, Exception exception) {
             exception = new FacebookException("Invalid access token.");
         }
 
+
         synchronized (this.lock) {
             switch (this.state) {
                 case OPENING:
@@ -1123,7 +1230,13 @@ void finishAuthOrReauth(AccessToken newToken, Exception exception) {
                 case OPENED_TOKEN_UPDATED:
                     // This means we are reauthorizing.
                     finishReauthorization(newToken, exception);
+                    break;
 
+                case CREATED:
+                case CREATED_TOKEN_LOADED:
+                case CLOSED:
+                case CLOSED_LOGIN_FAILED:
+                    Log.d(TAG, "Unexpected call to finishAuthOrReauth in state " + this.state);
                     break;
             }
         }
@@ -1139,7 +1252,7 @@ private void finishAuthorization(AccessToken newToken, Exception exception) {
         } else if (exception != null) {
             state = SessionState.CLOSED_LOGIN_FAILED;
         }
-        pendingRequest = null;
+        pendingAuthorizationRequest = null;
         postStateChange(oldState, state, exception);
     }
 
@@ -1153,7 +1266,7 @@ private void finishReauthorization(final AccessToken newToken, Exception excepti
             state = SessionState.OPENED_TOKEN_UPDATED;
         }
 
-        pendingRequest = null;
+        pendingAuthorizationRequest = null;
         postStateChange(oldState, state, exception);
     }
 
@@ -1177,12 +1290,12 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
             this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
         }
 
-        synchronized (callbacks) {
-            // Need to schedule the callbacks inside the same queue to preserve ordering.
-            // Otherwise these callbacks could have been added to the queue before the SessionTracker
-            // gets the ACTIVE_SESSION_SET action.
-            Runnable runCallbacks = new Runnable() {
-                public void run() {
+        // Need to schedule the callbacks inside the same queue to preserve ordering.
+        // Otherwise these callbacks could have been added to the queue before the SessionTracker
+        // gets the ACTIVE_SESSION_SET action.
+        Runnable runCallbacks = new Runnable() {
+            public void run() {
+                synchronized (callbacks) {
                     for (final StatusCallback callback : callbacks) {
                         Runnable closure = new Runnable() {
                             public void run() {
@@ -1194,9 +1307,9 @@ public void run() {
                         runWithHandlerOrExecutor(handler, closure);
                     }
                 }
-            };
-            runWithHandlerOrExecutor(handler, runCallbacks);
-        }
+            }
+        };
+        runWithHandlerOrExecutor(handler, runCallbacks);
 
         if (this == Session.activeSession) {
             if (oldState.isOpened() != newState.isOpened()) {
@@ -1261,6 +1374,15 @@ boolean shouldExtendAccessToken() {
         return result;
     }
 
+    private AppEventsLogger getAppEventsLogger() {
+        synchronized (lock) {
+            if (appEventsLogger == null) {
+                appEventsLogger = AppEventsLogger.newLogger(staticContext, applicationId);
+            }
+            return appEventsLogger;
+        }
+    }
+
     AccessToken getTokenInfo() {
         return tokenInfo;
     }
@@ -1291,7 +1413,7 @@ void setCurrentTokenRefreshRequest(TokenRefreshRequest request) {
         public void bind() {
             Intent intent = NativeProtocol.createTokenRefreshIntent(getStaticContext());
             if (intent != null
-                    && staticContext.bindService(intent, new TokenRefreshRequest(), Context.BIND_AUTO_CREATE)) {
+                    && staticContext.bindService(intent, this, Context.BIND_AUTO_CREATE)) {
                 setLastAttemptedTokenExtendDate(new Date());
             } else {
                 cleanup();
@@ -1461,6 +1583,7 @@ public Session build() {
         public Activity getActivityContext();
     }
 
+    @SuppressWarnings("deprecation")
     private void autoPublishAsync() {
         AutoPublishAsyncTask asyncTask = null;
         synchronized (this) {
@@ -1495,7 +1618,7 @@ public AutoPublishAsyncTask(String applicationId, Context context) {
         @Override
         protected Void doInBackground(Void... voids) {
             try {
-                Settings.publishInstallAndWait(mApplicationContext, mApplicationId);
+                Settings.publishInstallAndWaitForResponse(mApplicationContext, mApplicationId, true);
             } catch (Exception e) {
                 Utility.logd("Facebook-publish", e);
             }
@@ -1527,6 +1650,8 @@ protected void onPostExecute(Void result) {
         private SessionDefaultAudience defaultAudience = SessionDefaultAudience.FRIENDS;
         private String applicationId;
         private String validateSameFbidAsToken;
+        private final String authId = UUID.randomUUID().toString();
+        private final Map<String, String> loggingExtras = new HashMap<String, String>();
 
         AuthorizationRequest(final Activity activity) {
             startActivityDelegate = new StartActivityDelegate() {
@@ -1635,6 +1760,10 @@ AuthorizationRequest setPermissions(List<String> permissions) {
             return this;
         }
 
+        AuthorizationRequest setPermissions(String... permissions) {
+            return setPermissions(Arrays.asList(permissions));
+        }
+
         List<String> getPermissions() {
             return permissions;
         }
@@ -1670,6 +1799,10 @@ void setValidateSameFbidAsToken(String validateSameFbidAsToken) {
             this.validateSameFbidAsToken = validateSameFbidAsToken;
         }
 
+        String getAuthId() {
+            return authId;
+        }
+
         AuthorizationClient.AuthorizationRequest getAuthorizationClientRequest() {
             AuthorizationClient.StartActivityDelegate delegate = new AuthorizationClient.StartActivityDelegate() {
                 @Override
@@ -1683,7 +1816,7 @@ public Activity getActivityContext() {
                 }
             };
             return new AuthorizationClient.AuthorizationRequest(loginBehavior, requestCode, isLegacy,
-                    permissions, defaultAudience, applicationId, validateSameFbidAsToken, delegate);
+                    permissions, defaultAudience, applicationId, validateSameFbidAsToken, delegate, authId);
         }
 
         // package private so subclasses can use it
@@ -1692,9 +1825,9 @@ Object writeReplace() {
                     loginBehavior, requestCode, permissions, defaultAudience.name(), isLegacy, applicationId, validateSameFbidAsToken);
         }
 
-        // have a readObject that throws to prevent spoofing
-        // package private so subclasses can use it
-        void readObject(ObjectInputStream stream) throws InvalidObjectException {
+        // have a readObject that throws to prevent spoofing; must be private so serializer will call it (will be
+        // called automatically prior to any base class)
+        private void readObject(ObjectInputStream stream) throws InvalidObjectException {
             throw new InvalidObjectException("Cannot readObject, serialization proxy required");
         }
 
@@ -1803,6 +1936,17 @@ public final OpenRequest setPermissions(List<String> permissions) {
             return this;
         }
 
+        /**
+         * Sets the permissions for the OpenRequest.
+         *
+         * @param permissions the permissions to request during the authentication flow.
+         * @return the OpenRequest object to allow for chaining
+         */
+        public final OpenRequest setPermissions(String... permissions) {
+            super.setPermissions(permissions);
+            return this;
+        }
+
         /**
          * Sets the defaultAudience for the OpenRequest.
          * <p/>
@@ -1846,7 +1990,30 @@ public NewPermissionsRequest(Fragment fragment, List<String> permissions) {
         }
 
         /**
-         * Sets the StatusCallback for the NewPermissionsRequest.
+         * Constructs a NewPermissionsRequest.
+         *
+         * @param activity    the Activity used to issue the request
+         * @param permissions additional permissions to request
+         */
+        public NewPermissionsRequest(Activity activity, String... permissions) {
+            super(activity);
+            setPermissions(permissions);
+        }
+
+        /**
+         * Constructs a NewPermissionsRequest.
+         *
+         * @param fragment    the Fragment used to issue the request
+         * @param permissions additional permissions to request
+         */
+        public NewPermissionsRequest(Fragment fragment, String... permissions) {
+            super(fragment);
+            setPermissions(permissions);
+        }
+
+        /**
+         * Sets the StatusCallback for the NewPermissionsRequest. Note that once the request is made, this callback
+         * will be added to the session, and will receive all future state changes on the session.
          *
          * @param statusCallback The {@link StatusCallback SessionStatusCallback} to
          *                       notify regarding Session state changes.
diff --git a/facebook/src/com/facebook/SessionDefaultAudience.java b/facebook/src/com/facebook/SessionDefaultAudience.java
index b07d93584..2fdac3d01 100644
--- a/facebook/src/com/facebook/SessionDefaultAudience.java
+++ b/facebook/src/com/facebook/SessionDefaultAudience.java
@@ -16,6 +16,8 @@
 
 package com.facebook;
 
+import com.facebook.internal.NativeProtocol;
+
 /**
  * Certain operations such as publishing a status or publishing a photo require an audience. When the user
  * grants an application permission to perform a publish operation, a default audience is selected as the
diff --git a/facebook/src/com/facebook/Settings.java b/facebook/src/com/facebook/Settings.java
index 066c58ddf..fe1ee6558 100644
--- a/facebook/src/com/facebook/Settings.java
+++ b/facebook/src/com/facebook/Settings.java
@@ -24,6 +24,7 @@
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.Looper;
+import android.util.Log;
 import com.facebook.android.BuildConfig;
 import com.facebook.internal.Utility;
 import com.facebook.model.GraphObject;
@@ -32,21 +33,24 @@
 import org.json.JSONObject;
 
 import java.lang.reflect.Field;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * Allows some customization of sdk behavior.
  */
 public final class Settings {
+    private static final String TAG = Settings.class.getCanonicalName();
     private static final HashSet<LoggingBehavior> loggingBehaviors =
             new HashSet<LoggingBehavior>(Arrays.asList(LoggingBehavior.DEVELOPER_ERRORS));
     private static volatile Executor executor;
     private static volatile boolean shouldAutoPublishInstall;
+    private static volatile String appVersion;
+    private static final String FACEBOOK_COM = "facebook.com";
+    private static volatile String facebookDomain = FACEBOOK_COM;
+    private static AtomicLong onProgressThreshold = new AtomicLong(65536);
 
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
@@ -61,7 +65,9 @@
     private static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
     private static final String MOBILE_INSTALL_EVENT = "MOBILE_APP_INSTALL";
     private static final String ANALYTICS_EVENT = "event";
-    private static final String ATTRIBUTION_KEY = "attribution";
+    private static final String AUTO_PUBLISH = "auto_publish";
+
+    private static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
 
     private static final BlockingQueue<Runnable> DEFAULT_WORK_QUEUE = new LinkedBlockingQueue<Runnable>(10);
 
@@ -73,7 +79,6 @@ public Thread newThread(Runnable runnable) {
         }
     };
 
-
     /**
      * Certain logging behaviors are available for debugging beyond those that should be
      * enabled in production.
@@ -181,6 +186,31 @@ public static void setExecutor(Executor executor) {
         }
     }
 
+    /**
+     * Gets the base Facebook domain to use when making Web requests; in production code this will always be
+     * "facebook.com".
+     *
+     * @return the Facebook domain
+     */
+    public static String getFacebookDomain() {
+        return facebookDomain;
+    }
+
+    /**
+     * Sets the base Facebook domain to use when making Web requests. This defaults to "facebook.com", but may
+     * be overridden to, e.g., "beta.facebook.com" to direct requests at a different domain. This method should
+     * never be called from production code.
+     *
+     * @param facebookDomain the base domain to use instead of "facebook.com"
+     */
+    public static void setFacebookDomain(String facebookDomain) {
+        if (!BuildConfig.DEBUG) {
+            Log.w(TAG, "WARNING: Calling setFacebookDomain from non-DEBUG code.");
+        }
+
+        Settings.facebookDomain = facebookDomain;
+    }
+
     private static Executor getAsyncTaskExecutor() {
         Field executorField = null;
         try {
@@ -189,10 +219,6 @@ private static Executor getAsyncTaskExecutor() {
             return null;
         }
 
-        if (executorField == null) {
-            return null;
-        }
-
         Object executorObject = null;
         try {
             executorObject = executorField.get(null);
@@ -216,7 +242,10 @@ private static Executor getAsyncTaskExecutor() {
      * multiple installs being published to the graph.
      * @param context the current Context
      * @param applicationId the fb application being published.
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static void publishInstallAsync(final Context context, final String applicationId) {
        publishInstallAsync(context, applicationId, null);
     }
@@ -227,7 +256,10 @@ public static void publishInstallAsync(final Context context, final String appli
      * @param context the current Context
      * @param applicationId the fb application being published.
      * @param callback a callback to invoke with a Response object, carrying the server response, or an error.
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static void publishInstallAsync(final Context context, final String applicationId,
         final Request.Callback callback) {
         // grab the application context ahead of time, since we will return to the caller immediately.
@@ -254,7 +286,10 @@ public void run() {
      * Sets whether opening a Session should automatically publish install attribution to the Facebook graph.
      *
      * @param shouldAutoPublishInstall true to automatically publish, false to not
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static void setShouldAutoPublishInstall(boolean shouldAutoPublishInstall) {
         Settings.shouldAutoPublishInstall = shouldAutoPublishInstall;
     }
@@ -263,7 +298,10 @@ public static void setShouldAutoPublishInstall(boolean shouldAutoPublishInstall)
      * Gets whether opening a Session should automatically publish install attribution to the Facebook graph.
      *
      * @return true to automatically publish, false to not
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static boolean getShouldAutoPublishInstall() {
         return shouldAutoPublishInstall;
     }
@@ -275,7 +313,10 @@ public static boolean getShouldAutoPublishInstall() {
      * @param applicationId the fb application being published.
      * @return returns false on error.  Applications should retry until true is returned.  Safe to call again after
      * true is returned.
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static boolean publishInstallAndWait(final Context context, final String applicationId) {
         Response response = publishInstallAndWaitForResponse(context, applicationId);
         return response != null && response.getError() == null;
@@ -287,8 +328,18 @@ public static boolean publishInstallAndWait(final Context context, final String
      * @param context the current Context
      * @param applicationId the fb application being published.
      * @return returns a Response object, carrying the server response, or an error.
+     *
+     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
      */
+    @Deprecated
     public static Response publishInstallAndWaitForResponse(final Context context, final String applicationId) {
+        return publishInstallAndWaitForResponse(context, applicationId, false);
+    }
+
+    static Response publishInstallAndWaitForResponse(
+            final Context context,
+            final String applicationId,
+            final boolean isAutoPublish) {
         try {
             if (context == null || applicationId == null) {
                 throw new IllegalArgumentException("Both context and applicationId must be non-null");
@@ -300,9 +351,20 @@ public static Response publishInstallAndWaitForResponse(final Context context, f
             long lastPing = preferences.getLong(pingKey, 0);
             String lastResponseJSON = preferences.getString(jsonKey, null);
 
+            // prevent auto publish from occurring if we have an explicit call.
+            if (!isAutoPublish) {
+                setShouldAutoPublishInstall(false);
+            }
+
             GraphObject publishParams = GraphObject.Factory.create();
             publishParams.setProperty(ANALYTICS_EVENT, MOBILE_INSTALL_EVENT);
-            publishParams.setProperty(ATTRIBUTION_KEY, attributionId);
+
+            Utility.setAppEventAttributionParameters(publishParams,
+                    attributionId,
+                    Utility.getHashedDeviceAndAppID(context, applicationId),
+                    !getLimitEventAndDataUsage(context));
+            publishParams.setProperty(AUTO_PUBLISH, isAutoPublish);
+            publishParams.setProperty("application_package_name", context.getPackageName());
 
             String publishUrl = String.format(PUBLISH_ACTIVITY_PATH, applicationId);
             Request publishRequest = Request.newPostRequest(null, publishUrl, publishParams, null);
@@ -326,7 +388,7 @@ public static Response publishInstallAndWaitForResponse(final Context context, f
                 throw new FacebookException("No attribution id returned from the Facebook application");
             } else {
 
-                if (!Utility.queryAppAttributionSupportAndWait(applicationId)) {
+                if (!Utility.queryAppSettings(applicationId, false).supportsAttribution()) {
                     throw new FacebookException("Install attribution has been disabled on the server.");
                 }
 
@@ -358,14 +420,38 @@ public static Response publishInstallAndWaitForResponse(final Context context, f
      * @return returns null if the facebook app is not present on the phone.
      */
     public static String getAttributionId(ContentResolver contentResolver) {
-        String [] projection = {ATTRIBUTION_ID_COLUMN_NAME};
-        Cursor c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
-        if (c == null || !c.moveToFirst()) {
+        try {
+            String [] projection = {ATTRIBUTION_ID_COLUMN_NAME};
+            Cursor c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return null;
+            }
+            String attributionId = c.getString(c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME));
+            c.close();
+            return attributionId;
+        } catch (Exception e) {
+            Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
             return null;
         }
-        String attributionId = c.getString(c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME));
-        c.close();
-        return attributionId;
+    }
+
+    /**
+     * Gets the application version to the provided string.
+     * @return application version set via setAppVersion.
+     */
+    public static String getAppVersion() {
+        return appVersion;
+    }
+
+    /**
+     * Sets the application version to the provided string.  AppEventsLogger.logEvent calls logs its event with the
+     * current app version, and App Insights allows breakdown of events by app version.
+     *
+     * @param appVersion  The version identifier of the Android app that events are being logged through.
+     *                    Enables analysis and breakdown of logged events by app version.
+     */
+    public static void setAppVersion(String appVersion) {
+        Settings.appVersion = appVersion;
     }
 
     /**
@@ -387,4 +473,48 @@ public static String getSdkVersion() {
     public static String getMigrationBundle() {
         return FacebookSdkVersion.MIGRATION_BUNDLE;
     }
+
+    /**
+     * Gets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
+     * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
+     * to false.  This value is stored on the device and persists across app launches.
+     *
+     * @param context   Used to read the value.
+     */
+    public static boolean getLimitEventAndDataUsage(Context context) {
+        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+        return preferences.getBoolean("limitEventUsage", false);
+    }
+
+    /**
+     * Sets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
+     * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
+     * to false.  This value is stored on the device and persists across app launches.  Changes to this setting will
+     * apply to app events currently queued to be flushed.
+     *
+     * @param context   Used to persist this value across app runs.
+     */
+    public static void setLimitEventAndDataUsage(Context context, boolean limitEventUsage) {
+        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+        SharedPreferences.Editor editor = preferences.edit();
+        editor.putBoolean("limitEventUsage", limitEventUsage);
+        editor.commit();
+    }
+
+    /**
+     * Gets the threshold used to report progress on requests.
+     */
+    public static long getOnProgressThreshold() {
+        return onProgressThreshold.get();
+    }
+
+    /**
+     * Sets the threshold used to report progress on requests. Note that the value will be read when the
+     * request is started and can not be changed during a request (or batch) execution.
+     *
+     * @param threshold The number of bytes progressed to force a callback.
+     */
+    public static void setOnProgressThreshold(long threshold) {
+        onProgressThreshold.set(threshold);
+    }
 }
diff --git a/facebook/src/com/facebook/UiLifecycleHelper.java b/facebook/src/com/facebook/UiLifecycleHelper.java
index 5dceca9ab..d1b74ff66 100644
--- a/facebook/src/com/facebook/UiLifecycleHelper.java
+++ b/facebook/src/com/facebook/UiLifecycleHelper.java
@@ -23,6 +23,11 @@
 import android.content.IntentFilter;
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.widget.FacebookDialog;
+
+import java.util.UUID;
 
 /**
  * This class helps to create, automatically open (if applicable), save, and
@@ -31,8 +36,14 @@
  * When using this class, clients MUST call all the public methods from the
  * respective methods in either an Activity or Fragment. Failure to call all the
  * methods can result in improperly initialized or uninitialized Sessions.
+ * <p>
+ * This class should also be used by Activities that will be displaying native dialogs
+ * provided by the Facebook application, in order to handle processing of the activity
+ * results generated by those dialogs.
  */
 public class UiLifecycleHelper {
+    private static final String DIALOG_CALL_BUNDLE_SAVE_KEY =
+            "com.facebook.UiLifecycleHelper.pendingFacebookDialogCallKey";
 
     private final static String ACTIVITY_NULL_MESSAGE = "activity cannot be null";
 
@@ -40,6 +51,9 @@
     private final Session.StatusCallback callback;
     private final BroadcastReceiver receiver;
     private final LocalBroadcastManager broadcastManager;
+    // Members related to handling FacebookDialog calls
+    private FacebookDialog.PendingCall pendingFacebookDialogCall;
+    private AppEventsLogger appEventsLogger;
 
     /**
      * Creates a new UiLifecycleHelper.
@@ -74,6 +88,9 @@ public void onCreate(Bundle savedInstanceState) {
             }
             Session.setActiveSession(session);
         }
+        if (savedInstanceState != null) {
+            pendingFacebookDialogCall = savedInstanceState.getParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY);
+        }
     }
 
     /**
@@ -108,10 +125,26 @@ public void onResume() {
      * @param data the result data
      */
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        onActivityResult(requestCode, resultCode, data, null);
+    }
+
+    /**
+     * To be called from an Activity or Fragment's onActivityResult method, when the results of a FacebookDialog
+     * call are expected.
+     *
+     * @param requestCode the request code
+     * @param resultCode the result code
+     * @param data the result data
+     * @param dialogCallback the callback for handling FacebookDialog results, can be null
+     */
+    public void onActivityResult(int requestCode, int resultCode, Intent data,
+                FacebookDialog.Callback facebookDialogCallback) {
         Session session = Session.getActiveSession();
         if (session != null) {
             session.onActivityResult(activity, requestCode, resultCode, data);
         }
+
+        handleFacebookDialogActivityResult(requestCode, resultCode, data, facebookDialogCallback);
     }
 
     /**
@@ -121,6 +154,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
      */
     public void onSaveInstanceState(Bundle outState) {
         Session.saveSession(Session.getActiveSession(), outState);
+        outState.putParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY, pendingFacebookDialogCall);
     }
 
     /**
@@ -138,12 +172,64 @@ public void onPause() {
         }
     }
 
+    /**
+     * To be called from an Activity or Fragment's onStop method.
+     */
+    public void onStop() {
+        AppEventsLogger.onContextStop();
+    }
+
     /**
      * To be called from an Activity or Fragment's onDestroy method.
      */
     public void onDestroy() {
     }
 
+    /**
+     * Register that we are expecting results from a call to the Facebook application (e.g., from a native
+     * dialog provided by the Facebook app). Activity results forwarded to onActivityResults will be parsed
+     * and handled if they correspond to this call. Only a single pending FacebookDialog call can be tracked
+     * at a time; attempting to track another one will cancel the first one.
+     * @param appCall an PendingCall object containing the call ID
+     */
+    public void trackPendingDialogCall(FacebookDialog.PendingCall pendingCall) {
+        if (pendingFacebookDialogCall != null) {
+            // If one is already pending, cancel it; we don't allow multiple pending calls.
+            Log.i("Facebook", "Tracking new app call while one is still pending; canceling pending call.");
+            cancelPendingAppCall(null);
+        }
+        pendingFacebookDialogCall = pendingCall;
+    }
+
+    /**
+     * Retrieves an instance of AppEventsLogger that can be used for the current Session, if any. Different
+     * instances may be returned if the current Session changes, so this value should not be cached for long
+     * periods of time -- always call getAppEventsLogger to get the right logger for the current Session. If
+     * no Session is currently available, this method will return null.
+     *
+     * To ensure delivery of app events across Activity lifecycle events, calling Activities should be sure to
+     * call the onStop method.
+     *
+     * @return an AppEventsLogger to use for logging app events
+     */
+    public AppEventsLogger getAppEventsLogger() {
+        Session session = Session.getActiveSession();
+        if (session == null) {
+            return null;
+        }
+
+        if (appEventsLogger == null || !appEventsLogger.isValidForSession(session)) {
+            if (appEventsLogger != null) {
+                // Pretend we got stopped so the old logger will persist its results now, in case we get stopped
+                // before events get flushed.
+                AppEventsLogger.onContextStop();
+            }
+            appEventsLogger = AppEventsLogger.newLogger(activity, session);
+        }
+
+        return appEventsLogger;
+    }
+
     /**
      * The BroadcastReceiver implementation that either adds or removes the callback
      * from the active Session object as it's SET or UNSET.
@@ -164,4 +250,60 @@ public void onReceive(Context context, Intent intent) {
             }
         }
     }
+
+    private boolean handleFacebookDialogActivityResult(int requestCode, int resultCode, Intent data,
+            FacebookDialog.Callback facebookDialogCallback) {
+        if (pendingFacebookDialogCall == null || pendingFacebookDialogCall.getRequestCode() != requestCode) {
+            return false;
+        }
+
+        if (data == null) {
+            // We understand the request code, but have no Intent. This can happen if the called Activity crashes
+            // before it can be started; we treat this as a cancellation because we have no other information.
+            cancelPendingAppCall(facebookDialogCallback);
+            return true;
+        }
+
+        String callIdString = data.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
+        UUID callId = null;
+        if (callIdString != null) {
+            try {
+                callId = UUID.fromString(callIdString);
+            } catch (IllegalArgumentException exception) {
+            }
+        }
+
+        // Was this result for the call we are waiting on?
+        if (callId != null && pendingFacebookDialogCall.getCallId().equals(callId)) {
+            // Yes, we can handle it normally.
+            FacebookDialog.handleActivityResult(activity, pendingFacebookDialogCall, requestCode, data,
+                    facebookDialogCallback);
+        } else {
+            // No, send a cancellation error to the pending call and ignore the result, because we
+            // don't know what to do with it.
+            cancelPendingAppCall(facebookDialogCallback);
+        }
+
+        pendingFacebookDialogCall = null;
+        return true;
+    }
+
+    private void cancelPendingAppCall(FacebookDialog.Callback facebookDialogCallback) {
+        if (facebookDialogCallback != null) {
+            Intent pendingIntent = pendingFacebookDialogCall.getRequestIntent();
+
+            Intent cancelIntent = new Intent();
+            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID,
+                    pendingIntent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID));
+            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION,
+                    pendingIntent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION));
+            cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION,
+                    pendingIntent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
+            cancelIntent.putExtra(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_UNKNOWN_ERROR);
+
+            FacebookDialog.handleActivityResult(activity, pendingFacebookDialogCall,
+                    pendingFacebookDialogCall.getRequestCode(), cancelIntent, facebookDialogCallback);
+        }
+        pendingFacebookDialogCall = null;
+    }
 }
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 2b439e7d7..83cdabe9b 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -106,7 +106,7 @@
 
     // If the last time we extended the access token was more than 24 hours ago
     // we try to refresh the access token again.
-    final private long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L;
+    final private static long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L;
 
     /**
      * Constructor for Facebook object.
@@ -309,7 +309,7 @@ public void call(Session callbackSession, SessionState state, Exception exceptio
                 setCallback(callback).
                 setLoginBehavior(behavior).
                 setRequestCode(activityCode).
-                setPermissions(Arrays.asList(permissions));
+                setPermissions(Arrays.asList(pendingAuthorizationPermissions));
         openSession(pendingOpeningSession, openRequest, pendingAuthorizationPermissions.length > 0);
     }
 
@@ -612,11 +612,9 @@ public void handleMessage(Message msg) {
                 }
             }
 
-            if (connection != null) {
-                // The refreshToken function should be called rarely,
-                // so there is no point in keeping the binding open.
-                connection.applicationsContext.unbindService(connection);
-            }
+            // The refreshToken function should be called rarely,
+            // so there is no point in keeping the binding open.
+            connection.applicationsContext.unbindService(connection);
         }
     }
 
@@ -1134,7 +1132,8 @@ private TokenCachingStrategy getTokenCache() {
     }
 
     private static String[] stringArray(List<String> list) {
-        String[] array = new String[list.size()];
+        int size = (list != null) ? list.size() : 0;
+        String[] array = new String[size];
 
         if (list != null) {
             for (int i = 0; i < array.length; i++) {
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 231c1e78c..4ece878df 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -195,23 +195,28 @@ public static String openUrl(String url, String method, Bundle params)
             conn.setDoInput(true);
             conn.setRequestProperty("Connection", "Keep-Alive");
             conn.connect();
+
             os = new BufferedOutputStream(conn.getOutputStream());
 
-            os.write(("--" + strBoundary +endLine).getBytes());
-            os.write((encodePostBody(params, strBoundary)).getBytes());
-            os.write((endLine + "--" + strBoundary + endLine).getBytes());
+            try {
+                os.write(("--" + strBoundary +endLine).getBytes());
+                os.write((encodePostBody(params, strBoundary)).getBytes());
+                os.write((endLine + "--" + strBoundary + endLine).getBytes());
 
-            if (!dataparams.isEmpty()) {
+                if (!dataparams.isEmpty()) {
 
-                for (String key: dataparams.keySet()){
-                    os.write(("Content-Disposition: form-data; filename=\"" + key + "\"" + endLine).getBytes());
-                    os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());
-                    os.write(dataparams.getByteArray(key));
-                    os.write((endLine + "--" + strBoundary + endLine).getBytes());
+                    for (String key: dataparams.keySet()){
+                        os.write(("Content-Disposition: form-data; filename=\"" + key + "\"" + endLine).getBytes());
+                        os.write(("Content-Type: content/unknown" + endLine + endLine).getBytes());
+                        os.write(dataparams.getByteArray(key));
+                        os.write((endLine + "--" + strBoundary + endLine).getBytes());
 
+                    }
                 }
+                os.flush();
+            } finally {
+                os.close();
             }
-            os.flush();
         }
 
         String response = "";
diff --git a/facebook/src/com/facebook/internal/AnalyticsEvents.java b/facebook/src/com/facebook/internal/AnalyticsEvents.java
new file mode 100644
index 000000000..e01ac4371
--- /dev/null
+++ b/facebook/src/com/facebook/internal/AnalyticsEvents.java
@@ -0,0 +1,31 @@
+package com.facebook.internal;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class AnalyticsEvents {
+    public static final String EVENT_NATIVE_LOGIN_DIALOG_COMPLETE   = "fb_dialogs_native_login_dialog_complete";
+    public static final String EVENT_NATIVE_LOGIN_DIALOG_START      = "fb_dialogs_native_login_dialog_start";
+    public static final String EVENT_WEB_LOGIN_COMPLETE             = "fb_dialogs_web_login_dialog_complete";
+    public static final String EVENT_FRIEND_PICKER_USAGE            = "fb_friend_picker_usage";
+    public static final String EVENT_PLACE_PICKER_USAGE             = "fb_place_picker_usage";
+    public static final String EVENT_LOGIN_VIEW_USAGE               = "fb_login_view_usage";
+    public static final String EVENT_USER_SETTINGS_USAGE            = "fb_user_settings_vc_usage";
+
+    public static final String PARAMETER_WEB_LOGIN_E2E                  = "fb_web_login_e2e";
+    public static final String PARAMETER_WEB_LOGIN_SWITCHBACK_TIME      = "fb_web_login_switchback_time";
+    public static final String PARAMETER_APP_ID                         = "app_id";
+    public static final String PARAMETER_ACTION_ID                      = "action_id";
+    public static final String PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME = "fb_native_login_dialog_start_time";
+    public static final String PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME =
+            "fb_native_login_dialog_complete_time";
+
+    public static final String PARAMETER_DIALOG_OUTCOME                 = "fb_dialog_outcome";
+    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED = "Completed";
+    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN   = "Unknown";
+    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_CANCELLED = "Cancelled";
+    public static final String PARAMETER_DIALOG_OUTCOME_VALUE_FAILED    = "Failed";
+
+}
diff --git a/facebook/src/com/facebook/internal/FileLruCache.java b/facebook/src/com/facebook/internal/FileLruCache.java
index 3d1a8d774..0f23176b9 100644
--- a/facebook/src/com/facebook/internal/FileLruCache.java
+++ b/facebook/src/com/facebook/internal/FileLruCache.java
@@ -47,8 +47,9 @@
 // are renamed to a single target that exactly one of them continues to exist.
 //
 // Standard POSIX file semantics guarantee being able to continue to use a file handle even after the
-// corresponding file has been deleted.  Given this and that cache files never change other than deleting in trim(),
-// we only have to ensure that there is at most one trim() process deleting files at any given time.
+// corresponding file has been deleted.  Given this and that cache files never change other than deleting in trim()
+// or clear(),  we only have to ensure that there is at most one trim() or clear() process deleting files at any
+// given time.
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
@@ -66,7 +67,9 @@
     private final Limits limits;
     private final File directory;
     private boolean isTrimPending;
+    private boolean isTrimInProgress;
     private final Object lock;
+    private AtomicLong lastClearCacheTime = new AtomicLong(0);
 
     // The value of tag should be a final String that works as a directory name.
     public FileLruCache(Context context, String tag, Limits limits) {
@@ -76,18 +79,9 @@ public FileLruCache(Context context, String tag, Limits limits) {
         this.lock = new Object();
 
         // Ensure the cache dir exists
-        this.directory.mkdirs();
-
-        // Remove any stale partially-written files from a previous run
-        BufferFile.deleteAll(this.directory);
-    }
-
-    // Other code in this class is not necessarily robust to having buffer files deleted concurrently.
-    // If this is ever used for non-test code, we should make sure the synchronization is correct.  See
-    // the threading notes at the top of this class.
-    public void clearForTest() throws IOException {
-        for (File file : this.directory.listFiles()) {
-            file.delete();
+        if (this.directory.mkdirs() || this.directory.isDirectory()) {
+            // Remove any stale partially-written files from a previous run
+            BufferFile.deleteAll(this.directory);
         }
     }
 
@@ -98,7 +92,7 @@ public void clearForTest() throws IOException {
     // Also, since trim() runs asynchronously now, this blocks until any pending trim has completed.
     long sizeInBytesForTest() {
         synchronized (lock) {
-            while (isTrimPending) {
+            while (isTrimPending || isTrimInProgress) {
                 try {
                     lock.wait();
                 } catch (InterruptedException e) {
@@ -109,8 +103,10 @@ long sizeInBytesForTest() {
 
         File[] files = this.directory.listFiles();
         long total = 0;
-        for (File file : files) {
-            total += file.length();
+        if (files != null) {
+            for (File file : files) {
+                total += file.length();
+            }
         }
         return total;
     }
@@ -183,10 +179,17 @@ public OutputStream openPutStream(final String key, String contentTag) throws IO
             throw new IOException(e.getMessage());
         }
 
+        final long bufferFileCreateTime = System.currentTimeMillis();
         StreamCloseCallback renameToTargetCallback = new StreamCloseCallback() {
             @Override
             public void onClose() {
-                renameToTargetAndTrim(key, buffer);
+                // if the buffer file was created before the cache was cleared, then the buffer file
+                // should be deleted rather than renamed and saved.
+                if (bufferFileCreateTime < lastClearCacheTime.get()) {
+                    buffer.delete();
+                } else {
+                    renameToTargetAndTrim(key, buffer);
+                }
             }
         };
 
@@ -217,6 +220,22 @@ public void onClose() {
         }
     }
 
+    public void clearCache() {
+        // get the current directory listing of files to delete
+        final File[] filesToDelete = directory.listFiles(BufferFile.excludeBufferFiles());
+        lastClearCacheTime.set(System.currentTimeMillis());
+        if (filesToDelete != null) {
+            Settings.getExecutor().execute(new Runnable() {
+                @Override
+                public void run() {
+                    for (File file : filesToDelete) {
+                        file.delete();
+                    }
+                }
+            });
+        }
+    }
+
     private void renameToTargetAndTrim(String key, File buffer) {
         final File target = new File(directory, Utility.md5hash(key));
 
@@ -259,19 +278,26 @@ public void run() {
     }
 
     private void trim() {
+        synchronized (lock) {
+            isTrimPending = false;
+            isTrimInProgress = true;
+        }
         try {
             Logger.log(LoggingBehavior.CACHE, TAG, "trim started");
             PriorityQueue<ModifiedFile> heap = new PriorityQueue<ModifiedFile>();
             long size = 0;
             long count = 0;
-            for (File file : this.directory.listFiles(BufferFile.excludeBufferFiles())) {
-                ModifiedFile modified = new ModifiedFile(file);
-                heap.add(modified);
-                Logger.log(LoggingBehavior.CACHE, TAG, "  trim considering time=" + Long.valueOf(modified.getModified())
-                        + " name=" + modified.getFile().getName());
-
-                size += file.length();
-                count++;
+            File[] filesToTrim =this.directory.listFiles(BufferFile.excludeBufferFiles());
+            if (filesToTrim != null) {
+                for (File file : filesToTrim) {
+                    ModifiedFile modified = new ModifiedFile(file);
+                    heap.add(modified);
+                    Logger.log(LoggingBehavior.CACHE, TAG, "  trim considering time=" + Long.valueOf(modified.getModified())
+                            + " name=" + modified.getFile().getName());
+
+                    size += file.length();
+                    count++;
+                }
             }
 
             while ((size > limits.getByteCount()) || (count > limits.getFileCount())) {
@@ -283,7 +309,7 @@ private void trim() {
             }
         } finally {
             synchronized (lock) {
-                isTrimPending = false;
+                isTrimInProgress = false;
                 lock.notifyAll();
             }
         }
@@ -305,8 +331,11 @@ public boolean accept(File dir, String filename) {
         };
 
         static void deleteAll(final File root) {
-            for (File file : root.listFiles(excludeNonBufferFiles())) {
-                file.delete();
+            File[] filesToDelete = root.listFiles(excludeNonBufferFiles());
+            if (filesToDelete != null) {
+                for (File file : filesToDelete) {
+                    file.delete();
+                }
             }
         }
 
@@ -565,6 +594,9 @@ void setFileCount(int n) {
 
     // Caches the result of lastModified during sort/heap operations
     private final static class ModifiedFile implements Comparable<ModifiedFile> {
+        private static final int HASH_SEED = 29; // Some random prime number
+        private static final int HASH_MULTIPLIER = 37; // Some random prime number
+
         private final File file;
         private final long modified;
 
@@ -598,6 +630,16 @@ public boolean equals(Object another) {
                     (another instanceof ModifiedFile) &&
                     (compareTo((ModifiedFile)another) == 0);
         }
+
+        @Override
+        public int hashCode() {
+            int result = HASH_SEED;
+
+            result = (result * HASH_MULTIPLIER) + file.hashCode();
+            result = (result * HASH_MULTIPLIER) + (int) (modified % Integer.MAX_VALUE);
+
+            return result;
+        }
     }
 
     private interface StreamCloseCallback {
diff --git a/facebook/src/com/facebook/widget/ImageDownloader.java b/facebook/src/com/facebook/internal/ImageDownloader.java
similarity index 87%
rename from facebook/src/com/facebook/widget/ImageDownloader.java
rename to facebook/src/com/facebook/internal/ImageDownloader.java
index 6fef68043..dc55fb917 100644
--- a/facebook/src/com/facebook/widget/ImageDownloader.java
+++ b/facebook/src/com/facebook/internal/ImageDownloader.java
@@ -14,26 +14,28 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.os.Handler;
+import android.os.Looper;
 import com.facebook.FacebookException;
-import com.facebook.internal.Utility;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.*;
 
-class ImageDownloader {
+public class ImageDownloader {
     private static final int DOWNLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
     private static final int CACHE_READ_QUEUE_MAX_CONCURRENT = 2;
-    private static final Handler handler = new Handler();
+    private static Handler handler;
     private static WorkQueue downloadQueue = new WorkQueue(DOWNLOAD_QUEUE_MAX_CONCURRENT);
     private static WorkQueue cacheReadQueue = new WorkQueue(CACHE_READ_QUEUE_MAX_CONCURRENT);
 
@@ -44,7 +46,7 @@
      * If a callback is specified, it is guaranteed to be invoked on the calling thread.
      * @param request Request to process
      */
-    static void downloadAsync(ImageRequest request) {
+    public static void downloadAsync(ImageRequest request) {
         if (request == null) {
             return;
         }
@@ -54,7 +56,7 @@ static void downloadAsync(ImageRequest request) {
         // redirect response and the Url might change. We can't create our own new ImageRequests
         // for these changed Urls since the caller might be doing some book-keeping with the request's
         // object reference. So we keep the old references and just map them to new urls in the downloader
-        RequestKey key = new RequestKey(request.getImageUrl(), request.getCallerTag());
+        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
         synchronized (pendingRequests) {
             DownloaderContext downloaderContext = pendingRequests.get(key);
             if (downloaderContext != null) {
@@ -67,9 +69,9 @@ static void downloadAsync(ImageRequest request) {
         }
     }
 
-    static boolean cancelRequest(ImageRequest request) {
+    public static boolean cancelRequest(ImageRequest request) {
         boolean cancelled = false;
-        RequestKey key = new RequestKey(request.getImageUrl(), request.getCallerTag());
+        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
         synchronized (pendingRequests) {
             DownloaderContext downloaderContext = pendingRequests.get(key);
             if (downloaderContext != null) {
@@ -91,8 +93,8 @@ static boolean cancelRequest(ImageRequest request) {
         return cancelled;
     }
 
-    static void prioritizeRequest(ImageRequest request) {
-        RequestKey key = new RequestKey(request.getImageUrl(), request.getCallerTag());
+    public static void prioritizeRequest(ImageRequest request) {
+        RequestKey key = new RequestKey(request.getImageUri(), request.getCallerTag());
         synchronized (pendingRequests) {
             DownloaderContext downloaderContext = pendingRequests.get(key);
             if (downloaderContext != null) {
@@ -101,6 +103,11 @@ static void prioritizeRequest(ImageRequest request) {
         }
     }
 
+    public static void clearCache(Context context) {
+        ImageResponseCache.clearCache(context);
+        UrlRedirectCache.clearCache(context);
+    }
+
     private static void enqueueCacheRead(ImageRequest request, RequestKey key, boolean allowCachedRedirects) {
         enqueueRequest(
                 request,
@@ -150,7 +157,7 @@ private static void issueResponse(
             final ImageRequest request = completedRequestContext.request;
             final ImageRequest.Callback callback = request.getCallback();
             if (callback != null) {
-                handler.post(new Runnable() {
+                getHandler().post(new Runnable() {
                     @Override
                     public void run() {
                         ImageResponse response = new ImageResponse(
@@ -169,15 +176,15 @@ private static void readFromCache(RequestKey key, Context context, boolean allow
         InputStream cachedStream = null;
         boolean isCachedRedirect = false;
         if (allowCachedRedirects) {
-            URL redirectUrl = UrlRedirectCache.getRedirectedUrl(context, key.url);
-            if (redirectUrl != null) {
-                cachedStream = ImageResponseCache.getCachedImageStream(redirectUrl, context);
+            URI redirectUri = UrlRedirectCache.getRedirectedUri(context, key.uri);
+            if (redirectUri != null) {
+                cachedStream = ImageResponseCache.getCachedImageStream(redirectUri, context);
                 isCachedRedirect = cachedStream != null;
             }
         }
 
         if (!isCachedRedirect) {
-            cachedStream = ImageResponseCache.getCachedImageStream(key.url, context);
+            cachedStream = ImageResponseCache.getCachedImageStream(key.uri, context);
         }
 
         if (cachedStream != null) {
@@ -203,7 +210,8 @@ private static void download(RequestKey key, Context context) {
         boolean issueResponse = true;
 
         try {
-            connection = (HttpURLConnection) key.url.openConnection();
+            URL url = new URL(key.uri.toString());
+            connection = (HttpURLConnection) url.openConnection();
             connection.setInstanceFollowRedirects(false);
 
             switch (connection.getResponseCode()) {
@@ -214,8 +222,8 @@ private static void download(RequestKey key, Context context) {
 
                     String redirectLocation = connection.getHeaderField("location");
                     if (!Utility.isNullOrEmpty(redirectLocation)) {
-                        URL redirectUrl = new URL(redirectLocation);
-                        UrlRedirectCache.cacheUrlRedirect(context, key.url, redirectUrl);
+                        URI redirectUri = new URI(redirectLocation);
+                        UrlRedirectCache.cacheUriRedirect(context, key.uri, redirectUri);
 
                         // Once the old downloader context is removed, we are thread-safe since this is the
                         // only reference to it
@@ -223,7 +231,7 @@ private static void download(RequestKey key, Context context) {
                         if (downloaderContext != null && !downloaderContext.isCancelled) {
                             enqueueCacheRead(
                                     downloaderContext.request,
-                                    new RequestKey(redirectUrl, key.tag),
+                                    new RequestKey(redirectUri, key.tag),
                                     false);
                         }
                     }
@@ -251,6 +259,8 @@ private static void download(RequestKey key, Context context) {
             }
         } catch (IOException e) {
             error = e;
+        } catch (URISyntaxException e) {
+            error = e;
         } finally {
             Utility.closeQuietly(stream);
             Utility.disconnectQuietly(connection);
@@ -261,6 +271,13 @@ private static void download(RequestKey key, Context context) {
         }
     }
 
+    private static synchronized Handler getHandler() {
+        if (handler == null) {
+            handler = new Handler(Looper.getMainLooper());
+        }
+        return handler;
+    }
+
     private static DownloaderContext removePendingRequest(RequestKey key) {
         synchronized (pendingRequests) {
             return pendingRequests.remove(key);
@@ -271,11 +288,11 @@ private static DownloaderContext removePendingRequest(RequestKey key) {
         private static final int HASH_SEED = 29; // Some random prime number
         private static final int HASH_MULTIPLIER = 37; // Some random prime number
 
-        URL url;
+        URI uri;
         Object tag;
 
-        RequestKey(URL url, Object tag) {
-            this.url = url;
+        RequestKey(URI url, Object tag) {
+            this.uri = url;
             this.tag = tag;
         }
 
@@ -283,7 +300,7 @@ private static DownloaderContext removePendingRequest(RequestKey key) {
         public int hashCode() {
             int result = HASH_SEED;
 
-            result = (result * HASH_MULTIPLIER) + url.hashCode();
+            result = (result * HASH_MULTIPLIER) + uri.hashCode();
             result = (result * HASH_MULTIPLIER) + tag.hashCode();
 
             return result;
@@ -295,7 +312,7 @@ public boolean equals(Object o) {
 
             if (o != null && o instanceof RequestKey) {
                 RequestKey compareTo = (RequestKey)o;
-                isEqual = compareTo.url == url && compareTo.tag == tag;
+                isEqual = compareTo.uri == uri && compareTo.tag == tag;
             }
 
             return isEqual;
diff --git a/facebook/src/com/facebook/widget/ImageRequest.java b/facebook/src/com/facebook/internal/ImageRequest.java
similarity index 78%
rename from facebook/src/com/facebook/widget/ImageRequest.java
rename to facebook/src/com/facebook/internal/ImageRequest.java
index 5c45ff723..2c84bf88f 100644
--- a/facebook/src/com/facebook/widget/ImageRequest.java
+++ b/facebook/src/com/facebook/internal/ImageRequest.java
@@ -14,18 +14,17 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.content.Context;
 import android.net.Uri;
-import com.facebook.internal.Validate;
 
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
 
-class ImageRequest {
+public class ImageRequest {
 
-    interface Callback {
+    public interface Callback {
         /**
          * This method should always be called on the UI thread. ImageDownloader makes
          * sure to do this when it is responsible for issuing the ImageResponse
@@ -34,7 +33,7 @@
         void onCompleted(ImageResponse response);
     }
 
-    static final int UNSPECIFIED_DIMENSION = 0;
+    public static final int UNSPECIFIED_DIMENSION = 0;
 
     private static final String PROFILEPIC_URL_FORMAT =
             "https://graph.facebook.com/%s/picture";
@@ -44,16 +43,16 @@
     private static final String MIGRATION_VALUE = "{october_2012:true}";
 
     private Context context;
-    private URL imageUrl;
+    private URI imageUri;
     private Callback callback;
     private boolean allowCachedRedirects;
     private Object callerTag;
 
-    static URL getProfilePictureUrl(
+    public static URI getProfilePictureUrl(
             String userId,
             int width,
             int height)
-        throws MalformedURLException {
+            throws URISyntaxException {
 
         Validate.notNullOrEmpty(userId, "userId");
 
@@ -76,69 +75,69 @@ static URL getProfilePictureUrl(
 
         builder.appendQueryParameter(MIGRATION_PARAM, MIGRATION_VALUE);
 
-        return new URL(builder.toString());
+        return new URI(builder.toString());
     }
 
     private ImageRequest(Builder builder) {
         this.context = builder.context;
-        this.imageUrl = builder.imageUrl;
+        this.imageUri = builder.imageUrl;
         this.callback = builder.callback;
         this.allowCachedRedirects = builder.allowCachedRedirects;
         this.callerTag = builder.callerTag == null ? new Object() : builder.callerTag;
     }
 
-    Context getContext() {
+    public Context getContext() {
         return context;
     }
 
-    URL getImageUrl() {
-        return imageUrl;
+    public URI getImageUri() {
+        return imageUri;
     }
 
-    Callback getCallback() {
+    public Callback getCallback() {
         return callback;
     }
 
-    boolean isCachedRedirectAllowed() {
+    public boolean isCachedRedirectAllowed() {
         return allowCachedRedirects;
     }
 
-    Object getCallerTag() {
+    public Object getCallerTag() {
         return callerTag;
     }
 
-    static class Builder {
+    public static class Builder {
         // Required
         private Context context;
-        private URL imageUrl;
+        private URI imageUrl;
 
         // Optional
         private Callback callback;
         private boolean allowCachedRedirects;
         private Object callerTag;
 
-        Builder(Context context, URL imageUrl) {
+        public Builder(Context context, URI imageUrl) {
             Validate.notNull(imageUrl, "imageUrl");
             this.context = context;
             this.imageUrl = imageUrl;
         }
 
-        Builder setCallback(Callback callback) {
+        public Builder setCallback(Callback callback) {
             this.callback = callback;
             return this;
         }
 
-        Builder setCallerTag(Object callerTag) {
+        public Builder setCallerTag(Object callerTag) {
             this.callerTag = callerTag;
             return this;
         }
 
-        Builder setAllowCachedRedirects(boolean allowCachedRedirects) {
+        public Builder setAllowCachedRedirects(boolean allowCachedRedirects) {
             this.allowCachedRedirects = allowCachedRedirects;
             return this;
         }
 
-        ImageRequest build() {
+        public ImageRequest build() {
             return new ImageRequest(this);
         }
     }
diff --git a/facebook/src/com/facebook/widget/ImageResponse.java b/facebook/src/com/facebook/internal/ImageResponse.java
similarity index 84%
rename from facebook/src/com/facebook/widget/ImageResponse.java
rename to facebook/src/com/facebook/internal/ImageResponse.java
index ae47eec9d..ce2d6045b 100644
--- a/facebook/src/com/facebook/widget/ImageResponse.java
+++ b/facebook/src/com/facebook/internal/ImageResponse.java
@@ -14,11 +14,11 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.graphics.Bitmap;
 
-class ImageResponse {
+public class ImageResponse {
 
     private ImageRequest request;
     private Exception error;
@@ -32,19 +32,19 @@
         this.isCachedRedirect = isCachedRedirect;
     }
 
-    ImageRequest getRequest() {
+    public ImageRequest getRequest() {
         return request;
     }
 
-    Exception getError() {
+    public Exception getError() {
         return error;
     }
 
-    Bitmap getBitmap() {
+    public Bitmap getBitmap() {
         return bitmap;
     }
 
-    boolean isCachedRedirect() {
+    public boolean isCachedRedirect() {
         return isCachedRedirect;
     }
 }
diff --git a/facebook/src/com/facebook/widget/ImageResponseCache.java b/facebook/src/com/facebook/internal/ImageResponseCache.java
similarity index 83%
rename from facebook/src/com/facebook/widget/ImageResponseCache.java
rename to facebook/src/com/facebook/internal/ImageResponseCache.java
index 53b8d824f..c61fd38ba 100644
--- a/facebook/src/com/facebook/widget/ImageResponseCache.java
+++ b/facebook/src/com/facebook/internal/ImageResponseCache.java
@@ -14,19 +14,18 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.content.Context;
 import android.util.Log;
-import com.facebook.internal.Logger;
 import com.facebook.LoggingBehavior;
-import com.facebook.internal.Utility;
-import com.facebook.internal.FileLruCache;
 
 import java.io.BufferedInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.net.URL;
 
 class ImageResponseCache {
@@ -43,7 +42,7 @@ synchronized static FileLruCache getCache(Context context) throws IOException{
 
     // Get stream from cache, or return null if the image is not cached.
     // Does not throw if there was an error.
-    static InputStream getCachedImageStream(URL url, Context context) {
+    static InputStream getCachedImageStream(URI url, Context context) {
         InputStream imageStream = null;
         if (url != null) {
             if (isCDNURL(url)) {
@@ -64,23 +63,25 @@ static InputStream interceptAndCacheImageStream(Context context, HttpURLConnecti
         if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
             URL url = connection.getURL();
             stream = connection.getInputStream(); // Default stream in case caching fails
-            if (isCDNURL(url)) {
-                try {
+            try {
+                if (isCDNURL(url.toURI())) {
                     FileLruCache cache = getCache(context);
 
                     // Wrap stream with a caching stream
                     stream = cache.interceptAndPut(
                             url.toString(),
                             new BufferedHttpInputStream(stream, connection));
-                } catch (IOException e) {
-                    // Caching is best effort
                 }
+            } catch (IOException e) {
+                // Caching is best effort
+            } catch (URISyntaxException e) {
+            // Caching is best effort
             }
         }
         return stream;
     }
 
-   private static boolean isCDNURL(URL url) {
+   private static boolean isCDNURL(URI url) {
         if (url != null) {
             String uriHost = url.getHost();
 
@@ -96,6 +97,14 @@ private static boolean isCDNURL(URL url) {
         return false;
     }
 
+    static void clearCache(Context context) {
+        try {
+            getCache(context).clearCache();
+        } catch (IOException e) {
+            Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, "clearCache failed " + e.getMessage());
+        }
+    }
+
     private static class BufferedHttpInputStream extends BufferedInputStream {
         HttpURLConnection connection;
         BufferedHttpInputStream(InputStream stream, HttpURLConnection connection) {
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
new file mode 100644
index 000000000..98417dcdc
--- /dev/null
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -0,0 +1,526 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.*;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Build;
+import android.os.Bundle;
+import android.text.TextUtils;
+import com.facebook.*;
+import com.facebook.android.BuildConfig;
+
+import java.util.*;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public final class NativeProtocol {
+
+    public static final int NO_PROTOCOL_AVAILABLE = -1;
+
+    private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
+    private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
+
+    private static final String BASIC_INFO = "basic_info";
+    public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
+    public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
+    public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
+
+    // ---------------------------------------------------------------------------------------------
+    // Native Protocol updated 2012-11
+
+    static final String INTENT_ACTION_PLATFORM_ACTIVITY = "com.facebook.platform.PLATFORM_ACTIVITY";
+    static final String INTENT_ACTION_PLATFORM_SERVICE = "com.facebook.platform.PLATFORM_SERVICE";
+
+    public static final int PROTOCOL_VERSION_20121101 = 20121101;
+    public static final int PROTOCOL_VERSION_20130502 = 20130502;
+    public static final int PROTOCOL_VERSION_20130618 = 20130618;
+    public static final int PROTOCOL_VERSION_20131107 = 20131107;
+    public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
+    public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
+    public static final String EXTRA_PROTOCOL_CALL_ID = "com.facebook.platform.protocol.CALL_ID";
+    public static final String EXTRA_GET_INSTALL_DATA_PACKAGE = "com.facebook.platform.extra.INSTALLDATA_PACKAGE";
+
+    // Messages supported by PlatformService:
+    public static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST = 0x10000;
+    public static final int MESSAGE_GET_ACCESS_TOKEN_REPLY   = 0x10001;
+    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REQUEST = 0x10002;
+    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REPLY   = 0x10003;
+    public static final int MESSAGE_GET_INSTALL_DATA_REQUEST = 0x10004;
+    public static final int MESSAGE_GET_INSTALL_DATA_REPLY   = 0x10005;
+
+    // MESSAGE_ERROR_REPLY data keys:
+    // See STATUS_*
+
+    // MESSAGE_GET_ACCESS_TOKEN_REQUEST data keys:
+    // EXTRA_APPLICATION_ID
+
+    // MESSAGE_GET_ACCESS_TOKEN_REPLY data keys:
+    // EXTRA_ACCESS_TOKEN
+    // EXTRA_EXPIRES_SECONDS_SINCE_EPOCH
+    // EXTRA_PERMISSIONS
+
+    // MESSAGE_GET_PROTOCOL_VERSIONS_REPLY data keys:
+    static final String EXTRA_PROTOCOL_VERSIONS = "com.facebook.platform.extra.PROTOCOL_VERSIONS";
+
+    // Values of EXTRA_PROTOCOL_ACTION supported by PlatformActivity:
+    public static final String ACTION_LOGIN_DIALOG = "com.facebook.platform.action.request.LOGIN_DIALOG";
+    public static final String ACTION_FEED_DIALOG = "com.facebook.platform.action.request.FEED_DIALOG";
+    public static final String ACTION_OGACTIONPUBLISH_DIALOG =
+            "com.facebook.platform.action.request.OGACTIONPUBLISH_DIALOG";
+
+    // Values of EXTRA_PROTOCOL_ACTION values returned by PlatformActivity:
+    static final String ACTION_LOGIN_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.LOGIN_DIALOG";
+    public static final String ACTION_FEED_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.FEED_DIALOG";
+    public static final String ACTION_OGACTIONPUBLISH_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.OGACTIONPUBLISH_DIALOG";
+
+    // Extras supported for ACTION_LOGIN_DIALOG:
+    public static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS";
+    public static final String EXTRA_WRITE_PRIVACY = "com.facebook.platform.extra.WRITE_PRIVACY";
+    public static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID";
+    public static final String EXTRA_APPLICATION_NAME = "com.facebook.platform.extra.APPLICATION_NAME";
+
+    // Extras returned by setResult() for ACTION_LOGIN_DIALOG
+    public static final String EXTRA_ACCESS_TOKEN = "com.facebook.platform.extra.ACCESS_TOKEN";
+    public static final String EXTRA_EXPIRES_SECONDS_SINCE_EPOCH =
+            "com.facebook.platform.extra.EXPIRES_SECONDS_SINCE_EPOCH";
+    // EXTRA_PERMISSIONS
+
+    // Extras supported for ACTION_FEED_DIALOG:
+    public static final String EXTRA_PLACE_TAG = "com.facebook.platform.extra.PLACE";
+    public static final String EXTRA_FRIEND_TAGS = "com.facebook.platform.extra.FRIENDS";
+    public static final String EXTRA_LINK = "com.facebook.platform.extra.LINK";
+    public static final String EXTRA_IMAGE = "com.facebook.platform.extra.IMAGE";
+    public static final String EXTRA_TITLE = "com.facebook.platform.extra.TITLE";
+    public static final String EXTRA_SUBTITLE = "com.facebook.platform.extra.SUBTITLE";
+    public static final String EXTRA_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
+    public static final String EXTRA_REF = "com.facebook.platform.extra.REF";
+    public static final String EXTRA_DATA_FAILURES_FATAL = "com.facebook.platform.extra.DATA_FAILURES_FATAL";
+
+    // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
+    public static final String EXTRA_ACTION = "com.facebook.platform.extra.ACTION";
+    public static final String EXTRA_ACTION_TYPE = "com.facebook.platform.extra.ACTION_TYPE";
+    public static final String EXTRA_PREVIEW_PROPERTY_NAME =
+            "com.facebook.platform.extra.PREVIEW_PROPERTY_NAME";
+
+    // OG objects will have this key to set to true if they should be created as part of OG Action publish
+    public static final String OPEN_GRAPH_CREATE_OBJECT_KEY = "fbsdk:create_object";
+    // Determines whether an image is user generated
+    public static final String IMAGE_USER_GENERATED_KEY = "user_generated";
+    // url key for images
+    public static final String IMAGE_URL_KEY = "url";
+
+    // Keys for status data in MESSAGE_ERROR_REPLY from PlatformService and for error
+    // extras returned by PlatformActivity's setResult() in case of errors:
+    public static final String STATUS_ERROR_TYPE = "com.facebook.platform.status.ERROR_TYPE";
+    public static final String STATUS_ERROR_DESCRIPTION =
+            "com.facebook.platform.status.ERROR_DESCRIPTION";
+    public static final String STATUS_ERROR_CODE = "com.facebook.platform.status.ERROR_CODE";
+    public static final String STATUS_ERROR_SUBCODE = "com.facebook.platform.status.ERROR_SUBCODE";
+    public static final String STATUS_ERROR_JSON = "com.facebook.platform.status.ERROR_JSON";
+
+    // Expected values for ERROR_KEY_TYPE.  Clients should tolerate other values:
+    public static final String ERROR_UNKNOWN_ERROR = "UnknownError";
+    public static final String ERROR_PROTOCOL_ERROR = "ProtocolError";
+    public static final String ERROR_USER_CANCELED = "UserCanceled";
+    public static final String ERROR_APPLICATION_ERROR = "ApplicationError";
+    public static final String ERROR_NETWORK_ERROR = "NetworkError";
+    public static final String ERROR_PERMISSION_DENIED = "PermissionDenied";
+    public static final String ERROR_SERVICE_DISABLED = "ServiceDisabled";
+
+    public static final String AUDIENCE_ME = "SELF";
+    public static final String AUDIENCE_FRIENDS = "ALL_FRIENDS";
+    public static final String AUDIENCE_EVERYONE = "EVERYONE";
+
+    // Request codes for different categories of native protocol calls.
+    public static final int DIALOG_REQUEST_CODE = 0xfacf;
+
+    private static final String CONTENT_SCHEME = "content://";
+    private static final String PLATFORM_PROVIDER_VERSIONS = ".provider.PlatformProvider/versions";
+
+    // Columns returned by PlatformProvider
+    private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
+
+    private static abstract class NativeAppInfo {
+        abstract protected String getPackage();
+        abstract protected String getSignature();
+
+        public boolean validateSignature(Context context, String packageName) {
+            String brand = Build.BRAND;
+            int applicationFlags = context.getApplicationInfo().flags;
+            if (brand.startsWith("generic") && (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
+                // We are debugging on an emulator, don't validate package signature.
+                return true;
+            }
+
+            PackageInfo packageInfo = null;
+            try {
+                packageInfo = context.getPackageManager().getPackageInfo(packageName,
+                        PackageManager.GET_SIGNATURES);
+            } catch (PackageManager.NameNotFoundException e) {
+                return false;
+            }
+
+            for (Signature signature : packageInfo.signatures) {
+                if (signature.toCharsString().equals(this.getSignature())) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+
+    }
+
+    private static class KatanaAppInfo extends NativeAppInfo {
+        static final String KATANA_PACKAGE = "com.facebook.katana";
+        static final String KATANA_SIGNATURE =
+                "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
+                        + "b3009060355040613025553310b30090603550408130243413112301006035504"
+                        + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
+                        + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
+                        + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
+                        + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
+                        + "55040613025553310b30090603550408130243413112301006035504071309506"
+                        + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
+                        + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
+                        + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
+                        + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
+                        + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
+                        + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
+                        + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
+                        + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
+                        + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
+                        + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
+                        + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
+                        + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
+                        + "928a2";
+        @Override
+        protected String getSignature() {
+            return KATANA_SIGNATURE;
+        }
+        @Override
+        protected String getPackage() {
+            return KATANA_PACKAGE;
+        }
+    }
+
+    private static class WakizashiAppInfo extends NativeAppInfo {
+        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
+
+        @Override
+        public boolean validateSignature(Context context, String packageName) {
+            return true;
+        }
+
+        @Override
+        protected String getSignature() {
+            return null;
+        }
+
+        @Override
+        protected String getPackage() {
+            return WAKIZASHI_PACKAGE;
+        }
+    }
+
+    private static final NativeAppInfo FACEBOOK_APP_INFO = new KatanaAppInfo();
+    private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
+    private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
+
+    private static List<NativeAppInfo> buildFacebookAppList() {
+        List<NativeAppInfo> list = new ArrayList<NativeAppInfo>();
+
+        // Katana needs to be the first thing in the list since it will get selected as the default FACEBOOK_APP_INFO
+        list.add(FACEBOOK_APP_INFO);
+
+        if(BuildConfig.DEBUG) {
+            list.add(new WakizashiAppInfo());
+        }
+
+        return list;
+    }
+
+    private static Map<String, List<NativeAppInfo>> buildActionToAppInfoMap() {
+        Map<String, List<NativeAppInfo>> map = new HashMap<String, List<NativeAppInfo>>();
+
+        // Add individual actions and the list they should try
+        map.put(ACTION_OGACTIONPUBLISH_DIALOG, facebookAppInfoList);
+        map.put(ACTION_FEED_DIALOG, facebookAppInfoList);
+        map.put(ACTION_LOGIN_DIALOG, facebookAppInfoList);
+
+        return map;
+    }
+
+    static Intent validateActivityIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.activityInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    static Intent validateServiceIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.serviceInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
+            String e2e) {
+        Intent intent = new Intent()
+                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
+                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+        if (!Utility.isNullOrEmpty(permissions)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+        }
+        if (!Utility.isNullOrEmpty(e2e)) {
+            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+        }
+
+        return validateActivityIntent(context, intent, FACEBOOK_APP_INFO);
+    }
+
+    public static Intent createTokenRefreshIntent(Context context) {
+        Intent intent = new Intent()
+                .setClassName(FACEBOOK_APP_INFO.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
+
+        return validateServiceIntent(context, intent, FACEBOOK_APP_INFO);
+    }
+
+    // Note: be sure this stays sorted in descending order; add new versions at the beginning
+    private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
+            Arrays.asList(
+                    PROTOCOL_VERSION_20131107,
+                    PROTOCOL_VERSION_20130618,
+                    PROTOCOL_VERSION_20130502,
+                    PROTOCOL_VERSION_20121101
+            );
+
+    private static Intent findActivityIntent(Context context, String activityAction, String internalAction) {
+        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
+        if (list == null) {
+            return null;
+        }
+
+        Intent intent = null;
+        for (NativeAppInfo appInfo : list) {
+            intent = new Intent()
+                    .setAction(activityAction)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateActivityIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+
+        return intent;
+    }
+
+    public static Intent createPlatformActivityIntent(Context context, String action, int version, Bundle extras) {
+        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
+        if (intent == null) {
+            return null;
+        }
+
+        intent.putExtras(extras)
+                .putExtra(EXTRA_PROTOCOL_VERSION, version)
+                .putExtra(EXTRA_PROTOCOL_ACTION, action);
+
+        return intent;
+    }
+
+    public static Intent createPlatformServiceIntent(Context context) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateServiceIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
+    }
+
+    public static Intent createLoginDialog20121101Intent(Context context, String applicationId, ArrayList<String> permissions,
+            String audience) {
+        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, ACTION_LOGIN_DIALOG);
+        if (intent == null) {
+            return null;
+        }
+
+        intent.putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
+              .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
+              .putExtra(EXTRA_APPLICATION_ID, applicationId)
+              .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
+              .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())
+              .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
+
+        return intent;
+    }
+
+    public static boolean isErrorResult(Intent resultIntent) {
+        return resultIntent.hasExtra(STATUS_ERROR_TYPE);
+    }
+
+    public static Exception getErrorFromResult(Intent resultIntent) {
+        if (!isErrorResult(resultIntent)) {
+            return null;
+        }
+
+        String type = resultIntent.getStringExtra(STATUS_ERROR_TYPE);
+        String description = resultIntent.getStringExtra(STATUS_ERROR_DESCRIPTION);
+
+        if (type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
+            return new FacebookOperationCanceledException(description);
+        }
+        /* TODO parse error values and create appropriate exception class */
+        return new FacebookException(description);
+    }
+
+    private static String generateCallId() {
+        return UUID.randomUUID().toString();
+    }
+
+    private static String ensureDefaultAudience(String audience) {
+        if (Utility.isNullOrEmpty(audience)) {
+            return AUDIENCE_ME;
+        } else {
+            return audience;
+        }
+    }
+
+    private static ArrayList<String> ensureDefaultPermissions(ArrayList<String> permissions) {
+        ArrayList<String> updated;
+
+        // Return if we are doing publish, or if basic_info is already included
+        if (Utility.isNullOrEmpty(permissions)) {
+            updated = new ArrayList<String>();
+        } else {
+            for (String permission : permissions) {
+                if (Session.isPublishPermission(permission) || BASIC_INFO.equals(permission)) {
+                    return permissions;
+                }
+            }
+            updated = new ArrayList<String>(permissions);
+        }
+
+        updated.add(BASIC_INFO);
+        return updated;
+    }
+
+    public static boolean isServiceDisabledResult20121101(Intent data) {
+        int protocolVersion = data.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
+        String errorType = data.getStringExtra(STATUS_ERROR_TYPE);
+
+        return ((PROTOCOL_VERSION_20121101 == protocolVersion) && ERROR_SERVICE_DISABLED.equals(errorType));
+    }
+
+    public static int getLatestAvailableProtocolVersionForService(Context context, final int minimumVersion) {
+        // Services are currently always against the Facebook App
+        return getLatestAvailableProtocolVersionForAppInfoList(context, facebookAppInfoList, minimumVersion);
+    }
+
+    public static int getLatestAvailableProtocolVersionForAction(Context context, String action, final int minimumVersion) {
+        List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
+        return getLatestAvailableProtocolVersionForAppInfoList(context, appInfoList, minimumVersion);
+    }
+
+    private static int getLatestAvailableProtocolVersionForAppInfoList(Context context, List<NativeAppInfo> appInfoList,
+            final int minimumVersion) {
+        if (appInfoList == null) {
+            return NO_PROTOCOL_AVAILABLE;
+        }
+
+        // Could potentially cache the NativeAppInfo to latestProtocolVersion
+        for (NativeAppInfo appInfo : appInfoList) {
+            int protocolVersion = getLatestAvailableProtocolVersionForAppInfo(context, appInfo, minimumVersion);
+            if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
+                return protocolVersion;
+            }
+        }
+
+        return NO_PROTOCOL_AVAILABLE;
+    }
+
+    private static int getLatestAvailableProtocolVersionForAppInfo(Context context, NativeAppInfo appInfo,
+            final int minimumVersion) {
+        ContentResolver contentResolver = context.getContentResolver();
+
+        String [] projection = new String[]{ PLATFORM_PROVIDER_VERSION_COLUMN };
+        Uri uri = buildPlatformProviderVersionURI(appInfo);
+        Cursor c = contentResolver.query(uri, projection, null, null, null);
+        if (c == null) {
+            return NO_PROTOCOL_AVAILABLE;
+        }
+
+        Set<Integer> versions = new HashSet<Integer>();
+        while (c.moveToNext()) {
+            int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
+            versions.add(version);
+        }
+
+        for (Integer knownVersion : KNOWN_PROTOCOL_VERSIONS) {
+            if (knownVersion < minimumVersion) {
+                return NO_PROTOCOL_AVAILABLE;
+            }
+
+            if (versions.contains(knownVersion)) {
+                return knownVersion;
+            }
+        }
+
+        return NO_PROTOCOL_AVAILABLE;
+    }
+
+    private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
+        return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
+    }
+}
diff --git a/facebook/src/com/facebook/internal/PlatformServiceClient.java b/facebook/src/com/facebook/internal/PlatformServiceClient.java
new file mode 100644
index 000000000..16d619c3b
--- /dev/null
+++ b/facebook/src/com/facebook/internal/PlatformServiceClient.java
@@ -0,0 +1,151 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.ServiceConnection;
+import android.os.*;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+abstract public class PlatformServiceClient implements ServiceConnection {
+    private final Context context;
+    private final Handler handler;
+    private CompletedListener listener;
+    private boolean running;
+    private Messenger sender;
+    private int requestMessage;
+    private int replyMessage;
+    private final String applicationId;
+    private final int protocolVersion;
+
+    public PlatformServiceClient(Context context, int requestMessage, int replyMessage, int protocolVersion,
+            String applicationId) {
+        Context applicationContext = context.getApplicationContext();
+
+        this.context = (applicationContext != null) ? applicationContext : context;
+        this.requestMessage = requestMessage;
+        this.replyMessage = replyMessage;
+        this.applicationId = applicationId;
+        this.protocolVersion = protocolVersion;
+
+        handler = new Handler() {
+            @Override
+            public void handleMessage(Message message) {
+                PlatformServiceClient.this.handleMessage(message);
+            }
+        };
+    }
+
+    public void setCompletedListener(CompletedListener listener) {
+        this.listener = listener;
+    }
+
+    protected Context getContext() {
+        return context;
+    }
+
+    public boolean start() {
+        if (running) {
+            return false;
+        }
+
+        // Make sure that the service can handle the requested protocol version
+        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersionForService(context, protocolVersion);
+        if (availableVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
+            return false;
+        }
+
+        Intent intent = NativeProtocol.createPlatformServiceIntent(context);
+        if (intent == null) {
+            return false;
+        } else {
+            running = true;
+            context.bindService(intent, this, Context.BIND_AUTO_CREATE);
+            return true;
+        }
+    }
+
+    public void cancel() {
+        running = false;
+    }
+
+    public void onServiceConnected(ComponentName name, IBinder service) {
+        sender = new Messenger(service);
+        sendMessage();
+    }
+
+    public void onServiceDisconnected(ComponentName name) {
+        sender = null;
+        context.unbindService(this);
+        callback(null);
+    }
+
+    private void sendMessage() {
+        Bundle data = new Bundle();
+        data.putString(NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+
+        populateRequestBundle(data);
+
+        Message request = Message.obtain(null, requestMessage);
+        request.arg1 = protocolVersion;
+        request.setData(data);
+        request.replyTo = new Messenger(handler);
+
+        try {
+            sender.send(request);
+        } catch (RemoteException e) {
+            callback(null);
+        }
+    }
+
+    protected abstract void populateRequestBundle(Bundle data);
+
+    protected void handleMessage(Message message) {
+        if (message.what == replyMessage) {
+            Bundle extras = message.getData();
+            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
+            if (errorType != null) {
+                callback(null);
+            } else {
+                callback(extras);
+            }
+            context.unbindService(this);
+        }
+    }
+
+    private void callback(Bundle result) {
+        if (!running) {
+            return;
+        }
+        running = false;
+
+        CompletedListener callback = listener;
+        if (callback != null) {
+            callback.completed(result);
+        }
+    }
+
+    public interface CompletedListener {
+        void completed(Bundle result);
+    }
+}
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index e2ab2c045..6f3dd7d49 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -16,6 +16,7 @@
 
 package com.facebook.internal;
 
+import com.facebook.Settings;
 import com.facebook.internal.Utility;
 
 import java.util.Collection;
@@ -26,8 +27,7 @@
  * any time.
  */
 public final class ServerProtocol {
-    static final String FACEBOOK_COM = "facebook.com";
-    public static final String DIALOG_AUTHORITY = "m." + FACEBOOK_COM;
+    private static final String DIALOG_AUTHORITY_FORMAT = "m.%s";
     public static final String DIALOG_PATH = "dialog/";
     public static final String DIALOG_PARAM_SCOPE = "scope";
     public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
@@ -36,15 +36,32 @@
     public static final String DIALOG_PARAM_TYPE = "type";
     public static final String DIALOG_PARAM_ACCESS_TOKEN = "access_token";
     public static final String DIALOG_PARAM_APP_ID = "app_id";
+    public static final String DIALOG_PARAM_E2E = "e2e";
 
     // URL components
-    public static final String GRAPH_URL = "https://graph." + FACEBOOK_COM;
-    public static final String GRAPH_URL_BASE = "https://graph." + FACEBOOK_COM + "/";
-    public static final String REST_URL_BASE = "https://api." + FACEBOOK_COM + "/method/";
+    private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
+    private static final String GRAPH_URL_FORMAT = "https://graph.%s";
+    private static final String REST_URL_FORMAT = "https://api.%s/method";
     public static final String BATCHED_REST_METHOD_URL_BASE = "method/";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
     public static final Collection<String> errorsUserCanceled =
             Utility.unmodifiableCollection("access_denied", "OAuthAccessDeniedException");
+
+    public static final String getDialogAuthority() {
+        return String.format(DIALOG_AUTHORITY_FORMAT, Settings.getFacebookDomain());
+    }
+
+    public static final String getGraphUrlBase() {
+        return String.format(GRAPH_URL_FORMAT, Settings.getFacebookDomain());
+    }
+
+    public static final String getGraphVideoUrlBase() {
+        return String.format(GRAPH_VIDEO_URL_FORMAT, Settings.getFacebookDomain());
+    }
+
+    public static final String getRestUrlBase() {
+        return String.format(REST_URL_FORMAT, Settings.getFacebookDomain());
+    }
 }
diff --git a/facebook/src/com/facebook/widget/UrlRedirectCache.java b/facebook/src/com/facebook/internal/UrlRedirectCache.java
similarity index 72%
rename from facebook/src/com/facebook/widget/UrlRedirectCache.java
rename to facebook/src/com/facebook/internal/UrlRedirectCache.java
index bd4598983..2123da8ff 100644
--- a/facebook/src/com/facebook/widget/UrlRedirectCache.java
+++ b/facebook/src/com/facebook/internal/UrlRedirectCache.java
@@ -14,18 +14,18 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.content.Context;
-import com.facebook.internal.FileLruCache;
-import com.facebook.internal.Utility;
+import android.util.Log;
+import com.facebook.LoggingBehavior;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
 
 class UrlRedirectCache {
     static final String TAG = UrlRedirectCache.class.getSimpleName();
@@ -40,19 +40,18 @@ synchronized static FileLruCache getCache(Context context) throws IOException{
         return urlRedirectCache;
     }
 
-    static URL getRedirectedUrl(Context context, URL url) {
-        if (url == null) {
+    static URI getRedirectedUri(Context context, URI uri) {
+        if (uri == null) {
             return null;
         }
 
-        String urlString = url.toString();
-        URL finalUrl = null;
+        String uriString = uri.toString();
         InputStreamReader reader = null;
         try {
             InputStream stream;
             FileLruCache cache = getCache(context);
             boolean redirectExists = false;
-            while ((stream = cache.get(urlString, REDIRECT_CONTENT_TAG)) != null) {
+            while ((stream = cache.get(uriString, REDIRECT_CONTENT_TAG)) != null) {
                 redirectExists = true;
 
                 // Get the redirected url
@@ -66,36 +65,44 @@ static URL getRedirectedUrl(Context context, URL url) {
                 Utility.closeQuietly(reader);
 
                 // Iterate to the next url in the redirection
-                urlString = urlBuilder.toString();
+                uriString = urlBuilder.toString();
             }
 
             if (redirectExists) {
-                finalUrl = new URL(urlString);
+                return new URI(uriString);
             }
-        } catch (MalformedURLException e) {
+        } catch (URISyntaxException e) {
             // caching is best effort, so ignore the exception
         } catch (IOException ioe) {
         } finally {
             Utility.closeQuietly(reader);
         }
 
-        return finalUrl;
+        return null;
     }
 
-    static void cacheUrlRedirect(Context context, URL fromUrl, URL toUrl) {
-        if (fromUrl == null || toUrl == null) {
+    static void cacheUriRedirect(Context context, URI fromUri, URI toUri) {
+        if (fromUri == null || toUri == null) {
             return;
         }
 
         OutputStream redirectStream = null;
         try {
             FileLruCache cache = getCache(context);
-            redirectStream = cache.openPutStream(fromUrl.toString(), REDIRECT_CONTENT_TAG);
-            redirectStream.write(toUrl.toString().getBytes());
+            redirectStream = cache.openPutStream(fromUri.toString(), REDIRECT_CONTENT_TAG);
+            redirectStream.write(toUri.toString().getBytes());
         } catch (IOException e) {
             // Caching is best effort
         } finally {
             Utility.closeQuietly(redirectStream);
         }
     }
+
+    static void clearCache(Context context) {
+        try {
+            getCache(context).clearCache();
+        } catch (IOException e) {
+            Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, "clearCache failed " + e.getMessage());
+        }
+    }
 }
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 04b853e15..28afbf84f 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -22,6 +22,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.provider.Settings.Secure;
 import android.text.TextUtils;
 import android.util.Log;
 import android.webkit.CookieManager;
@@ -40,6 +41,7 @@
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
@@ -49,16 +51,39 @@
 public final class Utility {
     static final String LOG_TAG = "FacebookSDK";
     private static final String HASH_ALGORITHM_MD5 = "MD5";
+    private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
     private static final String URL_SCHEME = "https";
     private static final String SUPPORTS_ATTRIBUTION = "supports_attribution";
+    private static final String SUPPORTS_IMPLICIT_SDK_LOGGING = "supports_implicit_sdk_logging";
+    private static final String [] APP_SETTING_FIELDS = new String[] {
+            SUPPORTS_ATTRIBUTION,
+            SUPPORTS_IMPLICIT_SDK_LOGGING
+    };
     private static final String APPLICATION_FIELDS = "fields";
 
     // This is the default used by the buffer streams, but they trace a warning if you do not specify.
     public static final int DEFAULT_STREAM_BUFFER_SIZE = 8192;
 
-    private static final Object LOCK = new Object();
-    private static volatile boolean attributionAllowedForLastAppChecked = false;
-    private static volatile String lastAppCheckedForAttributionStatus = "";
+    private static Map<String, FetchedAppSettings> fetchedAppSettings =
+            new ConcurrentHashMap<String, FetchedAppSettings>();
+
+    public static class FetchedAppSettings {
+        private boolean supportsAttribution;
+        private boolean supportsImplicitLogging;
+
+        private FetchedAppSettings(boolean supportsAttribution, boolean supportsImplicitLogging) {
+            this.supportsAttribution = supportsAttribution;
+            this.supportsImplicitLogging = supportsImplicitLogging;
+        }
+
+        public boolean supportsAttribution() {
+            return supportsAttribution;
+        }
+
+        public boolean supportsImplicitLogging() {
+            return supportsImplicitLogging;
+        }
+    }
 
     // Returns true iff all items in subset are in superset, treating null and
     // empty collections as
@@ -98,9 +123,17 @@ public static boolean isNullOrEmpty(String s) {
     }
 
     static String md5hash(String key) {
+        return hashWithAlgorithm(HASH_ALGORITHM_MD5, key);
+    }
+
+    private static String sha1hash(String key) {
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, key);
+    }
+
+    private static String hashWithAlgorithm(String algorithm, String key) {
         MessageDigest hash = null;
         try {
-            hash = MessageDigest.getInstance(HASH_ALGORITHM_MD5);
+            hash = MessageDigest.getInstance(algorithm);
         } catch (NoSuchAlgorithmException e) {
             return null;
         }
@@ -158,6 +191,8 @@ public static void disconnectQuietly(URLConnection connection) {
     }
 
     public static String getMetadataApplicationId(Context context) {
+        Validate.notNull(context, "context");
+
         try {
             ApplicationInfo ai = context.getPackageManager().getApplicationInfo(
                     context.getPackageName(), PackageManager.GET_META_DATA);
@@ -300,36 +335,98 @@ public static void logd(String tag, String msg) {
         }
     }
 
-    public static boolean queryAppAttributionSupportAndWait(final String applicationId) {
+    public static <T> boolean areObjectsEqual(T a, T b) {
+        if (a == null) {
+            return b == null;
+        }
+        return a.equals(b);
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the main thread.
+    public static FetchedAppSettings queryAppSettings(final String applicationId, final boolean forceRequery) {
 
-        synchronized (LOCK) {
+        // Cache the last app checked results.
+        if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
+            return fetchedAppSettings.get(applicationId);
+        }
 
-            // Cache the last app checked results.
-            if (applicationId.equals(lastAppCheckedForAttributionStatus)) {
-                return attributionAllowedForLastAppChecked;
-            }
+        Bundle appSettingsParams = new Bundle();
+        appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
+
+        Request request = Request.newGraphPathRequest(null, applicationId, null);
+        request.setParameters(appSettingsParams);
+
+        GraphObject supportResponse = request.executeAndWait().getGraphObject();
+        FetchedAppSettings result = new FetchedAppSettings(
+                safeGetBooleanFromResponse(supportResponse, SUPPORTS_ATTRIBUTION),
+                safeGetBooleanFromResponse(supportResponse, SUPPORTS_IMPLICIT_SDK_LOGGING));
 
-            Bundle supportsAttributionParams = new Bundle();
-            supportsAttributionParams.putString(APPLICATION_FIELDS, SUPPORTS_ATTRIBUTION);
-            Request pingRequest = Request.newGraphPathRequest(null, applicationId, null);
-            pingRequest.setParameters(supportsAttributionParams);
+        fetchedAppSettings.put(applicationId, result);
 
-            GraphObject supportResponse = pingRequest.executeAndWait().getGraphObject();
+        return result;
+    }
+
+    private static boolean safeGetBooleanFromResponse(GraphObject response, String propertyName) {
+        Object result = false;
+        if (response != null) {
+            result = response.getProperty(propertyName);
+        }
+        if (!(result instanceof Boolean)) {
+            result = false;
+        }
+        return (Boolean) result;
+    }
+
+    public static void clearCaches(Context context) {
+        ImageDownloader.clearCache(context);
+    }
+
+    public static void deleteDirectory(File directoryOrFile) {
+        if (!directoryOrFile.exists()) {
+            return;
+        }
 
-            Object doesSupportAttribution = false;
-            if (supportResponse != null) {
-                doesSupportAttribution = supportResponse.getProperty(SUPPORTS_ATTRIBUTION);
+        if (directoryOrFile.isDirectory()) {
+            for (File child : directoryOrFile.listFiles()) {
+                deleteDirectory(child);
             }
+        }
+        directoryOrFile.delete();
+    }
 
-            if (!(doesSupportAttribution instanceof Boolean)) {
-                // Should never happen, but be safe in case server returns non-Boolean
-                doesSupportAttribution = false;
+    public static <T> List<T> asListNoNulls(T... array) {
+        ArrayList<T> result = new ArrayList<T>();
+        for (T t : array) {
+            if (t != null) {
+                result.add(t);
             }
+        }
+        return result;
+    }
+
+    // Return a hash of the android_id combined with the appid.  Intended to dedupe requests on the server side
+    // in order to do counting of users unknown to Facebook.  Because we put the appid into the key prior to hashing,
+    // we cannot do correlation of the same user across multiple apps -- this is intentional.  When we transition to
+    // the Google advertising ID, we'll get rid of this and always send that up.
+    public static String getHashedDeviceAndAppID(Context context, String applicationId) {
+        String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);
 
-            lastAppCheckedForAttributionStatus = applicationId;
-            attributionAllowedForLastAppChecked = ((Boolean)doesSupportAttribution == true);
-            return attributionAllowedForLastAppChecked;
+        if (androidId == null) {
+            return null;
+        } else {
+            return sha1hash(androidId + applicationId);
         }
     }
 
+    public static void setAppEventAttributionParameters(GraphObject params,
+            String attributionId, String hashedDeviceAndAppId, boolean limitEventUsage) {
+        // Send attributionID if it exists, otherwise send a hashed device+appid specific value as the advertiser_id.
+        if (attributionId != null) {
+            params.setProperty("attribution", attributionId);
+        } else if (hashedDeviceAndAppId != null) {
+            params.setProperty("advertiser_id", hashedDeviceAndAppId);
+        }
+
+        params.setProperty("application_tracking_enabled", !limitEventUsage);
+    }
 }
diff --git a/facebook/src/com/facebook/internal/Validate.java b/facebook/src/com/facebook/internal/Validate.java
index 57bed08a6..5f74ac97c 100644
--- a/facebook/src/com/facebook/internal/Validate.java
+++ b/facebook/src/com/facebook/internal/Validate.java
@@ -45,6 +45,18 @@ public static void notNull(Object arg, String name) {
         }
     }
 
+    public static void containsNoNullOrEmpty(Collection<String> container, String name) {
+        Validate.notNull(container, name);
+        for (String item : container) {
+            if (item == null) {
+                throw new NullPointerException("Container '" + name + "' cannot contain null values");
+            }
+            if (item.length() == 0) {
+                throw new IllegalArgumentException("Container '" + name + "' cannot contain empty values");
+            }
+        }
+    }
+
     public static <T> void notEmptyAndContainsNoNulls(Collection<T> container, String name) {
         Validate.containsNoNulls(container, name);
         Validate.notEmpty(container, name);
diff --git a/facebook/src/com/facebook/widget/WorkQueue.java b/facebook/src/com/facebook/internal/WorkQueue.java
similarity index 99%
rename from facebook/src/com/facebook/widget/WorkQueue.java
rename to facebook/src/com/facebook/internal/WorkQueue.java
index d5e8a4640..f90f6acd7 100644
--- a/facebook/src/com/facebook/widget/WorkQueue.java
+++ b/facebook/src/com/facebook/internal/WorkQueue.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import com.facebook.Settings;
 
diff --git a/facebook/src/com/facebook/model/CreateGraphObject.java b/facebook/src/com/facebook/model/CreateGraphObject.java
new file mode 100644
index 000000000..92e7a2af5
--- /dev/null
+++ b/facebook/src/com/facebook/model/CreateGraphObject.java
@@ -0,0 +1,38 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.model;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+/**
+ * Use this annotation setters in an interface that derives from
+ * GraphObject, if you wish to provide a setter that takes a primitive data type (e.g., String)
+ * or a List of primitive data types, but actually populates its underlying property with a
+ * new GraphObject with a property equal to the specified value (or a List of such GraphObjects).
+ * This is useful for providing "helper" setters to avoid requiring callers to instantiate a GraphObject
+ * just to set a single property on it (e.g., 'url' or 'id').
+ *
+ * The String value provided to this annotation should be the name of the property that will be
+ * populated on the newly-created GraphObject using the value that was passed to the setter.
+ *
+ * This annotation has no effect if applied to a getter.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+public @interface CreateGraphObject {
+    String value();
+}
diff --git a/facebook/src/com/facebook/model/GraphObject.java b/facebook/src/com/facebook/model/GraphObject.java
index 7231ea547..c6684e698 100644
--- a/facebook/src/com/facebook/model/GraphObject.java
+++ b/facebook/src/com/facebook/model/GraphObject.java
@@ -46,40 +46,60 @@
      * @param graphObjectClass the type of GraphObject to return
      * @return a new instance of the GraphObject-derived-type that references the same underlying data
      */
-    public <T extends GraphObject> T cast(Class<T> graphObjectClass);
+    <T extends GraphObject> T cast(Class<T> graphObjectClass);
 
     /**
      * Returns a Java Collections map of names and properties.  Modifying the returned map modifies the
      * inner JSON representation.
      * @return a Java Collections map representing the GraphObject state
      */
-    public Map<String, Object> asMap();
+    Map<String, Object> asMap();
 
     /**
      * Gets the underlying JSONObject representation of this graph object.
      * @return the underlying JSONObject representation of this graph object
      */
-    public JSONObject getInnerJSONObject();
+    JSONObject getInnerJSONObject();
 
     /**
      * Gets a property of the GraphObject
      * @param propertyName the name of the property to get
      * @return the value of the named property
      */
-    public Object getProperty(String propertyName);
+    Object getProperty(String propertyName);
+
+    /**
+     * Gets a property of the GraphObject, cast to a particular GraphObject-derived interface. This gives some of
+     * the benefits of having a property getter defined to return a GraphObject-derived type without requiring
+     * explicit definition of an interface to define the getter.
+     * @param propertyName the name of the property to get
+     * @param graphObjectClass the GraphObject-derived interface to cast the property to
+     * @return
+     */
+    <T extends GraphObject> T getPropertyAs(String propertyName, Class<T> graphObjectClass);
+
+    /**
+     * Gets a property of the GraphObject, cast to a a list of instances of a particular GraphObject-derived interface.
+     * This gives some of the benefits of having a property getter defined to return a GraphObject-derived type without
+     * requiring explicit definition of an interface to define the getter.
+     * @param propertyName the name of the property to get
+     * @param graphObjectClass the GraphObject-derived interface to cast the property to a list of
+     * @return
+     */
+    <T extends GraphObject> GraphObjectList<T> getPropertyAsList(String propertyName, Class<T> graphObjectClass);
 
     /**
      * Sets a property of the GraphObject
      * @param propertyName the name of the property to set
      * @param propertyValue the value of the named property to set
      */
-    public void setProperty(String propertyName, Object propertyValue);
+    void setProperty(String propertyName, Object propertyValue);
 
     /**
      * Removes a property of the GraphObject
      * @param propertyName the name of the property to remove
      */
-    public void removeProperty(String propertyName);
+    void removeProperty(String propertyName);
 
     /**
      * Creates proxies that implement GraphObject, GraphObjectList, and their derived types. These proxies allow access
@@ -195,7 +215,7 @@ public static boolean hasSameId(GraphObject a, GraphObject b) {
         private static <T extends GraphObject> T createGraphObjectProxy(Class<T> graphObjectClass, JSONObject state) {
             verifyCanProxyClass(graphObjectClass);
 
-            Class<?>[] interfaces = new Class[] { graphObjectClass };
+            Class<?>[] interfaces = new Class<?>[] { graphObjectClass };
             GraphObjectProxy graphObjectProxy = new GraphObjectProxy(state, graphObjectClass);
 
             @SuppressWarnings("unchecked")
@@ -205,7 +225,7 @@ public static boolean hasSameId(GraphObject a, GraphObject b) {
         }
 
         private static Map<String, Object> createGraphObjectProxyForMap(JSONObject state) {
-            Class<?>[] interfaces = new Class[]{Map.class};
+            Class<?>[] interfaces = new Class<?>[]{Map.class};
             GraphObjectProxy graphObjectProxy = new GraphObjectProxy(state, Map.class);
 
             @SuppressWarnings("unchecked")
@@ -278,7 +298,21 @@ public static boolean hasSameId(GraphObject a, GraphObject b) {
         static <U> U coerceValueToExpectedType(Object value, Class<U> expectedType,
                 ParameterizedType expectedTypeAsParameterizedType) {
             if (value == null) {
-                return null;
+                if (boolean.class.equals(expectedType)) {
+                    @SuppressWarnings("unchecked")
+                    U result = (U) (Boolean) false;
+                    return result;
+                } else if (char.class.equals(expectedType)) {
+                    @SuppressWarnings("unchecked")
+                    U result = (U) (Character) '\0';
+                    return result;
+                } else if (expectedType.isPrimitive()) {
+                    @SuppressWarnings("unchecked")
+                    U result = (U) (Number) 0;
+                    return result;
+                } else {
+                    return null;
+                }
             }
 
             Class<?> valueType = value.getClass();
@@ -373,6 +407,10 @@ static String convertCamelCaseToLowercaseWithUnderscores(String string) {
         }
 
         private static Object getUnderlyingJSONObject(Object obj) {
+            if (obj == null) {
+                return null;
+            }
+
             Class<?> objClass = obj.getClass();
             if (GraphObject.class.isAssignableFrom(objClass)) {
                 GraphObject graphObject = (GraphObject) obj;
@@ -380,6 +418,17 @@ private static Object getUnderlyingJSONObject(Object obj) {
             } else if (GraphObjectList.class.isAssignableFrom(objClass)) {
                 GraphObjectList<?> graphObjectList = (GraphObjectList<?>) obj;
                 return graphObjectList.getInnerJSONArray();
+            } else if (Iterable.class.isAssignableFrom(objClass)) {
+                JSONArray jsonArray = new JSONArray();
+                Iterable<?> iterable = (Iterable<?>) obj;
+                for (Object o : iterable ) {
+                    if (GraphObject.class.isAssignableFrom(o.getClass())) {
+                        jsonArray.put(((GraphObject)o).getInnerJSONObject());
+                    } else {
+                        jsonArray.put(o);
+                    }
+                }
+                return jsonArray;
             }
             return obj;
         }
@@ -442,6 +491,8 @@ protected final Object proxyObjectMethods(Object proxy, Method method, Object[]
             private static final String CAST_METHOD = "cast";
             private static final String CASTTOMAP_METHOD = "asMap";
             private static final String GETPROPERTY_METHOD = "getProperty";
+            private static final String GETPROPERTYAS_METHOD = "getPropertyAs";
+            private static final String GETPROPERTYASLIST_METHOD = "getPropertyAsList";
             private static final String SETPROPERTY_METHOD = "setProperty";
             private static final String REMOVEPROPERTY_METHOD = "removeProperty";
             private static final String GETINNERJSONOBJECT_METHOD = "getInnerJSONObject";
@@ -502,6 +553,8 @@ private final Object proxyMapMethods(Method method, Object[] args) {
                         map = castMap;
                     } else if (args[0] instanceof GraphObject) {
                         map = ((GraphObject) args[0]).asMap();
+                    } else {
+                        return null;
                     }
                     JsonUtil.jsonObjectPutAll(this.state, map);
                     return null;
@@ -536,6 +589,32 @@ private final Object proxyGraphObjectMethods(Object proxy, Method method, Object
                     return Factory.createGraphObjectProxyForMap(this.state);
                 } else if (methodName.equals(GETPROPERTY_METHOD)) {
                     return state.opt((String) args[0]);
+                } else if (methodName.equals(GETPROPERTYAS_METHOD)) {
+                    Object value = state.opt((String) args[0]);
+                    Class<?> expectedType = (Class<?>) args[1];
+
+                    return coerceValueToExpectedType(value, expectedType, null);
+                } else if (methodName.equals(GETPROPERTYASLIST_METHOD)) {
+                    Object value = state.opt((String) args[0]);
+                    final Class<?> expectedType = (Class<?>) args[1];
+
+                    ParameterizedType parameterizedType = new ParameterizedType() {
+                        @Override
+                        public Type[] getActualTypeArguments() {
+                            return new Type[]{ expectedType };
+                        }
+
+                        @Override
+                        public Type getOwnerType() {
+                            return null;
+                        }
+
+                        @Override
+                        public Type getRawType() {
+                            return GraphObjectList.class;
+                        }
+                    };
+                    return coerceValueToExpectedType(value, GraphObjectList.class, parameterizedType);
                 } else if (methodName.equals(SETPROPERTY_METHOD)) {
                     return setJSONProperty(args);
                 } else if (methodName.equals(REMOVEPROPERTY_METHOD)) {
@@ -546,6 +625,32 @@ private final Object proxyGraphObjectMethods(Object proxy, Method method, Object
                 return throwUnexpectedMethodSignature(method);
             }
 
+            private Object createGraphObjectsFromParameters(CreateGraphObject createGraphObject, Object value) {
+                if (createGraphObject != null &&
+                        !Utility.isNullOrEmpty(createGraphObject.value())) {
+                    String propertyName = createGraphObject.value();
+                    if (List.class.isAssignableFrom(value.getClass())) {
+                        GraphObjectList<GraphObject> graphObjects = GraphObject.Factory.createList(GraphObject.class);
+                        @SuppressWarnings("unchecked")
+                        List<Object> values = (List<Object>)value;
+                        for (Object obj : values) {
+                            GraphObject graphObject = GraphObject.Factory.create();
+                            graphObject.setProperty(propertyName, obj);
+                            graphObjects.add(graphObject);
+                        }
+
+                        value = graphObjects;
+                    } else {
+                        GraphObject graphObject = GraphObject.Factory.create();
+                        graphObject.setProperty(propertyName, value);
+
+                        value = graphObject;
+                    }
+                }
+
+                return value;
+            }
+
             private final Object proxyGraphObjectGettersAndSetters(Method method, Object[] args) throws JSONException {
                 String methodName = method.getName();
                 int parameterCount = method.getParameterTypes().length;
@@ -572,25 +677,12 @@ private final Object proxyGraphObjectGettersAndSetters(Method method, Object[] a
                     return value;
                 } else if (parameterCount == 1) {
                     // Has to be a setter. ASSUMPTION: The GraphObject-derived class has been verified
-                    Object value = args[0];
+                    CreateGraphObject createGraphObjectAnnotation = method.getAnnotation(CreateGraphObject.class);
+                    Object value = createGraphObjectsFromParameters(createGraphObjectAnnotation, args[0]);
+
                     // If this is a wrapped object, store the underlying JSONObject instead, in order to serialize
                     // correctly.
-                    if (GraphObject.class.isAssignableFrom(value.getClass())) {
-                        value = ((GraphObject) value).getInnerJSONObject();
-                    } else if (GraphObjectList.class.isAssignableFrom(value.getClass())) {
-                        value = ((GraphObjectList<?>) value).getInnerJSONArray();
-                    } else if (Iterable.class.isAssignableFrom(value.getClass())) {
-                        JSONArray jsonArray = new JSONArray();
-                        Iterable<?> iterable = (Iterable<?>) value;
-                        for (Object o : iterable ) {
-                            if (GraphObject.class.isAssignableFrom(o.getClass())) {
-                                jsonArray.put(((GraphObject)o).getInnerJSONObject());
-                            } else {
-                                jsonArray.put(o);
-                            }
-                        }
-                        value = jsonArray;
-                    }
+                    value = getUnderlyingJSONObject(value);
                     this.state.putOpt(key, value);
                     return null;
                 }
@@ -656,9 +748,11 @@ public int hashCode() {
 
             @Override
             public boolean equals(Object obj) {
-                if (this == obj)
+                if (obj == null) {
+                    return false;
+                } else if (this == obj) {
                     return true;
-                if (getClass() != obj.getClass()) {
+                } else if (getClass() != obj.getClass()) {
                     return false;
                 }
                 @SuppressWarnings("unchecked")
diff --git a/facebook/src/com/facebook/model/OpenGraphAction.java b/facebook/src/com/facebook/model/OpenGraphAction.java
index 5b40e5780..d82d34a80 100644
--- a/facebook/src/com/facebook/model/OpenGraphAction.java
+++ b/facebook/src/com/facebook/model/OpenGraphAction.java
@@ -25,7 +25,7 @@
  * Provides a strongly-typed representation of an Open Graph Action.
  * For more documentation of OG Actions, see: https://developers.facebook.com/docs/opengraph/actions/
  *
- * Note that this interface is intended to be used with GraphObject.Factory
+ * Note that this interface is intended to be used with GraphObject.Factory or OpenGraphAction.Factory
  * and not implemented directly.
  */
 public interface OpenGraphAction extends GraphObject {
@@ -33,49 +33,61 @@
      * Gets the ID of the action.
      * @return the ID
      */
-    public String getId();
+    String getId();
 
     /**
      * Sets the ID of the action.
      * @param id the ID
      */
-    public void setId(String id);
+    void setId(String id);
+
+    /**
+     * Gets the type of the action, which is a string in the form "mynamespace:mytype".
+     * @return the type
+     */
+    String getType();
+
+    /**
+     * Sets the type of the action, which is a string in the form "mynamespace:mytype".
+     * @param type the type
+     */
+    void setType(String type);
 
     /**
      * Gets the start time of the action.
      * @return the start time
      */
-    public Date getStartTime();
+    Date getStartTime();
 
     /**
      * Sets the start time of the action.
      * @param startTime the start time
      */
-    public void setStartTime(Date startTime);
+    void setStartTime(Date startTime);
 
     /**
      * Gets the end time of the action.
      * @return the end time
      */
-    public Date getEndTime();
+    Date getEndTime();
 
     /**
      * Sets the end time of the action.
      * @param endTime the end time
      */
-    public void setEndTime(Date endTime);
+    void setEndTime(Date endTime);
 
     /**
      * Gets the time the action was published, if any.
      * @return the publish time
      */
-    public Date getPublishTime();
+    Date getPublishTime();
 
     /**
      * Sets the time the action was published.
      * @param publishTime the publish time
      */
-    public void setPublishTime(Date publishTime);
+    void setPublishTime(Date publishTime);
 
     /**
      * Gets the time the action was created.
@@ -106,74 +118,83 @@
      * when a user clicks through this action on Facebook.
      * @return the ref string
      */
-    public String getRef();
+    String getRef();
 
     /**
      * Sets the unique string which will be passed to the OG Action owner's website
      * when a user clicks through this action on Facebook.
      * @param ref the ref string
      */
-    public void setRef(String ref);
+    void setRef(String ref);
 
     /**
      * Gets the message assoicated with the action.
      * @return the message
      */
-    public String getMessage();
+    String getMessage();
 
     /**
      * Sets the message associated with the action.
      * @param message the message
      */
-    public void setMessage(String message);
+    void setMessage(String message);
 
     /**
      * Gets the place where the action took place.
      * @return the place
      */
-    public GraphPlace getPlace();
+    GraphPlace getPlace();
 
     /**
      * Sets the place where the action took place.
      * @param place the place
      */
-    public void setPlace(GraphPlace place);
+    void setPlace(GraphPlace place);
 
     /**
      * Gets the list of profiles that were tagged in the action.
      * @return the profiles that were tagged in the action
      */
-    public List<GraphObject> getTags();
+    GraphObjectList<GraphObject> getTags();
 
     /**
      * Sets the list of profiles that were tagged in the action.
      * @param tags the profiles that were tagged in the action
      */
-    public void setTags(List<? extends GraphObject> tags);
+    void setTags(List<? extends GraphObject> tags);
 
     /**
      * Gets the images that were associated with the action.
      * @return the images
      */
-    public List<JSONObject> getImage();
+    List<JSONObject> getImage();
 
     /**
      * Sets the images that were associated with the action.
      * @param image the images
      */
-    public void setImage(List<JSONObject> image);
+    void setImage(List<JSONObject> image);
+
+    /**
+     * Sets the images associated with the Open Graph action by specifying their URLs. This is a helper
+     * that will create GraphObjects with the correct URLs and populate the property with those objects.
+     * @param urls the URLs
+     */
+    @CreateGraphObject("url")
+    @PropertyName("image")
+    void setImageUrls(List<String> urls);
 
     /**
      * Gets the from-user associated with the action.
      * @return the user
      */
-    public GraphUser getFrom();
+    GraphUser getFrom();
 
     /**
      * Sets the from-user associated with the action.
      * @param from the from-user
      */
-    public void setFrom(GraphUser from);
+    void setFrom(GraphUser from);
 
     /**
      * Gets the 'likes' that have been performed on this action.
@@ -191,13 +212,13 @@
      * Gets the application that created this action.
      * @return the application
      */
-    public GraphObject getApplication();
+    GraphObject getApplication();
 
     /**
      * Sets the application that created this action.
      * @param application the application
      */
-    public void setApplication(GraphObject application);
+    void setApplication(GraphObject application);
 
     /**
      * Gets the comments that have been made on this action.
@@ -209,5 +230,77 @@
      * Sets the comments that have been made on this action.
      * @param comments the comments
      */
-    public void setComments(JSONObject comments);
+    void setComments(JSONObject comments);
+
+    /**
+     * Gets the type-specific data for this action; for instance, any properties
+     * referencing Open Graph objects will appear under here.
+     * @return a GraphObject representing the type-specific data
+     */
+    GraphObject getData();
+
+    /**
+     * Sets the type-specific data for this action.
+     * @param data a GraphObject representing the type-specific data
+     */
+    void setData(GraphObject data);
+
+
+    /**
+     * Gets whether the action has been explicitly shared by the user. See
+     * <a href="https://developers.facebook.com/docs/opengraph/guides/explicit-sharing/">Explicit Sharing</a> for
+     * more information.
+     * @return true if this action was explicitly shared
+     */
+    @PropertyName("fb:explicitly_shared")
+    boolean getExplicitlyShared();
+
+    /**
+     * Sets whether the action has been explicitly shared by the user. See
+     * <a href="https://developers.facebook.com/docs/opengraph/guides/explicit-sharing/">Explicit Sharing</a> for
+     * more information. You should only specify this property if explicit sharing has been enabled for an
+     * Open Graph action type.
+     * @param explicitlyShared true if this action was explicitly shared
+     */
+    @PropertyName("fb:explicitly_shared")
+    void setExplicitlyShared(boolean explicitlyShared);
+
+    /**
+     * Exposes helpers for creating instances of OpenGraphAction.
+     */
+    final class Factory {
+        /**
+         * Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.
+         * @return an OpenGraphAction
+         */
+        @Deprecated
+        public static OpenGraphAction createForPost() {
+            return createForPost(OpenGraphAction.class, null);
+        }
+
+        /**
+         * Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.
+         * @param type the Open Graph action type for the action, or null if it will be specified later
+         * @return an OpenGraphAction
+         */
+        public static OpenGraphAction createForPost(String type) {
+            return createForPost(OpenGraphAction.class, type);
+        }
+
+        /**
+         * Creates an OpenGraphAction suitable for posting via, e.g., a native Share dialog.
+         * @param type the Open Graph action type for the action, or null if it will be specified later
+         * @param graphObjectClass the OpenGraphAction-derived type to return
+         * @return an OpenGraphAction
+         */
+        public static <T extends OpenGraphAction> T createForPost(Class<T> graphObjectClass, String type) {
+            T object = GraphObject.Factory.create(graphObjectClass);
+
+            if (type != null) {
+                object.setType(type);
+            }
+
+            return object;
+        }
+    }
 }
diff --git a/facebook/src/com/facebook/model/OpenGraphObject.java b/facebook/src/com/facebook/model/OpenGraphObject.java
new file mode 100644
index 000000000..285de4198
--- /dev/null
+++ b/facebook/src/com/facebook/model/OpenGraphObject.java
@@ -0,0 +1,318 @@
+package com.facebook.model;
+
+import com.facebook.internal.NativeProtocol;
+
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Provides a strongly-typed representation of an Open Graph Object.
+ * For more documentation of OG Objects, see: https://developers.facebook.com/docs/opengraph/using-object-api/
+ *
+ * Note that this interface is intended to be used with GraphObject.Factory or OpenGraphObject.Factory
+ * and not implemented directly.
+ */
+public interface OpenGraphObject extends GraphObject {
+    /**
+     * Gets the ID of the object.
+     * @return the ID
+     */
+    String getId();
+
+    /**
+     * Sets the ID of the object.
+     * @param id the ID
+     */
+    void setId(String id);
+
+    /**
+     * Gets the type of the object, which is a string in the form "mynamespace:mytype".
+     * @return the type
+     */
+    String getType();
+
+    /**
+     * Sets the type of the object, which is a string in the form "mynamespace:mytype".
+     * @param type the type
+     */
+    void setType(String type);
+
+    /**
+     * Gets the URL associated with the Open Graph object.
+     * @return the URL
+     */
+    String getUrl();
+
+    /**
+     * Sets the URL associated with the Open Graph object.
+     * @param url the URL
+     */
+    void setUrl(String url);
+
+    /**
+     * Gets the title of the Open Graph object.
+     * @return the title
+     */
+    String getTitle();
+
+    /**
+     * Sets the title of the Open Graph object.
+     * @param title the title
+     */
+    void setTitle(String title);
+
+
+    /**
+     * Gets the description of the Open Graph object.
+     * @return the description
+     */
+    String getDescription();
+
+    /**
+     * Sets the description of the Open Graph Object
+     * @param description the description
+     */
+    void setDescription(String description);
+
+    /**
+     * Gets the images associated with the Open Graph object.
+     * @return the images
+     */
+    GraphObjectList<GraphObject> getImage();
+
+    /**
+     * Sets the images associated with the Open Graph object.
+     * @param images the images
+     */
+    void setImage(GraphObjectList<GraphObject> images);
+
+    /**
+     * Sets the images associated with the Open Graph object by specifying their URLs. This is a helper
+     * that will create GraphObjects with the correct URLs and populate the property with those objects.
+     * @param urls the URLs
+     */
+    @CreateGraphObject("url")
+    @PropertyName("image")
+    void setImageUrls(List<String> urls);
+
+    /**
+     * Gets the videos associated with the Open Graph object.
+     * @return the videos
+     */
+    GraphObjectList<GraphObject> getVideo();
+
+    /**
+     * Sets the videos associated with the Open Graph object.
+     * @param videos the videos
+     */
+    void setVideo(GraphObjectList<GraphObject> videos);
+
+    /**
+     * Gets the audio associated with the Open Graph object.
+     * @return the audio
+     */
+    GraphObjectList<GraphObject> getAudio();
+
+    /**
+     * Sets the audio associated with the Open Graph object.
+     * @param audios the audio
+     */
+    void setAudio(GraphObjectList<GraphObject> audios);
+
+    /**
+     * Gets the "determiner" for the Open Graph object. This is the word such as "a", "an", or "the" that will
+     * appear before the title of the object.
+     * @return the determiner string
+     */
+    String getDeterminer();
+
+    /**
+     * Sets the "determiner" for the Open Graph object. This is the word such as "a", "an", or "the" that will
+     * appear before the title of the object.
+     * @param determiner the determiner string
+     */
+    void setDeterminer(String determiner);
+
+    /**
+     * Gets the list of related resources for the Open Graph object.
+     * @return a list of URLs of related resources
+     */
+    List<String> getSeeAlso();
+
+    /**
+     * Sets the list of related resources for the Open Graph object.
+     * @param seeAlso a list of URLs of related resources
+     */
+    void setSeeAlso(List<String> seeAlso);
+
+    /**
+     * Gets the name of the site hosting the Open Graph object, if any.
+     * @return the name of the site
+     */
+    String getSiteName();
+
+    /**
+     * Sets the name of the site hosting the Open Graph object.
+     * @param siteName the name of the site
+     */
+    void setSiteName(String siteName);
+
+    /**
+     * Gets the date and time the Open Graph object was created.
+     * @return the creation time
+     */
+    Date getCreatedTime();
+
+    /**
+     * Sets the date and time the Open Graph object was created.
+     * @param createdTime the creation time
+     */
+    void setCreatedTime(Date createdTime);
+
+    /**
+     * Gets the date and time the Open Graph object was last updated.
+     * @return the update time
+     */
+    Date getUpdatedTime();
+
+    /**
+     * Sets the date and time the Open Graph object was last updated.
+     * @param updatedTime the update time
+     */
+    void setUpdatedTime(Date updatedTime);
+
+    /**
+     * Gets the application that created this object.
+     * @return the application
+     */
+    GraphObject getApplication();
+
+    /**
+     * Sets the application that created this object.
+     * @param application the application
+     */
+    void setApplication(GraphObject application);
+
+    /**
+     * Gets whether the Open Graph object was created by scraping a Web resource or not.
+     * @return true if the Open Graph object was created by scraping the Web, false if not
+     */
+    boolean getIsScraped();
+
+    /**
+     * Sets whether the Open Graph object was created by scraping a Web resource or not.
+     * @param isScraped true if the Open Graph object was created by scraping the Web, false if not
+     */
+    void setIsScraped(boolean isScraped);
+
+    /**
+     * Gets the Open Graph action which was created when this Open Graph action was posted, if it is a user-owned
+     * object, otherwise null. The post action controls the privacy of this object.
+     * @return the ID of the post action, if any, or null
+     */
+    String getPostActionId();
+
+    /**
+     * Sets the Open Graph action which was created when this Open Graph action was posted, if it is a user-owned
+     * object, otherwise null. The post action controls the privacy of this object.
+     * @param postActionId the ID of the post action, if any, or null
+     */
+    void setPostActionId(String postActionId);
+
+    /**
+     * Gets the type-specific properties of the Open Graph object, if any. Any custom properties that are defined on an
+     * application-defined Open Graph object type will appear here.
+     * @return a GraphObject containing the type-specific properties
+     */
+    GraphObject getData();
+
+    /**
+     * Sets the type-specific properties of the Open Graph object, if any. Any custom properties that are defined on an
+     * application-defined Open Graph object type will appear here.
+     * @param data a GraphObject containing the type-specific properties
+     */
+    void setData(GraphObject data);
+
+    /**
+     * Gets whether the object represents a new object that should be created as part of publishing via, e.g., the
+     * native Share dialog. This flag has no effect on explicit publishing of an action via, e.g., a POST to the
+     * '/me/objects/object_type' endpoint.
+     * @return true if the native Share dialog should create the object as part of publishing an action, false if not
+     */
+    @PropertyName(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)
+    boolean getCreateObject();
+
+    /**
+     * Sets whether the object represents a new object that should be created as part of publishing via, e.g., the
+     * native Share dialog. This flag has no effect on explicit publishing of an action via, e.g., a POST to the
+     * '/me/objects/object_type' endpoint.
+     * @param createObject true if the native Share dialog should create the object as part of publishing an action,
+     *                     false if not
+     */
+    @PropertyName(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)
+    void setCreateObject(boolean createObject);
+
+    /**
+     * Exposes helpers for creating instances of OpenGraphObject.
+     */
+    final class Factory {
+        /**
+         * Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have
+         * no properties other than a 'create_object' and 'data' property, ready to be populated.
+         * @param type the Open Graph object type for the object, or null if it will be specified later
+         * @return an OpenGraphObject
+         */
+        public static OpenGraphObject createForPost(String type) {
+            return createForPost(OpenGraphObject.class, type);
+        }
+
+        /**
+         * Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have
+         * no properties other than a 'create_object' and 'data' property, ready to be populated.
+         * @param graphObjectClass the OpenGraphObject-derived type to return
+         * @param type the Open Graph object type for the object, or null if it will be specified later
+         * @return an OpenGraphObject
+         */
+        public static <T extends OpenGraphObject> T createForPost(Class<T> graphObjectClass, String type) {
+            return createForPost(graphObjectClass, type, null, null, null, null);
+        }
+
+        /**
+         * Creates an OpenGraphObject suitable for posting via, e.g., a native Share dialog. The object will have
+         * the specified properties, plus a 'create_object' and 'data' property, ready to be populated.
+         * @param graphObjectClass the OpenGraphObject-derived type to return
+         * @param type the Open Graph object type for the object, or null if it will be specified later
+         * @param title the title of the object, or null if it will be specified later
+         * @param imageUrl the URL of an image associated with the object, or null
+         * @param url the URL associated with the object, or null
+         * @param description the description of the object, or null
+         * @return an OpenGraphObject
+         */
+        public static <T extends OpenGraphObject> T createForPost(Class<T> graphObjectClass, String type, String title,
+                String imageUrl, String url, String description) {
+            T object = GraphObject.Factory.create(graphObjectClass);
+
+            if (type != null) {
+                object.setType(type);
+            }
+            if (title != null) {
+                object.setTitle(title);
+            }
+            if (imageUrl != null) {
+                object.setImageUrls(Arrays.asList(imageUrl));
+            }
+            if (url != null) {
+                object.setUrl(url);
+            }
+            if (description != null) {
+                object.setDescription(description);
+            }
+
+            object.setCreateObject(true);
+            object.setData(GraphObject.Factory.create());
+
+            return object;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
new file mode 100644
index 000000000..77457b457
--- /dev/null
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -0,0 +1,1276 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.widget;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.v4.app.Fragment;
+import com.facebook.*;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+import com.facebook.model.*;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.File;
+import java.util.*;
+
+/*
+ * Provides an interface for presenting dialogs provided by the Facebook application for Android. This class
+ * provides builders that present a strongly-typed interface to generate properly-formed Intents for launching
+ * the appropriate Activities provided by the Facebook application.
+ */
+public class FacebookDialog {
+
+    public static final String COMPLETION_GESTURE_CANCEL = "cancel";
+
+    private static final String EXTRA_DIALOG_COMPLETE_KEY = "com.facebook.platform.extra.DID_COMPLETE";
+    private static final String EXTRA_DIALOG_COMPLETION_GESTURE_KEY =
+            "com.facebook.platform.extra.COMPLETION_GESTURE";
+    private static final String EXTRA_DIALOG_COMPLETION_ID_KEY = "com.facebook.platform.extra.POST_ID";
+
+    private static NativeAppCallAttachmentStore attachmentStore;
+
+    /**
+     * Defines a callback interface that will be called when the user completes interacting with a Facebook
+     * dialog, or if an error occurs.
+     */
+    public interface Callback {
+        /**
+         * Called when the user completes interacting with a Facebook dialog.
+         *
+         * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
+         * @param data        a Bundle containing the results of the dialog, whose contents will vary depending on the
+         *                    type of dialog being displayed.
+         */
+        void onComplete(PendingCall pendingCall, Bundle data);
+
+        /**
+         * Called if an error occurred while presenting a Facebook dialog.
+         *
+         * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
+         * @param error       the error that occurred
+         * @param data        the full set of extras associated with the activity result
+         */
+        void onError(PendingCall pendingCall, Exception error, Bundle data);
+    }
+
+    private interface DialogFeature {
+        String getAction();
+        int getMinVersion();
+    }
+
+    /**
+     * Defines a set of features that may be supported by the native Share dialog exposed by the Facebook application.
+     * As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum ShareDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Share dialog itself is supported by the installed version of the
+         * Facebook application.
+         */
+        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
+
+        private int minVersion;
+
+        private ShareDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_FEED_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+    /**
+     * Defines a set of features that may be supported by the native Open Graph dialogs exposed by the Facebook
+     * application. As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum OpenGraphActionDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Open Graph action dialog itself is supported by the installed version of the
+         * Facebook application.
+         */
+        OG_ACTION_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
+
+        private int minVersion;
+
+        private OpenGraphActionDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+    interface OnPresentCallback {
+        void onPresent(Context context) throws Exception;
+    }
+
+    /**
+     * Determines whether the native dialog completed normally (without error or exception).
+     *
+     * @param result the bundle passed back to onActivityResult
+     * @return true if the native dialog completed normally
+     */
+    public static boolean getNativeDialogDidComplete(Bundle result) {
+        return result.getBoolean(EXTRA_DIALOG_COMPLETE_KEY, false);
+    }
+
+    /**
+     * Returns the gesture with which the user completed the native dialog. This is only returned if the
+     * user has previously authorized the calling app with basic permissions.
+     *
+     * @param result the bundle passed back to onActivityResult
+     * @return "post" or "cancel" as the completion gesture
+     */
+    public static String getNativeDialogCompletionGesture(Bundle result) {
+        return result.getString(EXTRA_DIALOG_COMPLETION_GESTURE_KEY);
+    }
+
+    /**
+     * Returns the id of the published post. This is only returned if the user has previously given the
+     * app publish permissions.
+     *
+     * @param result the bundle passed back to onActivityResult
+     * @return the id of the published post
+     */
+    public static String getNativeDialogPostId(Bundle result) {
+        return result.getString(EXTRA_DIALOG_COMPLETION_ID_KEY);
+    }
+
+    private Activity activity;
+    private Fragment fragment;
+    private PendingCall appCall;
+    private OnPresentCallback onPresentCallback;
+
+    private FacebookDialog(Activity activity, Fragment fragment, PendingCall appCall,
+            OnPresentCallback onPresentCallback) {
+        this.activity = activity;
+        this.fragment = fragment;
+        this.appCall = appCall;
+        this.onPresentCallback = onPresentCallback;
+    }
+
+    /**
+     * Launches an activity in the Facebook application to present the desired dialog. This method returns a
+     * PendingCall that contains a unique ID associated with this call to the Facebook application. In general,
+     * a calling Activity should use UiLifecycleHelper to handle incoming activity results, in order to ensure
+     * proper processing of the results from this dialog.
+     *
+     * @return a PendingCall containing the unique call ID corresponding to this call to the Facebook application
+     */
+    public PendingCall present() {
+        if (onPresentCallback != null) {
+            try {
+                onPresentCallback.onPresent(activity);
+            } catch (Exception e) {
+                throw new FacebookException(e);
+            }
+        }
+
+        if (fragment != null) {
+            fragment.startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
+        } else {
+            activity.startActivityForResult(appCall.getRequestIntent(), appCall.getRequestCode());
+        }
+        return appCall;
+    }
+
+    /**
+     * Parses the results of a dialog activity and calls the appropriate method on the provided Callback.
+     *
+     * @param context     the Context that is handling the activity result
+     * @param appCall     an PendingCall containing the call ID and original Intent used to launch the dialog
+     * @param requestCode the request code for the activity result
+     * @param data        the result Intent
+     * @param callback    a callback to call after parsing the results
+     * @return true if the activity result was handled, false if not
+     */
+    public static boolean handleActivityResult(Context context, PendingCall appCall, int requestCode, Intent data,
+            Callback callback) {
+        if (requestCode != appCall.getRequestCode()) {
+            return false;
+        }
+
+        if (attachmentStore != null) {
+            attachmentStore.cleanupAttachmentsForCall(context, appCall.getCallId());
+        }
+
+        if (callback != null) {
+            if (NativeProtocol.isErrorResult(data)) {
+                Exception error = NativeProtocol.getErrorFromResult(data);
+                callback.onError(appCall, error, data.getExtras());
+            } else {
+                callback.onComplete(appCall, data.getExtras());
+            }
+        }
+
+        return true;
+    }
+
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Share dialog, which in turn may be used to determine
+     * which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link ShareDialogFeature#SHARE_DIALOG} is implicitly checked
+     *                 if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentShareDialog(Context context, ShareDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(ShareDialogFeature.SHARE_DIALOG, features));
+    }
+
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Open Graph action dialog, which in turn may be used to
+     * determine which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link OpenGraphActionDialogFeature#OG_ACTION_DIALOG} is implicitly
+     *                 checked if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentOpenGraphActionDialog(Context context, OpenGraphActionDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG, features));
+    }
+
+    private static boolean handleCanPresent(Context context, Iterable<? extends DialogFeature> features) {
+        return getProtocolVersionForNativeDialog(context, getActionForFeatures(features), getMinVersionForFeatures(features))
+                != NativeProtocol.NO_PROTOCOL_AVAILABLE;
+    }
+
+    private static int getProtocolVersionForNativeDialog(Context context, String action, int requiredVersion) {
+        return NativeProtocol.getLatestAvailableProtocolVersionForAction(context, action, requiredVersion);
+    }
+
+    private static NativeAppCallAttachmentStore getAttachmentStore() {
+        if (attachmentStore == null) {
+            attachmentStore = new NativeAppCallAttachmentStore();
+        }
+        return attachmentStore;
+    }
+
+    private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> features) {
+        int minVersion = Integer.MIN_VALUE;
+        for (DialogFeature feature : features) {
+            // Minimum version to support all features is the maximum of each feature's minimum version.
+            minVersion = Math.max(minVersion, feature.getMinVersion());
+        }
+        return minVersion;
+    }
+
+    private static String getActionForFeatures(Iterable<? extends DialogFeature> features) {
+        String action = null;
+        for (DialogFeature feature : features) {
+            // All actions in a set of DialogFeatures should have the same action
+            // So we can break after assigning the first one
+            action = feature.getAction();
+            break;
+        }
+        return action;
+    }
+
+    private abstract static class Builder<CONCRETE extends Builder<?>> {
+        final protected Activity activity;
+        final protected String applicationId;
+        final protected PendingCall appCall;
+        protected Fragment fragment;
+        protected String applicationName;
+
+        Builder(Activity activity) {
+            Validate.notNull(activity, "activity");
+
+            this.activity = activity;
+            applicationId = Utility.getMetadataApplicationId(activity);
+            appCall = new PendingCall(NativeProtocol.DIALOG_REQUEST_CODE);
+        }
+
+        /**
+         * Sets the request code that will be passed to handleActivityResult when this activity completes; the
+         * default is NativeProtocol.DIALOG_REQUEST_CODE.
+         *
+         * @param requestCode the request code
+         * @return this instance of the builder
+         */
+        public CONCRETE setRequestCode(int requestCode) {
+            this.appCall.setRequestCode(requestCode);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the name of the application to be displayed in the dialog. If provided, this optimizes the user
+         * experience as a preview of a shared item, etc., can be displayed sooner.
+         *
+         * @param applicationName the name of the Facebook application
+         * @return this instance of the builder
+         */
+        public CONCRETE setApplicationName(String applicationName) {
+            this.applicationName = applicationName;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the fragment that should launch the dialog. This allows the dialog to be
+         * launched from a Fragment, and will allow the fragment to receive the
+         * {@link Fragment#onActivityResult(int, int, android.content.Intent) onActivityResult}
+         * call rather than the Activity.
+         *
+         * @param fragment the fragment that contains this control
+         */
+        public CONCRETE setFragment(Fragment fragment) {
+            this.fragment = fragment;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Constructs a FacebookDialog with an Intent that is correctly populated to present the dialog within
+         * the Facebook application.
+         *
+         * @return a FacebookDialog instance
+         */
+        public FacebookDialog build() {
+            validate();
+
+            Bundle extras = new Bundle();
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            extras = setBundleExtras(extras);
+
+            String action = getActionForFeatures(getDialogFeatures());
+            int protocolVersion = getProtocolVersionForNativeDialog(activity, action,
+                    getMinVersionForFeatures(getDialogFeatures()));
+
+            Intent intent = NativeProtocol.createPlatformActivityIntent(activity, action, protocolVersion, extras);
+            if (intent == null) {
+                throw new FacebookException(
+                        "Unable to create Intent; this likely means the Facebook app is not installed.");
+            }
+            appCall.setRequestIntent(intent);
+
+            return new FacebookDialog(activity, fragment, appCall, getOnPresentCallback());
+        }
+
+        /**
+         * Determines whether the native dialog can be presented (i.e., whether the required version of the
+         * Facebook application is installed on the device, and whether the installed version supports all of
+         * the parameters specified for the dialog).
+         *
+         * @return true if the dialog can be presented; false if not
+         */
+        public boolean canPresent() {
+            return handleCanPresent(activity, getDialogFeatures());
+        }
+
+        void validate() {
+        }
+
+        OnPresentCallback getOnPresentCallback() {
+            return null;
+        }
+
+        abstract Bundle setBundleExtras(Bundle extras);
+
+        void putExtra(Bundle extras, String key, String value) {
+            if (value != null) {
+                extras.putString(key, value);
+            }
+        }
+
+        abstract EnumSet<? extends DialogFeature> getDialogFeatures();
+    }
+
+    private abstract static class ShareDialogBuilderBase<CONCRETE extends ShareDialogBuilderBase<?>> extends Builder<CONCRETE> {
+        private String name;
+        private String caption;
+        private String description;
+        private String link;
+        private String picture;
+        private String place;
+        private ArrayList<String> friends;
+        private String ref;
+        private boolean dataErrorsFatal;
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public ShareDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the title of the item to be shared.
+         *
+         * @param name the title
+         * @return this instance of the builder
+         */
+        public CONCRETE setName(String name) {
+            this.name = name;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the subtitle of the item to be shared.
+         *
+         * @param caption the subtitle
+         * @return this instance of the builder
+         */
+        public CONCRETE setCaption(String caption) {
+            this.caption = caption;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the description of the item to be shared.
+         *
+         * @param description the description
+         * @return this instance of the builder
+         */
+        public CONCRETE setDescription(String description) {
+            this.description = description;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the URL of the item to be shared.
+         *
+         * @param link the URL
+         * @return this instance of the builder
+         */
+        public CONCRETE setLink(String link) {
+            this.link = link;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the URL of the image of the item to be shared.
+         *
+         * @param picture the URL of the image
+         * @return this instance of the builder
+         */
+        public CONCRETE setPicture(String picture) {
+            this.picture = picture;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the tagged friends for the item to be shared.
+         *
+         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
+         * @return this instance of the builder
+         */
+        public CONCRETE setFriends(List<String> friends) {
+            this.friends = new ArrayList<String>(friends);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the 'ref' property of the item to be shared.
+         *
+         * @param ref the 'ref' property
+         * @return this instance of the builder
+         */
+        public CONCRETE setRef(String ref) {
+            this.ref = ref;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets whether errors encountered during previewing the shared item should be considered fatal and
+         * cause the dialog to return an error
+         *
+         * @param dataErrorsFatal true if data errors should be fatal; false if not
+         * @return this instance of the builder
+         */
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
+            this.dataErrorsFatal = dataErrorsFatal;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        @Override
+        Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
+            putExtra(extras, NativeProtocol.EXTRA_SUBTITLE, caption);
+            putExtra(extras, NativeProtocol.EXTRA_DESCRIPTION, description);
+            putExtra(extras, NativeProtocol.EXTRA_LINK, link);
+            putExtra(extras, NativeProtocol.EXTRA_IMAGE, picture);
+            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
+            putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
+            putExtra(extras, NativeProtocol.EXTRA_REF, ref);
+
+            extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
+            if (!Utility.isNullOrEmpty(friends)) {
+                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
+            }
+            return extras;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog. This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
+     */
+    public static class ShareDialogBuilder extends ShareDialogBuilderBase<ShareDialogBuilder> {
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public ShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG);
+        }
+    }
+
+    private static abstract class OpenGraphDialogBuilderBase<CONCRETE extends OpenGraphDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+
+        private String previewPropertyName;
+        private OpenGraphAction action;
+        private String actionType;
+        private HashMap<String, Bitmap> imageAttachments;
+        private HashMap<String, File> imageAttachmentFiles;
+        private boolean dataErrorsFatal;
+
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        @Deprecated
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String actionType,
+                String previewPropertyName) {
+            super(activity);
+
+            Validate.notNull(action, "action");
+            Validate.notNullOrEmpty(actionType, "actionType");
+            Validate.notNullOrEmpty(previewPropertyName, "previewPropertyName");
+            if (action.getProperty(previewPropertyName) == null) {
+                throw new IllegalArgumentException(
+                        "A property named \"" + previewPropertyName + "\" was not found on the action.  The name of " +
+                                "the preview property must match the name of an action property.");
+            }
+            String typeOnAction = action.getType();
+            if (!Utility.isNullOrEmpty(typeOnAction) && !typeOnAction.equals(actionType)) {
+                throw new IllegalArgumentException("'actionType' must match the type of 'action' if it is specified. " +
+                        "Consider using OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, " +
+                        "String previewPropertyName) instead.");
+            }
+            this.action = action;
+            this.actionType = actionType;
+            this.previewPropertyName = previewPropertyName;
+        }
+
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity);
+
+            Validate.notNull(action, "action");
+            Validate.notNullOrEmpty(action.getType(), "action.getType()");
+            Validate.notNullOrEmpty(previewPropertyName, "previewPropertyName");
+            if (action.getProperty(previewPropertyName) == null) {
+                throw new IllegalArgumentException(
+                        "A property named \"" + previewPropertyName + "\" was not found on the action.  The name of " +
+                                "the preview property must match the name of an action property.");
+            }
+
+            this.action = action;
+            this.actionType = action.getType();
+            this.previewPropertyName = previewPropertyName;
+        }
+
+        /**
+         * Sets whether errors encountered during previewing the shared item should be considered fatal and
+         * cause the dialog to return an error
+         *
+         * @param dataErrorsFatal true if data errors should be fatal; false if not
+         * @return this instance of the builder
+         */
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
+            this.dataErrorsFatal = dataErrorsFatal;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p>Specifies a list of images for the Open Graph action that should be uploaded prior to publishing the
+         * action. The action must already have been set prior to calling this method. This method will generate unique
+         * names for the image attachments and update the action to refer to these attachments. Note that calling
+         * setAction again after calling this method will not clear the image attachments already set, but the new
+         * action will have no reference to the existing attachments. The images will not be marked as being
+         * user-generated.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph action
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps) {
+            return setImageAttachmentsForAction(bitmaps, false);
+        }
+
+        /**
+         * <p>Specifies a list of images for the Open Graph action that should be uploaded prior to publishing the
+         * action. The action must already have been set prior to calling this method. This method will generate unique
+         * names for the image attachments and update the action to refer to these attachments. Note that calling
+         * setAction again after calling this method will not clear the image attachments already set, but the new
+         * action will have no reference to the existing attachments. The images may be marked as being
+         * user-generated -- refer to
+         * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
+         * for more information.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param bitmaps         a list of Bitmaps to be uploaded and attached to the Open Graph action
+         * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps,
+                boolean isUserGenerated) {
+            Validate.containsNoNulls(bitmaps, "bitmaps");
+            if (action == null) {
+                throw new FacebookException("Can not set attachments prior to setting action.");
+            }
+
+            List<String> attachmentUrls = addImageAttachments(bitmaps);
+            updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
+
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p>Specifies a list of images for the Open Graph action that should be uploaded prior to publishing the
+         * action. The action must already have been set prior to calling this method.  The images will not be marked
+         * as being user-generated. This method will generate unique names for the image attachments and update the
+         * action to refer to these attachments. Note that calling setAction again after calling this method will
+         * not clear the image attachments already set, but the new action will have no reference to the existing
+         * attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles) {
+            return setImageAttachmentFilesForAction(bitmapFiles, false);
+        }
+
+        /**
+         * <p>Specifies a list of images for the Open Graph action that should be uploaded prior to publishing the
+         * action. The action must already have been set prior to calling this method. The images may be marked as being
+         * user-generated -- refer to
+         * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
+         * for more information. This method will generate unique
+         * names for the image attachments and update the action to refer to these attachments. Note that calling
+         * setAction again after calling this method will not clear the image attachments already set, but the new
+         * action will have no reference to the existing attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param bitmapFiles     a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
+         * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles,
+                boolean isUserGenerated) {
+            Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
+            if (action == null) {
+                throw new FacebookException("Can not set attachments prior to setting action.");
+            }
+
+            List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
+            updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
+
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isUserGenerated) {
+            List<JSONObject> attachments = action.getImage();
+            if (attachments == null) {
+                attachments = new ArrayList<JSONObject>(attachmentUrls.size());
+            }
+
+            for (String url : attachmentUrls) {
+                JSONObject jsonObject = new JSONObject();
+                try {
+                    jsonObject.put(NativeProtocol.IMAGE_URL_KEY, url);
+                    if (isUserGenerated) {
+                        jsonObject.put(NativeProtocol.IMAGE_USER_GENERATED_KEY, true);
+                    }
+                } catch (JSONException e) {
+                    throw new FacebookException("Unable to attach images", e);
+                }
+                attachments.add(jsonObject);
+            }
+            action.setImage(attachments);
+        }
+
+
+        /**
+         * <p>Specifies a list of images for an Open Graph object referenced by the action that should be uploaded
+         * prior to publishing the action. The images will not be marked as user-generated.
+         * The action must already have been set prior to calling this method, and
+         * the action must have a GraphObject-valued property with the specified property name. This method will
+         * generate unique names for the image attachments and update the graph object to refer to these
+         * attachments. Note that calling setObject again after calling this method, or modifying the value of the
+         * specified property, will not clear the image attachments already set, but the new action (or objects)
+         * will have no reference to the existing attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
+         *                       the object must be marked as a new object to be created
+         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                       true) or an exception will be thrown
+         * @param bitmaps        a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {
+            return setImageAttachmentsForObject(objectProperty, bitmaps, false);
+        }
+
+        /**
+         * <p>Specifies a list of images for an Open Graph object referenced by the action that should be uploaded
+         * prior to publishing the action. The images may be marked as being
+         * user-generated -- refer to
+         * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
+         * for more information.
+         * The action must already have been set prior to calling this method, and
+         * the action must have a GraphObject-valued property with the specified property name. This method will
+         * generate unique names for the image attachments and update the graph object to refer to these
+         * attachments. Note that calling setObject again after calling this method, or modifying the value of the
+         * specified property, will not clear the image attachments already set, but the new action (or objects)
+         * will have no reference to the existing attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object
+         * @param bitmaps         a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,
+                boolean isUserGenerated) {
+            Validate.notNull(objectProperty, "objectProperty");
+            Validate.containsNoNulls(bitmaps, "bitmaps");
+            if (action == null) {
+                throw new FacebookException("Can not set attachments prior to setting action.");
+            }
+
+            List<String> attachmentUrls = addImageAttachments(bitmaps);
+            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
+
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p>Specifies a list of images for an Open Graph object referenced by the action that should be uploaded
+         * prior to publishing the action. The images will not be marked as user-generated.
+         * The action must already have been set prior to calling this method, and
+         * the action must have a GraphObject-valued property with the specified property name. This method will
+         * generate unique names for the image attachments and update the graph object to refer to these
+         * attachments. Note that calling setObject again after calling this method, or modifying the value of the
+         * specified property, will not clear the image attachments already set, but the new action (or objects)
+         * will have no reference to the existing attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
+         *                       the object must be marked as a new object to be created
+         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                       true) or an exception will be thrown
+         * @param bitmapFiles    a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
+                List<File> bitmapFiles) {
+            return setImageAttachmentFilesForObject(objectProperty, bitmapFiles, false);
+        }
+
+        /**
+         * <p>Specifies a list of images for an Open Graph object referenced by the action that should be uploaded
+         * prior to publishing the action. The images may be marked as being
+         * user-generated -- refer to
+         * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
+         * for more information.
+         * The action must already have been set prior to calling this method, and
+         * the action must have a GraphObject-valued property with the specified property name. This method will
+         * generate unique names for the image attachments and update the graph object to refer to these
+         * attachments. Note that calling setObject again after calling this method, or modifying the value of the
+         * specified property, will not clear the image attachments already set, but the new action (or objects)
+         * will have no reference to the existing attachments.</p>
+         * <p/>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         *
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param bitmapFiles     a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
+         * @return this instance of the builder
+         */
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
+                List<File> bitmapFiles, boolean isUserGenerated) {
+            Validate.notNull(objectProperty, "objectProperty");
+            Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
+            if (action == null) {
+                throw new FacebookException("Can not set attachments prior to setting action.");
+            }
+
+            List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
+            updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
+
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUrls, boolean isUserGenerated) {
+            final OpenGraphObject object;
+            try {
+                object = action.getPropertyAs(objectProperty, OpenGraphObject.class);
+                if (object == null) {
+                    throw new IllegalArgumentException("Action does not contain a property '" + objectProperty + "'");
+                }
+            } catch (FacebookGraphObjectException exception) {
+                throw new IllegalArgumentException("Property '" + objectProperty + "' is not a graph object");
+            }
+            if (!object.getCreateObject()) {
+                throw new IllegalArgumentException(
+                        "The Open Graph object in '" + objectProperty + "' is not marked for creation");
+            }
+
+            GraphObjectList<GraphObject> attachments = object.getImage();
+            if (attachments == null) {
+                attachments = GraphObject.Factory.createList(GraphObject.class);
+            }
+            for (String url : attachmentUrls) {
+                GraphObject graphObject = GraphObject.Factory.create();
+                graphObject.setProperty(NativeProtocol.IMAGE_URL_KEY, url);
+                if (isUserGenerated) {
+                    graphObject.setProperty(NativeProtocol.IMAGE_USER_GENERATED_KEY, true);
+                }
+                attachments.add(graphObject);
+            }
+            object.setImage(attachments);
+        }
+
+        private List<String> addImageAttachments(List<Bitmap> bitmaps) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (Bitmap bitmap : bitmaps) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmap);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        private List<String> addImageAttachmentFiles(List<File> bitmapFiles) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (File bitmapFile : bitmapFiles) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmapFile);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        List<String> getImageAttachmentNames() {
+            return new ArrayList<String>(imageAttachments.keySet());
+        }
+
+        @Override
+        Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_PREVIEW_PROPERTY_NAME, previewPropertyName);
+            putExtra(extras, NativeProtocol.EXTRA_ACTION_TYPE, actionType);
+            extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
+
+            JSONObject jsonAction = action.getInnerJSONObject();
+            jsonAction = flattenChildrenOfGraphObject(jsonAction);
+
+            String jsonString = jsonAction.toString();
+            putExtra(extras, NativeProtocol.EXTRA_ACTION, jsonString);
+
+            return extras;
+        }
+
+        @Override
+        OnPresentCallback getOnPresentCallback() {
+            return new OnPresentCallback() {
+                @Override
+                public void onPresent(Context context) throws Exception {
+                    // We're actually being presented, so put our attachments in the content provider.
+                    if (imageAttachments != null && imageAttachments.size() > 0) {
+                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
+                    }
+                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
+                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
+                                imageAttachmentFiles);
+                    }
+                }
+            };
+        }
+
+        private CONCRETE addImageAttachment(String imageName, Bitmap bitmap) {
+            if (imageAttachments == null) {
+                imageAttachments = new HashMap<String, Bitmap>();
+            }
+            imageAttachments.put(imageName, bitmap);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        private CONCRETE addImageAttachment(String imageName, File attachment) {
+            if (imageAttachmentFiles == null) {
+                imageAttachmentFiles = new HashMap<String, File>();
+            }
+            imageAttachmentFiles.put(imageName, attachment);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        private JSONObject flattenChildrenOfGraphObject(JSONObject graphObject) {
+            try {
+                // Clone the existing object to avoid modifying it from under the caller.
+                graphObject = new JSONObject(graphObject.toString());
+
+                @SuppressWarnings("unchecked")
+                Iterator<String> keys = graphObject.keys();
+                while (keys.hasNext()) {
+                    String key = keys.next();
+                    // The "image" property should not be flattened
+                    if (!key.equalsIgnoreCase("image")) {
+                        Object object = graphObject.get(key);
+
+                        object = flattenObject(object);
+                        graphObject.put(key, object);
+                    }
+                }
+
+                return graphObject;
+            } catch (JSONException e) {
+                throw new FacebookException(e);
+            }
+        }
+
+        private Object flattenObject(Object object) throws JSONException {
+            if (object == null) {
+                return null;
+            }
+
+            if (object instanceof JSONObject) {
+                JSONObject jsonObject = (JSONObject) object;
+
+                // Don't flatten objects that are marked as create_object.
+                if (jsonObject.optBoolean(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)) {
+                    return object;
+                }
+                if (jsonObject.has("id")) {
+                    return jsonObject.getString("id");
+                } else if (jsonObject.has("url")) {
+                    return jsonObject.getString("url");
+                }
+            } else if (object instanceof JSONArray) {
+                JSONArray jsonArray = (JSONArray) object;
+                JSONArray newArray = new JSONArray();
+                int length = jsonArray.length();
+
+                for (int i = 0; i < length; ++i) {
+                    newArray.put(flattenObject(jsonArray.get(i)));
+                }
+
+                return newArray;
+            }
+
+            return object;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Open Graph action publish dialog. This builder allows the caller to specify binary images for both the
+     * action and any Open Graph objects to be created prior to publishing the action.
+     * This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)} indicates the capability is available.
+     */
+    public static class OpenGraphActionDialogBuilder extends OpenGraphDialogBuilderBase<OpenGraphActionDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        @Deprecated
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String actionType,
+                String previewPropertyName) {
+            super(activity, action, actionType, previewPropertyName);
+        }
+
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity, action, previewPropertyName);
+        }
+
+        @Override
+        EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
+        }
+    }
+
+    /**
+     * Encapsulates information about a call being made to the Facebook application for Android. A unique String
+     * call ID is used to track calls through their lifecycle.
+     */
+    public static class PendingCall implements Parcelable {
+        private UUID callId;
+        private Intent requestIntent;
+        private int requestCode;
+
+        /**
+         * Constructor.
+         *
+         * @param requestCode the request code for this app call
+         */
+        public PendingCall(int requestCode) {
+            callId = UUID.randomUUID();
+            this.requestCode = requestCode;
+        }
+
+        private PendingCall(Parcel in) {
+            callId = UUID.fromString(in.readString());
+            requestIntent = in.readParcelable(null);
+            requestCode = in.readInt();
+        }
+
+        private void setRequestIntent(Intent requestIntent) {
+            this.requestIntent = requestIntent;
+            this.requestIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID, callId.toString());
+        }
+
+        /**
+         * Returns the Intent that was used to initiate this call to the Facebook application.
+         *
+         * @return the Intent
+         */
+        public Intent getRequestIntent() {
+            return requestIntent;
+        }
+
+        /**
+         * Returns the unique ID of this call to the Facebook application.
+         *
+         * @return the unique ID
+         */
+        public UUID getCallId() {
+            return callId;
+        }
+
+        private void setRequestCode(int requestCode) {
+            this.requestCode = requestCode;
+        }
+
+        /**
+         * Gets the request code for this call.
+         *
+         * @return the request code that will be passed to handleActivityResult upon completion.
+         */
+        public int getRequestCode() {
+            return requestCode;
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel parcel, int i) {
+            parcel.writeString(callId.toString());
+            parcel.writeParcelable(requestIntent, 0);
+            parcel.writeInt(requestCode);
+        }
+
+        public static final Creator<PendingCall> CREATOR
+                = new Creator<PendingCall>() {
+            public PendingCall createFromParcel(Parcel in) {
+                return new PendingCall(in);
+            }
+
+            public PendingCall[] newArray(int size) {
+                return new PendingCall[size];
+            }
+        };
+    }
+}
diff --git a/facebook/src/com/facebook/widget/FriendPickerFragment.java b/facebook/src/com/facebook/widget/FriendPickerFragment.java
index 7867a5ea8..b657ec567 100644
--- a/facebook/src/com/facebook/widget/FriendPickerFragment.java
+++ b/facebook/src/com/facebook/widget/FriendPickerFragment.java
@@ -22,14 +22,15 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.AttributeSet;
-import com.facebook.*;
+import com.facebook.AppEventsLogger;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Session;
 import com.facebook.android.R;
+import com.facebook.internal.AnalyticsEvents;
 import com.facebook.model.GraphUser;
 
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 /**
  * Provides a Fragment that displays a list of a user's friends and allows one or more of the
@@ -54,6 +55,8 @@
 
     private boolean multiSelect = true;
 
+    private List<String> preSelectedFriendIds = new ArrayList<String>();
+
     /**
      * Default constructor. Creates a Fragment with all default properties.
      */
@@ -109,6 +112,42 @@ public void setMultiSelect(boolean multiSelect) {
         }
     }
 
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(List<String> userIds) {
+        preSelectedFriendIds.addAll(userIds);
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param userIds list of friends as ids
+     */
+    public void setSelectionByIds(String... userIds) {
+        setSelectionByIds(Arrays.asList(userIds));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(GraphUser... graphUsers) {
+        setSelection(Arrays.asList(graphUsers));
+    }
+
+    /**
+     * Sets the list of friends for pre selection. These friends will be selected by default.
+     * @param graphUsers list of friends as GraphUsers
+     */
+    public void setSelection(List<GraphUser> graphUsers) {
+        List<String> userIds = new ArrayList<String>();
+        for(GraphUser graphUser: graphUsers) {
+            userIds.add(graphUser.getId());
+        }
+        setSelectionByIds(userIds);
+    }
+
     /**
      * Gets the currently-selected list of users.
      * @return the currently-selected list of users
@@ -188,6 +227,28 @@ String getDefaultTitleText() {
         return getString(R.string.com_facebook_choose_friends);
     }
 
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(), getSession());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_friends_picked", getSelection().size());
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_FRIEND_PICKER_USAGE, null, parameters);
+    }
+
+    @Override
+    public void loadData(boolean forceReload) {
+        super.loadData(forceReload);
+        setSelectedGraphObjects(preSelectedFriendIds);
+    }
+
     private Request createRequest(String userID, Set<String> extraFields, Session session) {
         Request request = Request.newGraphPathRequest(session, userID + "/friends", null);
 
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 42643d6a0..3686cb8b2 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -25,11 +25,14 @@
 import android.widget.*;
 import com.facebook.*;
 import com.facebook.android.R;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
 import com.facebook.model.GraphObject;
 import org.json.JSONObject;
 
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.text.Collator;
 import java.util.*;
 
@@ -176,7 +179,7 @@ public void rebuildAndNotify() {
     }
 
     public void prioritizeViewRange(int firstVisibleItem, int lastVisibleItem, int prefetchBuffer) {
-        if (lastVisibleItem < firstVisibleItem) {
+        if ((lastVisibleItem < firstVisibleItem) || (sectionKeys.size() == 0)) {
             return;
         }
 
@@ -220,7 +223,7 @@ public void prioritizeViewRange(int firstVisibleItem, int lastVisibleItem, int p
             }
         }
         for (T graphObject : graphObjectsToPrefetchPicturesFor) {
-            URL url = getPictureUrlOfGraphObject(graphObject);
+            URI uri = getPictureUriOfGraphObject(graphObject);
             final String id = getIdOfGraphObject(graphObject);
 
             // This URL already have been requested for pre-fetching, but we want to act in an LRU manner, so move
@@ -230,7 +233,7 @@ public void prioritizeViewRange(int firstVisibleItem, int lastVisibleItem, int p
 
             // If we've already requested it for pre-fetching, no need to do so again.
             if (!alreadyPrefetching) {
-                downloadProfilePicture(id, url, null);
+                downloadProfilePicture(id, uri, null);
             }
         }
     }
@@ -256,23 +259,23 @@ protected CharSequence getSubTitleOfGraphObject(T graphObject) {
         return null;
     }
 
-    protected URL getPictureUrlOfGraphObject(T graphObject) {
-        String url = null;
+    protected URI getPictureUriOfGraphObject(T graphObject) {
+        String uri = null;
         Object o = graphObject.getProperty(PICTURE);
         if (o instanceof String) {
-            url = (String) o;
+            uri = (String) o;
         } else if (o instanceof JSONObject) {
             ItemPicture itemPicture = GraphObject.Factory.create((JSONObject) o).cast(ItemPicture.class);
             ItemPictureData data = itemPicture.getData();
             if (data != null) {
-                url = data.getUrl();
+                uri = data.getUrl();
             }
         }
 
-        if (url != null) {
+        if (uri != null) {
             try {
-                return new URL(url);
-            } catch (MalformedURLException e) {
+                return new URI(uri);
+            } catch (URISyntaxException e) {
             }
         }
         return null;
@@ -294,7 +297,7 @@ protected View getGraphObjectView(T graphObject, View convertView, ViewGroup par
         View result = convertView;
 
         if (result == null) {
-            result = createGraphObjectView(graphObject, convertView);
+            result = createGraphObjectView(graphObject);
         }
 
         populateGraphObjectView(result, graphObject);
@@ -321,7 +324,7 @@ protected int getDefaultPicture() {
         return R.drawable.com_facebook_profile_default_icon;
     }
 
-    protected View createGraphObjectView(T graphObject, View convertView) {
+    protected View createGraphObjectView(T graphObject) {
         View result = inflater.inflate(getGraphObjectRowLayoutId(graphObject), null);
 
         ViewStub checkboxStub = (ViewStub) result.findViewById(R.id.com_facebook_picker_checkbox_stub);
@@ -372,18 +375,18 @@ protected void populateGraphObjectView(View view, T graphObject) {
         }
 
         if (getShowPicture()) {
-            URL pictureURL = getPictureUrlOfGraphObject(graphObject);
+            URI pictureURI = getPictureUriOfGraphObject(graphObject);
 
-            if (pictureURL != null) {
+            if (pictureURI != null) {
                 ImageView profilePic = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
 
                 // See if we have already pre-fetched this; if not, download it.
                 if (prefetchedPictureCache.containsKey(id)) {
                     ImageResponse response = prefetchedPictureCache.get(id);
                     profilePic.setImageBitmap(response.getBitmap());
-                    profilePic.setTag(response.getRequest().getImageUrl());
+                    profilePic.setTag(response.getRequest().getImageUri());
                 } else {
-                    downloadProfilePicture(id, pictureURL, profilePic);
+                    downloadProfilePicture(id, pictureURI, profilePic);
                 }
             }
         }
@@ -424,7 +427,7 @@ void updateCheckboxState(CheckBox checkBox, boolean graphObjectSelected) {
 
     String getPictureFieldSpecifier() {
         // How big is our image?
-        View view = createGraphObjectView(null, null);
+        View view = createGraphObjectView(null);
         ImageView picture = (ImageView) view.findViewById(R.id.com_facebook_picker_image);
         if (picture == null) {
             return null;
@@ -722,8 +725,8 @@ public int getSectionForPosition(int position) {
         return result;
     }
 
-    private void downloadProfilePicture(final String profileId, URL pictureURL, final ImageView imageView) {
-        if (pictureURL == null) {
+    private void downloadProfilePicture(final String profileId, URI pictureURI, final ImageView imageView) {
+        if (pictureURI == null) {
             return;
         }
 
@@ -732,7 +735,7 @@ private void downloadProfilePicture(final String profileId, URL pictureURL, fina
         // only want to queue a download if the view's tag isn't already set to the URL (which would mean
         // it's already got the correct picture).
         boolean prefetching = imageView == null;
-        if (prefetching || !pictureURL.equals(imageView.getTag())) {
+        if (prefetching || !pictureURI.equals(imageView.getTag())) {
             if (!prefetching) {
                 // Setting the tag to the profile ID indicates that we're currently downloading the
                 // picture for this profile; we'll set it to the actual picture URL when complete.
@@ -740,7 +743,7 @@ private void downloadProfilePicture(final String profileId, URL pictureURL, fina
                 imageView.setImageResource(getDefaultPicture());
             }
 
-            ImageRequest.Builder builder = new ImageRequest.Builder(context.getApplicationContext(), pictureURL)
+            ImageRequest.Builder builder = new ImageRequest.Builder(context.getApplicationContext(), pictureURI)
                     .setCallerTag(this)
                     .setCallback(
                             new ImageRequest.Callback() {
@@ -783,12 +786,12 @@ private void processImageResponse(ImageResponse response, String graphObjectId,
                 }
                 prefetchedPictureCache.put(graphObjectId, response);
             }
-        } else if (imageView != null && graphObjectId.equals(imageView.getTag())) {
+        } else if (graphObjectId.equals(imageView.getTag())) {
             Exception error = response.getError();
             Bitmap bitmap = response.getBitmap();
             if (error == null && bitmap != null) {
                 imageView.setImageBitmap(bitmap);
-                imageView.setTag(response.getRequest().getImageUrl());
+                imageView.setTag(response.getRequest().getImageUri());
             }
         }
     }
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index 818f6f9b7..ce67f6955 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -22,6 +22,8 @@
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.res.TypedArray;
+import android.graphics.Typeface;
+import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.util.AttributeSet;
 import android.util.Log;
@@ -31,11 +33,13 @@
 import android.widget.Button;
 import com.facebook.*;
 import com.facebook.android.R;
+import com.facebook.internal.AnalyticsEvents;
 import com.facebook.model.GraphUser;
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
 import com.facebook.internal.Utility;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 
@@ -64,6 +68,7 @@
     private UserInfoChangedCallback userInfoChangedCallback;
     private Fragment parentFragment;
     private LoginButtonProperties properties = new LoginButtonProperties();
+    private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;
 
     static class LoginButtonProperties {
         private SessionDefaultAudience defaultAudience = SessionDefaultAudience.FRIENDS;
@@ -201,24 +206,26 @@ public LoginButton(Context context, AttributeSet attrs) {
             // apparently there's no method of setting a default style in xml,
             // so in case the users do not explicitly specify a style, we need
             // to use sensible defaults.
+            this.setGravity(Gravity.CENTER);
             this.setTextColor(getResources().getColor(R.color.com_facebook_loginview_text_color));
             this.setTextSize(TypedValue.COMPLEX_UNIT_PX,
                     getResources().getDimension(R.dimen.com_facebook_loginview_text_size));
-            this.setPadding(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_left),
-                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_top),
-                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_right),
-                    getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_bottom));
-            this.setWidth(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_width));
-            this.setHeight(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_height));
-            this.setGravity(Gravity.CENTER);
+            this.setTypeface(Typeface.DEFAULT_BOLD);
             if (isInEditMode()) {
                 // cannot use a drawable in edit mode, so setting the background color instead
                 // of a background resource.
                 this.setBackgroundColor(getResources().getColor(R.color.com_facebook_blue));
                 // hardcoding in edit mode as getResources().getString() doesn't seem to work in IntelliJ
-                loginText = "Log in";
+                loginText = "Log in with Facebook";
             } else {
-                this.setBackgroundResource(R.drawable.com_facebook_loginbutton_blue);
+                this.setBackgroundResource(R.drawable.com_facebook_button_blue);
+                this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.com_facebook_inverse_icon, 0, 0, 0);
+                this.setCompoundDrawablePadding(
+                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_compound_drawable_padding));
+                this.setPadding(getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_left),
+                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_top),
+                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_right),
+                        getResources().getDimensionPixelSize(R.dimen.com_facebook_loginview_padding_bottom));
             }
         }
         parseAttributes(attrs);
@@ -304,6 +311,32 @@ public void setReadPermissions(List<String> permissions) {
         properties.setReadPermissions(permissions, sessionTracker.getSession());
     }
 
+    /**
+     * Set the permissions to use when the session is opened. The permissions here
+     * can only be read permissions. If any publish permissions are included, the login
+     * attempt by the user will fail. The LoginButton can only be associated with either
+     * read permissions or publish permissions, but not both. Calling both
+     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
+     * will result in an exception being thrown unless clearPermissions is called in between.
+     * <p/>
+     * This method is only meaningful if called before the session is open. If this is called
+     * after the session is opened, and the list of permissions passed in is not a subset
+     * of the permissions granted during the authorization, it will log an error.
+     * <p/>
+     * Since the session can be automatically opened when the LoginButton is constructed,
+     * it's important to always pass in a consistent set of permissions to this method, or
+     * manage the setting of permissions outside of the LoginButton class altogether
+     * (by managing the session explicitly).
+     *
+     * @param permissions the read permissions to use
+     *
+     * @throws UnsupportedOperationException if setPublishPermissions has been called
+     */
+    public void setReadPermissions(String... permissions) {
+        properties.setReadPermissions(Arrays.asList(permissions), sessionTracker.getSession());
+    }
+
+
     /**
      * Set the permissions to use when the session is opened. The permissions here
      * should only be publish permissions. If any read permissions are included, the login
@@ -330,6 +363,32 @@ public void setPublishPermissions(List<String> permissions) {
         properties.setPublishPermissions(permissions, sessionTracker.getSession());
     }
 
+    /**
+     * Set the permissions to use when the session is opened. The permissions here
+     * should only be publish permissions. If any read permissions are included, the login
+     * attempt by the user may fail. The LoginButton can only be associated with either
+     * read permissions or publish permissions, but not both. Calling both
+     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
+     * will result in an exception being thrown unless clearPermissions is called in between.
+     * <p/>
+     * This method is only meaningful if called before the session is open. If this is called
+     * after the session is opened, and the list of permissions passed in is not a subset
+     * of the permissions granted during the authorization, it will log an error.
+     * <p/>
+     * Since the session can be automatically opened when the LoginButton is constructed,
+     * it's important to always pass in a consistent set of permissions to this method, or
+     * manage the setting of permissions outside of the LoginButton class altogether
+     * (by managing the session explicitly).
+     *
+     * @param permissions the read permissions to use
+     *
+     * @throws UnsupportedOperationException if setReadPermissions has been called
+     * @throws IllegalArgumentException if permissions is null or empty
+     */
+    public void setPublishPermissions(String... permissions) {
+        properties.setPublishPermissions(Arrays.asList(permissions), sessionTracker.getSession());
+    }
+
 
     /**
      * Clears the permissions currently associated with this LoginButton.
@@ -515,6 +574,10 @@ void setProperties(LoginButtonProperties properties) {
         this.properties = properties;
     }
 
+    void setLoginLogoutEventName(String eventName) {
+        loginLogoutEventName = eventName;
+    }
+
     private void parseAttributes(AttributeSet attrs) {
         TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_login_view);
         confirmLogout = a.getBoolean(R.styleable.com_facebook_login_view_confirm_logout, true);
@@ -589,6 +652,7 @@ public void onCompleted(GraphUser me,  Response response) {
         public void onClick(View v) {
             Context context = getContext();
             final Session openSession = sessionTracker.getOpenSession();
+
             if (openSession != null) {
                 // If the Session is currently open, it must mean we need to log out
                 if (confirmLogout) {
@@ -643,6 +707,13 @@ public void onClick(DialogInterface dialog, int which) {
                     }
                 }
             }
+
+            AppEventsLogger logger = AppEventsLogger.newLogger(getContext());
+
+            Bundle parameters = new Bundle();
+            parameters.putInt("logging_in", (openSession != null) ? 0 : 1);
+
+            logger.logSdkEvent(loginLogoutEventName, null, parameters);
         }
     }
 
@@ -652,12 +723,13 @@ public void call(Session session, SessionState state,
                          Exception exception) {
             fetchUserInfo();
             setButtonText();
-            if (exception != null) {
-                handleError(exception);
-            }
 
+            // if the client has a status callback registered, call it, otherwise
+            // call the default handleError method, but don't call both
             if (properties.sessionStatusCallback != null) {
                 properties.sessionStatusCallback.call(session, state, exception);
+            } else if (exception != null) {
+                handleError(exception);
             }
         }
     };
diff --git a/facebook/src/com/facebook/widget/PickerFragment.java b/facebook/src/com/facebook/widget/PickerFragment.java
index c084cc0ad..7718a0c26 100644
--- a/facebook/src/com/facebook/widget/PickerFragment.java
+++ b/facebook/src/com/facebook/widget/PickerFragment.java
@@ -102,6 +102,7 @@
     private Button doneButton;
     private Drawable titleBarBackground;
     private Drawable doneButtonBackground;
+    private boolean appEventsLogged;
 
     PickerFragment(Class<T> graphObjectClass, int layout, Bundle args) {
         this.graphObjectClass = graphObjectClass;
@@ -165,10 +166,13 @@ public boolean onLongClick(View v) {
             }
         });
         listView.setOnScrollListener(onScrollListener);
-        listView.setAdapter(adapter);
 
         activityCircle = (ProgressBar) view.findViewById(R.id.com_facebook_picker_activity_circle);
 
+        setupViews(view);
+
+        listView.setAdapter(adapter);
+
         return view;
     }
 
@@ -232,6 +236,14 @@ public void onSaveInstanceState(Bundle outState) {
         }
     }
 
+    @Override
+    public void onStop() {
+        if (!appEventsLogged) {
+            logAppEvents(false);
+        }
+        super.onStop();
+    }
+
     @Override
     public void setArguments(Bundle args) {
         super.setArguments(args);
@@ -489,6 +501,9 @@ public void setSettingsFromBundle(Bundle inState) {
         setPickerFragmentSettingsFromBundle(inState);
     }
 
+    void setupViews(ViewGroup view) {
+    }
+
     boolean filterIncludesItem(T graphObject) {
         if (filter != null) {
             return filter.includeItem(graphObject);
@@ -500,6 +515,14 @@ boolean filterIncludesItem(T graphObject) {
         return adapter.getGraphObjectsById(selectionStrategy.getSelectedIds());
     }
 
+    void setSelectedGraphObjects(List<String> objectIds) {
+        for(String objectId : objectIds) {
+            if(!this.selectionStrategy.isSelected(objectId)) {
+                this.selectionStrategy.toggleSelection(objectId);
+            }
+        }
+    }
+
     void saveSettingsToBundle(Bundle outState) {
         outState.putBoolean(SHOW_PICTURES_BUNDLE_KEY, showPictures);
         if (!extraFields.isEmpty()) {
@@ -561,6 +584,9 @@ void setSelectionStrategy(SelectionStrategy selectionStrategy) {
         }
     }
 
+    void logAppEvents(boolean doneButtonClicked) {
+    }
+
     private static void setAlpha(View view, float alpha) {
         // Set the alpha appropriately (setAlpha is API >= 11, this technique works on all API levels).
         AlphaAnimation alphaAnimation = new AlphaAnimation(alpha, alpha);
@@ -603,8 +629,8 @@ private void inflateTitleBar(ViewGroup view) {
             View titleBar = stub.inflate();
 
             final RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
-                    RelativeLayout.LayoutParams.FILL_PARENT,
-                    RelativeLayout.LayoutParams.FILL_PARENT);
+                    RelativeLayout.LayoutParams.MATCH_PARENT,
+                    RelativeLayout.LayoutParams.MATCH_PARENT);
             layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);
             listView.setLayoutParams(layoutParams);
 
@@ -617,6 +643,9 @@ private void inflateTitleBar(ViewGroup view) {
                 doneButton.setOnClickListener(new View.OnClickListener() {
                     @Override
                     public void onClick(View v) {
+                        logAppEvents(true);
+                        appEventsLogged = true;
+
                         if (onDoneButtonClickedListener != null) {
                             onDoneButtonClickedListener.onDoneButtonClicked(PickerFragment.this);
                         }
diff --git a/facebook/src/com/facebook/widget/PlacePickerFragment.java b/facebook/src/com/facebook/widget/PlacePickerFragment.java
index 0ae78c0fa..58b277583 100644
--- a/facebook/src/com/facebook/widget/PlacePickerFragment.java
+++ b/facebook/src/com/facebook/widget/PlacePickerFragment.java
@@ -27,14 +27,14 @@
 import android.text.TextUtils;
 import android.text.TextWatcher;
 import android.util.AttributeSet;
+import android.view.View;
 import android.view.ViewGroup;
-import android.view.ViewStub;
 import android.view.inputmethod.InputMethodManager;
 import android.widget.EditText;
 import android.widget.ListView;
-import android.widget.RelativeLayout;
 import com.facebook.*;
 import com.facebook.android.R;
+import com.facebook.internal.AnalyticsEvents;
 import com.facebook.model.GraphPlace;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
@@ -233,7 +233,7 @@ public void onSearchBoxTextChanged(String searchText, boolean forceReloadEventIf
      */
     public GraphPlace getSelection() {
         Collection<GraphPlace> selection = getSelectedGraphObjects();
-        return (selection != null && selection.size() > 0) ? selection.iterator().next() : null;
+        return (selection != null && !selection.isEmpty()) ? selection.iterator().next() : null;
     }
 
     public void setSettingsFromBundle(Bundle inState) {
@@ -257,38 +257,20 @@ public void onInflate(Activity activity, AttributeSet attrs, Bundle savedInstanc
     }
 
     @Override
-    public void onActivityCreated(final Bundle savedInstanceState) {
-        super.onActivityCreated(savedInstanceState);
-
-        ViewGroup view = (ViewGroup) getView();
+    void setupViews(ViewGroup view) {
         if (showSearchBox) {
-            ViewStub stub = (ViewStub) view.findViewById(R.id.com_facebook_placepickerfragment_search_box_stub);
-            if (stub != null) {
-                searchBox = (EditText) stub.inflate();
-
-                // Put the list under the search box
-                RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
-                        RelativeLayout.LayoutParams.FILL_PARENT,
-                        RelativeLayout.LayoutParams.FILL_PARENT);
-                layoutParams.addRule(RelativeLayout.BELOW, R.id.search_box);
-
-                ListView listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
-                listView.setLayoutParams(layoutParams);
-
-                // If we need to, put the search box under the title bar.
-                if (view.findViewById(R.id.com_facebook_picker_title_bar) != null) {
-                    layoutParams = new RelativeLayout.LayoutParams(
-                            RelativeLayout.LayoutParams.FILL_PARENT,
-                            RelativeLayout.LayoutParams.WRAP_CONTENT);
-                    layoutParams.addRule(RelativeLayout.BELOW, R.id.com_facebook_picker_title_bar);
-
-                    searchBox.setLayoutParams(layoutParams);
-                }
+            ListView listView = (ListView) view.findViewById(R.id.com_facebook_picker_list_view);
 
-                searchBox.addTextChangedListener(new SearchTextWatcher());
-                if (!TextUtils.isEmpty(searchText)) {
-                    searchBox.setText(searchText);
-                }
+            View searchHeaderView = getActivity().getLayoutInflater().inflate(
+                    R.layout.com_facebook_picker_search_box, listView, false);
+
+            listView.addHeaderView(searchHeaderView, null, false);
+
+            searchBox = (EditText) view.findViewById(R.id.com_facebook_picker_search_text);
+
+            searchBox.addTextChangedListener(new SearchTextWatcher());
+            if (!TextUtils.isEmpty(searchText)) {
+                searchBox.setText(searchText);
             }
         }
     }
@@ -338,6 +320,22 @@ String getDefaultTitleText() {
         return getString(R.string.com_facebook_nearby);
     }
 
+    @Override
+    void logAppEvents(boolean doneButtonClicked) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(this.getActivity(), getSession());
+        Bundle parameters = new Bundle();
+
+        // If Done was clicked, we know this completed successfully. If not, we don't know (caller might have
+        // dismissed us in response to selection changing, or user might have hit back button). Either way
+        // we'll log the number of selections.
+        String outcome = doneButtonClicked ? AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED :
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_UNKNOWN;
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        parameters.putInt("num_places_picked", (getSelection() != null) ? 1 : 0);
+
+        logger.logSdkEvent(AnalyticsEvents.EVENT_PLACE_PICKER_USAGE, null, parameters);
+    }
+
     @Override
     PickerFragmentAdapter<GraphPlace> createAdapter() {
         PickerFragmentAdapter<GraphPlace> adapter = new PickerFragmentAdapter<GraphPlace>(
diff --git a/facebook/src/com/facebook/widget/ProfilePictureView.java b/facebook/src/com/facebook/widget/ProfilePictureView.java
index b6878588b..fdc87288b 100644
--- a/facebook/src/com/facebook/widget/ProfilePictureView.java
+++ b/facebook/src/com/facebook/widget/ProfilePictureView.java
@@ -30,10 +30,9 @@
 import com.facebook.FacebookException;
 import com.facebook.LoggingBehavior;
 import com.facebook.android.R;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
+import com.facebook.internal.*;
 
-import java.net.MalformedURLException;
+import java.net.URISyntaxException;
 
 /**
  * View that displays the profile photo of a supplied profile ID, while conforming
@@ -111,6 +110,7 @@
     private int presetSizeType = CUSTOM;
     private ImageRequest lastRequest;
     private OnErrorListener onErrorListener;
+    private Bitmap customizedDefaultProfilePicture = null;
 
     /**
      * Constructor
@@ -240,10 +240,20 @@ public final OnErrorListener getOnErrorListener() {
      * Sets an OnErrorListener for this instance of ProfilePictureView to call into when
      * certain exceptions occur.
      *
-     * @param onErrorListener The listener object to set
+     * @param onErrorListener The Listener object to set
      */
     public final void setOnErrorListener(OnErrorListener onErrorListener) {
-        this.onErrorListener = onErrorListener;
+      this.onErrorListener = onErrorListener;
+    }
+
+    /**
+     * The ProfilePictureView will display the provided image while the specified
+     * profile is being loaded, or if the specified profile is not available.
+     *
+     * @param inputBitmap The bitmap to render until the actual profile is loaded.
+     */
+    public final void setDefaultProfilePicture(Bitmap inputBitmap) {
+        customizedDefaultProfilePicture = inputBitmap;
     }
 
     /**
@@ -392,10 +402,18 @@ private void refreshImage(boolean force) {
     }
 
     private void setBlankProfilePicture() {
-        int blankImageResource = isCropped() ?
-                R.drawable.com_facebook_profile_picture_blank_square :
-                R.drawable.com_facebook_profile_picture_blank_portrait;
-        setImageBitmap( BitmapFactory.decodeResource(getResources(), blankImageResource));
+        if (customizedDefaultProfilePicture == null) {
+          int blankImageResource = isCropped() ?
+                  R.drawable.com_facebook_profile_picture_blank_square :
+                  R.drawable.com_facebook_profile_picture_blank_portrait;
+          setImageBitmap( BitmapFactory.decodeResource(getResources(), blankImageResource));
+	} else {
+          // Update profile image dimensions.
+          updateImageQueryParameters();
+          // Resize inputBitmap to new dimensions of queryWidth and queryHeight.
+          Bitmap scaledBitmap = Bitmap.createScaledBitmap(customizedDefaultProfilePicture, queryWidth, queryHeight, false);
+          setImageBitmap(scaledBitmap);
+	}
     }
 
     private void setImageBitmap(Bitmap imageBitmap) {
@@ -431,7 +449,7 @@ public void onCompleted(ImageResponse response) {
             lastRequest = request;
 
             ImageDownloader.downloadAsync(request);
-        } catch (MalformedURLException e) {
+        } catch (URISyntaxException e) {
             Logger.log(LoggingBehavior.REQUESTS, Log.ERROR, TAG, e.toString());
         }
     }
diff --git a/facebook/src/com/facebook/widget/UserSettingsFragment.java b/facebook/src/com/facebook/widget/UserSettingsFragment.java
index 3ba4359d9..ed6cc9ceb 100644
--- a/facebook/src/com/facebook/widget/UserSettingsFragment.java
+++ b/facebook/src/com/facebook/widget/UserSettingsFragment.java
@@ -27,10 +27,15 @@
 import android.widget.TextView;
 import com.facebook.*;
 import com.facebook.android.R;
+import com.facebook.internal.AnalyticsEvents;
+import com.facebook.internal.ImageDownloader;
+import com.facebook.internal.ImageRequest;
+import com.facebook.internal.ImageResponse;
 import com.facebook.model.GraphUser;
 
-import java.net.MalformedURLException;
-import java.net.URL;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.Arrays;
 import java.util.List;
 
 /**
@@ -68,6 +73,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
         loginButton = (LoginButton) view.findViewById(R.id.com_facebook_usersettingsfragment_login_button);
         loginButton.setProperties(loginButtonProperties);
         loginButton.setFragment(this);
+        loginButton.setLoginLogoutEventName(AnalyticsEvents.EVENT_USER_SETTINGS_USAGE);
+
         Session session = getSession();
         if (session != null && !session.equals(Session.getActiveSession())) {
             loginButton.setSession(session);
@@ -167,6 +174,31 @@ public void setReadPermissions(List<String> permissions) {
         loginButtonProperties.setReadPermissions(permissions, getSession());
     }
 
+    /**
+     * Set the permissions to use when the session is opened. The permissions here
+     * can only be read permissions. If any publish permissions are included, the login
+     * attempt by the user will fail. The LoginButton can only be associated with either
+     * read permissions or publish permissions, but not both. Calling both
+     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
+     * will result in an exception being thrown unless clearPermissions is called in between.
+     * <p/>
+     * This method is only meaningful if called before the session is open. If this is called
+     * after the session is opened, and the list of permissions passed in is not a subset
+     * of the permissions granted during the authorization, it will log an error.
+     * <p/>
+     * Since the session can be automatically opened when the UserSettingsFragment is constructed,
+     * it's important to always pass in a consistent set of permissions to this method, or
+     * manage the setting of permissions outside of the LoginButton class altogether
+     * (by managing the session explicitly).
+     *
+     * @param permissions the read permissions to use
+     *
+     * @throws UnsupportedOperationException if setPublishPermissions has been called
+     */
+    public void setReadPermissions(String... permissions) {
+        loginButtonProperties.setReadPermissions(Arrays.asList(permissions), getSession());
+    }
+
     /**
      * Set the permissions to use when the session is opened. The permissions here
      * should only be publish permissions. If any read permissions are included, the login
@@ -193,6 +225,32 @@ public void setPublishPermissions(List<String> permissions) {
         loginButtonProperties.setPublishPermissions(permissions, getSession());
     }
 
+    /**
+     * Set the permissions to use when the session is opened. The permissions here
+     * should only be publish permissions. If any read permissions are included, the login
+     * attempt by the user may fail. The LoginButton can only be associated with either
+     * read permissions or publish permissions, but not both. Calling both
+     * setReadPermissions and setPublishPermissions on the same instance of LoginButton
+     * will result in an exception being thrown unless clearPermissions is called in between.
+     * <p/>
+     * This method is only meaningful if called before the session is open. If this is called
+     * after the session is opened, and the list of permissions passed in is not a subset
+     * of the permissions granted during the authorization, it will log an error.
+     * <p/>
+     * Since the session can be automatically opened when the LoginButton is constructed,
+     * it's important to always pass in a consistent set of permissions to this method, or
+     * manage the setting of permissions outside of the LoginButton class altogether
+     * (by managing the session explicitly).
+     *
+     * @param permissions the read permissions to use
+     *
+     * @throws UnsupportedOperationException if setReadPermissions has been called
+     * @throws IllegalArgumentException if permissions is null or empty
+     */
+    public void setPublishPermissions(String... permissions) {
+        loginButtonProperties.setPublishPermissions(Arrays.asList(permissions), getSession());
+    }
+
 
     /**
      * Clears the permissions currently associated with this LoginButton.
@@ -280,7 +338,7 @@ protected void onSessionStateChange(SessionState state, Exception exception) {
     List<String> getPermissions() {
         return loginButtonProperties.getPermissions();
     }
-    
+
     private void fetchUserInfo() {
         final Session currentSession = getSession();
         if (currentSession != null && currentSession.isOpened()) {
@@ -320,7 +378,7 @@ private void updateUI() {
             if (user != null) {
                 ImageRequest request = getImageRequest();
                 if (request != null) {
-                    URL requestUrl = request.getImageUrl();
+                    URI requestUrl = request.getImageUri();
                     // Do we already have the right picture? If so, leave it alone.
                     if (!requestUrl.equals(connectedStateLabel.getTag())) {
                         if (user.getId().equals(userProfilePicID)) {
@@ -371,7 +429,7 @@ public void onCompleted(ImageResponse response) {
                                 }
                             })
                     .build();
-        } catch (MalformedURLException e) {
+        } catch (URISyntaxException e) {
         }
         return request;
     }
@@ -387,7 +445,7 @@ private void processImageResponse(String id, ImageResponse response) {
                 userProfilePic = drawable;
                 userProfilePicID = id;
                 connectedStateLabel.setCompoundDrawables(null, drawable, null, null);
-                connectedStateLabel.setTag(response.getRequest().getImageUrl());
+                connectedStateLabel.setTag(response.getRequest().getImageUri());
             }
         }
     }
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index d14f0568b..aaced5ccd 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -28,9 +28,8 @@
 import android.net.Uri;
 import android.net.http.SslError;
 import android.os.Bundle;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.Window;
+import android.util.DisplayMetrics;
+import android.view.*;
 import android.webkit.SslErrorHandler;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
@@ -57,6 +56,20 @@
     static final String CANCEL_URI = "fbconnect://cancel";
     static final boolean DISABLE_SSL_CHECK_FOR_TESTING = false;
 
+    // width below which there are no extra margins
+    private static final int NO_PADDING_SCREEN_WIDTH = 480;
+    // width beyond which we're always using the MIN_SCALE_FACTOR
+    private static final int MAX_PADDING_SCREEN_WIDTH = 800;
+    // height below which there are no extra margins
+    private static final int NO_PADDING_SCREEN_HEIGHT = 800;
+    // height beyond which we're always using the MIN_SCALE_FACTOR
+    private static final int MAX_PADDING_SCREEN_HEIGHT = 1280;
+
+    // the minimum scaling factor for the web dialog (50% of screen size)
+    private static final double MIN_SCALE_FACTOR = 0.5;
+    // translucent border around the webview
+    private static final int BACKGROUND_GRAY = 0xCC000000;
+
     public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
 
     private String url;
@@ -122,10 +135,15 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
         if (parameters == null) {
             parameters = new Bundle();
         }
+
+        // our webview client only handles the redirect uri we specify, so just hard code it here
+        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
+
         parameters.putString(ServerProtocol.DIALOG_PARAM_DISPLAY, DISPLAY_TOUCH);
         parameters.putString(ServerProtocol.DIALOG_PARAM_TYPE, USER_AGENT);
 
-        Uri uri = Utility.buildUri(ServerProtocol.DIALOG_AUTHORITY, ServerProtocol.DIALOG_PATH + action, parameters);
+        Uri uri = Utility.buildUri(ServerProtocol.getDialogAuthority(), ServerProtocol.DIALOG_PATH + action,
+                parameters);
         this.url = uri.toString();
         onCompleteListener = listener;
     }
@@ -198,6 +216,13 @@ public void onCancel(DialogInterface dialogInterface) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         contentFrameLayout = new FrameLayout(getContext());
 
+        // First calculate how big the frame layout should be
+        calculateSize();
+        getWindow().setGravity(Gravity.CENTER);
+
+        // resize the dialog if the soft keyboard comes up
+        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);
+
         /* Create the 'x' image, but don't add to the contentFrameLayout layout yet
          * at this point, we only need to know its drawable width and height
          * to place the webview
@@ -205,18 +230,65 @@ public void onCancel(DialogInterface dialogInterface) {
         createCrossImage();
 
         /* Now we know 'x' drawable width and height,
-        * layout the webivew and add it the contentFrameLayout layout
-        */
+         * layout the webview and add it the contentFrameLayout layout
+         */
         int crossWidth = crossImageView.getDrawable().getIntrinsicWidth();
-        setUpWebView(crossWidth / 2);
+
+        setUpWebView(crossWidth / 2 + 1);
 
         /* Finally add the 'x' image to the contentFrameLayout layout and
         * add contentFrameLayout to the Dialog view
         */
         contentFrameLayout.addView(crossImageView, new ViewGroup.LayoutParams(
                 ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
-        addContentView(contentFrameLayout,
-                new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
+
+        setContentView(contentFrameLayout);
+    }
+
+    private void calculateSize() {
+        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
+        Display display = wm.getDefaultDisplay();
+        DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        // always use the portrait dimensions to do the scaling calculations so we always get a portrait shaped
+        // web dialog
+        int width = metrics.widthPixels < metrics.heightPixels ? metrics.widthPixels : metrics.heightPixels;
+        int height = metrics.widthPixels < metrics.heightPixels ? metrics.heightPixels : metrics.widthPixels;
+
+        int dialogWidth = Math.min(
+                getScaledSize(width, metrics.density, NO_PADDING_SCREEN_WIDTH, MAX_PADDING_SCREEN_WIDTH),
+                metrics.widthPixels);
+        int dialogHeight = Math.min(
+                getScaledSize(height, metrics.density, NO_PADDING_SCREEN_HEIGHT, MAX_PADDING_SCREEN_HEIGHT),
+                metrics.heightPixels);
+
+        getWindow().setLayout(dialogWidth, dialogHeight);
+    }
+
+    /**
+     * Returns a scaled size (either width or height) based on the parameters passed.
+     * @param screenSize a pixel dimension of the screen (either width or height)
+     * @param density density of the screen
+     * @param noPaddingSize the size at which there's no padding for the dialog
+     * @param maxPaddingSize the size at which to apply maximum padding for the dialog
+     * @return a scaled size.
+     */
+    private int getScaledSize(int screenSize, float density, int noPaddingSize, int maxPaddingSize) {
+        int scaledSize = (int) ((float) screenSize / density);
+        double scaleFactor;
+        if (scaledSize <= noPaddingSize) {
+            scaleFactor = 1.0;
+        } else if (scaledSize >= maxPaddingSize) {
+            scaleFactor = MIN_SCALE_FACTOR;
+        } else {
+            // between the noPadding and maxPadding widths, we take a linear reduction to go from 100%
+            // of screen size down to MIN_SCALE_FACTOR
+            scaleFactor = MIN_SCALE_FACTOR +
+                    ((double) (maxPaddingSize - scaledSize))
+                            / ((double) (maxPaddingSize - noPaddingSize))
+                            * (1.0 - MIN_SCALE_FACTOR);
+        }
+        return (int) (screenSize * scaleFactor);
     }
 
     private void sendSuccessToListener(Bundle values) {
@@ -257,7 +329,7 @@ public void onClick(View v) {
         crossImageView.setImageDrawable(crossDrawable);
         /* 'x' should not be visible while webview is loading
          * make it visible only after webview has fully loaded
-        */
+         */
         crossImageView.setVisibility(View.INVISIBLE);
     }
 
@@ -277,6 +349,7 @@ private void setUpWebView(int margin) {
 
         webViewContainer.setPadding(margin, margin, margin, margin);
         webViewContainer.addView(webView);
+        webViewContainer.setBackgroundColor(BACKGROUND_GRAY);
         contentFrameLayout.addView(webViewContainer);
     }
 
@@ -388,6 +461,22 @@ public void onPageFinished(WebView view, String url) {
         private OnCompleteListener listener;
         private Bundle parameters;
 
+        protected BuilderBase(Context context, String action) {
+            Session activeSession = Session.getActiveSession();
+            if (activeSession != null && activeSession.isOpened()) {
+                this.session = activeSession;
+            } else {
+                String applicationId = Utility.getMetadataApplicationId(context);
+                if (applicationId != null) {
+                    this.applicationId = applicationId;
+                } else {
+                    throw new FacebookException("Attempted to create a builder without an open" +
+                            " Active Session or a valid default Application ID.");
+                }
+            }
+            finishInit(context, action, null);
+        }
+
         protected BuilderBase(Context context, Session session, String action, Bundle parameters) {
             Validate.notNull(session, "session");
             if (!session.isOpened()) {
@@ -399,6 +488,9 @@ protected BuilderBase(Context context, Session session, String action, Bundle pa
         }
 
         protected BuilderBase(Context context, String applicationId, String action, Bundle parameters) {
+            if (applicationId == null) {
+                applicationId = Utility.getMetadataApplicationId(context);
+            }
             Validate.notNullOrEmpty(applicationId, "applicationId");
             this.applicationId = applicationId;
 
@@ -445,10 +537,6 @@ public WebDialog build() {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_APP_ID, applicationId);
             }
 
-            if (!parameters.containsKey(ServerProtocol.DIALOG_PARAM_REDIRECT_URI)) {
-                parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
-            }
-
             return new WebDialog(context, action, parameters, theme, listener);
         }
 
@@ -487,6 +575,18 @@ private void finishInit(Context context, String action, Bundle parameters) {
      * Provides a builder that allows construction of an arbitary Facebook web dialog.
      */
     public static class Builder extends BuilderBase<Builder> {
+        /**
+         * Constructor that builds a dialog using either the active session, or the application
+         * id specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         * @param action the portion of the dialog URL following www.facebook.com/dialog/.
+         *               See https://developers.facebook.com/docs/reference/dialogs/ for details.
+         */
+        public Builder(Context context, String action) {
+            super(context, action);
+        }
+
         /**
          * Constructor that builds a dialog for an authenticated user.
          *
@@ -517,7 +617,7 @@ public Builder(Context context, String applicationId, String action, Bundle para
 
     /**
      * Provides a builder that allows construction of the parameters for showing
-     * the Feed Dialog (https://developers.facebook.com/docs/reference/dialogs/feed/).
+     * the <a href="https://developers.facebook.com/docs/reference/dialogs/feed">Feed Dialog</a>.
      */
     public static class FeedDialogBuilder extends BuilderBase<FeedDialogBuilder> {
         private static final String FEED_DIALOG = "feed";
@@ -531,7 +631,17 @@ public Builder(Context context, String applicationId, String action, Bundle para
         private static final String DESCRIPTION_PARAM = "description";
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public FeedDialogBuilder(Context context) {
+            super(context, FEED_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Feed Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -542,19 +652,37 @@ public FeedDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
-         * @param parameters a Bundle containing parameters to pass as part of the
-         *                   dialog URL. No validation is done on these parameters; it is
-         *                   the caller's responsibility to ensure they are valid.
          * @param session    the Session representing an authenticating user to use for
          *                   showing the dialog; must not be null, and must be opened.
+         * @param parameters a Bundle containing parameters to pass as part of the
+         *                   dialog URL. No validation is done on these parameters; it is
+         *                   the caller's responsibility to ensure they are valid. For more information,
+         *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
+         *                   https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
          */
         public FeedDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, FEED_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Feed Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
+         */
+        public FeedDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, FEED_DIALOG, parameters);
+        }
+
         /**
          * Sets the ID of the profile that is posting to Facebook. If none is specified,
          * the default is "me". This profile must be either the authenticated user or a
@@ -650,7 +778,7 @@ public FeedDialogBuilder setDescription(String description) {
 
     /**
      * Provides a builder that allows construction of the parameters for showing
-     * the Feed Dialog (https://developers.facebook.com/docs/reference/dialogs/feed/).
+     * the <a href="https://developers.facebook.com/docs/reference/dialogs/requests">Requests Dialog</a>.
      */
     public static class RequestsDialogBuilder extends BuilderBase<RequestsDialogBuilder> {
         private static final String APPREQUESTS_DIALOG = "apprequests";
@@ -660,7 +788,17 @@ public FeedDialogBuilder setDescription(String description) {
         private static final String TITLE_PARAM = "title";
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public RequestsDialogBuilder(Context context) {
+            super(context, APPREQUESTS_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Requests Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -671,19 +809,37 @@ public RequestsDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
-         * @param parameters a Bundle containing parameters to pass as part of the
-         *                   dialog URL. No validation is done on these parameters; it is
-         *                   the caller's responsibility to ensure they are valid.
          * @param session    the Session representing an authenticating user to use for
          *                   showing the dialog; must not be null, and must be opened.
+         * @param parameters a Bundle containing parameters to pass as part of the
+         *                   dialog URL. No validation is done on these parameters; it is
+         *                   the caller's responsibility to ensure they are valid. For more information,
+         *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
+         *                   https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
          */
         public RequestsDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, APPREQUESTS_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Requests Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
+         */
+        public RequestsDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, APPREQUESTS_DIALOG, parameters);
+        }
+
         /**
          * Sets the string users receiving the request will see. The maximum length
          * is 60 characters.
diff --git a/facebook/tests/.classpath b/facebook/tests/.classpath
index a4763d1ee..90ce10bab 100644
--- a/facebook/tests/.classpath
+++ b/facebook/tests/.classpath
@@ -3,6 +3,8 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/facebook/tests/SdkTests.eml b/facebook/tests/SdkTests.eml
deleted file mode 100644
index 3bbc2f8d5..000000000
--- a/facebook/tests/SdkTests.eml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-	<module name="SdkTestApp" scope="PROVIDED"/>
-</component>
diff --git a/facebook/tests/SdkTests.iml b/facebook/tests/SdkTests.iml
deleted file mode 100644
index 75d82b2fc..000000000
--- a/facebook/tests/SdkTests.iml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="1" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="2" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="true" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/assets" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="module" module-name="SdkTestApp" scope="PROVIDED" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/tests/build.gradle b/facebook/tests/build.gradle
new file mode 100644
index 000000000..1a7be02eb
--- /dev/null
+++ b/facebook/tests/build.gradle
@@ -0,0 +1,29 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+    compile project(':TestApp')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+
+        instrumentTest {
+            java.srcDirs = ['src']
+            assets.srcDirs = ['assets']
+        }
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
index 83d2cc162..09220b0f9 100644
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ b/facebook/tests/src/com/facebook/AccessTokenTests.java
@@ -22,6 +22,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 
 import java.io.IOException;
diff --git a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
new file mode 100644
index 000000000..e9d99bfc5
--- /dev/null
+++ b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
@@ -0,0 +1,148 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.support.v4.content.LocalBroadcastManager;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.util.HashMap;
+import java.util.List;
+
+public class AppEventsLoggerTests extends FacebookTestCase {
+    public void testSimpleCall() throws InterruptedException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+
+        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
+        TestSession session2 = TestSession.createSessionWithSharedUser(getActivity(), null, SECOND_TEST_USER_TAG);
+
+        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
+        AppEventsLogger logger2 = AppEventsLogger.newLogger(getActivity(), session2);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        waitForBroadcastReceiver.incrementExpectCount();
+
+        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+
+        // Need to get notifications on another thread so we can wait for them.
+        runOnBlockerThread(new Runnable() {
+            @Override
+            public void run() {
+                broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+            }
+        }, true);
+
+        logger1.logEvent("an_event");
+        logger2.logEvent("another_event");
+
+        logger1.flush();
+
+        waitForBroadcastReceiver.waitForExpectedCalls();
+
+        closeBlockerAndAssertSuccess();
+
+        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+    }
+
+    public void testPersistedEvents() throws IOException, ClassNotFoundException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+
+        // Need to get notifications on another thread so we can wait for them.
+        runOnBlockerThread(new Runnable() {
+            @Override
+            public void run() {
+                broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+            }
+        }, true);
+
+        getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
+
+        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
+        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
+
+        logger1.logEvent("an_event");
+
+        AppEventsLogger.onContextStop();
+
+        FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
+        assertNotNull(fis);
+
+        ObjectInputStream ois = new ObjectInputStream(fis);
+        Object obj = ois.readObject();
+        ois.close();
+
+        assertTrue(obj instanceof HashMap);
+
+        logger1.flush();
+
+        logger1.logEvent("another_event");
+
+        waitForBroadcastReceiver.incrementExpectCount();
+        logger1.flush();
+
+        waitForBroadcastReceiver.waitForExpectedCalls();
+        List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
+        assertEquals(1, receivedIntents.size());
+
+        Intent intent = receivedIntents.get(0);
+        assertNotNull(intent);
+
+        assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
+        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+    }
+
+    @SuppressWarnings("deprecation")
+    public void testInsightsLoggerCompatibility() throws InterruptedException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.AUTO);
+
+        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
+
+        InsightsLogger logger1 = InsightsLogger.newLogger(getActivity(), null, null, session1);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        waitForBroadcastReceiver.incrementExpectCount();
+
+        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+
+        // Need to get notifications on another thread so we can wait for them.
+        runOnBlockerThread(new Runnable() {
+            @Override
+            public void run() {
+                broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+            }
+        }, true);
+
+        logger1.logConversionPixel("foo", 1.0);
+
+        // For some reason the flush can take an extraordinary amount of time, so increasing
+        // the timeout here to prevent failures.
+        waitForBroadcastReceiver.waitForExpectedCalls(600*1000);
+
+        closeBlockerAndAssertSuccess();
+
+        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AppLinkDataTests.java b/facebook/tests/src/com/facebook/AppLinkDataTests.java
new file mode 100644
index 000000000..42a22c9b5
--- /dev/null
+++ b/facebook/tests/src/com/facebook/AppLinkDataTests.java
@@ -0,0 +1,137 @@
+package com.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+
+public class AppLinkDataTests extends FacebookTestCase {
+    private static final String TARGET_URI_STRING = "http://test.app/foo";
+    private static final String FB_REF_KEY = "fb_ref";
+    private static final String FB_REF_VALUE = "foobar";
+    private static final String REFERER_DATA_KEY = "referer_data";
+    private static final String EXTRA_ARGS_KEY = "extra_args";
+    private static final String EXTRA_ARGS_VALUE = "extra_value";
+    private static final String TARGET_URL_KEY = "target_url";
+    private static final String USER_AGENT_KEY = "user_agent";
+    private static final String USER_AGENT_VALUE = "foobarUserAgent";
+
+    private static final String JSON_DATA_REGULAR =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_REGULAR_WITH_NESTED_ARRAY =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
+            + "    \"other\": [ [1, 2], [3, 4] ]"
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_WITH_REFERER_DATA =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"referer_data\" : {"
+            + "      \"" + FB_REF_KEY + "\": \"" + FB_REF_VALUE + "\","
+            + "      \"" + EXTRA_ARGS_KEY + "\": \"" + EXTRA_ARGS_VALUE + "\""
+            + "    },"
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+
+    private static class MockActivityWithAppLinkData extends Activity {
+        public Intent getIntent() {
+            Uri targetUri = Uri.parse(TARGET_URI_STRING);
+            Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
+            Bundle applinks = new Bundle();
+            Bundle refererData = new Bundle();
+            refererData.putString(FB_REF_KEY, FB_REF_VALUE);
+            refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
+            applinks.putBundle(REFERER_DATA_KEY, refererData);
+            applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
+            applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
+            intent.putExtra("al_applink_data", applinks);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithJsonData extends Activity {
+        private boolean useRefererData;
+
+        public MockActivityWithJsonData(boolean useRefererData) {
+            this.useRefererData = useRefererData;
+        }
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY,
+                    useRefererData ? JSON_DATA_WITH_REFERER_DATA : JSON_DATA_REGULAR);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithErrorJsonData extends Activity {
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, JSON_DATA_REGULAR_WITH_NESTED_ARRAY);
+            return intent;
+        }
+    }
+
+    public void testCreateFromAlApplinkData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithAppLinkData());
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertEquals("user agent", USER_AGENT_VALUE, args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data not null", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+
+    public void testCreateFromJson() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(false));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNull("referer data", refererData);
+    }
+
+    public void testCreateFromJsonWithNestedArray() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithErrorJsonData());
+        assertNull(appLinkData);
+    }
+
+
+    public void testCreateFromJsonWithRefererData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(true));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index 28f23adae..07857df61 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -186,6 +186,7 @@ public void testMixedSuccessAndFailure() {
 
     @MediumTest
     @LargeTest
+    @SuppressWarnings("deprecation")
     public void testStaticExecuteMeAsync() {
         final TestSession session = openTestSessionWithSharedUser();
 
@@ -210,6 +211,7 @@ public void run() {
 
     @MediumTest
     @LargeTest
+    @SuppressWarnings("deprecation")
     public void testStaticExecuteMyFriendsAsync() {
         final TestSession session = openTestSessionWithSharedUser();
 
diff --git a/facebook/tests/src/com/facebook/AuthorizationClientTests.java b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
index 5267f41c3..0a96adf35 100644
--- a/facebook/tests/src/com/facebook/AuthorizationClientTests.java
+++ b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
@@ -23,6 +23,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.internal.NativeProtocol;
 import com.facebook.model.GraphMultiResult;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
@@ -131,7 +132,7 @@ public void testWebViewHandlesError() {
         assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
         assertNull(client.result.token);
         assertNotNull(client.result.errorMessage);
-        assertEquals(client.result.errorMessage, ERROR_MESSAGE);
+        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
     }
 
     @SmallTest
@@ -264,7 +265,7 @@ public void testLoginDialogHandlesSuccess() {
     @LargeTest
     public void testLoginDialogHandlesCancel() {
         Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_DESCRIPTION, ERROR_MESSAGE);
+        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_USER_CANCELED);
 
         Intent intent = new Intent();
         intent.putExtras(bundle);
@@ -281,8 +282,7 @@ public void testLoginDialogHandlesCancel() {
 
         AccessToken token = client.result.token;
         assertNull(token);
-        assertNotNull(client.result.errorMessage);
-        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
+        assertNull(client.result.errorMessage);
     }
 
     @SmallTest
@@ -532,7 +532,7 @@ public void testReauthorizationWithSameFbidSucceeds() throws Exception {
         client.setRequest(request);
 
         AccessToken token = AccessToken.createFromExistingAccessToken(USER_1_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(token);
+        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
 
         client.completeAndValidate(result);
 
@@ -561,7 +561,7 @@ public void testReauthorizationWithFewerPermissionsSucceeds() throws Exception {
         client.setRequest(request);
 
         AccessToken token = AccessToken.createFromExistingAccessToken(USER_1_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(token);
+        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
 
         client.completeAndValidate(result);
 
@@ -590,7 +590,7 @@ public void testReauthorizationWithDifferentFbidsFails() throws Exception {
         client.setRequest(request);
 
         AccessToken token = AccessToken.createFromExistingAccessToken(USER_2_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(token);
+        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
 
         client.completeAndValidate(result);
 
@@ -614,7 +614,7 @@ public void testLegacyReauthDoesntValidate() throws Exception {
         client.setRequest(request);
 
         AccessToken token = AccessToken.createFromExistingAccessToken(USER_2_ACCESS_TOKEN, null, null, null, PERMISSIONS);
-        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(token);
+        AuthorizationClient.Result result = AuthorizationClient.Result.createTokenResult(request, token);
 
         client.completeAndValidate(result);
 
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index 6b23689ee..7a863649f 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -20,12 +20,14 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.RequestBatch;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphPlace;
 import com.facebook.model.GraphUser;
 import com.facebook.internal.CacheableRequestBatch;
 
 import java.io.IOException;
+import java.lang.Override;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -81,6 +83,33 @@ public void testBatchWithoutAppIDIsError() {
         Request.executeBatchAndWait(request1, request2);
     }
 
+    @MediumTest
+    @LargeTest
+    public void testExecuteBatchRequestsPathEncoding() throws IOException {
+        // ensures that paths passed to batch requests are encoded properly before
+        // we send it up to the server
+
+        setBatchApplicationIdForTestApp();
+
+        Request request1 = new Request(null, "TourEiffel");
+        request1.setBatchEntryName("eiffel");
+        request1.setBatchEntryOmitResultOnSuccess(false);
+        Request request2 = new Request(null, "{result=eiffel:$.id}");
+
+        List<Response> responses = Request.executeBatchAndWait(request1, request2);
+        assertEquals(2, responses.size());
+        assertTrue(responses.get(0).getError() == null);
+        assertTrue(responses.get(1).getError() == null);
+
+        GraphPlace eiffelTower1 = responses.get(0).getGraphObjectAs(GraphPlace.class);
+        GraphPlace eiffelTower2 = responses.get(1).getGraphObjectAs(GraphPlace.class);
+        assertTrue(eiffelTower1 != null);
+        assertTrue(eiffelTower2 != null);
+
+        assertEquals("Paris", eiffelTower1.getLocation().getCity());
+        assertEquals("Paris", eiffelTower2.getLocation().getCity());
+    }
+
     @MediumTest
     @LargeTest
     public void testExecuteBatchedGets() throws IOException {
@@ -126,8 +155,8 @@ public void testFacebookErrorResponsesCreateErrors() {
     public void testBatchPostStatusUpdate() {
         TestSession session = openTestSessionWithSharedUser();
 
-        GraphObject statusUpdate1 = createStatusUpdate();
-        GraphObject statusUpdate2 = createStatusUpdate();
+        GraphObject statusUpdate1 = createStatusUpdate("1");
+        GraphObject statusUpdate2 = createStatusUpdate("2");
 
         Request postRequest1 = Request.newPostRequest(session, "me/feed", statusUpdate1, null);
         postRequest1.setBatchEntryName("postRequest1");
@@ -344,8 +373,8 @@ public void onCompleted(Response response) {
 
     @MediumTest
     @LargeTest
-    public void testCacheMyFriendsRequest() throws IOException {
-        Response.getResponseCache().clearForTest();
+    public void testCacheMyFriendsRequest() throws Exception {
+        TestUtils.clearFileLruCache(Response.getResponseCache());
         TestSession session = openTestSessionWithSharedUser();
 
         Request request = Request.newMyFriendsRequest(session, null);
@@ -384,13 +413,13 @@ public void testCacheMyFriendsRequest() throws IOException {
         assertNull(response.getError());
         assertTrue(!response.getIsFromCache());
 
-        Response.getResponseCache().clearForTest();
+        TestUtils.clearFileLruCache(Response.getResponseCache());
     }
 
     @MediumTest
     @LargeTest
-    public void testCacheMeAndMyFriendsRequest() throws IOException {
-        Response.getResponseCache().clearForTest();
+    public void testCacheMeAndMyFriendsRequest() throws Exception {
+        TestUtils.clearFileLruCache(Response.getResponseCache());
         TestSession session = openTestSessionWithSharedUser();
 
         Request requestMe = Request.newMeRequest(session, null);
@@ -433,7 +462,7 @@ public void testCacheMeAndMyFriendsRequest() throws IOException {
             assertTrue(!response.getIsFromCache());
         }
 
-        Response.getResponseCache().clearForTest();
+        TestUtils.clearFileLruCache(Response.getResponseCache());
     }
 
     @MediumTest
@@ -534,4 +563,131 @@ public void onBatchCompleted(RequestBatch batch) {
         batch.executeAndWait();
         assertEquals(3, count.get());
     }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchOnProgressCallbackIsCalled() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                count.incrementAndGet();
+            }
+        });
+
+        batch.executeAndWait();
+        assertTrue(count.get() > 0);
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchLastOnProgressCallbackIsCalledOnce() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    count.incrementAndGet();
+                }
+                else if (current > max) {
+                    count.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        assertEquals(1, count.get());
+    }
+
+
+    @MediumTest
+    @LargeTest
+    public void testMixedBatchCallbacks() {
+        final AtomicInteger requestProgressCount = new AtomicInteger();
+        final AtomicInteger requestCompletedCount = new AtomicInteger();
+        final AtomicInteger batchProgressCount = new AtomicInteger();
+        final AtomicInteger batchCompletedCount = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+                requestCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) {
+                    requestProgressCount.incrementAndGet();
+                }
+                else if (current > max) {
+                    requestProgressCount.set(0);
+                }
+            }
+        });
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+                batchCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    batchProgressCount.incrementAndGet();
+                } else if (current > max) {
+                    batchProgressCount.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        
+        assertEquals(1, requestProgressCount.get());
+        assertEquals(1, requestCompletedCount.get());
+        assertEquals(1, batchProgressCount.get());
+        assertEquals(1, batchCompletedCount.get());
+    }
 }
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
index 458c1f926..ad2753abe 100644
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
@@ -241,8 +241,10 @@ protected void setUp() throws Exception {
     protected void tearDown() throws Exception {
         super.tearDown();
 
-        if (testBlocker != null) {
-            testBlocker.quit();
+        synchronized (this) {
+            if (testBlocker != null) {
+                testBlocker.quit();
+            }
         }
     }
 
@@ -331,10 +333,11 @@ protected void setBatchApplicationIdForTestApp() {
         return resultGraphObject;
     }
 
-    protected GraphObject createStatusUpdate() {
+    protected GraphObject createStatusUpdate(String unique) {
         GraphObject statusUpdate = GraphObject.Factory.create();
         String message = String.format(
-                "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:,", new Date());
+                "Check out my awesome new status update posted at: %s. Some chars for you: +\"[]:,%s", new Date(),
+                unique);
         statusUpdate.setProperty("message", message);
         return statusUpdate;
     }
@@ -428,8 +431,11 @@ public void run() {
     }
 
     protected void closeBlockerAndAssertSuccess() {
-        TestBlocker blocker = getTestBlocker();
-        testBlocker = null;
+        TestBlocker blocker;
+        synchronized (this) {
+            blocker = getTestBlocker();
+            testBlocker = null;
+        }
 
         blocker.quit();
 
diff --git a/facebook/tests/src/com/facebook/GraphRequestTests.java b/facebook/tests/src/com/facebook/GraphRequestTests.java
index 0a78dc1da..5ff2a975d 100644
--- a/facebook/tests/src/com/facebook/GraphRequestTests.java
+++ b/facebook/tests/src/com/facebook/GraphRequestTests.java
@@ -29,7 +29,7 @@
     public void testCommentRoundTrip() {
         TestSession session = openTestSessionWithSharedUser();
 
-        GraphObject status = createStatusUpdate();
+        GraphObject status = createStatusUpdate("");
         GraphObject createdStatus = batchCreateAndGet(session, "me/feed", status, null, GraphObject.class);
         String statusID = (String) createdStatus.getProperty("id");
 
diff --git a/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java b/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
new file mode 100644
index 000000000..01314889e
--- /dev/null
+++ b/facebook/tests/src/com/facebook/NativeAppCallAttachmentStoreTest.java
@@ -0,0 +1,111 @@
+package com.facebook;
+
+import android.graphics.Bitmap;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+public class NativeAppCallAttachmentStoreTest extends FacebookTestCase {
+    private static final UUID CALL_ID = UUID.randomUUID();
+    private static final String ATTACHMENT_NAME = "hello";
+
+    private NativeAppCallAttachmentStore storeUnderTest;
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        storeUnderTest = new NativeAppCallAttachmentStore();
+    }
+
+    private Bitmap createBitmap() {
+        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
+        return bitmap;
+    }
+
+    private Map<String, Bitmap> createValidAttachment() {
+        String attachmentId = UUID.randomUUID().toString();
+        Bitmap bitmap = createBitmap();
+
+        Map<String, Bitmap> bitmaps = new HashMap<String, Bitmap>();
+        bitmaps.put(attachmentId, bitmap);
+
+        return bitmaps;
+    }
+
+    public void testAddAttachmentsForCallWithNullContext() throws Exception {
+        try {
+            Map<String, Bitmap> attachments = createValidAttachment();
+            storeUnderTest.addAttachmentsForCall(null, CALL_ID, attachments);
+            fail("expected exception");
+        } catch (NullPointerException ex) {
+            assertTrue(ex.getMessage().contains("context"));
+        }
+    }
+
+    public void testAddAttachmentsForCallWithNullCallId() throws Exception {
+        try {
+            Map<String, Bitmap> attachments = createValidAttachment();
+            storeUnderTest.addAttachmentsForCall(getActivity(), null, attachments);
+            fail("expected exception");
+        } catch (NullPointerException ex) {
+            assertTrue(ex.getMessage().contains("callId"));
+        }
+    }
+
+    public void testAddAttachmentsForCallWithNullBitmap() throws Exception {
+        try {
+            Map<String, Bitmap> attachments = new HashMap<String, Bitmap>();
+            attachments.put(ATTACHMENT_NAME, null);
+
+            storeUnderTest.addAttachmentsForCall(getActivity(), CALL_ID, attachments);
+            fail("expected exception");
+        } catch (NullPointerException ex) {
+            assertTrue(ex.getMessage().contains("imageAttachments"));
+        }
+    }
+
+    public void testAddAttachmentsForCallWithEmptyAttachmentName() throws Exception {
+        try {
+            Map<String, Bitmap> attachments = new HashMap<String, Bitmap>();
+            attachments.put("", createBitmap());
+
+            storeUnderTest.addAttachmentsForCall(getActivity(), CALL_ID, attachments);
+            fail("expected exception");
+        } catch (IllegalArgumentException ex) {
+            assertTrue(ex.getMessage().contains("imageAttachments"));
+        }
+    }
+
+    public void testAddAttachmentsForCall() throws Exception {
+
+    }
+
+    public void testCleanupAttachmentsForCall() throws Exception {
+
+    }
+
+    public void testGetAttachmentsDirectory() throws Exception {
+        File dir = NativeAppCallAttachmentStore.getAttachmentsDirectory(getActivity());
+        assertNotNull(dir);
+        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
+    }
+
+    public void testGetAttachmentsDirectoryForCall() throws Exception {
+        storeUnderTest.ensureAttachmentsDirectoryExists(getActivity());
+        File dir = storeUnderTest.getAttachmentsDirectoryForCall(CALL_ID, false);
+        assertNotNull(dir);
+        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
+        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
+    }
+
+    public void testGetAttachmentFile() throws Exception {
+        storeUnderTest.ensureAttachmentsDirectoryExists(getActivity());
+        File dir = storeUnderTest.getAttachmentFile(CALL_ID, ATTACHMENT_NAME, false);
+        assertNotNull(dir);
+        assertTrue(dir.getAbsolutePath().contains(NativeAppCallAttachmentStore.ATTACHMENTS_DIR_NAME));
+        assertTrue(dir.getAbsolutePath().contains(CALL_ID.toString()));
+        assertTrue(dir.getAbsolutePath().contains(ATTACHMENT_NAME.toString()));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java b/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
new file mode 100644
index 000000000..a2aa79a05
--- /dev/null
+++ b/facebook/tests/src/com/facebook/NativeAppCallContentProviderTest.java
@@ -0,0 +1,155 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.net.Uri;
+import android.os.ParcelFileDescriptor;
+import android.util.Pair;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+
+public class NativeAppCallContentProviderTest extends FacebookTestCase {
+    private static final String APP_ID = "12345";
+    private static final UUID CALL_ID = UUID.randomUUID();
+
+    private NativeAppCallContentProvider providerUnderTest;
+    private StubAttachmentStore stubAttachmentStore;
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        stubAttachmentStore = new StubAttachmentStore();
+        providerUnderTest = new NativeAppCallContentProvider(stubAttachmentStore);
+    }
+
+    public void testGetAttachmentUrl() {
+        String url = NativeAppCallContentProvider.getAttachmentUrl(APP_ID, CALL_ID, "foo");
+        assertEquals("content://com.facebook.app.NativeAppCallContentProvider" + APP_ID + "/" + CALL_ID + "/foo", url);
+    }
+
+    public void testOnCreate() throws Exception {
+        assertTrue(providerUnderTest.onCreate());
+    }
+
+    public void testQuery() throws Exception {
+        assertNull(providerUnderTest.query(null, null, null, null, null));
+    }
+
+    public void testGetType() throws Exception {
+        assertNull(providerUnderTest.getType(null));
+    }
+
+    public void testInsert() throws Exception {
+        assertNull(providerUnderTest.insert(null, null));
+    }
+
+    public void testDelete() throws Exception {
+        assertEquals(0, providerUnderTest.delete(null, null, null));
+    }
+
+    public void testUpdate() throws Exception {
+        assertEquals(0, providerUnderTest.update(null, null, null, null));
+    }
+
+    @SuppressWarnings("unused")
+    public void testOpenFileWithNullUri() throws Exception {
+        try {
+            ParcelFileDescriptor pfd = providerUnderTest.openFile(null, "r");
+            fail("expected FileNotFoundException");
+        } catch (FileNotFoundException e) {
+        }
+    }
+
+    @SuppressWarnings("unused")
+    public void testOpenFileWithBadPath() throws Exception {
+        try {
+            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/"), "r");
+            fail("expected FileNotFoundException");
+        } catch (FileNotFoundException e) {
+        }
+    }
+
+    @SuppressWarnings("unused")
+    public void testOpenFileWithoutCallIdAndAttachment() throws Exception {
+        try {
+            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo"), "r");
+            fail("expected FileNotFoundException");
+        } catch (FileNotFoundException e) {
+        }
+    }
+
+    @SuppressWarnings("unused")
+    public void testOpenFileWithBadCallID() throws Exception {
+        try {
+            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/foo/bar"), "r");
+            fail("expected FileNotFoundException");
+        } catch (FileNotFoundException e) {
+        }
+    }
+
+    public void testOpenFileWithUnknownUri() throws Exception {
+        try {
+            String callId = UUID.randomUUID().toString();
+            ParcelFileDescriptor pfd = providerUnderTest.openFile(Uri.parse("/" + callId + "/bar"), "r");
+            fail("expected FileNotFoundException");
+        } catch (FileNotFoundException e) {
+        }
+    }
+
+    public void testOpenFileWithKnownUri() throws Exception {
+        String attachmentName = "hi";
+
+        stubAttachmentStore.addAttachment(CALL_ID, attachmentName);
+        Uri uri = Uri.parse(NativeAppCallContentProvider.getAttachmentUrl(APP_ID, CALL_ID, attachmentName));
+
+        ParcelFileDescriptor pfd = providerUnderTest.openFile(uri, "r");
+
+        assertNotNull(pfd);
+        pfd.close();
+    }
+
+    class StubAttachmentStore implements NativeAppCallContentProvider.AttachmentDataSource {
+        private List<Pair<UUID, String>> attachments = new ArrayList<Pair<UUID, String>>();
+        private static final String DUMMY_FILE_NAME = "dummyfile";
+
+        public void addAttachment(UUID callId, String attachmentName) {
+            attachments.add(new Pair<UUID, String>(callId, attachmentName));
+        }
+
+        @Override
+        public File openAttachment(UUID callId, String attachmentName) throws FileNotFoundException {
+            if (attachments.contains(new Pair<UUID, String>(callId, attachmentName))) {
+                File cacheDir = getActivity().getCacheDir();
+                File dummyFile = new File(cacheDir, DUMMY_FILE_NAME);
+                if (!dummyFile.exists()) {
+                    try {
+                        dummyFile.createNewFile();
+                    } catch (IOException e) {
+                    }
+                }
+
+                return dummyFile;
+            }
+            throw new FileNotFoundException();
+        }
+    }
+}
diff --git a/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
new file mode 100644
index 000000000..b65b9851f
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
@@ -0,0 +1,65 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import static android.test.MoreAsserts.*;
+
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.ProgressNoopOutputStream;
+
+import java.lang.Exception;
+import java.lang.Override;
+
+public class ProgressNoopOutputStreamTests extends AndroidTestCase {
+    private ProgressNoopOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        stream = new ProgressNoopOutputStream(null);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getMaxProgress());
+        assertEmpty(stream.getProgressMap());
+    }
+
+    @SmallTest
+    public void testWriting() {
+        assertEquals(0, stream.getMaxProgress());
+
+        stream.write(0);
+        assertEquals(1, stream.getMaxProgress());
+
+        final byte[] buf = new byte[8];
+
+        stream.write(buf);
+        assertEquals(9, stream.getMaxProgress());
+
+        stream.write(buf, 2, 2);
+        assertEquals(11, stream.getMaxProgress());
+
+        stream.addProgress(16);
+        assertEquals(27, stream.getMaxProgress());
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
new file mode 100644
index 000000000..fa3f7ffd3
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
@@ -0,0 +1,100 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.Request;
+import com.facebook.RequestBatch;
+import com.facebook.RequestProgress;
+
+import static android.test.MoreAsserts.*;
+
+import java.io.ByteArrayOutputStream;
+import java.lang.Exception;
+import java.lang.Override;
+import java.util.HashMap;
+import java.util.Map;
+
+public class ProgressOutputStreamTests extends AndroidTestCase {
+    private static final int MAX_PROGRESS = 10;
+
+    private Request r1, r2;
+    private Map<Request, RequestProgress> progressMap;
+    private RequestBatch requests;
+    private ProgressOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        r1 = new Request(null, "4");
+        r2 = new Request(null, "4");
+
+        progressMap = new HashMap<Request, RequestProgress>();
+        progressMap.put(r1, new RequestProgress(null, r1));
+        progressMap.get(r1).addToMax(5);
+        progressMap.put(r2, new RequestProgress(null, r2));
+        progressMap.get(r2).addToMax(5);
+
+        requests = new RequestBatch(r1, r2);
+
+        ByteArrayOutputStream backing = new ByteArrayOutputStream();
+        stream = new ProgressOutputStream(backing, requests, progressMap, MAX_PROGRESS);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getBatchProgress());
+        assertEquals(MAX_PROGRESS, stream.getMaxProgress());
+
+        for (RequestProgress p : progressMap.values()) {
+            assertEquals(0, p.getProgress());
+            assertEquals(5, p.getMaxProgress());
+        }
+    }
+
+    @SmallTest
+    public void testWriting() {
+        try {
+            assertEquals(0, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r1);
+            stream.write(0);
+            assertEquals(1, stream.getBatchProgress());
+
+            final byte[] buf = new byte[4];
+            stream.write(buf);
+            assertEquals(5, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r2);
+            stream.write(buf, 2, 2);
+            stream.write(buf, 1, 3);
+            assertEquals(MAX_PROGRESS, stream.getBatchProgress());
+
+            assertEquals(stream.getMaxProgress(), stream.getBatchProgress());
+            assertEquals(progressMap.get(r1).getMaxProgress(), progressMap.get(r1).getProgress());
+            assertEquals(progressMap.get(r2).getMaxProgress(), progressMap.get(r2).getProgress());
+        }
+        catch (Exception ex) {
+            fail(ex.getMessage());
+        }
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index dc60fe2c0..bdb34a78b 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -35,6 +35,7 @@
 import java.util.List;
 
 public class RequestTests extends FacebookTestCase {
+    private final static String TEST_OG_TYPE = "facebooksdktests:test";
 
     @SmallTest
     @MediumTest
@@ -125,13 +126,136 @@ public void testCreatePlacesSearchRequestWithSearchText() {
     @LargeTest
     public void testCreatePlacesSearchRequestRequiresLocationOrSearchText() {
         try {
-            Request request = Request.newPlacesSearchRequest(null, null, 1000, 50, null, null);
+            Request.newPlacesSearchRequest(null, null, 1000, 50, null, null);
             fail("expected exception");
         } catch (FacebookException exception) {
             // Success
         }
     }
 
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequestRequiresObject() {
+        try {
+            Request.newPostOpenGraphObjectRequest(null, null, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequestRequiresObjectType() {
+        try {
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost(null);
+            Request.newPostOpenGraphObjectRequest(null, object, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequestRequiresNonEmptyObjectType() {
+        try {
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost("");
+            object.setTitle("bar");
+            Request.newPostOpenGraphObjectRequest(null, object, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequestRequiresTitle() {
+        try {
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost("foo");
+            Request.newPostOpenGraphObjectRequest(null, object, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequestRequiresNonEmptyTitle() {
+        try {
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost("foo");
+            object.setTitle("");
+            Request.newPostOpenGraphObjectRequest(null, object, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphObjectRequest() {
+        OpenGraphObject object = OpenGraphObject.Factory.createForPost("foo");
+        object.setTitle("bar");
+        Request request = Request.newPostOpenGraphObjectRequest(null, object, null);
+        assertNotNull(request);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphActionRequestRequiresAction() {
+        try {
+            Request.newPostOpenGraphActionRequest(null, null, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphActionRequestRequiresActionType() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost(null);
+            Request.newPostOpenGraphActionRequest(null, action, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphActionRequestRequiresNonEmptyActionType() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("");
+            Request.newPostOpenGraphActionRequest(null, action, null);
+            fail("expected exception");
+        } catch (FacebookException exception) {
+            // Success
+        }
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNewPostOpenGraphActionRequest() {
+        OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+        Request request = Request.newPostOpenGraphActionRequest(null, action, null);
+        assertNotNull(request);
+    }
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -422,6 +546,67 @@ public void testExecutePlaceRequestWithLocationAndSearchText() {
         assertNotNull(results);
     }
 
+    private String executePostOpenGraphRequest() {
+        TestSession session = openTestSessionWithSharedUser();
+
+        GraphObject data = GraphObject.Factory.create();
+        data.setProperty("a_property", "hello");
+
+        Request request = Request.newPostOpenGraphObjectRequest(session, TEST_OG_TYPE, "a title",
+                "http://www.facebook.com", "http://www.facebook.com/zzzzzzzzzzzzzzzzzzz", "a description", data, null);
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+
+        assertNull(response.getError());
+
+        GraphObject graphResult = response.getGraphObject();
+        assertNotNull(graphResult);
+        assertNotNull(graphResult.getProperty("id"));
+
+        return (String) graphResult.getProperty("id");
+    }
+
+    @LargeTest
+    public void testExecutePostOpenGraphRequest() {
+        executePostOpenGraphRequest();
+    }
+
+    @LargeTest
+    public void testDeleteObjectRequest() {
+        String id = executePostOpenGraphRequest();
+
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = Request.newDeleteObjectRequest(session, id, null);
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+
+        assertNull(response.getError());
+
+        GraphObject result = response.getGraphObject();
+        assertNotNull(result);
+
+        assertTrue((Boolean) result.getProperty(Response.NON_JSON_RESPONSE_PROPERTY));
+    }
+
+    @LargeTest
+    public void testUpdateOpenGraphObjectRequest() {
+        String id = executePostOpenGraphRequest();
+
+        GraphObject data = GraphObject.Factory.create();
+        data.setProperty("a_property", "goodbye");
+
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = Request.newUpdateOpenGraphObjectRequest(session, id, "another title", null,
+                "http://www.facebook.com/aaaaaaaaaaaaaaaaa", "another description", data, null);
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+
+        assertNull(response.getError());
+
+        GraphObject result = response.getGraphObject();
+        assertNotNull(result);
+    }
+
     @LargeTest
     public void testExecuteUploadPhoto() {
         TestSession session = openTestSessionWithSharedUser();
@@ -500,7 +685,7 @@ public void testUploadVideoFile() throws IOException, URISyntaxException {
     public void testPostStatusUpdate() {
         TestSession session = openTestSessionWithSharedUser();
 
-        GraphObject statusUpdate = createStatusUpdate();
+        GraphObject statusUpdate = createStatusUpdate("");
 
         GraphObject retrievedStatusUpdate = postGetAndAssert(session, "me/feed", statusUpdate);
 
@@ -547,6 +732,57 @@ public void onCompleted(Response response) {
         assertTrue(calledBack.size() == 1);
     }
 
+    @MediumTest
+    @LargeTest
+    public void testOnProgressCallbackIsCalled() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
+
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                calledBack.add(true);
+            }
+        });
+
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+        assertFalse(calledBack.isEmpty());
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testLastOnProgressCallbackIsCalledOnce() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
+
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) calledBack.add(true);
+                else if (current > max) calledBack.clear();
+            }
+        });
+
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+        assertEquals(1, calledBack.size());
+    }
+
     @MediumTest
     @LargeTest
     public void testBatchTimeoutIsApplied() {
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
index ce16bbf5c..3f5a9f6a6 100644
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ b/facebook/tests/src/com/facebook/SessionTests.java
@@ -775,12 +775,9 @@ public void testOpenActiveSessionWithNativeLinkingIntent() {
     @MediumTest
     @LargeTest
     public void testOpeningSessionWithPendingRequestResultsInExceptionCallback() {
-        ArrayList<String> permissions = new ArrayList<String>();
         MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
         SessionStatusCallbackRecorder statusRecorder = new SessionStatusCallbackRecorder();
         ScriptedSession session = createScriptedSessionOnBlockerThread(cache);
-        AccessToken openToken = AccessToken
-                .createFromString("A token of thanks", permissions, AccessTokenSource.TEST_USER);
 
         // Verify state with no token in cache
         assertEquals(SessionState.CREATED, session.getState());
diff --git a/facebook/tests/src/com/facebook/SessionTestsBase.java b/facebook/tests/src/com/facebook/SessionTestsBase.java
index 57bc0b194..abbb6d2c3 100644
--- a/facebook/tests/src/com/facebook/SessionTestsBase.java
+++ b/facebook/tests/src/com/facebook/SessionTestsBase.java
@@ -16,17 +16,10 @@
 
 package com.facebook;
 
-import android.content.BroadcastReceiver;
 import android.content.Context;
-import android.content.Intent;
 import android.os.Bundle;
-import android.os.ConditionVariable;
 import android.os.Looper;
 import com.facebook.internal.Utility;
-import com.facebook.model.GraphMultiResult;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
-import com.facebook.model.GraphUser;
 
 import java.util.*;
 import java.util.concurrent.BlockingQueue;
@@ -266,51 +259,4 @@ public void clear() {
         }
     }
 
-    static class WaitForBroadcastReceiver extends BroadcastReceiver {
-        static int idGenerator = 0;
-        final int id = idGenerator++;
-
-        ConditionVariable condition = new ConditionVariable(true);
-        int expectCount;
-        int actualCount;
-
-        public void incrementExpectCount() {
-            incrementExpectCount(1);
-        }
-
-        public void incrementExpectCount(int n) {
-            expectCount += n;
-            if (actualCount < expectCount) {
-                condition.close();
-            }
-        }
-
-        public void waitForExpectedCalls() {
-            if (!condition.block(DEFAULT_TIMEOUT_MILLISECONDS)) {
-                assertTrue(false);
-            }
-        }
-
-        public static void incrementExpectCounts(WaitForBroadcastReceiver... receivers) {
-            for (WaitForBroadcastReceiver receiver : receivers) {
-                receiver.incrementExpectCount();
-            }
-        }
-
-        public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
-            for (WaitForBroadcastReceiver receiver : receivers) {
-                receiver.waitForExpectedCalls();
-            }
-        }
-
-        @Override
-        public void onReceive(Context context, Intent intent) {
-            if (++actualCount == expectCount) {
-                condition.open();
-            }
-            assertTrue(actualCount <= expectCount);
-            assertEquals("BroadcastReceiver should receive on main UI thread",
-                    Thread.currentThread(), Looper.getMainLooper().getThread());
-        }
-    }
 }
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
index 2a4fb7c3a..435de6d40 100644
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ b/facebook/tests/src/com/facebook/SettingsTests.java
@@ -21,6 +21,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
 
 import java.io.IOException;
@@ -83,9 +84,19 @@ public void testLogdException() {
         }
 
         try {
-            throw new IOException(null);
+            throw new IOException((String)null);
         } catch (IOException e) {
             Utility.logd("SettingsTest", e);
         }
     }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testFacebookDomain() {
+        Settings.setFacebookDomain("beta.facebook.com");
+
+        String graphUrlBase = ServerProtocol.getGraphUrlBase();
+        assertEquals("https://graph.beta.facebook.com", graphUrlBase);
+
+        Settings.setFacebookDomain("facebook.com");
+    }
 }
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
index c88f24e23..8c72f4567 100644
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ b/facebook/tests/src/com/facebook/TestSessionTests.java
@@ -79,7 +79,7 @@ public void testSharedUserDoesntCreateUnnecessaryUsers() throws Throwable {
 
         int endingUserCount = countTestUsers();
 
-        assertSame(startingUserCount, endingUserCount);
+        assertEquals(startingUserCount, endingUserCount);
     }
 
     // This test is currently unreliable, I believe due to timing/replication issues that cause the
@@ -96,13 +96,13 @@ public void failing_testPrivateUserIsDeletedOnSessionClose() throws Throwable {
 
         int sessionOpenUserCount = countTestUsers();
 
-        assertSame(startingUserCount + 1, sessionOpenUserCount);
+        assertEquals(startingUserCount + 1, sessionOpenUserCount);
 
         session.close();
 
         int endingUserCount = countTestUsers();
 
-        assertSame(startingUserCount, endingUserCount);
+        assertEquals(startingUserCount, endingUserCount);
     }
 
     @SmallTest
diff --git a/facebook/tests/src/com/facebook/TestUtils.java b/facebook/tests/src/com/facebook/TestUtils.java
index 08ffadda2..4a67e9d4a 100644
--- a/facebook/tests/src/com/facebook/TestUtils.java
+++ b/facebook/tests/src/com/facebook/TestUtils.java
@@ -17,6 +17,7 @@
 package com.facebook;
 
 import android.os.Bundle;
+import com.facebook.internal.FileLruCache;
 import junit.framework.Assert;
 
 import java.io.*;
@@ -24,6 +25,8 @@
 import java.util.List;
 
 public class TestUtils {
+    private static long CACHE_CLEAR_TIMEOUT = 3000;
+
     public static <T extends Serializable> T serializeAndUnserialize(T t) {
         try {
             ByteArrayOutputStream os = new ByteArrayOutputStream();
@@ -92,4 +95,23 @@ static void assertEqualContents(Bundle a, Bundle b) {
             }
         }
     }
+
+    public static void clearFileLruCache(final FileLruCache cache) throws InterruptedException {
+        // since the cache clearing happens in a separate thread, we need to wait until
+        // the clear is complete before we can check for the existence of the old files
+        synchronized (cache) {
+            cache.clearCache();
+            Settings.getExecutor().execute(new Runnable() {
+                @Override
+                public void run() {
+                    synchronized (cache) {
+                        cache.notifyAll();
+                    }
+                }
+            });
+            cache.wait(CACHE_CLEAR_TIMEOUT);
+        }
+        // sleep a little more just to make sure all the files are deleted.
+        Thread.sleep(CACHE_CLEAR_TIMEOUT);
+    }
 }
diff --git a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
new file mode 100644
index 000000000..412917b8b
--- /dev/null
+++ b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
@@ -0,0 +1,85 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.ConditionVariable;
+import android.os.Looper;
+import junit.framework.Assert;
+
+import java.util.ArrayList;
+import java.util.List;
+
+class WaitForBroadcastReceiver extends BroadcastReceiver {
+    static int idGenerator = 0;
+    final int id = idGenerator++;
+
+    ConditionVariable condition = new ConditionVariable(true);
+    int expectCount;
+    int actualCount;
+    List<Intent> receivedIntents = new ArrayList<Intent>();
+
+    public void incrementExpectCount() {
+        incrementExpectCount(1);
+    }
+
+    public void incrementExpectCount(int n) {
+        expectCount += n;
+        if (actualCount < expectCount) {
+            condition.close();
+        }
+    }
+
+    public void waitForExpectedCalls() {
+        this.waitForExpectedCalls(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS);
+    }
+
+    public void waitForExpectedCalls(long timeoutMillis) {
+        if (!condition.block(timeoutMillis)) {
+            Assert.assertTrue(false);
+        }
+    }
+
+    public List<Intent> getReceivedIntents() {
+        return receivedIntents;
+    }
+
+    public static void incrementExpectCounts(WaitForBroadcastReceiver... receivers) {
+        for (WaitForBroadcastReceiver receiver : receivers) {
+            receiver.incrementExpectCount();
+        }
+    }
+
+    public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
+        for (WaitForBroadcastReceiver receiver : receivers) {
+            receiver.waitForExpectedCalls();
+        }
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        if (++actualCount == expectCount) {
+            condition.open();
+        }
+        receivedIntents.add(intent);
+        Assert.assertTrue("expecting " + expectCount + "broadcasts, but received " + actualCount,                actualCount <= expectCount);
+        Assert.assertEquals("BroadcastReceiver should receive on main UI thread",
+                Thread.currentThread(), Looper.getMainLooper().getThread());
+    }
+}
diff --git a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
index 9fe648317..d4e24b052 100644
--- a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
@@ -20,6 +20,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.TestUtils;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -31,7 +32,7 @@
     private static final Random random = new Random();
 
     @SmallTest @MediumTest @LargeTest
-    public void testCacheOutputStream() throws IOException {
+    public void testCacheOutputStream() throws Exception {
         int dataSize = 1024;
         byte[] data = generateBytes(dataSize);
         String key = "a";
@@ -41,11 +42,11 @@ public void testCacheOutputStream() throws IOException {
 
         put(cache, key, data);
         checkValue(cache, key, data);
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
     }
 
     @SmallTest @MediumTest @LargeTest
-    public void testCacheInputStream() throws IOException {
+    public void testCacheInputStream() throws Exception {
         int dataSize = 1024;
         byte[] data = generateBytes(dataSize);
         String key = "a";
@@ -53,7 +54,7 @@ public void testCacheInputStream() throws IOException {
 
         // Limit to 2x to allow for extra header data
         FileLruCache cache = new FileLruCache(getContext(), "testCacheInputStream", limitCacheSize(2*dataSize));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         InputStream wrapped = cache.interceptAndPut(key, stream);
         consumeAndClose(wrapped);
@@ -61,25 +62,51 @@ public void testCacheInputStream() throws IOException {
     }
 
     @SmallTest @MediumTest @LargeTest
-    public void testCacheClear() throws IOException {
+    public void testCacheClear() throws Exception {
         int dataSize = 1024;
         byte[] data = generateBytes(dataSize);
         String key = "a";
 
         // Limit to 2x to allow for extra header data
         FileLruCache cache = new FileLruCache(getContext(), "testCacheClear", limitCacheSize(2*dataSize));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         put(cache, key, data);
         checkValue(cache, key, data);
 
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
         assertEquals(false, hasValue(cache, key));
         assertEquals(0, cache.sizeInBytesForTest());
     }
 
     @SmallTest @MediumTest @LargeTest
-    public void testSizeInBytes() throws IOException {
+    public void testCacheClearMidBuffer() throws Exception {
+        int dataSize = 1024;
+        byte[] data = generateBytes(dataSize);
+        String key = "a";
+        String key2 = "b";
+
+        // Limit to 2x to allow for extra header data
+        FileLruCache cache = new FileLruCache(getContext(), "testCacheClear", limitCacheSize(2*dataSize));
+        TestUtils.clearFileLruCache(cache);
+
+        put(cache, key, data);
+        checkValue(cache, key, data);
+        OutputStream stream = cache.openPutStream(key2);
+        Thread.sleep(1000);
+
+        TestUtils.clearFileLruCache(cache);
+
+        stream.write(data);
+        stream.close();
+
+        assertEquals(false, hasValue(cache, key));
+        assertEquals(false, hasValue(cache, key2));
+        assertEquals(0, cache.sizeInBytesForTest());
+    }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testSizeInBytes() throws Exception {
         int count = 17;
         int dataSize = 53;
         int cacheSize = count * dataSize;
@@ -87,7 +114,7 @@ public void testSizeInBytes() throws IOException {
 
         // Limit to 2x to allow for extra header data
         FileLruCache cache = new FileLruCache(getContext(), "testSizeInBytes", limitCacheSize(2*cacheSize));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         for (int i = 0; i < count; i++) {
             put(cache, i, data);
@@ -107,7 +134,7 @@ public void testSizeInBytes() throws IOException {
     }
 
     @MediumTest @LargeTest
-    public void testCacheSizeLimit() throws IOException {
+    public void testCacheSizeLimit() throws Exception {
         int count = 64;
         int dataSize = 32;
         int cacheSize = count * dataSize / 2;
@@ -116,7 +143,7 @@ public void testCacheSizeLimit() throws IOException {
         // Here we do not set the limit to 2x to make sure we hit the limit well before we have
         // added all the data.
         FileLruCache cache = new FileLruCache(getContext(), "testCacheSizeLimit", limitCacheSize(cacheSize));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         for (int i = 0; i < count; i++) {
             put(cache, i, data);
@@ -130,6 +157,9 @@ public void testCacheSizeLimit() throws IOException {
             assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
@@ -149,7 +179,7 @@ public void testCacheSizeLimit() throws IOException {
     }
 
     @MediumTest @LargeTest
-    public void testCacheCountLimit() throws IOException {
+    public void testCacheCountLimit() throws Exception {
         int count = 64;
         int dataSize = 32;
         int cacheCount = count / 2;
@@ -157,12 +187,15 @@ public void testCacheCountLimit() throws IOException {
 
         // Here we only limit by count, and we allow half of the entries.
         FileLruCache cache = new FileLruCache(getContext(), "testCacheCountLimit", limitCacheCount(cacheCount));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         for (int i = 0; i < count; i++) {
             put(cache, i, data);
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
@@ -189,7 +222,7 @@ public void testCacheLru() throws IOException, InterruptedException {
 
         // Limit by count, and allow all the keep keys plus one other.
         FileLruCache cache = new FileLruCache(getContext(), "testCacheLru", limitCacheCount(keepCount + 1));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         for (int i = 0; i < keepCount; i++) {
             put(cache, i, data);
@@ -227,7 +260,7 @@ public void testConcurrentWritesToSameKey() throws IOException, InterruptedExcep
 
         final FileLruCache cache = new FileLruCache(
                 getContext(), "testConcurrentWritesToSameKey", limitCacheCount(count+1));
-        cache.clearForTest();
+        TestUtils.clearFileLruCache(cache);
 
         Runnable run = new Runnable() {
             @Override
diff --git a/facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
similarity index 88%
rename from facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java
rename to facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
index 6c0300e03..6cd705cf2 100644
--- a/facebook/tests/src/com/facebook/widget/ImageResponseCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.content.Context;
 import android.graphics.Bitmap;
@@ -22,24 +22,25 @@
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
+import com.facebook.TestUtils;
 import com.facebook.internal.Utility;
-import com.facebook.widget.ImageResponseCache;
+import com.facebook.internal.ImageResponseCache;
 
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.HttpURLConnection;
-import java.net.URL;
+import java.net.URI;
 import java.nio.ByteBuffer;
 import java.util.Arrays;
 
 public final class ImageResponseCacheTests extends AndroidTestCase {
 
     @MediumTest @LargeTest
-    public void testImageCaching() throws IOException {
+    public void testImageCaching() throws Exception {
         // In unit test, since we need verify first access the image is not in cache
         // we need clear the cache first
-        ImageResponseCache.getCache(safeGetContext()).clearForTest();
-        String imgUrl = "http://sphotos-b.xx.fbcdn.net/hphotos-snc7/300716_163831917043403_1106723719_n.jpg";
+        TestUtils.clearFileLruCache(ImageResponseCache.getCache(safeGetContext()));
+        String imgUrl = "http://profile.ak.fbcdn.net/hprofile-ak-frc1/369438_100003049100322_615834658_n.jpg";
         
         Bitmap bmp1 = readImage(imgUrl, false);
         Bitmap bmp2 = readImage(imgUrl, true);
@@ -61,14 +62,14 @@ private Bitmap readImage(String uri, boolean expectedFromCache) {
         InputStream istream = null;
         try
         {
-            URL url = new URL(uri);
+            URI url = new URI(uri);
             // Check if the cache contains value for this url
             boolean isInCache = (ImageResponseCache.getCache(safeGetContext()).get(url.toString()) != null);
             assertTrue(isInCache == expectedFromCache);
             // Read the image
             istream = ImageResponseCache.getCachedImageStream(url, safeGetContext());
             if (istream == null) {
-                HttpURLConnection connection = (HttpURLConnection)url.openConnection();
+                HttpURLConnection connection = (HttpURLConnection)url.toURL().openConnection();
                 istream = ImageResponseCache.interceptAndCacheImageStream(safeGetContext(), connection);
             }
             assertTrue(istream != null);
diff --git a/facebook/tests/src/com/facebook/widget/WorkQueueTests.java b/facebook/tests/src/com/facebook/internal/WorkQueueTests.java
similarity index 97%
rename from facebook/tests/src/com/facebook/widget/WorkQueueTests.java
rename to facebook/tests/src/com/facebook/internal/WorkQueueTests.java
index e6ce1e2d7..793911245 100644
--- a/facebook/tests/src/com/facebook/widget/WorkQueueTests.java
+++ b/facebook/tests/src/com/facebook/internal/WorkQueueTests.java
@@ -14,13 +14,13 @@
  * limitations under the License.
  */
 
-package com.facebook.widget;
+package com.facebook.internal;
 
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
 import com.facebook.FacebookTestCase;
-import com.facebook.widget.WorkQueue;
+import com.facebook.internal.WorkQueue;
 
 import java.util.ArrayList;
 import java.util.concurrent.Executor;
@@ -295,7 +295,7 @@ void waitForDone() {
         }
     }
 
-    class ScriptableExecutor implements Executor {
+    static class ScriptableExecutor implements Executor {
         private final ArrayList<Runnable> runnables = new ArrayList<Runnable>();
 
         int getPendingCount() {
@@ -323,10 +323,10 @@ public void execute(Runnable runnable) {
         }
     }
 
-    class CountingRunnable implements Runnable {
-        volatile int runCount = 0;
+    static class CountingRunnable implements Runnable {
+        private int runCount = 0;
 
-        int getRunCount() {
+        synchronized int getRunCount() {
             return runCount;
         }
 
diff --git a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
index f50d3bac6..8b069b7ce 100644
--- a/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
+++ b/facebook/tests/src/com/facebook/model/GraphObjectFactoryTests.java
@@ -442,6 +442,48 @@ public void testSetProperty() throws JSONException {
         assertEquals("purple elephants", jsonObject.getString("don't imagine"));
     }
 
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetPropertyWithGraphObject() throws JSONException {
+        JSONObject jsonObject = new JSONObject();
+        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
+
+        GraphObject nestedObject = GraphObject.Factory.create();
+        graphObject.setProperty("foo", nestedObject);
+
+        JSONObject nestedJsonObject = jsonObject.getJSONObject("foo");
+        assertNotNull(nestedJsonObject);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetPropertyWithGraphObjectList() throws JSONException {
+        JSONObject jsonObject = new JSONObject();
+        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
+
+        GraphObjectList<GraphObject> nestedList = GraphObject.Factory.createList(GraphObject.class);
+        graphObject.setProperty("foo", nestedList);
+
+        JSONArray nestedJsonArray = jsonObject.getJSONArray("foo");
+        assertNotNull(nestedJsonArray);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetPropertyWithList() throws JSONException {
+        JSONObject jsonObject = new JSONObject();
+        GraphObject graphObject = GraphObject.Factory.create(jsonObject);
+
+        List<GraphObject> nestedList = new ArrayList<GraphObject>();
+        graphObject.setProperty("foo", nestedList);
+
+        JSONArray nestedJsonArray = jsonObject.getJSONArray("foo");
+        assertNotNull(nestedJsonArray);
+    }
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -1141,5 +1183,186 @@ public void testCamelCaseToLowercase() {
                 .convertCamelCaseToLowercaseWithUnderscores("helloWorld"));
     }
 
+    interface NestedObject extends GraphObject {
+        String getId();
+        void setId(String id);
+
+        String getUrl();
+        void setUrl(String url);
+    }
+
+    interface ObjectWithNestedObject extends GraphObject {
+        // Single-object version
+        NestedObject getNestedObject();
+        void setNestedObject(NestedObject nestedObject);
+
+        @PropertyName("nested_object")
+        @CreateGraphObject("id")
+        void setNestedObjectById(String id);
+        @PropertyName("nested_object")
+        @CreateGraphObject("url")
+        void setNestedObjectByUrl(String url);
+
+        // Test overloaded name
+        @CreateGraphObject("id")
+        void setNestedObject(String id);
+
+        // List version
+        GraphObjectList<NestedObject> getNestedObjects();
+        void setNestedObjects(List<NestedObject> nestedObjects);
+
+        @PropertyName("nested_objects")
+        @CreateGraphObject("id")
+        void setNestedObjectsById(List<String> id);
+        @PropertyName("nested_objects")
+        @CreateGraphObject("url")
+        void setNestedObjectsByUrl(List<String> url);
+
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testGetPropertyAs() throws JSONException {
+        JSONObject nestedObject = new JSONObject();
+        nestedObject.put("id", "55");
+
+        GraphObject containingObject = GraphObject.Factory.create();
+        containingObject.setProperty("nested", nestedObject);
+
+        NestedObject nestedGraphObject = containingObject.getPropertyAs("nested", NestedObject.class);
+        assertNotNull(nestedGraphObject);
+        assertEquals("55", nestedGraphObject.getId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testGetPropertyAsList() throws JSONException {
+        JSONObject nestedObject = new JSONObject();
+        nestedObject.put("id", "55");
+
+        JSONArray nestedArray = new JSONArray(Arrays.asList(new JSONObject[]{nestedObject}));
+        GraphObject containingObject = GraphObject.Factory.create();
+        containingObject.setProperty("nested", nestedArray);
+
+        GraphObjectList<NestedObject> nestedGraphObjects = containingObject.getPropertyAsList("nested",
+                NestedObject.class);
+        assertNotNull(nestedGraphObjects);
+        assertEquals("55", nestedGraphObjects.get(0).getId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetNestedObject() {
+        ObjectWithNestedObject object = GraphObject.Factory.create(ObjectWithNestedObject.class);
+        object.setNestedObjectById("77");
+
+        NestedObject nestedObject = object.getNestedObject();
+        assertNotNull(nestedObject);
+        assertEquals("77", nestedObject.getId());
+
+        object.setNestedObjectByUrl("http://www.example.com");
+
+        nestedObject = object.getNestedObject();
+        assertNotNull(nestedObject);
+        assertEquals("http://www.example.com", nestedObject.getUrl());
+
+        // Overloaded method
+        object.setNestedObject("77");
+
+        nestedObject = object.getNestedObject();
+        assertNotNull(nestedObject);
+        assertEquals("77", nestedObject.getId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetNestedObjects() {
+        ObjectWithNestedObject object = GraphObject.Factory.create(ObjectWithNestedObject.class);
+        object.setNestedObjectsById(Arrays.asList("77", "88"));
+
+        GraphObjectList<NestedObject> nestedObjects = object.getNestedObjects();
+        assertNotNull(nestedObjects);
+        assertEquals("77", nestedObjects.get(0).getId());
+        assertEquals("88", nestedObjects.get(1).getId());
+
+        object.setNestedObjectsByUrl(Arrays.asList("http://www.example.com/1", "http://www.example.com/2"));
+
+        nestedObjects = object.getNestedObjects();
+        assertNotNull(nestedObjects);
+        assertEquals("http://www.example.com/1", nestedObjects.get(0).getUrl());
+        assertEquals("http://www.example.com/2", nestedObjects.get(1).getUrl());
+    }
+
+    interface GraphObjectWithPrimitives extends GraphObject {
+        boolean getBoolean();
+        void setBoolean(boolean value);
+
+        int getInt();
+        void setInt(int value);
+
+        char getChar();
+        void setChar(char value);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetBooleanProperty() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        graphObject.setBoolean(true);
+        assertEquals(true, graphObject.getBoolean());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testBooleanPropertyDefaultsToFalse() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        assertEquals(false, graphObject.getBoolean());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetNumericProperty() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        graphObject.setInt(5);
+        assertEquals(5, graphObject.getInt());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testNumericPropertyDefaultsToZero() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        assertEquals(0, graphObject.getInt());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetCharProperty() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        graphObject.setChar('z');
+        assertEquals('z', graphObject.getChar());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testCharPropertyDefaultsToZero() {
+        GraphObjectWithPrimitives graphObject = GraphObject.Factory.create(GraphObjectWithPrimitives.class);
+
+        assertEquals(0, graphObject.getChar());
+    }
 
 }
diff --git a/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java b/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java
new file mode 100644
index 000000000..4ba0daee9
--- /dev/null
+++ b/facebook/tests/src/com/facebook/model/OpenGraphActionTests.java
@@ -0,0 +1,264 @@
+package com.facebook.model;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.MediumTest;
+import android.test.suitebuilder.annotation.SmallTest;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+public class OpenGraphActionTests extends AndroidTestCase {
+    private static String ACTION_JSON = "{" +
+            "  \"id\": \"99\", " +
+            "  \"from\": {" +
+            "    \"name\": \"A User\", " +
+            "    \"id\": \"42\"" +
+            "  }, " +
+            "  \"start_time\": \"2013-04-11T02:05:17+0000\", " +
+            "  \"end_time\": \"2013-04-11T03:05:17+0000\", " +
+            "  \"publish_time\": \"2013-04-11T02:05:17+0000\", " +
+            "  \"ref\": \"hello!\", " +
+            "  \"message\": \"a message!\", " +
+            "  \"place\": {" +
+            "    \"id\": \"9999\", " +
+            "    \"name\": \"Some Place\", " +
+            "    \"location\": {" +
+            "      \"latitude\": 37.786130951058, " +
+            "      \"longitude\": -122.40886171765, " +
+            "      \"city\": \"San Francisco\", " +
+            "      \"country\": \"United States\", " +
+            "      \"id\": \"2421836\", " +
+            "      \"zip\": \"94102-2118\", " +
+            "      \"address\": \"5 Any Street\", " +
+            "      \"region\": \"CA\"" +
+            "    } " +
+            "  }, " +
+            "  \"tags\": [" +
+            "    {" +
+            "      \"id\": \"4321\", " +
+            "      \"name\": \"Jim Bob\"" +
+            "    }" +
+            "  ], " +
+            "  \"application\": {" +
+            "    \"name\": \"Awesome App\", " +
+            "    \"namespace\": \"awesome\", " +
+            "    \"id\": \"55\"" +
+            "  }, " +
+            "  \"data\": {" +
+            "    \"thing\": {" +
+            "      \"id\": \"509\", " +
+            "      \"url\": \"http://www.example.com/100\", " +
+            "      \"type\": \"awesome:thing\", " +
+            "      \"title\": \"A thing!\"" +
+            "    }" +
+            "  }, " +
+            "  \"type\": \"awesome:action\", " +
+            "  \"likes\": {" +
+            "    \"count\": 7, " +
+            "    \"can_like\": true, " +
+            "    \"user_likes\": false" +
+            "  }, " +
+            "  \"comments\": {" +
+            "    \"data\": [" +
+            "      {" +
+            "        \"id\": \"2_3\", " +
+            "        \"from\": {" +
+            "          \"name\": \"A Yooser\", " +
+            "          \"id\": \"1001\"" +
+            "        }, " +
+            "        \"message\": \"Here's a comment.\", " +
+            "        \"can_remove\": true, " +
+            "        \"created_time\": \"2013-04-26T23:38:19+0000\", " +
+            "        \"like_count\": 3, " +
+            "        \"user_likes\": false" +
+            "      }" +
+            "    ], " +
+            "    \"paging\": {" +
+            "      \"cursors\": {" +
+            "        \"after\": \"x\", " +
+            "        \"before\": \"x\"" +
+            "      }" +
+            "    }, " +
+            "    \"count\": 1, " +
+            "    \"can_comment\": true, " +
+            "    \"comment_order\": \"chronological\"" +
+            "  }," +
+            "  \"likes\": {" +
+            "    \"data\": [" +
+            "      {" +
+            "        \"id\": \"422\", " +
+            "        \"name\": \"Another User\"" +
+            "      }" +
+            "    ], " +
+            "    \"paging\": {" +
+            "      \"next\": \"https://graph.facebook.com/blah\"" +
+            "    }, " +
+            "    \"count\": 1, " +
+            "    \"can_like\": true, " +
+            "    \"user_likes\": true" +
+            "  }" +
+            "}";
+
+    interface TestOpenGraphActionData extends GraphObject {
+        GraphObject getThing();
+    }
+
+    interface TestOpenGraphAction extends OpenGraphAction {
+        TestOpenGraphActionData getData();
+    }
+
+    private OpenGraphAction parsedAction;
+
+    public void setUp() throws JSONException {
+        JSONObject jsonObject = new JSONObject(ACTION_JSON);
+        parsedAction = GraphObject.Factory.create(jsonObject, OpenGraphAction.class);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedId() {
+        assertEquals("99", parsedAction.getId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedType() {
+        assertEquals("awesome:action", parsedAction.getType());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedDates() {
+        assertEquals(new Date(1365645917000L), parsedAction.getStartTime());
+        assertEquals(new Date(1365649517000L), parsedAction.getEndTime());
+        assertEquals(new Date(1365645917000L), parsedAction.getPublishTime());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedRef() {
+        assertEquals("hello!", parsedAction.getRef());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedMessage() {
+        assertEquals("a message!", parsedAction.getMessage());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedPlace() {
+        GraphPlace place = parsedAction.getPlace();
+        assertEquals("9999", place.getId());
+        assertEquals("94102-2118", place.getLocation().getZip());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedTags() {
+        List<GraphObject> tags = parsedAction.getTags();
+        assertEquals(1, tags.size());
+        GraphUser tag = tags.get(0).cast(GraphUser.class);
+        assertEquals("4321", tag.getId());
+        assertEquals("Jim Bob", tag.getName());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedFrom() {
+        GraphUser from = parsedAction.getFrom();
+        assertEquals("42", from.getId());
+        assertEquals("A User", from.getName());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedLikes() {
+        JSONObject likes = parsedAction.getLikes();
+        assertEquals(1, likes.optInt("count"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedApplication() {
+        GraphObject application = parsedAction.getApplication();
+        assertEquals("Awesome App", application.getProperty("name"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedComments() {
+        JSONObject comments = parsedAction.getComments();
+        assertEquals(1, comments.optInt("count"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedData() {
+        GraphObject data = parsedAction.getData();
+        assertNotNull(data);
+
+        GraphObject thing = data.getPropertyAs("thing", GraphObject.class);
+        assertNotNull(thing);
+        assertEquals("509", thing.getProperty("id"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedTypedData() {
+        TestOpenGraphActionData data = parsedAction.getPropertyAs("data", TestOpenGraphActionData.class);
+        assertNotNull(data);
+
+        GraphObject thing = data.getThing();
+        assertNotNull(thing);
+        assertEquals("509", thing.getProperty("id"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedDataWithTypedAction() {
+        TestOpenGraphAction typedAction = parsedAction.cast(TestOpenGraphAction.class);
+        TestOpenGraphActionData data = typedAction.getData();
+        assertNotNull(data);
+
+        GraphObject thing = data.getThing();
+        assertNotNull(thing);
+        assertEquals("509", thing.getProperty("id"));
+    }
+
+    public void testSetGetTags() {
+        OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+
+        GraphObject tag = GraphObject.Factory.create();
+        tag.setProperty("id", "123");
+
+        List<GraphObject> tags = new ArrayList<GraphObject>();
+        tags.add(tag);
+
+        action.setTags(tags);
+
+        GraphObjectList<GraphObject> retrievedTags = action.getTags();
+        assertNotNull(retrievedTags);
+        assertEquals(1, retrievedTags.size());
+        assertEquals("123", retrievedTags.get(0).getProperty("id"));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java b/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java
new file mode 100644
index 000000000..42882cb5d
--- /dev/null
+++ b/facebook/tests/src/com/facebook/model/OpenGraphObjectTests.java
@@ -0,0 +1,217 @@
+package com.facebook.model;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.LargeTest;
+import android.test.suitebuilder.annotation.MediumTest;
+import android.test.suitebuilder.annotation.SmallTest;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Arrays;
+import java.util.Date;
+
+public final class OpenGraphObjectTests extends AndroidTestCase {
+    private static String OBJECT_JSON = "{" +
+            "  \"id\": \"509\"," +
+            "  \"url\": \"http://www.example.com/100\"," +
+            "  \"type\": \"awesome:thing\"," +
+            "  \"title\": \"awesome title\"," +
+            "  \"data\": {" +
+            "    \"color\": \"blue\"" +
+            "  }," +
+            "  \"image\": [" +
+            "    {" +
+            "      \"url\": \"http://www.example.com/images/81\"" +
+            "    }" +
+            "  ]," +
+            "  \"video\": [" +
+            "    {" +
+            "      \"url\": \"http://www.example.com/videos/18\"" +
+            "    }" +
+            "  ]," +
+            "  \"audio\": [" +
+            "    {" +
+            "      \"url\": \"http://www.example.com/audio/98\"" +
+            "    }" +
+            "  ]," +
+            "  \"description\": \"a description\"," +
+            "  \"see_also\": [" +
+            "    \"http://www.example.com/101\"" +
+            "  ]," +
+            "  \"site_name\": \"Awesome Site\"," +
+            "  \"updated_time\": \"2013-04-30T18:18:17+0000\"," +
+            "  \"created_time\": \"2013-04-30T18:18:17+0000\"," +
+            "  \"application\": {" +
+            "    \"id\": \"55\"," +
+            "    \"name\": \"Awesome App\"," +
+            "    \"url\": \"https://www.facebook.com/apps/application.php?id=55\"" +
+            "  }," +
+            "  \"is_scraped\": false," +
+            "  \"post_action_id\": \"1234\"" +
+            "}";
+
+    interface TestOpenGraphObjectData extends GraphObject {
+        String getColor();
+    }
+
+    interface TestOpenGraphObject extends GraphObject {
+        TestOpenGraphObjectData getData();
+    }
+
+    public OpenGraphObject getParsedObject() throws JSONException {
+        JSONObject jsonObject = new JSONObject(OBJECT_JSON);
+        return GraphObject.Factory.create(jsonObject, OpenGraphObject.class);
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedId() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("509", parsedObject.getId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedType() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("awesome:thing", parsedObject.getType());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedUrl() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("http://www.example.com/100", parsedObject.getUrl());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedTitle() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("awesome title", parsedObject.getTitle());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedDescription() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("a description", parsedObject.getDescription());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedImage() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        GraphObjectList<GraphObject> images = parsedObject.getImage();
+        assertEquals("http://www.example.com/images/81", images.get(0).getProperty("url"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedVideo() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        GraphObjectList<GraphObject> videos = parsedObject.getVideo();
+        assertEquals("http://www.example.com/videos/18", videos.get(0).getProperty("url"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedAudio() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        GraphObjectList<GraphObject> audios = parsedObject.getAudio();
+        assertEquals("http://www.example.com/audio/98", audios.get(0).getProperty("url"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedSeeAlso() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("http://www.example.com/101", parsedObject.getSeeAlso().get(0));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedSiteName() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("Awesome Site", parsedObject.getSiteName());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedTimes() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals(new Date(1367345897000L), parsedObject.getCreatedTime());
+        assertEquals(new Date(1367345897000L), parsedObject.getUpdatedTime());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedApplication() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        GraphObject application = parsedObject.getApplication();
+        assertEquals("Awesome App", application.getProperty("name"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedIsScraped() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals(false, parsedObject.getIsScraped());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedPostActionId() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        assertEquals("1234", parsedObject.getPostActionId());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedData() throws JSONException {
+        OpenGraphObject parsedObject = getParsedObject();
+        GraphObject data = parsedObject.getData();
+
+        assertEquals("blue", data.getProperty("color"));
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testParsedDataWithTypedObject() throws JSONException {
+        TestOpenGraphObject parsedObject = getParsedObject().cast(TestOpenGraphObject.class);
+        TestOpenGraphObjectData data = parsedObject.getData();
+
+        assertEquals("blue", data.getColor());
+    }
+
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testSetImagesByUrl() throws JSONException {
+        OpenGraphObject object = GraphObject.Factory.create(OpenGraphObject.class);
+
+        object.setImageUrls(Arrays.asList("http://www.example.com/1", "http://www.example.com/2"));
+
+        GraphObjectList<GraphObject> images = object.getImage();
+        assertNotNull(images);
+        assertEquals(2, images.size());
+        assertEquals("http://www.example.com/1", images.get(0).getProperty("url"));
+        assertEquals("http://www.example.com/2", images.get(1).getProperty("url"));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
new file mode 100644
index 000000000..a00e90083
--- /dev/null
+++ b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
@@ -0,0 +1,259 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.widget;
+
+import android.graphics.Bitmap;
+import com.facebook.FacebookTestCase;
+import com.facebook.model.GraphObject;
+import com.facebook.model.OpenGraphAction;
+import com.facebook.model.OpenGraphObject;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class FacebookDialogTests extends FacebookTestCase {
+
+    private String getAttachmentNameFromContentUri(String contentUri) {
+        int lastSlash = contentUri.lastIndexOf("/");
+        return contentUri.substring(lastSlash + 1);
+    }
+
+    public void testCantSetAttachmentsWithNullBitmaps() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+            action.setProperty("foo", "bar");
+
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+            builder.setImageAttachmentsForAction(Arrays.asList((Bitmap)null));
+            fail("expected exception");
+        } catch (NullPointerException exception) {
+        }
+    }
+
+    public void testOpenGraphActionImageAttachments() throws JSONException {
+        OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+        action.setProperty("foo", "bar");
+
+        FacebookDialog.OpenGraphActionDialogBuilder builder =
+                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
+
+        builder.setImageAttachmentsForAction(Arrays.asList(bitmap));
+
+        List<JSONObject> images = action.getImage();
+        assertNotNull(images);
+        assertTrue(images.size() == 1);
+
+        List<String> attachmentNames = builder.getImageAttachmentNames();
+        assertNotNull(attachmentNames);
+        assertTrue(attachmentNames.size() == 1);
+
+        String attachmentName = getAttachmentNameFromContentUri(images.get(0).getString("url"));
+        assertEquals(attachmentNames.get(0), attachmentName);
+    }
+
+    public void testCantSetObjectAttachmentsWithoutAction() {
+        try {
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), null, "foo");
+            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
+            fail("expected exception");
+        } catch (NullPointerException exception) {
+        }
+    }
+
+    public void testCantSetObjectAttachmentsWithoutObjectProperty() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    public void testCantSetObjectAttachmentsWithNonGraphObjectProperty() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+            action.setProperty("foo", "bar");
+
+            builder.setImageAttachmentsForObject("foo", new ArrayList<Bitmap>());
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    public void testCantSetObjectAttachmentsWithNullBitmaps() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+            action.setProperty("foo", OpenGraphObject.Factory.createForPost("bar"));
+
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+            builder.setImageAttachmentsForObject("foo", Arrays.asList((Bitmap)null));
+            fail("expected exception");
+        } catch (NullPointerException exception) {
+        }
+    }
+
+    public void testOpenGraphObjectImageAttachments() throws JSONException {
+        OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+        OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
+        action.setProperty("foo", object);
+
+        FacebookDialog.OpenGraphActionDialogBuilder builder =
+                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
+
+        builder.setImageAttachmentsForObject("foo", Arrays.asList(bitmap));
+
+        List<GraphObject> images = object.getImage();
+        assertNotNull(images);
+        assertTrue(images.size() == 1);
+
+        List<String> attachmentNames = builder.getImageAttachmentNames();
+        assertNotNull(attachmentNames);
+        assertTrue(attachmentNames.size() == 1);
+
+        String attachmentName = getAttachmentNameFromContentUri((String) images.get(0).getProperty("url"));
+        assertEquals(attachmentNames.get(0), attachmentName);
+    }
+
+    public void testOpenGraphActionAndObjectImageAttachments() throws JSONException {
+        OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+        OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
+        action.setProperty("foo", object);
+
+        FacebookDialog.OpenGraphActionDialogBuilder builder =
+                new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "foo");
+
+        Bitmap bitmap = Bitmap.createBitmap(20, 20, Bitmap.Config.ALPHA_8);
+
+        builder.setImageAttachmentsForAction(Arrays.asList(bitmap));
+        builder.setImageAttachmentsForObject("foo", Arrays.asList(bitmap));
+
+        List<String> attachmentNames = builder.getImageAttachmentNames();
+        assertNotNull(attachmentNames);
+        assertTrue(attachmentNames.size() == 2);
+
+        List<GraphObject> objectImages = object.getImage();
+        assertNotNull(objectImages);
+        assertTrue(objectImages.size() == 1);
+
+        String attachmentName = getAttachmentNameFromContentUri((String) objectImages.get(0).getProperty("url"));
+        assertTrue(attachmentNames.contains(attachmentName));
+
+        List<JSONObject> actionImages = action.getImage();
+        assertNotNull(actionImages);
+        assertTrue(actionImages.size() == 1);
+
+        attachmentName = getAttachmentNameFromContentUri((String) actionImages.get(0).getString("url"));
+        assertTrue(attachmentNames.contains(attachmentName));
+    }
+
+    public void testOpenGraphDialogBuilderRequiresAction() {
+        try {
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), null, "foo");
+
+            builder.build();
+            fail("expected exception");
+        } catch (NullPointerException exception) {
+        }
+    }
+
+    public void testOpenGraphDialogBuilderRequiresActionType() {
+        try {
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
+                            OpenGraphAction.Factory.createForPost(null), "foo");
+
+            builder.build();
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    public void testOpenGraphDialogBuilderRequiresPreviewPropertyName() {
+        try {
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
+                            OpenGraphAction.Factory.createForPost("foo"), null);
+
+            builder.build();
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    public void testOpenGraphDialogBuilderRequiresPreviewPropertyToExist() {
+        try {
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(),
+                            OpenGraphAction.Factory.createForPost("foo"), "nosuchproperty");
+
+            builder.build();
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+    }
+
+    @SuppressWarnings("deprecation")
+    public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionType() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost();
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
+            action.setProperty("object", object);
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "", "object");
+
+            builder.build();
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+
+    }
+
+    @SuppressWarnings("deprecation")
+    public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionTypeMatches() {
+        try {
+            OpenGraphAction action = OpenGraphAction.Factory.createForPost("foo");
+            OpenGraphObject object = OpenGraphObject.Factory.createForPost("bar");
+            action.setProperty("object", object);
+            FacebookDialog.OpenGraphActionDialogBuilder builder =
+                    new FacebookDialog.OpenGraphActionDialogBuilder(getActivity(), action, "notfoo", "object");
+
+            builder.build();
+            fail("expected exception");
+        } catch (IllegalArgumentException exception) {
+        }
+
+    }
+}
diff --git a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java b/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
index 78ac4845a..2fbdfa08f 100644
--- a/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
+++ b/facebook/tests/src/com/facebook/widget/FragmentTestCase.java
@@ -55,7 +55,13 @@ protected boolean getAutoCreateUI() {
 
         void setContentToFragment(T fragment) {
             if (fragment == null) {
-                fragment = createFragment();
+                try {
+                    fragment = createFragment();
+                } catch (InstantiationException e) {
+                    return;
+                } catch (IllegalAccessException e) {
+                    return;
+                }
             }
 
             LinearLayout layout = new LinearLayout(this);
@@ -78,15 +84,8 @@ void setContentToLayout(int i, int fragmentId) {
             setContentView(i);
         }
 
-        T createFragment() {
-            try {
-                return fragmentClass.newInstance();
-            } catch (IllegalAccessException e) {
-                fail("could not create fragment");
-            } catch (InstantiationException e) {
-                fail("could not create fragment");
-            }
-            return null;
+        protected T createFragment() throws InstantiationException, IllegalAccessException {
+            return fragmentClass.newInstance();
         }
 
         T getFragment() {
diff --git a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java b/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
index 2cf88637e..11f8f6033 100644
--- a/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
+++ b/facebook/tests/src/com/facebook/widget/LoginButtonTest.java
@@ -84,6 +84,7 @@ public void run() {
     @SmallTest
     @MediumTest
     @LargeTest
+    // Tests that the onErrorListener gets called if there's an error
     public void testLoginFail() {
         MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
         ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
@@ -124,6 +125,61 @@ public void onError(FacebookException exception) {
         }
     }
 
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    // Tests that the onErrorListener does NOT get called if there's a callback set.
+    public void testLoginFail2() {
+        MockTokenCachingStrategy cache = new MockTokenCachingStrategy(null, 0);
+        ScriptedSession session = new ScriptedSession(getActivity(), "SomeId", cache);
+        final Exception openException = new Exception("Open failed!");
+        final AtomicBoolean clicked = new AtomicBoolean(false);
+
+        // Verify state with no token in cache
+        assertEquals(SessionState.CREATED, session.getState());
+
+        final LoginButton button = new LoginButton(getActivity());
+        Session.StatusCallback callback = new Session.StatusCallback() {
+            @Override
+            public void call(Session session, SessionState state, Exception exception) {
+                if (exception != null) {
+                    synchronized (this) {
+                        assertEquals(exception.getMessage(), openException.getMessage());
+                        clicked.set(true);
+                        this.notifyAll();
+                    }
+                }
+            }
+        };
+        button.setSessionStatusCallback(callback);
+        button.setOnErrorListener(new LoginButton.OnErrorListener() {
+            @Override
+            public void onError(FacebookException exception) {
+                synchronized (this) {
+                    fail("Should not be in here");
+                    this.notifyAll();
+                }
+            }
+        });
+        button.setSession(session);
+        session.addAuthorizeResult(openException);
+
+        button.onAttachedToWindow();
+        button.performClick();
+
+        try {
+            synchronized (callback) {
+                callback.wait(DEFAULT_TIMEOUT_MILLISECONDS);
+            }
+        } catch (InterruptedException e) {
+            fail("Interrupted during open");
+        }
+
+        if (!clicked.get()) {
+            fail("Did not get exception");
+        }
+    }
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -137,7 +193,7 @@ public void testCanAddReadPermissions() {
 
         final LoginButton button = new LoginButton(getActivity());
         button.setSession(session);
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
+        button.setReadPermissions("read_permission", "read_another");
         session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
         session.addCallback(statusRecorder);
 
@@ -171,7 +227,7 @@ public void testCanAddPublishPermissions() {
 
         final LoginButton button = new LoginButton(getActivity());
         button.setSession(session);
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
+        button.setPublishPermissions("publish_permission", "publish_another");
         session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
         session.addCallback(statusRecorder);
 
@@ -196,9 +252,9 @@ public void testCanAddPublishPermissions() {
     @LargeTest
     public void testCantAddReadThenPublishPermissions() {
         final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
+        button.setReadPermissions("read_permission", "read_another");
         try {
-            button.setPublishPermissions(Arrays.asList(new String[] {"read_permission", "read_a_third"}));
+            button.setPublishPermissions("read_permission", "read_a_third");
             fail("Should not be able to reach here");
         } catch (Exception e) {
             assertTrue(e instanceof UnsupportedOperationException);
@@ -210,9 +266,9 @@ public void testCantAddReadThenPublishPermissions() {
     @LargeTest
     public void testCantAddPublishThenReadPermissions() {
         final LoginButton button = new LoginButton(getActivity());
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
+        button.setPublishPermissions("publish_permission", "publish_another");
         try {
-            button.setReadPermissions(Arrays.asList(new String[] {"publish_permission", "publish_a_third"}));
+            button.setReadPermissions("publish_permission", "publish_a_third");
             fail("Should not be able to reach here");
         } catch (Exception e) {
             assertTrue(e instanceof UnsupportedOperationException);
@@ -224,9 +280,9 @@ public void testCantAddPublishThenReadPermissions() {
     @LargeTest
     public void testCanAddReadThenPublishPermissionsWithClear() {
         final LoginButton button = new LoginButton(getActivity());
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
+        button.setReadPermissions("read_permission", "read_another");
         button.clearPermissions();
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
+        button.setPublishPermissions("publish_permission", "publish_another");
     }
 
     @SmallTest
@@ -253,9 +309,9 @@ public void testCantAddMorePermissionsToOpenSession() {
         statusRecorder.waitForCall(session, SessionState.OPENED, null);
 
         // this should be fine
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_another"}));
+        button.setReadPermissions("read_permission", "read_another");
 
-        button.setReadPermissions(Arrays.asList(new String[] {"read_permission", "read_a_third"}));
+        button.setReadPermissions("read_permission", "read_a_third");
         List<String> permissions = button.getPermissions();
         assertTrue(permissions.contains("read_permission"));
         assertTrue(permissions.contains("read_another"));
@@ -286,7 +342,7 @@ public void testCanSetDefaultAudience() {
 
         final LoginButton button = new LoginButton(getActivity());
         button.setSession(session);
-        button.setPublishPermissions(Arrays.asList(new String[] {"publish_permission", "publish_another"}));
+        button.setPublishPermissions("publish_permission", "publish_another");
         button.setDefaultAudience(SessionDefaultAudience.FRIENDS);
         session.addAuthorizeResult("A token of thanks", new ArrayList<String>(), AccessTokenSource.TEST_USER);
         session.addCallback(statusRecorder);
diff --git a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java b/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
index 52fa16017..f8cc79a74 100644
--- a/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
+++ b/facebook/tests/src/com/facebook/widget/PlacePickerFragmentTests.java
@@ -274,6 +274,14 @@ public TestActivity() {
         protected boolean getAutoCreateUI() {
             return false;
         }
+
+        protected PlacePickerFragment createFragment() throws InstantiationException, IllegalAccessException {
+            Bundle bundle = new Bundle();
+            bundle.putBoolean(PlacePickerFragment.SHOW_SEARCH_BOX_BUNDLE_KEY, false);
+
+            return new PlacePickerFragment(bundle);
+        }
+
     }
 
 }
diff --git a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java b/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
index db12791b1..185caa0b8 100644
--- a/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
+++ b/facebook/tests/src/com/facebook/widget/UserSettingsFragmentTests.java
@@ -22,7 +22,6 @@
 import com.facebook.SessionDefaultAudience;
 import com.facebook.SessionLoginBehavior;
 
-import java.util.Arrays;
 import java.util.List;
 
 public class UserSettingsFragmentTests extends FragmentTestCase<UserSettingsFragmentTests.TestActivity> {
@@ -58,7 +57,7 @@ public void onCreate(Bundle savedInstanceState) {
             getSupportFragmentManager().executePendingTransactions();
             UserSettingsFragment fragment = getFragment();
             fragment.setLoginBehavior(SessionLoginBehavior.SUPPRESS_SSO);
-            fragment.setReadPermissions(Arrays.asList("read_1", "read_2"));
+            fragment.setReadPermissions("read_1", "read_2");
             fragment.setDefaultAudience(SessionDefaultAudience.EVERYONE);
         }
     }
diff --git a/gradle/gradle/wrapper/gradle-wrapper.jar b/gradle/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..667288ad6
Binary files /dev/null and b/gradle/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/gradle/wrapper/gradle-wrapper.properties b/gradle/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..221ce08bc
--- /dev/null
+++ b/gradle/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Mon Nov 04 15:03:41 PST 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
diff --git a/gradle/gradlew b/gradle/gradlew
new file mode 100755
index 000000000..91a7e269e
--- /dev/null
+++ b/gradle/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradle/gradlew.bat b/gradle/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/gradle/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..667288ad6
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..75b72d4da
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Feb 05 10:18:08 PST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.9-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 000000000..91a7e269e
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
new file mode 100644
index 000000000..9056828a0
Binary files /dev/null and b/libs/android-support-v4.jar differ
diff --git a/samples/BooleanOGSample/.project b/samples/BooleanOGSample/.project
deleted file mode 100644
index cd9402a77..000000000
--- a/samples/BooleanOGSample/.project
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>BooleanOGSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
diff --git a/samples/BooleanOGSample/AndroidManifest.xml b/samples/BooleanOGSample/AndroidManifest.xml
deleted file mode 100644
index d2ac13fc1..000000000
--- a/samples/BooleanOGSample/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.booleanog"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <application android:label="@string/app_name" android:icon="@drawable/icon" >
-        <activity android:name="LogicActivity"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN"/>
-                <category android:name="android.intent.category.LAUNCHER"/>
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
-    </application>
-</manifest> 
diff --git a/samples/BooleanOGSample/BooleanOGSample.iml b/samples/BooleanOGSample/BooleanOGSample.iml
deleted file mode 100644
index a280747c7..000000000
--- a/samples/BooleanOGSample/BooleanOGSample.iml
+++ /dev/null
@@ -1,54 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="module-library">
-      <library>
-        <CLASSES>
-          <root url="file://$MODULE_DIR$/../../libs" />
-        </CLASSES>
-        <JAVADOC />
-        <SOURCES />
-        <jarDirectory url="file://$MODULE_DIR$/../../libs" recursive="false" />
-      </library>
-    </orderEntry>
-  </component>
-</module>
-
diff --git a/samples/BooleanOGSample/res/drawable/false_content.png b/samples/BooleanOGSample/res/drawable/false_content.png
deleted file mode 100644
index a86d4d296..000000000
Binary files a/samples/BooleanOGSample/res/drawable/false_content.png and /dev/null differ
diff --git a/samples/BooleanOGSample/res/drawable/true_content.png b/samples/BooleanOGSample/res/drawable/true_content.png
deleted file mode 100644
index ce7694f83..000000000
Binary files a/samples/BooleanOGSample/res/drawable/true_content.png and /dev/null differ
diff --git a/samples/BooleanOGSample/res/layout/content_group.xml b/samples/BooleanOGSample/res/layout/content_group.xml
deleted file mode 100644
index a54a322c2..000000000
--- a/samples/BooleanOGSample/res/layout/content_group.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/content_group"
-              android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:background="#FFF"
-              android:orientation="vertical">
-
-    <ImageView android:id="@+id/content_image"
-               android:layout_height="fill_parent"
-               android:layout_width="fill_parent"
-               android:layout_weight="1"/>
-
-    <Spinner android:id="@+id/content_spinner"
-             android:layout_height="wrap_content"
-             android:layout_width="fill_parent"
-             android:layout_weight="0"/>
-
-</LinearLayout>
diff --git a/samples/BooleanOGSample/res/layout/logic_group.xml b/samples/BooleanOGSample/res/layout/logic_group.xml
deleted file mode 100644
index 71f98b16e..000000000
--- a/samples/BooleanOGSample/res/layout/logic_group.xml
+++ /dev/null
@@ -1,85 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/logic_group"
-              android:orientation="vertical"
-              android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:background="#999">
-
-    <TextView android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
-              android:layout_weight="1"
-              android:textColor="#fff"
-              android:textSize="32sp"
-              android:gravity="center"
-              android:text="@string/rock_the_logic"/>
-
-    <LinearLayout android:orientation="horizontal"
-                  android:layout_height="wrap_content"
-                  android:layout_width="fill_parent"
-                  android:layout_weight="1">
-        <Spinner android:id="@+id/left_spinner"
-                 android:layout_height="wrap_content"
-                 android:layout_width="wrap_content"
-                 android:layout_weight="1"
-                 android:layout_gravity="center"/>
-        <LinearLayout android:orientation="vertical"
-                      android:layout_height="wrap_content"
-                      android:layout_width="wrap_content"
-                      android:layout_weight="1"
-                      android:layout_gravity="center">
-            <Button android:id="@+id/and_button"
-                    android:layout_height="wrap_content"
-                    android:layout_width="fill_parent"
-                    android:layout_gravity="center"
-                    android:text="@string/and_operation"/>
-            <Button android:id="@+id/or_button"
-                    android:layout_height="wrap_content"
-                    android:layout_width="fill_parent"
-                    android:layout_gravity="center"
-                    android:text="@string/or_operation"/>
-        </LinearLayout>
-        <Spinner android:id="@+id/right_spinner"
-                 android:layout_height="wrap_content"
-                 android:layout_width="wrap_content"
-                 android:layout_weight="1"
-                 android:layout_gravity="center"/>
-    </LinearLayout>
-
-    <TextView android:id="@+id/result_text"
-              android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
-              android:layout_weight="1"
-              android:gravity="center"
-              android:background="#fff"
-              android:textColor="#000"
-              android:textSize="24sp"
-              android:text=""/>
-
-    <TextView android:id="@+id/post_result_text"
-              android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
-              android:layout_weight="1"
-              android:gravity="center"
-              android:background="#fff"
-              android:textColor="#000"
-              android:textSize="12sp"
-              android:text=""/>
-
-</LinearLayout>
diff --git a/samples/BooleanOGSample/res/layout/main.xml b/samples/BooleanOGSample/res/layout/main.xml
deleted file mode 100644
index e8088aa54..000000000
--- a/samples/BooleanOGSample/res/layout/main.xml
+++ /dev/null
@@ -1,63 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <FrameLayout android:id="@+id/body_frame"
-                 android:layout_height="0dip"
-                 android:layout_width="fill_parent"
-                 android:layout_weight="1">
-        <include layout="@layout/logic_group"/>
-        <include layout="@layout/friends_group"/>
-        <include layout="@layout/settings_group"/>
-        <include layout="@layout/content_group"/>
-    </FrameLayout>
-
-    <LinearLayout android:orientation="horizontal"
-                  android:layout_width="fill_parent"
-                  android:layout_height="wrap_content">
-        <Button android:id="@+id/logic_button"
-                android:layout_width="wrap_content"
-                android:layout_height="fill_parent"
-                android:layout_weight="1"
-                android:layout_gravity="center"
-                android:text="@string/navigate_logic"/>
-        <Button android:id="@+id/friends_button"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_weight="1"
-                android:layout_gravity="center"
-                android:text="@string/navigate_friends"/>
-        <Button android:id="@+id/content_button"
-                android:layout_width="wrap_content"
-                android:layout_height="fill_parent"
-                android:layout_weight="0"
-                android:layout_gravity="center"
-                android:text="@string/navigate_content"/>
-        <Button android:id="@+id/settings_button"
-                android:layout_width="wrap_content"
-                android:layout_height="fill_parent"
-                android:layout_weight="0"
-                android:layout_gravity="center"
-                android:text="@string/navigate_settings"/>
-    </LinearLayout>
-
-</LinearLayout>
-
diff --git a/samples/BooleanOGSample/res/layout/settings_group.xml b/samples/BooleanOGSample/res/layout/settings_group.xml
deleted file mode 100644
index 2b358bbf3..000000000
--- a/samples/BooleanOGSample/res/layout/settings_group.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:id="@+id/settings_group"
-              android:layout_height="fill_parent"
-              android:layout_width="fill_parent">
-
-    <FrameLayout android:id="@+id/login_fragment"
-                 android:layout_height="fill_parent"
-                 android:layout_width="fill_parent"/>
-
-</LinearLayout>
diff --git a/samples/BooleanOGSample/res/values/strings.xml b/samples/BooleanOGSample/res/values/strings.xml
deleted file mode 100644
index 36ef11a07..000000000
--- a/samples/BooleanOGSample/res/values/strings.xml
+++ /dev/null
@@ -1,48 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">BooleanOGSample</string>
-    <string name="app_id">369258453126794</string>
-    <string name="navigate_logic">You Rock!</string>
-    <string name="navigate_friends">Rock with Friends</string>
-    <string name="navigate_settings">Settings</string>
-    <string name="navigate_content">Content</string>
-    <string name="rock_the_logic">Rock the Logic</string>
-    <string name="false_value">False</string>
-    <string name="true_value">True</string>
-    <string name="and_operation">AND</string>
-    <string name="or_operation">OR</string>
-    <string name="friends_using_rock_the_logic">Friends using Rock the Logic!</string>
-    <string name="friend_activity">Friend activity</string>
-    <string name="foo">You Rock!</string>
-    <string name="feature_requires_login_title">Social Features Disabled</string>
-    <string name="feature_requires_login_message">
-        There is no open session with Facebook.
-        Use the Settings tab to log in and use the social features of this application.
-    </string>
-    <string name="error_dialog_title">Error</string>
-    <string name="ok_button">OK</string>
-    <string-array name="truth_values">
-        <item>@string/true_value</item>
-        <item>@string/false_value</item>
-    </string-array>
-    <string name="native_link_already_logged_in">
-        You attempted to launch the app from the Facebook app, but are already logged in as a different
-        user. Please log out and try again.
-    </string>
-</resources>
diff --git a/samples/BooleanOGSample/src/com/facebook/samples/booleanog/LogicActivity.java b/samples/BooleanOGSample/src/com/facebook/samples/booleanog/LogicActivity.java
deleted file mode 100644
index 65558d5d6..000000000
--- a/samples/BooleanOGSample/src/com/facebook/samples/booleanog/LogicActivity.java
+++ /dev/null
@@ -1,824 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.booleanog;
-
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.database.MatrixCursor;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Parcel;
-import android.os.Parcelable;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.support.v4.app.FragmentTransaction;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import com.facebook.*;
-import com.facebook.model.*;
-import com.facebook.widget.FriendPickerFragment;
-import com.facebook.widget.UserSettingsFragment;
-import com.facebook.widget.PickerFragment;
-
-import java.text.SimpleDateFormat;
-import java.util.*;
-
-public class LogicActivity extends FragmentActivity {
-
-    private static final String TAG = "BooleanOpenGraphSample";
-
-    private static final String SAVE_ACTIVE_TAB = TAG + ".SAVE_ACTIVE_TAB";
-    private static final String SAVE_CONTENT_SELECTION = TAG + ".SAVE_CONTENT_SELECTION";
-    private static final String SAVE_LEFT_OPERAND_SELECTION = TAG + ".SAVE_LEFT_OPERAND_SELECTION";
-    private static final String SAVE_RIGHT_OPERAND_SELECTION = TAG + ".SAVE_RIGHT_OPERAND_SELECTION";
-    private static final String SAVE_RESULT_TEXT = TAG + ".SAVE_RESULT_TEXT";
-    private static final String SAVE_POST_RESULT_TEXT = TAG + ".SAVE_POST_RESULT_TEXT";
-    private static final String SAVE_PENDING = TAG + ".SAVE_PENDING";
-    private static final String SAVE_FRIEND_ACTIONS = TAG + ".SAVE_FRIEND_ACTIONS";
-    private static final String PENDING_POST_PATH = "PENDING_POST_PATH";
-    private static final String PENDING_POST_LEFT = "PENDING_POST_LEFT";
-    private static final String PENDING_POST_RIGHT = "PENDING_POST_RIGHT";
-    private static final String PENDING_POST_RESULT = "PENDING_POST_RESULT";
-
-    private static final String AND_ACTION = "fb_sample_boolean_og:and";
-    private static final String OR_ACTION = "fb_sample_boolean_og:or";
-    private static final String POST_AND_ACTION_PATH = "me/" + AND_ACTION;
-    private static final String POST_OR_ACTION_PATH = "me/" + OR_ACTION;
-    private static final String TRUE_GRAPH_OBJECT_URL = "http://samples.ogp.me/369360019783304";
-    private static final String FALSE_GRAPH_OBJECT_URL = "http://samples.ogp.me/369360256449947";
-    private static final String INSTALLED = "installed";
-    private static final List<String> PERMISSIONS = Arrays.asList("publish_actions");
-
-    private static volatile TruthValueGraphObject TRUE_GRAPH_OBJECT;
-    private static volatile TruthValueGraphObject FALSE_GRAPH_OBJECT;
-    private static volatile int TRUE_SPINNER_INDEX = -1;
-    private static volatile int FALSE_SPINNER_INDEX = -1;
-
-    // Main layout
-    private Button logicButton;
-    private Button friendsButton;
-    private Button settingsButton;
-    private Button contentButton;
-    private String activeTab;
-
-    // Logic group
-    private ViewGroup logicGroup;
-    private Spinner leftSpinner;
-    private Spinner rightSpinner;
-    private Button andButton;
-    private Button orButton;
-    private TextView resultText;
-    private TextView postResultText;
-    private Bundle pendingPost;
-
-    // Friends group
-    private ViewGroup friendsGroup;
-    private FriendPickerFragment friendPickerFragment;
-    private RequestAsyncTask pendingRequest;
-    private SimpleCursorAdapter friendActivityAdapter;
-    private ProgressBar friendActivityProgressBar;
-    private ArrayList<ActionRow> friendActionList;
-
-    // Login group
-    private ViewGroup settingsGroup;
-    private UserSettingsFragment userSettingsFragment;
-
-    // Content group
-    private ViewGroup contentGroup;
-    private ImageView contentImage;
-    private Spinner contentSpinner;
-
-    private UiLifecycleHelper uiHelper;
-    private Session.StatusCallback callback = new Session.StatusCallback() {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            if (exception != null) {
-                pendingPost = null;
-            } else if (state == SessionState.OPENED) {
-                friendPickerFragment.loadData(false);
-            } else if (state == SessionState.OPENED_TOKEN_UPDATED) {
-                sendPendingPost();
-            }
-        }
-    };
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        uiHelper = new UiLifecycleHelper(this, callback);
-        uiHelper.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        // Views
-        logicButton = (Button) findViewById(R.id.logic_button);
-        friendsButton = (Button) findViewById(R.id.friends_button);
-        settingsButton = (Button) findViewById(R.id.settings_button);
-        contentButton = (Button) findViewById(R.id.content_button);
-
-        logicGroup = (ViewGroup) findViewById(R.id.logic_group);
-        leftSpinner = (Spinner) findViewById(R.id.left_spinner);
-        rightSpinner = (Spinner) findViewById(R.id.right_spinner);
-        andButton = (Button) findViewById(R.id.and_button);
-        orButton = (Button) findViewById(R.id.or_button);
-        resultText = (TextView) findViewById(R.id.result_text);
-        postResultText = (TextView) findViewById(R.id.post_result_text);
-
-        friendsGroup = (ViewGroup) findViewById(R.id.friends_group);
-        ListView friendActivityList = (ListView) findViewById(R.id.friend_activity_list);
-        String[] mapColumnNames = {"date", "action"};
-        int[] mapViewIds = {R.id.friend_action_date, R.id.friend_action_data};
-        friendActivityAdapter = new SimpleCursorAdapter(this, R.layout.friend_activity_row, createEmptyCursor(),
-                mapColumnNames, mapViewIds);
-        friendActivityList.setAdapter(friendActivityAdapter);
-        friendActivityProgressBar = (ProgressBar) findViewById(R.id.friend_activity_progress_bar);
-
-        settingsGroup = (ViewGroup) findViewById(R.id.settings_group);
-
-        contentGroup = (ViewGroup) findViewById(R.id.content_group);
-        contentImage = (ImageView) findViewById(R.id.content_image);
-        contentSpinner = (Spinner) findViewById(R.id.content_spinner);
-
-        // Fragments
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        FragmentTransaction transaction = fragmentManager.beginTransaction();
-
-        friendPickerFragment = (FriendPickerFragment) fragmentManager.findFragmentById(R.id.friend_picker_fragment);
-        if (friendPickerFragment == null) {
-            Bundle args = new Bundle();
-            args.putBoolean(FriendPickerFragment.SHOW_TITLE_BAR_BUNDLE_KEY, false);
-            friendPickerFragment = new FriendPickerFragment(args);
-            transaction.add(R.id.friend_picker_fragment, friendPickerFragment);
-        }
-
-        userSettingsFragment = (UserSettingsFragment) fragmentManager.findFragmentById(R.id.login_fragment);
-        if (userSettingsFragment == null) {
-            userSettingsFragment = new UserSettingsFragment();
-            transaction.add(R.id.login_fragment, userSettingsFragment);
-        }
-
-        transaction.commit();
-
-        // Spinners
-        ArrayAdapter<CharSequence> truthAdapter = ArrayAdapter
-                .createFromResource(this, R.array.truth_values, android.R.layout.simple_spinner_item);
-        truthAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-        leftSpinner.setAdapter(truthAdapter);
-        rightSpinner.setAdapter(truthAdapter);
-        contentSpinner.setAdapter(truthAdapter);
-        leftSpinner.setSelection(0);
-        rightSpinner.setSelection(0);
-
-        // Navigation
-        for (Button button : Arrays.asList(logicButton, friendsButton, settingsButton, contentButton)) {
-            initializeNavigationButton(button);
-        }
-
-        // Logic
-        initializeCalculationButton(andButton);
-        initializeCalculationButton(orButton);
-
-        // Friends
-        friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
-            @Override
-            public void onError(PickerFragment<?> fragment, FacebookException error) {
-                LogicActivity.this.onError(error);
-            }
-        });
-        friendPickerFragment.setUserId("me");
-        friendPickerFragment.setMultiSelect(false);
-        friendPickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
-            @Override
-            public void onSelectionChanged(PickerFragment<?> fragment) {
-                LogicActivity.this.onFriendSelectionChanged();
-            }
-        });
-        friendPickerFragment.setExtraFields(Arrays.asList(INSTALLED));
-        friendPickerFragment.setFilter(new PickerFragment.GraphObjectFilter<GraphUser>() {
-            @Override
-            public boolean includeItem(GraphUser graphObject) {
-                Boolean installed = graphObject.cast(GraphUserWithInstalled.class).getInstalled();
-                return (installed != null) && installed.booleanValue();
-            }
-        });
-
-        // Content
-        contentSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-            @Override
-            public void onItemSelected(AdapterView<?> adapterView, View view, int i, long l) {
-                LogicActivity.this.onContentSelectionChanged();
-            }
-
-            @Override
-            public void onNothingSelected(AdapterView<?> adapterView) {
-                LogicActivity.this.onContentSelectionChanged();
-            }
-        });
-
-        // Restore saved state
-        Button startButton = logicButton;
-
-        if (savedInstanceState != null) {
-            leftSpinner.setSelection(savedInstanceState.getInt(SAVE_LEFT_OPERAND_SELECTION));
-            rightSpinner.setSelection(savedInstanceState.getInt(SAVE_RIGHT_OPERAND_SELECTION));
-            contentSpinner.setSelection(savedInstanceState.getInt(SAVE_CONTENT_SELECTION));
-            resultText.setText(savedInstanceState.getString(SAVE_RESULT_TEXT));
-            postResultText.setText(savedInstanceState.getString(SAVE_POST_RESULT_TEXT));
-            activeTab = savedInstanceState.getString(SAVE_ACTIVE_TAB);
-            pendingPost = savedInstanceState.getBundle(SAVE_PENDING);
-
-            friendActionList = savedInstanceState.getParcelableArrayList(SAVE_FRIEND_ACTIONS);
-            if ((friendActionList != null) && (friendActionList.size() > 0)) {
-                updateCursor(friendActionList);
-            }
-
-            if (getString(R.string.navigate_friends).equals(activeTab)) {
-                startButton = friendsButton;
-            } else if (getString(R.string.navigate_content).equals(activeTab)) {
-                startButton = contentButton;
-            } else if (getString(R.string.navigate_settings).equals(activeTab)) {
-                startButton = settingsButton;
-            }
-        }
-
-        if (!handleNativeLink()) {
-            onNavigateButtonClick(startButton);
-        }
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Activity lifecycle
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session session = Session.getActiveSession();
-        if (session != null && session.isOpened()) {
-            friendPickerFragment.loadData(false);
-        }
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        uiHelper.onResume();
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        uiHelper.onSaveInstanceState(outState);
-
-        outState.putInt(SAVE_LEFT_OPERAND_SELECTION, leftSpinner.getSelectedItemPosition());
-        outState.putInt(SAVE_RIGHT_OPERAND_SELECTION, rightSpinner.getSelectedItemPosition());
-        outState.putInt(SAVE_CONTENT_SELECTION, contentSpinner.getSelectedItemPosition());
-        outState.putString(SAVE_RESULT_TEXT, resultText.getText().toString());
-        outState.putString(SAVE_POST_RESULT_TEXT, postResultText.getText().toString());
-        outState.putString(SAVE_ACTIVE_TAB, activeTab);
-        outState.putBundle(SAVE_PENDING, pendingPost);
-        outState.putParcelableArrayList(SAVE_FRIEND_ACTIONS, friendActionList);
-    }
-
-    @Override
-    public void onPause() {
-        super.onPause();
-        uiHelper.onPause();
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        uiHelper.onDestroy();
-
-        friendPickerFragment.setOnErrorListener(null);
-        friendPickerFragment.setOnSelectionChangedListener(null);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        uiHelper.onActivityResult(requestCode, resultCode, data);
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Navigation
-
-    private void initializeNavigationButton(Button button) {
-        button.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onNavigateButtonClick((Button) view);
-            }
-        });
-    }
-
-    private void onNavigateButtonClick(Button source) {
-        activeTab = source.getText().toString();
-
-        logicGroup.setVisibility(getGroupVisibility(source, logicButton));
-        friendsGroup.setVisibility(getGroupVisibility(source, friendsButton));
-        settingsGroup.setVisibility(getGroupVisibility(source, settingsButton));
-        contentGroup.setVisibility(getGroupVisibility(source, contentButton));
-
-        // Show an error if viewing friends and there is no logged in user.
-        if (source == friendsButton) {
-            Session session = Session.getActiveSession();
-            if ((session == null) || !session.isOpened()) {
-                new AlertDialog.Builder(this)
-                        .setTitle(R.string.feature_requires_login_title)
-                        .setMessage(R.string.feature_requires_login_message)
-                        .setPositiveButton(R.string.ok_button, null)
-                        .show();
-            }
-        }
-    }
-
-    private int getGroupVisibility(Button source, Button groupButton) {
-        if (source == groupButton) {
-            return View.VISIBLE;
-        } else {
-            return View.GONE;
-        }
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Logic group
-
-    private void initializeCalculationButton(Button button) {
-        button.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                onOperationButtonClick(view);
-            }
-        });
-    }
-
-    private void onOperationButtonClick(View view) {
-        if (view == andButton) {
-            onAndButtonClick();
-        } else if (view == orButton) {
-            onOrButtonClick();
-        } else {
-            assert false;
-        }
-    }
-
-    private void onAndButtonClick() {
-        boolean leftOperand = getSpinnerBoolean(leftSpinner);
-        boolean rightOperand = getSpinnerBoolean(rightSpinner);
-        boolean result = leftOperand && rightOperand;
-
-        resultText.setText(getLogicText(getString(R.string.and_operation), leftOperand, rightOperand, result));
-        postAction(POST_AND_ACTION_PATH, leftOperand, rightOperand, result);
-    }
-
-    private void onOrButtonClick() {
-        boolean leftOperand = getSpinnerBoolean(leftSpinner);
-        boolean rightOperand = getSpinnerBoolean(rightSpinner);
-        boolean result = leftOperand || rightOperand;
-
-        resultText.setText(getLogicText(getString(R.string.or_operation), leftOperand, rightOperand, result));
-        postAction(POST_OR_ACTION_PATH, leftOperand, rightOperand, result);
-    }
-
-    private String getLogicText(String op, boolean leftOperand, boolean rightOperand, boolean result) {
-        String trueString = getString(R.string.true_value);
-        String falseString = getString(R.string.false_value);
-        String arg0String = leftOperand ? trueString : falseString;
-        String arg1String = rightOperand ? trueString : falseString;
-        String resultString = result ? trueString : falseString;
-
-        return String.format("%s %s %s = %s", arg0String, op, arg1String, resultString);
-    }
-
-    private void postAction(final String actionPath, final boolean leftOperand, final boolean rightOperand,
-            final boolean result) {
-        Bundle post = new Bundle();
-        post.putString(PENDING_POST_PATH, actionPath);
-        post.putBoolean(PENDING_POST_LEFT, leftOperand);
-        post.putBoolean(PENDING_POST_RIGHT, rightOperand);
-        post.putBoolean(PENDING_POST_RESULT, result);
-        pendingPost = post;
-
-        sendPendingPost();
-    }
-
-    private void sendPendingPost() {
-        if (pendingPost == null) {
-            return;
-        }
-
-        Session session = Session.getActiveSession();
-        if ((session == null) || !session.isOpened()) {
-            postResultText.setText("Not logged in, no post generated.");
-            pendingPost = null;
-            return;
-        }
-
-        List<String> permissions = session.getPermissions();
-        if (!permissions.containsAll(PERMISSIONS)) {
-            Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(this, PERMISSIONS);
-            session.requestNewPublishPermissions(newPermissionsRequest);
-            return;
-        }
-
-        postResultText.setText("Posting action...");
-
-        // For demo purposes, result is just a boolean, but operands are Open Graph objects
-        String actionPath = pendingPost.getString(PENDING_POST_PATH);
-        boolean leftOperand = pendingPost.getBoolean(PENDING_POST_LEFT);
-        boolean rightOperand = pendingPost.getBoolean(PENDING_POST_RIGHT);
-        boolean result = pendingPost.getBoolean(PENDING_POST_RESULT);
-
-        LogicAction action = GraphObject.Factory.create(LogicAction.class);
-        action.setResult(result);
-        action.setTruthvalue(getTruthValueObject(leftOperand));
-        action.setAnothertruthvalue(getTruthValueObject(rightOperand));
-
-        Request.Callback callback = new Request.Callback() {
-            @Override
-            public void onCompleted(Response response) {
-                onPostActionResponse(response);
-            }
-        };
-        Request request = new Request(session, actionPath, null, HttpMethod.POST,
-                callback);
-        request.setGraphObject(action);
-        RequestAsyncTask task = new RequestAsyncTask(request);
-
-        task.execute();
-    }
-
-    private void onPostActionResponse(Response response) {
-        PostResponse postResponse = response.getGraphObjectAs(PostResponse.class);
-        if (postResponse != null && postResponse.getId() != null) {
-            postResultText.setText("Post id = " + postResponse.getId());
-        } else if (response.getError() != null) {
-            postResultText.setText(response.getError().getErrorMessage());
-        } else {
-            postResultText.setText("");
-        }
-    }
-
-    private TruthValueGraphObject getTruthValueObject(boolean value) {
-        if (value) {
-            if (TRUE_GRAPH_OBJECT == null) {
-                TruthValueGraphObject object = GraphObject.Factory
-                        .create(TruthValueGraphObject.class);
-                object.setUrl(TRUE_GRAPH_OBJECT_URL);
-                TRUE_GRAPH_OBJECT = object;
-            }
-            return TRUE_GRAPH_OBJECT;
-        } else {
-            if (FALSE_GRAPH_OBJECT == null) {
-                TruthValueGraphObject object = GraphObject.Factory
-                        .create(TruthValueGraphObject.class);
-                object.setUrl(FALSE_GRAPH_OBJECT_URL);
-                FALSE_GRAPH_OBJECT = object;
-            }
-            return FALSE_GRAPH_OBJECT;
-        }
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Friends group
-
-    private void onFriendSelectionChanged() {
-        GraphUser user = chooseOne(friendPickerFragment.getSelection());
-        if (user != null) {
-            onChooseFriend(user.getId());
-        } else {
-            friendActivityAdapter.changeCursor(createEmptyCursor());
-        }
-    }
-
-    private void onChooseFriend(String friendId) {
-        friendActivityProgressBar.setVisibility(View.VISIBLE);
-
-        String andPath = String.format("%s/%s", friendId, AND_ACTION);
-        String orPath = String.format("%s/%s", friendId, OR_ACTION);
-        Request getAnds = new Request(Session.getActiveSession(), andPath, null, HttpMethod.GET);
-        Request getOrs = new Request(Session.getActiveSession(), orPath, null, HttpMethod.GET);
-
-        RequestBatch batch = new RequestBatch(getAnds, getOrs);
-
-        if (pendingRequest != null) {
-            pendingRequest.cancel(true);
-        }
-
-        pendingRequest = new RequestAsyncTask(batch) {
-            @Override
-            protected void onPostExecute(List<Response> result) {
-                if (pendingRequest == this) {
-                    pendingRequest = null;
-
-                    LogicActivity.this.onPostExecute(result);
-                }
-            }
-        };
-
-        pendingRequest.execute();
-    }
-
-    private void onPostExecute(List<Response> result) {
-        friendActivityProgressBar.setVisibility(View.GONE);
-
-        friendActionList = createActionRows(result);
-        updateCursor(friendActionList);
-    }
-
-    private ArrayList<ActionRow> createActionRows(List<Response> result) {
-        ArrayList<ActionRow> publishedItems = new ArrayList<ActionRow>();
-
-        for (Response response : result) {
-            if (response.getError() != null) {
-                continue;
-            }
-
-            GraphMultiResult list = response.getGraphObjectAs(GraphMultiResult.class);
-            List<PublishedLogicAction> listData = list.getData().castToListOf(PublishedLogicAction.class);
-
-            for (PublishedLogicAction action : listData) {
-                publishedItems.add(createActionRow(action));
-            }
-        }
-
-        Collections.sort(publishedItems);
-        return publishedItems;
-    }
-
-    private void updateCursor(Iterable<ActionRow> publishedItems) {
-        MatrixCursor cursor = createEmptyCursor();
-        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
-
-        int id = 0;
-        for (ActionRow item : publishedItems) {
-            Object[] row = new Object[3];
-            row[0] = id++;
-            row[1] = dateFormat.format(item.publishDate);
-            row[2] = item.actionText;
-            cursor.addRow(row);
-        }
-
-        friendActivityAdapter.changeCursor(cursor);
-        friendActivityAdapter.notifyDataSetChanged();
-    }
-
-    private MatrixCursor createEmptyCursor() {
-        String[] cursorColumns = {"_ID", "date", "action"};
-        return new MatrixCursor(cursorColumns);
-    }
-
-    private ActionRow createActionRow(PublishedLogicAction action) {
-        String actionText = getActionText(action);
-        Date publishDate = action.getPublishTime();
-
-        return new ActionRow(actionText, publishDate);
-    }
-
-    private String getActionText(PublishedLogicAction action) {
-        LogicAction actionData = action.getData();
-        if (actionData == null) {
-            return "";
-        }
-
-        TruthValueGraphObject left = actionData.getTruthvalue();
-        TruthValueGraphObject right = actionData.getAnothertruthvalue();
-        Boolean actionResult = actionData.getResult();
-
-        String verb = action.getType();
-        if (AND_ACTION.equals(verb)) {
-            verb = getString(R.string.and_operation);
-        } else if (OR_ACTION.equals(verb)) {
-            verb = getString(R.string.or_operation);
-        }
-
-        if ((left == null) || (right == null) || (actionResult == null) || (verb == null)) {
-            return "";
-        }
-
-        return String.format("%s %s %s = %s", left.getTitle(), verb, right.getTitle(), actionResult.toString());
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Content group
-
-    private Boolean getDeepLinkContent(Uri deepLinkUri) {
-        if (deepLinkUri != null) {
-            String deepLink = deepLinkUri.toString();
-
-            if (deepLink.startsWith(TRUE_GRAPH_OBJECT_URL)) {
-                return Boolean.TRUE;
-            } else if (deepLink.startsWith(FALSE_GRAPH_OBJECT_URL)) {
-                return Boolean.FALSE;
-            }
-        }
-
-        return null;
-    }
-
-    private void onContentSelectionChanged() {
-        Boolean spinnerBoolean = getSpinnerBoolean(contentSpinner);
-        if (Boolean.TRUE.equals(spinnerBoolean)) {
-            contentImage.setVisibility(View.VISIBLE);
-            contentImage.setImageResource(R.drawable.true_content);
-        } else if (Boolean.FALSE.equals(spinnerBoolean)) {
-            contentImage.setVisibility(View.VISIBLE);
-            contentImage.setImageResource(R.drawable.false_content);
-        } else {
-            contentImage.setImageResource(View.INVISIBLE);
-        }
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Utility methods
-
-    private boolean handleNativeLink() {
-        Session existingSession = Session.getActiveSession();
-        // If we have a valid existing session, we'll use it; if not, open one using the provided Intent
-        // but do not cache the token (we don't want to use the same user identity the next time the
-        // app is run).
-        if (existingSession == null || !existingSession.isOpened()) {
-            AccessToken accessToken = AccessToken.createFromNativeLinkingIntent(getIntent());
-            if (accessToken != null) {
-                Session newSession = new Session.Builder(this).setTokenCachingStrategy(new NonCachingTokenCachingStrategy())
-                        .build();
-                newSession.open(accessToken, null);
-
-                Session.setActiveSession(newSession);
-            }
-        }
-        // See if we have a deep link in addition.
-        Boolean deepLinkContent = getDeepLinkContent(getIntent().getData());
-        if (deepLinkContent != null) {
-            onNavigateButtonClick(contentButton);
-            contentSpinner.setSelection(getSpinnerPosition(deepLinkContent));
-            return true;
-        }
-
-        return false;
-    }
-
-    private int getSpinnerPosition(Boolean value) {
-        initializeSpinnerIndexes();
-
-        if (Boolean.TRUE.equals(value)) {
-            return TRUE_SPINNER_INDEX;
-        } else if (Boolean.FALSE.equals(value)) {
-            return FALSE_SPINNER_INDEX;
-        } else {
-            return -1;
-        }
-    }
-
-    private Boolean getSpinnerBoolean(Spinner spinner) {
-        initializeSpinnerIndexes();
-
-        int position = spinner.getSelectedItemPosition();
-        if (position == TRUE_SPINNER_INDEX) {
-            return Boolean.TRUE;
-        } else if (position == FALSE_SPINNER_INDEX) {
-            return Boolean.FALSE;
-        } else {
-            return null;
-        }
-    }
-
-    private void initializeSpinnerIndexes() {
-        if ((TRUE_SPINNER_INDEX < 0) || (FALSE_SPINNER_INDEX < 0)) {
-            String[] truthArray = getResources().getStringArray(R.array.truth_values);
-            List<String> truthList = Arrays.asList(truthArray);
-            TRUE_SPINNER_INDEX = truthList.indexOf(getString(R.string.true_value));
-            FALSE_SPINNER_INDEX = truthList.indexOf(getString(R.string.false_value));
-        }
-    }
-
-    private void onError(Exception error) {
-        showErrorMessage(error.getMessage());
-    }
-
-    private void showErrorMessage(String message) {
-        new AlertDialog.Builder(this)
-                .setTitle(R.string.error_dialog_title)
-                .setMessage(message)
-                .setPositiveButton(R.string.ok_button, null)
-                .show();
-    }
-
-    private <T> T chooseOne(List<T> ts) {
-        for (T t : ts) {
-            return t;
-        }
-
-        return null;
-    }
-
-    // -----------------------------------------------------------------------------------
-    // Supporting types
-
-    private interface GraphUserWithInstalled extends GraphUser {
-        Boolean getInstalled();
-    }
-
-    private static class ActionRow implements Comparable<ActionRow>, Parcelable {
-        final String actionText;
-        final Date publishDate;
-
-        ActionRow(String actionText, Date publishDate) {
-            this.actionText = actionText;
-            this.publishDate = publishDate;
-        }
-
-        @Override
-        public int compareTo(ActionRow other) {
-            if (other == null) {
-                return 1;
-            } else {
-                return publishDate.compareTo(other.publishDate);
-            }
-        }
-
-        @Override
-        public int describeContents() {
-            return 0;
-        }
-
-        @Override
-        public void writeToParcel(Parcel parcel, int flags) {
-            parcel.writeString(actionText);
-            parcel.writeLong(publishDate.getTime());
-        }
-
-        @SuppressWarnings("unused")
-        public final Creator<ActionRow> CREATOR = new Creator<ActionRow>() {
-            @Override
-            public ActionRow createFromParcel(Parcel parcel) {
-                String actionText = parcel.readString();
-                Date publishDate = new Date(parcel.readLong());
-                return new ActionRow(actionText, publishDate);
-            }
-
-            @Override
-            public ActionRow[] newArray(int size) {
-                return new ActionRow[size];
-            }
-        };
-    }
-
-    /**
-     * Used to create and consume TruthValue open graph objects.
-     */
-    private interface TruthValueGraphObject extends GraphObject {
-        void setUrl(String url);
-
-        String getTitle();
-    }
-
-    /**
-     * Used to create and consume And an Or open graph actions
-     */
-    private interface LogicAction extends OpenGraphAction {
-        Boolean getResult();
-
-        void setResult(Boolean result);
-
-        TruthValueGraphObject getTruthvalue();
-
-        void setTruthvalue(TruthValueGraphObject truthvalue);
-
-        TruthValueGraphObject getAnothertruthvalue();
-
-        void setAnothertruthvalue(TruthValueGraphObject anothertruthvalue);
-    }
-
-    /**
-     * Used to consume published And and Or open graph actions.
-     */
-    private interface PublishedLogicAction extends OpenGraphAction {
-        LogicAction getData();
-
-        String getType();
-    }
-
-    /**
-     * Used to inspect the response from posting an action
-     */
-    private interface PostResponse extends GraphObject {
-        String getId();
-    }
-}
diff --git a/samples/FriendPickerSample/.classpath b/samples/FriendPickerSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/FriendPickerSample/.classpath
+++ b/samples/FriendPickerSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/FriendPickerSample/.project b/samples/FriendPickerSample/.project
index c956fc90d..eb8d8732f 100644
--- a/samples/FriendPickerSample/.project
+++ b/samples/FriendPickerSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/FriendPickerSample/FriendPickerSample.iml b/samples/FriendPickerSample/FriendPickerSample.iml
deleted file mode 100644
index 3b9987615..000000000
--- a/samples/FriendPickerSample/FriendPickerSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/FriendPickerSample/build.gradle b/samples/FriendPickerSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/FriendPickerSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
index e6563d2d2..9d901ca84 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerApplication.java
@@ -19,18 +19,18 @@
 import android.app.Application;
 import com.facebook.model.GraphUser;
 
-import java.util.Collection;
+import java.util.List;
 
 // We use a custom Application class to store our minimal state data (which users have been selected).
 // A real-world application will likely require a more robust data model.
 public class FriendPickerApplication extends Application {
-    private Collection<GraphUser> selectedUsers;
+    private List<GraphUser> selectedUsers;
 
-    public Collection<GraphUser> getSelectedUsers() {
+    public List<GraphUser> getSelectedUsers() {
         return selectedUsers;
     }
 
-    public void setSelectedUsers(Collection<GraphUser> selectedUsers) {
+    public void setSelectedUsers(List<GraphUser> selectedUsers) {
         this.selectedUsers = selectedUsers;
     }
 }
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
index 18634f13c..1c8ec2b62 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
@@ -23,6 +23,7 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
+import com.facebook.AppEventsLogger;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphUser;
@@ -70,6 +71,15 @@ protected void onStart() {
         displaySelectedFriends(RESULT_OK);
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
+    }
+
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         switch (requestCode) {
             case PICK_FRIENDS_ACTIVITY:
@@ -127,9 +137,6 @@ private void onClickPickFriends() {
 
     private void startPickFriendsActivity() {
         if (ensureOpenSession()) {
-            FriendPickerApplication application = (FriendPickerApplication) getApplication();
-            application.setSelectedUsers(null);
-
             Intent intent = new Intent(this, PickFriendsActivity.class);
             // Note: The following line is optional, as multi-select behavior is the default for
             // FriendPickerFragment. It is here to demonstrate how parameters could be passed to the
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
index 720706315..879cd62bd 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/PickFriendsActivity.java
@@ -22,9 +22,12 @@
 import android.support.v4.app.FragmentManager;
 import android.widget.Toast;
 import com.facebook.FacebookException;
+import com.facebook.model.GraphUser;
 import com.facebook.widget.FriendPickerFragment;
 import com.facebook.widget.PickerFragment;
 
+import java.util.List;
+
 // This class provides an example of an Activity that uses FriendPickerFragment to display a list of
 // the user's friends. It takes a programmatic approach to creating the FriendPickerFragment with the
 // desired parameters -- see PickPlaceActivity in the PlacePickerSample project for an example of an
@@ -93,6 +96,11 @@ private void onError(Exception error) {
     protected void onStart() {
         super.onStart();
         try {
+            FriendPickerApplication application = (FriendPickerApplication) getApplication();
+            List<GraphUser> selectedUsers = application.getSelectedUsers();
+            if (selectedUsers != null && !selectedUsers.isEmpty()) {
+                friendPickerFragment.setSelection(selectedUsers);
+            }
             // Load data, unless a query has already taken place.
             friendPickerFragment.loadData(false);
         } catch (Exception ex) {
diff --git a/samples/GraphApiSample/.classpath b/samples/GraphApiSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/GraphApiSample/.classpath
+++ b/samples/GraphApiSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/GraphApiSample/.project b/samples/GraphApiSample/.project
index cb993bbc8..ff735cf87 100644
--- a/samples/GraphApiSample/.project
+++ b/samples/GraphApiSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/GraphApiSample/GraphApiSample.iml b/samples/GraphApiSample/GraphApiSample.iml
deleted file mode 100644
index 24fea05bb..000000000
--- a/samples/GraphApiSample/GraphApiSample.iml
+++ /dev/null
@@ -1,53 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/GraphApiSample/build.gradle b/samples/GraphApiSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/GraphApiSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
index 81aaa4a52..444926c02 100644
--- a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
+++ b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
@@ -33,7 +33,7 @@
 import java.util.List;
 
 public class GraphApiSampleActivity extends Activity {
-    static final String applicationId = "307234779396415";
+    static final String APP_ID = "307234779396415";
     static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest";
 
     Button buttonRequest;
@@ -67,6 +67,15 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
         }
     }
 
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this, APP_ID);
+    }
+
     @Override
     protected void onRestoreInstanceState(Bundle savedInstanceState) {
         super.onRestoreInstanceState(savedInstanceState);
@@ -130,13 +139,13 @@ public void onCompleted(Response response) {
             }));
         }
         pendingRequest = false;
-        Request.executeBatchAndWait(requests);
+        Request.executeBatchAsync(requests);
     }
 
     private Session createSession() {
         Session activeSession = Session.getActiveSession();
         if (activeSession == null || activeSession.getState().isClosed()) {
-            activeSession = new Session.Builder(this).setApplicationId(applicationId).build();
+            activeSession = new Session.Builder(this).setApplicationId(APP_ID).build();
             Session.setActiveSession(activeSession);
         }
         return activeSession;
diff --git a/samples/Hackbook/.classpath b/samples/Hackbook/.classpath
deleted file mode 100644
index 655a4a827..000000000
--- a/samples/Hackbook/.classpath
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/Hackbook/AndroidManifest.xml b/samples/Hackbook/AndroidManifest.xml
deleted file mode 100644
index 3d48e43b5..000000000
--- a/samples/Hackbook/AndroidManifest.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.android"
-    android:versionCode="1"
-    android:versionName="1.0">
-    <supports-screens
-        android:smallScreens="true"
-        android:normalScreens="true"
-        android:largeScreens="true"
-        android:anyDensity="true" />
-    <application android:icon="@drawable/icon"
-        android:label="@string/app_name"
-        android:debuggable="true">
-        <activity android:name=".SplashActivity"
-            android:label="@string/app_name"
-            android:screenOrientation="portrait">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name=".Hackbook"
-            android:label="@string/app_name"
-            android:configChanges="keyboardHidden|orientation"
-            android:windowSoftInputMode="adjustResize">
-        </activity>
-        <activity
-            android:name=".GraphExplorer"
-            android:windowSoftInputMode="stateHidden"
-            android:screenOrientation="portrait" />
-        <activity android:name=".IntentUriHandler">
-            <intent-filter>
-                <action android:name="android.intent.action.VIEW" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:scheme="fbgraphex" />
-            </intent-filter>
-        </activity>
-        <activity
-            android:name=".FriendsList"
-            android:screenOrientation="portrait" />
-        <activity
-            android:name=".Places"
-            android:screenOrientation="portrait" />
-    </application>
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
-    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS" />
-    <uses-sdk android:minSdkVersion="8" />
-</manifest>
diff --git a/samples/Hackbook/Hackbook.eml b/samples/Hackbook/Hackbook.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/samples/Hackbook/Hackbook.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/samples/Hackbook/Hackbook.iml b/samples/Hackbook/Hackbook.iml
deleted file mode 100644
index e48c2945e..000000000
--- a/samples/Hackbook/Hackbook.iml
+++ /dev/null
@@ -1,51 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-  </component>
-</module>
-
diff --git a/samples/Hackbook/README.md b/samples/Hackbook/README.md
deleted file mode 100644
index 3036a187e..000000000
--- a/samples/Hackbook/README.md
+++ /dev/null
@@ -1,130 +0,0 @@
-This 'Hackbook for Android' app includes Single Sign On implementation (SSO), sample API calls and Graph API Explorer and is targeted towards android developers who want to make their apps social using Facebook Social Graph. The Code provided here is to showcase how to implement the SSO and make the API calls. If you have any questiosn or comments related to this sample app, please post them here - http://facebook.stackoverflow.com/questions/tagged/hackbook-for-android
-
-Getting Started
-===============
-
-See Android tutorial - https://developers.facebook.com/docs/mobile/android/build/
-
-Configuring the app
-===============
-
-1. Launch Eclipse
-2. Ensure you have installed the Android plugin.
-3. Create Facebook SDK Project - follow the Step-1 instructions in the tutorial
-4. Create the Hackbook Project :
-   4.1 Select __File__ -> __New__ -> __Project__, choose __Android Project__, and then click __Next__.
-   4.2 Select "Create project from existing source".
-   4.3. Choose  examples/Hackbook. You should see the project properties populated.
-   4.4. Click Finish to continue.
-5. Add reference to the Facebook SDK - follow the Step-3 instructions in the tutorial
-6. Create a Facebook app if you don't have one already and add the app id in the Hackbook.java->APP_ID
-
-Build the app
-===============
-
-7. And you are done and ready to compile the project:
-   7.1 From the Project menu, select "Build Project".
-
-Run the app
-===============
-
-8. Hopefully project would compile fine. Next run the app on the emulator or on the phone (See http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig for more details.)
-   8.1 If you plan to run on emulator, ensure you have created an Android Virtual Device (AVD):
-		8.1.1 Go to Window -> Android SDK and AVD Manager -> Click New
-		8.1.2 Provide a Name (AVD 2.3 e.g.) and choose the Target (Android 2.3 if available).
-		8.1.3 Click 'Create AVD' at the bottom and that should create an AVD which you can run the app on described  next.
-
-   8.2 Go to Run->Run Configurations->Android Application->create a new run configuration by clicking the icon with + button on it.
-   8.3 Name it 'Hackbook'
-   8.4 Under the Project, Browse and choose Hackbook
-   8.5 Go to Target tab -> Choose manual if you wish to run on the phone, else choose Automatic and select an AVD created in step 8.1
-   8.6 Click Run and your 'Hackbook for Android' app should be up and running.
-
-
-Installing the Facebook app
-===============
-
-You will need to have the Facebook application on the handset or the emulator to test the Single Sign On. The SDK includes a developer release of the Facebook application that can be side-loaded for testing purposes. On an actual device, you can just download the latest version of the app from the Android Market, but on the emulator you will have to install it yourself:
-
-      adb install FBAndroid.apk
-
-What's in there
-===============
-
-Note: The source tags are provided through out the code base to facilitate easy search for the relevant code. Do a project-wide search for the source tags to get straight to the relevant code. Refer below for source tags for each feature.
-
-1. Login button - This uses SSO to authorize the app. Clicking on Login should activate SSO (if the app is installed) or show OAuth dialog. When authorizing, no permissions are requested and the app will get basic permission by default.
-
-Source Tag - login_tag
-
-- Hackbook.java - this layout the login button and initialize it. Since this is also the calling acitivty, this overrides the onActivityResult() method.
-- LoginButton.java - this calls the mFb.authorize(mActivity, mPermissions, mActivityCode, new LoginDialogListener()) which authorizes the app via SSO or OAuth.
-- SessionStore.java - stores the access token and access expiry time for future app launch. This is important that you save the access token, else user will need to authorize your app each time they launch it which is annoying and user is likely to churn out.
-- SessionEvents.java - Authorization state tracker, calls the listener on login/logout success or error.
-------------------------
-
-2. Update Status - this allows user to update his status by calling the 'feed' dialog. More info on feed dialog - https://developers.facebook.com/docs/reference/dialogs/feed/
-
-Source Tag - update_status_tag, view_post_tag, delete_post_tag
-
-- Hackbook.java - Case 0: update status by calling the 'feed' dialog.
-- UpdateStatusResultDialog.java - shows the object-id returned in the dialog response. You can view or delete the post here.
-------------------------
-
-3. App Requests - this allows to send app requests to user's friends by calling the 'apprequests' dialog. More info - https://developers.facebook.com/docs/reference/dialogs/requests/
-
-Source Tag - app_requests_tag
-
-- Hackbook.java - Case 1: send the app requests by calling the the 'apprequests' dialog.
-------------------------
-
-4. Get Friends - Get user's friends via Graph API or FQL Query. User must be logged-in to use this. Also post on a friend's wall by clicking on his name in the list.
-
-Source Tag - get_friends_tag, friend_wall_tag
-
-- Hackbook.java - Case 2:  Use Graph API 'me/friends' which returns friends sorted by UID, currently it's not possible to sort any other way in the Graph API. Use the FQL Query to sort by name - select name, current_location, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name
-- FriendsList.java - displays the friends profile pic and names as returned by the api. Also post on friend's wall by clicking on the friend.
-- FriendsModel.java - run async tasks to fetch the profile picture limited to 15 tasks at any given time.
-
-5. Upload Photo - Upload a photo either from the media gallery or from a remote server. You require 'photo_upload' to upload photos on user profile.
-
-Source Tag - upload_photo, view_photo_tag, tag_photo_tag
-
-- Hackbook.java - Case 3: Photo is uploaded by posting byte-array or url to me/photos endpoint. Media Gallery is launched by invoking the MediaStore.Images.Media.EXTERNAL_CONTENT_URI intent and overriding the OnActivityResult() to get the picture from the media gallery. Photo from remote server is uploaded by simply providing the image url in the 'url' param in the graph.facebook.com/me/photos endpoint.
-- UploadPhotoResultDialog.java - shows the object-id returned after uploaded the photo. You can view or tag the photo here.
-------------------------
-
-
-6. Place Check-in - Fetch user's current location or use Times Square as the current location and get nearby places which user can check-in at.
-
-Source Tag - fetch_places_tag, check_in_tag
-
-- Hackbook.java - Case 4: Ask to fetch current location or use Times Square as the current location.
-- Places.java - Get user's current location and fetch the nearby places by calling the graph.facebook.com/search?type=places&distance=1000&center=lat,lon. Check-in user at a place by calling the graph.facebook.com/me/checkins&place=<place_id_>&message=<message>&coordinates={"latitude": <lat>, "longitude:": <lon>}
-------------------------
-
-7. Run FQL Query - Type and run any FQL Query and see the results.
-
-Source Tag - fql_query_tag
-
-- FQLQuery.java - Layout the FQL Query Dialog and run the query and show the results.
-------------------------
-
-8. Graph API Explorer - Explore user's social graph, see his and friends' connections and get new permissions. This is similar to the Graph Explorer dev tool - http://developers.facebook.com/tools/explorer/. The ObjectIDs in the API response are linkified and can be clicked to fetch object specific data.
-  - Click the 'x' button to clear the textfield
-  - Click the green up arrow button in the textfield to get the 'me' object data.
-  - Click on 'Get Permissions' to get new permissions including user's, his friends or extended permissions.
-  - Click on 'Fields/Connections' to see current object's fields and connections.
-  - On the Fields & Connections dialog, in the Fields tab, select the fields to view or in the Connections tab, click the connection to view it's content.
-
-Source Tag - graph_explorer
-
-- Hackbook.java - Case 5: Launch the GraphExplorer intent
-- GraphExplorer.java - Layout and execute the graph explorer
-- IntentUriHandler.java - Handle the fbgraphex: schema generated while linkifying the Object IDs in the graph explorer output
-
-
-
-Report Issues/Bugs
-===============
-Please report issues here - http://facebook.stackoverflow.com/questions/tagged/hackbook-for-android
diff --git a/samples/Hackbook/build.xml b/samples/Hackbook/build.xml
deleted file mode 100644
index 6c4e58004..000000000
--- a/samples/Hackbook/build.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="Hackbook" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/Hackbook/default.properties b/samples/Hackbook/default.properties
deleted file mode 100644
index 74d10005d..000000000
--- a/samples/Hackbook/default.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Indicates whether an apk should be generated for each density.
-split.density=false
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/Hackbook/proguard-project.txt b/samples/Hackbook/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/Hackbook/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/Hackbook/project.properties b/samples/Hackbook/project.properties
deleted file mode 100644
index d97d486bd..000000000
--- a/samples/Hackbook/project.properties
+++ /dev/null
@@ -1,17 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Indicates whether an apk should be generated for each density.
-split.density=false
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/Hackbook/res/drawable-hdpi/splash.png b/samples/Hackbook/res/drawable-hdpi/splash.png
deleted file mode 100644
index 3efb5e80a..000000000
Binary files a/samples/Hackbook/res/drawable-hdpi/splash.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/icon.png b/samples/Hackbook/res/drawable/icon.png
deleted file mode 100644
index 7a2d0cbe4..000000000
Binary files a/samples/Hackbook/res/drawable/icon.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/icon_hack.png b/samples/Hackbook/res/drawable/icon_hack.png
deleted file mode 100644
index a812187e6..000000000
Binary files a/samples/Hackbook/res/drawable/icon_hack.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/login.png b/samples/Hackbook/res/drawable/login.png
deleted file mode 100644
index 95c8dc156..000000000
Binary files a/samples/Hackbook/res/drawable/login.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/login_button.xml b/samples/Hackbook/res/drawable/login_button.xml
deleted file mode 100644
index faebada66..000000000
--- a/samples/Hackbook/res/drawable/login_button.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-	<item android:state_pressed="true" android:drawable="@drawable/login_down" />
-	<item android:drawable="@drawable/login" /> <!-- default -->
-</selector>
diff --git a/samples/Hackbook/res/drawable/login_down.png b/samples/Hackbook/res/drawable/login_down.png
deleted file mode 100644
index 10d216b3f..000000000
Binary files a/samples/Hackbook/res/drawable/login_down.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/logout.png b/samples/Hackbook/res/drawable/logout.png
deleted file mode 100644
index 290272aa0..000000000
Binary files a/samples/Hackbook/res/drawable/logout.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/logout_button.xml b/samples/Hackbook/res/drawable/logout_button.xml
deleted file mode 100644
index 7d2a08d7d..000000000
--- a/samples/Hackbook/res/drawable/logout_button.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/logout_down" />
-    <item android:drawable="@drawable/logout" /> <!-- default -->
-</selector>
diff --git a/samples/Hackbook/res/drawable/logout_down.png b/samples/Hackbook/res/drawable/logout_down.png
deleted file mode 100644
index 1ab14b9dc..000000000
Binary files a/samples/Hackbook/res/drawable/logout_down.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/me.png b/samples/Hackbook/res/drawable/me.png
deleted file mode 100644
index 413e20bb9..000000000
Binary files a/samples/Hackbook/res/drawable/me.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/splash.png b/samples/Hackbook/res/drawable/splash.png
deleted file mode 100644
index 1892fcec6..000000000
Binary files a/samples/Hackbook/res/drawable/splash.png and /dev/null differ
diff --git a/samples/Hackbook/res/drawable/x.png b/samples/Hackbook/res/drawable/x.png
deleted file mode 100644
index f0978141d..000000000
Binary files a/samples/Hackbook/res/drawable/x.png and /dev/null differ
diff --git a/samples/Hackbook/res/layout-land/main.xml b/samples/Hackbook/res/layout-land/main.xml
deleted file mode 100644
index d0fb77490..000000000
--- a/samples/Hackbook/res/layout-land/main.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:gravity="center_horizontal">
-    <RelativeLayout
-        android:layout_width="fill_parent"
-        android:padding="6dip"
-        android:layout_height="?android:attr/listPreferredItemHeight">
-        <ImageView
-            android:id="@+id/user_pic"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_alignParentTop="true"
-            android:layout_alignParentBottom="true"
-            android:layout_marginRight="6dip" />
-        <TextView
-            android:id="@+id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_toRightOf="@id/user_pic" />
-        <com.facebook.android.LoginButton
-            android:id="@+id/login"
-            android:src="@drawable/login_button"
-            android:layout_toRightOf="@id/user_pic"
-            android:layout_below="@id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
-    </RelativeLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="1dip"
-         android:background="@color/grey" />
-    <ListView
-        android:id="@+id/main_list"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content" />
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="1dip"
-        android:background="@color/grey" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout-port/main.xml b/samples/Hackbook/res/layout-port/main.xml
deleted file mode 100644
index d0fb77490..000000000
--- a/samples/Hackbook/res/layout-port/main.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:gravity="center_horizontal">
-    <RelativeLayout
-        android:layout_width="fill_parent"
-        android:padding="6dip"
-        android:layout_height="?android:attr/listPreferredItemHeight">
-        <ImageView
-            android:id="@+id/user_pic"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_alignParentTop="true"
-            android:layout_alignParentBottom="true"
-            android:layout_marginRight="6dip" />
-        <TextView
-            android:id="@+id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_toRightOf="@id/user_pic" />
-        <com.facebook.android.LoginButton
-            android:id="@+id/login"
-            android:src="@drawable/login_button"
-            android:layout_toRightOf="@id/user_pic"
-            android:layout_below="@id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
-    </RelativeLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="1dip"
-         android:background="@color/grey" />
-    <ListView
-        android:id="@+id/main_list"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content" />
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="1dip"
-        android:background="@color/grey" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/connection_item.xml b/samples/Hackbook/res/layout/connection_item.xml
deleted file mode 100644
index ae300e2b4..000000000
--- a/samples/Hackbook/res/layout/connection_item.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight">
-    <TextView
-        android:id="@+id/connection_name"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:textSize="26sp"
-        android:textColor="@color/lite_blue"
-        android:paddingLeft="5dp" />
-</RelativeLayout>
diff --git a/samples/Hackbook/res/layout/fields_connections_list.xml b/samples/Hackbook/res/layout/fields_connections_list.xml
deleted file mode 100644
index 3b238a903..000000000
--- a/samples/Hackbook/res/layout/fields_connections_list.xml
+++ /dev/null
@@ -1,61 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TabHost
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:id="@+id/tabHost">
-        <RelativeLayout
-            android:layout_height="wrap_content"
-            android:layout_width="fill_parent">
-            <TabWidget
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabs" />
-            <FrameLayout
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabcontent"
-                android:layout_below="@android:id/tabs">
-                <LinearLayout
-                    android:orientation="vertical"
-                    android:layout_width="fill_parent"
-                    android:layout_height="fill_parent"
-                    android:id="@+id/fields_layout">
-                    <Button android:id="@+id/get_fields_button"
-                        android:text="@string/get_fields"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:padding="10dp" />
-                    <ListView
-                        android:id="@+id/fields_list"
-                        android:layout_width="fill_parent"
-                        android:layout_height="fill_parent" />
-                </LinearLayout>
-                <ListView
-                    android:id="@+id/connections_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="fill_parent" />
-            </FrameLayout>
-        </RelativeLayout>
-    </TabHost>
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/fields_item.xml b/samples/Hackbook/res/layout/fields_item.xml
deleted file mode 100644
index 4fb3ff585..000000000
--- a/samples/Hackbook/res/layout/fields_item.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <CheckBox
-        android:id="@+id/fields_checkbox"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-    <TextView
-        android:id="@+id/fields_info"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/fql_query.xml b/samples/Hackbook/res/layout/fql_query.xml
deleted file mode 100644
index 0492ea0c8..000000000
--- a/samples/Hackbook/res/layout/fql_query.xml
+++ /dev/null
@@ -1,58 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical"
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <EditText
-            android:layout_height="wrap_content"
-            android:layout_width="240dp"
-            android:layout_weight="1"
-            android:textSize="25px"
-            android:gravity="left|center"
-            android:id="@+id/fqlquery" />
-        <Button android:id="@+id/submit_button"
-            android:text="@string/submit"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="3dip"
-        android:background="@color/grey" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent">
-        <TextView
-            android:id="@+id/fqlOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:visibility="invisible"
-            android:background="@color/grey" />
-    </ScrollView>
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/friend_item.xml b/samples/Hackbook/res/layout/friend_item.xml
deleted file mode 100644
index 63d5a2b68..000000000
--- a/samples/Hackbook/res/layout/friend_item.xml
+++ /dev/null
@@ -1,50 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:padding="6dip"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    android:id="@+id/friend_item">
-    <ImageView
-        android:id="@+id/profile_pic"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentBottom="true"
-        android:layout_marginRight="6dip" />
-    <TextView
-        android:id="@+id/name"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_toRightOf="@id/profile_pic"
-        android:layout_alignParentRight="true"
-        android:layout_alignParentTop="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:gravity="center_vertical" />
-    <TextView
-        android:id="@+id/info"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_toRightOf="@id/profile_pic"
-        android:layout_below="@id/name"
-        android:layout_alignParentBottom="true"
-        android:layout_alignParentRight="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:singleLine="true"
-        android:ellipsize="marquee" />
-</RelativeLayout>
diff --git a/samples/Hackbook/res/layout/friends_list.xml b/samples/Hackbook/res/layout/friends_list.xml
deleted file mode 100644
index 3323df311..000000000
--- a/samples/Hackbook/res/layout/friends_list.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <ListView
-        android:id="@+id/friends_list"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
- </LinearLayout>
diff --git a/samples/Hackbook/res/layout/graph_explorer.xml b/samples/Hackbook/res/layout/graph_explorer.xml
deleted file mode 100644
index 105520d85..000000000
--- a/samples/Hackbook/res/layout/graph_explorer.xml
+++ /dev/null
@@ -1,119 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent" >
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/accessTokenButton"
-            android:text="@string/get_permissions"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <TextView
-        android:id="@+id/graphDomain"
-        android:text="@string/graph_domain"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingRight="5dp"
-        android:paddingLeft="5dp" />
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <FrameLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content">
-            <EditText android:id="@+id/inputId"
-                android:layout_height="wrap_content"
-                android:layout_width="240dp"
-                android:layout_weight="1"
-                android:textSize="25px"
-                android:gravity="left"
-                android:hint="Enter Object ID" />
-            <Button
-                android:id="@+id/meButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginRight="30dip"
-                android:layout_gravity="right|center_vertical"
-                android:background="@drawable/me"
-                android:visibility="invisible" />
-            <Button
-                android:id="@+id/textDeleteButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginRight="5dip"
-                android:layout_gravity="right|center_vertical"
-                android:background="@drawable/x" />
-        </FrameLayout>
-        <Button
-            android:id="@+id/submitButton"
-            android:text="@string/submit"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <Button android:id="@+id/fieldsAndConnectionsButton"
-            android:text="@string/fields_and_connections"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-        <Button android:id="@+id/viewURLButton"
-            android:text="@string/view_url"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-        <Button android:id="@+id/backParentButton"
-            android:text="@string/back_parent"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-    </LinearLayout>
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent">
-        <TextView android:id="@+id/output"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:textSize="16sp"
-            android:visibility="invisible"
-            android:background="@color/grey" />
-    </ScrollView>
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/main_list_item.xml b/samples/Hackbook/res/layout/main_list_item.xml
deleted file mode 100644
index 14de54141..000000000
--- a/samples/Hackbook/res/layout/main_list_item.xml
+++ /dev/null
@@ -1,26 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<TextView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/main_api_item"
-    android:padding="10dip"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:layout_alignParentRight="true"
-    android:layout_alignParentTop="true"
-    android:gravity="center_vertical"
-    android:textSize="20sp" />
diff --git a/samples/Hackbook/res/layout/permission_item.xml b/samples/Hackbook/res/layout/permission_item.xml
deleted file mode 100644
index 15d9dcfd6..000000000
--- a/samples/Hackbook/res/layout/permission_item.xml
+++ /dev/null
@@ -1,25 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight">
-    <CheckBox
-        android:id="@+id/permission_checkbox"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-</RelativeLayout>
diff --git a/samples/Hackbook/res/layout/permissions_list.xml b/samples/Hackbook/res/layout/permissions_list.xml
deleted file mode 100644
index 4dfb16072..000000000
--- a/samples/Hackbook/res/layout/permissions_list.xml
+++ /dev/null
@@ -1,75 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/permission_detail"
-        android:text="@string/permission_detail"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center_vertical"
-        android:textSize="16sp" />
-   <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-   <Button
-        android:id="@+id/get_permissions_button"
-        android:text="@string/get_permissions"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:padding="10dp" />
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <TabHost
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:id="@+id/tabHost">
-        <RelativeLayout
-            android:layout_height="wrap_content"
-            android:layout_width="fill_parent">
-            <TabWidget
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabs" />
-            <FrameLayout
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabcontent"
-                android:layout_below="@android:id/tabs">
-                <ListView
-                    android:id="@+id/user_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-                <ListView
-                    android:id="@+id/friend_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-                <ListView
-                    android:id="@+id/extended_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-            </FrameLayout>
-        </RelativeLayout>
-    </TabHost>
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/place_item.xml b/samples/Hackbook/res/layout/place_item.xml
deleted file mode 100644
index 0b4b29ae4..000000000
--- a/samples/Hackbook/res/layout/place_item.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:padding="6dip"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    android:id="@+id/friend_item">
-    <TextView
-        android:id="@+id/place_name"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_alignParentRight="true"
-        android:layout_alignParentTop="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:gravity="center_vertical" />
-    <TextView
-        android:id="@+id/place_location"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/place_name"
-        android:layout_alignParentBottom="true"
-        android:layout_alignParentRight="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:singleLine="true"
-        android:ellipsize="marquee" />
-</RelativeLayout>
diff --git a/samples/Hackbook/res/layout/places_list.xml b/samples/Hackbook/res/layout/places_list.xml
deleted file mode 100644
index 1b8ca5abe..000000000
--- a/samples/Hackbook/res/layout/places_list.xml
+++ /dev/null
@@ -1,27 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <ListView
-        android:id="@+id/places_list"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
- </LinearLayout>
diff --git a/samples/Hackbook/res/layout/splash.xml b/samples/Hackbook/res/layout/splash.xml
deleted file mode 100644
index 98de00c57..000000000
--- a/samples/Hackbook/res/layout/splash.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ImageView android:id="@+id/imageView1" xmlns:android="http://schemas.android.com/apk/res/android"
-    android:src="@drawable/splash"
-    android:scaleType="fitXY"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent" />
diff --git a/samples/Hackbook/res/layout/token_refresh.xml b/samples/Hackbook/res/layout/token_refresh.xml
deleted file mode 100644
index fb52da847..000000000
--- a/samples/Hackbook/res/layout/token_refresh.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/tokenLabel"
-        android:text="@string/access_token_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <EditText
-        android:id="@+id/tokenEdit"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:editable="false" />
-    <TextView
-        android:id="@+id/tokenExpiresLabel"
-        android:text="@string/access_token_expires_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <EditText
-        android:id="@+id/tokenExpiresEdit"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:editable="false" />
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/refresh_button"
-            android:text="@string/refresh_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <TextView
-        android:id="@+id/usefulTip"
-        android:text="@string/refresh_token_tip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/update_post_response.xml b/samples/Hackbook/res/layout/update_post_response.xml
deleted file mode 100644
index 3b30c2e8d..000000000
--- a/samples/Hackbook/res/layout/update_post_response.xml
+++ /dev/null
@@ -1,83 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/apiOutputLabel"
-        android:text="@string/api_response"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="140dp"
-        android:layout_width="fill_parent">
-        <TextView android:id="@+id/apiOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:background="@color/grey" />
-    </ScrollView>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/view_post_button"
-            android:text="@string/view_post"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-        <Button
-            android:id="@+id/delete_post_button"
-            android:text="@string/delete_post"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <TextView
-        android:id="@+id/usefulTip"
-        android:text="@string/post_tip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/layout/upload_photo_response.xml b/samples/Hackbook/res/layout/upload_photo_response.xml
deleted file mode 100644
index 66abc9b53..000000000
--- a/samples/Hackbook/res/layout/upload_photo_response.xml
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/apiOutputLabel"
-        android:text="@string/api_response"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
-        android:paddingBottom="3dp">
-        <TextView android:id="@+id/apiOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:background="@color/grey" />
-    </ScrollView>
-    <View
-         android:paddingTop="3dp"
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/view_photo_button"
-            android:text="@string/view_photo"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-        <Button
-            android:id="@+id/tag_photo_button"
-            android:text="@string/tag_photo"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <ImageView
-            android:id="@+id/uploadedPhoto"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingBottom="3dp" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-
-    <TextView
-        android:id="@+id/usefulTip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/samples/Hackbook/res/values/strings.xml b/samples/Hackbook/res/values/strings.xml
deleted file mode 100644
index e854ad8ad..000000000
--- a/samples/Hackbook/res/values/strings.xml
+++ /dev/null
@@ -1,104 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">Hackbook for Android</string>
-    <string name="app_desc">Check out Hackbook for Android to learn how you can make your android apps social using Facebook Platform.</string>
-    <string name="app_action">I am using the Hackbook for Android</string>
-    <string name="request_message">Learn how to make your android apps social.</string>
-    <string name="request">Request!</string>
-    <string name="upload">Upload Photo</string><string name="post">Wall Post!</string>
-    <string name="delete">Delete Post</string>
-    <string name="no_login">Graph API Explorer</string>
-    <string name="get_permissions">Get Permissions</string>
-    <string name="access_token">Access Token:</string>
-    <string name="graph_domain">https://graph.facebook.com/</string>
-    <string name="submit">Submit</string>
-    <string name="label_output">Output:</string>
-    <string name="show_metadata">Show metadata</string>
-    <string name="show_picture">Show picture</string>
-    <string name="view_url">URL</string>
-    <string name="target_url">Target URL:</string>
-    <string name="exception">Exception: </string>
-    <string name="tip_label">Tip:</string>
-    <string name="error">Error</string>
-    <string name="facebook_error">Facebook Error: </string>
-    <string name="api_response">Api Response:</string>
-    <string name="view_source">View Source</string>
-    <string name="view_post">View Post</string>
-    <string name="delete_post">Delete Post</string>
-    <string name="source_code">Source Code:</string>
-    <string name="please_wait">Please wait...</string>
-    <string name="view_photo">View Photo</string>
-    <string name="hide_photo">Hide Photo</string>
-    <string name="tag_photo">Tag Photo</string>
-    <string name="graph_button">Graph API</string>
-    <string name="fql_button">FQL Query</string>
-    <string name="source_tag">Source tag:</string>
-    <string name="permission_source_tag">Source tag: \"perms_tag\"</string>
-    <string name="Graph_FQL_title">Graph API or FQL Query?</string>
-    <string name="Graph_FQL_msg">Get friends using Graph or FQL Query?\n\nWith FQL query you can sort the list by names, whereas with Graph list will be ordered by UID and can\'t be changed.</string>
-    <string name="can_post_on_wall_title">Post on friend\'s wall</string>
-    <string name="can_post_on_wall">Friends list fetched. You can post on friend\'s wall by clicking on the item.</string>
-    <string name="ok">OK</string>
-    <string name="post_on_wall_title">Post on Wall?</string>
-    <string name="post_on_wall">Would you like to post on %1$s\'s wall</string>
-    <string name="yes">Yes</string>
-    <string name="no">No</string>
-    <string name="save">Save</string>
-    <string name="reset">Reset</string>
-    <string  name="get_fields">Get Fields</string>
-    <string name="fields">Fields</string>
-    <string name="connections">Connections</string>
-    <string  name="checkin">Check-in</string>
-    <string name="cancel">Cancel</string>
-    <string name="user">User Data</string>
-    <string name="friend">Friends Data</string>
-    <string name="extended">Extended</string>
-    <string name="gallery_remote_title">Upload from gallery or remote?</string>
-    <string name="gallery_remote_msg">Upload picture from phone\' gallery or remote server?</string>
-    <string name="gallery_button">Gallery</string>
-    <string name="remote_button">Remote</string>
-    <string name="get_location">Get Location?</string>
-    <string name="get_default_or_new_location">Get current location or use Times Square as the location?</string>
-    <string name="current_location_button">Current Location</string>
-    <string name="fetching_current_permissions">Fetching current permissions...</string>
-    <string name="explorer_message">Also, checkout the web-version of the <a href="http://developers.facebook.com/tools/explorer">Graph API Explorer tool</a></string>
-    <string name="nearby_places">Fetching nearby places...</string>
-    <string name="times_square_button">Times Square</string>
-    <string name="check_in_title">Check-in?</string>
-    <string name="permissions">Permissions</string>
-    <string name="back_parent">Back to parent</string>
-    <string name="fields_and_connections">Fields \u0026 Connections</string>
-    <string name="permissions_request">Select Permissions:</string>
-    <string name="permission_detail">Checkout <a href="https://developers.facebook.com/docs/authentication/permissions/">permissions reference doc</a></string>
-    <string name="fetching_location">Fetching Location...</string>
-    <string name="check_in_at">Would you like to check-in at %1$s?</string>
-    <string name="post_tip">\'read_stream\' permission is required to view and delete the post.\n\nUse SDK dialogs to publish stories or post on friends wall. <a href="https://developers.facebook.com/docs/reference/dialogs">More info</a>\n\n<a href="https://developers.facebook.com/docs/reference/api/Comment">Like and Comment on a post</a></string>
-    <string name="photo_tip">Photos are by default uploaded to the app\'s album. Specify album_id to upload to specific album. E.g. https://graph.facebook.com/{album_id}/photos.\n\nMore Info: https://developers.facebook.com/docs/reference/api/photo</string>
-    <string name="fqlquery">Enter FQL Query:</string>
-    <string name="enable_gps_title">Enable GPS</string>
-    <string name="enable_gps">Please enable GPS to get nearby places and check-in</string>
-    <string name="gps_settings">GPS Settings</string>
-    <string name="refresh_token_title">Refresh Token</string>
-    <string name="refresh_button">Refresh</string>
-    <string name="refresh_button_pending">Refreshing…</string>
-    <string name="refresh_token_tip">In most cases the access token should be refreshed silently when the application is running (for example see Hackbook onResume method).</string>
-    <string name="refresh_token_binding_error">Binding to the Facebook Android Application failed (is it installed?).</string>
-    <string name="access_token_label">Current access token:</string>
-    <string name="access_token_expires_label">Token expires at:</string>
-</resources>
diff --git a/samples/Hackbook/src/com/facebook/android/BaseRequestListener.java b/samples/Hackbook/src/com/facebook/android/BaseRequestListener.java
deleted file mode 100644
index fc2049db9..000000000
--- a/samples/Hackbook/src/com/facebook/android/BaseRequestListener.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.util.Log;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-/**
- * Skeleton base class for RequestListeners, providing default error handling.
- * Applications should handle these error conditions.
- */
-@SuppressWarnings("deprecation")
-public abstract class BaseRequestListener implements RequestListener {
-
-    @Override
-    public void onFacebookError(FacebookError e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onFileNotFoundException(FileNotFoundException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onIOException(IOException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onMalformedURLException(MalformedURLException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/FQLQuery.java b/samples/Hackbook/src/com/facebook/android/FQLQuery.java
deleted file mode 100644
index 253e86251..000000000
--- a/samples/Hackbook/src/com/facebook/android/FQLQuery.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Handler;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-@SuppressWarnings("deprecation")
-public class FQLQuery extends Dialog {
-
-    private EditText mFQLQuery;
-    private TextView mFQLOutput;
-    private Button mSubmitButton;
-    private Activity activity;
-    private Handler mHandler;
-    private ProgressDialog dialog;
-
-    public FQLQuery(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(R.string.fqlquery);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.fql_query);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mFQLQuery = (EditText) findViewById(R.id.fqlquery);
-        mFQLOutput = (TextView) findViewById(R.id.fqlOutput);
-        mSubmitButton = (Button) findViewById(R.id.submit_button);
-
-        mSubmitButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                ((InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE))
-                        .hideSoftInputFromWindow(mFQLQuery.getWindowToken(), 0);
-                dialog = ProgressDialog.show(FQLQuery.this.activity, "",
-                        FQLQuery.this.activity.getString(R.string.please_wait), true, true);
-                /*
-                 * Source tag: fql_query_tag
-                 */
-                String query = mFQLQuery.getText().toString();
-                Bundle params = new Bundle();
-                params.putString("method", "fql.query");
-                params.putString("query", query);
-                Utility.mAsyncRunner.request(null, params, new FQLRequestListener());
-            }
-        });
-    }
-
-    public class FQLRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            /*
-             * Output can be a JSONArray or a JSONObject.
-             * Try JSONArray and if there's a JSONException, parse to JSONObject
-             */
-            try {
-                JSONArray json = new JSONArray(response);
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                try {
-                    /*
-                     * JSONObject probably indicates there was some error
-                     * Display that error, but for end user you should parse the
-                     * error and show appropriate message
-                     */
-                    JSONObject json = new JSONObject(response);
-                    setText(json.toString(2));
-                } catch (JSONException e1) {
-                    setText(activity.getString(R.string.exception) + e1.getMessage());
-                }
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mFQLOutput.setText(txt);
-                mFQLOutput.setVisibility(View.VISIBLE);
-            }
-        });
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java b/samples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java
deleted file mode 100644
index dff2fe5ed..000000000
--- a/samples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java
+++ /dev/null
@@ -1,311 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Dialog;
-import android.os.Bundle;
-import android.text.SpannableString;
-import android.text.style.UnderlineSpan;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.*;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.CompoundButton.OnCheckedChangeListener;
-import android.widget.TabHost.TabSpec;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Vector;
-
-public class FieldsConnectionsDialog extends Dialog {
-
-    private final static int TAB_HEIGHT = 50;
-
-    private Button mGetFieldsButton;
-    private ListView fieldsList, connectionsList;
-    private BaseAdapter fieldsAdapter, connectionsAdapter;
-
-    private GraphExplorer explorerActivity;
-
-    protected Vector<String> fieldsVector;
-    private ArrayList<JSONObject> fieldsArray;
-    private ArrayList<String> connectionsArray;
-
-    public FieldsConnectionsDialog(GraphExplorer explorerActivity, JSONObject metadata) {
-        super(explorerActivity);
-        this.explorerActivity = explorerActivity;
-
-        /*
-         * Sort the fields and connections
-         */
-        try {
-            sortFields(metadata.getJSONArray("fields"));
-            sortConnections(metadata.getJSONObject("connections").names());
-        } catch (JSONException e) {
-            Toast.makeText(explorerActivity.getBaseContext(),
-                    "Fields/Connections could not be fetched.", Toast.LENGTH_SHORT).show();
-        }
-
-        setTitle(explorerActivity.getString(R.string.fields_and_connections));
-        fieldsVector = new Vector<String>();
-    }
-
-    /*
-     * Sort fields which are returned as JSONObject in the JSONArray
-     */
-    public void sortFields(JSONArray jsonFieldsArray) {
-        this.fieldsArray = new ArrayList<JSONObject>(jsonFieldsArray.length());
-        for (int i = 0; i < jsonFieldsArray.length(); i++) {
-            try {
-                this.fieldsArray.add(jsonFieldsArray.getJSONObject(i));
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-
-        Collections.sort(this.fieldsArray, new Comparator<JSONObject>() {
-            @Override
-            public int compare(JSONObject object1, JSONObject object2) {
-                try {
-                    return object1.getString("name").compareToIgnoreCase(object2.getString("name"));
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                return 0;
-            }
-        });
-    }
-
-    /*
-     * Sort the Connections returned in the JSONArray
-     */
-    public void sortConnections(JSONArray jsonConnectionsArray) {
-        this.connectionsArray = new ArrayList<String>(jsonConnectionsArray.length());
-        for (int i = 0; i < jsonConnectionsArray.length(); i++) {
-            try {
-                this.connectionsArray.add(jsonConnectionsArray.get(i).toString());
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-        Collections.sort(this.connectionsArray);
-    }
-
-    /*
-     * Layout the dialog
-     */
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.fields_connections_list);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        fieldsList = (ListView) findViewById(R.id.fields_list);
-        connectionsList = (ListView) findViewById(R.id.connections_list);
-
-        fieldsAdapter = new FieldsListAdapter();
-        if (this.fieldsArray == null) {
-            fieldsList.setAdapter(new ArrayAdapter<String>(explorerActivity,
-                    android.R.layout.simple_list_item_1, new String[] { "No fields available" }));
-        } else {
-            fieldsList.setAdapter(fieldsAdapter);
-        }
-
-        connectionsAdapter = new ConnectionsListAdapter();
-        if (this.connectionsArray == null) {
-            connectionsList.setAdapter(new ArrayAdapter<String>(explorerActivity,
-                    android.R.layout.simple_list_item_1,
-                    new String[] { "No connections available" }));
-        } else {
-            connectionsList.setAdapter(connectionsAdapter);
-        }
-
-        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
-        tabHost.setup();
-
-        TabSpec spec1 = tabHost.newTabSpec("Tab 1");
-        spec1.setIndicator(explorerActivity.getString(R.string.fields));
-        spec1.setContent(R.id.fields_layout);
-
-        TabSpec spec2 = tabHost.newTabSpec("Tab 2");
-        spec2.setIndicator(explorerActivity.getString(R.string.connections));
-        spec2.setContent(R.id.connections_list);
-
-        tabHost.addTab(spec1);
-        tabHost.addTab(spec2);
-        tabHost.setCurrentTab(0);
-        tabHost.getTabWidget().getChildAt(0).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(1).getLayoutParams().height = TAB_HEIGHT;
-
-        mGetFieldsButton = (Button) findViewById(R.id.get_fields_button);
-        mGetFieldsButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source Tag:
-                 */
-                FieldsConnectionsDialog.this.dismiss();
-                if (!fieldsVector.isEmpty()) {
-                    explorerActivity.getFields(fieldsVector);
-                } else {
-                    Toast.makeText(explorerActivity.getBaseContext(), "No Fields selected.",
-                            Toast.LENGTH_SHORT).show();
-                }
-            }
-        });
-
-        connectionsList.setOnItemClickListener(new OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-                FieldsConnectionsDialog.this.dismiss();
-                explorerActivity.getConnection(connectionsArray.get(position));
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class FieldsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        boolean[] isChecked;
-
-        public FieldsListAdapter() {
-            mInflater = LayoutInflater.from(explorerActivity.getBaseContext());
-            isChecked = new boolean[fieldsArray.size()];
-        }
-
-        @Override
-        public int getCount() {
-            return fieldsArray.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(final int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            ViewHolder holder;
-            JSONObject fieldObject = null;
-            fieldObject = fieldsArray.get(position);
-
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.fields_item, null);
-                holder = new ViewHolder();
-                holder.checkbox = (CheckBox) hView.findViewById(R.id.fields_checkbox);
-                holder.fieldsInfo = (TextView) hView.findViewById(R.id.fields_info);
-                hView.setTag(holder);
-            } else {
-                holder = (ViewHolder) hView.getTag();
-            }
-            try {
-                holder.checkbox.setText(fieldObject.getString("name"));
-            } catch (JSONException e) {
-                holder.checkbox.setText("");
-            }
-            try {
-                holder.fieldsInfo.setText(fieldObject.getString("description"));
-            } catch (JSONException e) {
-                holder.fieldsInfo.setText("");
-            }
-            holder.checkbox.setId(position);
-            holder.checkbox.setChecked(isChecked[position]);
-            holder.checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
-                @Override
-                public void onCheckedChanged(CompoundButton button, boolean checked) {
-                    isChecked[button.getId()] = checked;
-                    String field = button.getText().toString();
-                    if (checked) {
-                        fieldsVector.add(field);
-                    } else if (fieldsVector.contains(field)) {
-                        fieldsVector.remove(field);
-                    }
-                }
-            });
-
-            return hView;
-        }
-    }
-
-    class ViewHolder {
-        CheckBox checkbox;
-        TextView fieldsInfo;
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class ConnectionsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-
-        public ConnectionsListAdapter() {
-            mInflater = LayoutInflater.from(explorerActivity.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return connectionsArray.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            View hView = convertView;
-            TextView connection;
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.connection_item, null);
-                connection = (TextView) hView.findViewById(R.id.connection_name);
-                hView.setTag(connection);
-            } else {
-                connection = (TextView) hView.getTag();
-            }
-            SpannableString name;
-            name = new SpannableString(connectionsArray.get(position));
-            name.setSpan(new UnderlineSpan(), 0, name.length(), 0);
-            connection.setText(name);
-            return hView;
-        }
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java b/samples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java
deleted file mode 100644
index 1620cd71c..000000000
--- a/samples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.graphics.Bitmap;
-import android.os.AsyncTask;
-import android.widget.BaseAdapter;
-
-import java.util.Hashtable;
-import java.util.Stack;
-
-/*
- * Fetch friends profile pictures request via AsyncTask
- */
-public class FriendsGetProfilePics {
-
-    Hashtable<String, Bitmap> friendsImages;
-    Hashtable<String, String> positionRequested;
-    BaseAdapter listener;
-    int runningCount = 0;
-    Stack<ItemPair> queue;
-
-    /*
-     * 15 max async tasks at any given time.
-     */
-    final static int MAX_ALLOWED_TASKS = 15;
-
-    public FriendsGetProfilePics() {
-        friendsImages = new Hashtable<String, Bitmap>();
-        positionRequested = new Hashtable<String, String>();
-        queue = new Stack<ItemPair>();
-    }
-
-    /*
-     * Inform the listener when the image has been downloaded. listener is
-     * FriendsList here.
-     */
-    public void setListener(BaseAdapter listener) {
-        this.listener = listener;
-        reset();
-    }
-
-    public void reset() {
-        positionRequested.clear();
-        runningCount = 0;
-        queue.clear();
-    }
-
-    /*
-     * If the profile picture has already been downloaded and cached, return it
-     * else execute a new async task to fetch it - if total async tasks >15,
-     * queue the request.
-     */
-    public Bitmap getImage(String uid, String url) {
-        Bitmap image = friendsImages.get(uid);
-        if (image != null) {
-            return image;
-        }
-        if (!positionRequested.containsKey(uid)) {
-            positionRequested.put(uid, "");
-            if (runningCount >= MAX_ALLOWED_TASKS) {
-                queue.push(new ItemPair(uid, url));
-            } else {
-                runningCount++;
-                new GetProfilePicAsyncTask().execute(uid, url);
-            }
-        }
-        return null;
-    }
-
-    public void getNextImage() {
-        if (!queue.isEmpty()) {
-            ItemPair item = queue.pop();
-            new GetProfilePicAsyncTask().execute(item.uid, item.url);
-        }
-    }
-
-    /*
-     * Start a AsyncTask to fetch the request
-     */
-    private class GetProfilePicAsyncTask extends AsyncTask<Object, Void, Bitmap> {
-        String uid;
-
-        @Override
-        protected Bitmap doInBackground(Object... params) {
-            this.uid = (String) params[0];
-            String url = (String) params[1];
-            return Utility.getBitmap(url);
-        }
-
-        @Override
-        protected void onPostExecute(Bitmap result) {
-            runningCount--;
-            if (result != null) {
-                friendsImages.put(uid, result);
-                listener.notifyDataSetChanged();
-                getNextImage();
-            }
-        }
-    }
-
-    class ItemPair {
-        String uid;
-        String url;
-
-        public ItemPair(String uid, String url) {
-            this.uid = uid;
-            this.url = url;
-        }
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/FriendsList.java b/samples/Hackbook/src/com/facebook/android/FriendsList.java
deleted file mode 100644
index 7ecc832da..000000000
--- a/samples/Hackbook/src/com/facebook/android/FriendsList.java
+++ /dev/null
@@ -1,226 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.os.Handler;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import android.widget.AdapterView.OnItemClickListener;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-public class FriendsList extends Activity implements OnItemClickListener {
-    private Handler mHandler;
-
-    protected ListView friendsList;
-    protected static JSONArray jsonArray;
-    protected String graph_or_fql;
-
-    /*
-     * Layout the friends' list
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-        setContentView(R.layout.friends_list);
-
-        Bundle extras = getIntent().getExtras();
-        String apiResponse = extras.getString("API_RESPONSE");
-        graph_or_fql = extras.getString("METHOD");
-        try {
-            if (graph_or_fql.equals("graph")) {
-                jsonArray = new JSONObject(apiResponse).getJSONArray("data");
-            } else {
-                jsonArray = new JSONArray(apiResponse);
-            }
-        } catch (JSONException e) {
-            showToast("Error: " + e.getMessage());
-            return;
-        }
-        friendsList = (ListView) findViewById(R.id.friends_list);
-        friendsList.setOnItemClickListener(this);
-        friendsList.setAdapter(new FriendListAdapter(this));
-
-        showToast(getString(R.string.can_post_on_wall));
-    }
-
-    /*
-     * Clicking on a friend should popup a dialog for user to post on friend's
-     * wall.
-     */
-    @Override
-    @SuppressWarnings("deprecation")
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        try {
-            final long friendId;
-            if (graph_or_fql.equals("graph")) {
-                friendId = jsonArray.getJSONObject(position).getLong("id");
-            } else {
-                friendId = jsonArray.getJSONObject(position).getLong("uid");
-            }
-            String name = jsonArray.getJSONObject(position).getString("name");
-
-            new AlertDialog.Builder(this).setTitle(R.string.post_on_wall_title)
-                    .setMessage(String.format(getString(R.string.post_on_wall), name))
-                    .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            Bundle params = new Bundle();
-                            /*
-                             * Source Tag: friend_wall_tag To write on a friend's wall, 
-                             * provide friend's UID in the 'to' parameter.
-                             * More info on feed dialog:
-                             * https://developers.facebook.com/docs/reference/dialogs/feed/
-                             */
-                            params.putString("to", String.valueOf(friendId));
-                            params.putString("caption", getString(R.string.app_name));
-                            params.putString("description", getString(R.string.app_desc));
-                            params.putString("picture", Utility.HACK_ICON_URL);
-                            params.putString("name", getString(R.string.app_action));
-                            Utility.mFacebook.dialog(FriendsList.this, "feed", params,
-                                    new PostDialogListener());
-                        }
-
-                    }).setNegativeButton(R.string.no, null).show();
-        } catch (JSONException e) {
-            showToast("Error: " + e.getMessage());
-        }
-    }
-
-    /*
-     * Callback after the message has been posted on friend's wall.
-     */
-    public class PostDialogListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                showToast("Message posted on the wall.");
-            } else {
-                showToast("No message posted on the wall.");
-            }
-        }
-    }
-
-    public void showToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast toast = Toast.makeText(FriendsList.this, msg, Toast.LENGTH_LONG);
-                toast.show();
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class FriendListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        FriendsList friendsList;
-
-        public FriendListAdapter(FriendsList friendsList) {
-            this.friendsList = friendsList;
-            if (Utility.model == null) {
-                Utility.model = new FriendsGetProfilePics();
-            }
-            Utility.model.setListener(this);
-            mInflater = LayoutInflater.from(friendsList.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return jsonArray.length();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            JSONObject jsonObject = null;
-            try {
-                jsonObject = jsonArray.getJSONObject(position);
-            } catch (JSONException e1) {
-                e1.printStackTrace();
-            }
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.friend_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.profile_pic = (ImageView) hView.findViewById(R.id.profile_pic);
-                holder.name = (TextView) hView.findViewById(R.id.name);
-                holder.info = (TextView) hView.findViewById(R.id.info);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-            try {
-                if (graph_or_fql.equals("graph")) {
-                    holder.profile_pic.setImageBitmap(Utility.model.getImage(
-                            jsonObject.getString("id"), jsonObject.getString("picture")));
-                } else {
-                    holder.profile_pic.setImageBitmap(Utility.model.getImage(
-                            jsonObject.getString("uid"), jsonObject.getString("pic_square")));
-                }
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                holder.name.setText(jsonObject.getString("name"));
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                if (graph_or_fql.equals("graph")) {
-                    holder.info.setText(jsonObject.getJSONObject("location").getString("name"));
-                } else {
-                    JSONObject location = jsonObject.getJSONObject("current_location");
-                    holder.info.setText(location.getString("city") + ", "
-                            + location.getString("state"));
-                }
-
-            } catch (JSONException e) {
-                holder.info.setText("");
-            }
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        ImageView profile_pic;
-        TextView name;
-        TextView info;
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/GraphExplorer.java b/samples/Hackbook/src/com/facebook/android/GraphExplorer.java
deleted file mode 100644
index 7fe858e7a..000000000
--- a/samples/Hackbook/src/com/facebook/android/GraphExplorer.java
+++ /dev/null
@@ -1,371 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-/*
- * The me, delete and back_parent buttons are downloaded from http://icongal.com/
- */
-
-import android.app.Activity;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.TextUtils;
-import android.text.util.Linkify;
-import android.text.util.Linkify.TransformFilter;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.*;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Iterator;
-import java.util.Vector;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-@SuppressWarnings("deprecation")
-public class GraphExplorer extends Activity {
-    private Button mSubmitButton, mViewURLButton;
-    private Button mGetPermissionsButton;
-    private Button mTextDeleteButton, mMeButton;
-    private Button mFieldsConnectionsButton, mBackParentButton;
-    private TextView mOutput;
-    private EditText mInputId;
-    private Bundle params;
-    private String url, mParentObjectId;
-    private ProgressDialog dialog;
-    private String rootString;
-    private ScrollView mScrollView;
-    private Handler mHandler;
-    private final static String BASE_GRAPH_URL = "https://graph.facebook.com";
-
-    private JSONObject metadataObject;
-
-    /*
-     * Layout the Graph Explorer
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.graph_explorer);
-
-        url = BASE_GRAPH_URL; // Base URL
-
-        mInputId = (EditText) findViewById(R.id.inputId);
-        mOutput = (TextView) findViewById(R.id.output);
-        mSubmitButton = (Button) findViewById(R.id.submitButton);
-        mViewURLButton = (Button) findViewById(R.id.viewURLButton);
-        mGetPermissionsButton = (Button) findViewById(R.id.accessTokenButton);
-        mFieldsConnectionsButton = (Button) findViewById(R.id.fieldsAndConnectionsButton);
-        mBackParentButton = (Button) findViewById(R.id.backParentButton);
-
-        mScrollView = (ScrollView) findViewById(R.id.ScrollView01);
-
-        mTextDeleteButton = (Button) findViewById(R.id.textDeleteButton);
-        mMeButton = (Button) findViewById(R.id.meButton);
-        if (Utility.mFacebook.isSessionValid()) {
-            mMeButton.setVisibility(View.VISIBLE);
-        }
-
-        params = new Bundle();
-        mSubmitButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-
-                ((InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE))
-                        .hideSoftInputFromWindow(mInputId.getWindowToken(), 0);
-
-                // Prepare the URL to be shown on 'View URL' click action. This
-                // is not used by the SDK
-                url = BASE_GRAPH_URL; // Base URL
-
-                /*
-                 * Source Tag: graph_explorer
-                 */
-                rootString = mInputId.getText().toString();
-                if (!TextUtils.isEmpty(rootString)) {
-                    dialog = ProgressDialog.show(GraphExplorer.this, "",
-                            getString(R.string.please_wait), true, true);
-                    params.putString("metadata", "1");
-                    Utility.mAsyncRunner.request(rootString, params, new graphApiRequestListener());
-                    url += "/" + rootString; // Relative Path provided by you
-                }
-
-            }
-        });
-
-        mViewURLButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                setText(url);
-                Linkify.addLinks(mOutput, Linkify.WEB_URLS);
-            }
-        });
-
-        mGetPermissionsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (Utility.mFacebook.isSessionValid()) {
-                    dialog = ProgressDialog.show(GraphExplorer.this, "",
-                            getString(R.string.fetching_current_permissions), true, true);
-                    Bundle params = new Bundle();
-                    params.putString("access_token", Utility.mFacebook.getAccessToken());
-                    Utility.mAsyncRunner.request("me/permissions", params,
-                            new permissionsRequestListener());
-                } else {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            }
-        });
-
-        mFieldsConnectionsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (metadataObject == null) {
-                    makeToast("No fields, connections availalbe for this object.");
-                } else {
-                    new FieldsConnectionsDialog(GraphExplorer.this, metadataObject).show();
-                }
-            }
-        });
-
-        mTextDeleteButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                url = BASE_GRAPH_URL; // Base URL
-                mParentObjectId = "";
-                mInputId.setText("");
-                params.clear();
-                metadataObject = null;
-                setText("");
-                mBackParentButton.setVisibility(View.INVISIBLE);
-            }
-        });
-
-        mMeButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                mInputId.setText("me");
-                mSubmitButton.performClick();
-            }
-        });
-
-        mBackParentButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                mInputId.setText(mParentObjectId);
-                mParentObjectId = "";
-                mSubmitButton.performClick();
-            }
-        });
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (Utility.mFacebook.isSessionValid()) {
-            mMeButton.setVisibility(View.VISIBLE);
-        }
-        if (Utility.objectID != null) {
-            mInputId.setText(Utility.objectID);
-            Utility.objectID = null;
-            mSubmitButton.performClick();
-        }
-    }
-
-    protected void processIntent(Intent incomingIntent) {
-        Uri intentUri = incomingIntent.getData();
-        if (intentUri == null) {
-            return;
-        }
-        String objectID = intentUri.getHost();
-        mInputId.setText(objectID);
-        mSubmitButton.performClick();
-    }
-
-    public void getConnection(String connection) {
-        mInputId.setText(rootString + "/" + connection);
-        mParentObjectId = rootString;
-        mSubmitButton.performClick();
-    }
-
-    public void getFields(Vector<String> fieldsVector) {
-        String fields = "";
-        int count = 0;
-        for (String field : fieldsVector) {
-            fields += field;
-            if (++count < fieldsVector.size()) {
-                fields += ",";
-            }
-        }
-        params.putString("fields", fields);
-        mSubmitButton.performClick();
-    }
-
-    /*
-     * Callback for the permission OAuth Dialog
-     */
-    public class permissionsRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            /*
-             * Clear the current permission list and repopulate with new
-             * permissions. This is used to mark assigned permission green and
-             * unclickable.
-             */
-            Utility.currentPermissions.clear();
-            try {
-                JSONObject jsonObject = new JSONObject(response).getJSONArray("data")
-                        .getJSONObject(0);
-                Iterator<?> iterator = jsonObject.keys();
-                String permission;
-                while (iterator.hasNext()) {
-                    permission = (String) iterator.next();
-                    Utility.currentPermissions.put(permission,
-                            String.valueOf(jsonObject.getInt(permission)));
-                }
-            } catch (JSONException e) {
-                makeToast("Permissions could not be fetched, none will be selected by default.");
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            makeToast("Permissions could not be fetched, none will be selected by default.");
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            });
-        }
-
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Utility.mFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    /*
-     * Callback after a given Graph API request is executed Get the response and
-     * show it.
-     */
-    public class graphApiRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            // access token is appended by Facebook object, hence params are
-            // added here after request is complete
-            if (!params.isEmpty()) {
-                url += "?" + Util.encodeUrl(params); // Params
-            }
-            metadataObject = null;
-            params.clear();
-            try {
-                JSONObject json = Util.parseJson(response);
-                if (json.has("metadata")) {
-                    metadataObject = json.getJSONObject("metadata");
-                    json.remove("metadata");
-                } else {
-                    metadataObject = null;
-                }
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                setText(e.getMessage());
-                e.printStackTrace();
-            } catch (FacebookError e) {
-                setText(e.getMessage());
-                e.printStackTrace();
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(error.getMessage());
-            params.clear();
-            metadataObject = null;
-        }
-
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-
-            /*
-             * A transform filter that simply returns just the text captured by
-             * the first regular expression group.
-             */
-            TransformFilter idFilter = new TransformFilter() {
-                @Override
-                public final String transformUrl(final Matcher match, String url) {
-                    return match.group(1);
-                }
-            };
-
-            @Override
-            public void run() {
-                mViewURLButton.setVisibility(
-                        TextUtils.isEmpty(txt) ? View.INVISIBLE : View.VISIBLE);
-                mFieldsConnectionsButton.setVisibility(TextUtils.isEmpty(txt) ? View.INVISIBLE
-                        : View.VISIBLE);
-                mOutput.setVisibility(TextUtils.isEmpty(txt) ? View.INVISIBLE : View.VISIBLE);
-                mBackParentButton.setVisibility(
-                        TextUtils.isEmpty(mParentObjectId) ? View.INVISIBLE : View.VISIBLE);
-
-                String convertedTxt = txt.replace("\\/", "/");
-                mOutput.setText(convertedTxt);
-                mScrollView.scrollTo(0, 0);
-
-                Linkify.addLinks(mOutput, Linkify.WEB_URLS);
-                /*
-                 * Linkify the object ids so they can be clicked. match pattern:
-                 * "id" : "objectid" (objectid can be int or int_int)
-                 */
-                Pattern pattern = Pattern.compile("\"id\": \"(\\d*_?\\d*)\"");
-                String scheme = "fbGraphEx://";
-                Linkify.addLinks(mOutput, pattern, scheme, null, idFilter);
-            }
-        });
-    }
-
-    private void makeToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(GraphExplorer.this, msg, Toast.LENGTH_SHORT).show();
-            }
-        });
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/Hackbook.java b/samples/Hackbook/src/com/facebook/android/Hackbook.java
deleted file mode 100644
index 816a10aa7..000000000
--- a/samples/Hackbook/src/com/facebook/android/Hackbook.java
+++ /dev/null
@@ -1,620 +0,0 @@
-/**
- * Copyright 2010-present Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.provider.MediaStore;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import android.widget.AdapterView.OnItemClickListener;
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-
-@SuppressWarnings("deprecation")
-public class Hackbook extends Activity implements OnItemClickListener {
-
-    /*
-     * Your Facebook Application ID must be set before running this example See
-     * http://www.facebook.com/developers/createapp.php
-     */
-    public static final String APP_ID = "157111564357680";
-
-    private LoginButton mLoginButton;
-    private TextView mText;
-    private ImageView mUserPic;
-    private Handler mHandler;
-    ProgressDialog dialog;
-
-    final static int AUTHORIZE_ACTIVITY_RESULT_CODE = 0;
-    final static int PICK_EXISTING_PHOTO_RESULT_CODE = 1;
-
-    private String graph_or_fql;
-
-    private ListView list;
-    String[] main_items = { "Update Status", "App Requests", "Get Friends", "Upload Photo",
-            "Place Check-in", "Run FQL Query", "Graph API Explorer", "Token Refresh" };
-    String[] permissions = { "offline_access", "publish_stream", "user_photos", "publish_checkins",
-            "photo_upload" };
-
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (APP_ID == null) {
-            Util.showAlert(this, "Warning", "Facebook Applicaton ID must be "
-                    + "specified before running this example: see FbAPIs.java");
-            return;
-        }
-
-        setContentView(R.layout.main);
-        mHandler = new Handler();
-
-        mText = (TextView) Hackbook.this.findViewById(R.id.txt);
-        mUserPic = (ImageView) Hackbook.this.findViewById(R.id.user_pic);
-
-        // Create the Facebook Object using the app id.
-        Utility.mFacebook = new Facebook(APP_ID);
-        // Instantiate the asynrunner object for asynchronous api calls.
-        Utility.mAsyncRunner = new AsyncFacebookRunner(Utility.mFacebook);
-
-        mLoginButton = (LoginButton) findViewById(R.id.login);
-
-        // restore session if one exists
-        SessionStore.restore(Utility.mFacebook, this);
-        SessionEvents.addAuthListener(new FbAPIsAuthListener());
-        SessionEvents.addLogoutListener(new FbAPIsLogoutListener());
-
-        /*
-         * Source Tag: login_tag
-         */
-        mLoginButton.init(this, AUTHORIZE_ACTIVITY_RESULT_CODE, Utility.mFacebook, permissions);
-
-        if (Utility.mFacebook.isSessionValid()) {
-            requestUserData();
-        }
-
-        list = (ListView) findViewById(R.id.main_list);
-
-        list.setOnItemClickListener(this);
-        list.setAdapter(new ArrayAdapter<String>(this, R.layout.main_list_item, main_items));
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if(Utility.mFacebook != null) {
-            if (!Utility.mFacebook.isSessionValid()) {
-                mText.setText("You are logged out! ");
-                mUserPic.setImageBitmap(null);
-            } else {
-                Utility.mFacebook.extendAccessTokenIfNeeded(this, null);
-            }
-        }
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-        /*
-         * if this is the activity result from authorization flow, do a call
-         * back to authorizeCallback Source Tag: login_tag
-         */
-            case AUTHORIZE_ACTIVITY_RESULT_CODE: {
-                Utility.mFacebook.authorizeCallback(requestCode, resultCode, data);
-                break;
-            }
-            /*
-             * if this is the result for a photo picker from the gallery, upload
-             * the image after scaling it. You can use the Utility.scaleImage()
-             * function for scaling
-             */
-            case PICK_EXISTING_PHOTO_RESULT_CODE: {
-                if (resultCode == Activity.RESULT_OK) {
-                    Uri photoUri = data.getData();
-                    if (photoUri != null) {
-                        Bundle params = new Bundle();
-                        try {
-                            params.putByteArray("photo",
-                                    Utility.scaleImage(getApplicationContext(), photoUri));
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                        }
-                        params.putString("caption", "FbAPIs Sample App photo upload");
-                        Utility.mAsyncRunner.request("me/photos", params, "POST",
-                                new PhotoUploadListener(), null);
-                    } else {
-                        Toast.makeText(getApplicationContext(),
-                                "Error selecting image from the gallery.", Toast.LENGTH_SHORT)
-                                .show();
-                    }
-                } else {
-                    Toast.makeText(getApplicationContext(), "No image selected for upload.",
-                            Toast.LENGTH_SHORT).show();
-                }
-                break;
-            }
-        }
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        switch (position) {
-        /*
-         * Source Tag: update_status_tag Update user's status by invoking the
-         * feed dialog To post to a friend's wall, provide his uid in the 'to'
-         * parameter Refer to
-         * https://developers.facebook.com/docs/reference/dialogs/feed/ for more
-         * info.
-         */
-            case 0: {
-                Bundle params = new Bundle();
-                params.putString("caption", getString(R.string.app_name));
-                params.putString("description", getString(R.string.app_desc));
-                params.putString("picture", Utility.HACK_ICON_URL);
-                params.putString("name", getString(R.string.app_action));
-
-                Utility.mFacebook.dialog(Hackbook.this, "feed", params, new UpdateStatusListener());
-                String access_token = Utility.mFacebook.getAccessToken();
-                System.out.println(access_token);
-                break;
-            }
-
-            /*
-             * Source Tag: app_requests Send an app request to friends. If no
-             * friend is specified, the user will see a friend selector and will
-             * be able to select a maximum of 50 recipients. To send request to
-             * specific friend, provide the uid in the 'to' parameter Refer to
-             * https://developers.facebook.com/docs/reference/dialogs/requests/
-             * for more info.
-             */
-            case 1: {
-                Bundle params = new Bundle();
-                params.putString("message", getString(R.string.request_message));
-                Utility.mFacebook.dialog(Hackbook.this, "apprequests", params,
-                        new AppRequestsListener());
-                break;
-            }
-
-            /*
-             * Source Tag: friends_tag You can get friends using
-             * graph.facebook.com/me/friends, this returns the list sorted by
-             * UID OR using the friend table. With this you can sort the way you
-             * want it.
-             * Friend table - https://developers.facebook.com/docs/reference/fql/friend/
-             * User table - https://developers.facebook.com/docs/reference/fql/user/
-             */
-            case 2: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    dialog = ProgressDialog.show(Hackbook.this, "",
-                            getString(R.string.please_wait), true, true);
-                    new AlertDialog.Builder(this)
-                            .setTitle(R.string.Graph_FQL_title)
-                            .setMessage(R.string.Graph_FQL_msg)
-                            .setPositiveButton(R.string.graph_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            graph_or_fql = "graph";
-                                            Bundle params = new Bundle();
-                                            params.putString("fields", "name, picture, location");
-                                            Utility.mAsyncRunner.request("me/friends", params,
-                                                    new FriendsRequestListener());
-                                        }
-
-                                    })
-                            .setNegativeButton(R.string.fql_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            graph_or_fql = "fql";
-                                            String query = "select name, current_location, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name";
-                                            Bundle params = new Bundle();
-                                            params.putString("method", "fql.query");
-                                            params.putString("query", query);
-                                            Utility.mAsyncRunner.request(null, params,
-                                                    new FriendsRequestListener());
-                                        }
-
-                                    }).setOnCancelListener(new DialogInterface.OnCancelListener() {
-                                @Override
-                                public void onCancel(DialogInterface d) {
-                                    dialog.dismiss();
-                                }
-                            }).show();
-                }
-                break;
-            }
-
-            /*
-             * Source Tag: upload_photo You can upload a photo from the media
-             * gallery or from a remote server How to upload photo:
-             * https://developers.facebook.com/blog/post/498/
-             */
-            case 3: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    dialog = ProgressDialog.show(Hackbook.this, "",
-                            getString(R.string.please_wait), true, true);
-                    new AlertDialog.Builder(this)
-                            .setTitle(R.string.gallery_remote_title)
-                            .setMessage(R.string.gallery_remote_msg)
-                            .setPositiveButton(R.string.gallery_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            Intent intent = new Intent(Intent.ACTION_PICK,
-                                                    (MediaStore.Images.Media.EXTERNAL_CONTENT_URI));
-                                            startActivityForResult(intent,
-                                                    PICK_EXISTING_PHOTO_RESULT_CODE);
-                                        }
-
-                                    })
-                            .setNegativeButton(R.string.remote_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            /*
-                                             * Source tag: upload_photo_tag
-                                             */
-                                            Bundle params = new Bundle();
-                                            params.putString("url",
-                                                    "http://www.facebook.com/images/devsite/iphone_connect_btn.jpg");
-                                            params.putString("caption",
-                                                    "FbAPIs Sample App photo upload");
-                                            Utility.mAsyncRunner.request("me/photos", params,
-                                                    "POST", new PhotoUploadListener(), null);
-                                        }
-
-                                    }).setOnCancelListener(new DialogInterface.OnCancelListener() {
-                                @Override
-                                public void onCancel(DialogInterface d) {
-                                    dialog.dismiss();
-                                }
-                            }).show();
-                }
-                break;
-            }
-
-            /*
-             * User can check-in to a place, you require publish_checkins
-             * permission for that. You can use the default Times Square
-             * location or fetch user's current location. Get user's checkins:
-             * https://developers.facebook.com/docs/reference/api/checkin/
-             */
-            case 4: {
-                final Intent myIntent = new Intent(getApplicationContext(), Places.class);
-
-                new AlertDialog.Builder(this)
-                        .setTitle(R.string.get_location)
-                        .setMessage(R.string.get_default_or_new_location)
-                        .setPositiveButton(R.string.current_location_button,
-                                new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialog, int which) {
-                                        myIntent.putExtra("LOCATION", "current");
-                                        startActivity(myIntent);
-                                    }
-                                })
-                        .setNegativeButton(R.string.times_square_button,
-                                new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialog, int which) {
-                                        myIntent.putExtra("LOCATION", "times_square");
-                                        startActivity(myIntent);
-                                    }
-
-                                }).show();
-                break;
-            }
-
-            case 5: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    new FQLQuery(Hackbook.this).show();
-                }
-                break;
-            }
-            /*
-             * This is advanced feature where you can request new permissions
-             * Browser user's graph, his fields and connections. This is similar
-             * to the www version:
-             * http://developers.facebook.com/tools/explorer/
-             */
-            case 6: {
-                Intent myIntent = new Intent(getApplicationContext(), GraphExplorer.class);
-                if (Utility.mFacebook.isSessionValid()) {
-                    Utility.objectID = "me";
-                }
-                startActivity(myIntent);
-                break;
-            }
-
-            case 7: {
-                if(!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    new TokenRefreshDialog(Hackbook.this).show();
-                }
-            }
-        }
-    }
-
-    /*
-     * callback for the feed dialog which updates the profile status
-     */
-    public class UpdateStatusListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                new UpdateStatusResultDialog(Hackbook.this, "Update Status executed", values)
-                        .show();
-            } else {
-                Toast toast = Toast.makeText(getApplicationContext(), "No wall post made",
-                        Toast.LENGTH_SHORT);
-                toast.show();
-            }
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast toast = Toast.makeText(getApplicationContext(), "Update status cancelled",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-    }
-
-    /*
-     * callback for the apprequests dialog which sends an app request to user's
-     * friends.
-     */
-    public class AppRequestsListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            Toast toast = Toast.makeText(getApplicationContext(), "App request sent",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast toast = Toast.makeText(getApplicationContext(), "App request cancelled",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-    }
-
-    /*
-     * callback after friends are fetched via me/friends or fql query.
-     */
-    public class FriendsRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            Intent myIntent = new Intent(getApplicationContext(), FriendsList.class);
-            myIntent.putExtra("API_RESPONSE", response);
-            myIntent.putExtra("METHOD", graph_or_fql);
-            startActivity(myIntent);
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    /*
-     * callback for the photo upload
-     */
-    public class PhotoUploadListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new UploadPhotoResultDialog(Hackbook.this, "Upload Photo executed", response)
-                            .show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_LONG).show();
-        }
-    }
-
-    public class FQLRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    Toast.makeText(getApplicationContext(), "Response: " + response,
-                            Toast.LENGTH_LONG).show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_LONG).show();
-        }
-    }
-
-    /*
-     * Callback for fetching current user's name, picture, uid.
-     */
-    public class UserRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            JSONObject jsonObject;
-            try {
-                jsonObject = new JSONObject(response);
-
-                final String picURL = jsonObject.getJSONObject("picture")
-                        .getJSONObject("data").getString("url");
-                final String name = jsonObject.getString("name");
-                Utility.userUID = jsonObject.getString("id");
-
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mText.setText("Welcome " + name + "!");
-                        mUserPic.setImageBitmap(Utility.getBitmap(picURL));
-                    }
-                });
-
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-
-    }
-
-    /*
-     * The Callback for notifying the application when authorization succeeds or
-     * fails.
-     */
-
-    public class FbAPIsAuthListener implements AuthListener {
-
-        @Override
-        public void onAuthSucceed() {
-            requestUserData();
-        }
-
-        @Override
-        public void onAuthFail(String error) {
-            mText.setText("Login Failed: " + error);
-        }
-    }
-
-    /*
-     * The Callback for notifying the application when log out starts and
-     * finishes.
-     */
-    public class FbAPIsLogoutListener implements LogoutListener {
-        @Override
-        public void onLogoutBegin() {
-            mText.setText("Logging out...");
-        }
-
-        @Override
-        public void onLogoutFinish() {
-            mText.setText("You have logged out! ");
-            mUserPic.setImageBitmap(null);
-        }
-    }
-
-    /*
-     * Request user name, and picture to show on the main screen.
-     */
-    public void requestUserData() {
-        mText.setText("Fetching user name, profile pic...");
-        Bundle params = new Bundle();
-        params.putString("fields", "name, picture");
-        Utility.mAsyncRunner.request("me", params, new UserRequestListener());
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class MainListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-
-        public MainListAdapter() {
-            mInflater = LayoutInflater.from(Hackbook.this.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return main_items.length;
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.main_list_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.main_list_item = (TextView) hView.findViewById(R.id.main_api_item);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-
-            holder.main_list_item.setText(main_items[position]);
-
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        TextView main_list_item;
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/IntentUriHandler.java b/samples/Hackbook/src/com/facebook/android/IntentUriHandler.java
deleted file mode 100644
index afa2cbd68..000000000
--- a/samples/Hackbook/src/com/facebook/android/IntentUriHandler.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-
-/**
- * A transient activity which handles fbgraphex: URIs and passes those to the
- * GraphExplorer class This is used to linkify the Object IDs in the graph api
- * response
- */
-public class IntentUriHandler extends Activity {
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Intent incomingIntent = getIntent();
-        if (incomingIntent != null) {
-            Uri intentUri = incomingIntent.getData();
-            if (intentUri != null) {
-                Utility.objectID = intentUri.getHost();
-                Intent graphIntent = new Intent(getApplicationContext(), GraphExplorer.class);
-                graphIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
-                startActivity(graphIntent);
-            }
-            finish();
-        }
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/LoginButton.java b/samples/Hackbook/src/com/facebook/android/LoginButton.java
deleted file mode 100644
index 30189b88c..000000000
--- a/samples/Hackbook/src/com/facebook/android/LoginButton.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/**
- * Copyright 2010-present Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.Handler;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.ImageButton;
-import com.facebook.android.Facebook.DialogListener;
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-
-@SuppressWarnings("deprecation")
-public class LoginButton extends ImageButton {
-
-    private Facebook mFb;
-    private Handler mHandler;
-    private SessionListener mSessionListener = new SessionListener();
-    private String[] mPermissions;
-    private Activity mActivity;
-    private int mActivityCode;
-
-    public LoginButton(Context context) {
-        super(context);
-    }
-
-    public LoginButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public LoginButton(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    public void init(final Activity activity, final int activityCode, final Facebook fb) {
-        init(activity, activityCode, fb, new String[] {});
-    }
-
-    public void init(final Activity activity, final int activityCode, final Facebook fb,
-            final String[] permissions) {
-        mActivity = activity;
-        mActivityCode = activityCode;
-        mFb = fb;
-        mPermissions = permissions;
-        mHandler = new Handler();
-
-        setBackgroundColor(Color.TRANSPARENT);
-        setImageResource(fb.isSessionValid() ? R.drawable.logout_button : R.drawable.login_button);
-        drawableStateChanged();
-
-        SessionEvents.addAuthListener(mSessionListener);
-        SessionEvents.addLogoutListener(mSessionListener);
-        setOnClickListener(new ButtonOnClickListener());
-    }
-
-    private final class ButtonOnClickListener implements OnClickListener {
-        /*
-         * Source Tag: login_tag
-         */
-        @Override
-        public void onClick(View arg0) {
-            if (mFb.isSessionValid()) {
-                SessionEvents.onLogoutBegin();
-                AsyncFacebookRunner asyncRunner = new AsyncFacebookRunner(mFb);
-                asyncRunner.logout(getContext(), new LogoutRequestListener());
-            } else {
-                mFb.authorize(mActivity, mPermissions, mActivityCode, new LoginDialogListener());
-            }
-        }
-    }
-
-    private final class LoginDialogListener implements DialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            SessionEvents.onLoginSuccess();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-
-        @Override
-        public void onError(DialogError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-
-        @Override
-        public void onCancel() {
-            SessionEvents.onLoginError("Action Canceled");
-        }
-    }
-
-    private class LogoutRequestListener extends BaseRequestListener {
-        @Override
-        public void onComplete(String response, final Object state) {
-            /*
-             * callback should be run in the original thread, not the background
-             * thread
-             */
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    SessionEvents.onLogoutFinish();
-                }
-            });
-        }
-    }
-
-    private class SessionListener implements AuthListener, LogoutListener {
-
-        @Override
-        public void onAuthSucceed() {
-            setImageResource(R.drawable.logout_button);
-            SessionStore.save(mFb, getContext());
-        }
-
-        @Override
-        public void onAuthFail(String error) {
-        }
-
-        @Override
-        public void onLogoutBegin() {
-        }
-
-        @Override
-        public void onLogoutFinish() {
-            SessionStore.clear(getContext());
-            setImageResource(R.drawable.login_button);
-        }
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/PermissionsDialog.java b/samples/Hackbook/src/com/facebook/android/PermissionsDialog.java
deleted file mode 100644
index cc61533fb..000000000
--- a/samples/Hackbook/src/com/facebook/android/PermissionsDialog.java
+++ /dev/null
@@ -1,260 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.text.method.LinkMovementMethod;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.*;
-import android.widget.CompoundButton.OnCheckedChangeListener;
-import android.widget.TabHost.TabSpec;
-import com.facebook.android.Facebook.DialogListener;
-
-import java.util.Vector;
-
-@SuppressWarnings("deprecation")
-public class PermissionsDialog extends Dialog {
-
-    private final static int TAB_HEIGHT = 50;
-
-    private Button mGetPermissions;
-    private TextView mPermissionDetails;
-
-    private Activity activity;
-
-    private ListView userPermissionsList, friendPermissionsList, extendedPermissionsList;
-
-    private BaseAdapter userPermissionsAdapter, friendPermissionsAdapter,
-            extendedPermissionAdapter;
-
-    protected Vector<String> reqPermVector;
-
-    String[] user_permissions = { "user_about_me", "user_activities", "user_birthday",
-            "user_checkins", "user_education_history", "user_events", "user_groups",
-            "user_hometown", "user_interests", "user_likes", "user_location", "user_notes",
-            "user_online_presence", "user_photos", "user_photo_video_tags", "user_relationships",
-            "user_relationship_details", "user_religion_politics", "user_status", "user_videos",
-            "user_website", "user_work_history" };
-
-    String[] friend_permissions = { "friends_about_me", "friends_activities", "friends_birthday",
-            "friends_checkins", "friends_education_history", "friends_events", "friends_groups",
-            "friends_hometown", "friends_interests", "friends_likes", "friends_location",
-            "friends_notes", "friends_online_presence", "friends_photos",
-            "friends_photo_video_tags", "friends_relationships", "friends_relationship_details",
-            "friends_religion_politics", "friends_status", "friends_videos", "friends_website",
-            "friends_work_history" };
-
-    String[] extended_permissions = { "ads_management", "create_event", "create_note", "email",
-            "export_stream", "manage_friendlists", "manage_groups", "manage_pages",
-            "offline_access", "publish_actions", "photo_upload", "publish_checkins",
-            "publish_stream", "read_friendlists", "read_insights", "read_mailbox", "read_requests",
-            "read_stream", "rsvp_event", "share_item", "status_update", "sms", "video_upload",
-            "xmpp_login" };
-
-    public PermissionsDialog(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(activity.getString(R.string.permissions_request));
-        reqPermVector = new Vector<String>();
-    }
-
-    /*
-     * Layout the permission dialog
-     */
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.permissions_list);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mPermissionDetails = (TextView) findViewById(R.id.permission_detail);
-        mPermissionDetails.setMovementMethod(LinkMovementMethod.getInstance());
-
-        userPermissionsList = (ListView) findViewById(R.id.user_permissions_list);
-        friendPermissionsList = (ListView) findViewById(R.id.friend_permissions_list);
-        extendedPermissionsList = (ListView) findViewById(R.id.extended_permissions_list);
-
-        userPermissionsAdapter = new PermissionsListAdapter(user_permissions);
-        userPermissionsList.setAdapter(userPermissionsAdapter);
-
-        friendPermissionsAdapter = new PermissionsListAdapter(friend_permissions);
-        friendPermissionsList.setAdapter(friendPermissionsAdapter);
-
-        extendedPermissionAdapter = new PermissionsListAdapter(extended_permissions);
-        extendedPermissionsList.setAdapter(extendedPermissionAdapter);
-
-        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
-        tabHost.setup();
-
-        TabSpec spec1 = tabHost.newTabSpec("Tab 1");
-        spec1.setIndicator(activity.getString(R.string.user));
-        spec1.setContent(R.id.user_permissions_list);
-
-        TabSpec spec2 = tabHost.newTabSpec("Tab 2");
-        spec2.setIndicator(activity.getString(R.string.friend));
-        spec2.setContent(R.id.friend_permissions_list);
-
-        TabSpec spec3 = tabHost.newTabSpec("Tab 3");
-        spec3.setIndicator(activity.getString(R.string.extended));
-        spec3.setContent(R.id.extended_permissions_list);
-
-        tabHost.addTab(spec1);
-        tabHost.addTab(spec2);
-        tabHost.addTab(spec3);
-        tabHost.setCurrentTab(0);
-        tabHost.getTabWidget().getChildAt(0).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(1).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(2).getLayoutParams().height = TAB_HEIGHT;
-
-        mGetPermissions = (Button) findViewById(R.id.get_permissions_button);
-
-        mGetPermissions.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source Tag: perms_tag Call authorize to get the new
-                 * permissions
-                 */
-                if (reqPermVector.isEmpty() && Utility.mFacebook.isSessionValid()) {
-                    Toast.makeText(activity.getBaseContext(), "No Permissions selected.",
-                            Toast.LENGTH_SHORT).show();
-                    PermissionsDialog.this.dismiss();
-                } else {
-                    String[] permissions = reqPermVector.toArray(new String[0]);
-                    Utility.mFacebook.authorize(activity, permissions, new LoginDialogListener());
-                }
-            }
-        });
-    }
-
-    /*
-     * Callback when user has authorized the app with the new permissions
-     */
-    private final class LoginDialogListener implements DialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            // Inform the parent loginlistener so it can update the user's
-            // profile pic and name on the home screen.
-            SessionEvents.onLoginSuccess();
-
-            Toast.makeText(activity.getBaseContext(), "New Permissions granted.",
-                    Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(activity.getBaseContext(),
-                    "Facebook Error! No new permissions granted.", Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onError(DialogError error) {
-            Toast.makeText(activity.getBaseContext(), "Error! No new permissions granted.",
-                    Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast.makeText(activity.getBaseContext(),
-                    "Action cancelled, No new permissions granted.", Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class PermissionsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        String[] permissions;
-        boolean[] isChecked;
-
-        public PermissionsListAdapter(String[] permissions) {
-            this.permissions = permissions;
-            this.isChecked = new boolean[permissions.length];
-            mInflater = LayoutInflater.from(activity.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return permissions.length;
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(final int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            CheckBox checkbox;
-
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.permission_item, null);
-                checkbox = (CheckBox) hView.findViewById(R.id.permission_checkbox);
-                hView.setTag(checkbox);
-            } else {
-                checkbox = (CheckBox) hView.getTag();
-            }
-            checkbox.setText(this.permissions[position]);
-            checkbox.setId(position);
-            if (Utility.currentPermissions.containsKey(this.permissions[position])
-                    && Utility.currentPermissions.get(this.permissions[position]).equals("1")) {
-                checkbox.setTextColor(Color.GREEN);
-                checkbox.setChecked(true);
-                checkbox.setEnabled(false);
-                checkbox.setOnCheckedChangeListener(null);
-            } else {
-                checkbox.setTextColor(Color.WHITE);
-                checkbox.setChecked(this.isChecked[position]);
-                checkbox.setEnabled(true);
-                checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
-                    @Override
-                    public void onCheckedChanged(CompoundButton button, boolean checked) {
-                        isChecked[button.getId()] = checked;
-                        if (checked) {
-                            reqPermVector.add(button.getText().toString());
-                        } else if (reqPermVector.contains(button.getText())) {
-                            reqPermVector.remove(button.getText());
-                        }
-                    }
-                });
-            }
-            return hView;
-        }
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/Places.java b/samples/Hackbook/src/com/facebook/android/Places.java
deleted file mode 100644
index 105fe900d..000000000
--- a/samples/Hackbook/src/com/facebook/android/Places.java
+++ /dev/null
@@ -1,374 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import android.widget.AdapterView.OnItemClickListener;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-@SuppressWarnings("deprecation")
-public class Places extends Activity implements OnItemClickListener {
-    private Handler mHandler;
-    private JSONObject location;
-
-    protected ListView placesList;
-    protected LocationManager lm;
-    protected MyLocationListener locationListener;
-
-    protected static JSONArray jsonArray;
-    final static double TIMES_SQUARE_LAT = 40.756;
-    final static double TIMES_SQUARE_LON = -73.987;
-
-    protected ProgressDialog dialog;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-        location = new JSONObject();
-
-        setContentView(R.layout.places_list);
-
-        Bundle extras = getIntent().getExtras();
-        String default_or_new = extras.getString("LOCATION");
-        if (default_or_new.equals("times_square")) {
-            try {
-                location.put("latitude", new Double(TIMES_SQUARE_LAT));
-                location.put("longitude", new Double(TIMES_SQUARE_LON));
-            } catch (JSONException e) {
-            }
-            fetchPlaces();
-        } else {
-            getLocation();
-        }
-    }
-
-    public void getLocation() {
-        /*
-         * launch a new Thread to get new location
-         */
-        new Thread() {
-            @Override
-            public void run() {
-                Looper.prepare();
-                dialog = ProgressDialog.show(Places.this, "",
-                        getString(R.string.fetching_location), false, true,
-                        new DialogInterface.OnCancelListener() {
-                            @Override
-                            public void onCancel(DialogInterface dialog) {
-                                showToast("No location fetched.");
-                            }
-                        });
-
-                if (lm == null) {
-                    lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-                }
-
-                if (locationListener == null) {
-                    locationListener = new MyLocationListener();
-                }
-
-                Criteria criteria = new Criteria();
-                criteria.setAccuracy(Criteria.ACCURACY_COARSE);
-                String provider = lm.getBestProvider(criteria, true);
-                if (provider != null && lm.isProviderEnabled(provider)) {
-                    lm.requestLocationUpdates(provider, 1, 0, locationListener,
-                            Looper.getMainLooper());
-                } else {
-                    /*
-                     * GPS not enabled, prompt user to enable GPS in the
-                     * Location menu
-                     */
-                    new AlertDialog.Builder(Places.this)
-                            .setTitle(R.string.enable_gps_title)
-                            .setMessage(getString(R.string.enable_gps))
-                            .setPositiveButton(R.string.gps_settings,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            startActivityForResult(
-                                                    new Intent(
-                                                            android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS),
-                                                    0);
-                                        }
-                                    })
-                            .setNegativeButton(R.string.cancel,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            dialog.dismiss();
-                                            Places.this.finish();
-                                        }
-                                    }).show();
-                }
-                Looper.loop();
-            }
-        }.start();
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        /*
-         * User returning from the Location settings menu. try to fetch location
-         * again.
-         */
-        dialog.dismiss();
-        getLocation();
-    }
-
-    /*
-     * Fetch nearby places by providing the search type as 'place' within 1000
-     * mtrs of the provided lat & lon
-     */
-    private void fetchPlaces() {
-        if (!isFinishing()) {
-            dialog = ProgressDialog.show(Places.this, "", getString(R.string.nearby_places), true,
-                    true, new DialogInterface.OnCancelListener() {
-                        @Override
-                        public void onCancel(DialogInterface dialog) {
-                            showToast("No places fetched.");
-                        }
-                    });
-        }
-        /*
-         * Source tag: fetch_places_tag
-         */
-        Bundle params = new Bundle();
-        params.putString("type", "place");
-        try {
-            params.putString("center",
-                    location.getString("latitude") + "," + location.getString("longitude"));
-        } catch (JSONException e) {
-            showToast("No places fetched.");
-            return;
-        }
-        params.putString("distance", "1000");
-        Utility.mAsyncRunner.request("search", params, new placesRequestListener());
-    }
-
-    /*
-     * Callback after places are fetched.
-     */
-    public class placesRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            Log.d("Facebook-FbAPIs", "Got response: " + response);
-            dialog.dismiss();
-
-            try {
-                jsonArray = new JSONObject(response).getJSONArray("data");
-                if (jsonArray == null) {
-                    showToast("Error: nearby places could not be fetched");
-                    return;
-                }
-            } catch (JSONException e) {
-                showToast("Error: " + e.getMessage());
-                return;
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    placesList = (ListView) findViewById(R.id.places_list);
-                    placesList.setOnItemClickListener(Places.this);
-                    placesList.setAdapter(new PlacesListAdapter(Places.this));
-                }
-            });
-
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            showToast("Fetch Places Error: " + error.getMessage());
-        }
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        if (!Utility.mFacebook.isSessionValid()) {
-            Util.showAlert(this, "Warning", "You must first log in.");
-        } else {
-            try {
-                final String message = "Check-in from the " + getString(R.string.app_name);
-                final String name = jsonArray.getJSONObject(position).getString("name");
-                final String placeID = jsonArray.getJSONObject(position).getString("id");
-                new AlertDialog.Builder(this).setTitle(R.string.check_in_title)
-                        .setMessage(String.format(getString(R.string.check_in_at), name))
-                        .setPositiveButton(R.string.checkin, new DialogInterface.OnClickListener() {
-                            /*
-                             * Source tag: check_in_tag Check-in user at the
-                             * selected location posting to the me/checkins
-                             * endpoint. More info here:
-                             * https://developers.facebook
-                             * .com/docs/reference/api/user/ - checkins
-                             */
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                Bundle params = new Bundle();
-                                params.putString("place", placeID);
-                                params.putString("message", message);
-                                params.putString("coordinates", location.toString());
-                                Utility.mAsyncRunner.request("me/checkins", params, "POST",
-                                        new placesCheckInListener(), null);
-                            }
-                        }).setNegativeButton(R.string.cancel, null).show();
-            } catch (JSONException e) {
-                showToast("Error: " + e.getMessage());
-            }
-        }
-    }
-
-    public class placesCheckInListener extends BaseRequestListener {
-        @Override
-        public void onComplete(final String response, final Object state) {
-            showToast("API Response: " + response);
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            showToast("Check-in Error: " + error.getMessage());
-        }
-    }
-
-    public void showToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast toast = Toast.makeText(Places.this, msg, Toast.LENGTH_LONG);
-                toast.show();
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class PlacesListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        Places placesList;
-
-        public PlacesListAdapter(Context context) {
-            mInflater = LayoutInflater.from(context);
-        }
-
-        @Override
-        public int getCount() {
-            return jsonArray.length();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            JSONObject jsonObject = null;
-            try {
-                jsonObject = jsonArray.getJSONObject(position);
-            } catch (JSONException e1) {
-                e1.printStackTrace();
-            }
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.place_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.name = (TextView) hView.findViewById(R.id.place_name);
-                holder.location = (TextView) hView.findViewById(R.id.place_location);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-            try {
-                holder.name.setText(jsonObject.getString("name"));
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                String location = jsonObject.getJSONObject("location").getString("street") + ", "
-                        + jsonObject.getJSONObject("location").getString("city") + ", "
-                        + jsonObject.getJSONObject("location").getString("state");
-                holder.location.setText(location);
-            } catch (JSONException e) {
-                holder.location.setText("");
-            }
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        TextView name;
-        TextView location;
-    }
-
-    class MyLocationListener implements LocationListener {
-
-        @Override
-        public void onLocationChanged(Location loc) {
-            dialog.dismiss();
-            if (loc != null) {
-                try {
-                    location.put("latitude", new Double(loc.getLatitude()));
-                    location.put("longitude", new Double(loc.getLongitude()));
-                } catch (JSONException e) {
-                }
-                showToast("Location acquired: " + String.valueOf(loc.getLatitude()) + " "
-                        + String.valueOf(loc.getLongitude()));
-                lm.removeUpdates(this);
-                fetchPlaces();
-            }
-        }
-
-        @Override
-        public void onProviderDisabled(String provider) {
-        }
-
-        @Override
-        public void onProviderEnabled(String provider) {
-        }
-
-        @Override
-        public void onStatusChanged(String provider, int status, Bundle extras) {
-        }
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/SessionEvents.java b/samples/Hackbook/src/com/facebook/android/SessionEvents.java
deleted file mode 100644
index 55295f174..000000000
--- a/samples/Hackbook/src/com/facebook/android/SessionEvents.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright 2010-present Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.util.LinkedList;
-
-public class SessionEvents {
-
-    private static LinkedList<AuthListener> mAuthListeners = new LinkedList<AuthListener>();
-    private static LinkedList<LogoutListener> mLogoutListeners = new LinkedList<LogoutListener>();
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void addAuthListener(AuthListener listener) {
-        mAuthListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void removeAuthListener(AuthListener listener) {
-        mAuthListeners.remove(listener);
-    }
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void addLogoutListener(LogoutListener listener) {
-        mLogoutListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void removeLogoutListener(LogoutListener listener) {
-        mLogoutListeners.remove(listener);
-    }
-
-    public static void onLoginSuccess() {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthSucceed();
-        }
-    }
-
-    public static void onLoginError(String error) {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthFail(error);
-        }
-    }
-
-    public static void onLogoutBegin() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutBegin();
-        }
-    }
-
-    public static void onLogoutFinish() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutFinish();
-        }
-    }
-
-    /**
-     * Callback interface for authorization events.
-     */
-    public static interface AuthListener {
-
-        /**
-         * Called when a auth flow completes successfully and a valid OAuth
-         * Token was received. Executed by the thread that initiated the
-         * authentication. API requests can now be made.
-         */
-        public void onAuthSucceed();
-
-        /**
-         * Called when a login completes unsuccessfully with an error.
-         * 
-         * Executed by the thread that initiated the authentication.
-         */
-        public void onAuthFail(String error);
-    }
-
-    /**
-     * Callback interface for logout events.
-     */
-    public static interface LogoutListener {
-        /**
-         * Called when logout begins, before session is invalidated. Last chance
-         * to make an API call. Executed by the thread that initiated the
-         * logout.
-         */
-        public void onLogoutBegin();
-
-        /**
-         * Called when the session information has been cleared. UI should be
-         * updated to reflect logged-out state.
-         * 
-         * Executed by the thread that initiated the logout.
-         */
-        public void onLogoutFinish();
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/SessionStore.java b/samples/Hackbook/src/com/facebook/android/SessionStore.java
deleted file mode 100644
index 8e4dcda58..000000000
--- a/samples/Hackbook/src/com/facebook/android/SessionStore.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/**
- * Copyright 2010-present Facebook
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
-
-@SuppressWarnings("deprecation")
-public class SessionStore {
-
-    private static final String TOKEN = "access_token";
-    private static final String EXPIRES = "expires_in";
-    private static final String LAST_UPDATE = "last_update";
-    private static final String KEY = "facebook-session";
-
-    /*
-     * Save the access token and expiry date so you don't have to fetch it each
-     * time
-     */
-    public static boolean save(Facebook session, Context context) {
-        Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.putString(TOKEN, session.getAccessToken());
-        editor.putLong(EXPIRES, session.getAccessExpires());
-        editor.putLong(LAST_UPDATE, session.getLastAccessUpdate());
-        return editor.commit();
-    }
-
-    /*
-     * Restore the access token and the expiry date from the shared preferences.
-     */
-    public static boolean restore(Facebook session, Context context) {
-        SharedPreferences savedSession = context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        session.setTokenFromCache(
-                savedSession.getString(TOKEN, null),
-                savedSession.getLong(EXPIRES, 0),
-                savedSession.getLong(LAST_UPDATE, 0));
-        return session.isSessionValid();
-    }
-
-    public static void clear(Context context) {
-        Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.clear();
-        editor.commit();
-    }
-
-}
diff --git a/samples/Hackbook/src/com/facebook/android/SplashActivity.java b/samples/Hackbook/src/com/facebook/android/SplashActivity.java
deleted file mode 100644
index 0aa5be178..000000000
--- a/samples/Hackbook/src/com/facebook/android/SplashActivity.java
+++ /dev/null
@@ -1,45 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-
-import java.util.Timer;
-import java.util.TimerTask;
-
-public class SplashActivity extends Activity {
-    private long splashDelay = 1500;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.splash);
-        TimerTask task = new TimerTask() {
-            @Override
-            public void run() {
-                finish();
-                Intent hackbookIntent = new Intent().setClass(SplashActivity.this, Hackbook.class);
-                startActivity(hackbookIntent);
-            }
-        };
-
-        Timer timer = new Timer();
-        timer.schedule(task, splashDelay);
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java b/samples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
deleted file mode 100644
index b76479e58..000000000
--- a/samples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.os.Bundle;
-import android.text.method.LinkMovementMethod;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-import java.text.DateFormat;
-import java.util.Date;
-
-@SuppressWarnings("deprecation")
-public class TokenRefreshDialog extends Dialog {
-
-    private EditText tokenEdit, tokenExpiresEdit;
-    private TextView mUsefulTip;
-    private Button mRefreshButton;
-    private Activity activity;
-
-    public TokenRefreshDialog(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(R.string.refresh_token_title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.token_refresh);
-
-        tokenEdit = (EditText) findViewById(R.id.tokenEdit);
-        tokenEdit.setText(Utility.mFacebook.getAccessToken());
-
-        tokenExpiresEdit = (EditText) findViewById(R.id.tokenExpiresEdit);
-        setExpiresAt(Utility.mFacebook.getAccessExpires());
-
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mUsefulTip.setMovementMethod(LinkMovementMethod.getInstance());
-        mRefreshButton = (Button) findViewById(R.id.refresh_button);
-
-        mRefreshButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                changeButtonState(false);
-                RefreshTokenListener listener = new RefreshTokenListener();
-                if (!Utility.mFacebook.extendAccessToken(activity, listener)) {
-                    listener.onError(new Error(
-                            activity.getString(R.string.refresh_token_binding_error)));
-                }
-            }
-        });
-    }
-
-    private class RefreshTokenListener implements Facebook.ServiceListener {
-
-        @Override
-        public void onFacebookError(FacebookError e) {
-            changeButtonState(true);
-            String title = String.format(activity.getString(R.string.facebook_error) + "%d",
-                    e.getErrorCode());
-            Util.showAlert(activity, title, e.getMessage());
-        }
-
-        @Override
-        public void onError(Error e) {
-            changeButtonState(true);
-            Util.showAlert(activity, activity.getString(R.string.error), e.getMessage());
-        }
-
-        @Override
-        public void onComplete(Bundle values) {
-            changeButtonState(true);
-
-            // The access_token and expires_at values are automatically updated,
-            // so they can be obtained by using:
-            // - Facebook.getAccessToken()
-            // - Facebook.getAccessExpires()
-            // methods, but we can also get them from the 'values' bundle.
-            tokenEdit.setText(values.getString(Facebook.TOKEN));
-            setExpiresAt(values.getLong(Facebook.EXPIRES));
-        }
-    }
-
-    private void changeButtonState(boolean enabled) {
-        mRefreshButton.setEnabled(enabled);
-        mRefreshButton.setText(enabled ? R.string.refresh_button : R.string.refresh_button_pending);
-    }
-
-    private void setExpiresAt(long time) {
-        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
-        tokenExpiresEdit.setText(dateFormat.format(new Date(time)));
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java b/samples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java
deleted file mode 100644
index c17b6ad84..000000000
--- a/samples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java
+++ /dev/null
@@ -1,132 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.method.LinkMovementMethod;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.Button;
-import android.widget.TextView;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-@SuppressWarnings("deprecation")
-public class UpdateStatusResultDialog extends Dialog {
-
-    private Bundle values;
-    private TextView mOutput, mUsefulTip;
-    private Button mViewPostButton, mDeletePostButton;
-    private Activity activity;
-    private Handler mHandler;
-
-    public UpdateStatusResultDialog(Activity activity, String title, Bundle values) {
-        super(activity);
-        this.activity = activity;
-        this.values = values;
-        setTitle(title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.update_post_response);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mOutput = (TextView) findViewById(R.id.apiOutput);
-        mOutput.setText(values.toString());
-
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mUsefulTip.setMovementMethod(LinkMovementMethod.getInstance());
-        mViewPostButton = (Button) findViewById(R.id.view_post_button);
-        mDeletePostButton = (Button) findViewById(R.id.delete_post_button);
-        final String postId = values.getString("post_id");
-
-        mViewPostButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source tag: view_post_tag
-                 */
-                Utility.mAsyncRunner.request(postId, new WallPostRequestListener());
-            }
-        });
-        mDeletePostButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source tag: delete_post_tag
-                 */
-                Utility.mAsyncRunner.request(postId, new Bundle(), "DELETE",
-                        new WallPostDeleteListener(), null);
-            }
-        });
-    }
-
-    public class WallPostRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            try {
-                JSONObject json = new JSONObject(response);
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                setText(activity.getString(R.string.exception) + e.getMessage());
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public class WallPostDeleteListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            if (response.equals("true")) {
-                String message = "Wall Post deleted" + "\n";
-                message += "Api Response: " + response;
-                setText(message);
-            } else {
-                setText("wall post could not be deleted");
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mOutput.setText(txt);
-            }
-        });
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java b/samples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java
deleted file mode 100644
index 4b40e2409..000000000
--- a/samples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java
+++ /dev/null
@@ -1,201 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.graphics.Bitmap;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.TextUtils;
-import android.text.util.Linkify;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.TextView;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-@SuppressWarnings("deprecation")
-public class UploadPhotoResultDialog extends Dialog {
-
-    private String response, photo_id;
-    private TextView mOutput, mUsefulTip;
-    private Button mViewPhotoButton, mTagPhotoButton;
-    private ImageView mUploadedPhoto;
-    private Activity activity;
-    private ProgressDialog dialog;
-    private boolean hidePhoto = false;
-    private Handler mHandler;
-
-    public UploadPhotoResultDialog(Activity activity, String title, String response) {
-        super(activity);
-        this.activity = activity;
-        this.response = response;
-        setTitle(title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        mHandler = new Handler();
-
-        setContentView(R.layout.upload_photo_response);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mOutput = (TextView) findViewById(R.id.apiOutput);
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mViewPhotoButton = (Button) findViewById(R.id.view_photo_button);
-        mTagPhotoButton = (Button) findViewById(R.id.tag_photo_button);
-        mUploadedPhoto = (ImageView) findViewById(R.id.uploadedPhoto);
-
-        JSONObject json;
-        try {
-            json = Util.parseJson(response);
-            final String photo_id = json.getString("id");
-            this.photo_id = photo_id;
-
-            mOutput.setText(json.toString(2));
-            mUsefulTip.setText(activity.getString(R.string.photo_tip));
-            Linkify.addLinks(mUsefulTip, Linkify.WEB_URLS);
-
-            mViewPhotoButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (hidePhoto) {
-                        mViewPhotoButton.setText(R.string.view_photo);
-                        hidePhoto = false;
-                        mUploadedPhoto.setImageBitmap(null);
-                    } else {
-                        hidePhoto = true;
-                        mViewPhotoButton.setText(R.string.hide_photo);
-                        /*
-                         * Source tag: view_photo_tag
-                         */
-                        Bundle params = new Bundle();
-                        params.putString("fields", "picture");
-                        dialog = ProgressDialog.show(activity, "",
-                                activity.getString(R.string.please_wait), true, true);
-                        dialog.show();
-                        Utility.mAsyncRunner.request(photo_id, params,
-                                new ViewPhotoRequestListener());
-                    }
-                }
-            });
-            mTagPhotoButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    /*
-                     * Source tag: tag_photo_tag
-                     */
-                    setTag();
-                }
-            });
-        } catch (JSONException e) {
-            setText(activity.getString(R.string.exception) + e.getMessage());
-        } catch (FacebookError e) {
-            setText(activity.getString(R.string.facebook_error) + e.getMessage());
-        }
-    }
-
-    public void setTag() {
-        String relativePath = photo_id + "/tags/" + Utility.userUID;
-        Bundle params = new Bundle();
-        params.putString("x", "5");
-        params.putString("y", "5");
-        Utility.mAsyncRunner.request(relativePath, params, "POST", new TagPhotoRequestListener(),
-                null);
-    }
-
-    public class ViewPhotoRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            try {
-                JSONObject json = Util.parseJson(response);
-                final String pictureURL = json.getString("picture");
-                if (TextUtils.isEmpty(pictureURL)) {
-                    setText("Error getting \'picture\' field of the photo");
-                } else {
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            new FetchImage().execute(pictureURL);
-                        }
-                    });
-                }
-            } catch (JSONException e) {
-                dialog.dismiss();
-                setText(activity.getString(R.string.exception) + e.getMessage());
-            } catch (FacebookError e) {
-                dialog.dismiss();
-                setText(activity.getString(R.string.facebook_error) + e.getMessage());
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public class TagPhotoRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            if (response.equals("true")) {
-                String message = "User tagged in photo at (5, 5)" + "\n";
-                message += "Api Response: " + response;
-                setText(message);
-            } else {
-                setText("User could not be tagged.");
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mOutput.setText(txt);
-            }
-        });
-    }
-
-    private class FetchImage extends AsyncTask<String, Void, Bitmap> {
-        @Override
-        protected Bitmap doInBackground(String... urls) {
-            return Utility.getBitmap(urls[0]);
-        }
-
-        @Override
-        protected void onPostExecute(Bitmap result) {
-            dialog.dismiss();
-            mUploadedPhoto.setImageBitmap(result);
-        }
-    }
-}
diff --git a/samples/Hackbook/src/com/facebook/android/Utility.java b/samples/Hackbook/src/com/facebook/android/Utility.java
deleted file mode 100644
index 5547de1c3..000000000
--- a/samples/Hackbook/src/com/facebook/android/Utility.java
+++ /dev/null
@@ -1,168 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Application;
-import android.content.Context;
-import android.database.Cursor;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Matrix;
-import android.net.Uri;
-import android.net.http.AndroidHttpClient;
-import android.provider.MediaStore;
-import org.json.JSONObject;
-
-import java.io.*;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.Hashtable;
-
-public class Utility extends Application {
-
-    public static Facebook mFacebook;
-    @SuppressWarnings("deprecation")
-    public static AsyncFacebookRunner mAsyncRunner;
-    public static JSONObject mFriendsList;
-    public static String userUID = null;
-    public static String objectID = null;
-    public static FriendsGetProfilePics model;
-    public static AndroidHttpClient httpclient = null;
-    public static Hashtable<String, String> currentPermissions = new Hashtable<String, String>();
-
-    private static int MAX_IMAGE_DIMENSION = 720;
-    public static final String HACK_ICON_URL = "http://www.facebookmobileweb.com/hackbook/img/facebook_icon_large.png";
-
-    public static Bitmap getBitmap(String url) {
-        Bitmap bm = null;
-        try {
-            URL aURL = new URL(url);
-            URLConnection conn = aURL.openConnection();
-            conn.connect();
-            InputStream is = conn.getInputStream();
-            BufferedInputStream bis = new BufferedInputStream(is);
-            bm = BitmapFactory.decodeStream(new FlushedInputStream(is));
-            bis.close();
-            is.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            if (httpclient != null) {
-                httpclient.close();
-            }
-        }
-        return bm;
-    }
-
-    static class FlushedInputStream extends FilterInputStream {
-        public FlushedInputStream(InputStream inputStream) {
-            super(inputStream);
-        }
-
-        @Override
-        public long skip(long n) throws IOException {
-            long totalBytesSkipped = 0L;
-            while (totalBytesSkipped < n) {
-                long bytesSkipped = in.skip(n - totalBytesSkipped);
-                if (bytesSkipped == 0L) {
-                    int b = read();
-                    if (b < 0) {
-                        break; // we reached EOF
-                    } else {
-                        bytesSkipped = 1; // we read one byte
-                    }
-                }
-                totalBytesSkipped += bytesSkipped;
-            }
-            return totalBytesSkipped;
-        }
-    }
-
-    public static byte[] scaleImage(Context context, Uri photoUri) throws IOException {
-        InputStream is = context.getContentResolver().openInputStream(photoUri);
-        BitmapFactory.Options dbo = new BitmapFactory.Options();
-        dbo.inJustDecodeBounds = true;
-        BitmapFactory.decodeStream(is, null, dbo);
-        is.close();
-
-        int rotatedWidth, rotatedHeight;
-        int orientation = getOrientation(context, photoUri);
-
-        if (orientation == 90 || orientation == 270) {
-            rotatedWidth = dbo.outHeight;
-            rotatedHeight = dbo.outWidth;
-        } else {
-            rotatedWidth = dbo.outWidth;
-            rotatedHeight = dbo.outHeight;
-        }
-
-        Bitmap srcBitmap;
-        is = context.getContentResolver().openInputStream(photoUri);
-        if (rotatedWidth > MAX_IMAGE_DIMENSION || rotatedHeight > MAX_IMAGE_DIMENSION) {
-            float widthRatio = ((float) rotatedWidth) / ((float) MAX_IMAGE_DIMENSION);
-            float heightRatio = ((float) rotatedHeight) / ((float) MAX_IMAGE_DIMENSION);
-            float maxRatio = Math.max(widthRatio, heightRatio);
-
-            // Create the bitmap from file
-            BitmapFactory.Options options = new BitmapFactory.Options();
-            options.inSampleSize = (int) maxRatio;
-            srcBitmap = BitmapFactory.decodeStream(is, null, options);
-        } else {
-            srcBitmap = BitmapFactory.decodeStream(is);
-        }
-        is.close();
-
-        /*
-         * if the orientation is not 0 (or -1, which means we don't know), we
-         * have to do a rotation.
-         */
-        if (orientation > 0) {
-            Matrix matrix = new Matrix();
-            matrix.postRotate(orientation);
-
-            srcBitmap = Bitmap.createBitmap(srcBitmap, 0, 0, srcBitmap.getWidth(),
-                    srcBitmap.getHeight(), matrix, true);
-        }
-
-        String type = context.getContentResolver().getType(photoUri);
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        if (type.equals("image/png")) {
-            srcBitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
-        } else if (type.equals("image/jpg") || type.equals("image/jpeg")) {
-            srcBitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);
-        }
-        byte[] bMapArray = baos.toByteArray();
-        baos.close();
-        return bMapArray;
-    }
-
-    public static int getOrientation(Context context, Uri photoUri) {
-        /* it's on the external media. */
-        Cursor cursor = context.getContentResolver().query(photoUri,
-                new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
-
-        if (cursor.getCount() != 1) {
-            return -1;
-        }
-
-        cursor.moveToFirst();
-        int orientation = cursor.getInt(0);
-        cursor.close();
-
-        return orientation;
-    }
-}
diff --git a/samples/HelloFacebookSample/.classpath b/samples/HelloFacebookSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/HelloFacebookSample/.classpath
+++ b/samples/HelloFacebookSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/HelloFacebookSample/.project b/samples/HelloFacebookSample/.project
index cb52d544b..d2609b030 100644
--- a/samples/HelloFacebookSample/.project
+++ b/samples/HelloFacebookSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/HelloFacebookSample/HelloFacebookSample.iml b/samples/HelloFacebookSample/HelloFacebookSample.iml
deleted file mode 100644
index 3b9987615..000000000
--- a/samples/HelloFacebookSample/HelloFacebookSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/HelloFacebookSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
index 534ec7984..bf374a95c 100644
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
@@ -26,6 +26,7 @@
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
 import android.text.TextUtils;
+import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
@@ -41,7 +42,7 @@
 
 public class HelloFacebookSampleActivity extends FragmentActivity {
 
-    private static final List<String> PERMISSIONS = Arrays.asList("publish_actions");
+    private static final String PERMISSION = "publish_actions";
     private static final Location SEATTLE_LOCATION = new Location("") {
         {
             setLatitude(47.6097);
@@ -61,6 +62,9 @@
     private PendingAction pendingAction = PendingAction.NONE;
     private ViewGroup controlsContainer;
     private GraphUser user;
+    private GraphPlace place;
+    private List<GraphUser> tags;
+    private boolean canPresentShareDialog;
 
     private enum PendingAction {
         NONE,
@@ -76,6 +80,18 @@ public void call(Session session, SessionState state, Exception exception) {
         }
     };
 
+    private FacebookDialog.Callback dialogCallback = new FacebookDialog.Callback() {
+        @Override
+        public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
+            Log.d("HelloFacebook", String.format("Error: %s", error.toString()));
+        }
+
+        @Override
+        public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
+            Log.d("HelloFacebook", "Success!");
+        }
+    };
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -158,6 +174,9 @@ public void onBackStackChanged() {
                 }
             }
         });
+
+        canPresentShareDialog = FacebookDialog.canPresentShareDialog(this,
+                FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
     }
 
     @Override
@@ -165,6 +184,10 @@ protected void onResume() {
         super.onResume();
         uiHelper.onResume();
 
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
+
         updateUI();
     }
 
@@ -179,7 +202,7 @@ protected void onSaveInstanceState(Bundle outState) {
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        uiHelper.onActivityResult(requestCode, resultCode, data);
+        uiHelper.onActivityResult(requestCode, resultCode, data, dialogCallback);
     }
 
     @Override
@@ -214,7 +237,7 @@ private void updateUI() {
         Session session = Session.getActiveSession();
         boolean enableButtons = (session != null && session.isOpened());
 
-        postStatusUpdateButton.setEnabled(enableButtons);
+        postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
         postPhotoButton.setEnabled(enableButtons);
         pickFriendsButton.setEnabled(enableButtons);
         pickPlaceButton.setEnabled(enableButtons);
@@ -269,14 +292,24 @@ private void showPublishResult(String message, GraphObject result, FacebookReque
     }
 
     private void onClickPostStatusUpdate() {
-        performPublish(PendingAction.POST_STATUS_UPDATE);
+        performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
+    }
+
+    private FacebookDialog.ShareDialogBuilder createShareDialogBuilder() {
+        return new FacebookDialog.ShareDialogBuilder(this)
+                .setName("Hello Facebook")
+                .setDescription("The 'Hello Facebook' sample application showcases simple Facebook integration")
+                .setLink("http://developers.facebook.com/android");
     }
 
     private void postStatusUpdate() {
-        if (user != null && hasPublishPermission()) {
+        if (canPresentShareDialog) {
+            FacebookDialog shareDialog = createShareDialogBuilder().build();
+            uiHelper.trackPendingDialogCall(shareDialog.present());
+        } else if (user != null && hasPublishPermission()) {
             final String message = getString(R.string.status_update, user.getFirstName(), (new Date().toString()));
             Request request = Request
-                    .newStatusUpdateRequest(Session.getActiveSession(), message, new Request.Callback() {
+                    .newStatusUpdateRequest(Session.getActiveSession(), message, place, tags, new Request.Callback() {
                         @Override
                         public void onCompleted(Response response) {
                             showPublishResult(message, response.getGraphObject(), response.getError());
@@ -289,7 +322,7 @@ public void onCompleted(Response response) {
     }
 
     private void onClickPostPhoto() {
-        performPublish(PendingAction.POST_PHOTO);
+        performPublish(PendingAction.POST_PHOTO, false);
     }
 
     private void postPhoto() {
@@ -354,7 +387,8 @@ private void onFriendPickerDone(FriendPickerFragment fragment) {
 
         String results = "";
 
-        Collection<GraphUser> selection = fragment.getSelection();
+        List<GraphUser> selection = fragment.getSelection();
+        tags = selection;
         if (selection != null && selection.size() > 0) {
             ArrayList<String> names = new ArrayList<String>();
             for (GraphUser user : selection) {
@@ -381,6 +415,8 @@ private void onPlacePickerDone(PlacePickerFragment fragment) {
             result = getString(R.string.no_place_selected);
         }
 
+        place = selection;
+
         showAlert(getString(R.string.you_picked), result);
     }
 
@@ -424,17 +460,24 @@ private boolean hasPublishPermission() {
         return session != null && session.getPermissions().contains("publish_actions");
     }
 
-    private void performPublish(PendingAction action) {
+    private void performPublish(PendingAction action, boolean allowNoSession) {
         Session session = Session.getActiveSession();
         if (session != null) {
             pendingAction = action;
             if (hasPublishPermission()) {
                 // We can do the action right away.
                 handlePendingAction();
-            } else {
+                return;
+            } else if (session.isOpened()) {
                 // We need to get new permissions, then complete the action when we get called back.
-                session.requestNewPublishPermissions(new Session.NewPermissionsRequest(this, PERMISSIONS));
+                session.requestNewPublishPermissions(new Session.NewPermissionsRequest(this, PERMISSION));
+                return;
             }
         }
+
+        if (allowNoSession) {
+            pendingAction = action;
+            handlePendingAction();
+        }
     }
 }
diff --git a/samples/PlacePickerSample/.classpath b/samples/PlacePickerSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/PlacePickerSample/.classpath
+++ b/samples/PlacePickerSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/PlacePickerSample/.project b/samples/PlacePickerSample/.project
index 73ec9015a..06b88d35e 100644
--- a/samples/PlacePickerSample/.project
+++ b/samples/PlacePickerSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/PlacePickerSample/FriendPickerSample.iml b/samples/PlacePickerSample/FriendPickerSample.iml
deleted file mode 100644
index a6817daf5..000000000
--- a/samples/PlacePickerSample/FriendPickerSample.iml
+++ /dev/null
@@ -1,46 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="REGENERATE_R_JAVA" value="true" />
-        <option name="REGENERATE_JAVA_BY_AIDL" value="true" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.1 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/PlacePickerSample/PlacePickerSample.iml b/samples/PlacePickerSample/PlacePickerSample.iml
deleted file mode 100644
index 784407681..000000000
--- a/samples/PlacePickerSample/PlacePickerSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/PlacePickerSample/build.gradle b/samples/PlacePickerSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/PlacePickerSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
index 185280771..ce8008f8b 100644
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
+++ b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
@@ -28,6 +28,7 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
+import com.facebook.AppEventsLogger;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphLocation;
@@ -141,6 +142,10 @@ protected void onPause() {
     protected void onResume() {
         super.onResume();
         lifecycleHelper.onResume();
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
     }
 
     private void onError(Exception exception) {
diff --git a/samples/ProfilePictureSample/.classpath b/samples/ProfilePictureSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/ProfilePictureSample/.classpath
+++ b/samples/ProfilePictureSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/ProfilePictureSample/.project b/samples/ProfilePictureSample/.project
index 44914352a..2b2339321 100644
--- a/samples/ProfilePictureSample/.project
+++ b/samples/ProfilePictureSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/ProfilePictureSample/ProfilePictureSample.iml b/samples/ProfilePictureSample/ProfilePictureSample.iml
deleted file mode 100644
index 3b9987615..000000000
--- a/samples/ProfilePictureSample/ProfilePictureSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/ProfilePictureSample/build.gradle b/samples/ProfilePictureSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/ProfilePictureSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
index b014f1b5c..8bb4921c5 100644
--- a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
+++ b/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
@@ -117,8 +117,8 @@
             <Button
                     android:layout_width="match_parent"
                     android:layout_height="wrap_content"
-                    android:text="@string/user_michael_name"
-                    android:tag="michael.marucheck"
+                    android:text="@string/user_ming_name"
+                    android:tag="mingfli"
                     />
             <Button
                     android:layout_width="match_parent"
diff --git a/samples/ProfilePictureSample/res/values/strings.xml b/samples/ProfilePictureSample/res/values/strings.xml
index 64c30a232..bde7903ad 100644
--- a/samples/ProfilePictureSample/res/values/strings.xml
+++ b/samples/ProfilePictureSample/res/values/strings.xml
@@ -22,7 +22,7 @@
     <string name="crop_original_button_text">Original</string>
     <string name="crop_square_button_text">Square</string>
     <string name="user_chris_name">Chris</string>
-    <string name="user_michael_name">Michael</string>
+    <string name="user_ming_name">Ming</string>
     <string name="user_karthik_name">Karthik</string>
     <string name="user_random_name">Random</string>
     <string name="user_none_name">None</string>
diff --git a/samples/BooleanOGSample/.classpath b/samples/RPSSample/.classpath
similarity index 60%
rename from samples/BooleanOGSample/.classpath
rename to samples/RPSSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/BooleanOGSample/.classpath
+++ b/samples/RPSSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/Hackbook/.project b/samples/RPSSample/.project
similarity index 97%
rename from samples/Hackbook/.project
rename to samples/RPSSample/.project
index c453fce2f..48ef59ca8 100644
--- a/samples/Hackbook/.project
+++ b/samples/RPSSample/.project
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <projectDescription>
-	<name>Hackbook</name>
+	<name>RPSSample</name>
 	<comment></comment>
 	<projects>
 	</projects>
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
new file mode 100644
index 000000000..ed5066d49
--- /dev/null
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="com.facebook.samples.rps"
+          android:versionCode="1"
+          android:versionName="1.0">
+    <uses-sdk android:minSdkVersion="8"/>
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+    <application android:label="@string/app_name"
+                 android:icon="@drawable/icon"
+                 android:theme="@android:style/Theme.NoTitleBar"
+            >
+        <activity android:name="MainActivity"
+                  android:label="@string/app_name"
+                  android:screenOrientation="portrait"
+                  android:windowSoftInputMode="adjustResize">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+        <activity android:name="FriendActivity"
+                  android:label="@string/app_name" />
+        <activity android:name="com.facebook.LoginActivity"
+                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
+                  android:label="@string/app_name" />
+        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider157578437735213"
+                  android:name="com.facebook.NativeAppCallContentProvider" />
+    </application>
+</manifest>
diff --git a/samples/BooleanOGSample/ant.properties b/samples/RPSSample/ant.properties
similarity index 100%
rename from samples/BooleanOGSample/ant.properties
rename to samples/RPSSample/ant.properties
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/RPSSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/BooleanOGSample/build.xml b/samples/RPSSample/build.xml
similarity index 98%
rename from samples/BooleanOGSample/build.xml
rename to samples/RPSSample/build.xml
index ce5402793..ce90427bf 100644
--- a/samples/BooleanOGSample/build.xml
+++ b/samples/RPSSample/build.xml
@@ -1,5 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project name="BooleanOGSample" default="help">
+<project name="RPSSample" default="help">
 
     <!-- The local.properties file is created and updated by the 'android' tool.
          It contains the path to the SDK. It should *NOT* be checked into
diff --git a/samples/RPSSample/post_app_objects.sh b/samples/RPSSample/post_app_objects.sh
new file mode 100755
index 000000000..bda156e45
--- /dev/null
+++ b/samples/RPSSample/post_app_objects.sh
@@ -0,0 +1,123 @@
+#!/bin/sh
+#
+# Copyright 2010-present Facebook.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+#    http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+# Note: Use of this script requires Perl
+
+#
+# step 1 - confirm we have an app id and app secret to work with
+#
+
+if [ -z "$APPID" ]
+then
+  echo '$APPID must be exported and set to the application id for the sample before running this script'
+  exit 1
+fi
+
+if [ -z "$APPSECRET" ]
+then
+  echo '$APPSECRET must be exported set to the app secret for the sample before running this script'
+  exit 1
+fi
+
+#
+# step 2 - stage images and capture their URIs in variables
+#
+
+echo curling...
+
+ROCK_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_rock.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+PAPER_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_paper.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+SCISSORS_IMAGE_URI=` \
+  curl -s -k -X POST https://graph.facebook.com/$APPID/staging_resources -F access_token="$APPID|$APPSECRET" -F 'file=@res/drawable/left_scissors.png;type=image/png' \
+  | perl -ne '/"uri":"(.*)"}/ && print $1' `
+
+echo "created staged resources..."
+echo "  rock=$ROCK_IMAGE_URI"
+echo "  paper=$PAPER_IMAGE_URI"
+echo "  scissors=$SCISSORS_IMAGE_URI"
+
+#
+# step 3 - create objects and capture their IDs in variables
+#
+
+# rock
+ROCK_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+# paper
+PAPER_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+# scissors
+SCISSORS_OBJID=` \
+  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  | perl -ne '/"id":"(.*)"}/ && print $1' `
+
+#
+# step 4 - echo progress
+#
+
+echo "created application objects..."
+echo "  rock=$ROCK_OBJID"
+echo "  paper=$PAPER_OBJID"
+echo "  scissors=$SCISSORS_OBJID"
+
+#
+# step 5 - write .java file for common objects
+#
+
+MFILE=src/com/facebook/samples/rps/CommonObjects.java
+
+cat > $MFILE << EOF
+/*
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.rps;
+
+public class CommonObjects {
+    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
+            "$ROCK_OBJID", // rock
+            "$PAPER_OBJID", // paper
+            "$SCISSORS_OBJID"  // scissors
+    };
+}
+
+EOF
+
+echo "created $MFILE ..."
+echo done.
diff --git a/samples/BooleanOGSample/proguard-project.txt b/samples/RPSSample/proguard-project.txt
similarity index 100%
rename from samples/BooleanOGSample/proguard-project.txt
rename to samples/RPSSample/proguard-project.txt
diff --git a/samples/BooleanOGSample/project.properties b/samples/RPSSample/project.properties
similarity index 100%
rename from samples/BooleanOGSample/project.properties
rename to samples/RPSSample/project.properties
diff --git a/samples/BooleanOGSample/res/drawable-hdpi/icon.png b/samples/RPSSample/res/drawable-hdpi/icon.png
similarity index 100%
rename from samples/BooleanOGSample/res/drawable-hdpi/icon.png
rename to samples/RPSSample/res/drawable-hdpi/icon.png
diff --git a/samples/BooleanOGSample/res/drawable-mdpi/icon.png b/samples/RPSSample/res/drawable-mdpi/icon.png
similarity index 100%
rename from samples/BooleanOGSample/res/drawable-mdpi/icon.png
rename to samples/RPSSample/res/drawable-mdpi/icon.png
diff --git a/samples/BooleanOGSample/res/drawable-xhdpi/icon.png b/samples/RPSSample/res/drawable-xhdpi/icon.png
similarity index 100%
rename from samples/BooleanOGSample/res/drawable-xhdpi/icon.png
rename to samples/RPSSample/res/drawable-xhdpi/icon.png
diff --git a/samples/RPSSample/res/drawable/app_background.xml b/samples/RPSSample/res/drawable/app_background.xml
new file mode 100644
index 000000000..af7a20a63
--- /dev/null
+++ b/samples/RPSSample/res/drawable/app_background.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright 2010-present Facebook.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+-->
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item>
+        <shape xmlns:android="http://schemas.android.com/apk/res/android"
+                android:shape="rectangle">
+            <solid android:color="#ccc" />
+        </shape>
+    </item>
+    <item android:top="390dp">
+        <shape android:shape="rectangle">
+            <solid android:color="#999" />
+        </shape>
+    </item>
+</layer-list>
\ No newline at end of file
diff --git a/samples/RPSSample/res/drawable/fb_logo.png b/samples/RPSSample/res/drawable/fb_logo.png
new file mode 100755
index 000000000..b4b29948c
Binary files /dev/null and b/samples/RPSSample/res/drawable/fb_logo.png differ
diff --git a/samples/BooleanOGSample/res/drawable/icon.png b/samples/RPSSample/res/drawable/icon.png
similarity index 100%
rename from samples/BooleanOGSample/res/drawable/icon.png
rename to samples/RPSSample/res/drawable/icon.png
diff --git a/samples/Hackbook/res/values/colors.xml b/samples/RPSSample/res/drawable/icon_border.xml
similarity index 65%
rename from samples/Hackbook/res/values/colors.xml
rename to samples/RPSSample/res/drawable/icon_border.xml
index bec7e06d5..89eedd647 100644
--- a/samples/Hackbook/res/values/colors.xml
+++ b/samples/RPSSample/res/drawable/icon_border.xml
@@ -15,12 +15,9 @@
     limitations under the License.
 -->
 
-<resources>
-    <color name="white">#ffffff</color>
-    <color name="black">#000000</color>
-    <color name="green">#23cf34</color>
-    <color name="orange">#E47833</color>
-    <color name="lite_blue">#4E78A0</color>
-    <color name="blue">#0000FF</color>
-    <color name="grey">#FF909090</color>
-</resources>
+<shape xmlns:android="http://schemas.android.com/apk/res/android" android:shape="rectangle">
+    <solid android:color="#FFF" />
+    <corners android:radius="10dp" />
+    <padding android:bottom="2dp" android:left="2dp" android:right="2dp" android:top="2dp" />
+    <stroke android:width="2px" android:color="@color/text_color" />
+</shape>
\ No newline at end of file
diff --git a/samples/RPSSample/res/drawable/left_paper.png b/samples/RPSSample/res/drawable/left_paper.png
new file mode 100755
index 000000000..7336fd246
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_paper.png differ
diff --git a/samples/RPSSample/res/drawable/left_rock.png b/samples/RPSSample/res/drawable/left_rock.png
new file mode 100755
index 000000000..bee7abe89
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_rock.png differ
diff --git a/samples/RPSSample/res/drawable/left_scissors.png b/samples/RPSSample/res/drawable/left_scissors.png
new file mode 100755
index 000000000..dac525200
Binary files /dev/null and b/samples/RPSSample/res/drawable/left_scissors.png differ
diff --git a/samples/RPSSample/res/drawable/right_paper.png b/samples/RPSSample/res/drawable/right_paper.png
new file mode 100755
index 000000000..d243567a9
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_paper.png differ
diff --git a/samples/RPSSample/res/drawable/right_rock.png b/samples/RPSSample/res/drawable/right_rock.png
new file mode 100755
index 000000000..9168b4b74
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_rock.png differ
diff --git a/samples/RPSSample/res/drawable/right_scissors.png b/samples/RPSSample/res/drawable/right_scissors.png
new file mode 100755
index 000000000..083c47590
Binary files /dev/null and b/samples/RPSSample/res/drawable/right_scissors.png differ
diff --git a/samples/RPSSample/res/layout/content_fragment.xml b/samples/RPSSample/res/layout/content_fragment.xml
new file mode 100644
index 000000000..43e8e3662
--- /dev/null
+++ b/samples/RPSSample/res/layout/content_fragment.xml
@@ -0,0 +1,47 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright 2010-present Facebook.
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:id="@+id/content_group"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent"
+              android:background="#FFF"
+              android:orientation="vertical">
+
+    <TextView android:id="@+id/content_title"
+              android:layout_height="wrap_content"
+              android:layout_width="wrap_content"
+              android:layout_gravity="center_horizontal"
+              android:paddingTop="20dp"
+              android:textColor="@color/text_color"
+              android:textSize="@dimen/text_size"/>
+
+    <ImageView android:id="@+id/content_image"
+               android:layout_height="wrap_content"
+               android:layout_width="wrap_content"
+               android:layout_gravity="center_horizontal"
+               android:padding="20dp" />
+
+
+    <Button android:id="@+id/content_play_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/play"
+            android:background="@drawable/icon_border"
+            style="@style/again_button_style" />
+</LinearLayout>
diff --git a/samples/BooleanOGSample/res/layout/friend_activity_row.xml b/samples/RPSSample/res/layout/friend_activity_row.xml
similarity index 82%
rename from samples/BooleanOGSample/res/layout/friend_activity_row.xml
rename to samples/RPSSample/res/layout/friend_activity_row.xml
index cf60140e4..26b3b2daa 100644
--- a/samples/BooleanOGSample/res/layout/friend_activity_row.xml
+++ b/samples/RPSSample/res/layout/friend_activity_row.xml
@@ -16,21 +16,21 @@
 -->
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
               android:orientation="horizontal"
               android:background="#fff">
 
     <TextView android:id="@+id/friend_action_date"
               android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
+              android:layout_width="match_parent"
               android:layout_weight="1"
               android:textSize="12sp"
               android:textColor="#000"/>
 
-    <TextView android:id="@+id/friend_action_data"
+    <TextView android:id="@+id/friend_game_result"
               android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
+              android:layout_width="match_parent"
               android:layout_weight="1"
               android:textSize="12sp"
               android:textColor="#000"/>
diff --git a/samples/BooleanOGSample/res/layout/friends_group.xml b/samples/RPSSample/res/layout/friends_activity.xml
similarity index 54%
rename from samples/BooleanOGSample/res/layout/friends_group.xml
rename to samples/RPSSample/res/layout/friends_activity.xml
index 3973ded14..5efcb34f9 100644
--- a/samples/BooleanOGSample/res/layout/friends_group.xml
+++ b/samples/RPSSample/res/layout/friends_activity.xml
@@ -17,35 +17,46 @@
 
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
               android:id="@+id/friends_group"
-              android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent"
               android:background="#FFF"
               android:orientation="vertical">
 
     <TextView android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
+              android:layout_width="match_parent"
               android:textColor="#000"
               android:textSize="20sp"
-              android:text="@string/friends_using_rock_the_logic"/>
+              android:text="@string/friends_using_rps"/>
 
-    <FrameLayout android:id="@+id/friend_picker_fragment"
-                 android:layout_height="fill_parent"
-                 android:layout_width="fill_parent"
-                 android:layout_weight="1"/>
+    <View android:id="@+id/friend_separator"
+          android:layout_width="match_parent"
+          android:layout_height="1dp"
+          android:background="#000"/>
+
+    <fragment android:name="com.facebook.widget.FriendPickerFragment"
+              android:id="@+id/friend_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:layout_weight="1"/>
 
     <TextView android:layout_height="wrap_content"
-              android:layout_width="fill_parent"
+              android:layout_width="match_parent"
               android:textColor="#000"
               android:textSize="20sp"
               android:text="@string/friend_activity"/>
 
-    <FrameLayout android:layout_height="fill_parent"
-                 android:layout_width="fill_parent"
+    <View android:id="@+id/friend_activity_separator"
+          android:layout_width="match_parent"
+          android:layout_height="1dp"
+          android:background="#000"/>
+
+    <FrameLayout android:layout_height="match_parent"
+                 android:layout_width="match_parent"
                  android:layout_weight="1">
 
         <ListView android:id="@+id/friend_activity_list"
-                  android:layout_height="fill_parent"
-                  android:layout_width="fill_parent"/>
+                  android:layout_height="match_parent"
+                  android:layout_width="match_parent"/>
 
         <ProgressBar android:id="@+id/friend_activity_progress_bar"
                      android:layout_width="wrap_content"
@@ -58,4 +69,14 @@
 
     </FrameLayout>
 
+    <Button android:id="@+id/invite_button"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:padding="10dp"
+            android:layout_margin="20dp"
+            android:text="@string/invite_friends"
+            android:background="@drawable/icon_border" />
+
+
 </LinearLayout>
diff --git a/samples/RPSSample/res/layout/main.xml b/samples/RPSSample/res/layout/main.xml
new file mode 100644
index 000000000..475b06051
--- /dev/null
+++ b/samples/RPSSample/res/layout/main.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright 2010-present Facebook.
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+
+<LinearLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+    <fragment android:name="com.facebook.samples.rps.RpsFragment"
+              android:id="@+id/rps_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.facebook.widget.UserSettingsFragment"
+              android:id="@+id/settings_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+    <fragment android:name="com.facebook.samples.rps.ContentFragment"
+              android:id="@+id/content_fragment"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent" />
+
+</LinearLayout>
+
diff --git a/samples/RPSSample/res/layout/rps_fragment.xml b/samples/RPSSample/res/layout/rps_fragment.xml
new file mode 100644
index 000000000..0142f6baa
--- /dev/null
+++ b/samples/RPSSample/res/layout/rps_fragment.xml
@@ -0,0 +1,212 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright 2010-present Facebook.
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              android:id="@+id/game_group"
+              android:orientation="vertical"
+              android:layout_height="match_parent"
+              android:layout_width="match_parent"
+              android:background="@drawable/app_background">
+
+    <LinearLayout android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:layout_gravity="center"
+                  android:orientation="vertical">
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_rock"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginTop="20dp"
+                  android:text="@string/rock" />
+
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_paper"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginLeft="30dp"
+                  android:text="@string/paper"/>
+
+        <TextView android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:id="@+id/text_scissors"
+                  android:textColor="@color/text_color"
+                  android:textSize="@dimen/text_size"
+                  android:layout_gravity="left"
+                  android:layout_marginLeft="60dp"
+                  android:layout_marginBottom="20dp"
+                  android:text="@string/scissors"/>
+    </LinearLayout>
+    <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp"
+            android:layout_gravity="center_horizontal|center_vertical">
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/shoot_display_group">
+            <TextView android:id="@+id/shoot"
+                      android:layout_height="wrap_content"
+                      android:layout_width="wrap_content"
+                      android:layout_gravity="left"
+                      android:textColor="@color/text_color"
+                      android:textSize="@dimen/text_size"
+                      android:text="@string/shoot"
+                      android:layout_alignParentLeft="true"
+                      android:layout_centerVertical="true" />
+            <ViewFlipper
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/rps_flipper"
+                    android:layout_alignParentLeft="false"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:layout_alignParentBottom="false"
+                    android:flipInterval="150"
+                    android:autoStart="true">
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view1"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_rock"/>
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view2"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_paper"/>
+                <ImageView
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:id="@+id/flipper_view3"
+                        android:scaleType="fitCenter"
+                        android:src="@drawable/right_scissors"/>
+            </ViewFlipper>
+        </RelativeLayout>
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/result_display_group">
+            <ImageView
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_choice"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:src="@drawable/right_paper"/>
+            <TextView android:id="@+id/who_won"
+                      android:layout_height="wrap_content"
+                      android:layout_width="wrap_content"
+                      android:layout_gravity="left"
+                      android:textColor="@color/text_color"
+                      android:textSize="@dimen/text_size_small"
+                      android:text=""
+                      android:layout_centerHorizontal="true"
+                      android:layout_centerVertical="true" />
+            <ImageView
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/computer_choice"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:src="@drawable/right_rock"/>
+        </RelativeLayout>
+    </FrameLayout>
+
+    <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp"
+            android:layout_gravity="center_horizontal|center_vertical">
+        <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:id="@+id/player_choice_display_group">
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_rock"
+                    android:scaleType="fitCenter"
+                    android:layout_alignParentLeft="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_rock" />
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_paper"
+                    android:scaleType="fitCenter"
+                    android:layout_centerHorizontal="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_paper" />
+            <ImageButton
+                    android:layout_width="@dimen/image_width"
+                    android:layout_height="@dimen/image_height"
+                    android:id="@+id/player_scissors"
+                    android:layout_alignParentRight="true"
+                    android:layout_centerVertical="true"
+                    android:background="@drawable/left_scissors" />
+        </RelativeLayout>
+        <Button android:id="@+id/again_button"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:text="@string/again"
+                android:background="@drawable/icon_border"
+                style="@style/again_button_style" />
+    </FrameLayout>
+
+    <RelativeLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginLeft="@dimen/margin_left"
+            android:layout_marginRight="@dimen/margin_right"
+            android:layout_marginTop="10dp"
+            android:layout_marginBottom="10dp">
+        <TextView android:id="@+id/stats"
+                  android:layout_height="wrap_content"
+                  android:layout_width="wrap_content"
+                  android:layout_gravity="left"
+                  android:textColor="#000"
+                  android:textSize="20sp"
+                  android:layout_alignParentLeft="true"
+                  android:layout_centerVertical="true" />
+
+        <ImageButton
+                android:layout_gravity="right"
+                android:gravity="right"
+                android:layout_width="50dp"
+                android:layout_height="50dp"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:id="@+id/facebook_button"
+                android:background="@drawable/fb_logo" />
+    </RelativeLayout>
+
+</LinearLayout>
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
new file mode 100644
index 000000000..42fb88e64
--- /dev/null
+++ b/samples/RPSSample/res/values/strings.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright 2010-present Facebook.
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+
+<resources>
+    <string name="app_name">RPSSample</string>
+    <string name="app_id">157578437735213</string>
+    <string name="rock">Rock</string>
+    <string name="paper">Paper</string>
+    <string name="scissors">Scissors</string>
+    <string name="shoot">Shoot!</string>
+    <string name="win">Win!</string>
+    <string name="loss">Loss</string>
+    <string name="tie">Tie</string>
+    <string name="again">Again!</string>
+    <string name="play">Play!</string>
+    <string name="result_won">won</string>
+    <string name="result_lost">lost</string>
+    <string name="result_tied">tied</string>
+    <string name="share_on_facebook">Share on Facebook</string>
+    <string name="see_friends">See Friends</string>
+    <string name="check_settings">Check Facebook Settings</string>
+    <string name="friends_using_rps">Friends Rockin\' RPS</string>
+    <string name="friend_activity">Friend\'s Activity</string>
+    <string name="invite_friends">Invite Friends</string>
+    <string name="invite_dialog_title">Invite a Friend</string>
+    <string name="invite_dialog_message">Please come play RPS with me!</string>
+    <string name="stats_format">W = %1$d  L = %2$d  T = %3$d</string>
+    <string name="action_display_format">%1$s vs %2$s</string>
+    <string name="feature_requires_login_title">Social Features Disabled</string>
+    <string name="feature_requires_login_message">
+        You have not logged in with Facebook.
+        Please use the menu and check your Facebook settings.
+    </string>
+    <string name="share_with_friends_title">Share on Facebook</string>
+    <string name="share_with_friends_message">Share game activity with friends?</string>
+    <string name="share_with_friends_yes">Yes</string>
+    <string name="share_with_friends_no">Maybe Later</string>
+    <string name="error_ok_button">OK</string>
+    <string name="error_dialog_title">Error!</string>
+    <string name="login_error">An error occurred during login. Please try again.</string>
+</resources>
diff --git a/samples/RPSSample/res/values/styles.xml b/samples/RPSSample/res/values/styles.xml
new file mode 100644
index 000000000..e43c8a696
--- /dev/null
+++ b/samples/RPSSample/res/values/styles.xml
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+    Copyright 2010-present Facebook.
+
+    Licensed under the Apache License, Version 2.0 (the "License");
+    you may not use this file except in compliance with the License.
+    You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an "AS IS" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+-->
+
+<resources xmlns:android="http://schemas.android.com/apk/res/android">
+    <color name="facebook_blue">#3B5998</color>
+    
+    <color name="text_color">#303040</color>
+    <dimen name="text_size">50sp</dimen>
+    <dimen name="text_size_small">40sp</dimen>
+    <dimen name="margin_left">20dp</dimen>
+    <dimen name="margin_right">20dp</dimen>
+    
+    <dimen name="image_height">80dp</dimen>
+    <dimen name="image_width">80dp</dimen>
+
+    <style name="again_button_style" parent="@android:style/Widget.Button">
+        <item name="android:width">200dp</item>
+        <item name="android:height">75dp</item>
+        <item name="android:background">@drawable/com_facebook_loginbutton_silver</item>
+        <item name="android:textSize">@dimen/text_size</item>
+        <item name="android:textColor">@color/text_color</item>
+        <item name="android:gravity">center</item>
+    </style>
+</resources>
diff --git a/samples/Hackbook/src/com/facebook/android/BaseDialogListener.java b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
similarity index 53%
rename from samples/Hackbook/src/com/facebook/android/BaseDialogListener.java
rename to samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
index ac2599a35..3551eaff2 100644
--- a/samples/Hackbook/src/com/facebook/android/BaseDialogListener.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
@@ -14,28 +14,12 @@
  * limitations under the License.
  */
 
-package com.facebook.android;
-
-import com.facebook.android.Facebook.DialogListener;
-
-/**
- * Skeleton base class for RequestListeners, providing default error handling.
- * Applications should handle these error conditions.
- */
-public abstract class BaseDialogListener implements DialogListener {
-
-    @Override
-    public void onFacebookError(FacebookError e) {
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onError(DialogError e) {
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onCancel() {
-    }
+package com.facebook.samples.rps;
 
+public class CommonObjects {
+    public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
+            "349677488467004", // rock
+            "231845580291424", // paper
+            "120373648159839"  // scissors
+    };
 }
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java
new file mode 100644
index 000000000..f31e24f20
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/ContentFragment.java
@@ -0,0 +1,56 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.rps;
+
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+public class ContentFragment extends Fragment {
+    public static final String CONTENT_INDEX_KEY = "content";
+
+    private TextView title;
+    private ImageView image;
+    private Button playButton;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.content_fragment, container, false);
+        title = (TextView) view.findViewById(R.id.content_title);
+        image = (ImageView) view.findViewById(R.id.content_image);
+        playButton = (Button) view.findViewById(R.id.content_play_button);
+
+        playButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                MainActivity activity = (MainActivity) getActivity();
+                activity.showFragment(MainActivity.RPS, false);
+            }
+        });
+        return view;
+    }
+
+    public void setContentIndex(int index) {
+        title.setText(RpsGameUtils.STRINGS_TITLES[index]);
+        image.setImageResource(RpsGameUtils.DRAWABLES_HUMAN[index]);
+    }
+}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
new file mode 100644
index 000000000..0a14d072b
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
@@ -0,0 +1,303 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.rps;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.database.MatrixCursor;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.ProgressBar;
+import android.widget.SimpleCursorAdapter;
+import com.facebook.*;
+import com.facebook.model.GraphMultiResult;
+import com.facebook.model.GraphUser;
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+import com.facebook.widget.FriendPickerFragment;
+import com.facebook.widget.PickerFragment;
+import com.facebook.widget.WebDialog;
+
+import java.text.SimpleDateFormat;
+import java.util.*;
+
+public class FriendActivity extends FragmentActivity {
+    private static final String TAG = FriendActivity.class.getName();
+    private static final String INSTALLED = "installed";
+
+    private FriendPickerFragment friendPickerFragment;
+    private SimpleCursorAdapter friendActivityAdapter;
+    private ProgressBar friendActivityProgressBar;
+    private List<ActionRow> friendActionList;
+    private Request pendingRequest;
+    private String friendId;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.friends_activity);
+
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        friendPickerFragment = (FriendPickerFragment) fragmentManager.findFragmentById(R.id.friend_fragment);
+        friendPickerFragment.setShowTitleBar(false);
+
+        ListView friendActivityList = (ListView) findViewById(R.id.friend_activity_list);
+        String[] mapColumnNames = {"date", "action"};
+        int[] mapViewIds = {R.id.friend_action_date, R.id.friend_game_result};
+        friendActivityAdapter = new SimpleCursorAdapter(this, R.layout.friend_activity_row,
+                createEmptyCursor(), mapColumnNames, mapViewIds);
+        friendActivityList.setAdapter(friendActivityAdapter);
+        friendActivityProgressBar = (ProgressBar) findViewById(R.id.friend_activity_progress_bar);
+
+        friendPickerFragment.setOnErrorListener(new PickerFragment.OnErrorListener() {
+            @Override
+            public void onError(PickerFragment<?> fragment, FacebookException error) {
+                FriendActivity.this.onError(error);
+            }
+        });
+        friendPickerFragment.setUserId("me");
+        friendPickerFragment.setMultiSelect(false);
+        friendPickerFragment.setOnSelectionChangedListener(new PickerFragment.OnSelectionChangedListener() {
+            @Override
+            public void onSelectionChanged(PickerFragment<?> fragment) {
+                FriendActivity.this.onFriendSelectionChanged();
+            }
+        });
+        friendPickerFragment.setExtraFields(Arrays.asList(INSTALLED));
+        friendPickerFragment.setFilter(new PickerFragment.GraphObjectFilter<GraphUser>() {
+            @Override
+            public boolean includeItem(GraphUser graphObject) {
+                Boolean installed = graphObject.cast(GraphUserWithInstalled.class).getInstalled();
+                return (installed != null) && installed.booleanValue();
+            }
+        });
+
+        Button inviteButton = (Button) findViewById(R.id.invite_button);
+        inviteButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                WebDialog.RequestsDialogBuilder builder =
+                        new WebDialog.RequestsDialogBuilder(FriendActivity.this, Session.getActiveSession())
+                                .setTitle(getString(R.string.invite_dialog_title))
+                                .setMessage(getString(R.string.invite_dialog_message))
+                                .setOnCompleteListener(new WebDialog.OnCompleteListener() {
+                                    @Override
+                                    public void onComplete(Bundle values, FacebookException error) {
+                                        if (error != null) {
+                                            Log.w(TAG, "Web dialog encountered an error.", error);
+                                        } else {
+                                            Log.i(TAG, "Web dialog complete: " + values);
+                                        }
+                                    }
+                                });
+                if (friendId != null) {
+                    builder.setTo(friendId);
+                }
+                builder.build().show();
+            }
+        });
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        Session activeSession = Session.getActiveSession();
+        if (activeSession == null || !activeSession.isOpened()) {
+            new AlertDialog.Builder(this)
+                    .setTitle(R.string.feature_requires_login_title)
+                    .setMessage(R.string.feature_requires_login_message)
+                    .setPositiveButton(R.string.error_ok_button, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            finish();
+                        }
+                    })
+                    .show();
+        } else {
+            friendPickerFragment.loadData(false);
+        }
+    }
+
+    private void onError(Exception error) {
+        new AlertDialog.Builder(this)
+                .setTitle(R.string.error_dialog_title)
+                .setMessage(error.getLocalizedMessage())
+                .setPositiveButton(R.string.error_ok_button, null)
+                .show();
+    }
+
+    private <T> T chooseOne(List<T> ts) {
+        for (T t : ts) {
+            return t;
+        }
+
+        return null;
+    }
+
+    private void onFriendSelectionChanged() {
+        GraphUser user = chooseOne(friendPickerFragment.getSelection());
+        if (user != null) {
+            friendId = user.getId();
+            onChooseFriend();
+        } else {
+            friendActivityAdapter.changeCursor(createEmptyCursor());
+        }
+    }
+
+    private void onChooseFriend() {
+        friendActivityProgressBar.setVisibility(View.VISIBLE);
+
+        String throwPath = String.format("%s/%s", friendId, ThrowAction.TYPE);
+        pendingRequest = new Request(Session.getActiveSession(),
+                throwPath,
+                null,
+                HttpMethod.GET,
+                new Request.Callback() {
+                    @Override
+                    public void onCompleted(Response response) {
+                        if (response.getRequest().equals(pendingRequest)) {
+                            FriendActivity.this.onPostExecute(response);
+                        }
+                    }
+                });
+        pendingRequest.executeAsync();
+    }
+
+    private void onPostExecute(Response response) {
+        friendActivityProgressBar.setVisibility(View.GONE);
+
+        friendActionList = createActionRows(response);
+        updateCursor(friendActionList);
+    }
+
+    private List<ActionRow> createActionRows(Response response) {
+        ArrayList<ActionRow> publishedItems = new ArrayList<ActionRow>();
+
+        if (response.getError() != null) {
+            return Collections.emptyList();
+        }
+
+        GraphMultiResult list = response.getGraphObjectAs(GraphMultiResult.class);
+        List<PublishedThrowAction> listData = list.getData().castToListOf(PublishedThrowAction.class);
+
+        for (PublishedThrowAction action : listData) {
+            publishedItems.add(createActionRow(action));
+        }
+
+        Collections.sort(publishedItems);
+        return publishedItems;
+    }
+
+    private void updateCursor(Iterable<ActionRow> publishedItems) {
+        MatrixCursor cursor = createEmptyCursor();
+        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
+
+        int id = 0;
+        for (ActionRow item : publishedItems) {
+            Object[] row = new Object[3];
+            row[0] = id++;
+            row[1] = dateFormat.format(item.publishDate);
+            row[2] = item.actionText;
+            cursor.addRow(row);
+        }
+
+        friendActivityAdapter.changeCursor(cursor);
+        friendActivityAdapter.notifyDataSetChanged();
+    }
+
+    private MatrixCursor createEmptyCursor() {
+        String[] cursorColumns = {"_ID", "date", "action"};
+        return new MatrixCursor(cursorColumns);
+    }
+
+    private ActionRow createActionRow(PublishedThrowAction action) {
+        String actionText = getActionText(action);
+        Date publishDate = action.getPublishTime();
+
+        return new ActionRow(actionText, publishDate);
+    }
+
+    private String getActionText(PublishedThrowAction action) {
+        ThrowAction actionData = action.getData();
+        if (actionData == null) {
+            return "";
+        }
+
+        GestureGraphObject playerGesture = actionData.getGesture();
+        GestureGraphObject opponentGesture = actionData.getOpposingGesture();
+
+        if ((playerGesture == null) || (opponentGesture == null)) {
+            return "";
+        }
+
+        String format = getString(R.string.action_display_format);
+        return String.format(format, playerGesture.getTitle(), opponentGesture.getTitle());
+    }
+
+    private static class ActionRow implements Comparable<ActionRow>, Parcelable {
+        final String actionText;
+        final Date publishDate;
+
+        ActionRow(String actionText, Date publishDate) {
+            this.actionText = actionText;
+            this.publishDate = publishDate;
+        }
+
+        @Override
+        public int compareTo(ActionRow other) {
+            if (other == null) {
+                return 1;
+            } else {
+                return publishDate.compareTo(other.publishDate);
+            }
+        }
+
+        @Override
+        public int describeContents() {
+            return 0;
+        }
+
+        @Override
+        public void writeToParcel(Parcel parcel, int flags) {
+            parcel.writeString(actionText);
+            parcel.writeLong(publishDate.getTime());
+        }
+
+        @SuppressWarnings("unused")
+        public final Creator<ActionRow> CREATOR = new Creator<ActionRow>() {
+            @Override
+            public ActionRow createFromParcel(Parcel parcel) {
+                String actionText = parcel.readString();
+                Date publishDate = new Date(parcel.readLong());
+                return new ActionRow(actionText, publishDate);
+            }
+
+            @Override
+            public ActionRow[] newArray(int size) {
+                return new ActionRow[size];
+            }
+        };
+    }
+
+
+}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
new file mode 100644
index 000000000..1740ecd2e
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
@@ -0,0 +1,240 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.rps;
+
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentActivity;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentTransaction;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.Toast;
+import com.facebook.*;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import static com.facebook.samples.rps.RpsGameUtils.*;
+
+public class MainActivity extends FragmentActivity {
+    static final int RPS = 0;
+    static final int SETTINGS = 1;
+    static final int CONTENT = 2;
+    static final int FRAGMENT_COUNT = CONTENT +1;
+
+    private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
+    private MenuItem settings;
+    private MenuItem friends;
+    private MenuItem share;
+    private boolean isResumed = false;
+    private UiLifecycleHelper uiHelper;
+    private Session.StatusCallback callback = new Session.StatusCallback() {
+        @Override
+        public void call(Session session, SessionState state, Exception exception) {
+            onSessionStateChange(session, state, exception);
+        }
+    };
+    private boolean hasNativeLink = false;
+
+    // the deep link url should be of the form http://some.path?fb_object_id=xxxxxxxxxx
+    private Pattern deepLinkPattern = Pattern.compile(".*fb_object_id=(\\d*)");
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        uiHelper = new UiLifecycleHelper(this, callback);
+        uiHelper.onCreate(savedInstanceState);
+
+        setContentView(R.layout.main);
+
+        FragmentManager fm = getSupportFragmentManager();
+        fragments[RPS] = fm.findFragmentById(R.id.rps_fragment);
+        fragments[SETTINGS] = fm.findFragmentById(R.id.settings_fragment);
+        fragments[CONTENT] = fm.findFragmentById(R.id.content_fragment);
+
+        FragmentTransaction transaction = fm.beginTransaction();
+        for(int i = 0; i < fragments.length; i++) {
+            transaction.hide(fragments[i]);
+        }
+        transaction.commit();
+
+        hasNativeLink = handleNativeLink();
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        uiHelper.onResume();
+        isResumed = true;
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        uiHelper.onPause();
+        isResumed = false;
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        uiHelper.onActivityResult(requestCode, resultCode, data);
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        uiHelper.onDestroy();
+    }
+
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        uiHelper.onSaveInstanceState(outState);
+    }
+
+    @Override
+    protected void onResumeFragments() {
+        super.onResumeFragments();
+
+        if (hasNativeLink) {
+            showFragment(CONTENT, false);
+            hasNativeLink = false;
+        } else {
+            showFragment(RPS, false);
+        }
+    }
+
+    @Override
+    public boolean onPrepareOptionsMenu(Menu menu) {
+        // only add the menu when the selection fragment is showing
+        if (fragments[RPS].isVisible()) {
+            if (menu.size() == 0) {
+                share = menu.add(R.string.share_on_facebook);
+                friends = menu.add(R.string.see_friends);
+                settings = menu.add(R.string.check_settings);
+            }
+            return true;
+        } else {
+            menu.clear();
+            settings = null;
+        }
+        return false;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        if (item.equals(settings)) {
+            showFragment(SETTINGS, true);
+            return true;
+        } else if (item.equals(friends)) {
+            Intent intent = new Intent();
+            intent.setClass(this, FriendActivity.class);
+            startActivity(intent);
+            return true;
+        } else if (item.equals(share)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingNativeDialog();
+            return true;
+        }
+        return false;
+    }
+
+    private boolean handleNativeLink() {
+        Session existingSession = Session.getActiveSession();
+        // If we have a valid existing session, we'll use it; if not, open one using the provided Intent
+        // but do not cache the token (we don't want to use the same user identity the next time the
+        // app is run).
+        if (existingSession == null || !existingSession.isOpened()) {
+            AccessToken accessToken = AccessToken.createFromNativeLinkingIntent(getIntent());
+            if (accessToken != null) {
+                Session newSession = new Session.Builder(this).setTokenCachingStrategy(new NonCachingTokenCachingStrategy())
+                        .build();
+                newSession.open(accessToken, null);
+
+                Session.setActiveSession(newSession);
+            }
+        }
+        // See if we have a deep link in addition.
+        int deepLinkContent = getDeepLinkContent(getIntent().getData());
+        if (deepLinkContent != INVALID_CHOICE) {
+            ContentFragment fragment = (ContentFragment) fragments[CONTENT];
+            fragment.setContentIndex(deepLinkContent);
+            return true;
+        }
+        return false;
+    }
+
+    private int getDeepLinkContent(Uri deepLinkUri) {
+        if (deepLinkUri != null) {
+            String deepLink = deepLinkUri.toString();
+
+            Matcher matcher = deepLinkPattern.matcher(deepLink);
+            if (matcher.matches()) {
+                String objectId = matcher.group(1);
+                for (int i = 0; i < CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length; i++) {
+                    if (CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[i].equals(objectId)) {
+                        return i;
+                    }
+                }
+            }
+        }
+        return INVALID_CHOICE;
+    }
+
+    private void onSessionStateChange(Session session, SessionState state, Exception exception) {
+        if (isResumed) {
+            if (exception != null && !(exception instanceof FacebookOperationCanceledException)) {
+                Toast.makeText(this, R.string.login_error, Toast.LENGTH_SHORT).show();
+                return;
+            }
+
+            if (session.isClosed()) {
+                showFragment(RPS, false);
+            }
+        }
+    }
+
+    void showFragment(int fragmentIndex, boolean addToBackStack) {
+        FragmentManager fm = getSupportFragmentManager();
+        FragmentTransaction transaction = fm.beginTransaction();
+        if (addToBackStack) {
+            transaction.addToBackStack(null);
+        } else {
+            int backStackSize = fm.getBackStackEntryCount();
+            for (int i = 0; i < backStackSize; i++) {
+                fm.popBackStack();
+            }
+        }
+        for (int i = 0; i < fragments.length; i++) {
+            if (i == fragmentIndex) {
+                transaction.show(fragments[i]);
+            } else {
+                transaction.hide(fragments[i]);
+            }
+        }
+        transaction.commit();
+    }
+}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java b/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java
new file mode 100644
index 000000000..ff030d4b7
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/OpenGraphUtils.java
@@ -0,0 +1,91 @@
+package com.facebook.samples.rps;
+
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphUser;
+import com.facebook.model.OpenGraphAction;
+import com.facebook.model.OpenGraphObject;
+
+public class OpenGraphUtils {
+
+    /**
+     * Used to consume GraphUser objects with an installed field
+     */
+    public interface GraphUserWithInstalled extends GraphUser {
+        Boolean getInstalled();
+    }
+
+    /**
+     * Used to create and consume Gesture open graph objects
+     */
+    public interface GestureGraphObject extends OpenGraphObject {
+        String getTitle();
+    }
+
+    /**
+     * Used to create and consume Game open graph objects.
+     */
+    public interface GameGraphObject extends OpenGraphObject {
+        public static final String TYPE = "fb_sample_rps:game";
+
+        GestureGraphObject getPlayerGesture();
+        void setPlayerGesture(GestureGraphObject gesture);
+
+        GestureGraphObject getOpponentGesture();
+        void setOpponentGesture(GestureGraphObject gesture);
+
+        String getResult();
+        void setResult(String result);
+    }
+
+    /**
+     * Used to create and consume Play open graph actions
+     */
+    public interface PlayAction extends OpenGraphAction {
+        public static final String TYPE = "fb_sample_rps:play";
+        public static final String PATH = "me/" + TYPE;
+        public static final String PREVIEW_PROPERTY_NAME = "game";
+
+        GameGraphObject getGame();
+
+        void setGame(GameGraphObject game);
+    }
+
+    /**
+     * Used to create and consume Throw open graph actions
+     */
+    public interface ThrowAction extends OpenGraphAction {
+        public static final String TYPE = "fb_sample_rps:throw";
+        public static final String PREVIEW_PROPERTY_NAME = "gesture";
+
+        GestureGraphObject getGesture();
+        void setGesture(GestureGraphObject playerGesture);
+
+        GestureGraphObject getOpposingGesture();
+        void setOpposingGesture(GestureGraphObject opposingGesture);
+    }
+
+    /**
+     * Used to consume published Play open graph actions.
+     */
+    public interface PublishedPlayAction extends OpenGraphAction {
+        PlayAction getData();
+
+        String getType();
+    }
+
+    /**
+     * Used to consume published Throw open graph actions.
+     */
+    public interface PublishedThrowAction extends OpenGraphAction {
+        ThrowAction getData();
+
+        String getType();
+    }
+
+    /**
+     * Used to inspect the response from posting an action
+     */
+    public interface PostResponse extends GraphObject {
+        String getId();
+    }
+}
\ No newline at end of file
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
new file mode 100644
index 000000000..5627902e7
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
@@ -0,0 +1,522 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.rps;
+
+import android.app.AlertDialog;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.drawable.BitmapDrawable;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Message;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.*;
+import com.facebook.*;
+import com.facebook.model.GraphObject;
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+import static com.facebook.samples.rps.RpsGameUtils.*;
+
+import com.facebook.model.OpenGraphAction;
+import com.facebook.model.OpenGraphObject;
+import com.facebook.widget.FacebookDialog;
+
+import java.util.Arrays;
+import java.util.Random;
+
+public class RpsFragment extends Fragment {
+
+    private static final String SHARE_GAME_LINK = "https://developers.facebook.com/android";
+    private static final String SHARE_GAME_NAME = "Rock, Papers, Scissors Sample Application";
+    private static final String DEFAULT_GAME_OBJECT_TITLE = "an awesome game of Rock, Paper, Scissors";
+    private static final String WIN_KEY = "wins";
+    private static final String LOSS_KEY = "losses";
+    private static final String TIE_KEY = "ties";
+    private static final String PLAYER_CHOICE_KEY = "player_choice";
+    private static final String COMPUTER_CHOICE_KEY = "computer_choice";
+    private static final String STATE_KEY = "state";
+    private static final String RESULT_KEY = "result";
+    private static final String PENDING_PUBLISH_KEY = "pending_publish";
+    private static final String IMPLICIT_PUBLISH_KEY = "implicitly_publish";
+    private static final String ADDITIONAL_PERMISSIONS = "publish_actions";
+    private static final String PHOTO_REQUEST_NAME = "photorequest";
+    private static final String PHOTO_REQUEST_RESULT = "{result=photorequest:$.uri}";
+    private static final String GAME_REQUEST_NAME = "gamerequest";
+    private static final String GAME_REQUEST_RESULT = "{result=gamerequest:$.id}";
+    private static final int INITIAL_DELAY_MILLIS = 500;
+    private static final int DEFAULT_DELAY_MILLIS = 1000;
+    private static final String TAG = RpsFragment.class.getName();
+
+    private static String[] PHOTO_URIS = { null, null, null };
+
+    private TextView [] gestureTextViews = new TextView[3];
+    private TextView shootTextView;
+    private ImageView playerChoiceView;
+    private ImageView computerChoiceView;
+    private TextView resultTextView;
+    private ViewGroup shootGroup;
+    private ViewGroup resultGroup;
+    private ViewGroup playerChoiceGroup;
+    private Button againButton;
+    private ImageButton [] gestureImages = new ImageButton[3];
+    private ImageButton fbButton;
+    private TextView statsTextView;
+    private ViewFlipper rpsFlipper;
+
+    private int wins = 0;
+    private int losses = 0;
+    private int ties = 0;
+    private int playerChoice = INVALID_CHOICE;
+    private int computerChoice = INVALID_CHOICE;
+    private RpsState currentState = RpsState.INIT;
+    private RpsResult result = RpsResult.INVALID;
+    private InitHandler handler = new InitHandler();
+    private Random random = new Random(System.currentTimeMillis());
+    private boolean pendingPublish;
+    private boolean shouldImplicitlyPublish = true;
+
+    private Session.StatusCallback newPermissionsCallback = new Session.StatusCallback() {
+        @Override
+        public void call(Session session, SessionState state, Exception exception) {
+            if (exception != null ||
+                    !session.isOpened() ||
+                    !session.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
+                // this means the user did not grant us write permissions, so
+                // we don't do implicit publishes
+                shouldImplicitlyPublish = false;
+                pendingPublish = false;
+            } else {
+                publishResult();
+            }
+        }
+    };
+
+    private DialogInterface.OnClickListener canPublishClickListener = new DialogInterface.OnClickListener() {
+        @Override
+        public void onClick(DialogInterface dialogInterface, int i) {
+            final Session session = Session.getActiveSession();
+            if (session != null && session.isOpened()) {
+                // if they choose to publish, then we request for publish permissions
+                shouldImplicitlyPublish = true;
+                pendingPublish = true;
+                Session.NewPermissionsRequest newPermissionsRequest =
+                        new Session.NewPermissionsRequest(RpsFragment.this, ADDITIONAL_PERMISSIONS)
+                                .setDefaultAudience(SessionDefaultAudience.FRIENDS)
+                                .setCallback(newPermissionsCallback);
+                session.requestNewPublishPermissions(newPermissionsRequest);
+            }
+        }
+    };
+
+    private DialogInterface.OnClickListener dontPublishClickListener = new DialogInterface.OnClickListener() {
+        @Override
+        public void onClick(DialogInterface dialogInterface, int i) {
+            // if they choose not to publish, then we save that choice, and don't prompt them
+            // until they restart the app
+            pendingPublish = false;
+            shouldImplicitlyPublish = false;
+        }
+    };
+
+    private class InitHandler extends Handler {
+        @Override
+        public void handleMessage(Message msg) {
+            if (!isResumed()) {
+                // if we're not in between onResume and onPause, don't do animation transitions
+                return;
+            }
+            switch (msg.what) {
+                case ROCK:
+                    showViews(gestureTextViews[ROCK], gestureImages[ROCK]);
+                    sendNextMessage(PAPER);
+                    break;
+                case PAPER:
+                    showViews(gestureTextViews[PAPER], gestureImages[PAPER]);
+                    sendNextMessage(SCISSORS);
+                    break;
+                case SCISSORS:
+                    showViews(gestureTextViews[SCISSORS], gestureImages[SCISSORS]);
+                    sendNextMessage(SHOOT);
+                    break;
+                case SHOOT:
+                    showViews(shootTextView);
+                    switchState(RpsState.PLAYING, false);
+                    break;
+                default:
+                    Log.e(TAG, "Unexpected message received: " + msg.toString());
+                    break;
+            }
+        }
+
+        private void sendNextMessage(int what) {
+            Message newMsg = new Message();
+            newMsg.what = what;
+            sendMessageDelayed(newMsg, DEFAULT_DELAY_MILLIS);
+        }
+    }
+
+    private void switchState(RpsState newState, boolean isOnResume) {
+        if (!isResumed()) {
+            // if we're not in between onResume and onPause, don't transition states
+            return;
+        }
+        switch (newState) {
+            case INIT:
+                playerChoice = INVALID_CHOICE;
+                computerChoice = INVALID_CHOICE;
+                result = RpsResult.INVALID;
+                showViews(shootGroup, playerChoiceGroup, rpsFlipper);
+                rpsFlipper.startFlipping();
+                hideViews(gestureImages);
+                hideViews(gestureTextViews);
+                hideViews(resultGroup, shootTextView, againButton);
+                enableViews(false, gestureImages);
+                enableViews(false, againButton);
+                Message initMessage = new Message();
+                initMessage.what = ROCK;
+                handler.sendMessageDelayed(initMessage, INITIAL_DELAY_MILLIS);
+                break;
+            case PLAYING:
+                enableViews(true, gestureImages);
+                showViews(rpsFlipper);
+                rpsFlipper.startFlipping();
+                break;
+            case RESULT:
+                hideViews(shootGroup, playerChoiceGroup);
+                playerChoiceView.setImageResource(DRAWABLES_HUMAN[playerChoice]);
+                computerChoiceView.setImageResource(DRAWABLES_COMPUTER[computerChoice]);
+                resultTextView.setText(result.getStringId());
+                showViews(resultGroup, againButton);
+                enableViews(true, againButton);
+                if (!isOnResume) {
+                    // don't publish if we're switching states because onResumed is being called
+                    publishResult();
+                }
+                break;
+            default:
+                Log.e(TAG, "Unexpected state reached: " + newState.toString());
+                break;
+        }
+
+        String statsFormat = getResources().getString(R.string.stats_format);
+        statsTextView.setText(String.format(statsFormat, wins, losses, ties));
+
+        currentState = newState;
+    }
+
+    private void hideViews(View ... views) {
+        for (View view : views) {
+            view.setVisibility(View.INVISIBLE);
+        }
+    }
+
+    private void showViews(View ... views) {
+        for (View view : views) {
+            view.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void enableViews(boolean enabled, View ... views) {
+        for (View view : views) {
+            view.setEnabled(enabled);
+        }
+    }
+
+    private void playerPlayed(int choice) {
+        playerChoice = choice;
+        computerChoice = getComputerChoice();
+        result = RESULTS[playerChoice][computerChoice];
+        switch (result) {
+            case WIN:
+                wins++;
+                break;
+            case LOSS:
+                losses++;
+                break;
+            case TIE:
+                ties++;
+                break;
+            default:
+                Log.e(TAG, "Unexpected result: " + result.toString());
+                break;
+        }
+        switchState(RpsState.RESULT, false);
+    }
+
+    private int getComputerChoice() {
+        return random.nextInt(3);
+    }
+
+    private boolean canPublish() {
+        final Session session = Session.getActiveSession();
+        if (session != null && session.isOpened()) {
+            if (session.getPermissions().contains(ADDITIONAL_PERMISSIONS)) {
+                // if we already have publish permissions, then go ahead and publish
+                return true;
+            } else {
+                // otherwise we ask the user if they'd like to publish to facebook
+                new AlertDialog.Builder(getActivity())
+                        .setTitle(R.string.share_with_friends_title)
+                        .setMessage(R.string.share_with_friends_message)
+                        .setPositiveButton(R.string.share_with_friends_yes, canPublishClickListener)
+                        .setNegativeButton(R.string.share_with_friends_no, dontPublishClickListener)
+                        .show();
+                return false;
+            }
+        }
+        return false;
+    }
+
+    private Request publishPlayerPhoto(final int choice) {
+        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), DRAWABLES_HUMAN[choice]);
+        Request request = Request.newUploadStagingResourceWithImageRequest(
+                Session.getActiveSession(),
+                bitmap,
+                new Request.Callback() {
+                    @Override
+                    public void onCompleted(Response response) {
+                        if (response.getError() != null) {
+                            Log.e(TAG, "photo staging upload failed: " + response.getError());
+                        } else {
+                            PHOTO_URIS[choice] = response.getGraphObject().getProperty("uri").toString();
+                        }
+                    }
+                });
+        request.setBatchEntryName(PHOTO_REQUEST_NAME);
+        request.setBatchEntryOmitResultOnSuccess(false);
+        return request;
+    }
+
+    private void publishResult() {
+        if (shouldImplicitlyPublish && canPublish()) {
+            RequestBatch batch = new RequestBatch();
+            String photoUri = PHOTO_URIS[playerChoice];
+            if (photoUri == null) {
+                batch.add(publishPlayerPhoto(playerChoice));
+                photoUri = PHOTO_REQUEST_RESULT;
+            }
+
+            GameGraphObject gameObject = createGameObject();
+            gameObject.setImageUrls(Arrays.asList(photoUri));
+
+            Request gameRequest = Request.newPostOpenGraphObjectRequest(Session.getActiveSession(), gameObject,
+                    new Request.Callback() {
+                        @Override
+                        public void onCompleted(Response response) {
+                            if (response.getError() != null) {
+                                Log.e(TAG, "game object creation failed: " + response.getError());
+                            }
+                        }
+                    });
+            gameRequest.setBatchEntryName(GAME_REQUEST_NAME);
+
+            batch.add(gameRequest);
+
+            PlayAction playAction = createPlayActionWithGame(GAME_REQUEST_RESULT);
+            Request playRequest = Request.newPostOpenGraphActionRequest(Session.getActiveSession(),
+                    playAction,
+                    new Request.Callback() {
+                        @Override
+                        public void onCompleted(Response response) {
+                            if (response.getError() != null) {
+                                Log.e(TAG, "Play action creation failed: " + response.getError());
+                            } else {
+                                PostResponse postResponse = response.getGraphObjectAs(PostResponse.class);
+                                Log.i(TAG, "Posted OG Action with id: " + postResponse.getId());
+                            }
+                        }
+                    });
+
+            batch.add(playRequest);
+            batch.executeAsync();
+        }
+    }
+
+    private GameGraphObject createGameObject() {
+        GameGraphObject gameGraphObject =
+                OpenGraphObject.Factory.createForPost(GameGraphObject.class, GameGraphObject.TYPE);
+        gameGraphObject.setTitle(DEFAULT_GAME_OBJECT_TITLE);
+        GraphObject dataObject = GraphObject.Factory.create();
+        dataObject.setProperty("player_gesture", CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[playerChoice]);
+        dataObject.setProperty("opponent_gesture", CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[computerChoice]);
+        dataObject.setProperty("result", getString(result.getResultStringId()));
+        gameGraphObject.setData(dataObject);
+        return gameGraphObject;
+    }
+
+    private PlayAction createPlayActionWithGame(String game) {
+        PlayAction playAction = OpenGraphAction.Factory.createForPost(PlayAction.class, PlayAction.TYPE);
+        playAction.setProperty("game", game);
+        return playAction;
+    }
+
+    private GestureGraphObject getBuiltInGesture(int choice) {
+        if (choice < 0 || choice >= CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length) {
+            throw new IllegalArgumentException("Invalid choice");
+        }
+        GestureGraphObject gesture =
+                GraphObject.Factory.create(GestureGraphObject.class);
+        gesture.setId(CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[choice]);
+        return gesture;
+    }
+
+    public void shareUsingNativeDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            FacebookDialog.ShareDialogBuilder builder = new FacebookDialog.ShareDialogBuilder(getActivity())
+                    .setLink(SHARE_GAME_LINK)
+                    .setName(SHARE_GAME_NAME)
+                    .setFragment(this);
+            // share the app
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        } else {
+            ThrowAction throwAction = OpenGraphAction.Factory.createForPost(ThrowAction.class, ThrowAction.TYPE);
+            throwAction.setGesture(getBuiltInGesture(playerChoice));
+            throwAction.setOpposingGesture(getBuiltInGesture(computerChoice));
+
+            // The OG objects have their own bitmaps we could rely on, but in order to demonstrate attaching
+            // an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly ourselves.
+            ImageButton view = gestureImages[playerChoice];
+            BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
+            Bitmap bitmap = drawable.getBitmap();
+
+            FacebookDialog.OpenGraphActionDialogBuilder builder = new FacebookDialog.OpenGraphActionDialogBuilder(
+                    getActivity(),
+                    throwAction,
+                    ThrowAction.PREVIEW_PROPERTY_NAME)
+                    .setFragment(this)
+                    .setImageAttachmentsForAction(Arrays.asList(bitmap));
+
+            // share the game play
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        }
+    }
+
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        super.onCreateView(inflater, container, savedInstanceState);
+        View view = inflater.inflate(R.layout.rps_fragment, container, false);
+
+        gestureTextViews[ROCK] = (TextView) view.findViewById(R.id.text_rock);
+        gestureTextViews[PAPER] = (TextView) view.findViewById(R.id.text_paper);
+        gestureTextViews[SCISSORS] = (TextView) view.findViewById(R.id.text_scissors);
+        shootTextView = (TextView) view.findViewById(R.id.shoot);
+        playerChoiceView = (ImageView) view.findViewById(R.id.player_choice);
+        computerChoiceView = (ImageView) view.findViewById(R.id.computer_choice);
+        resultTextView = (TextView) view.findViewById(R.id.who_won);
+        shootGroup = (ViewGroup) view.findViewById(R.id.shoot_display_group);
+        resultGroup = (ViewGroup) view.findViewById(R.id.result_display_group);
+        playerChoiceGroup = (ViewGroup) view.findViewById(R.id.player_choice_display_group);
+        againButton = (Button) view.findViewById(R.id.again_button);
+        gestureImages[ROCK] = (ImageButton) view.findViewById(R.id.player_rock);
+        gestureImages[PAPER] = (ImageButton) view.findViewById(R.id.player_paper);
+        gestureImages[SCISSORS] = (ImageButton) view.findViewById(R.id.player_scissors);
+        fbButton = (ImageButton) view.findViewById(R.id.facebook_button);
+        statsTextView = (TextView) view.findViewById(R.id.stats);
+        rpsFlipper = (ViewFlipper) view.findViewById(R.id.rps_flipper);
+
+        gestureImages[ROCK].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(ROCK);
+            }
+        });
+
+        gestureImages[PAPER].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(PAPER);
+            }
+        });
+
+        gestureImages[SCISSORS].setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                playerPlayed(SCISSORS);
+            }
+        });
+
+        againButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                switchState(RpsState.INIT, false);
+            }
+        });
+
+        fbButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                getActivity().openOptionsMenu();
+            }
+        });
+
+        return view;
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        if (savedInstanceState != null) {
+            wins = savedInstanceState.getInt(WIN_KEY);
+            losses = savedInstanceState.getInt(LOSS_KEY);
+            ties = savedInstanceState.getInt(TIE_KEY);
+            computerChoice = savedInstanceState.getInt(COMPUTER_CHOICE_KEY);
+            playerChoice = savedInstanceState.getInt(PLAYER_CHOICE_KEY);
+            currentState = (RpsState) savedInstanceState.getSerializable(STATE_KEY);
+            result = (RpsResult) savedInstanceState.getSerializable(RESULT_KEY);
+            pendingPublish = savedInstanceState.getBoolean(PENDING_PUBLISH_KEY);
+            shouldImplicitlyPublish = savedInstanceState.getBoolean(IMPLICIT_PUBLISH_KEY);
+        }
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (Session.getActiveSession() != null) {
+            Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        switchState(currentState, true);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle bundle) {
+        super.onSaveInstanceState(bundle);
+        bundle.putInt(WIN_KEY, wins);
+        bundle.putInt(LOSS_KEY, losses);
+        bundle.putInt(TIE_KEY, ties);
+        bundle.putInt(COMPUTER_CHOICE_KEY, computerChoice);
+        bundle.putInt(PLAYER_CHOICE_KEY, playerChoice);
+        bundle.putSerializable(STATE_KEY, currentState);
+        bundle.putSerializable(RESULT_KEY, result);
+        bundle.putBoolean(PENDING_PUBLISH_KEY, pendingPublish);
+        bundle.putBoolean(IMPLICIT_PUBLISH_KEY, shouldImplicitlyPublish);
+    }
+
+}
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java
new file mode 100644
index 000000000..5cf35dac6
--- /dev/null
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsGameUtils.java
@@ -0,0 +1,50 @@
+package com.facebook.samples.rps;
+
+public class RpsGameUtils {
+    public enum RpsState {
+        INIT,
+        PLAYING,
+        RESULT
+    };
+
+    public enum RpsResult {
+        WIN(R.string.win, R.string.result_won),
+        LOSS(R.string.loss, R.string.result_lost),
+        TIE(R.string.tie, R.string.result_tied),
+        INVALID(0, 0);
+
+        private int id;
+        private int resultId;
+
+        private RpsResult(int stringId, int resultStringId) {
+            id = stringId;
+            resultId = resultStringId;
+        }
+
+        public int getStringId() {
+            return id;
+        }
+
+        public int getResultStringId() {
+            return resultId;
+        }
+    };
+
+    public static final int ROCK = 0;
+    public static final int PAPER = 1;
+    public static final int SCISSORS = 2;
+    public static final int INVALID_CHOICE = -1;
+    public static final int SHOOT = 100;
+    public static final int[] DRAWABLES_HUMAN =
+            { R.drawable.left_rock, R.drawable.left_paper, R.drawable.left_scissors };
+    public static final int[] DRAWABLES_COMPUTER =
+            { R.drawable.right_rock, R.drawable.right_paper, R.drawable.right_scissors };
+    public static final int[] STRINGS_TITLES =
+            { R.string.rock, R.string.paper, R.string.scissors };
+    public static final RpsResult[][] RESULTS =
+            {
+                    {RpsResult.TIE, RpsResult.LOSS, RpsResult.WIN},
+                    {RpsResult.WIN, RpsResult.TIE, RpsResult.LOSS},
+                    {RpsResult.LOSS, RpsResult.WIN, RpsResult.TIE}
+            };
+}
diff --git a/samples/Scrumptious/.classpath b/samples/Scrumptious/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/Scrumptious/.classpath
+++ b/samples/Scrumptious/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/Scrumptious/.project b/samples/Scrumptious/.project
index dfb9212a3..a8c700a8a 100644
--- a/samples/Scrumptious/.project
+++ b/samples/Scrumptious/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index ac9de56bc..c4365dd21 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -6,6 +6,8 @@
     <uses-sdk android:minSdkVersion="8"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
+    <uses-permission android:name="android.permission.CAMERA"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <uses-feature android:name="android.hardware.camera"/>
     <uses-feature android:name="android.hardware.camera.autofocus"/>
     <application android:label="@string/app_name"
@@ -25,5 +27,7 @@
                   android:theme="@android:style/Theme.Translucent.NoTitleBar"
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider233936543368280"
+                  android:name="com.facebook.NativeAppCallContentProvider" />
     </application>
 </manifest> 
diff --git a/samples/Scrumptious/Scrumptious.iml b/samples/Scrumptious/Scrumptious.iml
deleted file mode 100644
index b5bb9754e..000000000
--- a/samples/Scrumptious/Scrumptious.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="library" exported="" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/Scrumptious/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/Scrumptious/res/drawable/action_photo.png b/samples/Scrumptious/res/drawable/action_photo.png
new file mode 100644
index 000000000..46533cc70
Binary files /dev/null and b/samples/Scrumptious/res/drawable/action_photo.png differ
diff --git a/samples/Scrumptious/res/layout/splash.xml b/samples/Scrumptious/res/layout/splash.xml
index 263cb7009..b84d8e58f 100644
--- a/samples/Scrumptious/res/layout/splash.xml
+++ b/samples/Scrumptious/res/layout/splash.xml
@@ -72,5 +72,19 @@
             android:layout_marginTop="30dp"
             android:layout_marginBottom="30dp" />
 
+        <Button
+            android:id="@+id/skip_login_button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:text="@string/skip_login"
+            android:background="@drawable/com_facebook_loginbutton_silver"
+            android:textSize="@dimen/com_facebook_loginview_text_size"
+            android:textColor="@color/com_facebook_blue"
+            android:paddingLeft="20dp"
+            android:paddingRight="20dp"
+            android:layout_marginTop="30dp"
+            android:layout_marginBottom="30dp" />
+
     </LinearLayout>
 </ScrollView>
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
index 545cdf409..c28e8df63 100644
--- a/samples/Scrumptious/res/values/strings.xml
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -19,19 +19,28 @@
     <string name="app_name">Scrumptious</string>
     <string name="app_id">233936543368280</string>
     <string name="get_started">To get started, login using Facebook</string>
+    <string name="skip_login">Skip Login</string>
     <string name="action_eating">What are you eating?</string>
     <string name="action_location">Where are you?</string>
     <string name="action_people">With whom?</string>
+    <string name="action_photo">Got a picture?</string>
     <string name="action_eating_default">Select a meal</string>
     <string name="action_location_default">Select a place</string>
     <string name="action_people_default">Select friends</string>
+    <string name="action_photo_default">Take one</string>
+    <string name="action_photo_ready">Ready</string>
+    <string name="action_photo_camera">Take Photo</string>
+    <string name="action_photo_gallery">Choose Existing</string>
     <string name="announce">Announce</string>
     <string name="login">Login</string>
     <string name="settings">Settings</string>
     <string name="select_meal">Select a meal</string>
+    <string name="enter_meal">Enter meal</string>
     <string name="result_dialog_title">Result</string>
     <string name="result_dialog_button_text">Thanks!</string>
-    <string name="result_dialog_text">Posted Open Graph action, id: %1$s</string>
+    <string name="result_dialog_text_with_id">Posted Open Graph action, id: %1$s</string>
+    <string name="result_dialog_text_default">Post action complete.</string>
+    <string name="result_dialog_text_canceled">Post canceled.</string>
     <string name="progress_dialog_text">Announcing, please wait...</string>
     <string name="single_user_selected">%1$s</string>
     <string name="two_users_selected">%1$s and %2$s</string>
@@ -48,6 +57,8 @@
     <string name="error_bad_request">An error occurred, please contact the developer with the following message: %1$s</string>
     <string name="error_unknown">An unknown error occurred, please contact the developer with the following message: %1$s</string>
     <string name="exception">Exception: %1$s</string>
+    <string name="ok">OK</string>
+    <string name="cancel">Cancel</string>
 
     <string-array name="food_types">
         <item>Cheeseburger</item>
@@ -58,6 +69,7 @@
         <item>Chinese</item>
         <item>Thai</item>
         <item>Indian</item>
+        <item>&lt;Other&gt;</item>
     </string-array>
 
     <string-array name="food_og_urls">
@@ -69,5 +81,6 @@
         <item>http://samples.ogp.me/314483421980258</item> <!-- Chinese -->
         <item>http://samples.ogp.me/314483451980255</item> <!-- Thai -->
         <item>http://samples.ogp.me/314483491980251</item> <!-- Indian -->
+        <item></item>
     </string-array>
 </resources>
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
index 777e55739..b1fcc58da 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
@@ -24,12 +24,15 @@
 import android.support.v4.app.FragmentTransaction;
 import android.view.Menu;
 import android.view.MenuItem;
+import com.facebook.AppEventsLogger;
 import com.facebook.Session;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 
 public class MainActivity extends FragmentActivity {
 
+    private static final String USER_SKIPPED_LOGIN_KEY = "user_skipped_login";
+
     private static final int SPLASH = 0;
     private static final int SELECTION = 1;
     private static final int SETTINGS = 2;
@@ -38,6 +41,7 @@
     private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
     private MenuItem settings;
     private boolean isResumed = false;
+    private boolean userSkippedLogin = false;
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback callback = new Session.StatusCallback() {
         @Override
@@ -50,13 +54,17 @@ public void call(Session session, SessionState state, Exception exception) {
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        if (savedInstanceState != null) {
+            userSkippedLogin = savedInstanceState.getBoolean(USER_SKIPPED_LOGIN_KEY);
+        }
         uiHelper = new UiLifecycleHelper(this, callback);
         uiHelper.onCreate(savedInstanceState);
 
         setContentView(R.layout.main);
 
         FragmentManager fm = getSupportFragmentManager();
-        fragments[SPLASH] = fm.findFragmentById(R.id.splashFragment);
+        SplashFragment splashFragment = (SplashFragment) fm.findFragmentById(R.id.splashFragment);
+        fragments[SPLASH] = splashFragment;
         fragments[SELECTION] = fm.findFragmentById(R.id.selectionFragment);
         fragments[SETTINGS] = fm.findFragmentById(R.id.userSettingsFragment);
 
@@ -65,6 +73,14 @@ public void onCreate(Bundle savedInstanceState) {
             transaction.hide(fragments[i]);
         }
         transaction.commit();
+
+        splashFragment.setSkipLoginCallback(new SplashFragment.SkipLoginCallback() {
+            @Override
+            public void onSkipLoginPressed() {
+                userSkippedLogin = true;
+                showFragment(SELECTION, false);
+            }
+        });
     }
 
     @Override
@@ -72,6 +88,10 @@ public void onResume() {
         super.onResume();
         uiHelper.onResume();
         isResumed = true;
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
     }
 
     @Override
@@ -97,6 +117,8 @@ public void onDestroy() {
     protected void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
         uiHelper.onSaveInstanceState(outState);
+
+        outState.putBoolean(USER_SKIPPED_LOGIN_KEY, userSkippedLogin);
     }
 
     @Override
@@ -107,8 +129,11 @@ protected void onResumeFragments() {
         if (session != null && session.isOpened()) {
             // if the session is already open, try to show the selection fragment
             showFragment(SELECTION, false);
+            userSkippedLogin = false;
+        } else if (userSkippedLogin) {
+            showFragment(SELECTION, false);
         } else {
-            // otherwise present the splash screen and ask the user to login.
+            // otherwise present the splash screen and ask the user to login, unless the user explicitly skipped.
             showFragment(SPLASH, false);
         }
     }
@@ -131,12 +156,16 @@ public boolean onPrepareOptionsMenu(Menu menu) {
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         if (item.equals(settings)) {
-            showFragment(SETTINGS, true);
+            showSettingsFragment();
             return true;
         }
         return false;
     }
 
+    public void showSettingsFragment() {
+        showFragment(SETTINGS, true);
+    }
+
     private void onSessionStateChange(Session session, SessionState state, Exception exception) {
         if (isResumed) {
             FragmentManager manager = getSupportFragmentManager();
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
index e16bf04af..86265a074 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
@@ -22,17 +22,25 @@
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.database.Cursor;
+import android.graphics.BitmapFactory;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.Environment;
+import android.provider.MediaStore;
 import android.support.v4.app.Fragment;
 import android.util.Log;
+import android.util.Pair;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.view.WindowManager;
 import android.widget.*;
 import com.facebook.*;
+import com.facebook.internal.Utility;
 import com.facebook.model.*;
+import com.facebook.widget.FacebookDialog;
 import com.facebook.widget.ProfilePictureView;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -48,12 +56,17 @@
 public class SelectionFragment extends Fragment {
 
     private static final String TAG = "SelectionFragment";
-    private static final String POST_ACTION_PATH = "me/fb_sample_scrumps:eat";
+    private static final String MEAL_OBJECT_TYPE = "fb_sample_scrumps:meal";
+    private static final String EAT_ACTION_TYPE = "fb_sample_scrumps:eat";
+    private static final String DEFAULT_ACTION_IMAGE_URL =
+            "http://facebooksampleapp.com/scrumptious/static/images/logo.png";
+
     private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce";
     private static final Uri M_FACEBOOK_URL = Uri.parse("http://m.facebook.com");
+    private static final int USER_GENERATED_MIN_SIZE = 480;
 
     private static final int REAUTH_ACTIVITY_CODE = 100;
-    private static final List<String> PERMISSIONS = Arrays.asList("publish_actions");
+    private static final String PERMISSION = "publish_actions";
 
     private Button announceButton;
     private ListView listView;
@@ -62,19 +75,51 @@
     private ProfilePictureView profilePictureView;
     private TextView userNameView;
     private boolean pendingAnnounce;
+    private MainActivity activity;
+    private Uri photoUri;
 
     private UiLifecycleHelper uiHelper;
-    private Session.StatusCallback callback = new Session.StatusCallback() {
+    private Session.StatusCallback sessionCallback = new Session.StatusCallback() {
         @Override
         public void call(final Session session, final SessionState state, final Exception exception) {
             onSessionStateChange(session, state, exception);
         }
     };
+    private FacebookDialog.Callback nativeDialogCallback = new FacebookDialog.Callback() {
+        @Override
+        public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
+            boolean resetSelections = true;
+            if (FacebookDialog.getNativeDialogDidComplete(data)) {
+                if (FacebookDialog.COMPLETION_GESTURE_CANCEL
+                        .equals(FacebookDialog.getNativeDialogCompletionGesture(data))) {
+                    // Leave selections alone if user canceled.
+                    resetSelections = false;
+                    showCancelResponse();
+                } else {
+                    showSuccessResponse(FacebookDialog.getNativeDialogPostId(data));
+                }
+            }
+
+            if (resetSelections) {
+                init(null);
+            }
+        }
+
+        @Override
+        public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
+            new AlertDialog.Builder(getActivity())
+                    .setPositiveButton(R.string.error_dialog_button_text, null)
+                    .setTitle(R.string.error_dialog_title)
+                    .setMessage(error.getLocalizedMessage())
+                    .show();
+        }
+    };
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        uiHelper = new UiLifecycleHelper(getActivity(), callback);
+        activity = (MainActivity) getActivity();
+        uiHelper = new UiLifecycleHelper(getActivity(), sessionCallback);
         uiHelper.onCreate(savedInstanceState);
     }
 
@@ -101,6 +146,7 @@ public void onClick(View view) {
                 handleAnnounce();
             }
         });
+
         init(savedInstanceState);
 
         return view;
@@ -109,10 +155,10 @@ public void onClick(View view) {
     @Override
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         super.onActivityResult(requestCode, resultCode, data);
-        if (requestCode == REAUTH_ACTIVITY_CODE) {
-            uiHelper.onActivityResult(requestCode, resultCode, data);
-        } else if (resultCode == Activity.RESULT_OK && requestCode >= 0 && requestCode < listElements.size()) {
+        if (resultCode == Activity.RESULT_OK && requestCode >= 0 && requestCode < listElements.size()) {
             listElements.get(requestCode).onActivityResult(data);
+        } else {
+            uiHelper.onActivityResult(requestCode, resultCode, data, nativeDialogCallback);
         }
     }
 
@@ -136,6 +182,7 @@ public void onPause() {
     public void onDestroy() {
         super.onDestroy();
         uiHelper.onDestroy();
+        activity = null;
     }
 
     /**
@@ -154,6 +201,9 @@ private void onSessionStateChange(final Session session, SessionState state, Exc
             } else {
                 makeMeRequest(session);
             }
+        } else {
+            profilePictureView.setProfileId(null);
+            userNameView.setText("");
         }
     }
 
@@ -187,6 +237,7 @@ private void init(Bundle savedInstanceState) {
         listElements.add(new EatListElement(0));
         listElements.add(new LocationListElement(1));
         listElements.add(new PeopleListElement(2));
+        listElements.add(new PhotoListElement(3));
 
         if (savedInstanceState != null) {
             for (BaseListElement listElement : listElements) {
@@ -207,12 +258,20 @@ private void handleAnnounce() {
         pendingAnnounce = false;
         Session session = Session.getActiveSession();
 
-        if (session == null || !session.isOpened()) {
-            return;
+        // if we have a session, then use the graph API to directly publish, otherwise use
+        // the native open graph share dialog.
+        if (session != null && session.isOpened()) {
+            handleGraphApiAnnounce();
+        } else {
+            handleNativeShareAnnounce();
         }
+    }
+
+    private void handleGraphApiAnnounce() {
+        Session session = Session.getActiveSession();
 
         List<String> permissions = session.getPermissions();
-        if (!permissions.containsAll(PERMISSIONS)) {
+        if (!permissions.contains(PERMISSION)) {
             pendingAnnounce = true;
             requestPublishPermissions(session);
             return;
@@ -222,34 +281,176 @@ private void handleAnnounce() {
         progressDialog = ProgressDialog.show(getActivity(), "",
                 getActivity().getResources().getString(R.string.progress_dialog_text), true);
 
-        // Run this in a background thread since some of the populate methods may take
-        // a non-trivial amount of time.
-        AsyncTask<Void, Void, Response> task = new AsyncTask<Void, Void, Response>() {
+        // Run this in a background thread so we can process the list of responses and extract errors.
+        AsyncTask<Void, Void, List<Response>> task = new AsyncTask<Void, Void, List<Response>>() {
 
             @Override
-            protected Response doInBackground(Void... voids) {
-                EatAction eatAction = GraphObject.Factory.create(EatAction.class);
-                for (BaseListElement element : listElements) {
-                    element.populateOGAction(eatAction);
+            protected List<Response> doInBackground(Void... voids) {
+                EatAction eatAction = createEatAction();
+
+                RequestBatch requestBatch = new RequestBatch();
+
+                String photoStagingUri = null;
+
+                if (photoUri != null) {
+                    try {
+                        Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
+                        if (fileAndMinDimemsion != null) {
+                            Request photoStagingRequest =
+                                    Request.newUploadStagingResourceWithImageRequest(Session.getActiveSession(),
+                                            fileAndMinDimemsion.first, null);
+                            photoStagingRequest.setBatchEntryName("photoStaging");
+                            requestBatch.add(photoStagingRequest);
+                            // Facebook SDK * pro-tip *
+                            // We can use the result from one request in the batch as the input to another request.
+                            // In this case, the result from the staging upload is "uri", which we will use as the
+                            // input into the "url" field for images on the open graph action below.
+                            photoStagingUri = "{result=photoStaging:$.uri}";
+                            eatAction.setImage(getImageListForAction(photoStagingUri,
+                                    fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE));
+                        }
+                    } catch (FileNotFoundException e) {
+                        // NOOP - if we can't upload the image, just skip it for now
+                    }
                 }
-                Request request = new Request(Session.getActiveSession(),
-                        POST_ACTION_PATH, null, HttpMethod.POST);
-                request.setGraphObject(eatAction);
-                return request.executeAndWait();
+                MealGraphObject meal = eatAction.getMeal();
+                if (meal.getCreateObject()) {
+                    Request createObjectRequest =
+                            Request.newPostOpenGraphObjectRequest(Session.getActiveSession(), meal, null);
+                    createObjectRequest.setBatchEntryName("createObject");
+                    requestBatch.add(createObjectRequest);
+                    eatAction.setProperty("meal", "{result=createObject:$.id}");
+                }
+
+                Request request = Request.newPostOpenGraphActionRequest(Session.getActiveSession(), eatAction, null);
+                requestBatch.add(request);
+
+                return requestBatch.executeAndWait();
             }
 
             @Override
-            protected void onPostExecute(Response response) {
-                onPostActionResponse(response);
-             }
+            protected void onPostExecute(List<Response> responses) {
+                // We only care about the last response, or the first one with an error.
+                Response finalResponse = null;
+                for (Response response : responses) {
+                    finalResponse = response;
+                    if (response != null && response.getError() != null) {
+                        break;
+                    }
+                }
+                onPostActionResponse(finalResponse);
+            }
         };
 
         task.execute();
     }
 
+    private void handleNativeShareAnnounce() {
+        FacebookDialog.OpenGraphActionDialogBuilder builder = createDialogBuilder();
+        if (builder.canPresent()) {
+            uiHelper.trackPendingDialogCall(builder.build().present());
+        } else {
+            // If we can't show the native open graph share dialog because the Facebook app
+            // does not support it, then show then settings fragment so the user can log in.
+            activity.showSettingsFragment();
+        }
+    }
+
+    private FacebookDialog.OpenGraphActionDialogBuilder createDialogBuilder() {
+        EatAction eatAction = createEatAction();
+
+        boolean userGenerated = false;
+        if (photoUri != null) {
+            String photoUriString = photoUri.toString();
+            Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
+            userGenerated = fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE;
+
+            // If we have a content: URI, we can just use that URI, otherwise we'll need to add it as an attachment.
+            if (fileAndMinDimemsion != null && photoUri.getScheme().startsWith("content")) {
+                eatAction.setImage(getImageListForAction(photoUriString, userGenerated));
+            }
+        }
+
+        FacebookDialog.OpenGraphActionDialogBuilder builder = new FacebookDialog.OpenGraphActionDialogBuilder(
+                getActivity(), eatAction, "meal")
+                .setFragment(SelectionFragment.this);
+
+        if (photoUri != null && !photoUri.getScheme().startsWith("content")) {
+            builder.setImageAttachmentFilesForAction(Arrays.asList(new File(photoUri.getPath())), userGenerated);
+        }
+
+        return builder;
+    }
+
+    private Pair<File, Integer> getImageFileAndMinDimension() {
+        File photoFile = null;
+        String photoUriString = photoUri.toString();
+        if (photoUriString.startsWith("file://")) {
+            photoFile = new File(photoUri.getPath());
+        } else if (photoUriString.startsWith("content://")) {
+            String [] filePath = { MediaStore.Images.Media.DATA };
+            Cursor cursor = getActivity().getContentResolver().query(photoUri, filePath, null, null, null);
+            if (cursor != null) {
+                cursor.moveToFirst();
+                int columnIndex = cursor.getColumnIndex(filePath[0]);
+                String filename = cursor.getString(columnIndex);
+                cursor.close();
+
+                photoFile = new File(filename);
+            }
+        }
+
+        if (photoFile != null) {
+            InputStream is = null;
+            try {
+                is = new FileInputStream(photoFile);
+
+                // We only want to get the bounds of the image, rather than load the whole thing.
+                BitmapFactory.Options options = new BitmapFactory.Options();
+                options.inJustDecodeBounds = true;
+                BitmapFactory.decodeStream(is, null, options);
+
+                return new Pair<File, Integer>(photoFile, Math.min(options.outWidth, options.outHeight));
+            } catch (Exception e) {
+                return null;
+            } finally {
+                Utility.closeQuietly(is);
+            }
+        }
+        return null;
+    }
+
+    /**
+     * Creates a GraphObject with the following format:
+     * {
+     *     url: ${uri},
+     *     user_generated: true
+     * }
+     */
+    private GraphObject getImageObject(String uri, boolean userGenerated) {
+        GraphObject imageObject = GraphObject.Factory.create();
+        imageObject.setProperty("url", uri);
+        if (userGenerated) {
+            imageObject.setProperty("user_generated", "true");
+        }
+        return imageObject;
+    }
+
+    private List<JSONObject> getImageListForAction(String uri, boolean userGenerated) {
+        return Arrays.asList(getImageObject(uri, userGenerated).getInnerJSONObject());
+    }
+
+    private EatAction createEatAction() {
+        EatAction eatAction = OpenGraphAction.Factory.createForPost(EatAction.class, EAT_ACTION_TYPE);
+        for (BaseListElement element : listElements) {
+            element.populateOGAction(eatAction);
+        }
+        return eatAction;
+    }
+
     private void requestPublishPermissions(Session session) {
         if (session != null) {
-            Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(this, PERMISSIONS)
+            Session.NewPermissionsRequest newPermissionsRequest = new Session.NewPermissionsRequest(this, PERMISSION)
                     // demonstrate how to set an audience for the publish permissions,
                     // if none are set, this defaults to FRIENDS
                     .setDefaultAudience(SessionDefaultAudience.FRIENDS)
@@ -275,18 +476,35 @@ private void onPostActionResponse(Response response) {
         PostResponse postResponse = response.getGraphObjectAs(PostResponse.class);
 
         if (postResponse != null && postResponse.getId() != null) {
-            String dialogBody = String.format(getString(R.string.result_dialog_text), postResponse.getId());
-            new AlertDialog.Builder(getActivity())
-                    .setPositiveButton(R.string.result_dialog_button_text, null)
-                    .setTitle(R.string.result_dialog_title)
-                    .setMessage(dialogBody)
-                    .show();
+            showSuccessResponse(postResponse.getId());
             init(null);
         } else {
             handleError(response.getError());
         }
     }
 
+    private void showSuccessResponse(String postId) {
+        String dialogBody;
+        if (postId != null) {
+            dialogBody = String.format(getString(R.string.result_dialog_text_with_id), postId);
+        } else {
+            dialogBody = getString(R.string.result_dialog_text_default);
+        }
+        showResultDialog(dialogBody);
+    }
+
+    private void showCancelResponse() {
+        showResultDialog(getString(R.string.result_dialog_text_canceled));
+    }
+
+    private void showResultDialog(String dialogBody) {
+        new AlertDialog.Builder(getActivity())
+                .setPositiveButton(R.string.result_dialog_button_text, null)
+                .setTitle(R.string.result_dialog_title)
+                .setMessage(dialogBody)
+                .show();
+    }
+
     private void handleError(FacebookRequestError error) {
         DialogInterface.OnClickListener listener = null;
         String dialogBody = null;
@@ -376,7 +594,7 @@ private void startPickerActivity(Uri data, int requestCode) {
     /**
      * Interface representing the Meal Open Graph object.
      */
-    private interface MealGraphObject extends GraphObject {
+    private interface MealGraphObject extends OpenGraphObject {
         public String getUrl();
         public void setUrl(String url);
 
@@ -411,9 +629,9 @@ private void startPickerActivity(Uri data, int requestCode) {
 
         public EatListElement(int requestCode) {
             super(getActivity().getResources().getDrawable(R.drawable.action_eating),
-                  getActivity().getResources().getString(R.string.action_eating),
-                  getActivity().getResources().getString(R.string.action_eating_default),
-                  requestCode);
+                    getActivity().getResources().getString(R.string.action_eating),
+                    getActivity().getResources().getString(R.string.action_eating_default),
+                    requestCode);
             foodChoices = getActivity().getResources().getStringArray(R.array.food_types);
             foodUrls = getActivity().getResources().getStringArray(R.array.food_og_urls);
         }
@@ -430,11 +648,19 @@ public void onClick(View view) {
 
         @Override
         protected void populateOGAction(OpenGraphAction action) {
-            if (foodChoiceUrl != null) {
+            if (foodChoice != null && foodChoice.length() > 0) {
                 EatAction eatAction = action.cast(EatAction.class);
-                MealGraphObject meal = GraphObject.Factory.create(MealGraphObject.class);
-                meal.setUrl(foodChoiceUrl);
-                eatAction.setMeal(meal);
+                eatAction.setImageUrls(Arrays.asList(DEFAULT_ACTION_IMAGE_URL));
+                if (foodChoiceUrl != null && foodChoiceUrl.length() > 0) {
+                    MealGraphObject meal = GraphObject.Factory.create(MealGraphObject.class);
+                    meal.setUrl(foodChoiceUrl);
+                    eatAction.setMeal(meal);
+                } else {
+                    MealGraphObject meal = OpenGraphObject.Factory.createForPost(MealGraphObject.class,
+                            MEAL_OBJECT_TYPE);
+                    meal.setTitle(foodChoice);
+                    eatAction.setMeal(meal);
+                }
             }
         }
 
@@ -467,17 +693,48 @@ private void showMealOptions() {
                     setItems(foodChoices, new DialogInterface.OnClickListener() {
                         @Override
                         public void onClick(DialogInterface dialogInterface, int i) {
-                            foodChoice = foodChoices[i];
                             foodChoiceUrl = foodUrls[i];
+                            if (foodChoiceUrl.length() == 0) {
+                                getCustomFood();
+                            } else {
+                                foodChoice = foodChoices[i];
+                                setFoodText();
+                                notifyDataChanged();
+                            }
+                        }
+                    });
+            builder.show();
+        }
+
+        private void getCustomFood() {
+            String title = getActivity().getResources().getString(R.string.enter_meal);
+            final EditText input = new EditText(getActivity());
+
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            builder.setTitle(title)
+                    .setCancelable(true)
+                    .setView(input)
+                    .setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            foodChoice = input.getText().toString();
                             setFoodText();
                             notifyDataChanged();
                         }
+                    })
+                    .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                        }
                     });
-            builder.show();
+            AlertDialog dialog = builder.create();
+            // always popup the keyboard when the alert dialog shows
+            dialog.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);
+            dialog.show();
         }
 
         private void setFoodText() {
-            if (foodChoice != null && foodChoiceUrl != null) {
+            if (foodChoice != null && foodChoice.length() > 0) {
                 setText2(foodChoice);
                 announceButton.setEnabled(true);
             } else {
@@ -495,9 +752,9 @@ private void setFoodText() {
 
         public PeopleListElement(int requestCode) {
             super(getActivity().getResources().getDrawable(R.drawable.action_people),
-                  getActivity().getResources().getString(R.string.action_people),
-                  getActivity().getResources().getString(R.string.action_people_default),
-                  requestCode);
+                    getActivity().getResources().getString(R.string.action_people),
+                    getActivity().getResources().getString(R.string.action_people_default),
+                    requestCode);
         }
 
         @Override
@@ -505,7 +762,12 @@ public PeopleListElement(int requestCode) {
             return new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    startPickerActivity(PickerActivity.FRIEND_PICKER, getRequestCode());
+                    if (Session.getActiveSession() != null &&
+                            Session.getActiveSession().isOpened()) {
+                        startPickerActivity(PickerActivity.FRIEND_PICKER, getRequestCode());
+                    } else {
+                        activity.showSettingsFragment();
+                    }
                 }
             };
         }
@@ -613,9 +875,9 @@ private void setUsersText() {
 
         public LocationListElement(int requestCode) {
             super(getActivity().getResources().getDrawable(R.drawable.action_location),
-                  getActivity().getResources().getString(R.string.action_location),
-                  getActivity().getResources().getString(R.string.action_location_default),
-                  requestCode);
+                    getActivity().getResources().getString(R.string.action_location),
+                    getActivity().getResources().getString(R.string.action_location_default),
+                    requestCode);
         }
 
         @Override
@@ -623,7 +885,12 @@ public LocationListElement(int requestCode) {
             return new View.OnClickListener() {
                 @Override
                 public void onClick(View view) {
-                    startPickerActivity(PickerActivity.PLACE_PICKER, getRequestCode());
+                    if (Session.getActiveSession() != null &&
+                            Session.getActiveSession().isOpened()) {
+                        startPickerActivity(PickerActivity.PLACE_PICKER, getRequestCode());
+                    } else {
+                        activity.showSettingsFragment();
+                    }
                 }
             };
         }
@@ -678,6 +945,121 @@ private void setPlaceText() {
 
     }
 
+    private class PhotoListElement extends BaseListElement {
+        private static final int CAMERA = 0;
+        private static final int GALLERY = 1;
+        private static final String PHOTO_URI_KEY = "photo_uri";
+        private static final String TEMP_URI_KEY = "temp_uri";
+        private static final String FILE_PREFIX = "scrumptious_img_";
+        private static final String FILE_SUFFIX = ".jpg";
+
+        private Uri tempUri = null;
+
+        public PhotoListElement(int requestCode) {
+            super(getActivity().getResources().getDrawable(R.drawable.action_photo),
+                    getActivity().getResources().getString(R.string.action_photo),
+                    getActivity().getResources().getString(R.string.action_photo_default),
+                    requestCode);
+            photoUri = null;
+        }
+
+        @Override
+        protected View.OnClickListener getOnClickListener() {
+            return new View.OnClickListener() {
+                @Override
+                public void onClick(View view) {
+                    showPhotoChoice();
+                }
+            };
+        }
+
+        @Override
+        protected void onActivityResult(Intent data) {
+            if (tempUri != null) {
+                photoUri = tempUri;
+            } else if (data != null) {
+                photoUri = data.getData();
+            }
+            setPhotoText();
+        }
+
+        @Override
+        protected void populateOGAction(OpenGraphAction action) {
+        }
+
+        @Override
+        protected void onSaveInstanceState(Bundle bundle) {
+            if (photoUri != null) {
+                bundle.putParcelable(PHOTO_URI_KEY, photoUri);
+            }
+            if (tempUri != null) {
+                bundle.putParcelable(TEMP_URI_KEY, tempUri);
+            }
+        }
+
+        @Override
+        protected boolean restoreState(Bundle savedState) {
+            photoUri = savedState.getParcelable(PHOTO_URI_KEY);
+            tempUri = savedState.getParcelable(TEMP_URI_KEY);
+            setPhotoText();
+            return true;
+        }
+
+        private void showPhotoChoice() {
+            AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+            CharSequence camera = getResources().getString(R.string.action_photo_camera);
+            CharSequence gallery = getResources().getString(R.string.action_photo_gallery);
+            builder.setCancelable(true).
+                    setItems(new CharSequence[] {camera, gallery}, new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialogInterface, int i) {
+                            if (i == CAMERA) {
+                                startCameraActivity();
+                            } else if (i == GALLERY) {
+                                startGalleryActivity();
+                            }
+                        }
+                    });
+            builder.show();
+        }
+
+        private void setPhotoText() {
+            if (photoUri == null) {
+                setText2(getResources().getString(R.string.action_photo_default));
+            } else {
+                setText2(getResources().getString(R.string.action_photo_ready));
+            }
+        }
+
+        private void startCameraActivity() {
+            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
+            tempUri = getTempUri();
+            if (tempUri != null) {
+                intent.putExtra(MediaStore.EXTRA_OUTPUT, tempUri);
+            }
+            startActivityForResult(intent, getRequestCode());
+        }
+
+        private void startGalleryActivity() {
+            tempUri = null;
+            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+            intent.setType("image/*");
+            String selectPicture = getResources().getString(R.string.select_picture);
+            startActivityForResult(Intent.createChooser(intent, selectPicture), getRequestCode());
+        }
+
+        private Uri getTempUri() {
+            String imgFileName = FILE_PREFIX + System.currentTimeMillis() + FILE_SUFFIX;
+
+            // Note: on an emulator, you might need to create the "Pictures" directory in /mnt/sdcard first
+            //       % adb shell
+            //       % mkdir /mnt/sdcard/Pictures
+            File image = new File(
+                    Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES), imgFileName);
+            return Uri.fromFile(image);
+        }
+    }
+
     private class ActionListAdapter extends ArrayAdapter<BaseListElement> {
         private List<BaseListElement> listElements;
 
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
index 73f0dced9..f85fb29df 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
@@ -21,11 +21,36 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
+import android.widget.Button;
 
 public class SplashFragment extends Fragment {
+
+    private Button skipLoginButton;
+    private SkipLoginCallback skipLoginCallback;
+
+    public interface SkipLoginCallback {
+        void onSkipLoginPressed();
+    }
+
+
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.splash, container, false);
+
+        skipLoginButton = (Button) view.findViewById(R.id.skip_login_button);
+        skipLoginButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                if (skipLoginCallback != null) {
+                    skipLoginCallback.onSkipLoginPressed();
+                }
+            }
+        });
+
         return view;
     }
+
+    public void setSkipLoginCallback(SkipLoginCallback callback) {
+        skipLoginCallback = callback;
+    }
 }
diff --git a/samples/SessionLoginSample/.classpath b/samples/SessionLoginSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/SessionLoginSample/.classpath
+++ b/samples/SessionLoginSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/SessionLoginSample/.project b/samples/SessionLoginSample/.project
index d8c641423..a6c125972 100644
--- a/samples/SessionLoginSample/.project
+++ b/samples/SessionLoginSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/SessionLoginSample/AndroidManifest.xml b/samples/SessionLoginSample/AndroidManifest.xml
index c1272829b..be2beb9be 100644
--- a/samples/SessionLoginSample/AndroidManifest.xml
+++ b/samples/SessionLoginSample/AndroidManifest.xml
@@ -30,7 +30,7 @@
                   android:theme="@android:style/Theme.Translucent.NoTitleBar"
                   android:label="@string/app_name" />
         <activity android:name=".LoginUsingLoginFragmentActivity"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/applicationId" />
+        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id" />
     </application>
 
 </manifest>
diff --git a/samples/SessionLoginSample/SessionLoginSample.iml b/samples/SessionLoginSample/SessionLoginSample.iml
deleted file mode 100644
index 3b9987615..000000000
--- a/samples/SessionLoginSample/SessionLoginSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SessionLoginSample/build.gradle b/samples/SessionLoginSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/SessionLoginSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
index 063aab9e7..bcece0ad1 100644
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ b/samples/SessionLoginSample/res/values/strings.xml
@@ -25,6 +25,6 @@
     <string name="login">Login</string>
     <string name="instructions">Login to create a link to fetch account data</string>
     <string name="logout">Log out</string>
-    <string name="applicationId">380615018626574</string>
+    <string name="app_id">380615018626574</string>
 
 </resources>
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
index 87dea2181..9c64116da 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
@@ -21,6 +21,7 @@
 import android.os.Bundle;
 import android.view.View;
 import android.widget.Button;
+import com.facebook.AppEventsLogger;
 
 public class SessionLoginSampleActivity extends Activity {
 
@@ -69,4 +70,13 @@ public void onClick(View v) {
             }
         });
     }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
+    }
 }
diff --git a/samples/SwitchUserSample/.classpath b/samples/SwitchUserSample/.classpath
index 655a4a827..6ef980d36 100644
--- a/samples/SwitchUserSample/.classpath
+++ b/samples/SwitchUserSample/.classpath
@@ -2,7 +2,8 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
 	<classpathentry kind="src" path="gen"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
 	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/samples/SwitchUserSample/.project b/samples/SwitchUserSample/.project
index 2f6fda8c3..9dc13d0d4 100644
--- a/samples/SwitchUserSample/.project
+++ b/samples/SwitchUserSample/.project
@@ -30,4 +30,11 @@
 		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
+        <linkedResources>
+                <link>
+                        <name>libs</name>
+                        <type>2</type>
+                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
+                </link>
+        </linkedResources>
 </projectDescription>
diff --git a/samples/SwitchUserSample/SwitchUserSample.iml b/samples/SwitchUserSample/SwitchUserSample.iml
deleted file mode 100644
index 3b9987615..000000000
--- a/samples/SwitchUserSample/SwitchUserSample.iml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="GEN_FOLDER_RELATIVE_PATH_APT" value="/gen" />
-        <option name="GEN_FOLDER_RELATIVE_PATH_AIDL" value="/gen" />
-        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/AndroidManifest.xml" />
-        <option name="RES_FOLDER_RELATIVE_PATH" value="/res" />
-        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/assets" />
-        <option name="LIBS_FOLDER_RELATIVE_PATH" value="/libs" />
-        <option name="USE_CUSTOM_APK_RESOURCE_FOLDER" value="false" />
-        <option name="CUSTOM_APK_RESOURCE_FOLDER" value="" />
-        <option name="USE_CUSTOM_COMPILER_MANIFEST" value="false" />
-        <option name="CUSTOM_COMPILER_MANIFEST" value="" />
-        <option name="APK_PATH" value="" />
-        <option name="LIBRARY_PROJECT" value="false" />
-        <option name="RUN_PROCESS_RESOURCES_MAVEN_TASK" value="true" />
-        <option name="GENERATE_UNSIGNED_APK" value="false" />
-        <option name="CUSTOM_DEBUG_KEYSTORE_PATH" value="" />
-        <option name="PACK_TEST_CODE" value="false" />
-        <option name="RUN_PROGUARD" value="false" />
-        <option name="PROGUARD_CFG_PATH" value="/proguard-project.txt" />
-        <resOverlayFolders>
-          <path>/res-overlay</path>
-        </resOverlayFolders>
-        <includeSystemProguardFile>true</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <additionalNativeLibs />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
new file mode 100644
index 000000000..a2cda0280
--- /dev/null
+++ b/samples/SwitchUserSample/build.gradle
@@ -0,0 +1,23 @@
+apply plugin: 'android'
+
+dependencies {
+    compile project(':facebook')
+}
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+    }
+
+    sourceSets {
+        main {
+            manifest.srcFile 'AndroidManifest.xml'
+            java.srcDirs = ['src']
+            res.srcDirs = ['res']
+        }
+    }
+}
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
index 94e6e150a..b7ddd6adb 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
@@ -119,6 +119,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
         if (currentSession != null) {
             currentSession.addCallback(sessionStatusCallback);
         }
+
+        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
+        // the onResume methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.activateApp(this);
     }
 
     @Override
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..8fb89427e
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,28 @@
+// Facebook SDK
+include ':facebook'
+
+// Tests
+include 'TestApp'
+project(':TestApp').projectDir = new File('facebook/TestApp')
+include 'tests'
+project(':tests').projectDir = new File('facebook/tests')
+
+// Samples
+include 'FriendPickerSample'
+project(':FriendPickerSample').projectDir = new File('samples/FriendPickerSample')
+include 'GraphApiSample'
+project(':GraphApiSample').projectDir = new File('samples/GraphApiSample')
+include 'HelloFacebookSample'
+project(':HelloFacebookSample').projectDir = new File('samples/HelloFacebookSample')
+include 'PlacePickerSample'
+project(':PlacePickerSample').projectDir = new File('samples/PlacePickerSample')
+include 'ProfilePictureSample'
+project(':ProfilePictureSample').projectDir = new File('samples/ProfilePictureSample')
+include 'RPSSample'
+project(':RPSSample').projectDir = new File('samples/RPSSample')
+include 'Scrumptious'
+project(':Scrumptious').projectDir = new File('samples/Scrumptious')
+include 'SessionLoginSample'
+project(':SessionLoginSample').projectDir = new File('samples/SessionLoginSample')
+include 'SwitchUserSample'
+project(':SwitchUserSample').projectDir = new File('samples/SwitchUserSample')
