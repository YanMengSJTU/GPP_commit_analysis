diff --git a/facebook/junitTests/src/test/java/com/facebook/ApplicationTest.java b/facebook/junitTests/src/test/java/com/facebook/ApplicationTest.java
index 8754c0cfe..a6452b5a1 100644
--- a/facebook/junitTests/src/test/java/com/facebook/ApplicationTest.java
+++ b/facebook/junitTests/src/test/java/com/facebook/ApplicationTest.java
@@ -24,9 +24,14 @@
 
 import com.facebook.junittests.MainActivity;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.robolectric.Robolectric;
 
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+
 import static org.junit.Assert.*;
 
 public class ApplicationTest extends FacebookTestCase {
@@ -35,4 +40,22 @@ public void testCreateActivity() throws Exception {
         Activity activity = Robolectric.buildActivity(MainActivity.class).create().get();
         assertTrue(activity != null);
     }
+
+    @Test
+    public void testSdkInitializeCallback() throws Exception{
+        final CountDownLatch lock = new CountDownLatch(1);
+        Activity activity = Robolectric.buildActivity(MainActivity.class).create().get();
+        final AtomicBoolean initialized = new AtomicBoolean(false);
+        FacebookSdk.sdkInitialize(activity, new FacebookSdk.InitializeCallback() {
+            @Override
+            public void onInitialized() {
+                initialized.set(true);
+                lock.countDown();
+            }
+        });
+
+        lock.await(100, TimeUnit.MILLISECONDS);
+
+        assertTrue(initialized.get());
+    }
 }
diff --git a/facebook/junitTests/src/test/java/com/facebook/GraphRequestTest.java b/facebook/junitTests/src/test/java/com/facebook/GraphRequestTest.java
index a204359aa..3aca6e1c5 100644
--- a/facebook/junitTests/src/test/java/com/facebook/GraphRequestTest.java
+++ b/facebook/junitTests/src/test/java/com/facebook/GraphRequestTest.java
@@ -90,9 +90,9 @@ public void testCreateUploadPhotoRequest() {
         Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
 
         GraphRequest request =
-                ShareInternalUtility.newUploadPhotoRequest(
-                        ShareInternalUtility.MY_PHOTOS,
+                GraphRequest.newUploadPhotoRequest(
                         null,
+                        ShareInternalUtility.MY_PHOTOS,
                         image,
                         null,
                         null,
@@ -139,115 +139,6 @@ public void testCreatePlacesSearchRequestRequiresLocationOrSearchText() {
         }
     }
 
-    @Test
-    public void testNewPostOpenGraphObjectRequestRequiresObject() {
-        try {
-            ShareInternalUtility.newPostOpenGraphObjectRequest(null, null, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphObjectRequestRequiresObjectType() {
-        try {
-            JSONObject object = GraphUtil.createOpenGraphObjectForPost(null);
-            ShareInternalUtility.newPostOpenGraphObjectRequest(null, object, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphObjectRequestRequiresNonEmptyObjectType() throws JSONException {
-        try {
-            JSONObject object = GraphUtil.createOpenGraphObjectForPost("");
-            object.put("title", "bar");
-            ShareInternalUtility.newPostOpenGraphObjectRequest(null, object, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphObjectRequestRequiresTitle() {
-        try {
-            JSONObject object = GraphUtil.createOpenGraphObjectForPost("foo");
-            ShareInternalUtility.newPostOpenGraphObjectRequest(null, object, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphObjectRequestRequiresNonEmptyTitle() throws JSONException {
-        try {
-            JSONObject object = GraphUtil.createOpenGraphObjectForPost("foo");
-            object.put("title", "");
-            ShareInternalUtility.newPostOpenGraphObjectRequest(null, object, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphObjectRequest() throws JSONException {
-        JSONObject object = GraphUtil.createOpenGraphObjectForPost("foo");
-        object.put("title", "bar");
-        GraphRequest request = ShareInternalUtility.newPostOpenGraphObjectRequest(
-                null,
-                object,
-                null);
-        assertNotNull(request);
-    }
-
-    @Test
-    public void testNewPostOpenGraphActionRequestRequiresAction() {
-        try {
-            ShareInternalUtility.newPostOpenGraphActionRequest(null, null, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphActionRequestRequiresActionType() {
-        try {
-            JSONObject action = GraphUtil.createOpenGraphActionForPost(null);
-            ShareInternalUtility.newPostOpenGraphActionRequest(null, action, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphActionRequestRequiresNonEmptyActionType() {
-        try {
-            JSONObject action = GraphUtil.createOpenGraphActionForPost("");
-            ShareInternalUtility.newPostOpenGraphActionRequest(null, action, null);
-            fail("expected exception");
-        } catch (FacebookException exception) {
-            // Success
-        }
-    }
-
-    @Test
-    public void testNewPostOpenGraphActionRequest() {
-        JSONObject action = GraphUtil.createOpenGraphActionForPost("foo");
-        GraphRequest request = ShareInternalUtility.newPostOpenGraphActionRequest(
-                null,
-                action,
-                null);
-        assertNotNull(request);
-    }
-
     @Test
     public void testSetHttpMethodToNilGivesDefault() {
         GraphRequest request = new GraphRequest();
diff --git a/facebook/junitTests/src/test/java/com/facebook/login/LoginClientTest.java b/facebook/junitTests/src/test/java/com/facebook/login/LoginClientTest.java
index f333fbeb2..61076cbb8 100644
--- a/facebook/junitTests/src/test/java/com/facebook/login/LoginClientTest.java
+++ b/facebook/junitTests/src/test/java/com/facebook/login/LoginClientTest.java
@@ -113,7 +113,7 @@ public void testRequestParceling() {
 
         LoginClient.Request unparceledRequest = TestUtils.parcelAndUnparcel(request);
 
-        assertEquals(LoginBehavior.SSO_WITH_FALLBACK, unparceledRequest.getLoginBehavior());
+        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK, unparceledRequest.getLoginBehavior());
         assertEquals(new HashSet<String>(PERMISSIONS), unparceledRequest.getPermissions());
         assertEquals(DefaultAudience.FRIENDS, unparceledRequest.getDefaultAudience());
         assertEquals("1234", unparceledRequest.getApplicationId());
@@ -124,7 +124,7 @@ public void testRequestParceling() {
     @Test
     public void testResultParceling() {
         LoginClient.Request request = new LoginClient.Request(
-                LoginBehavior.SUPPRESS_SSO,
+                LoginBehavior.WEB_ONLY,
                 null,
                 DefaultAudience.EVERYONE,
                 null,
@@ -150,7 +150,7 @@ public void testResultParceling() {
         LoginClient.Result unparceledResult = TestUtils.parcelAndUnparcel(result);
         LoginClient.Request unparceledRequest = unparceledResult.request;
 
-        assertEquals(LoginBehavior.SUPPRESS_SSO, unparceledRequest.getLoginBehavior());
+        assertEquals(LoginBehavior.WEB_ONLY, unparceledRequest.getLoginBehavior());
         assertEquals(new HashSet<String>(), unparceledRequest.getPermissions());
         assertEquals(DefaultAudience.EVERYONE, unparceledRequest.getDefaultAudience());
         assertEquals(null, unparceledRequest.getApplicationId());
@@ -166,7 +166,7 @@ public void testResultParceling() {
 
     protected LoginClient.Request createRequest(String previousAccessTokenString) {
         return new LoginClient.Request(
-                LoginBehavior.SSO_WITH_FALLBACK,
+                LoginBehavior.NATIVE_WITH_FALLBACK,
                 new HashSet<String>(PERMISSIONS),
                 DefaultAudience.FRIENDS,
                 "1234",
diff --git a/facebook/junitTests/src/test/java/com/facebook/login/LoginHandlerTestCase.java b/facebook/junitTests/src/test/java/com/facebook/login/LoginHandlerTestCase.java
index cd256a96a..30fe97fa2 100644
--- a/facebook/junitTests/src/test/java/com/facebook/login/LoginHandlerTestCase.java
+++ b/facebook/junitTests/src/test/java/com/facebook/login/LoginHandlerTestCase.java
@@ -20,7 +20,6 @@
 
 package com.facebook.login;
 
-import android.app.Activity;
 import android.support.v4.app.FragmentActivity;
 
 import com.facebook.FacebookPowerMockTestCase;
@@ -61,7 +60,7 @@ public void before() throws Exception {
     protected LoginClient.Request createRequest(String previousAccessTokenString) {
 
         return new LoginClient.Request(
-                LoginBehavior.SSO_WITH_FALLBACK,
+                LoginBehavior.NATIVE_WITH_FALLBACK,
                 new HashSet<String>(PERMISSIONS),
                 DefaultAudience.FRIENDS,
                 "1234",
diff --git a/facebook/junitTests/src/test/java/com/facebook/login/LoginManagerTest.java b/facebook/junitTests/src/test/java/com/facebook/login/LoginManagerTest.java
index eadbb97e1..a3797ee7b 100644
--- a/facebook/junitTests/src/test/java/com/facebook/login/LoginManagerTest.java
+++ b/facebook/junitTests/src/test/java/com/facebook/login/LoginManagerTest.java
@@ -124,14 +124,14 @@ public void testGetInstance() {
     @Test
     public void testLoginBehaviorDefaultsToSsoWithFallback() {
         LoginManager loginManager = new LoginManager();
-        assertEquals(LoginBehavior.SSO_WITH_FALLBACK, loginManager.getLoginBehavior());
+        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK, loginManager.getLoginBehavior());
     }
 
     @Test
     public void testCanChangeLoginBehavior() {
         LoginManager loginManager = new LoginManager();
-        loginManager.setLoginBehavior(LoginBehavior.SSO_ONLY);
-        assertEquals(LoginBehavior.SSO_ONLY, loginManager.getLoginBehavior());
+        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
+        assertEquals(LoginBehavior.NATIVE_ONLY, loginManager.getLoginBehavior());
     }
 
     @Test
@@ -231,7 +231,7 @@ public void testLogInWithReadDoesNotThrowWithReadPermissions() {
     public void testLogInWithReadListCreatesPendingRequestWithCorrectValues() {
         LoginManager loginManager = new LoginManager();
         // Change some defaults so we can verify the pending request picks them up.
-        loginManager.setLoginBehavior(LoginBehavior.SSO_ONLY);
+        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
         loginManager.setDefaultAudience(DefaultAudience.EVERYONE);
         loginManager.logInWithReadPermissions(mockActivity,
             Arrays.asList("public_profile", "user_friends"));
@@ -262,7 +262,7 @@ public void implTestLogInCreatesPendingRequestWithCorrectValues(
         assertNotNull(request);
 
         assertEquals(MOCK_APP_ID, request.getApplicationId());
-        assertEquals(LoginBehavior.SSO_ONLY, request.getLoginBehavior());
+        assertEquals(LoginBehavior.NATIVE_ONLY, request.getLoginBehavior());
         assertEquals(DefaultAudience.EVERYONE, request.getDefaultAudience());
 
         Set<String> permissions = request.getPermissions();
@@ -285,7 +285,7 @@ public void testLogInWithReadAndActivityStartsFacebookActivityWithCorrectRequest
 
         ComponentName componentName = intent.getComponent();
         assertEquals(FacebookActivity.class.getName(), componentName.getClassName());
-        assertEquals(LoginBehavior.SSO_WITH_FALLBACK.name(), intent.getAction());
+        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK.name(), intent.getAction());
     }
 
     @Test
@@ -301,7 +301,7 @@ public void testLogInWithReadAndFragmentStartsFacebookActivityWithCorrectRequest
 
         ComponentName componentName = intent.getComponent();
         assertEquals(FacebookActivity.class.getName(), componentName.getClassName());
-        assertEquals(LoginBehavior.SSO_WITH_FALLBACK.name(), intent.getAction());
+        assertEquals(LoginBehavior.NATIVE_WITH_FALLBACK.name(), intent.getAction());
     }
 
     @Test
@@ -315,7 +315,7 @@ public void testLogInWitPublishDoesNotThrowWithPublishPermissions() {
     public void testLogInWithPublishListCreatesPendingRequestWithCorrectValues() {
         LoginManager loginManager = new LoginManager();
         // Change some defaults so we can verify the pending request picks them up.
-        loginManager.setLoginBehavior(LoginBehavior.SSO_ONLY);
+        loginManager.setLoginBehavior(LoginBehavior.NATIVE_ONLY);
         loginManager.setDefaultAudience(DefaultAudience.EVERYONE);
         loginManager.logInWithPublishPermissions(mockActivity,
             Arrays.asList("publish_actions", "publish_stream"));
diff --git a/facebook/junitTests/src/test/java/com/facebook/login/LoginResultTest.java b/facebook/junitTests/src/test/java/com/facebook/login/LoginResultTest.java
index e3e1e3866..38d6bf73a 100644
--- a/facebook/junitTests/src/test/java/com/facebook/login/LoginResultTest.java
+++ b/facebook/junitTests/src/test/java/com/facebook/login/LoginResultTest.java
@@ -100,7 +100,7 @@ private AccessToken createAccessToken(Set<String> permissions,
 
     private LoginClient.Request createRequest(Set<String> permissions, boolean isRerequest) {
         LoginClient.Request request = new LoginClient.Request(
-                LoginBehavior.SSO_WITH_FALLBACK,
+                LoginBehavior.NATIVE_WITH_FALLBACK,
                 permissions,
                 DefaultAudience.EVERYONE,
                 "123",
diff --git a/facebook/src/com/facebook/FacebookSdk.java b/facebook/src/com/facebook/FacebookSdk.java
index b338f99e2..b6d597013 100644
--- a/facebook/src/com/facebook/FacebookSdk.java
+++ b/facebook/src/com/facebook/FacebookSdk.java
@@ -135,6 +135,24 @@ public Thread newThread(Runnable runnable) {
     public static synchronized void sdkInitialize(
             Context applicationContext,
             int callbackRequestCodeOffset) {
+        sdkInitialize(applicationContext, callbackRequestCodeOffset, null);
+    }
+
+    /**
+     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
+     * undetermined if this function is not called. It should be called as early as possible.
+     * @param applicationContext The application context
+     * @param callbackRequestCodeOffset The request code offset that Facebook activities will be
+     *                                  called with. Please do not use the range between the
+     *                                  value you set and another 100 entries after it in your
+     *                                  other requests.
+     * @param callback A callback called when initialize finishes. This will be called even if the
+     *                 sdk is already initialized.
+     */
+    public static synchronized void sdkInitialize(
+            Context applicationContext,
+            int callbackRequestCodeOffset,
+            final InitializeCallback callback) {
         if (sdkInitialized && callbackRequestCodeOffset != FacebookSdk.callbackRequestCodeOffset) {
             throw new FacebookException(CALLBACK_OFFSET_CHANGED_AFTER_INIT);
         }
@@ -145,15 +163,30 @@ public static synchronized void sdkInitialize(
         sdkInitialize(applicationContext);
     }
 
-
     /**
      * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
      * undetermined if this function is not called. It should be called as early as possible.
      * @param applicationContext The application context
      */
     public static synchronized void sdkInitialize(Context applicationContext) {
-        if (sdkInitialized == true) {
-          return;
+        FacebookSdk.sdkInitialize(applicationContext, null);
+    }
+
+    /**
+     * This function initializes the Facebook SDK, the behavior of Facebook SDK functions are
+     * undetermined if this function is not called. It should be called as early as possible.
+     * @param applicationContext The application context
+     * @param callback A callback called when initialize finishes. This will be called even if the
+     *                 sdk is already initialized.
+     */
+    public static synchronized void sdkInitialize(
+            Context applicationContext,
+            final InitializeCallback callback) {
+        if (sdkInitialized) {
+            if (callback != null) {
+                callback.onInitialized();
+            }
+            return;
         }
 
         Validate.notNull(applicationContext, "applicationContext");
@@ -188,6 +221,10 @@ public Void call() throws Exception {
                             // issue, retry
                             Profile.fetchProfileForCurrentAccessToken();
                         }
+
+                        if (callback != null) {
+                            callback.onInitialized();
+                        }
                         return null;
                     }
                 });
@@ -755,4 +792,14 @@ public static boolean isFacebookRequestCode(int requestCode) {
         return requestCode >= callbackRequestCodeOffset
                 && requestCode < callbackRequestCodeOffset + MAX_REQUEST_CODE_RANGE;
     }
+
+    /**
+     * Callback passed to the sdkInitialize function.
+     */
+    public interface InitializeCallback {
+        /**
+         * Called when the sdk has been initialized.
+         */
+        void onInitialized();
+    }
 }
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 385f1ea69..877152dac 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.3.0";
+    public static final String BUILD = "4.4.0";
 }
diff --git a/facebook/src/com/facebook/GraphRequest.java b/facebook/src/com/facebook/GraphRequest.java
index b8e426f4b..12401e30e 100644
--- a/facebook/src/com/facebook/GraphRequest.java
+++ b/facebook/src/com/facebook/GraphRequest.java
@@ -82,6 +82,7 @@
     private static final String VIDEOS_SUFFIX = "/videos";
     private static final String ME = "me";
     private static final String MY_FRIENDS = "me/friends";
+    private static final String MY_PHOTOS = "me/photos";
     private static final String SEARCH = "search";
     private static final String USER_AGENT_BASE = "FBAndroidSDK";
     private static final String USER_AGENT_HEADER = "User-Agent";
@@ -115,6 +116,8 @@
     private static final String DEBUG_MESSAGE_KEY = "message";
     private static final String DEBUG_MESSAGE_TYPE_KEY = "type";
     private static final String DEBUG_MESSAGE_LINK_KEY = "link";
+    private static final String PICTURE_PARAM = "picture";
+    private static final String CAPTION_PARAM = "caption";
 
     private static final String MIME_BOUNDARY = "3i2ndDfv2rTHiSisAbouNdArYfORhtTPEefj3q2f";
 
@@ -423,6 +426,120 @@ public void onCompleted(GraphResponse response) {
     }
 
 
+    /**
+     * Creates a new Request configured to upload a photo to the specified graph path.
+     *
+     * @param accessToken the access token to use, or null
+     * @param graphPath   the graph path to use, defaults to me/photos
+     * @param image       the bitmap image to upload
+     * @param caption     the user generated caption for the photo, can be null
+     * @param params      the parameters, can be null
+     * @param callback    a callback that will be called when the request is completed to handle
+     *                    success or error conditions, can be null
+     * @return a Request that is ready to execute
+     */
+    public static GraphRequest newUploadPhotoRequest(
+            AccessToken accessToken,
+            String graphPath,
+            Bitmap image,
+            String caption,
+            Bundle params,
+            Callback callback) {
+        graphPath = getDefaultPhotoPathIfNull(graphPath);
+        Bundle parameters = new Bundle();
+        if (params != null) {
+            parameters.putAll(params);
+        }
+        parameters.putParcelable(PICTURE_PARAM, image);
+        if (caption != null && !caption.isEmpty()) {
+            parameters.putString(CAPTION_PARAM, caption);
+        }
+
+        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to upload a photo to the specified graph path. The
+     * photo will be read from the specified file.
+     *
+     * @param accessToken the access token to use, or null
+     * @param graphPath   the graph path to use, defaults to me/photos
+     * @param file        the file containing the photo to upload
+     * @param caption     the user generated caption for the photo, can be null
+     * @param params      the parameters, can be null
+     * @param callback    a callback that will be called when the request is completed to handle
+     *                    success or error conditions, can be null
+     * @return a Request that is ready to execute
+     * @throws java.io.FileNotFoundException if the file doesn't exist
+     */
+    public static GraphRequest newUploadPhotoRequest(
+            AccessToken accessToken,
+            String graphPath,
+            File file,
+            String caption,
+            Bundle params,
+            Callback callback
+    ) throws FileNotFoundException {
+        graphPath = getDefaultPhotoPathIfNull(graphPath);
+        ParcelFileDescriptor descriptor =
+                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
+        Bundle parameters = new Bundle();
+        if (params != null) {
+            parameters.putAll(params);
+        }
+        parameters.putParcelable(PICTURE_PARAM, descriptor);
+        if (caption != null && !caption.isEmpty()) {
+            parameters.putString(CAPTION_PARAM, caption);
+        }
+
+        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
+    }
+
+    /**
+     * Creates a new Request configured to upload a photo to the specified graph path. The
+     * photo will be read from the specified Uri.
+     *
+     * @param accessToken the access token to use, or null
+     * @param graphPath   the graph path to use, defaults to me/photos
+     * @param photoUri    the file:// or content:// Uri to the photo on device
+     * @param caption     the user generated caption for the photo, can be null
+     * @param params      the parameters, can be null
+     * @param callback    a callback that will be called when the request is completed to handle
+     *                    success or error conditions, can be null
+     * @return a Request that is ready to execute
+     * @throws FileNotFoundException if the Uri does not exist
+     */
+    public static GraphRequest newUploadPhotoRequest(
+            AccessToken accessToken,
+            String graphPath,
+            Uri photoUri,
+            String caption,
+            Bundle params,
+            Callback callback)
+            throws FileNotFoundException {
+        graphPath = getDefaultPhotoPathIfNull(graphPath);
+        if (Utility.isFileUri(photoUri)) {
+            return newUploadPhotoRequest(
+                    accessToken,
+                    graphPath,
+                    new File(photoUri.getPath()),
+                    caption,
+                    params,
+                    callback);
+        } else if (!Utility.isContentUri(photoUri)) {
+            throw new FacebookException("The photo Uri must be either a file:// or content:// Uri");
+        }
+
+        Bundle parameters = new Bundle();
+        if (params != null) {
+            parameters.putAll(params);
+        }
+        parameters.putParcelable(PICTURE_PARAM, photoUri);
+
+        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
+    }
+
+
     /**
      * Creates a new Request configured to retrieve an App User ID for the app's Facebook user.
      * Callers will send this ID back to their own servers, collect up a set to create a Facebook
@@ -1261,6 +1378,10 @@ public void run() {
         }
     }
 
+    private static String getDefaultPhotoPathIfNull(String graphPath) {
+        return graphPath == null ? MY_PHOTOS : graphPath;
+    }
+
     private static HttpURLConnection createConnection(URL url) throws IOException {
         HttpURLConnection connection;
         connection = (HttpURLConnection) url.openConnection();
diff --git a/facebook/src/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
index d8e3b7023..0360dfe9f 100644
--- a/facebook/src/com/facebook/internal/AttributionIdentifiers.java
+++ b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
@@ -24,6 +24,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.ServiceConnection;
+import android.content.pm.PackageManager;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Binder;
@@ -32,6 +33,7 @@
 import android.os.Looper;
 import android.os.Parcel;
 import android.os.RemoteException;
+import android.support.annotation.Nullable;
 import android.util.Log;
 
 import com.facebook.FacebookException;
@@ -63,6 +65,7 @@
 
     private String attributionId;
     private String androidAdvertiserId;
+    private String androidInstallerPackage;
     private boolean limitTracking;
     private long fetchTime;
 
@@ -179,6 +182,10 @@ public static AttributionIdentifiers getAttributionIdentifiers(Context context)
                     ATTRIBUTION_ID_CONTENT_PROVIDER_WAKIZASHI, 0) != null) {
                 providerUri = Uri.parse("content://" + ATTRIBUTION_ID_CONTENT_PROVIDER_WAKIZASHI);
             }
+            String installerPackageName = getInstallerPackageName(context);
+            if (installerPackageName != null) {
+                identifiers.androidInstallerPackage = installerPackageName;
+            }
             if (providerUri == null) {
                 return identifiers;
             }
@@ -222,10 +229,23 @@ public String getAndroidAdvertiserId() {
         return androidAdvertiserId;
     }
 
+    public String getAndroidInstallerPackage() {
+        return androidInstallerPackage;
+    }
+
     public boolean isTrackingLimited() {
         return limitTracking;
     }
 
+    @Nullable
+    private static String getInstallerPackageName(Context context) {
+        PackageManager packageManager = context.getPackageManager();
+        if (packageManager != null) {
+            return packageManager.getInstallerPackageName(context.getPackageName());
+        }
+        return null;
+    }
+
     private static final class GoogleAdServiceConnection implements ServiceConnection {
         private AtomicBoolean consumed = new AtomicBoolean(false);
         private final BlockingQueue<IBinder> queue = new LinkedBlockingDeque<>();
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index ea69f6172..98b1cd71f 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -73,12 +73,13 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    public static final String GRAPH_API_VERSION = "v2.3";
+    public static final String GRAPH_API_VERSION = "v2.4";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
     public static final Collection<String> errorsUserCanceled =
             Utility.unmodifiableCollection("access_denied", "OAuthAccessDeniedException");
+    public static final String errorConnectionFailure = "CONNECTION_FAILURE";
 
     public static final String getDialogAuthority() {
         return String.format(DIALOG_AUTHORITY_FORMAT, FacebookSdk.getFacebookDomain());
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 3cdc3197f..0bcab822a 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -991,6 +991,11 @@ public static void setAppEventAttributionParameters(
             params.put("advertiser_tracking_enabled", !attributionIdentifiers.isTrackingLimited());
         }
 
+        if (attributionIdentifiers != null &&
+                attributionIdentifiers.getAndroidInstallerPackage() != null) {
+            params.put("installer_package", attributionIdentifiers.getAndroidInstallerPackage());
+        }
+
         params.put("anon_id", anonymousAppDeviceGUID);
         params.put("application_tracking_enabled", !limitEventUsage);
     }
diff --git a/facebook/src/com/facebook/login/KatanaProxyLoginMethodHandler.java b/facebook/src/com/facebook/login/KatanaProxyLoginMethodHandler.java
index 31d185ca0..2385e9f40 100644
--- a/facebook/src/com/facebook/login/KatanaProxyLoginMethodHandler.java
+++ b/facebook/src/com/facebook/login/KatanaProxyLoginMethodHandler.java
@@ -74,7 +74,7 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
             // This happens if the user presses 'Back'.
             outcome = LoginClient.Result.createCancelResult(request, "Operation canceled");
         } else if (resultCode == Activity.RESULT_CANCELED) {
-            outcome = LoginClient.Result.createCancelResult(request, data.getStringExtra("error"));
+            outcome = handleResultCancel(request, data);
         } else if (resultCode != Activity.RESULT_OK) {
             outcome = LoginClient.Result.createErrorResult(request,
                     "Unexpected resultCode from authorization.", null);
@@ -92,15 +92,9 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
 
     private LoginClient.Result handleResultOk(LoginClient.Request request, Intent data) {
         Bundle extras = data.getExtras();
-        String error = extras.getString("error");
-        if (error == null) {
-            error = extras.getString("error_type");
-        }
+        String error = getError(extras);
         String errorCode = extras.getString("error_code");
-        String errorMessage = extras.getString("error_message");
-        if (errorMessage == null) {
-            errorMessage = extras.getString("error_description");
-        }
+        String errorMessage = getErrorMessage(extras);
 
         String e2e = extras.getString(NativeProtocol.FACEBOOK_PROXY_AUTH_E2E_KEY);
         if (!Utility.isNullOrEmpty(e2e)) {
@@ -125,6 +119,39 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         }
     }
 
+    private LoginClient.Result handleResultCancel(LoginClient.Request request, Intent data) {
+        Bundle extras = data.getExtras();
+        String error = getError(extras);
+        String errorCode = extras.getString("error_code");
+
+        // If the device has lost network, the result will be a cancel with a connection failure
+        // error. We want our consumers to be notified of this as an error so they can tell their
+        // users to "reconnect and try again".
+        if (ServerProtocol.errorConnectionFailure.equals(errorCode)) {
+            String errorMessage = getErrorMessage(extras);
+
+            return LoginClient.Result.createErrorResult(request, error, errorMessage, errorCode);
+        }
+
+        return LoginClient.Result.createCancelResult(request, error);
+    }
+
+    private String getError(Bundle extras) {
+        String error = extras.getString("error");
+        if (error == null) {
+            error = extras.getString("error_type");
+        }
+        return error;
+    }
+
+    private String getErrorMessage(Bundle extras) {
+        String errorMessage = extras.getString("error_message");
+        if (errorMessage == null) {
+            errorMessage = extras.getString("error_description");
+        }
+        return errorMessage;
+    }
+
     protected boolean tryIntent(Intent intent, int requestCode) {
         if (intent == null) {
             return false;
diff --git a/facebook/src/com/facebook/login/LoginBehavior.java b/facebook/src/com/facebook/login/LoginBehavior.java
index e2d4fd6fb..aa42c4ec0 100644
--- a/facebook/src/com/facebook/login/LoginBehavior.java
+++ b/facebook/src/com/facebook/login/LoginBehavior.java
@@ -25,21 +25,21 @@
  */
 public enum LoginBehavior {
     /**
-     * Specifies that login should attempt Single Sign On (SSO), and if that
-     * does not work fall back to dialog auth. This is the default behavior.
+     * Specifies that login should attempt login in using the Facebook App, and if that
+     * does not work fall back to web dialog auth. This is the default behavior.
      */
-    SSO_WITH_FALLBACK(true, true),
+    NATIVE_WITH_FALLBACK(true, true),
 
     /**
-     * Specifies that login should only attempt SSO. If SSO fails, then the
-     * login fails.
+     * Specifies that login should only attempt to login using the Facebook App.
+     * If the Facebook App cannot be used then the login fails.
      */
-    SSO_ONLY(true, false),
+    NATIVE_ONLY(true, false),
 
     /**
-     * Specifies that SSO should not be attempted, and to only use dialog auth.
+     * Specifies that only the web dialog auth should be used.
      */
-    SUPPRESS_SSO(false, true);
+    WEB_ONLY(false, true);
 
     private final boolean allowsKatanaAuth;
     private final boolean allowsWebViewAuth;
diff --git a/facebook/src/com/facebook/login/LoginManager.java b/facebook/src/com/facebook/login/LoginManager.java
index a97b8a769..42b265e45 100644
--- a/facebook/src/com/facebook/login/LoginManager.java
+++ b/facebook/src/com/facebook/login/LoginManager.java
@@ -59,7 +59,7 @@
 
     private static volatile LoginManager instance;
 
-    private LoginBehavior loginBehavior = LoginBehavior.SSO_WITH_FALLBACK;
+    private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
     private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
     private LoginClient.Request pendingLoginRequest;
     private HashMap<String, String> pendingLoggingExtras;
diff --git a/facebook/src/com/facebook/login/widget/LoginButton.java b/facebook/src/com/facebook/login/widget/LoginButton.java
index 2b94f6de1..21e878729 100644
--- a/facebook/src/com/facebook/login/widget/LoginButton.java
+++ b/facebook/src/com/facebook/login/widget/LoginButton.java
@@ -124,7 +124,7 @@ public int getValue() {
         private DefaultAudience defaultAudience = DefaultAudience.FRIENDS;
         private List<String> permissions = Collections.<String>emptyList();
         private LoginAuthorizationType authorizationType = null;
-        private LoginBehavior loginBehavior = LoginBehavior.SSO_WITH_FALLBACK;
+        private LoginBehavior loginBehavior = LoginBehavior.NATIVE_WITH_FALLBACK;
 
         public void setDefaultAudience(DefaultAudience defaultAudience) {
             this.defaultAudience = defaultAudience;
@@ -345,7 +345,7 @@ public void clearPermissions() {
 
     /**
      * Sets the login behavior during authorization. If null is specified, the default
-     * ({@link com.facebook.login.LoginBehavior LoginBehavior.SSO_WITH_FALLBACK}
+     * ({@link com.facebook.login.LoginBehavior LoginBehavior.NATIVE_WITH_FALLBACK}
      * will be used.
      *
      * @param loginBehavior The {@link com.facebook.login.LoginBehavior LoginBehavior} that
@@ -358,7 +358,7 @@ public void setLoginBehavior(LoginBehavior loginBehavior) {
 
     /**
      * Gets the login behavior during authorization. If null is returned, the default
-     * ({@link com.facebook.login.LoginBehavior LoginBehavior.SSO_WITH_FALLBACK}
+     * ({@link com.facebook.login.LoginBehavior LoginBehavior.NATIVE_WITH_FALLBACK}
      * will be used.
      *
      * @return loginBehavior The {@link com.facebook.login.LoginBehavior LoginBehavior} that
diff --git a/facebook/src/com/facebook/share/ShareApi.java b/facebook/src/com/facebook/share/ShareApi.java
index 444933cbd..695c328e8 100644
--- a/facebook/src/com/facebook/share/ShareApi.java
+++ b/facebook/src/com/facebook/share/ShareApi.java
@@ -357,17 +357,17 @@ public void onCompleted(GraphResponse response) {
                     caption = this.getMessage();
                 }
                 if (bitmap != null) {
-                    requests.add(ShareInternalUtility.newUploadPhotoRequest(
-                            getGraphPath(PHOTOS_EDGE),
+                    requests.add(GraphRequest.newUploadPhotoRequest(
                             accessToken,
+                            getGraphPath(PHOTOS_EDGE),
                             bitmap,
                             caption,
                             photo.getParameters(),
                             requestCallback));
                 } else if (photoUri != null) {
-                    requests.add(ShareInternalUtility.newUploadPhotoRequest(
-                            getGraphPath(PHOTOS_EDGE),
+                    requests.add(GraphRequest.newUploadPhotoRequest(
                             accessToken,
+                            getGraphPath(PHOTOS_EDGE),
                             photoUri,
                             caption,
                             photo.getParameters(),
diff --git a/facebook/src/com/facebook/share/internal/ShareConstants.java b/facebook/src/com/facebook/share/internal/ShareConstants.java
index 1d23422a0..97bec8007 100644
--- a/facebook/src/com/facebook/share/internal/ShareConstants.java
+++ b/facebook/src/com/facebook/share/internal/ShareConstants.java
@@ -117,4 +117,13 @@
 
     public static final int MAXIMUM_PHOTO_COUNT = 6;
     static final String MY_VIDEOS = "me/videos";
+
+    // Feed Dialog
+    public static final String FEED_TO_PARAM = "to";
+    public static final String FEED_LINK_PARAM = "link";
+    public static final String FEED_PICTURE_PARAM = "picture";
+    public static final String FEED_SOURCE_PARAM = "source";
+    public static final String FEED_NAME_PARAM = "name";
+    public static final String FEED_CAPTION_PARAM = "caption";
+    public static final String FEED_DESCRIPTION_PARAM = "description";
 }
diff --git a/facebook/src/com/facebook/share/internal/ShareFeedContent.java b/facebook/src/com/facebook/share/internal/ShareFeedContent.java
new file mode 100644
index 000000000..2ae7bf88f
--- /dev/null
+++ b/facebook/src/com/facebook/share/internal/ShareFeedContent.java
@@ -0,0 +1,198 @@
+/**
+ * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
+ *
+ * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,
+ * copy, modify, and distribute this software in source code or binary form for use
+ * in connection with the web services and APIs provided by Facebook.
+ *
+ * As with any software that integrates with the Facebook platform, your use of
+ * this software is subject to the Facebook Developer Principles and Policies
+ * [http://developers.facebook.com/policy/]. This copyright notice shall be
+ * included in all copies or substantial portions of the software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+ * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+ * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+ * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ */
+
+package com.facebook.share.internal;
+
+import android.os.Parcel;
+import android.os.Parcelable;
+
+import com.facebook.share.model.ShareContent;
+
+import java.util.HashMap;
+import java.util.Map;
+
+// This class is used specifically for backwards support in unity for various feed parameters
+// Currently this content is only supported if you set the mode to Feed when sharing.
+public class ShareFeedContent
+        extends ShareContent<ShareFeedContent, ShareFeedContent.Builder> {
+    private final String toId;
+    private final String link;
+    private final String linkName;
+    private final String linkCaption;
+    private final String linkDescription;
+    private final String picture;
+    private final String mediaSource;
+
+    private ShareFeedContent(final Builder builder) {
+        super(builder);
+        this.toId = builder.toId;
+        this.link = builder.link;
+        this.linkName = builder.linkName;
+        this.linkCaption = builder.linkCaption;
+        this.linkDescription = builder.linkDescription;
+        this.picture = builder.picture;
+        this.mediaSource = builder.mediaSource;
+    }
+
+    ShareFeedContent(final Parcel in) {
+        super(in);
+        this.toId = in.readString();
+        this.link = in.readString();
+        this.linkName = in.readString();
+        this.linkCaption = in.readString();
+        this.linkDescription = in.readString();
+        this.picture = in.readString();
+        this.mediaSource = in.readString();
+    }
+
+    public String getToId() {
+        return toId;
+    }
+
+    public String getLink() {
+        return link;
+    }
+
+    public String getLinkName() {
+        return linkName;
+    }
+
+    public String getLinkCaption() {
+        return linkCaption;
+    }
+
+    public String getLinkDescription() {
+        return linkDescription;
+    }
+
+    public String getPicture() {
+        return picture;
+    }
+
+    public String getMediaSource() {
+        return mediaSource;
+    }
+
+    public int describeContents() {
+        return 0;
+    }
+
+    public void writeToParcel(final Parcel out, final int flags) {
+        super.writeToParcel(out, flags);
+        out.writeString(this.toId);
+        out.writeString(this.link);
+        out.writeString(this.linkName);
+        out.writeString(this.linkCaption);
+        out.writeString(this.linkDescription);
+        out.writeString(this.picture);
+        out.writeString(this.mediaSource);
+    }
+
+    @SuppressWarnings("unused")
+    public static final Parcelable.Creator<ShareFeedContent> CREATOR =
+            new Parcelable.Creator<ShareFeedContent>() {
+                public ShareFeedContent createFromParcel(final Parcel in) {
+                    return new ShareFeedContent(in);
+                }
+
+                public ShareFeedContent[] newArray(final int size) {
+                    return new ShareFeedContent[size];
+                }
+            };
+
+    /**
+     * Builder for the {@link ShareFeedContent} interface.
+     */
+    public static final class Builder
+            extends ShareContent.Builder<ShareFeedContent, Builder> {
+        private String toId;
+        private String link;
+        private String linkName;
+        private String linkCaption;
+        private String linkDescription;
+        private String picture;
+        private String mediaSource;
+
+        public ShareFeedContent.Builder setToId(String toId) {
+            this.toId = toId;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setLink(String link) {
+            this.link = link;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setLinkName(String linkName) {
+            this.linkName = linkName;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setLinkCaption(String linkCaption) {
+            this.linkCaption = linkCaption;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setLinkDescription(String linkDescription) {
+            this.linkDescription = linkDescription;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setPicture(String picture) {
+            this.picture = picture;
+            return this;
+        }
+
+        public ShareFeedContent.Builder setMediaSource(String mediaSource) {
+            this.mediaSource = mediaSource;
+            return this;
+        }
+
+        @Override
+        public ShareFeedContent build() {
+            return new ShareFeedContent(this);
+        }
+
+        @Override
+        public Builder readFrom(final ShareFeedContent model) {
+            if (model == null) {
+                return this;
+            }
+            return super
+                    .readFrom(model)
+                    .setToId(model.getToId())
+                    .setLink(model.getLink())
+                    .setLinkName(model.getLinkName())
+                    .setLinkCaption(model.getLinkCaption())
+                    .setLinkDescription(model.getLinkDescription())
+                    .setPicture(model.getPicture())
+                    .setMediaSource(model.getMediaSource())
+                    ;
+        }
+
+        @Override
+        public Builder readFrom(final Parcel parcel) {
+            return this.readFrom(
+                    (ShareFeedContent) parcel.readParcelable(
+                            ShareFeedContent.class.getClassLoader()));
+        }
+
+    }
+}
diff --git a/facebook/src/com/facebook/share/internal/ShareInternalUtility.java b/facebook/src/com/facebook/share/internal/ShareInternalUtility.java
index 4ff05532e..e80748629 100644
--- a/facebook/src/com/facebook/share/internal/ShareInternalUtility.java
+++ b/facebook/src/com/facebook/share/internal/ShareInternalUtility.java
@@ -27,7 +27,6 @@
 import android.os.Bundle;
 import android.os.ParcelFileDescriptor;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
 import android.util.Pair;
 
 import com.facebook.AccessToken;
@@ -41,7 +40,6 @@
 import com.facebook.GraphRequest;
 import com.facebook.GraphRequest.Callback;
 import com.facebook.GraphResponse;
-import com.facebook.internal.GraphUtil;
 import com.facebook.HttpMethod;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
@@ -76,16 +74,10 @@
  * unsupported, and they may be modified or removed without warning at any time.
  */
 public final class ShareInternalUtility {
-    private static final String OBJECT_PARAM = "object";
     public static final String MY_PHOTOS = "me/photos";
-    private static final String MY_FEED = "me/feed";
     private static final String MY_STAGING_RESOURCES = "me/staging_resources";
-    private static final String MY_OBJECTS_FORMAT = "me/objects/%s";
-    private static final String MY_ACTION_FORMAT = "me/%s";
 
     // Parameter names/values
-    private static final String PICTURE_PARAM = "picture";
-    private static final String CAPTION_PARAM = "caption";
     private static final String STAGING_PARAM = "file";
 
     public static void invokeCallbackWithException(
@@ -122,19 +114,6 @@ public static void invokeCallbackWithResults(
         }
     }
 
-    /**
-     * Determines whether the native dialog completed normally (without error or exception).
-     *
-     * @param result the bundle passed back to onActivityResult
-     * @return true if the native dialog completed normally
-     */
-    public static boolean getNativeDialogDidComplete(Bundle result) {
-        if (result.containsKey(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETE_KEY)) {
-            return result.getBoolean(NativeProtocol.RESULT_ARGS_DIALOG_COMPLETE_KEY);
-        }
-        return result.getBoolean(NativeProtocol.EXTRA_DIALOG_COMPLETE_KEY, false);
-    }
-
     /**
      * Returns the gesture with which the user completed the native dialog. This is only returned
      * if the user has previously authorized the calling app with basic permissions.
@@ -496,11 +475,6 @@ public static JSONObject removeNamespacesFromOGJsonObject(
         return new Pair<>(namespace, fieldName);
     }
 
-    ;
-
-    private ShareInternalUtility() {
-    }
-
     private static NativeAppCallAttachmentStore.Attachment getAttachment(
             UUID callId,
             SharePhoto photo) {
@@ -580,338 +554,6 @@ private static void logShareResult(String shareOutcome, String errorMessage) {
         logger.logSdkEvent(AnalyticsEvents.EVENT_SHARE_RESULT, null, parameters);
     }
 
-    /**
-     * Creates a new Request configured to create a user owned Open Graph object.
-     *
-     * @param accessToken     the accessToken to use, or null
-     * @param openGraphObject the Open Graph object to create; must not be null, and must have a
-     *                        non-empty type and title
-     * @param callback        a callback that will be called when the request is completed to handle
-     *                        success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newPostOpenGraphObjectRequest(
-            AccessToken accessToken,
-            JSONObject openGraphObject,
-            Callback callback) {
-        if (openGraphObject == null) {
-            throw new FacebookException("openGraphObject cannot be null");
-        }
-        if (Utility.isNullOrEmpty(openGraphObject.optString("type"))) {
-            throw new FacebookException("openGraphObject must have non-null 'type' property");
-        }
-        if (Utility.isNullOrEmpty(openGraphObject.optString("title"))) {
-            throw new FacebookException("openGraphObject must have non-null 'title' property");
-        }
-
-        String path = String.format(MY_OBJECTS_FORMAT, openGraphObject.optString("type"));
-        Bundle bundle = new Bundle();
-        bundle.putString(OBJECT_PARAM, openGraphObject.toString());
-        return new GraphRequest(accessToken, path, bundle, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to create a user owned Open Graph object.
-     *
-     * @param accessToken      the access token to use, or null
-     * @param type             the fully-specified Open Graph object type (e.g.,
-     *                         my_app_namespace:my_object_name); must not be null
-     * @param title            the title of the Open Graph object; must not be null
-     * @param imageUrl         the link to an image to be associated with the Open Graph object; may
-     *                         be null
-     * @param url              the url to be associated with the Open Graph object; may be null
-     * @param description      the description to be associated with the object; may be null
-     * @param objectProperties any additional type-specific properties for the Open Graph object;
-     *                         may be null
-     * @param callback         a callback that will be called when the request is completed to
-     *                         handle success or error conditions; may be null
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newPostOpenGraphObjectRequest(
-            AccessToken accessToken,
-            String type,
-            String title,
-            String imageUrl,
-            String url,
-            String description,
-            JSONObject objectProperties,
-            Callback callback) {
-        JSONObject openGraphObject = GraphUtil.createOpenGraphObjectForPost(
-                type, title, imageUrl, url, description, objectProperties, null);
-        return newPostOpenGraphObjectRequest(accessToken, openGraphObject, callback);
-    }
-
-    /**
-     * Creates a new Request configured to publish an Open Graph action.
-     *
-     * @param accessToken     the access token to use, or null
-     * @param openGraphAction the Open Graph action to create; must not be null, and must have a
-     *                        non-empty 'type'
-     * @param callback        a callback that will be called when the request is completed to handle
-     *                        success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newPostOpenGraphActionRequest(
-            AccessToken accessToken,
-            JSONObject openGraphAction,
-            Callback callback) {
-        if (openGraphAction == null) {
-            throw new FacebookException("openGraphAction cannot be null");
-        }
-        String type = openGraphAction.optString("type");
-        if (Utility.isNullOrEmpty(type)) {
-            throw new FacebookException("openGraphAction must have non-null 'type' property");
-        }
-
-        String path = String.format(MY_ACTION_FORMAT, type);
-        return GraphRequest.newPostRequest(accessToken, path, openGraphAction, callback);
-    }
-
-    /**
-     * Creates a new Request configured to update a user owned Open Graph object.
-     *
-     * @param accessToken     the access token to use, or null
-     * @param openGraphObject the Open Graph object to update, which must have a valid 'id'
-     *                        property
-     * @param callback        a callback that will be called when the request is completed to handle
-     *                        success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUpdateOpenGraphObjectRequest(
-            AccessToken accessToken,
-            JSONObject openGraphObject,
-            Callback callback) {
-        if (openGraphObject == null) {
-            throw new FacebookException("openGraphObject cannot be null");
-        }
-
-        String path = openGraphObject.optString("id");
-        if (path == null) {
-            throw new FacebookException("openGraphObject must have an id");
-        }
-
-        Bundle bundle = new Bundle();
-        bundle.putString(OBJECT_PARAM, openGraphObject.toString());
-        return new GraphRequest(accessToken, path, bundle, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to update a user owned Open Graph object.
-     *
-     * @param accessToken      the access token to use, or null
-     * @param id               the id of the Open Graph object
-     * @param title            the title of the Open Graph object
-     * @param imageUrl         the link to an image to be associated with the Open Graph object
-     * @param url              the url to be associated with the Open Graph object
-     * @param description      the description to be associated with the object
-     * @param objectProperties any additional type-specific properties for the Open Graph object
-     * @param callback         a callback that will be called when the request is completed to
-     *                         handle success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUpdateOpenGraphObjectRequest(
-            AccessToken accessToken,
-            String id,
-            String title,
-            String imageUrl,
-            String url,
-            String description,
-            JSONObject objectProperties,
-            Callback callback) {
-        JSONObject openGraphObject = GraphUtil.createOpenGraphObjectForPost(
-                null, title, imageUrl, url, description, objectProperties, id);
-        return newUpdateOpenGraphObjectRequest(accessToken, openGraphObject, callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path.
-     *
-     * @param graphPath   the graph path to use
-     * @param accessToken the access token to use, or null
-     * @param image       the image to upload
-     * @param caption     the user generated caption for the photo.
-     * @param params      the parameters
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            String graphPath,
-            AccessToken accessToken,
-            Bitmap image,
-            String caption,
-            Bundle params,
-            Callback callback) {
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, image);
-        if (caption != null && !caption.isEmpty()) {
-            parameters.putString(CAPTION_PARAM, caption);
-        }
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path. The
-     * photo will be read from the specified file.
-     *
-     * @param graphPath   the graph path to use
-     * @param accessToken the access token to use, or null
-     * @param file        the file containing the photo to upload
-     * @param caption     the user generated caption for the photo.
-     * @param params      the parameters
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws java.io.FileNotFoundException
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            String graphPath,
-            AccessToken accessToken,
-            File file,
-            String caption,
-            Bundle params,
-            Callback callback
-    ) throws FileNotFoundException {
-        ParcelFileDescriptor descriptor =
-                ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, descriptor);
-        if (caption != null && !caption.isEmpty()) {
-            parameters.putString(CAPTION_PARAM, caption);
-        }
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to upload a photo to the specified graph path. The
-     * photo will be read from the specified Uri.
-     *
-     * @param graphPath   the graph path to use
-     * @param accessToken the access token to use, or null
-     * @param photoUri    the file:// or content:// Uri to the photo on device.
-     * @param caption     the user generated caption for the photo.
-     * @param params      the parameters
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     * @throws FileNotFoundException
-     */
-    public static GraphRequest newUploadPhotoRequest(
-            String graphPath,
-            AccessToken accessToken,
-            Uri photoUri,
-            String caption,
-            Bundle params,
-            Callback callback)
-            throws FileNotFoundException {
-        if (Utility.isFileUri(photoUri)) {
-            return newUploadPhotoRequest(
-                    graphPath,
-                    accessToken,
-                    new File(photoUri.getPath()),
-                    caption,
-                    params,
-                    callback);
-        } else if (!Utility.isContentUri(photoUri)) {
-            throw new FacebookException("The photo Uri must be either a file:// or content:// Uri");
-        }
-
-        Bundle parameters = new Bundle();
-        if (params != null) {
-            parameters.putAll(params);
-        }
-        parameters.putParcelable(PICTURE_PARAM, photoUri);
-
-        return new GraphRequest(accessToken, graphPath, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to post a status update to a user's feed.
-     *
-     * @param accessToken the access token to use, or null
-     * @param message     the text of the status update
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newStatusUpdateRequest(
-            AccessToken accessToken,
-            String message,
-            Callback callback) {
-        return newStatusUpdateRequest(accessToken, message, (String) null, null, callback);
-    }
-
-    /**
-     * Creates a new Request configured to post a status update to a user's feed.
-     *
-     * @param accessToken the access token to use, or null
-     * @param message     the text of the status update
-     * @param placeId     an optional place id to associate with the post
-     * @param tagIds      an optional list of user ids to tag in the post
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    private static GraphRequest newStatusUpdateRequest(
-            AccessToken accessToken,
-            String message,
-            String placeId,
-            List<String> tagIds,
-            Callback callback) {
-
-        Bundle parameters = new Bundle();
-        parameters.putString("message", message);
-
-        if (placeId != null) {
-            parameters.putString("place", placeId);
-        }
-
-        if (tagIds != null && tagIds.size() > 0) {
-            String tags = TextUtils.join(",", tagIds);
-            parameters.putString("tags", tags);
-        }
-
-        return new GraphRequest(accessToken, MY_FEED, parameters, HttpMethod.POST, callback);
-    }
-
-    /**
-     * Creates a new Request configured to post a status update to a user's feed.
-     *
-     * @param accessToken the access token to use, or null
-     * @param message     the text of the status update
-     * @param place       an optional place to associate with the post
-     * @param tags        an optional list of users to tag in the post
-     * @param callback    a callback that will be called when the request is completed to handle
-     *                    success or error conditions
-     * @return a Request that is ready to execute
-     */
-    public static GraphRequest newStatusUpdateRequest(
-            AccessToken accessToken,
-            String message,
-            JSONObject place,
-            List<JSONObject> tags,
-            Callback callback) {
-
-        List<String> tagIds = null;
-        if (tags != null) {
-            tagIds = new ArrayList<String>(tags.size());
-            for (JSONObject tag : tags) {
-                tagIds.add(tag.optString("id"));
-            }
-        }
-        String placeId = place == null ? null : place.optString("id");
-        return newStatusUpdateRequest(accessToken, message, placeId, tagIds, callback);
-    }
-
-
     /**
      * Creates a new Request configured to upload an image to create a staging resource. Staging
      * resources allow you to post binary data such as images, in preparation for a post of an Open
diff --git a/facebook/src/com/facebook/share/internal/WebDialogParameters.java b/facebook/src/com/facebook/share/internal/WebDialogParameters.java
index 6ae172b29..757e7cd5b 100644
--- a/facebook/src/com/facebook/share/internal/WebDialogParameters.java
+++ b/facebook/src/com/facebook/share/internal/WebDialogParameters.java
@@ -21,18 +21,25 @@
 package com.facebook.share.internal;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 
 import com.facebook.FacebookException;
 import com.facebook.internal.Utility;
+import com.facebook.internal.WebDialog;
 import com.facebook.share.model.AppGroupCreationContent;
 import com.facebook.share.model.GameRequestContent;
 import com.facebook.share.model.ShareLinkContent;
 import com.facebook.share.model.ShareOpenGraphContent;
 
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.Collection;
+import java.util.HashMap;
 import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * com.facebook.share.internal is solely for the use of other packages within the
@@ -164,4 +171,45 @@ public static Bundle createForFeed(ShareLinkContent shareLinkContent) {
 
         return webParams;
     }
+
+    public static Bundle createForFeed(ShareFeedContent shareFeedContent) {
+        Bundle webParams = new Bundle();
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_TO_PARAM,
+                shareFeedContent.getToId());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_LINK_PARAM,
+                shareFeedContent.getLink());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_PICTURE_PARAM,
+                shareFeedContent.getPicture());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_SOURCE_PARAM,
+                shareFeedContent.getMediaSource());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_NAME_PARAM,
+                shareFeedContent.getLinkName());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_CAPTION_PARAM,
+                shareFeedContent.getLinkCaption());
+
+        Utility.putNonEmptyString(
+                webParams,
+                ShareConstants.FEED_DESCRIPTION_PARAM,
+                shareFeedContent.getLinkDescription());
+
+        return webParams;
+    }
 }
diff --git a/facebook/src/com/facebook/share/model/ShareContent.java b/facebook/src/com/facebook/share/model/ShareContent.java
index 3d661e167..20ce2f803 100644
--- a/facebook/src/com/facebook/share/model/ShareContent.java
+++ b/facebook/src/com/facebook/share/model/ShareContent.java
@@ -47,7 +47,7 @@ protected ShareContent(final Builder builder) {
         this.ref = builder.ref;
     }
 
-    ShareContent(final Parcel in) {
+    protected ShareContent(final Parcel in) {
         this.contentUrl = in.readParcelable(Uri.class.getClassLoader());
         this.peopleIds = readUnmodifiableStringList(in);
         this.placeId = in.readString();
diff --git a/facebook/src/com/facebook/share/widget/ShareDialog.java b/facebook/src/com/facebook/share/widget/ShareDialog.java
index 733a14d67..db78b220c 100644
--- a/facebook/src/com/facebook/share/widget/ShareDialog.java
+++ b/facebook/src/com/facebook/share/widget/ShareDialog.java
@@ -22,12 +22,10 @@
 
 import android.app.Activity;
 import android.content.Context;
-import android.net.Uri;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 
 import com.facebook.FacebookCallback;
-import com.facebook.FacebookException;
 import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.AnalyticsEvents;
 import com.facebook.internal.AppCall;
@@ -35,7 +33,7 @@
 import com.facebook.internal.DialogFeature;
 import com.facebook.internal.DialogPresenter;
 import com.facebook.internal.FacebookDialogBase;
-import com.facebook.internal.Utility;
+import com.facebook.share.internal.ShareFeedContent;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.LegacyNativeDialogParameters;
 import com.facebook.share.internal.NativeDialogParameters;
@@ -328,22 +326,28 @@ public Object getMode() {
 
         @Override
         public boolean canShow(final ShareContent content) {
-            return (content instanceof ShareLinkContent);
+            return (content instanceof ShareLinkContent)
+                    || (content instanceof ShareFeedContent);
         }
 
         @Override
         public AppCall createAppCall(final ShareContent content) {
             logDialogShare(getActivityContext(), content, Mode.FEED);
-
-            final ShareLinkContent linkContent = (ShareLinkContent)content;
-            final AppCall appCall = createBaseAppCall();
-
-            ShareContentValidation.validateForWebShare(linkContent);
+            AppCall appCall = createBaseAppCall();
+            Bundle params;
+            if (content instanceof ShareLinkContent) {
+                ShareLinkContent linkContent = (ShareLinkContent)content;
+                ShareContentValidation.validateForWebShare(linkContent);
+                params = WebDialogParameters.createForFeed(linkContent);
+            } else {
+                ShareFeedContent feedContent = (ShareFeedContent)content;
+                params = WebDialogParameters.createForFeed(feedContent);
+            }
 
             DialogPresenter.setupAppCallForWebDialog(
                     appCall,
                     FEED_DIALOG,
-                    WebDialogParameters.createForFeed(linkContent));
+                    params);
 
             return appCall;
         }
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index b6f2b2130..da6bc7eaa 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -21,10 +21,12 @@
 package com.facebook;
 
 import android.graphics.Bitmap;
+import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
 
+import com.facebook.internal.BundleJSONConverter;
 import com.facebook.share.internal.ShareInternalUtility;
 
 import org.json.JSONArray;
@@ -102,15 +104,23 @@ public void testExecuteBatchWithNullRequestThrows() throws Exception {
     @LargeTest
     public void testExecuteSingleGet() {
         final AccessToken accessToken = getAccessTokenForSharedUser();
-        GraphRequest request = new GraphRequest(accessToken, "TourEiffel", null, null,
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+        GraphRequest request = new GraphRequest(
+                accessToken,
+                "TourEiffel",
+                parameters,
+                null,
                 new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(GraphResponse response) {
-                assertNotNull(response);
-                JSONObject graphPlace = response.getJSONObject();
-                assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
-            }
-        });
+                    @Override
+                    protected void performAsserts(GraphResponse response) {
+                        assertNotNull(response);
+                        JSONObject graphPlace = response.getJSONObject();
+                        assertEquals(
+                                "Paris",
+                                graphPlace.optJSONObject("location").optString("city"));
+                    }
+                });
 
         TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(request);
 
@@ -124,18 +134,28 @@ protected void performAsserts(GraphResponse response) {
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() {
         final AccessToken accessToken = getAccessTokenForSharedUser();
-        GraphRequest request = new GraphRequest(accessToken, "TourEiffel", null, null,
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+        GraphRequest request = new GraphRequest(
+                accessToken,
+                "TourEiffel",
+                parameters,
+                null,
                 new ExpectSuccessCallback() {
-            @Override
-            protected void performAsserts(GraphResponse response) {
-                assertNotNull(response);
-                JSONObject graphPlace = response.getJSONObject();
-                assertEquals("Paris", graphPlace.optJSONObject("location").optString("city"));
-            }
-        });
+                    @Override
+                    protected void performAsserts(GraphResponse response) {
+                        assertNotNull(response);
+                        JSONObject graphPlace = response.getJSONObject();
+                        assertEquals(
+                                "Paris",
+                                graphPlace.optJSONObject("location").optString("city"));
+                    }
+                });
         HttpURLConnection connection = GraphRequest.toHttpConnection(request);
 
-        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(connection, Arrays.asList(new GraphRequest[] { request }));
+        TestGraphRequestAsyncTask task = new TestGraphRequestAsyncTask(
+                connection,
+                Arrays.asList(new GraphRequest[] { request }));
 
         task.executeOnBlockerThread();
 
@@ -256,17 +276,20 @@ public void testBatchUploadPhoto() {
         Bitmap bitmap1 = createTestBitmap(image1Size);
         Bitmap bitmap2 = createTestBitmap(image2Size);
 
-        GraphRequest uploadRequest1 = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "width");
+
+        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
                 accessToken,
+                ShareInternalUtility.MY_PHOTOS,
                 bitmap1,
                 null,
                 null,
                 null);
         uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
                 accessToken,
+                ShareInternalUtility.MY_PHOTOS,
                 bitmap2,
                 null,
                 null,
@@ -275,7 +298,7 @@ public void testBatchUploadPhoto() {
         GraphRequest getRequest1 = new GraphRequest(
                 accessToken,
                 "{result=uploadRequest1:$.id}",
-                null,
+                parameters,
                 null,
                 new ExpectSuccessCallback() {
                     @Override
@@ -289,7 +312,7 @@ protected void performAsserts(GraphResponse response) {
         GraphRequest getRequest2 = new GraphRequest(
                 accessToken,
                 "{result=uploadRequest2:$.id}",
-                null,
+                parameters,
                 null,
                 new ExpectSuccessCallback() {
                     @Override
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index 25c0f645e..362199031 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -21,6 +21,7 @@
 package com.facebook;
 
 import android.graphics.Bitmap;
+import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
 
 import com.facebook.share.internal.ShareInternalUtility;
@@ -70,10 +71,21 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
 
         final AccessToken accessToken = getAccessTokenForSharedUser();
 
-        GraphRequest request1 = new GraphRequest(accessToken, "TourEiffel");
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+
+        GraphRequest request1 = new GraphRequest(
+                accessToken,
+                "TourEiffel",
+                parameters,
+                null);
         request1.setBatchEntryName("eiffel");
         request1.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest request2 = new GraphRequest(accessToken, "{result=eiffel:$.id}");
+        GraphRequest request2 = new GraphRequest(
+                accessToken,
+                "{result=eiffel:$.id}",
+                parameters,
+                null);
 
         List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -93,8 +105,19 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
     public void testExecuteBatchedGets() throws IOException {
         final AccessToken accessToken = getAccessTokenForSharedUser();
 
-        GraphRequest request1 = new GraphRequest(accessToken, "TourEiffel");
-        GraphRequest request2 = new GraphRequest(accessToken, "SpaceNeedle");
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+
+        GraphRequest request1 = new GraphRequest(
+                accessToken,
+                "TourEiffel",
+                parameters,
+                null);
+        GraphRequest request2 = new GraphRequest(
+                accessToken,
+                "SpaceNeedle",
+                parameters,
+                null);
 
         List<GraphResponse> responses = GraphRequest.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -132,17 +155,36 @@ public void testFacebookErrorResponsesCreateErrors() {
     public void testBatchPostStatusUpdate() {
         final AccessToken accessToken = getAccessTokenForSharedUser();
 
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "message");
+
         JSONObject statusUpdate1 = createStatusUpdate("1");
         JSONObject statusUpdate2 = createStatusUpdate("2");
 
-        GraphRequest postRequest1 = GraphRequest.newPostRequest(accessToken, "me/feed", statusUpdate1, null);
+        GraphRequest postRequest1 = GraphRequest.newPostRequest(
+                accessToken,
+                "me/feed",
+                statusUpdate1,
+                null);
         postRequest1.setBatchEntryName("postRequest1");
         postRequest1.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest postRequest2 = GraphRequest.newPostRequest(accessToken, "me/feed", statusUpdate2, null);
+        GraphRequest postRequest2 = GraphRequest.newPostRequest(
+                accessToken,
+                "me/feed",
+                statusUpdate2,
+                null);
         postRequest2.setBatchEntryName("postRequest2");
         postRequest2.setBatchEntryOmitResultOnSuccess(false);
-        GraphRequest getRequest1 = new GraphRequest(accessToken, "{result=postRequest1:$.id}");
-        GraphRequest getRequest2 = new GraphRequest(accessToken, "{result=postRequest2:$.id}");
+        GraphRequest getRequest1 = new GraphRequest(
+                accessToken,
+                "{result=postRequest1:$.id}",
+                parameters,
+                null);
+        GraphRequest getRequest2 = new GraphRequest(
+                accessToken,
+                "{result=postRequest2:$.id}",
+                parameters,
+                null);
 
         List<GraphResponse> responses = GraphRequest.executeBatchAndWait(postRequest1, postRequest2, getRequest1, getRequest2);
         assertNotNull(responses);
@@ -262,24 +304,35 @@ public void testBatchUploadPhoto() {
         Bitmap bitmap1 = createTestBitmap(image1Size);
         Bitmap bitmap2 = createTestBitmap(image2Size);
 
-        GraphRequest uploadRequest1 = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "width");
+
+        GraphRequest uploadRequest1 = GraphRequest.newUploadPhotoRequest(
                 accessToken,
+                ShareInternalUtility.MY_PHOTOS,
                 bitmap1,
                 null,
                 null,
                 null);
         uploadRequest1.setBatchEntryName("uploadRequest1");
-        GraphRequest uploadRequest2 = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest uploadRequest2 = GraphRequest.newUploadPhotoRequest(
                 accessToken,
+                ShareInternalUtility.MY_PHOTOS,
                 bitmap2,
                 null,
                 null,
                 null);
         uploadRequest2.setBatchEntryName("uploadRequest2");
-        GraphRequest getRequest1 = new GraphRequest(accessToken, "{result=uploadRequest1:$.id}");
-        GraphRequest getRequest2 = new GraphRequest(accessToken, "{result=uploadRequest2:$.id}");
+        GraphRequest getRequest1 = new GraphRequest(
+                accessToken,
+                "{result=uploadRequest1:$.id}",
+                parameters,
+                null);
+        GraphRequest getRequest2 = new GraphRequest(
+                accessToken,
+                "{result=uploadRequest2:$.id}",
+                parameters,
+                null);
 
         List<GraphResponse> responses = GraphRequest.executeBatchAndWait(
                 uploadRequest1,
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
index cbb6d5566..bd0d83e61 100644
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
@@ -248,7 +248,10 @@ protected Bundle getNativeLinkingExtras(String token, String userId) {
     }
 
     protected JSONObject getAndAssert(AccessToken accessToken, String id) {
-        GraphRequest request = new GraphRequest(accessToken, id);
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "message");
+
+        GraphRequest request = new GraphRequest(accessToken, id, parameters, null);
         GraphResponse response = request.executeAndWait();
         assertNotNull(response);
 
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index c3e0c7307..32a15f0c8 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -26,9 +26,13 @@
 import android.os.Bundle;
 import android.test.suitebuilder.annotation.LargeTest;
 
+import com.facebook.internal.GraphUtil;
 import com.facebook.share.ShareApi;
 import com.facebook.share.Sharer;
 import com.facebook.share.internal.ShareInternalUtility;
+import com.facebook.share.model.ShareOpenGraphAction;
+import com.facebook.share.model.ShareOpenGraphContent;
+import com.facebook.share.model.ShareOpenGraphObject;
 import com.facebook.share.model.SharePhoto;
 import com.facebook.share.model.SharePhotoContent;
 import com.facebook.share.model.ShareVideo;
@@ -46,10 +50,12 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 
 public class RequestTests extends FacebookTestCase {
-    private static final String TEST_OG_TYPE = "facebooksdktests:test";
+    private static final String TEST_OG_OBJECT_TYPE = "facebooksdktests:test";
+    private static final String TEST_OG_ACTION_TYPE = "facebooksdktests:run";
     private static final long REQUEST_TIMEOUT_MILLIS = 10000;
 
     protected String[] getDefaultPermissions()
@@ -76,7 +82,14 @@ public void tearDown() throws Exception {
 
     @LargeTest
     public void testExecuteSingleGet() {
-        GraphRequest request = new GraphRequest(AccessToken.getCurrentAccessToken(), "TourEiffel");
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+
+        GraphRequest request = new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                "TourEiffel",
+                parameters,
+                null);
         GraphResponse response = request.executeAndWait();
 
         assertTrue(response != null);
@@ -92,9 +105,9 @@ public void testExecuteSingleGet() {
     public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
         Bitmap image = createTestBitmap(128);
 
-        GraphRequest request = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest request = GraphRequest.newUploadPhotoRequest(
                 AccessToken.getCurrentAccessToken(),
+                ShareInternalUtility.MY_PHOTOS,
                 image,
                 "Test photo messsage",
                 null,
@@ -108,13 +121,24 @@ public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
 
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        GraphRequest request = new GraphRequest(AccessToken.getCurrentAccessToken(), "TourEiffel");
+        Bundle parameters = new Bundle();
+        parameters.putString("fields", "location");
+
+        GraphRequest request = new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                "TourEiffel",
+                parameters,
+                null);
         HttpURLConnection connection = GraphRequest.toHttpConnection(request);
 
         assertEquals("gzip", connection.getRequestProperty("Content-Encoding"));
-        assertEquals("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
+        assertEquals(
+                "application/x-www-form-urlencoded",
+                connection.getRequestProperty("Content-Type"));
 
-        List<GraphResponse> responses = GraphRequest.executeConnectionAndWait(connection, Arrays.asList(new GraphRequest[]{request}));
+        List<GraphResponse> responses = GraphRequest.executeConnectionAndWait(
+                connection,
+                Arrays.asList(new GraphRequest[]{request}));
         assertNotNull(responses);
         assertEquals(1, responses.size());
 
@@ -279,6 +303,121 @@ public void testExecutePlaceRequestWithLocationAndSearchText() {
         assertNotNull(response.getRawResponse());
     }
 
+    @LargeTest
+    public void testShareOpenGraphContent() throws Exception {
+        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
+                .putString("og:title", "a title")
+                .putString("og:type", TEST_OG_OBJECT_TYPE)
+                .putString("og:description", "a description")
+                .build();
+
+        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
+                .setActionType(TEST_OG_ACTION_TYPE)
+                .putObject("test", ogObject)
+                .build();
+
+        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
+                .setAction(ogAction)
+                .setPreviewPropertyName("test")
+                .build();
+
+        final ShareApi shareApi = new ShareApi(content);
+        final AtomicReference<String> actionId = new AtomicReference<>(null);
+
+        getActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                shareApi.share(new FacebookCallback<Sharer.Result>() {
+                    @Override
+                    public void onSuccess(Sharer.Result result) {
+                        actionId.set(result.getPostId());
+                        notifyShareFinished();
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        notifyShareFinished();
+                    }
+
+                    @Override
+                    public void onError(FacebookException error) {
+                        notifyShareFinished();
+                    }
+
+                    private void notifyShareFinished() {
+                        synchronized (shareApi) {
+                            shareApi.notifyAll();
+                        }
+                    }
+                });
+            }
+        });
+
+        synchronized (shareApi) {
+            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
+        }
+        assertNotNull(actionId.get());
+    }
+
+    @LargeTest
+    public void testShareOpenGraphContentWithBadType() throws Exception {
+        ShareOpenGraphObject ogObject = new ShareOpenGraphObject.Builder()
+                .putString("og:title", "a title")
+                .putString("og:type", TEST_OG_OBJECT_TYPE)
+                .putString("og:description", "a description")
+                .build();
+
+        ShareOpenGraphAction ogAction = new ShareOpenGraphAction.Builder()
+                .setActionType(TEST_OG_ACTION_TYPE+"bad")
+                .putObject("test", ogObject)
+                .build();
+
+        ShareOpenGraphContent content = new ShareOpenGraphContent.Builder()
+                .setAction(ogAction)
+                .setPreviewPropertyName("test")
+                .build();
+
+        final ShareApi shareApi = new ShareApi(content);
+        final AtomicReference<String> actionId = new AtomicReference<>(null);
+        final AtomicBoolean errorOccurred = new AtomicBoolean(false);
+
+        getActivity().runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+                shareApi.share(new FacebookCallback<Sharer.Result>() {
+                    @Override
+                    public void onSuccess(Sharer.Result result) {
+                        actionId.set(result.getPostId());
+                        notifyShareFinished();
+                    }
+
+                    @Override
+                    public void onCancel() {
+                        notifyShareFinished();
+                    }
+
+                    @Override
+                    public void onError(FacebookException error) {
+                        errorOccurred.set(true);
+                        notifyShareFinished();
+                    }
+
+                    private void notifyShareFinished() {
+                        synchronized (shareApi) {
+                            shareApi.notifyAll();
+                        }
+                    }
+                });
+            }
+        });
+
+        synchronized (shareApi) {
+            shareApi.wait(REQUEST_TIMEOUT_MILLIS);
+        }
+        assertNull(actionId.get());
+        assertTrue(errorOccurred.get());
+    }
+
     private String executePostOpenGraphRequest() {
         JSONObject data = new JSONObject();
         try {
@@ -287,15 +426,24 @@ private String executePostOpenGraphRequest() {
             throw new RuntimeException(e);
         }
 
-        GraphRequest request = ShareInternalUtility.newPostOpenGraphObjectRequest(
-                AccessToken.getCurrentAccessToken(),
-                TEST_OG_TYPE,
+        JSONObject ogObject = GraphUtil.createOpenGraphObjectForPost(
+                TEST_OG_OBJECT_TYPE,
                 "a title",
                 "http://www.facebook.com",
                 "http://www.facebook.com/zzzzzzzzzzzzzzzzzzz",
                 "a description",
                 data,
                 null);
+
+        Bundle bundle = new Bundle();
+        bundle.putString("object", ogObject.toString());
+        GraphRequest request = new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                "/me/objects/" + TEST_OG_OBJECT_TYPE,
+                bundle,
+                HttpMethod.POST,
+                null);
+
         GraphResponse response = request.executeAndWait();
         assertNotNull(response);
 
@@ -307,7 +455,7 @@ private String executePostOpenGraphRequest() {
 
         assertNotNull(response.getRawResponse());
 
-        return (String) graphResult.optString("id");
+        return graphResult.optString("id");
     }
 
     @LargeTest
@@ -342,15 +490,22 @@ public void testUpdateOpenGraphObjectRequest() throws JSONException {
         JSONObject data = new JSONObject();
         data.put("a_property", "goodbye");
 
-        GraphRequest request = ShareInternalUtility.newUpdateOpenGraphObjectRequest(
-                AccessToken.getCurrentAccessToken(),
-                id,
+        JSONObject ogObject = GraphUtil.createOpenGraphObjectForPost(
+                TEST_OG_OBJECT_TYPE,
                 "another title",
                 null,
                 "http://www.facebook.com/aaaaaaaaaaaaaaaaa",
                 "another description",
                 data,
                 null);
+        Bundle bundle = new Bundle();
+        bundle.putString("object", ogObject.toString());
+        GraphRequest request = new GraphRequest(
+                AccessToken.getCurrentAccessToken(),
+                id,
+                bundle,
+                HttpMethod.POST,
+                null);
         GraphResponse response = request.executeAndWait();
         assertNotNull(response);
 
@@ -358,6 +513,7 @@ public void testUpdateOpenGraphObjectRequest() throws JSONException {
 
         JSONObject result = response.getJSONObject();
         assertNotNull(result);
+        assertEquals("another title", result.optString("title"));
         assertNotNull(response.getRawResponse());
     }
 
@@ -365,9 +521,9 @@ public void testUpdateOpenGraphObjectRequest() throws JSONException {
     public void testExecuteUploadPhoto() {
         Bitmap image = createTestBitmap(128);
 
-        GraphRequest request = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest request = GraphRequest.newUploadPhotoRequest(
                 AccessToken.getCurrentAccessToken(),
+                ShareInternalUtility.MY_PHOTOS,
                 image,
                 "Test photo message",
                 null,
@@ -398,9 +554,9 @@ public void testExecuteUploadPhotoViaFile() throws IOException {
             outStream.close();
             outStream = null;
 
-            GraphRequest request = ShareInternalUtility.newUploadPhotoRequest(
-                    ShareInternalUtility.MY_PHOTOS,
+            GraphRequest request = GraphRequest.newUploadPhotoRequest(
                     AccessToken.getCurrentAccessToken(),
+                    ShareInternalUtility.MY_PHOTOS,
                     outputFile,
                     "Test photo message",
                     null,
@@ -446,7 +602,6 @@ public void testExecuteUploadPhotoToAlbum() throws InterruptedException, JSONExc
         SharePhoto photo = new SharePhoto.Builder()
                 .setBitmap(image)
                 .setUserGenerated(true)
-                .setParameter("caption", "Caption")
                 .build();
         SharePhotoContent content = new SharePhotoContent.Builder().addPhoto(photo).build();
         final ShareApi shareApi = new ShareApi(content);
@@ -513,7 +668,6 @@ public void testUploadVideoFile() throws IOException, URISyntaxException {
             tempFile = createTempFileFromAsset("DarkScreen.mov");
             ShareVideo video = new ShareVideo.Builder()
                     .setLocalUrl(Uri.fromFile(tempFile))
-                    .setParameter("caption", "Caption")
                     .build();
             ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
             final ShareApi shareApi = new ShareApi(content);
@@ -576,7 +730,6 @@ public void testUploadVideoFileToUserId() throws IOException, URISyntaxException
             tempFile = createTempFileFromAsset("DarkScreen.mov");
             ShareVideo video = new ShareVideo.Builder()
                     .setLocalUrl(Uri.fromFile(tempFile))
-                    .setParameter("caption", "Caption")
                     .build();
             ShareVideoContent content = new ShareVideoContent.Builder().setVideo(video).build();
             final ShareApi shareApi = new ShareApi(content);
@@ -657,9 +810,9 @@ public void onCompleted(GraphResponse response) {
     public void testOnProgressCallbackIsCalled() {
         Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
 
-        GraphRequest request = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest request = GraphRequest.newUploadPhotoRequest(
                 null,
+                ShareInternalUtility.MY_PHOTOS,
                 image,
                 null,
                 null,
@@ -687,9 +840,9 @@ public void onProgress(long current, long max) {
     public void testLastOnProgressCallbackIsCalledOnce() {
         Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
 
-        GraphRequest request = ShareInternalUtility.newUploadPhotoRequest(
-                ShareInternalUtility.MY_PHOTOS,
+        GraphRequest request = GraphRequest.newUploadPhotoRequest(
                 null,
+                ShareInternalUtility.MY_PHOTOS,
                 image,
                 null,
                 null,
diff --git a/facebook/tests/src/com/facebook/login/LoginClientTests.java b/facebook/tests/src/com/facebook/login/LoginClientTests.java
index 1b873f7d6..2dba1ba93 100644
--- a/facebook/tests/src/com/facebook/login/LoginClientTests.java
+++ b/facebook/tests/src/com/facebook/login/LoginClientTests.java
@@ -22,23 +22,11 @@
 
 import android.support.v4.app.Fragment;
 import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
 
 import com.facebook.AccessToken;
 import com.facebook.FacebookTestCase;
-import com.facebook.GraphRequest;
-import com.facebook.GraphRequestBatch;
-import com.facebook.GraphRequestBatchBridge;
-import com.facebook.GraphResponse;
-import com.facebook.GraphResponseBridge;
 import com.facebook.TestBlocker;
-import com.facebook.TestUtils;
 
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.*;
 import java.util.*;
 
 public class LoginClientTests extends FacebookTestCase {
@@ -74,7 +62,7 @@ void tryNextHandler() {
 
     LoginClient.Request createRequest() {
         return new LoginClient.Request(
-                LoginBehavior.SSO_WITH_FALLBACK,
+                LoginBehavior.NATIVE_WITH_FALLBACK,
                 PERMISSIONS,
                 DefaultAudience.FRIENDS,
                 "1234",
@@ -115,7 +103,7 @@ void complete(Result result) {
 
     LoginClient.Request createNewPermissionRequest() {
         return new LoginClient.Request(
-                LoginBehavior.SSO_WITH_FALLBACK,
+                LoginBehavior.NATIVE_WITH_FALLBACK,
                 PERMISSIONS,
                 DefaultAudience.FRIENDS,
                 "1234",
diff --git a/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java b/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java
index c273f5cb4..84ebb9292 100644
--- a/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java
+++ b/samples/SwitchUserSample/src/com/example/switchuser/SettingsFragment.java
@@ -227,8 +227,8 @@ public void restore(Context context, int oldSelectedSlot) {
             slots = new Slot[MAX_SLOTS];
             for (int i = 0; i < MAX_SLOTS; i++) {
                 LoginBehavior loginBehavior = (i == 0) ?
-                        LoginBehavior.SSO_WITH_FALLBACK :
-                        LoginBehavior.SUPPRESS_SSO;
+                        LoginBehavior.NATIVE_WITH_FALLBACK :
+                        LoginBehavior.WEB_ONLY;
                 slots[i] = new Slot(i, loginBehavior);
             }
 
@@ -299,7 +299,7 @@ public View getView(final int position, View convertView, ViewGroup parent) {
             }
 
             Slot slot = getItem(position);
-            if (slot.getLoginBehavior() != LoginBehavior.SUPPRESS_SSO) {
+            if (slot.getLoginBehavior() != LoginBehavior.WEB_ONLY) {
                 convertView.setBackgroundColor(Color.argb(50, 255, 255, 255));
             }
 
