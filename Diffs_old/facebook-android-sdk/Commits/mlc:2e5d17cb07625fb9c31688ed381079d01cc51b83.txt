diff --git a/.buckconfig b/.buckconfig
new file mode 100644
index 000000000..cfa58a9e4
--- /dev/null
+++ b/.buckconfig
@@ -0,0 +1,18 @@
+# .buckconfig.local is in .gitignore, so you do not have to worry about checking your
+# personal customizations to Buck into the repo.
+
+[java]
+    # This makes it possible to determine the package of a
+    # Java file from the path alone.
+    src_roots = /facebook/src/, /samples/HelloFacebookSample/src/
+
+    # We target gingerbread. Ensure that libraries target that.
+    source_level = 6
+    target_level = 6
+
+[build]
+    build_dependencies = FIRST_ORDER_ONLY
+
+[alias]
+    sdk = //facebook:android-sdk
+    hello-facebook = //samples/HelloFacebookSample:app
diff --git a/.buckversion b/.buckversion
new file mode 100644
index 000000000..f2e2f6494
--- /dev/null
+++ b/.buckversion
@@ -0,0 +1 @@
+62a21e0436bc4b72db9aa7fc2237d9cdf162b29f
diff --git a/.gitignore b/.gitignore
index e73e92be9..a933a6ed8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,21 +1,52 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Intellij project files
+*.iml
+*.ipr
+*.iws
+.idea/
+
 # Gradle
 .gradle
 build
 
+# Buck
+/buck-cache/
+/buck-out/
+/.buckconfig.local
+/.buckd
+/.nobuckcheck
+/.bucktestselectors
+
+# vim temp files
+*.swp
+
 *~
 *.DS_Store
-*.class
 *java#
 *.settings
-local.properties
 .arc/
-bin/
-gen/
 out/
 facebook/doc/
 facebook/lint.xml
 facebook/tests/lint.xml
 facebook/tests/assets/config.json
-.idea/workspace.xml
-.idea/dictionaries/
-.idea/inspectionProfiles/
+gradle-app.setting
diff --git a/.idea/.name b/.idea/.name
deleted file mode 100644
index 20f69a2ae..000000000
--- a/.idea/.name
+++ /dev/null
@@ -1 +0,0 @@
-android-sdk
\ No newline at end of file
diff --git a/.idea/ant.xml b/.idea/ant.xml
deleted file mode 100644
index f6e673adc..000000000
--- a/.idea/ant.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4" />
-
diff --git a/.idea/codeStyleSettings.xml b/.idea/codeStyleSettings.xml
deleted file mode 100644
index 3bf548318..000000000
--- a/.idea/codeStyleSettings.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectCodeStyleSettingsManager">
-    <option name="PER_PROJECT_SETTINGS">
-      <value>
-        <XML>
-          <option name="XML_LEGACY_SETTINGS_IMPORTED" value="true" />
-        </XML>
-        <codeStyleSettings language="JAVA">
-          <option name="ALIGN_MULTILINE_PARAMETERS" value="false" />
-          <option name="CALL_PARAMETERS_WRAP" value="1" />
-          <option name="METHOD_PARAMETERS_WRAP" value="1" />
-          <option name="METHOD_CALL_CHAIN_WRAP" value="1" />
-        </codeStyleSettings>
-      </value>
-    </option>
-    <option name="USE_PER_PROJECT_SETTINGS" value="true" />
-  </component>
-</project>
-
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
deleted file mode 100644
index 8b9d7c4a4..000000000
--- a/.idea/compiler.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="CompilerConfiguration">
-    <option name="DEFAULT_COMPILER" value="Eclipse" />
-    <excludeFromCompile>
-      <directory url="file://$PROJECT_DIR$/facebook/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/GraphApiSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/examples/Hackbook/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/facebook/TestApp/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/facebook/tests/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/testtest/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/SessionLoginSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/FriendPickerSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/PlacePickerSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/BooleanOGSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/ProfilePictureSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/Scrumptious/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/SwitchUserSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/HelloFacebookSample/gen" includeSubdirectories="true" />
-      <directory url="file://$PROJECT_DIR$/samples/Hackbook/gen" includeSubdirectories="true" />
-    </excludeFromCompile>
-    <resourceExtensions />
-    <wildcardResourcePatterns>
-      <entry name="?*.properties" />
-      <entry name="?*.xml" />
-      <entry name="?*.gif" />
-      <entry name="?*.png" />
-      <entry name="?*.jpeg" />
-      <entry name="?*.jpg" />
-      <entry name="?*.html" />
-      <entry name="?*.dtd" />
-      <entry name="?*.tld" />
-      <entry name="?*.ftl" />
-    </wildcardResourcePatterns>
-    <annotationProcessing>
-      <profile default="true" name="Default" enabled="false">
-        <processorPath useClasspath="true" />
-      </profile>
-    </annotationProcessing>
-  </component>
-</project>
-
diff --git a/.idea/copyright/profiles_settings.xml b/.idea/copyright/profiles_settings.xml
deleted file mode 100644
index 3572571ad..000000000
--- a/.idea/copyright/profiles_settings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<component name="CopyrightManager">
-  <settings default="">
-    <module2copyright />
-  </settings>
-</component>
\ No newline at end of file
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
index e206d70d8..000000000
--- a/.idea/encodings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding" useUTFGuessing="true" native2AsciiForPropertiesFiles="false" />
-</project>
-
diff --git a/.idea/libraries/android_support_v4.xml b/.idea/libraries/android_support_v4.xml
deleted file mode 100644
index 7abf0b359..000000000
--- a/.idea/libraries/android_support_v4.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<component name="libraryTable">
-  <library name="android-support-v4">
-    <CLASSES>
-      <root url="jar://$PROJECT_DIR$/libs/android-support-v4.jar!/" />
-    </CLASSES>
-    <JAVADOC />
-    <SOURCES>
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/eclair" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/froyo" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/gingerbread" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/honeycomb" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/honeycomb_mr2" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/ics" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/ics-mr1" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/java" />
-      <root url="file://$PROJECT_DIR$/../android-sdk-macosx/extras/android/support/v4/src/jellybean" />
-    </SOURCES>
-  </library>
-</component>
\ No newline at end of file
diff --git a/.idea/misc.xml b/.idea/misc.xml
deleted file mode 100644
index 95a5c34d4..000000000
--- a/.idea/misc.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="EntryPointsManager">
-    <entry_points version="2.0" />
-  </component>
-  <component name="JavadocGenerationManager">
-    <option name="OUTPUT_DIRECTORY" value="$USER_HOME$/tmp/javadoc.out" />
-    <option name="OPTION_SCOPE" value="protected" />
-    <option name="OPTION_HIERARCHY" value="true" />
-    <option name="OPTION_NAVIGATOR" value="true" />
-    <option name="OPTION_INDEX" value="true" />
-    <option name="OPTION_SEPARATE_INDEX" value="true" />
-    <option name="OPTION_DOCUMENT_TAG_USE" value="false" />
-    <option name="OPTION_DOCUMENT_TAG_AUTHOR" value="false" />
-    <option name="OPTION_DOCUMENT_TAG_VERSION" value="false" />
-    <option name="OPTION_DOCUMENT_TAG_DEPRECATED" value="true" />
-    <option name="OPTION_DEPRECATED_LIST" value="true" />
-    <option name="OTHER_OPTIONS" />
-    <option name="HEAP_SIZE" />
-    <option name="LOCALE" />
-    <option name="OPEN_IN_BROWSER" value="true" />
-    <option name="OPTION_INCLUDE_LIBS" value="false" />
-  </component>
-  <component name="ProjectResources">
-    <default-html-doctype>http://www.w3.org/1999/xhtml</default-html-doctype>
-  </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_6" assert-keyword="true" jdk-15="true" project-jdk-name="Android 2.2 Platform" project-jdk-type="Android SDK">
-    <output url="file://$PROJECT_DIR$/out" />
-  </component>
-</project>
-
diff --git a/.idea/modules.xml b/.idea/modules.xml
deleted file mode 100644
index 17182c3a1..000000000
--- a/.idea/modules.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="ProjectModuleManager">
-    <modules>
-      <module fileurl="file://$PROJECT_DIR$/samples/FriendPickerSample/FriendPickerSample.iml" filepath="$PROJECT_DIR$/samples/FriendPickerSample/FriendPickerSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/GraphApiSample/GraphApiSample.iml" filepath="$PROJECT_DIR$/samples/GraphApiSample/GraphApiSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/HelloFacebookSample/HelloFacebookSample.iml" filepath="$PROJECT_DIR$/samples/HelloFacebookSample/HelloFacebookSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/PlacePickerSample/PlacePickerSample.iml" filepath="$PROJECT_DIR$/samples/PlacePickerSample/PlacePickerSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/ProfilePictureSample/ProfilePictureSample.iml" filepath="$PROJECT_DIR$/samples/ProfilePictureSample/ProfilePictureSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/RPSSample/RPSSample.iml" filepath="$PROJECT_DIR$/samples/RPSSample/RPSSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/Scrumptious/Scrumptious.iml" filepath="$PROJECT_DIR$/samples/Scrumptious/Scrumptious.iml" />
-      <module fileurl="file://$PROJECT_DIR$/facebook/TestApp/SdkTestApp.iml" filepath="$PROJECT_DIR$/facebook/TestApp/SdkTestApp.iml" />
-      <module fileurl="file://$PROJECT_DIR$/facebook/tests/SdkTests.iml" filepath="$PROJECT_DIR$/facebook/tests/SdkTests.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/SessionLoginSample/SessionLoginSample.iml" filepath="$PROJECT_DIR$/samples/SessionLoginSample/SessionLoginSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/samples/SwitchUserSample/SwitchUserSample.iml" filepath="$PROJECT_DIR$/samples/SwitchUserSample/SwitchUserSample.iml" />
-      <module fileurl="file://$PROJECT_DIR$/facebook/android-sdk.iml" filepath="$PROJECT_DIR$/facebook/android-sdk.iml" />
-    </modules>
-  </component>
-</project>
-
diff --git a/.idea/scopes/scope_settings.xml b/.idea/scopes/scope_settings.xml
deleted file mode 100644
index 922003b84..000000000
--- a/.idea/scopes/scope_settings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<component name="DependencyValidationManager">
-  <state>
-    <option name="SKIP_IMPORT_STATEMENTS" value="false" />
-  </state>
-</component>
\ No newline at end of file
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
index 3b0002030..000000000
--- a/.idea/uiDesigner.xml
+++ /dev/null
@@ -1,125 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Palette2">
-    <group name="Swing">
-      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
-      </item>
-      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
-        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
-        <initial-values>
-          <property name="text" value="Button" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="RadioButton" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="CheckBox" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
-        <initial-values>
-          <property name="text" value="Label" />
-        </initial-values>
-      </item>
-      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-          <preferred-size width="150" height="-1" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-          <preferred-size width="150" height="50" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-          <preferred-size width="200" height="200" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
-      </item>
-      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
-      </item>
-      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-          <preferred-size width="-1" height="20" />
-        </default-constraints>
-      </item>
-      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
-        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
-      </item>
-      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
-        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
-      </item>
-    </group>
-  </component>
-</project>
-
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
deleted file mode 100644
index 9d32e507a..000000000
--- a/.idea/vcs.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="" />
-    <mapping directory="$PROJECT_DIR$" vcs="Git" />
-  </component>
-</project>
-
diff --git a/README.mdown b/README.mdown
index c52e978a9..c9fcc23fb 100644
--- a/README.mdown
+++ b/README.mdown
@@ -6,18 +6,31 @@ This open-source library allows you to integrate Facebook into your Android app.
 Learn more about about the provided samples, documentation, integrating the SDK into your app, accessing source code, and more at https://developers.facebook.com/android
 
 TRY IT OUT
-
+----------
 1. Check-out the tutorials available online at https://developers.facebook.com/docs/getting-started/facebook-sdk-for-android/3.0/
+2. Start coding! Visit https://developers.facebook.com/docs/android/ for tutorials and reference documentation.
 
-2. Start coding! Visit https://developers.facebook.com/android for tutorials and reference documentation.
+FEATURES
+--------
+* Login - https://developers.facebook.com/docs/facebook-login
+* Sharing - https://developers.facebook.com/docs/sharing
+* App Links - https://developers.facebook.com/docs/applinks
+* Graph API - https://developers.facebook.com/docs/android/graph
 
-LICENSE
+GIVE FEEDBACK
+-------------
+Please report bugs or issues to https://developers.facebook.com/bugs/
 
+You can also join the Facebook Developers Group on Facebook (https://www.facebook.com/groups/fbdevelopers/) or ask questions on Stack Overflow (http://facebook.stackoverflow.com)
+
+LICENSE
+-------
 Except as otherwise noted, the Facebook SDK for Android is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html).
 
 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and limitations under the License.
 
 DEVELOPER TERMS
+---------------
 
 - By enabling Facebook integrations, including through this SDK, you can share information with Facebook, including information about people’s use of your app. Facebook will use information received in accordance with our Data Use Policy (https://www.facebook.com/about/privacy/), including to provide you with insights about the effectiveness of your ads and the use of your app.  These integrations also enable us and our partners to serve ads on and off Facebook.
 
diff --git a/build.gradle b/build.gradle
index dbc45df79..1296bf37b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,6 +4,12 @@ buildscript {
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:0.8.+'
+        classpath 'com.android.tools.build:gradle:1.0.0'
+    }
+}
+
+allprojects {
+    repositories {
+        mavenCentral()
     }
 }
diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index 2f9284fb0..1c7e0766a 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -18,5 +18,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook.android">
     <application/>
-    <uses-sdk android:minSdkVersion="8" />
+    <uses-sdk android:minSdkVersion="9" />
 </manifest>
diff --git a/facebook/BUCK b/facebook/BUCK
new file mode 100644
index 000000000..fb805910e
--- /dev/null
+++ b/facebook/BUCK
@@ -0,0 +1,26 @@
+build_config(
+  name = 'config-debug',
+  package = 'com.facebook.android',
+  debug = True,
+)
+
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.facebook.android',
+  deps = [
+  ],
+)
+
+android_library(
+  name = 'android-sdk',
+  srcs = glob(['src/**/*.java']) + [':config-debug'],
+  deps = [
+    ':res',
+    '//libs:android-support-v4',
+    '//libs:bolts',
+  ],
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/facebook/TestApp/SdkTestApp.eml b/facebook/TestApp/SdkTestApp.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/TestApp/SdkTestApp.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/TestApp/SdkTestApp.iml b/facebook/TestApp/SdkTestApp.iml
deleted file mode 100644
index ab93347a7..000000000
--- a/facebook/TestApp/SdkTestApp.iml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="PACK_TEST_CODE" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-  </component>
-</module>
-
diff --git a/facebook/TestApp/build.gradle b/facebook/TestApp/build.gradle
index a2cda0280..88bdbbed3 100644
--- a/facebook/TestApp/build.gradle
+++ b/facebook/TestApp/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.library'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/facebook/TestApp/project.properties b/facebook/TestApp/project.properties
index b0620672e..f5ff80597 100644
--- a/facebook/TestApp/project.properties
+++ b/facebook/TestApp/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 
diff --git a/facebook/TestApp/res/drawable-hdpi/ic_launcher.png b/facebook/TestApp/res/drawable-hdpi/ic_launcher.png
index 8074c4c57..9005e98b5 100644
Binary files a/facebook/TestApp/res/drawable-hdpi/ic_launcher.png and b/facebook/TestApp/res/drawable-hdpi/ic_launcher.png differ
diff --git a/facebook/TestApp/res/drawable-ldpi/ic_launcher.png b/facebook/TestApp/res/drawable-ldpi/ic_launcher.png
index 1095584ec..13fd7e396 100644
Binary files a/facebook/TestApp/res/drawable-ldpi/ic_launcher.png and b/facebook/TestApp/res/drawable-ldpi/ic_launcher.png differ
diff --git a/facebook/TestApp/res/drawable-mdpi/ic_launcher.png b/facebook/TestApp/res/drawable-mdpi/ic_launcher.png
index a07c69fa5..6a65afa2b 100644
Binary files a/facebook/TestApp/res/drawable-mdpi/ic_launcher.png and b/facebook/TestApp/res/drawable-mdpi/ic_launcher.png differ
diff --git a/facebook/android-sdk.eml b/facebook/android-sdk.eml
deleted file mode 100644
index 4104d1ffc..000000000
--- a/facebook/android-sdk.eml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-</component>
diff --git a/facebook/android-sdk.iml b/facebook/android-sdk.iml
deleted file mode 100644
index a735ad502..000000000
--- a/facebook/android-sdk.iml
+++ /dev/null
@@ -1,33 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="LIBRARY_PROJECT" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/res" isTestSource="false" />
-    </content>
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="inheritedJdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/build.gradle b/facebook/build.gradle
index 7b398b76e..f41aaf08d 100644
--- a/facebook/build.gradle
+++ b/facebook/build.gradle
@@ -1,30 +1,27 @@
-apply plugin: 'android-library'
-apply plugin: 'maven'
-
-group = 'com.meetup'
-archivesBaseName = 'facebook-android-sdk'
-version = '3.6.0'
-
-configurations {
-    deployerJars
-}
+apply plugin: 'com.android.library'
 
 repositories {
-    mavenCentral()
+  mavenCentral()
 }
 
+project.group = 'com.facebook.android'
+
 dependencies {
-    compile 'com.android.support:support-v4:13.0.+'
-    deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
+    compile 'com.android.support:support-v4:[21,22)'
+    compile 'com.parse.bolts:bolts-android:1.1.4'
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
@@ -36,10 +33,101 @@ android {
     }
 }
 
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isSnapshot = version.endsWith('-SNAPSHOT')
+def ossrhUsername = hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
+def ossrhPassword = hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
+
+task setVersion {
+    // The version will be derived from source
+    project.version = null
+    def sdkVersionFile = file('src/com/facebook/FacebookSdkVersion.java')
+    sdkVersionFile.eachLine{
+        def matcher = (it =~ /(?:.*BUILD = \")(.*)(?:\".*)/)
+        if (matcher.matches()) {
+          project.version = matcher[0][1]
+          return
+        }
+    }
+    if (project.version.is('unspecified')) {
+      throw new GradleScriptException('Version could not be found.', null)
+    }
+}
+
 uploadArchives {
   repositories.mavenDeployer {
     configuration = configurations.deployerJars
-    repository(url: "scp://ds4.dev.meetup.com/var/www/ds4.dev.meetup.com/htdocs/repo")
     pom.artifactId = 'facebook-android-sdk'
   }
-}
\ No newline at end of file
+}
+
+uploadArchives {
+    repositories.mavenDeployer {
+        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+        repository(url: "scp://ds4.dev.meetup.com/var/www/ds4.dev.meetup.com/htdocs/repo")
+
+        pom.project {
+            name 'Facebook-Android-SDK'
+            artifactId = 'facebook-android-sdk'
+            packaging 'aar'
+            description 'Facebook Android SDK'
+            url 'https://github.com/facebook/facebook-android-sdk'
+
+            scm {
+                connection 'scm:git@github.com:facebook/facebook-android-sdk.git'
+                developerConnection 'scm:git@github.com:facebook/facebook-android-sdk.git'
+                url 'https://github.com/facebook/facebook-android-sdk'
+            }
+
+            licenses {
+                license {
+                    name 'The Apache Software License, Version 2.0'
+                    url 'https://github.com/facebook/facebook-android-sdk/blob/master/LICENSE.txt'
+                    distribution 'repo'
+                }
+            }
+
+            developers {
+                developer {
+                    id 'facebook'
+                    name 'Facebook'
+                }
+            }
+        }
+    }
+}
+
+uploadArchives.dependsOn(setVersion)
+
+signing {
+    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
+    sign configurations.archives
+}
+
+task androidJavadocs(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+}
+
+task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
+    classifier = 'javadoc'
+    from androidJavadocs.destinationDir
+}
+
+task androidSourcesJar(type: Jar) {
+    classifier = 'sources'
+    from android.sourceSets.main.java.sourceFiles
+}
+
+artifacts {
+    archives androidSourcesJar
+    archives androidJavadocsJar
+}
+
+afterEvaluate {
+    androidJavadocs.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
+}
+
diff --git a/facebook/project.properties b/facebook/project.properties
index cd0ca122a..131a55407 100644
--- a/facebook/project.properties
+++ b/facebook/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-8
+target=android-9
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png
index cf60eb0ac..aa002f0a0 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png
index ece0c4c94..4c114b48d 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png
index a123c2555..9c936b60c 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_grey_focused.9.png b/facebook/res/drawable-hdpi/com_facebook_button_grey_focused.9.png
index 2e6f66dbc..c655580f0 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_grey_focused.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_grey_focused.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_grey_normal.9.png b/facebook/res/drawable-hdpi/com_facebook_button_grey_normal.9.png
index 6098f0b0e..efe802fd9 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_grey_normal.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_grey_normal.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_grey_pressed.9.png b/facebook/res/drawable-hdpi/com_facebook_button_grey_pressed.9.png
index 23b9757d1..38acc4799 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_button_grey_pressed.9.png and b/facebook/res/drawable-hdpi/com_facebook_button_grey_pressed.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_like_background.png b/facebook/res/drawable-hdpi/com_facebook_button_like_background.png
new file mode 100644
index 000000000..9486c01a7
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_like_background.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_like_background_selected.png b/facebook/res/drawable-hdpi/com_facebook_button_like_background_selected.png
new file mode 100644
index 000000000..e128c1b99
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_like_background_selected.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_like_icon.png b/facebook/res/drawable-hdpi/com_facebook_button_like_icon.png
new file mode 100644
index 000000000..c0d4688e5
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_like_icon.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_like_icon_selected.png b/facebook/res/drawable-hdpi/com_facebook_button_like_icon_selected.png
new file mode 100644
index 000000000..5e8ac3c99
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_like_icon_selected.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_button_like_pressed.png b/facebook/res/drawable-hdpi/com_facebook_button_like_pressed.png
new file mode 100644
index 000000000..047eaa6c4
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_button_like_pressed.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_close.png b/facebook/res/drawable-hdpi/com_facebook_close.png
index d925cb7b2..d81f040d7 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_close.png and b/facebook/res/drawable-hdpi/com_facebook_close.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png
index a7289c112..ecc6962aa 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png and b/facebook/res/drawable-hdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_logo.png b/facebook/res/drawable-hdpi/com_facebook_logo.png
index 26ab7945f..161bef08b 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_logo.png and b/facebook/res/drawable-hdpi/com_facebook_logo.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png
index d6ec37d04..0dcd013d6 100644
Binary files a/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png and b/facebook/res/drawable-hdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..2c5b1bbad
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..972010ec2
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..5d595c5a3
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..e2903b6de
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..a42b3cd92
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..2d292f2ca
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..b2dcc4089
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..1285a1665
Binary files /dev/null and b/facebook/res/drawable-hdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/drawable-ldpi/com_facebook_close.png b/facebook/res/drawable-ldpi/com_facebook_close.png
index fe4be250e..5f8bc5905 100644
Binary files a/facebook/res/drawable-ldpi/com_facebook_close.png and b/facebook/res/drawable-ldpi/com_facebook_close.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png
index cfb7a015c..86bd87740 100644
Binary files a/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png and b/facebook/res/drawable-mdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png
index 1e9390133..74e5ce199 100644
Binary files a/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png and b/facebook/res/drawable-mdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png
index d8427fdef..8fd28f704 100644
Binary files a/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png and b/facebook/res/drawable-mdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png
index a806a2f5d..b4afa5443 100644
Binary files a/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png and b/facebook/res/drawable-mdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png
index c5170c18b..3013a5519 100644
Binary files a/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png and b/facebook/res/drawable-mdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..d10e30391
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..9378512ce
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..d94fa9688
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..51454e5a3
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..bf60245bb
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..e0ac8fea8
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..e09406081
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..85699f8ec
Binary files /dev/null and b/facebook/res/drawable-mdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png
index 5a47068d7..0524c9325 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png
index 1449c8a13..f5d0e58b5 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png
index 28bd184ed..3d1c11075 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_grey_focused.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_grey_focused.9.png
index bfd883f92..e5b15f9c5 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_grey_focused.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_grey_focused.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_grey_normal.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_grey_normal.9.png
index aa9895432..02f28bdd5 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_grey_normal.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_grey_normal.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_grey_pressed.9.png b/facebook/res/drawable-xhdpi/com_facebook_button_grey_pressed.9.png
index 92f2ad12a..40e6b04e3 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_button_grey_pressed.9.png and b/facebook/res/drawable-xhdpi/com_facebook_button_grey_pressed.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_like_background.png b/facebook/res/drawable-xhdpi/com_facebook_button_like_background.png
new file mode 100644
index 000000000..37bb852d2
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_like_background.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_like_background_selected.png b/facebook/res/drawable-xhdpi/com_facebook_button_like_background_selected.png
new file mode 100644
index 000000000..954b3f7d1
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_like_background_selected.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_like_icon.png b/facebook/res/drawable-xhdpi/com_facebook_button_like_icon.png
new file mode 100644
index 000000000..c4d7016b4
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_like_icon.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png b/facebook/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png
new file mode 100644
index 000000000..ccb98d5e3
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_like_icon_selected.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_button_like_pressed.png b/facebook/res/drawable-xhdpi/com_facebook_button_like_pressed.png
new file mode 100644
index 000000000..d990a4e53
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_button_like_pressed.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_close.png b/facebook/res/drawable-xhdpi/com_facebook_close.png
index e3aff5ae5..b603ef892 100755
Binary files a/facebook/res/drawable-xhdpi/com_facebook_close.png and b/facebook/res/drawable-xhdpi/com_facebook_close.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png b/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png
index 4192c4887..4b35eb436 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png and b/facebook/res/drawable-xhdpi/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_logo.png b/facebook/res/drawable-xhdpi/com_facebook_logo.png
index 24d7fc56b..401d7bfec 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_logo.png and b/facebook/res/drawable-xhdpi/com_facebook_logo.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png b/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png
index a5b372468..a5eb056a1 100644
Binary files a/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png and b/facebook/res/drawable-xhdpi/com_facebook_picker_magnifier.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png
new file mode 100644
index 000000000..43b14c999
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_background.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png
new file mode 100644
index 000000000..87f9795bc
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_bottomnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png
new file mode 100644
index 000000000..4d3f58f6e
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_topnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png
new file mode 100644
index 000000000..6cd7bc8d9
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_black_xout.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png
new file mode 100644
index 000000000..7614b95c3
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_background.9.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png
new file mode 100644
index 000000000..d29b95242
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_bottomnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png
new file mode 100644
index 000000000..d2dc678ee
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_topnub.png differ
diff --git a/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png
new file mode 100644
index 000000000..e9bc616f1
Binary files /dev/null and b/facebook/res/drawable-xhdpi/com_facebook_tooltip_blue_xout.png differ
diff --git a/facebook/res/drawable-xxhdpi/com_facebook_button_like_background.png b/facebook/res/drawable-xxhdpi/com_facebook_button_like_background.png
new file mode 100644
index 000000000..02d902cfe
Binary files /dev/null and b/facebook/res/drawable-xxhdpi/com_facebook_button_like_background.png differ
diff --git a/facebook/res/drawable-xxhdpi/com_facebook_button_like_background_selected.png b/facebook/res/drawable-xxhdpi/com_facebook_button_like_background_selected.png
new file mode 100644
index 000000000..cb76c177a
Binary files /dev/null and b/facebook/res/drawable-xxhdpi/com_facebook_button_like_background_selected.png differ
diff --git a/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon.png b/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon.png
new file mode 100644
index 000000000..88d2169da
Binary files /dev/null and b/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon.png differ
diff --git a/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png b/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png
new file mode 100644
index 000000000..41137fc92
Binary files /dev/null and b/facebook/res/drawable-xxhdpi/com_facebook_button_like_icon_selected.png differ
diff --git a/facebook/res/drawable-xxhdpi/com_facebook_button_like_pressed.png b/facebook/res/drawable-xxhdpi/com_facebook_button_like_pressed.png
new file mode 100644
index 000000000..f6b49ca9c
Binary files /dev/null and b/facebook/res/drawable-xxhdpi/com_facebook_button_like_pressed.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue_focused.9.png b/facebook/res/drawable/com_facebook_button_blue_focused.9.png
index cfb7a015c..86bd87740 100644
Binary files a/facebook/res/drawable/com_facebook_button_blue_focused.9.png and b/facebook/res/drawable/com_facebook_button_blue_focused.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue_normal.9.png b/facebook/res/drawable/com_facebook_button_blue_normal.9.png
index 1e9390133..74e5ce199 100644
Binary files a/facebook/res/drawable/com_facebook_button_blue_normal.9.png and b/facebook/res/drawable/com_facebook_button_blue_normal.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_blue_pressed.9.png b/facebook/res/drawable/com_facebook_button_blue_pressed.9.png
index d8427fdef..8fd28f704 100644
Binary files a/facebook/res/drawable/com_facebook_button_blue_pressed.9.png and b/facebook/res/drawable/com_facebook_button_blue_pressed.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_check_off.png b/facebook/res/drawable/com_facebook_button_check_off.png
index e9737df5c..c25695d53 100644
Binary files a/facebook/res/drawable/com_facebook_button_check_off.png and b/facebook/res/drawable/com_facebook_button_check_off.png differ
diff --git a/facebook/res/drawable/com_facebook_button_grey_focused.9.png b/facebook/res/drawable/com_facebook_button_grey_focused.9.png
index 56f603571..becfe54fd 100644
Binary files a/facebook/res/drawable/com_facebook_button_grey_focused.9.png and b/facebook/res/drawable/com_facebook_button_grey_focused.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_grey_normal.9.png b/facebook/res/drawable/com_facebook_button_grey_normal.9.png
index dff3b7d73..f0a07f85c 100644
Binary files a/facebook/res/drawable/com_facebook_button_grey_normal.9.png and b/facebook/res/drawable/com_facebook_button_grey_normal.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_grey_pressed.9.png b/facebook/res/drawable/com_facebook_button_grey_pressed.9.png
index 46648efcd..d1c966313 100644
Binary files a/facebook/res/drawable/com_facebook_button_grey_pressed.9.png and b/facebook/res/drawable/com_facebook_button_grey_pressed.9.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like.xml b/facebook/res/drawable/com_facebook_button_like.xml
new file mode 100644
index 000000000..ff7a04b64
--- /dev/null
+++ b/facebook/res/drawable/com_facebook_button_like.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+        android:drawable="@drawable/com_facebook_button_like_pressed"
+        android:state_focused="true"
+        android:state_pressed="true"
+        />
+    <item
+        android:drawable="@drawable/com_facebook_button_like_pressed"
+        android:state_focused="false"
+        android:state_pressed="true"
+        />
+    <item
+        android:drawable="@drawable/com_facebook_button_like_background"
+        android:state_focused="true"
+        android:state_pressed="false"
+        />
+    <item
+        android:drawable="@drawable/com_facebook_button_like_background"
+        android:state_focused="false"
+        android:state_pressed="false"
+        />
+
+</selector>
diff --git a/facebook/res/drawable/com_facebook_button_like_background.png b/facebook/res/drawable/com_facebook_button_like_background.png
new file mode 100644
index 000000000..899da5272
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_like_background.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like_background_selected.png b/facebook/res/drawable/com_facebook_button_like_background_selected.png
new file mode 100644
index 000000000..798364730
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_like_background_selected.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like_icon.png b/facebook/res/drawable/com_facebook_button_like_icon.png
new file mode 100644
index 000000000..51d72dd32
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_like_icon.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like_icon_selected.png b/facebook/res/drawable/com_facebook_button_like_icon_selected.png
new file mode 100644
index 000000000..9834a4c14
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_like_icon_selected.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like_pressed.png b/facebook/res/drawable/com_facebook_button_like_pressed.png
new file mode 100644
index 000000000..fc5a53534
Binary files /dev/null and b/facebook/res/drawable/com_facebook_button_like_pressed.png differ
diff --git a/facebook/res/drawable/com_facebook_button_like_selected.xml b/facebook/res/drawable/com_facebook_button_like_selected.xml
new file mode 100644
index 000000000..042f23ea8
--- /dev/null
+++ b/facebook/res/drawable/com_facebook_button_like_selected.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <item
+            android:drawable="@drawable/com_facebook_button_like_pressed"
+            android:state_focused="true"
+            android:state_pressed="true"
+            />
+    <item
+            android:drawable="@drawable/com_facebook_button_like_pressed"
+            android:state_focused="false"
+            android:state_pressed="true"
+            />
+    <item
+            android:drawable="@drawable/com_facebook_button_like_background_selected"
+            android:state_focused="true"
+            android:state_pressed="false"
+            />
+    <item
+            android:drawable="@drawable/com_facebook_button_like_background_selected"
+            android:state_focused="false"
+            android:state_pressed="false"
+            />
+
+
+</selector>
diff --git a/facebook/res/drawable/com_facebook_close.png b/facebook/res/drawable/com_facebook_close.png
index ad0147460..4ffc94cdc 100755
Binary files a/facebook/res/drawable/com_facebook_close.png and b/facebook/res/drawable/com_facebook_close.png differ
diff --git a/facebook/res/drawable/com_facebook_inverse_icon.png b/facebook/res/drawable/com_facebook_inverse_icon.png
index a806a2f5d..b4afa5443 100644
Binary files a/facebook/res/drawable/com_facebook_inverse_icon.png and b/facebook/res/drawable/com_facebook_inverse_icon.png differ
diff --git a/facebook/res/drawable/com_facebook_list_divider.9.png b/facebook/res/drawable/com_facebook_list_divider.9.png
index 7d4c46c47..4c0df0768 100644
Binary files a/facebook/res/drawable/com_facebook_list_divider.9.png and b/facebook/res/drawable/com_facebook_list_divider.9.png differ
diff --git a/facebook/res/drawable/com_facebook_list_section_header_background.9.png b/facebook/res/drawable/com_facebook_list_section_header_background.9.png
index 1763c4a64..0ee16ffb6 100644
Binary files a/facebook/res/drawable/com_facebook_list_section_header_background.9.png and b/facebook/res/drawable/com_facebook_list_section_header_background.9.png differ
diff --git a/facebook/res/drawable/com_facebook_logo.png b/facebook/res/drawable/com_facebook_logo.png
index 785acf9ea..8e6a514a6 100644
Binary files a/facebook/res/drawable/com_facebook_logo.png and b/facebook/res/drawable/com_facebook_logo.png differ
diff --git a/facebook/res/drawable/com_facebook_picker_list_focused.9.png b/facebook/res/drawable/com_facebook_picker_list_focused.9.png
index 7c0599e3a..3efadc352 100644
Binary files a/facebook/res/drawable/com_facebook_picker_list_focused.9.png and b/facebook/res/drawable/com_facebook_picker_list_focused.9.png differ
diff --git a/facebook/res/drawable/com_facebook_picker_list_longpressed.9.png b/facebook/res/drawable/com_facebook_picker_list_longpressed.9.png
index 3bf8e0362..5fcd5b207 100644
Binary files a/facebook/res/drawable/com_facebook_picker_list_longpressed.9.png and b/facebook/res/drawable/com_facebook_picker_list_longpressed.9.png differ
diff --git a/facebook/res/drawable/com_facebook_picker_list_pressed.9.png b/facebook/res/drawable/com_facebook_picker_list_pressed.9.png
index 6e77525d2..0e557469e 100644
Binary files a/facebook/res/drawable/com_facebook_picker_list_pressed.9.png and b/facebook/res/drawable/com_facebook_picker_list_pressed.9.png differ
diff --git a/facebook/res/drawable/com_facebook_picker_list_selector_disabled.9.png b/facebook/res/drawable/com_facebook_picker_list_selector_disabled.9.png
index 42cb6463e..10851f6c8 100644
Binary files a/facebook/res/drawable/com_facebook_picker_list_selector_disabled.9.png and b/facebook/res/drawable/com_facebook_picker_list_selector_disabled.9.png differ
diff --git a/facebook/res/drawable/com_facebook_profile_picture_blank_portrait.png b/facebook/res/drawable/com_facebook_profile_picture_blank_portrait.png
index 107d7f89e..27a6f7a74 100644
Binary files a/facebook/res/drawable/com_facebook_profile_picture_blank_portrait.png and b/facebook/res/drawable/com_facebook_profile_picture_blank_portrait.png differ
diff --git a/facebook/res/drawable/com_facebook_profile_picture_blank_square.png b/facebook/res/drawable/com_facebook_profile_picture_blank_square.png
index 8b4a76a0e..77554e01f 100644
Binary files a/facebook/res/drawable/com_facebook_profile_picture_blank_square.png and b/facebook/res/drawable/com_facebook_profile_picture_blank_square.png differ
diff --git a/facebook/res/layout/com_facebook_friendpickerfragment.xml b/facebook/res/layout/com_facebook_friendpickerfragment.xml
index b42f15e7d..1fc9f44fa 100644
--- a/facebook/res/layout/com_facebook_friendpickerfragment.xml
+++ b/facebook/res/layout/com_facebook_friendpickerfragment.xml
@@ -16,16 +16,16 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
               android:background="#FFFFFF">
 
     <include layout="@layout/com_facebook_picker_title_bar_stub"/>
 
     <ListView
             android:id="@+id/com_facebook_picker_list_view"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
             android:divider="@drawable/com_facebook_list_divider"
             android:fastScrollEnabled="true"
             android:scrollbars="vertical"
diff --git a/facebook/res/layout/com_facebook_login_activity_layout.xml b/facebook/res/layout/com_facebook_login_activity_layout.xml
index 09b28999f..66e50bd8d 100644
--- a/facebook/res/layout/com_facebook_login_activity_layout.xml
+++ b/facebook/res/layout/com_facebook_login_activity_layout.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
+              android:layout_width="match_parent"
+              android:layout_height="match_parent">
 
     <ProgressBar android:indeterminate="true"
                  android:layout_width="wrap_content"
diff --git a/facebook/res/layout/com_facebook_picker_activity_circle_row.xml b/facebook/res/layout/com_facebook_picker_activity_circle_row.xml
index de3e7e323..7f631b093 100644
--- a/facebook/res/layout/com_facebook_picker_activity_circle_row.xml
+++ b/facebook/res/layout/com_facebook_picker_activity_circle_row.xml
@@ -18,7 +18,7 @@
 <RelativeLayout
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_height="50dip"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         >
     <ProgressBar android:indeterminate="true"
                  android:layout_width="wrap_content"
diff --git a/facebook/res/layout/com_facebook_picker_list_row.xml b/facebook/res/layout/com_facebook_picker_list_row.xml
index 8f6725b11..74537abe3 100644
--- a/facebook/res/layout/com_facebook_picker_list_row.xml
+++ b/facebook/res/layout/com_facebook_picker_list_row.xml
@@ -18,7 +18,7 @@
 <LinearLayout
         xmlns:android="http://schemas.android.com/apk/res/android"
         android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
+        android:layout_width="match_parent"
         >
     <ViewStub
             android:id="@+id/com_facebook_picker_profile_pic_stub"
diff --git a/facebook/res/layout/com_facebook_picker_list_section_header.xml b/facebook/res/layout/com_facebook_picker_list_section_header.xml
index ef04e3bc9..21c6fbd03 100644
--- a/facebook/res/layout/com_facebook_picker_list_section_header.xml
+++ b/facebook/res/layout/com_facebook_picker_list_section_header.xml
@@ -18,7 +18,7 @@
 <TextView
     xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/com_facebook_picker_list_section_header"
-    android:layout_width="fill_parent"
+    android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:textStyle="bold"
     android:background="@drawable/com_facebook_list_section_header_background"
diff --git a/facebook/res/layout/com_facebook_picker_title_bar.xml b/facebook/res/layout/com_facebook_picker_title_bar.xml
index ecadecac9..07e70dc65 100644
--- a/facebook/res/layout/com_facebook_picker_title_bar.xml
+++ b/facebook/res/layout/com_facebook_picker_title_bar.xml
@@ -17,7 +17,7 @@
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
                 android:id="@+id/com_facebook_picker_top_bar"
-                android:layout_width="fill_parent"
+                android:layout_width="match_parent"
                 android:layout_height="48dp"
                 android:background="@drawable/com_facebook_top_background"
                 android:gravity="right">
@@ -40,13 +40,13 @@
     <LinearLayout
             android:id="@+id/com_facebook_picker_divider"
             android:layout_width="1dp"
-            android:layout_height="fill_parent"
+            android:layout_height="match_parent"
             android:background="#40000000"
             android:layout_alignLeft="@id/com_facebook_picker_done_button"/>
     <TextView
             android:id="@+id/com_facebook_picker_title"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
             android:textSize="22sp"
             android:textColor="#FFFFFF"
             android:gravity="left|center_vertical"
diff --git a/facebook/res/layout/com_facebook_picker_title_bar_stub.xml b/facebook/res/layout/com_facebook_picker_title_bar_stub.xml
index ebbffd883..481fe6805 100644
--- a/facebook/res/layout/com_facebook_picker_title_bar_stub.xml
+++ b/facebook/res/layout/com_facebook_picker_title_bar_stub.xml
@@ -20,6 +20,6 @@
               android:inflatedId="@+id/com_facebook_picker_title_bar"
               android:layout="@layout/com_facebook_picker_title_bar"
               android:layout_height="48dip"
-              android:layout_width="fill_parent"/>
+              android:layout_width="match_parent"/>
 
 </merge>
diff --git a/facebook/res/layout/com_facebook_placepickerfragment.xml b/facebook/res/layout/com_facebook_placepickerfragment.xml
index 56c5cc8ee..87374c731 100644
--- a/facebook/res/layout/com_facebook_placepickerfragment.xml
+++ b/facebook/res/layout/com_facebook_placepickerfragment.xml
@@ -16,8 +16,8 @@
 -->
 
 <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
               android:background="#FFFFFF"
               android:descendantFocusability="beforeDescendants"
               android:focusableInTouchMode="true">
@@ -26,8 +26,8 @@
 
     <ListView
             android:id="@+id/com_facebook_picker_list_view"
-            android:layout_width="fill_parent"
-            android:layout_height="fill_parent"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
             android:layout_alignParentTop="true"
             android:divider="@null"
             android:fastScrollEnabled="true"
diff --git a/facebook/res/layout/com_facebook_search_bar_layout.xml b/facebook/res/layout/com_facebook_search_bar_layout.xml
index 79dbabbf0..5de1a6db9 100644
--- a/facebook/res/layout/com_facebook_search_bar_layout.xml
+++ b/facebook/res/layout/com_facebook_search_bar_layout.xml
@@ -20,7 +20,7 @@
             android:singleLine="true"
             android:layout_gravity="center"
             android:gravity="center_vertical"
-            android:textSize="16dp"
+            android:textSize="16sp"
             android:textColor="@android:color/black"
             android:textColorHint="@color/com_facebook_picker_search_bar_text"
             android:background="@color/com_facebook_picker_search_bar_background"
diff --git a/facebook/res/layout/com_facebook_tooltip_bubble.xml b/facebook/res/layout/com_facebook_tooltip_bubble.xml
new file mode 100644
index 000000000..07a48e26c
--- /dev/null
+++ b/facebook/res/layout/com_facebook_tooltip_bubble.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:paddingLeft="20dp"
+    android:paddingRight="20dp">
+  <RelativeLayout
+  	android:id="@+id/com_facebook_body_frame"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_below="@+id/com_facebook_tooltip_bubble_view_top_pointer"
+    android:layout_centerHorizontal="true"
+    android:background="@drawable/com_facebook_tooltip_blue_background">
+      <ImageView 
+        android:id="@+id/com_facebook_button_xout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentRight="true"
+        android:padding="10dp"
+        android:src="@drawable/com_facebook_tooltip_blue_xout"
+        />
+      <TextView
+          android:id="@+id/com_facebook_tooltip_bubble_view_text_body"
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:layout_alignParentTop="true"
+          android:layout_toLeftOf="@id/com_facebook_button_xout"
+          android:layout_alignParentLeft="true"
+          android:padding="10dp"
+          style="@style/tooltip_bubble_text"
+          />
+  </RelativeLayout>
+  <ImageView
+      android:id="@+id/com_facebook_tooltip_bubble_view_top_pointer"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_alignParentTop="true"
+      android:layout_centerHorizontal="true"
+      android:layout_marginBottom="-10dp"
+      android:src="@drawable/com_facebook_tooltip_blue_topnub"
+      />
+  <ImageView
+      android:id="@+id/com_facebook_tooltip_bubble_view_bottom_pointer"
+      android:layout_width="wrap_content"
+      android:layout_height="wrap_content"
+      android:layout_gravity="center_horizontal|bottom"
+      android:layout_centerHorizontal="true"
+      android:layout_below="@id/com_facebook_body_frame"
+      android:layout_marginTop="-13dp"
+      android:src="@drawable/com_facebook_tooltip_blue_bottomnub"
+      />
+</RelativeLayout>
diff --git a/facebook/res/layout/com_facebook_usersettingsfragment.xml b/facebook/res/layout/com_facebook_usersettingsfragment.xml
index 04a9a1ded..17d29b8c7 100644
--- a/facebook/res/layout/com_facebook_usersettingsfragment.xml
+++ b/facebook/res/layout/com_facebook_usersettingsfragment.xml
@@ -18,12 +18,12 @@
 <ScrollView
     xmlns:android="http://schemas.android.com/apk/res/android"
     xmlns:loginView="http://schemas.android.com/apk/res-auto"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
     android:background="@drawable/com_facebook_usersettingsfragment_background_gradient" >
     <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
         android:orientation="vertical">
 
         <ImageView
@@ -37,7 +37,7 @@
 
         <TextView
             android:id="@+id/com_facebook_usersettingsfragment_profile_name"
-            android:layout_width="fill_parent"
+            android:layout_width="match_parent"
             android:layout_height="100dp"
             android:lines="1"
             android:textSize="16sp"
diff --git a/facebook/res/values-es/strings.xml b/facebook/res/values-es/strings.xml
index 556a7a4f9..7f1558718 100644
--- a/facebook/res/values-es/strings.xml
+++ b/facebook/res/values-es/strings.xml
@@ -41,4 +41,5 @@
     <string name="com_facebook_requesterror_password_changed">Su contraseña de Facebook ha cambiado, por favor vuelva a conectar la aplicación con Facebook.</string>
     <string name="com_facebook_requesterror_reconnect">Se produjo un error al conectar con Facebook, por favor vuelva a conectar la aplicación con Facebook.</string>
     <string name="com_facebook_requesterror_permissions">Una conexión de aplicación con Facebook falló debido a permisos insuficientes, por favor, conceda los permisos de aplicaciones para realizar la operación.</string>
+    <string name="com_facebook_image_download_unknown_error">Error al descargar la imagen.</string>
 </resources>
diff --git a/facebook/res/values-he/strings.xml b/facebook/res/values-he/strings.xml
index 4ab34a3e2..48f29e328 100644
--- a/facebook/res/values-he/strings.xml
+++ b/facebook/res/values-he/strings.xml
@@ -41,4 +41,5 @@
     <string name="com_facebook_requesterror_reconnect">.ארעה שגיאה בעת החיבור עם פייסבוק, חבר בבקשה מחדש את האפליקציה עם פייסבוק</string>
     <string name="com_facebook_requesterror_permissions">.חיבור האפליקציה עם פייסבוק נכשל בשל הרשאות לא מספקות, אנא הענק הרשאות לאפליקציה בכדי שהפעולה תוכל להתבצע</string>
     <string name="com_facebook_dialogloginactivity_ok_button">אישור</string>
+    <string name="com_facebook_image_download_unknown_error">שגיאה בעת הורדת תמונה</string>
 </resources>
diff --git a/facebook/res/values-iw/strings.xml b/facebook/res/values-iw/strings.xml
index 4ab34a3e2..48f29e328 100644
--- a/facebook/res/values-iw/strings.xml
+++ b/facebook/res/values-iw/strings.xml
@@ -41,4 +41,5 @@
     <string name="com_facebook_requesterror_reconnect">.ארעה שגיאה בעת החיבור עם פייסבוק, חבר בבקשה מחדש את האפליקציה עם פייסבוק</string>
     <string name="com_facebook_requesterror_permissions">.חיבור האפליקציה עם פייסבוק נכשל בשל הרשאות לא מספקות, אנא הענק הרשאות לאפליקציה בכדי שהפעולה תוכל להתבצע</string>
     <string name="com_facebook_dialogloginactivity_ok_button">אישור</string>
+    <string name="com_facebook_image_download_unknown_error">שגיאה בעת הורדת תמונה</string>
 </resources>
diff --git a/facebook/res/values/attrs.xml b/facebook/res/values/attrs.xml
index 21c3bacef..64c365c2d 100644
--- a/facebook/res/values/attrs.xml
+++ b/facebook/res/values/attrs.xml
@@ -49,4 +49,26 @@
         </attr>
         <attr name="is_cropped" format="boolean" />
     </declare-styleable>
+    <declare-styleable name="com_facebook_like_view">
+        <attr name="foreground_color" format="color" />
+        <attr name="object_id" format="string" />
+        <attr name="style">
+            <!-- Keep in sync with Enums in LikeView -->
+            <enum name="standard" value="0" />
+            <enum name="button" value="1" />
+            <enum name="box_count" value="2" />
+        </attr>
+        <attr name="auxiliary_view_position">
+            <!-- Keep in sync with Enums in LikeView -->
+            <enum name="bottom" value="0" />
+            <enum name="inline" value="1" />
+            <enum name="top" value="2" />
+        </attr>
+        <attr name="horizontal_alignment">
+            <!-- Keep in sync with Enums in LikeView -->
+            <enum name="center" value="0" />
+            <enum name="left" value="1" />
+            <enum name="right" value="2" />
+        </attr>
+    </declare-styleable>
 </resources>
diff --git a/facebook/res/values/strings.xml b/facebook/res/values/strings.xml
index 022d85c80..efa3b79b4 100644
--- a/facebook/res/values/strings.xml
+++ b/facebook/res/values/strings.xml
@@ -17,6 +17,8 @@
 
 <resources>
     <string name="com_facebook_dialogloginactivity_ok_button">OK</string>
+    <string name="com_facebook_like_button_not_liked">Like</string>
+    <string name="com_facebook_like_button_liked">Liked</string>
     <string name="com_facebook_loginview_log_out_button">Log out</string>
     <string name="com_facebook_loginview_log_in_button">Log in with Facebook</string>
     <string name="com_facebook_loginview_logged_in_as">Logged in as: %1$s</string>
@@ -41,4 +43,6 @@
     <string name="com_facebook_requesterror_password_changed">Your Facebook password has changed. Please log into this app again to reconnect your Facebook account.</string>
     <string name="com_facebook_requesterror_reconnect">Please log into this app again to reconnect your Facebook account.</string>
     <string name="com_facebook_requesterror_permissions">This app doesn’t have permission to do this. To change permissions, try logging into the app again.</string>
+    <string name="com_facebook_tooltip_default">New! You\'re in control - choose what info you want to share with apps.</string>
+    <string name="com_facebook_image_download_unknown_error">Unexpected error while downloading an image.</string>
 </resources>
diff --git a/facebook/res/values/styles.xml b/facebook/res/values/styles.xml
index aafc79431..11c954d48 100644
--- a/facebook/res/values/styles.xml
+++ b/facebook/res/values/styles.xml
@@ -32,9 +32,33 @@
     <color name="com_facebook_loginview_text_color">#FFFFFF</color>
     <dimen name="com_facebook_loginview_text_size">16.0sp</dimen>
 
+    <dimen name="com_facebook_likeview_text_size">11.0sp</dimen>
+    <color name="com_facebook_likeview_text_color">#6a7180</color>
+    <dimen name="com_facebook_likeview_edge_padding">2dp</dimen>
+    <dimen name="com_facebook_likeview_internal_padding">6dp</dimen>
+
+    <dimen name="com_facebook_likebutton_padding_left">8dp</dimen>
+    <dimen name="com_facebook_likebutton_padding_right">8dp</dimen>
+    <dimen name="com_facebook_likebutton_padding_top">0dp</dimen>
+    <dimen name="com_facebook_likebutton_padding_bottom">0dp</dimen>
+    <dimen name="com_facebook_likebutton_compound_drawable_padding">8dp</dimen>
+    <color name="com_facebook_likebutton_text_color">#FFFFFF</color>
+    <dimen name="com_facebook_likebutton_text_size">13.0sp</dimen>
+
+    <dimen name="com_facebook_likeboxcountview_caret_width">6dp</dimen>
+    <dimen name="com_facebook_likeboxcountview_caret_height">3dp</dimen>
+    <dimen name="com_facebook_likeboxcountview_border_radius">3dp</dimen>
+    <dimen name="com_facebook_likeboxcountview_border_width">1dp</dimen>
+    <color name="com_facebook_likeboxcountview_border_color">#6a7180</color>
+    <color name="com_facebook_likeboxcountview_text_color">#6a7180</color>
+    <dimen name="com_facebook_likeboxcountview_text_size">11.0sp</dimen>
+    <dimen name="com_facebook_likeboxcountview_text_padding">6dp</dimen>
+
     <dimen name="com_facebook_profilepictureview_preset_size_small">50dp</dimen>
     <dimen name="com_facebook_profilepictureview_preset_size_normal">100dp</dimen>
     <dimen name="com_facebook_profilepictureview_preset_size_large">180dp</dimen>
+    
+    <dimen name="com_facebook_tooltip_horizontal_padding">10dp</dimen>
 
     <style name="com_facebook_loginview_default_style" parent="@android:style/Widget.Button">
         <item name="android:layout_width">wrap_content</item>
@@ -56,4 +80,13 @@
         <item name="android:textColor">#4B5164</item>
         <item name="android:gravity">center</item>
     </style>
+    
+    <style name="tooltip_bubble_text">
+	    <item name="android:textColor">@android:color/white</item>
+	    <item name="android:gravity">left</item>
+	    <item name="android:textSize">12sp</item>
+	    <item name="android:shadowDy">-1</item>
+	    <item name="android:shadowRadius">0.25</item>
+	    <item name="android:shadowColor">#40000000</item>
+    </style>
 </resources>
diff --git a/facebook/src/com/facebook/AccessToken.java b/facebook/src/com/facebook/AccessToken.java
index 374a2b498..898abb5ce 100644
--- a/facebook/src/com/facebook/AccessToken.java
+++ b/facebook/src/com/facebook/AccessToken.java
@@ -27,10 +27,7 @@
 import java.io.InvalidObjectException;
 import java.io.ObjectInputStream;
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
+import java.util.*;
 
 /**
  * This class represents an access token returned by the Facebook Login service, along with associated
@@ -55,17 +52,22 @@
 
     private final Date expires;
     private final List<String> permissions;
+    private final List<String> declinedPermissions;
     private final String token;
     private final AccessTokenSource source;
     private final Date lastRefresh;
 
-    AccessToken(String token, Date expires, List<String> permissions, AccessTokenSource source, Date lastRefresh) {
+    AccessToken(String token, Date expires, List<String> permissions, List<String> declinedPermissions, AccessTokenSource source, Date lastRefresh) {
         if (permissions == null) {
             permissions = Collections.emptyList();
         }
+        if (declinedPermissions == null) {
+            declinedPermissions = Collections.emptyList();
+        }
 
         this.expires = expires;
         this.permissions = Collections.unmodifiableList(permissions);
+        this.declinedPermissions = Collections.unmodifiableList(declinedPermissions);
         this.token = token;
         this.source = source;
         this.lastRefresh = lastRefresh;
@@ -101,6 +103,18 @@ public Date getExpires() {
         return this.permissions;
     }
 
+    /**
+     * Gets the list of permissions declined by the user with this access token.  It represents the entire set
+     * of permissions that have been requested and declined.  Note that the most up-to-date list of permissions is
+     * maintained by the Facebook service, so this list may be outdated if permissions have been granted or declined
+     * since the last time an AccessToken object was created.
+     *
+     * @return a read-only list of strings representing the permissions declined by the user
+     */
+    public List<String> getDeclinedPermissions() {
+        return this.declinedPermissions;
+    }
+
     /**
      * Gets the {@link AccessTokenSource} indicating how this access token was obtained.
      *
@@ -149,7 +163,7 @@ public static AccessToken createFromExistingAccessToken(String accessToken, Date
             accessTokenSource = DEFAULT_ACCESS_TOKEN_SOURCE;
         }
 
-        return new AccessToken(accessToken, expirationTime, permissions, accessTokenSource, lastRefreshTime);
+        return new AccessToken(accessToken, expirationTime, permissions, null, accessTokenSource, lastRefreshTime);
     }
 
     /**
@@ -182,13 +196,13 @@ public String toString() {
         return builder.toString();
     }
 
-    static AccessToken createEmptyToken(List<String> permissions) {
-        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, permissions, AccessTokenSource.NONE,
+    static AccessToken createEmptyToken() {
+        return new AccessToken("", ALREADY_EXPIRED_EXPIRATION_TIME, null, null, AccessTokenSource.NONE,
                 DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromString(String token, List<String> permissions, AccessTokenSource source) {
-        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, source, DEFAULT_LAST_REFRESH_TIME);
+        return new AccessToken(token, DEFAULT_EXPIRATION_TIME, permissions, null, source, DEFAULT_LAST_REFRESH_TIME);
     }
 
     static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source) {
@@ -197,56 +211,82 @@ static AccessToken createFromNativeLogin(Bundle bundle, AccessTokenSource source
         ArrayList<String> permissions = bundle.getStringArrayList(NativeProtocol.EXTRA_PERMISSIONS);
         String token = bundle.getString(NativeProtocol.EXTRA_ACCESS_TOKEN);
 
-        return createNew(permissions, token, expires, source);
+        return createNew(permissions, null, token, expires, source);
     }
 
     static AccessToken createFromWebBundle(List<String> requestedPermissions, Bundle bundle, AccessTokenSource source) {
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date());
         String token = bundle.getString(ACCESS_TOKEN_KEY);
 
-        return createNew(requestedPermissions, token, expires, source);
+        // With Login v4, we now get back the actual permissions granted, so update the permissions to be the real thing
+        String grantedPermissions = bundle.getString("granted_scopes");
+        if (!Utility.isNullOrEmpty(grantedPermissions)) {
+            requestedPermissions =  new ArrayList<String>(Arrays.asList(grantedPermissions.split(",")));
+        }
+        String deniedPermissions = bundle.getString("denied_scopes");
+        List<String> declinedPermissions = null;
+        if (!Utility.isNullOrEmpty(deniedPermissions)) {
+            declinedPermissions = new ArrayList<String>(Arrays.asList(deniedPermissions.split(",")));
+        }
+
+        return createNew(requestedPermissions, declinedPermissions, token, expires, source);
     }
 
     @SuppressLint("FieldGetter")
     static AccessToken createFromRefresh(AccessToken current, Bundle bundle) {
         // Only tokens obtained via SSO support refresh. Token refresh returns the expiration date in
         // seconds from the epoch rather than seconds from now.
-        assert (current.source == AccessTokenSource.FACEBOOK_APPLICATION_WEB ||
-                current.source == AccessTokenSource.FACEBOOK_APPLICATION_NATIVE ||
-                current.source == AccessTokenSource.FACEBOOK_APPLICATION_SERVICE);
+        if (current.source != AccessTokenSource.FACEBOOK_APPLICATION_WEB &&
+                current.source != AccessTokenSource.FACEBOOK_APPLICATION_NATIVE &&
+                current.source != AccessTokenSource.FACEBOOK_APPLICATION_SERVICE) {
+            throw new FacebookException("Invalid token source: " + current.source);
+        }
 
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date(0));
         String token = bundle.getString(ACCESS_TOKEN_KEY);
 
-        return createNew(current.getPermissions(), token, expires, current.source);
+        return createNew(current.getPermissions(), current.getDeclinedPermissions(), token, expires, current.source);
     }
 
-    static AccessToken createFromTokenWithRefreshedPermissions(AccessToken token, List<String> permissions) {
-        return new AccessToken(token.token, token.expires, permissions, token.source, token.lastRefresh);
+    static AccessToken createFromTokenWithRefreshedPermissions(
+            AccessToken token,
+            List<String> grantedPermissions,
+            List<String> declinedPermissions) {
+        return new AccessToken(token.token, token.expires, grantedPermissions, declinedPermissions, token.source, token.lastRefresh);
     }
 
     private static AccessToken createNew(
-            List<String> requestedPermissions, String accessToken, Date expires, AccessTokenSource source) {
+            List<String> grantedPermissions,
+            List<String> declinedPermissions,
+            String accessToken, Date expires,
+            AccessTokenSource source) {
         if (Utility.isNullOrEmpty(accessToken) || (expires == null)) {
-            return createEmptyToken(requestedPermissions);
+            return createEmptyToken();
         } else {
-            return new AccessToken(accessToken, expires, requestedPermissions, source, new Date());
+            return new AccessToken(accessToken, expires, grantedPermissions, declinedPermissions, source, new Date());
         }
     }
 
     static AccessToken createFromCache(Bundle bundle) {
+        List<String> permissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> declinedPermissions = getPermissionsFromBundle(bundle, TokenCachingStrategy.DECLINED_PERMISSIONS_KEY);
+
+        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
+                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, declinedPermissions,
+                TokenCachingStrategy.getSource(bundle),
+                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+    }
+
+    static List<String> getPermissionsFromBundle(Bundle bundle, String key) {
         // Copy the list so we can guarantee immutable
-        List<String> originalPermissions = bundle.getStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY);
+        List<String> originalPermissions = bundle.getStringArrayList(key);
         List<String> permissions;
         if (originalPermissions == null) {
             permissions = Collections.emptyList();
         } else {
             permissions = Collections.unmodifiableList(new ArrayList<String>(originalPermissions));
         }
-
-        return new AccessToken(bundle.getString(TokenCachingStrategy.TOKEN_KEY), TokenCachingStrategy.getDate(bundle,
-                TokenCachingStrategy.EXPIRATION_DATE_KEY), permissions, TokenCachingStrategy.getSource(bundle),
-                TokenCachingStrategy.getDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY));
+        return permissions;
     }
 
     Bundle toCacheBundle() {
@@ -255,6 +295,7 @@ Bundle toCacheBundle() {
         bundle.putString(TokenCachingStrategy.TOKEN_KEY, this.token);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.EXPIRATION_DATE_KEY, expires);
         bundle.putStringArrayList(TokenCachingStrategy.PERMISSIONS_KEY, new ArrayList<String>(permissions));
+        bundle.putStringArrayList(TokenCachingStrategy.DECLINED_PERMISSIONS_KEY, new ArrayList<String>(declinedPermissions));
         bundle.putSerializable(TokenCachingStrategy.TOKEN_SOURCE_KEY, source);
         TokenCachingStrategy.putDate(bundle, TokenCachingStrategy.LAST_REFRESH_DATE_KEY, lastRefresh);
 
@@ -275,7 +316,7 @@ private static AccessToken createFromBundle(List<String> requestedPermissions, B
             return null;
         }
 
-        return new AccessToken(token, expires, requestedPermissions, source, new Date());
+        return new AccessToken(token, expires, requestedPermissions, null, source, new Date());
     }
 
     private String tokenToString() {
@@ -317,12 +358,37 @@ private SerializationProxyV1(String token, Date expires,
         }
 
         private Object readResolve() {
-            return new AccessToken(token, expires, permissions, source, lastRefresh);
+            return new AccessToken(token, expires, permissions, null, source, lastRefresh);
+        }
+    }
+
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = -2488473066578201068L;
+        private final Date expires;
+        private final List<String> permissions;
+        private final List<String> declinedPermissions;
+        private final String token;
+        private final AccessTokenSource source;
+        private final Date lastRefresh;
+
+        private SerializationProxyV2(String token, Date expires,
+                                     List<String> permissions, List<String> declinedPermissions,
+                                     AccessTokenSource source, Date lastRefresh) {
+            this.expires = expires;
+            this.permissions = permissions;
+            this.declinedPermissions = declinedPermissions;
+            this.token = token;
+            this.source = source;
+            this.lastRefresh = lastRefresh;
+        }
+
+        private Object readResolve() {
+            return new AccessToken(token, expires, permissions, declinedPermissions, source, lastRefresh);
         }
     }
 
     private Object writeReplace() {
-        return new SerializationProxyV1(token, expires, permissions, source, lastRefresh);
+        return new SerializationProxyV2(token, expires, permissions, declinedPermissions, source, lastRefresh);
     }
 
     // have a readObject that throws to prevent spoofing
diff --git a/facebook/src/com/facebook/AppEventsConstants.java b/facebook/src/com/facebook/AppEventsConstants.java
index 24fd13872..19031644b 100644
--- a/facebook/src/com/facebook/AppEventsConstants.java
+++ b/facebook/src/com/facebook/AppEventsConstants.java
@@ -28,6 +28,12 @@
     /** Log this event when an app is being activated. */
     public static final String EVENT_NAME_ACTIVATED_APP = "fb_mobile_activate_app";
 
+    public static final String EVENT_NAME_DEACTIVATED_APP = "fb_mobile_deactivate_app";
+
+    public static final String EVENT_NAME_SESSION_INTERRUPTIONS = "fb_mobile_app_interruptions";
+
+    public static final String EVENT_NAME_TIME_BETWEEN_SESSIONS = "fb_mobile_time_between_sessions";
+
     /** Log this event when a user has completed registration with the app. */
     public static final String EVENT_NAME_COMPLETED_REGISTRATION = "fb_mobile_complete_registration";
 
@@ -156,6 +162,10 @@
     public static final String EVENT_PARAM_DESCRIPTION = "fb_description";
 
 
+    /**
+     * Parameter key used to specify source application package
+     */
+    public static final String EVENT_PARAM_SOURCE_APPLICATION = "fb_mobile_launch_source";
 
     // Parameter values
 
@@ -164,5 +174,4 @@
 
     /** No-valued parameter value to be used with parameter keys that need a Yes/No value */
     public static final String EVENT_PARAM_VALUE_NO = "0";
-
 }
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index 0081ec8a8..5fa481ffb 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -16,21 +16,43 @@
 
 package com.facebook;
 
+import android.app.Activity;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
-import com.facebook.internal.*;
+import bolts.AppLinks;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 import com.facebook.model.GraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.BufferedOutputStream;
+import java.io.FileNotFoundException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+import java.io.UnsupportedEncodingException;
 import java.math.BigDecimal;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Currency;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 
 /**
@@ -45,6 +67,7 @@
  * </p>
  * <p>
  * The AppEventsLogger class has a few related roles:
+ * </p>
  * <ul>
  * <li>
  * Logging predefined and application-defined events to Facebook App Insights with a
@@ -64,7 +87,7 @@
  * in a number of situations:
  * <ul>
  * <li>when an event count threshold is passed (currently 100 logged events).</li>
- * <li>when a time threshold is passed (currently 60 seconds).</li>
+ * <li>when a time threshold is passed (currently 15 seconds).</li>
  * <li>when an app has gone to background and is then brought back to the foreground.</li>
  * </ul>
  * <li>
@@ -91,7 +114,7 @@
  * </li>
  * <li>
  * There is a limit to the number of unique parameter names in the provided parameters that can
- * be used per event, on the order of 10.  This is not just for an individual call, but for all
+ * be used per event, on the order of 25.  This is not just for an individual call, but for all
  * invocations for that eventName.
  * </li>
  * <li>
@@ -122,41 +145,18 @@
         EXPLICIT_ONLY,
     }
 
-    private enum SuppressionTimeoutBehavior {
-        // Successfully logging an event will reset the timeout period (i.e., events will log no more than every N
-        // seconds).
-        RESET_TIMEOUT_WHEN_LOG_SUCCESSFUL,
-        // Attempting to log an event, even if it is suppressed, will reset the timeout period (i.e., events will not
-        // be logged until they have been "silent" for at least N seconds).
-        RESET_TIMEOUT_WHEN_LOG_ATTEMPTED,
-    }
-
-    private static class EventSuppression {
-        // Timeout period in seconds
-        private int timeoutPeriod;
-        private SuppressionTimeoutBehavior behavior;
-
-        EventSuppression(int timeoutPeriod, SuppressionTimeoutBehavior behavior) {
-            this.timeoutPeriod = timeoutPeriod;
-            this.behavior = behavior;
-        }
-
-        int getTimeoutPeriod() {
-            return timeoutPeriod;
-        }
-
-        SuppressionTimeoutBehavior getBehavior() {
-            return behavior;
-        }
-    }
-
     // Constants
     private static final String TAG = AppEventsLogger.class.getCanonicalName();
 
-    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER                  = 100;
-    private static final int FLUSH_PERIOD_IN_SECONDS                               = 60;
+    private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER = 100;
+    private static final int FLUSH_PERIOD_IN_SECONDS = 15;
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
-    private static final int APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS            = 5 * 60;
+    private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS = 30;
+
+    // Package visible
+    static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
+
+    private static final String SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT = "_fbSourceApplicationHasBeenSet";
 
     // Instance member variables
     private final Context context;
@@ -164,22 +164,14 @@ SuppressionTimeoutBehavior getBehavior() {
 
     private static Map<AccessTokenAppIdPair, SessionEventsState> stateMap =
             new ConcurrentHashMap<AccessTokenAppIdPair, SessionEventsState>();
-    private static Timer flushTimer;
-    private static Timer supportsAttributionRecheckTimer;
+    private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
     private static boolean requestInFlight;
     private static Context applicationContext;
     private static Object staticLock = new Object();
-    private static String hashedDeviceAndAppId;
-    private static Map<String, Date> mapEventsToSuppressionTime = new HashMap<String, Date>();
-    @SuppressWarnings("serial")
-    private static Map<String, EventSuppression> mapEventNameToSuppress = new HashMap<String, EventSuppression>() {
-        {
-            put(AppEventsConstants.EVENT_NAME_ACTIVATED_APP,
-                    new EventSuppression(APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS,
-                            SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED));
-        }
-    };
+    private static String anonymousAppDeviceGUID;
+    private static String sourceApplication;
+    private static boolean isOpenedByApplink;
 
     // Rather than retaining Sessions, we extract the information we need and track app events by
     // application ID and access token (which may be null for Session-less calls). This avoids needing to
@@ -266,9 +258,10 @@ public static void setLimitEventUsage(Context context, boolean limitEventUsage)
      * Use this method if your application ID is stored in application metadata, otherwise see
      * {@link AppEventsLogger#activateApp(android.content.Context, String)}.
      *
-     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
      */
     public static void activateApp(Context context) {
+        Settings.sdkInitialize(context);
         activateApp(context, Utility.getMetadataApplicationId(context));
     }
 
@@ -276,9 +269,8 @@ public static void activateApp(Context context) {
      * Notifies the events system that the app has launched & logs an activatedApp event.  Should be called whenever
      * your app becomes active, typically in the onResume() method of each long-running Activity of your app.
      *
-     * @param context   Used to access the attributionId for non-authenticated users.
-     *
-     * @param applicationId  The specific applicationId to report the activation for.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId The specific applicationId to report the activation for.
      */
     @SuppressWarnings("deprecation")
     public static void activateApp(Context context, String applicationId) {
@@ -286,12 +278,75 @@ public static void activateApp(Context context, String applicationId) {
             throw new IllegalArgumentException("Both context and applicationId must be non-null");
         }
 
+        if ((context instanceof Activity)) {
+            setSourceApplication((Activity) context);
+        } else {
+          // If context is not an Activity, we cannot get intent nor calling activity.
+          resetSourceApplication();
+          Log.d(AppEventsLogger.class.getName(),
+              "To set source application the context of activateApp must be an instance of Activity");
+        }
+
         // activateApp supercedes publishInstall in the public API, so we need to explicitly invoke it, since the server
         // can't reliably infer install state for all conditions of an app activate.
-        Settings.publishInstallAsync(context, applicationId);
+        Settings.publishInstallAsync(context, applicationId, null);
+
+        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
+        final long eventTime = System.currentTimeMillis();
+        final String sourceApplicationInfo = getSourceApplication();
+        backgroundExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                logger.logAppSessionResumeEvent(eventTime, sourceApplicationInfo);
+            }
+        });
+    }
+
+    /**
+     * Notifies the events system that the app has been deactivated (put in the background) and
+     * tracks the application session information. Should be called whenever your app becomes
+     * inactive, typically in the onPause() method of each long-running Activity of your app.
+     *
+     * Use this method if your application ID is stored in application metadata, otherwise see
+     * {@link AppEventsLogger#deactivateApp(android.content.Context, String)}.
+     *
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
+     */
+    public static void deactivateApp(Context context) {
+        deactivateApp(context, Utility.getMetadataApplicationId(context));
+    }
+
+    /**
+     * Notifies the events system that the app has been deactivated (put in the background) and
+     * tracks the application session information. Should be called whenever your app becomes
+     * inactive, typically in the onPause() method of each long-running Activity of your app.
+     *
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId The specific applicationId to track session information for.
+     */
+    public static void deactivateApp(Context context, String applicationId) {
+        if (context == null || applicationId == null) {
+            throw new IllegalArgumentException("Both context and applicationId must be non-null");
+        }
 
-        AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
+        resetSourceApplication();
+
+        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
+        final long eventTime = System.currentTimeMillis();
+        backgroundExecutor.execute(new Runnable() {
+            @Override
+            public void run() {
+                logger.logAppSessionSuspendEvent(eventTime);
+            }
+        });
+    }
+
+    private void logAppSessionResumeEvent(long eventTime, String sourceApplicationInfo) {
+        PersistedAppSessionInfo.onResume(applicationContext, accessTokenAppId, this, eventTime, sourceApplicationInfo);
+    }
+
+    private void logAppSessionSuspendEvent(long eventTime) {
+        PersistedAppSessionInfo.onSuspend(applicationContext, accessTokenAppId, this, eventTime);
     }
 
     /**
@@ -299,9 +354,8 @@ public static void activateApp(Context context, String applicationId) {
      * comes from this application's metadata. The application ID used to log events will be determined from
      * the app ID specified in the package metadata.
      *
-     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context Used to access the applicationId and the attributionId for non-authenticated users.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context) {
         return new AppEventsLogger(context, null, null);
@@ -310,12 +364,11 @@ public static AppEventsLogger newLogger(Context context) {
     /**
      * Build an AppEventsLogger instance to log events through.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
-     *                       will be used if it's open, otherwise the logging will happen against the default
-     *                       app ID specified via the app ID specified in the package metadata.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context Used to access the attributionId for non-authenticated users.
+     * @param session Explicitly specified Session to log events against.  If null, the activeSession
+     *                will be used if it's open, otherwise the logging will happen against the default
+     *                app ID specified via the app ID specified in the package metadata.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, Session session) {
         return new AppEventsLogger(context, null, session);
@@ -324,14 +377,13 @@ public static AppEventsLogger newLogger(Context context, Session session) {
     /**
      * Build an AppEventsLogger instance to log events through.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
-     *                       app ID specified in the package metadata will be used.
-     * @param session        Explicitly specified Session to log events against.  If null, the activeSession
-     *                       will be used if it's open, otherwise the logging will happen against the specified
-     *                       app ID.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                      app ID specified in the package metadata will be used.
+     * @param session       Explicitly specified Session to log events against.  If null, the activeSession
+     *                      will be used if it's open, otherwise the logging will happen against the specified
+     *                      app ID.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, String applicationId, Session session) {
         return new AppEventsLogger(context, applicationId, session);
@@ -341,12 +393,11 @@ public static AppEventsLogger newLogger(Context context, String applicationId, S
      * Build an AppEventsLogger instance to log events that are attributed to the application but not to
      * any particular Session.
      *
-     * @param context        Used to access the attributionId for non-authenticated users.
-     * @param applicationId  Explicitly specified Facebook applicationId to log events against.  If null, the default
-     *                       app ID specified
-     *                       in the package metadata will be used.
-     *
-     * @return          AppEventsLogger instance to invoke log* methods on.
+     * @param context       Used to access the attributionId for non-authenticated users.
+     * @param applicationId Explicitly specified Facebook applicationId to log events against.  If null, the default
+     *                      app ID specified
+     *                      in the package metadata will be used.
+     * @return AppEventsLogger instance to invoke log* methods on.
      */
     public static AppEventsLogger newLogger(Context context, String applicationId) {
         return new AppEventsLogger(context, applicationId, null);
@@ -365,6 +416,7 @@ public static AppEventsLogger newLogger(Context context, String applicationId) {
     /**
      * Access the behavior that AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
+     *
      * @return specified flush behavior.
      */
     public static FlushBehavior getFlushBehavior() {
@@ -376,6 +428,7 @@ public static FlushBehavior getFlushBehavior() {
     /**
      * Set the behavior that this AppEventsLogger uses to determine when to flush logged events to the server. This
      * setting applies to all instances of AppEventsLogger.
+     *
      * @param flushBehavior the desired behavior.
      */
     public static void setFlushBehavior(FlushBehavior flushBehavior) {
@@ -386,26 +439,28 @@ public static void setFlushBehavior(FlushBehavior flushBehavior) {
 
     /**
      * Log an app event with the specified name.
+     *
      * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
      *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
      *                  constants are applicable.
      *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
      *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
      *                  have no more than ~300 distinct event names.
-      */
+     */
     public void logEvent(String eventName) {
         logEvent(eventName, null);
     }
 
     /**
      * Log an app event with the specified name and the supplied value.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
-     *                  * @param eventName
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
+     *                   * @param eventName
      * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
      *                   instances of the event, so that average values can be determined, etc.
      */
@@ -415,12 +470,13 @@ public void logEvent(String eventName, double valueToSum) {
 
     /**
      * Log an app event with the specified name and set of parameters.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
      * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
      *                   events via different parameter values.  You can log on the order of 10 parameters with each
      *                   distinct eventName.  It's advisable to keep the number of unique values provided for each
@@ -434,12 +490,13 @@ public void logEvent(String eventName, Bundle parameters) {
 
     /**
      * Log an app event with the specified name, supplied value, and set of parameters.
-     * @param eventName eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
-     *                  {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
-     *                  constants are applicable.
-     *                  Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
-     *                  or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
-     *                  have no more than ~300 distinct event names.
+     *
+     * @param eventName  eventName used to denote the event.  Choose amongst the EVENT_NAME_* constants in
+     *                   {@link AppEventsConstants} when possible.  Or create your own if none of the EVENT_NAME_*
+     *                   constants are applicable.
+     *                   Event names should be 40 characters or less, alphanumeric, and can include spaces, underscores
+     *                   or hyphens, but mustn't have a space or hyphen as the first character.  Any given app should
+     *                   have no more than ~300 distinct event names.
      * @param valueToSum a value to associate with the event which will be summed up in Insights for across all
      *                   instances of the event, so that average values can be determined, etc.
      * @param parameters A Bundle of parameters to log with the event.  Insights will allow looking at the logs of these
@@ -456,9 +513,9 @@ public void logEvent(String eventName, double valueToSum, Bundle parameters) {
     /**
      * Logs a purchase event with Facebook, in the specified amount and with the specified currency.
      *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
+     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                       will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency       Currency used to specify the amount.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
         logPurchase(purchaseAmount, currency, null);
@@ -468,11 +525,11 @@ public void logPurchase(BigDecimal purchaseAmount, Currency currency) {
      * Logs a purchase event with Facebook, in the specified amount and with the specified currency.  Additional
      * detail about the purchase can be passed in through the parameters bundle.
      *
-     * @param purchaseAmount  Amount of purchase, in the currency specified by the 'currency' parameter. This value
-     *                        will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
-     * @param currency        Currency used to specify the amount.
-     * @param parameters      Arbitrary additional information for describing this event.  Should have no more than
-     *                        10 entries, and keys should be mostly consistent from one purchase event to the next.
+     * @param purchaseAmount Amount of purchase, in the currency specified by the 'currency' parameter. This value
+     *                       will be rounded to the thousandths place (e.g., 12.34567 becomes 12.346).
+     * @param currency       Currency used to specify the amount.
+     * @param parameters     Arbitrary additional information for describing this event.  Should have no more than
+     *                       10 entries, and keys should be mostly consistent from one purchase event to the next.
      */
     public void logPurchase(BigDecimal purchaseAmount, Currency currency, Bundle parameters) {
 
@@ -527,6 +584,7 @@ public void logSdkEvent(String eventName, Double valueToSum, Bundle parameters)
 
     /**
      * Returns the app ID this logger was configured to log to.
+     *
      * @return the Facebook app ID
      */
     public String getApplicationId() {
@@ -537,6 +595,7 @@ public String getApplicationId() {
     // Private implementation
     //
 
+    @SuppressWarnings("UnusedDeclaration")
     private enum FlushReason {
         EXPLICIT,
         TIMER,
@@ -546,6 +605,7 @@ public String getApplicationId() {
         EAGER_FLUSHING_EVENT,
     }
 
+    @SuppressWarnings("UnusedDeclaration")
     private enum FlushResult {
         SUCCESS,
         SERVER_ERROR,
@@ -557,7 +617,6 @@ public String getApplicationId() {
      * Constructor is private, newLogger() methods should be used to build an instance.
      */
     private AppEventsLogger(Context context, String applicationId, Session session) {
-
         Validate.notNull(context, "context");
         this.context = context;
 
@@ -565,9 +624,13 @@ private AppEventsLogger(Context context, String applicationId, Session session)
             session = Session.getActiveSession();
         }
 
-        if (session != null) {
+        // If we have a session and the appId passed is null or matches the session's app ID:
+        if (session != null &&
+                (applicationId == null || applicationId.equals(session.getApplicationId()))
+                ) {
             accessTokenAppId = new AccessTokenAppIdPair(session);
         } else {
+            // If no app ID passed, get it from the manifest:
             if (applicationId == null) {
                 applicationId = Utility.getMetadataApplicationId(context);
             }
@@ -576,10 +639,6 @@ private AppEventsLogger(Context context, String applicationId, Session session)
 
         synchronized (staticLock) {
 
-            if (hashedDeviceAndAppId == null) {
-                hashedDeviceAndAppId = Utility.getHashedDeviceAndAppID(context, applicationId);
-            }
-
             if (applicationContext == null) {
                 applicationContext = context.getApplicationContext();
             }
@@ -590,85 +649,67 @@ private AppEventsLogger(Context context, String applicationId, Session session)
 
     private static void initializeTimersIfNeeded() {
         synchronized (staticLock) {
-            if (flushTimer != null) {
+            if (backgroundExecutor != null) {
                 return;
             }
-            flushTimer = new Timer();
-            supportsAttributionRecheckTimer = new Timer();
+            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
         }
 
-        flushTimer.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                            flushAndWait(FlushReason.TIMER);
-                        }
-                    }
-                },
-                0,  // start immediately
-                FLUSH_PERIOD_IN_SECONDS * 1000);
-
-        supportsAttributionRecheckTimer.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        Set<String> applicationIds = new HashSet<String>();
-                        synchronized (staticLock) {
-                            for (AccessTokenAppIdPair accessTokenAppId  : stateMap.keySet()) {
-                                applicationIds.add(accessTokenAppId.getApplicationId());
-                            }
-                        }
-                        for (String applicationId : applicationIds) {
-                            Utility.queryAppSettings(applicationId, true);
-                        }
+        final Runnable flushRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
+                    flushAndWait(FlushReason.TIMER);
+                }
+            }
+        };
+
+        backgroundExecutor.scheduleAtFixedRate(
+                flushRunnable,
+                0,
+                FLUSH_PERIOD_IN_SECONDS,
+                TimeUnit.SECONDS
+        );
+
+        final Runnable attributionRecheckRunnable = new Runnable() {
+            @Override
+            public void run() {
+                Set<String> applicationIds = new HashSet<String>();
+                synchronized (staticLock) {
+                    for (AccessTokenAppIdPair accessTokenAppId : stateMap.keySet()) {
+                        applicationIds.add(accessTokenAppId.getApplicationId());
                     }
-                },
-                0,   // start immediately
-                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS * 1000);
+                }
+                for (String applicationId : applicationIds) {
+                    Utility.queryAppSettings(applicationId, true);
+                }
+            }
+        };
+
+        backgroundExecutor.scheduleAtFixedRate(
+                attributionRecheckRunnable,
+                0,
+                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
+                TimeUnit.SECONDS
+        );
     }
 
     private void logEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
-
-        AppEvent event = new AppEvent(eventName, valueToSum, parameters, isImplicitlyLogged);
+        AppEvent event = new AppEvent(this.context, eventName, valueToSum, parameters, isImplicitlyLogged);
         logEvent(context, event, accessTokenAppId);
     }
 
-    private static void logEvent(Context context, AppEvent event, AccessTokenAppIdPair accessTokenAppId) {
-        if(shouldSuppressEvent(event)) {
-            return;
-        }
-
-        SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
-        state.addEvent(event);
-
-        flushIfNecessary();
-    }
-
-    // This will also update the timestamp based on specified behavior.
-    private static boolean shouldSuppressEvent(AppEvent event) {
-        EventSuppression suppressionInfo = mapEventNameToSuppress.get(event.getName());
-        if (suppressionInfo == null) {
-            return false;
-        }
-
-        Date timestamp = mapEventsToSuppressionTime.get(event.getName());
-        boolean suppressed;
-        if (timestamp == null) {
-            suppressed = false;
-        } else {
-            long delta = new Date().getTime() - timestamp.getTime();
-            suppressed = delta < (suppressionInfo.getTimeoutPeriod() * 1000);
-        }
-
-        // Update the time if we're not suppressed, OR if we are suppressed but the behavior is to reset even on
-        // suppressed events.
-        if (!suppressed ||
-                suppressionInfo.getBehavior() == SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED) {
-            mapEventsToSuppressionTime.put(event.getName(), new Date());
-        }
-
-        return suppressed;
+    private static void logEvent(final Context context,
+                                 final AppEvent event,
+                                 final AccessTokenAppIdPair accessTokenAppId) {
+        Settings.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
+                state.addEvent(event);
+                flushIfNecessary();
+            }
+        });
     }
 
     static void eagerFlush() {
@@ -700,13 +741,21 @@ private static int getAccumulatedEventCount() {
 
     // Creates a new SessionEventsState if not already in the map.
     private static SessionEventsState getSessionEventsState(Context context, AccessTokenAppIdPair accessTokenAppId) {
+        // Do this work outside of the lock to prevent deadlocks in implementation of
+        //  AdvertisingIdClient.getAdvertisingIdInfo, because that implementation blocks waiting on the main thread,
+        //  which may also grab this staticLock.
+        SessionEventsState state = stateMap.get(accessTokenAppId);
+        AttributionIdentifiers attributionIdentifiers = null;
+        if (state == null) {
+            // Retrieve attributionId, but we will only send it if attribution is supported for the app.
+            attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
+        }
+
         synchronized (staticLock) {
-            SessionEventsState state = stateMap.get(accessTokenAppId);
+            // Check state again while we're locked.
+            state = stateMap.get(accessTokenAppId);
             if (state == null) {
-                // Retrieve attributionId, but we will only send it if attribution is supported for the app.
-                String attributionId = Settings.getAttributionId(context.getContentResolver());
-
-                state = new SessionEventsState(attributionId, context.getPackageName(), hashedDeviceAndAppId);
+                state = new SessionEventsState(attributionIdentifiers, context.getPackageName(), getAnonymousAppDeviceGUID(context));
                 stateMap.put(accessTokenAppId, state);
             }
             return state;
@@ -746,7 +795,7 @@ private static void flushAndWait(final FlushReason reason) {
         try {
             flushResults = buildAndExecuteRequests(reason, keysToFlush);
         } catch (Exception e) {
-            Log.d(TAG, "Caught unexpected exception while flushing: " + e.toString());
+            Utility.logd(TAG, "Caught unexpected exception while flushing: ", e);
         }
 
         synchronized (staticLock) {
@@ -802,8 +851,9 @@ private static FlushStatistics buildAndExecuteRequests(FlushReason reason, Set<A
     }
 
     private static Request buildRequestForSession(final AccessTokenAppIdPair accessTokenAppId,
-            final SessionEventsState sessionEventsState, final boolean limitEventUsage,
-            final FlushStatistics flushState) {
+                                                  final SessionEventsState sessionEventsState,
+                                                  final boolean limitEventUsage,
+                                                  final FlushStatistics flushState) {
         String applicationId = accessTokenAppId.getApplicationId();
 
         Utility.FetchedAppSettings fetchedAppSettings = Utility.queryAppSettings(applicationId, false);
@@ -821,8 +871,15 @@ private static Request buildRequestForSession(final AccessTokenAppIdPair accessT
         requestParameters.putString("access_token", accessTokenAppId.getAccessToken());
         postRequest.setParameters(requestParameters);
 
-        int numEvents = sessionEventsState.populateRequest(postRequest, fetchedAppSettings.supportsImplicitLogging(),
-                fetchedAppSettings.supportsAttribution(), limitEventUsage);
+        if (fetchedAppSettings == null) {
+            return null;
+        }
+
+        int numEvents = sessionEventsState.populateRequest(
+                postRequest,
+                fetchedAppSettings.supportsImplicitLogging(),
+                limitEventUsage);
+
         if (numEvents == 0) {
             return null;
         }
@@ -840,7 +897,7 @@ public void onCompleted(Response response) {
     }
 
     private static void handleResponse(AccessTokenAppIdPair accessTokenAppId, Request request, Response response,
-            SessionEventsState sessionEventsState, FlushStatistics flushState) {
+                                       SessionEventsState sessionEventsState, FlushStatistics flushState) {
         FacebookRequestError error = response.getError();
         String resultDescription = "Success";
 
@@ -899,7 +956,7 @@ private static int accumulatePersistedEvents() {
         PersistedEvents persistedEvents = PersistedEvents.readAndClearStore(applicationContext);
 
         int result = 0;
-        for(AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
+        for (AccessTokenAppIdPair accessTokenAppId : persistedEvents.keySet()) {
             SessionEventsState sessionEventsState = getSessionEventsState(applicationContext, accessTokenAppId);
 
             List<AppEvent> events = persistedEvents.getEvents(accessTokenAppId);
@@ -919,6 +976,101 @@ private static void notifyDeveloperError(String message) {
         Logger.log(LoggingBehavior.DEVELOPER_ERRORS, "AppEvents", message);
     }
 
+    /**
+     * Source Application setters and getters
+     */
+    private static void setSourceApplication(Activity activity) {
+
+        ComponentName callingApplication = activity.getCallingActivity();
+        if (callingApplication != null) {
+            String callingApplicationPackage = callingApplication.getPackageName();
+            if (callingApplicationPackage.equals(activity.getPackageName())) {
+                // open by own app.
+                resetSourceApplication();
+                return;
+            }
+            sourceApplication = callingApplicationPackage;
+        }
+
+        // Tap icon to open an app will still get the old intent if the activity was opened by an intent before.
+        // Introduce an extra field in the intent to force clear the sourceApplication.
+        Intent openIntent = activity.getIntent();
+        if (openIntent == null || openIntent.getBooleanExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, false)) {
+            resetSourceApplication();
+            return;
+        }
+
+        Bundle applinkData = AppLinks.getAppLinkData(openIntent);
+
+        if (applinkData == null) {
+            resetSourceApplication();
+            return;
+        }
+
+        isOpenedByApplink = true;
+
+        Bundle applinkReferrerData = applinkData.getBundle("referer_app_link");
+
+        if (applinkReferrerData == null) {
+            sourceApplication = null;
+            return;
+        }
+
+        String applinkReferrerPackage = applinkReferrerData.getString("package");
+        sourceApplication = applinkReferrerPackage;
+
+        // Mark this intent has been used to avoid use this intent again and again.
+        openIntent.putExtra(SOURCE_APPLICATION_HAS_BEEN_SET_BY_THIS_INTENT, true);
+
+        return;
+    }
+
+    static void setSourceApplication(String applicationPackage, boolean openByAppLink) {
+        sourceApplication = applicationPackage;
+        isOpenedByApplink = openByAppLink;
+    }
+
+    static String getSourceApplication() {
+        String openType = "Unclassified";
+        if (isOpenedByApplink) {
+            openType = "Applink";
+        }
+        if (sourceApplication != null) {
+            return openType + "(" + sourceApplication + ")";
+        }
+        return openType;
+    }
+
+    static void resetSourceApplication() {
+        sourceApplication = null;
+        isOpenedByApplink = false;
+    }
+
+    // Each app/device pair gets an GUID that is sent back with App Events and persisted with this
+    // app/device pair.
+    static String getAnonymousAppDeviceGUID(Context context) {
+
+        if (anonymousAppDeviceGUID == null) {
+            synchronized (staticLock) {
+                if (anonymousAppDeviceGUID == null) {
+
+                    SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+                    anonymousAppDeviceGUID = preferences.getString("anonymousAppDeviceGUID", null);
+                    if (anonymousAppDeviceGUID == null) {
+                        // Arbitrarily prepend XZ to distinguish from device supplied identifiers.
+                        anonymousAppDeviceGUID = "XZ" + UUID.randomUUID().toString();
+
+                        context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE)
+                                .edit()
+                                .putString("anonymousAppDeviceGUID", anonymousAppDeviceGUID)
+                                .apply();
+                    }
+                }
+            }
+        }
+
+        return anonymousAppDeviceGUID;
+    }
 
     //
     // Deprecated Stuff
@@ -929,9 +1081,9 @@ private static void notifyDeveloperError(String message) {
         private List<AppEvent> accumulatedEvents = new ArrayList<AppEvent>();
         private List<AppEvent> inFlightEvents = new ArrayList<AppEvent>();
         private int numSkippedEventsDueToFullBuffer;
-        private String attributionId;
+        private AttributionIdentifiers attributionIdentifiers;
         private String packageName;
-        private String hashedDeviceAndAppId;
+        private String anonymousAppDeviceGUID;
 
         public static final String EVENT_COUNT_KEY = "event_count";
         public static final String ENCODED_EVENTS_KEY = "encoded_events";
@@ -939,10 +1091,10 @@ private static void notifyDeveloperError(String message) {
 
         private final int MAX_ACCUMULATED_LOG_EVENTS = 1000;
 
-        public SessionEventsState(String attributionId, String packageName, String hashedDeviceAndAppId) {
-            this.attributionId = attributionId;
+        public SessionEventsState(AttributionIdentifiers identifiers, String packageName, String anonymousGUID) {
+            this.attributionIdentifiers = identifiers;
             this.packageName = packageName;
-            this.hashedDeviceAndAppId = hashedDeviceAndAppId;
+            this.anonymousAppDeviceGUID = anonymousGUID;
         }
 
         // Synchronize here and in other methods on this class, because could be coming in from different
@@ -968,7 +1120,7 @@ public synchronized void clearInFlightAndStats(boolean moveToAccumulated) {
         }
 
         public int populateRequest(Request request, boolean includeImplicitEvents,
-                boolean includeAttribution, boolean limitEventUsage) {
+                                   boolean limitEventUsage) {
 
             int numSkipped;
             JSONArray jsonArray;
@@ -991,7 +1143,7 @@ public int populateRequest(Request request, boolean includeImplicitEvents,
                 }
             }
 
-            populateRequest(request, numSkipped, jsonArray, includeAttribution, limitEventUsage);
+            populateRequest(request, numSkipped, jsonArray, limitEventUsage);
             return jsonArray.length();
         }
 
@@ -1010,8 +1162,8 @@ public synchronized void accumulatePersistedEvents(List<AppEvent> events) {
             accumulatedEvents.addAll(events);
         }
 
-        private void populateRequest(Request request, int numSkipped, JSONArray events, boolean includeAttribution,
-                boolean limitEventUsage) {
+        private void populateRequest(Request request, int numSkipped, JSONArray events,
+                                     boolean limitEventUsage) {
             GraphObject publishParams = GraphObject.Factory.create();
             publishParams.setProperty("event", "CUSTOM_APP_EVENTS");
 
@@ -1019,9 +1171,16 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
                 publishParams.setProperty("num_skipped_events", numSkipped);
             }
 
-            if (includeAttribution) {
-                Utility.setAppEventAttributionParameters(publishParams, attributionId,
-                        hashedDeviceAndAppId, limitEventUsage);
+            Utility.setAppEventAttributionParameters(publishParams, attributionIdentifiers,
+                    anonymousAppDeviceGUID, limitEventUsage);
+
+            // The code to get all the Extended info is safe but just in case we can wrap the whole
+            // call in its own try/catch block since some of the things it does might cause
+            // unexpected exceptions on rooted/funky devices:
+            try {
+                Utility.setAppEventExtendedDeviceInfoParameters(publishParams, applicationContext);
+            } catch (Exception e) {
+                // Swallow
             }
 
             publishParams.setProperty("application_package_name", packageName);
@@ -1061,19 +1220,23 @@ private void populateRequest(Request request, int numSkipped, JSONArray events,
         private static final HashSet<String> validatedIdentifiers = new HashSet<String>();
         private String name;
 
-        public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
-
-            validateIdentifier(eventName);
-
-            this.name = eventName;
-
-            isImplicit = isImplicitlyLogged;
-            jsonObject = new JSONObject();
-
+        public AppEvent(
+                Context context,
+                String eventName,
+                Double valueToSum,
+                Bundle parameters,
+                boolean isImplicitlyLogged
+        ) {
             try {
+                validateIdentifier(eventName);
+
+                this.name = eventName;
+                isImplicit = isImplicitlyLogged;
+                jsonObject = new JSONObject();
 
                 jsonObject.put("_eventName", eventName);
                 jsonObject.put("_logTime", System.currentTimeMillis() / 1000);
+                jsonObject.put("_ui", Utility.getActivityName(context));
 
                 if (valueToSum != null) {
                     jsonObject.put("_valueToSum", valueToSum.doubleValue());
@@ -1096,8 +1259,11 @@ public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean
                         Object value = parameters.get(key);
                         if (!(value instanceof String) && !(value instanceof Number)) {
                             throw new FacebookException(
-                                    String.format("Parameter value '%s' for key '%s' should be a string or a numeric type.",
-                                            value, key));
+                                    String.format(
+                                            "Parameter value '%s' for key '%s' should be a string or a numeric type.",
+                                            value,
+                                            key)
+                            );
                         }
 
                         jsonObject.put(key, value.toString());
@@ -1115,6 +1281,11 @@ public AppEvent(String eventName, Double valueToSum, Bundle parameters, boolean
                         "JSON encoding for app event failed: '%s'", jsonException.toString());
                 jsonObject = null;
 
+            } catch (FacebookException e) {
+                // If any of the above failed, just consider this an illegal event.
+                Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents",
+                        "Invalid app event name or parameter:", e.toString());
+                jsonObject = null;
             }
         }
 
@@ -1127,14 +1298,16 @@ private AppEvent(String jsonString, boolean isImplicit) throws JSONException {
             this.isImplicit = isImplicit;
         }
 
-        public boolean getIsImplicit() { return isImplicit; }
+        public boolean getIsImplicit() {
+            return isImplicit;
+        }
 
         public JSONObject getJSONObject() {
             return jsonObject;
         }
 
         // throw exception if not valid.
-        private void validateIdentifier(String identifier) {
+        private void validateIdentifier(String identifier) throws FacebookException {
 
             // Identifier should be 40 chars or less, and only have 0-9A-Za-z, underscore, hyphen, and space (but no
             // hyphen or space in the first position).
@@ -1146,7 +1319,8 @@ private void validateIdentifier(String identifier) {
                     identifier = "<None Provided>";
                 }
                 throw new FacebookException(
-                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH));
+                    String.format("Identifier '%s' must be less than %d characters", identifier, MAX_IDENTIFIER_LENGTH)
+                );
             }
 
             boolean alreadyValidated = false;
@@ -1162,11 +1336,12 @@ private void validateIdentifier(String identifier) {
                 } else {
                     throw new FacebookException(
                             String.format("Skipping event named '%s' due to illegal name - must be under 40 chars " +
-                                          "and alphanumeric, _, - or space, and not start with a space or hyphen.",
-                                          identifier));
+                                            "and alphanumeric, _, - or space, and not start with a space or hyphen.",
+                                    identifier
+                            )
+                    );
                 }
             }
-
         }
 
         private static class SerializationProxyV1 implements Serializable {
@@ -1195,6 +1370,137 @@ public String toString() {
         }
     }
 
+    static class PersistedAppSessionInfo {
+        private static final String PERSISTED_SESSION_INFO_FILENAME =
+                "AppEventsLogger.persistedsessioninfo";
+
+        private static final Object staticLock = new Object();
+        private static boolean hasChanges = false;
+        private static boolean isLoaded = false;
+        private static Map<AccessTokenAppIdPair, FacebookTimeSpentData> appSessionInfoMap;
+
+        private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
+            @Override
+            public void run() {
+                PersistedAppSessionInfo.saveAppSessionInformation(applicationContext);
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        private static void restoreAppSessionInformation(Context context) {
+            ObjectInputStream ois = null;
+
+            synchronized (staticLock) {
+                if (!isLoaded) {
+                    try {
+                        ois =
+                                new ObjectInputStream(
+                                        context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
+                        appSessionInfoMap =
+                                (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>) ois.readObject();
+                        Logger.log(
+                                LoggingBehavior.APP_EVENTS,
+                                "AppEvents",
+                                "App session info loaded");
+                    } catch (FileNotFoundException fex) {
+                    } catch (Exception e) {
+                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                    } finally {
+                        Utility.closeQuietly(ois);
+                        context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
+                        if (appSessionInfoMap == null) {
+                            appSessionInfoMap =
+                                    new HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>();
+                        }
+                        // Regardless of the outcome of the load, the session information cache
+                        // is always deleted. Therefore, always treat the session information cache
+                        // as loaded
+                        isLoaded = true;
+                        hasChanges = false;
+                    }
+                }
+            }
+        }
+
+        static void saveAppSessionInformation(Context context) {
+            ObjectOutputStream oos = null;
+
+            synchronized (staticLock) {
+                if (hasChanges) {
+                    try {
+                        oos = new ObjectOutputStream(
+                                new BufferedOutputStream(
+                                        context.openFileOutput(
+                                                PERSISTED_SESSION_INFO_FILENAME,
+                                                Context.MODE_PRIVATE)
+                                )
+                        );
+                        oos.writeObject(appSessionInfoMap);
+                        hasChanges = false;
+                        Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents", "App session info saved");
+                    } catch (Exception e) {
+                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                    } finally {
+                        Utility.closeQuietly(oos);
+                    }
+                }
+            }
+        }
+
+        static void onResume(
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId,
+                AppEventsLogger logger,
+                long eventTime,
+                String sourceApplicationInfo
+        ) {
+            synchronized (staticLock) {
+                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+                timeSpentData.onResume(logger, eventTime, sourceApplicationInfo);
+                onTimeSpentDataUpdate();
+            }
+        }
+
+        static void onSuspend(
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId,
+                AppEventsLogger logger,
+                long eventTime
+        ) {
+            synchronized (staticLock) {
+                FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+                timeSpentData.onSuspend(logger, eventTime);
+                onTimeSpentDataUpdate();
+            }
+        }
+
+        private static FacebookTimeSpentData getTimeSpentData(
+                Context context,
+                AccessTokenAppIdPair accessTokenAppId
+        ) {
+            restoreAppSessionInformation(context);
+            FacebookTimeSpentData result = null;
+
+            result = appSessionInfoMap.get(accessTokenAppId);
+            if (result == null) {
+                result = new FacebookTimeSpentData();
+                appSessionInfoMap.put(accessTokenAppId, result);
+            }
+
+            return result;
+        }
+
+        private static void onTimeSpentDataUpdate() {
+            if (!hasChanges) {
+                hasChanges = true;
+                backgroundExecutor.schedule(
+                        appSessionInfoFlushRunnable,
+                        FLUSH_APP_SESSION_INFO_IN_SECONDS,
+                        TimeUnit.SECONDS);
+            }
+        }
+    }
+
     // Read/write operations are thread-safe/atomic across all instances of PersistedEvents, but modifications
     // to any individual instance are not thread-safe.
     static class PersistedEvents {
@@ -1219,15 +1525,16 @@ public static PersistedEvents readAndClearStore(Context context) {
                 return persistedEvents;
             }
         }
+
         public static void persistEvents(Context context, AccessTokenAppIdPair accessTokenAppId,
-                SessionEventsState eventsToPersist) {
+                                         SessionEventsState eventsToPersist) {
             Map<AccessTokenAppIdPair, SessionEventsState> map = new HashMap<AccessTokenAppIdPair, SessionEventsState>();
             map.put(accessTokenAppId, eventsToPersist);
             persistEvents(context, map);
         }
 
         public static void persistEvents(Context context,
-                Map<AccessTokenAppIdPair, SessionEventsState> eventsToPersist) {
+                                         Map<AccessTokenAppIdPair, SessionEventsState> eventsToPersist) {
             synchronized (staticLock) {
                 // Note that we don't track which instance of AppEventsLogger added a particular event to
                 // SessionEventsState; when a particular Context is being destroyed, we'll persist all accumulated
diff --git a/facebook/src/com/facebook/AppLinkData.java b/facebook/src/com/facebook/AppLinkData.java
index 6246c73da..1a2e0aaac 100644
--- a/facebook/src/com/facebook/AppLinkData.java
+++ b/facebook/src/com/facebook/AppLinkData.java
@@ -21,16 +21,18 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
+import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.PlatformServiceClient;
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
+import com.facebook.model.GraphObject;
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.Iterator;
+
 /**
  * Class to encapsulate an app link, and provide methods for constructing the data from various sources
  */
@@ -40,21 +42,44 @@
      * Key that should be used to pull out the UTC Unix tap-time from the arguments for this app link.
      */
     public static final String ARGUMENTS_TAPTIME_KEY = "com.facebook.platform.APPLINK_TAP_TIME_UTC";
+    /**
+     * Key that should be used to get the "referer_data" field for this app link.
+     */
+    public static final String ARGUMENTS_REFERER_DATA_KEY = "referer_data";
+
+    /**
+     * Key that should be used to pull out the native class that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_CLASS_KEY = "com.facebook.platform.APPLINK_NATIVE_CLASS";
 
-    private static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
+    /**
+     * Key that should be used to pull out the native url that would have been used if the applink was deferred.
+     */
+    public static final String ARGUMENTS_NATIVE_URL = "com.facebook.platform.APPLINK_NATIVE_URL";
+
+    static final String BUNDLE_APPLINK_ARGS_KEY = "com.facebook.platform.APPLINK_ARGS";
+    private static final String BUNDLE_AL_APPLINK_DATA_KEY = "al_applink_data";
     private static final String APPLINK_BRIDGE_ARGS_KEY = "bridge_args";
     private static final String APPLINK_METHOD_ARGS_KEY = "method_args";
     private static final String APPLINK_VERSION_KEY = "version";
     private static final String BRIDGE_ARGS_METHOD_KEY = "method";
+    private static final String DEFERRED_APP_LINK_EVENT = "DEFERRED_APP_LINK";
+    private static final String DEFERRED_APP_LINK_PATH = "%s/activities";
+
+    private static final String DEFERRED_APP_LINK_ARGS_FIELD = "applink_args";
+    private static final String DEFERRED_APP_LINK_CLASS_FIELD = "applink_class";
+    private static final String DEFERRED_APP_LINK_CLICK_TIME_FIELD = "click_time";
+    private static final String DEFERRED_APP_LINK_URL_FIELD = "applink_url";
+
     private static final String METHOD_ARGS_TARGET_URL_KEY = "target_url";
     private static final String METHOD_ARGS_REF_KEY = "ref";
+    private static final String REFERER_DATA_REF_KEY = "fb_ref";
     private static final String TAG = AppLinkData.class.getCanonicalName();
 
-    private String[] ref;
+    private String ref;
     private Uri targetUri;
-    @SuppressWarnings("unused")
-    private String version;
     private JSONObject arguments;
+    private Bundle argumentBundle;
 
     /**
      * Asynchronously fetches app link information that might have been stored for use
@@ -88,41 +113,92 @@ public static void fetchDeferredAppLinkData(
 
         Validate.notNull(applicationId, "applicationId");
 
-        DeferredAppLinkDataClient client = new DeferredAppLinkDataClient(context, applicationId);
-        DeferredAppLinkDataClient.CompletedListener callback = new DeferredAppLinkDataClient.CompletedListener() {
+        final Context applicationContext = context.getApplicationContext();
+        final String applicationIdCopy = applicationId;
+        Settings.getExecutor().execute(new Runnable() {
             @Override
-            public void completed(Bundle result) {
-                AppLinkData appLinkData = null;
-                if (result != null) {
-                    final String appLinkArgsJsonString = result.getString(BUNDLE_APPLINK_ARGS_KEY);
-                    final long tapTimeUtc = result.getLong(ARGUMENTS_TAPTIME_KEY, -1);
+            public void run() {
+                fetchDeferredAppLinkFromServer(applicationContext, applicationIdCopy, completionHandler);
+            }
+        });
+    }
+
+    private static void fetchDeferredAppLinkFromServer(
+            Context context,
+            String applicationId,
+            final CompletionHandler completionHandler) {
+
+        GraphObject deferredApplinkParams = GraphObject.Factory.create();
+        deferredApplinkParams.setProperty("event", DEFERRED_APP_LINK_EVENT);
+        Utility.setAppEventAttributionParameters(deferredApplinkParams,
+                AttributionIdentifiers.getAttributionIdentifiers(context),
+                AppEventsLogger.getAnonymousAppDeviceGUID(context),
+                Settings.getLimitEventAndDataUsage(context));
+        deferredApplinkParams.setProperty("application_package_name", context.getPackageName());
+
+        String deferredApplinkUrlPath = String.format(DEFERRED_APP_LINK_PATH, applicationId);
+        AppLinkData appLinkData = null;
 
-                    // Now create the app link
+        try {
+            Request deferredApplinkRequest = Request.newPostRequest(
+                    null, deferredApplinkUrlPath, deferredApplinkParams, null);
+            Response deferredApplinkResponse = deferredApplinkRequest.executeAndWait();
+            GraphObject wireResponse = deferredApplinkResponse.getGraphObject();
+            JSONObject jsonResponse = wireResponse != null ? wireResponse.getInnerJSONObject() : null;
+            if (jsonResponse != null) {
+                final String appLinkArgsJsonString = jsonResponse.optString(DEFERRED_APP_LINK_ARGS_FIELD);
+                final long tapTimeUtc = jsonResponse.optLong(DEFERRED_APP_LINK_CLICK_TIME_FIELD, -1);
+                final String appLinkClassName = jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
+                final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
+
+                if (!TextUtils.isEmpty(appLinkArgsJsonString)) {
                     appLinkData = createFromJson(appLinkArgsJsonString);
+
                     if (tapTimeUtc != -1) {
                         try {
-                            appLinkData.getArguments().put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_TAPTIME_KEY, tapTimeUtc);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_TAPTIME_KEY, Long.toString(tapTimeUtc));
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+
+                    if (appLinkClassName != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_CLASS_KEY, appLinkClassName);
+                            }
+                        } catch (JSONException e) {
+                            Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
+                        }
+                    }
+
+                    if (appLinkUrl != null) {
+                        try {
+                            if (appLinkData.arguments != null) {
+                                appLinkData.arguments.put(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
+                            if (appLinkData.argumentBundle != null) {
+                                appLinkData.argumentBundle.putString(ARGUMENTS_NATIVE_URL, appLinkUrl);
+                            }
                         } catch (JSONException e) {
                             Log.d(TAG, "Unable to put tap time in AppLinkData.arguments");
                         }
                     }
                 }
-                completionHandler.onDeferredAppLinkDataFetched(appLinkData);
             }
-        };
-        client.setCompletedListener(callback);
-
-        if (!client.start()) {
-            // there is not a sufficient version of fb4a present to return a deferred app link, so kick off
-            // a call to the completion handler.
-            Handler handler = new Handler(Looper.getMainLooper());
-            handler.post(new Runnable() {
-                @Override
-                public void run() {
-                    completionHandler.onDeferredAppLinkDataFetched(null);
-                }
-            });
+        } catch (Exception e) {
+            Utility.logd(TAG, "Unable to fetch deferred applink from server");
         }
+
+        completionHandler.onDeferredAppLinkDataFetched(appLinkData);
     }
 
     /**
@@ -137,9 +213,11 @@ public static AppLinkData createFromActivity(Activity activity) {
             return null;
         }
 
-        String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
-        // Try v2 app linking first
-        AppLinkData appLinkData = createFromJson(appLinkArgsJsonString);
+        AppLinkData appLinkData = createFromAlApplinkData(intent);
+        if (appLinkData == null) {
+            String appLinkArgsJsonString = intent.getStringExtra(BUNDLE_APPLINK_ARGS_KEY);
+            appLinkData = createFromJson(appLinkArgsJsonString);
+        }
         if (appLinkData == null) {
             // Try regular app linking
             appLinkData = createFromUri(intent.getData());
@@ -148,6 +226,30 @@ public static AppLinkData createFromActivity(Activity activity) {
         return appLinkData;
     }
 
+    private static AppLinkData createFromAlApplinkData(Intent intent) {
+        Bundle applinks = intent.getBundleExtra(BUNDLE_AL_APPLINK_DATA_KEY);
+        if (applinks == null) {
+            return null;
+        }
+
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = intent.getData();
+        if (appLinkData.targetUri == null) {
+            String targetUriString = applinks.getString(METHOD_ARGS_TARGET_URL_KEY);
+            if (targetUriString != null) {
+                appLinkData.targetUri = Uri.parse(targetUriString);
+            }
+        }
+        appLinkData.argumentBundle = applinks;
+        appLinkData.arguments = null;
+        Bundle refererData = applinks.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        if (refererData != null) {
+            appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
+        }
+
+        return appLinkData;
+    }
+
     private static AppLinkData createFromJson(String jsonString) {
         if (jsonString  == null) {
             return null;
@@ -163,13 +265,16 @@ private static AppLinkData createFromJson(String jsonString) {
             if (method.equals("applink") && version.equals("2")) {
                 // We have a new deep link
                 AppLinkData appLinkData = new AppLinkData();
-                appLinkData.version = version;
 
                 appLinkData.arguments = appLinkArgsJson.getJSONObject(APPLINK_METHOD_ARGS_KEY);
+                // first look for the "ref" key in the top level args
                 if (appLinkData.arguments.has(METHOD_ARGS_REF_KEY)) {
-                    String ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
-                    if (ref != null) {
-                        appLinkData.ref = ref.split(",");
+                    appLinkData.ref = appLinkData.arguments.getString(METHOD_ARGS_REF_KEY);
+                } else if (appLinkData.arguments.has(ARGUMENTS_REFERER_DATA_KEY)) {
+                    // if it's not in the top level args, it could be in the "referer_data" blob
+                    JSONObject refererData = appLinkData.arguments.getJSONObject(ARGUMENTS_REFERER_DATA_KEY);
+                    if (refererData.has(REFERER_DATA_REF_KEY)) {
+                        appLinkData.ref = refererData.getString(REFERER_DATA_REF_KEY);
                     }
                 }
 
@@ -177,10 +282,14 @@ private static AppLinkData createFromJson(String jsonString) {
                     appLinkData.targetUri = Uri.parse(appLinkData.arguments.getString(METHOD_ARGS_TARGET_URL_KEY));
                 }
 
+                appLinkData.argumentBundle = toBundle(appLinkData.arguments);
+
                 return appLinkData;
             }
         } catch (JSONException e) {
-            Log.d(TAG, "Unable to parse AppLink JSON");
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
+        } catch (FacebookException e) {
+            Log.d(TAG, "Unable to parse AppLink JSON", e);
         }
 
         return null;
@@ -191,39 +300,102 @@ private static AppLinkData createFromUri(Uri appLinkDataUri) {
             return null;
         }
 
-        // TODO : Try old-school deep linking
-        // Task : #2583027
-       return null;
+        AppLinkData appLinkData = new AppLinkData();
+        appLinkData.targetUri = appLinkDataUri;
+        return appLinkData;
+    }
+
+    private static Bundle toBundle(JSONObject node) throws JSONException {
+        Bundle bundle = new Bundle();
+        @SuppressWarnings("unchecked")
+        Iterator<String> fields = node.keys();
+        while (fields.hasNext()) {
+            String key = fields.next();
+            Object value;
+            value = node.get(key);
+
+            if (value instanceof JSONObject) {
+                bundle.putBundle(key, toBundle((JSONObject) value));
+            } else if (value instanceof JSONArray) {
+                JSONArray valueArr = (JSONArray) value;
+                if (valueArr.length() == 0) {
+                    bundle.putStringArray(key, new String[0]);
+                } else {
+                    Object firstNode = valueArr.get(0);
+                    if (firstNode instanceof JSONObject) {
+                        Bundle[] bundles = new Bundle[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            bundles[i] = toBundle(valueArr.getJSONObject(i));
+                        }
+                        bundle.putParcelableArray(key, bundles);
+                    } else if (firstNode instanceof JSONArray) {
+                        // we don't support nested arrays
+                        throw new FacebookException("Nested arrays are not supported.");
+                    } else { // just use the string value
+                        String[] arrValues = new String[valueArr.length()];
+                        for (int i = 0; i < valueArr.length(); i++) {
+                            arrValues[i] = valueArr.get(i).toString();
+                        }
+                        bundle.putStringArray(key, arrValues);
+                    }
+                }
+            } else {
+                bundle.putString(key, value.toString());
+            }
+        }
+        return bundle;
     }
 
+
     private AppLinkData() {
     }
 
     /**
-     * TargetUri for this App Link
-     * @return targetUri
+     * Returns the target uri for this App Link.
+     * @return target uri
      */
     public Uri getTargetUri() {
         return targetUri;
     }
 
     /**
-     * Ref for this App Link
+     * Returns the ref for this App Link.
      * @return ref
      */
-    public String[] getRef() {
+    public String getRef() {
         return ref;
     }
 
     /**
-     * The full set of arguments for this app link. Properties like TargetUri & Ref are typically
-     * picked out of this set of arguments.
+     * This method has been deprecated. Please use {@link AppLinkData#getArgumentBundle()} instead.
      * @return JSONObject property bag.
      */
+    @Deprecated
     public JSONObject getArguments() {
         return arguments;
     }
 
+    /**
+     * The full set of arguments for this app link. Properties like target uri & ref are typically
+     * picked out of this set of arguments.
+     * @return App link related arguments as a bundle.
+     */
+    public Bundle getArgumentBundle() {
+        return argumentBundle;
+    }
+
+    /**
+     * The referer data associated with the app link. This will contain Facebook specific information like
+     * fb_access_token, fb_expires_in, and fb_ref.
+     * @return the referer data.
+     */
+    public Bundle getRefererData() {
+        if (argumentBundle != null) {
+            return argumentBundle.getBundle(ARGUMENTS_REFERER_DATA_KEY);
+        }
+        return null;
+    }
+
     /**
      * Interface to asynchronously receive AppLinkData after it has been fetched.
      */
@@ -235,18 +407,4 @@ public JSONObject getArguments() {
          */
         void onDeferredAppLinkDataFetched(AppLinkData appLinkData);
     }
-
-    final static class DeferredAppLinkDataClient extends PlatformServiceClient {
-
-        DeferredAppLinkDataClient(Context context, String applicationId) {
-            super(context, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REQUEST, NativeProtocol.MESSAGE_GET_INSTALL_DATA_REPLY,
-                    NativeProtocol.PROTOCOL_VERSION_20130618, applicationId);
-        }
-
-        @Override
-        protected void populateRequestBundle(Bundle data) {
-            String packageName = getContext().getPackageName();
-            data.putString(NativeProtocol.EXTRA_GET_INSTALL_DATA_PACKAGE, packageName);
-        }
-    }
 }
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index cbd308add..3e8e56222 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -31,16 +31,16 @@
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
-import com.facebook.model.GraphMultiResult;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
 import com.facebook.model.GraphUser;
 import com.facebook.widget.WebDialog;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.io.Serializable;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 class AuthorizationClient implements Serializable {
     private static final long serialVersionUID = 1L;
@@ -75,10 +75,6 @@
     static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
     static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
     static final String EVENT_EXTRAS_NEW_PERMISSIONS = "new_permissions";
-    static final String EVENT_EXTRAS_SERVICE_DISABLED = "service_disabled";
-    static final String EVENT_EXTRAS_APP_CALL_ID = "call_id";
-    static final String EVENT_EXTRAS_PROTOCOL_VERSION = "protocol_version";
-    static final String EVENT_EXTRAS_WRITE_PRIVACY = "write_privacy";
 
     List<AuthHandler> handlersToTry;
     AuthHandler currentHandler;
@@ -179,7 +175,7 @@ void cancelCurrentHandler() {
     }
 
     boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (requestCode == pendingRequest.getRequestCode()) {
+        if (pendingRequest != null && requestCode == pendingRequest.getRequestCode()) {
             return currentHandler.onActivityResult(requestCode, resultCode, data);
         }
         return false;
@@ -192,7 +188,6 @@ boolean onActivityResult(int requestCode, int resultCode, Intent data) {
         if (behavior.allowsKatanaAuth()) {
             if (!request.isLegacy()) {
                 handlers.add(new GetTokenAuthHandler());
-                handlers.add(new KatanaLoginDialogAuthHandler());
             }
             handlers.add(new KatanaProxyAuthHandler());
         }
@@ -365,7 +360,8 @@ RequestBatch createReauthValidationBatch(final Result pendingResult) {
         // request using the current token to get the permissions of the user.
 
         final ArrayList<String> fbids = new ArrayList<String>();
-        final ArrayList<String> tokenPermissions = new ArrayList<String>();
+        final ArrayList<String> grantedPermissions = new ArrayList<String>();
+        final ArrayList<String> declinedPermissions = new ArrayList<String>();
         final String newToken = pendingResult.token.getToken();
 
         Request.Callback meCallback = new Request.Callback() {
@@ -393,15 +389,10 @@ public void onCompleted(Response response) {
             @Override
             public void onCompleted(Response response) {
                 try {
-                    GraphMultiResult result = response.getGraphObjectAs(GraphMultiResult.class);
-                    if (result != null) {
-                        GraphObjectList<GraphObject> data = result.getData();
-                        if (data != null && data.size() == 1) {
-                            GraphObject permissions = data.get(0);
-
-                            // The keys are the permission names.
-                            tokenPermissions.addAll(permissions.asMap().keySet());
-                        }
+                    Session.PermissionsPair permissionsPair = Session.handlePermissionResponse(response);
+                    if (permissionsPair != null) {
+                        grantedPermissions.addAll(permissionsPair.getGrantedPermissions());
+                        declinedPermissions.addAll(permissionsPair.getDeclinedPermissions());
                     }
                 } catch (Exception ex) {
                 }
@@ -421,7 +412,7 @@ public void onBatchCompleted(RequestBatch batch) {
                         // Modify the token to have the right permission set.
                         AccessToken tokenWithPermissions = AccessToken
                                 .createFromTokenWithRefreshedPermissions(pendingResult.token,
-                                        tokenPermissions);
+                                        grantedPermissions, declinedPermissions);
                         result = Result.createTokenResult(pendingRequest, tokenWithPermissions);
                     } else {
                         result = Result
@@ -441,7 +432,6 @@ public void onBatchCompleted(RequestBatch batch) {
 
     Request createGetPermissionsRequest(String accessToken) {
         Bundle parameters = new Bundle();
-        parameters.putString("fields", "id");
         parameters.putString("access_token", accessToken);
         return new Request(null, "me/permissions", parameters, HttpMethod.GET, null);
     }
@@ -454,7 +444,7 @@ Request createGetProfileIdRequest(String accessToken) {
     }
 
     private AppEventsLogger getAppEventsLogger() {
-        if (appEventsLogger == null || appEventsLogger.getApplicationId() != pendingRequest.getApplicationId()) {
+        if (appEventsLogger == null || !appEventsLogger.getApplicationId().equals(pendingRequest.getApplicationId())) {
             appEventsLogger = AppEventsLogger.newLogger(context, pendingRequest.getApplicationId());
         }
         return appEventsLogger;
@@ -592,6 +582,9 @@ boolean needsInternetPermission() {
         @Override
         void cancel() {
             if (loginDialog != null) {
+                // Since we are calling dismiss explicitly, we need to remove the completion listener to prevent
+                // responding to the upcoming "Cancel" result.
+                loginDialog.setOnCompleteListener(null);
                 loginDialog.dismiss();
                 loginDialog = null;
             }
@@ -607,6 +600,9 @@ boolean tryAuthorize(final AuthorizationRequest request) {
                 addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
             }
 
+            SessionDefaultAudience audience = request.getDefaultAudience();
+            parameters.putString(ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
+
             String previousToken = request.getPreviousAccessToken();
             if (!Utility.isNullOrEmpty(previousToken) && (previousToken.equals(loadCookieToken()))) {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN, previousToken);
@@ -631,6 +627,7 @@ public void onComplete(Bundle values, FacebookException error) {
             WebDialog.Builder builder =
                     new AuthDialogBuilder(getStartActivityDelegate().getActivityContext(), applicationId, parameters)
                             .setE2E(e2e)
+                            .setIsRerequest(request.isRerequest())
                             .setOnCompleteListener(listener);
             loginDialog = builder.build();
             loginDialog.show();
@@ -684,14 +681,12 @@ void onWebDialogComplete(AuthorizationRequest request, Bundle values,
 
         private void saveCookieToken(String token) {
             Context context = getStartActivityDelegate().getActivityContext();
-            SharedPreferences sharedPreferences = context.getSharedPreferences(
+            context.getSharedPreferences(
                     WEB_VIEW_AUTH_HANDLER_STORE,
-                    Context.MODE_PRIVATE);
-            SharedPreferences.Editor editor = sharedPreferences.edit();
-            editor.putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token);
-            if (!editor.commit()) {
-                Utility.logd(TAG, "Could not update saved web view auth handler token.");
-            }
+                    Context.MODE_PRIVATE)
+                .edit()
+                .putString(WEB_VIEW_AUTH_HANDLER_TOKEN_KEY, token)
+                .apply();
         }
 
         private String loadCookieToken() {
@@ -803,119 +798,6 @@ protected boolean tryIntent(Intent intent, int requestCode) {
         }
     }
 
-    class KatanaLoginDialogAuthHandler extends KatanaAuthHandler {
-        private static final long serialVersionUID = 1L;
-        private String applicationId;
-        private String callId;
-
-        @Override
-        String getNameForLogging() {
-            return "katana_login_dialog";
-        }
-
-        @Override
-        boolean tryAuthorize(AuthorizationRequest request) {
-            applicationId = request.getApplicationId();
-
-            Intent intent = NativeProtocol.createLoginDialog20121101Intent(context, request.getApplicationId(),
-                    new ArrayList<String>(request.getPermissions()),
-                    request.getDefaultAudience().getNativeProtocolAudience());
-            if (intent == null) {
-                return false;
-            }
-
-            callId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
-
-            addLoggingExtra(EVENT_EXTRAS_APP_CALL_ID, callId);
-            addLoggingExtra(EVENT_EXTRAS_PROTOCOL_VERSION,
-                    intent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
-            addLoggingExtra(EVENT_EXTRAS_PERMISSIONS,
-                    TextUtils.join(",", intent.getStringArrayListExtra(NativeProtocol.EXTRA_PERMISSIONS)));
-            addLoggingExtra(EVENT_EXTRAS_WRITE_PRIVACY, intent.getStringExtra(NativeProtocol.EXTRA_WRITE_PRIVACY));
-            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_START,
-                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME, callId);
-
-            return tryIntent(intent, request.getRequestCode());
-        }
-
-        @Override
-        boolean onActivityResult(int requestCode, int resultCode, Intent data) {
-            Result outcome;
-
-            logEvent(AnalyticsEvents.EVENT_NATIVE_LOGIN_DIALOG_COMPLETE,
-                    AnalyticsEvents.PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME, callId);
-
-            if (data == null) {
-                // This happens if the user presses 'Back'.
-                outcome = Result.createCancelResult(pendingRequest, "Operation canceled");
-            } else if (NativeProtocol.isServiceDisabledResult20121101(data)) {
-                outcome = null;
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-                outcome = createCancelOrErrorResult(pendingRequest, data);
-            } else if (resultCode != Activity.RESULT_OK) {
-                outcome = Result.createErrorResult(pendingRequest, "Unexpected resultCode from authorization.", null);
-            } else {
-                outcome = handleResultOk(data);
-            }
-
-            if (outcome != null) {
-                completeAndValidate(outcome);
-            } else {
-                tryNextHandler();
-            }
-
-            return true;
-        }
-
-        private Result handleResultOk(Intent data) {
-            Bundle extras = data.getExtras();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-            if (errorType == null) {
-                return Result.createTokenResult(pendingRequest,
-                        AccessToken.createFromNativeLogin(extras, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE));
-            } else if (NativeProtocol.ERROR_SERVICE_DISABLED.equals(errorType)) {
-                addLoggingExtra(EVENT_EXTRAS_SERVICE_DISABLED, AppEventsConstants.EVENT_PARAM_VALUE_YES);
-                return null;
-            } else {
-                return createCancelOrErrorResult(pendingRequest, data);
-            }
-        }
-
-        private Result createCancelOrErrorResult(AuthorizationRequest request, Intent data) {
-            Bundle extras = data.getExtras();
-            String errorType = extras.getString(NativeProtocol.STATUS_ERROR_TYPE);
-
-            if (NativeProtocol.ERROR_USER_CANCELED.equals(errorType) ||
-                    NativeProtocol.ERROR_PERMISSION_DENIED.equals(errorType)) {
-                return Result.createCancelResult(request, data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION));
-            } else {
-                // See if we can get an error code out of the JSON.
-                String errorJson = extras.getString(NativeProtocol.STATUS_ERROR_JSON);
-                String errorCode = null;
-                if (errorJson != null) {
-                    try {
-                        JSONObject jsonObject = new JSONObject(errorJson);
-                        errorCode = jsonObject.getString("error_code");
-                    } catch (JSONException e) {
-                    }
-                }
-                return Result.createErrorResult(request, errorType,
-                        data.getStringExtra(NativeProtocol.STATUS_ERROR_DESCRIPTION), errorCode);
-            }
-        }
-
-        private void logEvent(String eventName, String timeParameter, String callId) {
-            if (callId != null) {
-                AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context, applicationId);
-                Bundle parameters = new Bundle();
-                parameters.putString(AnalyticsEvents.PARAMETER_APP_ID, applicationId);
-                parameters.putString(AnalyticsEvents.PARAMETER_ACTION_ID, callId);
-                parameters.putLong(timeParameter, System.currentTimeMillis());
-                appEventsLogger.logSdkEvent(eventName, null, parameters);
-            }
-        }
-    }
-
     class KatanaProxyAuthHandler extends KatanaAuthHandler {
         private static final long serialVersionUID = 1L;
         private String applicationId;
@@ -931,7 +813,7 @@ boolean tryAuthorize(AuthorizationRequest request) {
 
             String e2e = getE2E();
             Intent intent = NativeProtocol.createProxyAuthIntent(context, request.getApplicationId(),
-                    request.getPermissions(), e2e);
+                    request.getPermissions(), e2e, request.isRerequest(), request.getDefaultAudience());
 
             addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
 
@@ -1017,6 +899,7 @@ private void logWebLoginCompleted(String applicationId, String e2e) {
         private static final String OAUTH_DIALOG = "oauth";
         static final String REDIRECT_URI = "fbconnect://success";
         private String e2e;
+        private boolean isRerequest;
 
         public AuthDialogBuilder(Context context, String applicationId, Bundle parameters) {
             super(context, applicationId, OAUTH_DIALOG, parameters);
@@ -1027,12 +910,24 @@ public AuthDialogBuilder setE2E(String e2e) {
             return this;
         }
 
+        public AuthDialogBuilder setIsRerequest(boolean isRerequest) {
+            this.isRerequest = isRerequest;
+            return this;
+        }
+
         @Override
         public WebDialog build() {
             Bundle parameters = getParameters();
             parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
             parameters.putString(ServerProtocol.DIALOG_PARAM_CLIENT_ID, getApplicationId());
             parameters.putString(ServerProtocol.DIALOG_PARAM_E2E, e2e);
+            parameters.putString(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN);
+            parameters.putString(ServerProtocol.DIALOG_PARAM_RETURN_SCOPES, ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+
+            // Only set the rerequest auth type for non legacy requests
+            if (isRerequest && !Settings.getPlatformCompatibilityEnabled()) {
+                parameters.putString(ServerProtocol.DIALOG_PARAM_AUTH_TYPE, ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+            }
 
             return new WebDialog(getContext(), OAUTH_DIALOG, parameters, getTheme(), getListener());
         }
@@ -1050,6 +945,7 @@ public WebDialog build() {
         private final String applicationId;
         private final String previousAccessToken;
         private final String authId;
+        private boolean isRerequest = false;
 
         AuthorizationRequest(SessionLoginBehavior loginBehavior, int requestCode, boolean isLegacy,
                 List<String> permissions, SessionDefaultAudience defaultAudience, String applicationId,
@@ -1063,7 +959,6 @@ public WebDialog build() {
             this.previousAccessToken = validateSameFbidAsToken;
             this.startActivityDelegate = startActivityDelegate;
             this.authId = authId;
-
         }
 
         StartActivityDelegate getStartActivityDelegate() {
@@ -1113,6 +1008,14 @@ boolean needsNewTokenValidation() {
         String getAuthId() {
             return authId;
         }
+
+        boolean isRerequest() {
+            return isRerequest;
+        }
+
+        void setRerequest(boolean isRerequest) {
+            this.isRerequest = isRerequest;
+        }
     }
 
 
diff --git a/facebook/src/com/facebook/BoltsMeasurementEventListener.java b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
new file mode 100644
index 000000000..b9a6e57cb
--- /dev/null
+++ b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
@@ -0,0 +1,63 @@
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+public class BoltsMeasurementEventListener extends BroadcastReceiver {
+    private static BoltsMeasurementEventListener _instance;
+
+    private final static String MEASUREMENT_EVENT_NOTIFICATION_NAME = "com.parse.bolts.measurement_event";
+    private final static String MEASUREMENT_EVENT_NAME_KEY = "event_name";
+    private final static String MEASUREMENT_EVENT_ARGS_KEY = "event_args";
+    private final static String BOLTS_MEASUREMENT_EVENT_PREFIX = "bf_";
+
+    private Context applicationContext;
+
+    private BoltsMeasurementEventListener(Context context) {
+        applicationContext = context.getApplicationContext();
+    }
+
+    private void open() {
+      LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(applicationContext);
+      broadcastManager.registerReceiver(this, new IntentFilter(MEASUREMENT_EVENT_NOTIFICATION_NAME));
+    }
+
+    private void close() {
+      LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(applicationContext);
+      broadcastManager.unregisterReceiver(this);
+    }
+
+    static BoltsMeasurementEventListener getInstance(Context context) {
+        if (_instance != null) {
+            return _instance;
+        }
+        _instance = new BoltsMeasurementEventListener(context);
+        _instance.open();
+        return _instance;
+    }
+
+    protected void finalize() throws Throwable {
+        try {
+            close();
+        } finally {
+            super.finalize();
+        }
+    }
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        AppEventsLogger appEventsLogger = AppEventsLogger.newLogger(context);
+        String eventName = BOLTS_MEASUREMENT_EVENT_PREFIX + intent.getStringExtra(MEASUREMENT_EVENT_NAME_KEY);
+        Bundle eventArgs = intent.getBundleExtra(MEASUREMENT_EVENT_ARGS_KEY);
+        Bundle logData = new Bundle();
+        for(String key : eventArgs.keySet()) {
+           String safeKey = key.replaceAll("[^0-9a-zA-Z _-]", "-").replaceAll("^[ -]*", "").replaceAll("[ -]*$", "");
+           logData.putString(safeKey, (String)eventArgs.get(key));
+        }
+        appEventsLogger.logEvent(eventName, logData);
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookAppLinkResolver.java b/facebook/src/com/facebook/FacebookAppLinkResolver.java
new file mode 100644
index 000000000..c36631ed2
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookAppLinkResolver.java
@@ -0,0 +1,238 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.net.Uri;
+import android.os.Bundle;
+import bolts.AppLink;
+import bolts.AppLinkResolver;
+import bolts.Continuation;
+import bolts.Task;
+import com.facebook.model.GraphObject;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * Provides an implementation for the {@link AppLinkResolver AppLinkResolver} interface that uses the Facebook App Link
+ * index to solve App Links, given a Url. It also provides an additional helper method that can resolve multiple App
+ * Links in a single call.
+ */
+public class FacebookAppLinkResolver implements AppLinkResolver {
+
+    private static final String APP_LINK_KEY = "app_links";
+    private static final String APP_LINK_ANDROID_TARGET_KEY = "android";
+    private static final String APP_LINK_WEB_TARGET_KEY = "web";
+    private static final String APP_LINK_TARGET_PACKAGE_KEY = "package";
+    private static final String APP_LINK_TARGET_CLASS_KEY = "class";
+    private static final String APP_LINK_TARGET_APP_NAME_KEY = "app_name";
+    private static final String APP_LINK_TARGET_URL_KEY = "url";
+    private static final String APP_LINK_TARGET_SHOULD_FALLBACK_KEY = "should_fallback";
+
+    private final HashMap<Uri, AppLink> cachedAppLinks = new HashMap<Uri, AppLink>();
+
+    /**
+     * Asynchronously resolves App Link data for the passed in Uri
+     *
+     * @param uri Uri to be resolved into an App Link
+     * @return A Task that, when successful, will return an AppLink for the passed in Uri. This may be null if no App
+     * Link data was found for this Uri.
+     * In the case of general server errors, the task will be completed with the corresponding error.
+     */
+    public Task<AppLink> getAppLinkFromUrlInBackground(final Uri uri) {
+        ArrayList<Uri> uris = new ArrayList<Uri>();
+        uris.add(uri);
+
+        Task<Map<Uri, AppLink>> resolveTask = getAppLinkFromUrlsInBackground(uris);
+
+        return resolveTask.onSuccess(new Continuation<Map<Uri, AppLink>, AppLink>() {
+            @Override
+            public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
+                return resolveUrisTask.getResult().get(uri);
+            }
+        });
+    }
+
+    /**
+     * Asynchronously resolves App Link data for multiple Urls
+     *
+     * @param uris A list of Uri objects to resolve into App Links
+     * @return A Task that, when successful, will return a Map of Uri->AppLink for each Uri that was successfully
+     * resolved into an App Link. Uris that could not be resolved into App Links will not be present in the Map.
+     * In the case of general server errors, the task will be completed with the corresponding error.
+     */
+    public Task<Map<Uri, AppLink>> getAppLinkFromUrlsInBackground(List<Uri> uris) {
+        final Map<Uri, AppLink> appLinkResults = new HashMap<Uri, AppLink>();
+        final HashSet<Uri> urisToRequest = new HashSet<Uri>();
+        StringBuilder graphRequestFields = new StringBuilder();
+
+        for (Uri uri : uris) {
+            AppLink appLink = null;
+            synchronized (cachedAppLinks) {
+                appLink = cachedAppLinks.get(uri);
+            }
+
+            if (appLink != null) {
+                appLinkResults.put(uri, appLink);
+            } else {
+                if (!urisToRequest.isEmpty()) {
+                    graphRequestFields.append(',');
+                }
+                graphRequestFields.append(uri.toString());
+                urisToRequest.add(uri);
+            }
+        }
+
+        if (urisToRequest.isEmpty()) {
+            return Task.forResult(appLinkResults);
+        }
+
+        final Task<Map<Uri, AppLink>>.TaskCompletionSource taskCompletionSource = Task.create();
+
+        Bundle appLinkRequestParameters = new Bundle();
+
+        appLinkRequestParameters.putString("ids", graphRequestFields.toString());
+        appLinkRequestParameters.putString(
+                "fields",
+                String.format("%s.fields(%s,%s)", APP_LINK_KEY, APP_LINK_ANDROID_TARGET_KEY, APP_LINK_WEB_TARGET_KEY));
+
+
+        Request appLinkRequest = new Request(
+                null, /* Session */
+                "", /* Graph path */
+                appLinkRequestParameters, /* Query parameters */
+                null, /* HttpMethod */
+                new Request.Callback() { /* Callback */
+                    @Override
+                    public void onCompleted(Response response) {
+                        FacebookRequestError error = response.getError();
+                        if (error != null) {
+                            taskCompletionSource.setError(error.getException());
+                            return;
+                        }
+
+                        GraphObject responseObject = response.getGraphObject();
+                        JSONObject responseJson = responseObject != null ? responseObject.getInnerJSONObject() : null;
+                        if (responseJson == null) {
+                            taskCompletionSource.setResult(appLinkResults);
+                            return;
+                        }
+
+                        for (Uri uri : urisToRequest) {
+                            String uriString = uri.toString();
+                            if (!responseJson.has(uriString)) {
+                                continue;
+                            }
+
+                            JSONObject urlData = null;
+                            try {
+                                urlData = responseJson.getJSONObject(uri.toString());
+                                JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
+
+                                JSONArray rawTargets = appLinkData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
+
+                                int targetsCount = rawTargets.length();
+                                List<AppLink.Target> targets = new ArrayList<AppLink.Target>(targetsCount);
+
+                                for (int i = 0; i < targetsCount; i++) {
+                                    AppLink.Target target = getAndroidTargetFromJson(rawTargets.getJSONObject(i));
+                                    if (target != null) {
+                                        targets.add(target);
+                                    }
+                                }
+
+                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, appLinkData);
+                                AppLink appLink = new AppLink(uri, targets, webFallbackUrl);
+
+                                appLinkResults.put(uri, appLink);
+                                synchronized (cachedAppLinks) {
+                                    cachedAppLinks.put(uri, appLink);
+                                }
+                            } catch (JSONException e) {
+                                // The data for this uri was missing or badly formed.
+                                continue;
+                            }
+                        }
+
+                        taskCompletionSource.setResult(appLinkResults);
+                    }
+                });
+
+        appLinkRequest.executeAsync();
+
+        return taskCompletionSource.getTask();
+    }
+
+    private static AppLink.Target getAndroidTargetFromJson(JSONObject targetJson) {
+        String packageName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_PACKAGE_KEY, null);
+        if (packageName == null) {
+            // Package name is mandatory for each Android target
+            return null;
+        }
+        String className = tryGetStringFromJson(targetJson, APP_LINK_TARGET_CLASS_KEY, null);
+        String appName = tryGetStringFromJson(targetJson, APP_LINK_TARGET_APP_NAME_KEY, null);
+        String targetUrlString = tryGetStringFromJson(targetJson, APP_LINK_TARGET_URL_KEY, null);
+        Uri targetUri = null;
+        if (targetUrlString != null) {
+            targetUri = Uri.parse(targetUrlString);
+        }
+
+        return new AppLink.Target(packageName, className, targetUri, appName);
+    }
+
+    private static Uri getWebFallbackUriFromJson(Uri sourceUrl, JSONObject urlData) {
+        // Try and get a web target. This is best effort. Any failures results in null being returned.
+        try {
+            JSONObject webTarget = urlData.getJSONObject(APP_LINK_WEB_TARGET_KEY);
+            boolean shouldFallback = tryGetBooleanFromJson(webTarget, APP_LINK_TARGET_SHOULD_FALLBACK_KEY, true);
+            if (!shouldFallback) {
+                // Don't use a fallback url
+                return null;
+            }
+
+            String webTargetUrlString = tryGetStringFromJson(webTarget, APP_LINK_TARGET_URL_KEY, null);
+            Uri webUri = null;
+            if (webTargetUrlString != null) {
+                webUri = Uri.parse(webTargetUrlString);
+            }
+
+            // If we weren't able to parse a url from the web target, use the source url
+            return webUri != null ? webUri: sourceUrl;
+        } catch (JSONException e) {
+            // If we were missing a web target, just use the source as the web url
+            return sourceUrl;
+        }
+    }
+
+    private static String tryGetStringFromJson(JSONObject json, String propertyName, String defaultValue) {
+        try {
+            return json.getString(propertyName);
+        } catch(JSONException e) {
+            return defaultValue;
+        }
+    }
+
+    private static boolean tryGetBooleanFromJson(JSONObject json, String propertyName, boolean defaultValue) {
+        try {
+            return json.getBoolean(propertyName);
+        } catch (JSONException e) {
+            return defaultValue;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookBroadcastReceiver.java b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
new file mode 100644
index 000000000..1704cdaf8
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
@@ -0,0 +1,41 @@
+package com.facebook;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import com.facebook.internal.NativeProtocol;
+
+/**
+ * This class implements a simple BroadcastReceiver designed to listen for broadcast notifications from the
+ * Facebook app. At present, these notifications consistent of success/failure notifications for photo upload
+ * operations that happen in the background.
+ *
+ * Applications may subclass this class and register it in their AndroidManifest.xml, listening on the
+ * com.facebook.platform.AppCallResultBroadcast action.
+ */
+public class FacebookBroadcastReceiver extends BroadcastReceiver {
+
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        String appCallId = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
+        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
+        if (appCallId != null && action != null) {
+            Bundle extras = intent.getExtras();
+
+            if (NativeProtocol.isErrorResult(intent)) {
+                onFailedAppCall(appCallId, action, extras);
+            } else {
+                onSuccessfulAppCall(appCallId, action, extras);
+            }
+        }
+    }
+
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // Default does nothing.
+    }
+}
diff --git a/facebook/src/com/facebook/FacebookRequestError.java b/facebook/src/com/facebook/FacebookRequestError.java
index 937e2b580..954d0ecac 100644
--- a/facebook/src/com/facebook/FacebookRequestError.java
+++ b/facebook/src/com/facebook/FacebookRequestError.java
@@ -58,6 +58,9 @@
     private static final String ERROR_SUB_CODE_KEY = "error_subcode";
     private static final String ERROR_MSG_KEY = "error_msg";
     private static final String ERROR_REASON_KEY = "error_reason";
+    private static final String ERROR_USER_TITLE_KEY = "error_user_title";
+    private static final String ERROR_USER_MSG_KEY = "error_user_msg";
+    private static final String ERROR_IS_TRANSIENT_KEY = "is_transient";
 
     private static class Range {
         private final int start, end;
@@ -98,6 +101,9 @@ boolean contains(int value) {
     private final int subErrorCode;
     private final String errorType;
     private final String errorMessage;
+    private final String errorUserTitle;
+    private final String errorUserMessage;
+    private final boolean errorIsTransient;
     private final JSONObject requestResult;
     private final JSONObject requestResultBody;
     private final Object batchRequestResult;
@@ -105,9 +111,9 @@ boolean contains(int value) {
     private final FacebookException exception;
 
     private FacebookRequestError(int requestStatusCode, int errorCode,
-            int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
-            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection,
-            FacebookException exception) {
+            int subErrorCode, String errorType, String errorMessage, String errorUserTitle, String errorUserMessage,
+            boolean errorIsTransient, JSONObject requestResultBody, JSONObject requestResult, Object batchRequestResult,
+            HttpURLConnection connection, FacebookException exception) {
         this.requestStatusCode = requestStatusCode;
         this.errorCode = errorCode;
         this.subErrorCode = subErrorCode;
@@ -117,6 +123,9 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
         this.requestResult = requestResult;
         this.batchRequestResult = batchRequestResult;
         this.connection = connection;
+        this.errorUserTitle = errorUserTitle;
+        this.errorUserMessage = errorUserMessage;
+        this.errorIsTransient = errorIsTransient;
 
         boolean isLocalException = false;
         if (exception != null) {
@@ -172,28 +181,32 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
             }
         }
 
+        // Notify user when error_user_msg is present
+        shouldNotify = errorUserMessage!= null && errorUserMessage.length() > 0;
+
         this.category = errorCategory;
         this.userActionMessageId = messageId;
         this.shouldNotifyUser = shouldNotify;
     }
 
     private FacebookRequestError(int requestStatusCode, int errorCode,
-            int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
-            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection) {
-        this(requestStatusCode, errorCode, subErrorCode, errorType, errorMessage,
-                requestResultBody, requestResult, batchRequestResult, connection, null);
+            int subErrorCode, String errorType, String errorMessage, String errorUserTitle, String errorUserMessage,
+            boolean errorIsTransient, JSONObject requestResultBody, JSONObject requestResult, Object batchRequestResult,
+            HttpURLConnection connection) {
+        this(requestStatusCode, errorCode, subErrorCode, errorType, errorMessage, errorUserTitle, errorUserMessage,
+                errorIsTransient, requestResultBody, requestResult, batchRequestResult, connection, null);
     }
 
     FacebookRequestError(HttpURLConnection connection, Exception exception) {
         this(INVALID_HTTP_STATUS_CODE, INVALID_ERROR_CODE, INVALID_ERROR_CODE,
-                null, null, null, null, null, connection,
+                null, null, null, null, false, null, null, null, connection,
                 (exception instanceof FacebookException) ?
                         (FacebookException) exception : new FacebookException(exception));
     }
 
     public FacebookRequestError(int errorCode, String errorType, String errorMessage) {
         this(INVALID_HTTP_STATUS_CODE, errorCode, INVALID_ERROR_CODE, errorType, errorMessage,
-                null, null, null, null, null);
+                null, null, false, null, null, null, null, null);
     }
 
     /**
@@ -279,6 +292,36 @@ public String getErrorMessage() {
         }
     }
 
+    /**
+     * A message suitable for display to the user, describing a user action necessary to enable Facebook functionality.
+     * Not all Facebook errors yield a message suitable for user display; however in all cases where
+     * shouldNotifyUser() returns true, this method returns a non-null message suitable for display.
+     *
+     * @return the error message returned from Facebook
+     */
+    public String getErrorUserMessage() {
+        return errorUserMessage;
+    }
+
+    /**
+     * A short summary of the error suitable for display to the user.
+     * Not all Facebook errors yield a title/message suitable for user display; however in all cases where
+     * getErrorUserTitle() returns valid String - user should be notified.
+     *
+     * @return the error message returned from Facebook
+     */
+    public String getErrorUserTitle() {
+        return errorUserTitle;
+    }
+
+    /**
+     * @return true if given error is transient and may succeed if the initial action is retried as-is.
+     * Application may use this information to display a "Retry" button, if user should be notified about this error.
+     */
+    public boolean getErrorIsTransient() {
+        return errorIsTransient;
+    }
+
     /**
      * Returns the body portion of the response corresponding to the request from Facebook.
      *
@@ -359,6 +402,9 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
                     // with several sub-properties, or else one or more top-level fields containing error info.
                     String errorType = null;
                     String errorMessage = null;
+                    String errorUserMessage = null;
+                    String errorUserTitle = null;
+                    boolean errorIsTransient = false;
                     int errorCode = INVALID_ERROR_CODE;
                     int errorSubCode = INVALID_ERROR_CODE;
 
@@ -371,6 +417,9 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
                         errorMessage = error.optString(ERROR_MESSAGE_FIELD_KEY, null);
                         errorCode = error.optInt(ERROR_CODE_FIELD_KEY, INVALID_ERROR_CODE);
                         errorSubCode = error.optInt(ERROR_SUB_CODE_KEY, INVALID_ERROR_CODE);
+                        errorUserMessage =  error.optString(ERROR_USER_MSG_KEY, null);
+                        errorUserTitle =  error.optString(ERROR_USER_TITLE_KEY, null);
+                        errorIsTransient = error.optBoolean(ERROR_IS_TRANSIENT_KEY, false);
                         hasError = true;
                     } else if (jsonBody.has(ERROR_CODE_KEY) || jsonBody.has(ERROR_MSG_KEY)
                             || jsonBody.has(ERROR_REASON_KEY)) {
@@ -383,14 +432,15 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
 
                     if (hasError) {
                         return new FacebookRequestError(responseCode, errorCode, errorSubCode,
-                                errorType, errorMessage, jsonBody, singleResult, batchResult, connection);
+                                errorType, errorMessage, errorUserTitle, errorUserMessage, errorIsTransient, jsonBody,
+                                singleResult, batchResult, connection);
                     }
                 }
 
                 // If we didn't get error details, but we did get a failure response code, report it.
                 if (!HTTP_RANGE_SUCCESS.contains(responseCode)) {
                     return new FacebookRequestError(responseCode, INVALID_ERROR_CODE,
-                            INVALID_ERROR_CODE, null, null,
+                            INVALID_ERROR_CODE, null, null, null, null, false,
                             singleResult.has(BODY_KEY) ?
                                     (JSONObject) Utility.getStringPropertyAsJSON(
                                             singleResult, BODY_KEY, Response.NON_JSON_RESPONSE_PROPERTY) : null,
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 626cc7bf5..19669281e 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,6 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.6.0";
-    public static final String MIGRATION_BUNDLE = "fbsdk:20131203";
+    public static final String BUILD = "3.23.0";
 }
diff --git a/facebook/src/com/facebook/FacebookTimeSpentData.java b/facebook/src/com/facebook/FacebookTimeSpentData.java
new file mode 100644
index 000000000..029a8452d
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookTimeSpentData.java
@@ -0,0 +1,301 @@
+package com.facebook;
+
+import android.os.Bundle;
+import android.text.format.DateUtils;
+
+import com.facebook.internal.Logger;
+
+import java.io.Serializable;
+
+class FacebookTimeSpentData implements Serializable {
+    // Constants
+    private static final long serialVersionUID = 1L;
+    private static final String TAG = AppEventsLogger.class.getCanonicalName();
+    private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
+    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
+    private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
+            60 * DateUtils.SECOND_IN_MILLIS;
+    private static final long APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS =
+            5 * DateUtils.MINUTE_IN_MILLIS;
+
+    // Should be kept in sync with the iOS sdk
+    private static final long[] INACTIVE_SECONDS_QUANTA =
+        new long[] {
+            5 * DateUtils.MINUTE_IN_MILLIS,
+            15 * DateUtils.MINUTE_IN_MILLIS,
+            30 * DateUtils.MINUTE_IN_MILLIS,
+            1 * DateUtils.HOUR_IN_MILLIS,
+            6 * DateUtils.HOUR_IN_MILLIS,
+            12 * DateUtils.HOUR_IN_MILLIS,
+            1 * DateUtils.DAY_IN_MILLIS,
+            2 * DateUtils.DAY_IN_MILLIS,
+            3 * DateUtils.DAY_IN_MILLIS,
+            7 * DateUtils.DAY_IN_MILLIS,
+            14 * DateUtils.DAY_IN_MILLIS,
+            21 * DateUtils.DAY_IN_MILLIS,
+            28 * DateUtils.DAY_IN_MILLIS,
+            60 * DateUtils.DAY_IN_MILLIS,
+            90 * DateUtils.DAY_IN_MILLIS,
+            120 * DateUtils.DAY_IN_MILLIS,
+            150 * DateUtils.DAY_IN_MILLIS,
+            180 * DateUtils.DAY_IN_MILLIS,
+            365 * DateUtils.DAY_IN_MILLIS,
+        };
+
+    private boolean isWarmLaunch;
+    private boolean isAppActive;
+    private long lastActivateEventLoggedTime;
+
+    // Member data that's persisted to disk
+    private long lastResumeTime;
+    private long lastSuspendTime;
+    private long millisecondsSpentInSession;
+    private int interruptionCount;
+    private String firstOpenSourceApplication;
+
+    /**
+     * Serialization proxy for the FacebookTimeSpentData class. This is version 1 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    private static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = 6L;
+
+        private final long lastResumeTime;
+        private final long lastSuspendTime;
+        private final long millisecondsSpentInSession;
+        private final int interruptionCount;
+
+        SerializationProxyV1(
+            long lastResumeTime,
+            long lastSuspendTime,
+            long millisecondsSpentInSession,
+            int interruptionCount
+        ) {
+            this.lastResumeTime = lastResumeTime;
+            this.lastSuspendTime = lastSuspendTime;
+            this.millisecondsSpentInSession = millisecondsSpentInSession;
+            this.interruptionCount = interruptionCount;
+        }
+
+        private Object readResolve() {
+            return new FacebookTimeSpentData(
+                lastResumeTime,
+                lastSuspendTime,
+                millisecondsSpentInSession,
+                interruptionCount);
+        }
+    }
+
+
+    /**
+     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
+     */
+    private FacebookTimeSpentData(
+            long lastResumeTime,
+            long lastSuspendTime,
+            long millisecondsSpentInSession,
+            int interruptionCount
+
+    ) {
+        resetSession();
+        this.lastResumeTime = lastResumeTime;
+        this.lastSuspendTime = lastSuspendTime;
+        this.millisecondsSpentInSession = millisecondsSpentInSession;
+        this.interruptionCount = interruptionCount;
+    }
+
+    /**
+     * Serialization proxy for the FacebookTimeSpentData class. This is version 2 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 6L;
+
+        private final long lastResumeTime;
+        private final long lastSuspendTime;
+        private final long millisecondsSpentInSession;
+        private final int interruptionCount;
+        private final String firstOpenSourceApplication;
+
+        SerializationProxyV2(
+                long lastResumeTime,
+                long lastSuspendTime,
+                long millisecondsSpentInSession,
+                int interruptionCount,
+                String firstOpenSourceApplication
+
+        ) {
+            this.lastResumeTime = lastResumeTime;
+            this.lastSuspendTime = lastSuspendTime;
+            this.millisecondsSpentInSession = millisecondsSpentInSession;
+            this.interruptionCount = interruptionCount;
+            this.firstOpenSourceApplication = firstOpenSourceApplication;
+        }
+
+        private Object readResolve() {
+            return new FacebookTimeSpentData(
+                    lastResumeTime,
+                    lastSuspendTime,
+                    millisecondsSpentInSession,
+                    interruptionCount,
+                    firstOpenSourceApplication);
+        }
+    }
+
+    FacebookTimeSpentData() {
+        resetSession();
+    }
+
+    /**
+     * Constructor to be used for V2 serialization only, DO NOT CHANGE.
+     */
+    private FacebookTimeSpentData(
+        long lastResumeTime,
+        long lastSuspendTime,
+        long millisecondsSpentInSession,
+        int interruptionCount,
+        String firstOpenSourceApplication
+    ) {
+        resetSession();
+        this.lastResumeTime = lastResumeTime;
+        this.lastSuspendTime = lastSuspendTime;
+        this.millisecondsSpentInSession = millisecondsSpentInSession;
+        this.interruptionCount = interruptionCount;
+        this.firstOpenSourceApplication = firstOpenSourceApplication;
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV2(
+                lastResumeTime,
+                lastSuspendTime,
+                millisecondsSpentInSession,
+                interruptionCount,
+                firstOpenSourceApplication
+        );
+    }
+
+    void onSuspend(AppEventsLogger logger, long eventTime) {
+        if (!isAppActive) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Suspend for inactive app");
+            return;
+        }
+
+        long now = eventTime;
+        long delta = (now - lastResumeTime);
+        if (delta < 0) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+            delta = 0;
+        }
+        millisecondsSpentInSession += delta;
+        lastSuspendTime = now;
+        isAppActive = false;
+    }
+
+    void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationInfo) {
+        long now = eventTime;
+
+        // Retain old behavior for activated app event - log the event if the event hasn't
+        // been logged in the previous suppression interval or this is a cold launch.
+        // If this is a cold launch, always log the event. Otherwise, use the last
+        // event log time to determine if the app activate should be suppressed or not.
+        if (isColdLaunch() ||
+            ((now - lastActivateEventLoggedTime) > APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS)) {
+            Bundle eventParams = new Bundle();
+            eventParams.putString(
+                    AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                    sourceApplicationInfo);
+            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+            lastActivateEventLoggedTime = now;
+        }
+
+        // If this is an application that's not calling onSuspend yet, log and return. We can't
+        // track time spent for this application as there are no calls to onSuspend.
+        if (isAppActive) {
+          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Resume for active app");
+          return;
+        }
+
+        long interruptionDurationMillis = wasSuspendedEver() ? now - lastSuspendTime : 0;
+        if (interruptionDurationMillis < 0) {
+          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+          interruptionDurationMillis = 0;
+        }
+
+        // If interruption duration is > new session threshold, then log old session
+        // event and start a new session.
+        if (interruptionDurationMillis > NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION) {
+            logAppDeactivatedEvent(logger, interruptionDurationMillis);
+        } else {
+            // We're not logging this resume event - check to see if this should count
+            // as an interruption
+            if (interruptionDurationMillis > INTERRUPTION_THRESHOLD_MILLISECONDS) {
+                interruptionCount++;
+            }
+        }
+
+        // Set source application only for the first resume of the timespent session.
+        if (interruptionCount == 0) {
+            firstOpenSourceApplication = sourceApplicationInfo;
+        }
+
+        lastResumeTime = now;
+        isAppActive = true;
+    }
+
+    private void logAppDeactivatedEvent(AppEventsLogger logger,
+                                        long interruptionDurationMillis) {
+        // Log the old session information and clear the data
+        Bundle eventParams = new Bundle();
+        eventParams.putInt(
+                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
+                interruptionCount);
+        eventParams.putString(
+                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
+                String.format("session_quanta_%d", getQuantaIndex(interruptionDurationMillis)));
+        eventParams.putString(
+                AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
+                firstOpenSourceApplication);
+        logger.logEvent(
+                AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
+                (millisecondsSpentInSession/DateUtils.SECOND_IN_MILLIS),
+                eventParams);
+        resetSession();
+    }
+
+    private static int getQuantaIndex(long timeBetweenSessions) {
+        int quantaIndex = 0;
+
+        while (
+            quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
+            INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
+        ) {
+            ++quantaIndex;
+        }
+
+        return quantaIndex;
+    }
+
+    private void resetSession() {
+        isAppActive = false;
+        lastResumeTime = FIRST_TIME_LOAD_RESUME_TIME;
+        lastSuspendTime = FIRST_TIME_LOAD_RESUME_TIME;
+        interruptionCount = 0;
+        millisecondsSpentInSession = 0;
+    }
+
+    private boolean wasSuspendedEver() {
+        return lastSuspendTime != FIRST_TIME_LOAD_RESUME_TIME;
+    }
+
+    private boolean isColdLaunch() {
+        // On the very first call in the process lifecycle, this will always
+        // return true. After that, it will always return false.
+        boolean result = !isWarmLaunch;
+        isWarmLaunch = true;
+        return result;
+    }
+}
diff --git a/facebook/src/com/facebook/GetTokenClient.java b/facebook/src/com/facebook/GetTokenClient.java
index 23cb31bf8..c0f1a7015 100644
--- a/facebook/src/com/facebook/GetTokenClient.java
+++ b/facebook/src/com/facebook/GetTokenClient.java
@@ -18,7 +18,7 @@
 
 
 import android.content.Context;
-import android.os.*;
+import android.os.Bundle;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.PlatformServiceClient;
 
diff --git a/facebook/src/com/facebook/NativeAppCallAttachmentStore.java b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
index dc4108656..aa7f39ed7 100644
--- a/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
+++ b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
@@ -24,7 +24,10 @@
 
 import java.io.*;
 import java.net.URLEncoder;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
 
 /**
  * <p>This class works in conjunction with {@link NativeAppCallContentProvider} to allow apps to attach binary
@@ -73,22 +76,22 @@ public void processAttachment(Bitmap attachment, File outputFile) throws IOExcep
     }
 
     /**
-     * Adds a number of bitmap attachment files associated with a native app call. The attachments will be
+     * Adds a number of bitmap/video attachment files associated with a native app call. The attachments will be
      * served via {@link NativeAppCallContentProvider#openFile(android.net.Uri, String) openFile}.
      *
      * @param context the Context the call is being made from
      * @param callId the unique ID of the call
-     * @param imageAttachments a Map of attachment names to Files containing the bitmaps; the attachment names will be
-     *                         part of the URI processed by openFile
+     * @param mediaAttachmentFiles a Map of attachment names to Files containing the bitmaps/videos; the attachment
+     *                             names will be part of the URI processed by openFile
      * @throws java.io.IOException
      */
-    public void addAttachmentFilesForCall(Context context, UUID callId, Map<String, File> imageAttachmentFiles) {
+    public void addAttachmentFilesForCall(Context context, UUID callId, Map<String, File> mediaAttachmentFiles) {
         Validate.notNull(context, "context");
         Validate.notNull(callId, "callId");
-        Validate.containsNoNulls(imageAttachmentFiles.values(), "imageAttachmentFiles");
-        Validate.containsNoNullOrEmpty(imageAttachmentFiles.keySet(), "imageAttachmentFiles");
+        Validate.containsNoNulls(mediaAttachmentFiles.values(), "mediaAttachmentFiles");
+        Validate.containsNoNullOrEmpty(mediaAttachmentFiles.keySet(), "mediaAttachmentFiles");
 
-        addAttachments(context, callId, imageAttachmentFiles, new ProcessAttachment<File>() {
+        addAttachments(context, callId, mediaAttachmentFiles, new ProcessAttachment<File>() {
             @Override
             public void processAttachment(File attachment, File outputFile) throws IOException {
                 FileOutputStream outputStream = new FileOutputStream(outputFile);
diff --git a/facebook/src/com/facebook/NativeAppCallContentProvider.java b/facebook/src/com/facebook/NativeAppCallContentProvider.java
index bde165f58..9140c2702 100644
--- a/facebook/src/com/facebook/NativeAppCallContentProvider.java
+++ b/facebook/src/com/facebook/NativeAppCallContentProvider.java
@@ -24,14 +24,15 @@
 import android.util.Log;
 import android.util.Pair;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.UUID;
 
 /**
  * <p>Implements a <a href="http://developer.android.com/reference/android/content/ContentProvider.html">
  * ContentProvider</a> that can be used to provide binary attachments (e.g., images) to calls made
- * via @link FacebookDialog}. The {@link NativeAppCallAttachmentStore} class provides methods to attach
- * and clean up the attachments.
+ * via {@link com.facebook.widget.FacebookDialog}. The {@link NativeAppCallAttachmentStore}
+ * class provides methods to attach and clean up the attachments.
  *
  * <p>Note that this ContentProvider is only necessary if an application wishes to attach images, etc., that are
  * stored in memory and do not have another way to be referenced by a content URI. For images obtained from,
@@ -41,7 +42,7 @@
  * <p>If an application wishes to attach images that are stored in-memory within the application, this content
  * provider must be listed in the application's AndroidManifest.xml, and it should be named according to the
  * pattern <code>"com.facebook.app.NativeAppCallContentProvider{FACEBOOK_APP_ID}"</code>. See the
- * {@link NativeAppCallContentProvider#getAttachmentUrl(String) getContentProviderName} method.</p>
+ * {@link NativeAppCallContentProvider#getAttachmentUrl getContentProviderName} method.</p>
  */
 public class NativeAppCallContentProvider extends ContentProvider {
     private static final String TAG = NativeAppCallContentProvider.class.getName();
diff --git a/facebook/src/com/facebook/ProgressNoopOutputStream.java b/facebook/src/com/facebook/ProgressNoopOutputStream.java
new file mode 100644
index 000000000..e0e3770df
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressNoopOutputStream.java
@@ -0,0 +1,74 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.OutputStream;
+import java.util.HashMap;
+import java.util.Map;
+
+class ProgressNoopOutputStream extends OutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap = new HashMap<Request, RequestProgress>();
+    private final Handler callbackHandler;
+
+    private Request currentRequest;
+    private RequestProgress currentRequestProgress;
+    private int batchMax;
+
+    ProgressNoopOutputStream(Handler callbackHandler) {
+        this.callbackHandler = callbackHandler;
+    }
+
+    public void setCurrentRequest(Request currentRequest) {
+        this.currentRequest = currentRequest;
+        this.currentRequestProgress = currentRequest != null? progressMap.get(currentRequest) : null;
+    }
+
+    int getMaxProgress() {
+        return batchMax;
+    }
+
+    Map<Request,RequestProgress> getProgressMap() {
+        return progressMap;
+    }
+
+    void addProgress(long size) {
+        if (currentRequestProgress == null) {
+            currentRequestProgress = new RequestProgress(callbackHandler, currentRequest);
+            progressMap.put(currentRequest, currentRequestProgress);
+        }
+
+        currentRequestProgress.addToMax(size);
+        batchMax += size;
+    }
+
+    @Override
+    public void write(byte[] buffer) {
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) {
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) {
+        addProgress(1);
+    }
+}
diff --git a/facebook/src/com/facebook/ProgressOutputStream.java b/facebook/src/com/facebook/ProgressOutputStream.java
new file mode 100644
index 000000000..780baffd6
--- /dev/null
+++ b/facebook/src/com/facebook/ProgressOutputStream.java
@@ -0,0 +1,121 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+import java.io.FilterOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.Map;
+
+class ProgressOutputStream extends FilterOutputStream implements RequestOutputStream {
+    private final Map<Request, RequestProgress> progressMap;
+    private final RequestBatch requests;
+    private final long threshold;
+
+    private long batchProgress, lastReportedProgress, maxProgress;
+    private RequestProgress currentRequestProgress;
+
+    ProgressOutputStream(OutputStream out, RequestBatch requests, Map<Request, RequestProgress> progressMap, long maxProgress) {
+        super(out);
+        this.requests = requests;
+        this.progressMap = progressMap;
+        this.maxProgress = maxProgress;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    private void addProgress(long size) {
+        if (currentRequestProgress != null) {
+            currentRequestProgress.addProgress(size);
+        }
+
+        batchProgress += size;
+
+        if (batchProgress >= lastReportedProgress + threshold || batchProgress >= maxProgress) {
+            reportBatchProgress();
+        }
+    }
+
+    private void reportBatchProgress() {
+        if (batchProgress > lastReportedProgress) {
+            for (RequestBatch.Callback callback : requests.getCallbacks()) {
+                if (callback instanceof RequestBatch.OnProgressCallback) {
+                    final Handler callbackHandler = requests.getCallbackHandler();
+
+                    // Keep copies to avoid threading issues
+                    final RequestBatch.OnProgressCallback progressCallback = (RequestBatch.OnProgressCallback) callback;
+                    if (callbackHandler == null) {
+                        progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                    }
+                    else {
+                        callbackHandler.post(new Runnable() {
+                            @Override
+                            public void run() {
+                                progressCallback.onBatchProgress(requests, batchProgress, maxProgress);
+                            }
+                        });
+                    }
+                }
+            }
+
+            lastReportedProgress = batchProgress;
+        }
+    }
+
+    public void setCurrentRequest(Request request) {
+        currentRequestProgress = request != null? progressMap.get(request) : null;
+    }
+
+    long getBatchProgress() {
+        return batchProgress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    @Override
+    public void write(byte[] buffer) throws IOException {
+        out.write(buffer);
+        addProgress(buffer.length);
+    }
+
+    @Override
+    public void write(byte[] buffer, int offset, int length) throws IOException {
+        out.write(buffer, offset, length);
+        addProgress(length);
+    }
+
+    @Override
+    public void write(int oneByte) throws IOException {
+        out.write(oneByte);
+        addProgress(1);
+    }
+
+    @Override
+    public void close() throws IOException {
+        super.close();
+
+        for (RequestProgress p : progressMap.values()) {
+            p.reportProgress();
+        }
+
+        reportBatchProgress();
+    }
+}
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index cf2ba39f9..53db060f8 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -22,12 +22,10 @@
 import android.net.Uri;
 import android.os.*;
 import android.text.TextUtils;
+import android.util.Log;
 import android.util.Pair;
-import com.facebook.internal.ServerProtocol;
+import com.facebook.internal.*;
 import com.facebook.model.*;
-import com.facebook.internal.Logger;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -40,17 +38,18 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import java.util.zip.GZIPOutputStream;
 
 /**
- * A single request to be sent to the Facebook Platform through either the <a
- * href="https://developers.facebook.com/docs/reference/api/">Graph API</a> or <a
- * href="https://developers.facebook.com/docs/reference/rest/">REST API</a>. The Request class provides functionality
+ * A single request to be sent to the Facebook Platform through the <a
+ * href="https://developers.facebook.com/docs/reference/api/">Graph API</a>. The Request class provides functionality
  * relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip
  * to the service) and making calls asynchronously.
  *
- * The particular service endpoint that a request targets is determined by either a graph path (see the
- * {@link #setGraphPath(String) setGraphPath} method) or a REST method name (see the {@link #setRestMethod(String)
- * setRestMethod} method); a single request may not target both.
+ * The particular service endpoint that a request targets is determined by a graph path (see the
+ * {@link #setGraphPath(String) setGraphPath} method).
  *
  * A Request can be executed either anonymously or representing an authenticated user. In the former case, no Session
  * needs to be specified, while in the latter, a Session that is in an opened state must be provided. If requests are
@@ -68,10 +67,13 @@
      */
     public static final int MAXIMUM_BATCH_SIZE = 50;
 
+    public static final String TAG = Request.class.getSimpleName();
+
     private static final String ME = "me";
     private static final String MY_FRIENDS = "me/friends";
     private static final String MY_PHOTOS = "me/photos";
     private static final String MY_VIDEOS = "me/videos";
+    private static final String VIDEOS_SUFFIX = "/videos";
     private static final String SEARCH = "search";
     private static final String MY_FEED = "me/feed";
     private static final String MY_STAGING_RESOURCES = "me/staging_resources";
@@ -81,6 +83,8 @@
     private static final String USER_AGENT_BASE = "FBAndroidSDK";
     private static final String USER_AGENT_HEADER = "User-Agent";
     private static final String CONTENT_TYPE_HEADER = "Content-Type";
+    private static final String ACCEPT_LANGUAGE_HEADER = "Accept-Language";
+    private static final String CONTENT_ENCODING_HEADER = "Content-Encoding";
 
     // Parameter names/values
     private static final String PICTURE_PARAM = "picture";
@@ -99,7 +103,6 @@
     private static final String BATCH_PARAM = "batch";
     private static final String ATTACHMENT_FILENAME_PREFIX = "file";
     private static final String ATTACHED_FILES_PARAM = "attached_files";
-    private static final String MIGRATION_BUNDLE_PARAM = "migration_bundle";
     private static final String ISO_8601_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ssZ";
     private static final String STAGING_PARAM = "file";
     private static final String OBJECT_PARAM = "object";
@@ -108,11 +111,13 @@
 
     private static String defaultBatchApplicationId;
 
+    // Group 1 in the pattern is the path without the version info
+    private static Pattern versionPattern = Pattern.compile("^/?v\\d+\\.\\d+/(.*)");
+
     private Session session;
     private HttpMethod httpMethod;
     private String graphPath;
     private GraphObject graphObject;
-    private String restMethod;
     private String batchEntryName;
     private String batchEntryDependsOn;
     private boolean batchEntryOmitResultOnSuccess = true;
@@ -120,6 +125,8 @@
     private Callback callback;
     private String overriddenURL;
     private Object tag;
+    private String version;
+    private boolean skipClientToken = false;
 
     /**
      * Constructs a request without a session, graph path, or any other parameters.
@@ -186,9 +193,36 @@ public Request(Session session, String graphPath, Bundle parameters, HttpMethod
      *            a callback that will be called when the request is completed to handle success or error conditions
      */
     public Request(Session session, String graphPath, Bundle parameters, HttpMethod httpMethod, Callback callback) {
+        this(session, graphPath, parameters, httpMethod, callback, null);
+    }
+
+    /**
+     * Constructs a request with a specific Session, graph path, parameters, and HTTP method. A Session need not be
+     * provided, in which case the request is sent without an access token and thus is not executed in the context of
+     * any particular user. Only certain graph requests can be expected to succeed in this case. If a Session is
+     * provided, it must be in an opened state or the request will fail.
+     *
+     * Depending on the httpMethod parameter, the object at the graph path may be retrieved, created, or deleted.
+     *
+     * @param session
+     *            the Session to use, or null
+     * @param graphPath
+     *            the graph path to retrieve, create, or delete
+     * @param parameters
+     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
+     *            Bitmaps, Dates, or Byte arrays.
+     * @param httpMethod
+     *            the {@link HttpMethod} to use for the request, or null for default (HttpMethod.GET)
+     * @param callback
+     *            a callback that will be called when the request is completed to handle success or error conditions
+     * @param version
+     *            the version of the Graph API
+     */
+    public Request(Session session, String graphPath, Bundle parameters, HttpMethod httpMethod, Callback callback, String version) {
         this.session = session;
         this.graphPath = graphPath;
         this.callback = callback;
+        this.version = version;
 
         setHttpMethod(httpMethod);
 
@@ -198,8 +232,8 @@ public Request(Session session, String graphPath, Bundle parameters, HttpMethod
             this.parameters = new Bundle();
         }
 
-        if (!this.parameters.containsKey(MIGRATION_BUNDLE_PARAM)) {
-            this.parameters.putString(MIGRATION_BUNDLE_PARAM, FacebookSdkVersion.MIGRATION_BUNDLE);
+        if (this.version == null) {
+            this.version = ServerProtocol.getAPIVersion();
         }
     }
 
@@ -232,26 +266,6 @@ public static Request newPostRequest(Session session, String graphPath, GraphObj
         return request;
     }
 
-    /**
-     * Creates a new Request configured to make a call to the Facebook REST API.
-     *
-     * @param session
-     *            the Session to use, or null; if non-null, the session must be in an opened state
-     * @param restMethod
-     *            the method in the Facebook REST API to execute
-     * @param parameters
-     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
-     *            Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod
-     *            the HTTP method to use for the request; must be one of GET, POST, or DELETE
-     * @return a Request that is ready to execute
-     */
-    public static Request newRestRequest(Session session, String restMethod, Bundle parameters, HttpMethod httpMethod) {
-        Request request = new Request(session, null, parameters, httpMethod);
-        request.setRestMethod(restMethod);
-        return request;
-    }
-
     /**
      * Creates a new Request configured to retrieve a user's own profile.
      *
@@ -509,6 +523,7 @@ public static Request newStatusUpdateRequest(Session session, String message, Gr
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
      * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} with `true` for this user.
+     * <b>You must call this method from a background thread for it to work properly.</b>
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -543,6 +558,7 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session, Cont
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
      * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} ;} with `true` for this user.
+     * <b>You must call this method from a background thread for it to work properly.</b>
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -584,20 +600,23 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session,
         }
 
         String endpoint = applicationId + "/custom_audience_third_party_id";
-
+        AttributionIdentifiers attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
         Bundle parameters = new Bundle();
+
         if (session == null) {
             // Only use the attributionID if we don't have an open session.  If we do have an open session, then
             // the user token will be used to identify the user, and is more reliable than the attributionID.
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
-            if (attributionId != null) {
-                parameters.putString("udid", attributionId);
+            String udid = attributionIdentifiers.getAttributionId() != null
+                ? attributionIdentifiers.getAttributionId()
+                : attributionIdentifiers.getAndroidAdvertiserId();
+            if (attributionIdentifiers.getAttributionId() != null) {
+                parameters.putString("udid", udid);
             }
         }
 
         // Server will choose to not provide the App User ID in the event that event usage has been limited for
         // this user for this app.
-        if (Settings.getLimitEventAndDataUsage(context)) {
+        if (Settings.getLimitEventAndDataUsage(context) || attributionIdentifiers.isTrackingLimited()) {
             parameters.putString("limit_event_usage", "1");
         }
 
@@ -838,7 +857,7 @@ public final String getGraphPath() {
     }
 
     /**
-     * Sets the graph path of this request. A graph path may not be set if a REST method has been specified.
+     * Sets the graph path of this request.
      *
      * @param graphPath
      *            the graph path for this request
@@ -870,41 +889,49 @@ public final void setHttpMethod(HttpMethod httpMethod) {
     }
 
     /**
-     * Returns the parameters for this request.
+     * Returns the version of the API that this request will use.  By default this is the current API at the time
+     * the SDK is released.
      *
-     * @return the parameters
+     * @return the version that this request will use
      */
-    public final Bundle getParameters() {
-        return this.parameters;
+    public final String getVersion() {
+        return this.version;
     }
 
     /**
-     * Sets the parameters for this request.
+     * Set the version to use for this request.  By default the version will be the current API at the time the SDK
+     * is released.  Only use this if you need to explicitly override.
      *
-     * @param parameters
-     *            the parameters
+     * @param version The version to use.  Should look like "v2.0"
      */
-    public final void setParameters(Bundle parameters) {
-        this.parameters = parameters;
+    public final void setVersion(String version) {
+        this.version = version;
     }
 
     /**
-     * Returns the REST method to call for this request.
+     * This is an internal function that is not meant to be used by developers.
+     */
+    public final void setSkipClientToken(boolean skipClientToken) {
+        this.skipClientToken = skipClientToken;
+    }
+
+    /**
+     * Returns the parameters for this request.
      *
-     * @return the REST method
+     * @return the parameters
      */
-    public final String getRestMethod() {
-        return this.restMethod;
+    public final Bundle getParameters() {
+        return this.parameters;
     }
 
     /**
-     * Sets the REST method to call for this request. A REST method may not be set if a graph path has been specified.
+     * Sets the parameters for this request.
      *
-     * @param restMethod
-     *            the REST method to call
+     * @param parameters
+     *            the parameters
      */
-    public final void setRestMethod(String restMethod) {
-        this.restMethod = restMethod;
+    public final void setParameters(Bundle parameters) {
+        this.parameters = parameters;
     }
 
     /**
@@ -1082,30 +1109,6 @@ public static RequestAsyncTask executePostRequestAsync(Session session, String g
         return newPostRequest(session, graphPath, graphObject, callback).executeAsync();
     }
 
-    /**
-     * Starts a new Request configured to make a call to the Facebook REST API.
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * This method is deprecated. Prefer to call Request.newRestRequest(...).executeAsync();
-     *
-     * @param session
-     *            the Session to use, or null; if non-null, the session must be in an opened state
-     * @param restMethod
-     *            the method in the Facebook REST API to execute
-     * @param parameters
-     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
-     *            Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod
-     *            the HTTP method to use for the request; must be one of GET, POST, or DELETE
-     * @return a RequestAsyncTask that is executing the request
-     */
-    @Deprecated
-    public static RequestAsyncTask executeRestRequestAsync(Session session, String restMethod, Bundle parameters,
-            HttpMethod httpMethod) {
-        return newRestRequest(session, restMethod, parameters, httpMethod).executeAsync();
-    }
-
     /**
      * Starts a new Request configured to retrieve a user's own profile.
      * <p/>
@@ -1335,10 +1338,6 @@ public static HttpURLConnection toHttpConnection(Collection<Request> requests) {
      */
     public static HttpURLConnection toHttpConnection(RequestBatch requests) {
 
-        for (Request request : requests) {
-            request.validate();
-        }
-
         URL url = null;
         try {
             if (requests.size() == 1) {
@@ -1645,8 +1644,8 @@ public static RequestAsyncTask executeConnectionAsync(Handler callbackHandler, H
     @Override
     public String toString() {
         return new StringBuilder().append("{Request: ").append(" session: ").append(session).append(", graphPath: ")
-                .append(graphPath).append(", graphObject: ").append(graphObject).append(", restMethod: ")
-                .append(restMethod).append(", httpMethod: ").append(httpMethod).append(", parameters: ")
+                .append(graphPath).append(", graphObject: ").append(graphObject)
+                .append(", httpMethod: ").append(httpMethod).append(", parameters: ")
                 .append(parameters).append("}").toString();
     }
 
@@ -1687,12 +1686,12 @@ public void run() {
         }
     }
 
-    static HttpURLConnection createConnection(URL url) throws IOException {
+    private static HttpURLConnection createConnection(URL url) throws IOException {
         HttpURLConnection connection;
         connection = (HttpURLConnection) url.openConnection();
 
         connection.setRequestProperty(USER_AGENT_HEADER, getUserAgent());
-        connection.setRequestProperty(CONTENT_TYPE_HEADER, getMimeContentType());
+        connection.setRequestProperty(ACCEPT_LANGUAGE_HEADER, Locale.getDefault().toString());
 
         connection.setChunkedStreamingMode(0);
         return connection;
@@ -1708,6 +1707,16 @@ private void addCommonParameters() {
                 Logger.registerAccessToken(accessToken);
                 this.parameters.putString(ACCESS_TOKEN_PARAM, accessToken);
             }
+        } else if (!skipClientToken && !this.parameters.containsKey(ACCESS_TOKEN_PARAM)) {
+            String appID = Settings.getApplicationId();
+            String clientToken = Settings.getClientToken();
+            if (!Utility.isNullOrEmpty(appID) && !Utility.isNullOrEmpty(clientToken)) {
+                String accessToken = appID + "|" + clientToken;
+                this.parameters.putString(ACCESS_TOKEN_PARAM, accessToken);
+            } else {
+                Log.d(TAG,
+                        "Warning: Sessionless Request needs token but missing either application ID or client token.");
+            }
         }
         this.parameters.putString(SDK_PARAM, SDK_ANDROID);
         this.parameters.putString(FORMAT_PARAM, FORMAT_JSON);
@@ -1745,13 +1754,7 @@ final String getUrlForBatchedRequest() {
             throw new FacebookException("Can't override URL for a batch request");
         }
 
-        String baseUrl;
-        if (this.restMethod != null) {
-            baseUrl = ServerProtocol.BATCHED_REST_METHOD_URL_BASE + this.restMethod;
-        } else {
-            baseUrl = this.graphPath;
-        }
-
+        String baseUrl = getGraphPathWithVersion();
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
@@ -1761,18 +1764,45 @@ final String getUrlForSingleRequest() {
             return overriddenURL.toString();
         }
 
-        String baseUrl;
-        if (this.restMethod != null) {
-            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), restMethod);
+        String graphBaseUrlBase;
+        if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
+            graphBaseUrlBase = ServerProtocol.getGraphVideoUrlBase();
         } else {
-            baseUrl = String.format("%s/%s", ServerProtocol.getGraphUrlBase(), graphPath);
+            graphBaseUrlBase = ServerProtocol.getGraphUrlBase();
         }
+        String baseUrl = String.format("%s/%s", graphBaseUrlBase, getGraphPathWithVersion());
 
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
 
-    private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONException, IOException {
+    private String getGraphPathWithVersion() {
+        Matcher matcher = versionPattern.matcher(this.graphPath);
+        if (matcher.matches()) {
+            return this.graphPath;
+        }
+        return String.format("%s/%s", this.version, this.graphPath);
+    }
+
+    private static class Attachment {
+        private final Request request;
+        private final Object value;
+
+        public Attachment(Request request, Object value) {
+            this.request = request;
+            this.value = value;
+        }
+
+        public Request getRequest() {
+            return request;
+        }
+
+        public Object getValue() {
+            return value;
+        }
+    }
+
+    private void serializeToBatch(JSONArray batch, Map<String, Attachment> attachments) throws JSONException, IOException {
         JSONObject batchEntry = new JSONObject();
 
         if (this.batchEntryName != null) {
@@ -1800,7 +1830,7 @@ private void serializeToBatch(JSONArray batch, Bundle attachments) throws JSONEx
                 // Make the name unique across this entire batch.
                 String name = String.format("%s%d", ATTACHMENT_FILENAME_PREFIX, attachments.size());
                 attachmentNames.add(name);
-                Utility.putObjectInBundle(attachments, name, value);
+                attachments.put(name, new Attachment(this, value));
             }
         }
 
@@ -1825,10 +1855,41 @@ public void writeString(String key, String value) throws IOException {
         batch.put(batchEntry);
     }
 
-    private void validate() {
-        if (graphPath != null && restMethod != null) {
-            throw new IllegalArgumentException("Only one of a graph path or REST method may be specified per request.");
+    private static boolean hasOnProgressCallbacks(RequestBatch requests) {
+        for (RequestBatch.Callback callback : requests.getCallbacks()) {
+            if (callback instanceof RequestBatch.OnProgressCallback) {
+                return true;
+            }
+        }
+
+        for (Request request : requests) {
+            if (request.getCallback() instanceof OnProgressCallback) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    private static void setConnectionContentType(HttpURLConnection connection, boolean shouldUseGzip) {
+        if (shouldUseGzip) {
+            connection.setRequestProperty(CONTENT_TYPE_HEADER, "application/x-www-form-urlencoded");
+            connection.setRequestProperty(CONTENT_ENCODING_HEADER, "gzip");
+        } else {
+            connection.setRequestProperty(CONTENT_TYPE_HEADER, getMimeContentType());
+        }
+    }
+
+    private static boolean isGzipCompressible(RequestBatch requests) {
+        for(Request request : requests) {
+            for (String key : request.parameters.keySet()) {
+                Object value = request.parameters.get(key);
+                if (isSupportedAttachmentType(value)) {
+                    return false;
+                }
+            }
         }
+        return true;
     }
 
     final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnection connection)
@@ -1836,9 +1897,11 @@ final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnect
         Logger logger = new Logger(LoggingBehavior.REQUESTS, "Request");
 
         int numRequests = requests.size();
+        boolean shouldUseGzip = isGzipCompressible(requests);
 
         HttpMethod connectionHttpMethod = (numRequests == 1) ? requests.get(0).httpMethod : HttpMethod.POST;
         connection.setRequestMethod(connectionHttpMethod.name());
+        setConnectionContentType(connection, shouldUseGzip);
 
         URL url = connection.getURL();
         logger.append("Request:\n");
@@ -1861,44 +1924,95 @@ final static void serializeToUrlConnection(RequestBatch requests, HttpURLConnect
 
         connection.setDoOutput(true);
 
-        BufferedOutputStream outputStream = new BufferedOutputStream(connection.getOutputStream());
+        OutputStream outputStream = null;
         try {
-            Serializer serializer = new Serializer(outputStream, logger);
+            outputStream = new BufferedOutputStream(connection.getOutputStream());
+            if (shouldUseGzip) {
+                outputStream = new GZIPOutputStream(outputStream);
+            }
 
-            if (numRequests == 1) {
-                Request request = requests.get(0);
+            if (hasOnProgressCallbacks(requests)) {
+                ProgressNoopOutputStream countingStream = null;
+                countingStream = new ProgressNoopOutputStream(requests.getCallbackHandler());
+                processRequest(requests, null, numRequests, url, countingStream, shouldUseGzip);
+
+                int max = countingStream.getMaxProgress();
+                Map<Request, RequestProgress> progressMap = countingStream.getProgressMap();
+
+                outputStream = new ProgressOutputStream(outputStream, requests, progressMap, max);
+            }
+
+            processRequest(requests, logger, numRequests, url, outputStream, shouldUseGzip);
+        }
+        finally {
+            if (outputStream != null) {
+                outputStream.close();
+            }
+        }
+
+        logger.log();
+    }
+
+    private static void processRequest(RequestBatch requests, Logger logger, int numRequests, URL url, OutputStream outputStream, boolean shouldUseGzip)
+            throws IOException, JSONException
+    {
+        Serializer serializer = new Serializer(outputStream, logger, shouldUseGzip);
 
+        if (numRequests == 1) {
+            Request request = requests.get(0);
+
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            for(String key : request.parameters.keySet()) {
+                Object value = request.parameters.get(key);
+                if (isSupportedAttachmentType(value)) {
+                    attachments.put(key, new Attachment(request, value));
+                }
+            }
+
+            if (logger != null) {
                 logger.append("  Parameters:\n");
-                serializeParameters(request.parameters, serializer);
+            }
+            serializeParameters(request.parameters, serializer, request);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(request.parameters, serializer);
+            }
+            serializeAttachments(attachments, serializer);
 
-                if (request.graphObject != null) {
-                    processGraphObject(request.graphObject, url.getPath(), serializer);
-                }
-            } else {
-                String batchAppID = getBatchAppId(requests);
-                if (Utility.isNullOrEmpty(batchAppID)) {
-                    throw new FacebookException("At least one request in a batch must have an open Session, or a "
-                            + "default app ID must be specified.");
-                }
+            if (request.graphObject != null) {
+                processGraphObject(request.graphObject, url.getPath(), serializer);
+            }
+        } else {
+            String batchAppID = getBatchAppId(requests);
+            if (Utility.isNullOrEmpty(batchAppID)) {
+                throw new FacebookException("At least one request in a batch must have an open Session, or a "
+                        + "default app ID must be specified.");
+            }
 
-                serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
+            serializer.writeString(BATCH_APP_ID_PARAM, batchAppID);
 
-                // We write out all the requests as JSON, remembering which file attachments they have, then
-                // write out the attachments.
-                Bundle attachments = new Bundle();
-                serializeRequestsAsJSON(serializer, requests, attachments);
+            // We write out all the requests as JSON, remembering which file attachments they have, then
+            // write out the attachments.
+            Map<String, Attachment> attachments = new HashMap<String, Attachment>();
+            serializeRequestsAsJSON(serializer, requests, attachments);
 
+            if (logger != null) {
                 logger.append("  Attachments:\n");
-                serializeAttachments(attachments, serializer);
             }
-        } finally {
-            outputStream.close();
+            serializeAttachments(attachments, serializer);
         }
+    }
 
-        logger.log();
+    private static boolean isMeRequest(String path) {
+        Matcher matcher = versionPattern.matcher(path);
+        if (matcher.matches()) {
+            // Group 1 contains the path aside from version
+            path = matcher.group(1);
+        }
+        if (path.startsWith("me/") || path.startsWith("/me/")) {
+            return true;
+        }
+        return false;
     }
 
     private static void processGraphObject(GraphObject graphObject, String path, KeyValueSerializer serializer)
@@ -1910,7 +2024,7 @@ private static void processGraphObject(GraphObject graphObject, String path, Key
         // but passing the OG Action type as a substituted parameter is unlikely.
         // It looks like an OG Action if it's posted to me/namespace:action[?other=stuff].
         boolean isOGAction = false;
-        if (path.startsWith("me/") || path.startsWith("/me/")) {
+        if (isMeRequest(path)) {
             int colonLocation = path.indexOf(":");
             int questionMarkLocation = path.indexOf("?");
             isOGAction = colonLocation > 3 && (questionMarkLocation == -1 || colonLocation < questionMarkLocation);
@@ -1952,6 +2066,8 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
                     processGraphObjectProperty(key, jsonObject.optString("id"), serializer, passByValue);
                 } else if (jsonObject.has("url")) {
                     processGraphObjectProperty(key, jsonObject.optString("url"), serializer, passByValue);
+                } else if (jsonObject.has(NativeProtocol.OPEN_GRAPH_CREATE_OBJECT_KEY)) {
+                    processGraphObjectProperty(key, jsonObject.toString(), serializer, passByValue);
                 }
             }
         } else if (JSONArray.class.isAssignableFrom(valueClass)) {
@@ -1977,37 +2093,36 @@ private static void processGraphObjectProperty(String key, Object value, KeyValu
         }
     }
 
-    private static void serializeParameters(Bundle bundle, Serializer serializer) throws IOException {
+    private static void serializeParameters(Bundle bundle, Serializer serializer, Request request) throws IOException {
         Set<String> keys = bundle.keySet();
 
         for (String key : keys) {
             Object value = bundle.get(key);
             if (isSupportedParameterType(value)) {
-                serializer.writeObject(key, value);
+                serializer.writeObject(key, value, request);
             }
         }
     }
 
-    private static void serializeAttachments(Bundle bundle, Serializer serializer) throws IOException {
-        Set<String> keys = bundle.keySet();
+    private static void serializeAttachments(Map<String, Attachment> attachments, Serializer serializer) throws IOException {
+        Set<String> keys = attachments.keySet();
 
         for (String key : keys) {
-            Object value = bundle.get(key);
-            if (isSupportedAttachmentType(value)) {
-                serializer.writeObject(key, value);
+            Attachment attachment = attachments.get(key);
+            if (isSupportedAttachmentType(attachment.getValue())) {
+                serializer.writeObject(key, attachment.getValue(), attachment.getRequest());
             }
         }
     }
 
-    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Bundle attachments)
+    private static void serializeRequestsAsJSON(Serializer serializer, Collection<Request> requests, Map<String, Attachment> attachments)
             throws JSONException, IOException {
         JSONArray batch = new JSONArray();
         for (Request request : requests) {
             request.serializeToBatch(batch, attachments);
         }
 
-        String batchAsString = batch.toString();
-        serializer.writeString(BATCH_PARAM, batchAsString);
+        serializer.writeRequestsAsJson(BATCH_PARAM, batch, requests);
     }
 
     private static String getMimeContentType() {
@@ -2079,16 +2194,22 @@ private static String parameterToString(Object value) {
     }
 
     private static class Serializer implements KeyValueSerializer {
-        private final BufferedOutputStream outputStream;
+        private final OutputStream outputStream;
         private final Logger logger;
         private boolean firstWrite = true;
+        private boolean useUrlEncode = false;
 
-        public Serializer(BufferedOutputStream outputStream, Logger logger) {
+        public Serializer(OutputStream outputStream, Logger logger, boolean useUrlEncode) {
             this.outputStream = outputStream;
             this.logger = logger;
+            this.useUrlEncode = useUrlEncode;
         }
 
-        public void writeObject(String key, Object value) throws IOException {
+        public void writeObject(String key, Object value, Request request) throws IOException {
+            if (outputStream instanceof RequestOutputStream) {
+                ((RequestOutputStream) outputStream).setCurrentRequest(request);
+            }
+
             if (isSupportedParameterType(value)) {
                 writeString(key, parameterToString(value));
             } else if (value instanceof Bitmap) {
@@ -2104,6 +2225,33 @@ public void writeObject(String key, Object value) throws IOException {
             }
         }
 
+        public void writeRequestsAsJson(String key, JSONArray requestJsonArray, Collection<Request> requests)
+                throws IOException, JSONException {
+            if (! (outputStream instanceof RequestOutputStream)) {
+                writeString(key, requestJsonArray.toString());
+                return;
+            }
+
+            RequestOutputStream requestOutputStream = (RequestOutputStream) outputStream;
+            writeContentDisposition(key, null, null);
+            write("[");
+            int i = 0;
+            for (Request request : requests) {
+                JSONObject requestJson = requestJsonArray.getJSONObject(i);
+                requestOutputStream.setCurrentRequest(request);
+                if (i > 0) {
+                    write(",%s", requestJson.toString());
+                } else {
+                    write("%s", requestJson.toString());
+                }
+                i++;
+            }
+            write("]");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, requestJsonArray.toString());
+            }
+        }
+
         public void writeString(String key, String value) throws IOException {
             writeContentDisposition(key, null, null);
             writeLine("%s", value);
@@ -2119,7 +2267,9 @@ public void writeBitmap(String key, Bitmap bitmap) throws IOException {
             bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, "<Image>");
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, "<Image>");
+            }
         }
 
         public void writeBytes(String key, byte[] bytes) throws IOException {
@@ -2127,7 +2277,9 @@ public void writeBytes(String key, byte[] bytes) throws IOException {
             this.outputStream.write(bytes);
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", bytes.length));
+            }
         }
 
         public void writeFile(String key, ParcelFileDescriptorWithMimeType descriptorWithMimeType) throws IOException {
@@ -2140,62 +2292,85 @@ public void writeFile(String key, ParcelFileDescriptor descriptor, String mimeTy
             }
             writeContentDisposition(key, key, mimeType);
 
-            ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
-            BufferedInputStream bufferedInputStream = null;
             int totalBytes = 0;
-            try {
-                inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
-                bufferedInputStream = new BufferedInputStream(inputStream);
-
-                byte[] buffer = new byte[8192];
-                int bytesRead;
-                while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
-                    this.outputStream.write(buffer, 0, bytesRead);
-                    totalBytes += bytesRead;
-                }
-            } finally {
-                if (bufferedInputStream != null) {
-                    bufferedInputStream.close();
-                }
-                if (inputStream != null) {
-                    inputStream.close();
+
+            if (outputStream instanceof ProgressNoopOutputStream) {
+                // If we are only counting bytes then skip reading the file
+                ((ProgressNoopOutputStream) outputStream).addProgress(descriptor.getStatSize());
+            }
+            else {
+                ParcelFileDescriptor.AutoCloseInputStream inputStream = null;
+                BufferedInputStream bufferedInputStream = null;
+                try {
+                    inputStream = new ParcelFileDescriptor.AutoCloseInputStream(descriptor);
+                    bufferedInputStream = new BufferedInputStream(inputStream);
+
+                    byte[] buffer = new byte[8192];
+                    int bytesRead;
+                    while ((bytesRead = bufferedInputStream.read(buffer)) != -1) {
+                        this.outputStream.write(buffer, 0, bytesRead);
+                        totalBytes += bytesRead;
+                    }
+                } finally {
+                    if (bufferedInputStream != null) {
+                        bufferedInputStream.close();
+                    }
+                    if (inputStream != null) {
+                        inputStream.close();
+                    }
                 }
             }
             writeLine("");
             writeRecordBoundary();
-            logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            if (logger != null) {
+                logger.appendKeyValue("    " + key, String.format("<Data: %d>", totalBytes));
+            }
         }
 
         public void writeRecordBoundary() throws IOException {
-            writeLine("--%s", MIME_BOUNDARY);
+            if (!useUrlEncode) {
+                writeLine("--%s", MIME_BOUNDARY);
+            } else {
+                this.outputStream.write("&".getBytes());
+            }
         }
 
         public void writeContentDisposition(String name, String filename, String contentType) throws IOException {
-            write("Content-Disposition: form-data; name=\"%s\"", name);
-            if (filename != null) {
-                write("; filename=\"%s\"", filename);
-            }
-            writeLine(""); // newline after Content-Disposition
-            if (contentType != null) {
-                writeLine("%s: %s", CONTENT_TYPE_HEADER, contentType);
+            if (!useUrlEncode) {
+                write("Content-Disposition: form-data; name=\"%s\"", name);
+                if (filename != null) {
+                    write("; filename=\"%s\"", filename);
+                }
+                writeLine(""); // newline after Content-Disposition
+                if (contentType != null) {
+                    writeLine("%s: %s", CONTENT_TYPE_HEADER, contentType);
+                }
+                writeLine(""); // blank line before content
+            } else {
+                this.outputStream.write(String.format("%s=", name).getBytes());
             }
-            writeLine(""); // blank line before content
         }
 
         public void write(String format, Object... args) throws IOException {
-            if (firstWrite) {
-                // Prepend all of our output with a boundary string.
-                this.outputStream.write("--".getBytes());
-                this.outputStream.write(MIME_BOUNDARY.getBytes());
-                this.outputStream.write("\r\n".getBytes());
-                firstWrite = false;
+            if (!useUrlEncode) {
+                if (firstWrite) {
+                    // Prepend all of our output with a boundary string.
+                    this.outputStream.write("--".getBytes());
+                    this.outputStream.write(MIME_BOUNDARY.getBytes());
+                    this.outputStream.write("\r\n".getBytes());
+                    firstWrite = false;
+                }
+                this.outputStream.write(String.format(format, args).getBytes());
+            } else {
+                this.outputStream.write(URLEncoder.encode(String.format(format, args), "UTF-8").getBytes());
             }
-            this.outputStream.write(String.format(format, args).getBytes());
         }
 
         public void writeLine(String format, Object... args) throws IOException {
             write(format, args);
-            write("\r\n");
+            if (!useUrlEncode) {
+                write("\r\n");
+            }
         }
 
     }
@@ -2214,6 +2389,23 @@ public void writeLine(String format, Object... args) throws IOException {
         void onCompleted(Response response);
     }
 
+    /**
+     * Specifies the interface that consumers of the Request class can implement in order to be notified when a
+     * progress is made on a particular request. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when progress is made.
+         *
+         * @param current
+         *            the current value of the progress of the request.
+         * @param max
+         *            the maximum value (target) value that the progress will have.
+         */
+        void onProgress(long current, long max);
+    }
+
     /**
      * Specifies the interface that consumers of
      * {@link Request#executeMeRequestAsync(Session, com.facebook.Request.GraphUserCallback)}
diff --git a/facebook/src/com/facebook/RequestAsyncTask.java b/facebook/src/com/facebook/RequestAsyncTask.java
index db60a18f9..62a2cf158 100644
--- a/facebook/src/com/facebook/RequestAsyncTask.java
+++ b/facebook/src/com/facebook/RequestAsyncTask.java
@@ -32,7 +32,6 @@
  * Defines an AsyncTask suitable for executing a Request in the background. May be subclassed
  * by applications having unique threading model needs.
  */
-@TargetApi(3)
 public class RequestAsyncTask extends AsyncTask<Void, Void, List<Response>> {
     private static final String TAG = RequestAsyncTask.class.getCanonicalName();
     private static Method executeOnExecutorMethod;
@@ -172,18 +171,18 @@ protected void onPostExecute(List<Response> result) {
     }
 
     RequestAsyncTask executeOnSettingsExecutor() {
-        try {
-            if (executeOnExecutorMethod != null) {
+        if (executeOnExecutorMethod != null) {
+            try {
                 executeOnExecutorMethod.invoke(this, Settings.getExecutor(), null);
-                return this;
+            } catch (InvocationTargetException e) {
+                // fall-through
+            } catch (IllegalAccessException e) {
+                // fall-through
             }
-        } catch (InvocationTargetException e) {
-            // fall-through
-        } catch (IllegalAccessException e) {
-            // fall-through
+        } else {
+          this.execute();
         }
 
-        this.execute();
         return this;
     }
 }
diff --git a/facebook/src/com/facebook/RequestBatch.java b/facebook/src/com/facebook/RequestBatch.java
index 7183a2ddb..9ecd7be18 100644
--- a/facebook/src/com/facebook/RequestBatch.java
+++ b/facebook/src/com/facebook/RequestBatch.java
@@ -217,6 +217,22 @@ public final RequestAsyncTask executeAsync() {
         void onBatchCompleted(RequestBatch batch);
     }
 
+    /**
+     * Specifies the interface that consumers of the RequestBatch class can implement in order to be notified when the
+     * batch makes progress. The frequency of the callbacks can be controlled using
+     * {@link com.facebook.Settings#setOnProgressThreshold(long)}.
+     */
+    public interface OnProgressCallback extends Callback {
+        /**
+         * The method that will be called when a batch makes progress.
+         *
+         * @param batch     the RequestBatch containing the Requests which were executed
+         * @param current   the current value of the progress
+         * @param max       the max (target) value of the progress
+         */
+        void onBatchProgress(RequestBatch batch, long current, long max);
+    }
+
     List<Response> executeAndWaitImpl() {
         return Request.executeBatchAndWait(this);
     }
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java b/facebook/src/com/facebook/RequestOutputStream.java
similarity index 63%
rename from samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
rename to facebook/src/com/facebook/RequestOutputStream.java
index 1e06f6999..323b7c73d 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingCustomFragmentActivity.java
+++ b/facebook/src/com/facebook/RequestOutputStream.java
@@ -14,15 +14,8 @@
  * limitations under the License.
  */
 
-package com.facebook.samples.sessionlogin;
+package com.facebook;
 
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class LoginUsingCustomFragmentActivity extends FragmentActivity {
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.custom_fragment_activity);
-    }
+interface RequestOutputStream {
+    void setCurrentRequest(Request r);
 }
diff --git a/facebook/src/com/facebook/RequestProgress.java b/facebook/src/com/facebook/RequestProgress.java
new file mode 100644
index 000000000..ef10361cf
--- /dev/null
+++ b/facebook/src/com/facebook/RequestProgress.java
@@ -0,0 +1,78 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.os.Handler;
+
+class RequestProgress {
+    private final Request request;
+    private final Handler callbackHandler;
+    private final long threshold;
+
+    private long progress, lastReportedProgress, maxProgress;
+
+    RequestProgress(Handler callbackHandler, Request request) {
+        this.request = request;
+        this.callbackHandler = callbackHandler;
+
+        this.threshold = Settings.getOnProgressThreshold();
+    }
+
+    long getProgress() {
+        return progress;
+    }
+
+    long getMaxProgress() {
+        return maxProgress;
+    }
+
+    void addProgress(long size) {
+        progress += size;
+
+        if (progress >= lastReportedProgress + threshold || progress >= maxProgress) {
+            reportProgress();
+        }
+    }
+
+    void addToMax(long size) {
+        maxProgress += size;
+    }
+
+    void reportProgress() {
+        if (progress > lastReportedProgress) {
+            Request.Callback callback = request.getCallback();
+            if (maxProgress > 0 && callback instanceof Request.OnProgressCallback) {
+                // Keep copies to avoid threading issues
+                final long currentCopy = progress;
+                final long maxProgressCopy = maxProgress;
+                final Request.OnProgressCallback callbackCopy = (Request.OnProgressCallback) callback;
+                if (callbackHandler == null) {
+                    callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                }
+                else {
+                    callbackHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            callbackCopy.onProgress(currentCopy, maxProgressCopy);
+                        }
+                    });
+                }
+                lastReportedProgress = progress;
+            }
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/Response.java b/facebook/src/com/facebook/Response.java
index 4697aaf12..f5620256b 100644
--- a/facebook/src/com/facebook/Response.java
+++ b/facebook/src/com/facebook/Response.java
@@ -17,7 +17,10 @@
 package com.facebook;
 
 import android.content.Context;
-import com.facebook.internal.*;
+import com.facebook.internal.CacheableRequestBatch;
+import com.facebook.internal.FileLruCache;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
 import org.json.JSONArray;
@@ -42,6 +45,7 @@
     private final GraphObjectList<GraphObject> graphObjectList;
     private final boolean isFromCache;
     private final FacebookRequestError error;
+    private final String rawResponse;
     private final Request request;
 
     /**
@@ -51,6 +55,9 @@
      */
     public static final String NON_JSON_RESPONSE_PROPERTY = "FACEBOOK_NON_JSON_RESULT";
 
+    // From v2.1 of the Graph API, write endpoints will now return valid JSON with the result as the value for the "success" key
+    public static final String SUCCESS_KEY = "success";
+
     private static final int INVALID_SESSION_FACEBOOK_ERROR_CODE = 190;
 
     private static final String CODE_KEY = "code";
@@ -61,31 +68,26 @@
     private static final String RESPONSE_CACHE_TAG = "ResponseCache";
     private static FileLruCache responseCache;
 
-    Response(Request request, HttpURLConnection connection, GraphObject graphObject, boolean isFromCache) {
-        this.request = request;
-        this.connection = connection;
-        this.graphObject = graphObject;
-        this.graphObjectList = null;
-        this.isFromCache = isFromCache;
-        this.error = null;
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObject graphObject, boolean isFromCache) {
+        this(request, connection, rawResponse, graphObject, null, isFromCache, null);
     }
 
-    Response(Request request, HttpURLConnection connection, GraphObjectList<GraphObject> graphObjects,
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObjectList<GraphObject> graphObjects,
             boolean isFromCache) {
-        this.request = request;
-        this.connection = connection;
-        this.graphObject = null;
-        this.graphObjectList = graphObjects;
-        this.isFromCache = isFromCache;
-        this.error = null;
+        this(request, connection, rawResponse, null, graphObjects, isFromCache, null);
     }
 
     Response(Request request, HttpURLConnection connection, FacebookRequestError error) {
+        this(request, connection, null, null, null, false, error);
+    }
+
+    Response(Request request, HttpURLConnection connection, String rawResponse, GraphObject graphObject, GraphObjectList<GraphObject> graphObjects, boolean isFromCache, FacebookRequestError error) {
         this.request = request;
         this.connection = connection;
-        this.graphObject = null;
-        this.graphObjectList = null;
-        this.isFromCache = false;
+        this.rawResponse = rawResponse;
+        this.graphObject = graphObject;
+        this.graphObjectList = graphObjects;
+        this.isFromCache = isFromCache;
         this.error = error;
     }
 
@@ -166,6 +168,15 @@ public Request getRequest() {
         return request;
     }
 
+    /**
+     * Returns the server response as a String that this response is for.
+     *
+     * @return A String representation of the actual response from the server
+     */
+    public String getRawResponse() {
+        return rawResponse;
+    }
+
     /**
      * Indicates whether paging is being done forward or backward.
      */
@@ -425,18 +436,18 @@ private static Response createResponseFromObject(Request request, HttpURLConnect
 
             if (body instanceof JSONObject) {
                 GraphObject graphObject = GraphObject.Factory.create((JSONObject) body);
-                return new Response(request, connection, graphObject, isFromCache);
+                return new Response(request, connection, body.toString(), graphObject, isFromCache);
             } else if (body instanceof JSONArray) {
                 GraphObjectList<GraphObject> graphObjectList = GraphObject.Factory.createList(
                         (JSONArray) body, GraphObject.class);
-                return new Response(request, connection, graphObjectList, isFromCache);
+                return new Response(request, connection, body.toString(), graphObjectList, isFromCache);
             }
             // We didn't get a body we understand how to handle, so pretend we got nothing.
             object = JSONObject.NULL;
         }
 
         if (object == JSONObject.NULL) {
-            return new Response(request, connection, (GraphObject)null, isFromCache);
+            return new Response(request, connection, object.toString(), (GraphObject)null, isFromCache);
         } else {
             throw new FacebookException("Got unexpected object type in response, class: "
                     + object.getClass().getSimpleName());
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index c424c9537..080b652e8 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -17,6 +17,7 @@
 package com.facebook;
 
 import android.annotation.TargetApi;
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.*;
 import android.content.pm.ResolveInfo;
@@ -25,7 +26,13 @@
 import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.*;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.SessionAuthorizationType;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
+import com.facebook.model.GraphMultiResult;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -108,13 +115,6 @@
      */
     public static final String ACTION_ACTIVE_SESSION_CLOSED = "com.facebook.sdk.ACTIVE_SESSION_CLOSED";
 
-    /**
-     * Session takes application id as a constructor parameter. If this is null,
-     * Session will attempt to load the application id from
-     * application/meta-data using this String as the key.
-     */
-    public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
-
     private static final Object STATIC_LOCK = new Object();
     private static Session activeSession;
     private static volatile Context staticContext;
@@ -148,7 +148,6 @@
     private volatile Bundle authorizationBundle;
     private final List<StatusCallback> callbacks;
     private Handler handler;
-    private AutoPublishAsyncTask autoPublishAsyncTask;
     // This is the object that synchronizes access to state and tokenInfo
     private final Object lock = new Object();
     private TokenCachingStrategy tokenCachingStrategy;
@@ -187,6 +186,42 @@ private Object readResolve() {
         }
     }
 
+    /**
+     * Serialization proxy for the Session class. This is version 2 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    @SuppressWarnings("UnusedDeclaration")
+    private static class SerializationProxyV2 implements Serializable {
+        private static final long serialVersionUID = 7663436173185080064L;
+        private final String applicationId;
+        private final SessionState state;
+        private final AccessToken tokenInfo;
+        private final Date lastAttemptedTokenExtendDate;
+        private final boolean shouldAutoPublish;
+        private final AuthorizationRequest pendingAuthorizationRequest;
+        private final Set<String> requestedPermissions;
+
+        SerializationProxyV2(String applicationId, SessionState state,
+                             AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                             boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest,
+                             Set<String> requestedPermissions) {
+            this.applicationId = applicationId;
+            this.state = state;
+            this.tokenInfo = tokenInfo;
+            this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
+            this.shouldAutoPublish = shouldAutoPublish;
+            this.pendingAuthorizationRequest = pendingAuthorizationRequest;
+            this.requestedPermissions = requestedPermissions;
+        }
+
+        private Object readResolve() {
+            return new Session(applicationId, state, tokenInfo,
+                    lastAttemptedTokenExtendDate, shouldAutoPublish, pendingAuthorizationRequest, requestedPermissions);
+        }
+    }
+
     /**
      * Used by version 1 of the serialization proxy, do not modify.
      */
@@ -204,6 +239,24 @@ private Session(String applicationId, SessionState state,
         callbacks = new ArrayList<StatusCallback>();
     }
 
+    /**
+     * Used by version 2 of the serialization proxy, do not modify.
+     */
+    private Session(String applicationId, SessionState state,
+                    AccessToken tokenInfo, Date lastAttemptedTokenExtendDate,
+                    boolean shouldAutoPublish, AuthorizationRequest pendingAuthorizationRequest,
+                    Set<String> requestedPermissions) {
+        this.applicationId = applicationId;
+        this.state = state;
+        this.tokenInfo = tokenInfo;
+        this.lastAttemptedTokenExtendDate = lastAttemptedTokenExtendDate;
+        this.pendingAuthorizationRequest = pendingAuthorizationRequest;
+        handler = new Handler(Looper.getMainLooper());
+        currentTokenRefreshRequest = null;
+        tokenCachingStrategy = null;
+        callbacks = new ArrayList<StatusCallback>();
+    }
+
     /**
      * Initializes a new Session with the specified context.
      *
@@ -250,14 +303,14 @@ public Session(Context currentContext) {
                 // If expired or we require new permissions, clear out the
                 // current token cache.
                 tokenCachingStrategy.clear();
-                this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+                this.tokenInfo = AccessToken.createEmptyToken();
             } else {
                 // Otherwise we have a valid token, so use it.
                 this.tokenInfo = AccessToken.createFromCache(tokenState);
                 this.state = SessionState.CREATED_TOKEN_LOADED;
             }
         } else {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
     }
 
@@ -359,6 +412,35 @@ public final Date getExpirationDate() {
         }
     }
 
+    /**
+     * <p>
+     *     Returns whether a particular permission has been granted
+     * </p>
+     *
+     * @param permission The permission to check for
+     * @return true if the permission is granted, false otherwise
+     */
+    public boolean isPermissionGranted(String permission) {
+        List<String> grantedPermissions = getPermissions();
+        if (grantedPermissions != null) {
+            return grantedPermissions.contains(permission);
+        }
+        return false;
+    }
+
+    /**
+     * <p>
+     * Returns the list of permissions that have been requested in this session but not granted
+     * </p>
+     *
+     * @return the list of requested permissions that have been declined
+     */
+    public final List<String> getDeclinedPermissions() {
+        synchronized (this.lock) {
+            return (this.tokenInfo == null) ? null : this.tokenInfo.getDeclinedPermissions();
+        }
+    }
+
     /**
      * <p>
      * Logs a user in to Facebook.
@@ -469,8 +551,6 @@ public final void open(AccessToken accessToken, StatusCallback callback) {
             state = SessionState.OPENED;
             this.postStateChange(oldState, state, null);
         }
-
-        autoPublishAsync();
     }
 
     /**
@@ -513,6 +593,110 @@ public final void requestNewPublishPermissions(NewPermissionsRequest newPermissi
         requestNewPermissions(newPermissionsRequest, SessionAuthorizationType.PUBLISH);
     }
 
+    /**
+     * <p>
+     * Issues a request to refresh the permissions on the session.
+     * </p>
+     * <p>
+     * If successful, this will update the permissions and call the app back with
+     * {@link SessionState#OPENED_TOKEN_UPDATED}.  The session can then be queried to see the granted and declined
+     * permissions.  If this fails because the user has removed the app, the session will close.
+     * </p>
+     */
+    public final void refreshPermissions() {
+        Request request = new Request(this, "me/permissions");
+        request.setCallback(new Request.Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                PermissionsPair permissionsPair = handlePermissionResponse(response);
+                if (permissionsPair != null) {
+                    // Update our token with the refreshed permissions
+                    synchronized (lock) {
+                        tokenInfo = AccessToken.createFromTokenWithRefreshedPermissions(tokenInfo,
+                                permissionsPair.getGrantedPermissions(), permissionsPair.getDeclinedPermissions());
+                        postStateChange(state, SessionState.OPENED_TOKEN_UPDATED, null);
+                    }
+                }
+            }
+        });
+        request.executeAsync();
+    }
+
+    /**
+     * Internal helper class that is used to hold two different permission lists (granted and declined)
+     */
+    static class PermissionsPair {
+        List<String> grantedPermissions;
+        List<String> declinedPermissions;
+
+        public PermissionsPair(List<String> grantedPermissions, List<String> declinedPermissions) {
+            this.grantedPermissions = grantedPermissions;
+            this.declinedPermissions = declinedPermissions;
+        }
+
+        public List<String> getGrantedPermissions() {
+            return grantedPermissions;
+        }
+
+        public List<String> getDeclinedPermissions() {
+            return declinedPermissions;
+        }
+    }
+    /**
+     * This parses a server response to a call to me/permissions.  It will return the list of granted permissions.
+     * It will optionally update a session with the requested permissions.  It also handles the distinction between
+     * 1.0 and 2.0 calls to the endpoint.
+     *
+     * @param response The server response
+     * @return A list of granted permissions or null if an error
+     */
+    static PermissionsPair handlePermissionResponse(Response response) {
+        if (response.getError() != null) {
+            return null;
+        }
+
+        GraphMultiResult result = response.getGraphObjectAs(GraphMultiResult.class);
+        if (result == null) {
+            return null;
+        }
+
+        GraphObjectList<GraphObject> data = result.getData();
+        if (data == null || data.size() == 0) {
+            return null;
+        }
+        List<String> grantedPermissions = new ArrayList<String>(data.size());
+        List<String> declinedPermissions = new ArrayList<String>(data.size());
+
+        // Check if we are dealing with v2.0 or v1.0 behavior until the server is updated
+        GraphObject firstObject = data.get(0);
+        if (firstObject.getProperty("permission") != null) { // v2.0
+            for (GraphObject graphObject : data) {
+                String permission = (String) graphObject.getProperty("permission");
+                if (permission.equals("installed")) {
+                    continue;
+                }
+                String status = (String) graphObject.getProperty("status");
+                if(status.equals("granted")) {
+                    grantedPermissions.add(permission);
+                } else if (status.equals("declined")) {
+                    declinedPermissions.add(permission);
+                }
+            }
+        } else { // v1.0
+            Map<String, Object> permissionsMap = firstObject.asMap();
+            for (Map.Entry<String, Object> entry : permissionsMap.entrySet()) {
+                if (entry.getKey().equals("installed")) {
+                    continue;
+                }
+                if ((Integer)entry.getValue() == 1) {
+                    grantedPermissions.add(entry.getKey());
+                }
+            }
+        }
+
+        return new PermissionsPair(grantedPermissions, declinedPermissions);
+    }
+
     /**
      * Provides an implementation for {@link Activity#onActivityResult
      * onActivityResult} that updates the Session based on information returned
@@ -831,6 +1015,33 @@ public static Session openActiveSession(Activity activity, boolean allowLoginUI,
         return openActiveSession(activity, allowLoginUI, new OpenRequest(activity).setCallback(callback));
     }
 
+    /**
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * the permissions provided (and basic permissions of no permissions are provided).
+     * If the default token cache is available and cached tokens are loaded, this will
+     * use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param activity     The Activity that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param permissions  The permissions to request for this Session
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes. May be null.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Activity activity, boolean allowLoginUI,
+            List<String> permissions, StatusCallback callback) {
+        return openActiveSession(
+                activity, 
+                allowLoginUI, 
+                new OpenRequest(activity).setCallback(callback).setPermissions(permissions));
+    }
+    
     /**
      * If allowLoginUI is true, this will create a new Session, make it active, and
      * open it. If the default token cache is not available, then this will request
@@ -853,6 +1064,34 @@ public static Session openActiveSession(Context context, Fragment fragment,
             boolean allowLoginUI, StatusCallback callback) {
         return openActiveSession(context, allowLoginUI, new OpenRequest(fragment).setCallback(callback));
     }
+    
+    /**
+     * If allowLoginUI is true, this will create a new Session, make it active, and
+     * open it. If the default token cache is not available, then this will request
+     * the permissions provided (and basic permissions of no permissions are provided).
+     * If the default token cache is available and cached tokens are loaded, this will
+     * use the cached token and associated permissions.
+     * <p/>
+     * If allowedLoginUI is false, this will only create the active session and open
+     * it if it requires no user interaction (i.e. the token cache is available and
+     * there are cached tokens).
+     *
+     * @param context      The Activity or Service creating this Session
+     * @param fragment     The Fragment that is opening the new Session.
+     * @param allowLoginUI if false, only sets the active session and opens it if it
+     *                     does not require user interaction
+     * @param permissions  The permissions to request for this Session
+     * @param callback     The {@link StatusCallback SessionStatusCallback} to
+     *                     notify regarding Session state changes.
+     * @return The new Session or null if one could not be created
+     */
+    public static Session openActiveSession(Context context, Fragment fragment,
+            boolean allowLoginUI, List<String> permissions, StatusCallback callback) {
+        return openActiveSession(
+                context, 
+                allowLoginUI, 
+                new OpenRequest(fragment).setCallback(callback).setPermissions(permissions));
+    }
 
     /**
      * If allowLoginUI is true, this will create a new Session, make it active, and
@@ -934,8 +1173,6 @@ void authorize(AuthorizationRequest request) {
 
         request.setApplicationId(applicationId);
 
-        autoPublishAsync();
-
         logAuthorizationStart();
 
         started = tryLoginActivity(request);
@@ -1311,15 +1548,15 @@ void postStateChange(final SessionState oldState, final SessionState newState, f
         }
 
         if (newState.isClosed()) {
-            this.tokenInfo = AccessToken.createEmptyToken(Collections.<String>emptyList());
+            this.tokenInfo = AccessToken.createEmptyToken();
         }
 
-        synchronized (callbacks) {
-            // Need to schedule the callbacks inside the same queue to preserve ordering.
-            // Otherwise these callbacks could have been added to the queue before the SessionTracker
-            // gets the ACTIVE_SESSION_SET action.
-            Runnable runCallbacks = new Runnable() {
-                public void run() {
+        // Need to schedule the callbacks inside the same queue to preserve ordering.
+        // Otherwise these callbacks could have been added to the queue before the SessionTracker
+        // gets the ACTIVE_SESSION_SET action.
+        Runnable runCallbacks = new Runnable() {
+            public void run() {
+                synchronized (callbacks) {
                     for (final StatusCallback callback : callbacks) {
                         Runnable closure = new Runnable() {
                             public void run() {
@@ -1331,9 +1568,9 @@ public void run() {
                         runWithHandlerOrExecutor(handler, closure);
                     }
                 }
-            };
-            runWithHandlerOrExecutor(handler, runCallbacks);
-        }
+            }
+        };
+        runWithHandlerOrExecutor(handler, runCallbacks);
 
         if (this == Session.activeSession) {
             if (oldState.isOpened() != newState.isOpened()) {
@@ -1454,9 +1691,13 @@ public void onServiceConnected(ComponentName className, IBinder service) {
         public void onServiceDisconnected(ComponentName arg) {
             cleanup();
 
-            // We returned an error so there's no point in
-            // keeping the binding open.
-            staticContext.unbindService(TokenRefreshRequest.this);
+            try {
+                // We returned an error so there's no point in
+                // keeping the binding open.
+                staticContext.unbindService(TokenRefreshRequest.this);
+            } catch (IllegalArgumentException ex) {
+                // Do nothing, the connection was already unbound
+            }
         }
 
         private void cleanup() {
@@ -1523,6 +1764,12 @@ public void handleMessage(Message msg) {
      * @see Session#open open
      */
     public interface StatusCallback {
+        /**
+         * The function that is called when status of the session changes.
+         * @param session   The session that was updated.
+         * @param state     The new state of the session.
+         * @param exception The exception that is related to state change, may be null.
+         */
         public void call(Session session, SessionState state, Exception exception);
     }
 
@@ -1607,57 +1854,6 @@ public Session build() {
         public Activity getActivityContext();
     }
 
-    @SuppressWarnings("deprecation")
-    private void autoPublishAsync() {
-        AutoPublishAsyncTask asyncTask = null;
-        synchronized (this) {
-            if (autoPublishAsyncTask == null && Settings.getShouldAutoPublishInstall()) {
-                // copy the application id to guarantee thread safety against our container.
-                String applicationId = Session.this.applicationId;
-
-                // skip publish if we don't have an application id.
-                if (applicationId != null) {
-                    asyncTask = autoPublishAsyncTask = new AutoPublishAsyncTask(applicationId, staticContext);
-                }
-            }
-        }
-
-        if (asyncTask != null) {
-            asyncTask.execute();
-        }
-    }
-
-    /**
-     * Async implementation to allow auto publishing to not block the ui thread.
-     */
-    private class AutoPublishAsyncTask extends AsyncTask<Void, Void, Void> {
-        private final String mApplicationId;
-        private final Context mApplicationContext;
-
-        public AutoPublishAsyncTask(String applicationId, Context context) {
-            mApplicationId = applicationId;
-            mApplicationContext = context.getApplicationContext();
-        }
-
-        @Override
-        protected Void doInBackground(Void... voids) {
-            try {
-                Settings.publishInstallAndWaitForResponse(mApplicationContext, mApplicationId, true);
-            } catch (Exception e) {
-                Utility.logd("Facebook-publish", e);
-            }
-            return null;
-        }
-
-        @Override
-        protected void onPostExecute(Void result) {
-            // always clear out the publisher to allow other invocations.
-            synchronized (Session.this) {
-                autoPublishAsyncTask = null;
-            }
-        }
-    }
-
     /**
      * Base class for authorization requests {@link OpenRequest} and {@link NewPermissionsRequest}.
      */
@@ -2134,5 +2330,12 @@ public final NewPermissionsRequest setDefaultAudience(SessionDefaultAudience def
             super.setDefaultAudience(defaultAudience);
             return this;
         }
+
+        @Override
+        AuthorizationClient.AuthorizationRequest getAuthorizationClientRequest() {
+            AuthorizationClient.AuthorizationRequest request = super.getAuthorizationClientRequest();
+            request.setRerequest(true);
+            return request;
+        }
     }
 }
diff --git a/facebook/src/com/facebook/SessionDefaultAudience.java b/facebook/src/com/facebook/SessionDefaultAudience.java
index 2fdac3d01..3f1aea80b 100644
--- a/facebook/src/com/facebook/SessionDefaultAudience.java
+++ b/facebook/src/com/facebook/SessionDefaultAudience.java
@@ -51,7 +51,7 @@ private SessionDefaultAudience(String protocol) {
         nativeProtocolAudience = protocol;
     }
 
-    String getNativeProtocolAudience() {
+    public String getNativeProtocolAudience() {
         return nativeProtocolAudience;
     }
 }
diff --git a/facebook/src/com/facebook/Settings.java b/facebook/src/com/facebook/Settings.java
index d964b5821..b53c11c37 100644
--- a/facebook/src/com/facebook/Settings.java
+++ b/facebook/src/com/facebook/Settings.java
@@ -19,23 +19,35 @@
 import android.content.ContentResolver;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.content.pm.Signature;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Handler;
 import android.os.Looper;
+import android.util.Base64;
 import android.util.Log;
 import com.facebook.android.BuildConfig;
+import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.Validate;
+import com.facebook.model.GraphObject;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.lang.reflect.Field;
-import java.util.*;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * Allows some customization of sdk behavior.
@@ -45,10 +57,15 @@
     private static final HashSet<LoggingBehavior> loggingBehaviors =
             new HashSet<LoggingBehavior>(Arrays.asList(LoggingBehavior.DEVELOPER_ERRORS));
     private static volatile Executor executor;
-    private static volatile boolean shouldAutoPublishInstall;
     private static volatile String appVersion;
+    private static volatile String applicationId;
+    private static volatile String appClientToken;
+    private static volatile boolean defaultsLoaded = false;
     private static final String FACEBOOK_COM = "facebook.com";
     private static volatile String facebookDomain = FACEBOOK_COM;
+    private static AtomicLong onProgressThreshold = new AtomicLong(65536);
+    private static volatile boolean platformCompatibilityEnabled;
+    private static volatile boolean isDebugEnabled = BuildConfig.DEBUG;
 
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
@@ -63,9 +80,6 @@
     private static final String PUBLISH_ACTIVITY_PATH = "%s/activities";
     private static final String MOBILE_INSTALL_EVENT = "MOBILE_APP_INSTALL";
     private static final String ANALYTICS_EVENT = "event";
-    private static final String AUTO_PUBLISH = "auto_publish";
-
-    private static final String APP_EVENT_PREFERENCES = "com.facebook.sdk.appEventPreferences";
 
     private static final BlockingQueue<Runnable> DEFAULT_WORK_QUEUE = new LinkedBlockingQueue<Runnable>(10);
 
@@ -77,6 +91,38 @@ public Thread newThread(Runnable runnable) {
         }
     };
 
+    /**
+     * loadDefaultsFromMetadata will attempt to load certain settings (e.g., application ID, client token) from
+     * metadata in the app's AndroidManifest.xml. The application ID will be read from this key.
+     */
+    public static final String APPLICATION_ID_PROPERTY = "com.facebook.sdk.ApplicationId";
+    /**
+     * loadDefaultsFromMetadata will attempt to load certain settings (e.g., application ID, client token) from
+     * metadata in the app's AndroidManifest.xml. The client token will be read from this key.
+     */
+    public static final String CLIENT_TOKEN_PROPERTY = "com.facebook.sdk.ClientToken";
+
+    private static Boolean sdkInitialized = false;
+
+    /**
+     * Initialize SDK
+     * This function will be called once in the application, it is tried to be called as early as possible;
+     * This is the place to register broadcast listeners.
+     */
+    public static synchronized void sdkInitialize(Context context) {
+        if (sdkInitialized == true) {
+          return;
+        }
+
+        // Make sure we've loaded default settings if we haven't already.
+        Settings.loadDefaultsFromMetadataIfNeeded(context);
+        // Load app settings from network so that dialog configs are available
+        Utility.loadAppSettingsAsync(context, Settings.getApplicationId());
+
+        BoltsMeasurementEventListener.getInstance(context.getApplicationContext());
+        sdkInitialized = true;
+    }
+
     /**
      * Certain logging behaviors are available for debugging beyond those that should be
      * enabled in production.
@@ -145,10 +191,41 @@ public static final void clearLoggingBehaviors() {
      */
     public static final boolean isLoggingBehaviorEnabled(LoggingBehavior behavior) {
         synchronized (loggingBehaviors) {
-            return BuildConfig.DEBUG && loggingBehaviors.contains(behavior);
+            return Settings.isDebugEnabled() && loggingBehaviors.contains(behavior);
         }
     }
 
+    /**
+     * This method is deprecated.  Use {@link Settings#isDebugEnabled()} instead.
+     */
+    @Deprecated
+    public static final boolean isLoggingEnabled() {
+        return isDebugEnabled();
+    }
+
+    /**
+     * This method is deprecated.  Use {@link Settings#setIsDebugEnabled(boolean)} instead.
+     */
+    @Deprecated
+    public static final void setIsLoggingEnabled(boolean enabled) {
+        setIsDebugEnabled(enabled);
+    }
+
+    /**
+     * Indicates if we are in debug mode.
+     */
+    public static final boolean isDebugEnabled() {
+        return isDebugEnabled;
+    }
+
+    /**
+     * Used to enable or disable logging, and other debug features. Defaults to BuildConfig.DEBUG.
+     * @param enabled Debug features (like logging) are enabled if true, disabled if false.
+     */
+    public static final void setIsDebugEnabled(boolean enabled) {
+        isDebugEnabled = enabled;
+    }
+
     /**
      * Returns the Executor used by the SDK for non-AsyncTask background work.
      *
@@ -235,30 +312,7 @@ private static Executor getAsyncTaskExecutor() {
         return (Executor) executorObject;
     }
 
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static void publishInstallAsync(final Context context, final String applicationId) {
-       publishInstallAsync(context, applicationId, null);
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @param callback a callback to invoke with a Response object, carrying the server response, or an error.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static void publishInstallAsync(final Context context, final String applicationId,
+    static void publishInstallAsync(final Context context, final String applicationId,
         final Request.Callback callback) {
         // grab the application context ahead of time, since we will return to the caller immediately.
         final Context applicationContext = context.getApplicationContext();
@@ -280,88 +334,28 @@ public void run() {
         });
     }
 
-    /**
-     * Sets whether opening a Session should automatically publish install attribution to the Facebook graph.
-     *
-     * @param shouldAutoPublishInstall true to automatically publish, false to not
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static void setShouldAutoPublishInstall(boolean shouldAutoPublishInstall) {
-        Settings.shouldAutoPublishInstall = shouldAutoPublishInstall;
-    }
-
-    /**
-     * Gets whether opening a Session should automatically publish install attribution to the Facebook graph.
-     *
-     * @return true to automatically publish, false to not
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static boolean getShouldAutoPublishInstall() {
-        return shouldAutoPublishInstall;
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @return returns false on error.  Applications should retry until true is returned.  Safe to call again after
-     * true is returned.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static boolean publishInstallAndWait(final Context context, final String applicationId) {
-        Response response = publishInstallAndWaitForResponse(context, applicationId);
-        return response != null && response.getError() == null;
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles caching repeat calls to prevent
-     * multiple installs being published to the graph.
-     * @param context the current Context
-     * @param applicationId the fb application being published.
-     * @return returns a Response object, carrying the server response, or an error.
-     *
-     * This method is deprecated.  See {@link AppEventsLogger#activateApp(Context, String)} for more info.
-     */
-    @Deprecated
-    public static Response publishInstallAndWaitForResponse(final Context context, final String applicationId) {
-        return publishInstallAndWaitForResponse(context, applicationId, false);
-    }
-
     static Response publishInstallAndWaitForResponse(
             final Context context,
-            final String applicationId,
-            final boolean isAutoPublish) {
+            final String applicationId) {
         try {
             if (context == null || applicationId == null) {
                 throw new IllegalArgumentException("Both context and applicationId must be non-null");
             }
-            String attributionId = Settings.getAttributionId(context.getContentResolver());
+            AttributionIdentifiers identifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
             SharedPreferences preferences = context.getSharedPreferences(ATTRIBUTION_PREFERENCES, Context.MODE_PRIVATE);
             String pingKey = applicationId+"ping";
             String jsonKey = applicationId+"json";
             long lastPing = preferences.getLong(pingKey, 0);
             String lastResponseJSON = preferences.getString(jsonKey, null);
 
-            // prevent auto publish from occurring if we have an explicit call.
-            if (!isAutoPublish) {
-                setShouldAutoPublishInstall(false);
-            }
-
             GraphObject publishParams = GraphObject.Factory.create();
             publishParams.setProperty(ANALYTICS_EVENT, MOBILE_INSTALL_EVENT);
 
-            Utility.setAppEventAttributionParameters(publishParams,
-                    attributionId,
-                    Utility.getHashedDeviceAndAppID(context, applicationId),
-                    !getLimitEventAndDataUsage(context));
-            publishParams.setProperty(AUTO_PUBLISH, isAutoPublish);
+            Utility.setAppEventAttributionParameters(
+                    publishParams,
+                    identifiers,
+                    AppEventsLogger.getAnonymousAppDeviceGUID(context),
+                    getLimitEventAndDataUsage(context));
             publishParams.setProperty("application_package_name", context.getPackageName());
 
             String publishUrl = String.format(PUBLISH_ACTIVITY_PATH, applicationId);
@@ -380,15 +374,10 @@ static Response publishInstallAndWaitForResponse(
                 if (graphObject == null) {
                     return Response.createResponsesFromString("true", null, new RequestBatch(publishRequest), true).get(0);
                 } else {
-                    return new Response(null, null, graphObject, true);
+                    return new Response(null, null, null, graphObject, true);
                 }
-            } else if (attributionId == null) {
-                throw new FacebookException("No attribution id returned from the Facebook application");
-            } else {
 
-                if (!Utility.queryAppSettings(applicationId, false).supportsAttribution()) {
-                    throw new FacebookException("Install attribution has been disabled on the server.");
-                }
+            } else {
 
                 Response publishResponse = publishRequest.executeAndWait();
 
@@ -402,7 +391,7 @@ static Response publishInstallAndWaitForResponse(
                     publishResponse.getGraphObject().getInnerJSONObject() != null) {
                     editor.putString(jsonKey, publishResponse.getGraphObject().getInnerJSONObject().toString());
                 }
-                editor.commit();
+                editor.apply();
 
                 return publishResponse;
             }
@@ -418,18 +407,22 @@ static Response publishInstallAndWaitForResponse(
      * @return returns null if the facebook app is not present on the phone.
      */
     public static String getAttributionId(ContentResolver contentResolver) {
+        Cursor c = null;
         try {
             String [] projection = {ATTRIBUTION_ID_COLUMN_NAME};
-            Cursor c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            c = contentResolver.query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
             if (c == null || !c.moveToFirst()) {
                 return null;
             }
             String attributionId = c.getString(c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME));
-            c.close();
             return attributionId;
         } catch (Exception e) {
             Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
             return null;
+        } finally {
+            if (c != null) {
+                c.close();
+            }
         }
     }
 
@@ -461,17 +454,6 @@ public static String getSdkVersion() {
         return FacebookSdkVersion.BUILD;
     }
 
-    /**
-     * Gets the current Facebook migration bundle string; this string can be passed to Graph API
-     * endpoints to specify a set of platform migrations that are explicitly turned on or off for
-     * that call, in order to ensure compatibility between a given version of the SDK and the
-     * Graph API.
-     * @return the migration bundle supported by this version of the SDK
-     */
-    public static String getMigrationBundle() {
-        return FacebookSdkVersion.MIGRATION_BUNDLE;
-    }
-
     /**
      * Gets whether data such as that generated through AppEventsLogger and sent to Facebook should be restricted from
      * being used for purposes other than analytics and conversions, such as for targeting ads to this user.  Defaults
@@ -480,7 +462,7 @@ public static String getMigrationBundle() {
      * @param context   Used to read the value.
      */
     public static boolean getLimitEventAndDataUsage(Context context) {
-        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
+        SharedPreferences preferences = context.getSharedPreferences(AppEventsLogger.APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
         return preferences.getBoolean("limitEventUsage", false);
     }
 
@@ -493,9 +475,153 @@ public static boolean getLimitEventAndDataUsage(Context context) {
      * @param context   Used to persist this value across app runs.
      */
     public static void setLimitEventAndDataUsage(Context context, boolean limitEventUsage) {
-        SharedPreferences preferences = context.getSharedPreferences(APP_EVENT_PREFERENCES, Context.MODE_PRIVATE);
-        SharedPreferences.Editor editor = preferences.edit();
-        editor.putBoolean("limitEventUsage", limitEventUsage);
-        editor.commit();
+        context.getSharedPreferences(AppEventsLogger.APP_EVENT_PREFERENCES, Context.MODE_PRIVATE)
+            .edit()
+            .putBoolean("limitEventUsage", limitEventUsage)
+            .apply();
+    }
+
+    /**
+     * Gets the threshold used to report progress on requests.
+     */
+    public static long getOnProgressThreshold() {
+        return onProgressThreshold.get();
+    }
+
+    /**
+     * Sets the threshold used to report progress on requests. Note that the value will be read when the
+     * request is started and can not be changed during a request (or batch) execution.
+     *
+     * @param threshold The number of bytes progressed to force a callback.
+     */
+    public static void setOnProgressThreshold(long threshold) {
+        onProgressThreshold.set(threshold);
+    }
+
+    /**
+     * Gets whether the SDK is running in Platform Compatibility mode (i.e. making calls to v1.0 endpoints by default)
+     * The default is false.
+     *
+     * @return the value
+     */
+    public static boolean getPlatformCompatibilityEnabled() {
+        return platformCompatibilityEnabled;
+    }
+
+    /**
+     * Sets whether the SDK is running in Platform Compatibility mode (i.e. making calls to v1.0 endpoints by default)
+     * The default is false.  This is provided for apps that have strong reason not to take advantage of new
+     * capabilities in version 2.0+ of the API.
+     *
+     * @param platformCompatibilityEnabled whether to set Legacy Graph API mode
+     */
+    public static void setPlatformCompatibilityEnabled(boolean platformCompatibilityEnabled) {
+        Settings.platformCompatibilityEnabled = platformCompatibilityEnabled;
+    }
+
+    /**
+     * Loads default values for certain settings from an application's AndroidManifest.xml metadata, if possible.
+     * If values have been explicitly set for a particular setting, they will not be overwritten. The following
+     * settings are currently loaded from metadata: APPLICATION_ID_PROPERTY, CLIENT_TOKEN_PROPERTY
+     * @param context the Context to use for loading metadata
+     */
+    public static void loadDefaultsFromMetadata(Context context) {
+        defaultsLoaded = true;
+
+        if (context == null) {
+            return;
+        }
+
+        ApplicationInfo ai = null;
+        try {
+            ai = context.getPackageManager().getApplicationInfo(
+                    context.getPackageName(), PackageManager.GET_META_DATA);
+        } catch (PackageManager.NameNotFoundException e) {
+            return;
+        }
+
+        if (ai == null || ai.metaData == null) {
+            return;
+        }
+
+        if (applicationId == null) {
+            applicationId = ai.metaData.getString(APPLICATION_ID_PROPERTY);
+        }
+        if (appClientToken == null) {
+            appClientToken = ai.metaData.getString(CLIENT_TOKEN_PROPERTY);
+        }
+    }
+
+    static void loadDefaultsFromMetadataIfNeeded(Context context) {
+        if (!defaultsLoaded) {
+            loadDefaultsFromMetadata(context);
+        }
+    }
+
+    public static String getApplicationSignature(Context context) {
+        if (context == null) {
+            return null;
+        }
+        PackageManager packageManager = context.getPackageManager();
+        if (packageManager == null) {
+            return null;
+        }
+
+        String packageName = context.getPackageName();
+        PackageInfo pInfo;
+        try {
+            pInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_SIGNATURES);
+        } catch (PackageManager.NameNotFoundException e) {
+            return null;
+        }
+
+        Signature[] signatures = pInfo.signatures;
+        if (signatures == null || signatures.length == 0) {
+            return null;
+        }
+
+        MessageDigest md;
+        try {
+            md = MessageDigest.getInstance("SHA-1");
+        } catch (NoSuchAlgorithmException e) {
+            return null;
+        }
+
+        md.update(pInfo.signatures[0].toByteArray());
+        return Base64.encodeToString(md.digest(),  Base64.URL_SAFE | Base64.NO_PADDING);
+    }
+
+    /**
+     * Gets the Facebook application ID for the current app. This will be null unless explicitly set or unless
+     * loadDefaultsFromMetadata has been called.
+     * @return the application ID
+     */
+    public static String getApplicationId() {
+        return applicationId;
+    }
+
+    /**
+     * Sets the Facebook application ID for the current app.
+     * @param applicationId the application ID
+     */
+    public static void setApplicationId(String applicationId) {
+        Settings.applicationId = applicationId;
+    }
+
+    /**
+     * Gets the client token for the current app. This will be null unless explicitly set or unless
+     * loadDefaultsFromMetadata has been called.
+     * @return the client token
+     */
+    public static String getClientToken() {
+        return appClientToken;
+    }
+
+    /**
+     * Sets the Facebook client token for the current app.
+     * @param clientToken the client token
+     */
+    public static void setClientToken(String clientToken) {
+        appClientToken = clientToken;
     }
 }
diff --git a/facebook/src/com/facebook/SharedPreferencesTokenCachingStrategy.java b/facebook/src/com/facebook/SharedPreferencesTokenCachingStrategy.java
index 0286d3c1f..10eca8b80 100644
--- a/facebook/src/com/facebook/SharedPreferencesTokenCachingStrategy.java
+++ b/facebook/src/com/facebook/SharedPreferencesTokenCachingStrategy.java
@@ -163,18 +163,14 @@ public void save(Bundle bundle) {
                 return;
             }
         }
-
-        boolean successfulCommit = editor.commit();
-        if (!successfulCommit) {
-            Logger.log(LoggingBehavior.CACHE, Log.WARN, TAG, "SharedPreferences.Editor.commit() was not successful");
-        }
+        editor.apply();
     }
 
     /**
      * Clears out all token information stored in this cache.
      */
     public void clear() {
-        cache.edit().clear().commit();
+        cache.edit().clear().apply();
     }
 
     private void serializeKey(String key, Bundle bundle, SharedPreferences.Editor editor)
diff --git a/facebook/src/com/facebook/TestSession.java b/facebook/src/com/facebook/TestSession.java
index 9133cb91f..ef8b7dd39 100644
--- a/facebook/src/com/facebook/TestSession.java
+++ b/facebook/src/com/facebook/TestSession.java
@@ -20,13 +20,12 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
-import org.json.JSONException;
-import org.json.JSONObject;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
+import com.facebook.model.GraphUser;
 
 import java.util.*;
 
@@ -77,6 +76,7 @@
     private final List<String> requestedPermissions;
     private final Mode mode;
     private String testAccountId;
+    private String testAccountUserName;
 
     private boolean wasAskedToExtendAccessToken;
 
@@ -200,6 +200,16 @@ public final String getTestUserId() {
         return testAccountId;
     }
 
+    /**
+     * Gets the name of the test user that this TestSession is authenticated as.
+     *
+     * @return the name of the test user
+     */
+    public final String getTestUserName() {
+        return testAccountUserName;
+    }
+
+
     private static synchronized TestSession createTestSession(Activity activity, List<String> permissions, Mode mode,
             String sessionUniqueUserTag) {
         if (Utility.isNullOrEmpty(testApplicationId) || Utility.isNullOrEmpty(testApplicationSecret)) {
@@ -221,70 +231,48 @@ private static synchronized void retrieveTestAccountsForAppIfNeeded() {
 
         appTestAccounts = new HashMap<String, TestAccount>();
 
-        // The data we need is split across two different FQL tables. We construct two queries, submit them
+        // The data we need is split across two different graph API queries. We construct two queries, submit them
         // together (the second one refers to the first one), then cross-reference the results.
 
-        // Get the test accounts for this app.
-        String testAccountQuery = String.format("SELECT id,access_token FROM test_account WHERE app_id = %s",
-                testApplicationId);
-        // Get the user names for those accounts.
-        String userQuery = "SELECT uid,name FROM user WHERE uid IN (SELECT id FROM #test_accounts)";
+        Request.setDefaultBatchApplicationId(testApplicationId);
 
         Bundle parameters = new Bundle();
-
-        // Build a JSON string that contains our queries and pass it as the 'q' parameter of the query.
-        JSONObject multiquery;
-        try {
-            multiquery = new JSONObject();
-            multiquery.put("test_accounts", testAccountQuery);
-            multiquery.put("users", userQuery);
-        } catch (JSONException exception) {
-            throw new FacebookException(exception);
-        }
-        parameters.putString("q", multiquery.toString());
-
-        // We need to authenticate as this app.
         parameters.putString("access_token", getAppAccessToken());
 
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
+        Request requestTestUsers = new Request(null, "app/accounts/test-users", parameters, null);
+        requestTestUsers.setBatchEntryName("testUsers");
+        requestTestUsers.setBatchEntryOmitResultOnSuccess(false);
 
-        if (response.getError() != null) {
-            throw response.getError().getException();
-        }
+        Bundle testUserNamesParam = new Bundle();
+        testUserNamesParam.putString("access_token", getAppAccessToken());
+        testUserNamesParam.putString("ids", "{result=testUsers:$.data.*.id}");
+        testUserNamesParam.putString("fields", "name");
 
-        FqlResponse fqlResponse = response.getGraphObjectAs(FqlResponse.class);
+        Request requestTestUserNames = new Request(null, "", testUserNamesParam, null);
+        requestTestUserNames.setBatchEntryDependsOn("testUsers");
 
-        GraphObjectList<FqlResult> fqlResults = fqlResponse.getData();
-        if (fqlResults == null || fqlResults.size() != 2) {
-            throw new FacebookException("Unexpected number of results from FQL query");
+        List<Response> responses = Request.executeBatchAndWait(requestTestUsers, requestTestUserNames);
+        if (responses == null || responses.size() != 2) {
+            throw new FacebookException("Unexpected number of results from TestUsers batch query");
         }
 
-        // We get back two sets of results. The first is from the test_accounts query, the second from the users query.
-        Collection<TestAccount> testAccounts = fqlResults.get(0).getFqlResultSet().castToListOf(TestAccount.class);
-        Collection<UserAccount> userAccounts = fqlResults.get(1).getFqlResultSet().castToListOf(UserAccount.class);
+        TestAccountsResponse testAccountsResponse  = responses.get(0).getGraphObjectAs(TestAccountsResponse.class);
+        GraphObjectList<TestAccount> testAccounts = testAccountsResponse.getData();
 
-        // Use both sets of results to populate our static array of accounts.
-        populateTestAccounts(testAccounts, userAccounts);
+        // Response should contain a map of test accounts: { id's => { GraphUser } }
+        GraphObject userAccountsMap = responses.get(1).getGraphObject();
 
+        populateTestAccounts(testAccounts, userAccountsMap);
         return;
     }
 
     private static synchronized void populateTestAccounts(Collection<TestAccount> testAccounts,
-            Collection<UserAccount> userAccounts) {
-        // We get different sets of data from each of these queries. We want to combine them into a single data
-        // structure. We have added a Name property to the TestAccount interface, even though we don't really get
-        // a name back from the service from that query. We stick the Name from the corresponding UserAccount in it.
+                                                          GraphObject userAccountsMap) {
         for (TestAccount testAccount : testAccounts) {
+            GraphUser testUser = userAccountsMap.getPropertyAs(testAccount.getId(), GraphUser.class);
+            testAccount.setName(testUser.getName());
             storeTestAccount(testAccount);
         }
-
-        for (UserAccount userAccount : userAccounts) {
-            TestAccount testAccount = appTestAccounts.get(userAccount.getUid());
-            if (testAccount != null) {
-                testAccount.setName(userAccount.getName());
-            }
-        }
     }
 
     private static synchronized void storeTestAccount(TestAccount testAccount) {
@@ -339,7 +327,7 @@ void forceExtendAccessToken(boolean forceExtendAccessToken) {
         AccessToken currentToken = getTokenInfo();
         setTokenInfo(
                 new AccessToken(currentToken.getToken(), new Date(), currentToken.getPermissions(),
-                        AccessTokenSource.TEST_USER, new Date(0)));
+                        currentToken.getDeclinedPermissions(), AccessTokenSource.TEST_USER, new Date(0)));
         setLastAttemptedTokenExtendDate(new Date(0));
     }
 
@@ -375,6 +363,7 @@ private void findOrCreateSharedTestAccount() {
 
     private void finishAuthWithTestAccount(TestAccount testAccount) {
         testAccountId = testAccount.getId();
+        testAccountUserName = testAccount.getName();
 
         AccessToken accessToken = AccessToken.createFromString(testAccount.getAccessToken(), requestedPermissions,
                 AccessTokenSource.TEST_USER);
@@ -430,7 +419,8 @@ private void deleteTestAccount(String testAccountId, String appAccessToken) {
         GraphObject graphObject = response.getGraphObject();
         if (error != null) {
             Log.w(LOG_TAG, String.format("Could not delete test account %s: %s", testAccountId, error.getException().toString()));
-        } else if (graphObject.getProperty(Response.NON_JSON_RESPONSE_PROPERTY) == (Boolean) false) {
+        } else if (graphObject.getProperty(Response.NON_JSON_RESPONSE_PROPERTY) == (Boolean) false
+                   || graphObject.getProperty(Response.SUCCESS_KEY) == (Boolean) false) {
             Log.w(LOG_TAG, String.format("Could not delete test account %s: unknown reason", testAccountId));
         }
     }
@@ -472,27 +462,14 @@ private String validNameStringFromInteger(long i) {
 
         String getAccessToken();
 
-        // Note: We don't actually get Name from our FQL query. We fill it in by correlating with UserAccounts.
+        // Note: We don't actually get Name from our accounts/test-users query. We fill it in by correlating with GraphUser.
         String getName();
 
         void setName(String name);
     }
 
-    private interface UserAccount extends GraphObject {
-        String getUid();
-
-        String getName();
-
-        void setName(String name);
-    }
-
-    private interface FqlResult extends GraphObject {
-        GraphObjectList<GraphObject> getFqlResultSet();
-
-    }
-
-    private interface FqlResponse extends GraphObject {
-        GraphObjectList<FqlResult> getData();
+    private interface TestAccountsResponse extends GraphObject {
+        GraphObjectList<TestAccount> getData();
     }
 
     private static final class TestTokenCachingStrategy extends TokenCachingStrategy {
diff --git a/facebook/src/com/facebook/TokenCachingStrategy.java b/facebook/src/com/facebook/TokenCachingStrategy.java
index 6f18cc3fe..c615be640 100644
--- a/facebook/src/com/facebook/TokenCachingStrategy.java
+++ b/facebook/src/com/facebook/TokenCachingStrategy.java
@@ -76,6 +76,12 @@
      */
     public static final String PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.Permissions";
 
+    /**
+     * The key used by Session to store the list of permissions declined by the user in the token in the Bundle
+     * during load and save.
+     */
+    public static final String DECLINED_PERMISSIONS_KEY = "com.facebook.TokenCachingStrategy.DeclinedPermissions";
+
     private static final long INVALID_BUNDLE_MILLISECONDS = Long.MIN_VALUE;
     private static final String IS_SSO_KEY = "com.facebook.TokenCachingStrategy.IsSSO";
 
@@ -266,6 +272,31 @@ public static void putPermissions(Bundle bundle, List<String> value) {
         bundle.putStringArrayList(PERMISSIONS_KEY, arrayList);
     }
 
+    /**
+     * Puts the list of declined permissions into a Bundle.
+     *
+     * @param bundle
+     *            A Bundle in which the list of permissions should be stored.
+     * @param value
+     *            The List&lt;String&gt; representing the list of permissions,
+     *            or null.
+     *
+     * @throws NullPointerException if the passed in Bundle or permissions list are null
+     */
+    public static void putDeclinedPermissions(Bundle bundle, List<String> value) {
+        Validate.notNull(bundle, "bundle");
+        Validate.notNull(value, "value");
+
+        ArrayList<String> arrayList;
+        if (value instanceof ArrayList<?>) {
+            arrayList = (ArrayList<String>) value;
+        } else {
+            arrayList = new ArrayList<String>(value);
+        }
+        bundle.putStringArrayList(DECLINED_PERMISSIONS_KEY, arrayList);
+    }
+
+
     /**
      * Gets the cached enum indicating the source of the token from the Bundle.
      *
diff --git a/facebook/src/com/facebook/UiLifecycleHelper.java b/facebook/src/com/facebook/UiLifecycleHelper.java
index d1b74ff66..3ebf61c98 100644
--- a/facebook/src/com/facebook/UiLifecycleHelper.java
+++ b/facebook/src/com/facebook/UiLifecycleHelper.java
@@ -24,7 +24,10 @@
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
+import com.facebook.internal.LikeActionController;
 import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.PendingCallStore;
+import com.facebook.internal.Utility;
 import com.facebook.widget.FacebookDialog;
 
 import java.util.UUID;
@@ -42,7 +45,7 @@
  * results generated by those dialogs.
  */
 public class UiLifecycleHelper {
-    private static final String DIALOG_CALL_BUNDLE_SAVE_KEY =
+    private static final String DIALOG_CALL_ID_SAVE_KEY =
             "com.facebook.UiLifecycleHelper.pendingFacebookDialogCallKey";
 
     private final static String ACTIVITY_NULL_MESSAGE = "activity cannot be null";
@@ -52,7 +55,9 @@
     private final BroadcastReceiver receiver;
     private final LocalBroadcastManager broadcastManager;
     // Members related to handling FacebookDialog calls
-    private FacebookDialog.PendingCall pendingFacebookDialogCall;
+    private UUID pendingFacebookDialogCallId;
+    private PendingCallStore pendingFacebookDialogCallStore;
+
     private AppEventsLogger appEventsLogger;
 
     /**
@@ -66,10 +71,15 @@ public UiLifecycleHelper(Activity activity, Session.StatusCallback callback) {
         if (activity == null) {
             throw new IllegalArgumentException(ACTIVITY_NULL_MESSAGE);
         }
+
         this.activity = activity;
         this.callback = callback;
         this.receiver = new ActiveSessionBroadcastReceiver();
         this.broadcastManager = LocalBroadcastManager.getInstance(activity);
+        this.pendingFacebookDialogCallStore = PendingCallStore.getInstance();
+
+        // initialize SDK
+        Settings.sdkInitialize(activity);
     }
 
     /**
@@ -89,7 +99,11 @@ public void onCreate(Bundle savedInstanceState) {
             Session.setActiveSession(session);
         }
         if (savedInstanceState != null) {
-            pendingFacebookDialogCall = savedInstanceState.getParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY);
+            String callIdString = savedInstanceState.getString(DIALOG_CALL_ID_SAVE_KEY);
+            if (callIdString != null) {
+                pendingFacebookDialogCallId = UUID.fromString(callIdString);
+            }
+            pendingFacebookDialogCallStore.restoreFromSavedInstanceState(savedInstanceState);
         }
     }
 
@@ -135,7 +149,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
      * @param requestCode the request code
      * @param resultCode the result code
      * @param data the result data
-     * @param dialogCallback the callback for handling FacebookDialog results, can be null
+     * @param facebookDialogCallback the callback for handling FacebookDialog results, can be null
      */
     public void onActivityResult(int requestCode, int resultCode, Intent data,
                 FacebookDialog.Callback facebookDialogCallback) {
@@ -144,6 +158,10 @@ public void onActivityResult(int requestCode, int resultCode, Intent data,
             session.onActivityResult(activity, requestCode, resultCode, data);
         }
 
+        if (LikeActionController.handleOnActivityResult(activity, requestCode, resultCode, data)) {
+            return;
+        }
+
         handleFacebookDialogActivityResult(requestCode, resultCode, data, facebookDialogCallback);
     }
 
@@ -154,7 +172,10 @@ public void onActivityResult(int requestCode, int resultCode, Intent data,
      */
     public void onSaveInstanceState(Bundle outState) {
         Session.saveSession(Session.getActiveSession(), outState);
-        outState.putParcelable(DIALOG_CALL_BUNDLE_SAVE_KEY, pendingFacebookDialogCall);
+        if (pendingFacebookDialogCallId != null) {
+            outState.putString(DIALOG_CALL_ID_SAVE_KEY, pendingFacebookDialogCallId.toString());
+        }
+        pendingFacebookDialogCallStore.saveInstanceState(outState);
     }
 
     /**
@@ -193,12 +214,15 @@ public void onDestroy() {
      * @param appCall an PendingCall object containing the call ID
      */
     public void trackPendingDialogCall(FacebookDialog.PendingCall pendingCall) {
-        if (pendingFacebookDialogCall != null) {
+        if (pendingFacebookDialogCallId != null) {
             // If one is already pending, cancel it; we don't allow multiple pending calls.
             Log.i("Facebook", "Tracking new app call while one is still pending; canceling pending call.");
             cancelPendingAppCall(null);
         }
-        pendingFacebookDialogCall = pendingCall;
+        if (pendingCall != null){
+            pendingFacebookDialogCallId = pendingCall.getCallId();
+            pendingFacebookDialogCallStore.trackPendingCall(pendingCall);
+        }
     }
 
     /**
@@ -253,7 +277,12 @@ public void onReceive(Context context, Intent intent) {
 
     private boolean handleFacebookDialogActivityResult(int requestCode, int resultCode, Intent data,
             FacebookDialog.Callback facebookDialogCallback) {
-        if (pendingFacebookDialogCall == null || pendingFacebookDialogCall.getRequestCode() != requestCode) {
+        if (pendingFacebookDialogCallId == null) {
+            return false;
+        }
+        FacebookDialog.PendingCall pendingCall =
+                pendingFacebookDialogCallStore.getPendingCallById(pendingFacebookDialogCallId);
+        if (pendingCall == null || pendingCall.getRequestCode() != requestCode) {
             return false;
         }
 
@@ -264,19 +293,12 @@ private boolean handleFacebookDialogActivityResult(int requestCode, int resultCo
             return true;
         }
 
-        String callIdString = data.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
-        UUID callId = null;
-        if (callIdString != null) {
-            try {
-                callId = UUID.fromString(callIdString);
-            } catch (IllegalArgumentException exception) {
-            }
-        }
+        UUID callId = NativeProtocol.getCallIdFromIntent(data);
 
         // Was this result for the call we are waiting on?
-        if (callId != null && pendingFacebookDialogCall.getCallId().equals(callId)) {
+        if (callId != null && pendingFacebookDialogCallId.equals(callId)) {
             // Yes, we can handle it normally.
-            FacebookDialog.handleActivityResult(activity, pendingFacebookDialogCall, requestCode, data,
+            FacebookDialog.handleActivityResult(activity, pendingCall, requestCode, data,
                     facebookDialogCallback);
         } else {
             // No, send a cancellation error to the pending call and ignore the result, because we
@@ -284,13 +306,23 @@ private boolean handleFacebookDialogActivityResult(int requestCode, int resultCo
             cancelPendingAppCall(facebookDialogCallback);
         }
 
-        pendingFacebookDialogCall = null;
+        stopTrackingPendingAppCall();
         return true;
     }
 
     private void cancelPendingAppCall(FacebookDialog.Callback facebookDialogCallback) {
+        if (pendingFacebookDialogCallId == null) {
+            return;
+        }
+
+        FacebookDialog.PendingCall pendingCall =
+                pendingFacebookDialogCallStore.getPendingCallById(pendingFacebookDialogCallId);
+        if (pendingCall == null) {
+            return;
+        }
+
         if (facebookDialogCallback != null) {
-            Intent pendingIntent = pendingFacebookDialogCall.getRequestIntent();
+            Intent pendingIntent = pendingCall.getRequestIntent();
 
             Intent cancelIntent = new Intent();
             cancelIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID,
@@ -301,9 +333,15 @@ private void cancelPendingAppCall(FacebookDialog.Callback facebookDialogCallback
                     pendingIntent.getIntExtra(NativeProtocol.EXTRA_PROTOCOL_VERSION, 0));
             cancelIntent.putExtra(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_UNKNOWN_ERROR);
 
-            FacebookDialog.handleActivityResult(activity, pendingFacebookDialogCall,
-                    pendingFacebookDialogCall.getRequestCode(), cancelIntent, facebookDialogCallback);
+            FacebookDialog.handleActivityResult(activity, pendingCall,
+                    pendingCall.getRequestCode(), cancelIntent, facebookDialogCallback);
         }
-        pendingFacebookDialogCall = null;
+
+        stopTrackingPendingAppCall();
+    }
+
+    private void stopTrackingPendingAppCall() {
+        pendingFacebookDialogCallStore.stopTrackingPendingCall(pendingFacebookDialogCallId);
+        pendingFacebookDialogCallId = null;
     }
 }
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index 83cdabe9b..ab11035a5 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -531,9 +531,13 @@ public void onServiceConnected(ComponentName className, IBinder service) {
         @Override
         public void onServiceDisconnected(ComponentName arg) {
             serviceListener.onError(new Error("Service disconnected"));
-            // We returned an error so there's no point in
-            // keeping the binding open.
-            applicationsContext.unbindService(TokenRefreshServiceConnection.this);
+            try {
+                // We returned an error so there's no point in
+                // keeping the binding open.
+                applicationsContext.unbindService(TokenRefreshServiceConnection.this);
+            } catch (IllegalArgumentException ex) {
+                // Do nothing, the connection was already unbound
+            }
         }
 
         private void refreshToken() {
@@ -1197,49 +1201,6 @@ public static String getAttributionId(ContentResolver contentResolver) {
         return Settings.getAttributionId(contentResolver);
     }
 
-    /**
-     * Get the auto install publish setting.  If true, an install event will be published during authorize(), unless
-     * it has occurred previously or the app does not have install attribution enabled on the application's developer
-     * config page.
-     * <p/>
-     * This method is deprecated.  See {@link Facebook} and {@link Settings} for more info.
-     *
-     * @return a Boolean indicating whether installation of the app should be auto-published.
-     */
-    @Deprecated
-    public boolean getShouldAutoPublishInstall() {
-        return Settings.getShouldAutoPublishInstall();
-    }
-
-    /**
-     * Sets whether auto publishing of installs will occur.
-     * <p/>
-     * This method is deprecated.  See {@link Facebook} and {@link Settings} for more info.
-     *
-     * @param value a Boolean indicating whether installation of the app should be auto-published.
-     */
-    @Deprecated
-    public void setShouldAutoPublishInstall(boolean value) {
-        Settings.setShouldAutoPublishInstall(value);
-    }
-
-    /**
-     * Manually publish install attribution to the Facebook graph.  Internally handles tracking repeat calls to prevent
-     * multiple installs being published to the graph.
-     * <p/>
-     * This method is deprecated.  See {@link Facebook} and {@link Settings} for more info.
-     *
-     * @param context the current Android context
-     * @return Always false.  Earlier versions of the API returned true if it was no longer necessary to call.
-     * Apps should ignore this value, but for compatibility we will return false to ensure repeat calls (and the
-     * underlying code will prevent duplicate network traffic).
-     */
-    @Deprecated
-    public boolean publishInstall(final Context context) {
-        Settings.publishInstallAsync(context, mAppId);
-        return false;
-    }
-
     /**
      * Callback interface for dialog requests.
      * <p/>
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
index 603e69280..e35bbaac4 100644
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ b/facebook/src/com/facebook/android/FbDialog.java
@@ -18,7 +18,9 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import com.facebook.*;
+import com.facebook.FacebookDialogException;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
 import com.facebook.android.Facebook.DialogListener;
 import com.facebook.widget.WebDialog;
 
diff --git a/facebook/src/com/facebook/internal/AnalyticsEvents.java b/facebook/src/com/facebook/internal/AnalyticsEvents.java
index e01ac4371..9488e0c8d 100644
--- a/facebook/src/com/facebook/internal/AnalyticsEvents.java
+++ b/facebook/src/com/facebook/internal/AnalyticsEvents.java
@@ -13,10 +13,13 @@
     public static final String EVENT_PLACE_PICKER_USAGE             = "fb_place_picker_usage";
     public static final String EVENT_LOGIN_VIEW_USAGE               = "fb_login_view_usage";
     public static final String EVENT_USER_SETTINGS_USAGE            = "fb_user_settings_vc_usage";
+    public static final String EVENT_NATIVE_DIALOG_START            = "fb_native_dialog_start";
+    public static final String EVENT_NATIVE_DIALOG_COMPLETE         = "fb_native_dialog_complete";
 
     public static final String PARAMETER_WEB_LOGIN_E2E                  = "fb_web_login_e2e";
     public static final String PARAMETER_WEB_LOGIN_SWITCHBACK_TIME      = "fb_web_login_switchback_time";
     public static final String PARAMETER_APP_ID                         = "app_id";
+    public static final String PARAMETER_CALL_ID                        = "call_id";
     public static final String PARAMETER_ACTION_ID                      = "action_id";
     public static final String PARAMETER_NATIVE_LOGIN_DIALOG_START_TIME = "fb_native_login_dialog_start_time";
     public static final String PARAMETER_NATIVE_LOGIN_DIALOG_COMPLETE_TIME =
@@ -28,4 +31,29 @@
     public static final String PARAMETER_DIALOG_OUTCOME_VALUE_CANCELLED = "Cancelled";
     public static final String PARAMETER_DIALOG_OUTCOME_VALUE_FAILED    = "Failed";
 
+    public static final String EVENT_NATIVE_DIALOG_TYPE_SHARE           = "fb_dialogs_present_share";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_MESSAGE         = "fb_dialogs_present_message";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_SHARE        = "fb_dialogs_present_share_og";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_OG_MESSAGE      = "fb_dialogs_present_message_og";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_SHARE     = "fb_dialogs_present_share_photo";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_PHOTO_MESSAGE   = "fb_dialogs_present_message_photo";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_VIDEO_SHARE     = "fb_dialogs_present_share_video";
+    public static final String EVENT_NATIVE_DIALOG_TYPE_LIKE            = "fb_dialogs_present_like";
+
+    public static final String EVENT_LIKE_VIEW_CANNOT_PRESENT_DIALOG    = "fb_like_control_cannot_present_dialog";
+    public static final String EVENT_LIKE_VIEW_DID_LIKE                 = "fb_like_control_did_like";
+    public static final String EVENT_LIKE_VIEW_DID_PRESENT_DIALOG       = "fb_like_control_did_present_dialog";
+    public static final String EVENT_LIKE_VIEW_DID_PRESENT_FALLBACK     = "fb_like_control_did_present_fallback_dialog";
+    public static final String EVENT_LIKE_VIEW_DID_TAP                  = "fb_like_control_did_tap";
+    public static final String EVENT_LIKE_VIEW_DID_UNLIKE               = "fb_like_control_did_unlike";
+    public static final String EVENT_LIKE_VIEW_DID_UNDO_QUICKLY         = "fb_like_control_did_undo_quickly";
+    public static final String EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED       = "fb_like_control_dialog_did_succeed";
+    public static final String EVENT_LIKE_VIEW_ERROR                    = "fb_like_control_error";
+
+    public static final String PARAMETER_LIKE_VIEW_STYLE                = "style";
+    public static final String PARAMETER_LIKE_VIEW_AUXILIARY_POSITION   = "auxiliary_position";
+    public static final String PARAMETER_LIKE_VIEW_HORIZONTAL_ALIGNMENT = "horizontal_alignment";
+    public static final String PARAMETER_LIKE_VIEW_OBJECT_ID            = "object_id";
+    public static final String PARAMETER_LIKE_VIEW_CURRENT_ACTION       = "current_action";
+    public static final String PARAMETER_LIKE_VIEW_ERROR_JSON           = "error";
 }
diff --git a/facebook/src/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
new file mode 100644
index 000000000..b00c4e6f8
--- /dev/null
+++ b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
@@ -0,0 +1,155 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.os.Looper;
+import android.util.Log;
+
+import com.facebook.FacebookException;
+
+import java.lang.reflect.Method;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class AttributionIdentifiers {
+    private static final String TAG = AttributionIdentifiers.class.getCanonicalName();
+    private static final Uri ATTRIBUTION_ID_CONTENT_URI =
+            Uri.parse("content://com.facebook.katana.provider.AttributionIdProvider");
+    private static final String ATTRIBUTION_ID_COLUMN_NAME = "aid";
+    private static final String ANDROID_ID_COLUMN_NAME = "androidid";
+    private static final String LIMIT_TRACKING_COLUMN_NAME = "limit_tracking";
+
+    // com.google.android.gms.common.ConnectionResult.SUCCESS
+    private static final int CONNECTION_RESULT_SUCCESS = 0;
+
+    private static final long IDENTIFIER_REFRESH_INTERVAL_MILLIS = 3600 * 1000;
+
+    private String attributionId;
+    private String androidAdvertiserId;
+    private boolean limitTracking;
+    private long fetchTime;
+
+    private static AttributionIdentifiers recentlyFetchedIdentifiers;
+
+    private static AttributionIdentifiers getAndroidId(Context context) {
+        AttributionIdentifiers identifiers = new AttributionIdentifiers();
+        try {
+            // We can't call getAdvertisingIdInfo on the main thread or the app will potentially
+            // freeze, if this is the case throw:
+            if (Looper.myLooper() == Looper.getMainLooper()) {
+              throw new FacebookException("getAndroidId cannot be called on the main thread.");
+            }
+            Method isGooglePlayServicesAvailable = Utility.getMethodQuietly(
+                    "com.google.android.gms.common.GooglePlayServicesUtil",
+                    "isGooglePlayServicesAvailable",
+                    Context.class
+            );
+
+            if (isGooglePlayServicesAvailable == null) {
+                return identifiers;
+            }
+
+            Object connectionResult = Utility.invokeMethodQuietly(null, isGooglePlayServicesAvailable, context);
+            if (!(connectionResult instanceof Integer) || (Integer) connectionResult != CONNECTION_RESULT_SUCCESS) {
+                return identifiers;
+            }
+
+            Method getAdvertisingIdInfo = Utility.getMethodQuietly(
+                    "com.google.android.gms.ads.identifier.AdvertisingIdClient",
+                    "getAdvertisingIdInfo",
+                    Context.class
+            );
+            if (getAdvertisingIdInfo == null) {
+                return identifiers;
+            }
+            Object advertisingInfo = Utility.invokeMethodQuietly(null, getAdvertisingIdInfo, context);
+            if (advertisingInfo == null) {
+                return identifiers;
+            }
+
+            Method getId = Utility.getMethodQuietly(advertisingInfo.getClass(), "getId");
+            Method isLimitAdTrackingEnabled = Utility.getMethodQuietly(advertisingInfo.getClass(), "isLimitAdTrackingEnabled");
+            if (getId == null || isLimitAdTrackingEnabled == null) {
+                return identifiers;
+            }
+
+            identifiers.androidAdvertiserId = (String) Utility.invokeMethodQuietly(advertisingInfo, getId);
+            identifiers.limitTracking = (Boolean) Utility.invokeMethodQuietly(advertisingInfo, isLimitAdTrackingEnabled);
+        } catch (Exception e) {
+            Utility.logd("android_id", e);
+        }
+        return identifiers;
+    }
+
+    public static AttributionIdentifiers getAttributionIdentifiers(Context context) {
+        if (recentlyFetchedIdentifiers != null &&
+            System.currentTimeMillis() - recentlyFetchedIdentifiers.fetchTime < IDENTIFIER_REFRESH_INTERVAL_MILLIS) {
+            return recentlyFetchedIdentifiers;
+        }
+
+        AttributionIdentifiers identifiers = getAndroidId(context);
+        Cursor c = null;
+        try {
+            String [] projection = {ATTRIBUTION_ID_COLUMN_NAME, ANDROID_ID_COLUMN_NAME, LIMIT_TRACKING_COLUMN_NAME};
+            c = context.getContentResolver().query(ATTRIBUTION_ID_CONTENT_URI, projection, null, null, null);
+            if (c == null || !c.moveToFirst()) {
+                return identifiers;
+            }
+            int attributionColumnIndex = c.getColumnIndex(ATTRIBUTION_ID_COLUMN_NAME);
+            int androidIdColumnIndex = c.getColumnIndex(ANDROID_ID_COLUMN_NAME);
+            int limitTrackingColumnIndex = c.getColumnIndex(LIMIT_TRACKING_COLUMN_NAME);
+
+            identifiers.attributionId = c.getString(attributionColumnIndex);
+
+            // if we failed to call Google's APIs directly (due to improper integration by the client), it may be
+            // possible for the local facebook application to relay it to us.
+            if (androidIdColumnIndex > 0 && limitTrackingColumnIndex > 0 && identifiers.getAndroidAdvertiserId() == null) {
+                identifiers.androidAdvertiserId = c.getString(androidIdColumnIndex);
+                identifiers.limitTracking = Boolean.parseBoolean(c.getString(limitTrackingColumnIndex));
+            }
+        } catch (Exception e) {
+            Log.d(TAG, "Caught unexpected exception in getAttributionId(): " + e.toString());
+            return null;
+        } finally {
+            if (c != null) {
+                c.close();
+            }
+        }
+
+        identifiers.fetchTime = System.currentTimeMillis();
+        recentlyFetchedIdentifiers = identifiers;
+        return identifiers;
+    }
+
+    public String getAttributionId() {
+        return attributionId;
+    }
+
+    public String getAndroidAdvertiserId() {
+        return androidAdvertiserId;
+    }
+
+    public boolean isTrackingLimited() {
+        return limitTracking;
+    }
+}
diff --git a/facebook/src/com/facebook/internal/BundleJSONConverter.java b/facebook/src/com/facebook/internal/BundleJSONConverter.java
new file mode 100644
index 000000000..c674ff3c1
--- /dev/null
+++ b/facebook/src/com/facebook/internal/BundleJSONConverter.java
@@ -0,0 +1,199 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.os.Bundle;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.*;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+
+/**
+ * A helper class that can round trip between JSON and Bundle objects that contains the types:
+ *   Boolean, Integer, Long, Double, String
+ * If other types are found, an IllegalArgumentException is thrown.
+ */
+public class BundleJSONConverter {
+    private static final Map<Class<?>, Setter> SETTERS = new HashMap<Class<?>, Setter>();
+
+    static {
+        SETTERS.put(Boolean.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                bundle.putBoolean(key, (Boolean) value);
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                json.put(key, value);
+            }
+        });
+        SETTERS.put(Integer.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                bundle.putInt(key, (Integer) value);
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                json.put(key, value);
+            }
+        });
+        SETTERS.put(Long.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                bundle.putLong(key, (Long) value);
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                json.put(key, value);
+            }
+        });
+        SETTERS.put(Double.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                bundle.putDouble(key, (Double) value);
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                json.put(key, value);
+            }
+        });
+        SETTERS.put(String.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                bundle.putString(key, (String) value);
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                json.put(key, value);
+            }
+        });
+        SETTERS.put(String[].class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                throw new IllegalArgumentException("Unexpected type from JSON");
+            }
+
+            public void setOnJSON(JSONObject json, String key, Object value)  throws JSONException {
+                JSONArray jsonArray = new JSONArray();
+                for (String stringValue : (String[])value) {
+                    jsonArray.put(stringValue);
+                }
+                json.put(key, jsonArray);
+            }
+        });
+
+        SETTERS.put(JSONArray.class, new Setter() {
+            public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException {
+                JSONArray jsonArray = (JSONArray)value;
+                ArrayList<String> stringArrayList = new ArrayList<String>();
+                // Empty list, can't even figure out the type, assume an ArrayList<String>
+                if (jsonArray.length() == 0) {
+                    bundle.putStringArrayList(key, stringArrayList);
+                    return;
+                }
+
+                // Only strings are supported for now
+                for (int i = 0; i < jsonArray.length(); i++) {
+                    Object current = jsonArray.get(i);
+                    if (current instanceof String) {
+                        stringArrayList.add((String)current);
+                    } else {
+                        throw new IllegalArgumentException("Unexpected type in an array: " + current.getClass());
+                    }
+                }
+                bundle.putStringArrayList(key, stringArrayList);
+            }
+
+            @Override
+            public void setOnJSON(JSONObject json, String key, Object value) throws JSONException {
+                throw new IllegalArgumentException("JSONArray's are not supported in bundles.");
+            }
+        });
+    }
+
+    public interface Setter {
+        public void setOnBundle(Bundle bundle, String key, Object value) throws JSONException;
+        public void setOnJSON(JSONObject json, String key, Object value) throws JSONException;
+    }
+
+    public static JSONObject convertToJSON(Bundle bundle) throws JSONException {
+        JSONObject json = new JSONObject();
+
+        for(String key : bundle.keySet()) {
+            Object value = bundle.get(key);
+            if (value == null) {
+                // Null is not supported.
+                continue;
+            }
+
+            // Special case List<String> as getClass would not work, since List is an interface
+            if (value instanceof List<?>) {
+                JSONArray jsonArray = new JSONArray();
+                @SuppressWarnings("unchecked")
+                List<String> listValue = (List<String>)value;
+                for (String stringValue : listValue) {
+                    jsonArray.put(stringValue);
+                }
+                json.put(key, jsonArray);
+                continue;
+            }
+
+            // Special case Bundle as it's one way, on the return it will be JSONObject
+            if (value instanceof Bundle) {
+                json.put(key, convertToJSON((Bundle)value));
+                continue;
+            }
+
+            Setter setter = SETTERS.get(value.getClass());
+            if (setter == null) {
+                throw new IllegalArgumentException("Unsupported type: " + value.getClass());
+            }
+            setter.setOnJSON(json, key, value);
+        }
+
+        return json;
+    }
+
+    public static Bundle convertToBundle(JSONObject jsonObject) throws JSONException {
+        Bundle bundle = new Bundle();
+        @SuppressWarnings("unchecked")
+        Iterator<String> jsonIterator = jsonObject.keys();
+        while (jsonIterator.hasNext()) {
+            String key = jsonIterator.next();
+            Object value = jsonObject.get(key);
+            if (value == null || value == JSONObject.NULL) {
+                // Null is not supported.
+                continue;
+            }
+
+            // Special case JSONObject as it's one way, on the return it would be Bundle.
+            if (value instanceof JSONObject) {
+                bundle.putBundle(key, convertToBundle((JSONObject)value));
+                continue;
+            }
+
+            Setter setter = SETTERS.get(value.getClass());
+            if (setter == null) {
+                throw new IllegalArgumentException("Unsupported type: " + value.getClass());
+            }
+            setter.setOnBundle(bundle, key, value);
+        }
+
+        return bundle;
+    }
+}
diff --git a/facebook/src/com/facebook/internal/FacebookWebFallbackDialog.java b/facebook/src/com/facebook/internal/FacebookWebFallbackDialog.java
new file mode 100644
index 000000000..a042c918e
--- /dev/null
+++ b/facebook/src/com/facebook/internal/FacebookWebFallbackDialog.java
@@ -0,0 +1,171 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.webkit.WebView;
+import com.facebook.FacebookException;
+import com.facebook.widget.FacebookDialog;
+import com.facebook.widget.WebDialog;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ *
+ * This dialog is used as a fallback when a native FacebookDialog could not be displayed. The primary reason for
+ * this separation is to keep this approach for internal use only until we stabilize the API.
+ */
+public class FacebookWebFallbackDialog extends WebDialog {
+    private static final String TAG = FacebookWebFallbackDialog.class.getName();
+    private static final int OS_BACK_BUTTON_RESPONSE_TIMEOUT_MILLISECONDS = 1500;
+
+    private boolean waitingForDialogToClose;
+
+    public static boolean presentWebFallback(final Context context,
+                                             String dialogUrl,
+                                             String applicationId,
+                                             final FacebookDialog.PendingCall appCall,
+                                             final FacebookDialog.Callback callback) {
+        if (Utility.isNullOrEmpty(dialogUrl)) {
+            return false;
+        }
+
+        String redirectUrl = String.format("fb%s://bridge/", applicationId);
+
+        // Show the webdialog.
+        FacebookWebFallbackDialog fallbackWebDialog = new FacebookWebFallbackDialog(
+                context, dialogUrl, redirectUrl);
+        fallbackWebDialog.setOnCompleteListener(new WebDialog.OnCompleteListener() {
+            @Override
+            public void onComplete(Bundle values, FacebookException error) {
+                Intent dummyIntent = new Intent();
+                dummyIntent.putExtras(values == null ? new Bundle() : values);
+                FacebookDialog.handleActivityResult(
+                        context,
+                        appCall,
+                        appCall.getRequestCode(),
+                        dummyIntent,
+                        callback);
+            }
+        });
+
+        fallbackWebDialog.show();
+        return true;
+    }
+
+    private FacebookWebFallbackDialog(Context context, String url, String expectedRedirectUrl) {
+        super(context, url);
+
+        setExpectedRedirectUrl(expectedRedirectUrl);
+    }
+
+    @Override
+    protected Bundle parseResponseUri(String url) {
+        Uri responseUri = Uri.parse(url);
+        Bundle queryParams = Utility.parseUrlQueryString(responseUri.getQuery());
+
+        // Convert Bridge args to the format that the Native dialog code understands.
+        String bridgeArgsJSONString = queryParams.getString(ServerProtocol.FALLBACK_DIALOG_PARAM_BRIDGE_ARGS);
+        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_BRIDGE_ARGS);
+
+        if (!Utility.isNullOrEmpty(bridgeArgsJSONString)) {
+            Bundle bridgeArgs;
+            try {
+                JSONObject bridgeArgsJSON = new JSONObject(bridgeArgsJSONString);
+                bridgeArgs = BundleJSONConverter.convertToBundle(bridgeArgsJSON);
+                queryParams.putBundle(NativeProtocol.EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArgs);
+            } catch (JSONException je) {
+                Utility.logd(TAG, "Unable to parse bridge_args JSON", je);
+            }
+        }
+
+        // Convert Method results to the format that the Native dialog code understands.
+        String methodResultsJSONString = queryParams.getString(ServerProtocol.FALLBACK_DIALOG_PARAM_METHOD_RESULTS);
+        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_METHOD_RESULTS);
+
+        if (!Utility.isNullOrEmpty(methodResultsJSONString)) {
+            methodResultsJSONString = Utility.isNullOrEmpty(methodResultsJSONString) ? "{}" : methodResultsJSONString;
+            Bundle methodResults;
+            try {
+                JSONObject methodArgsJSON = new JSONObject(methodResultsJSONString);
+                methodResults = BundleJSONConverter.convertToBundle(methodArgsJSON);
+                queryParams.putBundle(NativeProtocol.EXTRA_PROTOCOL_METHOD_RESULTS, methodResults);
+            } catch (JSONException je) {
+                Utility.logd(TAG, "Unable to parse bridge_args JSON", je);
+            }
+        }
+
+        // The web host does not send a numeric version back. Put the latest known version in there so NativeProtocol
+        // can continue parsing the response.
+        queryParams.remove(ServerProtocol.FALLBACK_DIALOG_PARAM_VERSION);
+        queryParams.putInt(NativeProtocol.EXTRA_PROTOCOL_VERSION, NativeProtocol.getLatestKnownVersion());
+
+        return queryParams;
+    }
+
+    @Override
+    public void dismiss() {
+        WebView webView = getWebView();
+
+        if (isListenerCalled() || webView == null || !webView.isShown()) {
+            // If the listener has been called, or if the WebView isn't visible, we cannot give the dialog a chance
+            // to respond. So defer to the parent implementation.
+            super.dismiss();
+            return;
+        }
+
+        // If we have already notified the dialog to close, then ignore this request to dismiss. The timer will
+        // honor the request.
+        if (waitingForDialogToClose) {
+            return;
+        }
+        waitingForDialogToClose = true;
+
+        // Now fire off the event that will tell the dialog to wind down.
+        String eventJS =
+                "(function() {" +
+                "  var event = document.createEvent('Event');" +
+                "  event.initEvent('fbPlatformDialogMustClose',true,true);" +
+                "  document.dispatchEvent(event);" +
+                "})();";
+        webView.loadUrl("javascript:" + eventJS);
+
+        // Set up a timeout for the dialog to respond. If the timer expires, we need to honor the user's desire to
+        // dismiss the dialog.
+        Handler handler = new Handler(Looper.getMainLooper());
+        handler.postDelayed(
+                new Runnable() {
+                    @Override
+                    public void run() {
+                        if (!isListenerCalled()) {
+                            // If we get here, then the dialog did not close quickly enough. So we need to honor the user's
+                            // wish to cancel.
+                            sendCancelToListener();
+                        }
+                    }
+                },
+                OS_BACK_BUTTON_RESPONSE_TIMEOUT_MILLISECONDS);
+    }
+}
diff --git a/facebook/src/com/facebook/internal/FileLruCache.java b/facebook/src/com/facebook/internal/FileLruCache.java
index dba6a5e0e..0f23176b9 100644
--- a/facebook/src/com/facebook/internal/FileLruCache.java
+++ b/facebook/src/com/facebook/internal/FileLruCache.java
@@ -67,6 +67,7 @@
     private final Limits limits;
     private final File directory;
     private boolean isTrimPending;
+    private boolean isTrimInProgress;
     private final Object lock;
     private AtomicLong lastClearCacheTime = new AtomicLong(0);
 
@@ -91,7 +92,7 @@ public FileLruCache(Context context, String tag, Limits limits) {
     // Also, since trim() runs asynchronously now, this blocks until any pending trim has completed.
     long sizeInBytesForTest() {
         synchronized (lock) {
-            while (isTrimPending) {
+            while (isTrimPending || isTrimInProgress) {
                 try {
                     lock.wait();
                 } catch (InterruptedException e) {
@@ -277,6 +278,10 @@ public void run() {
     }
 
     private void trim() {
+        synchronized (lock) {
+            isTrimPending = false;
+            isTrimInProgress = true;
+        }
         try {
             Logger.log(LoggingBehavior.CACHE, TAG, "trim started");
             PriorityQueue<ModifiedFile> heap = new PriorityQueue<ModifiedFile>();
@@ -304,7 +309,7 @@ private void trim() {
             }
         } finally {
             synchronized (lock) {
-                isTrimPending = false;
+                isTrimInProgress = false;
                 lock.notifyAll();
             }
         }
diff --git a/facebook/src/com/facebook/internal/ImageDownloader.java b/facebook/src/com/facebook/internal/ImageDownloader.java
index dc55fb917..058c55bc8 100644
--- a/facebook/src/com/facebook/internal/ImageDownloader.java
+++ b/facebook/src/com/facebook/internal/ImageDownloader.java
@@ -22,6 +22,7 @@
 import android.os.Handler;
 import android.os.Looper;
 import com.facebook.FacebookException;
+import com.facebook.android.R;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -30,7 +31,8 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class ImageDownloader {
     private static final int DOWNLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
@@ -245,15 +247,19 @@ private static void download(RequestKey key, Context context) {
 
                 default:
                     stream = connection.getErrorStream();
-                    InputStreamReader reader = new InputStreamReader(stream);
-                    char[] buffer = new char[128];
-                    int bufferLength;
                     StringBuilder errorMessageBuilder = new StringBuilder();
-                    while ((bufferLength = reader.read(buffer, 0, buffer.length)) > 0) {
-                        errorMessageBuilder.append(buffer, 0, bufferLength);
+                    if (stream != null) {
+                        InputStreamReader reader = new InputStreamReader(stream);
+                        char[] buffer = new char[128];
+                        int bufferLength;
+                        while ((bufferLength = reader.read(buffer, 0, buffer.length)) > 0) {
+                            errorMessageBuilder.append(buffer, 0, bufferLength);
+                        }
+                        Utility.closeQuietly(reader);
+                    } else {
+                        errorMessageBuilder.append(
+                            context.getString(R.string.com_facebook_image_download_unknown_error));
                     }
-                    Utility.closeQuietly(reader);
-
                     error = new FacebookException(errorMessageBuilder.toString());
                     break;
             }
diff --git a/facebook/src/com/facebook/internal/LikeActionController.java b/facebook/src/com/facebook/internal/LikeActionController.java
new file mode 100644
index 000000000..308a2db07
--- /dev/null
+++ b/facebook/src/com/facebook/internal/LikeActionController.java
@@ -0,0 +1,1465 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.app.Activity;
+import android.content.*;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import com.facebook.*;
+import com.facebook.widget.FacebookDialog;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.ArrayList;
+import java.util.EnumSet;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class LikeActionController {
+
+    public static final String ACTION_LIKE_ACTION_CONTROLLER_UPDATED = "com.facebook.sdk.LikeActionController.UPDATED";
+    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR = "com.facebook.sdk.LikeActionController.DID_ERROR";
+    public static final String ACTION_LIKE_ACTION_CONTROLLER_DID_RESET = "com.facebook.sdk.LikeActionController.DID_RESET";
+
+    public static final String ACTION_OBJECT_ID_KEY = "com.facebook.sdk.LikeActionController.OBJECT_ID";
+
+    public static final String ERROR_INVALID_OBJECT_ID = "Invalid Object Id";
+
+    private static final String TAG = LikeActionController.class.getSimpleName();
+
+    private static final int LIKE_ACTION_CONTROLLER_VERSION = 2;
+    private static final int MAX_CACHE_SIZE = 128;
+    // MAX_OBJECT_SUFFIX basically accommodates for 1000 session-state changes before the async disk-cache-clear
+    // finishes. The value is reasonably arbitrary.
+    private static final int MAX_OBJECT_SUFFIX = 1000;
+
+    private static final String LIKE_ACTION_CONTROLLER_STORE = "com.facebook.LikeActionController.CONTROLLER_STORE_KEY";
+    private static final String LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY = "PENDING_CONTROLLER_KEY";
+    private static final String LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY = "OBJECT_SUFFIX";
+
+    private static final String JSON_INT_VERSION_KEY = "com.facebook.internal.LikeActionController.version";
+    private static final String JSON_STRING_OBJECT_ID_KEY = "object_id";
+    private static final String JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY = "like_count_string_with_like";
+    private static final String JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY = "like_count_string_without_like";
+    private static final String JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY = "social_sentence_with_like";
+    private static final String JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY = "social_sentence_without_like";
+    private static final String JSON_BOOL_IS_OBJECT_LIKED_KEY = "is_object_liked";
+    private static final String JSON_STRING_UNLIKE_TOKEN_KEY = "unlike_token";
+    private static final String JSON_STRING_PENDING_CALL_ID_KEY = "pending_call_id";
+    private static final String JSON_BUNDLE_PENDING_CALL_ANALYTICS_BUNDLE = "pending_call_analytics_bundle";
+
+    private static final String LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY = "object_is_liked";
+    private static final String LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY = "like_count_string";
+    private static final String LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY = "social_sentence";
+    private static final String LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY = "unlike_token";
+
+    private static final int ERROR_CODE_OBJECT_ALREADY_LIKED = 3501;
+
+    private static FileLruCache controllerDiskCache;
+    private static final ConcurrentHashMap<String, LikeActionController> cache =
+            new ConcurrentHashMap<String, LikeActionController>();
+    private static WorkQueue mruCacheWorkQueue = new WorkQueue(1); // This MUST be 1 for proper synchronization
+    private static WorkQueue diskIOWorkQueue = new WorkQueue(1); // This MUST be 1 for proper synchronization
+    private static Handler handler;
+    private static String objectIdForPendingController;
+    private static boolean isPendingBroadcastReset;
+    private static boolean isInitialized;
+    private static volatile int objectSuffix;
+
+    private Session session;
+    private Context context;
+    private String objectId;
+    private boolean isObjectLiked;
+    private String likeCountStringWithLike;
+    private String likeCountStringWithoutLike;
+    private String socialSentenceWithLike;
+    private String socialSentenceWithoutLike;
+    private String unlikeToken;
+
+    private String verifiedObjectId;
+    private boolean objectIsPage;
+    private boolean isObjectLikedOnServer;
+
+    private boolean isPendingLikeOrUnlike;
+
+    private UUID pendingCallId;
+
+    private Bundle pendingCallAnalyticsBundle;
+
+    private AppEventsLogger appEventsLogger;
+
+    /**
+     * Called from UiLifecycleHelper to process any pending likes that had resulted in the Like dialog
+     * being displayed
+     *
+     * @param context Hosting context
+     * @param requestCode From the originating call to onActivityResult
+     * @param resultCode From the originating call to onActivityResult
+     * @param data From the originating call to onActivityResult
+     * @return Indication of whether the Intent was handled
+     */
+    public static boolean handleOnActivityResult(Context context,
+                                                 final int requestCode,
+                                                 final int resultCode,
+                                                 final Intent data) {
+        final UUID callId = NativeProtocol.getCallIdFromIntent(data);
+        if (callId == null) {
+            return false;
+        }
+
+        // See if we were waiting on a Like dialog completion.
+        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
+            SharedPreferences sharedPreferences = context.getSharedPreferences(
+                    LIKE_ACTION_CONTROLLER_STORE,
+                    Context.MODE_PRIVATE);
+
+            objectIdForPendingController = sharedPreferences.getString(
+                    LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY,
+                    null);
+        }
+
+        if (Utility.isNullOrEmpty(objectIdForPendingController)) {
+            // Doesn't look like we were waiting on a Like dialog completion
+            return false;
+        }
+
+        getControllerForObjectId(
+                context,
+                objectIdForPendingController,
+                new CreationCallback() {
+                    @Override
+                    public void onComplete(LikeActionController likeActionController) {
+                        likeActionController.onActivityResult(requestCode, resultCode, data, callId);
+                    }
+                });
+
+        return true;
+    }
+
+    /**
+     * Called by the LikeView when an object-id is set on it.
+     * @param context context
+     * @param objectId Object Id
+     * @param callback Callback to be invoked when the LikeActionController has been created.
+     */
+    public static void getControllerForObjectId(
+            Context context,
+            String objectId,
+            CreationCallback callback) {
+        if (!isInitialized) {
+            performFirstInitialize(context);
+        }
+
+        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
+        if (controllerForObject != null) {
+            // Direct object-cache hit
+            invokeCallbackWithController(callback, controllerForObject);
+        } else {
+            diskIOWorkQueue.addActiveWorkItem(new CreateLikeActionControllerWorkItem(context, objectId, callback));
+        }
+    }
+
+    /**
+     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure that it happens on the
+     * right thread, at the right time.
+     */
+    private static void createControllerForObjectId(
+            Context context,
+            String objectId,
+            CreationCallback callback) {
+        // Check again to see if the controller was created before attempting to deserialize/create one.
+        // Need to check this in the case where multiple LikeViews are looking for a controller for the same object
+        // and all got queued up to create one. We only want the first one to go through with the creation, and the
+        // rest should get the same instance from the object-cache.
+        LikeActionController controllerForObject = getControllerFromInMemoryCache(objectId);
+        if (controllerForObject != null) {
+            // Direct object-cache hit
+            invokeCallbackWithController(callback, controllerForObject);
+            return;
+        }
+
+        // Try deserialize from disk
+        controllerForObject = deserializeFromDiskSynchronously(context, objectId);
+
+        if (controllerForObject == null) {
+            controllerForObject = new LikeActionController(context, Session.getActiveSession(), objectId);
+            serializeToDiskAsync(controllerForObject);
+        }
+
+        // Update object-cache.
+        putControllerInMemoryCache(objectId, controllerForObject);
+
+        // Refresh the controller on the Main thread.
+        final LikeActionController controllerToRefresh = controllerForObject;
+        handler.post(new Runnable() {
+            @Override
+            public void run() {
+                controllerToRefresh.refreshStatusAsync();
+            }
+        });
+
+        invokeCallbackWithController(callback, controllerToRefresh);
+    }
+
+    private synchronized static void performFirstInitialize(Context context) {
+        if (isInitialized) {
+            return;
+        }
+
+        handler = new Handler(Looper.getMainLooper());
+
+        SharedPreferences sharedPreferences = context.getSharedPreferences(
+                LIKE_ACTION_CONTROLLER_STORE,
+                Context.MODE_PRIVATE);
+
+        objectSuffix = sharedPreferences.getInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, 1);
+        controllerDiskCache = new FileLruCache(context, TAG, new FileLruCache.Limits());
+
+        registerSessionBroadcastReceivers(context);
+
+        isInitialized = true;
+    }
+
+    private static void invokeCallbackWithController(final CreationCallback callback, final LikeActionController controller) {
+        if (callback == null) {
+            return;
+        }
+
+        handler.post(new Runnable() {
+            @Override
+            public void run() {
+                callback.onComplete(controller);
+            }
+        });
+    }
+
+    //
+    // In-memory mru-caching code
+    //
+
+    private static void registerSessionBroadcastReceivers(Context context) {
+        LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(context);
+
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(Session.ACTION_ACTIVE_SESSION_UNSET);
+        filter.addAction(Session.ACTION_ACTIVE_SESSION_CLOSED);
+        filter.addAction(Session.ACTION_ACTIVE_SESSION_OPENED);
+
+        broadcastManager.registerReceiver(new BroadcastReceiver() {
+            @Override
+            public void onReceive(Context receiverContext, Intent intent) {
+                if (isPendingBroadcastReset) {
+                    return;
+                }
+
+                String action = intent.getAction();
+                final boolean shouldClearDisk =
+                        Utility.areObjectsEqual(Session.ACTION_ACTIVE_SESSION_UNSET, action) ||
+                                Utility.areObjectsEqual(Session.ACTION_ACTIVE_SESSION_CLOSED, action);
+
+
+                isPendingBroadcastReset = true;
+                // Delaying sending the broadcast to reset, because we might get many successive calls from Session
+                // (to UNSET, SET & OPEN) and a delay would prevent excessive chatter.
+                final Context broadcastContext = receiverContext;
+                handler.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        // Bump up the objectSuffix so that we don't have a filename collision between a cache-clear and
+                        // and a cache-read/write.
+                        //
+                        // NOTE: We know that onReceive() was called on the main thread. This means that even this code
+                        // is running on the main thread, and therefore, there aren't synchronization issues with
+                        // incrementing the objectSuffix and clearing the caches here.
+                        if (shouldClearDisk) {
+                            objectSuffix = (objectSuffix + 1) % MAX_OBJECT_SUFFIX;
+                            broadcastContext.getSharedPreferences(LIKE_ACTION_CONTROLLER_STORE, Context.MODE_PRIVATE)
+                                    .edit()
+                                    .putInt(LIKE_ACTION_CONTROLLER_STORE_OBJECT_SUFFIX_KEY, objectSuffix)
+                                    .apply();
+
+                            // Only clearing the actual caches. The MRU index will self-clean with usage.
+                            // Clearing the caches is necessary to prevent leaking like-state across sessions.
+                            cache.clear();
+                            controllerDiskCache.clearCache();
+                        }
+
+                        broadcastAction(broadcastContext, null, ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
+                        isPendingBroadcastReset = false;
+                    }
+                }, 100);
+            }
+        }, filter);
+    }
+
+    private static void putControllerInMemoryCache(String objectId, LikeActionController controllerForObject) {
+        String cacheKey = getCacheKeyForObjectId(objectId);
+        // Move this object to the front. Also trim cache if necessary
+        mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, true));
+
+        cache.put(cacheKey, controllerForObject);
+    }
+
+    private static LikeActionController getControllerFromInMemoryCache(String objectId) {
+        String cacheKey = getCacheKeyForObjectId(objectId);
+
+        LikeActionController controller = cache.get(cacheKey);
+        if (controller != null) {
+            // Move this object to the front
+            mruCacheWorkQueue.addActiveWorkItem(new MRUCacheWorkItem(cacheKey, false));
+        }
+
+        return controller;
+    }
+
+    //
+    // Disk caching code
+    //
+
+    private static void serializeToDiskAsync(LikeActionController controller) {
+        String controllerJson = serializeToJson(controller);
+        String cacheKey = getCacheKeyForObjectId(controller.objectId);
+
+        if (!Utility.isNullOrEmpty(controllerJson) && !Utility.isNullOrEmpty(cacheKey)) {
+            diskIOWorkQueue.addActiveWorkItem(new SerializeToDiskWorkItem(cacheKey, controllerJson));
+        }
+    }
+
+    /**
+     * NOTE: This MUST be called ONLY via the SerializeToDiskWorkItem class to ensure that it happens on the
+     * right thread, at the right time.
+     */
+    private static void serializeToDiskSynchronously(String cacheKey, String controllerJson) {
+        OutputStream outputStream = null;
+        try {
+            outputStream = controllerDiskCache.openPutStream(cacheKey);
+            outputStream.write(controllerJson.getBytes());
+        } catch (IOException e) {
+            Log.e(TAG, "Unable to serialize controller to disk", e);
+        } finally {
+            if (outputStream != null) {
+                Utility.closeQuietly(outputStream);
+            }
+        }
+    }
+
+    /**
+     * NOTE: This MUST be called ONLY via the CreateLikeActionControllerWorkItem class to ensure that it happens on the
+     * right thread, at the right time.
+     */
+    private static LikeActionController deserializeFromDiskSynchronously(
+            Context context,
+            String objectId) {
+        LikeActionController controller = null;
+
+        InputStream inputStream = null;
+        try {
+            String cacheKey = getCacheKeyForObjectId(objectId);
+            inputStream = controllerDiskCache.get(cacheKey);
+            if (inputStream != null) {
+                String controllerJsonString = Utility.readStreamToString(inputStream);
+                if (!Utility.isNullOrEmpty(controllerJsonString)) {
+                    controller = deserializeFromJson(context, controllerJsonString);
+                }
+            }
+        } catch (IOException e) {
+            Log.e(TAG, "Unable to deserialize controller from disk", e);
+            controller = null;
+        } finally {
+            if (inputStream != null) {
+                Utility.closeQuietly(inputStream);
+            }
+        }
+
+        return controller;
+    }
+
+    private static LikeActionController deserializeFromJson(Context context, String controllerJsonString) {
+        LikeActionController controller;
+
+        try {
+            JSONObject controllerJson = new JSONObject(controllerJsonString);
+            int version = controllerJson.optInt(JSON_INT_VERSION_KEY, -1);
+            if (version != LIKE_ACTION_CONTROLLER_VERSION) {
+                // Don't attempt to deserialize a controller that might be serialized differently than expected.
+                return null;
+            }
+
+            controller = new LikeActionController(
+                    context,
+                    Session.getActiveSession(),
+                    controllerJson.getString(JSON_STRING_OBJECT_ID_KEY));
+
+            // Make sure to default to null and not empty string, to keep the logic elsewhere functioning properly.
+            controller.likeCountStringWithLike = controllerJson.optString(JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY, null) ;
+            controller.likeCountStringWithoutLike = controllerJson.optString(JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY, null) ;
+            controller.socialSentenceWithLike = controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY, null);
+            controller.socialSentenceWithoutLike = controllerJson.optString(JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY, null);
+            controller.isObjectLiked = controllerJson.optBoolean(JSON_BOOL_IS_OBJECT_LIKED_KEY);
+            controller.unlikeToken = controllerJson.optString(JSON_STRING_UNLIKE_TOKEN_KEY, null);
+            String pendingCallIdString = controllerJson.optString(JSON_STRING_PENDING_CALL_ID_KEY, null);
+            if (!Utility.isNullOrEmpty(pendingCallIdString)) {
+                controller.pendingCallId = UUID.fromString(pendingCallIdString);
+            }
+
+            JSONObject analyticsJSON = controllerJson.optJSONObject(JSON_BUNDLE_PENDING_CALL_ANALYTICS_BUNDLE);
+            if (analyticsJSON != null) {
+                controller.pendingCallAnalyticsBundle = BundleJSONConverter.convertToBundle(analyticsJSON);
+            }
+        } catch (JSONException e) {
+            Log.e(TAG, "Unable to deserialize controller from JSON", e);
+            controller = null;
+        }
+
+        return controller;
+    }
+
+    private static String serializeToJson(LikeActionController controller) {
+        JSONObject controllerJson = new JSONObject();
+        try {
+            controllerJson.put(JSON_INT_VERSION_KEY, LIKE_ACTION_CONTROLLER_VERSION);
+            controllerJson.put(JSON_STRING_OBJECT_ID_KEY, controller.objectId);
+            controllerJson.put(JSON_STRING_LIKE_COUNT_WITH_LIKE_KEY, controller.likeCountStringWithLike);
+            controllerJson.put(JSON_STRING_LIKE_COUNT_WITHOUT_LIKE_KEY, controller.likeCountStringWithoutLike);
+            controllerJson.put(JSON_STRING_SOCIAL_SENTENCE_WITH_LIKE_KEY, controller.socialSentenceWithLike);
+            controllerJson.put(JSON_STRING_SOCIAL_SENTENCE_WITHOUT_LIKE_KEY, controller.socialSentenceWithoutLike);
+            controllerJson.put(JSON_BOOL_IS_OBJECT_LIKED_KEY, controller.isObjectLiked);
+            controllerJson.put(JSON_STRING_UNLIKE_TOKEN_KEY, controller.unlikeToken);
+            if (controller.pendingCallId != null) {
+                controllerJson.put(JSON_STRING_PENDING_CALL_ID_KEY, controller.pendingCallId.toString());
+            }
+            if (controller.pendingCallAnalyticsBundle != null) {
+                JSONObject analyticsJSON = BundleJSONConverter.convertToJSON(controller.pendingCallAnalyticsBundle);
+                if (analyticsJSON != null) {
+                    controllerJson.put(JSON_BUNDLE_PENDING_CALL_ANALYTICS_BUNDLE, analyticsJSON);
+                }
+            }
+        } catch (JSONException e) {
+            Log.e(TAG, "Unable to serialize controller to JSON", e);
+            return null;
+        }
+
+        return controllerJson.toString();
+    }
+
+    private static String getCacheKeyForObjectId(String objectId) {
+        String accessTokenPortion = null;
+        Session activeSession = Session.getActiveSession();
+        if (activeSession != null && activeSession.isOpened()) {
+            accessTokenPortion = activeSession.getAccessToken();
+        }
+        if (accessTokenPortion != null) {
+            // Cache-key collisions are not something to worry about here, since we only store state for
+            // one session. Even in the case where the previous session's serialized files have not been deleted yet,
+            // the objectSuffix will be different due to the session-change, thus making the key different.
+            accessTokenPortion = Utility.md5hash(accessTokenPortion);
+        }
+        return String.format(
+                "%s|%s|com.fb.sdk.like|%d",
+                objectId,
+                Utility.coerceValueIfNullOrEmpty(accessTokenPortion, ""),
+                objectSuffix);
+    }
+
+    //
+    // Broadcast handling code
+    //
+
+    private static void broadcastAction(Context context, LikeActionController controller, String action) {
+        broadcastAction(context, controller, action, null);
+    }
+
+    private static void broadcastAction(Context context, LikeActionController controller, String action, Bundle data) {
+        Intent broadcastIntent = new Intent(action);
+        if (controller != null) {
+            if (data == null) {
+                data = new Bundle();
+            }
+
+            data.putString(ACTION_OBJECT_ID_KEY, controller.getObjectId());
+        }
+
+        if (data != null) {
+            broadcastIntent.putExtras(data);
+        }
+        LocalBroadcastManager.getInstance(context.getApplicationContext()).sendBroadcast(broadcastIntent);
+    }
+
+    /**
+     * Constructor
+     */
+    private LikeActionController(Context context, Session session, String objectId) {
+        this.context = context;
+        this.session = session;
+        this.objectId = objectId;
+
+        appEventsLogger = AppEventsLogger.newLogger(context, session);
+    }
+
+    /**
+     * Gets the the associated object id
+     * @return object id
+     */
+    public String getObjectId() {
+        return objectId;
+    }
+
+    /**
+     * Gets the String representation of the like-count for the associated object
+     * @return String representation of the like-count for the associated object
+     */
+    public String getLikeCountString() {
+        return isObjectLiked ? likeCountStringWithLike : likeCountStringWithoutLike;
+    }
+
+    /**
+     * Gets the String representation of the like-count for the associated object
+     * @return String representation of the like-count for the associated object
+     */
+    public String getSocialSentence() {
+        return isObjectLiked ? socialSentenceWithLike : socialSentenceWithoutLike;
+    }
+
+    /**
+     * Indicates whether the associated object is liked
+     * @return Indication of whether the associated object is liked
+     */
+    public boolean isObjectLiked() {
+        return isObjectLiked;
+    }
+
+    /**
+     * Entry-point to the code that performs the like/unlike action.
+     */
+    public void toggleLike(Activity activity, Bundle analyticsParameters) {
+        appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_TAP, null, analyticsParameters);
+
+        boolean shouldLikeObject = !this.isObjectLiked;
+        if (canUseOGPublish()) {
+            // Update UI state optimistically
+            updateState(shouldLikeObject,
+                    this.likeCountStringWithLike,
+                    this.likeCountStringWithoutLike,
+                    this.socialSentenceWithLike,
+                    this.socialSentenceWithoutLike,
+                    this.unlikeToken);
+            if (isPendingLikeOrUnlike) {
+                // If the user toggled the button quickly, and there is still a publish underway, don't fire off
+                // another request. Also log this behavior.
+
+                appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNDO_QUICKLY, null, analyticsParameters);
+                return;
+            }
+        }
+
+        performLikeOrUnlike(activity, shouldLikeObject, analyticsParameters);
+    }
+
+    private void performLikeOrUnlike(Activity activity, boolean shouldLikeObject, Bundle analyticsParameters) {
+        if (canUseOGPublish()) {
+            if (shouldLikeObject) {
+                publishLikeAsync(activity, analyticsParameters);
+            } else {
+                if (!Utility.isNullOrEmpty(this.unlikeToken)) {
+                    publishUnlikeAsync(activity, analyticsParameters);
+                } else {
+                    // If we don't have an unlikeToken, we must fall back to the dialog.
+                    fallbackToDialog(activity, analyticsParameters, true);
+                }
+            }
+        } else {
+            presentLikeDialog(activity, analyticsParameters);
+        }
+    }
+
+    /**
+     * Only to be called after an OG-publish was attempted and something went wrong. The Button state is reverted
+     * and the dialog is presented.
+     */
+    private void fallbackToDialog(
+            Activity activity,
+            Bundle analyticsParameters,
+            boolean oldLikeState) {
+        updateState(
+                oldLikeState,
+                this.likeCountStringWithLike,
+                this.likeCountStringWithoutLike,
+                this.socialSentenceWithLike,
+                this.socialSentenceWithoutLike,
+                this.unlikeToken);
+
+        presentLikeDialog(activity, analyticsParameters);
+    }
+
+    private void updateState(boolean isObjectLiked,
+                             String likeCountStringWithLike,
+                             String likeCountStringWithoutLike,
+                             String socialSentenceWithLike,
+                             String socialSentenceWithoutLike,
+                             String unlikeToken) {
+        // Normalize all empty strings to null, so that we don't have any problems with comparison.
+        likeCountStringWithLike = Utility.coerceValueIfNullOrEmpty(likeCountStringWithLike, null);
+        likeCountStringWithoutLike = Utility.coerceValueIfNullOrEmpty(likeCountStringWithoutLike, null);
+        socialSentenceWithLike = Utility.coerceValueIfNullOrEmpty(socialSentenceWithLike, null);
+        socialSentenceWithoutLike = Utility.coerceValueIfNullOrEmpty(socialSentenceWithoutLike, null);
+        unlikeToken = Utility.coerceValueIfNullOrEmpty(unlikeToken, null);
+
+        boolean stateChanged = isObjectLiked != this.isObjectLiked ||
+                !Utility.areObjectsEqual(likeCountStringWithLike, this.likeCountStringWithLike) ||
+                !Utility.areObjectsEqual(likeCountStringWithoutLike, this.likeCountStringWithoutLike) ||
+                !Utility.areObjectsEqual(socialSentenceWithLike, this.socialSentenceWithLike) ||
+                !Utility.areObjectsEqual(socialSentenceWithoutLike, this.socialSentenceWithoutLike) ||
+                !Utility.areObjectsEqual(unlikeToken, this.unlikeToken);
+
+        if (!stateChanged) {
+            return;
+        }
+
+        this.isObjectLiked = isObjectLiked;
+        this.likeCountStringWithLike = likeCountStringWithLike;
+        this.likeCountStringWithoutLike = likeCountStringWithoutLike;
+        this.socialSentenceWithLike = socialSentenceWithLike;
+        this.socialSentenceWithoutLike = socialSentenceWithoutLike;
+        this.unlikeToken = unlikeToken;
+
+        serializeToDiskAsync(this);
+
+        broadcastAction(context, this, ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
+    }
+
+    private void presentLikeDialog(Activity activity, Bundle analyticsParameters) {
+        LikeDialogBuilder likeDialogBuilder = new LikeDialogBuilder(activity, objectId);
+
+        if (likeDialogBuilder.canPresent()) {
+            trackPendingCall(likeDialogBuilder.build().present(), analyticsParameters);
+            appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_DIALOG, null, analyticsParameters);
+        } else {
+            String webFallbackUrl = likeDialogBuilder.getWebFallbackUrl();
+            if (!Utility.isNullOrEmpty(webFallbackUrl)) {
+                boolean webFallbackShown = FacebookWebFallbackDialog.presentWebFallback(
+                        activity,
+                        webFallbackUrl,
+                        likeDialogBuilder.getApplicationId(),
+                        likeDialogBuilder.getAppCall(),
+                        getFacebookDialogCallback(analyticsParameters));
+                if (webFallbackShown) {
+                    appEventsLogger.logSdkEvent(
+                            AnalyticsEvents.EVENT_LIKE_VIEW_DID_PRESENT_FALLBACK, null, analyticsParameters);
+                }
+            }
+        }
+    }
+
+    private boolean onActivityResult(int requestCode, int resultCode, Intent data, UUID callId) {
+        if (pendingCallId == null || !pendingCallId.equals(callId)) {
+            return false;
+        }
+
+        // See if we were waiting for a dialog completion
+        FacebookDialog.PendingCall pendingCall = PendingCallStore.getInstance().getPendingCallById(pendingCallId);
+        if (pendingCall == null) {
+            return false;
+        }
+
+        // Look for results
+        FacebookDialog.handleActivityResult(
+                context,
+                pendingCall,
+                requestCode,
+                data,
+                getFacebookDialogCallback(pendingCallAnalyticsBundle));
+
+        // The handlers from above will run synchronously. So by the time we get here, it should be safe to
+        // stop tracking this call and also serialize the controller to disk
+        stopTrackingPendingCall();
+
+        return true;
+    }
+
+    private FacebookDialog.Callback getFacebookDialogCallback(final Bundle analyticsParameters) {
+        return new FacebookDialog.Callback() {
+            @Override
+            public void onComplete(FacebookDialog.PendingCall pendingCall, Bundle data) {
+                if (data == null || !data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)) {
+                    // This is an empty result that we can't handle.
+                    return;
+                }
+
+                boolean isObjectLiked = data.getBoolean(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY);
+
+                // Default to known/cached state, if properties are missing.
+                String likeCountStringWithLike = LikeActionController.this.likeCountStringWithLike;
+                String likeCountStringWithoutLike = LikeActionController.this.likeCountStringWithoutLike;
+                if (data.containsKey(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY)) {
+                    likeCountStringWithLike = data.getString(LIKE_DIALOG_RESPONSE_LIKE_COUNT_STRING_KEY);
+                    likeCountStringWithoutLike = likeCountStringWithLike;
+                }
+
+                String socialSentenceWithLike = LikeActionController.this.socialSentenceWithLike;
+                String socialSentenceWithoutWithoutLike = LikeActionController.this.socialSentenceWithoutLike;
+                if (data.containsKey(LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY)) {
+                    socialSentenceWithLike = data.getString(LIKE_DIALOG_RESPONSE_SOCIAL_SENTENCE_KEY);
+                    socialSentenceWithoutWithoutLike = socialSentenceWithLike;
+                }
+
+                String unlikeToken = data.containsKey(LIKE_DIALOG_RESPONSE_OBJECT_IS_LIKED_KEY)
+                        ? data.getString(LIKE_DIALOG_RESPONSE_UNLIKE_TOKEN_KEY)
+                        : LikeActionController.this.unlikeToken;
+
+                Bundle logParams = (analyticsParameters == null) ? new Bundle() : analyticsParameters;
+                logParams.putString(AnalyticsEvents.PARAMETER_CALL_ID, pendingCall.getCallId().toString());
+                appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DIALOG_DID_SUCCEED, null, logParams);
+
+                updateState(
+                        isObjectLiked,
+                        likeCountStringWithLike,
+                        likeCountStringWithoutLike,
+                        socialSentenceWithLike,
+                        socialSentenceWithoutWithoutLike,
+                        unlikeToken);
+            }
+
+            @Override
+            public void onError(FacebookDialog.PendingCall pendingCall, Exception error, Bundle data) {
+                Logger.log(LoggingBehavior.REQUESTS, TAG, "Like Dialog failed with error : %s", error);
+
+                Bundle logParams = analyticsParameters == null ? new Bundle() : analyticsParameters;
+                logParams.putString(AnalyticsEvents.PARAMETER_CALL_ID, pendingCall.getCallId().toString());
+
+                // Log the error and AppEvent
+                logAppEventForError("present_dialog", logParams);
+
+                broadcastAction(context, LikeActionController.this, ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR, data);
+            }
+        };
+    }
+
+    private void trackPendingCall(FacebookDialog.PendingCall pendingCall, Bundle analyticsParameters) {
+        PendingCallStore.getInstance().trackPendingCall(pendingCall);
+
+        // Save off the call id for processing the response
+        pendingCallId = pendingCall.getCallId();
+        storeObjectIdForPendingController(objectId);
+
+        // Store off the analytics parameters as well, for completion-logging
+        pendingCallAnalyticsBundle = analyticsParameters;
+
+        // Serialize to disk, in case we get terminated while waiting for the dialog to complete
+        serializeToDiskAsync(this);
+    }
+
+    private void stopTrackingPendingCall() {
+        PendingCallStore.getInstance().stopTrackingPendingCall(pendingCallId);
+
+        pendingCallId = null;
+        pendingCallAnalyticsBundle = null;
+
+        storeObjectIdForPendingController(null);
+    }
+
+    private void storeObjectIdForPendingController(String objectId) {
+        objectIdForPendingController = objectId;
+        context.getSharedPreferences(LIKE_ACTION_CONTROLLER_STORE, Context.MODE_PRIVATE)
+                .edit()
+                .putString(LIKE_ACTION_CONTROLLER_STORE_PENDING_OBJECT_ID_KEY, objectIdForPendingController)
+                .apply();
+    }
+
+    private boolean canUseOGPublish() {
+        // Verify that the object isn't a Page, that we have permissions and that, if we're unliking, then
+        // we have an unlike token.
+        return !objectIsPage &&
+                verifiedObjectId != null &&
+                session != null &&
+                session.getPermissions() != null &&
+                session.getPermissions().contains("publish_actions");
+    }
+
+    private void publishLikeAsync(final Activity activity, final Bundle analyticsParameters) {
+        isPendingLikeOrUnlike = true;
+
+        fetchVerifiedObjectId(new RequestCompletionCallback() {
+            @Override
+            public void onComplete() {
+                if (Utility.isNullOrEmpty(verifiedObjectId)) {
+                    // Could not get a verified id
+                    Bundle errorBundle = new Bundle();
+                    errorBundle.putString(NativeProtocol.STATUS_ERROR_DESCRIPTION, ERROR_INVALID_OBJECT_ID);
+
+                    broadcastAction(context, LikeActionController.this, ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR, errorBundle);
+                    return;
+                }
+
+                // Perform the Like.
+                RequestBatch requestBatch = new RequestBatch();
+                final PublishLikeRequestWrapper likeRequest = new PublishLikeRequestWrapper(verifiedObjectId);
+                likeRequest.addToBatch(requestBatch);
+                requestBatch.addCallback(new RequestBatch.Callback() {
+                    @Override
+                    public void onBatchCompleted(RequestBatch batch) {
+                        isPendingLikeOrUnlike = false;
+
+                        if (likeRequest.error != null) {
+                            // We already updated the UI to show button in the Liked state. Since this failed, let's
+                            // revert back to the Unliked state and show the dialog. We need to do this because the
+                            // dialog-flow expects the button to only be updated once the dialog returns
+
+                            fallbackToDialog(activity, analyticsParameters, false);
+                        } else {
+                            unlikeToken = Utility.coerceValueIfNullOrEmpty(likeRequest.unlikeToken, null);
+                            isObjectLikedOnServer = true;
+
+                            appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_LIKE, null, analyticsParameters);
+
+                            toggleAgainIfNeeded(activity, analyticsParameters);
+                        }
+                    }
+                });
+
+                requestBatch.executeAsync();
+            }
+        });
+    }
+
+    private void publishUnlikeAsync(final Activity activity, final Bundle analyticsParameters) {
+        isPendingLikeOrUnlike = true;
+
+        // Perform the Unlike.
+        RequestBatch requestBatch = new RequestBatch();
+        final PublishUnlikeRequestWrapper unlikeRequest = new PublishUnlikeRequestWrapper(unlikeToken);
+        unlikeRequest.addToBatch(requestBatch);
+        requestBatch.addCallback(new RequestBatch.Callback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+                isPendingLikeOrUnlike = false;
+
+                if (unlikeRequest.error != null) {
+                    // We already updated the UI to show button in the Unliked state. Since this failed, let's
+                    // revert back to the Liked state and show the dialog. We need to do this because the
+                    // dialog-flow expects the button to only be updated once the dialog returns
+
+                    fallbackToDialog(activity, analyticsParameters, true);
+                } else {
+                    unlikeToken = null;
+                    isObjectLikedOnServer = false;
+
+                    appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_DID_UNLIKE, null, analyticsParameters);
+
+                    toggleAgainIfNeeded(activity, analyticsParameters);
+                }
+            }
+        });
+
+        requestBatch.executeAsync();
+    }
+
+    private void refreshStatusAsync() {
+        if (session == null || session.isClosed() || SessionState.CREATED.equals(session.getState())) {
+            // Only when we know that there is no active session, or if there is, it is not open OR being opened,
+            // should we attempt getting like state from the service. Otherwise, use the access token of the session
+            // to make sure we get the correct like state.
+            refreshStatusViaService();
+            return;
+        } else if (!session.isOpened()) {
+            // The session might be OPENING. In this case, we don't have an access token yet and
+            // cannot make server requests. We hit this code path during login when the
+            // Session.ACTION_ACTIVE_SESSION_UNSET broadcast fires, which LikeActionController
+            // responds to by resetting.
+            return;
+        }
+
+        fetchVerifiedObjectId(new RequestCompletionCallback() {
+            @Override
+            public void onComplete() {
+                final GetOGObjectLikesRequestWrapper objectLikesRequest =
+                        new GetOGObjectLikesRequestWrapper(verifiedObjectId);
+                final GetEngagementRequestWrapper engagementRequest =
+                        new GetEngagementRequestWrapper(verifiedObjectId);
+
+                RequestBatch requestBatch = new RequestBatch();
+                objectLikesRequest.addToBatch(requestBatch);
+                engagementRequest.addToBatch(requestBatch);
+
+                requestBatch.addCallback(new RequestBatch.Callback() {
+                    @Override
+                    public void onBatchCompleted(RequestBatch batch) {
+                        if (objectLikesRequest.error != null ||
+                                engagementRequest.error != null) {
+                            // Refreshing is best-effort. If the refresh fails, don't lose old state.
+                            Logger.log(
+                                    LoggingBehavior.REQUESTS,
+                                    TAG,
+                                    "Unable to refresh like state for id: '%s'", objectId);
+                            return;
+                        }
+
+                        updateState(
+                                objectLikesRequest.objectIsLiked,
+                                engagementRequest.likeCountStringWithLike,
+                                engagementRequest.likeCountStringWithoutLike,
+                                engagementRequest.socialSentenceStringWithLike,
+                                engagementRequest.socialSentenceStringWithoutLike,
+                                objectLikesRequest.unlikeToken);
+                    }
+                });
+
+                requestBatch.executeAsync();
+            }
+        });
+    }
+
+    private void refreshStatusViaService() {
+        LikeStatusClient likeStatusClient = new LikeStatusClient(
+                context,
+                Settings.getApplicationId(),
+                objectId);
+        if (!likeStatusClient.start()) {
+            return;
+        }
+
+        LikeStatusClient.CompletedListener callback = new LikeStatusClient.CompletedListener() {
+            @Override
+            public void completed(Bundle result) {
+                // Don't lose old state if the service response is incomplete.
+                if (result == null || !result.containsKey(NativeProtocol.EXTRA_OBJECT_IS_LIKED)) {
+                    return;
+                }
+
+                boolean objectIsLiked = result.getBoolean(NativeProtocol.EXTRA_OBJECT_IS_LIKED);
+
+                String likeCountWithLike =
+                        result.containsKey(NativeProtocol.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
+                                ? result.getString(NativeProtocol.EXTRA_LIKE_COUNT_STRING_WITH_LIKE)
+                                : LikeActionController.this.likeCountStringWithLike;
+
+                String likeCountWithoutLike =
+                        result.containsKey(NativeProtocol.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
+                                ? result.getString(NativeProtocol.EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE)
+                                : LikeActionController.this.likeCountStringWithoutLike;
+
+                String socialSentenceWithLike =
+                        result.containsKey(NativeProtocol.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
+                                ? result.getString(NativeProtocol.EXTRA_SOCIAL_SENTENCE_WITH_LIKE)
+                                : LikeActionController.this.socialSentenceWithLike;
+
+                String socialSentenceWithoutLike =
+                        result.containsKey(NativeProtocol.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
+                                ? result.getString(NativeProtocol.EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE)
+                                : LikeActionController.this.socialSentenceWithoutLike;
+
+                String unlikeToken =
+                        result.containsKey(NativeProtocol.EXTRA_UNLIKE_TOKEN)
+                                ? result.getString(NativeProtocol.EXTRA_UNLIKE_TOKEN)
+                                : LikeActionController.this.unlikeToken;
+
+                updateState(
+                        objectIsLiked,
+                        likeCountWithLike,
+                        likeCountWithoutLike,
+                        socialSentenceWithLike,
+                        socialSentenceWithoutLike,
+                        unlikeToken);
+            }
+        };
+
+        likeStatusClient.setCompletedListener(callback);
+    }
+
+    private void toggleAgainIfNeeded(Activity activity, Bundle analyticsParameters) {
+        if (isObjectLiked != isObjectLikedOnServer) {
+            performLikeOrUnlike(activity, isObjectLiked, analyticsParameters);
+        }
+    }
+
+    private void fetchVerifiedObjectId(final RequestCompletionCallback completionHandler) {
+        if (!Utility.isNullOrEmpty(verifiedObjectId)) {
+            if (completionHandler != null) {
+                completionHandler.onComplete();
+            }
+
+            return;
+        }
+
+        final GetOGObjectIdRequestWrapper objectIdRequest = new GetOGObjectIdRequestWrapper(objectId);
+        final GetPageIdRequestWrapper pageIdRequest = new GetPageIdRequestWrapper(objectId);
+
+        RequestBatch requestBatch = new RequestBatch();
+        objectIdRequest.addToBatch(requestBatch);
+        pageIdRequest.addToBatch(requestBatch);
+
+        requestBatch.addCallback(new RequestBatch.Callback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+                verifiedObjectId = objectIdRequest.verifiedObjectId;
+                if (Utility.isNullOrEmpty(verifiedObjectId)) {
+                    verifiedObjectId = pageIdRequest.verifiedObjectId;
+                    objectIsPage = pageIdRequest.objectIsPage;
+                }
+
+                if (Utility.isNullOrEmpty(verifiedObjectId)) {
+                    Logger.log(LoggingBehavior.DEVELOPER_ERRORS,
+                            TAG,
+                            "Unable to verify the FB id for '%s'. Verify that it is a valid FB object or page", objectId);
+                    logAppEventForError("get_verified_id",
+                            pageIdRequest.error != null ? pageIdRequest.error : objectIdRequest.error);
+                }
+
+                if (completionHandler != null) {
+                    completionHandler.onComplete();
+                }
+            }
+        });
+
+        requestBatch.executeAsync();
+    }
+
+    private void logAppEventForError(String action, Bundle parameters) {
+        Bundle logParams = new Bundle(parameters);
+        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID, objectId);
+        logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_CURRENT_ACTION, action);
+
+        appEventsLogger.logSdkEvent(AnalyticsEvents.EVENT_LIKE_VIEW_ERROR, null, logParams);
+    }
+
+    private void logAppEventForError(String action, FacebookRequestError error) {
+        Bundle logParams = new Bundle();
+        if (error != null) {
+            JSONObject requestResult = error.getRequestResult();
+            if (requestResult != null) {
+                logParams.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_ERROR_JSON, requestResult.toString());
+            }
+        }
+        logAppEventForError(action, logParams);
+    }
+
+    //
+    // Interfaces
+    //
+
+    /**
+     * Used by the call to getControllerForObjectId()
+     */
+    public interface CreationCallback {
+        public void onComplete(LikeActionController likeActionController);
+    }
+
+    /**
+     * Used by all the request wrappers
+     */
+    private interface RequestCompletionCallback {
+        void onComplete();
+    }
+
+    //
+    // Inner classes
+    //
+
+    private class GetOGObjectIdRequestWrapper extends AbstractRequestWrapper {
+        String verifiedObjectId;
+
+        GetOGObjectIdRequestWrapper(String objectId) {
+            super(objectId);
+
+            Bundle objectIdRequestParams = new Bundle();
+            objectIdRequestParams.putString("fields", "og_object.fields(id)");
+            objectIdRequestParams.putString("ids", objectId);
+
+            setRequest(new Request(session, "", objectIdRequestParams, HttpMethod.GET));
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            // If this object Id is for a Page, an error will be received for this request
+            // We will then rely on the other request to come through.
+            if (error.getErrorMessage().contains("og_object")) {
+                this.error = null;
+            } else {
+                Logger.log(LoggingBehavior.REQUESTS,
+                        TAG,
+                        "Error getting the FB id for object '%s' : %s", objectId, error);
+            }
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+            JSONObject results = Utility.tryGetJSONObjectFromResponse(response.getGraphObject(), objectId);
+            if (results != null) {
+                // See if we can get the OG object Id out
+                JSONObject ogObject = results.optJSONObject("og_object");
+                if (ogObject != null) {
+                    verifiedObjectId = ogObject.optString("id");
+                }
+            }
+        }
+    }
+
+    private class GetPageIdRequestWrapper extends AbstractRequestWrapper {
+        String verifiedObjectId;
+        boolean objectIsPage;
+
+        GetPageIdRequestWrapper(String objectId) {
+            super(objectId);
+
+            Bundle pageIdRequestParams = new Bundle();
+            pageIdRequestParams.putString("fields", "id");
+            pageIdRequestParams.putString("ids", objectId);
+
+            setRequest(new Request(session, "", pageIdRequestParams, HttpMethod.GET));
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+            JSONObject results = Utility.tryGetJSONObjectFromResponse(response.getGraphObject(), objectId);
+            if (results != null) {
+                verifiedObjectId = results.optString("id");
+                objectIsPage = !Utility.isNullOrEmpty(verifiedObjectId);
+            }
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            Logger.log(LoggingBehavior.REQUESTS,
+                    TAG,
+                    "Error getting the FB id for object '%s' : %s", objectId, error);
+        }
+    }
+
+    private class PublishLikeRequestWrapper extends AbstractRequestWrapper {
+        String unlikeToken;
+
+        PublishLikeRequestWrapper(String objectId) {
+            super(objectId);
+
+            Bundle likeRequestParams = new Bundle();
+            likeRequestParams.putString("object", objectId);
+
+            setRequest(new Request(session, "me/og.likes", likeRequestParams, HttpMethod.POST));
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+            unlikeToken = Utility.safeGetStringFromResponse(response.getGraphObject(), "id");
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            int errorCode = error.getErrorCode();
+            if (errorCode == ERROR_CODE_OBJECT_ALREADY_LIKED) {
+                // This isn't an error for us. Client was just out of sync with server
+                // This will prevent us from showing the dialog for this.
+
+                // However, there is no unliketoken. So a subsequent unlike WILL show the dialog
+                this.error = null;
+            } else {
+                Logger.log(LoggingBehavior.REQUESTS,
+                        TAG,
+                        "Error liking object '%s' : %s", objectId, error);
+                logAppEventForError("publish_like", error);
+            }
+        }
+    }
+
+    private class PublishUnlikeRequestWrapper extends AbstractRequestWrapper {
+        private String unlikeToken;
+
+        PublishUnlikeRequestWrapper(String unlikeToken) {
+            super(null);
+
+            this.unlikeToken = unlikeToken;
+
+            setRequest(new Request(session, unlikeToken, null, HttpMethod.DELETE));
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            Logger.log(LoggingBehavior.REQUESTS,
+                    TAG,
+                    "Error unliking object with unlike token '%s' : %s", unlikeToken, error);
+            logAppEventForError("publish_unlike", error);
+        }
+    }
+
+    private class GetOGObjectLikesRequestWrapper extends AbstractRequestWrapper {
+        // Initialize the like status to what we currently have. This way, empty/error responses don't end
+        // up clearing out the state.
+        boolean objectIsLiked = LikeActionController.this.isObjectLiked;
+        String unlikeToken;
+
+        GetOGObjectLikesRequestWrapper(String objectId) {
+            super(objectId);
+
+            Bundle requestParams = new Bundle();
+            requestParams.putString("fields", "id,application");
+            requestParams.putString("object", objectId);
+
+            setRequest(new Request(session, "me/og.likes", requestParams, HttpMethod.GET));
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+            JSONArray dataSet = Utility.tryGetJSONArrayFromResponse(response.getGraphObject(), "data");
+            if (dataSet != null) {
+                for (int i = 0; i < dataSet.length(); i++) {
+                    JSONObject data = dataSet.optJSONObject(i);
+                    if (data != null) {
+                        objectIsLiked = true;
+                        JSONObject appData = data.optJSONObject("application");
+                        if (appData != null) {
+                            if (Utility.areObjectsEqual(session.getApplicationId(), appData.optString("id"))) {
+                                unlikeToken = data.optString("id");
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            Logger.log(LoggingBehavior.REQUESTS,
+                    TAG,
+                    "Error fetching like status for object '%s' : %s", objectId, error);
+            logAppEventForError("get_og_object_like", error);
+        }
+    }
+
+    private class GetEngagementRequestWrapper extends AbstractRequestWrapper {
+        // Initialize the like status to what we currently have. This way, empty/error responses don't end
+        // up clearing out the state.
+        String likeCountStringWithLike = LikeActionController.this.likeCountStringWithLike;
+        String likeCountStringWithoutLike = LikeActionController.this.likeCountStringWithoutLike;
+        String socialSentenceStringWithLike = LikeActionController.this.socialSentenceWithLike;
+        String socialSentenceStringWithoutLike = LikeActionController.this.socialSentenceWithoutLike;
+
+        GetEngagementRequestWrapper(String objectId) {
+            super(objectId);
+
+            Bundle requestParams = new Bundle();
+            requestParams.putString(
+                    "fields",
+                    "engagement.fields(" +
+                            "count_string_with_like," +
+                            "count_string_without_like," +
+                            "social_sentence_with_like," +
+                            "social_sentence_without_like)");
+
+            setRequest(new Request(session, objectId, requestParams, HttpMethod.GET));
+        }
+
+        @Override
+        protected void processSuccess(Response response) {
+            JSONObject engagementResults = Utility.tryGetJSONObjectFromResponse(response.getGraphObject(), "engagement");
+            if (engagementResults != null) {
+                // Missing properties in the response should default to cached like status
+                likeCountStringWithLike =
+                        engagementResults.optString("count_string_with_like", likeCountStringWithLike);
+
+                likeCountStringWithoutLike =
+                        engagementResults.optString("count_string_without_like", likeCountStringWithoutLike);
+
+                socialSentenceStringWithLike =
+                        engagementResults.optString("social_sentence_with_like", socialSentenceStringWithLike);
+
+                socialSentenceStringWithoutLike =
+                        engagementResults.optString("social_sentence_without_like", socialSentenceStringWithoutLike);
+            }
+        }
+
+        @Override
+        protected void processError(FacebookRequestError error) {
+            Logger.log(LoggingBehavior.REQUESTS,
+                    TAG,
+                    "Error fetching engagement for object '%s' : %s", objectId, error);
+            logAppEventForError("get_engagement", error);
+        }
+    }
+
+    private abstract class AbstractRequestWrapper {
+        private Request request;
+        protected String objectId;
+
+        FacebookRequestError error;
+
+        protected AbstractRequestWrapper(String objectId) {
+            this.objectId = objectId;
+        }
+
+        void addToBatch(RequestBatch batch) {
+            batch.add(request);
+        }
+
+        protected void setRequest(Request request) {
+            this.request = request;
+            // Make sure that our requests are hitting the latest version of the API known to this sdk.
+            request.setVersion(ServerProtocol.GRAPH_API_VERSION);
+            request.setCallback(new Request.Callback() {
+                @Override
+                public void onCompleted(Response response) {
+                    error = response.getError();
+                    if (error != null) {
+                        processError(error);
+                    } else {
+                        processSuccess(response);
+                    }
+                }
+            });
+        }
+
+        protected void processError(FacebookRequestError error) {
+            Logger.log(LoggingBehavior.REQUESTS,
+                    TAG,
+                    "Error running request for object '%s' : %s", objectId, error);
+        }
+
+        protected abstract void processSuccess(Response response);
+    }
+
+    private enum LikeDialogFeature implements FacebookDialog.DialogFeature {
+
+        LIKE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140701);
+
+        private int minVersion;
+
+        private LikeDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        public String getAction() {
+            return NativeProtocol.ACTION_LIKE_DIALOG;
+        }
+
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+    private static class LikeDialogBuilder extends FacebookDialog.Builder<LikeDialogBuilder> {
+        private String objectId;
+
+        public LikeDialogBuilder(Activity activity, String objectId) {
+            super(activity);
+
+            this.objectId = objectId;
+        }
+
+        @Override
+        protected EnumSet<? extends FacebookDialog.DialogFeature> getDialogFeatures() {
+            return EnumSet.of(LikeDialogFeature.LIKE_DIALOG);
+        }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
+
+            methodArgs.putString(NativeProtocol.METHOD_ARGS_OBJECT_ID, objectId);
+
+            return methodArgs;
+        }
+
+        public FacebookDialog.PendingCall getAppCall() {
+            return appCall;
+        }
+
+        public String getApplicationId() {
+            return applicationId;
+        }
+
+        public String getWebFallbackUrl() {
+            return getWebFallbackUrlInternal();
+        }
+    }
+
+    // Performs cache re-ordering/trimming to keep most-recently-used items up front
+    // ** NOTE ** It is expected that only _ONE_ MRUCacheWorkItem is ever running. This is enforced by
+    // setting the concurrency of the WorkQueue to 1. Changing the concurrency will most likely lead to errors.
+    private static class MRUCacheWorkItem implements Runnable {
+        private static ArrayList<String> mruCachedItems = new ArrayList<String>();
+        private String cacheItem;
+        private boolean shouldTrim;
+
+        MRUCacheWorkItem(String cacheItem, boolean shouldTrim) {
+            this.cacheItem = cacheItem;
+            this.shouldTrim = shouldTrim;
+        }
+
+        @Override
+        public void run() {
+            if (cacheItem != null) {
+                mruCachedItems.remove(cacheItem);
+                mruCachedItems.add(0, cacheItem);
+            }
+            if (shouldTrim && mruCachedItems.size() >= MAX_CACHE_SIZE) {
+                int targetSize = MAX_CACHE_SIZE / 2; // Optimize for fewer trim-passes.
+                while (targetSize < mruCachedItems.size()) {
+                    String cacheKey = mruCachedItems.remove(mruCachedItems.size() - 1);
+
+                    // Here is where we actually remove from the cache of LikeActionControllers.
+                    cache.remove(cacheKey);
+                }
+            }
+        }
+    }
+
+    private static class SerializeToDiskWorkItem implements Runnable {
+        private String cacheKey;
+        private String controllerJson;
+
+        SerializeToDiskWorkItem(String cacheKey, String controllerJson) {
+            this.cacheKey = cacheKey;
+            this.controllerJson = controllerJson;
+        }
+
+        @Override
+        public void run() {
+            serializeToDiskSynchronously(cacheKey, controllerJson);
+        }
+    }
+
+    private static class CreateLikeActionControllerWorkItem implements Runnable {
+        private Context context;
+        private String objectId;
+        private CreationCallback callback;
+
+        CreateLikeActionControllerWorkItem(Context context, String objectId, CreationCallback callback) {
+            this.context = context;
+            this.objectId = objectId;
+            this.callback = callback;
+        }
+
+        @Override
+        public void run() {
+            createControllerForObjectId(context, objectId, callback);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/internal/LikeBoxCountView.java b/facebook/src/com/facebook/internal/LikeBoxCountView.java
new file mode 100644
index 000000000..5d9d001a9
--- /dev/null
+++ b/facebook/src/com/facebook/internal/LikeBoxCountView.java
@@ -0,0 +1,223 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.graphics.*;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.ViewGroup;
+import android.widget.FrameLayout;
+import android.widget.TextView;
+import com.facebook.android.R;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class LikeBoxCountView extends FrameLayout {
+
+    public enum LikeBoxCountViewCaretPosition {
+        LEFT,
+        TOP,
+        RIGHT,
+        BOTTOM
+    }
+
+    private TextView likeCountLabel;
+    private LikeBoxCountViewCaretPosition caretPosition = LikeBoxCountViewCaretPosition.LEFT;
+
+    private float caretHeight;
+    private float caretWidth;
+    private float borderRadius;
+    private Paint borderPaint;
+    private int textPadding;
+    private int additionalTextPadding;
+
+    /**
+     * Constructor
+     *
+     * @param context Context for this View
+     */
+    public LikeBoxCountView(Context context) {
+        super(context);
+        initialize(context);
+    }
+
+    /**
+     * Sets the text for this view
+     * @param text
+     */
+    public void setText(String text) {
+        likeCountLabel.setText(text);
+    }
+
+    /**
+     * Sets the caret's position. This will trigger a layout of the view.
+     * @param caretPosition
+     */
+    public void setCaretPosition(LikeBoxCountViewCaretPosition caretPosition) {
+        this.caretPosition = caretPosition;
+
+        // Since the presence of a caret will move that edge closer to the text, let's add
+        // some padding (equal to caretHeight) in that same direction
+        switch (caretPosition) {
+            case LEFT:
+                setAdditionalTextPadding(additionalTextPadding, 0, 0, 0);
+                break;
+            case TOP:
+                setAdditionalTextPadding(0, additionalTextPadding, 0, 0);
+                break;
+            case RIGHT:
+                setAdditionalTextPadding(0, 0, additionalTextPadding, 0);
+                break;
+            case BOTTOM:
+                setAdditionalTextPadding(0, 0, 0, additionalTextPadding);
+                break;
+        }
+
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        int top = getPaddingTop(), left = getPaddingLeft();
+        int right = getWidth() - getPaddingRight(), bottom = getHeight() - getPaddingBottom();
+
+        switch (caretPosition) {
+            case BOTTOM:
+                bottom -= caretHeight;
+                break;
+            case LEFT:
+                left += caretHeight;
+                break;
+            case TOP:
+                top += caretHeight;
+                break;
+            case RIGHT:
+                right -= caretHeight;
+                break;
+        }
+
+        drawBorder(canvas, left, top, right, bottom);
+    }
+
+    private void initialize(Context context) {
+        setWillNotDraw(false); // Required for the onDraw() method to be called on a FrameLayout
+        caretHeight = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_height);
+        caretWidth = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_caret_width);
+        borderRadius = getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_radius);
+
+        borderPaint = new Paint();
+        borderPaint.setColor(getResources().getColor(R.color.com_facebook_likeboxcountview_border_color));
+        borderPaint.setStrokeWidth(getResources().getDimension(R.dimen.com_facebook_likeboxcountview_border_width));
+        borderPaint.setStyle(Paint.Style.STROKE);
+
+        initializeLikeCountLabel(context);
+
+        addView(likeCountLabel);
+
+        setCaretPosition(this.caretPosition);
+    }
+
+    private void initializeLikeCountLabel(Context context) {
+        likeCountLabel = new TextView(context);
+        LayoutParams likeCountLabelLayoutParams = new LayoutParams(
+                ViewGroup.LayoutParams.MATCH_PARENT,
+                ViewGroup.LayoutParams.MATCH_PARENT);
+        likeCountLabel.setLayoutParams(likeCountLabelLayoutParams);
+        likeCountLabel.setGravity(Gravity.CENTER);
+        likeCountLabel.setTextSize(
+                TypedValue.COMPLEX_UNIT_PX,
+                getResources().getDimension(R.dimen.com_facebook_likeboxcountview_text_size));
+        likeCountLabel.setTextColor(getResources().getColor(R.color.com_facebook_likeboxcountview_text_color));
+        textPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_text_padding);
+
+        // Calculate the additional text padding that will be applied in the direction of the caret.
+        additionalTextPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeboxcountview_caret_height);
+    }
+
+    private void setAdditionalTextPadding(int left, int top, int right, int bottom) {
+        likeCountLabel.setPadding(
+                textPadding + left,
+                textPadding + top,
+                textPadding + right,
+                textPadding + bottom);
+    }
+
+    private void drawBorder(Canvas canvas, float left, float top, float right, float bottom) {
+        Path borderPath = new Path();
+
+        float ovalSize = 2.0f * borderRadius;
+
+        // Top left corner
+        borderPath.addArc(new RectF(left, top, left + ovalSize, top + ovalSize), -180, 90);
+
+        // Top caret
+        if (caretPosition == LikeBoxCountViewCaretPosition.TOP) {
+            borderPath.lineTo(left + (right - left - caretWidth) / 2, top);
+            borderPath.lineTo(left + (right - left) / 2, top - caretHeight);
+            borderPath.lineTo(left + (right - left + caretWidth) / 2, top);
+        }
+
+        // Move to top right corner
+        borderPath.lineTo(right - borderRadius, top);
+
+        // Top right corner
+        borderPath.addArc(new RectF(right - ovalSize, top, right, top + ovalSize), -90, 90);
+
+        // Right caret
+        if (caretPosition == LikeBoxCountViewCaretPosition.RIGHT) {
+            borderPath.lineTo(right, top + (bottom - top - caretWidth) / 2);
+            borderPath.lineTo(right + caretHeight, top + (bottom - top) / 2);
+            borderPath.lineTo(right, top + (bottom - top + caretWidth) / 2);
+        }
+
+        // Move to bottom right corner
+        borderPath.lineTo(right, bottom - borderRadius);
+
+        // Bottom right corner
+        borderPath.addArc(new RectF(right - ovalSize, bottom - ovalSize, right, bottom), 0, 90);
+
+        // Bottom caret
+        if (caretPosition == LikeBoxCountViewCaretPosition.BOTTOM) {
+            borderPath.lineTo(left + (right - left + caretWidth) / 2, bottom);
+            borderPath.lineTo(left + (right - left) / 2, bottom + caretHeight);
+            borderPath.lineTo(left + (right - left - caretWidth) / 2, bottom);
+        }
+
+        // Move to bottom left corner
+        borderPath.lineTo(left + borderRadius, bottom);
+
+        // Bottom left corner
+        borderPath.addArc(new RectF(left, bottom - ovalSize, left + ovalSize, bottom), 90, 90);
+
+        // Left caret
+        if (caretPosition == LikeBoxCountViewCaretPosition.LEFT) {
+            borderPath.lineTo(left, top + (bottom - top + caretWidth) / 2);
+            borderPath.lineTo(left - caretHeight, top + (bottom - top) / 2);
+            borderPath.lineTo(left, top + (bottom - top - caretWidth) / 2);
+        }
+
+        // Move back to the beginning
+        borderPath.lineTo(left, top + borderRadius);
+
+        canvas.drawPath(borderPath, borderPaint);
+    }
+}
diff --git a/facebook/src/com/facebook/internal/LikeButton.java b/facebook/src/com/facebook/internal/LikeButton.java
new file mode 100644
index 000000000..99039f708
--- /dev/null
+++ b/facebook/src/com/facebook/internal/LikeButton.java
@@ -0,0 +1,87 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.content.Context;
+import android.graphics.Typeface;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.widget.Button;
+import com.facebook.android.R;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class LikeButton extends Button {
+
+    private boolean isLiked;
+
+    /**
+     * Create the LikeButton .
+     *
+     * @see android.view.View#View(android.content.Context)
+     */
+    public LikeButton(Context context, boolean isLiked) {
+        super(context);
+
+        this.isLiked = isLiked;
+
+        initialize();
+    }
+
+    public void setLikeState(boolean isLiked) {
+        if (isLiked != this.isLiked) {
+            this.isLiked = isLiked;
+            updateForLikeStatus();
+        }
+    }
+
+    private void initialize() {
+        // apparently there's no method of setting a default style in xml,
+        // so in case the users do not explicitly specify a style, we need
+        // to use sensible defaults.
+        this.setGravity(Gravity.CENTER_VERTICAL);
+        this.setTextColor(getResources().getColor(R.color.com_facebook_likebutton_text_color));
+        this.setTextSize(TypedValue.COMPLEX_UNIT_PX,
+                getResources().getDimension(R.dimen.com_facebook_likebutton_text_size));
+        this.setTypeface(Typeface.DEFAULT_BOLD);
+
+        this.setCompoundDrawablePadding(
+                getResources().getDimensionPixelSize(R.dimen.com_facebook_likebutton_compound_drawable_padding));
+        this.setPadding(
+                getResources().getDimensionPixelSize(R.dimen.com_facebook_likebutton_padding_left),
+                getResources().getDimensionPixelSize(R.dimen.com_facebook_likebutton_padding_top),
+                getResources().getDimensionPixelSize(R.dimen.com_facebook_likebutton_padding_right),
+                getResources().getDimensionPixelSize(R.dimen.com_facebook_likebutton_padding_bottom));
+
+        updateForLikeStatus();
+    }
+
+    private void updateForLikeStatus() {
+        if (isLiked) {
+            this.setBackgroundResource(R.drawable.com_facebook_button_like_selected);
+            this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.com_facebook_button_like_icon_selected, 0, 0, 0);
+            this.setText(getResources().getString(R.string.com_facebook_like_button_liked));
+        } else {
+            this.setBackgroundResource(R.drawable.com_facebook_button_like);
+            this.setCompoundDrawablesWithIntrinsicBounds(R.drawable.com_facebook_button_like_icon, 0, 0, 0);
+            this.setText(getResources().getString(R.string.com_facebook_like_button_not_liked));
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/internal/LikeStatusClient.java b/facebook/src/com/facebook/internal/LikeStatusClient.java
new file mode 100644
index 000000000..98a4113e9
--- /dev/null
+++ b/facebook/src/com/facebook/internal/LikeStatusClient.java
@@ -0,0 +1,48 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+
+import android.content.Context;
+import android.os.Bundle;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+
+/**
+ * This class executes service calls to fetch like-state of objects from the Facebook Application, if available.
+ */
+final class LikeStatusClient extends PlatformServiceClient {
+    private String objectId;
+
+    LikeStatusClient(Context context, String applicationId, String objectId) {
+        super(context, NativeProtocol.MESSAGE_GET_LIKE_STATUS_REQUEST, NativeProtocol.MESSAGE_GET_LIKE_STATUS_REPLY,
+                NativeProtocol.PROTOCOL_VERSION_20141001, applicationId);
+
+        this.objectId = objectId;
+    }
+
+    @Override
+    protected void populateRequestBundle(Bundle data) {
+        // Only thing we need to pass in is the object id.
+        data.putString(NativeProtocol.EXTRA_OBJECT_ID, objectId);
+    }
+}
+
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
index f2a7f46a7..e0e22f70a 100644
--- a/facebook/src/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -25,7 +25,10 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
-import com.facebook.*;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.SessionDefaultAudience;
+import com.facebook.Settings;
 
 import java.util.*;
 
@@ -35,116 +38,15 @@
  * any time.
  */
 public final class NativeProtocol {
-    static final String FACEBOOK_PACKAGE = "com.facebook.katana";
-    static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
-    static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
-    static final String KATANA_SIGNATURE =
-            "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
-                    + "b3009060355040613025553310b30090603550408130243413112301006035504"
-                    + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
-                    + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
-                    + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
-                    + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
-                    + "55040613025553310b30090603550408130243413112301006035504071309506"
-                    + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
-                    + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
-                    + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
-                    + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
-                    + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
-                    + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
-                    + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
-                    + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
-                    + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
-                    + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
-                    + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
-                    + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
-                    + "928a2";
-    private static final String BASIC_INFO = "basic_info";
-    public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
-    public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
-    public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
-
-    static final boolean validateSignature(Context context, String packageName) {
-        String brand = Build.BRAND;
-        int applicationFlags = context.getApplicationInfo().flags;
-        if (brand.startsWith("generic") && (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
-            // We are debugging on an emulator, don't validate package signature.
-            return true;
-        }
-
-        PackageInfo packageInfo = null;
-        try {
-            packageInfo = context.getPackageManager().getPackageInfo(packageName,
-                    PackageManager.GET_SIGNATURES);
-        } catch (PackageManager.NameNotFoundException e) {
-            return false;
-        }
-
-        for (Signature signature : packageInfo.signatures) {
-            if (signature.toCharsString().equals(KATANA_SIGNATURE)) {
-                return true;
-            }
-        }
-
-        return false;
-    }
 
-    static Intent validateKatanaActivityIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.activityInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    static Intent validateKatanaServiceIntent(Context context, Intent intent) {
-        if (intent == null) {
-            return null;
-        }
-
-        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
-        if (resolveInfo == null) {
-            return null;
-        }
-
-        if (!validateSignature(context, resolveInfo.serviceInfo.packageName)) {
-            return null;
-        }
-
-        return intent;
-    }
-
-    public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
-            String e2e) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_PACKAGE, FACEBOOK_PROXY_AUTH_ACTIVITY)
-                .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
-
-        if (!Utility.isNullOrEmpty(permissions)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
-        }
-        if (!Utility.isNullOrEmpty(e2e)) {
-            intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
-        }
-
-        return validateKatanaActivityIntent(context, intent);
-    }
+    public static final int NO_PROTOCOL_AVAILABLE = -1;
 
-    public static Intent createTokenRefreshIntent(Context context) {
-        Intent intent = new Intent()
-                .setClassName(FACEBOOK_PACKAGE, FACEBOOK_TOKEN_REFRESH_ACTIVITY);
+    private static final String FACEBOOK_PROXY_AUTH_ACTIVITY = "com.facebook.katana.ProxyAuth";
+    private static final String FACEBOOK_TOKEN_REFRESH_ACTIVITY = "com.facebook.katana.platform.TokenRefreshService";
 
-        return validateKatanaServiceIntent(context, intent);
-    }
+    public static final String FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY = "scope";
+    public static final String FACEBOOK_PROXY_AUTH_APP_ID_KEY = "client_id";
+    public static final String FACEBOOK_PROXY_AUTH_E2E_KEY = "e2e";
 
     // ---------------------------------------------------------------------------------------------
     // Native Protocol updated 2012-11
@@ -155,18 +57,42 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final int PROTOCOL_VERSION_20121101 = 20121101;
     public static final int PROTOCOL_VERSION_20130502 = 20130502;
     public static final int PROTOCOL_VERSION_20130618 = 20130618;
+    public static final int PROTOCOL_VERSION_20131107 = 20131107;
+    public static final int PROTOCOL_VERSION_20140204 = 20140204;
+    public static final int PROTOCOL_VERSION_20140324 = 20140324;
+    public static final int PROTOCOL_VERSION_20140701 = 20140701;
+    public static final int PROTOCOL_VERSION_20141001 = 20141001;
+    public static final int PROTOCOL_VERSION_20141028 = 20141028;
+    public static final int PROTOCOL_VERSION_20141107 = 20141107; // Bucketed Result Intents
+    public static final int PROTOCOL_VERSION_20141218 = 20141218;
+
     public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
     public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
     public static final String EXTRA_PROTOCOL_CALL_ID = "com.facebook.platform.protocol.CALL_ID";
     public static final String EXTRA_GET_INSTALL_DATA_PACKAGE = "com.facebook.platform.extra.INSTALLDATA_PACKAGE";
 
+    public static final String EXTRA_PROTOCOL_BRIDGE_ARGS =
+            "com.facebook.platform.protocol.BRIDGE_ARGS";
+
+    public static final String EXTRA_PROTOCOL_METHOD_ARGS =
+            "com.facebook.platform.protocol.METHOD_ARGS";
+
+    public static final String EXTRA_PROTOCOL_METHOD_RESULTS =
+            "com.facebook.platform.protocol.RESULT_ARGS";
+
+    public static final String BRIDGE_ARG_APP_NAME_STRING = "app_name";
+    public static final String BRIDGE_ARG_ACTION_ID_STRING = "action_id";
+    public static final String BRIDGE_ARG_ERROR_BUNDLE = "error";
+
     // Messages supported by PlatformService:
-    public static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST = 0x10000;
-    public static final int MESSAGE_GET_ACCESS_TOKEN_REPLY   = 0x10001;
-    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REQUEST = 0x10002;
-    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REPLY   = 0x10003;
-    public static final int MESSAGE_GET_INSTALL_DATA_REQUEST = 0x10004;
-    public static final int MESSAGE_GET_INSTALL_DATA_REPLY   = 0x10005;
+    public static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST    = 0x10000;
+    public static final int MESSAGE_GET_ACCESS_TOKEN_REPLY      = 0x10001;
+    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REQUEST      = 0x10002;
+    static final int MESSAGE_GET_PROTOCOL_VERSIONS_REPLY        = 0x10003;
+    public static final int MESSAGE_GET_INSTALL_DATA_REQUEST    = 0x10004;
+    public static final int MESSAGE_GET_INSTALL_DATA_REPLY      = 0x10005;
+    public static final int MESSAGE_GET_LIKE_STATUS_REQUEST     = 0x10006;
+    public static final int MESSAGE_GET_LIKE_STATUS_REPLY       = 0x10007;
 
     // MESSAGE_ERROR_REPLY data keys:
     // See STATUS_*
@@ -179,26 +105,45 @@ public static Intent createTokenRefreshIntent(Context context) {
     // EXTRA_EXPIRES_SECONDS_SINCE_EPOCH
     // EXTRA_PERMISSIONS
 
+    // MESSAGE_GET_LIKE_STATUS_REQUEST data keys:
+    // EXTRA_APPLICATION_ID
+    // EXTRA_OBJECT_ID
+
+    // MESSAGE_GET_LIKE_STATUS_REPLY data keys:
+    // EXTRA_OBJECT_IS_LIKED
+    // EXTRA_LIKE_COUNT_STRING_WITH_LIKE
+    // EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE
+    // EXTRA_SOCIAL_SENTENCE_WITH_LIKE
+    // EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE
+    // EXTRA_UNLIKE_TOKEN
+
     // MESSAGE_GET_PROTOCOL_VERSIONS_REPLY data keys:
     static final String EXTRA_PROTOCOL_VERSIONS = "com.facebook.platform.extra.PROTOCOL_VERSIONS";
 
     // Values of EXTRA_PROTOCOL_ACTION supported by PlatformActivity:
-    public static final String ACTION_LOGIN_DIALOG = "com.facebook.platform.action.request.LOGIN_DIALOG";
     public static final String ACTION_FEED_DIALOG = "com.facebook.platform.action.request.FEED_DIALOG";
+    public static final String ACTION_MESSAGE_DIALOG = "com.facebook.platform.action.request.MESSAGE_DIALOG";
     public static final String ACTION_OGACTIONPUBLISH_DIALOG =
             "com.facebook.platform.action.request.OGACTIONPUBLISH_DIALOG";
+    public static final String ACTION_OGMESSAGEPUBLISH_DIALOG =
+            "com.facebook.platform.action.request.OGMESSAGEPUBLISH_DIALOG";
+    public static final String ACTION_LIKE_DIALOG =
+            "com.facebook.platform.action.request.LIKE_DIALOG";
 
     // Values of EXTRA_PROTOCOL_ACTION values returned by PlatformActivity:
-    static final String ACTION_LOGIN_DIALOG_REPLY =
-            "com.facebook.platform.action.reply.LOGIN_DIALOG";
     public static final String ACTION_FEED_DIALOG_REPLY =
             "com.facebook.platform.action.reply.FEED_DIALOG";
+    public static final String ACTION_MESSAGE_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.MESSAGE_DIALOG";
     public static final String ACTION_OGACTIONPUBLISH_DIALOG_REPLY =
             "com.facebook.platform.action.reply.OGACTIONPUBLISH_DIALOG";
+    public static final String ACTION_OGMESSAGEPUBLISH_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.OGMESSAGEPUBLISH_DIALOG";
+    public static final String ACTION_LIKE_DIALOG_REPLY =
+            "com.facebook.platform.action.reply.LIKE_DIALOG";
 
     // Extras supported for ACTION_LOGIN_DIALOG:
     public static final String EXTRA_PERMISSIONS = "com.facebook.platform.extra.PERMISSIONS";
-    public static final String EXTRA_WRITE_PRIVACY = "com.facebook.platform.extra.WRITE_PRIVACY";
     public static final String EXTRA_APPLICATION_ID = "com.facebook.platform.extra.APPLICATION_ID";
     public static final String EXTRA_APPLICATION_NAME = "com.facebook.platform.extra.APPLICATION_NAME";
 
@@ -208,6 +153,11 @@ public static Intent createTokenRefreshIntent(Context context) {
             "com.facebook.platform.extra.EXPIRES_SECONDS_SINCE_EPOCH";
     // EXTRA_PERMISSIONS
 
+    public static final String RESULT_ARGS_ACCESS_TOKEN = "access_token";
+    public static final String RESULT_ARGS_EXPIRES_SECONDS_SINCE_EPOCH =
+            "expires_seconds_since_epoch";
+    public static final String RESULT_ARGS_PERMISSIONS = "permissions";
+
     // Extras supported for ACTION_FEED_DIALOG:
     public static final String EXTRA_PLACE_TAG = "com.facebook.platform.extra.PLACE";
     public static final String EXTRA_FRIEND_TAGS = "com.facebook.platform.extra.FRIENDS";
@@ -218,6 +168,19 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final String EXTRA_DESCRIPTION = "com.facebook.platform.extra.DESCRIPTION";
     public static final String EXTRA_REF = "com.facebook.platform.extra.REF";
     public static final String EXTRA_DATA_FAILURES_FATAL = "com.facebook.platform.extra.DATA_FAILURES_FATAL";
+    public static final String EXTRA_PHOTOS = "com.facebook.platform.extra.PHOTOS";
+
+    public static final String METHOD_ARGS_PLACE_TAG = "PLACE";
+    public static final String METHOD_ARGS_FRIEND_TAGS = "FRIENDS";
+    public static final String METHOD_ARGS_LINK = "LINK";
+    public static final String METHOD_ARGS_IMAGE = "IMAGE";
+    public static final String METHOD_ARGS_TITLE = "TITLE";
+    public static final String METHOD_ARGS_SUBTITLE = "SUBTITLE";
+    public static final String METHOD_ARGS_DESCRIPTION = "DESCRIPTION";
+    public static final String METHOD_ARGS_REF = "REF";
+    public static final String METHOD_ARGS_DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
+    public static final String METHOD_ARGS_PHOTOS = "PHOTOS";
+    public static final String METHOD_ARGS_VIDEO = "VIDEO";
 
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String EXTRA_ACTION = "com.facebook.platform.extra.ACTION";
@@ -225,6 +188,21 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final String EXTRA_PREVIEW_PROPERTY_NAME =
             "com.facebook.platform.extra.PREVIEW_PROPERTY_NAME";
 
+    public static final String METHOD_ARGS_ACTION = "ACTION";
+    public static final String METHOD_ARGS_ACTION_TYPE = "ACTION_TYPE";
+    public static final String METHOD_ARGS_PREVIEW_PROPERTY_NAME = "PREVIEW_PROPERTY_NAME";
+
+    // Extras supported for MESSAGE_GET_LIKE_STATUS_REQUEST:
+    public static final String EXTRA_OBJECT_ID = "com.facebook.platform.extra.OBJECT_ID";
+
+    // Extras supported in MESSAGE_GET_LIKE_STATUS_REPLY:
+    public static final String EXTRA_OBJECT_IS_LIKED = "com.facebook.platform.extra.OBJECT_IS_LIKED";
+    public static final String EXTRA_LIKE_COUNT_STRING_WITH_LIKE = "com.facebook.platform.extra.LIKE_COUNT_STRING_WITH_LIKE";
+    public static final String EXTRA_LIKE_COUNT_STRING_WITHOUT_LIKE = "com.facebook.platform.extra.LIKE_COUNT_STRING_WITHOUT_LIKE";
+    public static final String EXTRA_SOCIAL_SENTENCE_WITH_LIKE = "com.facebook.platform.extra.SOCIAL_SENTENCE_WITH_LIKE";
+    public static final String EXTRA_SOCIAL_SENTENCE_WITHOUT_LIKE = "com.facebook.platform.extra.SOCIAL_SENTENCE_WITHOUT_LIKE";
+    public static final String EXTRA_UNLIKE_TOKEN = "com.facebook.platform.extra.UNLIKE_TOKEN";
+
     // OG objects will have this key to set to true if they should be created as part of OG Action publish
     public static final String OPEN_GRAPH_CREATE_OBJECT_KEY = "fbsdk:create_object";
     // Determines whether an image is user generated
@@ -232,6 +210,9 @@ public static Intent createTokenRefreshIntent(Context context) {
     // url key for images
     public static final String IMAGE_URL_KEY = "url";
 
+    // Method args supported for ACTION_LIKE_DIALOG
+    public static final String METHOD_ARGS_OBJECT_ID = "object_id";
+
     // Keys for status data in MESSAGE_ERROR_REPLY from PlatformService and for error
     // extras returned by PlatformActivity's setResult() in case of errors:
     public static final String STATUS_ERROR_TYPE = "com.facebook.platform.status.ERROR_TYPE";
@@ -241,6 +222,12 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final String STATUS_ERROR_SUBCODE = "com.facebook.platform.status.ERROR_SUBCODE";
     public static final String STATUS_ERROR_JSON = "com.facebook.platform.status.ERROR_JSON";
 
+    public static final String BRIDGE_ARG_ERROR_TYPE = "error_type";
+    public static final String BRIDGE_ARG_ERROR_DESCRIPTION = "error_description";
+    public static final String BRIDGE_ARG_ERROR_CODE = "error_code";
+    public static final String BRIDGE_ARG_ERROR_SUBCODE = "error_subcode";
+    public static final String BRIDGE_ARG_ERROR_JSON = "error_json";
+
     // Expected values for ERROR_KEY_TYPE.  Clients should tolerate other values:
     public static final String ERROR_UNKNOWN_ERROR = "UnknownError";
     public static final String ERROR_PROTOCOL_ERROR = "ProtocolError";
@@ -250,145 +237,503 @@ public static Intent createTokenRefreshIntent(Context context) {
     public static final String ERROR_PERMISSION_DENIED = "PermissionDenied";
     public static final String ERROR_SERVICE_DISABLED = "ServiceDisabled";
 
-    public static final String AUDIENCE_ME = "SELF";
-    public static final String AUDIENCE_FRIENDS = "ALL_FRIENDS";
-    public static final String AUDIENCE_EVERYONE = "EVERYONE";
+    public static final String AUDIENCE_ME = "only_me";
+    public static final String AUDIENCE_FRIENDS = "friends";
+    public static final String AUDIENCE_EVERYONE = "everyone";
 
     // Request codes for different categories of native protocol calls.
     public static final int DIALOG_REQUEST_CODE = 0xfacf;
 
-    // URIs for PlatformProvider
-    public static final String CONTENT_SCHEME = "content://";
-    public static final String PLATFORM_PROVIDER = FACEBOOK_PACKAGE + ".provider.PlatformProvider";
-    public static final Uri PLATFORM_PROVIDER_VERSIONS_URI =
-            Uri.parse(CONTENT_SCHEME + PLATFORM_PROVIDER + "/versions");
+    private static final String CONTENT_SCHEME = "content://";
+    private static final String PLATFORM_PROVIDER_VERSIONS = ".provider.PlatformProvider/versions";
 
     // Columns returned by PlatformProvider
-    public static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
+    private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
+
+    private static abstract class NativeAppInfo {
+        abstract protected String getPackage();
+
+        private static final String FBI_HASH = "a4b7452e2ed8f5f191058ca7bbfd26b0d3214bfc";
+        private static final String FBL_HASH = "5e8f16062ea3cd2c4a0d547876baa6f38cabf625";
+        private static final String FBR_HASH = "8a3c4b262d721acd49a4bf97d5213199c86fa2b9";
+
+        private static final HashSet<String> validAppSignatureHashes = buildAppSignatureHashes();
+
+        private static HashSet<String> buildAppSignatureHashes() {
+            HashSet<String> set = new HashSet<String>();
+            set.add(FBR_HASH);
+            set.add(FBI_HASH);
+            set.add(FBL_HASH);
+            return set;
+        }
+
+        public boolean validateSignature(Context context, String packageName) {
+            String brand = Build.BRAND;
+            int applicationFlags = context.getApplicationInfo().flags;
+            if (brand.startsWith("generic") && (applicationFlags & ApplicationInfo.FLAG_DEBUGGABLE) != 0) {
+                // We are debugging on an emulator, don't validate package signature.
+                return true;
+            }
+
+            PackageInfo packageInfo = null;
+            try {
+                packageInfo = context.getPackageManager().getPackageInfo(packageName,
+                        PackageManager.GET_SIGNATURES);
+            } catch (PackageManager.NameNotFoundException e) {
+                return false;
+            }
+
+            for (Signature signature : packageInfo.signatures) {
+                String hashedSignature = Utility.sha1hash(signature.toByteArray());
+                if (validAppSignatureHashes.contains(hashedSignature)) {
+                    return true;
+                }
+            }
+
+            return false;
+        }
+    }
+
+    private static class KatanaAppInfo extends NativeAppInfo {
+        static final String KATANA_PACKAGE = "com.facebook.katana";
+
+        @Override
+        protected String getPackage() {
+            return KATANA_PACKAGE;
+        }
+    }
+
+    private static class MessengerAppInfo extends NativeAppInfo {
+        static final String MESSENGER_PACKAGE = "com.facebook.orca";
+
+        @Override
+        protected String getPackage() {
+            return MESSENGER_PACKAGE;
+        }
+    }
+
+    private static class WakizashiAppInfo extends NativeAppInfo {
+        static final String WAKIZASHI_PACKAGE = "com.facebook.wakizashi";
+
+        @Override
+        protected String getPackage() {
+            return WAKIZASHI_PACKAGE;
+        }
+    }
+
+    private static final NativeAppInfo FACEBOOK_APP_INFO = new KatanaAppInfo();
+    private static List<NativeAppInfo> facebookAppInfoList = buildFacebookAppList();
+    private static Map<String, List<NativeAppInfo>> actionToAppInfoMap = buildActionToAppInfoMap();
+
+    private static List<NativeAppInfo> buildFacebookAppList() {
+        List<NativeAppInfo> list = new ArrayList<NativeAppInfo>();
+
+        // Katana needs to be the first thing in the list since it will get selected as the default FACEBOOK_APP_INFO
+        list.add(FACEBOOK_APP_INFO);
+        list.add(new WakizashiAppInfo());
+
+        return list;
+    }
+
+    private static Map<String, List<NativeAppInfo>> buildActionToAppInfoMap() {
+        Map<String, List<NativeAppInfo>> map = new HashMap<String, List<NativeAppInfo>>();
+
+        ArrayList<NativeAppInfo> messengerAppInfoList = new ArrayList<NativeAppInfo>();
+        messengerAppInfoList.add(new MessengerAppInfo());
+
+        // Add individual actions and the list they should try
+        map.put(ACTION_OGACTIONPUBLISH_DIALOG, facebookAppInfoList);
+        map.put(ACTION_FEED_DIALOG, facebookAppInfoList);
+        map.put(ACTION_LIKE_DIALOG, facebookAppInfoList);
+        map.put(ACTION_MESSAGE_DIALOG, messengerAppInfoList);
+        map.put(ACTION_OGMESSAGEPUBLISH_DIALOG, messengerAppInfoList);
+
+        return map;
+    }
+
+    static Intent validateActivityIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveActivity(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.activityInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    static Intent validateServiceIntent(Context context, Intent intent, NativeAppInfo appInfo) {
+        if (intent == null) {
+            return null;
+        }
+
+        ResolveInfo resolveInfo = context.getPackageManager().resolveService(intent, 0);
+        if (resolveInfo == null) {
+            return null;
+        }
+
+        if (!appInfo.validateSignature(context, resolveInfo.serviceInfo.packageName)) {
+            return null;
+        }
+
+        return intent;
+    }
+
+    public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
+            String e2e, boolean isRerequest, SessionDefaultAudience defaultAudience) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent()
+                    .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
+                    .putExtra(FACEBOOK_PROXY_AUTH_APP_ID_KEY, applicationId);
+
+            if (!Utility.isNullOrEmpty(permissions)) {
+                intent.putExtra(FACEBOOK_PROXY_AUTH_PERMISSIONS_KEY, TextUtils.join(",", permissions));
+            }
+            if (!Utility.isNullOrEmpty(e2e)) {
+                intent.putExtra(FACEBOOK_PROXY_AUTH_E2E_KEY, e2e);
+            }
+
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN);
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_RETURN_SCOPES, ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, defaultAudience.getNativeProtocolAudience());
+
+            if (!Settings.getPlatformCompatibilityEnabled()) {
+                // Override the API Version for Auth
+                intent.putExtra(ServerProtocol.DIALOG_PARAM_LEGACY_OVERRIDE, ServerProtocol.GRAPH_API_VERSION);
+
+                // Only set the rerequest auth type for non legacy requests
+                if (isRerequest) {
+                    intent.putExtra(ServerProtocol.DIALOG_PARAM_AUTH_TYPE, ServerProtocol.DIALOG_REREQUEST_AUTH_TYPE);
+                }
+            }
+
+            intent = validateActivityIntent(context, intent, appInfo);
+
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
+    }
+
+    public static Intent createTokenRefreshIntent(Context context) {
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent()
+                    .setClassName(appInfo.getPackage(), FACEBOOK_TOKEN_REFRESH_ACTIVITY);
+
+            intent = validateServiceIntent(context, intent, appInfo);
+
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
+    }
+
+    public static final int getLatestKnownVersion() {
+        return KNOWN_PROTOCOL_VERSIONS.get(0);
+    }
 
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
-            Arrays.asList(PROTOCOL_VERSION_20130618,
+            Arrays.asList(
+                    PROTOCOL_VERSION_20141218,
+                    PROTOCOL_VERSION_20141107,
+                    PROTOCOL_VERSION_20141028,
+                    PROTOCOL_VERSION_20141001,
+                    PROTOCOL_VERSION_20140701,
+                    PROTOCOL_VERSION_20140324,
+                    PROTOCOL_VERSION_20140204,
+                    PROTOCOL_VERSION_20131107,
+                    PROTOCOL_VERSION_20130618,
                     PROTOCOL_VERSION_20130502,
-                    PROTOCOL_VERSION_20121101);
-
-    public static Intent createPlatformActivityIntent(Context context, String action, int version, Bundle extras) {
-        Intent intent = new Intent()
-                .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
-                .setPackage(FACEBOOK_PACKAGE)
-                .addCategory(Intent.CATEGORY_DEFAULT)
-                .putExtras(extras)
-                .putExtra(EXTRA_PROTOCOL_VERSION, version)
-                .putExtra(EXTRA_PROTOCOL_ACTION, action);
-        return validateKatanaActivityIntent(context, intent);
+                    PROTOCOL_VERSION_20121101
+            );
+
+    private static Intent findActivityIntent(Context context, String activityAction, String internalAction) {
+        List<NativeAppInfo> list = actionToAppInfoMap.get(internalAction);
+        if (list == null) {
+            return null;
+        }
+
+        Intent intent = null;
+        for (NativeAppInfo appInfo : list) {
+            intent = new Intent()
+                    .setAction(activityAction)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateActivityIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+
+        return intent;
+    }
+
+    public static boolean isVersionCompatibleWithBucketedIntent(int version) {
+        return KNOWN_PROTOCOL_VERSIONS.contains(version) && version >= PROTOCOL_VERSION_20140701;
+    }
+
+    public static Intent createPlatformActivityIntent(
+            Context context,
+            String callId,
+            String action,
+            int version,
+            String applicationName,
+            Bundle extras) {
+        Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
+        if (intent == null) {
+            return null;
+        }
+
+        String applicationId = Utility.getMetadataApplicationId(context);
+
+        intent.putExtra(EXTRA_PROTOCOL_VERSION, version)
+                .putExtra(EXTRA_PROTOCOL_ACTION, action)
+                .putExtra(EXTRA_APPLICATION_ID, applicationId);
+
+        if (isVersionCompatibleWithBucketedIntent(version)) {
+            // This is a bucketed intent
+            Bundle bridgeArguments = new Bundle();
+            bridgeArguments.putString(BRIDGE_ARG_ACTION_ID_STRING, callId);
+            bridgeArguments.putString(BRIDGE_ARG_APP_NAME_STRING, applicationName);
+            intent.putExtra(EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArguments);
+
+            Bundle methodArguments = (extras == null) ? new Bundle() : extras;
+            intent.putExtra(EXTRA_PROTOCOL_METHOD_ARGS, methodArguments);
+        } else {
+            // This is the older flat intent
+            intent.putExtra(EXTRA_PROTOCOL_CALL_ID, callId);
+            intent.putExtra(EXTRA_APPLICATION_NAME, applicationName);
+            intent.putExtras(extras);
+        }
+
+        return intent;
     }
 
     public static Intent createPlatformServiceIntent(Context context) {
-        Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
-                .setPackage(FACEBOOK_PACKAGE)
-                .addCategory(Intent.CATEGORY_DEFAULT);
-        return validateKatanaServiceIntent(context, intent);
+        for (NativeAppInfo appInfo : facebookAppInfoList) {
+            Intent intent = new Intent(INTENT_ACTION_PLATFORM_SERVICE)
+                    .setPackage(appInfo.getPackage())
+                    .addCategory(Intent.CATEGORY_DEFAULT);
+            intent = validateServiceIntent(context, intent, appInfo);
+            if (intent != null) {
+                return intent;
+            }
+        }
+        return null;
+    }
+
+    public static int getProtocolVersionFromIntent(Intent intent) {
+        return intent.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
+    }
+
+    public static UUID getCallIdFromIntent(Intent intent) {
+        if (intent == null) {
+            return null;
+        }
+        int version = getProtocolVersionFromIntent(intent);
+        String callIdString = null;
+        if (isVersionCompatibleWithBucketedIntent(version)) {
+            Bundle bridgeArgs = intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
+            if (bridgeArgs != null) {
+                callIdString = bridgeArgs.getString(BRIDGE_ARG_ACTION_ID_STRING);
+            }
+        } else {
+            callIdString = intent.getStringExtra(EXTRA_PROTOCOL_CALL_ID);
+        }
+
+        UUID callId = null;
+        if (callIdString != null) {
+            try {
+                callId = UUID.fromString(callIdString);
+            } catch (IllegalArgumentException exception) {
+            }
+        }
+        return callId;
     }
 
-    public static Intent createLoginDialog20121101Intent(Context context, String applicationId, ArrayList<String> permissions,
-            String audience) {
-        Intent intent = new Intent()
-                    .setAction(INTENT_ACTION_PLATFORM_ACTIVITY)
-                    .setPackage(FACEBOOK_PACKAGE)
-                    .addCategory(Intent.CATEGORY_DEFAULT)
-                    .putExtra(EXTRA_PROTOCOL_VERSION, PROTOCOL_VERSION_20121101)
-                    .putExtra(EXTRA_PROTOCOL_ACTION, ACTION_LOGIN_DIALOG)
-                    .putExtra(EXTRA_APPLICATION_ID, applicationId)
-                    .putStringArrayListExtra(EXTRA_PERMISSIONS, ensureDefaultPermissions(permissions))
-                    .putExtra(EXTRA_PROTOCOL_CALL_ID, generateCallId())
-                    .putExtra(EXTRA_WRITE_PRIVACY, ensureDefaultAudience(audience));
-        return validateKatanaActivityIntent(context, intent);
+    public static Bundle getBridgeArgumentsFromIntent(Intent intent) {
+        int version = getProtocolVersionFromIntent(intent);
+        if (!isVersionCompatibleWithBucketedIntent(version)) {
+            return null;
+        }
+
+        return intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
+    }
+
+    public static Bundle getSuccessResultsFromIntent(Intent resultIntent) {
+        int version = getProtocolVersionFromIntent(resultIntent);
+        Bundle extras = resultIntent.getExtras();
+        if (!isVersionCompatibleWithBucketedIntent(version) || extras == null) {
+            return extras;
+        }
+
+        return extras.getBundle(EXTRA_PROTOCOL_METHOD_RESULTS);
     }
 
     public static boolean isErrorResult(Intent resultIntent) {
-        return resultIntent.hasExtra(STATUS_ERROR_TYPE);
+        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
+        if (bridgeArgs != null) {
+            return bridgeArgs.containsKey(BRIDGE_ARG_ERROR_BUNDLE);
+        } else {
+            return resultIntent.hasExtra(STATUS_ERROR_TYPE);
+        }
     }
 
-    public static Exception getErrorFromResult(Intent resultIntent) {
+    public static Bundle getErrorDataFromResultIntent(Intent resultIntent) {
         if (!isErrorResult(resultIntent)) {
             return null;
         }
 
-        String type = resultIntent.getStringExtra(STATUS_ERROR_TYPE);
-        String description = resultIntent.getStringExtra(STATUS_ERROR_DESCRIPTION);
+        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
+        if (bridgeArgs != null) {
+            return bridgeArgs.getBundle(BRIDGE_ARG_ERROR_BUNDLE);
+        }
+
+        return resultIntent.getExtras();
+    }
+
+    public static Exception getExceptionFromErrorData(Bundle errorData) {
+        if (errorData == null) {
+            return null;
+        }
+
+        String type = errorData.getString(BRIDGE_ARG_ERROR_TYPE);
+        if (type == null) {
+            type = errorData.getString(STATUS_ERROR_TYPE);
+        }
+
+        String description = errorData.getString(BRIDGE_ARG_ERROR_DESCRIPTION);
+        if (description == null) {
+            description = errorData.getString(STATUS_ERROR_DESCRIPTION);
+        }
 
-        if (type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
+        if (type != null && type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
             return new FacebookOperationCanceledException(description);
         }
+
         /* TODO parse error values and create appropriate exception class */
         return new FacebookException(description);
     }
 
-    private static String generateCallId() {
-        return UUID.randomUUID().toString();
+    public static int getLatestAvailableProtocolVersionForService(Context context, final int minimumVersion) {
+        // Services are currently always against the Facebook App
+        return getLatestAvailableProtocolVersionForAppInfoList(context, facebookAppInfoList, new int[] {minimumVersion});
     }
 
-    private static String ensureDefaultAudience(String audience) {
-        if (Utility.isNullOrEmpty(audience)) {
-            return AUDIENCE_ME;
-        } else {
-            return audience;
-        }
+    public static int getLatestAvailableProtocolVersionForAction(Context context, String action, int[] versionSpec) {
+        List<NativeAppInfo> appInfoList = actionToAppInfoMap.get(action);
+        return getLatestAvailableProtocolVersionForAppInfoList(context, appInfoList, versionSpec);
     }
 
-    private static ArrayList<String> ensureDefaultPermissions(ArrayList<String> permissions) {
-        ArrayList<String> updated;
+    private static int getLatestAvailableProtocolVersionForAppInfoList(Context context, List<NativeAppInfo> appInfoList,
+            int[] versionSpec) {
+        if (appInfoList == null) {
+            return NO_PROTOCOL_AVAILABLE;
+        }
 
-        // Return if we are doing publish, or if basic_info is already included
-        if (Utility.isNullOrEmpty(permissions)) {
-            updated = new ArrayList<String>();
-        } else {
-            for (String permission : permissions) {
-                if (Session.isPublishPermission(permission) || BASIC_INFO.equals(permission)) {
-                    return permissions;
-                }
+        // Could potentially cache the NativeAppInfo to latestProtocolVersion
+        for (NativeAppInfo appInfo : appInfoList) {
+            int protocolVersion = getLatestAvailableProtocolVersionForAppInfo(context, appInfo, versionSpec);
+            if (protocolVersion != NO_PROTOCOL_AVAILABLE) {
+                return protocolVersion;
             }
-            updated = new ArrayList<String>(permissions);
         }
 
-        updated.add(BASIC_INFO);
-        return updated;
+        return NO_PROTOCOL_AVAILABLE;
     }
 
-    public static boolean isServiceDisabledResult20121101(Intent data) {
-        int protocolVersion = data.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
-        String errorType = data.getStringExtra(STATUS_ERROR_TYPE);
-
-        return ((PROTOCOL_VERSION_20121101 == protocolVersion) && ERROR_SERVICE_DISABLED.equals(errorType));
+    private static int getLatestAvailableProtocolVersionForAppInfo(
+            Context context,
+            NativeAppInfo appInfo,
+            int[] versionSpec) {
+        TreeSet<Integer> fbAppVersions = getAllAvailableProtocolVersionsForAppInfo(context, appInfo);
+        return computeLatestAvailableVersionFromVersionSpec(fbAppVersions, getLatestKnownVersion(), versionSpec);
     }
 
-    public static final int NO_PROTOCOL_AVAILABLE = -1;
+    private static TreeSet<Integer> getAllAvailableProtocolVersionsForAppInfo(
+            Context context,
+            NativeAppInfo appInfo) {
+        TreeSet<Integer> allAvailableVersions = new TreeSet<Integer>();
 
-    public static int getLatestAvailableProtocolVersion(Context context, final int minimumVersion) {
         ContentResolver contentResolver = context.getContentResolver();
 
         String [] projection = new String[]{ PLATFORM_PROVIDER_VERSION_COLUMN };
-        Cursor c = contentResolver.query(PLATFORM_PROVIDER_VERSIONS_URI, projection, null, null, null);
-        if (c == null) {
-            return NO_PROTOCOL_AVAILABLE;
+        Uri uri = buildPlatformProviderVersionURI(appInfo);
+        Cursor c = null;
+        try {
+            c = contentResolver.query(uri, projection, null, null, null);
+            if (c != null) {
+                while (c.moveToNext()) {
+                    int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
+                    allAvailableVersions.add(version);
+                }
+            }
+        } finally {
+            if (c != null) {
+                c.close();
+            }
         }
 
-        Set<Integer> versions = new HashSet<Integer>();
-        while (c.moveToNext()) {
-            int version = c.getInt(c.getColumnIndex(PLATFORM_PROVIDER_VERSION_COLUMN));
-            versions.add(version);
-        }
+        return allAvailableVersions;
+    }
+
+    /**
+     * This is public to allow for testing. Developers are discouraged from using this method, since it may change without
+     * notice.
+     */
+    public static int computeLatestAvailableVersionFromVersionSpec(
+            TreeSet<Integer> allAvailableFacebookAppVersions,
+            int latestSdkVersion,
+            int[] versionSpec) {
+        // Remember that these ranges are sorted in ascending order and can be unbounded. So we are starting
+        // from the end of the version-spec array and working backwards, to try get the newest possible version
+        int versionSpecIndex = versionSpec.length - 1;
+        Iterator<Integer> fbAppVersionsIterator = allAvailableFacebookAppVersions.descendingIterator();
+        int latestFacebookAppVersion = -1;
+
+        while (fbAppVersionsIterator.hasNext()) {
+            int fbAppVersion = fbAppVersionsIterator.next();
+
+            // We're holding on to the greatest fb-app version available.
+            latestFacebookAppVersion = Math.max(latestFacebookAppVersion, fbAppVersion);
+
+            // If there is a newer version in the versionSpec, throw it away, we don't have it
+            while (versionSpecIndex >= 0 && versionSpec[versionSpecIndex] > fbAppVersion) {
+                versionSpecIndex--;
+            }
 
-        for (Integer knownVersion : KNOWN_PROTOCOL_VERSIONS) {
-            if (knownVersion < minimumVersion) {
+            if (versionSpecIndex < 0) {
+                // There was no fb app version that fell into any range in the versionSpec - or - the
+                // versionSpec was empty, which means that this action is not supported.
                 return NO_PROTOCOL_AVAILABLE;
             }
 
-            if (versions.contains(knownVersion)) {
-                return knownVersion;
+            // If we are here, we know we are within a range specified in the versionSpec. We should see if it is
+            // a disabled or enabled range.
+
+            if (versionSpec[versionSpecIndex] == fbAppVersion) {
+                // if the versionSpecIndex is even, it is enabled; if odd, disabled
+                return (
+                        versionSpecIndex % 2 == 0 ?
+                                Math.min(latestFacebookAppVersion, latestSdkVersion) :
+                                NO_PROTOCOL_AVAILABLE
+                );
             }
         }
 
         return NO_PROTOCOL_AVAILABLE;
     }
+
+    private static Uri buildPlatformProviderVersionURI(NativeAppInfo appInfo) {
+        return Uri.parse(CONTENT_SCHEME + appInfo.getPackage() + PLATFORM_PROVIDER_VERSIONS);
+    }
 }
diff --git a/facebook/src/com/facebook/internal/PendingCallStore.java b/facebook/src/com/facebook/internal/PendingCallStore.java
new file mode 100644
index 000000000..dca839a5c
--- /dev/null
+++ b/facebook/src/com/facebook/internal/PendingCallStore.java
@@ -0,0 +1,85 @@
+package com.facebook.internal;
+
+import android.content.Context;
+import android.os.Bundle;
+import com.facebook.widget.FacebookDialog;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
+ * any of the classes in this package is unsupported, and they may be modified or removed without warning at
+ * any time.
+ */
+public class PendingCallStore {
+    private static final String CALL_ID_ARRAY_KEY = "com.facebook.internal.PendingCallStore.callIdArrayKey";
+    private static final String CALL_KEY_PREFIX = "com.facebook.internal.PendingCallStore.";
+
+    private static PendingCallStore mInstance;
+
+    private Map<String, FacebookDialog.PendingCall> pendingCallMap = new HashMap<String, FacebookDialog.PendingCall>();
+
+    public static PendingCallStore getInstance() {
+        if (mInstance == null) {
+            createInstance();
+        }
+
+        return mInstance;
+    }
+
+    private synchronized static void createInstance() {
+        if (mInstance == null) {
+            mInstance = new PendingCallStore();
+        }
+    }
+
+    public void trackPendingCall(FacebookDialog.PendingCall pendingCall) {
+        if (pendingCall != null) {
+            pendingCallMap.put(pendingCall.getCallId().toString(), pendingCall);
+        }
+    }
+
+    public void stopTrackingPendingCall(UUID callId) {
+        if (callId != null) {
+            pendingCallMap.remove(callId.toString());
+        }
+    }
+
+    public FacebookDialog.PendingCall getPendingCallById(UUID callId) {
+        if (callId == null) {
+            return null;
+        }
+        return pendingCallMap.get(callId.toString());
+    }
+
+    public void saveInstanceState(Bundle outState) {
+        ArrayList<String> callIds = new ArrayList<String>(pendingCallMap.keySet());
+        outState.putStringArrayList(CALL_ID_ARRAY_KEY, callIds);
+
+        for(FacebookDialog.PendingCall pendingCall : pendingCallMap.values()) {
+            String stateKey = getSavedStateKeyForPendingCallId(pendingCall.getCallId().toString());
+            outState.putParcelable(stateKey, pendingCall);
+        }
+    }
+
+    public void restoreFromSavedInstanceState(Bundle savedInstanceState) {
+        ArrayList<String> callIds = savedInstanceState.getStringArrayList(CALL_ID_ARRAY_KEY);
+        if (callIds != null) {
+            for (String callId : callIds) {
+                String stateKey = getSavedStateKeyForPendingCallId(callId);
+                FacebookDialog.PendingCall pendingCall = savedInstanceState.getParcelable(stateKey);
+
+                if (pendingCall != null) {
+                    pendingCallMap.put(pendingCall.getCallId().toString(), pendingCall);
+                }
+            }
+        }
+    }
+
+    private String getSavedStateKeyForPendingCallId(String pendingCallId) {
+        return CALL_KEY_PREFIX + pendingCallId;
+    }
+}
diff --git a/facebook/src/com/facebook/internal/PlatformServiceClient.java b/facebook/src/com/facebook/internal/PlatformServiceClient.java
index fc72d6e26..df75fc5e5 100644
--- a/facebook/src/com/facebook/internal/PlatformServiceClient.java
+++ b/facebook/src/com/facebook/internal/PlatformServiceClient.java
@@ -70,7 +70,7 @@ public boolean start() {
         }
 
         // Make sure that the service can handle the requested protocol version
-        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersion(context, protocolVersion);
+        int availableVersion = NativeProtocol.getLatestAvailableProtocolVersionForService(context, protocolVersion);
         if (availableVersion == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
             return false;
         }
@@ -96,7 +96,11 @@ public void onServiceConnected(ComponentName name, IBinder service) {
 
     public void onServiceDisconnected(ComponentName name) {
         sender = null;
-        context.unbindService(this);
+        try {
+            context.unbindService(this);
+        } catch (IllegalArgumentException ex) {
+            // Do nothing, the connection was already unbound
+        }
         callback(null);
     }
 
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index 7dd2a99b6..7583f015d 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -16,10 +16,16 @@
 
 package com.facebook.internal;
 
+import android.content.Context;
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.LoggingBehavior;
 import com.facebook.Settings;
-import com.facebook.internal.Utility;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.util.Collection;
+import java.util.EnumSet;
 
 /**
  * com.facebook.internal is solely for the use of other packages within the Facebook SDK for Android. Use of
@@ -27,21 +33,40 @@
  * any time.
  */
 public final class ServerProtocol {
+    private static final String TAG = ServerProtocol.class.getName();
+
     private static final String DIALOG_AUTHORITY_FORMAT = "m.%s";
     public static final String DIALOG_PATH = "dialog/";
-    public static final String DIALOG_PARAM_SCOPE = "scope";
-    public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
-    public static final String DIALOG_PARAM_DISPLAY = "display";
-    public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri";
-    public static final String DIALOG_PARAM_TYPE = "type";
     public static final String DIALOG_PARAM_ACCESS_TOKEN = "access_token";
     public static final String DIALOG_PARAM_APP_ID = "app_id";
+    public static final String DIALOG_PARAM_AUTH_TYPE = "auth_type";
+    public static final String DIALOG_PARAM_CLIENT_ID = "client_id";
+    public static final String DIALOG_PARAM_DISPLAY = "display";
     public static final String DIALOG_PARAM_E2E = "e2e";
+    public static final String DIALOG_PARAM_LEGACY_OVERRIDE = "legacy_override";
+    public static final String DIALOG_PARAM_REDIRECT_URI = "redirect_uri";
+    public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
+    public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
+    public static final String DIALOG_PARAM_SCOPE = "scope";
+    public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
+    public static final String DIALOG_REREQUEST_AUTH_TYPE = "rerequest";
+    public static final String DIALOG_RESPONSE_TYPE_TOKEN = "token";
+    public static final String DIALOG_RETURN_SCOPES_TRUE = "true";
+
+    public static final String FALLBACK_DIALOG_PARAM_APP_ID = "app_id";
+    public static final String FALLBACK_DIALOG_PARAM_BRIDGE_ARGS = "bridge_args";
+    public static final String FALLBACK_DIALOG_PARAM_KEY_HASH = "android_key_hash";
+    public static final String FALLBACK_DIALOG_PARAM_METHOD_ARGS = "method_args";
+    public static final String FALLBACK_DIALOG_PARAM_METHOD_RESULTS = "method_results";
+    public static final String FALLBACK_DIALOG_PARAM_VERSION = "version";
+    public static final String FALLBACK_DIALOG_DISPLAY_VALUE_TOUCH = "touch";
 
     // URL components
+    private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    private static final String REST_URL_FORMAT = "https://api.%s/method";
-    public static final String BATCHED_REST_METHOD_URL_BASE = "method/";
+    public static final String GRAPH_API_VERSION = "v2.2";
+
+    private static final String LEGACY_API_VERSION = "v1.0";
 
     public static final Collection<String> errorsProxyAuthDisabled =
             Utility.unmodifiableCollection("service_disabled", "AndroidAuthKillSwitchException");
@@ -56,7 +81,58 @@ public static final String getGraphUrlBase() {
         return String.format(GRAPH_URL_FORMAT, Settings.getFacebookDomain());
     }
 
-    public static final String getRestUrlBase() {
-        return String.format(REST_URL_FORMAT, Settings.getFacebookDomain());
+    public static final String getGraphVideoUrlBase() {
+        return String.format(GRAPH_VIDEO_URL_FORMAT, Settings.getFacebookDomain());
+    }
+
+    public static final String getAPIVersion() {
+        if (Settings.getPlatformCompatibilityEnabled()) {
+            return LEGACY_API_VERSION;
+        }
+        return GRAPH_API_VERSION;
+    }
+
+    public static Bundle getQueryParamsForPlatformActivityIntentWebFallback(
+            Context context,
+            String callId,
+            int version,
+            String applicationName,
+            Bundle methodArgs) {
+
+        String keyHash = Settings.getApplicationSignature(context);
+        if (Utility.isNullOrEmpty(keyHash)) {
+            return null;
+        }
+
+        Bundle webParams = new Bundle();
+
+        webParams.putString(FALLBACK_DIALOG_PARAM_KEY_HASH, keyHash);
+        webParams.putString(FALLBACK_DIALOG_PARAM_APP_ID, Settings.getApplicationId());
+        webParams.putInt(FALLBACK_DIALOG_PARAM_VERSION, version);
+        webParams.putString(DIALOG_PARAM_DISPLAY, FALLBACK_DIALOG_DISPLAY_VALUE_TOUCH);
+
+        Bundle bridgeArguments = new Bundle();
+        bridgeArguments.putString(NativeProtocol.BRIDGE_ARG_ACTION_ID_STRING, callId);
+        bridgeArguments.putString(NativeProtocol.BRIDGE_ARG_APP_NAME_STRING, applicationName);
+
+        methodArgs = (methodArgs == null) ? new Bundle() : methodArgs;
+
+        try {
+            JSONObject bridgeArgsJSON = BundleJSONConverter.convertToJSON(bridgeArguments);
+            JSONObject methodArgsJSON = BundleJSONConverter.convertToJSON(methodArgs);
+
+            if (bridgeArgsJSON == null || methodArgsJSON == null) {
+                return null;
+            }
+
+            webParams.putString(FALLBACK_DIALOG_PARAM_BRIDGE_ARGS, bridgeArgsJSON.toString());
+            webParams.putString(FALLBACK_DIALOG_PARAM_METHOD_ARGS, methodArgsJSON.toString());
+        } catch (JSONException je) {
+            webParams = null;
+            Logger.log(LoggingBehavior.DEVELOPER_ERRORS, Log.ERROR, TAG,
+                    "Error creating Url -- " + je);
+        }
+
+        return webParams;
     }
 }
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 28afbf84f..148108bac 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -17,9 +17,11 @@
 package com.facebook.internal;
 
 import android.content.Context;
-import android.content.pm.ApplicationInfo;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.net.Uri;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.os.Parcelable;
 import android.provider.Settings.Secure;
@@ -27,8 +29,9 @@
 import android.util.Log;
 import android.webkit.CookieManager;
 import android.webkit.CookieSyncManager;
-import com.facebook.*;
-import com.facebook.android.BuildConfig;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Settings;
 import com.facebook.model.GraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -36,8 +39,11 @@
 import org.json.JSONTokener;
 
 import java.io.*;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.net.HttpURLConnection;
 import java.net.URLConnection;
+import java.net.URLDecoder;
 import java.security.MessageDigest;
 import java.security.NoSuchAlgorithmException;
 import java.util.*;
@@ -53,11 +59,25 @@
     private static final String HASH_ALGORITHM_MD5 = "MD5";
     private static final String HASH_ALGORITHM_SHA1 = "SHA-1";
     private static final String URL_SCHEME = "https";
-    private static final String SUPPORTS_ATTRIBUTION = "supports_attribution";
-    private static final String SUPPORTS_IMPLICIT_SDK_LOGGING = "supports_implicit_sdk_logging";
-    private static final String [] APP_SETTING_FIELDS = new String[] {
-            SUPPORTS_ATTRIBUTION,
-            SUPPORTS_IMPLICIT_SDK_LOGGING
+    private static final String APP_SETTINGS_PREFS_STORE = "com.facebook.internal.preferences.APP_SETTINGS";
+    private static final String APP_SETTINGS_PREFS_KEY_FORMAT = "com.facebook.internal.APP_SETTINGS.%s";
+    private static final String APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING = "supports_implicit_sdk_logging";
+    private static final String APP_SETTING_NUX_CONTENT = "gdpv4_nux_content";
+    private static final String APP_SETTING_NUX_ENABLED = "gdpv4_nux_enabled";
+    private static final String APP_SETTING_DIALOG_CONFIGS = "android_dialog_configs";
+    private static final String EXTRA_APP_EVENTS_INFO_FORMAT_VERSION = "a1";
+    private static final String DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR = "\\|";
+    private static final String DIALOG_CONFIG_NAME_KEY = "name";
+    private static final String DIALOG_CONFIG_VERSIONS_KEY = "versions";
+    private static final String DIALOG_CONFIG_URL_KEY = "url";
+
+    private final static String UTF8 = "UTF-8";
+
+    private static final String[] APP_SETTING_FIELDS = new String[] {
+            APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING,
+            APP_SETTING_NUX_CONTENT,
+            APP_SETTING_NUX_ENABLED,
+            APP_SETTING_DIALOG_CONFIGS
     };
     private static final String APPLICATION_FIELDS = "fields";
 
@@ -67,22 +87,214 @@
     private static Map<String, FetchedAppSettings> fetchedAppSettings =
             new ConcurrentHashMap<String, FetchedAppSettings>();
 
+    private static AsyncTask<Void, Void, GraphObject> initialAppSettingsLoadTask;
+
     public static class FetchedAppSettings {
-        private boolean supportsAttribution;
         private boolean supportsImplicitLogging;
-
-        private FetchedAppSettings(boolean supportsAttribution, boolean supportsImplicitLogging) {
-            this.supportsAttribution = supportsAttribution;
+        private String nuxContent;
+        private boolean nuxEnabled;
+        private Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap;
+
+        private FetchedAppSettings(boolean supportsImplicitLogging,
+                                   String nuxContent,
+                                   boolean nuxEnabled,
+                                   Map<String, Map<String, DialogFeatureConfig>> dialogConfigMap) {
             this.supportsImplicitLogging = supportsImplicitLogging;
-        }
-
-        public boolean supportsAttribution() {
-            return supportsAttribution;
+            this.nuxContent = nuxContent;
+            this.nuxEnabled = nuxEnabled;
+            this.dialogConfigMap = dialogConfigMap;
         }
 
         public boolean supportsImplicitLogging() {
             return supportsImplicitLogging;
         }
+
+        public String getNuxContent() {
+            return nuxContent;
+        }
+
+        public boolean getNuxEnabled() {
+            return nuxEnabled;
+        }
+
+        public Map<String, Map<String, DialogFeatureConfig>> getDialogConfigurations() {
+            return dialogConfigMap;
+        }
+    }
+
+    public static class DialogFeatureConfig {
+        private static DialogFeatureConfig parseDialogConfig(JSONObject dialogConfigJSON) {
+            String dialogNameWithFeature = dialogConfigJSON.optString(DIALOG_CONFIG_NAME_KEY);
+            if (Utility.isNullOrEmpty(dialogNameWithFeature)) {
+                return null;
+            }
+
+            String[] components = dialogNameWithFeature.split(DIALOG_CONFIG_DIALOG_NAME_FEATURE_NAME_SEPARATOR);
+            if (components.length != 2) {
+                // We expect the format to be dialogName|FeatureName, where both components are non-empty.
+                return null;
+            }
+
+            String dialogName = components[0];
+            String featureName = components[1];
+            if (isNullOrEmpty(dialogName) || isNullOrEmpty(featureName)) {
+                return null;
+            }
+
+            String urlString = dialogConfigJSON.optString(DIALOG_CONFIG_URL_KEY);
+            Uri fallbackUri = null;
+            if (!Utility.isNullOrEmpty(urlString)) {
+                fallbackUri = Uri.parse(urlString);
+            }
+
+            JSONArray versionsJSON = dialogConfigJSON.optJSONArray(DIALOG_CONFIG_VERSIONS_KEY);
+
+            int[] featureVersionSpec = parseVersionSpec(versionsJSON);
+
+            return new DialogFeatureConfig(dialogName, featureName, fallbackUri, featureVersionSpec);
+        }
+
+        private static int[] parseVersionSpec(JSONArray versionsJSON) {
+            // Null signifies no overrides to the min-version as specified by the SDK.
+            // An empty array would basically turn off the dialog (i.e no supported versions), so DON'T default to that.
+            int[] versionSpec = null;
+            if (versionsJSON != null) {
+                int numVersions = versionsJSON.length();
+                versionSpec = new int[numVersions];
+                for (int i = 0; i < numVersions; i++) {
+                    // See if the version was stored directly as an Integer
+                    int version = versionsJSON.optInt(i, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+                    if (version == NativeProtocol.NO_PROTOCOL_AVAILABLE) {
+                        // If not, then see if it was stored as a string that can be parsed out.
+                        // If even that fails, then we will leave it as NO_PROTOCOL_AVAILABLE
+                        String versionString = versionsJSON.optString(i);
+                        if (!isNullOrEmpty(versionString)) {
+                            try {
+                                version = Integer.parseInt(versionString);
+                            } catch (NumberFormatException nfe) {
+                                logd(LOG_TAG, nfe);
+                                version = NativeProtocol.NO_PROTOCOL_AVAILABLE;
+                            }
+                        }
+                    }
+
+                    versionSpec[i] = version;
+                }
+            }
+
+            return versionSpec;
+        }
+
+        private String dialogName;
+        private String featureName;
+        private Uri fallbackUrl;
+        private int[] featureVersionSpec;
+
+        private DialogFeatureConfig(String dialogName, String featureName, Uri fallbackUrl, int[] featureVersionSpec) {
+            this.dialogName = dialogName;
+            this.featureName = featureName;
+            this.fallbackUrl = fallbackUrl;
+            this.featureVersionSpec = featureVersionSpec;
+        }
+
+        public String getDialogName() {
+            return dialogName;
+        }
+
+        public String getFeatureName() {
+            return featureName;
+        }
+
+        public Uri getFallbackUrl() {
+            return fallbackUrl;
+        }
+
+        public int[] getVersionSpec() {
+            return featureVersionSpec;
+        }
+    }
+
+    /**
+     * Each array represents a set of closed or open Range, like so:
+     * [0,10,50,60] - Ranges are {0-9}, {50-59}
+     * [20] - Ranges are {20-}
+     * [30,40,100] - Ranges are {30-39}, {100-}
+     *
+     * All Ranges in the array have a closed lower bound. Only the last Range in each array may be open.
+     * It is assumed that the passed in arrays are sorted with ascending order.
+     * It is assumed that no two elements in a given are equal (i.e. no 0-length ranges)
+     *
+     * The method returns an intersect of the two passed in Range-sets
+     * @param range1
+     * @param range2
+     * @return
+     */
+    public static int[] intersectRanges(int[] range1, int[] range2) {
+        if (range1 == null) {
+            return range2;
+        } else if (range2 == null) {
+            return range1;
+        }
+
+        int[] outputRange = new int[range1.length + range2.length];
+        int outputIndex = 0;
+        int index1 = 0, lower1, upper1;
+        int index2 = 0, lower2, upper2;
+        while (index1 < range1.length && index2 < range2.length) {
+            int newRangeLower = Integer.MIN_VALUE, newRangeUpper = Integer.MAX_VALUE;
+            lower1 = range1[index1];
+            upper1 = Integer.MAX_VALUE;
+
+            lower2 = range2[index2];
+            upper2 = Integer.MAX_VALUE;
+
+            if (index1 < range1.length - 1) {
+                upper1 = range1[index1 + 1];
+            }
+            if (index2 < range2.length - 1) {
+                upper2 = range2[index2 + 1];
+            }
+
+            if (lower1 < lower2) {
+                if (upper1 > lower2) {
+                    newRangeLower = lower2;
+                    if (upper1 > upper2) {
+                        newRangeUpper = upper2;
+                        index2 += 2;
+                    } else {
+                        newRangeUpper = upper1;
+                        index1 += 2;
+                    }
+                } else {
+                    index1 += 2;
+                }
+            } else {
+                if (upper2 > lower1) {
+                    newRangeLower = lower1;
+                    if (upper2 > upper1) {
+                        newRangeUpper = upper1;
+                        index1 += 2;
+                    } else {
+                        newRangeUpper = upper2;
+                        index2 += 2;
+                    }
+                } else {
+                    index2 += 2;
+                }
+            }
+
+            if (newRangeLower != Integer.MIN_VALUE) {
+                outputRange[outputIndex ++] = newRangeLower;
+                if (newRangeUpper != Integer.MAX_VALUE) {
+                    outputRange[outputIndex ++] = newRangeUpper;
+                } else {
+                    // If we reach an unbounded/open range, then we know we're done.
+                    break;
+                }
+            }
+        }
+
+        return Arrays.copyOf(outputRange, outputIndex);
     }
 
     // Returns true iff all items in subset are in superset, treating null and
@@ -110,6 +322,23 @@ public static boolean isNullOrEmpty(String s) {
         return (s == null) || (s.length() == 0);
     }
 
+    /**
+     * Use this when you want to normalize empty and null strings
+     * This way, Utility.areObjectsEqual can used for comparison, where a null string is to be treated the same as
+     * an empty string.
+     *
+     * @param s
+     * @param valueIfNullOrEmpty
+     * @return
+     */
+    public static String coerceValueIfNullOrEmpty(String s, String valueIfNullOrEmpty) {
+        if (isNullOrEmpty(s)) {
+            return valueIfNullOrEmpty;
+        }
+
+        return s;
+    }
+
     public static <T> Collection<T> unmodifiableCollection(T... ts) {
         return Collections.unmodifiableCollection(Arrays.asList(ts));
     }
@@ -126,19 +355,30 @@ static String md5hash(String key) {
         return hashWithAlgorithm(HASH_ALGORITHM_MD5, key);
     }
 
-    private static String sha1hash(String key) {
+    static String sha1hash(String key) {
         return hashWithAlgorithm(HASH_ALGORITHM_SHA1, key);
     }
 
+    static String sha1hash(byte[] bytes) {
+        return hashWithAlgorithm(HASH_ALGORITHM_SHA1, bytes);
+    }
+
     private static String hashWithAlgorithm(String algorithm, String key) {
-        MessageDigest hash = null;
+        return hashWithAlgorithm(algorithm, key.getBytes());
+    }
+
+    private static String hashWithAlgorithm(String algorithm, byte[] bytes) {
+        MessageDigest hash;
         try {
             hash = MessageDigest.getInstance(algorithm);
         } catch (NoSuchAlgorithmException e) {
             return null;
         }
+        return hashBytes(hash, bytes);
+    }
 
-        hash.update(key.getBytes());
+    private static String hashBytes(MessageDigest hash, byte[] bytes) {
+        hash.update(bytes);
         byte[] digest = hash.digest();
         StringBuilder builder = new StringBuilder();
         for (int b : digest) {
@@ -162,6 +402,32 @@ public static Uri buildUri(String authority, String path, Bundle parameters) {
         return builder.build();
     }
 
+    public static Bundle parseUrlQueryString(String queryString) {
+        Bundle params = new Bundle();
+        if (!isNullOrEmpty(queryString)) {
+            String array[] = queryString.split("&");
+            for (String parameter : array) {
+                String keyValuePair[] = parameter.split("=");
+
+                try {
+                    if (keyValuePair.length == 2) {
+                        params.putString(
+                                URLDecoder.decode(keyValuePair[0], UTF8),
+                                URLDecoder.decode(keyValuePair[1], UTF8));
+                    } else if (keyValuePair.length == 1) {
+                        params.putString(
+                                URLDecoder.decode(keyValuePair[0], UTF8),
+                                "");
+                    }
+                } catch (UnsupportedEncodingException e) {
+                    // shouldn't happen
+                    logd(LOG_TAG, e);
+                }
+            }
+        }
+        return params;
+    }
+
     public static void putObjectInBundle(Bundle bundle, String key, Object value) {
         if (value instanceof String) {
             bundle.putString(key, (String) value);
@@ -186,24 +452,16 @@ public static void closeQuietly(Closeable closeable) {
 
     public static void disconnectQuietly(URLConnection connection) {
         if (connection instanceof HttpURLConnection) {
-            ((HttpURLConnection)connection).disconnect();
+            ((HttpURLConnection) connection).disconnect();
         }
     }
 
     public static String getMetadataApplicationId(Context context) {
         Validate.notNull(context, "context");
 
-        try {
-            ApplicationInfo ai = context.getPackageManager().getApplicationInfo(
-                    context.getPackageName(), PackageManager.GET_META_DATA);
-            if (ai.metaData != null) {
-                return ai.metaData.getString(Session.APPLICATION_ID_PROPERTY);
-            }
-        } catch (PackageManager.NameNotFoundException e) {
-            // if we can't find it in the manifest, just return null
-        }
+        Settings.loadDefaultsFromMetadata(context);
 
-        return null;
+        return Settings.getApplicationId();
     }
 
     static Map<String, Object> convertJSONObjectToHashMap(JSONObject jsonObject) {
@@ -324,17 +582,23 @@ public static void clearFacebookCookies(Context context) {
     }
 
     public static void logd(String tag, Exception e) {
-        if (BuildConfig.DEBUG && tag != null && e != null) {
+        if (Settings.isDebugEnabled() && tag != null && e != null) {
             Log.d(tag, e.getClass().getSimpleName() + ": " + e.getMessage());
         }
     }
 
     public static void logd(String tag, String msg) {
-        if (BuildConfig.DEBUG && tag != null && msg != null) {
+        if (Settings.isDebugEnabled() && tag != null && msg != null) {
             Log.d(tag, msg);
         }
     }
 
+    public static void logd(String tag, String msg, Throwable t) {
+        if (Settings.isDebugEnabled() && !isNullOrEmpty(tag)) {
+            Log.d(tag, msg, t);
+        }
+    }
+
     public static <T> boolean areObjectsEqual(T a, T b) {
         if (a == null) {
             return b == null;
@@ -342,31 +606,141 @@ public static void logd(String tag, String msg) {
         return a.equals(b);
     }
 
+    public static void loadAppSettingsAsync(final Context context, final String applicationId) {
+        if (Utility.isNullOrEmpty(applicationId) ||
+                fetchedAppSettings.containsKey(applicationId) ||
+                initialAppSettingsLoadTask != null) {
+            return;
+        }
+
+        final String settingsKey = String.format(APP_SETTINGS_PREFS_KEY_FORMAT, applicationId);
+
+        initialAppSettingsLoadTask = new AsyncTask<Void, Void, GraphObject>() {
+            @Override
+            protected GraphObject doInBackground(Void... params) {
+                return getAppSettingsQueryResponse(applicationId);
+            }
+
+            @Override
+            protected void onPostExecute(GraphObject result) {
+                if (result != null) {
+                    JSONObject resultJSON = result.getInnerJSONObject();
+                    parseAppSettingsFromJSON(applicationId, resultJSON);
+
+                    SharedPreferences sharedPrefs = context.getSharedPreferences(
+                            APP_SETTINGS_PREFS_STORE,
+                            Context.MODE_PRIVATE);
+                    sharedPrefs.edit()
+                        .putString(settingsKey, resultJSON.toString())
+                        .apply();
+                }
+
+                initialAppSettingsLoadTask = null;
+            }
+        };
+        initialAppSettingsLoadTask.execute((Void[])null);
+
+        // Also see if we had a cached copy and use that immediately.
+        SharedPreferences sharedPrefs = context.getSharedPreferences(
+                APP_SETTINGS_PREFS_STORE,
+                Context.MODE_PRIVATE);
+        String settingsJSONString = sharedPrefs.getString(settingsKey, null);
+        if (!isNullOrEmpty(settingsJSONString)) {
+            JSONObject settingsJSON = null;
+            try {
+                settingsJSON = new JSONObject(settingsJSONString);
+            } catch (JSONException je) {
+                logd(LOG_TAG, je);
+            }
+            if (settingsJSON != null) {
+                parseAppSettingsFromJSON(applicationId, settingsJSON);
+            }
+        }
+    }
+
     // Note that this method makes a synchronous Graph API call, so should not be called from the main thread.
     public static FetchedAppSettings queryAppSettings(final String applicationId, final boolean forceRequery) {
-
         // Cache the last app checked results.
         if (!forceRequery && fetchedAppSettings.containsKey(applicationId)) {
             return fetchedAppSettings.get(applicationId);
         }
 
+        GraphObject response = getAppSettingsQueryResponse(applicationId);
+        if (response == null) {
+            return null;
+        }
+
+        return parseAppSettingsFromJSON(applicationId, response.getInnerJSONObject());
+    }
+
+    private static FetchedAppSettings parseAppSettingsFromJSON(String applicationId, JSONObject settingsJSON) {
+        FetchedAppSettings result = new FetchedAppSettings(
+                settingsJSON.optBoolean(APP_SETTING_SUPPORTS_IMPLICIT_SDK_LOGGING, false),
+                settingsJSON.optString(APP_SETTING_NUX_CONTENT, ""),
+                settingsJSON.optBoolean(APP_SETTING_NUX_ENABLED, false),
+                parseDialogConfigurations(settingsJSON.optJSONObject(APP_SETTING_DIALOG_CONFIGS))
+        );
+
+        fetchedAppSettings.put(applicationId, result);
+
+        return result;
+    }
+
+    // Note that this method makes a synchronous Graph API call, so should not be called from the main thread.
+    private static GraphObject getAppSettingsQueryResponse(String applicationId) {
         Bundle appSettingsParams = new Bundle();
         appSettingsParams.putString(APPLICATION_FIELDS, TextUtils.join(",", APP_SETTING_FIELDS));
 
         Request request = Request.newGraphPathRequest(null, applicationId, null);
+        request.setSkipClientToken(true);
         request.setParameters(appSettingsParams);
 
-        GraphObject supportResponse = request.executeAndWait().getGraphObject();
-        FetchedAppSettings result = new FetchedAppSettings(
-                safeGetBooleanFromResponse(supportResponse, SUPPORTS_ATTRIBUTION),
-                safeGetBooleanFromResponse(supportResponse, SUPPORTS_IMPLICIT_SDK_LOGGING));
+        GraphObject response = request.executeAndWait().getGraphObject();
+        return response;
+    }
 
-        fetchedAppSettings.put(applicationId, result);
+    public static DialogFeatureConfig getDialogFeatureConfig(String applicationId, String actionName, String featureName) {
+        if (Utility.isNullOrEmpty(actionName) || Utility.isNullOrEmpty(featureName)) {
+            return null;
+        }
 
-        return result;
+        FetchedAppSettings settings = fetchedAppSettings.get(applicationId);
+        if (settings != null) {
+            Map<String, DialogFeatureConfig> featureMap = settings.getDialogConfigurations().get(actionName);
+            if (featureMap != null) {
+                return featureMap.get(featureName);
+            }
+        }
+        return null;
+    }
+
+    private static Map<String, Map<String, DialogFeatureConfig>> parseDialogConfigurations(JSONObject dialogConfigResponse) {
+        HashMap<String, Map<String, DialogFeatureConfig>> dialogConfigMap = new HashMap<String, Map<String, DialogFeatureConfig>>();
+
+        if (dialogConfigResponse != null) {
+            JSONArray dialogConfigData = dialogConfigResponse.optJSONArray("data");
+            if (dialogConfigData != null) {
+                for (int i = 0; i < dialogConfigData.length(); i++) {
+                    DialogFeatureConfig dialogConfig = DialogFeatureConfig.parseDialogConfig(dialogConfigData.optJSONObject(i));
+                    if (dialogConfig == null) {
+                        continue;
+                    }
+
+                    String dialogName = dialogConfig.getDialogName();
+                    Map<String, DialogFeatureConfig> featureMap = dialogConfigMap.get(dialogName);
+                    if (featureMap == null) {
+                        featureMap = new HashMap<String, DialogFeatureConfig>();
+                        dialogConfigMap.put(dialogName, featureMap);
+                    }
+                    featureMap.put(dialogConfig.getFeatureName(), dialogConfig);
+                }
+            }
+        }
+
+        return dialogConfigMap;
     }
 
-    private static boolean safeGetBooleanFromResponse(GraphObject response, String propertyName) {
+    public static boolean safeGetBooleanFromResponse(GraphObject response, String propertyName) {
         Object result = false;
         if (response != null) {
             result = response.getProperty(propertyName);
@@ -377,6 +751,39 @@ private static boolean safeGetBooleanFromResponse(GraphObject response, String p
         return (Boolean) result;
     }
 
+    public static String safeGetStringFromResponse(GraphObject response, String propertyName) {
+        Object result = "";
+        if (response != null) {
+            result = response.getProperty(propertyName);
+        }
+        if (!(result instanceof String)) {
+            result = "";
+        }
+        return (String) result;
+    }
+
+    public static JSONObject tryGetJSONObjectFromResponse(GraphObject response, String propertyKey) {
+        if (response == null) {
+            return null;
+        }
+        Object property = response.getProperty(propertyKey);
+        if (!(property instanceof JSONObject)) {
+            return null;
+        }
+        return (JSONObject) property;
+    }
+
+    public static JSONArray tryGetJSONArrayFromResponse(GraphObject response, String propertyKey) {
+        if (response == null) {
+            return null;
+        }
+        Object property = response.getProperty(propertyKey);
+        if (!(property instanceof JSONArray)) {
+            return null;
+        }
+        return (JSONArray) property;
+    }
+
     public static void clearCaches(Context context) {
         ImageDownloader.clearCache(context);
     }
@@ -404,29 +811,86 @@ public static void deleteDirectory(File directoryOrFile) {
         return result;
     }
 
-    // Return a hash of the android_id combined with the appid.  Intended to dedupe requests on the server side
-    // in order to do counting of users unknown to Facebook.  Because we put the appid into the key prior to hashing,
-    // we cannot do correlation of the same user across multiple apps -- this is intentional.  When we transition to
-    // the Google advertising ID, we'll get rid of this and always send that up.
-    public static String getHashedDeviceAndAppID(Context context, String applicationId) {
-        String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);
+    public static void setAppEventAttributionParameters(
+            GraphObject params,
+            AttributionIdentifiers attributionIdentifiers,
+            String anonymousAppDeviceGUID,
+            boolean limitEventUsage) {
+        if (attributionIdentifiers != null && attributionIdentifiers.getAttributionId() != null) {
+            params.setProperty("attribution", attributionIdentifiers.getAttributionId());
+        }
+
+        if (attributionIdentifiers != null && attributionIdentifiers.getAndroidAdvertiserId() != null) {
+            params.setProperty("advertiser_id", attributionIdentifiers.getAndroidAdvertiserId());
+            params.setProperty("advertiser_tracking_enabled", !attributionIdentifiers.isTrackingLimited());
+        }
+
+        params.setProperty("anon_id", anonymousAppDeviceGUID);
+        params.setProperty("application_tracking_enabled", !limitEventUsage);
+    }
+
+    public static void setAppEventExtendedDeviceInfoParameters(GraphObject params, Context appContext) {
+        JSONArray extraInfoArray = new JSONArray();
+        extraInfoArray.put(EXTRA_APP_EVENTS_INFO_FORMAT_VERSION);
+
+        // Application Manifest info:
+        String pkgName = appContext.getPackageName();
+        int versionCode = -1;
+        String versionName = "";
+
+        try {
+            PackageInfo pi = appContext.getPackageManager().getPackageInfo(pkgName, 0);
+            versionCode = pi.versionCode;
+            versionName = pi.versionName;
+        } catch (PackageManager.NameNotFoundException e) {
+            // Swallow
+        }
+
+        // Application Manifest info:
+        extraInfoArray.put(pkgName);
+        extraInfoArray.put(versionCode);
+        extraInfoArray.put(versionName);
+
+        params.setProperty("extinfo", extraInfoArray.toString());
+    }
+
+    public static Method getMethodQuietly(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
+        try {
+            return clazz.getMethod(methodName, parameterTypes);
+        } catch (NoSuchMethodException ex) {
+            return null;
+        }
+    }
 
-        if (androidId == null) {
+    public static Method getMethodQuietly(String className, String methodName, Class<?>... parameterTypes) {
+        try {
+            Class<?> clazz = Class.forName(className);
+            return getMethodQuietly(clazz, methodName, parameterTypes);
+        } catch (ClassNotFoundException ex) {
             return null;
-        } else {
-            return sha1hash(androidId + applicationId);
         }
     }
 
-    public static void setAppEventAttributionParameters(GraphObject params,
-            String attributionId, String hashedDeviceAndAppId, boolean limitEventUsage) {
-        // Send attributionID if it exists, otherwise send a hashed device+appid specific value as the advertiser_id.
-        if (attributionId != null) {
-            params.setProperty("attribution", attributionId);
-        } else if (hashedDeviceAndAppId != null) {
-            params.setProperty("advertiser_id", hashedDeviceAndAppId);
+    public static Object invokeMethodQuietly(Object receiver, Method method, Object... args) {
+        try {
+            return method.invoke(receiver, args);
+        } catch (IllegalAccessException ex) {
+            return null;
+        } catch (InvocationTargetException ex) {
+            return null;
         }
+    }
 
-        params.setProperty("application_tracking_enabled", !limitEventUsage);
+    /**
+     * Returns the name of the current activity if the context is an activity, otherwise return "unknown"
+     */
+    public static String getActivityName(Context context) {
+        if (context == null) {
+            return "null";
+        } else if (context == context.getApplicationContext()) {
+            return "unknown";
+        } else {
+            return context.getClass().getSimpleName();
+        }
     }
 }
diff --git a/facebook/src/com/facebook/model/GraphUser.java b/facebook/src/com/facebook/model/GraphUser.java
index c2daca049..51db95d4e 100644
--- a/facebook/src/com/facebook/model/GraphUser.java
+++ b/facebook/src/com/facebook/model/GraphUser.java
@@ -112,13 +112,14 @@
     public void setBirthday(String birthday);
 
     /**
-     * Returns the current city of the user.
-     * @return the current city of the user
+     * Returns the current place of the user.
+     * @return the current place of the user
      */
-    public GraphLocation getLocation();
+    public GraphPlace getLocation();
+
     /**
-     * Sets the current city of the user.
-     * @param location the current city of the user
+     * Sets the current place of the user.
+     * @param location the current place of the user
      */
-    public void setLocation(GraphLocation location);
+    public void setLocation(GraphPlace location);
 }
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index f5dbb4d9b..f47b6dc33 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -20,15 +20,17 @@
 import android.content.Context;
 import android.content.Intent;
 import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.Bundle;
 import android.os.Parcel;
 import android.os.Parcelable;
 import android.support.v4.app.Fragment;
 import com.facebook.*;
-import com.facebook.internal.NativeProtocol;
-import com.facebook.internal.Utility;
-import com.facebook.internal.Validate;
-import com.facebook.model.*;
+import com.facebook.internal.*;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
+import com.facebook.model.OpenGraphAction;
+import com.facebook.model.OpenGraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -50,7 +52,9 @@
             "com.facebook.platform.extra.COMPLETION_GESTURE";
     private static final String EXTRA_DIALOG_COMPLETION_ID_KEY = "com.facebook.platform.extra.POST_ID";
 
-    private static final int MIN_NATIVE_SHARE_PROTOCOL_VERSION = NativeProtocol.PROTOCOL_VERSION_20130618;
+    public static final String RESULT_ARGS_DIALOG_COMPLETE_KEY = "didComplete";
+    public static final String RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY = "completionGesture";
+    public static final String RESULT_ARGS_DIALOG_COMPLETION_ID_KEY = "postId";
 
     private static NativeAppCallAttachmentStore attachmentStore;
 
@@ -63,8 +67,8 @@
          * Called when the user completes interacting with a Facebook dialog.
          *
          * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
-         * @param data  a Bundle containing the results of the dialog, whose contents will vary depending on the
-         *              type of dialog being displayed.
+         * @param data        a Bundle containing the results of the dialog, whose contents will vary depending on the
+         *                    type of dialog being displayed.
          */
         void onComplete(PendingCall pendingCall, Bundle data);
 
@@ -72,14 +76,36 @@
          * Called if an error occurred while presenting a Facebook dialog.
          *
          * @param pendingCall a PendingCall containing the call ID and original Intent used to launch the dialog
-         * @param error the error that occurred
-         * @param data the full set of extras associated with the activity result
+         * @param error       the error that occurred
+         * @param data        the full set of extras associated with the activity result
          */
         void onError(PendingCall pendingCall, Exception error, Bundle data);
     }
 
-    private interface DialogFeature {
+    /**
+     * Provides an interface for describing a specific feature provided by a FacebookDialog.
+     * This is public primarily to allow its use elsewhere in the Android SDK; developers are discouraged from
+     * constructing their own DialogFeature implementations internal API may change.
+     */
+    public interface DialogFeature {
+        /**
+         * This method is for internal use only.
+         */
+        String getAction();
+
+        /**
+         * This method is for internal use only.
+         */
         int getMinVersion();
+
+        /**
+         * This method is for internal use only.
+         *
+         * For all Enums that implement this interface, the name() method is already present. It returns the String
+         * representation of the Enum value, verbatim.
+         *
+         */
+        String name();
     }
 
     /**
@@ -96,7 +122,16 @@
          * Indicates whether the native Share dialog itself is supported by the installed version of the
          * Facebook application.
          */
-        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618);
+        SHARE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20130618),
+        /**
+         * Indicates whether the native Share dialog supports sharing of photo images.
+         */
+        PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140204),
+        /**
+         * Indicates whether the native Share dialog supports sharing of videos.
+         */
+        VIDEO(NativeProtocol.PROTOCOL_VERSION_20141028),
+        ;
 
         private int minVersion;
 
@@ -104,6 +139,59 @@ private ShareDialogFeature(int minVersion) {
             this.minVersion = minVersion;
         }
 
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_FEED_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+    /**
+     * Defines a set of features that may be supported by the native Message dialog exposed by the Facebook Messenger application.
+     * As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum MessageDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Message dialog itself is supported by the installed version of the
+         * Facebook application.
+         */
+        MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204),
+        /**
+         * Indicates whether the native Message dialog supports sharing of photo images.
+         */
+        PHOTOS(NativeProtocol.PROTOCOL_VERSION_20140324),
+        /**
+         * Indicates whether the native Message dialog supports sharing of videos.
+         */
+        VIDEO(NativeProtocol.PROTOCOL_VERSION_20141218),
+        ;
+
+        private int minVersion;
+
+        private MessageDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_MESSAGE_DIALOG;
+        }
+
         /**
          * This method is for internal use only.
          */
@@ -112,8 +200,9 @@ public int getMinVersion() {
         }
     }
 
+
     /**
-     * Defines a set of features that may be supported by the native Open Graph action dialog exposed by the Facebook
+     * Defines a set of features that may be supported by the native Open Graph dialogs exposed by the Facebook
      * application. As additional features are added, these flags may be passed to
      * {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
      * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)}
@@ -134,6 +223,50 @@ private OpenGraphActionDialogFeature(int minVersion) {
             this.minVersion = minVersion;
         }
 
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public int getMinVersion() {
+            return minVersion;
+        }
+    }
+
+    /**
+     * Defines a set of features that may be supported by the native Open Graph Message dialogs exposed by the Facebook
+     * application. As additional features are added, these flags may be passed to
+     * {@link FacebookDialog#canPresentOpenGraphMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature...)}
+     * to determine whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features, which in turn may be used to determine which UI, etc., to present to the
+     * user.
+     */
+    public enum OpenGraphMessageDialogFeature implements DialogFeature {
+        /**
+         * Indicates whether the native Open Graph Message dialog itself is supported by the installed version of the
+         * Messenger application.
+         */
+        OG_MESSAGE_DIALOG(NativeProtocol.PROTOCOL_VERSION_20140204);
+
+        private int minVersion;
+
+        private OpenGraphMessageDialogFeature(int minVersion) {
+            this.minVersion = minVersion;
+        }
+
+        /**
+         * This method is for internal use only.
+         */
+        public String getAction() {
+            return NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG;
+        }
+
         /**
          * This method is for internal use only.
          */
@@ -153,6 +286,9 @@ public int getMinVersion() {
      * @return true if the native dialog completed normally
      */
     public static boolean getNativeDialogDidComplete(Bundle result) {
+        if (result.containsKey(RESULT_ARGS_DIALOG_COMPLETE_KEY)) {
+            return result.getBoolean(RESULT_ARGS_DIALOG_COMPLETE_KEY);
+        }
         return result.getBoolean(EXTRA_DIALOG_COMPLETE_KEY, false);
     }
 
@@ -164,6 +300,9 @@ public static boolean getNativeDialogDidComplete(Bundle result) {
      * @return "post" or "cancel" as the completion gesture
      */
     public static String getNativeDialogCompletionGesture(Bundle result) {
+        if (result.containsKey(RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY)) {
+            return result.getString(RESULT_ARGS_DIALOG_COMPLETION_GESTURE_KEY);
+        }
         return result.getString(EXTRA_DIALOG_COMPLETION_GESTURE_KEY);
     }
 
@@ -175,6 +314,9 @@ public static String getNativeDialogCompletionGesture(Bundle result) {
      * @return the id of the published post
      */
     public static String getNativeDialogPostId(Bundle result) {
+        if (result.containsKey(RESULT_ARGS_DIALOG_COMPLETION_ID_KEY)) {
+            return result.getString(RESULT_ARGS_DIALOG_COMPLETION_ID_KEY);
+        }
         return result.getString(EXTRA_DIALOG_COMPLETION_ID_KEY);
     }
 
@@ -184,7 +326,8 @@ public static String getNativeDialogPostId(Bundle result) {
     private PendingCall appCall;
     private OnPresentCallback onPresentCallback;
 
-    private FacebookDialog(Activity activity, Fragment fragment, Object nativeFragment, PendingCall appCall, OnPresentCallback onPresentCallback) {
+    private FacebookDialog(Activity activity, Fragment fragment, Object nativeFragment, PendingCall appCall,
+            OnPresentCallback onPresentCallback) {
         this.activity = activity;
         this.fragment = fragment;
         this.nativeFragment = nativeFragment;
@@ -201,6 +344,9 @@ private FacebookDialog(Activity activity, Fragment fragment, Object nativeFragme
      * @return a PendingCall containing the unique call ID corresponding to this call to the Facebook application
      */
     public PendingCall present() {
+        logDialogActivity(activity, fragment, getEventName(appCall.getRequestIntent()),
+                AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_COMPLETED);
+
         if (onPresentCallback != null) {
             try {
                 onPresentCallback.onPresent(activity);
@@ -222,12 +368,11 @@ public PendingCall present() {
     /**
      * Parses the results of a dialog activity and calls the appropriate method on the provided Callback.
      *
-     * @param context the Context that is handling the activity result
-     * @param appCall an PendingCall containing the call ID and original Intent used to launch the dialog
+     * @param context     the Context that is handling the activity result
+     * @param appCall     an PendingCall containing the call ID and original Intent used to launch the dialog
      * @param requestCode the request code for the activity result
-     * @param data the result Intent
-     * @param callback a callback to call after parsing the results
-     *
+     * @param data        the result Intent
+     * @param callback    a callback to call after parsing the results
      * @return true if the activity result was handled, false if not
      */
     public static boolean handleActivityResult(Context context, PendingCall appCall, int requestCode, Intent data,
@@ -242,10 +387,13 @@ public static boolean handleActivityResult(Context context, PendingCall appCall,
 
         if (callback != null) {
             if (NativeProtocol.isErrorResult(data)) {
-                Exception error = NativeProtocol.getErrorFromResult(data);
-                callback.onError(appCall, error, data.getExtras());
+                Bundle errorData = NativeProtocol.getErrorDataFromResultIntent(data);
+                Exception error = NativeProtocol.getExceptionFromErrorData(errorData);
+
+                callback.onError(appCall, error, errorData);
             } else {
-                callback.onComplete(appCall, data.getExtras());
+                Bundle successResults = NativeProtocol.getSuccessResultsFromIntent(data);
+                callback.onComplete(appCall, successResults);
             }
         }
 
@@ -257,38 +405,76 @@ public static boolean handleActivityResult(Context context, PendingCall appCall,
      * enough to support specific features of the native Share dialog, which in turn may be used to determine
      * which UI, etc., to present to the user.
      *
-     * @param context the calling Context
+     * @param context  the calling Context
      * @param features zero or more features to check for; {@link ShareDialogFeature#SHARE_DIALOG} is implicitly checked
      *                 if not explicitly specified
      * @return true if all of the specified features are supported by the currently installed version of the
-     * Facebook application; false if any of the features are not supported
+     *         Facebook application; false if any of the features are not supported
      */
     public static boolean canPresentShareDialog(Context context, ShareDialogFeature... features) {
         return handleCanPresent(context, EnumSet.of(ShareDialogFeature.SHARE_DIALOG, features));
     }
 
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Message dialog, which in turn may be used to determine
+     * which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link com.facebook.widget.FacebookDialog.MessageDialogFeature#MESSAGE_DIALOG} is implicitly
+     *                 checked if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentMessageDialog(Context context, MessageDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, features));
+    }
+
     /**
      * Determines whether the version of the Facebook application installed on the user's device is recent
      * enough to support specific features of the native Open Graph action dialog, which in turn may be used to
      * determine which UI, etc., to present to the user.
      *
-     * @param context the calling Context
+     * @param context  the calling Context
      * @param features zero or more features to check for; {@link OpenGraphActionDialogFeature#OG_ACTION_DIALOG} is implicitly
      *                 checked if not explicitly specified
      * @return true if all of the specified features are supported by the currently installed version of the
-     * Facebook application; false if any of the features are not supported
+     *         Facebook application; false if any of the features are not supported
      */
     public static boolean canPresentOpenGraphActionDialog(Context context, OpenGraphActionDialogFeature... features) {
         return handleCanPresent(context, EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG, features));
     }
 
+    /**
+     * Determines whether the version of the Facebook application installed on the user's device is recent
+     * enough to support specific features of the native Open Graph Message dialog, which in turn may be used to
+     * determine which UI, etc., to present to the user.
+     *
+     * @param context  the calling Context
+     * @param features zero or more features to check for; {@link com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature#OG_MESSAGE_DIALOG} is
+     *                 implicitly checked if not explicitly specified
+     * @return true if all of the specified features are supported by the currently installed version of the
+     *         Facebook application; false if any of the features are not supported
+     */
+    public static boolean canPresentOpenGraphMessageDialog(Context context, OpenGraphMessageDialogFeature... features) {
+        return handleCanPresent(context, EnumSet.of(OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG, features));
+    }
+
     private static boolean handleCanPresent(Context context, Iterable<? extends DialogFeature> features) {
-        return getProtocolVersionForNativeDialog(context, getMinVersionForFeatures(features))
-                != NativeProtocol.NO_PROTOCOL_AVAILABLE;
+        String actionName = getActionForFeatures(features);
+        String applicationId = Settings.getApplicationId();
+        if (Utility.isNullOrEmpty(applicationId)) {
+            applicationId = Utility.getMetadataApplicationId(context);
+        }
+        return getProtocolVersionForNativeDialog(
+                context,
+                actionName,
+                getVersionSpecForFeatures(applicationId, actionName, features)
+        ) != NativeProtocol.NO_PROTOCOL_AVAILABLE;
     }
 
-    private static int getProtocolVersionForNativeDialog(Context context, Integer requiredVersion) {
-        return NativeProtocol.getLatestAvailableProtocolVersion(context, requiredVersion);
+    private static int getProtocolVersionForNativeDialog(Context context, String action, int[] versionSpec) {
+        return NativeProtocol.getLatestAvailableProtocolVersionForAction(context, action, versionSpec);
     }
 
     private static NativeAppCallAttachmentStore getAttachmentStore() {
@@ -297,24 +483,115 @@ private static NativeAppCallAttachmentStore getAttachmentStore() {
         }
         return attachmentStore;
     }
-    private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> features) {
-        int minVersion = Integer.MIN_VALUE;
+
+    private static int[] getVersionSpecForFeatures(
+            String applicationId,
+            String actionName,
+            Iterable<? extends DialogFeature> features) {
+        int[] intersectedRange = null; // Null is treated as a fully open Range. So it is safe to compare against.
+        for (DialogFeature feature : features) {
+            int[] featureVersionSpec = getVersionSpecForFeature(applicationId, actionName, feature);
+            intersectedRange = Utility.intersectRanges(intersectedRange, featureVersionSpec);
+        }
+
+        return intersectedRange;
+    }
+
+    private static int[] getVersionSpecForFeature(String applicationId, String actionName, DialogFeature feature) {
+        // Return the value from DialogFeatureConfig if available. Otherwise, just default to the min-version
+        Utility.DialogFeatureConfig config = Utility.getDialogFeatureConfig(applicationId, actionName, feature.name());
+        if (config != null) {
+            return config.getVersionSpec();
+        } else {
+            return new int[]{feature.getMinVersion()};
+        }
+    }
+
+    private static String getActionForFeatures(Iterable<? extends DialogFeature> features) {
+        String action = null;
         for (DialogFeature feature : features) {
-            // Minimum version to support all features is the maximum of each feature's minimum version.
-            minVersion = Math.max(minVersion, feature.getMinVersion());
+            // All actions in a set of DialogFeatures should have the same action
+            // So we can break after assigning the first one
+            action = feature.getAction();
+            break;
+        }
+        return action;
+    }
+
+    private static void logDialogActivity(Activity activity, Fragment fragment, String eventName, String outcome) {
+        AppEventsLogger logger = AppEventsLogger.newLogger(fragment != null ? fragment.getActivity() : activity);
+        Bundle parameters = new Bundle();
+        parameters.putString(AnalyticsEvents.PARAMETER_DIALOG_OUTCOME, outcome);
+        logger.logSdkEvent(eventName, null, parameters);
+    }
+
+    static private String getEventName(Intent intent) {
+        String action = intent.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_ACTION);
+        boolean hasPhotos = intent.hasExtra(NativeProtocol.EXTRA_PHOTOS);
+        boolean hasVideo = false;
+
+        Bundle extras = intent.getBundleExtra(NativeProtocol.EXTRA_PROTOCOL_METHOD_ARGS);
+        if (extras != null) {
+            ArrayList<String> photo = extras.getStringArrayList(NativeProtocol.METHOD_ARGS_PHOTOS);
+            String video = extras.getString(NativeProtocol.METHOD_ARGS_VIDEO);
+            if (photo != null && !photo.isEmpty()) {
+                hasPhotos = true;
+            }
+            if (video != null && !video.isEmpty()) {
+                hasVideo = true;
+            }
+        }
+        return getEventName(action, hasPhotos, hasVideo);
+    }
+
+    static private String getEventName(String action, boolean hasPhotos, boolean hasVideo) {
+        String eventName;
+
+        if (action.equals(NativeProtocol.ACTION_FEED_DIALOG)) {
+            eventName = hasVideo ?
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_VIDEO_SHARE :
+                    hasPhotos ?
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_PHOTO_SHARE :
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_SHARE;
+        } else if (action.equals(NativeProtocol.ACTION_MESSAGE_DIALOG)) {
+            eventName = hasPhotos ?
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_PHOTO_MESSAGE :
+                    AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_MESSAGE;
+        } else if (action.equals(NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG)) {
+            eventName = AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_OG_SHARE;
+        } else if (action.equals(NativeProtocol.ACTION_OGMESSAGEPUBLISH_DIALOG)) {
+            eventName = AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_OG_MESSAGE;
+        } else if (action.equals(NativeProtocol.ACTION_LIKE_DIALOG)) {
+            eventName = AnalyticsEvents.EVENT_NATIVE_DIALOG_TYPE_LIKE;
+        } else {
+            throw new FacebookException("An unspecified action was presented");
         }
-        return minVersion;
+        return eventName;
     }
 
-    private abstract static class Builder<CONCRETE extends Builder<?>> {
+    /**
+     * Provides a base class for various FacebookDialog builders. This is public primarily to allow its use elsewhere
+     * in the Android SDK; developers are discouraged from constructing their own FacebookDialog builders as the
+     * internal API may change.
+     *
+     * @param <CONCRETE> The concrete base class of the builder.
+     */
+    public abstract static class Builder<CONCRETE extends Builder<?>> {
         final protected Activity activity;
         final protected String applicationId;
         final protected PendingCall appCall;
         protected Fragment fragment;
         protected Object nativeFragment;
         protected String applicationName;
+        protected HashMap<String, Bitmap> imageAttachments = new HashMap<String, Bitmap>();
+        protected HashMap<String, File> mediaAttachmentFiles = new HashMap<String, File>();
 
-        Builder(Activity activity) {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public Builder(Activity activity) {
             Validate.notNull(activity, "activity");
 
             this.activity = activity;
@@ -325,6 +602,7 @@ private static int getMinVersionForFeatures(Iterable<? extends DialogFeature> fe
         /**
          * Sets the request code that will be passed to handleActivityResult when this activity completes; the
          * default is NativeProtocol.DIALOG_REQUEST_CODE.
+         *
          * @param requestCode the request code
          * @return this instance of the builder
          */
@@ -338,6 +616,7 @@ public CONCRETE setRequestCode(int requestCode) {
         /**
          * Sets the name of the application to be displayed in the dialog. If provided, this optimizes the user
          * experience as a preview of a shared item, etc., can be displayed sooner.
+         *
          * @param applicationName the name of the Facebook application
          * @return this instance of the builder
          */
@@ -381,24 +660,94 @@ public CONCRETE setFragment(android.app.Fragment fragment) {
         /**
          * Constructs a FacebookDialog with an Intent that is correctly populated to present the dialog within
          * the Facebook application.
+         *
          * @return a FacebookDialog instance
          */
         public FacebookDialog build() {
             validate();
 
-            Bundle extras = new Bundle();
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            String action = getActionForFeatures(getDialogFeatures());
+            int protocolVersion = getProtocolVersionForNativeDialog(activity, action,
+                    getVersionSpecForFeatures(applicationId, action, getDialogFeatures()));
+
+            Bundle extras = null;
+            if (NativeProtocol.isVersionCompatibleWithBucketedIntent(protocolVersion)) {
+                // Facebook app supports the new bucketed protocol
+                extras = getMethodArguments();
+            } else {
+                // Facebook app only supports the old flat protocol
+                extras = setBundleExtras(new Bundle());
+            }
 
-            Intent intent = handleBuild(extras);
+            Intent intent = NativeProtocol.createPlatformActivityIntent(
+                    activity,
+                    appCall.getCallId().toString(),
+                    action,
+                    protocolVersion,
+                    applicationName,
+                    extras);
             if (intent == null) {
-                throw new FacebookException("Unable to create Intent; this likely means the Facebook app is not installed.");
+                logDialogActivity(activity, fragment,
+                        getEventName(action, extras.containsKey(NativeProtocol.EXTRA_PHOTOS), false),
+                        AnalyticsEvents.PARAMETER_DIALOG_OUTCOME_VALUE_FAILED);
+
+                throw new FacebookException(
+                        "Unable to create Intent; this likely means the Facebook app is not installed.");
             }
+
             appCall.setRequestIntent(intent);
 
             return new FacebookDialog(activity, fragment, nativeFragment, appCall, getOnPresentCallback());
         }
 
+        /**
+         * This is public primarily to allow its use elsewhere in the Android SDK; developers are discouraged from
+         * consuming this method as the internal API may change.
+         */
+        protected String getWebFallbackUrlInternal() {
+            Iterable<? extends DialogFeature> features = getDialogFeatures();
+            String featureName = null;
+            String action = null;
+            for (DialogFeature feature : features) {
+                // All actions in a set of DialogFeatures should have the same fallback url
+                // So we can break after assigning the first one
+                featureName = feature.name();
+                action = feature.getAction();
+                break;
+            }
+
+            Utility.DialogFeatureConfig config = Utility.getDialogFeatureConfig(applicationId, action, featureName);
+            Uri fallbackUrl;
+            if (config == null || (fallbackUrl = config.getFallbackUrl()) == null) {
+                return null;
+            }
+
+            // Since we're talking to the server here, let's use the latest version we know about.
+            // We know we are going to be communicating over a bucketed protocol.
+            Bundle methodArguments = getMethodArguments();
+            int protocolVersion = NativeProtocol.getLatestKnownVersion();
+            Bundle webParams = ServerProtocol.getQueryParamsForPlatformActivityIntentWebFallback(
+                    activity,
+                    appCall.getCallId().toString(),
+                    protocolVersion,
+                    applicationName,
+                    methodArguments);
+            if (webParams == null) {
+                // Could not create the query parameters
+                return null;
+            }
+
+            // Now form the Uri
+            if (fallbackUrl.isRelative()) {
+                fallbackUrl = Utility.buildUri(
+                        ServerProtocol.getDialogAuthority(),
+                        fallbackUrl.toString(),
+                        webParams);
+            }
+
+            return fallbackUrl.toString();
+        }
+
         /**
          * Determines whether the native dialog can be presented (i.e., whether the required version of the
          * Facebook application is installed on the device, and whether the installed version supports all of
@@ -407,40 +756,112 @@ public FacebookDialog build() {
          * @return true if the dialog can be presented; false if not
          */
         public boolean canPresent() {
-            return handleCanPresent();
+            return handleCanPresent(activity, getDialogFeatures());
         }
 
-        boolean handleCanPresent() {
-            return getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION)
-                    != NativeProtocol.NO_PROTOCOL_AVAILABLE;
+        void validate() {
         }
 
-        void validate() {}
-
         OnPresentCallback getOnPresentCallback() {
-            return null;
+            return new OnPresentCallback() {
+                @Override
+                public void onPresent(Context context) throws Exception {
+                    // We're actually being presented, so put our attachments in the content provider.
+                    if (imageAttachments != null && imageAttachments.size() > 0) {
+                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
+                    }
+                    if (mediaAttachmentFiles != null && mediaAttachmentFiles.size() > 0) {
+                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
+                                mediaAttachmentFiles);
+                    }
+                }
+            };
+        }
+
+        protected List<String> addImageAttachments(Collection<Bitmap> bitmaps) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (Bitmap bitmap : bitmaps) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmap);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        protected List<String> addImageAttachmentFiles(Collection<File> bitmapFiles) {
+            ArrayList<String> attachmentUrls = new ArrayList<String>();
+            for (File bitmapFile : bitmapFiles) {
+                String attachmentName = UUID.randomUUID().toString();
+
+                addImageAttachment(attachmentName, bitmapFile);
+
+                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                        attachmentName);
+                attachmentUrls.add(url);
+            }
+
+            return attachmentUrls;
+        }
+
+        protected String addVideoAttachmentFile(File videoFile) {
+            String attachmentName = UUID.randomUUID().toString();
+            addVideoAttachment(attachmentName, videoFile);
+            String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
+                    attachmentName);
+            return url;
+        }
+
+        List<String> getImageAttachmentNames() {
+            return new ArrayList<String>(imageAttachments.keySet());
+        }
+
+        protected Bundle setBundleExtras(Bundle extras) {
+            // Default implementation.
+            return extras;
         }
 
-        abstract Intent handleBuild(Bundle extras);
+        protected abstract Bundle getMethodArguments();
 
-        void putExtra(Bundle extras, String key, String value) {
+        protected void putExtra(Bundle extras, String key, String value) {
             if (value != null) {
                 extras.putString(key, value);
             }
         }
+
+        protected abstract EnumSet<? extends DialogFeature> getDialogFeatures();
+
+        protected CONCRETE addImageAttachment(String imageName, Bitmap bitmap) {
+            imageAttachments.put(imageName, bitmap);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        protected CONCRETE addImageAttachment(String imageName, File attachment) {
+            mediaAttachmentFiles.put(imageName, attachment);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        protected CONCRETE addVideoAttachment(String videoName, File attachment) {
+            mediaAttachmentFiles.put(videoName, attachment);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
     }
 
-    /**
-     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
-     * Share dialog. This builder will throw an exception if the Facebook application is not installed, so it
-     * should only be used if {@link FacebookDialog.checkCanPresentShareDialog()} indicates the capability
-     * is available.
-     */
-    public static class ShareDialogBuilder extends Builder<ShareDialogBuilder> {
+    private abstract static class ShareDialogBuilderBase<CONCRETE extends ShareDialogBuilderBase<?>> extends Builder<CONCRETE> {
         private String name;
         private String caption;
         private String description;
-        private String link;
+        protected String link;
         private String picture;
         private String place;
         private ArrayList<String> friends;
@@ -449,165 +870,591 @@ void putExtra(Bundle extras, String key, String value) {
 
         /**
          * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public ShareDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the name of the URL to be shared. This method only has effect if setLink is called.
+         *
+         * @param name the name
+         * @return this instance of the builder
+         */
+        public CONCRETE setName(String name) {
+            this.name = name;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the caption of the URL to be shared. This method only has effect if setLink is called.
+         *
+         * @param caption the caption
+         * @return this instance of the builder
+         */
+        public CONCRETE setCaption(String caption) {
+            this.caption = caption;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the description of the URL to be shared. This method only has effect if setLink is called.
+         *
+         * @param description the description
+         * @return this instance of the builder
+         */
+        public CONCRETE setDescription(String description) {
+            this.description = description;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the URL of the item to be shared.
+         *
+         * @param link the URL
+         * @return this instance of the builder
+         */
+        public CONCRETE setLink(String link) {
+            this.link = link;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the URL of the image of the URL to be shared. This method only has effect if setLink is called.
+         *
+         * @param picture the URL of the image
+         * @return this instance of the builder
+         */
+        public CONCRETE setPicture(String picture) {
+            this.picture = picture;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the tagged friends for the item to be shared.
+         *
+         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
+         * @return this instance of the builder
+         */
+        public CONCRETE setFriends(List<String> friends) {
+            this.friends = (friends == null ? null : new ArrayList<String>(friends));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the 'ref' property of the item to be shared.
+         *
+         * @param ref the 'ref' property
+         * @return this instance of the builder
+         */
+        public CONCRETE setRef(String ref) {
+            this.ref = ref;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets whether errors encountered during previewing the shared item should be considered fatal and
+         * cause the dialog to return an error
+         *
+         * @param dataErrorsFatal true if data errors should be fatal; false if not
+         * @return this instance of the builder
+         */
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
+            this.dataErrorsFatal = dataErrorsFatal;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        @Override
+        protected Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
+            putExtra(extras, NativeProtocol.EXTRA_SUBTITLE, caption);
+            putExtra(extras, NativeProtocol.EXTRA_DESCRIPTION, description);
+            putExtra(extras, NativeProtocol.EXTRA_LINK, link);
+            putExtra(extras, NativeProtocol.EXTRA_IMAGE, picture);
+            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
+            putExtra(extras, NativeProtocol.EXTRA_REF, ref);
+
+            extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
+            if (!Utility.isNullOrEmpty(friends)) {
+                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
+            }
+            return extras;
+        }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArguments = new Bundle();
+
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_TITLE, name);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_SUBTITLE, caption);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_DESCRIPTION, description);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_LINK, link);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_IMAGE, picture);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_PLACE_TAG, place);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_REF, ref);
+
+            methodArguments.putBoolean(NativeProtocol.METHOD_ARGS_DATA_FAILURES_FATAL, dataErrorsFatal);
+            if (!Utility.isNullOrEmpty(friends)) {
+                methodArguments.putStringArrayList(NativeProtocol.METHOD_ARGS_FRIEND_TAGS, friends);
+            }
+
+            return methodArguments;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog. This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
+     */
+    public static class ShareDialogBuilder extends ShareDialogBuilderBase<ShareDialogBuilder> {
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public ShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG);
+        }
+    }
+
+    private static abstract class PhotoDialogBuilderBase<CONCRETE extends PhotoDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+        static int MAXIMUM_PHOTO_COUNT = 6;
+        private String place;
+        private ArrayList<String> friends;
+        private ArrayList<String> imageAttachmentUrls = new ArrayList<String>();
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the tagged friends for the item to be shared.
+         *
+         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
+         * @return this instance of the builder
+         */
+        public CONCRETE setFriends(List<String> friends) {
+            this.friends = (friends == null ? null : new ArrayList<String>(friends));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * <p></p>Adds one or more photos to the list of photos to display in the native Share dialog, by providing
+         * an in-memory representation of the photos. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.</p>
+         * <p>In order for the images to be provided to the Facebook application as part of the app call, the
+         * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
+         * No more than six photos may be shared at a time.
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotos(Collection<Bitmap> photos) {
+            imageAttachmentUrls.addAll(addImageAttachments(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Adds one or more photos to the list of photos to display in the native Share dialog, by specifying
+         * their location in the file system. The dialog's callback will be called once the user has
+         * shared the photos, but the photos themselves may be uploaded in the background by the Facebook app;
+         * apps wishing to be notified when the photo upload has succeeded or failed should extend the
+         * FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * No more than six photos may be shared at a time.
+         * @param photos a collection of Files representing photos to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addPhotoFiles(Collection<File> photos) {
+            imageAttachmentUrls.addAll(addImageAttachmentFiles(photos));
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        abstract int getMaximumNumberOfPhotos();
+
+        @Override
+        void validate() {
+            super.validate();
+
+            if (imageAttachmentUrls.isEmpty()) {
+                throw new FacebookException("Must specify at least one photo.");
+            }
+
+            if (imageAttachmentUrls.size() > getMaximumNumberOfPhotos()) {
+                throw new FacebookException(String.format("Cannot add more than %d photos.", getMaximumNumberOfPhotos()));
+            }
+        }
+
+        @Override
+        protected Bundle setBundleExtras(Bundle extras) {
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
+            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
+            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
+            extras.putStringArrayList(NativeProtocol.EXTRA_PHOTOS, imageAttachmentUrls);
+
+            if (!Utility.isNullOrEmpty(friends)) {
+                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
+            }
+            return extras;
+        }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
+
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_PLACE_TAG, place);
+            methodArgs.putStringArrayList(NativeProtocol.METHOD_ARGS_PHOTOS, imageAttachmentUrls);
+
+            if (!Utility.isNullOrEmpty(friends)) {
+                methodArgs.putStringArrayList(NativeProtocol.METHOD_ARGS_FRIEND_TAGS, friends);
+            }
+
+            return methodArgs;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog for sharing photos. This builder will throw an exception if the Facebook application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)}  indicates the capability is available.
+     */
+    public static class PhotoShareDialogBuilder extends PhotoDialogBuilderBase<PhotoShareDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public PhotoShareDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG, ShareDialogFeature.PHOTOS);
+        }
+
+        @Override
+        int getMaximumNumberOfPhotos() {
+            return MAXIMUM_PHOTO_COUNT;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog for sharing photos. This builder will throw an exception if the Messenger application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class PhotoMessageDialogBuilder extends PhotoDialogBuilderBase<PhotoMessageDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
+         */
+        public PhotoMessageDialogBuilder(Activity activity) {
+            super(activity);
+        }
+
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, MessageDialogFeature.PHOTOS);
+        }
+
+        @Override
+        int getMaximumNumberOfPhotos() {
+            return MAXIMUM_PHOTO_COUNT;
+        }
+
+        /**
+         * setPlace is not supported for the photo message dialog, setting this method will have no effect.
+         *
+         * @param place will be ignored
+         * @return this instance of the builder
+         */
+        @Override
+        public PhotoMessageDialogBuilder setPlace(String place) {
+            return this;
+        }
+
+        /**
+         * setFriends is not supported for the photo message dialog, setting this method will have no effect.
+         *
+         * @param friends will be ignored
+         * @return this instance of the builder
+         */
+        @Override
+        public PhotoMessageDialogBuilder setFriends(List<String> friends) {
+            return this;
+        }
+    }
+
+    private static abstract class VideoDialogBuilderBase<CONCRETE extends VideoDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+        private String place;
+        private String videoAttachmentUrl;
+
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public VideoDialogBuilderBase(Activity activity) {
+            super(activity);
+        }
+
+        /**
+         * Sets the place for the item to be shared.
+         *
+         * @param place the Facebook ID of the place
+         * @return this instance of the builder
+         */
+        public CONCRETE setPlace(String place) {
+            this.place = place;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Adds a video to display in the native Share dialog, by specifying the location in the file system.
+         * The dialog's callback will be called once the user has shared the video, but the video may be uploaded
+         * in the background by the Facebook app; apps wishing to be notified when the video upload has succeeded
+         * or failed should extend the FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * @param video a Files representing the video to be uploaded
+         * @return this instance of the builder
+         */
+        public CONCRETE addVideoFile(File video) {
+            this.videoAttachmentUrl = addVideoAttachmentFile(video);
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        /**
+         * Sets the video url to display in the native Share dialog, by specifying the content:// or file:/// uri.
+         * The dialog's callback will be called once the user has shared the video, but the video may be uploaded
+         * in the background by the Facebook app; apps wishing to be notified when the video upload has succeeded
+         * or failed should extend the FacebookBroadcastReceiver class and register it in their AndroidManifest.xml.
+         * @param videoUrl a url of the video in the form of content:// or file:///
+         * @return this instance of the builder
+         */
+        public CONCRETE setVideoUrl(String videoUrl) {
+            this.videoAttachmentUrl = videoUrl;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
+        }
+
+        @Override
+        void validate() {
+            super.validate();
+
+            if (videoAttachmentUrl == null || videoAttachmentUrl.isEmpty()) {
+                throw new FacebookException("Must specify at least one video.");
+            }
+        }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_PLACE_TAG, place);
+            methodArgs.putString(NativeProtocol.METHOD_ARGS_VIDEO, videoAttachmentUrl);
+            return methodArgs;
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Share dialog for sharing videos. This builder will throw an exception if the Facebook application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentShareDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.ShareDialogFeature...)} indicates the capability is available.
+     */
+    public static class VideoShareDialogBuilder extends VideoDialogBuilderBase<VideoShareDialogBuilder> {
+        /**
+         * Constructor.
+         *
          * @param activity the Activity which is presenting the native Share dialog; must not be null
          */
-        public ShareDialogBuilder(Activity activity) {
+        public VideoShareDialogBuilder(Activity activity) {
             super(activity);
         }
 
-        /**
-         * Sets the title of the item to be shared.
-         * @param name the title
-         * @return this instance of the builder
-         */
-        public ShareDialogBuilder setName(String name) {
-            this.name = name;
-            return this;
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(ShareDialogFeature.SHARE_DIALOG, ShareDialogFeature.VIDEO);
         }
+    }
 
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog for sharing videos. This builder will throw an exception if the Messenger application is not
+     * installed, so it should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class VideoMessageDialogBuilder extends VideoDialogBuilderBase<VideoMessageDialogBuilder> {
         /**
-         * Sets the subtitle of the item to be shared.
-         * @param caption the subtitle
-         * @return this instance of the builder
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
          */
-        public ShareDialogBuilder setCaption(String caption) {
-            this.caption = caption;
-            return this;
+        public VideoMessageDialogBuilder(Activity activity) {
+            super(activity);
         }
 
-        /**
-         * Sets the description of the item to be shared.
-         * @param description the description
-         * @return this instance of the builder
-         */
-        public ShareDialogBuilder setDescription(String description) {
-            this.description = description;
-            return this;
+        @Override
+        protected EnumSet<MessageDialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG, MessageDialogFeature.VIDEO);
         }
 
         /**
-         * Sets the URL of the item to be shared.
-         * @param link the URL
+         * setPlace is not supported for the photo message dialog, setting this method will have no effect.
+         *
+         * @param place will be ignored
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setLink(String link) {
-            this.link = link;
+        @Override
+        public VideoMessageDialogBuilder setPlace(String place) {
             return this;
         }
+    }
 
-        /**
-         * Sets the URL of the image of the item to be shared.
-         * @param picture the URL of the image
-         * @return this instance of the builder
-         */
-        public ShareDialogBuilder setPicture(String picture) {
-            this.picture = picture;
-            return this;
-        }
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Message dialog. This builder will throw an exception if the Facebook Messenger application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.MessageDialogFeature...)}  indicates the capability is available.
+     * The "friends" and "place" properties will be ignored as the Facebook Messenger app does not support tagging.
+     */
+    public static class MessageDialogBuilder extends ShareDialogBuilderBase<MessageDialogBuilder> {
 
         /**
-         * Sets the place for the item to be shared.
-         * @param place the Facebook ID of the place
-         * @return this instance of the builder
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Message dialog; must not be null
          */
-        public ShareDialogBuilder setPlace(String place) {
-            this.place = place;
-            return this;
+        public MessageDialogBuilder(Activity activity) {
+            super(activity);
         }
 
-        /**
-         * Sets the tagged friends for the item to be shared.
-         * @param friends a list of Facebook IDs of the friends to be tagged in the shared item
-         * @return this instance of the builder
-         */
-        public ShareDialogBuilder setFriends(List<String> friends) {
-            this.friends = new ArrayList<String>(friends);
-            return this;
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(MessageDialogFeature.MESSAGE_DIALOG);
         }
 
         /**
-         * Sets the 'ref' property of the item to be shared.
-         * @param ref the 'ref' property
+         * setPlace is not supported for the message dialog, setting this method will have no effect.
+         *
+         * @param place will be ignored
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setRef(String ref) {
-            this.ref = ref;
+        @Override
+        public MessageDialogBuilder setPlace(String place) {
             return this;
         }
 
         /**
-         * Sets whether errors encountered during previewing the shared item should be considered fatal and
-         * cause the dialog to return an error
-         * @param dataErrorsFatal true if data errors should be fatal; false if not
+         * setFriends is not supported for the message dialog, setting this method will have no effect.
+         *
+         * @param friends will be ignored
          * @return this instance of the builder
          */
-        public ShareDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal) {
-            this.dataErrorsFatal = dataErrorsFatal;
-            return this;
-        }
-
         @Override
-        boolean handleCanPresent() {
-            return canPresentShareDialog(activity, ShareDialogFeature.SHARE_DIALOG);
-        }
-
-        @Override
-        Intent handleBuild(Bundle extras) {
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
-            putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
-            putExtra(extras, NativeProtocol.EXTRA_SUBTITLE, caption);
-            putExtra(extras, NativeProtocol.EXTRA_DESCRIPTION, description);
-            putExtra(extras, NativeProtocol.EXTRA_LINK, link);
-            putExtra(extras, NativeProtocol.EXTRA_IMAGE, picture);
-            putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
-            putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
-            putExtra(extras, NativeProtocol.EXTRA_REF, ref);
-
-            extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
-            if (!Utility.isNullOrEmpty(friends)) {
-                extras.putStringArrayList(NativeProtocol.EXTRA_FRIEND_TAGS, friends);
-            }
-
-            int protocolVersion = getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION);
-
-            Intent intent = NativeProtocol.createPlatformActivityIntent(activity, NativeProtocol.ACTION_FEED_DIALOG,
-                    protocolVersion, extras);
-            return intent;
+        public MessageDialogBuilder setFriends(List<String> friends) {
+            return this;
         }
     }
 
-    /**
-     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
-     * Open Graph action publish dialog. This builder allows the caller to specify binary images for both the
-     * action and any Open Graph objects to be created prior to publishing the action.
-     * This builder will throw an exception if the Facebook application is not installed, so it
-     * should only be used if {@link FacebookDialog.checkCanPresentOpenGraphDialog();} indicates the capability
-     * is available.
-     */
-    public static class OpenGraphActionDialogBuilder extends Builder<OpenGraphActionDialogBuilder> {
+    private static abstract class OpenGraphDialogBuilderBase<CONCRETE extends OpenGraphDialogBuilderBase<?>>
+            extends Builder<CONCRETE> {
+
         private String previewPropertyName;
         private OpenGraphAction action;
         private String actionType;
-        private HashMap<String, Bitmap> imageAttachments;
-        private HashMap<String, File> imageAttachmentFiles;
         private boolean dataErrorsFatal;
 
         /**
          * Constructor.
-         * @param activity the Activity which is presenting the native Open Graph action publish dialog;
-         *                 must not be null
-         * @param action the Open Graph action to be published, which must contain a reference to at least one
-         *               Open Graph object with the property name specified by setPreviewPropertyName; the action
-         *               must have had its type specified via the {@link OpenGraphAction#setType(String)} method
-         * @param actionType the type of the Open Graph action to be published, which should be the namespace-qualified
-         *                   name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
-         *                   of the action passed in.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
          * @param previewPropertyName the name of a property on the Open Graph action that contains the
          *                            Open Graph object which will be displayed as a preview to the user
          */
         @Deprecated
-        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String actionType,
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String actionType,
                 String previewPropertyName) {
             super(activity);
 
@@ -622,7 +1469,7 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
             String typeOnAction = action.getType();
             if (!Utility.isNullOrEmpty(typeOnAction) && !typeOnAction.equals(actionType)) {
                 throw new IllegalArgumentException("'actionType' must match the type of 'action' if it is specified. " +
-                        "Consider using OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, " +
+                        "Consider using OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, " +
                         "String previewPropertyName) instead.");
             }
             this.action = action;
@@ -632,15 +1479,16 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
 
         /**
          * Constructor.
-         * @param activity the Activity which is presenting the native Open Graph action publish dialog;
-         *                 must not be null
-         * @param action the Open Graph action to be published, which must contain a reference to at least one
-         *               Open Graph object with the property name specified by setPreviewPropertyName; the action
-         *               must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
          * @param previewPropertyName the name of a property on the Open Graph action that contains the
          *                            Open Graph object which will be displayed as a preview to the user
          */
-        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+        public OpenGraphDialogBuilderBase(Activity activity, OpenGraphAction action, String previewPropertyName) {
             super(activity);
 
             Validate.notNull(action, "action");
@@ -649,7 +1497,7 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
             if (action.getProperty(previewPropertyName) == null) {
                 throw new IllegalArgumentException(
                         "A property named \"" + previewPropertyName + "\" was not found on the action.  The name of " +
-                        "the preview property must match the name of an action property.");
+                                "the preview property must match the name of an action property.");
             }
 
             this.action = action;
@@ -660,12 +1508,15 @@ public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, S
         /**
          * Sets whether errors encountered during previewing the shared item should be considered fatal and
          * cause the dialog to return an error
+         *
          * @param dataErrorsFatal true if data errors should be fatal; false if not
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal) {
+        public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
             this.dataErrorsFatal = dataErrorsFatal;
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -675,14 +1526,14 @@ public OpenGraphActionDialogBuilder setDataErrorsFatal(boolean dataErrorsFatal)
          * setAction again after calling this method will not clear the image attachments already set, but the new
          * action will have no reference to the existing attachments. The images will not be marked as being
          * user-generated.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
          * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph action
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bitmaps) {
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps) {
             return setImageAttachmentsForAction(bitmaps, false);
         }
 
@@ -695,15 +1546,15 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
          * user-generated -- refer to
          * <a href="https://developers.facebook.com/docs/opengraph/howtos/adding-photos-to-stories/">this article</a>
          * for more information.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph action
+         * @param bitmaps         a list of Bitmaps to be uploaded and attached to the Open Graph action
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bitmaps,
+        public CONCRETE setImageAttachmentsForAction(List<Bitmap> bitmaps,
                 boolean isUserGenerated) {
             Validate.containsNoNulls(bitmaps, "bitmaps");
             if (action == null) {
@@ -713,7 +1564,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
             List<String> attachmentUrls = addImageAttachments(bitmaps);
             updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -723,14 +1576,14 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForAction(List<Bitmap> bi
          * action to refer to these attachments. Note that calling setAction again after calling this method will
          * not clear the image attachments already set, but the new action will have no reference to the existing
          * attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
          * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File> bitmapFiles) {
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles) {
             return setImageAttachmentFilesForAction(bitmapFiles, false);
         }
 
@@ -743,15 +1596,15 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File>
          * names for the image attachments and update the action to refer to these attachments. Note that calling
          * setAction again after calling this method will not clear the image attachments already set, but the new
          * action will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
+         * @param bitmapFiles     a list of Files containing bitmaps to be uploaded and attached to the Open Graph action
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File> bitmapFiles,
+        public CONCRETE setImageAttachmentFilesForAction(List<File> bitmapFiles,
                 boolean isUserGenerated) {
             Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
             if (action == null) {
@@ -761,7 +1614,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForAction(List<File>
             List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
             updateActionAttachmentUrls(attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isUserGenerated) {
@@ -795,7 +1650,7 @@ private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isU
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
@@ -803,10 +1658,10 @@ private void updateActionAttachmentUrls(List<String> attachmentUrls, boolean isU
          *                       the object must be marked as a new object to be created
          *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
          *                       true) or an exception will be thrown
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @param bitmaps        a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps) {
             return setImageAttachmentsForObject(objectProperty, bitmaps, false);
         }
 
@@ -822,20 +1677,20 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
-         *                       the object must be marked as a new object to be created
-         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
-         *                       true) or an exception will be thrown
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object
-         * @param bitmapFiles a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object
+         * @param bitmaps         a list of Files containing bitmaps to be uploaded and attached to the Open Graph object
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,
+        public CONCRETE setImageAttachmentsForObject(String objectProperty, List<Bitmap> bitmaps,
                 boolean isUserGenerated) {
             Validate.notNull(objectProperty, "objectProperty");
             Validate.containsNoNulls(bitmaps, "bitmaps");
@@ -846,7 +1701,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
             List<String> attachmentUrls = addImageAttachments(bitmaps);
             updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         /**
@@ -858,7 +1715,7 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
@@ -866,10 +1723,10 @@ public OpenGraphActionDialogBuilder setImageAttachmentsForObject(String objectPr
          *                       the object must be marked as a new object to be created
          *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
          *                       true) or an exception will be thrown
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @param bitmapFiles    a list of Bitmaps to be uploaded and attached to the Open Graph object
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String objectProperty,
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
                 List<File> bitmapFiles) {
             return setImageAttachmentFilesForObject(objectProperty, bitmapFiles, false);
         }
@@ -886,19 +1743,19 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String obje
          * attachments. Note that calling setObject again after calling this method, or modifying the value of the
          * specified property, will not clear the image attachments already set, but the new action (or objects)
          * will have no reference to the existing attachments.</p>
-         *
+         * <p/>
          * <p>In order for the images to be provided to the Facebook application as part of the app call, the
          * NativeAppCallContentProvider must be specified correctly in the application's AndroidManifest.xml.</p>
          *
-         * @param objectProperty the name of a property on the action that corresponds to an Open Graph object;
-         *                       the object must be marked as a new object to be created
-         *                       (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
-         *                       true) or an exception will be thrown
-         * @param bitmaps a list of Bitmaps to be uploaded and attached to the Open Graph object
+         * @param objectProperty  the name of a property on the action that corresponds to an Open Graph object;
+         *                        the object must be marked as a new object to be created
+         *                        (i.e., {@link com.facebook.model.OpenGraphObject#getCreateObject()} must return
+         *                        true) or an exception will be thrown
+         * @param bitmapFiles     a list of Bitmaps to be uploaded and attached to the Open Graph object
          * @param isUserGenerated if true, specifies that the user_generated flag should be set for these images
          * @return this instance of the builder
          */
-        public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String objectProperty,
+        public CONCRETE setImageAttachmentFilesForObject(String objectProperty,
                 List<File> bitmapFiles, boolean isUserGenerated) {
             Validate.notNull(objectProperty, "objectProperty");
             Validate.containsNoNulls(bitmapFiles, "bitmapFiles");
@@ -909,7 +1766,9 @@ public OpenGraphActionDialogBuilder setImageAttachmentFilesForObject(String obje
             List<String> attachmentUrls = addImageAttachmentFiles(bitmapFiles);
             updateObjectAttachmentUrls(objectProperty, attachmentUrls, isUserGenerated);
 
-            return this;
+            @SuppressWarnings("unchecked")
+            CONCRETE result = (CONCRETE) this;
+            return result;
         }
 
         void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUrls, boolean isUserGenerated) {
@@ -942,47 +1801,8 @@ void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUr
             object.setImage(attachments);
         }
 
-        private List<String> addImageAttachments(List<Bitmap> bitmaps) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (Bitmap bitmap : bitmaps) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmap);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        private List<String> addImageAttachmentFiles(List<File> bitmapFiles) {
-            ArrayList<String> attachmentUrls = new ArrayList<String>();
-            for (File bitmapFile : bitmapFiles) {
-                String attachmentName = UUID.randomUUID().toString();
-
-                addImageAttachment(attachmentName, bitmapFile);
-
-                String url = NativeAppCallContentProvider.getAttachmentUrl(applicationId, appCall.getCallId(),
-                        attachmentName);
-                attachmentUrls.add(url);
-            }
-
-            return attachmentUrls;
-        }
-
-        List<String> getImageAttachmentNames() {
-            return new ArrayList<String>(imageAttachments.keySet());
-        }
-
         @Override
-        boolean handleCanPresent() {
-            return canPresentOpenGraphActionDialog(activity, OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
-        }
-
-        @Override
-        Intent handleBuild(Bundle extras)  {
+        protected Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_PREVIEW_PROPERTY_NAME, previewPropertyName);
             putExtra(extras, NativeProtocol.EXTRA_ACTION_TYPE, actionType);
             extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
@@ -993,45 +1813,24 @@ Intent handleBuild(Bundle extras)  {
             String jsonString = jsonAction.toString();
             putExtra(extras, NativeProtocol.EXTRA_ACTION, jsonString);
 
-            int protocolVersion = getProtocolVersionForNativeDialog(activity, MIN_NATIVE_SHARE_PROTOCOL_VERSION);
-
-            Intent intent = NativeProtocol.createPlatformActivityIntent(activity,
-                    NativeProtocol.ACTION_OGACTIONPUBLISH_DIALOG, protocolVersion, extras);
-
-            return intent;
+            return extras;
         }
 
         @Override
-        OnPresentCallback getOnPresentCallback() {
-            return new OnPresentCallback() {
-                @Override
-                public void onPresent(Context context) throws Exception {
-                    // We're actually being presented, so put our attachments in the content provider.
-                    if (imageAttachments != null && imageAttachments.size() > 0) {
-                        getAttachmentStore().addAttachmentsForCall(context, appCall.getCallId(), imageAttachments);
-                    }
-                    if (imageAttachmentFiles != null && imageAttachmentFiles.size() > 0) {
-                        getAttachmentStore().addAttachmentFilesForCall(context, appCall.getCallId(),
-                                imageAttachmentFiles);
-                    }
-                }
-            };
-        }
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
 
-        private OpenGraphActionDialogBuilder addImageAttachment(String imageName, Bitmap bitmap) {
-            if (imageAttachments == null) {
-                imageAttachments = new HashMap<String, Bitmap>();
-            }
-            imageAttachments.put(imageName, bitmap);
-            return this;
-        }
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_PREVIEW_PROPERTY_NAME, previewPropertyName);
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_ACTION_TYPE, actionType);
+            methodArgs.putBoolean(NativeProtocol.METHOD_ARGS_DATA_FAILURES_FATAL, dataErrorsFatal);
 
-        private OpenGraphActionDialogBuilder addImageAttachment(String imageName, File attachment) {
-            if (imageAttachmentFiles == null) {
-                imageAttachmentFiles = new HashMap<String, File>();
-            }
-            imageAttachmentFiles.put(imageName, attachment);
-            return this;
+            JSONObject jsonAction = action.getInnerJSONObject();
+            jsonAction = flattenChildrenOfGraphObject(jsonAction);
+
+            String jsonString = jsonAction.toString();
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_ACTION, jsonString);
+
+            return methodArgs;
         }
 
         private JSONObject flattenChildrenOfGraphObject(JSONObject graphObject) {
@@ -1091,6 +1890,86 @@ private Object flattenObject(Object object) throws JSONException {
         }
     }
 
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Open Graph action publish dialog. This builder allows the caller to specify binary images for both the
+     * action and any Open Graph objects to be created prior to publishing the action.
+     * This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentOpenGraphActionDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphActionDialogFeature...)} indicates the capability is available.
+     */
+    public static class OpenGraphActionDialogBuilder extends OpenGraphDialogBuilderBase<OpenGraphActionDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param actionType          the type of the Open Graph action to be published, which should be the namespace-qualified
+         *                            name of the action type (e.g., "myappnamespace:myactiontype"); this will override the type
+         *                            of the action passed in.
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        @Deprecated
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String actionType,
+                String previewPropertyName) {
+            super(activity, action, actionType, previewPropertyName);
+        }
+
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action publish dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be published, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphActionDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity, action, previewPropertyName);
+        }
+
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(OpenGraphActionDialogFeature.OG_ACTION_DIALOG);
+        }
+    }
+
+    /**
+     * Provides a builder which can construct a FacebookDialog instance suitable for presenting the native
+     * Open Graph action message dialog. This builder allows the caller to specify binary images for both the
+     * action and any Open Graph objects to be created prior to publishing the action.
+     * This builder will throw an exception if the Facebook application is not installed, so it
+     * should only be used if {@link FacebookDialog#canPresentOpenGraphMessageDialog(android.content.Context,
+     * com.facebook.widget.FacebookDialog.OpenGraphMessageDialogFeature...)} indicates the capability is available.
+     */
+    public static class OpenGraphMessageDialogBuilder extends OpenGraphDialogBuilderBase<OpenGraphMessageDialogBuilder> {
+        /**
+         * Constructor.
+         *
+         * @param activity            the Activity which is presenting the native Open Graph action message dialog;
+         *                            must not be null
+         * @param action              the Open Graph action to be sent, which must contain a reference to at least one
+         *                            Open Graph object with the property name specified by setPreviewPropertyName; the action
+         *                            must have had its type specified via the {@link OpenGraphAction#setType(String)} method
+         * @param previewPropertyName the name of a property on the Open Graph action that contains the
+         *                            Open Graph object which will be displayed as a preview to the user
+         */
+        public OpenGraphMessageDialogBuilder(Activity activity, OpenGraphAction action, String previewPropertyName) {
+            super(activity, action, previewPropertyName);
+        }
+
+        @Override
+        protected EnumSet<? extends DialogFeature> getDialogFeatures() {
+            return EnumSet.of(OpenGraphMessageDialogFeature.OG_MESSAGE_DIALOG);
+        }
+    }
+
     /**
      * Encapsulates information about a call being made to the Facebook application for Android. A unique String
      * call ID is used to track calls through their lifecycle.
@@ -1102,6 +1981,7 @@ private Object flattenObject(Object object) throws JSONException {
 
         /**
          * Constructor.
+         *
          * @param requestCode the request code for this app call
          */
         public PendingCall(int requestCode) {
@@ -1117,11 +1997,11 @@ private PendingCall(Parcel in) {
 
         private void setRequestIntent(Intent requestIntent) {
             this.requestIntent = requestIntent;
-            this.requestIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID, callId.toString());
         }
 
         /**
          * Returns the Intent that was used to initiate this call to the Facebook application.
+         *
          * @return the Intent
          */
         public Intent getRequestIntent() {
@@ -1130,6 +2010,7 @@ public Intent getRequestIntent() {
 
         /**
          * Returns the unique ID of this call to the Facebook application.
+         *
          * @return the unique ID
          */
         public UUID getCallId() {
@@ -1170,5 +2051,6 @@ public PendingCall createFromParcel(Parcel in) {
             public PendingCall[] newArray(int size) {
                 return new PendingCall[size];
             }
-        };}
+        };
+    }
 }
diff --git a/facebook/src/com/facebook/widget/FriendPickerFragment.java b/facebook/src/com/facebook/widget/FriendPickerFragment.java
index b657ec567..6f05df64b 100644
--- a/facebook/src/com/facebook/widget/FriendPickerFragment.java
+++ b/facebook/src/com/facebook/widget/FriendPickerFragment.java
@@ -47,6 +47,33 @@
      * picker should allow more than one friend to be selected or not.
      */
     public static final String MULTI_SELECT_BUNDLE_KEY = "com.facebook.widget.FriendPickerFragment.MultiSelect";
+    /**
+     * The key for a String parameter in the fragment's Intent bundle to indicate the type of friend picker to use.
+     * This value is case sensitive, and must match the enum @{link FriendPickerType}
+     */
+    public static final String FRIEND_PICKER_TYPE_KEY = "com.facebook.widget.FriendPickerFragment.FriendPickerType";
+
+    public enum FriendPickerType {
+        FRIENDS("/friends", true),
+        TAGGABLE_FRIENDS("/taggable_friends", false),
+        INVITABLE_FRIENDS("/invitable_friends", false);
+
+        private final String requestPath;
+        private final boolean requestIsCacheable;
+
+        FriendPickerType(String path, boolean cacheable) {
+            this.requestPath = path;
+            this.requestIsCacheable = cacheable;
+        }
+
+        String getRequestPath() {
+            return requestPath;
+        }
+
+        boolean isCacheable() {
+            return requestIsCacheable;
+        }
+    }
 
     private static final String ID = "id";
     private static final String NAME = "name";
@@ -55,6 +82,9 @@
 
     private boolean multiSelect = true;
 
+    // default to Friends for backwards compatibility
+    private FriendPickerType friendPickerType = FriendPickerType.FRIENDS;
+
     private List<String> preSelectedFriendIds = new ArrayList<String>();
 
     /**
@@ -112,6 +142,14 @@ public void setMultiSelect(boolean multiSelect) {
         }
     }
 
+    /**
+     * Sets the friend picker type for this fragment.
+     * @param type the type of friend picker to use.
+     */
+    public void setFriendPickerType(FriendPickerType type) {
+        this.friendPickerType = type;
+    }
+
     /**
      * Sets the list of friends for pre selection. These friends will be selected by default.
      * @param userIds list of friends as ids
@@ -250,7 +288,7 @@ public void loadData(boolean forceReload) {
     }
 
     private Request createRequest(String userID, Set<String> extraFields, Session session) {
-        Request request = Request.newGraphPathRequest(session, userID + "/friends", null);
+        Request request = Request.newGraphPathRequest(session, userID + friendPickerType.getRequestPath(), null);
 
         Set<String> fields = new HashSet<String>(extraFields);
         String[] requiredFields = new String[]{
@@ -278,6 +316,13 @@ private void setFriendPickerSettingsFromBundle(Bundle inState) {
                 setUserId(inState.getString(USER_ID_BUNDLE_KEY));
             }
             setMultiSelect(inState.getBoolean(MULTI_SELECT_BUNDLE_KEY, multiSelect));
+            if (inState.containsKey(FRIEND_PICKER_TYPE_KEY)) {
+                try {
+                    friendPickerType = FriendPickerType.valueOf(inState.getString(FRIEND_PICKER_TYPE_KEY));
+                } catch (Exception e) {
+                    // NOOP
+                }
+            }
         }
     }
 
@@ -308,6 +353,11 @@ protected void onLoadFinished(GraphObjectPagingLoader<GraphUser> loader,
             }
         }
 
+        @Override
+        protected boolean canSkipRoundTripIfCached() {
+            return friendPickerType.isCacheable();
+        }
+
         private void followNextLink() {
             // This may look redundant, but this causes the circle to be alpha-dimmed if we have results.
             displayActivityCircle();
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 3686cb8b2..bc0adbfb1 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -23,7 +23,7 @@
 import android.view.ViewGroup;
 import android.view.ViewStub;
 import android.widget.*;
-import com.facebook.*;
+import com.facebook.FacebookException;
 import com.facebook.android.R;
 import com.facebook.internal.ImageDownloader;
 import com.facebook.internal.ImageRequest;
@@ -435,7 +435,7 @@ String getPictureFieldSpecifier() {
 
         // Note: these dimensions are in pixels, not dips
         ViewGroup.LayoutParams layoutParams = picture.getLayoutParams();
-        return String.format("picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
+        return String.format(Locale.US, "picture.height(%d).width(%d)", layoutParams.height, layoutParams.width);
     }
 
 
@@ -635,7 +635,11 @@ public long getItemId(int position) {
         if (sectionAndItem != null && sectionAndItem.graphObject != null) {
             String id = getIdOfGraphObject(sectionAndItem.graphObject);
             if (id != null) {
-                return Long.parseLong(id);
+                try {
+                    return Long.parseLong(id);
+                } catch (NumberFormatException e) {
+                    // NOOP
+                }
             }
         }
         return 0;
diff --git a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
index 26b33c99d..0f100ed03 100644
--- a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
+++ b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
@@ -20,9 +20,9 @@
 import android.os.Handler;
 import android.support.v4.content.Loader;
 import com.facebook.*;
+import com.facebook.internal.CacheableRequestBatch;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
-import com.facebook.internal.CacheableRequestBatch;
 
 class GraphObjectPagingLoader<T extends GraphObject> extends Loader<SimpleGraphObjectCursor<T>> {
     private final Class<T> graphObjectClass;
@@ -201,7 +201,11 @@ private void addResults(Response response) {
             nextRequest = response.getRequestForPagedResults(Response.PagingDirection.NEXT);
 
             cursorToModify.addGraphObjects(data, fromCache);
-            cursorToModify.setMoreObjectsAvailable(true);
+            if (nextRequest != null) {
+                cursorToModify.setMoreObjectsAvailable(true);
+            } else {
+                cursorToModify.setMoreObjectsAvailable(false);
+            }
         }
 
         if (!haveData) {
diff --git a/facebook/src/com/facebook/widget/LikeView.java b/facebook/src/com/facebook/widget/LikeView.java
new file mode 100644
index 000000000..b8088b2fc
--- /dev/null
+++ b/facebook/src/com/facebook/widget/LikeView.java
@@ -0,0 +1,706 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.widget;
+
+import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.ContextWrapper;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.res.TypedArray;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.AttributeSet;
+import android.util.TypedValue;
+import android.view.Gravity;
+import android.view.View;
+import android.widget.FrameLayout;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import com.facebook.android.R;
+import com.facebook.internal.*;
+
+/**
+ * This class provides the UI for displaying the Facebook Like button and its associated components.
+ */
+public class LikeView extends FrameLayout {
+
+    // ***
+    // Keep all the enum values in sync with attrs.xml
+    // ***
+
+    /**
+     * Encapsulates the valid values for the facebook:style attribute for a LikeView
+     */
+    public enum Style {
+        /**
+         * Setting the attribute to this value will display the button and a sentence near it that describes the
+         * social sentence for the associated object.
+         *
+         * This is the default value
+         */
+        STANDARD("standard", 0),
+
+        /**
+         * Setting the attribute to this value will display the button by itself, with no other components
+         */
+        BUTTON("button", 1),
+
+        /**
+         * Setting the attribute to this value will display the button and a box near it with the number of likes
+         * for the associated object
+         */
+        BOX_COUNT("box_count", 2);
+
+        static Style DEFAULT = STANDARD;
+
+        static Style fromInt(int enumValue) {
+            for (Style style : values()) {
+                if (style.getValue() == enumValue) {
+                    return style;
+                }
+            }
+
+            return null;
+        }
+
+        private String stringValue;
+        private int intValue;
+        private Style(String stringValue, int value) {
+            this.stringValue = stringValue;
+            this.intValue = value;
+        }
+
+        @Override
+        public String toString() {
+            return stringValue;
+        }
+
+        private int getValue() {
+            return intValue;
+        }
+    }
+
+    /**
+     * Encapsulates the valid values for the facebook:horizontal_alignment attribute for a LikeView.
+     */
+    public enum HorizontalAlignment {
+        /**
+         * Setting the attribute to this value will center the button and auxiliary view in the parent view.
+         *
+         * This is the default value
+         */
+        CENTER("center", 0),
+
+        /**
+         * Setting the attribute to this value will left-justify the button and auxiliary view in the parent view.
+         */
+        LEFT("left", 1),
+
+        /**
+         * Setting the attribute to this value will right-justify the button and auxiliary view in the parent view.
+         * If the facebook:auxiliary_view_position is set to INLINE, then the auxiliary view will be on the
+         * left of the button
+         */
+        RIGHT("right", 2);
+
+        static HorizontalAlignment DEFAULT = CENTER;
+
+        static HorizontalAlignment fromInt(int enumValue) {
+            for (HorizontalAlignment horizontalAlignment : values()) {
+                if (horizontalAlignment.getValue() == enumValue) {
+                    return horizontalAlignment;
+                }
+            }
+
+            return null;
+        }
+
+        private String stringValue;
+        private int intValue;
+        private HorizontalAlignment(String stringValue, int value) {
+            this.stringValue = stringValue;
+            this.intValue = value;
+        }
+
+        @Override
+        public String toString() {
+            return stringValue;
+        }
+
+        private int getValue() {
+            return intValue;
+        }
+    }
+
+    /**
+     * Encapsulates the valid values for the facebook:auxiliary_view_position attribute for a LikeView.
+     */
+    public enum AuxiliaryViewPosition {
+        /**
+         * Setting the attribute to this value will put the social-sentence or box-count below the like button.
+         * If the facebook:style is set to BUTTON, then this has no effect.
+         *
+         * This is the default value
+         */
+        BOTTOM("bottom", 0),
+
+        /**
+         * Setting the attribute to this value will put the social-sentence or box-count inline with the like button.
+         * The auxiliary view will be to the left of the button if the facebook:horizontal_alignment is set to RIGHT.
+         * In all other cases, it will be to the right of the button.
+         * If the facebook:style is set to BUTTON, then this has no effect.
+         */
+        INLINE("inline", 1),
+
+        /**
+         * Setting the attribute to this value will put the social-sentence or box-count above the like button.
+         * If the facebook:style is set to BUTTON, then this has no effect.
+         */
+        TOP("top", 2);
+
+        static AuxiliaryViewPosition DEFAULT = BOTTOM;
+
+        static AuxiliaryViewPosition fromInt(int enumValue) {
+            for (AuxiliaryViewPosition auxViewPosition : values()) {
+                if (auxViewPosition.getValue() == enumValue) {
+                    return auxViewPosition;
+                }
+            }
+
+            return null;
+        }
+
+        private String stringValue;
+        private int intValue;
+        private AuxiliaryViewPosition(String stringValue, int value) {
+            this.stringValue = stringValue;
+            this.intValue = value;
+        }
+
+        @Override
+        public String toString() {
+            return stringValue;
+        }
+
+        private int getValue() {
+            return intValue;
+        }
+    }
+
+    private static final int NO_FOREGROUND_COLOR = -1;
+
+    private String objectId;
+    private LinearLayout containerView;
+    private LikeButton likeButton;
+    private LikeBoxCountView likeBoxCountView;
+    private TextView socialSentenceView;
+    private LikeActionController likeActionController;
+    private OnErrorListener onErrorListener;
+    private BroadcastReceiver broadcastReceiver;
+    private LikeActionControllerCreationCallback creationCallback;
+
+    private Style likeViewStyle = Style.DEFAULT;
+    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.DEFAULT;
+    private AuxiliaryViewPosition auxiliaryViewPosition = AuxiliaryViewPosition.DEFAULT;
+    private int foregroundColor = NO_FOREGROUND_COLOR;
+
+    private int edgePadding;
+    private int internalPadding;
+
+    /**
+     * If your app does not use UiLifeCycleHelper, then you must call this method in the calling activity's
+     * onActivityResult method, to process any pending like actions, where tapping the button had resulted in
+     * the Like dialog being shown in the Facebook application.
+     *
+     * @param context Hosting context
+     * @param requestCode From the originating call to onActivityResult
+     * @param resultCode From the originating call to onActivityResult
+     * @param data From the originating call to onActivityResult
+     * @return Indication of whether the Intent was handled
+     */
+    public static boolean handleOnActivityResult(Context context,
+                                                 int requestCode,
+                                                 int resultCode,
+                                                 Intent data) {
+        return LikeActionController.handleOnActivityResult(context, requestCode, resultCode, data);
+    }
+
+    /**
+     * Constructor
+     *
+     * @param context Context for this View
+     */
+    public LikeView(Context context) {
+        super(context);
+        initialize(context);
+    }
+
+    /**
+     * Constructor
+     *
+     * @param context Context for this View
+     * @param attrs   AttributeSet for this View.
+     */
+    public LikeView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        parseAttributes(attrs);
+        initialize(context);
+    }
+
+    /**
+     * Sets the associated object for this LikeView. Can be changed during runtime.
+     * @param objectId Object Id
+     */
+    public void setObjectId(String objectId) {
+        objectId = Utility.coerceValueIfNullOrEmpty(objectId, null);
+        if (!Utility.areObjectsEqual(objectId, this.objectId)) {
+            setObjectIdForced(objectId);
+
+            updateLikeStateAndLayout();
+        }
+    }
+
+    /**
+     * Sets the facebook:style for this LikeView. Can be changed during runtime.
+     * @param likeViewStyle Should be either LikeView.STANDARD, LikeView.BUTTON or LikeView.BOX_COUNT
+     */
+    public void setLikeViewStyle(Style likeViewStyle) {
+        likeViewStyle = likeViewStyle != null ? likeViewStyle : Style.DEFAULT;
+        if (this.likeViewStyle != likeViewStyle) {
+            this.likeViewStyle = likeViewStyle;
+
+            updateLayout();
+        }
+    }
+
+    /**
+     * Sets the facebook:auxiliary_view_position for this LikeView. Can be changed during runtime.
+     * @param auxiliaryViewPosition Should be either LikeView.TOP, LikeView.INLINE or LikeView.BOTTOM
+     */
+    public void setAuxiliaryViewPosition(AuxiliaryViewPosition auxiliaryViewPosition) {
+        auxiliaryViewPosition = auxiliaryViewPosition != null ? auxiliaryViewPosition : AuxiliaryViewPosition.DEFAULT;
+        if (this.auxiliaryViewPosition != auxiliaryViewPosition) {
+            this.auxiliaryViewPosition = auxiliaryViewPosition;
+
+            updateLayout();
+        }
+    }
+
+    /**
+     * Sets the facebook:horizontal_alignment for this LikeView. Can be changed during runtime.
+     * @param horizontalAlignment Should be either LikeView.LEFT, LikeView.CENTER or LikeView.RIGHT
+     */
+    public void setHorizontalAlignment(HorizontalAlignment horizontalAlignment) {
+        horizontalAlignment = horizontalAlignment != null ? horizontalAlignment : HorizontalAlignment.DEFAULT;
+        if (this.horizontalAlignment != horizontalAlignment) {
+            this.horizontalAlignment = horizontalAlignment;
+
+            updateLayout();
+        }
+    }
+
+    /**
+     * Sets the facebook:foreground_color for this LikeView. Can be changed during runtime.
+     * The color is only used for the social sentence text.
+     * @param foregroundColor And valid android.graphics.Color value.
+     */
+    public void setForegroundColor(int foregroundColor) {
+        if (this.foregroundColor != foregroundColor) {
+            socialSentenceView.setTextColor(foregroundColor);
+        }
+    }
+
+    /**
+     * Sets an OnErrorListener for this instance of LikeView to call into when
+     * certain exceptions occur.
+     *
+     * @param onErrorListener The listener object to set
+     */
+    public void setOnErrorListener(OnErrorListener onErrorListener) {
+        this.onErrorListener = onErrorListener;
+    }
+
+    /**
+     * Returns the current OnErrorListener for this instance of LikeView.
+     *
+     * @return The OnErrorListener
+     */
+    public OnErrorListener getOnErrorListener() {
+        return onErrorListener;
+    }
+
+    @Override
+    protected void onDetachedFromWindow() {
+        // Disassociate from the object
+        setObjectId(null);
+
+        super.onDetachedFromWindow();
+    }
+
+    private void parseAttributes(AttributeSet attrs) {
+        if (attrs == null || getContext() == null) {
+            return;
+        }
+
+        TypedArray a = getContext().obtainStyledAttributes(attrs, R.styleable.com_facebook_like_view);
+        if (a == null) {
+            return;
+        }
+
+        objectId = Utility.coerceValueIfNullOrEmpty(a.getString(R.styleable.com_facebook_like_view_object_id), null);
+        likeViewStyle = Style.fromInt(
+                a.getInt(R.styleable.com_facebook_like_view_style,
+                        Style.DEFAULT.getValue()));
+        if (likeViewStyle == null) {
+            throw new IllegalArgumentException("Unsupported value for LikeView 'style'");
+        }
+
+        auxiliaryViewPosition = AuxiliaryViewPosition.fromInt(
+                a.getInt(R.styleable.com_facebook_like_view_auxiliary_view_position,
+                        AuxiliaryViewPosition.DEFAULT.getValue()));
+        if (auxiliaryViewPosition == null) {
+            throw new IllegalArgumentException("Unsupported value for LikeView 'auxiliary_view_position'");
+        }
+
+        horizontalAlignment = HorizontalAlignment.fromInt(
+                a.getInt(R.styleable.com_facebook_like_view_horizontal_alignment,
+                        HorizontalAlignment.DEFAULT.getValue()));
+        if (horizontalAlignment == null) {
+            throw new IllegalArgumentException("Unsupported value for LikeView 'horizontal_alignment'");
+        }
+
+        foregroundColor = a.getColor(R.styleable.com_facebook_like_view_foreground_color, NO_FOREGROUND_COLOR);
+
+        a.recycle();
+    }
+
+    // If attributes were present, parseAttributes MUST be called before initialize() to ensure proper behavior
+    private void initialize(Context context) {
+        edgePadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_edge_padding);
+        internalPadding = getResources().getDimensionPixelSize(R.dimen.com_facebook_likeview_internal_padding);
+        if (foregroundColor == NO_FOREGROUND_COLOR) {
+            foregroundColor = getResources().getColor(R.color.com_facebook_likeview_text_color);
+        }
+
+        setBackgroundColor(Color.TRANSPARENT);
+
+        containerView = new LinearLayout(context);
+        LayoutParams containerViewLayoutParams = new LayoutParams(
+                LayoutParams.WRAP_CONTENT,
+                LayoutParams.WRAP_CONTENT);
+        containerView.setLayoutParams(containerViewLayoutParams);
+
+        initializeLikeButton(context);
+        initializeSocialSentenceView(context);
+        initializeLikeCountView(context);
+
+        containerView.addView(likeButton);
+        containerView.addView(socialSentenceView);
+        containerView.addView(likeBoxCountView);
+
+        addView(containerView);
+
+        setObjectIdForced(this.objectId);
+        updateLikeStateAndLayout();
+    }
+
+    private void initializeLikeButton(Context context) {
+        likeButton = new LikeButton(
+                context,
+                likeActionController != null ? likeActionController.isObjectLiked() : false);
+        likeButton.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                toggleLike();
+            }
+        });
+
+        LinearLayout.LayoutParams buttonLayout = new LinearLayout.LayoutParams(
+                LayoutParams.WRAP_CONTENT,
+                LayoutParams.WRAP_CONTENT);
+
+        likeButton.setLayoutParams(buttonLayout);
+    }
+
+    private void initializeSocialSentenceView(Context context) {
+        socialSentenceView = new TextView(context);
+        socialSentenceView.setTextSize(
+                TypedValue.COMPLEX_UNIT_PX,
+                getResources().getDimension(R.dimen.com_facebook_likeview_text_size));
+        socialSentenceView.setMaxLines(2);
+        socialSentenceView.setTextColor(foregroundColor);
+        socialSentenceView.setGravity(Gravity.CENTER);
+
+        LinearLayout.LayoutParams socialSentenceViewLayout = new LinearLayout.LayoutParams(
+                LayoutParams.WRAP_CONTENT,
+                LayoutParams.MATCH_PARENT);
+        socialSentenceView.setLayoutParams(socialSentenceViewLayout);
+    }
+
+    private void initializeLikeCountView(Context context) {
+        likeBoxCountView = new LikeBoxCountView(context);
+
+        LinearLayout.LayoutParams likeCountViewLayout = new LinearLayout.LayoutParams(
+                LayoutParams.MATCH_PARENT,
+                LayoutParams.MATCH_PARENT);
+        likeBoxCountView.setLayoutParams(likeCountViewLayout);
+    }
+
+    private void toggleLike() {
+        if (likeActionController != null) {
+            Context context = getContext();
+            Activity activity = null;
+            if (context instanceof Activity) {
+                activity = (Activity)context;
+            } else if (context instanceof ContextWrapper) {
+                Context baseContext = ((ContextWrapper) context).getBaseContext();
+                if (baseContext instanceof Activity) {
+                    activity = (Activity)baseContext;
+                }
+            }
+
+            if (activity != null) {
+                likeActionController.toggleLike(activity, getAnalyticsParameters());
+            }
+        }
+    }
+
+    private Bundle getAnalyticsParameters() {
+        Bundle params = new Bundle();
+        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_STYLE, likeViewStyle.toString());
+        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_AUXILIARY_POSITION, auxiliaryViewPosition.toString());
+        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_HORIZONTAL_ALIGNMENT, horizontalAlignment.toString());
+        params.putString(AnalyticsEvents.PARAMETER_LIKE_VIEW_OBJECT_ID, Utility.coerceValueIfNullOrEmpty(objectId, ""));
+        return params;
+    }
+
+    private void setObjectIdForced(String newObjectId) {
+        tearDownObjectAssociations();
+
+        objectId = newObjectId;
+        if (Utility.isNullOrEmpty(newObjectId)) {
+            return;
+        }
+
+        creationCallback = new LikeActionControllerCreationCallback();
+        LikeActionController.getControllerForObjectId(
+                getContext(),
+                newObjectId,
+                creationCallback);
+    }
+
+    private void associateWithLikeActionController(LikeActionController likeActionController) {
+        this.likeActionController = likeActionController;
+
+        this.broadcastReceiver = new LikeControllerBroadcastReceiver();
+        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(getContext());
+
+        // add the broadcast receiver
+        IntentFilter filter = new IntentFilter();
+        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED);
+        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR);
+        filter.addAction(LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET);
+
+        localBroadcastManager.registerReceiver(broadcastReceiver, filter);
+    }
+
+    private void tearDownObjectAssociations() {
+        if (broadcastReceiver != null) {
+            LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(getContext());
+            localBroadcastManager.unregisterReceiver(broadcastReceiver);
+
+            broadcastReceiver = null;
+        }
+
+        // If we were already waiting on a controller to be given back, make sure we aren't waiting anymore.
+        // Otherwise when that controller is given back to the callback, it will go and register a broadcast receiver
+        // for it.
+        if (creationCallback != null) {
+            creationCallback.cancel();
+
+            creationCallback = null;
+        }
+
+        likeActionController = null;
+    }
+
+    private void updateLikeStateAndLayout() {
+        if (likeActionController == null) {
+            likeButton.setLikeState(false);
+            socialSentenceView.setText(null);
+            likeBoxCountView.setText(null);
+        } else {
+            likeButton.setLikeState(likeActionController.isObjectLiked());
+            socialSentenceView.setText(likeActionController.getSocialSentence());
+            likeBoxCountView.setText(likeActionController.getLikeCountString());
+        }
+
+        updateLayout();
+    }
+
+    private void updateLayout() {
+        // Make sure the container is horizontally aligned according to specifications.
+        LayoutParams containerViewLayoutParams = (LayoutParams)containerView.getLayoutParams();
+        LinearLayout.LayoutParams buttonLayoutParams = (LinearLayout.LayoutParams)likeButton.getLayoutParams();
+        int viewGravity =
+                horizontalAlignment == HorizontalAlignment.LEFT ? Gravity.LEFT :
+                        horizontalAlignment == HorizontalAlignment.CENTER ? Gravity.CENTER_HORIZONTAL : Gravity.RIGHT;
+
+        containerViewLayoutParams.gravity = viewGravity | Gravity.TOP;
+        buttonLayoutParams.gravity = viewGravity;
+
+        // Choose the right auxiliary view to make visible.
+        socialSentenceView.setVisibility(GONE);
+        likeBoxCountView.setVisibility(GONE);
+
+        View auxView;
+        if (likeViewStyle == Style.STANDARD &&
+                likeActionController != null &&
+                !Utility.isNullOrEmpty(likeActionController.getSocialSentence())) {
+            auxView = socialSentenceView;
+        } else if (likeViewStyle == Style.BOX_COUNT &&
+                likeActionController != null &&
+                !Utility.isNullOrEmpty(likeActionController.getLikeCountString())) {
+            updateBoxCountCaretPosition();
+            auxView = likeBoxCountView;
+        } else {
+            // No more work to be done.
+            return;
+        }
+        auxView.setVisibility(VISIBLE);
+
+        // Now position the auxiliary view properly
+        LinearLayout.LayoutParams auxViewLayoutParams = (LinearLayout.LayoutParams)auxView.getLayoutParams();
+        auxViewLayoutParams.gravity = viewGravity;
+
+        containerView.setOrientation(
+                auxiliaryViewPosition == AuxiliaryViewPosition.INLINE ?
+                        LinearLayout.HORIZONTAL :
+                        LinearLayout.VERTICAL);
+
+        if (auxiliaryViewPosition == AuxiliaryViewPosition.TOP ||
+                (auxiliaryViewPosition == AuxiliaryViewPosition.INLINE &&
+                        horizontalAlignment == HorizontalAlignment.RIGHT)) {
+            // Button comes after the auxiliary view. Make sure it is at the end
+            containerView.removeView(likeButton);
+            containerView.addView(likeButton);
+        } else {
+            // In all other cases, the button comes first
+            containerView.removeView(auxView);
+            containerView.addView(auxView);
+        }
+
+        switch (auxiliaryViewPosition) {
+            case TOP:
+                auxView.setPadding(edgePadding, edgePadding, edgePadding, internalPadding);
+                break;
+            case BOTTOM:
+                auxView.setPadding(edgePadding, internalPadding, edgePadding, edgePadding);
+                break;
+            case INLINE:
+                if (horizontalAlignment == HorizontalAlignment.RIGHT) {
+                    auxView.setPadding(edgePadding, edgePadding, internalPadding, edgePadding);
+                } else {
+                    auxView.setPadding(internalPadding, edgePadding, edgePadding, edgePadding);
+                }
+                break;
+        }
+    }
+
+    private void updateBoxCountCaretPosition() {
+        switch (auxiliaryViewPosition) {
+            case TOP:
+                likeBoxCountView.setCaretPosition(LikeBoxCountView.LikeBoxCountViewCaretPosition.BOTTOM);
+                break;
+            case BOTTOM:
+                likeBoxCountView.setCaretPosition(LikeBoxCountView.LikeBoxCountViewCaretPosition.TOP);
+                break;
+            case INLINE:
+                likeBoxCountView.setCaretPosition(
+                        horizontalAlignment == HorizontalAlignment.RIGHT ?
+                                LikeBoxCountView.LikeBoxCountViewCaretPosition.RIGHT :
+                                LikeBoxCountView.LikeBoxCountViewCaretPosition.LEFT);
+                break;
+        }
+    }
+
+    /**
+     * Callback interface that will be called when a network or other error is encountered
+     * while logging in.
+     */
+    public interface OnErrorListener {
+        /**
+         * Called when a network or other error is encountered.
+         * @param errorBundle     a FacebookException representing the error that was encountered.
+         */
+        void onError(Bundle errorBundle);
+    }
+
+    private class LikeControllerBroadcastReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            String intentAction = intent.getAction();
+            Bundle extras = intent.getExtras();
+            boolean shouldRespond = true;
+            if (extras != null) {
+                // See if an Id was set in the broadcast Intent. If it was, treat it as a filter.
+                String broadcastObjectId = extras.getString(LikeActionController.ACTION_OBJECT_ID_KEY);
+                shouldRespond = Utility.isNullOrEmpty(broadcastObjectId) ||
+                        Utility.areObjectsEqual(objectId, broadcastObjectId);
+            }
+
+            if (!shouldRespond) {
+                return;
+            }
+
+            if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_UPDATED.equals(intentAction)) {
+                updateLikeStateAndLayout();
+            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_ERROR.equals(intentAction)) {
+                if (onErrorListener != null) {
+                    onErrorListener.onError(extras);
+                }
+            } else if (LikeActionController.ACTION_LIKE_ACTION_CONTROLLER_DID_RESET.equals(intentAction)) {
+                // This will recreate the controller and associated objects
+                setObjectIdForced(objectId);
+                updateLikeStateAndLayout();
+            }
+        }
+    }
+
+    private class LikeActionControllerCreationCallback implements LikeActionController.CreationCallback {
+        private boolean isCancelled;
+
+        public void cancel() {
+            isCancelled = true;
+        }
+
+        @Override
+        public void onComplete(LikeActionController likeActionController) {
+            if (isCancelled) {
+                return;
+            }
+
+            associateWithLikeActionController(likeActionController);
+            updateLikeStateAndLayout();
+
+            LikeView.this.creationCallback = null;
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index b2b5be917..6450edaa8 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -19,10 +19,13 @@
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
+import android.content.ContextWrapper;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.res.TypedArray;
+import android.graphics.Canvas;
 import android.graphics.Typeface;
+import android.os.AsyncTask;
 import android.os.Bundle;
 import android.support.v4.app.Fragment;
 import android.util.AttributeSet;
@@ -34,10 +37,11 @@
 import com.facebook.*;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
-import com.facebook.model.GraphUser;
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
 import com.facebook.internal.Utility;
+import com.facebook.internal.Utility.FetchedAppSettings;
+import com.facebook.model.GraphUser;
 
 import java.util.Arrays;
 import java.util.Collections;
@@ -55,6 +59,24 @@
  * the {@link #setSession(com.facebook.Session)} method.
  */
 public class LoginButton extends Button {
+    
+    public static enum ToolTipMode {
+        /**
+         * Default display mode. A server query will determine if the tool tip should be displayed
+         * and, if so, what the string shown to the user should be.
+         */
+        DEFAULT,
+        
+        /**
+         * Display the tool tip with a local string--regardless of what the server returns 
+         */
+        DISPLAY_ALWAYS,
+        
+        /**
+         * Never display the tool tip--regardless of what the server says
+         */
+        NEVER_DISPLAY
+    }
 
     private static final String TAG = LoginButton.class.getName();
     private String applicationId = null;
@@ -70,6 +92,12 @@
     private Object parentNativeFragment;
     private LoginButtonProperties properties = new LoginButtonProperties();
     private String loginLogoutEventName = AnalyticsEvents.EVENT_LOGIN_VIEW_USAGE;
+    private OnClickListener listenerCallback;
+    private boolean nuxChecked;
+    private ToolTipPopup.Style nuxStyle = ToolTipPopup.Style.BLUE;
+    private ToolTipMode nuxMode = ToolTipMode.DEFAULT;
+    private long nuxDisplayTime = ToolTipPopup.DEFAULT_POPUP_DISPLAY_TIME;
+    private ToolTipPopup nuxPopup;
 
     static class LoginButtonProperties {
         private SessionDefaultAudience defaultAudience = SessionDefaultAudience.FRIENDS;
@@ -355,7 +383,7 @@ public void setReadPermissions(String... permissions) {
      * manage the setting of permissions outside of the LoginButton class altogether
      * (by managing the session explicitly).
      *
-     * @param permissions the read permissions to use
+     * @param permissions the publish permissions to use
      *
      * @throws UnsupportedOperationException if setReadPermissions has been called
      * @throws IllegalArgumentException if permissions is null or empty
@@ -381,7 +409,7 @@ public void setPublishPermissions(List<String> permissions) {
      * manage the setting of permissions outside of the LoginButton class altogether
      * (by managing the session explicitly).
      *
-     * @param permissions the read permissions to use
+     * @param permissions the publish permissions to use
      *
      * @throws UnsupportedOperationException if setReadPermissions has been called
      * @throws IllegalArgumentException if permissions is null or empty
@@ -470,6 +498,62 @@ public void setSessionStatusCallback(Session.StatusCallback callback) {
     public Session.StatusCallback getSessionStatusCallback() {
         return properties.getSessionStatusCallback();
     }
+    
+    /**
+     * Sets the style (background) of the Tool Tip popup. Currently a blue style and a black
+     * style are supported. Blue is default
+     * @param nuxStyle The style of the tool tip popup.
+     */
+    public void setToolTipStyle(ToolTipPopup.Style nuxStyle) {
+        this.nuxStyle = nuxStyle;
+    }
+    
+    /**
+     * Sets the mode of the Tool Tip popup. Currently supported modes are default (normal
+     * behavior), always_on (popup remains up until forcibly dismissed), and always_off (popup
+     * doesn't show)
+     * @param nuxMode The new mode for the tool tip
+     */
+    public void setToolTipMode(ToolTipMode nuxMode) {
+        this.nuxMode = nuxMode;
+    }
+    
+    /**
+     * Return the current {@link ToolTipMode} for this LoginButton
+     * @return The {@link ToolTipMode}
+     */
+    public ToolTipMode getToolTipMode() {
+        return nuxMode;
+    }
+    
+    /**
+     * Sets the amount of time (in milliseconds) that the tool tip will be shown to the user. The 
+     * default is {@value ToolTipPopup#DEFAULT_POPUP_DISPLAY_TIME}. Any value that is less than or
+     * equal to zero will cause the tool tip to be displayed indefinitely.
+     * @param displayTime The amount of time (in milliseconds) that the tool tip will be displayed
+     * to the user
+     */
+    public void setToolTipDisplayTime(long displayTime) {
+        this.nuxDisplayTime = displayTime;
+    }
+    
+    /**
+     * Gets the current amount of time (in ms) that the tool tip will be displayed to the user
+     * @return
+     */
+    public long getToolTipDisplayTime() {
+        return nuxDisplayTime;
+    }
+
+    /**
+     * Dismisses the Nux Tooltip if it is currently visible
+     */
+    public void dismissToolTip() {
+        if (nuxPopup != null) {
+            nuxPopup.dismiss();
+            nuxPopup = null;
+        }
+    }
 
     /**
      * Provides an implementation for {@link Activity#onActivityResult
@@ -528,7 +612,7 @@ public void onFinishInflate() {
     }
 
     private void finishInit() {
-        setOnClickListener(new LoginClickListener());
+        super.setOnClickListener(new LoginClickListener());
         setButtonText();
         if (!isInEditMode()) {
             sessionTracker = new SessionTracker(getContext(), new LoginButtonCallback(), null, false);
@@ -569,6 +653,54 @@ protected void onAttachedToWindow() {
             setButtonText();
         }
     }
+    
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (!nuxChecked && nuxMode != ToolTipMode.NEVER_DISPLAY && !isInEditMode()) {
+            nuxChecked = true;
+            checkNuxSettings();
+        }
+    }
+    
+    private void showNuxPerSettings(FetchedAppSettings settings) {
+        if (settings != null && settings.getNuxEnabled() && getVisibility() == View.VISIBLE) {
+            String nuxString = settings.getNuxContent();
+            displayNux(nuxString);
+        }
+    }
+    
+    private void displayNux(String nuxString) {
+        nuxPopup = new ToolTipPopup(nuxString, this);
+        nuxPopup.setStyle(nuxStyle);
+        nuxPopup.setNuxDisplayTime(nuxDisplayTime);
+        nuxPopup.show();
+    }
+    
+    private void checkNuxSettings() {
+        if (nuxMode == ToolTipMode.DISPLAY_ALWAYS) {
+            String nuxString = getResources().getString(R.string.com_facebook_tooltip_default);
+            displayNux(nuxString);
+        } else {
+            // kick off an async request
+            final String appId = Utility.getMetadataApplicationId(getContext());
+            AsyncTask<Void, Void, FetchedAppSettings> task = new AsyncTask<Void, Void, Utility.FetchedAppSettings>() {
+                @Override
+                protected FetchedAppSettings doInBackground(Void... params) {
+                    FetchedAppSettings settings = Utility.queryAppSettings(appId, false);
+                    return settings;
+                }
+
+                @Override
+                protected void onPostExecute(FetchedAppSettings result) {
+                    showNuxPerSettings(result);
+                }
+            };
+            task.execute((Void[])null);
+        }
+
+    }
 
     @Override
     protected void onDetachedFromWindow() {
@@ -576,6 +708,16 @@ protected void onDetachedFromWindow() {
         if (sessionTracker != null) {
             sessionTracker.stopTracking();
         }
+        dismissToolTip();
+    }
+
+    @Override
+    protected void onVisibilityChanged(View changedView, int visibility) {
+        super.onVisibilityChanged(changedView, visibility);
+        // If the visibility is not VISIBLE, we want to dismiss the nux if it is there
+        if (visibility != VISIBLE) {
+            dismissToolTip();
+        }
     }
 
     // For testing purposes only
@@ -659,6 +801,16 @@ public void onCompleted(GraphUser me,  Response response) {
         }
     }
 
+    /**
+     * Allow a developer to set the OnClickListener for the button.  This will be called back after we do any handling
+     * internally for login
+     * @param clickListener
+     */
+    @Override
+    public void setOnClickListener(OnClickListener clickListener) {
+        listenerCallback = clickListener;
+    }
+
     private class LoginClickListener implements OnClickListener {
 
         @Override
@@ -707,6 +859,11 @@ public void onClick(DialogInterface dialog, int which) {
                         openRequest = new Session.OpenRequest((android.app.Fragment)parentNativeFragment);
                     } else if (context instanceof Activity) {
                         openRequest = new Session.OpenRequest((Activity)context);
+                    } else if (context instanceof ContextWrapper) {
+                        Context baseContext = ((ContextWrapper)context).getBaseContext();
+                        if (baseContext instanceof Activity) {
+                            openRequest = new Session.OpenRequest((Activity)baseContext);
+                        }
                     }
 
                     if (openRequest != null) {
@@ -729,6 +886,10 @@ public void onClick(DialogInterface dialog, int which) {
             parameters.putInt("logging_in", (openSession != null) ? 0 : 1);
 
             logger.logSdkEvent(loginLogoutEventName, null, parameters);
+
+            if (listenerCallback != null) {
+                listenerCallback.onClick(v);
+            }
         }
     }
 
diff --git a/facebook/src/com/facebook/widget/PickerFragment.java b/facebook/src/com/facebook/widget/PickerFragment.java
index 7718a0c26..536c0c783 100644
--- a/facebook/src/com/facebook/widget/PickerFragment.java
+++ b/facebook/src/com/facebook/widget/PickerFragment.java
@@ -32,10 +32,13 @@
 import android.view.ViewStub;
 import android.view.animation.AlphaAnimation;
 import android.widget.*;
-import com.facebook.*;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Session;
+import com.facebook.SessionState;
 import com.facebook.android.R;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.SessionTracker;
+import com.facebook.model.GraphObject;
 
 import java.util.*;
 
@@ -94,6 +97,7 @@
     private final Class<T> graphObjectClass;
     private LoadingStrategy loadingStrategy;
     private SelectionStrategy selectionStrategy;
+    private Set<String> selectionHint;
     private ProgressBar activityCircle;
     private SessionTracker sessionTracker;
     private String titleText;
@@ -484,9 +488,21 @@ public String getDoneButtonText() {
      *                    if false, data will not be re-loaded if it is already displayed (or loading)
      */
     public void loadData(boolean forceReload) {
+        loadData(forceReload, null);
+    }
+
+    /**
+     * Causes the picker to load data from the service and display it to the user.
+     *
+     * @param forceReload if true, data will be loaded even if there is already data being displayed (or loading);
+     *                    if false, data will not be re-loaded if it is already displayed (or loading)
+     * @param selectIds ids to select, if they are present in the loaded data
+     */
+    public void loadData(boolean forceReload, Set<String> selectIds) {
         if (!forceReload && loadingStrategy.isDataPresentOrLoading()) {
             return;
         }
+        selectionHint = selectIds;
         loadDataSkippingRoundTripIfCached();
     }
 
@@ -748,6 +764,32 @@ void updateAdapter(SimpleGraphObjectCursor<T> data) {
             if (dataChanged && onDataChangedListener != null) {
                 onDataChangedListener.onDataChanged(PickerFragment.this);
             }
+            if (selectionHint != null && !selectionHint.isEmpty() && data != null) {
+                data.moveToFirst();
+                boolean changed = false;
+                for (int i = 0; i < data.getCount(); i++) {
+                    data.moveToPosition(i);
+                    T graphObject = data.getGraphObject();
+                    if (!graphObject.asMap().containsKey("id"))
+                        continue;
+                    Object obj = graphObject.getProperty("id");
+                    if (!(obj instanceof String)) {
+                        continue;
+                    }
+                    String id = (String) obj;
+                    if (selectionHint.contains(id)) {
+                        selectionStrategy.toggleSelection(id);
+                        selectionHint.remove(id);
+                        changed = true;
+                    }
+                    if (selectionHint.isEmpty()) {
+                        break;
+                    }
+                }
+                if (onSelectionChangedListener != null && changed) {
+                    onSelectionChangedListener.onSelectionChanged(PickerFragment.this);
+                }
+            }
         }
     }
 
@@ -903,7 +945,7 @@ public void clearResults() {
 
         public void startLoading(Request request) {
             if (loader != null) {
-                loader.startLoading(request, true);
+                loader.startLoading(request, canSkipRoundTripIfCached());
                 onStartLoading(loader, request);
             }
         }
@@ -927,6 +969,10 @@ protected void onLoadReset(GraphObjectPagingLoader<T> loader) {
         protected void onLoadFinished(GraphObjectPagingLoader<T> loader, SimpleGraphObjectCursor<T> data) {
             updateAdapter(data);
         }
+
+        protected boolean canSkipRoundTripIfCached() {
+            return true;
+        }
     }
 
     abstract class SelectionStrategy {
diff --git a/facebook/src/com/facebook/widget/PlacePickerFragment.java b/facebook/src/com/facebook/widget/PlacePickerFragment.java
index 58b277583..043700161 100644
--- a/facebook/src/com/facebook/widget/PlacePickerFragment.java
+++ b/facebook/src/com/facebook/widget/PlacePickerFragment.java
@@ -35,9 +35,9 @@
 import com.facebook.*;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
-import com.facebook.model.GraphPlace;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
+import com.facebook.model.GraphPlace;
 
 import java.util.*;
 
diff --git a/facebook/src/com/facebook/widget/ToolTipPopup.java b/facebook/src/com/facebook/widget/ToolTipPopup.java
new file mode 100644
index 000000000..0622416ce
--- /dev/null
+++ b/facebook/src/com/facebook/widget/ToolTipPopup.java
@@ -0,0 +1,235 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.widget;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewTreeObserver;
+import android.view.Window;
+import android.widget.FrameLayout;
+import android.widget.ImageView;
+import android.widget.PopupWindow;
+import android.widget.TextView;
+import com.facebook.android.R;
+
+import java.lang.ref.WeakReference;
+
+public class ToolTipPopup {
+    
+    public static enum Style {
+        /**
+         * The tool tip will be shown with a blue style; including a blue background and blue
+         * arrows.
+         */
+        BLUE,
+        
+        /**
+         * The tool tip will be shown with a black style; including a black background and black
+         * arrows.
+         */
+        BLACK
+    }
+    
+    /**
+     * The default time that the tool tip will be displayed
+     */
+    public static final long DEFAULT_POPUP_DISPLAY_TIME = 6000;
+    
+    private final String mText;
+    private final WeakReference<View> mAnchorViewRef;
+    private final Context mContext;
+    private PopupContentView mPopupContent;
+    private PopupWindow mPopupWindow;
+    private Style mStyle = Style.BLUE;
+    private long mNuxDisplayTime = DEFAULT_POPUP_DISPLAY_TIME;
+    
+    private final ViewTreeObserver.OnScrollChangedListener mScrollListener = 
+            new ViewTreeObserver.OnScrollChangedListener() {
+                @Override
+                public void onScrollChanged() {
+                    if (mAnchorViewRef.get() != null && 
+                            mPopupWindow != null && 
+                            mPopupWindow.isShowing()) {
+                        if (mPopupWindow.isAboveAnchor()) {
+                            mPopupContent.showBottomArrow();
+                        } else {
+                            mPopupContent.showTopArrow();
+                        }
+                    }
+                }
+            };
+    
+    /**
+     * Create a new ToolTipPopup
+     * @param text The text to be displayed in the tool tip
+     * @param anchor The view to anchor this tool tip to.
+     */
+    public ToolTipPopup(String text, View anchor) {
+        mText = text;
+        mAnchorViewRef = new WeakReference<View>(anchor);
+        mContext = anchor.getContext();
+    }
+    
+    /**
+     * Sets the {@link Style} of this tool tip.
+     * @param mStyle
+     */
+    public void setStyle(Style mStyle) {
+        this.mStyle = mStyle;
+    }
+    
+    /**
+     * Display this tool tip to the user
+     */
+    public void show() {
+        if (mAnchorViewRef.get() != null) {
+            mPopupContent = new PopupContentView(mContext);
+            TextView body = (TextView) mPopupContent.findViewById(
+                    R.id.com_facebook_tooltip_bubble_view_text_body);
+            body.setText(mText);
+            if (mStyle == Style.BLUE) {
+                mPopupContent.bodyFrame.setBackgroundResource(
+                        R.drawable.com_facebook_tooltip_blue_background);
+                mPopupContent.bottomArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_blue_bottomnub);
+                mPopupContent.topArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_blue_topnub);
+                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_blue_xout);
+            } else {
+                mPopupContent.bodyFrame.setBackgroundResource(
+                        R.drawable.com_facebook_tooltip_black_background);
+                mPopupContent.bottomArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_black_bottomnub);
+                mPopupContent.topArrow.setImageResource(
+                        R.drawable.com_facebook_tooltip_black_topnub);
+                mPopupContent.xOut.setImageResource(R.drawable.com_facebook_tooltip_black_xout);
+            }
+            
+            final Window window = ((Activity) mContext).getWindow();
+            final View decorView = window.getDecorView();
+            final int decorWidth = decorView.getWidth();
+            final int decorHeight = decorView.getHeight();
+            registerObserver();
+            mPopupContent.onMeasure(
+                    View.MeasureSpec.makeMeasureSpec(decorWidth, View.MeasureSpec.AT_MOST), 
+                    View.MeasureSpec.makeMeasureSpec(decorHeight, View.MeasureSpec.AT_MOST));
+            mPopupWindow = new PopupWindow(
+                    mPopupContent, 
+                    mPopupContent.getMeasuredWidth(),
+                    mPopupContent.getMeasuredHeight());
+            mPopupWindow.showAsDropDown(mAnchorViewRef.get());
+            updateArrows();
+            if (mNuxDisplayTime > 0) {
+                mPopupContent.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        dismiss();
+                    }
+                }, mNuxDisplayTime);
+            }
+            mPopupWindow.setTouchable(true);
+            mPopupContent.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    dismiss();
+                }
+            });
+        }
+    }
+    
+    /**
+     * Set the time (in milliseconds) the tool tip will be displayed. Any number less than or equal
+     * to 0 will cause the tool tip to be displayed indefinitely
+     * @param displayTime The amount of time (in milliseconds) to display the tool tip
+     */
+    public void setNuxDisplayTime(long displayTime) {
+        this.mNuxDisplayTime = displayTime;
+    }
+    
+    private void updateArrows() {
+        if (mPopupWindow != null && mPopupWindow.isShowing()) {
+            if (mPopupWindow.isAboveAnchor()) {
+                mPopupContent.showBottomArrow();
+            } else {
+                mPopupContent.showTopArrow();
+            }
+        }
+    }
+    
+    /**
+     * Dismiss the tool tip
+     */
+    public void dismiss() {
+        unregisterObserver();
+        if (mPopupWindow != null) {
+            mPopupWindow.dismiss();
+        }
+    }
+    
+    private void registerObserver() {
+        unregisterObserver();
+        if (mAnchorViewRef.get() != null) {
+            mAnchorViewRef.get().getViewTreeObserver().addOnScrollChangedListener(mScrollListener);
+        }
+    }
+    
+    private void unregisterObserver() {
+        if (mAnchorViewRef.get() != null) {
+            mAnchorViewRef.get().getViewTreeObserver().removeOnScrollChangedListener(mScrollListener);
+        }
+    }
+    
+    private class PopupContentView extends FrameLayout {
+        private ImageView topArrow;
+        private ImageView bottomArrow;
+        private View bodyFrame;
+        private ImageView xOut;
+        
+        public PopupContentView(Context context) {
+            super(context);
+            init();
+        }
+        
+        private void init() {
+            LayoutInflater inflater = LayoutInflater.from(getContext());
+            inflater.inflate(R.layout.com_facebook_tooltip_bubble, this);
+            topArrow = (ImageView) findViewById(R.id.com_facebook_tooltip_bubble_view_top_pointer);
+            bottomArrow = (ImageView) findViewById(
+                    R.id.com_facebook_tooltip_bubble_view_bottom_pointer);
+            bodyFrame = findViewById(R.id.com_facebook_body_frame);
+            xOut = (ImageView) findViewById(R.id.com_facebook_button_xout);
+        }
+        
+        public void showTopArrow() {
+            topArrow.setVisibility(View.VISIBLE);
+            bottomArrow.setVisibility(View.INVISIBLE);
+        }
+        
+        public void showBottomArrow() {
+            topArrow.setVisibility(View.INVISIBLE);
+            bottomArrow.setVisibility(View.VISIBLE);
+        }
+        
+        // Expose so popup content can be sized
+        @Override
+        public void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
+        }
+    }
+}
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index 70ac868d2..cf54a850a 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -37,7 +37,7 @@
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import com.facebook.*;
-import com.facebook.android.*;
+import com.facebook.android.R;
 import com.facebook.internal.Logger;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
@@ -51,7 +51,7 @@
 public class WebDialog extends Dialog {
     private static final String LOG_TAG = Logger.LOG_TAG_BASE + "WebDialog";
     private static final String DISPLAY_TOUCH = "touch";
-    private static final String USER_AGENT = "user_agent";
+    private static final int API_EC_DIALOG_CANCEL = 4201;
     static final String REDIRECT_URI = "fbconnect://success";
     static final String CANCEL_URI = "fbconnect://cancel";
     static final boolean DISABLE_SSL_CHECK_FOR_TESTING = false;
@@ -73,6 +73,7 @@
     public static final int DEFAULT_THEME = android.R.style.Theme_Translucent_NoTitleBar;
 
     private String url;
+    private String expectedRedirectUrl = REDIRECT_URI;
     private OnCompleteListener onCompleteListener;
     private WebView webView;
     private ProgressDialog spinner;
@@ -80,6 +81,7 @@
     private FrameLayout contentFrameLayout;
     private boolean listenerCalled = false;
     private boolean isDetached = false;
+    private boolean isDismissed = false;
 
     /**
      * Interface that implements a listener to be called when the user's interaction with the
@@ -135,10 +137,15 @@ public WebDialog(Context context, String action, Bundle parameters, int theme, O
         if (parameters == null) {
             parameters = new Bundle();
         }
+
+        // our webview client only handles the redirect uri we specify, so just hard code it here
+        parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
+
         parameters.putString(ServerProtocol.DIALOG_PARAM_DISPLAY, DISPLAY_TOUCH);
-        parameters.putString(ServerProtocol.DIALOG_PARAM_TYPE, USER_AGENT);
 
-        Uri uri = Utility.buildUri(ServerProtocol.getDialogAuthority(), ServerProtocol.DIALOG_PATH + action,
+        Uri uri = Utility.buildUri(
+                ServerProtocol.getDialogAuthority(),
+                ServerProtocol.getAPIVersion() + "/" + ServerProtocol.DIALOG_PATH + action,
                 parameters);
         this.url = uri.toString();
         onCompleteListener = listener;
@@ -164,6 +171,19 @@ public OnCompleteListener getOnCompleteListener() {
 
     @Override
     public void dismiss() {
+        if (isDismissed) {
+            // Some paths may cause dismiss() to be called recursively. Break the loop here.
+            return;
+        }
+        isDismissed = true;
+
+        // If dismiss() was called without sending a result to the listener, let's default to a "cancel" result.
+        // This will be the case when the user taps the OS-back-button, or the cross-image, or outside the loading
+        // interstitial.
+        if (!listenerCalled) {
+            sendCancelToListener();
+        }
+
         if (webView != null) {
             webView.stopLoading();
         }
@@ -191,21 +211,13 @@ public void onAttachedToWindow() {
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        setOnCancelListener(new OnCancelListener() {
-            @Override
-            public void onCancel(DialogInterface dialogInterface) {
-                sendCancelToListener();
-            }
-        });
-
         spinner = new ProgressDialog(getContext());
         spinner.requestWindowFeature(Window.FEATURE_NO_TITLE);
         spinner.setMessage(getContext().getString(R.string.com_facebook_loading));
         spinner.setOnCancelListener(new OnCancelListener() {
             @Override
             public void onCancel(DialogInterface dialogInterface) {
-                sendCancelToListener();
-                WebDialog.this.dismiss();
+                dismiss();
             }
         });
 
@@ -241,6 +253,27 @@ public void onCancel(DialogInterface dialogInterface) {
         setContentView(contentFrameLayout);
     }
 
+    protected void setExpectedRedirectUrl(String expectedRedirectUrl) {
+        this.expectedRedirectUrl = expectedRedirectUrl;
+    }
+
+    protected Bundle parseResponseUri(String urlString) {
+        Uri u = Uri.parse(urlString);
+
+        Bundle b = Utility.parseUrlQueryString(u.getQuery());
+        b.putAll(Utility.parseUrlQueryString(u.getFragment()));
+
+        return b;
+    }
+
+    protected boolean isListenerCalled() {
+        return listenerCalled;
+    }
+
+    protected WebView getWebView() {
+        return webView;
+    }
+
     private void calculateSize() {
         WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
         Display display = wm.getDefaultDisplay();
@@ -287,14 +320,16 @@ private int getScaledSize(int screenSize, float density, int noPaddingSize, int
         return (int) (screenSize * scaleFactor);
     }
 
-    private void sendSuccessToListener(Bundle values) {
+    protected void sendSuccessToListener(Bundle values) {
         if (onCompleteListener != null && !listenerCalled) {
             listenerCalled = true;
             onCompleteListener.onComplete(values, null);
+
+            dismiss();
         }
     }
 
-    private void sendErrorToListener(Throwable error) {
+    protected void sendErrorToListener(Throwable error) {
         if (onCompleteListener != null && !listenerCalled) {
             listenerCalled = true;
             FacebookException facebookException = null;
@@ -304,10 +339,12 @@ private void sendErrorToListener(Throwable error) {
                 facebookException = new FacebookException(error);
             }
             onCompleteListener.onComplete(null, facebookException);
+
+            dismiss();
         }
     }
 
-    private void sendCancelToListener() {
+    protected void sendCancelToListener() {
         sendErrorToListener(new FacebookOperationCanceledException());
     }
 
@@ -317,8 +354,7 @@ private void createCrossImage() {
         crossImageView.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                sendCancelToListener();
-                WebDialog.this.dismiss();
+                dismiss();
             }
         });
         Drawable crossDrawable = getContext().getResources().getDrawable(R.drawable.com_facebook_close);
@@ -332,7 +368,18 @@ public void onClick(View v) {
     @SuppressLint("SetJavaScriptEnabled")
     private void setUpWebView(int margin) {
         LinearLayout webViewContainer = new LinearLayout(getContext());
-        webView = new WebView(getContext());
+        webView = new WebView(getContext()) {
+            /* Prevent NPE on Motorola 2.2 devices
+             * See https://groups.google.com/forum/?fromgroups=#!topic/android-developers/ktbwY2gtLKQ
+             */
+            @Override
+            public void onWindowFocusChanged(boolean hasWindowFocus) {
+                try {
+                    super.onWindowFocusChanged(hasWindowFocus);
+                } catch (NullPointerException e) {
+                }
+            }
+        };
         webView.setVerticalScrollBarEnabled(false);
         webView.setHorizontalScrollBarEnabled(false);
         webView.setWebViewClient(new DialogWebViewClient());
@@ -342,6 +389,7 @@ private void setUpWebView(int margin) {
                 ViewGroup.LayoutParams.MATCH_PARENT));
         webView.setVisibility(View.INVISIBLE);
         webView.getSettings().setSavePassword(false);
+        webView.getSettings().setSaveFormData(false);
 
         webViewContainer.setPadding(margin, margin, margin, margin);
         webViewContainer.addView(webView);
@@ -354,8 +402,8 @@ private void setUpWebView(int margin) {
         @SuppressWarnings("deprecation")
         public boolean shouldOverrideUrlLoading(WebView view, String url) {
             Utility.logd(LOG_TAG, "Redirect URL: " + url);
-            if (url.startsWith(WebDialog.REDIRECT_URI)) {
-                Bundle values = Util.parseUrl(url);
+            if (url.startsWith(WebDialog.this.expectedRedirectUrl)) {
+                Bundle values = parseResponseUri(url);
 
                 String error = values.getString("error");
                 if (error == null) {
@@ -382,16 +430,15 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
                 } else if (error != null && (error.equals("access_denied") ||
                         error.equals("OAuthAccessDeniedException"))) {
                     sendCancelToListener();
+                } else if (errorCode == API_EC_DIALOG_CANCEL) {
+                    sendCancelToListener();
                 } else {
                     FacebookRequestError requestError = new FacebookRequestError(errorCode, error, errorMessage);
                     sendErrorToListener(new FacebookServiceException(requestError, errorMessage));
                 }
-
-                WebDialog.this.dismiss();
                 return true;
             } else if (url.startsWith(WebDialog.CANCEL_URI)) {
                 sendCancelToListener();
-                WebDialog.this.dismiss();
                 return true;
             } else if (url.contains(DISPLAY_TOUCH)) {
                 return false;
@@ -407,7 +454,6 @@ public void onReceivedError(WebView view, int errorCode,
                 String description, String failingUrl) {
             super.onReceivedError(view, errorCode, description, failingUrl);
             sendErrorToListener(new FacebookDialogException(description, errorCode, failingUrl));
-            WebDialog.this.dismiss();
         }
 
         @Override
@@ -417,9 +463,8 @@ public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError e
             } else {
                 super.onReceivedSslError(view, handler, error);
 
-                sendErrorToListener(new FacebookDialogException(null, ERROR_FAILED_SSL_HANDSHAKE, null));
                 handler.cancel();
-                WebDialog.this.dismiss();
+                sendErrorToListener(new FacebookDialogException(null, ERROR_FAILED_SSL_HANDSHAKE, null));
             }
         }
 
@@ -457,6 +502,22 @@ public void onPageFinished(WebView view, String url) {
         private OnCompleteListener listener;
         private Bundle parameters;
 
+        protected BuilderBase(Context context, String action) {
+            Session activeSession = Session.getActiveSession();
+            if (activeSession != null && activeSession.isOpened()) {
+                this.session = activeSession;
+            } else {
+                String applicationId = Utility.getMetadataApplicationId(context);
+                if (applicationId != null) {
+                    this.applicationId = applicationId;
+                } else {
+                    throw new FacebookException("Attempted to create a builder without an open" +
+                            " Active Session or a valid default Application ID.");
+                }
+            }
+            finishInit(context, action, null);
+        }
+
         protected BuilderBase(Context context, Session session, String action, Bundle parameters) {
             Validate.notNull(session, "session");
             if (!session.isOpened()) {
@@ -468,6 +529,9 @@ protected BuilderBase(Context context, Session session, String action, Bundle pa
         }
 
         protected BuilderBase(Context context, String applicationId, String action, Bundle parameters) {
+            if (applicationId == null) {
+                applicationId = Utility.getMetadataApplicationId(context);
+            }
             Validate.notNullOrEmpty(applicationId, "applicationId");
             this.applicationId = applicationId;
 
@@ -514,10 +578,6 @@ public WebDialog build() {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_APP_ID, applicationId);
             }
 
-            if (!parameters.containsKey(ServerProtocol.DIALOG_PARAM_REDIRECT_URI)) {
-                parameters.putString(ServerProtocol.DIALOG_PARAM_REDIRECT_URI, REDIRECT_URI);
-            }
-
             return new WebDialog(context, action, parameters, theme, listener);
         }
 
@@ -553,9 +613,21 @@ private void finishInit(Context context, String action, Bundle parameters) {
     }
 
     /**
-     * Provides a builder that allows construction of an arbitary Facebook web dialog.
+     * Provides a builder that allows construction of an arbitrary Facebook web dialog.
      */
     public static class Builder extends BuilderBase<Builder> {
+        /**
+         * Constructor that builds a dialog using either the active session, or the application
+         * id specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         * @param action the portion of the dialog URL following www.facebook.com/dialog/.
+         *               See https://developers.facebook.com/docs/reference/dialogs/ for details.
+         */
+        public Builder(Context context, String action) {
+            super(context, action);
+        }
+
         /**
          * Constructor that builds a dialog for an authenticated user.
          *
@@ -600,7 +672,17 @@ public Builder(Context context, String applicationId, String action, Bundle para
         private static final String DESCRIPTION_PARAM = "description";
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public FeedDialogBuilder(Context context) {
+            super(context, FEED_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Feed Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -611,21 +693,37 @@ public FeedDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Feed Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
+         * @param session    the Session representing an authenticating user to use for
+         *                   showing the dialog; must not be null, and must be opened.
          * @param parameters a Bundle containing parameters to pass as part of the
          *                   dialog URL. No validation is done on these parameters; it is
          *                   the caller's responsibility to ensure they are valid. For more information,
          *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
          *                   https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
-         * @param session    the Session representing an authenticating user to use for
-         *                   showing the dialog; must not be null, and must be opened.
          */
         public FeedDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, FEED_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Feed Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/feed/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/feed/</a>.
+         */
+        public FeedDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, FEED_DIALOG, parameters);
+        }
+
         /**
          * Sets the ID of the profile that is posting to Facebook. If none is specified,
          * the default is "me". This profile must be either the authenticated user or a
@@ -641,7 +739,8 @@ public FeedDialogBuilder setFrom(String id) {
 
         /**
          * Sets the ID of the profile that the story will be published to. If not specified, it
-         * will default to the same profile that the story is being published from.
+         * will default to the same profile that the story is being published from. The ID must be a friend who also
+         * uses your app.
          *
          * @param id Facebook ID of the profile to post to
          * @return the builder
@@ -686,7 +785,7 @@ public FeedDialogBuilder setSource(String source) {
         }
 
         /**
-         * Sets the name of the item being shared.
+         * Sets the name of the URL being shared. This method only has effect if setLink is called.
          *
          * @param name the name
          * @return the builder
@@ -697,7 +796,7 @@ public FeedDialogBuilder setName(String name) {
         }
 
         /**
-         * Sets the caption to be displayed.
+         * Sets the caption of the URL being shared. This method only has effect if setLink is called.
          *
          * @param caption the caption
          * @return the builder
@@ -708,7 +807,7 @@ public FeedDialogBuilder setCaption(String caption) {
         }
 
         /**
-         * Sets the description to be displayed.
+         * Sets the description of the URL being shared. This method only has effect if setLink is called.
          *
          * @param description the description
          * @return the builder
@@ -731,7 +830,17 @@ public FeedDialogBuilder setDescription(String description) {
         private static final String TITLE_PARAM = "title";
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using either the active session, or the application
+         * ID specified in the application/meta-data.
+         *
+         * @param context the Context within which the dialog will be shown.
+         */
+        public RequestsDialogBuilder(Context context) {
+            super(context, APPREQUESTS_DIALOG);
+        }
+
+        /**
+         * Constructor that builds a Requests Dialog using the provided session.
          *
          * @param context the Context within which the dialog will be shown.
          * @param session the Session representing an authenticating user to use for
@@ -742,21 +851,37 @@ public RequestsDialogBuilder(Context context, Session session) {
         }
 
         /**
-         * Constructor.
+         * Constructor that builds a Requests Dialog using the provided session and parameters.
          *
          * @param context    the Context within which the dialog will be shown.
+         * @param session    the Session representing an authenticating user to use for
+         *                   showing the dialog; must not be null, and must be opened.
          * @param parameters a Bundle containing parameters to pass as part of the
          *                   dialog URL. No validation is done on these parameters; it is
          *                   the caller's responsibility to ensure they are valid. For more information,
          *                   see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
          *                   https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
-         * @param session    the Session representing an authenticating user to use for
-         *                   showing the dialog; must not be null, and must be opened.
          */
         public RequestsDialogBuilder(Context context, Session session, Bundle parameters) {
             super(context, session, APPREQUESTS_DIALOG, parameters);
         }
 
+        /**
+         * Constructor that builds a Requests Dialog using the provided application ID and parameters.
+         *
+         * @param context       the Context within which the dialog will be shown.
+         * @param applicationId the application ID to use. If null, the application ID specified in the
+         *                      application/meta-data will be used instead.
+         * @param parameters    a Bundle containing parameters to pass as part of the
+         *                      dialog URL. No validation is done on these parameters; it is
+         *                      the caller's responsibility to ensure they are valid. For more information,
+         *                      see <a href="https://developers.facebook.com/docs/reference/dialogs/requests/">
+         *                      https://developers.facebook.com/docs/reference/dialogs/requests/</a>.
+         */
+        public RequestsDialogBuilder(Context context, String applicationId, Bundle parameters) {
+            super(context, applicationId, APPREQUESTS_DIALOG, parameters);
+        }
+
         /**
          * Sets the string users receiving the request will see. The maximum length
          * is 60 characters.
diff --git a/facebook/tests/AndroidManifest.xml b/facebook/tests/AndroidManifest.xml
index 1509af65d..f3277e761 100644
--- a/facebook/tests/AndroidManifest.xml
+++ b/facebook/tests/AndroidManifest.xml
@@ -5,7 +5,7 @@
           android:versionCode="1"
           android:versionName="1.0">
     <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="7"/>
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="19"/>
     <!-- We add an application tag here just so that we can indicate that
          this package needs to link against the android.test library,
          which is needed when building test cases. -->
@@ -19,6 +19,7 @@
         <activity android:name="com.facebook.LoginActivity" />
         <activity android:name="com.facebook.FacebookActivityTests$FacebookTestActivity" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <meta-data android:name="com.facebook.sdk.ClientToken" android:value="@string/client_token"/>
     </application>
     <!--
     This declares that this application uses the instrumentation test runner targeting
diff --git a/facebook/tests/SdkTests.eml b/facebook/tests/SdkTests.eml
deleted file mode 100644
index 3bbc2f8d5..000000000
--- a/facebook/tests/SdkTests.eml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<component>
-	<exclude-output/>
-	<contentEntry url="file://$MODULE_DIR$"/>
-	<module name="SdkTestApp" scope="PROVIDED"/>
-</component>
diff --git a/facebook/tests/SdkTests.iml b/facebook/tests/SdkTests.iml
deleted file mode 100644
index 2e7f31a2f..000000000
--- a/facebook/tests/SdkTests.iml
+++ /dev/null
@@ -1,35 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="1">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="1" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="2" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <option name="PACK_TEST_CODE" value="true" />
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/assets" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="module" module-name="SdkTestApp" scope="PROVIDED" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/facebook/tests/build.gradle b/facebook/tests/build.gradle
index 1a7be02eb..df41829e9 100644
--- a/facebook/tests/build.gradle
+++ b/facebook/tests/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
@@ -6,12 +6,16 @@ dependencies {
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
@@ -19,11 +23,11 @@ android {
             manifest.srcFile 'AndroidManifest.xml'
             java.srcDirs = ['src']
             res.srcDirs = ['res']
+            assets.srcDirs = ['assets']
         }
 
         instrumentTest {
             java.srcDirs = ['src']
-            assets.srcDirs = ['assets']
         }
     }
 }
diff --git a/facebook/tests/project.properties b/facebook/tests/project.properties
index 705d57d8d..0506ceb9b 100644
--- a/facebook/tests/project.properties
+++ b/facebook/tests/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 test.runner=android.test.AndroidTestRunner
 android.library.reference.1=../../facebook
diff --git a/facebook/tests/res/values/strings.xml b/facebook/tests/res/values/strings.xml
index 05dacbbfd..2331e1e47 100644
--- a/facebook/tests/res/values/strings.xml
+++ b/facebook/tests/res/values/strings.xml
@@ -17,4 +17,5 @@
 
 <resources>
     <string name="app_id">1234567890</string>
+    <string name="client_token">abcdef123456</string>
 </resources>
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
index 09220b0f9..161070b0f 100644
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ b/facebook/tests/src/com/facebook/AccessTokenTests.java
@@ -24,6 +24,7 @@
 import android.test.suitebuilder.annotation.SmallTest;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
+import junit.framework.Assert;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -34,11 +35,9 @@
 public final class AccessTokenTests extends AndroidTestCase {
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testEmptyToken() {
         List<String> permissions = Utility.arrayList();
-        AccessToken token = AccessToken.createEmptyToken(permissions);
+        AccessToken token = AccessToken.createEmptyToken();
         TestUtils.assertSamePermissions(permissions, token);
         assertEquals("", token.getToken());
         assertTrue(token.isInvalid());
@@ -46,20 +45,6 @@ public void testEmptyToken() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testEmptyTokenWithPermissions() {
-        List<String> permissions = Utility.arrayList("stream_publish");
-        AccessToken token = AccessToken.createEmptyToken(permissions);
-        TestUtils.assertSamePermissions(permissions, token);
-        assertEquals("", token.getToken());
-        assertTrue(token.isInvalid());
-        assertTrue(token.getExpires().before(new Date()));
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromDialog() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -76,8 +61,27 @@ public void testFromDialog() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
+    public void testCreateFromRefreshFailure() {
+        AccessToken accessToken = AccessToken.createFromString(
+                "a token",
+                Utility.arrayList("stream_publish"),
+                AccessTokenSource.WEB_VIEW);
+
+        String token = "AnImaginaryTokenValue";
+
+        Bundle bundle = new Bundle();
+        bundle.putString("access_token", "AnImaginaryTokenValue");
+        bundle.putString("expires_in", "60");
+
+        try {
+            AccessToken.createFromRefresh(accessToken, bundle);
+            Assert.fail("Expected exception");
+        } catch (FacebookException ex) {
+            Assert.assertEquals("Invalid token source: " + AccessTokenSource.WEB_VIEW, ex.getMessage());
+        }
+    }
+
+    @SmallTest
     public void testFromSSOWithExpiresString() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -97,8 +101,6 @@ public void testFromSSOWithExpiresString() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromSSOWithExpiresLong() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -117,8 +119,6 @@ public void testFromSSOWithExpiresLong() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromNativeLogin() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -138,10 +138,9 @@ public void testFromNativeLogin() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCacheRoundtrip() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
+        ArrayList<String> declinedPermissions = Utility.arrayList("no you may not", "no soup for you");
         String token = "AnImaginaryTokenValue";
         Date later = TestUtils.nowPlusSeconds(60);
         Date earlier = TestUtils.nowPlusSeconds(-60);
@@ -152,6 +151,7 @@ public void testCacheRoundtrip() {
         TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_WEB);
         TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
         TokenCachingStrategy.putPermissions(bundle, permissions);
+        TokenCachingStrategy.putDeclinedPermissions(bundle, declinedPermissions);
 
         AccessToken accessToken = AccessToken.createFromCache(bundle);
         TestUtils.assertSamePermissions(permissions, accessToken);
@@ -164,8 +164,6 @@ public void testCacheRoundtrip() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCachePutGet() {
         Bundle bundle = new Bundle();
 
@@ -210,8 +208,6 @@ public void testCachePutGet() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testBasicSerialization() throws IOException {
         AccessToken accessToken = AccessToken.createFromString("a token",
                 Arrays.asList("permission_1", "permission_2"), AccessTokenSource.WEB_VIEW);
@@ -225,11 +221,9 @@ public void testBasicSerialization() throws IOException {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testPermissionsAreImmutable() {
         List<String> permissions = Arrays.asList("go to Jail", "do not pass Go");
-        AccessToken accessToken = new AccessToken("some token", new Date(), permissions,
+        AccessToken accessToken = new AccessToken("some token", new Date(), permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, new Date());
 
         permissions = accessToken.getPermissions();
@@ -242,8 +236,6 @@ public void testPermissionsAreImmutable() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCreateFromExistingTokenDefaults() {
         final String token = "A token of my esteem";
 
@@ -259,8 +251,6 @@ public void testCreateFromExistingTokenDefaults() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCreateFromExistingToken() {
         final String token = "A token of my esteem";
         final List<String> permissions = Arrays.asList("walk", "chew gum");
diff --git a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
index aedeccf27..360b0d668 100644
--- a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
+++ b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
@@ -18,6 +18,7 @@
 
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 
 import java.io.FileInputStream;
@@ -41,25 +42,36 @@ public void testSimpleCall() throws InterruptedException {
 
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logEvent("an_event");
-        logger2.logEvent("another_event");
-
-        logger1.flush();
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logEvent("an_event");
+            logger2.logEvent("another_event");
+
+            // test illegal event name and event key, should not crash in non-debug environment.
+            logger1.logEvent("$illegal_event_name");
+            Bundle params = new Bundle();
+            params.putString("illegal%key", "good_value");
+            logger1.logEvent("legal_event_name", params);
+            char[] val = {'b', 'a', 'd'};
+            params.putCharArray("legal_key", val);
+            logger1.logEvent("legal_event",params);
+
+            logger1.flush();
+
+            waitForBroadcastReceiver.waitForExpectedCalls();
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 
     public void testPersistedEvents() throws IOException, ClassNotFoundException {
@@ -68,49 +80,50 @@ public void testPersistedEvents() throws IOException, ClassNotFoundException {
         final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
 
-        getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
+            getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
 
-        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
-        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
+            TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
+            AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
 
-        logger1.logEvent("an_event");
+            logger1.logEvent("an_event");
 
-        AppEventsLogger.onContextStop();
+            AppEventsLogger.onContextStop();
 
-        FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
-        assertNotNull(fis);
+            FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
+            assertNotNull(fis);
 
-        ObjectInputStream ois = new ObjectInputStream(fis);
-        Object obj = ois.readObject();
-        ois.close();
+            ObjectInputStream ois = new ObjectInputStream(fis);
+            Object obj = ois.readObject();
+            ois.close();
 
-        assertTrue(obj instanceof HashMap);
+            assertTrue(obj instanceof HashMap);
 
-        logger1.flush();
+            logger1.logEvent("another_event");
 
-        logger1.logEvent("another_event");
+            waitForBroadcastReceiver.incrementExpectCount();
+            logger1.flush();
 
-        waitForBroadcastReceiver.incrementExpectCount();
-        logger1.flush();
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-        List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
-        assertEquals(1, receivedIntents.size());
+            waitForBroadcastReceiver.waitForExpectedCalls();
+            List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
+            assertEquals(1, receivedIntents.size());
 
-        Intent intent = receivedIntents.get(0);
-        assertNotNull(intent);
+            Intent intent = receivedIntents.get(0);
+            assertNotNull(intent);
 
-        assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+            assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 
     @SuppressWarnings("deprecation")
@@ -126,21 +139,25 @@ public void testInsightsLoggerCompatibility() throws InterruptedException {
 
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logConversionPixel("foo", 1.0);
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logConversionPixel("foo", 1.0);
+
+            // For some reason the flush can take an extraordinary amount of time, so increasing
+            // the timeout here to prevent failures.
+            waitForBroadcastReceiver.waitForExpectedCalls(600 * 1000);
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 }
diff --git a/facebook/tests/src/com/facebook/AppLinkDataTests.java b/facebook/tests/src/com/facebook/AppLinkDataTests.java
new file mode 100644
index 000000000..42a22c9b5
--- /dev/null
+++ b/facebook/tests/src/com/facebook/AppLinkDataTests.java
@@ -0,0 +1,137 @@
+package com.facebook;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.net.Uri;
+import android.os.Bundle;
+
+public class AppLinkDataTests extends FacebookTestCase {
+    private static final String TARGET_URI_STRING = "http://test.app/foo";
+    private static final String FB_REF_KEY = "fb_ref";
+    private static final String FB_REF_VALUE = "foobar";
+    private static final String REFERER_DATA_KEY = "referer_data";
+    private static final String EXTRA_ARGS_KEY = "extra_args";
+    private static final String EXTRA_ARGS_VALUE = "extra_value";
+    private static final String TARGET_URL_KEY = "target_url";
+    private static final String USER_AGENT_KEY = "user_agent";
+    private static final String USER_AGENT_VALUE = "foobarUserAgent";
+
+    private static final String JSON_DATA_REGULAR =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_REGULAR_WITH_NESTED_ARRAY =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"ref\": \"" + FB_REF_VALUE + "\","
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\","
+            + "    \"other\": [ [1, 2], [3, 4] ]"
+            + "  }"
+            + "}";
+
+    private static final String JSON_DATA_WITH_REFERER_DATA =
+            "{"
+            + "\"version\":2,"
+            + "\"bridge_args\": {\"method\": \"applink\"},"
+            + "\"method_args\": {"
+            + "    \"referer_data\" : {"
+            + "      \"" + FB_REF_KEY + "\": \"" + FB_REF_VALUE + "\","
+            + "      \"" + EXTRA_ARGS_KEY + "\": \"" + EXTRA_ARGS_VALUE + "\""
+            + "    },"
+            + "    \"" + TARGET_URL_KEY + "\": \"" + TARGET_URI_STRING + "\""
+            + "  }"
+            + "}";
+
+
+    private static class MockActivityWithAppLinkData extends Activity {
+        public Intent getIntent() {
+            Uri targetUri = Uri.parse(TARGET_URI_STRING);
+            Intent intent = new Intent(Intent.ACTION_VIEW, targetUri);
+            Bundle applinks = new Bundle();
+            Bundle refererData = new Bundle();
+            refererData.putString(FB_REF_KEY, FB_REF_VALUE);
+            refererData.putString(EXTRA_ARGS_KEY, EXTRA_ARGS_VALUE);
+            applinks.putBundle(REFERER_DATA_KEY, refererData);
+            applinks.putString(TARGET_URL_KEY, TARGET_URI_STRING);
+            applinks.putString(USER_AGENT_KEY, USER_AGENT_VALUE);
+            intent.putExtra("al_applink_data", applinks);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithJsonData extends Activity {
+        private boolean useRefererData;
+
+        public MockActivityWithJsonData(boolean useRefererData) {
+            this.useRefererData = useRefererData;
+        }
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY,
+                    useRefererData ? JSON_DATA_WITH_REFERER_DATA : JSON_DATA_REGULAR);
+            return intent;
+        }
+    }
+
+    private static class MockActivityWithErrorJsonData extends Activity {
+        public Intent getIntent() {
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.putExtra(AppLinkData.BUNDLE_APPLINK_ARGS_KEY, JSON_DATA_REGULAR_WITH_NESTED_ARRAY);
+            return intent;
+        }
+    }
+
+    public void testCreateFromAlApplinkData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithAppLinkData());
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertEquals("user agent", USER_AGENT_VALUE, args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data not null", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+
+    public void testCreateFromJson() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(false));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNull("referer data", refererData);
+    }
+
+    public void testCreateFromJsonWithNestedArray() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithErrorJsonData());
+        assertNull(appLinkData);
+    }
+
+
+    public void testCreateFromJsonWithRefererData() {
+        AppLinkData appLinkData = AppLinkData.createFromActivity(new MockActivityWithJsonData(true));
+        assertNotNull("app link data not null", appLinkData);
+        assertEquals("ref param", FB_REF_VALUE, appLinkData.getRef());
+        assertEquals("target_url", TARGET_URI_STRING, appLinkData.getTargetUri().toString());
+        Bundle args = appLinkData.getArgumentBundle();
+        assertNotNull("app link args not null", args);
+        assertNull("user agent", args.getString(USER_AGENT_KEY));
+        Bundle refererData = appLinkData.getRefererData();
+        assertNotNull("referer data", refererData);
+        assertEquals("ref param in referer data", FB_REF_VALUE, refererData.getString(FB_REF_KEY));
+        assertEquals("extra param", EXTRA_ARGS_VALUE, refererData.getString(EXTRA_ARGS_KEY));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index 07857df61..ec219a6ef 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -95,7 +95,8 @@ public void testExecuteBatchWithNullRequestThrows() throws Exception {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel", null, null, new ExpectSuccessCallback() {
             @Override
             protected void performAsserts(Response response) {
                 assertNotNull(response);
@@ -115,7 +116,8 @@ protected void performAsserts(Response response) {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() {
-        Request request = new Request(null, "TourEiffel", null, null, new ExpectSuccessCallback() {
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel", null, null, new ExpectSuccessCallback() {
             @Override
             protected void performAsserts(Response response) {
                 assertNotNull(response);
@@ -136,7 +138,8 @@ protected void performAsserts(Response response) {
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetFailureCase() {
-        Request request = new Request(null, "-1", null, null, new ExpectFailureCallback());
+        final TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "-1", null, null, new ExpectFailureCallback());
 
         TestRequestAsyncTask task = new TestRequestAsyncTask(request);
 
@@ -235,7 +238,7 @@ public void run() {
 
     @LargeTest
     public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
+        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos", "publish_actions");
 
         final int image1Size = 120;
         final int image2Size = 150;
diff --git a/facebook/tests/src/com/facebook/AuthorizationClientTests.java b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
index 0a96adf35..f931578dd 100644
--- a/facebook/tests/src/com/facebook/AuthorizationClientTests.java
+++ b/facebook/tests/src/com/facebook/AuthorizationClientTests.java
@@ -229,110 +229,6 @@ public void testGetTokenHandlesNoResult() {
         assertEquals(PERMISSIONS.size(), request.getPermissions().size());
     }
 
-    // KatanaLoginDialogAuthHandler tests
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesSuccess() {
-        Bundle bundle = new Bundle();
-        bundle.putStringArrayList(NativeProtocol.EXTRA_PERMISSIONS, PERMISSIONS);
-        bundle.putLong(NativeProtocol.EXTRA_EXPIRES_SECONDS_SINCE_EPOCH, new Date().getTime() / 1000 + EXPIRES_IN_DELTA);
-        bundle.putString(NativeProtocol.EXTRA_ACCESS_TOKEN, ACCESS_TOKEN);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.SUCCESS, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNotNull(token);
-        assertEquals(ACCESS_TOKEN, token.getToken());
-        assertDateDiffersWithinDelta(new Date(), token.getExpires(), EXPIRES_IN_DELTA * 1000, 1000);
-        assertEquals(PERMISSIONS, token.getPermissions());
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesCancel() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_USER_CANCELED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_CANCELED, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.CANCEL, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNull(client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesError() {
-        Bundle bundle = new Bundle();
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, ERROR_MESSAGE);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNotNull(client.result);
-        assertEquals(AuthorizationClient.Result.Code.ERROR, client.result.code);
-
-        AccessToken token = client.result.token;
-        assertNull(token);
-        assertNotNull(client.result.errorMessage);
-        assertEquals(ERROR_MESSAGE, client.result.errorMessage);
-    }
-
-    @SmallTest
-    @MediumTest
-    @LargeTest
-    public void testLoginDialogHandlesDisabled() {
-        Bundle bundle = new Bundle();
-        bundle.putInt(NativeProtocol.EXTRA_PROTOCOL_VERSION, NativeProtocol.PROTOCOL_VERSION_20121101);
-        bundle.putString(NativeProtocol.STATUS_ERROR_TYPE, NativeProtocol.ERROR_SERVICE_DISABLED);
-
-        Intent intent = new Intent();
-        intent.putExtras(bundle);
-
-        MockAuthorizationClient client = new MockAuthorizationClient();
-        AuthorizationClient.KatanaLoginDialogAuthHandler handler = client.new KatanaLoginDialogAuthHandler();
-
-        AuthorizationClient.AuthorizationRequest request = createRequest();
-        client.setRequest(request);
-        handler.onActivityResult(0, Activity.RESULT_OK, intent);
-
-        assertNull(client.result);
-        assertTrue(client.triedNextHandler);
-    }
-
     // KatanaProxyAuthHandler tests
 
     @SmallTest
@@ -469,7 +365,7 @@ public Response createResponse() {
                     String fbid = mapAccessTokenToFbid.get(accessToken);
                     GraphUser user = GraphObject.Factory.create(GraphUser.class);
                     user.setId(fbid);
-                    return new Response(this, null, user, false);
+                    return new Response(this, null, null, user, false);
                 }
             };
         }
@@ -492,7 +388,7 @@ public Response createResponse() {
                     GraphMultiResult result = GraphObject.Factory.create(GraphMultiResult.class);
                     result.setProperty("data", data);
 
-                    return new Response(this, null, result, false);
+                    return new Response(this, null, null, result, false);
                 }
             };
         }
@@ -544,7 +440,9 @@ public void testReauthorizationWithSameFbidSucceeds() throws Exception {
         AccessToken resultToken = client.result.token;
         assertNotNull(resultToken);
         assertEquals(USER_1_ACCESS_TOKEN, resultToken.getToken());
-        assertEquals(PERMISSIONS, resultToken.getPermissions());
+
+        // We don't care about ordering.
+        assertEquals(new HashSet<String>(PERMISSIONS), new HashSet<String>(resultToken.getPermissions()));
     }
 
     @MediumTest
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index 833d024d8..0f9ebc3e8 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -20,12 +20,14 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.RequestBatch;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphPlace;
 import com.facebook.model.GraphUser;
 import com.facebook.internal.CacheableRequestBatch;
 
 import java.io.IOException;
+import java.lang.Override;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -38,6 +40,11 @@ protected void setUp() throws Exception {
         Request.setDefaultBatchApplicationId(null);
     }
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -87,12 +94,12 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
         // ensures that paths passed to batch requests are encoded properly before
         // we send it up to the server
 
-        setBatchApplicationIdForTestApp();
+        TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "TourEiffel");
+        Request request1 = new Request(session, "TourEiffel");
         request1.setBatchEntryName("eiffel");
         request1.setBatchEntryOmitResultOnSuccess(false);
-        Request request2 = new Request(null, "{result=eiffel:$.id}");
+        Request request2 = new Request(session, "{result=eiffel:$.id}");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -111,10 +118,10 @@ public void testExecuteBatchRequestsPathEncoding() throws IOException {
     @MediumTest
     @LargeTest
     public void testExecuteBatchedGets() throws IOException {
-        setBatchApplicationIdForTestApp();
+        TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "TourEiffel");
-        Request request2 = new Request(null, "SpaceNeedle");
+        Request request1 = new Request(session, "TourEiffel");
+        Request request2 = new Request(session, "SpaceNeedle");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertEquals(2, responses.size());
@@ -158,8 +165,10 @@ public void testBatchPostStatusUpdate() {
 
         Request postRequest1 = Request.newPostRequest(session, "me/feed", statusUpdate1, null);
         postRequest1.setBatchEntryName("postRequest1");
+        postRequest1.setBatchEntryOmitResultOnSuccess(false);
         Request postRequest2 = Request.newPostRequest(session, "me/feed", statusUpdate2, null);
         postRequest2.setBatchEntryName("postRequest2");
+        postRequest2.setBatchEntryOmitResultOnSuccess(false);
         Request getRequest1 = new Request(session, "{result=postRequest1:$.id}");
         Request getRequest2 = new Request(session, "{result=postRequest2:$.id}");
 
@@ -205,7 +214,7 @@ public void testBatchWithValidSessionAndNoSession() {
         TestSession session = openTestSessionWithSharedUser();
 
         Request request1 = new Request(session, "me");
-        Request request2 = new Request(null, "zuck");
+        Request request2 = new Request(null, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertNotNull(responses);
@@ -215,18 +224,16 @@ public void testBatchWithValidSessionAndNoSession() {
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
         assertNotNull(user1);
-        assertNotNull(user2);
+        assertNull(user2);
 
-        assertFalse(user1.getId().equals(user2.getId()));
         assertEquals(session.getTestUserId(), user1.getId());
-        assertEquals("4", user2.getId());
     }
 
     @LargeTest
     public void testBatchWithNoSessionAndValidSession() {
         TestSession session = openTestSessionWithSharedUser();
 
-        Request request1 = new Request(null, "zuck");
+        Request request1 = new Request(null, "me");
         Request request2 = new Request(session, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
@@ -236,11 +243,9 @@ public void testBatchWithNoSessionAndValidSession() {
         GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
-        assertNotNull(user1);
+        assertNull(user1);
         assertNotNull(user2);
 
-        assertFalse(user1.getId().equals(user2.getId()));
-        assertEquals("4", user1.getId());
         assertEquals(session.getTestUserId(), user2.getId());
     }
 
@@ -250,8 +255,8 @@ public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
         String appId = session.getApplicationId();
         Request.setDefaultBatchApplicationId(appId);
 
-        Request request1 = new Request(null, "zuck");
-        Request request2 = new Request(null, "zuck");
+        Request request1 = new Request(null, "me");
+        Request request2 = new Request(null, "me");
 
         List<Response> responses = Request.executeBatchAndWait(request1, request2);
         assertNotNull(responses);
@@ -260,11 +265,8 @@ public void testBatchWithTwoSessionlessRequestsAndDefaultAppID() {
         GraphUser user1 = responses.get(0).getGraphObjectAs(GraphUser.class);
         GraphUser user2 = responses.get(1).getGraphObjectAs(GraphUser.class);
 
-        assertNotNull(user1);
-        assertNotNull(user2);
-
-        assertEquals("4", user1.getId());
-        assertEquals("4", user2.getId());
+        assertNull(user1);
+        assertNull(user2);
     }
 
     @LargeTest
@@ -313,7 +315,7 @@ public void testClosedSessionDoesntAppendAccessToken() {
 
     @LargeTest
     public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
+        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos", "publish_actions");
 
         final int image1Size = 120;
         final int image2Size = 150;
@@ -561,4 +563,131 @@ public void onBatchCompleted(RequestBatch batch) {
         batch.executeAndWait();
         assertEquals(3, count.get());
     }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchOnProgressCallbackIsCalled() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                count.incrementAndGet();
+            }
+        });
+
+        batch.executeAndWait();
+        assertTrue(count.get() > 0);
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testBatchLastOnProgressCallbackIsCalledOnce() {
+        final AtomicInteger count = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    count.incrementAndGet();
+                }
+                else if (current > max) {
+                    count.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        assertEquals(1, count.get());
+    }
+
+
+    @MediumTest
+    @LargeTest
+    public void testMixedBatchCallbacks() {
+        final AtomicInteger requestProgressCount = new AtomicInteger();
+        final AtomicInteger requestCompletedCount = new AtomicInteger();
+        final AtomicInteger batchProgressCount = new AtomicInteger();
+        final AtomicInteger batchCompletedCount = new AtomicInteger();
+
+        TestSession session = getTestSessionWithSharedUser(null);
+        String appId = session.getApplicationId();
+        Request.setDefaultBatchApplicationId(appId);
+
+        Request request1 = Request.newGraphPathRequest(null, "4", new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+                requestCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) {
+                    requestProgressCount.incrementAndGet();
+                }
+                else if (current > max) {
+                    requestProgressCount.set(0);
+                }
+            }
+        });
+        assertTrue(request1 != null);
+
+        Request request2 = Request.newGraphPathRequest(null, "4", null);
+        assertTrue(request2 != null);
+
+        RequestBatch batch = new RequestBatch(request1, request2);
+        batch.addCallback(new RequestBatch.OnProgressCallback() {
+            @Override
+            public void onBatchCompleted(RequestBatch batch) {
+                batchCompletedCount.incrementAndGet();
+            }
+
+            @Override
+            public void onBatchProgress(RequestBatch batch, long current, long max) {
+                if (current == max) {
+                    batchProgressCount.incrementAndGet();
+                } else if (current > max) {
+                    batchProgressCount.set(0);
+                }
+            }
+        });
+
+        batch.executeAndWait();
+        
+        assertEquals(1, requestProgressCount.get());
+        assertEquals(1, requestCompletedCount.get());
+        assertEquals(1, batchProgressCount.get());
+        assertEquals(1, batchCompletedCount.get());
+    }
 }
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
index ad2753abe..5ce31fc91 100644
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
@@ -25,14 +25,17 @@
 import android.os.Handler;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.Utility;
+import com.facebook.model.GraphObject;
 import junit.framework.AssertionFailedError;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -45,6 +48,7 @@
 
     private static String applicationId;
     private static String applicationSecret;
+    private static String clientToken;
 
     public final static String SECOND_TEST_USER_TAG = "Second";
     public final static String THIRD_TEST_USER_TAG = "Third";
@@ -62,6 +66,8 @@ public FacebookActivityTestCase(Class<T> activityClass) {
         super("", activityClass);
     }
 
+    protected String[] getPermissionsForDefaultTestSession() { return null; };
+
     // Returns an un-opened TestSession
     protected TestSession getTestSessionWithSharedUser() {
         return getTestSessionWithSharedUser(null);
@@ -97,7 +103,7 @@ protected TestSession openTestSessionWithSharedUser() {
     }
 
     protected TestSession openTestSessionWithSharedUser(String sessionUniqueUserTag) {
-        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, (String[]) null);
+        return openTestSessionWithSharedUserAndPermissions(sessionUniqueUserTag, getPermissionsForDefaultTestSession());
     }
 
     protected TestSession openTestSessionWithSharedUserAndPermissions(String sessionUniqueUserTag,
@@ -151,11 +157,11 @@ public void run() {
 
     protected synchronized void readApplicationIdAndSecret() {
         synchronized (FacebookTestCase.class) {
-            if (applicationId != null && applicationSecret != null) {
+            if (applicationId != null && applicationSecret != null && clientToken != null) {
                 return;
             }
 
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
+            AssetManager assets = getActivity().getResources().getAssets();
             InputStream stream = null;
             final String errorMessage = "could not read applicationId and applicationSecret from config.json; ensure "
                     + "you have run 'configure_unit_tests.sh'. Error: ";
@@ -172,9 +178,11 @@ protected synchronized void readApplicationIdAndSecret() {
 
                 applicationId = jsonObject.optString("applicationId");
                 applicationSecret = jsonObject.optString("applicationSecret");
+                clientToken = jsonObject.optString("clientToken");
 
-                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret)) {
-                    fail(errorMessage + "one or both config values are missing");
+                if (Utility.isNullOrEmpty(applicationId) || Utility.isNullOrEmpty(applicationSecret) ||
+                        Utility.isNullOrEmpty(clientToken)) {
+                    fail(errorMessage + "config values are missing");
                 }
 
                 TestSession.setTestApplicationId(applicationId);
@@ -227,9 +235,15 @@ public void call(Session session, SessionState state, Exception exception) {
     protected void setUp() throws Exception {
         super.setUp();
 
+        // Make sure the logging is turned on.
+        Settings.setIsDebugEnabled(true);
+
         // Make sure we have read application ID and secret.
         readApplicationIdAndSecret();
 
+        Settings.setApplicationId(applicationId);
+        Settings.setClientToken(clientToken);
+
         // These are useful for debugging unit test failures.
         Settings.addLoggingBehavior(LoggingBehavior.REQUESTS);
         Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
@@ -385,7 +399,7 @@ protected File createTempFileFromAsset(String assetPath) throws IOException {
         FileOutputStream outStream = null;
 
         try {
-            AssetManager assets = getInstrumentation().getContext().getResources().getAssets();
+            AssetManager assets = getActivity().getResources().getAssets();
             inputStream = assets.open(assetPath);
 
             File outputDir = getActivity().getCacheDir(); // context being the Activity pointer
@@ -466,7 +480,6 @@ public void run() {
         return result.isEmpty() ? null : result.get(0);
     }
 
-
     /*
      * Classes and helpers related to asynchronous requests.
      */
diff --git a/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java b/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java
new file mode 100644
index 000000000..2aca415ad
--- /dev/null
+++ b/facebook/tests/src/com/facebook/FacebookAppLinkResolverTests.java
@@ -0,0 +1,205 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.net.Uri;
+import android.os.Handler;
+import android.test.AndroidTestCase;
+import bolts.AppLink;
+import bolts.Continuation;
+import bolts.Task;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class FacebookAppLinkResolverTests extends FacebookTestCase {
+    private Task resolveTask;
+
+    public void testSingleUrl() {
+        String testUrlString = "https://fb.me/732873156764191";
+        Uri testUrl = Uri.parse(testUrlString);
+        Uri testWebUri = Uri.parse("http://www.facebook.com/");
+        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
+        testTargets.add(new AppLink.Target(
+                "com.myapp",
+                null,
+                Uri.parse("myapp://3"),
+                "my app"));
+        testTargets.add(new AppLink.Target(
+                "com.myapp-test",
+                null,
+                Uri.parse("myapp-test://4"),
+                "my test app"));
+        try {
+            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testUrl);
+
+            getTestBlocker().waitForSignals(1);
+
+            assertNotNull(resolveTask);
+
+            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
+
+            assertTrue(singleUrlResolveTask.isCompleted() &&
+                    !singleUrlResolveTask.isCancelled() &&
+                    !singleUrlResolveTask.isFaulted());
+
+            AppLink appLink = singleUrlResolveTask.getResult();
+
+            assertEquals(appLink.getSourceUrl(), testUrl);
+            assertEquals(appLink.getWebUrl(), testWebUri);
+            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void testUrlWithNoAppLinkData() {
+        String testNoAppLinkUrlString = "https://fb.me/732873156764191_no_app_link";
+        Uri testNoAppLinkUrl = Uri.parse(testNoAppLinkUrlString);
+        try {
+            executeResolverOnBlockerThread(new FacebookAppLinkResolver(), testNoAppLinkUrl);
+
+            getTestBlocker().waitForSignals(1);
+
+            assertNotNull(resolveTask);
+
+            Task<AppLink> singleUrlResolveTask = (Task<AppLink>)resolveTask;
+
+            assertTrue(singleUrlResolveTask.isCompleted() &&
+                    !singleUrlResolveTask.isCancelled() &&
+                    !singleUrlResolveTask.isFaulted());
+
+            AppLink appLink = singleUrlResolveTask.getResult();
+            assertNull(appLink);
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void testCachedAppLinkData() {
+        String testUrlString = "https://fb.me/732873156764191";
+        Uri testUrl = Uri.parse(testUrlString);
+        Uri testWebUri = Uri.parse("http://www.facebook.com/");
+        ArrayList<AppLink.Target> testTargets = new ArrayList<AppLink.Target>();
+        testTargets.add(new AppLink.Target(
+                "com.myapp",
+                null,
+                Uri.parse("myapp://3"),
+                "my app"));
+        testTargets.add(new AppLink.Target(
+                "com.myapp-test",
+                null,
+                Uri.parse("myapp-test://4"),
+                "my test app"));
+
+        try {
+            FacebookAppLinkResolver resolver = new FacebookAppLinkResolver();
+
+            // This will prefetch the app link
+            executeResolverOnBlockerThread(resolver, testUrl);
+            getTestBlocker().waitForSignals(1);
+            assertNotNull(resolveTask);
+
+            // Now let's fetch it again. This should complete the task synchronously.
+            Task<AppLink> cachedUrlResolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
+
+            assertTrue(cachedUrlResolveTask.isCompleted() &&
+                    !cachedUrlResolveTask.isCancelled() &&
+                    !cachedUrlResolveTask.isFaulted());
+
+            AppLink appLink = cachedUrlResolveTask.getResult();
+
+            assertEquals(appLink.getSourceUrl(), testUrl);
+            assertEquals(appLink.getWebUrl(), testWebUri);
+            assertTrue(targetListsAreEqual(appLink.getTargets(), testTargets));
+        } catch (Exception e) {
+            // Forcing the test to fail with details
+            assertNull(e);
+        }
+    }
+
+    public void executeResolverOnBlockerThread(final FacebookAppLinkResolver resolver, final Uri testUrl) {
+        final TestBlocker blocker = getTestBlocker();
+        Runnable runnable = new Runnable() {
+            public void run() {
+                try {
+                    resolveTask = resolver.getAppLinkFromUrlInBackground(testUrl);
+                    resolveTask.continueWith(new Continuation() {
+                        @Override
+                        public Object then(Task task) throws Exception {
+                            // Once the task is complete, unblock the test thread, so it can inspect for errors/results.
+                            blocker.signal();
+                            return null;
+                        }
+                    });
+                } catch (Exception e) {
+                    // Get back to the test case if there was an uncaught exception
+                    blocker.signal();
+                }
+            }
+        };
+
+        Handler handler = new Handler(blocker.getLooper());
+        handler.post(runnable);
+    }
+
+    private static boolean targetListsAreEqual(List<AppLink.Target> list1, List<AppLink.Target> list2) {
+        if (list1 == null) {
+            return list2 == null;
+        } else if (list2 == null || list1.size() != list2.size()) {
+            return false;
+        }
+
+        ArrayList<AppLink.Target> list2Copy = new ArrayList<AppLink.Target>(list2);
+
+        for(int i = 0; i < list1.size(); i++) {
+            int j;
+            for (j = 0; j < list2Copy.size(); j++) {
+                if (targetsAreEqual(list1.get(i), list2Copy.get(j))) {
+                    break;
+                }
+            }
+
+            if (j < list2Copy.size()) {
+                // Found a match. Remove from the copy to make sure the same target isn't matched twice.
+                list2Copy.remove(j);
+            } else {
+                // Match not found
+                return false;
+            }
+        }
+        return true;
+    }
+
+    private static boolean targetsAreEqual(AppLink.Target target1, AppLink.Target target2) {
+        boolean isEqual =
+                objectsAreEqual(target1.getPackageName(), target2.getPackageName()) &&
+                objectsAreEqual(target1.getClassName(), target2.getClassName()) &&
+                objectsAreEqual(target1.getAppName(), target2.getAppName()) &&
+                objectsAreEqual(target1.getUrl(), target2.getUrl()) ;
+
+        return isEqual;
+    }
+
+    private static boolean objectsAreEqual(Object s1, Object s2) {
+        return s1 == null
+                ? s2 == null
+                : s1.equals(s2);
+    }
+}
diff --git a/facebook/tests/src/com/facebook/GraphRequestTests.java b/facebook/tests/src/com/facebook/GraphRequestTests.java
index 5ff2a975d..7157823c3 100644
--- a/facebook/tests/src/com/facebook/GraphRequestTests.java
+++ b/facebook/tests/src/com/facebook/GraphRequestTests.java
@@ -25,6 +25,11 @@
 // to the underlying request/batch plumbing.
 public class GraphRequestTests extends FacebookTestCase {
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @LargeTest
     public void testCommentRoundTrip() {
         TestSession session = openTestSessionWithSharedUser();
@@ -60,31 +65,4 @@ public void testCommentRoundTrip() {
         assertNotNull(comment2Message);
         assertEquals(commentMessage, comment2Message);
     }
-
-    @LargeTest
-    public void testEventRoundTrip() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "create_event");
-
-        GraphObject event = GraphObject.Factory.create();
-        // Android emulators tend to not have the right date/time. To avoid issues with posting events in the past
-        // or too far in the future, we use a constant year. This test will break in 2030, angering our robot overlords.
-        Date startTime = new Date(130, 2, 17, 12, 34, 56);
-        event.setProperty("name", "My awesome St. Patrick's Day party on " + startTime.toString());
-        final String eventDescription = "This is a great event. You should all come.";
-        event.setProperty("description", eventDescription);
-        Date endTime = new Date(startTime.getTime() + 3600 * 1000);
-        event.setProperty("start_time", startTime);
-        event.setProperty("end_time", endTime);
-        event.setProperty("location", "My house");
-
-        GraphObject event1 = batchCreateAndGet(session, "me/events", event, null, GraphObject.class);
-        assertNotNull(event1);
-        assertEquals(eventDescription, event1.getProperty("description"));
-
-        event1.removeProperty("id");
-        GraphObject event2 = batchCreateAndGet(session, "me/events", event1, null, GraphObject.class);
-        assertNotNull(event2);
-        assertEquals(eventDescription, event2.getProperty("description"));
-    }
-
 }
diff --git a/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
new file mode 100644
index 000000000..b65b9851f
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressNoopOutputStreamTests.java
@@ -0,0 +1,65 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import static android.test.MoreAsserts.*;
+
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.ProgressNoopOutputStream;
+
+import java.lang.Exception;
+import java.lang.Override;
+
+public class ProgressNoopOutputStreamTests extends AndroidTestCase {
+    private ProgressNoopOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        stream = new ProgressNoopOutputStream(null);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getMaxProgress());
+        assertEmpty(stream.getProgressMap());
+    }
+
+    @SmallTest
+    public void testWriting() {
+        assertEquals(0, stream.getMaxProgress());
+
+        stream.write(0);
+        assertEquals(1, stream.getMaxProgress());
+
+        final byte[] buf = new byte[8];
+
+        stream.write(buf);
+        assertEquals(9, stream.getMaxProgress());
+
+        stream.write(buf, 2, 2);
+        assertEquals(11, stream.getMaxProgress());
+
+        stream.addProgress(16);
+        assertEquals(27, stream.getMaxProgress());
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
new file mode 100644
index 000000000..fa3f7ffd3
--- /dev/null
+++ b/facebook/tests/src/com/facebook/ProgressOutputStreamTests.java
@@ -0,0 +1,100 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.Request;
+import com.facebook.RequestBatch;
+import com.facebook.RequestProgress;
+
+import static android.test.MoreAsserts.*;
+
+import java.io.ByteArrayOutputStream;
+import java.lang.Exception;
+import java.lang.Override;
+import java.util.HashMap;
+import java.util.Map;
+
+public class ProgressOutputStreamTests extends AndroidTestCase {
+    private static final int MAX_PROGRESS = 10;
+
+    private Request r1, r2;
+    private Map<Request, RequestProgress> progressMap;
+    private RequestBatch requests;
+    private ProgressOutputStream stream;
+
+    @Override
+    protected void setUp() throws Exception {
+        r1 = new Request(null, "4");
+        r2 = new Request(null, "4");
+
+        progressMap = new HashMap<Request, RequestProgress>();
+        progressMap.put(r1, new RequestProgress(null, r1));
+        progressMap.get(r1).addToMax(5);
+        progressMap.put(r2, new RequestProgress(null, r2));
+        progressMap.get(r2).addToMax(5);
+
+        requests = new RequestBatch(r1, r2);
+
+        ByteArrayOutputStream backing = new ByteArrayOutputStream();
+        stream = new ProgressOutputStream(backing, requests, progressMap, MAX_PROGRESS);
+    }
+
+    @Override
+    protected void tearDown() throws Exception {
+        stream.close();
+    }
+
+    @SmallTest
+    public void testSetup() {
+        assertEquals(0, stream.getBatchProgress());
+        assertEquals(MAX_PROGRESS, stream.getMaxProgress());
+
+        for (RequestProgress p : progressMap.values()) {
+            assertEquals(0, p.getProgress());
+            assertEquals(5, p.getMaxProgress());
+        }
+    }
+
+    @SmallTest
+    public void testWriting() {
+        try {
+            assertEquals(0, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r1);
+            stream.write(0);
+            assertEquals(1, stream.getBatchProgress());
+
+            final byte[] buf = new byte[4];
+            stream.write(buf);
+            assertEquals(5, stream.getBatchProgress());
+
+            stream.setCurrentRequest(r2);
+            stream.write(buf, 2, 2);
+            stream.write(buf, 1, 3);
+            assertEquals(MAX_PROGRESS, stream.getBatchProgress());
+
+            assertEquals(stream.getMaxProgress(), stream.getBatchProgress());
+            assertEquals(progressMap.get(r1).getMaxProgress(), progressMap.get(r1).getProgress());
+            assertEquals(progressMap.get(r2).getMaxProgress(), progressMap.get(r2).getProgress());
+        }
+        catch (Exception ex) {
+            fail(ex.getMessage());
+        }
+    }
+}
\ No newline at end of file
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index f162977d7..cca70cb6b 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -23,6 +23,7 @@
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.internal.ServerProtocol;
 import com.facebook.model.*;
 
 import java.io.File;
@@ -37,6 +38,11 @@
 public class RequestTests extends FacebookTestCase {
     private final static String TEST_OG_TYPE = "facebooksdktests:test";
 
+    protected String[] getPermissionsForDefaultTestSession()
+    {
+        return new String[] { "email", "publish_actions", "read_stream" };
+    };
+
     @SmallTest
     @MediumTest
     @LargeTest
@@ -343,7 +349,7 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertTrue(connection != null);
 
         assertEquals("GET", connection.getRequestMethod());
-        assertEquals("/TourEiffel", connection.getURL().getPath());
+        assertEquals("/" + ServerProtocol.getAPIVersion() + "/TourEiffel", connection.getURL().getPath());
 
         assertTrue(connection.getRequestProperty("User-Agent").startsWith("FBAndroidSDK"));
 
@@ -352,26 +358,85 @@ public void testSingleGetToHttpRequest() throws Exception {
         assertEquals("json", uri.getQueryParameter("format"));
     }
 
+    @SmallTest
+    @MediumTest
+    @LargeTest
+    public void testBuildsClientTokenIfNeeded() throws Exception {
+        Request requestMe = new Request(null, "TourEiffel");
+        HttpURLConnection connection = Request.toHttpConnection(requestMe);
+
+        assertTrue(connection != null);
+
+        Uri uri = Uri.parse(connection.getURL().toString());
+        String accessToken = uri.getQueryParameter("access_token");
+        assertNotNull(accessToken);
+        assertTrue(accessToken.contains(Settings.getApplicationId()));
+        assertTrue(accessToken.contains(Settings.getClientToken()));
+    }
+
     @MediumTest
     @LargeTest
     public void testExecuteSingleGet() {
-        Request request = new Request(null, "TourEiffel");
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel");
         Response response = request.executeAndWait();
 
         assertTrue(response != null);
         assertTrue(response.getError() == null);
         assertTrue(response.getGraphObject() != null);
+        assertNotNull(response.getRawResponse());
 
         GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
         assertEquals("Paris", graphPlace.getLocation().getCity());
     }
 
+    @LargeTest
+    public void testBuildsUploadPhotoHttpURLConnection() throws Exception {
+        TestSession session = openTestSessionWithSharedUser();
+        Bitmap image = createTestBitmap(128);
+
+        Request request = Request.newUploadPhotoRequest(session, image, null);
+        HttpURLConnection connection = Request.toHttpConnection(request);
+
+        assertTrue(connection != null);
+        assertNotSame("gzip", connection.getRequestProperty("Content-Encoding"));
+        assertNotSame("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
+    }
+
+    @LargeTest
+    public void testBuildsUploadVideoHttpURLConnection() throws IOException, URISyntaxException {
+        File tempFile = null;
+        try {
+            TestSession session = openTestSessionWithSharedUser();
+            tempFile = createTempFileFromAsset("DarkScreen.mov");
+
+            Request request = Request.newUploadVideoRequest(session, tempFile, null);
+            HttpURLConnection connection = Request.toHttpConnection(request);
+
+            assertTrue(connection != null);
+            assertNotSame("gzip", connection.getRequestProperty("Content-Encoding"));
+            assertNotSame("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
+
+        } catch (Exception ex) {
+            return;
+        } finally {
+            if (tempFile != null) {
+                tempFile.delete();
+            }
+        }
+    }
+
+
     @MediumTest
     @LargeTest
     public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
-        Request request = new Request(null, "TourEiffel");
+        TestSession session = openTestSessionWithSharedUser();
+        Request request = new Request(session, "TourEiffel");
         HttpURLConnection connection = Request.toHttpConnection(request);
 
+        assertEquals("gzip", connection.getRequestProperty("Content-Encoding"));
+        assertEquals("application/x-www-form-urlencoded", connection.getRequestProperty("Content-Type"));
+
         List<Response> responses = Request.executeConnectionAndWait(connection, Arrays.asList(new Request[]{request}));
         assertNotNull(responses);
         assertEquals(1, responses.size());
@@ -381,6 +446,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         assertTrue(response != null);
         assertTrue(response.getError() == null);
         assertTrue(response.getGraphObject() != null);
+        assertNotNull(response.getRawResponse());
 
         GraphPlace graphPlace = response.getGraphObjectAs(GraphPlace.class);
         assertEquals("Paris", graphPlace.getLocation().getCity());
@@ -388,7 +454,7 @@ public void testExecuteSingleGetUsingHttpURLConnection() throws IOException {
         // Make sure calling code can still access HTTP headers and call disconnect themselves.
         int code = connection.getResponseCode();
         assertEquals(200, code);
-        assertTrue(connection.getHeaderFields().keySet().contains("Content-Length"));
+        assertTrue(connection.getHeaderFields().keySet().contains("Content-Type"));
         connection.disconnect();
     }
 
@@ -411,27 +477,6 @@ public void testFacebookErrorResponseCreatesError() {
         assertNotNull(error.getRequestResultBody());
     }
 
-    @LargeTest
-    public void testFacebookSuccessResponseWithErrorCodeCreatesError() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newRestRequest(session, "auth.extendSSOAccessToken", null, null);
-        assertNotNull(request);
-
-        // Because TestSession access tokens were not created via SSO, we expect to get an error from the service,
-        // but with a 200 (success) code.
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
     @MediumTest
     @LargeTest
     public void testRequestWithUnopenedSessionFails() {
@@ -458,6 +503,7 @@ static void validateMeResponse(TestSession session, Response response) {
         GraphUser me = response.getGraphObjectAs(GraphUser.class);
         assertNotNull(me);
         assertEquals(session.getTestUserId(), me.getId());
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -481,6 +527,8 @@ static void validateMyFriendsResponse(TestSession session, Response response) {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -503,6 +551,8 @@ public void testExecutePlaceRequestWithLocation() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -522,6 +572,8 @@ public void testExecutePlaceRequestWithSearchText() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     @MediumTest
@@ -544,6 +596,8 @@ public void testExecutePlaceRequestWithLocationAndSearchText() {
 
         List<GraphObject> results = graphResult.getData();
         assertNotNull(results);
+
+        assertNotNull(response.getRawResponse());
     }
 
     private String executePostOpenGraphRequest() {
@@ -563,6 +617,8 @@ private String executePostOpenGraphRequest() {
         assertNotNull(graphResult);
         assertNotNull(graphResult.getProperty("id"));
 
+        assertNotNull(response.getRawResponse());
+
         return (String) graphResult.getProperty("id");
     }
 
@@ -585,7 +641,8 @@ public void testDeleteObjectRequest() {
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
 
-        assertTrue((Boolean) result.getProperty(Response.NON_JSON_RESPONSE_PROPERTY));
+        assertTrue((Boolean) result.getProperty(Response.SUCCESS_KEY));
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -605,6 +662,7 @@ public void testUpdateOpenGraphObjectRequest() {
 
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -620,6 +678,7 @@ public void testExecuteUploadPhoto() {
 
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
+        assertNotNull(response.getRawResponse());
     }
 
     @LargeTest
@@ -647,6 +706,7 @@ public void testExecuteUploadPhotoViaFile() throws IOException {
 
             GraphObject result = response.getGraphObject();
             assertNotNull(result);
+            assertNotNull(response.getRawResponse());
         } finally {
             if (outStream != null) {
                 outStream.close();
@@ -672,6 +732,7 @@ public void testUploadVideoFile() throws IOException, URISyntaxException {
 
             GraphObject result = response.getGraphObject();
             assertNotNull(result);
+            assertNotNull(response.getRawResponse());
         } catch (Exception ex) {
             return;
         } finally {
@@ -692,44 +753,73 @@ public void testPostStatusUpdate() {
         assertEquals(statusUpdate.getProperty("message"), retrievedStatusUpdate.getProperty("message"));
     }
 
+    @MediumTest
     @LargeTest
-    public void testRestMethodGetUser() {
-        TestSession session = openTestSessionWithSharedUser();
-        String testUserId = session.getTestUserId();
+    public void testCallbackIsCalled() {
+        Request request = new Request(null, "4");
 
-        Bundle parameters = new Bundle();
-        parameters.putString("uids", testUserId);
-        parameters.putString("fields", "uid,name");
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.Callback() {
+            @Override
+            public void onCompleted(Response response) {
+                calledBack.add(true);
+            }
+        });
 
-        Request request = Request.newRestRequest(session, "users.getInfo", parameters, null);
         Response response = request.executeAndWait();
         assertNotNull(response);
+        assertTrue(calledBack.size() == 1);
+    }
+
+    @MediumTest
+    @LargeTest
+    public void testOnProgressCallbackIsCalled() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
+
+        final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
+        request.setCallback(new Request.OnProgressCallback() {
+            @Override
+            public void onCompleted(Response response) {
+            }
 
-        GraphObjectList<GraphObject> graphObjects = response.getGraphObjectList();
-        assertNotNull(graphObjects);
-        assertEquals(1, graphObjects.size());
+            @Override
+            public void onProgress(long current, long max) {
+                calledBack.add(true);
+            }
+        });
 
-        GraphObject user = graphObjects.get(0);
-        assertNotNull(user);
-        assertEquals(testUserId, user.getProperty("uid").toString());
+        Response response = request.executeAndWait();
+        assertNotNull(response);
+        assertFalse(calledBack.isEmpty());
     }
 
     @MediumTest
     @LargeTest
-    public void testCallbackIsCalled() {
-        Request request = new Request(null, "4");
+    public void testLastOnProgressCallbackIsCalledOnce() {
+        Bitmap image = Bitmap.createBitmap(128, 128, Bitmap.Config.ALPHA_8);
+
+        Request request = Request.newUploadPhotoRequest(null, image, null);
+        assertTrue(request != null);
 
         final ArrayList<Boolean> calledBack = new ArrayList<Boolean>();
-        request.setCallback(new Request.Callback() {
+        request.setCallback(new Request.OnProgressCallback() {
             @Override
             public void onCompleted(Response response) {
-                calledBack.add(true);
+            }
+
+            @Override
+            public void onProgress(long current, long max) {
+                if (current == max) calledBack.add(true);
+                else if (current > max) calledBack.clear();
             }
         });
 
         Response response = request.executeAndWait();
         assertNotNull(response);
-        assertTrue(calledBack.size() == 1);
+        assertEquals(1, calledBack.size());
     }
 
     @MediumTest
@@ -760,20 +850,6 @@ public void testBatchTimeoutCantBeNegative() {
         }
     }
 
-    @MediumTest
-    @LargeTest
-    public void testCantSetBothGraphPathAndRestMethod() {
-        Request request = new Request();
-        request.setGraphPath("me");
-        request.setRestMethod("amethod");
-        request.setCallback(new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
     @MediumTest
     @LargeTest
     public void testClosedSessionDoesntAppendAccessToken() {
@@ -817,7 +893,7 @@ public void testPaging() {
         TestSession session = openTestSessionWithSharedUser();
         final List<GraphPlace> returnedPlaces = new ArrayList<GraphPlace>();
         Request request = Request
-                .newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 5, null, new Request.GraphPlaceListCallback() {
+                .newPlacesSearchRequest(session, SEATTLE_LOCATION, 1000, 3, null, new Request.GraphPlaceListCallback() {
                     @Override
                     public void onCompleted(List<GraphPlace> places, Response response) {
                         returnedPlaces.addAll(places);
diff --git a/facebook/tests/src/com/facebook/SessionTests.java b/facebook/tests/src/com/facebook/SessionTests.java
index 3f5a9f6a6..331152c4c 100644
--- a/facebook/tests/src/com/facebook/SessionTests.java
+++ b/facebook/tests/src/com/facebook/SessionTests.java
@@ -580,7 +580,7 @@ public void testOpenWithAccessToken() {
         session.open(accessToken, statusRecorder);
         statusRecorder.waitForCall(session, SessionState.OPENED, null);
 
-        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions,
+        AccessToken expectedToken = new AccessToken(token, expirationDate, permissions, null,
                 AccessTokenSource.FACEBOOK_APPLICATION_WEB, lastRefreshDate);
         verifySessionHasToken(session, expectedToken);
 
diff --git a/facebook/tests/src/com/facebook/SettingsTests.java b/facebook/tests/src/com/facebook/SettingsTests.java
index 435de6d40..a96c25347 100644
--- a/facebook/tests/src/com/facebook/SettingsTests.java
+++ b/facebook/tests/src/com/facebook/SettingsTests.java
@@ -17,7 +17,6 @@
 package com.facebook;
 
 import android.os.ConditionVariable;
-import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
 import android.test.suitebuilder.annotation.MediumTest;
 import android.test.suitebuilder.annotation.SmallTest;
@@ -27,7 +26,7 @@
 import java.io.IOException;
 import java.util.concurrent.Executor;
 
-public final class SettingsTests extends AndroidTestCase {
+public final class SettingsTests extends FacebookTestCase {
 
     @SmallTest @MediumTest @LargeTest
     public void testGetExecutor() {
@@ -99,4 +98,26 @@ public void testFacebookDomain() {
 
         Settings.setFacebookDomain("facebook.com");
     }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testLoadDefaults() {
+        Settings.setApplicationId(null);
+        Settings.setClientToken(null);
+
+        Settings.loadDefaultsFromMetadata(getActivity());
+
+        assertEquals("1234567890", Settings.getApplicationId());
+        assertEquals("abcdef123456", Settings.getClientToken());
+    }
+
+    @SmallTest @MediumTest @LargeTest
+    public void testLoadDefaultsDoesNotOverwrite() {
+        Settings.setApplicationId("hello");
+        Settings.setClientToken("world");
+
+        Settings.loadDefaultsFromMetadata(getActivity());
+
+        assertEquals("hello", Settings.getApplicationId());
+        assertEquals("world", Settings.getClientToken());
+    }
 }
diff --git a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
index bab3fb38f..ab7ad3341 100644
--- a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
+++ b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
@@ -159,6 +159,7 @@ public void testCacheRoundtrip() {
         TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE);
         TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
         TokenCachingStrategy.putPermissions(bundle, permissions);
+        TokenCachingStrategy.putDeclinedPermissions(bundle, Utility.arrayList("whatever"));
 
         cache.save(bundle);
         bundle = cache.load();
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
index 8c72f4567..d0fee76c1 100644
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ b/facebook/tests/src/com/facebook/TestSessionTests.java
@@ -134,16 +134,15 @@ private int countTestUsers() {
 
         String appAccessToken = TestSession.getAppAccessToken();
         assertNotNull(appAccessToken);
-        String applicationId = session.getApplicationId();
-        assertNotNull(applicationId);
 
-        String fqlQuery = String.format("SELECT id FROM test_account WHERE app_id = %s", applicationId);
         Bundle parameters = new Bundle();
-        parameters.putString("q", fqlQuery);
+
         parameters.putString("access_token", appAccessToken);
+        parameters.putString("fields", "id");
+
+        Request requestTestUsers = new Request(null, "app/accounts/test-users", parameters, null);
 
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
+        Response response = requestTestUsers.executeAndWait();
 
         JSONArray data = (JSONArray) response.getGraphObject().getProperty("data");
         return data.length();
diff --git a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
index 4055df6bb..5d9b998c9 100644
--- a/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
+++ b/facebook/tests/src/com/facebook/WaitForBroadcastReceiver.java
@@ -21,6 +21,7 @@
 import android.content.Intent;
 import android.os.ConditionVariable;
 import android.os.Looper;
+
 import junit.framework.Assert;
 
 import java.util.ArrayList;
@@ -47,7 +48,11 @@ public void incrementExpectCount(int n) {
     }
 
     public void waitForExpectedCalls() {
-        if (!condition.block(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS)) {
+        this.waitForExpectedCalls(SessionTestsBase.DEFAULT_TIMEOUT_MILLISECONDS);
+    }
+
+    public void waitForExpectedCalls(long timeoutMillis) {
+        if (!condition.block(timeoutMillis)) {
             Assert.assertTrue(false);
         }
     }
@@ -70,11 +75,14 @@ public static void waitForExpectedCalls(WaitForBroadcastReceiver... receivers) {
 
     @Override
     public void onReceive(Context context, Intent intent) {
+        receivedIntents.add(intent);
+
         if (++actualCount == expectCount) {
             condition.open();
         }
-        receivedIntents.add(intent);
-        Assert.assertTrue(actualCount <= expectCount);
+
+        Assert.assertTrue("expecting " + expectCount + "broadcasts, but received " + actualCount,
+                actualCount <= expectCount);
         Assert.assertEquals("BroadcastReceiver should receive on main UI thread",
                 Thread.currentThread(), Looper.getMainLooper().getThread());
     }
diff --git a/facebook/tests/src/com/facebook/internal/BundleJSONConverterTests.java b/facebook/tests/src/com/facebook/internal/BundleJSONConverterTests.java
new file mode 100644
index 000000000..8d8971f57
--- /dev/null
+++ b/facebook/tests/src/com/facebook/internal/BundleJSONConverterTests.java
@@ -0,0 +1,147 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+
+package com.facebook.internal;
+
+import android.os.Bundle;
+import android.test.suitebuilder.annotation.SmallTest;
+import com.facebook.FacebookTestCase;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class BundleJSONConverterTests extends FacebookTestCase {
+
+    @SmallTest
+    public void testSimpleValues() throws JSONException {
+        ArrayList<String> arrayList = new ArrayList<String>();
+        arrayList.add("1st");
+        arrayList.add("2nd");
+        arrayList.add("third");
+
+        Bundle innerBundle1 = new Bundle();
+        innerBundle1.putInt("inner", 1);
+
+        Bundle innerBundle2 = new Bundle();
+        innerBundle2.putString("inner", "2");
+        innerBundle2.putStringArray("deep list", new String[] {"7", "8"});
+
+        innerBundle1.putBundle("nested bundle", innerBundle2);
+
+
+        Bundle b = new Bundle();
+        b.putBoolean("boolValue", true);
+        b.putInt("intValue", 7);
+        b.putLong("longValue", 5000000000l);
+        b.putDouble("doubleValue", 3.14);
+        b.putString("stringValue", "hello world");
+        b.putStringArray("stringArrayValue", new String[] {"first", "second"});
+        b.putStringArrayList("stringArrayListValue", arrayList);
+        b.putBundle("nested", innerBundle1);
+
+
+        JSONObject json = BundleJSONConverter.convertToJSON(b);
+        assertNotNull(json);
+
+        assertEquals(true, json.getBoolean("boolValue"));
+        assertEquals(7, json.getInt("intValue"));
+        assertEquals(5000000000l, json.getLong("longValue"));
+        assertEquals(3.14, json.getDouble("doubleValue"));
+        assertEquals("hello world", json.getString("stringValue"));
+
+        JSONArray jsonArray = json.getJSONArray("stringArrayValue");
+        assertEquals(2, jsonArray.length());
+        assertEquals("first", jsonArray.getString(0));
+        assertEquals("second", jsonArray.getString(1));
+
+        jsonArray = json.getJSONArray("stringArrayListValue");
+        assertEquals(3, jsonArray.length());
+        assertEquals("1st", jsonArray.getString(0));
+        assertEquals("2nd", jsonArray.getString(1));
+        assertEquals("third", jsonArray.getString(2));
+
+        JSONObject innerJson = json.getJSONObject("nested");
+        assertEquals(1, innerJson.getInt("inner"));
+        innerJson = innerJson.getJSONObject("nested bundle");
+        assertEquals("2", innerJson.getString("inner"));
+
+        jsonArray = innerJson.getJSONArray("deep list");
+        assertEquals(2, jsonArray.length());
+        assertEquals("7", jsonArray.getString(0));
+        assertEquals("8", jsonArray.getString(1));
+
+        Bundle finalBundle = BundleJSONConverter.convertToBundle(json);
+        assertNotNull(finalBundle);
+
+        assertEquals(true, finalBundle.getBoolean("boolValue"));
+        assertEquals(7, finalBundle.getInt("intValue"));
+        assertEquals(5000000000l, finalBundle.getLong("longValue"));
+        assertEquals(3.14, finalBundle.getDouble("doubleValue"));
+        assertEquals("hello world", finalBundle.getString("stringValue"));
+
+        List<String> stringList = finalBundle.getStringArrayList("stringArrayValue");
+        assertEquals(2, stringList.size());
+        assertEquals("first", stringList.get(0));
+        assertEquals("second", stringList.get(1));
+
+        stringList = finalBundle.getStringArrayList("stringArrayListValue");
+        assertEquals(3, stringList.size());
+        assertEquals("1st", stringList.get(0));
+        assertEquals("2nd", stringList.get(1));
+        assertEquals("third", stringList.get(2));
+
+        Bundle finalInnerBundle = finalBundle.getBundle("nested");
+        assertEquals(1, finalInnerBundle.getInt("inner"));
+        finalBundle = finalInnerBundle.getBundle("nested bundle");
+        assertEquals("2", finalBundle.getString("inner"));
+
+        stringList = finalBundle.getStringArrayList("deep list");
+        assertEquals(2, stringList.size());
+        assertEquals("7", stringList.get(0));
+        assertEquals("8", stringList.get(1));
+    }
+
+    @SmallTest
+    public void testUnsupportedValues() throws JSONException {
+        Bundle b = new Bundle();
+        b.putShort("shortValue", (short)7);
+
+        boolean exceptionCaught = false;
+        try {
+            BundleJSONConverter.convertToJSON(b);
+        } catch (IllegalArgumentException a) {
+            exceptionCaught = true;
+        }
+        assertTrue(exceptionCaught);
+
+        JSONArray jsonArray = new JSONArray();
+        jsonArray.put(10);
+        JSONObject json = new JSONObject();
+        json.put("arrayValue", jsonArray);
+
+        exceptionCaught = false;
+        try {
+            BundleJSONConverter.convertToBundle(json);
+        } catch (IllegalArgumentException a) {
+            exceptionCaught = true;
+        }
+        assertTrue(exceptionCaught);
+    }
+}
diff --git a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
index 47e92bc36..d4e24b052 100644
--- a/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/FileLruCacheTests.java
@@ -157,6 +157,9 @@ public void testCacheSizeLimit() throws Exception {
             assertTrue(cache.sizeInBytesForTest() < Math.min(2 * totalDataSize, cacheSize));
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
@@ -190,6 +193,9 @@ public void testCacheCountLimit() throws Exception {
             put(cache, i, data);
         }
 
+        // sleep for a bit to make sure the trim finishes
+        Thread.sleep(5000);
+
         // Verify that some keys exist and others do not
         boolean hasValueExists = false;
         boolean hasNoValueExists = false;
diff --git a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
index 6cd705cf2..ac20bb49d 100644
--- a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
@@ -21,10 +21,7 @@
 import android.graphics.BitmapFactory;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
 import com.facebook.TestUtils;
-import com.facebook.internal.Utility;
-import com.facebook.internal.ImageResponseCache;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -35,7 +32,7 @@
 
 public final class ImageResponseCacheTests extends AndroidTestCase {
 
-    @MediumTest @LargeTest
+    @LargeTest
     public void testImageCaching() throws Exception {
         // In unit test, since we need verify first access the image is not in cache
         // we need clear the cache first
@@ -47,10 +44,10 @@ public void testImageCaching() throws Exception {
         compareImages(bmp1, bmp2);
     }
     
-    @MediumTest @LargeTest
+    @LargeTest
     public void testImageNotCaching() throws IOException {
         
-        String imgUrl = "http://graph.facebook.com/ryanseacrest/picture?type=large";
+        String imgUrl = "https://graph.facebook.com/ryanseacrest/picture?type=large";
         
         Bitmap bmp1 = readImage(imgUrl, false);
         Bitmap bmp2 = readImage(imgUrl, false);
@@ -72,6 +69,7 @@ private Bitmap readImage(String uri, boolean expectedFromCache) {
                 HttpURLConnection connection = (HttpURLConnection)url.toURL().openConnection();
                 istream = ImageResponseCache.interceptAndCacheImageStream(safeGetContext(), connection);
             }
+
             assertTrue(istream != null);
             bmp = BitmapFactory.decodeStream(istream);
             assertTrue(bmp != null);
diff --git a/facebook/tests/src/com/facebook/internal/NativeProtocolVersionTests.java b/facebook/tests/src/com/facebook/internal/NativeProtocolVersionTests.java
new file mode 100644
index 000000000..e08245ab3
--- /dev/null
+++ b/facebook/tests/src/com/facebook/internal/NativeProtocolVersionTests.java
@@ -0,0 +1,157 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+
+import java.util.TreeSet;
+
+public class NativeProtocolVersionTests extends AndroidTestCase {
+    @SmallTest
+    public void testSdkOlderThanApp_versionSpecOpen() {
+        // Base case where a feature was enabled a while ago and the SDK and Native app have been updated
+        // since then.
+        int[] versionSpec = new int[] {3};
+        int latestSdkVersion = 7;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, 7);
+    }
+
+    @SmallTest
+    public void testSdkNewerThanApp_versionSpecOpen() {
+        // Base case where a feature was enabled a while ago and the SDK and Native app have been updated
+        // since then.
+        int[] versionSpec = new int[] {3};
+        int latestSdkVersion = 8;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, 7);
+    }
+
+    @SmallTest
+    public void testSdkOlderThanApp_versionSpecDisabled() {
+        // Case where a feature was enabled AND disabled a while ago and the SDK and Native app have been
+        // updated since then.
+        int[] versionSpec = new int[] {1,3,7,8};
+        int latestSdkVersion = 7;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+    }
+
+    @SmallTest
+    public void testSdkNewerThanApp_versionSpecDisabled() {
+        // Case where a feature was enabled AND disabled a while ago and the SDK and Native app have been
+        // updated since then.
+        int[] versionSpec = new int[] {1,3,6,7};
+        int latestSdkVersion = 8;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+    }
+
+    @SmallTest
+    public void testSdkOlderThanApp_versionSpecNewerAndEnabled() {
+        // Case where the sdk and app are older, but the app is still enabled
+        int[] versionSpec = new int[] {1,3,7,9,10,11,12,13};
+        int latestSdkVersion = 7;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, 7);
+    }
+
+    @SmallTest
+    public void testSdkNewerThanApp_versionSpecNewerAndEnabled() {
+        // Case where the sdk and app are older, but the app is still enabled
+        int[] versionSpec = new int[] {1,3,7,9,10,11,12,13};
+        int latestSdkVersion = 8;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, 7);
+    }
+
+    @SmallTest
+    public void testSdkOlderThanApp_versionSpecNewerAndDisabled() {
+        // Case where the sdk and app are older, and the app is a disabled version
+        int[] versionSpec = new int[] {1,3,7,8,10,11,12,13};
+        int latestSdkVersion = 7;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7,8};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+    }
+
+    @SmallTest
+    public void testSdkNewerThanApp_versionSpecNewerAndDisabled() {
+        // Case where the sdk and app are older, and the app is a disabled version
+        int[] versionSpec = new int[] {1,3,6,7,10,11,12,13};
+        int latestSdkVersion = 8;
+        int[] availableFbAppVersions = new int[] {1,2,3,4,5,6,7};
+
+        int resultVersion = NativeProtocol.computeLatestAvailableVersionFromVersionSpec(
+                getTreeSetFromIntArray(availableFbAppVersions),
+                latestSdkVersion,
+                versionSpec);
+
+        assertEquals(resultVersion, NativeProtocol.NO_PROTOCOL_AVAILABLE);
+    }
+
+    private TreeSet<Integer> getTreeSetFromIntArray(int[] array) {
+        TreeSet<Integer> treeSet = new TreeSet<Integer>();
+        for (int a : array) {
+            treeSet.add(a);
+        }
+
+        return treeSet;
+    }
+}
diff --git a/facebook/tests/src/com/facebook/internal/UtilityIntersectRangeTests.java b/facebook/tests/src/com/facebook/internal/UtilityIntersectRangeTests.java
new file mode 100644
index 000000000..16584d54b
--- /dev/null
+++ b/facebook/tests/src/com/facebook/internal/UtilityIntersectRangeTests.java
@@ -0,0 +1,97 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.internal;
+
+import android.test.AndroidTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+
+import java.util.Arrays;
+
+public class UtilityIntersectRangeTests extends AndroidTestCase {
+
+    @SmallTest
+    public void testIntersectRangesBothEmpty() {
+        int[] range1 = new int[0];
+        int[] range2 = new int[0];
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesOneEmpty() {
+        int[] range1 = new int[0];
+        int[] range2 = new int[]{1, 10};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesBothSameAndClosed() {
+        int[] range1 = new int[]{20, 30};
+        int[] range2 = new int[]{20, 30};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesNoIntersect() {
+        int[] range1 = new int[]{20, 30};
+        int[] range2 = new int[]{30, 50};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesSubsets() {
+        int[] range1 = new int[]{20, 100};
+        int[] range2 = new int[]{30, 40, 50, 60, 99, 100};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{30, 40, 50, 60, 99, 100}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesOverlap() {
+        int[] range1 = new int[]{20, 40, 60, 80};
+        int[] range2 = new int[]{10, 30, 50, 70};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesDifferentLengthsClosed() {
+        int[] range1 = new int[]{20, 40, 60, 80};
+        int[] range2 = new int[]{10, 30, 50, 70, 90, 110};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesDifferentLengthsOneOpen() {
+        int[] range1 = new int[]{10, 30, 50, 70, 90, 110};
+        int[] range2 = new int[]{20, 40, 60};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60, 70, 90, 110}));
+    }
+
+    @SmallTest
+    public void testIntersectRangesDifferentLengthsBothOpen() {
+        int[] range1 = new int[]{10, 30, 50};
+        int[] range2 = new int[]{20, 40, 60};
+        int[] intersectRange = Utility.intersectRanges(range1, range2);
+        assertTrue(Arrays.equals(intersectRange, new int[]{20, 30, 60}));
+    }
+}
diff --git a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
index 2e4d9c841..444d48836 100644
--- a/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
+++ b/facebook/tests/src/com/facebook/widget/FacebookDialogTests.java
@@ -17,14 +17,15 @@
 package com.facebook.widget;
 
 import android.graphics.Bitmap;
+import com.facebook.FacebookException;
 import com.facebook.FacebookTestCase;
-import com.facebook.internal.NativeProtocol;
 import com.facebook.model.GraphObject;
 import com.facebook.model.OpenGraphAction;
 import com.facebook.model.OpenGraphObject;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.io.File;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -255,6 +256,5 @@ public void testOpenGraphDialogBuilderDeprecatedConstructorRequiresActionTypeMat
             fail("expected exception");
         } catch (IllegalArgumentException exception) {
         }
-
     }
 }
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 000000000..6acd9c358
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,4 @@
+ANDROID_BUILD_MIN_SDK_VERSION=9
+ANDROID_BUILD_TARGET_SDK_VERSION=21
+ANDROID_BUILD_TOOLS_VERSION=21.1.2
+ANDROID_BUILD_SDK_VERSION=21
diff --git a/gradle/gradle/wrapper/gradle-wrapper.jar b/gradle/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 667288ad6..000000000
Binary files a/gradle/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/gradle/gradle/wrapper/gradle-wrapper.properties b/gradle/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index 221ce08bc..000000000
--- a/gradle/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-#Mon Nov 04 15:03:41 PST 2013
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
diff --git a/gradle/gradlew b/gradle/gradlew
deleted file mode 100755
index 91a7e269e..000000000
--- a/gradle/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradle/gradlew.bat b/gradle/gradlew.bat
deleted file mode 100644
index aec99730b..000000000
--- a/gradle/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 6e3193aa9..53bda0123 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Nov 13 23:44:57 PST 2013
+#Fri Dec 12 09:32:22 PST 2014
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/keystores/BUCK b/keystores/BUCK
new file mode 100644
index 000000000..15da20e6b
--- /dev/null
+++ b/keystores/BUCK
@@ -0,0 +1,8 @@
+keystore(
+  name = 'debug',
+  store = 'debug.keystore',
+  properties = 'debug.keystore.properties',
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/keystores/debug.keystore b/keystores/debug.keystore
new file mode 100644
index 000000000..364e105ed
Binary files /dev/null and b/keystores/debug.keystore differ
diff --git a/keystores/debug.keystore.properties b/keystores/debug.keystore.properties
new file mode 100644
index 000000000..121bfb49f
--- /dev/null
+++ b/keystores/debug.keystore.properties
@@ -0,0 +1,4 @@
+key.store=debug.keystore
+key.alias=androiddebugkey
+key.store.password=android
+key.alias.password=android
diff --git a/libs/BUCK b/libs/BUCK
new file mode 100644
index 000000000..1a2a7548a
--- /dev/null
+++ b/libs/BUCK
@@ -0,0 +1,15 @@
+prebuilt_jar(
+  name = 'android-support-v4',
+  binary_jar = 'android-support-v4.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+prebuilt_jar(
+  name = 'bolts',
+  binary_jar = 'bolts.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/libs/android-support-v4.jar b/libs/android-support-v4.jar
index feaf44f80..c31cede47 100644
Binary files a/libs/android-support-v4.jar and b/libs/android-support-v4.jar differ
diff --git a/libs/bolts-android-1.1.2.jar b/libs/bolts-android-1.1.2.jar
new file mode 100644
index 000000000..88a01a30b
Binary files /dev/null and b/libs/bolts-android-1.1.2.jar differ
diff --git a/samples/FriendPickerSample/AndroidManifest.xml b/samples/FriendPickerSample/AndroidManifest.xml
index d8f1911cd..13642ea38 100644
--- a/samples/FriendPickerSample/AndroidManifest.xml
+++ b/samples/FriendPickerSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.friendpicker"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
diff --git a/samples/FriendPickerSample/FriendPickerSample.iml b/samples/FriendPickerSample/FriendPickerSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/FriendPickerSample/FriendPickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/FriendPickerSample/build.gradle b/samples/FriendPickerSample/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/FriendPickerSample/build.gradle
+++ b/samples/FriendPickerSample/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/FriendPickerSample/project.properties b/samples/FriendPickerSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/FriendPickerSample/project.properties
+++ b/samples/FriendPickerSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/FriendPickerSample/res/drawable-hdpi/icon.png b/samples/FriendPickerSample/res/drawable-hdpi/icon.png
index 6a930c6c6..7d5a0608c 100644
Binary files a/samples/FriendPickerSample/res/drawable-hdpi/icon.png and b/samples/FriendPickerSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/FriendPickerSample/res/drawable-mdpi/icon.png b/samples/FriendPickerSample/res/drawable-mdpi/icon.png
index 33b418b7a..bdfec2583 100644
Binary files a/samples/FriendPickerSample/res/drawable-mdpi/icon.png and b/samples/FriendPickerSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/FriendPickerSample/res/drawable-xhdpi/icon.png b/samples/FriendPickerSample/res/drawable-xhdpi/icon.png
index 494e37a8d..b9c184918 100644
Binary files a/samples/FriendPickerSample/res/drawable-xhdpi/icon.png and b/samples/FriendPickerSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/FriendPickerSample/res/drawable/icon.png b/samples/FriendPickerSample/res/drawable/icon.png
index 33b418b7a..bdfec2583 100644
Binary files a/samples/FriendPickerSample/res/drawable/icon.png and b/samples/FriendPickerSample/res/drawable/icon.png differ
diff --git a/samples/FriendPickerSample/res/values/strings.xml b/samples/FriendPickerSample/res/values/strings.xml
index 747f98078..863108c2a 100644
--- a/samples/FriendPickerSample/res/values/strings.xml
+++ b/samples/FriendPickerSample/res/values/strings.xml
@@ -20,4 +20,7 @@
     <string name="app_id">370546396320150</string>
     <string name="exception">Exception: %1$s</string>
     <string name="ok_button">OK</string>
+    <string name="need_perms_alert_text">In order to pick your friends you need to accept all the permissions on the following page.</string>
+    <string name="need_perms_alert_button_ok">OK</string>
+    <string name="need_perms_alert_button_quit">Quit</string>
 </resources>
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
index 1c8ec2b62..215f95143 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
@@ -16,6 +16,8 @@
 
 package com.facebook.samples.friendpicker;
 
+import android.app.AlertDialog;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
@@ -24,15 +26,23 @@
 import android.widget.Button;
 import android.widget.TextView;
 import com.facebook.AppEventsLogger;
+import com.facebook.Session;
+import com.facebook.Session.NewPermissionsRequest;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphUser;
-import com.facebook.Session;
 
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 
 public class FriendPickerSampleActivity extends FragmentActivity {
+    private static final List<String> PERMISSIONS = new ArrayList<String>() {
+        {
+            add("user_friends");
+            add("public_profile");
+        }
+    };
     private static final int PICK_FRIENDS_ACTIVITY = 1;
     private Button pickFriendsButton;
     private TextView resultsTextView;
@@ -80,6 +90,15 @@ protected void onResume() {
         AppEventsLogger.activateApp(this);
     }
 
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
+    }
+
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         switch (requestCode) {
             case PICK_FRIENDS_ACTIVITY:
@@ -94,19 +113,70 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
     private boolean ensureOpenSession() {
         if (Session.getActiveSession() == null ||
                 !Session.getActiveSession().isOpened()) {
-            Session.openActiveSession(this, true, new Session.StatusCallback() {
-                @Override
-                public void call(Session session, SessionState state, Exception exception) {
-                    onSessionStateChanged(session, state, exception);
-                }
-            });
+            Session.openActiveSession(
+                    this, 
+                    true, 
+                    PERMISSIONS,
+                    new Session.StatusCallback() {
+                        @Override
+                        public void call(Session session, SessionState state, Exception exception) {
+                            onSessionStateChanged(session, state, exception);
+                        }
+                    });
             return false;
         }
         return true;
     }
+    
+    private boolean sessionHasNecessaryPerms(Session session) {
+        if (session != null && session.getPermissions() != null) {
+            for (String requestedPerm : PERMISSIONS) {
+                if (!session.getPermissions().contains(requestedPerm)) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        return false;
+    }
+    
+    private List<String> getMissingPermissions(Session session) {
+        List<String> missingPerms = new ArrayList<String>(PERMISSIONS);
+        if (session != null && session.getPermissions() != null) {
+            for (String requestedPerm : PERMISSIONS) {
+                if (session.getPermissions().contains(requestedPerm)) {
+                    missingPerms.remove(requestedPerm);
+                }
+            }
+        }
+        return missingPerms;
+    }
 
-    private void onSessionStateChanged(Session session, SessionState state, Exception exception) {
-        if (pickFriendsWhenSessionOpened && state.isOpened()) {
+    private void onSessionStateChanged(final Session session, SessionState state, Exception exception) {
+        if (state.isOpened() && !sessionHasNecessaryPerms(session)) {
+            AlertDialog.Builder builder = new AlertDialog.Builder(this);
+            builder.setMessage(R.string.need_perms_alert_text);
+            builder.setPositiveButton(
+                    R.string.need_perms_alert_button_ok, 
+                    new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            session.requestNewReadPermissions(
+                                    new NewPermissionsRequest(
+                                            FriendPickerSampleActivity.this, 
+                                            getMissingPermissions(session)));
+                        }
+                    });
+            builder.setNegativeButton(
+                    R.string.need_perms_alert_button_quit,
+                    new DialogInterface.OnClickListener() {
+                        @Override
+                        public void onClick(DialogInterface dialog, int which) {
+                            finish();
+                        }
+                    });
+            builder.show();
+        } else if (pickFriendsWhenSessionOpened && state.isOpened()) {
             pickFriendsWhenSessionOpened = false;
 
             startPickFriendsActivity();
diff --git a/samples/GraphApiSample/.classpath b/samples/GraphApiSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/GraphApiSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/GraphApiSample/.project b/samples/GraphApiSample/.project
deleted file mode 100644
index ff735cf87..000000000
--- a/samples/GraphApiSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>GraphApiSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/GraphApiSample/AndroidManifest.xml b/samples/GraphApiSample/AndroidManifest.xml
deleted file mode 100644
index 3647ce9a0..000000000
--- a/samples/GraphApiSample/AndroidManifest.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.graphapi"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".GraphApiSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-    </application>
-
-</manifest>
diff --git a/samples/GraphApiSample/GraphApiSample.iml b/samples/GraphApiSample/GraphApiSample.iml
deleted file mode 100644
index 7a46ab734..000000000
--- a/samples/GraphApiSample/GraphApiSample.iml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="EclipseModuleManager">
-    <conelement value="com.android.ide.eclipse.adt.LIBRARIES" />
-    <src_description expected_position="0">
-      <src_folder value="file://$MODULE_DIR$/src" expected_position="0" />
-      <src_folder value="file://$MODULE_DIR$/gen" expected_position="1" />
-    </src_description>
-  </component>
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/bin/classes" />
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/GraphApiSample/ant.properties b/samples/GraphApiSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/GraphApiSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/GraphApiSample/build.gradle b/samples/GraphApiSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/GraphApiSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/GraphApiSample/build.xml b/samples/GraphApiSample/build.xml
deleted file mode 100644
index b2456a58c..000000000
--- a/samples/GraphApiSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="GraphApiSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/GraphApiSample/proguard-project.txt b/samples/GraphApiSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/GraphApiSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/GraphApiSample/project.properties b/samples/GraphApiSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/GraphApiSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/GraphApiSample/res/drawable-hdpi/icon.png b/samples/GraphApiSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index a888af1c6..000000000
Binary files a/samples/GraphApiSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-mdpi/icon.png b/samples/GraphApiSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable-xhdpi/icon.png b/samples/GraphApiSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 31201f160..000000000
Binary files a/samples/GraphApiSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/drawable/icon.png b/samples/GraphApiSample/res/drawable/icon.png
deleted file mode 100644
index 2275c8571..000000000
Binary files a/samples/GraphApiSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/GraphApiSample/res/layout/main.xml b/samples/GraphApiSample/res/layout/main.xml
deleted file mode 100644
index 8ebf7e229..000000000
--- a/samples/GraphApiSample/res/layout/main.xml
+++ /dev/null
@@ -1,44 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <EditText
-        android:id="@+id/editRequests"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:ems="10" >
-
-        <requestFocus />
-    </EditText>
-
-    <Button
-        android:id="@+id/buttonRequest"
-        android:layout_width="122dp"
-        android:layout_height="wrap_content"
-        android:text="@string/request" />
-
-    <TextView
-        android:id="@+id/textViewResults"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        android:textAppearance="?android:attr/textAppearanceLarge" />
-
-</LinearLayout>
diff --git a/samples/GraphApiSample/res/values/strings.xml b/samples/GraphApiSample/res/values/strings.xml
deleted file mode 100644
index 025d17499..000000000
--- a/samples/GraphApiSample/res/values/strings.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="hello">Hello World, GraphApiSampleActivity!</string>
-    <string name="app_name">GraphApiSample</string>
-    <string name="request">Request</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="login_failed_dialog_title">Login failed</string>
-    <string name="ok_button">OK</string>
-
-</resources>
diff --git a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java b/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
deleted file mode 100644
index b5960c9ac..000000000
--- a/samples/GraphApiSample/src/com/facebook/samples/graphapi/GraphApiSampleActivity.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.graphapi;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-import com.facebook.*;
-import com.facebook.Session.StatusCallback;
-import com.facebook.model.GraphObject;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class GraphApiSampleActivity extends Activity {
-    static final String APP_ID = "307234779396415";
-    static final String PENDING_REQUEST_BUNDLE_KEY = "com.facebook.samples.graphapi:PendingRequest";
-
-    Button buttonRequest;
-    EditText editRequests;
-    TextView textViewResults;
-    Session session;
-    boolean pendingRequest;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        this.buttonRequest = (Button) findViewById(R.id.buttonRequest);
-        this.buttonRequest.setOnClickListener(new OnClickListener() {
-            public void onClick(View view) {
-                onClickRequest();
-            }
-        });
-        this.editRequests = (EditText) findViewById(R.id.editRequests);
-        this.textViewResults = (TextView) findViewById(R.id.textViewResults);
-
-        this.session = createSession();
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-    }
-
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        if (this.session.onActivityResult(this, requestCode, resultCode, data) &&
-                pendingRequest &&
-                this.session.getState().isOpened()) {
-            sendRequests();
-        }
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this, APP_ID);
-    }
-
-    @Override
-    protected void onRestoreInstanceState(Bundle savedInstanceState) {
-        super.onRestoreInstanceState(savedInstanceState);
-
-        pendingRequest = savedInstanceState.getBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        outState.putBoolean(PENDING_REQUEST_BUNDLE_KEY, pendingRequest);
-    }
-
-    private void onClickRequest() {
-        if (this.session.isOpened()) {
-            sendRequests();
-        } else {
-            StatusCallback callback = new StatusCallback() {
-                public void call(Session session, SessionState state, Exception exception) {
-                    if (exception != null) {
-                        new AlertDialog.Builder(GraphApiSampleActivity.this)
-                                .setTitle(R.string.login_failed_dialog_title)
-                                .setMessage(exception.getMessage())
-                                .setPositiveButton(R.string.ok_button, null)
-                                .show();
-                        GraphApiSampleActivity.this.session = createSession();
-                    }
-                }
-            };
-            pendingRequest = true;
-            this.session.openForRead(new Session.OpenRequest(this).setCallback(callback));
-        }
-    }
-
-    private void sendRequests() {
-        textViewResults.setText("");
-
-        String requestIdsText = editRequests.getText().toString();
-        String[] requestIds = requestIdsText.split(",");
-
-        List<Request> requests = new ArrayList<Request>();
-        for (final String requestId : requestIds) {
-            requests.add(new Request(session, requestId, null, null, new Request.Callback() {
-                public void onCompleted(Response response) {
-                    GraphObject graphObject = response.getGraphObject();
-                    FacebookRequestError error = response.getError();
-                    String s = textViewResults.getText().toString();
-                    if (graphObject != null) {
-                        if (graphObject.getProperty("id") != null) {
-                            s = s + String.format("%s: %s\n", graphObject.getProperty("id"), graphObject.getProperty(
-                                    "name"));
-                        } else {
-                            s = s + String.format("%s: <no such id>\n", requestId);
-                        }
-                    } else if (error != null) {
-                        s = s + String.format("Error: %s", error.getErrorMessage());
-                    }
-                    textViewResults.setText(s);
-                }
-            }));
-        }
-        pendingRequest = false;
-        Request.executeBatchAndWait(requests);
-    }
-
-    private Session createSession() {
-        Session activeSession = Session.getActiveSession();
-        if (activeSession == null || activeSession.getState().isClosed()) {
-            activeSession = new Session.Builder(this).setApplicationId(APP_ID).build();
-            Session.setActiveSession(activeSession);
-        }
-        return activeSession;
-    }
-}
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 246d0de24..c19c42f6d 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.hellofacebook"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
@@ -22,5 +22,13 @@
                   android:theme="@android:style/Theme.Translucent.NoTitleBar"
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
+        <provider android:authorities="com.facebook.app.NativeAppCallContentProvider355198514515820"
+                  android:name="com.facebook.NativeAppCallContentProvider"
+                  android:exported="true"/>
+        <receiver android:name="com.facebook.samples.hellofacebook.HelloFacebookBroadcastReceiver">
+            <intent-filter>
+                <action android:name="com.facebook.platform.AppCallResultBroadcast" />
+            </intent-filter>
+        </receiver>
     </application>
 </manifest>
diff --git a/samples/HelloFacebookSample/BUCK b/samples/HelloFacebookSample/BUCK
new file mode 100644
index 000000000..27198e91c
--- /dev/null
+++ b/samples/HelloFacebookSample/BUCK
@@ -0,0 +1,31 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.facebook',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  target = 'android-16',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
diff --git a/samples/HelloFacebookSample/HelloFacebookSample.iml b/samples/HelloFacebookSample/HelloFacebookSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/HelloFacebookSample/HelloFacebookSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/HelloFacebookSample/build.gradle b/samples/HelloFacebookSample/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/HelloFacebookSample/build.gradle
+++ b/samples/HelloFacebookSample/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/HelloFacebookSample/project.properties b/samples/HelloFacebookSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/HelloFacebookSample/project.properties
+++ b/samples/HelloFacebookSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png
index e603120e1..0a0d7cc73 100644
Binary files a/samples/HelloFacebookSample/res/drawable-hdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png
index f2fc84fb6..b4507c0e7 100644
Binary files a/samples/HelloFacebookSample/res/drawable-mdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png
index 143a69f21..6e8424602 100644
Binary files a/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png and b/samples/HelloFacebookSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/HelloFacebookSample/res/drawable/icon.png b/samples/HelloFacebookSample/res/drawable/icon.png
index f2fc84fb6..b4507c0e7 100644
Binary files a/samples/HelloFacebookSample/res/drawable/icon.png and b/samples/HelloFacebookSample/res/drawable/icon.png differ
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
new file mode 100644
index 000000000..a1328155e
--- /dev/null
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookBroadcastReceiver.java
@@ -0,0 +1,40 @@
+/**
+ * Copyright 2010-present Facebook.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *    http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.facebook.samples.hellofacebook;
+
+import android.os.Bundle;
+import android.util.Log;
+import com.facebook.FacebookBroadcastReceiver;
+
+/**
+ * This is a simple example to demonstrate how an app could extend FacebookBroadcastReceiver to handle
+ * notifications that long-running operations such as photo uploads have finished.
+ */
+public class HelloFacebookBroadcastReceiver extends FacebookBroadcastReceiver {
+
+    @Override
+    protected void onSuccessfulAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " succeeded."));
+    }
+
+    @Override
+    protected void onFailedAppCall(String appCallId, String action, Bundle extras) {
+        // A real app could update UI or notify the user that their photo was not uploaded.
+        Log.d("HelloFacebook", String.format("Photo uploaded by call " + appCallId + " failed."));
+    }
+}
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
index bf374a95c..8b737f11e 100644
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
@@ -38,7 +38,10 @@
 import com.facebook.model.GraphUser;
 import com.facebook.widget.*;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
 
 public class HelloFacebookSampleActivity extends FragmentActivity {
 
@@ -65,6 +68,7 @@
     private GraphPlace place;
     private List<GraphUser> tags;
     private boolean canPresentShareDialog;
+    private boolean canPresentShareDialogWithPhotos;
 
     private enum PendingAction {
         NONE,
@@ -175,8 +179,12 @@ public void onBackStackChanged() {
             }
         });
 
+        // Can we present the share dialog for regular links?
         canPresentShareDialog = FacebookDialog.canPresentShareDialog(this,
                 FacebookDialog.ShareDialogFeature.SHARE_DIALOG);
+        // Can we present the share dialog for photos?
+        canPresentShareDialogWithPhotos = FacebookDialog.canPresentShareDialog(this,
+                FacebookDialog.ShareDialogFeature.PHOTOS);
     }
 
     @Override
@@ -209,6 +217,10 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     public void onPause() {
         super.onPause();
         uiHelper.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
@@ -238,7 +250,7 @@ private void updateUI() {
         boolean enableButtons = (session != null && session.isOpened());
 
         postStatusUpdateButton.setEnabled(enableButtons || canPresentShareDialog);
-        postPhotoButton.setEnabled(enableButtons);
+        postPhotoButton.setEnabled(enableButtons || canPresentShareDialogWithPhotos);
         pickFriendsButton.setEnabled(enableButtons);
         pickPlaceButton.setEnabled(enableButtons);
 
@@ -295,7 +307,7 @@ private void onClickPostStatusUpdate() {
         performPublish(PendingAction.POST_STATUS_UPDATE, canPresentShareDialog);
     }
 
-    private FacebookDialog.ShareDialogBuilder createShareDialogBuilder() {
+    private FacebookDialog.ShareDialogBuilder createShareDialogBuilderForLink() {
         return new FacebookDialog.ShareDialogBuilder(this)
                 .setName("Hello Facebook")
                 .setDescription("The 'Hello Facebook' sample application showcases simple Facebook integration")
@@ -304,7 +316,7 @@ private void onClickPostStatusUpdate() {
 
     private void postStatusUpdate() {
         if (canPresentShareDialog) {
-            FacebookDialog shareDialog = createShareDialogBuilder().build();
+            FacebookDialog shareDialog = createShareDialogBuilderForLink().build();
             uiHelper.trackPendingDialogCall(shareDialog.present());
         } else if (user != null && hasPublishPermission()) {
             final String message = getString(R.string.status_update, user.getFirstName(), (new Date().toString()));
@@ -322,12 +334,20 @@ public void onCompleted(Response response) {
     }
 
     private void onClickPostPhoto() {
-        performPublish(PendingAction.POST_PHOTO, false);
+        performPublish(PendingAction.POST_PHOTO, canPresentShareDialogWithPhotos);
+    }
+
+    private FacebookDialog.PhotoShareDialogBuilder createShareDialogBuilderForPhoto(Bitmap... photos) {
+        return new FacebookDialog.PhotoShareDialogBuilder(this)
+                .addPhotos(Arrays.asList(photos));
     }
 
     private void postPhoto() {
-        if (hasPublishPermission()) {
-            Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        Bitmap image = BitmapFactory.decodeResource(this.getResources(), R.drawable.icon);
+        if (canPresentShareDialogWithPhotos) {
+            FacebookDialog shareDialog = createShareDialogBuilderForPhoto(image).build();
+            uiHelper.trackPendingDialogCall(shareDialog.present());
+        } else if (hasPublishPermission()) {
             Request request = Request.newUploadPhotoRequest(Session.getActiveSession(), image, new Request.Callback() {
                 @Override
                 public void onCompleted(Response response) {
diff --git a/samples/PlacePickerSample/AndroidManifest.xml b/samples/PlacePickerSample/AndroidManifest.xml
index b0697ff65..f469c0196 100644
--- a/samples/PlacePickerSample/AndroidManifest.xml
+++ b/samples/PlacePickerSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.placepicker"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
diff --git a/samples/PlacePickerSample/PlacePickerSample.iml b/samples/PlacePickerSample/PlacePickerSample.iml
deleted file mode 100644
index 2e07730b5..000000000
--- a/samples/PlacePickerSample/PlacePickerSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/PlacePickerSample/build.gradle b/samples/PlacePickerSample/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/PlacePickerSample/build.gradle
+++ b/samples/PlacePickerSample/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/PlacePickerSample/project.properties b/samples/PlacePickerSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/PlacePickerSample/project.properties
+++ b/samples/PlacePickerSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/PlacePickerSample/res/drawable-hdpi/icon.png b/samples/PlacePickerSample/res/drawable-hdpi/icon.png
index 4059334b5..72320cacd 100644
Binary files a/samples/PlacePickerSample/res/drawable-hdpi/icon.png and b/samples/PlacePickerSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/PlacePickerSample/res/drawable-mdpi/icon.png b/samples/PlacePickerSample/res/drawable-mdpi/icon.png
index 1fa3834d0..9012b57a2 100644
Binary files a/samples/PlacePickerSample/res/drawable-mdpi/icon.png and b/samples/PlacePickerSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/PlacePickerSample/res/drawable-xhdpi/icon.png b/samples/PlacePickerSample/res/drawable-xhdpi/icon.png
index 2b3083d44..40cd9480c 100644
Binary files a/samples/PlacePickerSample/res/drawable-xhdpi/icon.png and b/samples/PlacePickerSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/PlacePickerSample/res/drawable/icon.png b/samples/PlacePickerSample/res/drawable/icon.png
index 1fa3834d0..9012b57a2 100644
Binary files a/samples/PlacePickerSample/res/drawable/icon.png and b/samples/PlacePickerSample/res/drawable/icon.png differ
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
index ce8008f8b..8847017ec 100644
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
+++ b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
@@ -29,11 +29,11 @@
 import android.widget.Button;
 import android.widget.TextView;
 import com.facebook.AppEventsLogger;
+import com.facebook.Session;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphLocation;
 import com.facebook.model.GraphPlace;
-import com.facebook.Session;
 
 public class PlacePickerSampleActivity extends FragmentActivity implements LocationListener {
     private static final int PLACE_ACTIVITY = 1;
@@ -136,6 +136,10 @@ protected void onDestroy() {
     protected void onPause() {
         super.onPause();
         lifecycleHelper.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/ProfilePictureSample/.classpath b/samples/ProfilePictureSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/ProfilePictureSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/ProfilePictureSample/.project b/samples/ProfilePictureSample/.project
deleted file mode 100644
index 2b2339321..000000000
--- a/samples/ProfilePictureSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>ProfilePictureSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/ProfilePictureSample/AndroidManifest.xml b/samples/ProfilePictureSample/AndroidManifest.xml
deleted file mode 100644
index 907d05754..000000000
--- a/samples/ProfilePictureSample/AndroidManifest.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="com.facebook.samples.profilepicture"
-          android:versionCode="1"
-          android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
-    <uses-permission android:name="android.permission.INTERNET"/>
-    <application android:label="@string/app_name"
-                 android:icon="@drawable/icon" >
-        <activity
-                android:name=".ProfilePictureSampleActivity"
-                android:label="@string/app_name"
-                android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-</manifest> 
diff --git a/samples/ProfilePictureSample/ProfilePictureSample.iml b/samples/ProfilePictureSample/ProfilePictureSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/ProfilePictureSample/ProfilePictureSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/ProfilePictureSample/ant.properties b/samples/ProfilePictureSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/ProfilePictureSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/ProfilePictureSample/build.gradle b/samples/ProfilePictureSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/ProfilePictureSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/ProfilePictureSample/build.xml b/samples/ProfilePictureSample/build.xml
deleted file mode 100644
index 3454adc93..000000000
--- a/samples/ProfilePictureSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="ProfilePictureSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties"/>
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties"/>
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env"/>
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME"/>
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties"/>
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-            />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true"/>
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml"/>
-
-</project>
diff --git a/samples/ProfilePictureSample/proguard-project.txt b/samples/ProfilePictureSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/ProfilePictureSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/ProfilePictureSample/project.properties b/samples/ProfilePictureSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/ProfilePictureSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png b/samples/ProfilePictureSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 1bc72b1bf..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png b/samples/ProfilePictureSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png b/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index 1bc4b231d..000000000
Binary files a/samples/ProfilePictureSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/drawable/icon.png b/samples/ProfilePictureSample/res/drawable/icon.png
deleted file mode 100644
index e0de1a4ba..000000000
Binary files a/samples/ProfilePictureSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
deleted file mode 100644
index 8797e28be..000000000
--- a/samples/ProfilePictureSample/res/layout/activity_profile_picture_sample.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<fragment xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/profilePictureSampleFragment"
-          android:layout_width="match_parent"
-          android:layout_height="match_parent"
-          android:name="com.facebook.samples.profilepicture.ProfilePictureSampleFragment"
-        />
diff --git a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml b/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
deleted file mode 100644
index 8bb4921c5..000000000
--- a/samples/ProfilePictureSample/res/layout/fragment_profile_picture_sample.xml
+++ /dev/null
@@ -1,152 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
-            xmlns:app="http://schemas.android.com/apk/res-auto"
-        android:layout_width="match_parent"
-        android:layout_height="match_parent"
-        >
-<LinearLayout
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-        >
-    <TextView
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/description"
-            android:layout_marginBottom="15dp"
-            />
-    <LinearLayout
-            android:layout_height="wrap_content"
-            android:layout_width="match_parent"
-            android:layout_marginBottom="15dp"
-            android:orientation="horizontal">
-        <LinearLayout
-                android:id="@+id/presetSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                >
-            <Button
-                    android:id="@+id/smallerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/smaller_button_text"
-                    android:textSize="18dp"
-                    />
-            <Button
-                    android:id="@+id/largerButton"
-                    android:layout_height="40dp"
-                    android:layout_width="40dp"
-                    android:layout_weight="0"
-                    android:text="@string/larger_button_text"
-                    android:textSize="18dp"
-                    android:enabled="false"
-                    />
-            <TextView
-                    android:id="@+id/sizeLabel"
-                    android:layout_height="40dp"
-                    android:layout_width="0dp"
-                    android:layout_weight="1"
-                    android:paddingLeft="10dp"
-                    android:text="@string/large_image_size"
-                    android:textSize="18dp"
-                    />
-        </LinearLayout>
-        <SeekBar
-                android:id="@+id/customSizeView"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                android:orientation="horizontal"
-                android:visibility="gone"
-                />
-        <Button
-                android:id="@+id/sizeToggle"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:text="@string/custom_size_button_text"
-                />
-    </LinearLayout>
-    <LinearLayout
-            android:orientation="horizontal"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="10dp"
-            android:layout_marginBottom="10dp"
-            >
-        <com.facebook.widget.ProfilePictureView
-                android:id="@+id/profilepic"
-                android:layout_height="wrap_content"
-                android:layout_width="0dp"
-                android:layout_weight="1"
-                app:preset_size="large"
-                app:is_cropped="true"
-                />
-        <LinearLayout
-                android:id="@+id/userbuttoncontainer"
-                android:orientation="vertical"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="right"
-                >
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_chris_name"
-                    android:tag="chris.lang.92123"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_ming_name"
-                    android:tag="mingfli"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_karthik_name"
-                    android:tag="ksubraman"
-                    />
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_random_name"
-                    />
-
-            <Button
-                    android:layout_width="match_parent"
-                    android:layout_height="wrap_content"
-                    android:text="@string/user_none_name"
-                    android:tag=""
-                    />
-        </LinearLayout>
-    </LinearLayout>
-
-    <CheckBox
-            android:id="@+id/squareCropToggle"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="@string/cropping_label"
-            android:checked="true"
-            />
-</LinearLayout>
-</ScrollView>
diff --git a/samples/ProfilePictureSample/res/values/strings.xml b/samples/ProfilePictureSample/res/values/strings.xml
deleted file mode 100644
index bde7903ad..000000000
--- a/samples/ProfilePictureSample/res/values/strings.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="app_name">ProfilePictureSample</string>
-    <string name="description">Sample app demonstrating the use of ProfilePictureView</string>
-    <string name="cropping_label">Show cropped version</string>
-    <string name="crop_original_button_text">Original</string>
-    <string name="crop_square_button_text">Square</string>
-    <string name="user_chris_name">Chris</string>
-    <string name="user_ming_name">Ming</string>
-    <string name="user_karthik_name">Karthik</string>
-    <string name="user_random_name">Random</string>
-    <string name="user_none_name">None</string>
-    <string name="smaller_button_text">-</string>
-    <string name="larger_button_text">+</string>
-    <string name="large_image_size">Large</string>
-    <string name="normal_image_size">Normal</string>
-    <string name="small_image_size">Small</string>
-    <string name="preset_size_button_text">Use preset size</string>
-    <string name="custom_size_button_text">Use custom size</string>
-</resources>
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
deleted file mode 100644
index dc2b12efa..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleActivity.java
+++ /dev/null
@@ -1,28 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-
-public class ProfilePictureSampleActivity extends FragmentActivity {
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity_profile_picture_sample);
-    }
-}
diff --git a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java b/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
deleted file mode 100644
index b80ca2eff..000000000
--- a/samples/ProfilePictureSample/src/com/facebook/samples/profilepicture/ProfilePictureSampleFragment.java
+++ /dev/null
@@ -1,314 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.profilepicture;
-
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.*;
-import com.facebook.widget.ProfilePictureView;
-
-import java.util.Date;
-import java.util.Random;
-
-public class ProfilePictureSampleFragment extends Fragment {
-
-    // Keeping the number of custom sizes low to prevent excessive network chatter.
-    private static final int MAX_CUSTOM_SIZES = 6;
-    private static final int DEFAULT_SIZE_INCREMENT = MAX_CUSTOM_SIZES / 2;
-    private static final String PICTURE_SIZE_TYPE_KEY = "PictureSizeType";
-
-    private static final String[] INTERESTING_IDS = {
-        "zuck",
-        // Recent Presidents and nominees
-        "barackobama",
-        "mittromney",
-        "johnmccain",
-        "johnkerry",
-        "georgewbush",
-        "algore",
-        // Places too!
-        "Disneyland",
-        "SpaceNeedle",
-        "TourEiffel",
-        "sydneyoperahouse",
-        // A selection of 1986 Mets
-        "166020963458360",
-        "108084865880237",
-        "140447466087679",
-        "111825495501392",
-        // The cast of Saved by the Bell
-        "108168249210849",
-        "TiffaniThiessen",
-        "108126672542534",
-        "112886105391693",
-        "MarioLopezExtra",
-        "108504145837165",
-        "dennishaskins",
-        // Eighties bands that have been to Moscow
-        "7220821999",
-        "31938132882",
-        "108023262558391",
-        "209263392372",
-        "104132506290482",
-        "9721897972",
-        "5461947317",
-        "57084011597",
-        // Three people that have never been in my kitchen
-        "24408579964",
-        "111980872152571",
-        "112427772106500",
-        // Trusted anchormen
-        "113415525338717",
-        "105628452803615",
-        "105533779480538",
-    };
-
-    private int pictureSizeType = ProfilePictureView.CUSTOM;
-    private String firstUserId;
-    private Random randomGenerator;
-
-    private ProfilePictureView profilePic;
-    private Button smallerButton;
-    private Button largerButton;
-    private TextView sizeLabel;
-    private View presetSizeView;
-    private SeekBar customSizeView;
-    private CheckBox cropToggle;
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {
-        View fragmentView = inflater.inflate(R.layout.fragment_profile_picture_sample, parent, false);
-
-        randomGenerator = new Random((new Date()).getTime());
-
-        profilePic = (ProfilePictureView) fragmentView.findViewById(R.id.profilepic);
-        smallerButton = (Button) fragmentView.findViewById(R.id.smallerButton);
-        largerButton = (Button) fragmentView.findViewById(R.id.largerButton);
-        sizeLabel = (TextView) fragmentView.findViewById(R.id.sizeLabel);
-        presetSizeView = fragmentView.findViewById(R.id.presetSizeView);
-        customSizeView = (SeekBar) fragmentView.findViewById(R.id.customSizeView);
-        cropToggle = (CheckBox) fragmentView.findViewById(R.id.squareCropToggle);
-
-        LinearLayout container = (LinearLayout) fragmentView.findViewById(R.id.userbuttoncontainer);
-        int numChildren = container.getChildCount();
-        for (int i = 0; i < numChildren; i++) {
-            View childView = container.getChildAt(i);
-            Object tag = childView.getTag();
-            if (childView instanceof Button) {
-                setupUserButton((Button)childView);
-                if (i == 0) {
-                    // Initialize the image to the first user
-                    firstUserId = tag.toString();
-                }
-            }
-        }
-
-        cropToggle.setOnCheckedChangeListener(new CheckBox.OnCheckedChangeListener() {
-            @Override
-            public void onCheckedChanged(CompoundButton checkbox, boolean checked) {
-                profilePic.setCropped(checked);
-            }
-        });
-
-        final Button sizeToggle = (Button) fragmentView.findViewById(R.id.sizeToggle);
-        sizeToggle.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                if (pictureSizeType != ProfilePictureView.CUSTOM) {
-                    sizeToggle.setText(R.string.preset_size_button_text);
-                    switchToCustomSize();
-                } else {
-                    sizeToggle.setText(R.string.custom_size_button_text);
-                    switchToPresetSize(ProfilePictureView.LARGE);
-                }
-            }
-        });
-
-        smallerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.LARGE:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.SMALL);
-                        break;
-                }
-            }
-        });
-
-        largerButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View view) {
-                switch(profilePic.getPresetSize()) {
-                    case ProfilePictureView.NORMAL:
-                        switchToPresetSize(ProfilePictureView.LARGE);
-                        break;
-                    case ProfilePictureView.SMALL:
-                        switchToPresetSize(ProfilePictureView.NORMAL);
-                        break;
-                }
-            }
-        });
-
-        // We will fetch a new image for each change in the SeekBar. So keeping the count low
-        // to prevent too much network chatter. SeekBar reports 0-max, so we will get max+1
-        // notifications of change.
-        customSizeView.setMax(MAX_CUSTOM_SIZES);
-        customSizeView.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
-            @Override
-            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {
-                updateProfilePicForCustomSizeIncrement(i);
-            }
-
-            @Override
-            public void onStartTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-
-            @Override
-            public void onStopTrackingTouch(SeekBar seekBar) {
-                // NO-OP
-            }
-        });
-
-        restoreState(savedInstanceState);
-
-        return fragmentView;
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-
-        // Store the size type since we will use that to switch the Fragment's UI
-        // between CUSTOM & PRESET modes
-        // Other state (userId & isCropped) will be saved/restored directly by
-        // ProfilePictureView
-        outState.putInt(PICTURE_SIZE_TYPE_KEY, pictureSizeType);
-    }
-
-    private void restoreState(Bundle savedInstanceState) {
-        if (savedInstanceState != null) {
-            // Is we have saved state, restore the Fragment to it.
-            // UserId & isCropped will be restored directly by ProfilePictureView
-            pictureSizeType = savedInstanceState.getInt(
-                    PICTURE_SIZE_TYPE_KEY, ProfilePictureView.LARGE);
-
-            if (pictureSizeType == ProfilePictureView.CUSTOM) {
-                switchToCustomSize();
-            } else {
-                switchToPresetSize(pictureSizeType);
-            }
-        } else {
-            // No saved state. Let's go to a default state
-            switchToPresetSize(ProfilePictureView.LARGE);
-            profilePic.setCropped(cropToggle.isChecked());
-
-            // Setting userId last so that only one network request is sent
-            profilePic.setProfileId(firstUserId);
-        }
-    }
-
-    private void setupUserButton(Button b) {
-        b.setOnClickListener(new Button.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Object tag = v.getTag();
-                String userId = null;
-                if (tag != null) {
-                    userId = tag.toString();
-                } else {
-                    // Random id.
-                    userId = INTERESTING_IDS[randomGenerator.nextInt(INTERESTING_IDS.length)];
-                }
-                profilePic.setProfileId(userId);
-            }
-        });
-    }
-
-    private void switchToCustomSize() {
-        pictureSizeType = ProfilePictureView.CUSTOM;
-        presetSizeView.setVisibility(View.GONE);
-        customSizeView.setVisibility(View.VISIBLE);
-
-        profilePic.setPresetSize(pictureSizeType);
-
-        customSizeView.setProgress(DEFAULT_SIZE_INCREMENT);
-        updateProfilePicForCustomSizeIncrement(DEFAULT_SIZE_INCREMENT);
-    }
-
-    private void switchToPresetSize(int sizeType) {
-        customSizeView.setVisibility(View.GONE);
-        presetSizeView.setVisibility(View.VISIBLE);
-
-        switch(sizeType) {
-            case ProfilePictureView.SMALL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(false);
-                sizeLabel.setText(R.string.small_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.NORMAL:
-                largerButton.setEnabled(true);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.normal_image_size);
-                pictureSizeType = sizeType;
-                break;
-            case ProfilePictureView.LARGE:
-            default:
-                largerButton.setEnabled(false);
-                smallerButton.setEnabled(true);
-                sizeLabel.setText(R.string.large_image_size);
-                pictureSizeType = ProfilePictureView.LARGE;
-                break;
-        }
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                0,
-                ViewGroup.LayoutParams.WRAP_CONTENT,
-                1
-        );
-
-        profilePic.setLayoutParams(params);
-        profilePic.setPresetSize(pictureSizeType);
-    }
-
-    private void updateProfilePicForCustomSizeIncrement(int i) {
-        if (pictureSizeType != ProfilePictureView.CUSTOM) {
-            return;
-        }
-
-        // This will ensure a minimum size of 51x68 and will scale the image at
-        // a ratio of 3:4 (w:h) as the SeekBar is moved.
-        //
-        // Completely arbitrary
-        //
-        // NOTE: The numbers are in dips.
-        float width = (i * 21) + 51;
-        float height = (i * 28) + 68;
-
-        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                (int)(width * getResources().getDisplayMetrics().density),
-                (int)(height * getResources().getDisplayMetrics().density));
-        profilePic.setLayoutParams(params);
-    }
-}
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index ed5066d49..5e81e5104 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.rps"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
@@ -18,6 +18,12 @@
                 <action android:name="android.intent.action.MAIN"/>
                 <category android:name="android.intent.category.LAUNCHER"/>
             </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:host="fb.me" android:scheme="https" />
+            </intent-filter>
         </activity>
         <activity android:name="FriendActivity"
                   android:label="@string/app_name" />
@@ -26,6 +32,7 @@
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
         <provider android:authorities="com.facebook.app.NativeAppCallContentProvider157578437735213"
-                  android:name="com.facebook.NativeAppCallContentProvider" />
+                  android:name="com.facebook.NativeAppCallContentProvider"
+                  android:exported="true" />
     </application>
 </manifest>
diff --git a/samples/RPSSample/RPSSample.iml b/samples/RPSSample/RPSSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/RPSSample/RPSSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/RPSSample/build.gradle b/samples/RPSSample/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/RPSSample/build.gradle
+++ b/samples/RPSSample/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/RPSSample/post_app_objects.sh b/samples/RPSSample/post_app_objects.sh
index bda156e45..ba4533438 100755
--- a/samples/RPSSample/post_app_objects.sh
+++ b/samples/RPSSample/post_app_objects.sh
@@ -56,27 +56,59 @@ echo "  rock=$ROCK_IMAGE_URI"
 echo "  paper=$PAPER_IMAGE_URI"
 echo "  scissors=$SCISSORS_IMAGE_URI"
 
+# step 3 - create facebook hosted applink page for the app:
+# For mobile only app, facebook provide applink host service to generate a page: https://developers.facebook.com/docs/graph-api/reference/v2.0/app/app_link_hosts
+
+echo "creating facebook host applink page for mobile-only app:"
+
+FB_APPLINK_HOST_ID=` \
+curl https://graph.facebook.com/app/app_link_hosts -F access_token="$APPID|$APPSECRET" -F pretty=true -F name="RPSSample" \
+-F ios='[
+    {
+      "url" : "rps-sample-applink-example://",
+      "app_store_id" : 794163692,
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F android=' [
+    {
+      "package" : "com.facebook.samples.rps",
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F web=' {
+    "should_fallback" : false,
+  }' \
+| perl -ne '/"id":\s*"(.*)"/ && print $1'`
+
+FB_APPLINK_HOST_URL=` \
+curl -X GET https://graph.facebook.com/v2.0/$FB_APPLINK_HOST_ID?access_token="$APPID|$APPSECRET" \
+| perl -ne '/"canonical_url":\s*"(.*)"/ && print $1' `
+
+echo "  applink host url id: $FB_APPLINK_HOST_ID"
+echo "  applink host url: $FB_APPLINK_HOST_URL"
+
 #
-# step 3 - create objects and capture their IDs in variables
+# step 4 - create objects and capture their IDs in variables
 #
 
 # rock
 ROCK_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=rock\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 # paper
 PAPER_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=paper\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 # scissors
 SCISSORS_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=scissors\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 #
-# step 4 - echo progress
+# step 5 - echo progress
 #
 
 echo "created application objects..."
@@ -85,7 +117,7 @@ echo "  paper=$PAPER_OBJID"
 echo "  scissors=$SCISSORS_OBJID"
 
 #
-# step 5 - write .java file for common objects
+# step 6 - write .java file for common objects
 #
 
 MFILE=src/com/facebook/samples/rps/CommonObjects.java
diff --git a/samples/RPSSample/project.properties b/samples/RPSSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/RPSSample/project.properties
+++ b/samples/RPSSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/RPSSample/res/drawable-hdpi/icon.png b/samples/RPSSample/res/drawable-hdpi/icon.png
index 5bc5b2cea..9e70a87f3 100644
Binary files a/samples/RPSSample/res/drawable-hdpi/icon.png and b/samples/RPSSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable-mdpi/icon.png b/samples/RPSSample/res/drawable-mdpi/icon.png
index f621e908c..f8ac7a2db 100644
Binary files a/samples/RPSSample/res/drawable-mdpi/icon.png and b/samples/RPSSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable-xhdpi/icon.png b/samples/RPSSample/res/drawable-xhdpi/icon.png
index 1adb6bfa3..ea8da121a 100644
Binary files a/samples/RPSSample/res/drawable-xhdpi/icon.png and b/samples/RPSSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/RPSSample/res/drawable/fb_logo.png b/samples/RPSSample/res/drawable/fb_logo.png
index b4b29948c..42c619123 100755
Binary files a/samples/RPSSample/res/drawable/fb_logo.png and b/samples/RPSSample/res/drawable/fb_logo.png differ
diff --git a/samples/RPSSample/res/drawable/icon.png b/samples/RPSSample/res/drawable/icon.png
index f621e908c..f8ac7a2db 100644
Binary files a/samples/RPSSample/res/drawable/icon.png and b/samples/RPSSample/res/drawable/icon.png differ
diff --git a/samples/RPSSample/res/drawable/left_paper.png b/samples/RPSSample/res/drawable/left_paper.png
index 7336fd246..813e925da 100755
Binary files a/samples/RPSSample/res/drawable/left_paper.png and b/samples/RPSSample/res/drawable/left_paper.png differ
diff --git a/samples/RPSSample/res/drawable/left_rock.png b/samples/RPSSample/res/drawable/left_rock.png
index bee7abe89..4226ab074 100755
Binary files a/samples/RPSSample/res/drawable/left_rock.png and b/samples/RPSSample/res/drawable/left_rock.png differ
diff --git a/samples/RPSSample/res/drawable/left_scissors.png b/samples/RPSSample/res/drawable/left_scissors.png
index dac525200..0ed1b1c16 100755
Binary files a/samples/RPSSample/res/drawable/left_scissors.png and b/samples/RPSSample/res/drawable/left_scissors.png differ
diff --git a/samples/RPSSample/res/drawable/right_paper.png b/samples/RPSSample/res/drawable/right_paper.png
index d243567a9..54431fe6a 100755
Binary files a/samples/RPSSample/res/drawable/right_paper.png and b/samples/RPSSample/res/drawable/right_paper.png differ
diff --git a/samples/RPSSample/res/drawable/right_rock.png b/samples/RPSSample/res/drawable/right_rock.png
index 9168b4b74..51203c4bc 100755
Binary files a/samples/RPSSample/res/drawable/right_rock.png and b/samples/RPSSample/res/drawable/right_rock.png differ
diff --git a/samples/RPSSample/res/drawable/right_scissors.png b/samples/RPSSample/res/drawable/right_scissors.png
index 083c47590..7c55471e6 100755
Binary files a/samples/RPSSample/res/drawable/right_scissors.png and b/samples/RPSSample/res/drawable/right_scissors.png differ
diff --git a/samples/RPSSample/res/values/strings.xml b/samples/RPSSample/res/values/strings.xml
index 42fb88e64..36763afc0 100644
--- a/samples/RPSSample/res/values/strings.xml
+++ b/samples/RPSSample/res/values/strings.xml
@@ -31,6 +31,7 @@
     <string name="result_lost">lost</string>
     <string name="result_tied">tied</string>
     <string name="share_on_facebook">Share on Facebook</string>
+    <string name="send_with_messenger">Send with Messenger</string>
     <string name="see_friends">See Friends</string>
     <string name="check_settings">Check Facebook Settings</string>
     <string name="friends_using_rps">Friends Rockin\' RPS</string>
diff --git a/samples/RPSSample/res/values/styles.xml b/samples/RPSSample/res/values/styles.xml
index e43c8a696..e8378559b 100644
--- a/samples/RPSSample/res/values/styles.xml
+++ b/samples/RPSSample/res/values/styles.xml
@@ -30,7 +30,6 @@
     <style name="again_button_style" parent="@android:style/Widget.Button">
         <item name="android:width">200dp</item>
         <item name="android:height">75dp</item>
-        <item name="android:background">@drawable/com_facebook_loginbutton_silver</item>
         <item name="android:textSize">@dimen/text_size</item>
         <item name="android:textColor">@color/text_color</item>
         <item name="android:gravity">center</item>
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
index 3551eaff2..fdc669a96 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
@@ -1,12 +1,12 @@
-/**
+/*
  * Copyright 2010-present Facebook.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  *    http://www.apache.org/licenses/LICENSE-2.0
- *
+ 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -18,8 +18,9 @@
 
 public class CommonObjects {
     public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
-            "349677488467004", // rock
-            "231845580291424", // paper
-            "120373648159839"  // scissors
+            "672839339475385", // rock
+            "296430467206197", // paper
+            "524651207660361"  // scissors
     };
 }
+
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
index 0a14d072b..cd80632ba 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
@@ -33,7 +33,6 @@
 import com.facebook.*;
 import com.facebook.model.GraphMultiResult;
 import com.facebook.model.GraphUser;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
 import com.facebook.widget.FriendPickerFragment;
 import com.facebook.widget.PickerFragment;
 import com.facebook.widget.WebDialog;
@@ -41,6 +40,8 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+
 public class FriendActivity extends FragmentActivity {
     private static final String TAG = FriendActivity.class.getName();
     private static final String INSTALLED = "installed";
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
index 1740ecd2e..f40594da7 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
@@ -26,12 +26,10 @@
 import android.view.Menu;
 import android.view.MenuItem;
 import android.widget.Toast;
+import bolts.AppLinks;
 import com.facebook.*;
 
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import static com.facebook.samples.rps.RpsGameUtils.*;
+import static com.facebook.samples.rps.RpsGameUtils.INVALID_CHOICE;
 
 public class MainActivity extends FragmentActivity {
     static final int RPS = 0;
@@ -43,6 +41,7 @@
     private MenuItem settings;
     private MenuItem friends;
     private MenuItem share;
+    private MenuItem message;
     private boolean isResumed = false;
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback callback = new Session.StatusCallback() {
@@ -53,9 +52,6 @@ public void call(Session session, SessionState state, Exception exception) {
     };
     private boolean hasNativeLink = false;
 
-    // the deep link url should be of the form http://some.path?fb_object_id=xxxxxxxxxx
-    private Pattern deepLinkPattern = Pattern.compile(".*fb_object_id=(\\d*)");
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -95,6 +91,16 @@ public void onPause() {
         super.onPause();
         uiHelper.onPause();
         isResumed = false;
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        uiHelper.onStop();
     }
 
     @Override
@@ -133,6 +139,7 @@ public boolean onPrepareOptionsMenu(Menu menu) {
         if (fragments[RPS].isVisible()) {
             if (menu.size() == 0) {
                 share = menu.add(R.string.share_on_facebook);
+                message = menu.add(R.string.send_with_messenger);
                 friends = menu.add(R.string.see_friends);
                 settings = menu.add(R.string.check_settings);
             }
@@ -158,6 +165,10 @@ public boolean onOptionsItemSelected(MenuItem item) {
             RpsFragment fragment = (RpsFragment) fragments[RPS];
             fragment.shareUsingNativeDialog();
             return true;
+        } else if (item.equals(message)) {
+            RpsFragment fragment = (RpsFragment) fragments[RPS];
+            fragment.shareUsingMessengerDialog();
+            return true;
         }
         return false;
     }
@@ -178,30 +189,29 @@ private boolean handleNativeLink() {
             }
         }
         // See if we have a deep link in addition.
-        int deepLinkContent = getDeepLinkContent(getIntent().getData());
-        if (deepLinkContent != INVALID_CHOICE) {
+        int appLinkGesture = getAppLinkGesture(getIntent());
+        if (appLinkGesture != INVALID_CHOICE) {
             ContentFragment fragment = (ContentFragment) fragments[CONTENT];
-            fragment.setContentIndex(deepLinkContent);
+            fragment.setContentIndex(appLinkGesture);
             return true;
         }
         return false;
     }
 
-    private int getDeepLinkContent(Uri deepLinkUri) {
-        if (deepLinkUri != null) {
-            String deepLink = deepLinkUri.toString();
-
-            Matcher matcher = deepLinkPattern.matcher(deepLink);
-            if (matcher.matches()) {
-                String objectId = matcher.group(1);
-                for (int i = 0; i < CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length; i++) {
-                    if (CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[i].equals(objectId)) {
-                        return i;
-                    }
-                }
-            }
-        }
+    private int getAppLinkGesture(Intent intent) {
+      Uri targetURI = AppLinks.getTargetUrlFromInboundIntent(this, intent);
+      if (targetURI == null) {
         return INVALID_CHOICE;
+      }
+      String gesture = targetURI.getQueryParameter("gesture");
+      if (gesture != null && gesture.equalsIgnoreCase(getString(R.string.rock))) {
+        return RpsGameUtils.ROCK;
+      } else if (gesture.equalsIgnoreCase(getString(R.string.paper))) {
+        return RpsGameUtils.PAPER;
+      } else if (gesture.equalsIgnoreCase(getString(R.string.scissors))) {
+        return RpsGameUtils.SCISSORS;
+      }
+      return INVALID_CHOICE;
     }
 
     private void onSessionStateChange(Session session, SessionState state, Exception exception) {
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
index 5627902e7..8e9d61f61 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
@@ -33,9 +33,6 @@
 import android.widget.*;
 import com.facebook.*;
 import com.facebook.model.GraphObject;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
-import static com.facebook.samples.rps.RpsGameUtils.*;
-
 import com.facebook.model.OpenGraphAction;
 import com.facebook.model.OpenGraphObject;
 import com.facebook.widget.FacebookDialog;
@@ -43,6 +40,9 @@
 import java.util.Arrays;
 import java.util.Random;
 
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+import static com.facebook.samples.rps.RpsGameUtils.*;
+
 public class RpsFragment extends Fragment {
 
     private static final String SHARE_GAME_LINK = "https://developers.facebook.com/android";
@@ -414,6 +414,41 @@ public void shareUsingNativeDialog() {
         }
     }
 
+    public void shareUsingMessengerDialog() {
+        if (playerChoice == INVALID_CHOICE || computerChoice == INVALID_CHOICE) {
+            FacebookDialog.MessageDialogBuilder builder = new FacebookDialog.MessageDialogBuilder(getActivity())
+                    .setLink(SHARE_GAME_LINK)
+                    .setName(SHARE_GAME_NAME)
+                    .setFragment(this);
+            // share the app
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        } else {
+            ThrowAction throwAction = OpenGraphAction.Factory.createForPost(ThrowAction.class, ThrowAction.TYPE);
+            throwAction.setGesture(getBuiltInGesture(playerChoice));
+            throwAction.setOpposingGesture(getBuiltInGesture(computerChoice));
+
+            // The OG objects have their own bitmaps we could rely on, but in order to demonstrate attaching
+            // an in-memory bitmap (e.g., a game screencap) we'll send the bitmap explicitly ourselves.
+            ImageButton view = gestureImages[playerChoice];
+            BitmapDrawable drawable = (BitmapDrawable) view.getBackground();
+            Bitmap bitmap = drawable.getBitmap();
+
+            FacebookDialog.OpenGraphMessageDialogBuilder builder = new FacebookDialog.OpenGraphMessageDialogBuilder(
+                    getActivity(),
+                    throwAction,
+                    ThrowAction.PREVIEW_PROPERTY_NAME)
+                    .setFragment(this)
+                    .setImageAttachmentsForAction(Arrays.asList(bitmap));
+
+            // share the game play
+            if (builder.canPresent()) {
+                builder.build().present();
+            }
+        }
+    }
+
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index c4365dd21..715d5bc7b 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.scrumptious"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.CAMERA"/>
@@ -11,10 +11,11 @@
     <uses-feature android:name="android.hardware.camera"/>
     <uses-feature android:name="android.hardware.camera.autofocus"/>
     <application android:label="@string/app_name"
-                 android:icon="@drawable/icon"
+                 android:icon="@drawable/add_food"
                  android:name=".ScrumptiousApplication">
         <activity android:name="MainActivity"
                   android:label="@string/app_name"
+                  android:theme="@style/Theme.Scrumptious"
                   android:windowSoftInputMode="adjustResize">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN"/>
@@ -28,6 +29,7 @@
                   android:label="@string/app_name" />
         <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id"/>
         <provider android:authorities="com.facebook.app.NativeAppCallContentProvider233936543368280"
-                  android:name="com.facebook.NativeAppCallContentProvider" />
+                  android:name="com.facebook.NativeAppCallContentProvider"
+                  android:exported="true" />
     </application>
 </manifest> 
diff --git a/samples/Scrumptious/Scrumptious.iml b/samples/Scrumptious/Scrumptious.iml
deleted file mode 100644
index 1cbea4d2f..000000000
--- a/samples/Scrumptious/Scrumptious.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" exported="" />
-    <orderEntry type="library" exported="" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/Scrumptious/build.gradle b/samples/Scrumptious/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/Scrumptious/build.gradle
+++ b/samples/Scrumptious/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/Scrumptious/project.properties b/samples/Scrumptious/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/Scrumptious/project.properties
+++ b/samples/Scrumptious/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/Scrumptious/res/drawable-hdpi/icon.png b/samples/Scrumptious/res/drawable-hdpi/icon.png
index 0320aeb54..383503ce9 100644
Binary files a/samples/Scrumptious/res/drawable-hdpi/icon.png and b/samples/Scrumptious/res/drawable-hdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/icon.png b/samples/Scrumptious/res/drawable-mdpi/icon.png
index 5c4b0095f..b14f00b4d 100644
Binary files a/samples/Scrumptious/res/drawable-mdpi/icon.png and b/samples/Scrumptious/res/drawable-mdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-mdpi/logo.png b/samples/Scrumptious/res/drawable-mdpi/logo.png
new file mode 100644
index 000000000..a6f07865e
Binary files /dev/null and b/samples/Scrumptious/res/drawable-mdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/icon.png b/samples/Scrumptious/res/drawable-xhdpi/icon.png
index 796e14ec2..c86c5f0f3 100644
Binary files a/samples/Scrumptious/res/drawable-xhdpi/icon.png and b/samples/Scrumptious/res/drawable-xhdpi/icon.png differ
diff --git a/samples/Scrumptious/res/drawable-xhdpi/logo.png b/samples/Scrumptious/res/drawable-xhdpi/logo.png
new file mode 100644
index 000000000..aea4d819e
Binary files /dev/null and b/samples/Scrumptious/res/drawable-xhdpi/logo.png differ
diff --git a/samples/Scrumptious/res/drawable/action_eating.png b/samples/Scrumptious/res/drawable/action_eating.png
deleted file mode 100644
index 7b951edf0..000000000
Binary files a/samples/Scrumptious/res/drawable/action_eating.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_location.png b/samples/Scrumptious/res/drawable/action_location.png
deleted file mode 100644
index 13dfe86ff..000000000
Binary files a/samples/Scrumptious/res/drawable/action_location.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_people.png b/samples/Scrumptious/res/drawable/action_people.png
deleted file mode 100644
index 19546267c..000000000
Binary files a/samples/Scrumptious/res/drawable/action_people.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/action_photo.png b/samples/Scrumptious/res/drawable/action_photo.png
deleted file mode 100644
index 46533cc70..000000000
Binary files a/samples/Scrumptious/res/drawable/action_photo.png and /dev/null differ
diff --git a/samples/Scrumptious/res/drawable/add_food.png b/samples/Scrumptious/res/drawable/add_food.png
new file mode 100644
index 000000000..aeb1ae315
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_food.png differ
diff --git a/samples/Scrumptious/res/drawable/add_friends.png b/samples/Scrumptious/res/drawable/add_friends.png
new file mode 100644
index 000000000..b728ebfd9
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_friends.png differ
diff --git a/samples/Scrumptious/res/drawable/add_location.png b/samples/Scrumptious/res/drawable/add_location.png
new file mode 100644
index 000000000..45a30b3e5
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_location.png differ
diff --git a/samples/Scrumptious/res/drawable/add_photo.png b/samples/Scrumptious/res/drawable/add_photo.png
new file mode 100644
index 000000000..f48ea0680
Binary files /dev/null and b/samples/Scrumptious/res/drawable/add_photo.png differ
diff --git a/samples/Scrumptious/res/drawable/button_text_color.xml b/samples/Scrumptious/res/drawable/button_text_color.xml
new file mode 100644
index 000000000..ee8b69573
--- /dev/null
+++ b/samples/Scrumptious/res/drawable/button_text_color.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android" >
+	<item 
+		android:state_enabled="false"
+		android:color="@color/disabled_button_color"/>
+    <item
+    	android:color="@color/scrumptious_main_orange"/>
+</selector>
diff --git a/samples/Scrumptious/res/drawable/facebook.png b/samples/Scrumptious/res/drawable/facebook.png
index daf8097b1..88c2ed6a8 100755
Binary files a/samples/Scrumptious/res/drawable/facebook.png and b/samples/Scrumptious/res/drawable/facebook.png differ
diff --git a/samples/Scrumptious/res/drawable/icon.png b/samples/Scrumptious/res/drawable/icon.png
index 5c4b0095f..739392fc0 100644
Binary files a/samples/Scrumptious/res/drawable/icon.png and b/samples/Scrumptious/res/drawable/icon.png differ
diff --git a/samples/Scrumptious/res/drawable/title_bar_logo.png b/samples/Scrumptious/res/drawable/title_bar_logo.png
new file mode 100644
index 000000000..3fe6e8b97
Binary files /dev/null and b/samples/Scrumptious/res/drawable/title_bar_logo.png differ
diff --git a/samples/Scrumptious/res/layout/listitem.xml b/samples/Scrumptious/res/layout/listitem.xml
index 293ef0c7e..543aab35a 100644
--- a/samples/Scrumptious/res/layout/listitem.xml
+++ b/samples/Scrumptious/res/layout/listitem.xml
@@ -23,9 +23,8 @@
 
     <ImageView
             android:id="@+id/icon"
-            android:src="@drawable/action_eating"
-            android:layout_width="60dp"
-            android:layout_height="60dp" />
+            android:layout_width="50dp"
+            android:layout_height="50dp" />
     <LinearLayout
             android:orientation="vertical"
             android:layout_gravity="center_vertical"
@@ -35,16 +34,16 @@
         <TextView
                 android:id="@+id/text1"
                 android:text="test"
-                android:textColor="#333"
+                android:textColor="#FB5820"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:textSize="18sp" />
+                android:textSize="16sp" />
         <TextView
                 android:id="@+id/text2"
                 android:text="test2"
-                android:textColor="#6699CC"
+                android:textColor="#E4C897"
                 android:layout_width="wrap_content"
                 android:layout_height="wrap_content"
-                android:textSize="14sp" />
+                android:textSize="12sp" />
     </LinearLayout>
 </LinearLayout>
diff --git a/samples/Scrumptious/res/layout/selection.xml b/samples/Scrumptious/res/layout/selection.xml
index 3367e4840..0fd2f06ea 100644
--- a/samples/Scrumptious/res/layout/selection.xml
+++ b/samples/Scrumptious/res/layout/selection.xml
@@ -14,58 +14,88 @@
     See the License for the specific language governing permissions and
     limitations under the License.
 -->
-
-<ScrollView
-        xmlns:android="http://schemas.android.com/apk/res/android"
-        xmlns:facebook="http://schemas.android.com/apk/res-auto"
+<LinearLayout 
+	xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:facebook="http://schemas.android.com/apk/res-auto"
+	android:layout_width="match_parent"
+	android:layout_height="match_parent"
+	android:orientation="vertical">
+	
+	<RelativeLayout 
+		android:layout_width="match_parent"
+		android:layout_height="60dp"
+		android:background="@color/scrumptious_main_orange">
+		
+		<ImageView
+			android:id="@+id/image_title"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:layout_margin="16dp"
+			android:layout_centerInParent="true"
+			android:scaleType="fitCenter"
+			android:src="@drawable/title_bar_logo"/>
+		
+        <com.facebook.widget.ProfilePictureView
+            android:id="@+id/selection_profile_pic"
+            android:layout_height="wrap_content"
+            android:layout_width="wrap_content"
+            android:layout_alignParentRight="true"
+            android:layout_centerVertical="true"
+            android:gravity="right|center_vertical"
+            android:layout_margin="10dp"
+            facebook:preset_size="small" />
+        
+	</RelativeLayout>
+	<ScrollView
         android:layout_width="fill_parent"
         android:layout_height="fill_parent"
+        android:fillViewport="true"
         android:background="#FFF">
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
-        android:orientation="vertical">
+	    <LinearLayout
+	        android:layout_width="fill_parent"
+	        android:layout_height="fill_parent"
+	        android:orientation="vertical">
+	
+	        <com.facebook.scrumptious.FullListView
+	            android:id="@+id/selection_list"
+	            android:layout_width="fill_parent"
+	            android:layout_height="wrap_content"
+	            android:layout_margin="20dp"
+	            android:dividerHeight="@dimen/item_list_padding"
+	            android:divider="#00000000"/>
+	
+	        <ImageView 
+	            android:id="@+id/selected_image"
+	            android:layout_width="match_parent"
+	            android:layout_height="0dp"
+	            android:layout_weight="1"
+	            android:layout_marginLeft="50dp"
+	            android:layout_marginRight="50dp"/>
+	        
+	        <TextView
+	            android:id="@+id/announce_text"
+	            android:layout_width="wrap_content"
+	            android:layout_height="wrap_content"
+	            android:layout_gravity="center"
+	            android:layout_marginTop="10dp"
+	            android:layout_marginBottom="30dp"
+	            android:text="@string/announce"
+	            android:textColor="@drawable/button_text_color"
+	            android:gravity="center" />
+	
+	        <TextView
+	            android:id="@+id/message_text"
+	            android:layout_width="wrap_content"
+	            android:layout_height="wrap_content"
+	            android:layout_gravity="center"
+	            android:layout_marginTop="10dp"
+	            android:layout_marginBottom="30dp"
+	            android:text="@string/message"
+	            android:textColor="@drawable/button_text_color"
+	            android:gravity="center"
+	            android:visibility="gone" />
+	    </LinearLayout>
+    </ScrollView>
+</LinearLayout>
 
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="20dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <com.facebook.widget.ProfilePictureView
-                android:id="@+id/selection_profile_pic"
-                android:layout_height="wrap_content"
-                android:layout_width="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center_horizontal"
-                facebook:preset_size="small" />
-            <TextView
-                android:id="@+id/selection_user_name"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="10dp"
-                android:layout_gravity="center"
-                android:textColor="#333"
-                android:textSize="18sp" />
-        </LinearLayout>
-
-        <com.facebook.scrumptious.FullListView
-            android:id="@+id/selection_list"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_margin="20dp"
-            android:background="@drawable/button_border"/>
-
-        <Button
-            android:id="@+id/announce_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_gravity="center"
-            android:textStyle="bold"
-            android:background="@drawable/button_border"
-            android:layout_marginBottom="20dp"
-            android:text="@string/announce"
-            android:gravity="center" />
 
-    </LinearLayout>
-</ScrollView>
diff --git a/samples/Scrumptious/res/layout/splash.xml b/samples/Scrumptious/res/layout/splash.xml
index b84d8e58f..8ea96ae84 100644
--- a/samples/Scrumptious/res/layout/splash.xml
+++ b/samples/Scrumptious/res/layout/splash.xml
@@ -17,52 +17,23 @@
 
 <ScrollView
     xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="#303040" >
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fillViewport="true"
+    android:background="#FB5820" >
 
     <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
         android:orientation="vertical">
 
-        <LinearLayout
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="30dp"
-            android:gravity="center_horizontal"
-            android:orientation="horizontal" >
-            <ImageView
-                android:id="@+id/splash_icon"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:layout_marginRight="10dp"
-                android:gravity="center"
-                android:src="@drawable/icon" />
-            <TextView
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_gravity="center"
-                android:gravity="center"
-                android:textColor="#AFDEFE"
-                android:textSize="28sp"
-                android:typeface="serif"
-                android:textStyle="italic"
-                android:text="@string/app_name" />
-        </LinearLayout>
-
-
-        <TextView
-            android:id="@+id/profile_name"
-            android:layout_width="174dp"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="35dp"
-            android:lines="2"
-            android:textSize="17sp"
-            android:text="@string/get_started"
-            android:layout_gravity="center_horizontal"
-            android:gravity="center_horizontal"/>
+    	<ImageView 
+    		android:layout_width="match_parent"
+    		android:layout_height="0dp"
+    		android:layout_weight="1"
+    		android:layout_gravity="center"
+    		android:padding="50dp"
+    		android:src="@drawable/logo"/>
 
         <com.facebook.widget.LoginButton
             android:id="@+id/login_button"
@@ -72,18 +43,16 @@
             android:layout_marginTop="30dp"
             android:layout_marginBottom="30dp" />
 
-        <Button
+        <TextView
             android:id="@+id/skip_login_button"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
             android:layout_gravity="center_horizontal"
             android:text="@string/skip_login"
-            android:background="@drawable/com_facebook_loginbutton_silver"
-            android:textSize="@dimen/com_facebook_loginview_text_size"
-            android:textColor="@color/com_facebook_blue"
+            android:textSize="12sp"
+            android:textColor="#EAFEA7"
             android:paddingLeft="20dp"
             android:paddingRight="20dp"
-            android:layout_marginTop="30dp"
             android:layout_marginBottom="30dp" />
 
     </LinearLayout>
diff --git a/samples/Scrumptious/res/values/colors.xml b/samples/Scrumptious/res/values/colors.xml
new file mode 100644
index 000000000..71f8c032b
--- /dev/null
+++ b/samples/Scrumptious/res/values/colors.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<color name="scrumptious_main_orange">#FFFD5720</color>
+    <color name="disabled_button_color">#FFB7B7B7</color>
+</resources>
diff --git a/samples/Scrumptious/res/values/dimens.xml b/samples/Scrumptious/res/values/dimens.xml
new file mode 100644
index 000000000..1820b4cf2
--- /dev/null
+++ b/samples/Scrumptious/res/values/dimens.xml
@@ -0,0 +1,4 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<dimen name="item_list_padding">14dp</dimen>
+</resources>
diff --git a/samples/Scrumptious/res/values/strings.xml b/samples/Scrumptious/res/values/strings.xml
index c28e8df63..5d8676c15 100644
--- a/samples/Scrumptious/res/values/strings.xml
+++ b/samples/Scrumptious/res/values/strings.xml
@@ -19,11 +19,11 @@
     <string name="app_name">Scrumptious</string>
     <string name="app_id">233936543368280</string>
     <string name="get_started">To get started, login using Facebook</string>
-    <string name="skip_login">Skip Login</string>
-    <string name="action_eating">What are you eating?</string>
-    <string name="action_location">Where are you?</string>
-    <string name="action_people">With whom?</string>
-    <string name="action_photo">Got a picture?</string>
+    <string name="skip_login">continue as a guest</string>
+    <string name="action_eating">Pick Meal</string>
+    <string name="action_location">Pick Location</string>
+    <string name="action_people">Pick Friends</string>
+    <string name="action_photo">Pick Photo</string>
     <string name="action_eating_default">Select a meal</string>
     <string name="action_location_default">Select a place</string>
     <string name="action_people_default">Select friends</string>
@@ -31,7 +31,8 @@
     <string name="action_photo_ready">Ready</string>
     <string name="action_photo_camera">Take Photo</string>
     <string name="action_photo_gallery">Choose Existing</string>
-    <string name="announce">Announce</string>
+    <string name="announce">Share</string>
+    <string name="message">Send with Messenger</string>
     <string name="login">Login</string>
     <string name="settings">Settings</string>
     <string name="select_meal">Select a meal</string>
diff --git a/samples/Scrumptious/res/values/styles.xml b/samples/Scrumptious/res/values/styles.xml
new file mode 100644
index 000000000..cc9304bcd
--- /dev/null
+++ b/samples/Scrumptious/res/values/styles.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+	<style name="Theme.Scrumptious" parent="android:Theme">
+        <item name="android:windowNoTitle">true</item>
+    </style>
+</resources>
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
index 66c1f83b9..678fdcb4b 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
@@ -17,7 +17,6 @@
 package com.facebook.scrumptious;
 
 import android.content.Context;
-import android.graphics.Rect;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.ListAdapter;
@@ -54,9 +53,7 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
                     MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));
             height += childView.getMeasuredHeight();
         }
-        Rect bgPadding = new Rect();
-        getBackground().getPadding(bgPadding);
-        height += (count - 1) * getDividerHeight() + bgPadding.top + bgPadding.bottom;
+        height += getDividerHeight() * (count-1);
         setMeasuredDimension(width, height);
     }
 }
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
index b1fcc58da..964760c75 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
@@ -22,8 +22,6 @@
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentTransaction;
-import android.view.Menu;
-import android.view.MenuItem;
 import com.facebook.AppEventsLogger;
 import com.facebook.Session;
 import com.facebook.SessionState;
@@ -39,7 +37,6 @@
     private static final int FRAGMENT_COUNT = SETTINGS +1;
 
     private Fragment[] fragments = new Fragment[FRAGMENT_COUNT];
-    private MenuItem settings;
     private boolean isResumed = false;
     private boolean userSkippedLogin = false;
     private UiLifecycleHelper uiHelper;
@@ -99,6 +96,10 @@ public void onPause() {
         super.onPause();
         uiHelper.onPause();
         isResumed = false;
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
@@ -138,30 +139,6 @@ protected void onResumeFragments() {
         }
     }
 
-    @Override
-    public boolean onPrepareOptionsMenu(Menu menu) {
-        // only add the menu when the selection fragment is showing
-        if (fragments[SELECTION].isVisible()) {
-            if (menu.size() == 0) {
-                settings = menu.add(R.string.settings);
-            }
-            return true;
-        } else {
-            menu.clear();
-            settings = null;
-        }
-        return false;
-    }
-
-    @Override
-    public boolean onOptionsItemSelected(MenuItem item) {
-        if (item.equals(settings)) {
-            showSettingsFragment();
-            return true;
-        }
-        return false;
-    }
-
     public void showSettingsFragment() {
         showFragment(SETTINGS, true);
     }
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
index f4e2d48d4..e795698e4 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/PickerActivity.java
@@ -72,6 +72,7 @@ public void onCreate(Bundle savedInstanceState) {
         if (FRIEND_PICKER.equals(intentUri)) {
             if (savedInstanceState == null) {
                 friendPickerFragment = new FriendPickerFragment(args);
+                friendPickerFragment.setFriendPickerType(FriendPickerFragment.FriendPickerType.TAGGABLE_FRIENDS);
             } else {
                 friendPickerFragment = (FriendPickerFragment) manager.findFragmentById(R.id.picker_fragment);;
             }
@@ -146,8 +147,12 @@ protected void onStart() {
                         locationListener = new LocationListener() {
                             @Override
                             public void onLocationChanged(Location location) {
-                                float distance = location.distanceTo(placePickerFragment.getLocation());
-                                if (distance >= LOCATION_CHANGE_THRESHOLD) {
+                                boolean updateLocation = true;
+                                Location prevLocation = placePickerFragment.getLocation();
+                                if (prevLocation != null) {
+                                    updateLocation = location.distanceTo(prevLocation) >= LOCATION_CHANGE_THRESHOLD;
+                                }
+                                if (updateLocation) {
                                     placePickerFragment.setLocation(location);
                                     placePickerFragment.loadData(true);
                                 }
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
index 3c23f1144..3cc1ad7a9 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
@@ -58,6 +58,8 @@
     private static final String TAG = "SelectionFragment";
     private static final String MEAL_OBJECT_TYPE = "fb_sample_scrumps:meal";
     private static final String EAT_ACTION_TYPE = "fb_sample_scrumps:eat";
+    private static final String DEFAULT_ACTION_IMAGE_URL =
+            "http://facebooksampleapp.com/scrumptious/static/images/logo.png";
 
     private static final String PENDING_ANNOUNCE_KEY = "pendingAnnounce";
     private static final Uri M_FACEBOOK_URL = Uri.parse("http://m.facebook.com");
@@ -66,15 +68,16 @@
     private static final int REAUTH_ACTIVITY_CODE = 100;
     private static final String PERMISSION = "publish_actions";
 
-    private Button announceButton;
+    private TextView announceButton;
+    private TextView messageButton;
     private ListView listView;
     private ProgressDialog progressDialog;
     private List<BaseListElement> listElements;
     private ProfilePictureView profilePictureView;
-    private TextView userNameView;
     private boolean pendingAnnounce;
     private MainActivity activity;
     private Uri photoUri;
+    private ImageView photoThumbnail;
 
     private UiLifecycleHelper uiHelper;
     private Session.StatusCallback sessionCallback = new Session.StatusCallback() {
@@ -134,14 +137,31 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle sa
 
         profilePictureView = (ProfilePictureView) view.findViewById(R.id.selection_profile_pic);
         profilePictureView.setCropped(true);
-        userNameView = (TextView) view.findViewById(R.id.selection_user_name);
-        announceButton = (Button) view.findViewById(R.id.announce_button);
+        announceButton = (TextView) view.findViewById(R.id.announce_text);
+        messageButton = (TextView) view.findViewById(R.id.message_text);
         listView = (ListView) view.findViewById(R.id.selection_list);
+        photoThumbnail = (ImageView) view.findViewById(R.id.selected_image);
+
+        if (FacebookDialog.canPresentOpenGraphMessageDialog(activity)) {
+            messageButton.setVisibility(View.VISIBLE);
+        }
 
         announceButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                handleAnnounce();
+                handleAnnounce(false);
+            }
+        });
+        messageButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                handleAnnounce(true);
+            }
+        });
+        profilePictureView.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                activity.showSettingsFragment();
             }
         });
 
@@ -188,7 +208,7 @@ public void onDestroy() {
      */
     private void tokenUpdated() {
         if (pendingAnnounce) {
-            handleAnnounce();
+            handleAnnounce(false);
         }
     }
 
@@ -201,7 +221,6 @@ private void onSessionStateChange(final Session session, SessionState state, Exc
             }
         } else {
             profilePictureView.setProfileId(null);
-            userNameView.setText("");
         }
     }
 
@@ -212,7 +231,6 @@ public void onCompleted(GraphUser user, Response response) {
                 if (session == Session.getActiveSession()) {
                     if (user != null) {
                         profilePictureView.setProfileId(user.getId());
-                        userNameView.setText(user.getName());
                     }
                 }
                 if (response.getError() != null) {
@@ -229,6 +247,7 @@ public void onCompleted(GraphUser user, Response response) {
      */
     private void init(Bundle savedInstanceState) {
         announceButton.setEnabled(false);
+        messageButton.setEnabled(false);
 
         listElements = new ArrayList<BaseListElement>();
 
@@ -252,7 +271,7 @@ private void init(Bundle savedInstanceState) {
         }
     }
 
-    private void handleAnnounce() {
+    private void handleAnnounce(boolean isMessage) {
         pendingAnnounce = false;
         Session session = Session.getActiveSession();
 
@@ -261,7 +280,11 @@ private void handleAnnounce() {
         if (session != null && session.isOpened()) {
             handleGraphApiAnnounce();
         } else {
-            handleNativeShareAnnounce();
+            if (isMessage) {
+                handleNativeMessageAnnounce();
+            } else {
+                handleNativeShareAnnounce();
+            }
         }
     }
 
@@ -380,6 +403,43 @@ private void handleNativeShareAnnounce() {
         return builder;
     }
 
+    private void handleNativeMessageAnnounce() {
+        FacebookDialog.OpenGraphMessageDialogBuilder builder = createMessageDialogBuilder();
+        if (builder.canPresent()) {
+            uiHelper.trackPendingDialogCall(builder.build().present());
+        } else {
+            // If we can't show the native open graph share dialog because the Messenger app
+            // does not support it, then show then settings fragment so the user can log in.
+            activity.showSettingsFragment();
+        }
+    }
+
+    private FacebookDialog.OpenGraphMessageDialogBuilder createMessageDialogBuilder() {
+        EatAction eatAction = createEatAction();
+
+        boolean userGenerated = false;
+        if (photoUri != null) {
+            String photoUriString = photoUri.toString();
+            Pair<File, Integer> fileAndMinDimemsion = getImageFileAndMinDimension();
+            userGenerated = fileAndMinDimemsion.second >= USER_GENERATED_MIN_SIZE;
+
+            // If we have a content: URI, we can just use that URI, otherwise we'll need to add it as an attachment.
+            if (fileAndMinDimemsion != null && photoUri.getScheme().startsWith("content")) {
+                eatAction.setImage(getImageListForAction(photoUriString, userGenerated));
+            }
+        }
+
+        FacebookDialog.OpenGraphMessageDialogBuilder builder = new FacebookDialog.OpenGraphMessageDialogBuilder(
+                getActivity(), eatAction, "meal")
+                .setFragment(SelectionFragment.this);
+
+        if (photoUri != null && !photoUri.getScheme().startsWith("content")) {
+            builder.setImageAttachmentFilesForAction(Arrays.asList(new File(photoUri.getPath())), userGenerated);
+        }
+
+        return builder;
+    }
+
     private Pair<File, Integer> getImageFileAndMinDimension() {
         File photoFile = null;
         String photoUriString = photoUri.toString();
@@ -575,10 +635,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         }
 
+        String title = error.getErrorUserTitle();
+        String message = error.getErrorUserMessage();
+        if (message == null) {
+            message = dialogBody;
+        }
+        if (title == null) {
+            title = getResources().getString(R.string.error_dialog_title);
+        }
+
         new AlertDialog.Builder(getActivity())
                 .setPositiveButton(R.string.error_dialog_button_text, listener)
-                .setTitle(R.string.error_dialog_title)
-                .setMessage(dialogBody)
+                .setTitle(title)
+                .setMessage(message)
                 .show();
     }
 
@@ -626,9 +695,9 @@ private void startPickerActivity(Uri data, int requestCode) {
         private String foodChoice = null;
 
         public EatListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_eating),
+            super(getActivity().getResources().getDrawable(R.drawable.add_food),
                     getActivity().getResources().getString(R.string.action_eating),
-                    getActivity().getResources().getString(R.string.action_eating_default),
+                    null,
                     requestCode);
             foodChoices = getActivity().getResources().getStringArray(R.array.food_types);
             foodUrls = getActivity().getResources().getStringArray(R.array.food_og_urls);
@@ -648,6 +717,7 @@ public void onClick(View view) {
         protected void populateOGAction(OpenGraphAction action) {
             if (foodChoice != null && foodChoice.length() > 0) {
                 EatAction eatAction = action.cast(EatAction.class);
+                eatAction.setImageUrls(Arrays.asList(DEFAULT_ACTION_IMAGE_URL));
                 if (foodChoiceUrl != null && foodChoiceUrl.length() > 0) {
                     MealGraphObject meal = GraphObject.Factory.create(MealGraphObject.class);
                     meal.setUrl(foodChoiceUrl);
@@ -656,8 +726,6 @@ protected void populateOGAction(OpenGraphAction action) {
                     MealGraphObject meal = OpenGraphObject.Factory.createForPost(MealGraphObject.class,
                             MEAL_OBJECT_TYPE);
                     meal.setTitle(foodChoice);
-                    meal.setImageUrls(Arrays.asList(
-                            "https://fbcdn-photos-a.akamaihd.net/photos-ak-snc7/v85005/200/233936543368280/app_1_233936543368280_595563194.gif"));
                     eatAction.setMeal(meal);
                 }
             }
@@ -736,9 +804,11 @@ private void setFoodText() {
             if (foodChoice != null && foodChoice.length() > 0) {
                 setText2(foodChoice);
                 announceButton.setEnabled(true);
+                messageButton.setEnabled(true);
             } else {
                 setText2(getActivity().getResources().getString(R.string.action_eating_default));
                 announceButton.setEnabled(false);
+                messageButton.setEnabled(false);
             }
         }
     }
@@ -750,9 +820,9 @@ private void setFoodText() {
         private List<GraphUser> selectedUsers;
 
         public PeopleListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_people),
+            super(getActivity().getResources().getDrawable(R.drawable.add_friends),
                     getActivity().getResources().getString(R.string.action_people),
-                    getActivity().getResources().getString(R.string.action_people_default),
+                    null,
                     requestCode);
         }
 
@@ -873,9 +943,9 @@ private void setUsersText() {
         private GraphPlace selectedPlace = null;
 
         public LocationListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_location),
+            super(getActivity().getResources().getDrawable(R.drawable.add_location),
                     getActivity().getResources().getString(R.string.action_location),
-                    getActivity().getResources().getString(R.string.action_location_default),
+                    null,
                     requestCode);
         }
 
@@ -955,9 +1025,9 @@ private void setPlaceText() {
         private Uri tempUri = null;
 
         public PhotoListElement(int requestCode) {
-            super(getActivity().getResources().getDrawable(R.drawable.action_photo),
+            super(getActivity().getResources().getDrawable(R.drawable.add_photo),
                     getActivity().getResources().getString(R.string.action_photo),
-                    getActivity().getResources().getString(R.string.action_photo_default),
+                    null,
                     requestCode);
             photoUri = null;
         }
@@ -979,6 +1049,7 @@ protected void onActivityResult(Intent data) {
             } else if (data != null) {
                 photoUri = data.getData();
             }
+            setPhotoThumbnail();
             setPhotoText();
         }
 
@@ -1029,6 +1100,10 @@ private void setPhotoText() {
                 setText2(getResources().getString(R.string.action_photo_ready));
             }
         }
+        
+        private void setPhotoThumbnail() {
+            photoThumbnail.setImageURI(photoUri);
+        }
 
         private void startCameraActivity() {
             Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
@@ -1092,7 +1167,12 @@ public View getView(int position, View convertView, ViewGroup parent) {
                     text1.setText(listElement.getText1());
                 }
                 if (text2 != null) {
-                    text2.setText(listElement.getText2());
+                    if (listElement.getText2() != null) {
+                        text2.setVisibility(View.VISIBLE);
+                        text2.setText(listElement.getText2());
+                    } else {
+                        text2.setVisibility(View.GONE);
+                    }
                 }
             }
             return view;
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
index f85fb29df..ba1b6442b 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
@@ -21,11 +21,13 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
+import android.widget.TextView;
+import com.facebook.widget.LoginButton;
 
 public class SplashFragment extends Fragment {
 
-    private Button skipLoginButton;
+    private LoginButton loginButton;
+    private TextView skipLoginButton;
     private SkipLoginCallback skipLoginCallback;
 
     public interface SkipLoginCallback {
@@ -37,7 +39,10 @@
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View view = inflater.inflate(R.layout.splash, container, false);
 
-        skipLoginButton = (Button) view.findViewById(R.id.skip_login_button);
+        loginButton = (LoginButton) view.findViewById(R.id.login_button);
+        loginButton.setReadPermissions("user_friends");
+
+        skipLoginButton = (TextView) view.findViewById(R.id.skip_login_button);
         skipLoginButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -54,3 +59,4 @@ public void setSkipLoginCallback(SkipLoginCallback callback) {
         skipLoginCallback = callback;
     }
 }
+
diff --git a/samples/SessionLoginSample/.classpath b/samples/SessionLoginSample/.classpath
deleted file mode 100644
index 6ef980d36..000000000
--- a/samples/SessionLoginSample/.classpath
+++ /dev/null
@@ -1,9 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="src" path="gen"/>
-	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.DEPENDENCIES"/>
-	<classpathentry kind="output" path="bin/classes"/>
-</classpath>
diff --git a/samples/SessionLoginSample/.project b/samples/SessionLoginSample/.project
deleted file mode 100644
index a6c125972..000000000
--- a/samples/SessionLoginSample/.project
+++ /dev/null
@@ -1,40 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>SessionLoginSample</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-		<buildCommand>
-			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-        <linkedResources>
-                <link>
-                        <name>libs</name>
-                        <type>2</type>
-                        <locationURI>PARENT-2-PROJECT_LOC/libs</locationURI>
-                </link>
-        </linkedResources>
-</projectDescription>
diff --git a/samples/SessionLoginSample/AndroidManifest.xml b/samples/SessionLoginSample/AndroidManifest.xml
deleted file mode 100644
index be2beb9be..000000000
--- a/samples/SessionLoginSample/AndroidManifest.xml
+++ /dev/null
@@ -1,36 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.samples.sessionlogin"
-    android:versionCode="1"
-    android:versionName="1.0" >
-
-    <uses-sdk android:minSdkVersion="8" />
-    <uses-permission android:name="android.permission.INTERNET"/>
-
-    <application
-        android:icon="@drawable/icon"
-        android:label="@string/app_name" >
-        <activity
-            android:name=".SessionLoginSampleActivity"
-            android:label="@string/app_name"
-            android:windowSoftInputMode="adjustResize">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity
-                android:name=".LoginUsingActivityActivity">
-        </activity>
-        <activity
-                android:name=".LoginUsingCustomFragmentActivity">
-        </activity>
-        <activity android:name="com.facebook.LoginActivity"
-                  android:theme="@android:style/Theme.Translucent.NoTitleBar"
-                  android:label="@string/app_name" />
-        <activity android:name=".LoginUsingLoginFragmentActivity"/>
-        <meta-data android:name="com.facebook.sdk.ApplicationId" android:value="@string/app_id" />
-    </application>
-
-</manifest>
diff --git a/samples/SessionLoginSample/SessionLoginSample.iml b/samples/SessionLoginSample/SessionLoginSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SessionLoginSample/SessionLoginSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SessionLoginSample/ant.properties b/samples/SessionLoginSample/ant.properties
deleted file mode 100644
index 939105d52..000000000
--- a/samples/SessionLoginSample/ant.properties
+++ /dev/null
@@ -1,18 +0,0 @@
-# This file is used to override default values used by the Ant build system.
-#
-# This file must be checked into Version Control Systems, as it is
-# integral to the build system of your project.
-
-# This file is only used by the Ant script.
-
-# You can use this to override default values such as
-#  'source.dir' for the location of your java source folder and
-#  'out.dir' for the location of your output folder.
-
-# You can also use it define how the release builds are signed by declaring
-# the following properties:
-#  'key.store' for the location of your keystore and
-#  'key.alias' for the name of the key to use.
-# The password will be asked during the build when you use the 'release' target.
-
-java.compilerargs=-Xlint -Werror
diff --git a/samples/SessionLoginSample/build.gradle b/samples/SessionLoginSample/build.gradle
deleted file mode 100644
index a2cda0280..000000000
--- a/samples/SessionLoginSample/build.gradle
+++ /dev/null
@@ -1,23 +0,0 @@
-apply plugin: 'android'
-
-dependencies {
-    compile project(':facebook')
-}
-
-android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
-    }
-
-    sourceSets {
-        main {
-            manifest.srcFile 'AndroidManifest.xml'
-            java.srcDirs = ['src']
-            res.srcDirs = ['res']
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/build.xml b/samples/SessionLoginSample/build.xml
deleted file mode 100644
index 4f044bbee..000000000
--- a/samples/SessionLoginSample/build.xml
+++ /dev/null
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project name="SessionLoginSample" default="help">
-
-    <!-- The local.properties file is created and updated by the 'android' tool.
-         It contains the path to the SDK. It should *NOT* be checked into
-         Version Control Systems. -->
-    <property file="local.properties" />
-
-    <!-- The ant.properties file can be created by you. It is only edited by the
-         'android' tool to add properties to it.
-         This is the place to change some Ant specific build properties.
-         Here are some properties you may want to change/update:
-
-         source.dir
-             The name of the source directory. Default is 'src'.
-         out.dir
-             The name of the output directory. Default is 'bin'.
-
-         For other overridable properties, look at the beginning of the rules
-         files in the SDK, at tools/ant/build.xml
-
-         Properties related to the SDK location or the project target should
-         be updated using the 'android' tool with the 'update' action.
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems.
-
-         -->
-    <property file="ant.properties" />
-
-    <!-- if sdk.dir was not set from one of the property file, then
-         get it from the ANDROID_HOME env var.
-         This must be done before we load project.properties since
-         the proguard config can use sdk.dir -->
-    <property environment="env" />
-    <condition property="sdk.dir" value="${env.ANDROID_HOME}">
-        <isset property="env.ANDROID_HOME" />
-    </condition>
-
-    <!-- The project.properties file is created and updated by the 'android'
-         tool, as well as ADT.
-
-         This contains project specific properties such as project target, and library
-         dependencies. Lower level build properties are stored in ant.properties
-         (or in .classpath for Eclipse projects).
-
-         This file is an integral part of the build system for your
-         application and should be checked into Version Control Systems. -->
-    <loadproperties srcFile="project.properties" />
-
-    <!-- quick check on sdk.dir -->
-    <fail
-            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through the ANDROID_HOME environment variable."
-            unless="sdk.dir"
-    />
-
-    <!--
-        Import per project custom build rules if present at the root of the project.
-        This is the place to put custom intermediary targets such as:
-            -pre-build
-            -pre-compile
-            -post-compile (This is typically used for code obfuscation.
-                           Compiled code location: ${out.classes.absolute.dir}
-                           If this is not done in place, override ${out.dex.input.absolute.dir})
-            -post-package
-            -post-build
-            -pre-clean
-    -->
-    <import file="custom_rules.xml" optional="true" />
-
-    <!-- Import the actual build file.
-
-         To customize existing targets, there are two options:
-         - Customize only one target:
-             - copy/paste the target into this file, *before* the
-               <import> task.
-             - customize it to your needs.
-         - Customize the whole content of build.xml
-             - copy/paste the content of the rules files (minus the top node)
-               into this file, replacing the <import> task.
-             - customize to your needs.
-
-         ***********************
-         ****** IMPORTANT ******
-         ***********************
-         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
-         in order to avoid having your file be overridden by tools such as "android update project"
-    -->
-    <!-- version-tag: 1 -->
-    <import file="${sdk.dir}/tools/ant/build.xml" />
-
-</project>
diff --git a/samples/SessionLoginSample/proguard-project.txt b/samples/SessionLoginSample/proguard-project.txt
deleted file mode 100644
index f2fe1559a..000000000
--- a/samples/SessionLoginSample/proguard-project.txt
+++ /dev/null
@@ -1,20 +0,0 @@
-# To enable ProGuard in your project, edit project.properties
-# to define the proguard.config property as described in that file.
-#
-# Add project specific ProGuard rules here.
-# By default, the flags in this file are appended to flags specified
-# in ${sdk.dir}/tools/proguard/proguard-android.txt
-# You can edit the include path and order by changing the ProGuard
-# include property in project.properties.
-#
-# For more details, see
-#   http://developer.android.com/guide/developing/tools/proguard.html
-
-# Add any project specific keep options here:
-
-# If your project uses WebView with JS, uncomment the following
-# and specify the fully qualified class name to the JavaScript interface
-# class:
-#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
-#   public *;
-#}
diff --git a/samples/SessionLoginSample/project.properties b/samples/SessionLoginSample/project.properties
deleted file mode 100644
index cee0509c6..000000000
--- a/samples/SessionLoginSample/project.properties
+++ /dev/null
@@ -1,15 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-8
-android.library.reference.1=../../facebook
diff --git a/samples/SessionLoginSample/res/drawable-hdpi/icon.png b/samples/SessionLoginSample/res/drawable-hdpi/icon.png
deleted file mode 100644
index 78d41ad5f..000000000
Binary files a/samples/SessionLoginSample/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-mdpi/icon.png b/samples/SessionLoginSample/res/drawable-mdpi/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png b/samples/SessionLoginSample/res/drawable-xhdpi/icon.png
deleted file mode 100644
index a2c3cb4b2..000000000
Binary files a/samples/SessionLoginSample/res/drawable-xhdpi/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/drawable/icon.png b/samples/SessionLoginSample/res/drawable/icon.png
deleted file mode 100644
index 22598aa33..000000000
Binary files a/samples/SessionLoginSample/res/drawable/icon.png and /dev/null differ
diff --git a/samples/SessionLoginSample/res/layout/activity.xml b/samples/SessionLoginSample/res/layout/activity.xml
deleted file mode 100644
index 52ca3daf9..000000000
--- a/samples/SessionLoginSample/res/layout/activity.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <TextView
-        android:id="@+id/instructionsOrLink"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/instructions"
-        android:autoLink="web"
-        android:linksClickable="true"
-        android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-        android:id="@+id/buttonLoginLogout"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml b/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
deleted file mode 100644
index 09e8eb440..000000000
--- a/samples/SessionLoginSample/res/layout/custom_fragment_activity.xml
+++ /dev/null
@@ -1,28 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/fragment"
-              android:name="com.facebook.samples.sessionlogin.SessionLoginFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/fragment.xml b/samples/SessionLoginSample/res/layout/fragment.xml
deleted file mode 100644
index 8b3bbf7db..000000000
--- a/samples/SessionLoginSample/res/layout/fragment.xml
+++ /dev/null
@@ -1,38 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent"
-              android:orientation="vertical">
-
-<TextView
-            android:id="@+id/instructionsOrLink"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/instructions"
-            android:autoLink="web"
-            android:linksClickable="true"
-            android:textAppearance="?android:attr/textAppearanceMedium" />
-
-    <Button
-            android:id="@+id/buttonLoginLogout"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml b/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
deleted file mode 100644
index 8ad44a93c..000000000
--- a/samples/SessionLoginSample/res/layout/login_fragment_activity.xml
+++ /dev/null
@@ -1,12 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="fill_parent"
-              android:layout_height="fill_parent">
-
-    <fragment android:layout_height="fill_parent"
-              android:layout_width="fill_parent"
-              android:id="@+id/login_fragment"
-              android:name="com.facebook.widget.UserSettingsFragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/layout/main.xml b/samples/SessionLoginSample/res/layout/main.xml
deleted file mode 100644
index a8042a2c1..000000000
--- a/samples/SessionLoginSample/res/layout/main.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <Button
-        android:id="@+id/buttonLoginActivity"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:text="@string/login_using_activity" />
-
-    <Button
-            android:id="@+id/buttonLoginCustomFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_custom_fragment" />
-
-    <Button
-            android:id="@+id/buttonLoginFragment"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:text="@string/login_using_usersettingsfragment" />
-
-</LinearLayout>
diff --git a/samples/SessionLoginSample/res/values/strings.xml b/samples/SessionLoginSample/res/values/strings.xml
deleted file mode 100644
index bcece0ad1..000000000
--- a/samples/SessionLoginSample/res/values/strings.xml
+++ /dev/null
@@ -1,30 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-
-    <string name="login_using_activity">Login using Activity</string>
-    <string name="login_using_custom_fragment">Login using Custom Fragment</string>
-    <string name="login_using_usersettingsfragment">Login using UserSettingsFragment</string>
-    <string name="hello">Hello World, SessionLoginSampleActivity!</string>
-    <string name="app_name">SessionLoginSample</string>
-    <string name="login">Login</string>
-    <string name="instructions">Login to create a link to fetch account data</string>
-    <string name="logout">Log out</string>
-    <string name="app_id">380615018626574</string>
-
-</resources>
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
deleted file mode 100644
index df4049f65..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
+++ /dev/null
@@ -1,128 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class LoginUsingActivityActivity extends Activity {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.activity);
-        buttonLoginLogout = (Button)findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView)findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(this, null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(this);
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(this, requestCode, resultCode, data);
-    }
-
-    @Override
-    protected void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
deleted file mode 100644
index 59f54c603..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingLoginFragmentActivity.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.FragmentActivity;
-import android.support.v4.app.FragmentManager;
-import android.util.Log;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.widget.UserSettingsFragment;
-
-public class LoginUsingLoginFragmentActivity extends FragmentActivity {
-    private UserSettingsFragment userSettingsFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.login_fragment_activity);
-
-        FragmentManager fragmentManager = getSupportFragmentManager();
-        userSettingsFragment = (UserSettingsFragment) fragmentManager.findFragmentById(R.id.login_fragment);
-        userSettingsFragment.setSessionStatusCallback(new Session.StatusCallback() {
-            @Override
-            public void call(Session session, SessionState state, Exception exception) {
-                Log.d("LoginUsingLoginFragmentActivity", String.format("New session state: %s", state.toString()));
-            }
-        });
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        userSettingsFragment.onActivityResult(requestCode, resultCode, data);
-        super.onActivityResult(requestCode, resultCode, data);
-    }
-
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
deleted file mode 100644
index 18ec1b098..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginFragment.java
+++ /dev/null
@@ -1,131 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.content.Intent;
-import android.os.Bundle;
-import android.support.v4.app.Fragment;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.Button;
-import android.widget.TextView;
-import com.facebook.LoggingBehavior;
-import com.facebook.Session;
-import com.facebook.SessionState;
-import com.facebook.Settings;
-
-public class SessionLoginFragment extends Fragment {
-    private static final String URL_PREFIX_FRIENDS = "https://graph.facebook.com/me/friends?access_token=";
-
-    private TextView textInstructionsOrLink;
-    private Button buttonLoginLogout;
-    private Session.StatusCallback statusCallback = new SessionStatusCallback();
-
-    @Override
-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
-        View view = inflater.inflate(R.layout.fragment, container, false);
-
-        buttonLoginLogout = (Button) view.findViewById(R.id.buttonLoginLogout);
-        textInstructionsOrLink = (TextView) view.findViewById(R.id.instructionsOrLink);
-
-        Settings.addLoggingBehavior(LoggingBehavior.INCLUDE_ACCESS_TOKENS);
-
-        Session session = Session.getActiveSession();
-        if (session == null) {
-            if (savedInstanceState != null) {
-                session = Session.restoreSession(getActivity(), null, statusCallback, savedInstanceState);
-            }
-            if (session == null) {
-                session = new Session(getActivity());
-            }
-            Session.setActiveSession(session);
-            if (session.getState().equals(SessionState.CREATED_TOKEN_LOADED)) {
-                session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-            }
-        }
-
-        updateView();
-
-        return view;
-    }
-
-    @Override
-    public void onStart() {
-        super.onStart();
-        Session.getActiveSession().addCallback(statusCallback);
-    }
-
-    @Override
-    public void onStop() {
-        super.onStop();
-        Session.getActiveSession().removeCallback(statusCallback);
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        super.onActivityResult(requestCode, resultCode, data);
-        Session.getActiveSession().onActivityResult(getActivity(), requestCode, resultCode, data);
-    }
-
-    @Override
-    public void onSaveInstanceState(Bundle outState) {
-        super.onSaveInstanceState(outState);
-        Session session = Session.getActiveSession();
-        Session.saveSession(session, outState);
-    }
-
-    private void updateView() {
-        Session session = Session.getActiveSession();
-        if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
-            buttonLoginLogout.setText(R.string.logout);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogout(); }
-            });
-        } else {
-            textInstructionsOrLink.setText(R.string.instructions);
-            buttonLoginLogout.setText(R.string.login);
-            buttonLoginLogout.setOnClickListener(new View.OnClickListener() {
-                public void onClick(View view) { onClickLogin(); }
-            });
-        }
-    }
-
-    private void onClickLogin() {
-        Session session = Session.getActiveSession();
-        if (!session.isOpened() && !session.isClosed()) {
-            session.openForRead(new Session.OpenRequest(this).setCallback(statusCallback));
-        } else {
-            Session.openActiveSession(getActivity(), this, true, statusCallback);
-        }
-    }
-
-    private void onClickLogout() {
-        Session session = Session.getActiveSession();
-        if (!session.isClosed()) {
-            session.closeAndClearTokenInformation();
-        }
-    }
-
-    private class SessionStatusCallback implements Session.StatusCallback {
-        @Override
-        public void call(Session session, SessionState state, Exception exception) {
-            updateView();
-        }
-    }
-}
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
deleted file mode 100644
index 9c64116da..000000000
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/SessionLoginSampleActivity.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.samples.sessionlogin;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.view.View;
-import android.widget.Button;
-import com.facebook.AppEventsLogger;
-
-public class SessionLoginSampleActivity extends Activity {
-
-    private Button buttonLoginActivity;
-    private Button buttonCustomFragment;
-    private Button buttonLoginFragment;
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.main);
-
-        // We demonstrate three different ways of managing session login/logout behavior:
-        // 1) LoginUsingActivityActivity implements an Activity that handles all of its own
-        //    session management.
-        // 2) LoginUsingCustomFragmentActivity uses a Fragment that handles session management;
-        //    this Fragment could be composed as part of a more complex Activity, although in this
-        //    case it is the only UI that the Activity displays.
-        // 3) LoginUsingLoginFragmentActivity is similar to LoginUsingCustomFragmentActivity, but
-        //    uses the UserSettingsFragment class provided by the SDK to handle session management. As
-        //    in (2), this Fragment could be composed as part of a more complex Activity in a real app.
-        buttonLoginActivity = (Button) findViewById(R.id.buttonLoginActivity);
-        buttonLoginActivity.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingActivityActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonCustomFragment = (Button) findViewById(R.id.buttonLoginCustomFragment);
-        buttonCustomFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingCustomFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-
-        buttonLoginFragment = (Button) findViewById(R.id.buttonLoginFragment);
-        buttonLoginFragment.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Intent intent = new Intent(SessionLoginSampleActivity.this, LoginUsingLoginFragmentActivity.class);
-                startActivity(intent);
-            }
-        });
-    }
-
-    @Override
-    protected void onResume() {
-        super.onResume();
-
-        // Call the 'activateApp' method to log an app event for use in analytics and advertising reporting.  Do so in
-        // the onResume methods of the primary Activities that an app may be launched into.
-        AppEventsLogger.activateApp(this);
-    }
-}
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index 8107b8d41..7f63ea40b 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.switchuser"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <application android:label="@string/app_name"
                  android:icon="@drawable/icon" >
diff --git a/samples/SwitchUserSample/SwitchUserSample.iml b/samples/SwitchUserSample/SwitchUserSample.iml
deleted file mode 100644
index 054601076..000000000
--- a/samples/SwitchUserSample/SwitchUserSample.iml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="FacetManager">
-    <facet type="android" name="Android">
-      <configuration>
-        <includeSystemProguardFile>false</includeSystemProguardFile>
-        <includeAssetsFromLibraries>true</includeAssetsFromLibraries>
-        <resOverlayFolders />
-      </configuration>
-    </facet>
-  </component>
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
-    <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/gen" isTestSource="false" />
-    </content>
-    <orderEntry type="jdk" jdkName="Android 2.2 Platform" jdkType="Android SDK" />
-    <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="module" module-name="android-sdk" />
-    <orderEntry type="library" name="android-support-v4" level="project" />
-  </component>
-</module>
-
diff --git a/samples/SwitchUserSample/build.gradle b/samples/SwitchUserSample/build.gradle
index a2cda0280..41125c44d 100644
--- a/samples/SwitchUserSample/build.gradle
+++ b/samples/SwitchUserSample/build.gradle
@@ -1,16 +1,20 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
     compile project(':facebook')
 }
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "19"
+    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
+    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
 
     defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion 19
+        minSdkVersion Integer.parseInt(project.ANDROID_BUILD_MIN_SDK_VERSION)
+        targetSdkVersion Integer.parseInt(project.ANDROID_BUILD_TARGET_SDK_VERSION)
+    }
+
+    lintOptions {
+        abortOnError false
     }
 
     sourceSets {
diff --git a/samples/SwitchUserSample/project.properties b/samples/SwitchUserSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/SwitchUserSample/project.properties
+++ b/samples/SwitchUserSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/SwitchUserSample/res/drawable-hdpi/icon.png b/samples/SwitchUserSample/res/drawable-hdpi/icon.png
index cda826b7f..8e4f7040c 100644
Binary files a/samples/SwitchUserSample/res/drawable-hdpi/icon.png and b/samples/SwitchUserSample/res/drawable-hdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable-mdpi/icon.png b/samples/SwitchUserSample/res/drawable-mdpi/icon.png
index ffd35f432..e193802b2 100644
Binary files a/samples/SwitchUserSample/res/drawable-mdpi/icon.png and b/samples/SwitchUserSample/res/drawable-mdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png
index be63ade0b..e49838d03 100644
Binary files a/samples/SwitchUserSample/res/drawable-xhdpi/icon.png and b/samples/SwitchUserSample/res/drawable-xhdpi/icon.png differ
diff --git a/samples/SwitchUserSample/res/drawable/icon.png b/samples/SwitchUserSample/res/drawable/icon.png
index ffd35f432..e193802b2 100644
Binary files a/samples/SwitchUserSample/res/drawable/icon.png and b/samples/SwitchUserSample/res/drawable/icon.png differ
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
index b7ddd6adb..89a2f38c8 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
@@ -135,6 +135,10 @@ protected void onPause() {
         if (currentSession != null) {
             currentSession.removeCallback(sessionStatusCallback);
         }
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
index dd1b1bc77..125a649c2 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
@@ -22,9 +22,9 @@
 import android.support.v4.app.ListFragment;
 import android.view.*;
 import android.widget.*;
+import com.facebook.SessionLoginBehavior;
 import com.facebook.model.GraphUser;
 import com.facebook.widget.ProfilePictureView;
-import com.facebook.SessionLoginBehavior;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -269,7 +269,7 @@ Slot getSlot(int slot) {
 
         private void setSelectedSlotNumber(int slot) {
             // Store the selected slot number for when the app is closed and restarted
-            settings.edit().putInt(SETTINGS_CURRENT_SLOT_KEY, slot).commit();
+            settings.edit().putInt(SETTINGS_CURRENT_SLOT_KEY, slot).apply();
             selectedSlotNumber = slot;
         }
 
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
index 479deb273..3e5f8399b 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
@@ -18,7 +18,8 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import com.facebook.*;
+import com.facebook.SessionLoginBehavior;
+import com.facebook.SharedPreferencesTokenCachingStrategy;
 import com.facebook.model.GraphUser;
 
 public class Slot {
diff --git a/scripts/configure_unit_tests.sh b/scripts/configure_unit_tests.sh
index a6b85224e..237cf91b2 100755
--- a/scripts/configure_unit_tests.sh
+++ b/scripts/configure_unit_tests.sh
@@ -23,12 +23,13 @@ cd $(dirname $0)/..
 FB_SDK_ROOT=$(pwd)
 FB_SDK_TESTS=$FB_SDK_ROOT/facebook/tests
 
-if [ "$#" -lt 2 ]; then
-    echo "Usage: $0 APP_ID APP_SECRET [MACHINE_UNIQUE_USER_KEY]"
-    echo "  APP_ID                   your unit-testing Facebook application's App ID"
-    echo "  APP_SECRET               your unit-testing Facebook application's App Secret"
-    echo "  MACHINE_UNIQUE_USER_TAG  optional text used to ensure this machine will use its own set of test users rather than sharing"
-    die 'Arguments do not conform to usage'
+if [ "$#" -lt 3 ]; then
+      echo "Usage: $0 APP_ID APP_SECRET CLIENT_TOKEN [MACHINE_UNIQUE_USER_KEY]"
+      echo "  APP_ID                   your unit-testing Facebook application's App ID"
+      echo "  APP_SECRET               your unit-testing Facebook application's App Secret"
+      echo "  CLIENT_TOKEN             your unit-testing Facebook application's client token"
+      echo "  MACHINE_UNIQUE_USER_TAG  optional text used to ensure this machine will use its own set of test users rather than sharing"
+      die 'Arguments do not conform to usage'
 fi
 
 function write_config_json {
@@ -39,7 +40,7 @@ function write_config_json {
     # use heredoc syntax to output the json
     cat > "$CONFIG_JSON_FILE" \
 <<DELIMIT
-{"applicationId":"$1","applicationSecret":"$2","machineUniqueUserTag":"$3"}
+{"applicationId":"$1","applicationSecret":"$2","clientToken":"$3","machineUniqueUserTag":"$4"}
 DELIMIT
 # end heredoc
 
diff --git a/settings.gradle b/settings.gradle
index 8fb89427e..e12211bd7 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -10,19 +10,18 @@ project(':tests').projectDir = new File('facebook/tests')
 // Samples
 include 'FriendPickerSample'
 project(':FriendPickerSample').projectDir = new File('samples/FriendPickerSample')
-include 'GraphApiSample'
-project(':GraphApiSample').projectDir = new File('samples/GraphApiSample')
 include 'HelloFacebookSample'
 project(':HelloFacebookSample').projectDir = new File('samples/HelloFacebookSample')
 include 'PlacePickerSample'
 project(':PlacePickerSample').projectDir = new File('samples/PlacePickerSample')
-include 'ProfilePictureSample'
-project(':ProfilePictureSample').projectDir = new File('samples/ProfilePictureSample')
 include 'RPSSample'
 project(':RPSSample').projectDir = new File('samples/RPSSample')
 include 'Scrumptious'
 project(':Scrumptious').projectDir = new File('samples/Scrumptious')
-include 'SessionLoginSample'
-project(':SessionLoginSample').projectDir = new File('samples/SessionLoginSample')
 include 'SwitchUserSample'
 project(':SwitchUserSample').projectDir = new File('samples/SwitchUserSample')
+
+if (file('internal/internal-settings.gradle').exists()) {
+  apply from: 'internal/internal-settings.gradle'
+}
+
diff --git a/tests/AndroidManifest.xml b/tests/AndroidManifest.xml
deleted file mode 100644
index c0e209de6..000000000
--- a/tests/AndroidManifest.xml
+++ /dev/null
@@ -1,18 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      package="com.facebook.android.tests"
-      android:versionCode="1"
-      android:versionName="1.0">
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name=".Tests"
-                  android:label="@string/app_name">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-
-    </application>
-    <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="3" />
-</manifest> 
diff --git a/tests/res/drawable/icon.png b/tests/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/tests/res/drawable/icon.png and /dev/null differ
diff --git a/tests/res/layout/main.xml b/tests/res/layout/main.xml
deleted file mode 100644
index 7134549a8..000000000
--- a/tests/res/layout/main.xml
+++ /dev/null
@@ -1,89 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical" android:layout_width="fill_parent"
-    android:layout_height="fill_parent" android:background="@drawable/black"
-    android:gravity="center_horizontal">
-
-    <TextView android:id="@+id/publicTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/publicErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <Button android:id="@+id/login" 
-        android:text="@string/login"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/authenticatedTests" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/authenticatedErrors" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />  
-    <Button android:id="@+id/post" 
-        android:text="@string/post"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/wallPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-    <TextView android:id="@+id/deletedPost" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        /> 
-    <Button android:id="@+id/logout" 
-        android:text="@string/logout"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-    <TextView android:id="@+id/logoutTest" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        />
-</LinearLayout>
diff --git a/tests/res/values/colors.xml b/tests/res/values/colors.xml
deleted file mode 100644
index 43a557808..000000000
--- a/tests/res/values/colors.xml
+++ /dev/null
@@ -1,21 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <drawable name="white">#ffffff</drawable>
-    <drawable name="black">#000000</drawable>
-</resources>
diff --git a/tests/res/values/strings.xml b/tests/res/values/strings.xml
deleted file mode 100644
index a61bf4d4c..000000000
--- a/tests/res/values/strings.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-    Copyright 2010-present Facebook.
-
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-
-<resources>
-    <string name="hello">Hello World, Tests!</string>
-    <string name="login">Test Login</string>
-    <string name="post">Test UI Server</string>
-    <string name="logout">Test Logout</string>
-    <string name="app_name">Functional Tests</string>
-</resources>
diff --git a/tests/src/com/facebook/android/tests/Tests.java b/tests/src/com/facebook/android/tests/Tests.java
deleted file mode 100644
index e3116289e..000000000
--- a/tests/src/com/facebook/android/tests/Tests.java
+++ /dev/null
@@ -1,595 +0,0 @@
-/**
- * Copyright 2010-present Facebook.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android.tests;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONObject;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.DialogError;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-import com.facebook.android.Facebook.DialogListener;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-
-public class Tests extends Activity {
-    
-    // Your Facebook Application ID must be set before running this example
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "110862205611506";
-    
-    private static final String[] PERMISSIONS =
-        new String[] {"publish_stream", "read_stream", "offline_access"};
-    
-    TextView publicTestsText;
-    TextView publicErrorsText;
-    Button loginButton;
-    TextView authenticatedTestsText;
-    TextView authenticatedErrorsText;
-    Button postButton;
-    TextView wallPostText;
-    TextView deletedPostText;
-    Button logoutButton;
-    TextView logoutText;
-    
-    Facebook authenticatedFacebook = new Facebook(APP_ID);
-    
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        
-        publicTestsText = (TextView) findViewById(R.id.publicTests);
-        publicErrorsText = (TextView) findViewById(R.id.publicErrors);
-        loginButton = (Button) findViewById(R.id.login);
-        authenticatedTestsText = (TextView) findViewById(
-                R.id.authenticatedTests);
-        authenticatedErrorsText = (TextView) findViewById(
-                R.id.authenticatedErrors);
-        postButton = (Button) findViewById(R.id.post);
-        wallPostText = (TextView) findViewById(R.id.wallPost);
-        deletedPostText = (TextView) findViewById(R.id.deletedPost);
-        logoutButton = (Button) findViewById(R.id.logout);
-        logoutText = (TextView) findViewById(R.id.logoutTest);
-               
-        // button to test UI Server login method
-        loginButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.authorize(Tests.this, PERMISSIONS,
-                        new TestLoginListener());
-            }
-        });
-        
-        // button for testing UI server publish stream dialog
-        postButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                authenticatedFacebook.dialog(Tests.this, "stream.publish", 
-                        new TestUiServerListener());
-            }
-        });
-        
-        // enable logout test button
-        logoutButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                runTestLogout();
-            }
-        });
-        
-        runTestPublicApi();
-    }
-
-    @Override
-    public void onActivityResult(int requestCode, int resultCode, Intent data) {
-        authenticatedFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    public void runTestPublicApi() {
-        if (testPublicApi()) {
-            publicTestsText.setText("Public API tests passed");
-            publicTestsText.setTextColor(Color.GREEN);
-        } else {
-            publicTestsText.setText("Public API tests failed");
-            publicTestsText.setTextColor(Color.RED);
-        }
-        
-        if (testPublicErrors()) {
-            publicErrorsText.setText("Public API errors passed");
-            publicErrorsText.setTextColor(Color.GREEN);
-        } else {
-            publicErrorsText.setText("Public API errors failed");
-            publicErrorsText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testPublicApi() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Log.d("Tests", "Testing standard API call");
-            JSONObject response = Util.parseJson(fb.request("4"));
-            if (!response.getString("name").equals("Mark Zuckerberg")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing an API call with a specific method");
-            response = Util.parseJson(
-                    fb.request("soneff", new Bundle(), "GET"));
-            if (!response.getString("name").equals("Steven Soneff")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing a public search query");
-            Bundle params = new Bundle();
-            params.putString("q", "facebook");
-            response = Util.parseJson(fb.request("search", params));
-            if (response.getJSONArray("data").length() == 0) return false;
-            
-            Log.d("Tests", "Public API Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testPublicErrors() {
-        Facebook fb = new Facebook(APP_ID);
-        try {
-            Bundle params = new Bundle();
-            
-            Log.d("Tests", "Testing illegal post");
-            params.putString("message", "Hello World");
-            try {
-                Util.parseJson(fb.request("4", params, "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported post request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal delete");
-            try {
-                Util.parseJson(fb.request("4", new Bundle(), "DELETE"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An access token is required to request this " +
-                        "resource.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing illegal post to Zuck's feed");
-            try {
-                Util.parseJson(fb.request("4/feed", new Bundle(), "POST"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("(#200) The user hasn't " +
-                		"authorized the application to perform this action")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalidly specified parameters");
-            try {
-                Util.parseJson(fb.request("bgolub?fields=id,name,picture"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().startsWith("Unknown fields: picture?")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing request for 'me' is rejected without " +
-            		"access_token");
-            try {
-                Util.parseJson(fb.request("me"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "An active access token must be used to " +
-                        "query information about the current user.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing empty request");
-            try {
-                Util.parseJson(fb.request(""));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Unsupported get request.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing an invalid path");
-            try {
-                Util.parseJson(fb.request("invalidinvalidinvalidinvalid"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "(#803) Some of the aliases you requested do not " +
-                        "exist: invalidinvalidinvalidinvalid")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing missing query parameter");
-            try {
-                Util.parseJson(fb.request("search", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("No node specified")) return false;
-            }
-            
-            Log.d("Tests", "Testing that API method is specified");
-            try {
-                fb.request(new Bundle());
-                return false;
-            } catch (IllegalArgumentException e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals(
-                        "API method must be specified. " +
-                        "(parameters must contain key \"method\" " +
-                        "and value). See http://developers.facebook." +
-                        "com/docs/reference/rest/")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing that old API request cannot be made " +
-                           "without access token");
-            params.putString("method", "stream.publish");
-            try {
-                Util.parseJson(fb.request(params));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing invalid access token");
-            try {
-                fb.setAccessToken("invalid");
-                Util.parseJson(fb.request("me", new Bundle(), "GET"));
-                return false;
-            } catch (FacebookError e) {
-                Log.d("Tests", "*" + e.getMessage() + "*");
-                if (!e.getMessage().equals("Invalid OAuth access token.")) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Public API Error Tests passed"); 
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public class TestLoginListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            if (testAuthenticatedApi()) {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests passed");
-                authenticatedTestsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedTestsText.setText(
-                        "Authenticated API tests failed");
-                authenticatedTestsText.setTextColor(Color.RED);
-            }
-            if (testAuthenticatedErrors()) {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors passed");
-                authenticatedErrorsText.setTextColor(Color.GREEN);
-            } else {
-                authenticatedErrorsText.setText(
-                        "Authenticated API errors failed");
-                authenticatedErrorsText.setTextColor(Color.RED);
-            }
-        }
-
-        public void onCancel() {
-        }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testAuthenticatedApi() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        try {
-            Log.d("Tests", "Testing request for 'me'");
-            String response = authenticatedFacebook.request("me");
-            JSONObject obj = Util.parseJson(response);
-            if (obj.getString("name") == null || 
-                    obj.getString("name").equals("")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API wall post");
-            Bundle parameters = new Bundle();
-            parameters.putString("message", "hello world");
-            parameters.putString("description", "test test test");
-            response = authenticatedFacebook.request("me/feed", parameters, 
-                    "POST");
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing graph API delete");
-            response = response.replaceAll("\\{\"id\":\"", "");
-            response = response.replaceAll("\"\\}", "");
-            response = authenticatedFacebook.request(response, new Bundle(), 
-                    "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "Testing old API wall post");
-            parameters = new Bundle();
-            parameters.putString("method", "stream.publish");
-            parameters.putString("attachment", 
-                "{\"name\":\"Name=Title\"," +
-                "\"href\":\"http://www.google.fr/\",\"" +
-                "caption\":\"Caption\",\"description\":\"Description" +
-                "\",\"media\":[{\"type\":\"image\",\"src\":" +
-                "\"http://www.kratiroff.com/logo-facebook.jpg\"," +
-                "\"href\":\"http://developers.facebook.com/\"}]," +
-                "\"properties\":{\"another link\":{\"text\":\"" +
-                "Facebook homepage\",\"href\":\"http://www.facebook." +
-                "com\"}}}");;
-            response = authenticatedFacebook.request(parameters);
-            Log.d("Tests", "got response: " + response);
-            if (response == null || response.equals("") || 
-                    response.equals("false")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing wall post delete");
-            response = response.replaceAll("\"", "");
-            response = authenticatedFacebook.request(
-                    response, new Bundle(), "DELETE");
-            if (!response.equals("true")) return false;
-            
-            Log.d("Tests", "All Authenticated Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public boolean testAuthenticatedErrors() {
-        if (!authenticatedFacebook.isSessionValid()) return false;
-        
-        Log.d("Tests", "Testing that request for 'me/invalid' is rejected");
-        try {
-            Util.parseJson(authenticatedFacebook.request("me/invalid"));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown path components: /invalid")) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "Testing that old API call with invalid method fails");
-        Bundle params = new Bundle();
-        params.putString("method", "something_invalid");
-        try {
-            Util.parseJson(authenticatedFacebook.request(params));
-            return false;
-        } catch (Throwable e) {
-            Log.d("Tests", "*" + e.getMessage() + "*");
-            if (!e.getMessage().equals("Unknown method") ) {
-                return false;
-            }
-        }
-        
-        Log.d("Tests", "All Authenticated Error Tests Passed");
-        return true;
-    }
-    
-    public class TestUiServerListener implements DialogListener {
-
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
-                new AsyncFacebookRunner(authenticatedFacebook).request(postId, 
-                        new TestPostRequestListener());
-            } else {
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onCancel() { }
-
-        public void onError(DialogError e) {
-            e.printStackTrace();
-        }
-
-        public void onFacebookError(FacebookError e) {
-            e.printStackTrace();
-        }
-    }
-    
-    public class TestPostRequestListener implements RequestListener {
-        
-        public void onComplete(final String response, final Object state) {
-            Log.d("Tests", "Got response: " + response);
-            try {
-                JSONObject json = Util.parseJson(response);
-                //final String message = json.getString("message");
-                String postId = json.getString("id");
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Success");
-                        wallPostText.setTextColor(Color.GREEN);
-                    }
-                });
-                
-                Log.d("Tests", "Testing wall post delete");
-                if (testPostDelete(postId)) {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Success");
-                            deletedPostText.setTextColor(Color.GREEN);
-                        }
-                    });
-                } else {
-                    Tests.this.runOnUiThread(new Runnable() {
-                        public void run() {
-                            deletedPostText.setText("Deleted Post Failure");
-                            deletedPostText.setTextColor(Color.RED);
-                        }
-                    });
-                }
-            } catch (Throwable e) {
-                e.printStackTrace();
-                Tests.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        wallPostText.setText("Wall Post Failure");
-                        wallPostText.setTextColor(Color.RED);
-                    }
-                });
-            }
-        }
-
-        public void onFacebookError(FacebookError e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onIOException(IOException e, final Object state) {
-            e.printStackTrace();
-        }
-
-        public void onMalformedURLException(MalformedURLException e,
-                                            final Object state) {
-            e.printStackTrace();
-        }
-    }
-    
-    public boolean testPostDelete(String postId) {
-        try {
-            String deleteResponse = 
-                authenticatedFacebook.request(postId, new Bundle(), "DELETE");
-            return deleteResponse.equals("true");
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    public void runTestLogout() {
-        if (testLogout()) {
-            logoutText.setText("Logout Tests Passed");
-            logoutText.setTextColor(Color.GREEN);
-        } else {
-            logoutText.setText("Logout Tests Failed");
-            logoutText.setTextColor(Color.RED);
-        }
-    }
-    
-    public boolean testLogout() {
-        try {
-            Log.d("Tests", "Testing logout");
-            String response = authenticatedFacebook.logout(this);
-            Log.d("Tests", "Got logout response: *" + response + "*");
-            if (!response.equals("true")) {
-                return false;
-            }
-            
-            Log.d("Tests", "Testing logout on logged out facebook session");
-            try {
-                Util.parseJson(authenticatedFacebook.logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "Testing logout on unauthenticated object");
-            try {
-                Util.parseJson(new Facebook(APP_ID).logout(this));
-                return false;
-            } catch (FacebookError e) {
-                if (e.getErrorCode() != 101 || 
-                        !e.getMessage().equals("Invalid API key") ) {
-                    return false;
-                }
-            }
-            
-            Log.d("Tests", "All Logout Tests Passed");
-            return true;
-        } catch (Throwable e) {
-            e.printStackTrace();
-            return false;
-        }
-    }
-    
-    // test bad UI server method?
-    
-    // test invalid permission? <-- UI server test
-}
