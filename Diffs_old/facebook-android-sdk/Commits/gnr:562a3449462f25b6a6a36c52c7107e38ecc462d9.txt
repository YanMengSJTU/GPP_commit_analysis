diff --git a/.gitignore b/.gitignore
index 47acd648f..d67742076 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,14 +2,16 @@
 *.DS_Store
 *.class
 *java#
-*.classpath
-*.project
 *.settings
-facebook/bin/
-facebook/gen/
-examples/stream/bin/
-examples/simple/bin/
-examples/stream/gen/
-examples/simple/gen/
-tests/bin
-tests/gen
\ No newline at end of file
+local.properties
+.arc/
+bin/
+gen/
+out/
+facebook/doc/
+facebook/lint.xml
+facebook/tests/lint.xml
+facebook/tests/assets/config.json
+.idea/workspace.xml
+.idea/dictionaries/
+.idea/inspectionProfiles/
diff --git a/README.md b/README.md
deleted file mode 100644
index fcfc937a5..000000000
--- a/README.md
+++ /dev/null
@@ -1,24 +0,0 @@
-This open source Java library allows you to integrate Facebook into your Android application. Except as otherwise noted, the Facebook Android SDK is licensed under the Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
-
-Getting Started
-===============
-
-See our [Android SDK Getting Started Guide](https://developers.facebook.com/docs/mobile/android/build/)
-
-Sample Applications
-===============
-
-This library includes three sample applications to guide you in development.
-
-* __simple__: A bare-bones app that demonstrates authorization, making API calls, and invoking a dialog.
-
-* __stream__: This slightly beefier application lets you view your news feed.
-
-* __Hackbook__: This includes Single Sign On implementation (SSO), sample API calls, and advanced features like Get new Permissions, Run sample FQL Query and Graph API Explorer. Check out [Hackbook for Android](https://developers.facebook.com/docs/mobile/android/hackbook/)
-
-
-Report Issues/Bugs
-===============
-[Bugs](https://developers.facebook.com/bugs)
-
-[Questions](http://facebook.stackoverflow.com/questions/tagged/android)
diff --git a/examples/Hackbook/AndroidManifest.xml b/examples/Hackbook/AndroidManifest.xml
deleted file mode 100644
index afd4c5307..000000000
--- a/examples/Hackbook/AndroidManifest.xml
+++ /dev/null
@@ -1,49 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.facebook.android"
-    android:versionCode="1"
-    android:versionName="1.0">
-    <supports-screens
-        android:smallScreens="true"
-        android:normalScreens="true"
-        android:largeScreens="true"
-        android:anyDensity="true" />
-    <application android:icon="@drawable/icon"
-        android:label="@string/app_name"
-        android:debuggable="true">
-        <activity android:name=".SplashActivity"
-            android:label="@string/app_name"
-            android:screenOrientation="portrait">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-        <activity android:name=".Hackbook"
-            android:label="@string/app_name"
-            android:configChanges="keyboardHidden"
-            android:screenOrientation="portrait">
-        </activity>
-        <activity
-            android:name=".GraphExplorer"
-            android:windowSoftInputMode="stateHidden"
-            android:screenOrientation="portrait" />
-        <activity android:name=".IntentUriHandler">
-            <intent-filter>
-                <action android:name="android.intent.action.VIEW" />
-                <category android:name="android.intent.category.DEFAULT" />
-                <data android:scheme="fbgraphex" />
-            </intent-filter>
-        </activity>
-        <activity
-            android:name=".FriendsList"
-            android:screenOrientation="portrait" />
-        <activity
-            android:name=".Places"
-            android:screenOrientation="portrait" />
-    </application>
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
-    <uses-permission android:name="android.permission.MANAGE_ACCOUNTS" />
-    <uses-sdk android:minSdkVersion="3" />
-</manifest>
diff --git a/examples/Hackbook/README.md b/examples/Hackbook/README.md
deleted file mode 100644
index 3036a187e..000000000
--- a/examples/Hackbook/README.md
+++ /dev/null
@@ -1,130 +0,0 @@
-This 'Hackbook for Android' app includes Single Sign On implementation (SSO), sample API calls and Graph API Explorer and is targeted towards android developers who want to make their apps social using Facebook Social Graph. The Code provided here is to showcase how to implement the SSO and make the API calls. If you have any questiosn or comments related to this sample app, please post them here - http://facebook.stackoverflow.com/questions/tagged/hackbook-for-android
-
-Getting Started
-===============
-
-See Android tutorial - https://developers.facebook.com/docs/mobile/android/build/
-
-Configuring the app
-===============
-
-1. Launch Eclipse
-2. Ensure you have installed the Android plugin.
-3. Create Facebook SDK Project - follow the Step-1 instructions in the tutorial
-4. Create the Hackbook Project :
-   4.1 Select __File__ -> __New__ -> __Project__, choose __Android Project__, and then click __Next__.
-   4.2 Select "Create project from existing source".
-   4.3. Choose  examples/Hackbook. You should see the project properties populated.
-   4.4. Click Finish to continue.
-5. Add reference to the Facebook SDK - follow the Step-3 instructions in the tutorial
-6. Create a Facebook app if you don't have one already and add the app id in the Hackbook.java->APP_ID
-
-Build the app
-===============
-
-7. And you are done and ready to compile the project:
-   7.1 From the Project menu, select "Build Project".
-
-Run the app
-===============
-
-8. Hopefully project would compile fine. Next run the app on the emulator or on the phone (See http://developer.android.com/guide/developing/eclipse-adt.html#RunConfig for more details.)
-   8.1 If you plan to run on emulator, ensure you have created an Android Virtual Device (AVD):
-		8.1.1 Go to Window -> Android SDK and AVD Manager -> Click New
-		8.1.2 Provide a Name (AVD 2.3 e.g.) and choose the Target (Android 2.3 if available).
-		8.1.3 Click 'Create AVD' at the bottom and that should create an AVD which you can run the app on described  next.
-
-   8.2 Go to Run->Run Configurations->Android Application->create a new run configuration by clicking the icon with + button on it.
-   8.3 Name it 'Hackbook'
-   8.4 Under the Project, Browse and choose Hackbook
-   8.5 Go to Target tab -> Choose manual if you wish to run on the phone, else choose Automatic and select an AVD created in step 8.1
-   8.6 Click Run and your 'Hackbook for Android' app should be up and running.
-
-
-Installing the Facebook app
-===============
-
-You will need to have the Facebook application on the handset or the emulator to test the Single Sign On. The SDK includes a developer release of the Facebook application that can be side-loaded for testing purposes. On an actual device, you can just download the latest version of the app from the Android Market, but on the emulator you will have to install it yourself:
-
-      adb install FBAndroid.apk
-
-What's in there
-===============
-
-Note: The source tags are provided through out the code base to facilitate easy search for the relevant code. Do a project-wide search for the source tags to get straight to the relevant code. Refer below for source tags for each feature.
-
-1. Login button - This uses SSO to authorize the app. Clicking on Login should activate SSO (if the app is installed) or show OAuth dialog. When authorizing, no permissions are requested and the app will get basic permission by default.
-
-Source Tag - login_tag
-
-- Hackbook.java - this layout the login button and initialize it. Since this is also the calling acitivty, this overrides the onActivityResult() method.
-- LoginButton.java - this calls the mFb.authorize(mActivity, mPermissions, mActivityCode, new LoginDialogListener()) which authorizes the app via SSO or OAuth.
-- SessionStore.java - stores the access token and access expiry time for future app launch. This is important that you save the access token, else user will need to authorize your app each time they launch it which is annoying and user is likely to churn out.
-- SessionEvents.java - Authorization state tracker, calls the listener on login/logout success or error.
-------------------------
-
-2. Update Status - this allows user to update his status by calling the 'feed' dialog. More info on feed dialog - https://developers.facebook.com/docs/reference/dialogs/feed/
-
-Source Tag - update_status_tag, view_post_tag, delete_post_tag
-
-- Hackbook.java - Case 0: update status by calling the 'feed' dialog.
-- UpdateStatusResultDialog.java - shows the object-id returned in the dialog response. You can view or delete the post here.
-------------------------
-
-3. App Requests - this allows to send app requests to user's friends by calling the 'apprequests' dialog. More info - https://developers.facebook.com/docs/reference/dialogs/requests/
-
-Source Tag - app_requests_tag
-
-- Hackbook.java - Case 1: send the app requests by calling the the 'apprequests' dialog.
-------------------------
-
-4. Get Friends - Get user's friends via Graph API or FQL Query. User must be logged-in to use this. Also post on a friend's wall by clicking on his name in the list.
-
-Source Tag - get_friends_tag, friend_wall_tag
-
-- Hackbook.java - Case 2:  Use Graph API 'me/friends' which returns friends sorted by UID, currently it's not possible to sort any other way in the Graph API. Use the FQL Query to sort by name - select name, current_location, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name
-- FriendsList.java - displays the friends profile pic and names as returned by the api. Also post on friend's wall by clicking on the friend.
-- FriendsModel.java - run async tasks to fetch the profile picture limited to 15 tasks at any given time.
-
-5. Upload Photo - Upload a photo either from the media gallery or from a remote server. You require 'photo_upload' to upload photos on user profile.
-
-Source Tag - upload_photo, view_photo_tag, tag_photo_tag
-
-- Hackbook.java - Case 3: Photo is uploaded by posting byte-array or url to me/photos endpoint. Media Gallery is launched by invoking the MediaStore.Images.Media.EXTERNAL_CONTENT_URI intent and overriding the OnActivityResult() to get the picture from the media gallery. Photo from remote server is uploaded by simply providing the image url in the 'url' param in the graph.facebook.com/me/photos endpoint.
-- UploadPhotoResultDialog.java - shows the object-id returned after uploaded the photo. You can view or tag the photo here.
-------------------------
-
-
-6. Place Check-in - Fetch user's current location or use Times Square as the current location and get nearby places which user can check-in at.
-
-Source Tag - fetch_places_tag, check_in_tag
-
-- Hackbook.java - Case 4: Ask to fetch current location or use Times Square as the current location.
-- Places.java - Get user's current location and fetch the nearby places by calling the graph.facebook.com/search?type=places&distance=1000&center=lat,lon. Check-in user at a place by calling the graph.facebook.com/me/checkins&place=<place_id_>&message=<message>&coordinates={"latitude": <lat>, "longitude:": <lon>}
-------------------------
-
-7. Run FQL Query - Type and run any FQL Query and see the results.
-
-Source Tag - fql_query_tag
-
-- FQLQuery.java - Layout the FQL Query Dialog and run the query and show the results.
-------------------------
-
-8. Graph API Explorer - Explore user's social graph, see his and friends' connections and get new permissions. This is similar to the Graph Explorer dev tool - http://developers.facebook.com/tools/explorer/. The ObjectIDs in the API response are linkified and can be clicked to fetch object specific data.
-  - Click the 'x' button to clear the textfield
-  - Click the green up arrow button in the textfield to get the 'me' object data.
-  - Click on 'Get Permissions' to get new permissions including user's, his friends or extended permissions.
-  - Click on 'Fields/Connections' to see current object's fields and connections.
-  - On the Fields & Connections dialog, in the Fields tab, select the fields to view or in the Connections tab, click the connection to view it's content.
-
-Source Tag - graph_explorer
-
-- Hackbook.java - Case 5: Launch the GraphExplorer intent
-- GraphExplorer.java - Layout and execute the graph explorer
-- IntentUriHandler.java - Handle the fbgraphex: schema generated while linkifying the Object IDs in the graph explorer output
-
-
-
-Report Issues/Bugs
-===============
-Please report issues here - http://facebook.stackoverflow.com/questions/tagged/hackbook-for-android
diff --git a/examples/Hackbook/project.properties b/examples/Hackbook/project.properties
deleted file mode 100644
index 4004bace5..000000000
--- a/examples/Hackbook/project.properties
+++ /dev/null
@@ -1,17 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Indicates whether an apk should be generated for each density.
-split.density=false
-android.library.reference.1=../../../newdialog/facebook-android-sdk/facebook
-# Project target.
-target=android-3
diff --git a/examples/Hackbook/res/drawable-hdpi/splash.png b/examples/Hackbook/res/drawable-hdpi/splash.png
deleted file mode 100644
index 3efb5e80a..000000000
Binary files a/examples/Hackbook/res/drawable-hdpi/splash.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/icon.png b/examples/Hackbook/res/drawable/icon.png
deleted file mode 100644
index 7a2d0cbe4..000000000
Binary files a/examples/Hackbook/res/drawable/icon.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/icon_hack.png b/examples/Hackbook/res/drawable/icon_hack.png
deleted file mode 100644
index a812187e6..000000000
Binary files a/examples/Hackbook/res/drawable/icon_hack.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/login.png b/examples/Hackbook/res/drawable/login.png
deleted file mode 100644
index 95c8dc156..000000000
Binary files a/examples/Hackbook/res/drawable/login.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/login_button.xml b/examples/Hackbook/res/drawable/login_button.xml
deleted file mode 100644
index 73dc6c3ab..000000000
--- a/examples/Hackbook/res/drawable/login_button.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-	<item android:state_pressed="true" android:drawable="@drawable/login_down" />
-	<item android:drawable="@drawable/login" /> <!-- default -->
-</selector>
\ No newline at end of file
diff --git a/examples/Hackbook/res/drawable/login_down.png b/examples/Hackbook/res/drawable/login_down.png
deleted file mode 100644
index 10d216b3f..000000000
Binary files a/examples/Hackbook/res/drawable/login_down.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/logout.png b/examples/Hackbook/res/drawable/logout.png
deleted file mode 100644
index 290272aa0..000000000
Binary files a/examples/Hackbook/res/drawable/logout.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/logout_button.xml b/examples/Hackbook/res/drawable/logout_button.xml
deleted file mode 100644
index 58f57656b..000000000
--- a/examples/Hackbook/res/drawable/logout_button.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/logout_down" />
-    <item android:drawable="@drawable/logout" /> <!-- default -->
-</selector>
\ No newline at end of file
diff --git a/examples/Hackbook/res/drawable/logout_down.png b/examples/Hackbook/res/drawable/logout_down.png
deleted file mode 100644
index 1ab14b9dc..000000000
Binary files a/examples/Hackbook/res/drawable/logout_down.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/me.png b/examples/Hackbook/res/drawable/me.png
deleted file mode 100644
index 413e20bb9..000000000
Binary files a/examples/Hackbook/res/drawable/me.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/splash.png b/examples/Hackbook/res/drawable/splash.png
deleted file mode 100644
index 1892fcec6..000000000
Binary files a/examples/Hackbook/res/drawable/splash.png and /dev/null differ
diff --git a/examples/Hackbook/res/drawable/x.png b/examples/Hackbook/res/drawable/x.png
deleted file mode 100644
index f0978141d..000000000
Binary files a/examples/Hackbook/res/drawable/x.png and /dev/null differ
diff --git a/examples/Hackbook/res/layout/connection_item.xml b/examples/Hackbook/res/layout/connection_item.xml
deleted file mode 100644
index e556c0685..000000000
--- a/examples/Hackbook/res/layout/connection_item.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight">
-    <TextView
-        android:id="@+id/connection_name"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:textSize="26sp"
-        android:textColor="@color/lite_blue"
-        android:paddingLeft="5dp" />
-</RelativeLayout>
diff --git a/examples/Hackbook/res/layout/fields_connections_list.xml b/examples/Hackbook/res/layout/fields_connections_list.xml
deleted file mode 100644
index 06b48f89e..000000000
--- a/examples/Hackbook/res/layout/fields_connections_list.xml
+++ /dev/null
@@ -1,45 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TabHost
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:id="@+id/tabHost">
-        <RelativeLayout
-            android:layout_height="wrap_content"
-            android:layout_width="fill_parent">
-            <TabWidget
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabs" />
-            <FrameLayout
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabcontent"
-                android:layout_below="@android:id/tabs">
-                <LinearLayout
-                    android:orientation="vertical"
-                    android:layout_width="fill_parent"
-                    android:layout_height="fill_parent"
-                    android:id="@+id/fields_layout">
-                    <Button android:id="@+id/get_fields_button"
-                        android:text="@string/get_fields"
-                        android:layout_width="wrap_content"
-                        android:layout_height="wrap_content"
-                        android:padding="10dp" />
-                    <ListView
-                        android:id="@+id/fields_list"
-                        android:layout_width="fill_parent"
-                        android:layout_height="fill_parent" />
-                </LinearLayout>
-                <ListView
-                    android:id="@+id/connections_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="fill_parent" />
-            </FrameLayout>
-        </RelativeLayout>
-    </TabHost>
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/fields_item.xml b/examples/Hackbook/res/layout/fields_item.xml
deleted file mode 100644
index c072d7bd2..000000000
--- a/examples/Hackbook/res/layout/fields_item.xml
+++ /dev/null
@@ -1,14 +0,0 @@
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <CheckBox
-        android:id="@+id/fields_checkbox"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-    <TextView
-        android:id="@+id/fields_info"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/fql_query.xml b/examples/Hackbook/res/layout/fql_query.xml
deleted file mode 100644
index ddda019b2..000000000
--- a/examples/Hackbook/res/layout/fql_query.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<LinearLayout
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical"
-    xmlns:android="http://schemas.android.com/apk/res/android">
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <EditText
-            android:layout_height="wrap_content"
-            android:layout_width="240dp"
-            android:layout_weight="1"
-            android:textSize="25px"
-            android:gravity="left|center"
-            android:id="@+id/fqlquery" />
-        <Button android:id="@+id/submit_button"
-            android:text="@string/submit"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:gravity="center"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="3dip"
-        android:background="@color/grey" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent">
-        <TextView
-            android:id="@+id/fqlOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:visibility="invisible"
-            android:background="@color/grey" />
-    </ScrollView>
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/friend_item.xml b/examples/Hackbook/res/layout/friend_item.xml
deleted file mode 100644
index c1c6728ed..000000000
--- a/examples/Hackbook/res/layout/friend_item.xml
+++ /dev/null
@@ -1,33 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:padding="6dip"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    android:id="@+id/friend_item">
-    <ImageView
-        android:id="@+id/profile_pic"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_alignParentTop="true"
-        android:layout_alignParentBottom="true"
-        android:layout_marginRight="6dip" />
-    <TextView
-        android:id="@+id/name"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_toRightOf="@id/profile_pic"
-        android:layout_alignParentRight="true"
-        android:layout_alignParentTop="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:gravity="center_vertical" />
-    <TextView
-        android:id="@+id/info"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_toRightOf="@id/profile_pic"
-        android:layout_below="@id/name"
-        android:layout_alignParentBottom="true"
-        android:layout_alignParentRight="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:singleLine="true"
-        android:ellipsize="marquee" />
-</RelativeLayout>
diff --git a/examples/Hackbook/res/layout/friends_list.xml b/examples/Hackbook/res/layout/friends_list.xml
deleted file mode 100644
index 82e565181..000000000
--- a/examples/Hackbook/res/layout/friends_list.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <ListView
-        android:id="@+id/friends_list"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
- </LinearLayout>
diff --git a/examples/Hackbook/res/layout/graph_explorer.xml b/examples/Hackbook/res/layout/graph_explorer.xml
deleted file mode 100644
index a7ebee4fa..000000000
--- a/examples/Hackbook/res/layout/graph_explorer.xml
+++ /dev/null
@@ -1,103 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent" >
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/accessTokenButton"
-            android:text="@string/get_permissions"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <TextView
-        android:id="@+id/graphDomain"
-        android:text="@string/graph_domain"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingRight="5dp"
-        android:paddingLeft="5dp" />
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <FrameLayout
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content">
-            <EditText android:id="@+id/inputId"
-                android:layout_height="wrap_content"
-                android:layout_width="240dp"
-                android:layout_weight="1"
-                android:textSize="25px"
-                android:gravity="left"
-                android:hint="Enter Object ID" />
-            <Button
-                android:id="@+id/meButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginRight="30dip"
-                android:layout_gravity="right|center_vertical"
-                android:background="@drawable/me"
-                android:visibility="invisible" />
-            <Button
-                android:id="@+id/textDeleteButton"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginRight="5dip"
-                android:layout_gravity="right|center_vertical"
-                android:background="@drawable/x" />
-        </FrameLayout>
-        <Button
-            android:id="@+id/submitButton"
-            android:text="@string/submit"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content">
-        <Button android:id="@+id/fieldsAndConnectionsButton"
-            android:text="@string/fields_and_connections"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-        <Button android:id="@+id/viewURLButton"
-            android:text="@string/view_url"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-        <Button android:id="@+id/backParentButton"
-            android:text="@string/back_parent"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp"
-            android:visibility="invisible" />
-    </LinearLayout>
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="fill_parent"
-        android:layout_width="fill_parent">
-        <TextView android:id="@+id/output"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:textSize="16sp"
-            android:visibility="invisible"
-            android:background="@color/grey" />
-    </ScrollView>
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/main.xml b/examples/Hackbook/res/layout/main.xml
deleted file mode 100644
index 2dc8e244a..000000000
--- a/examples/Hackbook/res/layout/main.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:gravity="center_horizontal">
-    <RelativeLayout
-        android:layout_width="fill_parent"
-        android:padding="6dip"
-        android:layout_height="?android:attr/listPreferredItemHeight">
-        <ImageView
-            android:id="@+id/user_pic"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_alignParentTop="true"
-            android:layout_alignParentBottom="true"
-            android:layout_marginRight="6dip" />
-        <TextView
-            android:id="@+id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_toRightOf="@id/user_pic" />
-        <com.facebook.android.LoginButton
-            android:id="@+id/login"
-            android:src="@drawable/login_button"
-            android:layout_toRightOf="@id/user_pic"
-            android:layout_below="@id/txt"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content" />
-    </RelativeLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="1dip"
-         android:background="@color/grey" />
-    <ListView
-        android:id="@+id/main_list"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content" />
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="1dip"
-        android:background="@color/grey" />
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/main_list_item.xml b/examples/Hackbook/res/layout/main_list_item.xml
deleted file mode 100644
index 2ac0fac97..000000000
--- a/examples/Hackbook/res/layout/main_list_item.xml
+++ /dev/null
@@ -1,9 +0,0 @@
-<TextView xmlns:android="http://schemas.android.com/apk/res/android"
-    android:id="@+id/main_api_item"
-    android:padding="10dip"
-    android:layout_width="fill_parent"
-    android:layout_height="wrap_content"
-    android:layout_alignParentRight="true"
-    android:layout_alignParentTop="true"
-    android:gravity="center_vertical"
-    android:textSize="20sp" />
diff --git a/examples/Hackbook/res/layout/permission_item.xml b/examples/Hackbook/res/layout/permission_item.xml
deleted file mode 100644
index 57eb43a8b..000000000
--- a/examples/Hackbook/res/layout/permission_item.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="?android:attr/listPreferredItemHeight">
-    <CheckBox
-        android:id="@+id/permission_checkbox"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" />
-</RelativeLayout>
diff --git a/examples/Hackbook/res/layout/permissions_list.xml b/examples/Hackbook/res/layout/permissions_list.xml
deleted file mode 100644
index f5592c5ae..000000000
--- a/examples/Hackbook/res/layout/permissions_list.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/permission_detail"
-        android:text="@string/permission_detail"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:gravity="center_vertical"
-        android:textSize="16sp" />
-   <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-   <Button
-        android:id="@+id/get_permissions_button"
-        android:text="@string/get_permissions"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:padding="10dp" />
-    <View
-        android:layout_width="fill_parent"
-        android:layout_height="2dip"
-        android:background="@color/grey" />
-    <TabHost
-        android:layout_width="wrap_content"
-        android:layout_height="fill_parent"
-        android:id="@+id/tabHost">
-        <RelativeLayout
-            android:layout_height="wrap_content"
-            android:layout_width="fill_parent">
-            <TabWidget
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabs" />
-            <FrameLayout
-                android:layout_width="fill_parent"
-                android:layout_height="wrap_content"
-                android:id="@android:id/tabcontent"
-                android:layout_below="@android:id/tabs">
-                <ListView
-                    android:id="@+id/user_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-                <ListView
-                    android:id="@+id/friend_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-                <ListView
-                    android:id="@+id/extended_permissions_list"
-                    android:layout_width="fill_parent"
-                    android:layout_height="wrap_content" />
-            </FrameLayout>
-        </RelativeLayout>
-    </TabHost>
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/place_item.xml b/examples/Hackbook/res/layout/place_item.xml
deleted file mode 100644
index cbc139e42..000000000
--- a/examples/Hackbook/res/layout/place_item.xml
+++ /dev/null
@@ -1,24 +0,0 @@
-<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:padding="6dip"
-    android:layout_height="?android:attr/listPreferredItemHeight"
-    android:id="@+id/friend_item">
-    <TextView
-        android:id="@+id/place_name"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_alignParentRight="true"
-        android:layout_alignParentTop="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:gravity="center_vertical" />
-    <TextView
-        android:id="@+id/place_location"
-        android:layout_width="fill_parent"
-        android:layout_height="wrap_content"
-        android:layout_below="@+id/place_name"
-        android:layout_alignParentBottom="true"
-        android:layout_alignParentRight="true"
-        android:layout_alignWithParentIfMissing="true"
-        android:singleLine="true"
-        android:ellipsize="marquee" />
-</RelativeLayout>
diff --git a/examples/Hackbook/res/layout/places_list.xml b/examples/Hackbook/res/layout/places_list.xml
deleted file mode 100644
index f63bb2884..000000000
--- a/examples/Hackbook/res/layout/places_list.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <ListView
-        android:id="@+id/places_list"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
- </LinearLayout>
diff --git a/examples/Hackbook/res/layout/splash.xml b/examples/Hackbook/res/layout/splash.xml
deleted file mode 100644
index 211860639..000000000
--- a/examples/Hackbook/res/layout/splash.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<ImageView android:id="@+id/imageView1" xmlns:android="http://schemas.android.com/apk/res/android"
-    android:src="@drawable/splash"
-    android:scaleType="fitXY"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent" />
diff --git a/examples/Hackbook/res/layout/token_refresh.xml b/examples/Hackbook/res/layout/token_refresh.xml
deleted file mode 100644
index 811cd598a..000000000
--- a/examples/Hackbook/res/layout/token_refresh.xml
+++ /dev/null
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/tokenLabel"
-        android:text="@string/access_token_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <EditText
-        android:id="@+id/tokenEdit"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:editable="false" />
-    <TextView
-        android:id="@+id/tokenExpiresLabel"
-        android:text="@string/access_token_expires_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <EditText
-        android:id="@+id/tokenExpiresEdit"
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:editable="false" />
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/refresh_button"
-            android:text="@string/refresh_button"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <TextView
-        android:id="@+id/usefulTip"
-        android:text="@string/refresh_token_tip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/update_post_response.xml b/examples/Hackbook/res/layout/update_post_response.xml
deleted file mode 100644
index 2a0bd90a6..000000000
--- a/examples/Hackbook/res/layout/update_post_response.xml
+++ /dev/null
@@ -1,67 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/apiOutputLabel"
-        android:text="@string/api_response"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="140dp"
-        android:layout_width="fill_parent">
-        <TextView android:id="@+id/apiOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:background="@color/grey" />
-    </ScrollView>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/view_post_button"
-            android:text="@string/view_post"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-        <Button
-            android:id="@+id/delete_post_button"
-            android:text="@string/delete_post"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <View
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <TextView
-        android:id="@+id/usefulTip"
-        android:text="@string/post_tip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/examples/Hackbook/res/layout/upload_photo_response.xml b/examples/Hackbook/res/layout/upload_photo_response.xml
deleted file mode 100644
index 3b8bd7743..000000000
--- a/examples/Hackbook/res/layout/upload_photo_response.xml
+++ /dev/null
@@ -1,71 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:background="@color/black">
-    <TextView
-        android:id="@+id/apiOutputLabel"
-        android:text="@string/api_response"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-    <ScrollView
-        android:id="@+id/ScrollView01"
-        android:layout_height="wrap_content"
-        android:layout_width="fill_parent"
-        android:paddingBottom="3dp">
-        <TextView android:id="@+id/apiOutput"
-            android:textColor="@color/white"
-            android:layout_width="fill_parent"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingLeft="3dp"
-            android:background="@color/grey" />
-    </ScrollView>
-    <View
-         android:paddingTop="3dp"
-         android:layout_width="fill_parent"
-         android:layout_height="2dip"
-         android:background="@color/grey" />
-    <LinearLayout
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content">
-        <Button
-            android:id="@+id/view_photo_button"
-            android:text="@string/view_photo"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-        <Button
-            android:id="@+id/tag_photo_button"
-            android:text="@string/tag_photo"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:padding="10dp" />
-    </LinearLayout>
-    <ImageView
-            android:id="@+id/uploadedPhoto"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:paddingTop="3dp"
-            android:paddingBottom="3dp" />
-    <TextView
-        android:id="@+id/tip_label"
-        android:text="@string/tip_label"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="3dp"
-        android:paddingLeft="3dp" />
-
-    <TextView
-        android:id="@+id/usefulTip"
-        android:textColor="@color/white"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:paddingTop="5dp"
-        android:paddingLeft="3dp" />
-</LinearLayout>
diff --git a/examples/Hackbook/res/values/colors.xml b/examples/Hackbook/res/values/colors.xml
deleted file mode 100644
index cb999e5cc..000000000
--- a/examples/Hackbook/res/values/colors.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <color name="white">#ffffff</color>
-    <color name="black">#000000</color>
-    <color name="green">#23cf34</color>
-    <color name="orange">#E47833</color>
-    <color name="lite_blue">#4E78A0</color>
-    <color name="blue">#0000FF</color>
-    <color name="grey">#FF909090</color>
-</resources>
\ No newline at end of file
diff --git a/examples/Hackbook/res/values/strings.xml b/examples/Hackbook/res/values/strings.xml
deleted file mode 100644
index a2aeda13e..000000000
--- a/examples/Hackbook/res/values/strings.xml
+++ /dev/null
@@ -1,88 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">Hackbook for Android</string>
-    <string name="app_desc">Checkout out Hackbook for Android to learn how you can make your android apps social using Facebook Platform.</string>
-    <string name="app_action">I am using the Hackbook for Android</string>
-    <string name="request_message">Learn how to make your android apps social.</string>
-    <string name="request">Request!</string>
-    <string name="upload">Upload Photo</string><string name="post">Wall Post!</string>
-    <string name="delete">Delete Post</string>
-    <string name="no_login">Graph API Explorer</string>
-    <string name="get_permissions">Get Permissions</string>
-    <string name="access_token">Access Token:</string>
-    <string name="graph_domain">https://graph.facebook.com/</string>
-    <string name="submit">Submit</string>
-    <string name="label_output">Output:</string>
-    <string name="show_metadata">Show metadata</string>
-    <string name="show_picture">Show picture</string>
-    <string name="view_url">URL</string>
-    <string name="target_url">Target URL:</string>
-    <string name="exception">Exception: </string>
-    <string name="tip_label">Tip:</string>
-    <string name="error">Error</string>
-    <string name="facebook_error">Facebook Error: </string>
-    <string name="api_response">Api Response:</string>
-    <string name="view_source">View Source</string>
-    <string name="view_post">View Post</string>
-    <string name="delete_post">Delete Post</string>
-    <string name="source_code">Source Code:</string>
-    <string name="please_wait">Please wait...</string>
-    <string name="view_photo">View Photo</string>
-    <string name="hide_photo">Hide Photo</string>
-    <string name="tag_photo">Tag Photo</string>
-    <string name="graph_button">Graph API</string>
-    <string name="fql_button">FQL Query</string>
-    <string name="source_tag">Source tag:</string>
-    <string name="permission_source_tag">Source tag: \"perms_tag\"</string>
-    <string name="Graph_FQL_title">Graph API or FQL Query?</string>
-    <string name="Graph_FQL_msg">Get friends using Graph or FQL Query?\n\nWith FQL query you can sort the list by names, whereas with Graph list will be ordered by UID and can\'t be changed.</string>
-    <string name="can_post_on_wall_title">Post on friend\'s wall</string>
-    <string name="can_post_on_wall">Friends list fetched. You can post on friend\'s wall by clicking on the item.</string>
-    <string name="ok">OK</string>
-    <string name="post_on_wall_title">Post on Wall?</string>
-    <string name="post_on_wall">Would you like to post on %1$s\'s wall</string>
-    <string name="yes">Yes</string>
-    <string name="no">No</string>
-    <string name="save">Save</string>
-    <string name="reset">Reset</string>
-    <string  name="get_fields">Get Fields</string>
-    <string name="fields">Fields</string>
-    <string name="connections">Connections</string>
-    <string  name="checkin">Check-in</string>
-    <string name="cancel">Cancel</string>
-    <string name="user">User Data</string>
-    <string name="friend">Friends Data</string>
-    <string name="extended">Extended</string>
-    <string name="gallery_remote_title">Upload from gallery or remote?</string>
-    <string name="gallery_remote_msg">Upload picture from phone\' gallery or remote server?</string>
-    <string name="gallery_button">Gallery</string>
-    <string name="remote_button">Remote</string>
-    <string name="get_location">Get Location?</string>
-    <string name="get_default_or_new_location">Get current location or use Times Square as the location?</string>
-    <string name="current_location_button">Current Location</string>
-    <string name="fetching_current_permissions">Fetching current permissions...</string>
-    <string name="explorer_message">Also, checkout the web-version of the <a href="http://developers.facebook.com/tools/explorer">Graph API Explorer tool</a></string>
-    <string name="nearby_places">Fetching nearby places...</string>
-    <string name="times_square_button">Times Square</string>
-    <string name="check_in_title">Check-in?</string>
-    <string name="permissions">Permissions</string>
-    <string name="back_parent">Back to parent</string>
-    <string name="fields_and_connections">Fields \u0026 Connections</string>
-    <string name="permissions_request">Select Permissions:</string>
-    <string name="permission_detail">Checkout <a href="https://developers.facebook.com/docs/authentication/permissions/">permissions reference doc</a></string>
-    <string name="fetching_location">Fetching Location...</string>
-    <string name="check_in_at">Would you like to check-in at %1$s?</string>
-    <string name="post_tip">\'read_stream\' permission is required to view and delete the post.\n\nUse SDK dialogs to publish stories or post on friends wall. <a href="https://developers.facebook.com/docs/reference/dialogs">More info</a>\n\n<a href="https://developers.facebook.com/docs/reference/api/Comment">Like and Comment on a post</a></string>
-    <string name="photo_tip">Photos are by default uploaded to the app\'s album. Specify album_id to upload to specific album. E.g. https://graph.facebook.com/{album_id}/photos.\n\nMore Info: https://developers.facebook.com/docs/reference/api/photo</string>
-    <string name="fqlquery">Enter FQL Query:</string>
-    <string name="enable_gps_title">Enable GPS</string>
-    <string name="enable_gps">Please enable GPS to get nearby places and check-in</string>
-    <string name="gps_settings">GPS Settings</string>
-    <string name="refresh_token_title">Refresh Token</string>
-    <string name="refresh_button">Refresh</string>
-    <string name="refresh_button_pending">Refreshing…</string>
-    <string name="refresh_token_tip">In most cases the access token should be refreshed silently when the application is running (for example see Hackbook onResume method).</string>
-    <string name="refresh_token_binding_error">Binding to the Facebook Android Application failed (is it installed?).</string>
-    <string name="access_token_label">Current access token:</string>
-    <string name="access_token_expires_label">Token expires at:</string>
-</resources>
diff --git a/examples/Hackbook/src/com/facebook/android/BaseDialogListener.java b/examples/Hackbook/src/com/facebook/android/BaseDialogListener.java
deleted file mode 100644
index dbd5b3360..000000000
--- a/examples/Hackbook/src/com/facebook/android/BaseDialogListener.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.facebook.android;
-
-import com.facebook.android.Facebook.DialogListener;
-
-/**
- * Skeleton base class for RequestListeners, providing default error handling.
- * Applications should handle these error conditions.
- */
-public abstract class BaseDialogListener implements DialogListener {
-
-    @Override
-    public void onFacebookError(FacebookError e) {
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onError(DialogError e) {
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onCancel() {
-    }
-
-}
\ No newline at end of file
diff --git a/examples/Hackbook/src/com/facebook/android/BaseRequestListener.java b/examples/Hackbook/src/com/facebook/android/BaseRequestListener.java
deleted file mode 100644
index 0e7809f07..000000000
--- a/examples/Hackbook/src/com/facebook/android/BaseRequestListener.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.facebook.android;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import android.util.Log;
-
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-/**
- * Skeleton base class for RequestListeners, providing default error handling.
- * Applications should handle these error conditions.
- */
-public abstract class BaseRequestListener implements RequestListener {
-
-    @Override
-    public void onFacebookError(FacebookError e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onFileNotFoundException(FileNotFoundException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onIOException(IOException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    @Override
-    public void onMalformedURLException(MalformedURLException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/FQLQuery.java b/examples/Hackbook/src/com/facebook/android/FQLQuery.java
deleted file mode 100644
index 1c2e92b3c..000000000
--- a/examples/Hackbook/src/com/facebook/android/FQLQuery.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.facebook.android;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.os.Bundle;
-import android.os.Handler;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-public class FQLQuery extends Dialog {
-
-    private EditText mFQLQuery;
-    private TextView mFQLOutput;
-    private Button mSubmitButton;
-    private Activity activity;
-    private Handler mHandler;
-    private ProgressDialog dialog;
-
-    public FQLQuery(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(R.string.fqlquery);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.fql_query);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mFQLQuery = (EditText) findViewById(R.id.fqlquery);
-        mFQLOutput = (TextView) findViewById(R.id.fqlOutput);
-        mSubmitButton = (Button) findViewById(R.id.submit_button);
-
-        mSubmitButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                ((InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE))
-                        .hideSoftInputFromWindow(mFQLQuery.getWindowToken(), 0);
-                dialog = ProgressDialog.show(FQLQuery.this.activity, "",
-                        FQLQuery.this.activity.getString(R.string.please_wait), true, true);
-                /*
-                 * Source tag: fql_query_tag
-                 */
-                String query = mFQLQuery.getText().toString();
-                Bundle params = new Bundle();
-                params.putString("method", "fql.query");
-                params.putString("query", query);
-                Utility.mAsyncRunner.request(null, params, new FQLRequestListener());
-            }
-        });
-    }
-
-    public class FQLRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            /*
-             * Output can be a JSONArray or a JSONObject.
-             * Try JSONArray and if there's a JSONException, parse to JSONObject
-             */
-            try {
-                JSONArray json = new JSONArray(response);
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                try {
-                    /*
-                     * JSONObject probably indicates there was some error
-                     * Display that error, but for end user you should parse the
-                     * error and show appropriate message
-                     */
-                    JSONObject json = new JSONObject(response);
-                    setText(json.toString(2));
-                } catch (JSONException e1) {
-                    setText(activity.getString(R.string.exception) + e1.getMessage());
-                }
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mFQLOutput.setText(txt);
-                mFQLOutput.setVisibility(View.VISIBLE);
-            }
-        });
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java b/examples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java
deleted file mode 100644
index 9308301d4..000000000
--- a/examples/Hackbook/src/com/facebook/android/FieldsConnectionsDialog.java
+++ /dev/null
@@ -1,305 +0,0 @@
-package com.facebook.android;
-
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Vector;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Dialog;
-import android.os.Bundle;
-import android.text.SpannableString;
-import android.text.style.UnderlineSpan;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.ArrayAdapter;
-import android.widget.BaseAdapter;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.CompoundButton.OnCheckedChangeListener;
-import android.widget.ListView;
-import android.widget.TabHost;
-import android.widget.TabHost.TabSpec;
-import android.widget.TextView;
-import android.widget.Toast;
-
-public class FieldsConnectionsDialog extends Dialog {
-
-    private final static int TAB_HEIGHT = 50;
-
-    private Button mGetFieldsButton;
-    private ListView fieldsList, connectionsList;
-    private BaseAdapter fieldsAdapter, connectionsAdapter;
-
-    private GraphExplorer explorerActivity;
-
-    protected Vector<String> fieldsVector;
-    private ArrayList<JSONObject> fieldsArray;
-    private ArrayList<String> connectionsArray;
-
-    public FieldsConnectionsDialog(GraphExplorer explorerActivity, JSONObject metadata) {
-        super(explorerActivity);
-        this.explorerActivity = explorerActivity;
-
-        /*
-         * Sort the fields and connections
-         */
-        try {
-            sortFields(metadata.getJSONArray("fields"));
-            sortConnections(metadata.getJSONObject("connections").names());
-        } catch (JSONException e) {
-            Toast.makeText(explorerActivity.getBaseContext(),
-                    "Fields/Connections could not be fetched.", Toast.LENGTH_SHORT).show();
-        }
-
-        setTitle(explorerActivity.getString(R.string.fields_and_connections));
-        fieldsVector = new Vector<String>();
-    }
-
-    /*
-     * Sort fields which are returned as JSONObject in the JSONArray
-     */
-    public void sortFields(JSONArray jsonFieldsArray) {
-        this.fieldsArray = new ArrayList<JSONObject>(jsonFieldsArray.length());
-        for (int i = 0; i < jsonFieldsArray.length(); i++) {
-            try {
-                this.fieldsArray.add(jsonFieldsArray.getJSONObject(i));
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-
-        Collections.sort(this.fieldsArray, new Comparator<JSONObject>() {
-            @Override
-            public int compare(JSONObject object1, JSONObject object2) {
-                try {
-                    return object1.getString("name").compareToIgnoreCase(object2.getString("name"));
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-                return 0;
-            }
-        });
-    }
-
-    /*
-     * Sort the Connections returned in the JSONArray
-     */
-    public void sortConnections(JSONArray jsonConnectionsArray) {
-        this.connectionsArray = new ArrayList<String>(jsonConnectionsArray.length());
-        for (int i = 0; i < jsonConnectionsArray.length(); i++) {
-            try {
-                this.connectionsArray.add(jsonConnectionsArray.get(i).toString());
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        }
-        Collections.sort(this.connectionsArray);
-    }
-
-    /*
-     * Layout the dialog
-     */
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.fields_connections_list);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        fieldsList = (ListView) findViewById(R.id.fields_list);
-        connectionsList = (ListView) findViewById(R.id.connections_list);
-
-        fieldsAdapter = new FieldsListAdapter();
-        if (this.fieldsArray == null) {
-            fieldsList.setAdapter(new ArrayAdapter<String>(explorerActivity,
-                    android.R.layout.simple_list_item_1, new String[] { "No fields available" }));
-        } else {
-            fieldsList.setAdapter(fieldsAdapter);
-        }
-
-        connectionsAdapter = new ConnectionsListAdapter();
-        if (this.connectionsArray == null) {
-            connectionsList.setAdapter(new ArrayAdapter<String>(explorerActivity,
-                    android.R.layout.simple_list_item_1,
-                    new String[] { "No connections available" }));
-        } else {
-            connectionsList.setAdapter(connectionsAdapter);
-        }
-
-        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
-        tabHost.setup();
-
-        TabSpec spec1 = tabHost.newTabSpec("Tab 1");
-        spec1.setIndicator(explorerActivity.getString(R.string.fields));
-        spec1.setContent(R.id.fields_layout);
-
-        TabSpec spec2 = tabHost.newTabSpec("Tab 2");
-        spec2.setIndicator(explorerActivity.getString(R.string.connections));
-        spec2.setContent(R.id.connections_list);
-
-        tabHost.addTab(spec1);
-        tabHost.addTab(spec2);
-        tabHost.setCurrentTab(0);
-        tabHost.getTabWidget().getChildAt(0).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(1).getLayoutParams().height = TAB_HEIGHT;
-
-        mGetFieldsButton = (Button) findViewById(R.id.get_fields_button);
-        mGetFieldsButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source Tag:
-                 */
-                FieldsConnectionsDialog.this.dismiss();
-                if (!fieldsVector.isEmpty()) {
-                    explorerActivity.getFields(fieldsVector);
-                } else {
-                    Toast.makeText(explorerActivity.getBaseContext(), "No Fields selected.",
-                            Toast.LENGTH_SHORT).show();
-                }
-            }
-        });
-
-        connectionsList.setOnItemClickListener(new OnItemClickListener() {
-            @Override
-            public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-                FieldsConnectionsDialog.this.dismiss();
-                explorerActivity.getConnection(connectionsArray.get(position));
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class FieldsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        boolean[] isChecked;
-
-        public FieldsListAdapter() {
-            mInflater = LayoutInflater.from(explorerActivity.getBaseContext());
-            isChecked = new boolean[fieldsArray.size()];
-        }
-
-        @Override
-        public int getCount() {
-            return fieldsArray.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(final int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            ViewHolder holder;
-            JSONObject fieldObject = null;
-            fieldObject = fieldsArray.get(position);
-
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.fields_item, null);
-                holder = new ViewHolder();
-                holder.checkbox = (CheckBox) hView.findViewById(R.id.fields_checkbox);
-                holder.fieldsInfo = (TextView) hView.findViewById(R.id.fields_info);
-                hView.setTag(holder);
-            } else {
-                holder = (ViewHolder) hView.getTag();
-            }
-            try {
-                holder.checkbox.setText(fieldObject.getString("name"));
-            } catch (JSONException e) {
-                holder.checkbox.setText("");
-            }
-            try {
-                holder.fieldsInfo.setText(fieldObject.getString("description"));
-            } catch (JSONException e) {
-                holder.fieldsInfo.setText("");
-            }
-            holder.checkbox.setId(position);
-            holder.checkbox.setChecked(isChecked[position]);
-            holder.checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
-                @Override
-                public void onCheckedChanged(CompoundButton button, boolean checked) {
-                    isChecked[button.getId()] = checked;
-                    String field = button.getText().toString();
-                    if (checked) {
-                        fieldsVector.add(field);
-                    } else if (fieldsVector.contains(field)) {
-                        fieldsVector.remove(field);
-                    }
-                }
-            });
-
-            return hView;
-        }
-    }
-
-    class ViewHolder {
-        CheckBox checkbox;
-        TextView fieldsInfo;
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class ConnectionsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-
-        public ConnectionsListAdapter() {
-            mInflater = LayoutInflater.from(explorerActivity.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return connectionsArray.size();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            View hView = convertView;
-            TextView connection;
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.connection_item, null);
-                connection = (TextView) hView.findViewById(R.id.connection_name);
-                hView.setTag(connection);
-            } else {
-                connection = (TextView) hView.getTag();
-            }
-            SpannableString name;
-            name = new SpannableString(connectionsArray.get(position));
-            name.setSpan(new UnderlineSpan(), 0, name.length(), 0);
-            connection.setText(name);
-            return hView;
-        }
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java b/examples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java
deleted file mode 100644
index b2bbd046c..000000000
--- a/examples/Hackbook/src/com/facebook/android/FriendsGetProfilePics.java
+++ /dev/null
@@ -1,110 +0,0 @@
-package com.facebook.android;
-
-import java.util.Hashtable;
-import java.util.Stack;
-
-import android.graphics.Bitmap;
-import android.os.AsyncTask;
-import android.widget.BaseAdapter;
-
-/*
- * Fetch friends profile pictures request via AsyncTask
- */
-public class FriendsGetProfilePics {
-
-    Hashtable<String, Bitmap> friendsImages;
-    Hashtable<String, String> positionRequested;
-    BaseAdapter listener;
-    int runningCount = 0;
-    Stack<ItemPair> queue;
-
-    /*
-     * 15 max async tasks at any given time.
-     */
-    final static int MAX_ALLOWED_TASKS = 15;
-
-    public FriendsGetProfilePics() {
-        friendsImages = new Hashtable<String, Bitmap>();
-        positionRequested = new Hashtable<String, String>();
-        queue = new Stack<ItemPair>();
-    }
-
-    /*
-     * Inform the listener when the image has been downloaded. listener is
-     * FriendsList here.
-     */
-    public void setListener(BaseAdapter listener) {
-        this.listener = listener;
-        reset();
-    }
-
-    public void reset() {
-        positionRequested.clear();
-        runningCount = 0;
-        queue.clear();
-    }
-
-    /*
-     * If the profile picture has already been downloaded and cached, return it
-     * else execute a new async task to fetch it - if total async tasks >15,
-     * queue the request.
-     */
-    public Bitmap getImage(String uid, String url) {
-        Bitmap image = friendsImages.get(uid);
-        if (image != null) {
-            return image;
-        }
-        if (!positionRequested.containsKey(uid)) {
-            positionRequested.put(uid, "");
-            if (runningCount >= MAX_ALLOWED_TASKS) {
-                queue.push(new ItemPair(uid, url));
-            } else {
-                runningCount++;
-                new GetProfilePicAsyncTask().execute(uid, url);
-            }
-        }
-        return null;
-    }
-
-    public void getNextImage() {
-        if (!queue.isEmpty()) {
-            ItemPair item = queue.pop();
-            new GetProfilePicAsyncTask().execute(item.uid, item.url);
-        }
-    }
-
-    /*
-     * Start a AsyncTask to fetch the request
-     */
-    private class GetProfilePicAsyncTask extends AsyncTask<Object, Void, Bitmap> {
-        String uid;
-
-        @Override
-        protected Bitmap doInBackground(Object... params) {
-            this.uid = (String) params[0];
-            String url = (String) params[1];
-            return Utility.getBitmap(url);
-        }
-
-        @Override
-        protected void onPostExecute(Bitmap result) {
-            runningCount--;
-            if (result != null) {
-                friendsImages.put(uid, result);
-                listener.notifyDataSetChanged();
-                getNextImage();
-            }
-        }
-    }
-
-    class ItemPair {
-        String uid;
-        String url;
-
-        public ItemPair(String uid, String url) {
-            this.uid = uid;
-            this.url = url;
-        }
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/FriendsList.java b/examples/Hackbook/src/com/facebook/android/FriendsList.java
deleted file mode 100644
index 3c8d871eb..000000000
--- a/examples/Hackbook/src/com/facebook/android/FriendsList.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.facebook.android;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.content.DialogInterface;
-import android.os.Bundle;
-import android.os.Handler;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.BaseAdapter;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-public class FriendsList extends Activity implements OnItemClickListener {
-    private Handler mHandler;
-
-    protected ListView friendsList;
-    protected static JSONArray jsonArray;
-    protected String graph_or_fql;
-
-    /*
-     * Layout the friends' list
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-        setContentView(R.layout.friends_list);
-
-        Bundle extras = getIntent().getExtras();
-        String apiResponse = extras.getString("API_RESPONSE");
-        graph_or_fql = extras.getString("METHOD");
-        try {
-            if (graph_or_fql.equals("graph")) {
-                jsonArray = new JSONObject(apiResponse).getJSONArray("data");
-            } else {
-                jsonArray = new JSONArray(apiResponse);
-            }
-        } catch (JSONException e) {
-            showToast("Error: " + e.getMessage());
-            return;
-        }
-        friendsList = (ListView) findViewById(R.id.friends_list);
-        friendsList.setOnItemClickListener(this);
-        friendsList.setAdapter(new FriendListAdapter(this));
-
-        showToast(getString(R.string.can_post_on_wall));
-    }
-
-    /*
-     * Clicking on a friend should popup a dialog for user to post on friend's
-     * wall.
-     */
-    @Override
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        try {
-            final long friendId;
-            if (graph_or_fql.equals("graph")) {
-                friendId = jsonArray.getJSONObject(position).getLong("id");
-            } else {
-                friendId = jsonArray.getJSONObject(position).getLong("uid");
-            }
-            String name = jsonArray.getJSONObject(position).getString("name");
-
-            new AlertDialog.Builder(this).setTitle(R.string.post_on_wall_title)
-                    .setMessage(String.format(getString(R.string.post_on_wall), name))
-                    .setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {
-                        @Override
-                        public void onClick(DialogInterface dialog, int which) {
-                            Bundle params = new Bundle();
-                            /*
-                             * Source Tag: friend_wall_tag To write on a friend's wall, 
-                             * provide friend's UID in the 'to' parameter.
-                             * More info on feed dialog:
-                             * https://developers.facebook.com/docs/reference/dialogs/feed/
-                             */
-                            params.putString("to", String.valueOf(friendId));
-                            params.putString("caption", getString(R.string.app_name));
-                            params.putString("description", getString(R.string.app_desc));
-                            params.putString("picture", Utility.HACK_ICON_URL);
-                            params.putString("name", getString(R.string.app_action));
-                            Utility.mFacebook.dialog(FriendsList.this, "feed", params,
-                                    new PostDialogListener());
-                        }
-
-                    }).setNegativeButton(R.string.no, null).show();
-        } catch (JSONException e) {
-            showToast("Error: " + e.getMessage());
-        }
-    }
-
-    /*
-     * Callback after the message has been posted on friend's wall.
-     */
-    public class PostDialogListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                showToast("Message posted on the wall.");
-            } else {
-                showToast("No message posted on the wall.");
-            }
-        }
-    }
-
-    public void showToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast toast = Toast.makeText(FriendsList.this, msg, Toast.LENGTH_LONG);
-                toast.show();
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class FriendListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        FriendsList friendsList;
-
-        public FriendListAdapter(FriendsList friendsList) {
-            this.friendsList = friendsList;
-            if (Utility.model == null) {
-                Utility.model = new FriendsGetProfilePics();
-            }
-            Utility.model.setListener(this);
-            mInflater = LayoutInflater.from(friendsList.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return jsonArray.length();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            JSONObject jsonObject = null;
-            try {
-                jsonObject = jsonArray.getJSONObject(position);
-            } catch (JSONException e1) {
-                // TODO Auto-generated catch block
-                e1.printStackTrace();
-            }
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.friend_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.profile_pic = (ImageView) hView.findViewById(R.id.profile_pic);
-                holder.name = (TextView) hView.findViewById(R.id.name);
-                holder.info = (TextView) hView.findViewById(R.id.info);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-            try {
-                if (graph_or_fql.equals("graph")) {
-                    holder.profile_pic.setImageBitmap(Utility.model.getImage(
-                            jsonObject.getString("id"), jsonObject.getString("picture")));
-                } else {
-                    holder.profile_pic.setImageBitmap(Utility.model.getImage(
-                            jsonObject.getString("uid"), jsonObject.getString("pic_square")));
-                }
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                holder.name.setText(jsonObject.getString("name"));
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                if (graph_or_fql.equals("graph")) {
-                    holder.info.setText(jsonObject.getJSONObject("location").getString("name"));
-                } else {
-                    JSONObject location = jsonObject.getJSONObject("current_location");
-                    holder.info.setText(location.getString("city") + ", "
-                            + location.getString("state"));
-                }
-
-            } catch (JSONException e) {
-                holder.info.setText("");
-            }
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        ImageView profile_pic;
-        TextView name;
-        TextView info;
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/GraphExplorer.java b/examples/Hackbook/src/com/facebook/android/GraphExplorer.java
deleted file mode 100644
index 094ab738d..000000000
--- a/examples/Hackbook/src/com/facebook/android/GraphExplorer.java
+++ /dev/null
@@ -1,359 +0,0 @@
-package com.facebook.android;
-
-/*
- * The me, delete and back_parent buttons are downloaded from http://icongal.com/
- */
-
-import java.util.Iterator;
-import java.util.Vector;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.TextUtils;
-import android.text.util.Linkify;
-import android.text.util.Linkify.TransformFilter;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.inputmethod.InputMethodManager;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.ScrollView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-public class GraphExplorer extends Activity {
-    private Button mSubmitButton, mViewURLButton;
-    private Button mGetPermissionsButton;
-    private Button mTextDeleteButton, mMeButton;
-    private Button mFieldsConnectionsButton, mBackParentButton;
-    private TextView mOutput;
-    private EditText mInputId;
-    private Bundle params;
-    private String url, mParentObjectId;
-    private ProgressDialog dialog;
-    private String rootString;
-    private ScrollView mScrollView;
-    private Handler mHandler;
-    private final static String BASE_GRAPH_URL = "https://graph.facebook.com";
-
-    private JSONObject metadataObject;
-
-    /*
-     * Layout the Graph Explorer
-     */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.graph_explorer);
-
-        url = BASE_GRAPH_URL; // Base URL
-
-        mInputId = (EditText) findViewById(R.id.inputId);
-        mOutput = (TextView) findViewById(R.id.output);
-        mSubmitButton = (Button) findViewById(R.id.submitButton);
-        mViewURLButton = (Button) findViewById(R.id.viewURLButton);
-        mGetPermissionsButton = (Button) findViewById(R.id.accessTokenButton);
-        mFieldsConnectionsButton = (Button) findViewById(R.id.fieldsAndConnectionsButton);
-        mBackParentButton = (Button) findViewById(R.id.backParentButton);
-
-        mScrollView = (ScrollView) findViewById(R.id.ScrollView01);
-
-        mTextDeleteButton = (Button) findViewById(R.id.textDeleteButton);
-        mMeButton = (Button) findViewById(R.id.meButton);
-        if (Utility.mFacebook.isSessionValid()) {
-            mMeButton.setVisibility(View.VISIBLE);
-        }
-
-        params = new Bundle();
-        mSubmitButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-
-                ((InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE))
-                        .hideSoftInputFromWindow(mInputId.getWindowToken(), 0);
-
-                // Prepare the URL to be shown on 'View URL' click action. This
-                // is not used by the SDK
-                url = BASE_GRAPH_URL; // Base URL
-
-                /*
-                 * Source Tag: graph_explorer
-                 */
-                rootString = mInputId.getText().toString();
-                if (!TextUtils.isEmpty(rootString)) {
-                    dialog = ProgressDialog.show(GraphExplorer.this, "",
-                            getString(R.string.please_wait), true, true);
-                    params.putString("metadata", "1");
-                    Utility.mAsyncRunner.request(rootString, params, new graphApiRequestListener());
-                    url += "/" + rootString; // Relative Path provided by you
-                }
-
-            }
-        });
-
-        mViewURLButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                setText(url);
-                Linkify.addLinks(mOutput, Linkify.WEB_URLS);
-            }
-        });
-
-        mGetPermissionsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (Utility.mFacebook.isSessionValid()) {
-                    dialog = ProgressDialog.show(GraphExplorer.this, "",
-                            getString(R.string.fetching_current_permissions), true, true);
-                    Bundle params = new Bundle();
-                    params.putString("access_token", Utility.mFacebook.getAccessToken());
-                    Utility.mAsyncRunner.request("me/permissions", params,
-                            new permissionsRequestListener());
-                } else {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            }
-        });
-
-        mFieldsConnectionsButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                if (metadataObject == null) {
-                    makeToast("No fields, connections availalbe for this object.");
-                } else {
-                    new FieldsConnectionsDialog(GraphExplorer.this, metadataObject).show();
-                }
-            }
-        });
-
-        mTextDeleteButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                url = BASE_GRAPH_URL; // Base URL
-                mParentObjectId = "";
-                mInputId.setText("");
-                params.clear();
-                metadataObject = null;
-                setText("");
-                mBackParentButton.setVisibility(View.INVISIBLE);
-            }
-        });
-
-        mMeButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                mInputId.setText("me");
-                mSubmitButton.performClick();
-            }
-        });
-
-        mBackParentButton.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                mInputId.setText(mParentObjectId);
-                mParentObjectId = "";
-                mSubmitButton.performClick();
-            }
-        });
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if (Utility.mFacebook.isSessionValid()) {
-            mMeButton.setVisibility(View.VISIBLE);
-        }
-        if (Utility.objectID != null) {
-            mInputId.setText(Utility.objectID);
-            Utility.objectID = null;
-            mSubmitButton.performClick();
-        }
-    }
-
-    protected void processIntent(Intent incomingIntent) {
-        Uri intentUri = incomingIntent.getData();
-        if (intentUri == null) {
-            return;
-        }
-        String objectID = intentUri.getHost();
-        mInputId.setText(objectID);
-        mSubmitButton.performClick();
-    }
-
-    public void getConnection(String connection) {
-        mInputId.setText(rootString + "/" + connection);
-        mParentObjectId = rootString;
-        mSubmitButton.performClick();
-    }
-
-    public void getFields(Vector<String> fieldsVector) {
-        String fields = "";
-        int count = 0;
-        for (String field : fieldsVector) {
-            fields += field;
-            if (++count < fieldsVector.size()) {
-                fields += ",";
-            }
-        }
-        params.putString("fields", fields);
-        mSubmitButton.performClick();
-    }
-
-    /*
-     * Callback for the permission OAuth Dialog
-     */
-    public class permissionsRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            /*
-             * Clear the current permission list and repopulate with new
-             * permissions. This is used to mark assigned permission green and
-             * unclickable.
-             */
-            Utility.currentPermissions.clear();
-            try {
-                JSONObject jsonObject = new JSONObject(response).getJSONArray("data")
-                        .getJSONObject(0);
-                Iterator<?> iterator = jsonObject.keys();
-                String permission;
-                while (iterator.hasNext()) {
-                    permission = (String) iterator.next();
-                    Utility.currentPermissions.put(permission,
-                            String.valueOf(jsonObject.getInt(permission)));
-                }
-            } catch (JSONException e) {
-                makeToast("Permissions could not be fetched, none will be selected by default.");
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            makeToast("Permissions could not be fetched, none will be selected by default.");
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new PermissionsDialog(GraphExplorer.this).show();
-                }
-            });
-        }
-
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Utility.mFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    /*
-     * Callback after a given Graph API request is executed Get the response and
-     * show it.
-     */
-    public class graphApiRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            // access token is appended by Facebook object, hence params are
-            // added here after request is complete
-            if (!params.isEmpty()) {
-                url += "?" + Util.encodeUrl(params); // Params
-            }
-            metadataObject = null;
-            params.clear();
-            try {
-                JSONObject json = Util.parseJson(response);
-                if (json.has("metadata")) {
-                    metadataObject = json.getJSONObject("metadata");
-                    json.remove("metadata");
-                } else {
-                    metadataObject = null;
-                }
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                setText(e.getMessage());
-                e.printStackTrace();
-            } catch (FacebookError e) {
-                setText(e.getMessage());
-                e.printStackTrace();
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(error.getMessage());
-            params.clear();
-            metadataObject = null;
-        }
-
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-
-            /*
-             * A transform filter that simply returns just the text captured by
-             * the first regular expression group.
-             */
-            TransformFilter idFilter = new TransformFilter() {
-                @Override
-                public final String transformUrl(final Matcher match, String url) {
-                    return match.group(1);
-                }
-            };
-
-            @Override
-            public void run() {
-                mViewURLButton.setVisibility(
-                        TextUtils.isEmpty(txt) ? View.INVISIBLE : View.VISIBLE);
-                mFieldsConnectionsButton.setVisibility(TextUtils.isEmpty(txt) ? View.INVISIBLE
-                        : View.VISIBLE);
-                mOutput.setVisibility(TextUtils.isEmpty(txt) ? View.INVISIBLE : View.VISIBLE);
-                mBackParentButton.setVisibility(
-                        TextUtils.isEmpty(mParentObjectId) ? View.INVISIBLE : View.VISIBLE);
-
-                String convertedTxt = txt.replace("\\/", "/");
-                mOutput.setText(convertedTxt);
-                mScrollView.scrollTo(0, 0);
-
-                Linkify.addLinks(mOutput, Linkify.WEB_URLS);
-                /*
-                 * Linkify the object ids so they can be clicked. match pattern:
-                 * "id" : "objectid" (objectid can be int or int_int)
-                 */
-                Pattern pattern = Pattern.compile("\"id\": \"(\\d*_?\\d*)\"");
-                String scheme = "fbGraphEx://";
-                Linkify.addLinks(mOutput, pattern, scheme, null, idFilter);
-            }
-        });
-    }
-
-    private void makeToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast.makeText(GraphExplorer.this, msg, Toast.LENGTH_SHORT).show();
-            }
-        });
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/Hackbook.java b/examples/Hackbook/src/com/facebook/android/Hackbook.java
deleted file mode 100644
index 7b9b4e3d4..000000000
--- a/examples/Hackbook/src/com/facebook/android/Hackbook.java
+++ /dev/null
@@ -1,627 +0,0 @@
-/*
- * Copyright 2004 - Present Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.io.IOException;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.os.Handler;
-import android.provider.MediaStore;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.ArrayAdapter;
-import android.widget.BaseAdapter;
-import android.widget.ImageView;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-
-public class Hackbook extends Activity implements OnItemClickListener {
-
-    /*
-     * Your Facebook Application ID must be set before running this example See
-     * http://www.facebook.com/developers/createapp.php
-     */
-    public static final String APP_ID = "157111564357680";
-
-    private LoginButton mLoginButton;
-    private TextView mText;
-    private ImageView mUserPic;
-    private Handler mHandler;
-    ProgressDialog dialog;
-
-    final static int AUTHORIZE_ACTIVITY_RESULT_CODE = 0;
-    final static int PICK_EXISTING_PHOTO_RESULT_CODE = 1;
-
-    private String graph_or_fql;
-
-    private ListView list;
-    String[] main_items = { "Update Status", "App Requests", "Get Friends", "Upload Photo",
-            "Place Check-in", "Run FQL Query", "Graph API Explorer", "Token Refresh" };
-    String[] permissions = { "offline_access", "publish_stream", "user_photos", "publish_checkins",
-            "photo_upload" };
-
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (APP_ID == null) {
-            Util.showAlert(this, "Warning", "Facebook Applicaton ID must be "
-                    + "specified before running this example: see FbAPIs.java");
-            return;
-        }
-
-        setContentView(R.layout.main);
-        mHandler = new Handler();
-
-        mText = (TextView) Hackbook.this.findViewById(R.id.txt);
-        mUserPic = (ImageView) Hackbook.this.findViewById(R.id.user_pic);
-
-        // Create the Facebook Object using the app id.
-        Utility.mFacebook = new Facebook(APP_ID);
-        // Instantiate the asynrunner object for asynchronous api calls.
-        Utility.mAsyncRunner = new AsyncFacebookRunner(Utility.mFacebook);
-
-        mLoginButton = (LoginButton) findViewById(R.id.login);
-
-        // restore session if one exists
-        SessionStore.restore(Utility.mFacebook, this);
-        SessionEvents.addAuthListener(new FbAPIsAuthListener());
-        SessionEvents.addLogoutListener(new FbAPIsLogoutListener());
-
-        /*
-         * Source Tag: login_tag
-         */
-        mLoginButton.init(this, AUTHORIZE_ACTIVITY_RESULT_CODE, Utility.mFacebook, permissions);
-
-        if (Utility.mFacebook.isSessionValid()) {
-            requestUserData();
-        }
-
-        list = (ListView) findViewById(R.id.main_list);
-
-        list.setOnItemClickListener(this);
-        list.setAdapter(new ArrayAdapter<String>(this, R.layout.main_list_item, main_items));
-    }
-
-    @Override
-    public void onResume() {
-        super.onResume();
-        if(Utility.mFacebook != null) {
-            if (!Utility.mFacebook.isSessionValid()) {
-                mText.setText("You are logged out! ");
-                mUserPic.setImageBitmap(null);
-            } else {
-                Utility.mFacebook.extendAccessTokenIfNeeded(this, null);
-            }
-        }
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        switch (requestCode) {
-        /*
-         * if this is the activity result from authorization flow, do a call
-         * back to authorizeCallback Source Tag: login_tag
-         */
-            case AUTHORIZE_ACTIVITY_RESULT_CODE: {
-                Utility.mFacebook.authorizeCallback(requestCode, resultCode, data);
-                break;
-            }
-            /*
-             * if this is the result for a photo picker from the gallery, upload
-             * the image after scaling it. You can use the Utility.scaleImage()
-             * function for scaling
-             */
-            case PICK_EXISTING_PHOTO_RESULT_CODE: {
-                if (resultCode == Activity.RESULT_OK) {
-                    Uri photoUri = data.getData();
-                    if (photoUri != null) {
-                        Bundle params = new Bundle();
-                        try {
-                            params.putByteArray("photo",
-                                    Utility.scaleImage(getApplicationContext(), photoUri));
-                        } catch (IOException e) {
-                            e.printStackTrace();
-                        }
-                        params.putString("caption", "FbAPIs Sample App photo upload");
-                        Utility.mAsyncRunner.request("me/photos", params, "POST",
-                                new PhotoUploadListener(), null);
-                    } else {
-                        Toast.makeText(getApplicationContext(),
-                                "Error selecting image from the gallery.", Toast.LENGTH_SHORT)
-                                .show();
-                    }
-                } else {
-                    Toast.makeText(getApplicationContext(), "No image selected for upload.",
-                            Toast.LENGTH_SHORT).show();
-                }
-                break;
-            }
-        }
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        switch (position) {
-        /*
-         * Source Tag: update_status_tag Update user's status by invoking the
-         * feed dialog To post to a friend's wall, provide his uid in the 'to'
-         * parameter Refer to
-         * https://developers.facebook.com/docs/reference/dialogs/feed/ for more
-         * info.
-         */
-            case 0: {
-                Bundle params = new Bundle();
-                params.putString("caption", getString(R.string.app_name));
-                params.putString("description", getString(R.string.app_desc));
-                params.putString("picture", Utility.HACK_ICON_URL);
-                params.putString("name", getString(R.string.app_action));
-
-                Utility.mFacebook.dialog(Hackbook.this, "feed", params, new UpdateStatusListener());
-                String access_token = Utility.mFacebook.getAccessToken();
-                System.out.println(access_token);
-                break;
-            }
-
-            /*
-             * Source Tag: app_requests Send an app request to friends. If no
-             * friend is specified, the user will see a friend selector and will
-             * be able to select a maximum of 50 recipients. To send request to
-             * specific friend, provide the uid in the 'to' parameter Refer to
-             * https://developers.facebook.com/docs/reference/dialogs/requests/
-             * for more info.
-             */
-            case 1: {
-                Bundle params = new Bundle();
-                params.putString("message", getString(R.string.request_message));
-                Utility.mFacebook.dialog(Hackbook.this, "apprequests", params,
-                        new AppRequestsListener());
-                break;
-            }
-
-            /*
-             * Source Tag: friends_tag You can get friends using
-             * graph.facebook.com/me/friends, this returns the list sorted by
-             * UID OR using the friend table. With this you can sort the way you
-             * want it.
-             * Friend table - https://developers.facebook.com/docs/reference/fql/friend/
-             * User table - https://developers.facebook.com/docs/reference/fql/user/
-             */
-            case 2: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    dialog = ProgressDialog.show(Hackbook.this, "",
-                            getString(R.string.please_wait), true, true);
-                    new AlertDialog.Builder(this)
-                            .setTitle(R.string.Graph_FQL_title)
-                            .setMessage(R.string.Graph_FQL_msg)
-                            .setPositiveButton(R.string.graph_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            graph_or_fql = "graph";
-                                            Bundle params = new Bundle();
-                                            params.putString("fields", "name, picture, location");
-                                            Utility.mAsyncRunner.request("me/friends", params,
-                                                    new FriendsRequestListener());
-                                        }
-
-                                    })
-                            .setNegativeButton(R.string.fql_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            graph_or_fql = "fql";
-                                            String query = "select name, current_location, uid, pic_square from user where uid in (select uid2 from friend where uid1=me()) order by name";
-                                            Bundle params = new Bundle();
-                                            params.putString("method", "fql.query");
-                                            params.putString("query", query);
-                                            Utility.mAsyncRunner.request(null, params,
-                                                    new FriendsRequestListener());
-                                        }
-
-                                    }).setOnCancelListener(new DialogInterface.OnCancelListener() {
-                                @Override
-                                public void onCancel(DialogInterface d) {
-                                    dialog.dismiss();
-                                }
-                            }).show();
-                }
-                break;
-            }
-
-            /*
-             * Source Tag: upload_photo You can upload a photo from the media
-             * gallery or from a remote server How to upload photo:
-             * https://developers.facebook.com/blog/post/498/
-             */
-            case 3: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    dialog = ProgressDialog.show(Hackbook.this, "",
-                            getString(R.string.please_wait), true, true);
-                    new AlertDialog.Builder(this)
-                            .setTitle(R.string.gallery_remote_title)
-                            .setMessage(R.string.gallery_remote_msg)
-                            .setPositiveButton(R.string.gallery_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            Intent intent = new Intent(Intent.ACTION_PICK,
-                                                    (MediaStore.Images.Media.EXTERNAL_CONTENT_URI));
-                                            startActivityForResult(intent,
-                                                    PICK_EXISTING_PHOTO_RESULT_CODE);
-                                        }
-
-                                    })
-                            .setNegativeButton(R.string.remote_button,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            /*
-                                             * Source tag: upload_photo_tag
-                                             */
-                                            Bundle params = new Bundle();
-                                            params.putString("url",
-                                                    "http://www.facebook.com/images/devsite/iphone_connect_btn.jpg");
-                                            params.putString("caption",
-                                                    "FbAPIs Sample App photo upload");
-                                            Utility.mAsyncRunner.request("me/photos", params,
-                                                    "POST", new PhotoUploadListener(), null);
-                                        }
-
-                                    }).setOnCancelListener(new DialogInterface.OnCancelListener() {
-                                @Override
-                                public void onCancel(DialogInterface d) {
-                                    dialog.dismiss();
-                                }
-                            }).show();
-                }
-                break;
-            }
-
-            /*
-             * User can check-in to a place, you require publish_checkins
-             * permission for that. You can use the default Times Square
-             * location or fetch user's current location. Get user's checkins:
-             * https://developers.facebook.com/docs/reference/api/checkin/
-             */
-            case 4: {
-                final Intent myIntent = new Intent(getApplicationContext(), Places.class);
-
-                new AlertDialog.Builder(this)
-                        .setTitle(R.string.get_location)
-                        .setMessage(R.string.get_default_or_new_location)
-                        .setPositiveButton(R.string.current_location_button,
-                                new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialog, int which) {
-                                        myIntent.putExtra("LOCATION", "current");
-                                        startActivity(myIntent);
-                                    }
-                                })
-                        .setNegativeButton(R.string.times_square_button,
-                                new DialogInterface.OnClickListener() {
-                                    @Override
-                                    public void onClick(DialogInterface dialog, int which) {
-                                        myIntent.putExtra("LOCATION", "times_square");
-                                        startActivity(myIntent);
-                                    }
-
-                                }).show();
-                break;
-            }
-
-            case 5: {
-                if (!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    new FQLQuery(Hackbook.this).show();
-                }
-                break;
-            }
-            /*
-             * This is advanced feature where you can request new permissions
-             * Browser user's graph, his fields and connections. This is similar
-             * to the www version:
-             * http://developers.facebook.com/tools/explorer/
-             */
-            case 6: {
-                Intent myIntent = new Intent(getApplicationContext(), GraphExplorer.class);
-                if (Utility.mFacebook.isSessionValid()) {
-                    Utility.objectID = "me";
-                }
-                startActivity(myIntent);
-                break;
-            }
-
-            case 7: {
-                if(!Utility.mFacebook.isSessionValid()) {
-                    Util.showAlert(this, "Warning", "You must first log in.");
-                } else {
-                    new TokenRefreshDialog(Hackbook.this).show();
-                }
-            }
-        }
-    }
-
-    /*
-     * callback for the feed dialog which updates the profile status
-     */
-    public class UpdateStatusListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                new UpdateStatusResultDialog(Hackbook.this, "Update Status executed", values)
-                        .show();
-            } else {
-                Toast toast = Toast.makeText(getApplicationContext(), "No wall post made",
-                        Toast.LENGTH_SHORT);
-                toast.show();
-            }
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast toast = Toast.makeText(getApplicationContext(), "Update status cancelled",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-    }
-
-    /*
-     * callback for the apprequests dialog which sends an app request to user's
-     * friends.
-     */
-    public class AppRequestsListener extends BaseDialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            Toast toast = Toast.makeText(getApplicationContext(), "App request sent",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast toast = Toast.makeText(getApplicationContext(), "App request cancelled",
-                    Toast.LENGTH_SHORT);
-            toast.show();
-        }
-    }
-
-    /*
-     * callback after friends are fetched via me/friends or fql query.
-     */
-    public class FriendsRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            Intent myIntent = new Intent(getApplicationContext(), FriendsList.class);
-            myIntent.putExtra("API_RESPONSE", response);
-            myIntent.putExtra("METHOD", graph_or_fql);
-            startActivity(myIntent);
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_SHORT).show();
-        }
-    }
-
-    /*
-     * callback for the photo upload
-     */
-    public class PhotoUploadListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            dialog.dismiss();
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    new UploadPhotoResultDialog(Hackbook.this, "Upload Photo executed", response)
-                            .show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_LONG).show();
-        }
-    }
-
-    public class FQLRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    Toast.makeText(getApplicationContext(), "Response: " + response,
-                            Toast.LENGTH_LONG).show();
-                }
-            });
-        }
-
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(getApplicationContext(), "Facebook Error: " + error.getMessage(),
-                    Toast.LENGTH_LONG).show();
-        }
-    }
-
-    /*
-     * Callback for fetching current user's name, picture, uid.
-     */
-    public class UserRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            JSONObject jsonObject;
-            try {
-                jsonObject = new JSONObject(response);
-
-                final String picURL = jsonObject.getString("picture");
-                final String name = jsonObject.getString("name");
-                Utility.userUID = jsonObject.getString("id");
-
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mText.setText("Welcome " + name + "!");
-                        mUserPic.setImageBitmap(Utility.getBitmap(picURL));
-                    }
-                });
-
-            } catch (JSONException e) {
-                // TODO Auto-generated catch block
-                e.printStackTrace();
-            }
-        }
-
-    }
-
-    /*
-     * The Callback for notifying the application when authorization succeeds or
-     * fails.
-     */
-
-    public class FbAPIsAuthListener implements AuthListener {
-
-        @Override
-        public void onAuthSucceed() {
-            requestUserData();
-        }
-
-        @Override
-        public void onAuthFail(String error) {
-            mText.setText("Login Failed: " + error);
-        }
-    }
-
-    /*
-     * The Callback for notifying the application when log out starts and
-     * finishes.
-     */
-    public class FbAPIsLogoutListener implements LogoutListener {
-        @Override
-        public void onLogoutBegin() {
-            mText.setText("Logging out...");
-        }
-
-        @Override
-        public void onLogoutFinish() {
-            mText.setText("You have logged out! ");
-            mUserPic.setImageBitmap(null);
-        }
-    }
-
-    /*
-     * Request user name, and picture to show on the main screen.
-     */
-    public void requestUserData() {
-        mText.setText("Fetching user name, profile pic...");
-        Bundle params = new Bundle();
-        params.putString("fields", "name, picture");
-        Utility.mAsyncRunner.request("me", params, new UserRequestListener());
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class MainListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-
-        public MainListAdapter() {
-            mInflater = LayoutInflater.from(Hackbook.this.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return main_items.length;
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.main_list_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.main_list_item = (TextView) hView.findViewById(R.id.main_api_item);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-
-            holder.main_list_item.setText(main_items[position]);
-
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        TextView main_list_item;
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/IntentUriHandler.java b/examples/Hackbook/src/com/facebook/android/IntentUriHandler.java
deleted file mode 100644
index ac55c2136..000000000
--- a/examples/Hackbook/src/com/facebook/android/IntentUriHandler.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.facebook.android;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-
-/**
- * A transient activity which handles fbgraphex: URIs and passes those to the
- * GraphExplorer class This is used to linkify the Object IDs in the graph api
- * response
- */
-public class IntentUriHandler extends Activity {
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        Intent incomingIntent = getIntent();
-        if (incomingIntent != null) {
-            Uri intentUri = incomingIntent.getData();
-            if (intentUri != null) {
-                Utility.objectID = intentUri.getHost();
-                Intent graphIntent = new Intent(getApplicationContext(), GraphExplorer.class);
-                graphIntent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
-                startActivity(graphIntent);
-            }
-            finish();
-        }
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/LoginButton.java b/examples/Hackbook/src/com/facebook/android/LoginButton.java
deleted file mode 100644
index ae9b6bedb..000000000
--- a/examples/Hackbook/src/com/facebook/android/LoginButton.java
+++ /dev/null
@@ -1,151 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.Handler;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.ImageButton;
-
-import com.facebook.android.Facebook.DialogListener;
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-
-public class LoginButton extends ImageButton {
-
-    private Facebook mFb;
-    private Handler mHandler;
-    private SessionListener mSessionListener = new SessionListener();
-    private String[] mPermissions;
-    private Activity mActivity;
-    private int mActivityCode;
-
-    public LoginButton(Context context) {
-        super(context);
-    }
-
-    public LoginButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public LoginButton(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-
-    public void init(final Activity activity, final int activityCode, final Facebook fb) {
-        init(activity, activityCode, fb, new String[] {});
-    }
-
-    public void init(final Activity activity, final int activityCode, final Facebook fb,
-            final String[] permissions) {
-        mActivity = activity;
-        mActivityCode = activityCode;
-        mFb = fb;
-        mPermissions = permissions;
-        mHandler = new Handler();
-
-        setBackgroundColor(Color.TRANSPARENT);
-        setImageResource(fb.isSessionValid() ? R.drawable.logout_button : R.drawable.login_button);
-        drawableStateChanged();
-
-        SessionEvents.addAuthListener(mSessionListener);
-        SessionEvents.addLogoutListener(mSessionListener);
-        setOnClickListener(new ButtonOnClickListener());
-    }
-
-    private final class ButtonOnClickListener implements OnClickListener {
-        /*
-         * Source Tag: login_tag
-         */
-        @Override
-        public void onClick(View arg0) {
-            if (mFb.isSessionValid()) {
-                SessionEvents.onLogoutBegin();
-                AsyncFacebookRunner asyncRunner = new AsyncFacebookRunner(mFb);
-                asyncRunner.logout(getContext(), new LogoutRequestListener());
-            } else {
-                mFb.authorize(mActivity, mPermissions, mActivityCode, new LoginDialogListener());
-            }
-        }
-    }
-
-    private final class LoginDialogListener implements DialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            SessionEvents.onLoginSuccess();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-
-        @Override
-        public void onError(DialogError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-
-        @Override
-        public void onCancel() {
-            SessionEvents.onLoginError("Action Canceled");
-        }
-    }
-
-    private class LogoutRequestListener extends BaseRequestListener {
-        @Override
-        public void onComplete(String response, final Object state) {
-            /*
-             * callback should be run in the original thread, not the background
-             * thread
-             */
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    SessionEvents.onLogoutFinish();
-                }
-            });
-        }
-    }
-
-    private class SessionListener implements AuthListener, LogoutListener {
-
-        @Override
-        public void onAuthSucceed() {
-            setImageResource(R.drawable.logout_button);
-            SessionStore.save(mFb, getContext());
-        }
-
-        @Override
-        public void onAuthFail(String error) {
-        }
-
-        @Override
-        public void onLogoutBegin() {
-        }
-
-        @Override
-        public void onLogoutFinish() {
-            SessionStore.clear(getContext());
-            setImageResource(R.drawable.login_button);
-        }
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/PermissionsDialog.java b/examples/Hackbook/src/com/facebook/android/PermissionsDialog.java
deleted file mode 100644
index fa4edbbd8..000000000
--- a/examples/Hackbook/src/com/facebook/android/PermissionsDialog.java
+++ /dev/null
@@ -1,251 +0,0 @@
-package com.facebook.android;
-
-import java.util.Vector;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.text.method.LinkMovementMethod;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.BaseAdapter;
-import android.widget.Button;
-import android.widget.CheckBox;
-import android.widget.CompoundButton;
-import android.widget.CompoundButton.OnCheckedChangeListener;
-import android.widget.ListView;
-import android.widget.TabHost;
-import android.widget.TabHost.TabSpec;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import com.facebook.android.Facebook.DialogListener;
-
-public class PermissionsDialog extends Dialog {
-
-    private final static int TAB_HEIGHT = 50;
-
-    private Button mGetPermissions;
-    private TextView mPermissionDetails;
-
-    private Activity activity;
-
-    private ListView userPermissionsList, friendPermissionsList, extendedPermissionsList;
-
-    private BaseAdapter userPermissionsAdapter, friendPermissionsAdapter,
-            extendedPermissionAdapter;
-
-    protected Vector<String> reqPermVector;
-
-    String[] user_permissions = { "user_about_me", "user_activities", "user_birthday",
-            "user_checkins", "user_education_history", "user_events", "user_groups",
-            "user_hometown", "user_interests", "user_likes", "user_location", "user_notes",
-            "user_online_presence", "user_photos", "user_photo_video_tags", "user_relationships",
-            "user_relationship_details", "user_religion_politics", "user_status", "user_videos",
-            "user_website", "user_work_history" };
-
-    String[] friend_permissions = { "friends_about_me", "friends_activities", "friends_birthday",
-            "friends_checkins", "friends_education_history", "friends_events", "friends_groups",
-            "friends_hometown", "friends_interests", "friends_likes", "friends_location",
-            "friends_notes", "friends_online_presence", "friends_photos",
-            "friends_photo_video_tags", "friends_relationships", "friends_relationship_details",
-            "friends_religion_politics", "friends_status", "friends_videos", "friends_website",
-            "friends_work_history" };
-
-    String[] extended_permissions = { "ads_management", "create_event", "create_note", "email",
-            "export_stream", "manage_friendlists", "manage_groups", "manage_pages",
-            "offline_access", "publish_actions", "photo_upload", "publish_checkins",
-            "publish_stream", "read_friendlists", "read_insights", "read_mailbox", "read_requests",
-            "read_stream", "rsvp_event", "share_item", "status_update", "sms", "video_upload",
-            "xmpp_login" };
-
-    public PermissionsDialog(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(activity.getString(R.string.permissions_request));
-        reqPermVector = new Vector<String>();
-    }
-
-    /*
-     * Layout the permission dialog
-     */
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.permissions_list);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mPermissionDetails = (TextView) findViewById(R.id.permission_detail);
-        mPermissionDetails.setMovementMethod(LinkMovementMethod.getInstance());
-
-        userPermissionsList = (ListView) findViewById(R.id.user_permissions_list);
-        friendPermissionsList = (ListView) findViewById(R.id.friend_permissions_list);
-        extendedPermissionsList = (ListView) findViewById(R.id.extended_permissions_list);
-
-        userPermissionsAdapter = new PermissionsListAdapter(user_permissions);
-        userPermissionsList.setAdapter(userPermissionsAdapter);
-
-        friendPermissionsAdapter = new PermissionsListAdapter(friend_permissions);
-        friendPermissionsList.setAdapter(friendPermissionsAdapter);
-
-        extendedPermissionAdapter = new PermissionsListAdapter(extended_permissions);
-        extendedPermissionsList.setAdapter(extendedPermissionAdapter);
-
-        TabHost tabHost = (TabHost) findViewById(R.id.tabHost);
-        tabHost.setup();
-
-        TabSpec spec1 = tabHost.newTabSpec("Tab 1");
-        spec1.setIndicator(activity.getString(R.string.user));
-        spec1.setContent(R.id.user_permissions_list);
-
-        TabSpec spec2 = tabHost.newTabSpec("Tab 2");
-        spec2.setIndicator(activity.getString(R.string.friend));
-        spec2.setContent(R.id.friend_permissions_list);
-
-        TabSpec spec3 = tabHost.newTabSpec("Tab 3");
-        spec3.setIndicator(activity.getString(R.string.extended));
-        spec3.setContent(R.id.extended_permissions_list);
-
-        tabHost.addTab(spec1);
-        tabHost.addTab(spec2);
-        tabHost.addTab(spec3);
-        tabHost.setCurrentTab(0);
-        tabHost.getTabWidget().getChildAt(0).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(1).getLayoutParams().height = TAB_HEIGHT;
-        tabHost.getTabWidget().getChildAt(2).getLayoutParams().height = TAB_HEIGHT;
-
-        mGetPermissions = (Button) findViewById(R.id.get_permissions_button);
-
-        mGetPermissions.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source Tag: perms_tag Call authorize to get the new
-                 * permissions
-                 */
-                if (reqPermVector.isEmpty() && Utility.mFacebook.isSessionValid()) {
-                    Toast.makeText(activity.getBaseContext(), "No Permissions selected.",
-                            Toast.LENGTH_SHORT).show();
-                    PermissionsDialog.this.dismiss();
-                } else {
-                    String[] permissions = reqPermVector.toArray(new String[0]);
-                    Utility.mFacebook.authorize(activity, permissions, new LoginDialogListener());
-                }
-            }
-        });
-    }
-
-    /*
-     * Callback when user has authorized the app with the new permissions
-     */
-    private final class LoginDialogListener implements DialogListener {
-        @Override
-        public void onComplete(Bundle values) {
-            // Inform the parent loginlistener so it can update the user's
-            // profile pic and name on the home screen.
-            SessionEvents.onLoginSuccess();
-
-            Toast.makeText(activity.getBaseContext(), "New Permissions granted.",
-                    Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onFacebookError(FacebookError error) {
-            Toast.makeText(activity.getBaseContext(),
-                    "Facebook Error! No new permissions granted.", Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onError(DialogError error) {
-            Toast.makeText(activity.getBaseContext(), "Error! No new permissions granted.",
-                    Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-
-        @Override
-        public void onCancel() {
-            Toast.makeText(activity.getBaseContext(),
-                    "Action cancelled, No new permissions granted.", Toast.LENGTH_SHORT).show();
-            PermissionsDialog.this.dismiss();
-        }
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class PermissionsListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        String[] permissions;
-        boolean[] isChecked;
-
-        public PermissionsListAdapter(String[] permissions) {
-            this.permissions = permissions;
-            this.isChecked = new boolean[permissions.length];
-            mInflater = LayoutInflater.from(activity.getBaseContext());
-        }
-
-        @Override
-        public int getCount() {
-            return permissions.length;
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(final int position, View convertView, ViewGroup parent) {
-
-            View hView = convertView;
-            CheckBox checkbox;
-
-            if (hView == null) {
-                hView = mInflater.inflate(R.layout.permission_item, null);
-                checkbox = (CheckBox) hView.findViewById(R.id.permission_checkbox);
-                hView.setTag(checkbox);
-            } else {
-                checkbox = (CheckBox) hView.getTag();
-            }
-            checkbox.setText(this.permissions[position]);
-            checkbox.setId(position);
-            if (Utility.currentPermissions.containsKey(this.permissions[position])
-                    && Utility.currentPermissions.get(this.permissions[position]).equals("1")) {
-                checkbox.setTextColor(Color.GREEN);
-                checkbox.setChecked(true);
-                checkbox.setEnabled(false);
-                checkbox.setOnCheckedChangeListener(null);
-            } else {
-                checkbox.setTextColor(Color.WHITE);
-                checkbox.setChecked(this.isChecked[position]);
-                checkbox.setEnabled(true);
-                checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {
-                    @Override
-                    public void onCheckedChanged(CompoundButton button, boolean checked) {
-                        isChecked[button.getId()] = checked;
-                        if (checked) {
-                            reqPermVector.add(button.getText().toString());
-                        } else if (reqPermVector.contains(button.getText())) {
-                            reqPermVector.remove(button.getText());
-                        }
-                    }
-                });
-            }
-            return hView;
-        }
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/Places.java b/examples/Hackbook/src/com/facebook/android/Places.java
deleted file mode 100644
index 4d5e42a4c..000000000
--- a/examples/Hackbook/src/com/facebook/android/Places.java
+++ /dev/null
@@ -1,363 +0,0 @@
-package com.facebook.android;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.AlertDialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.location.Criteria;
-import android.location.Location;
-import android.location.LocationListener;
-import android.location.LocationManager;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.AdapterView;
-import android.widget.AdapterView.OnItemClickListener;
-import android.widget.BaseAdapter;
-import android.widget.ListView;
-import android.widget.TextView;
-import android.widget.Toast;
-
-public class Places extends Activity implements OnItemClickListener {
-    private Handler mHandler;
-    private JSONObject location;
-
-    protected ListView placesList;
-    protected LocationManager lm;
-    protected MyLocationListener locationListener;
-
-    protected static JSONArray jsonArray;
-    final static double TIMES_SQUARE_LAT = 40.756;
-    final static double TIMES_SQUARE_LON = -73.987;
-
-    protected ProgressDialog dialog;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-        location = new JSONObject();
-
-        setContentView(R.layout.places_list);
-
-        Bundle extras = getIntent().getExtras();
-        String default_or_new = extras.getString("LOCATION");
-        if (default_or_new.equals("times_square")) {
-            try {
-                location.put("latitude", new Double(TIMES_SQUARE_LAT));
-                location.put("longitude", new Double(TIMES_SQUARE_LON));
-            } catch (JSONException e) {
-            }
-            fetchPlaces();
-        } else {
-            getLocation();
-        }
-    }
-
-    public void getLocation() {
-        /*
-         * launch a new Thread to get new location
-         */
-        new Thread() {
-            @Override
-            public void run() {
-                Looper.prepare();
-                dialog = ProgressDialog.show(Places.this, "",
-                        getString(R.string.fetching_location), false, true,
-                        new DialogInterface.OnCancelListener() {
-                            @Override
-                            public void onCancel(DialogInterface dialog) {
-                                showToast("No location fetched.");
-                            }
-                        });
-
-                if (lm == null) {
-                    lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
-                }
-
-                if (locationListener == null) {
-                    locationListener = new MyLocationListener();
-                }
-
-                Criteria criteria = new Criteria();
-                criteria.setAccuracy(Criteria.ACCURACY_COARSE);
-                String provider = lm.getBestProvider(criteria, true);
-                if (provider != null && lm.isProviderEnabled(provider)) {
-                    lm.requestLocationUpdates(provider, 1, 0, locationListener,
-                            Looper.getMainLooper());
-                } else {
-                    /*
-                     * GPS not enabled, prompt user to enable GPS in the
-                     * Location menu
-                     */
-                    new AlertDialog.Builder(Places.this)
-                            .setTitle(R.string.enable_gps_title)
-                            .setMessage(getString(R.string.enable_gps))
-                            .setPositiveButton(R.string.gps_settings,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            startActivityForResult(
-                                                    new Intent(
-                                                            android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS),
-                                                    0);
-                                        }
-                                    })
-                            .setNegativeButton(R.string.cancel,
-                                    new DialogInterface.OnClickListener() {
-                                        @Override
-                                        public void onClick(DialogInterface dialog, int which) {
-                                            dialog.dismiss();
-                                            Places.this.finish();
-                                        }
-                                    }).show();
-                }
-                Looper.loop();
-            }
-        }.start();
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        /*
-         * User returning from the Location settings menu. try to fetch location
-         * again.
-         */
-        dialog.dismiss();
-        getLocation();
-    }
-
-    /*
-     * Fetch nearby places by providing the search type as 'place' within 1000
-     * mtrs of the provided lat & lon
-     */
-    private void fetchPlaces() {
-        if (!isFinishing()) {
-            dialog = ProgressDialog.show(Places.this, "", getString(R.string.nearby_places), true,
-                    true, new DialogInterface.OnCancelListener() {
-                        @Override
-                        public void onCancel(DialogInterface dialog) {
-                            showToast("No places fetched.");
-                        }
-                    });
-        }
-        /*
-         * Source tag: fetch_places_tag
-         */
-        Bundle params = new Bundle();
-        params.putString("type", "place");
-        try {
-            params.putString("center",
-                    location.getString("latitude") + "," + location.getString("longitude"));
-        } catch (JSONException e) {
-            showToast("No places fetched.");
-            return;
-        }
-        params.putString("distance", "1000");
-        Utility.mAsyncRunner.request("search", params, new placesRequestListener());
-    }
-
-    /*
-     * Callback after places are fetched.
-     */
-    public class placesRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            Log.d("Facebook-FbAPIs", "Got response: " + response);
-            dialog.dismiss();
-
-            try {
-                jsonArray = new JSONObject(response).getJSONArray("data");
-                if (jsonArray == null) {
-                    showToast("Error: nearby places could not be fetched");
-                    return;
-                }
-            } catch (JSONException e) {
-                showToast("Error: " + e.getMessage());
-                return;
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    placesList = (ListView) findViewById(R.id.places_list);
-                    placesList.setOnItemClickListener(Places.this);
-                    placesList.setAdapter(new PlacesListAdapter(Places.this));
-                }
-            });
-
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            showToast("Fetch Places Error: " + error.getMessage());
-        }
-    }
-
-    @Override
-    public void onItemClick(AdapterView<?> arg0, View v, int position, long arg3) {
-        if (!Utility.mFacebook.isSessionValid()) {
-            Util.showAlert(this, "Warning", "You must first log in.");
-        } else {
-            try {
-                final String message = "Check-in from the " + getString(R.string.app_name);
-                final String name = jsonArray.getJSONObject(position).getString("name");
-                final String placeID = jsonArray.getJSONObject(position).getString("id");
-                new AlertDialog.Builder(this).setTitle(R.string.check_in_title)
-                        .setMessage(String.format(getString(R.string.check_in_at), name))
-                        .setPositiveButton(R.string.checkin, new DialogInterface.OnClickListener() {
-                            /*
-                             * Source tag: check_in_tag Check-in user at the
-                             * selected location posting to the me/checkins
-                             * endpoint. More info here:
-                             * https://developers.facebook
-                             * .com/docs/reference/api/user/ - checkins
-                             */
-                            @Override
-                            public void onClick(DialogInterface dialog, int which) {
-                                Bundle params = new Bundle();
-                                params.putString("place", placeID);
-                                params.putString("message", message);
-                                params.putString("coordinates", location.toString());
-                                Utility.mAsyncRunner.request("me/checkins", params, "POST",
-                                        new placesCheckInListener(), null);
-                            }
-                        }).setNegativeButton(R.string.cancel, null).show();
-            } catch (JSONException e) {
-                showToast("Error: " + e.getMessage());
-            }
-        }
-    }
-
-    public class placesCheckInListener extends BaseRequestListener {
-        @Override
-        public void onComplete(final String response, final Object state) {
-            showToast("API Response: " + response);
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            showToast("Check-in Error: " + error.getMessage());
-        }
-    }
-
-    public void showToast(final String msg) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                Toast toast = Toast.makeText(Places.this, msg, Toast.LENGTH_LONG);
-                toast.show();
-            }
-        });
-    }
-
-    /**
-     * Definition of the list adapter
-     */
-    public class PlacesListAdapter extends BaseAdapter {
-        private LayoutInflater mInflater;
-        Places placesList;
-
-        public PlacesListAdapter(Context context) {
-            mInflater = LayoutInflater.from(context);
-        }
-
-        @Override
-        public int getCount() {
-            return jsonArray.length();
-        }
-
-        @Override
-        public Object getItem(int position) {
-            return null;
-        }
-
-        @Override
-        public long getItemId(int position) {
-            return 0;
-        }
-
-        @Override
-        public View getView(int position, View convertView, ViewGroup parent) {
-            JSONObject jsonObject = null;
-            try {
-                jsonObject = jsonArray.getJSONObject(position);
-            } catch (JSONException e1) {
-                // TODO Auto-generated catch block
-                e1.printStackTrace();
-            }
-            View hView = convertView;
-            if (convertView == null) {
-                hView = mInflater.inflate(R.layout.place_item, null);
-                ViewHolder holder = new ViewHolder();
-                holder.name = (TextView) hView.findViewById(R.id.place_name);
-                holder.location = (TextView) hView.findViewById(R.id.place_location);
-                hView.setTag(holder);
-            }
-
-            ViewHolder holder = (ViewHolder) hView.getTag();
-            try {
-                holder.name.setText(jsonObject.getString("name"));
-            } catch (JSONException e) {
-                holder.name.setText("");
-            }
-            try {
-                String location = jsonObject.getJSONObject("location").getString("street") + ", "
-                        + jsonObject.getJSONObject("location").getString("city") + ", "
-                        + jsonObject.getJSONObject("location").getString("state");
-                holder.location.setText(location);
-            } catch (JSONException e) {
-                holder.location.setText("");
-            }
-            return hView;
-        }
-
-    }
-
-    class ViewHolder {
-        TextView name;
-        TextView location;
-    }
-
-    class MyLocationListener implements LocationListener {
-
-        @Override
-        public void onLocationChanged(Location loc) {
-            dialog.dismiss();
-            if (loc != null) {
-                try {
-                    location.put("latitude", new Double(loc.getLatitude()));
-                    location.put("longitude", new Double(loc.getLongitude()));
-                } catch (JSONException e) {
-                }
-                showToast("Location acquired: " + String.valueOf(loc.getLatitude()) + " "
-                        + String.valueOf(loc.getLongitude()));
-                lm.removeUpdates(this);
-                fetchPlaces();
-            }
-        }
-
-        @Override
-        public void onProviderDisabled(String provider) {
-        }
-
-        @Override
-        public void onProviderEnabled(String provider) {
-        }
-
-        @Override
-        public void onStatusChanged(String provider, int status, Bundle extras) {
-        }
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/SessionEvents.java b/examples/Hackbook/src/com/facebook/android/SessionEvents.java
deleted file mode 100644
index f32a11e07..000000000
--- a/examples/Hackbook/src/com/facebook/android/SessionEvents.java
+++ /dev/null
@@ -1,138 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.util.LinkedList;
-
-public class SessionEvents {
-
-    private static LinkedList<AuthListener> mAuthListeners = new LinkedList<AuthListener>();
-    private static LinkedList<LogoutListener> mLogoutListeners = new LinkedList<LogoutListener>();
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void addAuthListener(AuthListener listener) {
-        mAuthListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void removeAuthListener(AuthListener listener) {
-        mAuthListeners.remove(listener);
-    }
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void addLogoutListener(LogoutListener listener) {
-        mLogoutListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void removeLogoutListener(LogoutListener listener) {
-        mLogoutListeners.remove(listener);
-    }
-
-    public static void onLoginSuccess() {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthSucceed();
-        }
-    }
-
-    public static void onLoginError(String error) {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthFail(error);
-        }
-    }
-
-    public static void onLogoutBegin() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutBegin();
-        }
-    }
-
-    public static void onLogoutFinish() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutFinish();
-        }
-    }
-
-    /**
-     * Callback interface for authorization events.
-     */
-    public static interface AuthListener {
-
-        /**
-         * Called when a auth flow completes successfully and a valid OAuth
-         * Token was received. Executed by the thread that initiated the
-         * authentication. API requests can now be made.
-         */
-        public void onAuthSucceed();
-
-        /**
-         * Called when a login completes unsuccessfully with an error.
-         * 
-         * Executed by the thread that initiated the authentication.
-         */
-        public void onAuthFail(String error);
-    }
-
-    /**
-     * Callback interface for logout events.
-     */
-    public static interface LogoutListener {
-        /**
-         * Called when logout begins, before session is invalidated. Last chance
-         * to make an API call. Executed by the thread that initiated the
-         * logout.
-         */
-        public void onLogoutBegin();
-
-        /**
-         * Called when the session information has been cleared. UI should be
-         * updated to reflect logged-out state.
-         * 
-         * Executed by the thread that initiated the logout.
-         */
-        public void onLogoutFinish();
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/SessionStore.java b/examples/Hackbook/src/com/facebook/android/SessionStore.java
deleted file mode 100644
index 1b97a53a6..000000000
--- a/examples/Hackbook/src/com/facebook/android/SessionStore.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
-
-public class SessionStore {
-
-    private static final String TOKEN = "access_token";
-    private static final String EXPIRES = "expires_in";
-    private static final String KEY = "facebook-session";
-
-    /*
-     * Save the access token and expiry date so you don't have to fetch it each
-     * time
-     */
-
-    public static boolean save(Facebook session, Context context) {
-        Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.putString(TOKEN, session.getAccessToken());
-        editor.putLong(EXPIRES, session.getAccessExpires());
-        return editor.commit();
-    }
-
-    /*
-     * Restore the access token and the expiry date from the shared preferences.
-     */
-    public static boolean restore(Facebook session, Context context) {
-        SharedPreferences savedSession = context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        session.setAccessToken(savedSession.getString(TOKEN, null));
-        session.setAccessExpires(savedSession.getLong(EXPIRES, 0));
-        return session.isSessionValid();
-    }
-
-    public static void clear(Context context) {
-        Editor editor = context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.clear();
-        editor.commit();
-    }
-
-}
diff --git a/examples/Hackbook/src/com/facebook/android/SplashActivity.java b/examples/Hackbook/src/com/facebook/android/SplashActivity.java
deleted file mode 100644
index d288acba7..000000000
--- a/examples/Hackbook/src/com/facebook/android/SplashActivity.java
+++ /dev/null
@@ -1,29 +0,0 @@
-package com.facebook.android;
-
-import java.util.Timer;
-import java.util.TimerTask;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-
-public class SplashActivity extends Activity {
-    private long splashDelay = 1500;
-
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.splash);
-        TimerTask task = new TimerTask() {
-            @Override
-            public void run() {
-                finish();
-                Intent hackbookIntent = new Intent().setClass(SplashActivity.this, Hackbook.class);
-                startActivity(hackbookIntent);
-            }
-        };
-
-        Timer timer = new Timer();
-        timer.schedule(task, splashDelay);
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java b/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
deleted file mode 100644
index aeb147b15..000000000
--- a/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package com.facebook.android;
-
-import java.text.DateFormat;
-import java.util.Date;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.os.Bundle;
-import android.text.method.LinkMovementMethod;
-import android.view.View;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.TextView;
-
-public class TokenRefreshDialog extends Dialog {
-
-    private EditText tokenEdit, tokenExpiresEdit;
-    private TextView mUsefulTip;
-    private Button mRefreshButton;
-    private Activity activity;
-
-    public TokenRefreshDialog(Activity activity) {
-        super(activity);
-        this.activity = activity;
-        setTitle(R.string.refresh_token_title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        setContentView(R.layout.token_refresh);
-
-        tokenEdit = (EditText) findViewById(R.id.tokenEdit);
-        tokenEdit.setText(Utility.mFacebook.getAccessToken());
-
-        tokenExpiresEdit = (EditText) findViewById(R.id.tokenExpiresEdit);
-        setExpiresAt(Utility.mFacebook.getAccessExpires());
-
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mUsefulTip.setMovementMethod(LinkMovementMethod.getInstance());
-        mRefreshButton = (Button) findViewById(R.id.refresh_button);
-
-        mRefreshButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                changeButtonState(false);
-                RefreshTokenListener listener = new RefreshTokenListener();
-                if (!Utility.mFacebook.extendAccessToken(activity, listener)) {
-                    listener.onError(new Error(
-                            activity.getString(R.string.refresh_token_binding_error)));
-                }
-            }
-        });
-    }
-
-    private class RefreshTokenListener implements Facebook.ServiceListener {
-
-        @Override
-        public void onFacebookError(FacebookError e) {
-            changeButtonState(true);
-            String title = String.format(activity.getString(R.string.facebook_error) + "%d",
-                    e.getErrorCode());
-            Util.showAlert(activity, title, e.getMessage());
-        }
-
-        @Override
-        public void onError(Error e) {
-            changeButtonState(true);
-            Util.showAlert(activity, activity.getString(R.string.error), e.getMessage());
-        }
-
-        @Override
-        public void onComplete(Bundle values) {
-            changeButtonState(true);
-
-            // The access_token and expires_at values are automatically updated,
-            // so they can be obtained by using:
-            // - Facebook.getAccessToken()
-            // - Facebook.getAccessExpires()
-            // methods, but we can also get them from the 'values' bundle.
-            tokenEdit.setText(values.getString(Facebook.TOKEN));
-            setExpiresAt(values.getLong(Facebook.EXPIRES));
-        }
-    }
-
-    private void changeButtonState(boolean enabled) {
-        mRefreshButton.setEnabled(enabled);
-        mRefreshButton.setText(enabled ? R.string.refresh_button : R.string.refresh_button_pending);
-    }
-
-    private void setExpiresAt(long time) {
-        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT);
-        tokenExpiresEdit.setText(dateFormat.format(new Date(time)));
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java b/examples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java
deleted file mode 100644
index 463b42535..000000000
--- a/examples/Hackbook/src/com/facebook/android/UpdateStatusResultDialog.java
+++ /dev/null
@@ -1,116 +0,0 @@
-package com.facebook.android;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.method.LinkMovementMethod;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.Button;
-import android.widget.TextView;
-
-public class UpdateStatusResultDialog extends Dialog {
-
-    private Bundle values;
-    private TextView mOutput, mUsefulTip;
-    private Button mViewPostButton, mDeletePostButton;
-    private Activity activity;
-    private Handler mHandler;
-
-    public UpdateStatusResultDialog(Activity activity, String title, Bundle values) {
-        super(activity);
-        this.activity = activity;
-        this.values = values;
-        setTitle(title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        mHandler = new Handler();
-
-        setContentView(R.layout.update_post_response);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mOutput = (TextView) findViewById(R.id.apiOutput);
-        mOutput.setText(values.toString());
-
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mUsefulTip.setMovementMethod(LinkMovementMethod.getInstance());
-        mViewPostButton = (Button) findViewById(R.id.view_post_button);
-        mDeletePostButton = (Button) findViewById(R.id.delete_post_button);
-        final String postId = values.getString("post_id");
-
-        mViewPostButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source tag: view_post_tag
-                 */
-                Utility.mAsyncRunner.request(postId, new WallPostRequestListener());
-            }
-        });
-        mDeletePostButton.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                /*
-                 * Source tag: delete_post_tag
-                 */
-                Utility.mAsyncRunner.request(postId, new Bundle(), "DELETE",
-                        new WallPostDeleteListener(), null);
-            }
-        });
-    }
-
-    public class WallPostRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            try {
-                JSONObject json = new JSONObject(response);
-                setText(json.toString(2));
-            } catch (JSONException e) {
-                setText(activity.getString(R.string.exception) + e.getMessage());
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public class WallPostDeleteListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            if (response.equals("true")) {
-                String message = "Wall Post deleted" + "\n";
-                message += "Api Response: " + response;
-                setText(message);
-            } else {
-                setText("wall post could not be deleted");
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mOutput.setText(txt);
-            }
-        });
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java b/examples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java
deleted file mode 100644
index 173aae343..000000000
--- a/examples/Hackbook/src/com/facebook/android/UploadPhotoResultDialog.java
+++ /dev/null
@@ -1,185 +0,0 @@
-package com.facebook.android;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.graphics.Bitmap;
-import android.os.AsyncTask;
-import android.os.Bundle;
-import android.os.Handler;
-import android.text.TextUtils;
-import android.text.util.Linkify;
-import android.view.View;
-import android.view.ViewGroup.LayoutParams;
-import android.widget.Button;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-public class UploadPhotoResultDialog extends Dialog {
-
-    private String response, photo_id;
-    private TextView mOutput, mUsefulTip;
-    private Button mViewPhotoButton, mTagPhotoButton;
-    private ImageView mUploadedPhoto;
-    private Activity activity;
-    private ProgressDialog dialog;
-    private boolean hidePhoto = false;
-    private Handler mHandler;
-
-    public UploadPhotoResultDialog(Activity activity, String title, String response) {
-        super(activity);
-        this.activity = activity;
-        this.response = response;
-        setTitle(title);
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-        mHandler = new Handler();
-
-        setContentView(R.layout.upload_photo_response);
-        LayoutParams params = getWindow().getAttributes();
-        params.width = LayoutParams.FILL_PARENT;
-        params.height = LayoutParams.FILL_PARENT;
-        getWindow().setAttributes((android.view.WindowManager.LayoutParams) params);
-
-        mOutput = (TextView) findViewById(R.id.apiOutput);
-        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
-        mViewPhotoButton = (Button) findViewById(R.id.view_photo_button);
-        mTagPhotoButton = (Button) findViewById(R.id.tag_photo_button);
-        mUploadedPhoto = (ImageView) findViewById(R.id.uploadedPhoto);
-
-        JSONObject json;
-        try {
-            json = Util.parseJson(response);
-            final String photo_id = json.getString("id");
-            this.photo_id = photo_id;
-
-            mOutput.setText(json.toString(2));
-            mUsefulTip.setText(activity.getString(R.string.photo_tip));
-            Linkify.addLinks(mUsefulTip, Linkify.WEB_URLS);
-
-            mViewPhotoButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    if (hidePhoto) {
-                        mViewPhotoButton.setText(R.string.view_photo);
-                        hidePhoto = false;
-                        mUploadedPhoto.setImageBitmap(null);
-                    } else {
-                        hidePhoto = true;
-                        mViewPhotoButton.setText(R.string.hide_photo);
-                        /*
-                         * Source tag: view_photo_tag
-                         */
-                        Bundle params = new Bundle();
-                        params.putString("fields", "picture");
-                        dialog = ProgressDialog.show(activity, "",
-                                activity.getString(R.string.please_wait), true, true);
-                        dialog.show();
-                        Utility.mAsyncRunner.request(photo_id, params,
-                                new ViewPhotoRequestListener());
-                    }
-                }
-            });
-            mTagPhotoButton.setOnClickListener(new View.OnClickListener() {
-                @Override
-                public void onClick(View v) {
-                    /*
-                     * Source tag: tag_photo_tag
-                     */
-                    setTag();
-                }
-            });
-        } catch (JSONException e) {
-            setText(activity.getString(R.string.exception) + e.getMessage());
-        } catch (FacebookError e) {
-            setText(activity.getString(R.string.facebook_error) + e.getMessage());
-        }
-    }
-
-    public void setTag() {
-        String relativePath = photo_id + "/tags/" + Utility.userUID;
-        Bundle params = new Bundle();
-        params.putString("x", "5");
-        params.putString("y", "5");
-        Utility.mAsyncRunner.request(relativePath, params, "POST", new TagPhotoRequestListener(),
-                null);
-    }
-
-    public class ViewPhotoRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            try {
-                JSONObject json = Util.parseJson(response);
-                final String pictureURL = json.getString("picture");
-                if (TextUtils.isEmpty(pictureURL)) {
-                    setText("Error getting \'picture\' field of the photo");
-                } else {
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            new FetchImage().execute(pictureURL);
-                        }
-                    });
-                }
-            } catch (JSONException e) {
-                dialog.dismiss();
-                setText(activity.getString(R.string.exception) + e.getMessage());
-            } catch (FacebookError e) {
-                dialog.dismiss();
-                setText(activity.getString(R.string.facebook_error) + e.getMessage());
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            dialog.dismiss();
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public class TagPhotoRequestListener extends BaseRequestListener {
-
-        @Override
-        public void onComplete(final String response, final Object state) {
-            if (response.equals("true")) {
-                String message = "User tagged in photo at (5, 5)" + "\n";
-                message += "Api Response: " + response;
-                setText(message);
-            } else {
-                setText("User could not be tagged.");
-            }
-        }
-
-        public void onFacebookError(FacebookError error) {
-            setText(activity.getString(R.string.facebook_error) + error.getMessage());
-        }
-    }
-
-    public void setText(final String txt) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mOutput.setText(txt);
-            }
-        });
-    }
-
-    private class FetchImage extends AsyncTask<String, Void, Bitmap> {
-        @Override
-        protected Bitmap doInBackground(String... urls) {
-            return Utility.getBitmap(urls[0]);
-        }
-
-        @Override
-        protected void onPostExecute(Bitmap result) {
-            dialog.dismiss();
-            mUploadedPhoto.setImageBitmap(result);
-        }
-    }
-}
diff --git a/examples/Hackbook/src/com/facebook/android/Utility.java b/examples/Hackbook/src/com/facebook/android/Utility.java
deleted file mode 100644
index 8f13d2379..000000000
--- a/examples/Hackbook/src/com/facebook/android/Utility.java
+++ /dev/null
@@ -1,153 +0,0 @@
-package com.facebook.android;
-
-import java.io.BufferedInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.FilterInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.Hashtable;
-
-import org.json.JSONObject;
-
-import android.app.Application;
-import android.content.Context;
-import android.database.Cursor;
-import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
-import android.graphics.Matrix;
-import android.net.Uri;
-import android.net.http.AndroidHttpClient;
-import android.provider.MediaStore;
-
-public class Utility extends Application {
-
-    public static Facebook mFacebook;
-    public static AsyncFacebookRunner mAsyncRunner;
-    public static JSONObject mFriendsList;
-    public static String userUID = null;
-    public static String objectID = null;
-    public static FriendsGetProfilePics model;
-    public static AndroidHttpClient httpclient = null;
-    public static Hashtable<String, String> currentPermissions = new Hashtable<String, String>();
-
-    private static int MAX_IMAGE_DIMENSION = 720;
-    public static final String HACK_ICON_URL = "http://www.facebookmobileweb.com/hackbook/img/facebook_icon_large.png";
-
-    public static Bitmap getBitmap(String url) {
-        Bitmap bm = null;
-        try {
-            URL aURL = new URL(url);
-            URLConnection conn = aURL.openConnection();
-            conn.connect();
-            InputStream is = conn.getInputStream();
-            BufferedInputStream bis = new BufferedInputStream(is);
-            bm = BitmapFactory.decodeStream(new FlushedInputStream(is));
-            bis.close();
-            is.close();
-        } catch (Exception e) {
-            e.printStackTrace();
-        } finally {
-            if (httpclient != null) {
-                httpclient.close();
-            }
-        }
-        return bm;
-    }
-
-    static class FlushedInputStream extends FilterInputStream {
-        public FlushedInputStream(InputStream inputStream) {
-            super(inputStream);
-        }
-
-        @Override
-        public long skip(long n) throws IOException {
-            long totalBytesSkipped = 0L;
-            while (totalBytesSkipped < n) {
-                long bytesSkipped = in.skip(n - totalBytesSkipped);
-                if (bytesSkipped == 0L) {
-                    int b = read();
-                    if (b < 0) {
-                        break; // we reached EOF
-                    } else {
-                        bytesSkipped = 1; // we read one byte
-                    }
-                }
-                totalBytesSkipped += bytesSkipped;
-            }
-            return totalBytesSkipped;
-        }
-    }
-
-    public static byte[] scaleImage(Context context, Uri photoUri) throws IOException {
-        InputStream is = context.getContentResolver().openInputStream(photoUri);
-        BitmapFactory.Options dbo = new BitmapFactory.Options();
-        dbo.inJustDecodeBounds = true;
-        BitmapFactory.decodeStream(is, null, dbo);
-        is.close();
-
-        int rotatedWidth, rotatedHeight;
-        int orientation = getOrientation(context, photoUri);
-
-        if (orientation == 90 || orientation == 270) {
-            rotatedWidth = dbo.outHeight;
-            rotatedHeight = dbo.outWidth;
-        } else {
-            rotatedWidth = dbo.outWidth;
-            rotatedHeight = dbo.outHeight;
-        }
-
-        Bitmap srcBitmap;
-        is = context.getContentResolver().openInputStream(photoUri);
-        if (rotatedWidth > MAX_IMAGE_DIMENSION || rotatedHeight > MAX_IMAGE_DIMENSION) {
-            float widthRatio = ((float) rotatedWidth) / ((float) MAX_IMAGE_DIMENSION);
-            float heightRatio = ((float) rotatedHeight) / ((float) MAX_IMAGE_DIMENSION);
-            float maxRatio = Math.max(widthRatio, heightRatio);
-
-            // Create the bitmap from file
-            BitmapFactory.Options options = new BitmapFactory.Options();
-            options.inSampleSize = (int) maxRatio;
-            srcBitmap = BitmapFactory.decodeStream(is, null, options);
-        } else {
-            srcBitmap = BitmapFactory.decodeStream(is);
-        }
-        is.close();
-
-        /*
-         * if the orientation is not 0 (or -1, which means we don't know), we
-         * have to do a rotation.
-         */
-        if (orientation > 0) {
-            Matrix matrix = new Matrix();
-            matrix.postRotate(orientation);
-
-            srcBitmap = Bitmap.createBitmap(srcBitmap, 0, 0, srcBitmap.getWidth(),
-                    srcBitmap.getHeight(), matrix, true);
-        }
-
-        String type = context.getContentResolver().getType(photoUri);
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        if (type.equals("image/png")) {
-            srcBitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
-        } else if (type.equals("image/jpg") || type.equals("image/jpeg")) {
-            srcBitmap.compress(Bitmap.CompressFormat.JPEG, 100, baos);
-        }
-        byte[] bMapArray = baos.toByteArray();
-        baos.close();
-        return bMapArray;
-    }
-
-    public static int getOrientation(Context context, Uri photoUri) {
-        /* it's on the external media. */
-        Cursor cursor = context.getContentResolver().query(photoUri,
-                new String[] { MediaStore.Images.ImageColumns.ORIENTATION }, null, null, null);
-
-        if (cursor.getCount() != 1) {
-            return -1;
-        }
-
-        cursor.moveToFirst();
-        return cursor.getInt(0);
-    }
-}
diff --git a/examples/simple/AndroidManifest.xml b/examples/simple/AndroidManifest.xml
deleted file mode 100644
index f647de1aa..000000000
--- a/examples/simple/AndroidManifest.xml
+++ /dev/null
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-	package="com.facebook.android" 
-	android:versionCode="1"
-	android:versionName="1.0">
-	<application android:icon="@drawable/icon" 
-	    android:label="@string/app_name"
-		android:debuggable="true">
-		<activity android:name=".Example" 
-		    android:label="@string/app_name"
-		    android:configChanges="keyboardHidden">
-			<intent-filter>
-				<action android:name="android.intent.action.MAIN" />
-				<category android:name="android.intent.category.LAUNCHER" />
-			</intent-filter>
-		</activity>
-	</application>
-	<uses-permission android:name="android.permission.INTERNET"></uses-permission>
-	<uses-sdk android:minSdkVersion="3"/>
-</manifest> 
\ No newline at end of file
diff --git a/examples/simple/res/drawable/icon.png b/examples/simple/res/drawable/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/examples/simple/res/drawable/icon.png and /dev/null differ
diff --git a/examples/simple/res/drawable/login.png b/examples/simple/res/drawable/login.png
deleted file mode 100644
index 95c8dc156..000000000
Binary files a/examples/simple/res/drawable/login.png and /dev/null differ
diff --git a/examples/simple/res/drawable/login_button.xml b/examples/simple/res/drawable/login_button.xml
deleted file mode 100644
index 73dc6c3ab..000000000
--- a/examples/simple/res/drawable/login_button.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-	<item android:state_pressed="true" android:drawable="@drawable/login_down" />
-	<item android:drawable="@drawable/login" /> <!-- default -->
-</selector>
\ No newline at end of file
diff --git a/examples/simple/res/drawable/login_down.png b/examples/simple/res/drawable/login_down.png
deleted file mode 100644
index 10d216b3f..000000000
Binary files a/examples/simple/res/drawable/login_down.png and /dev/null differ
diff --git a/examples/simple/res/drawable/logout.png b/examples/simple/res/drawable/logout.png
deleted file mode 100644
index 290272aa0..000000000
Binary files a/examples/simple/res/drawable/logout.png and /dev/null differ
diff --git a/examples/simple/res/drawable/logout_button.xml b/examples/simple/res/drawable/logout_button.xml
deleted file mode 100644
index 58f57656b..000000000
--- a/examples/simple/res/drawable/logout_button.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<selector xmlns:android="http://schemas.android.com/apk/res/android">
-    <item android:state_pressed="true" android:drawable="@drawable/logout_down" />
-    <item android:drawable="@drawable/logout" /> <!-- default -->
-</selector>
\ No newline at end of file
diff --git a/examples/simple/res/drawable/logout_down.png b/examples/simple/res/drawable/logout_down.png
deleted file mode 100644
index 1ab14b9dc..000000000
Binary files a/examples/simple/res/drawable/logout_down.png and /dev/null differ
diff --git a/examples/simple/res/layout/main.xml b/examples/simple/res/layout/main.xml
deleted file mode 100644
index b73286a71..000000000
--- a/examples/simple/res/layout/main.xml
+++ /dev/null
@@ -1,65 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical" android:layout_width="fill_parent"
-	android:layout_height="fill_parent" android:background="@drawable/white"
-	android:gravity="center_horizontal">
-
-    <com.facebook.android.LoginButton
-        android:id="@+id/login"
-        android:src="@drawable/login_button"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:layout_margin="30dp"
-        />
-
-	<TextView android:id="@+id/txt" 
-        android:text="@string/hello"
-        android:textColor="@drawable/black"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-		/>
-		
-	<Button android:id="@+id/uploadButton"
-        android:text="@string/upload"
-        android:visibility="invisible"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-        
-	<Button android:id="@+id/requestButton"
-        android:text="@string/request"
-        android:visibility="invisible"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-
-
-	<Button android:id="@+id/postButton" 
-        android:text="@string/post"
-        android:visibility="invisible"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-		/>
-		
-    <Button android:id="@+id/deletePostButton" 
-        android:text="@string/delete"
-        android:visibility="invisible"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content" 
-        android:paddingRight="20dp" 
-        android:paddingLeft="20dp"
-        android:layout_margin="20dp" 
-        />
-
-
-
-</LinearLayout>
\ No newline at end of file
diff --git a/examples/simple/res/values/colors.xml b/examples/simple/res/values/colors.xml
deleted file mode 100644
index 2aa7e8e36..000000000
--- a/examples/simple/res/values/colors.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <drawable name="white">#ffffff</drawable>
-    <drawable name="black">#000000</drawable>
-</resources>
\ No newline at end of file
diff --git a/examples/simple/res/values/strings.xml b/examples/simple/res/values/strings.xml
deleted file mode 100644
index ced6f8b47..000000000
--- a/examples/simple/res/values/strings.xml
+++ /dev/null
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">Facebook SDK Example</string>
-    <string name="request">Request!</string>
-    <string name="hello">Hello World!</string>
-    <string name="upload">Upload Photo</string><string name="post">Wall Post!</string>
-    <string name="delete">Delete Post</string>
-
-
-</resources>
diff --git a/examples/simple/src/com/facebook/android/BaseDialogListener.java b/examples/simple/src/com/facebook/android/BaseDialogListener.java
deleted file mode 100644
index 6b4b9453d..000000000
--- a/examples/simple/src/com/facebook/android/BaseDialogListener.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.facebook.android;
-
-import com.facebook.android.Facebook.DialogListener;
-
-/**
- * Skeleton base class for RequestListeners, providing default error 
- * handling. Applications should handle these error conditions.
- *
- */
-public abstract class BaseDialogListener implements DialogListener {
-
-    public void onFacebookError(FacebookError e) {
-        e.printStackTrace();
-    }
-
-    public void onError(DialogError e) {
-        e.printStackTrace();        
-    }
-
-    public void onCancel() {        
-    }
-    
-}
diff --git a/examples/simple/src/com/facebook/android/BaseRequestListener.java b/examples/simple/src/com/facebook/android/BaseRequestListener.java
deleted file mode 100644
index bd0f80f99..000000000
--- a/examples/simple/src/com/facebook/android/BaseRequestListener.java
+++ /dev/null
@@ -1,40 +0,0 @@
-package com.facebook.android;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import android.util.Log;
-
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-/**
- * Skeleton base class for RequestListeners, providing default error 
- * handling. Applications should handle these error conditions.
- *
- */
-public abstract class BaseRequestListener implements RequestListener {
-
-    public void onFacebookError(FacebookError e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    public void onFileNotFoundException(FileNotFoundException e,
-                                        final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    public void onIOException(IOException e, final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-
-    public void onMalformedURLException(MalformedURLException e,
-                                        final Object state) {
-        Log.e("Facebook", e.getMessage());
-        e.printStackTrace();
-    }
-    
-}
diff --git a/examples/simple/src/com/facebook/android/Example.java b/examples/simple/src/com/facebook/android/Example.java
deleted file mode 100644
index 54db7d58e..000000000
--- a/examples/simple/src/com/facebook/android/Example.java
+++ /dev/null
@@ -1,281 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.widget.Button;
-import android.widget.TextView;
-
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-
-
-public class Example extends Activity {
-
-    // Your Facebook Application ID must be set before running this example
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String APP_ID = "175729095772478";
-
-    private LoginButton mLoginButton;
-    private TextView mText;
-    private Button mRequestButton;
-    private Button mPostButton;
-    private Button mDeleteButton;
-    private Button mUploadButton;
-
-    private Facebook mFacebook;
-    private AsyncFacebookRunner mAsyncRunner;
-
-    /** Called when the activity is first created. */
-    @Override
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (APP_ID == null) {
-            Util.showAlert(this, "Warning", "Facebook Applicaton ID must be " +
-                    "specified before running this example: see Example.java");
-        }
-
-        setContentView(R.layout.main);
-        mLoginButton = (LoginButton) findViewById(R.id.login);
-        mText = (TextView) Example.this.findViewById(R.id.txt);
-        mRequestButton = (Button) findViewById(R.id.requestButton);
-        mPostButton = (Button) findViewById(R.id.postButton);
-        mDeleteButton = (Button) findViewById(R.id.deletePostButton);
-        mUploadButton = (Button) findViewById(R.id.uploadButton);
-
-       	mFacebook = new Facebook(APP_ID);
-       	mAsyncRunner = new AsyncFacebookRunner(mFacebook);
-
-        SessionStore.restore(mFacebook, this);
-        SessionEvents.addAuthListener(new SampleAuthListener());
-        SessionEvents.addLogoutListener(new SampleLogoutListener());
-        mLoginButton.init(this, mFacebook);
-
-        mRequestButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-            	mAsyncRunner.request("me", new SampleRequestListener());
-            }
-        });
-        mRequestButton.setVisibility(mFacebook.isSessionValid() ?
-                View.VISIBLE :
-                View.INVISIBLE);
-
-        mUploadButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                Bundle params = new Bundle();
-                params.putString("method", "photos.upload");
-
-                URL uploadFileUrl = null;
-                try {
-                    uploadFileUrl = new URL(
-                        "http://www.facebook.com/images/devsite/iphone_connect_btn.jpg");
-                } catch (MalformedURLException e) {
-                	e.printStackTrace();
-                }
-                try {
-                    HttpURLConnection conn= (HttpURLConnection)uploadFileUrl.openConnection();
-                    conn.setDoInput(true);
-                    conn.connect();
-                    int length = conn.getContentLength();
-
-                    byte[] imgData =new byte[length];
-                    InputStream is = conn.getInputStream();
-                    is.read(imgData);
-                    params.putByteArray("picture", imgData);
-
-                } catch  (IOException e) {
-                    e.printStackTrace();
-                }
-
-                mAsyncRunner.request(null, params, "POST",
-                        new SampleUploadListener(), null);
-            }
-        });
-        mUploadButton.setVisibility(mFacebook.isSessionValid() ?
-                View.VISIBLE :
-                View.INVISIBLE);
-
-        mPostButton.setOnClickListener(new OnClickListener() {
-            public void onClick(View v) {
-                mFacebook.dialog(Example.this, "feed",
-                        new SampleDialogListener());
-            }
-        });
-        mPostButton.setVisibility(mFacebook.isSessionValid() ?
-                View.VISIBLE :
-                View.INVISIBLE);
-    }
-
-    @Override
-    protected void onActivityResult(int requestCode, int resultCode,
-                                    Intent data) {
-        mFacebook.authorizeCallback(requestCode, resultCode, data);
-    }
-
-    public class SampleAuthListener implements AuthListener {
-
-        public void onAuthSucceed() {
-            mText.setText("You have logged in! ");
-            mRequestButton.setVisibility(View.VISIBLE);
-            mUploadButton.setVisibility(View.VISIBLE);
-            mPostButton.setVisibility(View.VISIBLE);
-        }
-
-        public void onAuthFail(String error) {
-            mText.setText("Login Failed: " + error);
-        }
-    }
-
-    public class SampleLogoutListener implements LogoutListener {
-        public void onLogoutBegin() {
-            mText.setText("Logging out...");
-        }
-
-        public void onLogoutFinish() {
-            mText.setText("You have logged out! ");
-            mRequestButton.setVisibility(View.INVISIBLE);
-            mUploadButton.setVisibility(View.INVISIBLE);
-            mPostButton.setVisibility(View.INVISIBLE);
-        }
-    }
-
-    public class SampleRequestListener extends BaseRequestListener {
-
-        public void onComplete(final String response, final Object state) {
-            try {
-                // process the response here: executed in background thread
-                Log.d("Facebook-Example", "Response: " + response.toString());
-                JSONObject json = Util.parseJson(response);
-                final String name = json.getString("name");
-
-                // then post the processed result back to the UI thread
-                // if we do not do this, an runtime exception will be generated
-                // e.g. "CalledFromWrongThreadException: Only the original
-                // thread that created a view hierarchy can touch its views."
-                Example.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        mText.setText("Hello there, " + name + "!");
-                    }
-                });
-            } catch (JSONException e) {
-                Log.w("Facebook-Example", "JSON Error in response");
-            } catch (FacebookError e) {
-                Log.w("Facebook-Example", "Facebook Error: " + e.getMessage());
-            }
-        }
-    }
-
-    public class SampleUploadListener extends BaseRequestListener {
-
-        public void onComplete(final String response, final Object state) {
-            try {
-                // process the response here: (executed in background thread)
-                Log.d("Facebook-Example", "Response: " + response.toString());
-                JSONObject json = Util.parseJson(response);
-                final String src = json.getString("src");
-
-                // then post the processed result back to the UI thread
-                // if we do not do this, an runtime exception will be generated
-                // e.g. "CalledFromWrongThreadException: Only the original
-                // thread that created a view hierarchy can touch its views."
-                Example.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        mText.setText("Hello there, photo has been uploaded at \n" + src);
-                    }
-                });
-            } catch (JSONException e) {
-                Log.w("Facebook-Example", "JSON Error in response");
-            } catch (FacebookError e) {
-                Log.w("Facebook-Example", "Facebook Error: " + e.getMessage());
-            }
-        }
-    }
-    public class WallPostRequestListener extends BaseRequestListener {
-
-        public void onComplete(final String response, final Object state) {
-            Log.d("Facebook-Example", "Got response: " + response);
-            String message = "<empty>";
-            try {
-                JSONObject json = Util.parseJson(response);
-                message = json.getString("message");
-            } catch (JSONException e) {
-                Log.w("Facebook-Example", "JSON Error in response");
-            } catch (FacebookError e) {
-                Log.w("Facebook-Example", "Facebook Error: " + e.getMessage());
-            }
-            final String text = "Your Wall Post: " + message;
-            Example.this.runOnUiThread(new Runnable() {
-                public void run() {
-                    mText.setText(text);
-                }
-            });
-        }
-    }
-
-    public class WallPostDeleteListener extends BaseRequestListener {
-
-        public void onComplete(final String response, final Object state) {
-            if (response.equals("true")) {
-                Log.d("Facebook-Example", "Successfully deleted wall post");
-                Example.this.runOnUiThread(new Runnable() {
-                    public void run() {
-                        mDeleteButton.setVisibility(View.INVISIBLE);
-                        mText.setText("Deleted Wall Post");
-                    }
-                });
-            } else {
-                Log.d("Facebook-Example", "Could not delete wall post");
-            }
-        }
-    }
-
-    public class SampleDialogListener extends BaseDialogListener {
-
-        public void onComplete(Bundle values) {
-            final String postId = values.getString("post_id");
-            if (postId != null) {
-                Log.d("Facebook-Example", "Dialog Success! post_id=" + postId);
-                mAsyncRunner.request(postId, new WallPostRequestListener());
-                mDeleteButton.setOnClickListener(new OnClickListener() {
-                    public void onClick(View v) {
-                        mAsyncRunner.request(postId, new Bundle(), "DELETE",
-                                new WallPostDeleteListener(), null);
-                    }
-                });
-                mDeleteButton.setVisibility(View.VISIBLE);
-            } else {
-                Log.d("Facebook-Example", "No wall post made");
-            }
-        }
-    }
-
-}
diff --git a/examples/simple/src/com/facebook/android/LoginButton.java b/examples/simple/src/com/facebook/android/LoginButton.java
deleted file mode 100644
index bd758f413..000000000
--- a/examples/simple/src/com/facebook/android/LoginButton.java
+++ /dev/null
@@ -1,139 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import com.facebook.android.BaseRequestListener;
-import com.facebook.android.SessionEvents.AuthListener;
-import com.facebook.android.SessionEvents.LogoutListener;
-import com.facebook.android.Facebook.DialogListener;
-
-import android.app.Activity;
-import android.content.Context;
-import android.graphics.Color;
-import android.os.Bundle;
-import android.os.Handler;
-import android.util.AttributeSet;
-import android.view.View;
-import android.widget.ImageButton;
-
-public class LoginButton extends ImageButton {
-    
-    private Facebook mFb;
-    private Handler mHandler;
-    private SessionListener mSessionListener = new SessionListener();
-    private String[] mPermissions;
-    private Activity mActivity;
-    
-    public LoginButton(Context context) {
-        super(context);
-    }
-    
-    public LoginButton(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-    
-    public LoginButton(Context context, AttributeSet attrs, int defStyle) {
-        super(context, attrs, defStyle);
-    }
-    
-    public void init(final Activity activity, final Facebook fb) {
-    	init(activity, fb, new String[] {});
-    }
-    
-    public void init(final Activity activity, final Facebook fb,
-                     final String[] permissions) {
-        mActivity = activity;
-        mFb = fb;
-        mPermissions = permissions;
-        mHandler = new Handler();
-        
-        setBackgroundColor(Color.TRANSPARENT);
-        setAdjustViewBounds(true);
-        setImageResource(fb.isSessionValid() ?
-                         R.drawable.logout_button : 
-                         R.drawable.login_button);
-        drawableStateChanged();
-        
-        SessionEvents.addAuthListener(mSessionListener);
-        SessionEvents.addLogoutListener(mSessionListener);
-        setOnClickListener(new ButtonOnClickListener());
-    }
-    
-    private final class ButtonOnClickListener implements OnClickListener {
-        
-        public void onClick(View arg0) {
-            if (mFb.isSessionValid()) {
-                SessionEvents.onLogoutBegin();
-                AsyncFacebookRunner asyncRunner = new AsyncFacebookRunner(mFb);
-                asyncRunner.logout(getContext(), new LogoutRequestListener());
-            } else {
-                mFb.authorize(mActivity, mPermissions,
-                              new LoginDialogListener());
-            }
-        }
-    }
-
-    private final class LoginDialogListener implements DialogListener {
-        public void onComplete(Bundle values) {
-            SessionEvents.onLoginSuccess();
-        }
-
-        public void onFacebookError(FacebookError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-        
-        public void onError(DialogError error) {
-            SessionEvents.onLoginError(error.getMessage());
-        }
-
-        public void onCancel() {
-            SessionEvents.onLoginError("Action Canceled");
-        }
-    }
-    
-    private class LogoutRequestListener extends BaseRequestListener {
-        public void onComplete(String response, final Object state) {
-            // callback should be run in the original thread, 
-            // not the background thread
-            mHandler.post(new Runnable() {
-                public void run() {
-                    SessionEvents.onLogoutFinish();
-                }
-            });
-        }
-    }
-    
-    private class SessionListener implements AuthListener, LogoutListener {
-        
-        public void onAuthSucceed() {
-            setImageResource(R.drawable.logout_button);
-            SessionStore.save(mFb, getContext());
-        }
-
-        public void onAuthFail(String error) {
-        }
-        
-        public void onLogoutBegin() {           
-        }
-        
-        public void onLogoutFinish() {
-            SessionStore.clear(getContext());
-            setImageResource(R.drawable.login_button);
-        }
-    }
-    
-}
diff --git a/examples/simple/src/com/facebook/android/SessionEvents.java b/examples/simple/src/com/facebook/android/SessionEvents.java
deleted file mode 100644
index 1351f88e1..000000000
--- a/examples/simple/src/com/facebook/android/SessionEvents.java
+++ /dev/null
@@ -1,146 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.util.LinkedList;
-
-public class SessionEvents {
-
-    private static LinkedList<AuthListener> mAuthListeners = 
-        new LinkedList<AuthListener>();
-    private static LinkedList<LogoutListener> mLogoutListeners = 
-        new LinkedList<LogoutListener>();
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void addAuthListener(AuthListener listener) {
-        mAuthListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when authentication events occur.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when auth
-     *            events happen.
-     */
-    public static void removeAuthListener(AuthListener listener) {
-        mAuthListeners.remove(listener);
-    }
-
-    /**
-     * Associate the given listener with this Facebook object. The listener's
-     * callback interface will be invoked when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void addLogoutListener(LogoutListener listener) {
-        mLogoutListeners.add(listener);
-    }
-
-    /**
-     * Remove the given listener from the list of those that will be notified
-     * when logout occurs.
-     * 
-     * @param listener
-     *            The callback object for notifying the application when log out
-     *            starts and finishes.
-     */
-    public static void removeLogoutListener(LogoutListener listener) {
-        mLogoutListeners.remove(listener);
-    }
-    
-    public static void onLoginSuccess() {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthSucceed();
-        }
-    }
-    
-    public static void onLoginError(String error) {
-        for (AuthListener listener : mAuthListeners) {
-            listener.onAuthFail(error);
-        }
-    }
-    
-    public static void onLogoutBegin() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutBegin();
-        }
-    }
-    
-    public static void onLogoutFinish() {
-        for (LogoutListener l : mLogoutListeners) {
-            l.onLogoutFinish();
-        }   
-    }
-    
-    /**
-     * Callback interface for authorization events.
-     *
-     */
-    public static interface AuthListener {
-
-        /**
-         * Called when a auth flow completes successfully and a valid OAuth 
-         * Token was received.
-         * 
-         * Executed by the thread that initiated the authentication.
-         * 
-         * API requests can now be made.
-         */
-        public void onAuthSucceed();
-
-        /**
-         * Called when a login completes unsuccessfully with an error. 
-         *  
-         * Executed by the thread that initiated the authentication.
-         */
-        public void onAuthFail(String error);
-    }
-    
-    /**
-     * Callback interface for logout events.
-     *
-     */ 
-    public static interface LogoutListener {
-        /**
-         * Called when logout begins, before session is invalidated.  
-         * Last chance to make an API call.  
-         * 
-         * Executed by the thread that initiated the logout.
-         */
-        public void onLogoutBegin();
-
-        /**
-         * Called when the session information has been cleared.
-         * UI should be updated to reflect logged-out state.
-         * 
-         * Executed by the thread that initiated the logout.
-         */
-        public void onLogoutFinish();
-    }
-    
-}
diff --git a/examples/simple/src/com/facebook/android/SessionStore.java b/examples/simple/src/com/facebook/android/SessionStore.java
deleted file mode 100644
index d65df66b9..000000000
--- a/examples/simple/src/com/facebook/android/SessionStore.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import com.facebook.android.Facebook;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
-
-public class SessionStore {
-    
-    private static final String TOKEN = "access_token";
-    private static final String EXPIRES = "expires_in";
-    private static final String KEY = "facebook-session";
-    
-    public static boolean save(Facebook session, Context context) {
-        Editor editor =
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.putString(TOKEN, session.getAccessToken());
-        editor.putLong(EXPIRES, session.getAccessExpires());
-        return editor.commit();
-    }
-
-    public static boolean restore(Facebook session, Context context) {
-        SharedPreferences savedSession =
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        session.setAccessToken(savedSession.getString(TOKEN, null));
-        session.setAccessExpires(savedSession.getLong(EXPIRES, 0));
-        return session.isSessionValid();
-    }
-
-    public static void clear(Context context) {
-        Editor editor = 
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.clear();
-        editor.commit();
-    }
-    
-}
diff --git a/examples/stream/AndroidManifest.xml b/examples/stream/AndroidManifest.xml
deleted file mode 100644
index 0f2493301..000000000
--- a/examples/stream/AndroidManifest.xml
+++ /dev/null
@@ -1,19 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-      android:versionCode="1"
-      android:versionName="1.0" package="com.facebook.stream">
-    <application android:icon="@drawable/icon" android:label="@string/app_name">
-        <activity android:name=".App"
-                  android:label="@string/app_name"
-                  android:screenOrientation="portrait"
-                  android:configChanges="keyboardHidden|orientation">
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-
-	<uses-permission android:name="android.permission.INTERNET" />
-	<uses-sdk android:minSdkVersion="3" />
-</manifest> 
\ No newline at end of file
diff --git a/examples/stream/assets/like_icon.png b/examples/stream/assets/like_icon.png
deleted file mode 100644
index 79ea76ec5..000000000
Binary files a/examples/stream/assets/like_icon.png and /dev/null differ
diff --git a/examples/stream/assets/login.css b/examples/stream/assets/login.css
deleted file mode 100644
index d1e3f2fc2..000000000
--- a/examples/stream/assets/login.css
+++ /dev/null
@@ -1,14 +0,0 @@
-#main {
-  width: 200px;
-  margin: 50% auto 0 auto;
-  text-align: center;
-}
-
-#welcome {
-  margin-bottom: 10px;
-}
-
-#login_button {
-  width: 91px;
-  margin: auto;
-}
\ No newline at end of file
diff --git a/examples/stream/assets/login.html b/examples/stream/assets/login.html
deleted file mode 100644
index 35e536994..000000000
--- a/examples/stream/assets/login.html
+++ /dev/null
@@ -1,13 +0,0 @@
-<html>
-<head>
-  <link rel="stylesheet" href="file:///android_asset/login.css" type="text/css"/>
-</head>
-<body>
-  <div id="main">
-    <div id="welcome">Welcome to Stream</div>
-    <div id="login_button">
-      <a onclick="app.login()"><img src="file:///android_asset/login_button.png" width="90" height="31"/></a>
-    </div>
-  </div>
-</body>
-</html>
\ No newline at end of file
diff --git a/examples/stream/assets/login_button.png b/examples/stream/assets/login_button.png
deleted file mode 100644
index 77bc30c27..000000000
Binary files a/examples/stream/assets/login_button.png and /dev/null differ
diff --git a/examples/stream/assets/stream.css b/examples/stream/assets/stream.css
deleted file mode 100644
index cb0d676f0..000000000
--- a/examples/stream/assets/stream.css
+++ /dev/null
@@ -1,118 +0,0 @@
-a {
-  color: #00f;
-}
-
-a:visited {
-  color: #00f;
-}
-
-.hidden {
-  display: none;
-}
-
-.clear {
-  clear: both
-}
-
-#header {
-  float: right;
-}
-
-input {
-  width: 80%;
-  height: 28px;
-  border: #666 solid 1px;
-  margin: 1px 3px 0 0;
-  float: left;
-}
-
-#status_box {
-  margin: 5px 0;
-}
-
-#status_input {
-  color: #666;
-  float: left;
-}
-
-.profile_pic_container {
-  float: left;
-  margin: 0 5px;
-}
-
-.profile_pic {
-  width: 30px;
-  height: 30px;
-}
-
-.attachment {
-  margin-top: 3px;
-}
-
-.title {
-  margin-bottom: 3px;
-}
-
-.caption {
-  margin-bottom: 3px;
-  color: #666;
-}
-
-.description {
-  color: #666;  
-} 
-
-.picture {
-  float: left;
-  margin-right: 5px;
-}
-
-.post {
-  padding: 10px 0;
-  border-bottom: #ccc solid 1px;
-}
-
-.action_links {
-  margin: 5px 0;
-}
-
-.action_link {
-  margin-right: 5px;
-  float: left;
-}
-
-
-.comment {
-  padding: 5px 0;
-  margin-bottom: 2px;
-  background-color: #eee;
-  min-height: 30px;
-}
-
-.comments {
-  margin-top: 5px;
-}
-
-.comment_box {
-  display: none;
-}
-
-.timestamp {
-  color: #666;
-}
-
-.like_icon {
-  float: left;
-  top: 3px;
-  position: relative;
-  margin-right: 5px;
-}
-
-.like_icon img {
-  width: 16px;
-  height: 14px;
-}
-
-.num_likes {
-  padding-left: 5px;
-}
\ No newline at end of file
diff --git a/examples/stream/assets/stream.js b/examples/stream/assets/stream.js
deleted file mode 100644
index 23c4809f4..000000000
--- a/examples/stream/assets/stream.js
+++ /dev/null
@@ -1,88 +0,0 @@
-function $(id) {
-  return document.getElementById(id);
-}
-
-function show(id) {
-  $(id).style.display = "block";
-}
-
-function hide(id) {
-  $(id).style.display = "none";
-}
-
-function onStatusBoxFocus(elt) {
-  elt.value = '';
-  elt.style.color = "#000";
-  show('status_submit');
-}
-
-function updateStatus() {
-  var message = $('status_input').value;
-  if (message == "") {
-    return;
-  }
-  $('status_input').disabled = true;
-  $('status_submit').disabled = true;
-  app.updateStatus(message);
-}
-
-function onStatusUpdated(html) {
-  $('status_input').disabled = false;
-  $('status_submit').disabled = false;
-  $('posts').innerHTML = html + $('posts').innerHTML;
-}
-
-function like(post_id) {
-  doLike(post_id, true);
- 
-}
-
-function unlike(post_id) {
-  doLike(post_id, false);
-}
-
-function doLike(post_id, val) {
-  var ids = getLikeLinkIds(post_id, val);
-  $(ids[0]).disabled = true;
-  app.like(post_id, val);
-}
-
-// called when the api request has succeeded
-function onLike(post_id, val) {
-  var ids = getLikeLinkIds(post_id, val);
-  $(ids[0]).disabled = false;
-  hide(ids[0]);
-  show(ids[1]);
-}
-
-function getLikeLinkIds(post_id, val) {
-  if (val) {
-    var prefix1 = 'like';
-    var prefix2 = 'unlike';
-  } else {
-    var prefix1 = 'unlike';
-    var prefix2 = 'like';
-  }
-  return [prefix1 + post_id, prefix2 + post_id];
-}
-  
-
-function comment(post_id) {
-  show("comment_box" + post_id);
-  $("comment_box_input" + post_id).focus();
-}
-
-function postComment(post_id) {
-  var message = $("comment_box_input" + post_id).value;
-  if (message == "") {
-    return;
-  }
-  $("comment_box" + post_id).disabled = true;
-  app.postComment(post_id, message);
-}
-
-function onComment(post_id, html) {
-  $("comments" + post_id).innerHTML += html;
-  $("comment_box" + post_id).disabled = false;
-  $("comment_box_input" + post_id).value = "";
-}
\ No newline at end of file
diff --git a/examples/stream/project.properties b/examples/stream/project.properties
deleted file mode 100644
index 3e0ab5550..000000000
--- a/examples/stream/project.properties
+++ /dev/null
@@ -1,17 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Indicates whether an apk should be generated for each density.
-split.density=false
-android.library.reference.1=../../facebook/
-# Project target.
-target=android-3
diff --git a/examples/stream/res/drawable-hdpi/icon.png b/examples/stream/res/drawable-hdpi/icon.png
deleted file mode 100644
index 8074c4c57..000000000
Binary files a/examples/stream/res/drawable-hdpi/icon.png and /dev/null differ
diff --git a/examples/stream/res/drawable-ldpi/icon.png b/examples/stream/res/drawable-ldpi/icon.png
deleted file mode 100644
index 1095584ec..000000000
Binary files a/examples/stream/res/drawable-ldpi/icon.png and /dev/null differ
diff --git a/examples/stream/res/drawable-mdpi/icon.png b/examples/stream/res/drawable-mdpi/icon.png
deleted file mode 100644
index a07c69fa5..000000000
Binary files a/examples/stream/res/drawable-mdpi/icon.png and /dev/null differ
diff --git a/examples/stream/res/values/strings.xml b/examples/stream/res/values/strings.xml
deleted file mode 100644
index a33b88605..000000000
--- a/examples/stream/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <string name="app_name">stream</string>
-</resources>
\ No newline at end of file
diff --git a/examples/stream/src/com/facebook/stream/App.java b/examples/stream/src/com/facebook/stream/App.java
deleted file mode 100644
index 4efca7aa6..000000000
--- a/examples/stream/src/com/facebook/stream/App.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import android.app.Activity;
-import android.app.AlertDialog.Builder;
-import android.content.Intent;
-import android.os.Bundle;
-import com.facebook.android.Facebook;
-
-/**
- * This class implements the application's main Activity.
- * 
- * @author yariv
- */
-public class App extends Activity {
-
-    // This is a demo application ID just to get this demo up and running
-    // If you modify this to work for your own app, you must use your
-    // own Facebook Application ID.
-    // See http://www.facebook.com/developers/createapp.php
-    public static final String FB_APP_ID = "126642314059639";
-
-    public void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        if (FB_APP_ID == null) {
-            Builder alertBuilder = new Builder(this);
-            alertBuilder.setTitle("Warning");
-            alertBuilder.setMessage("A Facebook Applicaton ID must be " +
-                    "specified before running this example: see App.java");
-            alertBuilder.create().show();
-        }
-        
-        // Initialize the dispatcher
-        Dispatcher dispatcher = new Dispatcher(this);
-        dispatcher.addHandler("login", LoginHandler.class);
-        dispatcher.addHandler("stream", StreamHandler.class);
-        dispatcher.addHandler("logout", LogoutHandler.class);
-
-        // If a session already exists, render the stream page
-        // immediately. Otherwise, render the login page.
-        Session session = Session.restore(this);
-        if (session != null) {
-            dispatcher.runHandler("stream");
-        } else {
-            dispatcher.runHandler("login");
-        }
-    }
-
-    protected void onActivityResult(int requestCode, int resultCode,
-                                    Intent data) {
-        Facebook fb = Session.wakeupForAuthCallback();
-        fb.authorizeCallback(requestCode, resultCode, data);
-    }
-}
diff --git a/examples/stream/src/com/facebook/stream/AsyncRequestListener.java b/examples/stream/src/com/facebook/stream/AsyncRequestListener.java
deleted file mode 100644
index 94d5eb4f4..000000000
--- a/examples/stream/src/com/facebook/stream/AsyncRequestListener.java
+++ /dev/null
@@ -1,67 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.util.Log;
-
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-abstract class AsyncRequestListener implements RequestListener {
-
-    public void onComplete(String response, final Object state) {
-        try {
-            JSONObject obj = Util.parseJson(response);
-            onComplete(obj, state);
-        } catch (JSONException e) {
-            e.printStackTrace();
-            Log.e("facebook-stream", "JSON Error:" + e.getMessage());
-        } catch (FacebookError e) {
-            Log.e("facebook-stream", "Facebook Error:" + e.getMessage());
-        }
-
-    }
-
-    public abstract void onComplete(JSONObject obj, final Object state);
-
-    public void onFacebookError(FacebookError e, final Object state) {
-        Log.e("stream", "Facebook Error:" + e.getMessage());
-    }
-
-    public void onFileNotFoundException(FileNotFoundException e,
-                                        final Object state) {
-        Log.e("stream", "Resource not found:" + e.getMessage());      
-    }
-
-    public void onIOException(IOException e, final Object state) {
-        Log.e("stream", "Network Error:" + e.getMessage());      
-    }
-
-    public void onMalformedURLException(MalformedURLException e,
-                                        final Object state) {
-        Log.e("stream", "Invalid URL:" + e.getMessage());            
-    }
-
-}
\ No newline at end of file
diff --git a/examples/stream/src/com/facebook/stream/Dispatcher.java b/examples/stream/src/com/facebook/stream/Dispatcher.java
deleted file mode 100644
index 462734079..000000000
--- a/examples/stream/src/com/facebook/stream/Dispatcher.java
+++ /dev/null
@@ -1,192 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.util.HashMap;
-
-import android.app.Activity;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.LinearLayout;
-import android.widget.LinearLayout.LayoutParams;
-
-/**
- * Handles the rendering of the WebView instance and the
- * mapping of app:// urls to their appropriate Handlers.  
- * 
- * @author yariv
- */
-public class Dispatcher {
-
-    // The WebView instance
-    private WebView webView;
-
-    // The app's main Activity
-    private Activity activity;
-
-    // Contains the webView object
-    LinearLayout layout;
-
-    // Has the webView been rendered?
-    boolean isWebViewShown;
-
-    // Holds mappings between handler names to their classes
-    // (e.g. "login" -> LoginHandler.class)
-    HashMap<String, Class> handlers;
-
-    public Dispatcher(Activity activity) {
-        this.activity = activity;
-        handlers = new HashMap<String, Class>();
-        layout = new LinearLayout(activity);
-        activity.addContentView(
-                layout, new LayoutParams(
-                        LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
-        isWebViewShown = false;
-        showWebView();
-    }
-
-    /**
-     * Adds a handler name to handler class mapping. This should be called
-     * for each handler when the application starts up.
-     * 
-     * @param name
-     * @param clazz
-     */
-    public void addHandler(String name, Class clazz) {
-        this.handlers.put(name, clazz);
-    }
-
-    /**
-     * Executes the handler associated with the given name. For example,
-     * dispatcher.runHandler("login") would render the Login page in the
-     * WebView instance.
-     * 
-     * @param name
-     */
-    public void runHandler(String name) {
-        Class clazz = handlers.get(name);
-        if (clazz != null) {
-            try {
-                Handler handler = (Handler)clazz.newInstance();
-                handler.setDispatcher(this);
-                handler.go();
-            } catch (IllegalAccessException e) {
-                e.printStackTrace();
-            } catch (InstantiationException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-
-    /**
-     * Show the app's WebView instance.
-     */
-    public void showWebView() {
-        if (isWebViewShown) {
-            return;
-        }
-        webView = new WebView(activity);
-        webView.setWebViewClient(new AppWebViewClient());
-        webView.getSettings().setJavaScriptEnabled(true);
-        layout.addView(webView,
-                new LayoutParams(
-                        LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
-        isWebViewShown = true;
-    }
-
-    /**
-     * Hide the app's WebView instance. This should be called if the
-     * WebView instance is visible and the app wants to open another
-     * WebView instance (e.g. for a Facebook dialog). Android doesn't
-     * seem to be able to handle more than one WebView instance per
-     * application.
-     */
-    public void hideWebView() {
-        layout.removeView(webView);
-        isWebViewShown = false;
-    }
-
-    /**
-     * Returns true if the WebView instance is visible.
-     */
-    public boolean isWebViewShown() {
-        return isWebViewShown;
-    }
-
-    /**
-     * Loads the html string into the WebView instance.
-     * 
-     * @param html
-     */
-    public void loadData(String html) {
-        webView.loadDataWithBaseURL(
-                "http://nada", html, "text/html", "utf8", "");
-    }
-
-    /**
-     * Loads a file from the assets directory into the
-     * WebView instance.
-     * 
-     * @param file
-     */
-    public void loadFile(String file) {
-        webView.loadUrl(getAbsoluteUrl(file));
-    }
-
-    /**
-     * Returns the absolute URL for a local file.
-     * 
-     * @param file
-     */
-    public static String getAbsoluteUrl(String file) {
-        return "file:///android_asset/" + file;
-    }
-
-    /**
-     * Returns the Dispatcher's WebView instance.
-     */
-    public WebView getWebView() {
-        return webView;
-    }
-
-    /**
-     * Returns the Dispatcher's Activity
-     */
-    public Activity getActivity() {
-        return activity;
-    }
-
-
-    /**
-     * Enables the mapping of app:// urls to Handlers.
-     * 
-     * @author yariv
-     */
-    private class AppWebViewClient extends WebViewClient {
-
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            if (url.startsWith("app://")) {
-                String handlerName = url.substring(6);
-                runHandler(handlerName);
-                return true;	
-            }
-            return false;
-        }        
-    }
-
-}
diff --git a/examples/stream/src/com/facebook/stream/FileIO.java b/examples/stream/src/com/facebook/stream/FileIO.java
deleted file mode 100644
index 8ea21b80c..000000000
--- a/examples/stream/src/com/facebook/stream/FileIO.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.InputStreamReader;
-
-import android.app.Activity;
-
-/**
- * Helpers for doing basic file IO.
- * 
- * @author yariv
- *
- */
-public class FileIO {
-
-    /**
-     * Write the data to the file indicate by fileName. The file is created
-     * if it doesn't exist.
-     * 
-     * @param activity
-     * @param data
-     * @param fileName
-     * @throws IOException
-     */
-    public static void write(
-            Activity activity, String data, String fileName)
-            throws IOException {
-        FileOutputStream fo = activity.openFileOutput(fileName, 0);
-        BufferedWriter bf = new BufferedWriter(new FileWriter(fo.getFD()));
-        bf.write(data);
-        bf.flush();
-        bf.close();
-    }
-
-    /**
-     * Read the contents of the file indicated by fileName
-     * 
-     * @param activity
-     * @param fileName
-     * @return the contents
-     * @throws IOException
-     */
-    public static String read(Activity activity, String fileName) 
-            throws IOException {
-        FileInputStream is = activity.openFileInput(fileName);
-        BufferedReader br = new BufferedReader(new InputStreamReader(is));
-        StringBuilder sb = new StringBuilder();
-        while (br.ready()) {
-            String line = br.readLine();
-            sb.append(line);
-        }
-        String data = sb.toString();
-        return data;
-    }
-}
diff --git a/examples/stream/src/com/facebook/stream/Handler.java b/examples/stream/src/com/facebook/stream/Handler.java
deleted file mode 100644
index 1c682c653..000000000
--- a/examples/stream/src/com/facebook/stream/Handler.java
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import android.app.Activity;
-import android.webkit.WebView;
-
-/**
- * An abstract superclass for handlers. Handlers are similar to
- * controllers in traditional web apps. Each page has a handler
- * that is responsible for rendering the page.
- * 
- * @author yariv
- */
-public abstract class Handler {
-
-    // The app's dispatcher.
-    protected Dispatcher dispatcher;
-
-    /**
-     * The dispatcher calls this method when the Handler
-     * is expected to render its page.
-     */
-    public abstract void go();
-
-    /**
-     * A setter for the dispatcher.
-     * 
-     * @param dispatcher
-     */
-    public void setDispatcher(Dispatcher dispatcher) {
-        this.dispatcher = dispatcher;
-    }
-
-    /**
-     * Returns the dispatcher.
-     */
-    public Dispatcher getDispatcher() {
-        return dispatcher;
-    }
-
-
-    /**
-     * Returns the dispatcher's WebView
-     */
-    public WebView getWebView() {
-        return dispatcher.getWebView();
-    }
-
-    /**
-     * Returns the dispatcher's Activity
-     */
-    public Activity getActivity() {
-        return dispatcher.getActivity();
-    }
-}
diff --git a/examples/stream/src/com/facebook/stream/LoginHandler.java b/examples/stream/src/com/facebook/stream/LoginHandler.java
deleted file mode 100644
index 0e2ef34ae..000000000
--- a/examples/stream/src/com/facebook/stream/LoginHandler.java
+++ /dev/null
@@ -1,126 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import org.json.JSONObject;
-
-import android.app.Activity;
-import android.os.Bundle;
-import android.util.Log;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.DialogError;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Facebook.DialogListener;
-
-/**
- * A handler for the login page.
- * 
- * @author yariv
- */
-public class LoginHandler extends Handler {
-
-    // The permissions that the app should request from the user
-    // when the user authorizes the app.
-    private static String[] PERMISSIONS = 
-        new String[] { "offline_access", "read_stream", "publish_stream" };
-
-    /**
-     * Render the Login page.
-     */
-    public void go() {
-        dispatcher.getWebView().addJavascriptInterface(
-                new JsHandler(), "app");
-        dispatcher.loadFile("login.html");
-    }
-
-    /**
-     * Contains functions that are exported to the Javascript context
-     * in Login.html
-     * 
-     * @author yariv
-     */
-    private class JsHandler {
-
-        /**
-         * Opens the Facebook login dialog.
-         */
-        public void login() {
-            final Activity activity = LoginHandler.this.getActivity();
-            activity.runOnUiThread(new Runnable() {
-                public void run() {
-                    // We need to temporarily remove the app's WebView
-                    // instance because Android apparently doesn't support
-                    // multiple WebView instances in the same app.
-                    dispatcher.hideWebView();
-                    final Facebook fb = new Facebook(App.FB_APP_ID);
-                    Session.waitForAuthCallback(fb);
-                    fb.authorize(getActivity(), PERMISSIONS,
-                                 new AppLoginListener(fb));
-                }
-            });
-        }
-
-        private class AppLoginListener implements DialogListener {
-
-            private Facebook fb;
-
-            public AppLoginListener(Facebook fb) {
-                this.fb = fb;
-            }
-
-            public void onCancel() {
-                Log.d("app", "login canceled");
-            }
-
-            public void onComplete(Bundle values) {
-                /**
-                 * We request the user's info so we can cache it locally and
-                 * use it to render the new html snippets
-                 * when the user updates her status or comments on a post. 
-                 */
-                new AsyncFacebookRunner(fb).request("/me", 
-                        new AsyncRequestListener() {
-                    public void onComplete(JSONObject obj, final Object state) {
-                        // save the session data
-                        String uid = obj.optString("id");
-                        String name = obj.optString("name");
-                        new Session(fb, uid, name).save(getActivity());
-
-                        // render the Stream page in the UI thread
-                        getActivity().runOnUiThread(new Runnable() {
-                            public void run() {
-                                dispatcher.showWebView();
-                                dispatcher.runHandler("stream");
-                            }
-                        });
-                    }
-                }, null);
-            }
-
-            public void onError(DialogError e) {
-                Log.d("app", "dialog error: " + e);               
-            }
-
-            public void onFacebookError(FacebookError e) {
-                Log.d("app", "facebook error: " + e);
-            }
-        }
-    }
-
-}
diff --git a/examples/stream/src/com/facebook/stream/LogoutHandler.java b/examples/stream/src/com/facebook/stream/LogoutHandler.java
deleted file mode 100644
index dc3f94ef7..000000000
--- a/examples/stream/src/com/facebook/stream/LogoutHandler.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import android.util.Log;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-/**
- * A handler for the logout link. This handler doesn't render
- * its own page. After logging out it redirects the user
- * to the login handler.
- * 
- * @author yariv
- */
-public class LogoutHandler extends Handler {
-
-    /**
-     * Called by the dispatcher when the user clicks 'logout'.
-     */
-    public void go() {
-        Facebook fb = Session.restore(getActivity()).getFb();
-
-        // clear the local session data
-        Session.clearSavedSession(getActivity());
-        new AsyncFacebookRunner(fb).logout(getActivity(), 
-                new RequestListener() {
-
-            public void onComplete(String response, final Object state) {
-                dispatcher.runHandler("login");
-            }
-
-            public void onFileNotFoundException(FileNotFoundException error,
-                                                final Object state) {
-                Log.e("app", error.toString());
-                dispatcher.runHandler("login");
-            }
-
-            public void onIOException(IOException error, final Object state) {
-                Log.e("app", error.toString());
-                dispatcher.runHandler("login");            
-            }
-
-            public void onMalformedURLException(MalformedURLException error,
-                                                final Object state) {
-                Log.e("app", error.toString());
-                dispatcher.runHandler("login");
-            }
-
-            public void onFacebookError(FacebookError error,
-                                        final Object state) {
-                Log.e("app", error.toString());
-                dispatcher.runHandler("login");
-            }
-        });
-    }
-}
diff --git a/examples/stream/src/com/facebook/stream/Session.java b/examples/stream/src/com/facebook/stream/Session.java
deleted file mode 100644
index f1af9ae74..000000000
--- a/examples/stream/src/com/facebook/stream/Session.java
+++ /dev/null
@@ -1,174 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
-
-import com.facebook.android.Facebook;
-
-/**
- * A utility class for storing and retrieving Facebook session data.
- * 
- * @author yariv
- */
-public class Session {
-
-    private static final String TOKEN = "access_token";
-    private static final String EXPIRES = "expires_in";
-    private static final String KEY = "facebook-session";
-    private static final String UID = "uid";
-    private static final String NAME = "name";
-    private static final String APP_ID = "app_id";
-
-    private static Session singleton;
-    private static Facebook fbLoggingIn;
-
-    // The Facebook object
-    private Facebook fb;
-
-    // The user id of the logged in user
-    private String uid;
-
-    // The user name of the logged in user
-    private String name;
-
-    /**
-     * Constructor
-     * 
-     * @param fb
-     * @param uid
-     * @param name
-     */
-    public Session(Facebook fb, String uid, String name) {
-        this.fb = fb;
-        this.uid = uid;
-        this.name = name;
-    }
-
-    /**
-     * Returns the Facebook object
-     */
-    public Facebook getFb() {
-        return fb;
-    }
-
-    /**
-     * Returns the session user's id
-     */
-    public String getUid() {
-        return uid;
-    }
-
-    /**
-     * Returns the session user's name 
-     */
-    public String getName() {
-        return name;
-    }
-
-    /**
-     * Stores the session data on disk.
-     * 
-     * @param context
-     * @return
-     */
-    public boolean save(Context context) {
-
-        Editor editor =
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.putString(TOKEN, fb.getAccessToken());
-        editor.putLong(EXPIRES, fb.getAccessExpires());
-        editor.putString(UID, uid);
-        editor.putString(NAME, name);
-        editor.putString(APP_ID, fb.getAppId());
-        if (editor.commit()) {
-            singleton = this;
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * Loads the session data from disk.
-     * 
-     * @param context
-     * @return
-     */
-    public static Session restore(Context context) {
-        if (singleton != null) {
-            if (singleton.getFb().isSessionValid()) {
-                return singleton;
-            } else {
-                return null;
-            }
-        }
-
-        SharedPreferences prefs =
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE);
-        
-        String appId = prefs.getString(APP_ID, null);
-        
-        if (appId == null) {
-        	return null;
-        }
-        
-        Facebook fb = new Facebook(appId);
-        fb.setAccessToken(prefs.getString(TOKEN, null));
-        fb.setAccessExpires(prefs.getLong(EXPIRES, 0));
-        String uid = prefs.getString(UID, null);
-        String name = prefs.getString(NAME, null);
-        if (!fb.isSessionValid() || uid == null || name == null) {
-            return null;
-        }
-
-        Session session = new Session(fb, uid, name);
-        singleton = session;
-        return session;
-    }
-
-    /**
-     * Clears the saved session data.
-     * 
-     * @param context
-     */
-    public static void clearSavedSession(Context context) {
-        Editor editor = 
-            context.getSharedPreferences(KEY, Context.MODE_PRIVATE).edit();
-        editor.clear();
-        editor.commit();
-        singleton = null;
-    }
-
-    /**
-     * Freezes a Facebook object while it's waiting for an auth callback.
-     */
-    public static void waitForAuthCallback(Facebook fb) {
-        fbLoggingIn = fb;
-    }
-
-    /**
-     * Returns a Facebook object that's been waiting for an auth callback.
-     */
-    public static Facebook wakeupForAuthCallback() {
-        Facebook fb = fbLoggingIn;
-        fbLoggingIn = null;
-        return fb;
-    }
-
-}
diff --git a/examples/stream/src/com/facebook/stream/StreamHandler.java b/examples/stream/src/com/facebook/stream/StreamHandler.java
deleted file mode 100644
index b97c84f78..000000000
--- a/examples/stream/src/com/facebook/stream/StreamHandler.java
+++ /dev/null
@@ -1,118 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.util.Log;
-
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.Facebook;
-import com.facebook.android.FacebookError;
-import com.facebook.android.Util;
-import com.facebook.android.AsyncFacebookRunner.RequestListener;
-
-/**
- * A handler for the stream page. It's responsible for
- * fetching the stream data from the API and storing it
- * in a local file based cache. It uses the helper class
- * StreamRenderer to render the stream.
- *  
- * @author yariv
- */
-public class StreamHandler extends Handler {
-
-    private static final String CACHE_FILE = "cache.txt";
-
-    /**
-     * Called by the dispatcher to render the stream page.
-     */
-    public void go() {
-        dispatcher.getWebView().addJavascriptInterface(
-                new StreamJsHandler(this), "app");
-
-        // first try to load the cached data
-        try {
-            String cached = FileIO.read(getActivity(), CACHE_FILE);
-            if (cached != null) {
-                JSONObject obj = new JSONObject(cached);
-                dispatcher.loadData(StreamRenderer.render(obj));
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-        } catch (JSONException e) {
-            e.printStackTrace();
-        }
-
-        Facebook fb = Session.restore(getActivity()).getFb();
-        new AsyncFacebookRunner(fb).request("me/home", 
-                new StreamRequestListener());
-    }
-
-    public class StreamRequestListener implements RequestListener {
-
-        public void onComplete(String response, final Object state) {
-            try {
-                JSONObject obj = Util.parseJson(response);
-                // try to cache the result
-                try {
-                    FileIO.write(getActivity(), response, CACHE_FILE);
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-
-                // Convert the result into an HTML string and then load it
-                // into the WebView in the UI thread.
-                final String html = StreamRenderer.render(obj);
-                getActivity().runOnUiThread(new Runnable() {
-                    public void run() {
-                        dispatcher.loadData(html);
-                    }
-                });
-
-            } catch (JSONException e) {
-                Log.e("stream", "JSON Error:" + e.getMessage());
-            } catch (FacebookError e) {
-                Log.e("stream", "Facebook Error:" + e.getMessage());
-            }
-        }
-
-        public void onFacebookError(FacebookError e, final Object state) {
-            Log.e("stream", "Facebook Error:" + e.getMessage());
-        }
-
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            final Object state) {
-            Log.e("stream", "Resource not found:" + e.getMessage());      
-        }
-
-        public void onIOException(IOException e, final Object state) {
-            Log.e("stream", "Network Error:" + e.getMessage());      
-        }
-
-        public void onMalformedURLException(MalformedURLException e,
-                                            final Object state) {
-            Log.e("stream", "Invalid URL:" + e.getMessage());            
-        }
-
-    }
-}
diff --git a/examples/stream/src/com/facebook/stream/StreamJsHandler.java b/examples/stream/src/com/facebook/stream/StreamJsHandler.java
deleted file mode 100644
index a1f633edf..000000000
--- a/examples/stream/src/com/facebook/stream/StreamJsHandler.java
+++ /dev/null
@@ -1,205 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.text.SimpleDateFormat;
-import java.util.Date;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.os.Bundle;
-import com.facebook.android.AsyncFacebookRunner;
-import com.facebook.android.Facebook;
-
-/**
- * Implements functions that can be called from Javascript in the
- * stream page.
- * 
- * @author yariv
- */
-class StreamJsHandler {
-
-    // The handler for the Stream page
-    private final StreamHandler streamHandler;
-
-    /**
-     * @param streamHandler
-     */
-    StreamJsHandler(StreamHandler streamHandler) {
-        this.streamHandler = streamHandler;
-    }
-
-    /**
-     * Returns the Facebook object.
-     */
-    private AsyncFacebookRunner getFb() {
-        Facebook fb = Session.restore(streamHandler.getActivity()).getFb();
-        return new AsyncFacebookRunner(fb);
-    }
-
-    /**
-     * Update the status and render the resulting status at the
-     * top of the stream.
-     *  
-     * @param message
-     */
-    public void updateStatus(final String message) {
-        AsyncFacebookRunner fb = getFb();
-        Bundle params = new Bundle();
-        params.putString("message", message);
-        fb.request("me/feed", params, "POST", new AsyncRequestListener() {
-
-            public void onComplete(JSONObject obj, final Object state) {
-                String html;
-                try {
-                    html = renderStatus(obj, message);
-                    html = html.replace("'", "\\\'");
-                    callJs("onStatusUpdated('" + html + "');");
-                } catch (JSONException e) {
-                    // TODO Auto-generated catch block
-                    e.printStackTrace();
-                }
-            }
-        }, null);
-    }
-
-    /**
-     * Renders the html for the new status.
-     * 
-     * @param response
-     * @param message
-     * @return
-     * @throws JSONException
-     */
-    private String renderStatus(JSONObject response, String message)
-            throws JSONException {
-
-        String postId = response.getString("id");
-        JSONObject post = new JSONObject();
-        post.put("id", postId);
-        post.put("message", message);
-
-        JSONObject from = createAuthorObj();
-        post.put("from", from);
-
-        JSONArray actions = new JSONArray();
-        JSONObject like = new JSONObject();
-        like.put("name", "Like");
-        actions.put(like);
-
-        JSONObject comment = new JSONObject();
-        comment.put("name", "Comment");
-        actions.put(comment);
-
-        post.put("actions", actions);
-
-        SimpleDateFormat format = StreamRenderer.getDateFormat();
-        String timestamp = format.format(new Date());
-        post.put("created_time", timestamp);
-
-        String html = StreamRenderer.renderSinglePost(post);
-        return html;
-    }
-
-    /**
-     * Like or unlike a post
-     * 
-     * @param post_id
-     * @param val if the action should be a like (true) or an unlike (false)
-     */
-    public void like(final String post_id, final boolean val) {
-        Bundle params = new Bundle();
-        if (!val) {
-            params.putString("method", "delete");
-        }
-        getFb().request(post_id + "/likes", new Bundle(), "POST",
-                new AsyncRequestListener() {
-
-            public void onComplete(JSONObject response, final Object state) {
-                callJs("javascript:onLike('" + post_id + "'," + val + ")");
-            }
-        }, null);
-    }
-
-
-    public void postComment(final String post_id, final String message) {
-        Bundle params = new Bundle();
-        params.putString("message", message);
-
-        getFb().request(post_id + "/comments", params, "POST",
-                new AsyncRequestListener() {
-
-            public void onComplete(JSONObject response, final Object state) {
-
-                try {
-                    String html = renderComment(response, message);
-                    html = html.replace("'", "\\'");
-                    callJs("onComment('" + post_id + "','" + html + "');");
-                } catch (JSONException e) {
-                    e.printStackTrace();
-                }
-
-            }
-        }, null);
-    }
-
-    /**
-     * Renders the html string for a new comment.
-     * 
-     * @param response
-     * @param message
-     * @return
-     * @throws JSONException
-     */
-    private String renderComment(JSONObject response, String message)
-            throws JSONException {
-
-        JSONObject comment = new JSONObject();
-        String commentId = response.getString("id");
-        comment.put("id", commentId);
-        comment.put("from", createAuthorObj());
-        comment.put("message", message);
-
-        String html = StreamRenderer.renderSingleComment(comment);
-        return html;
-    }
-
-    /**
-     * Executes javascript code inside WebKit.
-     * 
-     * @param js
-     */
-    private void callJs(String js) {
-        streamHandler.getWebView().loadUrl("javascript:" + js);
-    }
-
-    /**
-     * Creates a JSONObject for the post or comment author.
-     *  
-     * @return
-     * @throws JSONException
-     */
-    private JSONObject createAuthorObj() throws JSONException {
-        Session session = Session.restore(streamHandler.getActivity());
-        JSONObject from = new JSONObject();
-        from.put("id", session.getUid());
-        from.put("name", session.getName());
-        return from;
-    }
-}
\ No newline at end of file
diff --git a/examples/stream/src/com/facebook/stream/StreamRenderer.java b/examples/stream/src/com/facebook/stream/StreamRenderer.java
deleted file mode 100644
index b7a470416..000000000
--- a/examples/stream/src/com/facebook/stream/StreamRenderer.java
+++ /dev/null
@@ -1,538 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- * 
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.stream;
-
-import java.text.ParsePosition;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.HashSet;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import android.util.Log;
-
-/**
- * Contains logic for converting a JSONObject obtained from
- * querying /me/home to a HTML string that can be rendered
- * in WebKit.
- * 
- * @author yariv
- */
-class StreamRenderer {
-
-    private StringBuilder sb;
-
-    /**
-     * The main function for rendering the stream JSONObject.
-     * 
-     * @param data
-     * @return
-     */
-    public static String render(JSONObject data) {
-        StreamRenderer renderer = new StreamRenderer();
-        return renderer.doRender(data);
-    }
-
-    /**
-     * Renders the HTML for a single post.
-     * 
-     * @param post
-     * @return
-     * @throws JSONException
-     */
-    public static String renderSinglePost(JSONObject post)
-            throws JSONException {
-
-        StreamRenderer renderer = new StreamRenderer();
-        renderer.renderPost(post);
-        return renderer.getResult();
-    }
-
-    /**
-     * Renders the HTML for a single comment.
-     * 
-     * @param comment
-     * @return
-     */
-    public static String renderSingleComment(JSONObject comment) {
-        StreamRenderer renderer = new StreamRenderer();
-        renderer.renderComment(comment);
-        return renderer.getResult();
-    }
-
-
-    private StreamRenderer() {
-        this.sb = new StringBuilder();
-    }
-
-    /**
-     * Returns a SimpleDateFormat object we use for
-     * parsing and rendering timestamps.
-     * 
-     * @return
-     */
-    public static SimpleDateFormat getDateFormat() {
-        return new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ssZ");
-    }
-
-    /**
-     * Returns the result html.
-     * 
-     * @return
-     */
-    private String getResult() {
-        return sb.toString();
-    }
-
-    private String doRender(JSONObject data) {
-
-        try {
-            JSONArray posts = data.getJSONArray("data");
-            String[] chunks = {
-                "<html><head>",
-                "<link rel=\"stylesheet\" " +
-                "href=\"file:///android_asset/stream.css\" type=\"text/css\">",
-                "<script src=\"file:///android_asset/stream.js\"></script>",
-                "</head>",
-                "<body>",
-                "<div id=\"header\">"
-            };
-            append(chunks);
-            renderLink("app://logout", "logout");
-
-            renderStatusBox();
-
-            append("<div id=\"posts\">");
-            for (int i = 0; i < posts.length(); i++) {
-                renderPost(posts.getJSONObject(i));
-            }
-            append("</div></body></html>");
-            return getResult();
-        } catch (JSONException e) {
-            // TODO Auto-generated catch block
-            e.printStackTrace();
-            return "";
-        }
-    }
-
-    /**
-     * Renders the "what's on your mind?" box and the Share button.
-     */
-    private void renderStatusBox() {
-        String[] chunks = new String[] {
-            "</div><div class=\"clear\"></div>",
-            "<div id=\"status_box\">",
-            "<input id=\"status_input\" value=\" What's on your mind?\"",
-            " onfocus=\"onStatusBoxFocus(this);\"/>",
-            "<button id=\"status_submit\" class=\"hidden\" " +
-            "onclick=\"updateStatus();\">Share</button>",
-            "<div class=\"clear\"></div>",
-            "</div>"
-        };
-        append(chunks);
-    }
-
-    /**
-     * Renders a single post
-     * 
-     * @param post
-     * @throws JSONException
-     */
-    private void renderPost(JSONObject post) throws JSONException {
-        append("<div class=\"post\">");
-        renderFrom(post);
-        renderTo(post);
-        renderMessage(post);
-        renderAttachment(post);
-        renderActionLinks(post);
-        renderLikes(post);
-        renderComments(post);
-        renderCommentBox(post);
-        append("</div>");
-    }
-
-
-    /**
-     * Renders the author's name
-     * 
-     * @param post
-     * @throws JSONException
-     */
-    private void renderFrom(JSONObject post) throws JSONException {
-        JSONObject from = post.getJSONObject("from");
-        String fromName = from.getString("name");
-        String fromId = from.getString("id");
-        renderAuthor(fromId, fromName);
-    }
-
-    /**
-     * If it's a wall post on a friend's fall, renders
-     * the recipient's name preceded by a '>'.
-     * 
-     * @param post
-     * @throws JSONException
-     */
-    private void renderTo(JSONObject post) throws JSONException {
-        JSONObject to = post.optJSONObject("to");
-        if (to != null) {
-            JSONObject toData = to.getJSONArray("data").getJSONObject(0);
-            String toName = toData.getString("name");
-            String toId = toData.getString("id");
-            append(" > ");
-            renderProfileLink(toId, toName);
-        }
-    }
-
-    /**
-     * Renders a link to a user.
-     * 
-     * @param id
-     * @param name
-     */
-    private void renderProfileLink(String id, String name) {
-        renderLink(getProfileUrl(id), name);
-    }
-
-    private String getProfileUrl(String id) {
-        return "http://touch.facebook.com/#/profile.php?id=" + id;
-    }
-
-    /**
-     * Renders the author pic and name.
-     * 
-     * @param id
-     * @param name
-     */
-    private void renderAuthor(String id, String name) {
-        String[] chunks = {
-            "<div class=\"profile_pic_container\">",
-            "<a href=\"", getProfileUrl(id),
-            "\"><img class=\"profile_pic\" src=\"http://graph.facebook.com/",
-            id, "/picture\"/></a>",
-            "</div>"
-        };
-        append(chunks);
-        renderProfileLink(id, name);
-    }
-
-    /**
-     * Renders the post message.
-     * 
-     * @param post
-     */
-    private void renderMessage(JSONObject post) {
-        String message = post.optString("message");
-        String[] chunks = {
-            "&nbsp;<span class=\"msg\">", message, "</span>",
-            "<div class=\"clear\"></div>"
-        };
-        append(chunks);
-    }
-
-    /**
-     * Renders the attachment.
-     * 
-     * @param post
-     */
-    private void renderAttachment(JSONObject post) {
-        String name = post.optString("name");
-        String link = post.optString("link");
-        String picture = post.optString("picture");
-        String source = post.optString("source"); // for videos
-        String caption = post.optString("caption");
-        String description = post.optString("description");
-
-        String[] fields = new String[] {
-                name, link, picture, source, caption, description
-        };
-        boolean hasAttachment = false;
-        for (String field : fields) {
-            if (field.length() != 0) {
-                hasAttachment = true;
-                break;
-            }
-        }
-
-        if (!hasAttachment) {
-            return;
-        }
-
-        append("<div class=\"attachment\">");
-        if (name != "") {
-            append("<div class=\"title\">");
-            if (link != null) {
-                renderLink(link, name);
-            } else {
-                append(name);
-            }
-            append("</div>");
-        }
-        if (caption != "") {
-            append("<div class=\"caption\">" + caption + "</div>");
-        }
-
-        if (picture != "") {
-            append("<div class=\"picture\">");
-            String img = "<img src=\"" + picture + "\"/>";
-            if (link != "") {
-                renderLink(link, img);
-            } else {
-                append(img);
-            }
-            append("</div>");
-        }
-
-        if (description != "") {
-            append("<div class=\"description\">" + description + "</div>");
-        }
-        append("<div class=\"clear\"></div></div>");
-    }
-
-    /**
-     * Renders an anchor tag
-     *  
-     * @param href
-     * @param text
-     */
-    private void renderLink(String href, String text) {
-        append(new String[] {
-            "<a href=\"",
-            href,
-            "\">",
-            text,
-            "</a>"
-        });
-    }
-
-    /**
-     * Renders the posts' action links.
-     * 
-     * @param post
-     */
-    private void renderActionLinks(JSONObject post) {
-        HashSet<String> actions = getActions(post);
-        append("<div class=\"action_links\">");
-        append("<div class=\"action_link\">");
-        renderTimeStamp(post);
-        append("</div>");
-        String post_id = post.optString("id");
-        if (actions.contains("Comment")) {
-            renderActionLink(post_id, "Comment", "comment");
-        }
-        boolean canLike = actions.contains("Like");
-        renderActionLink(post_id, "Like", "like", canLike);
-        renderActionLink(post_id, "Unlike", "unlike", !canLike);
-
-        append("<div class=\"clear\"></div></div>");
-    }
-
-    /**
-     * Renders a single visible action link.
-     *  
-     * @param post_id
-     * @param title
-     * @param func
-     */
-    private void renderActionLink(String post_id, String title, String func) { 
-        renderActionLink(post_id, title, func, true);
-    }
-
-    /**
-     * Renders an action link with optional visibility.
-     * 
-     * @param post_id
-     * @param title
-     * @param func
-     * @param visible
-     */
-    private void renderActionLink(String post_id, String title, String func, 
-            boolean visible) {
-        String extraClass = visible ? "" : "hidden";
-        String[] chunks = new String[] {
-            "<div id=\"", func, post_id, "\" class=\"action_link ", 
-            extraClass, "\">", "<a href=\"#\" onclick=\"",func, "('",
-            post_id, "'); return false;\">", title, "</a></div>"
-        };
-        append(chunks);
-    }
-
-    /**
-     * Renders the post's timestamp.
-     * 
-     * @param post
-     */
-    private void renderTimeStamp(JSONObject post) {
-        String dateStr = post.optString("created_time");
-        SimpleDateFormat formatter = getDateFormat();
-        ParsePosition pos = new ParsePosition(0);
-        long then  = formatter.parse(dateStr, pos).getTime();
-        long now = new Date().getTime();
-
-        long seconds = (now - then)/1000;
-        long minutes = seconds/60;
-        long hours = minutes/60;
-        long days = hours/24;
-
-        String friendly = null;
-        long num = 0;
-        if (days > 0) {
-            num = days;
-            friendly = days + " day";
-        } else if (hours > 0) {
-            num = hours;
-            friendly = hours + " hour";
-        } else if (minutes > 0) {
-            num = minutes;
-            friendly = minutes + " minute";
-        } else {
-            num = seconds;
-            friendly = seconds + " second";
-        }
-        if (num > 1) {
-            friendly += "s";
-        }
-        String[] chunks = new String[] {
-            "<div class=\"timestamp\">",
-            friendly,
-            " ago",
-            "</div>"
-        };
-        append(chunks);
-    }
-
-    /**
-     * Returns the available actions for the post.
-     * 
-     * @param post
-     * @return
-     */
-    private HashSet<String> getActions(JSONObject post) {
-        HashSet<String> actionsSet = new HashSet<String>();
-        JSONArray actions = post.optJSONArray("actions");
-        if (actions != null) {
-            for (int j = 0; j < actions.length(); j++) {
-                JSONObject action = actions.optJSONObject(j);
-                String actionName = action.optString("name");
-                actionsSet.add(actionName);
-            }
-        }
-        return actionsSet;
-    }
-
-    /**
-     * Renders the 'x people like this' text,
-     * 
-     * @param post
-     */
-    private void renderLikes(JSONObject post) {
-        int numLikes = post.optInt("likes", 0);
-        if (numLikes > 0) {
-            String desc = numLikes == 1 ?
-                "person likes this" :
-                "people like this";
-            String[] chunks = new String[] {
-                "<div class=\"like_icon\">",
-                "<img src=\"file:///android_asset/like_icon.png\"/>",
-                "</div>",
-                "<div class=\"num_likes\">",
-                new Integer(numLikes).toString(),
-                " ",
-                desc,
-                "</div>"
-            };
-            append(chunks);
-        }
-    }
-
-    /**
-     * Renders the post's comments.
-     * 
-     * @param post
-     * @throws JSONException
-     */
-    private void renderComments(JSONObject post) throws JSONException {
-        append("<div class=\"comments\" id=\"comments" + post.optString("id")
-                + "\">");
-        JSONObject comments = post.optJSONObject("comments");
-        if (comments != null) {
-            JSONArray data = comments.optJSONArray("data");
-            if (data != null) {
-                for (int j = 0; j < data.length(); j++) {
-                    JSONObject comment = data.getJSONObject(j);
-                    renderComment(comment);
-                }
-            }
-        }
-        append("</div>");
-    }
-
-    /**
-     * Renders an individual comment.
-     * 
-     * @param comment
-     */
-    private void renderComment(JSONObject comment) {
-        JSONObject from = comment.optJSONObject("from");
-        if (from == null) {
-            Log.w("StreamRenderer",
-                    "Comment missing from field: " + comment.toString());
-        } else {
-            String authorId = from.optString("id");
-            String authorName = from.optString("name");
-            renderAuthor(authorId, authorName);
-        }
-        String message = comment.optString("message");
-        append("<div class=\"comment\">");
-        String[] chunks = {
-            "&nbsp;",
-            message,
-            "</div>"
-        };	
-        append(chunks);
-    }
-
-
-    /**
-     * Renders the new comment input box.
-     * 
-     * @param post
-     */
-    private void renderCommentBox(JSONObject post) {
-        String id = post.optString("id");
-        String[] chunks = new String[] {
-            "<div class=\"comment_box\" id=\"comment_box", id, "\">",
-            "<input id=\"comment_box_input", id, "\"/>",
-            "<button onclick=\"postComment('", id , "');\">Post</button>",
-            "<div class=\"clear\"></div>",
-            "</div>"
-        };
-        append(chunks);
-    }
-
-
-    private void append(String str) {
-        sb.append(str);
-    }
-
-    private void append(String[] chunks) {
-        for (String chunk : chunks) {
-            sb.append(chunk);
-        }
-    }
-}
\ No newline at end of file
diff --git a/facebook/.classpath b/facebook/.classpath
new file mode 100644
index 000000000..c5c5afd01
--- /dev/null
+++ b/facebook/.classpath
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="lib" path="libs/android-support-v4.jar"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/facebook/.project b/facebook/.project
new file mode 100644
index 000000000..d0551a112
--- /dev/null
+++ b/facebook/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>FacebookSDK</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/facebook/src/com/facebook/android/AsyncFacebookRunner.java b/facebook/src/com/facebook/android/AsyncFacebookRunner.java
deleted file mode 100644
index be3870a1a..000000000
--- a/facebook/src/com/facebook/android/AsyncFacebookRunner.java
+++ /dev/null
@@ -1,316 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import android.content.Context;
-import android.os.Bundle;
-
-/**
- * A sample implementation of asynchronous API requests. This class provides
- * the ability to execute API methods and have the call return immediately,
- * without blocking the calling thread. This is necessary when accessing the
- * API in the UI thread, for instance. The request response is returned to 
- * the caller via a callback interface, which the developer must implement.
- *
- * This sample implementation simply spawns a new thread for each request,
- * and makes the API call immediately.  This may work in many applications,
- * but more sophisticated users may re-implement this behavior using a thread
- * pool, a network thread, a request queue, or other mechanism.  Advanced
- * functionality could be built, such as rate-limiting of requests, as per
- * a specific application's needs.
- *
- * @see RequestListener
- *        The callback interface.
- *
- * @author  Jim Brusstar (jimbru@fb.com),
- *          Yariv Sadan (yariv@fb.com),
- *          Luke Shepard (lshepard@fb.com)
- */
-public class AsyncFacebookRunner {
-
-    Facebook fb;
-
-    public AsyncFacebookRunner(Facebook fb) {
-        this.fb = fb;
-    }
-
-    /**
-     * Invalidate the current user session by removing the access token in
-     * memory, clearing the browser cookies, and calling auth.expireSession
-     * through the API. The application will be notified when logout is
-     * complete via the callback interface.
-     *
-     * Note that this method is asynchronous and the callback will be invoked
-     * in a background thread; operations that affect the UI will need to be
-     * posted to the UI thread or an appropriate handler.
-     *
-     * @param context
-     *            The Android context in which the logout should be called: it
-     *            should be the same context in which the login occurred in
-     *            order to clear any stored cookies
-     * @param listener
-     *            Callback interface to notify the application when the request
-     *            has completed.
-     * @param state
-     *            An arbitrary object used to identify the request when it
-     *            returns to the callback. This has no effect on the request
-     *            itself.
-     */
-    public void logout(final Context context,
-                       final RequestListener listener,
-                       final Object state) {
-        new Thread() {
-            @Override public void run() {
-                try {
-                    String response = fb.logout(context);
-                    if (response.length() == 0 || response.equals("false")){
-                        listener.onFacebookError(new FacebookError(
-                                "auth.expireSession failed"), state);
-                        return;
-                    }
-                    listener.onComplete(response, state);
-                } catch (FileNotFoundException e) {
-                    listener.onFileNotFoundException(e, state);
-                } catch (MalformedURLException e) {
-                    listener.onMalformedURLException(e, state);
-                } catch (IOException e) {
-                    listener.onIOException(e, state);
-                }
-            }
-        }.start();
-    }
-
-    public void logout(final Context context, final RequestListener listener) {
-        logout(context, listener, /* state */ null);
-    }
-
-    /**
-     * Make a request to Facebook's old (pre-graph) API with the given
-     * parameters. One of the parameter keys must be "method" and its value
-     * should be a valid REST server API method.
-     *
-     * See http://developers.facebook.com/docs/reference/rest/
-     *
-     * Note that this method is asynchronous and the callback will be invoked
-     * in a background thread; operations that affect the UI will need to be
-     * posted to the UI thread or an appropriate handler.
-     *
-     * Example:
-     * <code>
-     *  Bundle parameters = new Bundle();
-     *  parameters.putString("method", "auth.expireSession", new Listener());
-     *  String response = request(parameters);
-     * </code>
-     *
-     * @param parameters
-     *            Key-value pairs of parameters to the request. Refer to the
-     *            documentation: one of the parameters must be "method".
-     * @param listener
-     *            Callback interface to notify the application when the request
-     *            has completed.
-     * @param state
-     *            An arbitrary object used to identify the request when it
-     *            returns to the callback. This has no effect on the request
-     *            itself.
-     */
-    public void request(Bundle parameters,
-                        RequestListener listener,
-                        final Object state) {
-        request(null, parameters, "GET", listener, state);
-    }
-
-    public void request(Bundle parameters, RequestListener listener) {
-        request(null, parameters, "GET", listener, /* state */ null);
-    }
-
-    /**
-     * Make a request to the Facebook Graph API without any parameters.
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method is asynchronous and the callback will be invoked
-     * in a background thread; operations that affect the UI will need to be
-     * posted to the UI thread or an appropriate handler.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @param listener
-     *            Callback interface to notify the application when the request
-     *            has completed.
-     * @param state
-     *            An arbitrary object used to identify the request when it
-     *            returns to the callback. This has no effect on the request
-     *            itself.
-     */
-    public void request(String graphPath,
-                        RequestListener listener,
-                        final Object state) {
-        request(graphPath, new Bundle(), "GET", listener, state);
-    }
-
-    public void request(String graphPath, RequestListener listener) {
-        request(graphPath, new Bundle(), "GET", listener, /* state */ null);
-    }
-
-    /**
-     * Make a request to the Facebook Graph API with the given string parameters
-     * using an HTTP GET (default method).
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method is asynchronous and the callback will be invoked
-     * in a background thread; operations that affect the UI will need to be
-     * posted to the UI thread or an appropriate handler.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @param parameters
-     *            key-value string parameters, e.g. the path "search" with
-     *            parameters "q" : "facebook" would produce a query for the
-     *            following graph resource:
-     *            https://graph.facebook.com/search?q=facebook
-     * @param listener
-     *            Callback interface to notify the application when the request
-     *            has completed.
-     * @param state
-     *            An arbitrary object used to identify the request when it
-     *            returns to the callback. This has no effect on the request
-     *            itself.
-     */
-    public void request(String graphPath,
-                        Bundle parameters,
-                        RequestListener listener,
-                        final Object state) {
-        request(graphPath, parameters, "GET", listener, state);
-    }
-
-    public void request(String graphPath,
-                        Bundle parameters,
-                        RequestListener listener) {
-        request(graphPath, parameters, "GET", listener, /* state */ null);
-    }
-
-    /**
-     * Make a request to the Facebook Graph API with the given HTTP method and
-     * string parameters. Note that binary data parameters (e.g. pictures) are
-     * not yet supported by this helper function.
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method is asynchronous and the callback will be invoked
-     * in a background thread; operations that affect the UI will need to be
-     * posted to the UI thread or an appropriate handler.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @param parameters
-     *            key-value string parameters, e.g. the path "search" with
-     *            parameters {"q" : "facebook"} would produce a query for the
-     *            following graph resource:
-     *            https://graph.facebook.com/search?q=facebook
-     * @param httpMethod
-     *            http verb, e.g. "POST", "DELETE"
-     * @param listener
-     *            Callback interface to notify the application when the request
-     *            has completed.
-     * @param state
-     *            An arbitrary object used to identify the request when it
-     *            returns to the callback. This has no effect on the request
-     *            itself.
-     */
-    public void request(final String graphPath,
-                        final Bundle parameters,
-                        final String httpMethod,
-                        final RequestListener listener,
-                        final Object state) {
-        new Thread() {
-            @Override public void run() {
-                try {
-                    String resp = fb.request(graphPath, parameters, httpMethod);
-                    listener.onComplete(resp, state);
-                } catch (FileNotFoundException e) {
-                    listener.onFileNotFoundException(e, state);
-                } catch (MalformedURLException e) {
-                    listener.onMalformedURLException(e, state);
-                } catch (IOException e) {
-                    listener.onIOException(e, state);
-                }
-            }
-        }.start();
-    }
-
-    /**
-     * Callback interface for API requests.
-     *
-     * Each method includes a 'state' parameter that identifies the calling
-     * request. It will be set to the value passed when originally calling the
-     * request method, or null if none was passed.
-     */
-    public static interface RequestListener {
-
-        /**
-         * Called when a request completes with the given response.
-         *
-         * Executed by a background thread: do not update the UI in this method.
-         */
-        public void onComplete(String response, Object state);
-
-        /**
-         * Called when a request has a network or request error.
-         *
-         * Executed by a background thread: do not update the UI in this method.
-         */
-        public void onIOException(IOException e, Object state);
-
-        /**
-         * Called when a request fails because the requested resource is
-         * invalid or does not exist.
-         *
-         * Executed by a background thread: do not update the UI in this method.
-         */
-        public void onFileNotFoundException(FileNotFoundException e,
-                                            Object state);
-
-        /**
-         * Called if an invalid graph path is provided (which may result in a
-         * malformed URL).
-         *
-         * Executed by a background thread: do not update the UI in this method.
-         */
-        public void onMalformedURLException(MalformedURLException e,
-                                            Object state);
-
-        /**
-         * Called when the server-side Facebook method fails.
-         *
-         * Executed by a background thread: do not update the UI in this method.
-         */
-        public void onFacebookError(FacebookError e, Object state);
-
-    }
-
-}
diff --git a/facebook/src/com/facebook/android/DialogError.java b/facebook/src/com/facebook/android/DialogError.java
deleted file mode 100644
index 51d06c9a1..000000000
--- a/facebook/src/com/facebook/android/DialogError.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-/**
- * Encapsulation of Dialog Error.
- *
- * @author ssoneff@facebook.com
- */
-public class DialogError extends Throwable {
-
-    private static final long serialVersionUID = 1L;
-
-    /**
-     * The ErrorCode received by the WebView: see
-     * http://developer.android.com/reference/android/webkit/WebViewClient.html
-     */
-    private int mErrorCode;
-
-    /** The URL that the dialog was trying to load */
-    private String mFailingUrl;
-
-    public DialogError(String message, int errorCode, String failingUrl) {
-        super(message);
-        mErrorCode = errorCode;
-        mFailingUrl = failingUrl;
-    }
-
-    int getErrorCode() {
-        return mErrorCode;
-    }
-
-    String getFailingUrl() {
-        return mFailingUrl;
-    }
-
-}
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
deleted file mode 100644
index c1fc94492..000000000
--- a/facebook/src/com/facebook/android/Facebook.java
+++ /dev/null
@@ -1,997 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.net.MalformedURLException;
-
-import android.Manifest;
-import android.app.Activity;
-import android.content.ActivityNotFoundException;
-import android.content.ComponentName;
-import android.content.Context;
-import android.content.Intent;
-import android.content.ServiceConnection;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.content.pm.PackageManager.NameNotFoundException;
-import android.content.pm.ResolveInfo;
-import android.content.pm.Signature;
-import android.os.Bundle;
-import android.os.Handler;
-import android.os.IBinder;
-import android.os.Message;
-import android.os.Messenger;
-import android.os.RemoteException;
-import android.text.TextUtils;
-import android.webkit.CookieSyncManager;
-
-/**
- * Main Facebook object for interacting with the Facebook developer API.
- * Provides methods to log in and log out a user, make requests using the REST
- * and Graph APIs, and start user interface interactions with the API (such as
- * pop-ups promoting for credentials, permissions, stream posts, etc.)
- *
- * @author  Jim Brusstar (jimbru@facebook.com),
- *          Yariv Sadan (yariv@facebook.com),
- *          Luke Shepard (lshepard@facebook.com)
- */
-public class Facebook {
-
-    // Strings used in the authorization flow
-    public static final String REDIRECT_URI = "fbconnect://success";
-    public static final String CANCEL_URI = "fbconnect://cancel";
-    public static final String LOGIN_URI = "facebook.com/login.php";
-    public static final String HOME_URI = "facebook.com/home.php";
-
-    public static final String ERROR_CODE_KEY = "error_code";
-    public static final int LOGIN_REDIRECT_CODE = 6436;
-
-    public static final String TOKEN = "access_token";
-    public static final String EXPIRES = "expires_in";
-    public static final String SINGLE_SIGN_ON_DISABLED = "service_disabled";
-
-    public static final int FORCE_DIALOG_AUTH = -1;
-
-    private static final String LOGIN = "oauth";
-
-    // Used as default activityCode by authorize(). See authorize() below.
-    private static final int DEFAULT_AUTH_ACTIVITY_CODE = 32665;
-
-    // Facebook server endpoints: may be modified in a subclass for testing
-    protected static String DIALOG_BASE_URL =
-        "https://m.facebook.com/dialog/";
-    protected static String GRAPH_BASE_URL =
-        "https://graph.facebook.com/";
-    protected static String RESTSERVER_URL =
-        "https://api.facebook.com/restserver.php";
-
-    private String mAccessToken = null;
-    private long mLastAccessUpdate = 0;
-    private long mAccessExpires = 0;
-    private String mAppId;
-
-    private Activity mAuthActivity;
-    private String[] mAuthPermissions;
-    private int mAuthActivityCode;
-    private DialogListener mAuthDialogListener;
-
-    // If the last time we extended the access token was more than 24 hours ago
-    // we try to refresh the access token again.
-    final private long REFRESH_TOKEN_BARRIER = 24L * 60L * 60L * 1000L;
-
-    /**
-     * Constructor for Facebook object.
-     *
-     * @param appId
-     *          Your Facebook application ID. Found at
-     *          www.facebook.com/developers/apps.php.
-     */
-    public Facebook(String appId) {
-        if (appId == null) {
-            throw new IllegalArgumentException(
-                    "You must specify your application ID when instantiating " +
-                    "a Facebook object. See README for details.");
-        }
-        mAppId = appId;
-    }
-
-    /**
-     * Default authorize method. Grants only basic permissions.
-     *
-     * See authorize() below for @params.
-     */
-    public void authorize(Activity activity, final DialogListener listener) {
-        authorize(activity, new String[] {}, DEFAULT_AUTH_ACTIVITY_CODE,
-                listener);
-    }
-
-    /**
-     * Authorize method that grants custom permissions.
-     *
-     * See authorize() below for @params.
-     */
-    public void authorize(Activity activity, String[] permissions,
-            final DialogListener listener) {
-        authorize(activity, permissions, DEFAULT_AUTH_ACTIVITY_CODE, listener);
-    }
-
-    /**
-     * Full authorize method.
-     *
-     * Starts either an Activity or a dialog which prompts the user to log in to
-     * Facebook and grant the requested permissions to the given application.
-     *
-     * This method will, when possible, use Facebook's single sign-on for
-     * Android to obtain an access token. This involves proxying a call through
-     * the Facebook for Android stand-alone application, which will handle the
-     * authentication flow, and return an OAuth access token for making API
-     * calls.
-     *
-     * Because this process will not be available for all users, if single
-     * sign-on is not possible, this method will automatically fall back to the
-     * OAuth 2.0 User-Agent flow. In this flow, the user credentials are handled
-     * by Facebook in an embedded WebView, not by the client application. As
-     * such, the dialog makes a network request and renders HTML content rather
-     * than a native UI. The access token is retrieved from a redirect to a
-     * special URL that the WebView handles.
-     *
-     * Note that User credentials could be handled natively using the OAuth 2.0
-     * Username and Password Flow, but this is not supported by this SDK.
-     *
-     * See http://developers.facebook.com/docs/authentication/ and
-     * http://wiki.oauth.net/OAuth-2 for more details.
-     *
-     * Note that this method is asynchronous and the callback will be invoked in
-     * the original calling thread (not in a background thread).
-     *
-     * Also note that requests may be made to the API without calling authorize
-     * first, in which case only public information is returned.
-     *
-     * IMPORTANT: Note that single sign-on authentication will not function
-     * correctly if you do not include a call to the authorizeCallback() method
-     * in your onActivityResult() function! Please see below for more
-     * information. single sign-on may be disabled by passing FORCE_DIALOG_AUTH
-     * as the activityCode parameter in your call to authorize().
-     *
-     * @param activity
-     *            The Android activity in which we want to display the
-     *            authorization dialog.
-     * @param applicationId
-     *            The Facebook application identifier e.g. "350685531728"
-     * @param permissions
-     *            A list of permissions required for this application: e.g.
-     *            "read_stream", "publish_stream", "offline_access", etc. see
-     *            http://developers.facebook.com/docs/authentication/permissions
-     *            This parameter should not be null -- if you do not require any
-     *            permissions, then pass in an empty String array.
-     * @param activityCode
-     *            Single sign-on requires an activity result to be called back
-     *            to the client application -- if you are waiting on other
-     *            activities to return data, pass a custom activity code here to
-     *            avoid collisions. If you would like to force the use of legacy
-     *            dialog-based authorization, pass FORCE_DIALOG_AUTH for this
-     *            parameter. Otherwise just omit this parameter and Facebook
-     *            will use a suitable default. See
-     *            http://developer.android.com/reference/android/
-     *              app/Activity.html for more information.
-     * @param listener
-     *            Callback interface for notifying the calling application when
-     *            the authentication dialog has completed, failed, or been
-     *            canceled.
-     */
-    public void authorize(Activity activity, String[] permissions,
-            int activityCode, final DialogListener listener) {
-
-        boolean singleSignOnStarted = false;
-
-        mAuthDialogListener = listener;
-
-        // Prefer single sign-on, where available.
-        if (activityCode >= 0) {
-            singleSignOnStarted = startSingleSignOn(activity, mAppId,
-                    permissions, activityCode);
-        }
-
-        Util.setSsoEnabled(activity, singleSignOnStarted);
-
-        // Otherwise fall back to traditional dialog.
-        if (!singleSignOnStarted) {
-            startDialogAuth(activity, permissions);
-        }
-    }
-
-    /**
-     * Internal method to handle single sign-on backend for authorize().
-     *
-     * @param activity
-     *            The Android Activity that will parent the ProxyAuth Activity.
-     * @param applicationId
-     *            The Facebook application identifier.
-     * @param permissions
-     *            A list of permissions required for this application. If you do
-     *            not require any permissions, pass an empty String array.
-     * @param activityCode
-     *            Activity code to uniquely identify the result Intent in the
-     *            callback.
-     */
-    private boolean startSingleSignOn(Activity activity, String applicationId,
-            String[] permissions, int activityCode) {
-        boolean didSucceed = true;
-        Intent intent = new Intent();
-
-        intent.setClassName("com.facebook.katana",
-                "com.facebook.katana.ProxyAuth");
-        intent.putExtra("client_id", applicationId);
-        if (permissions.length > 0) {
-            intent.putExtra("scope", TextUtils.join(",", permissions));
-        }
-
-        // Verify that the application whose package name is
-        // com.facebook.katana.ProxyAuth
-        // has the expected FB app signature.
-        if (!validateActivityIntent(activity, intent)) {
-            return false;
-        }
-
-        mAuthActivity = activity;
-        mAuthPermissions = permissions;
-        mAuthActivityCode = activityCode;
-        try {
-        	Util.logd("Facebook-authorize", "Starting SSO activity for result");
-            activity.startActivityForResult(intent, activityCode);
-        } catch (ActivityNotFoundException e) {
-            didSucceed = false;
-        }
-
-        return didSucceed;
-    }
-
-    /**
-     * Helper to validate an activity intent by resolving and checking the
-     * provider's package signature.
-     *
-     * @param context
-     * @param intent
-     * @return true if the service intent resolution happens successfully and the
-     * 	signatures match.
-     */
-    private boolean validateActivityIntent(Context context, Intent intent) {
-        ResolveInfo resolveInfo =
-            context.getPackageManager().resolveActivity(intent, 0);
-        if (resolveInfo == null) {
-            return false;
-        }
-
-        return validateAppSignatureForPackage(
-            context,
-            resolveInfo.activityInfo.packageName);
-    }
-
-
-    /**
-     * Helper to validate a service intent by resolving and checking the
-     * provider's package signature.
-     *
-     * @param context
-     * @param intent
-     * @return true if the service intent resolution happens successfully and the
-     * 	signatures match.
-     */
-    private boolean validateServiceIntent(Context context, Intent intent) {
-        ResolveInfo resolveInfo =
-            context.getPackageManager().resolveService(intent, 0);
-        if (resolveInfo == null) {
-            return false;
-        }
-
-        return validateAppSignatureForPackage(
-            context,
-            resolveInfo.serviceInfo.packageName);
-    }
-
-    /**
-     * Query the signature for the application that would be invoked by the
-     * given intent and verify that it matches the FB application's signature.
-     *
-     * @param context
-     * @param packageName
-     * @return true if the app's signature matches the expected signature.
-     */
-    private boolean validateAppSignatureForPackage(Context context,
-        String packageName) {
-
-        PackageInfo packageInfo;
-        try {
-            packageInfo = context.getPackageManager().getPackageInfo(
-                    packageName, PackageManager.GET_SIGNATURES);
-        } catch (NameNotFoundException e) {
-            return false;
-        }
-
-        for (Signature signature : packageInfo.signatures) {
-            if (signature.toCharsString().equals(FB_APP_SIGNATURE)) {
-                return true;
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Internal method to handle dialog-based authentication backend for
-     * authorize().
-     *
-     * @param activity
-     *            The Android Activity that will parent the auth dialog.
-     * @param applicationId
-     *            The Facebook application identifier.
-     * @param permissions
-     *            A list of permissions required for this application. If you do
-     *            not require any permissions, pass an empty String array.
-     */
-	private void startDialogAuth(Activity activity, String[] permissions) {
-        Bundle params = new Bundle();
-        if (permissions.length > 0) {
-            params.putString("scope", TextUtils.join(",", permissions));
-        }
-        CookieSyncManager.createInstance(activity);
-        dialog(activity, LOGIN, params, new DialogListener() {
-
-            @Override
-			public void onComplete(Bundle values) {
-                // ensure any cookies set by the dialog are saved
-                CookieSyncManager.getInstance().sync();
-                setAccessToken(values.getString(TOKEN));
-                setAccessExpiresIn(values.getString(EXPIRES));
-                if (isSessionValid()) {
-                    Util.logd("Facebook-authorize", "Login Success! access_token="
-                            + getAccessToken() + " expires="
-                            + getAccessExpires());
-                    mAuthDialogListener.onComplete(values);
-                } else {
-                    mAuthDialogListener.onFacebookError(new FacebookError(
-                                    "Failed to receive access token."));
-                }
-            }
-
-            @Override
-            public void onError(DialogError error) {
-                Util.logd("Facebook-authorize", "Login failed: " + error);
-                mAuthDialogListener.onError(error);
-            }
-
-            @Override
-            public void onFacebookError(FacebookError error) {
-                Util.logd("Facebook-authorize", "Login failed: " + error);
-                mAuthDialogListener.onFacebookError(error);
-            }
-
-            @Override
-            public void onCancel() {
-                Util.logd("Facebook-authorize", "Login canceled");
-                mAuthDialogListener.onCancel();
-            }
-        });
-    }
-
-    /**
-     * IMPORTANT: This method must be invoked at the top of the calling
-     * activity's onActivityResult() function or Facebook authentication will
-     * not function properly!
-     *
-     * If your calling activity does not currently implement onActivityResult(),
-     * you must implement it and include a call to this method if you intend to
-     * use the authorize() method in this SDK.
-     *
-     * For more information, see
-     * http://developer.android.com/reference/android/app/
-     *   Activity.html#onActivityResult(int, int, android.content.Intent)
-     */
-    public void authorizeCallback(int requestCode, int resultCode, Intent data) {
-    	Util.logd("Facebook", String.format("authorizing callback: %d / %d", requestCode, mAuthActivityCode));
-
-    	if (requestCode == mAuthActivityCode) {
-            // Successfully redirected.
-            if (resultCode == Activity.RESULT_OK) {
-
-                // Check OAuth 2.0/2.10 error code.
-                String error = data.getStringExtra("error");
-                if (error == null) {
-                    error = data.getStringExtra("error_type");
-                }
-
-                // A Facebook error occurred.
-                if (error != null) {
-                    if (error.equals(SINGLE_SIGN_ON_DISABLED)
-                            || error.equals("AndroidAuthKillSwitchException")) {
-                        Util.logd("Facebook-authorize", "Hosted auth currently "
-                            + "disabled. Retrying dialog auth...");
-                        startDialogAuth(mAuthActivity, mAuthPermissions);
-                    } else if (error.equals("access_denied")
-                            || error.equals("OAuthAccessDeniedException")) {
-                        Util.logd("Facebook-authorize", "Login canceled by user.");
-                        mAuthDialogListener.onCancel();
-                    } else {
-                        String description = data.getStringExtra("error_description");
-                        if (description != null) {
-                            error = error + ":" + description;
-                        }
-                        Util.logd("Facebook-authorize", "Login failed: " + error);
-                        mAuthDialogListener.onFacebookError(
-                          new FacebookError(error));
-                    }
-
-                // No errors.
-                } else {
-                    setAccessToken(data.getStringExtra(TOKEN));
-                    setAccessExpiresIn(data.getStringExtra(EXPIRES));
-                    if (isSessionValid()) {
-                        Util.logd("Facebook-authorize",
-                                "Login Success! access_token="
-                                        + getAccessToken() + " expires="
-                                        + getAccessExpires());
-                        mAuthDialogListener.onComplete(data.getExtras());
-                    } else {
-                        mAuthDialogListener.onFacebookError(new FacebookError(
-                                        "Failed to receive access token."));
-                    }
-                }
-
-            // An error occurred before we could be redirected.
-            } else if (resultCode == Activity.RESULT_CANCELED) {
-
-                // An Android error occured.
-                if (data != null) {
-                    Util.logd("Facebook-authorize",
-                            "Login failed: " + data.getStringExtra("error"));
-                    mAuthDialogListener.onError(
-                            new DialogError(
-                                    data.getStringExtra("error"),
-                                    data.getIntExtra("error_code", -1),
-                                    data.getStringExtra("failing_url")));
-
-                // User pressed the 'back' button.
-                } else {
-                    Util.logd("Facebook-authorize", "Login canceled by user.");
-                    mAuthDialogListener.onCancel();
-                }
-            }
-        }
-    }
-
-    /**
-     * Refresh OAuth access token method. Binds to Facebook for Android
-     * stand-alone application application to refresh the access token. This
-     * method tries to connect to the Facebook App which will handle the
-     * authentication flow, and return a new OAuth access token. This method
-     * will automatically replace the old token with a new one. Note that this
-     * method is asynchronous and the callback will be invoked in the original
-     * calling thread (not in a background thread).
-     *
-     * @param context
-     *            The Android Context that will be used to bind to the Facebook
-     *            RefreshToken Service
-     * @param serviceListener
-     *            Callback interface for notifying the calling application when
-     *            the refresh request has completed or failed (can be null). In
-     *            case of a success a new token can be found inside the result
-     *            Bundle under Facebook.ACCESS_TOKEN key.
-     * @return true if the binding to the RefreshToken Service was created
-     */
-    public boolean extendAccessToken(Context context, ServiceListener serviceListener) {
-        Intent intent = new Intent();
-
-        intent.setClassName("com.facebook.katana",
-                "com.facebook.katana.platform.TokenRefreshService");
-
-        // Verify that the application whose package name is
-        // com.facebook.katana
-        // has the expected FB app signature.
-        if (!validateServiceIntent(context, intent)) {
-            return false;
-        }
-
-        return context.bindService(intent,
-                new TokenRefreshServiceConnection(context, serviceListener),
-                Context.BIND_AUTO_CREATE);
-    }
-
-    /**
-    * Calls extendAccessToken if shouldExtendAccessToken returns true.
-    *
-    * @return the same value as extendAccessToken if the the token requires
-    *           refreshing, true otherwise
-    */
-    public boolean extendAccessTokenIfNeeded(Context context, ServiceListener serviceListener) {
-        if (shouldExtendAccessToken()) {
-            Util.logd("Facebook-authorize", "Extending access token");
-            return extendAccessToken(context, serviceListener);
-        }
-        Util.logd("Facebook-authorize", "Access token extension not required");
-        return true;
-    }
-
-    /**
-     * Check if the access token requires refreshing.
-     *
-     * @return true if the last time a new token was obtained was over 24 hours ago.
-     */
-    public boolean shouldExtendAccessToken() {
-        return isSessionValid() &&
-                (System.currentTimeMillis() - mLastAccessUpdate >= REFRESH_TOKEN_BARRIER);
-    }
-
-    /**
-     * Handles connection to the token refresh service (this service is a part
-     * of Facebook App).
-     */
-    private class TokenRefreshServiceConnection implements ServiceConnection {
-
-        final Messenger messageReceiver = new Messenger(new Handler() {
-            @Override
-            public void handleMessage(Message msg) {
-                String token = msg.getData().getString(TOKEN);
-                long expiresAt = msg.getData().getLong(EXPIRES) * 1000L;
-
-                // To avoid confusion we should return the expiration time in
-                // the same format as the getAccessExpires() function - that
-                // is in milliseconds.
-                Bundle resultBundle = (Bundle) msg.getData().clone();
-                resultBundle.putLong(EXPIRES, expiresAt);
-
-                if (token != null) {
-                    setAccessToken(token);
-                    setAccessExpires(expiresAt);
-                    if (serviceListener != null) {
-                        serviceListener.onComplete(resultBundle);
-                    }
-                } else if (serviceListener != null) { // extract errors only if client wants them
-                    String error = msg.getData().getString("error");
-                    if (msg.getData().containsKey("error_code")) {
-                        int errorCode = msg.getData().getInt("error_code");
-                        serviceListener.onFacebookError(new FacebookError(error, null, errorCode));
-                    } else {
-                        serviceListener.onError(new Error(error != null ? error
-                                : "Unknown service error"));
-                    }
-                }
-
-                // The refreshToken function should be called rarely,
-                // so there is no point in keeping the binding open.
-                applicationsContext.unbindService(TokenRefreshServiceConnection.this);
-            }
-        });
-
-        final ServiceListener serviceListener;
-        final Context applicationsContext;
-
-        Messenger messageSender = null;
-
-        public TokenRefreshServiceConnection(Context applicationsContext,
-                ServiceListener serviceListener) {
-            this.applicationsContext = applicationsContext;
-            this.serviceListener = serviceListener;
-        }
-
-        @Override
-        public void onServiceConnected(ComponentName className, IBinder service) {
-            messageSender = new Messenger(service);
-            refreshToken();
-        }
-
-        @Override
-        public void onServiceDisconnected(ComponentName arg) {
-            serviceListener.onError(new Error("Service disconnected"));
-            // We returned an error so there's no point in
-            // keeping the binding open.
-            applicationsContext.unbindService(TokenRefreshServiceConnection.this);
-        }
-
-        private void refreshToken() {
-            Bundle requestData = new Bundle();
-            requestData.putString(TOKEN, mAccessToken);
-
-            Message request = Message.obtain();
-            request.setData(requestData);
-            request.replyTo = messageReceiver;
-
-            try {
-                messageSender.send(request);
-            } catch (RemoteException e) {
-                serviceListener.onError(new Error("Service connection error"));
-            }
-        }
-    };
-
-    /**
-     * Invalidate the current user session by removing the access token in
-     * memory, clearing the browser cookie, and calling auth.expireSession
-     * through the API.
-     *
-     * Note that this method blocks waiting for a network response, so do not
-     * call it in a UI thread.
-     *
-     * @param context
-     *            The Android context in which the logout should be called: it
-     *            should be the same context in which the login occurred in
-     *            order to clear any stored cookies
-     * @throws IOException
-     * @throws MalformedURLException
-     * @return JSON string representation of the auth.expireSession response
-     *            ("true" if successful)
-     */
-    public String logout(Context context)
-            throws MalformedURLException, IOException {
-        Util.clearCookies(context);
-        Bundle b = new Bundle();
-        b.putString("method", "auth.expireSession");
-        String response = request(b);
-        setAccessToken(null);
-        setAccessExpires(0);
-        return response;
-    }
-
-    /**
-     * Make a request to Facebook's old (pre-graph) API with the given
-     * parameters. One of the parameter keys must be "method" and its value
-     * should be a valid REST server API method.
-     *
-     * See http://developers.facebook.com/docs/reference/rest/
-     *
-     * Note that this method blocks waiting for a network response, so do not
-     * call it in a UI thread.
-     *
-     * Example:
-     * <code>
-     *  Bundle parameters = new Bundle();
-     *  parameters.putString("method", "auth.expireSession");
-     *  String response = request(parameters);
-     * </code>
-     *
-     * @param parameters
-     *            Key-value pairs of parameters to the request. Refer to the
-     *            documentation: one of the parameters must be "method".
-     * @throws IOException
-     *            if a network error occurs
-     * @throws MalformedURLException
-     *            if accessing an invalid endpoint
-     * @throws IllegalArgumentException
-     *            if one of the parameters is not "method"
-     * @return JSON string representation of the response
-     */
-    public String request(Bundle parameters)
-            throws MalformedURLException, IOException {
-        if (!parameters.containsKey("method")) {
-            throw new IllegalArgumentException("API method must be specified. "
-                    + "(parameters must contain key \"method\" and value). See"
-                    + " http://developers.facebook.com/docs/reference/rest/");
-        }
-        return request(null, parameters, "GET");
-    }
-
-    /**
-     * Make a request to the Facebook Graph API without any parameters.
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method blocks waiting for a network response, so do not
-     * call it in a UI thread.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @throws IOException
-     * @throws MalformedURLException
-     * @return JSON string representation of the response
-     */
-    public String request(String graphPath)
-            throws MalformedURLException, IOException {
-        return request(graphPath, new Bundle(), "GET");
-    }
-
-    /**
-     * Make a request to the Facebook Graph API with the given string parameters
-     * using an HTTP GET (default method).
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method blocks waiting for a network response, so do not
-     * call it in a UI thread.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @param parameters
-     *            key-value string parameters, e.g. the path "search" with
-     *            parameters "q" : "facebook" would produce a query for the
-     *            following graph resource:
-     *            https://graph.facebook.com/search?q=facebook
-     * @throws IOException
-     * @throws MalformedURLException
-     * @return JSON string representation of the response
-     */
-    public String request(String graphPath, Bundle parameters)
-            throws MalformedURLException, IOException {
-        return request(graphPath, parameters, "GET");
-    }
-
-    /**
-     * Synchronously make a request to the Facebook Graph API with the given
-     * HTTP method and string parameters. Note that binary data parameters
-     * (e.g. pictures) are not yet supported by this helper function.
-     *
-     * See http://developers.facebook.com/docs/api
-     *
-     * Note that this method blocks waiting for a network response, so do not
-     * call it in a UI thread.
-     *
-     * @param graphPath
-     *            Path to resource in the Facebook graph, e.g., to fetch data
-     *            about the currently logged authenticated user, provide "me",
-     *            which will fetch http://graph.facebook.com/me
-     * @param params
-     *            Key-value string parameters, e.g. the path "search" with
-     *            parameters {"q" : "facebook"} would produce a query for the
-     *            following graph resource:
-     *            https://graph.facebook.com/search?q=facebook
-     * @param httpMethod
-     *            http verb, e.g. "GET", "POST", "DELETE"
-     * @throws IOException
-     * @throws MalformedURLException
-     * @return JSON string representation of the response
-     */
-    public String request(String graphPath, Bundle params, String httpMethod)
-            throws FileNotFoundException, MalformedURLException, IOException {
-        params.putString("format", "json");
-        if (isSessionValid()) {
-            params.putString(TOKEN, getAccessToken());
-        }
-        String url = (graphPath != null) ? GRAPH_BASE_URL + graphPath
-                                         : RESTSERVER_URL;
-        return Util.openUrl(url, httpMethod, params);
-    }
-
-    /**
-     * Generate a UI dialog for the request action in the given Android context.
-     *
-     * Note that this method is asynchronous and the callback will be invoked in
-     * the original calling thread (not in a background thread).
-     *
-     * @param context
-     *            The Android context in which we will generate this dialog.
-     * @param action
-     *            String representation of the desired method: e.g. "login",
-     *            "stream.publish", ...
-     * @param listener
-     *            Callback interface to notify the application when the dialog
-     *            has completed.
-     */
-    public void dialog(Context context, String action,
-            DialogListener listener) {
-        dialog(context, action, new Bundle(), listener);
-    }
-
-    /**
-     * Generate a UI dialog for the request action in the given Android context
-     * with the provided parameters.
-     *
-     * Note that this method is asynchronous and the callback will be invoked in
-     * the original calling thread (not in a background thread).
-     *
-     * @param context
-     *            The Android context in which we will generate this dialog.
-     * @param action
-     *            String representation of the desired method: e.g. "feed" ...
-     * @param parameters
-     *            String key-value pairs to be passed as URL parameters.
-     * @param listener
-     *            Callback interface to notify the application when the dialog
-     *            has completed.
-     */
-    public void dialog(Context context, String action, Bundle parameters,
-            final DialogListener listener) {
-
-        String endpoint = DIALOG_BASE_URL + action;
-        parameters.putString("display", "touch");
-        parameters.putString("redirect_uri", REDIRECT_URI);
-
-        if (action.equals(LOGIN)) {
-            parameters.putString("type", "user_agent");
-            parameters.putString("client_id", mAppId);
-        } else {
-            parameters.putString("app_id", mAppId);
-        }
-
-        if (isSessionValid()) {
-            parameters.putString(TOKEN, getAccessToken());
-        }
-        String url = endpoint + "?" + Util.encodeUrl(parameters);
-        if (context.checkCallingOrSelfPermission(Manifest.permission.INTERNET)
-                != PackageManager.PERMISSION_GRANTED) {
-            Util.showAlert(context, "Error",
-                    "Application requires permission to access the Internet");
-        } else {
-            new FbDialog(context, url, listener).show();
-        }
-    }
-
-    /**
-     * @return boolean - whether this object has an non-expired session token
-     */
-    public boolean isSessionValid() {
-        return (getAccessToken() != null) &&
-                ((getAccessExpires() == 0) ||
-                        (System.currentTimeMillis() < getAccessExpires()));
-    }
-
-    /**
-     * Retrieve the OAuth 2.0 access token for API access: treat with care.
-     * Returns null if no session exists.
-     *
-     * @return String - access token
-     */
-    public String getAccessToken() {
-        return mAccessToken;
-    }
-
-    /**
-     * Retrieve the current session's expiration time (in milliseconds since
-     * Unix epoch), or 0 if the session doesn't expire or doesn't exist.
-     *
-     * @return long - session expiration time
-     */
-    public long getAccessExpires() {
-        return mAccessExpires;
-    }
-
-    /**
-     * Set the OAuth 2.0 access token for API access.
-     *
-     * @param token - access token
-     */
-    public void setAccessToken(String token) {
-        mAccessToken = token;
-        mLastAccessUpdate = System.currentTimeMillis();
-    }
-
-    /**
-     * Set the current session's expiration time (in milliseconds since Unix
-     * epoch), or 0 if the session doesn't expire.
-     *
-     * @param time - timestamp in milliseconds
-     */
-    public void setAccessExpires(long time) {
-        mAccessExpires = time;
-    }
-
-    /**
-     * Set the current session's duration (in seconds since Unix epoch), or "0"
-     * if session doesn't expire.
-     *
-     * @param expiresIn
-     *            - duration in seconds (or 0 if the session doesn't expire)
-     */
-    public void setAccessExpiresIn(String expiresIn) {
-        if (expiresIn != null) {
-            long expires = expiresIn.equals("0")
-                    ? 0
-                    : System.currentTimeMillis() + Long.parseLong(expiresIn) * 1000L;
-            setAccessExpires(expires);
-        }
-    }
-
-    public String getAppId() {
-        return mAppId;
-    }
-
-    public void setAppId(String appId) {
-        mAppId = appId;
-    }
-
-    /**
-     * Callback interface for dialog requests.
-     *
-     */
-    public static interface DialogListener {
-
-        /**
-         * Called when a dialog completes.
-         *
-         * Executed by the thread that initiated the dialog.
-         *
-         * @param values
-         *            Key-value string pairs extracted from the response.
-         */
-        public void onComplete(Bundle values);
-
-        /**
-         * Called when a Facebook responds to a dialog with an error.
-         *
-         * Executed by the thread that initiated the dialog.
-         *
-         */
-        public void onFacebookError(FacebookError e);
-
-        /**
-         * Called when a dialog has an error.
-         *
-         * Executed by the thread that initiated the dialog.
-         *
-         */
-        public void onError(DialogError e);
-
-        /**
-         * Called when a dialog is canceled by the user.
-         *
-         * Executed by the thread that initiated the dialog.
-         *
-         */
-        public void onCancel();
-
-    }
-
-    /**
-     * Callback interface for service requests.
-     */
-    public static interface ServiceListener {
-
-        /**
-         * Called when a service request completes.
-         *
-         * @param values
-         *            Key-value string pairs extracted from the response.
-         */
-        public void onComplete(Bundle values);
-
-        /**
-         * Called when a Facebook server responds to the request with an error.
-         */
-        public void onFacebookError(FacebookError e);
-
-        /**
-         * Called when a Facebook Service responds to the request with an error.
-         */
-        public void onError(Error e);
-
-    }
-
-    public static final String FB_APP_SIGNATURE =
-        "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
-        + "b3009060355040613025553310b30090603550408130243413112301006035504"
-        + "07130950616c6f20416c746f31183016060355040a130f46616365626f6f6b204"
-        + "d6f62696c653111300f060355040b130846616365626f6f6b311d301b06035504"
-        + "03131446616365626f6f6b20436f72706f726174696f6e3020170d30393038333"
-        + "13231353231365a180f32303530303932353231353231365a307a310b30090603"
-        + "55040613025553310b30090603550408130243413112301006035504071309506"
-        + "16c6f20416c746f31183016060355040a130f46616365626f6f6b204d6f62696c"
-        + "653111300f060355040b130846616365626f6f6b311d301b06035504031314466"
-        + "16365626f6f6b20436f72706f726174696f6e30819f300d06092a864886f70d01"
-        + "0101050003818d0030818902818100c207d51df8eb8c97d93ba0c8c1002c928fa"
-        + "b00dc1b42fca5e66e99cc3023ed2d214d822bc59e8e35ddcf5f44c7ae8ade50d7"
-        + "e0c434f500e6c131f4a2834f987fc46406115de2018ebbb0d5a3c261bd97581cc"
-        + "fef76afc7135a6d59e8855ecd7eacc8f8737e794c60a761c536b72b11fac8e603"
-        + "f5da1a2d54aa103b8a13c0dbc10203010001300d06092a864886f70d010104050"
-        + "0038181005ee9be8bcbb250648d3b741290a82a1c9dc2e76a0af2f2228f1d9f9c"
-        + "4007529c446a70175c5a900d5141812866db46be6559e2141616483998211f4a6"
-        + "73149fb2232a10d247663b26a9031e15f84bc1c74d141ff98a02d76f85b2c8ab2"
-        + "571b6469b232d8e768a7f7ca04f7abe4a775615916c07940656b58717457b42bd"
-        + "928a2";
-
-}
diff --git a/facebook/src/com/facebook/android/FacebookError.java b/facebook/src/com/facebook/android/FacebookError.java
deleted file mode 100644
index 16836dbd7..000000000
--- a/facebook/src/com/facebook/android/FacebookError.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-/**
- * Encapsulation of a Facebook Error: a Facebook request that could not be
- * fulfilled.
- *
- * @author ssoneff@facebook.com
- */
-public class FacebookError extends Throwable {
-
-    private static final long serialVersionUID = 1L;
-
-    private int mErrorCode = 0;
-    private String mErrorType;
-
-    public FacebookError(String message) {
-        super(message);
-    }
-
-    public FacebookError(String message, String type, int code) {
-        super(message);
-        mErrorType = type;
-        mErrorCode = code;
-    }
-
-    public int getErrorCode() {
-        return mErrorCode;
-    }
-
-    public String getErrorType() {
-        return mErrorType;
-    }
-
-}
diff --git a/facebook/src/com/facebook/android/FacebookWebView.java b/facebook/src/com/facebook/android/FacebookWebView.java
deleted file mode 100644
index 111d3f047..000000000
--- a/facebook/src/com/facebook/android/FacebookWebView.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.facebook.android;
-
-import android.content.Context;
-import android.webkit.WebView;
-
-public class FacebookWebView extends WebView {
-
-    public FacebookWebView(Context context) {
-        super(context);
-    }
-    
-    @Override
-    public void onWindowFocusChanged(boolean hasFocus) {
-        // workaround for crash seen in android market
-        try {
-            super.onWindowFocusChanged(hasFocus);
-        } catch (NullPointerException npe) {
-            // swallow
-        }
-    }
-}
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
deleted file mode 100644
index 253b9982e..000000000
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ /dev/null
@@ -1,256 +0,0 @@
-/*
- * Copyright 2010 Facebook, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *    http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.facebook.android;
-
-import android.app.Dialog;
-import android.app.ProgressDialog;
-import android.content.Context;
-import android.content.DialogInterface;
-import android.content.Intent;
-import android.graphics.Bitmap;
-import android.graphics.Color;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.Bundle;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
-import android.view.Window;
-import android.webkit.WebView;
-import android.webkit.WebViewClient;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.LinearLayout;
-
-import com.facebook.android.Facebook.DialogListener;
-
-public class FbDialog extends Dialog {
-
-    static final int FB_BLUE = 0xFF6D84B4;
-    static final float[] DIMENSIONS_DIFF_LANDSCAPE = {20, 60};
-    static final float[] DIMENSIONS_DIFF_PORTRAIT = {40, 60};
-    static final FrameLayout.LayoutParams FILL =
-        new FrameLayout.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,
-                         ViewGroup.LayoutParams.FILL_PARENT);
-    static final int MARGIN = 4;
-    static final int PADDING = 2;
-    static final String DISPLAY_STRING = "touch";
-    static final String FB_ICON = "icon.png";
-
-    private final String mUrl;
-    private final DialogListener mListener;
-    private ProgressDialog mSpinner;
-    private WebView mWebView;
-    private FrameLayout mContent;
-    private ImageView mCrossImage;
-
-    public FbDialog(Context context, String url, DialogListener listener) {
-        super(context, android.R.style.Theme_Translucent_NoTitleBar);
-        mUrl = url;
-        mListener = listener;
-    }
-
-    @Override
-    protected void onCreate(Bundle savedInstanceState) {
-        super.onCreate(savedInstanceState);
-
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-        mContent = new FrameLayout(getContext());
-
-        /* Create the 'x' image, but don't add to the mContent layout yet
-         * at this point, we only need to know its drawable width and height
-         * to place the webview
-         */
-        createCrossImage();
-
-        /* Now we know 'x' drawable width and height,
-         * layout the webivew and add it the mContent layout
-         */
-        int crossWidth = mCrossImage.getDrawable().getIntrinsicWidth();
-        setUpWebView(crossWidth / 2);
-
-        /* Finally add the 'x' image to the mContent layout and
-         * add mContent to the Dialog view
-         */
-        mContent.addView(mCrossImage, new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
-        addContentView(mContent, new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT));
-
-        setOnCancelListener(new OnCancelListener() {
-        	@Override
-         	public void onCancel(DialogInterface dialog) {
-        		mListener.onCancel();
-         	}
-        });
-    }
-
-    private void createCrossImage() {
-        mCrossImage = new ImageView(getContext());
-        // Dismiss the dialog when user click on the 'x'
-        mCrossImage.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                mListener.onCancel();
-                safeDismissDialog(FbDialog.this);
-            }
-        });
-        Drawable crossDrawable = getContext().getResources().getDrawable(R.drawable.com_facebook_close);
-        mCrossImage.setImageDrawable(crossDrawable);
-        /* 'x' should not be visible while webview is loading
-         * make it visible only after webview has fully loaded
-        */
-        mCrossImage.setVisibility(View.INVISIBLE);
-    }
-
-    private ProgressDialog createProgressDialog() {
-    	safeDismissDialog(mSpinner);
-
-    	mSpinner = new ProgressDialog(getContext());
-        mSpinner.requestWindowFeature(Window.FEATURE_NO_TITLE);
-        mSpinner.setMessage("Loading...");
-        mSpinner.setOnCancelListener(new OnCancelListener() {
-        	@Override
-        	public void onCancel (DialogInterface dialogInterface) {
-        		mWebView.stopLoading();
-        		mListener.onCancel();
-        		safeDismissDialog(FbDialog.this);
-        	}
-        });
-
-        return mSpinner;
-    }
-
-    private void setUpWebView(int margin) {
-        LinearLayout webViewContainer = new LinearLayout(getContext());
-        mWebView = new FacebookWebView(getContext());
-        mWebView.setVerticalScrollBarEnabled(false);
-        mWebView.setHorizontalScrollBarEnabled(false);
-        mWebView.setWebViewClient(new FbDialog.FbWebViewClient());
-        mWebView.getSettings().setJavaScriptEnabled(true);
-        mWebView.loadUrl(mUrl);
-        mWebView.setLayoutParams(FILL);
-        mWebView.setVisibility(View.INVISIBLE);
-
-        webViewContainer.setPadding(margin, margin, margin, margin);
-        webViewContainer.addView(mWebView);
-        mContent.addView(webViewContainer);
-    }
-
-    private class FbWebViewClient extends WebViewClient {
-
-        @Override
-        public boolean shouldOverrideUrlLoading(WebView view, String url) {
-            Util.logd("Facebook-WebView", "Redirect URL: " + url);
-            if (url.startsWith(Facebook.REDIRECT_URI)) {
-                Bundle values = Util.parseUrl(url);
-
-                String error = values.getString("error");
-                if (error == null) {
-                    error = values.getString("error_type");
-                }
-
-                if (error == null) {
-                    mListener.onComplete(values);
-                } else if (error.equals("access_denied") ||
-                           error.equals("OAuthAccessDeniedException")) {
-                    mListener.onCancel();
-                } else {
-                    mListener.onFacebookError(new FacebookError(error));
-                }
-
-                safeDismissDialog(FbDialog.this);
-                return true;
-            } else if (url.startsWith(Facebook.CANCEL_URI)) {
-                mListener.onCancel();
-                safeDismissDialog(FbDialog.this);
-                return true;
-            } else if (Util.getSsoEnabled(getContext()) && (url.contains(Facebook.LOGIN_URI) || url.contains(Facebook.HOME_URI))) {
-            	Log.d("Facebook-WebView", "Facebook tried to redirect to login URI - bailing");
-
-            	Bundle values = new Bundle();
-            	values.putInt(Facebook.ERROR_CODE_KEY, Facebook.LOGIN_REDIRECT_CODE);
-                mListener.onComplete(values);
-                safeDismissDialog(FbDialog.this);
-                return true;
-            } else if (url.contains(DISPLAY_STRING)) {
-                return false;
-            }
-            // launch non-dialog URLs in a full browser
-            getContext().startActivity(
-                    new Intent(Intent.ACTION_VIEW, Uri.parse(url)));
-            return true;
-        }
-
-        @Override
-        public void onReceivedError(WebView view, int errorCode,
-                String description, String failingUrl) {
-            super.onReceivedError(view, errorCode, description, failingUrl);
-            mListener.onError(new DialogError(description, errorCode, failingUrl));
-            safeDismissDialog(FbDialog.this);
-        }
-
-        @Override
-        public void onPageStarted(WebView view, String url, Bitmap favicon) {
-            Util.logd("Facebook-WebView", "Webview loading URL: " + url);
-            super.onPageStarted(view, url, favicon);
-
-            if (Util.getSsoEnabled(getContext()) && (url.contains(Facebook.LOGIN_URI) || url.contains(Facebook.HOME_URI))) {
-                Log.d("Facebook-WebView", "Facebook loaded login or home URI - bailing");
-
-                Bundle values = new Bundle();
-                values.putInt(Facebook.ERROR_CODE_KEY, Facebook.LOGIN_REDIRECT_CODE);
-                mListener.onComplete(values);
-                safeDismissDialog(FbDialog.this);
-            }
-            else {
-                Log.d("Facebook-WebView", "Trying to show progress dialog...");
-            	if (FbDialog.this.isShowing()) {
-                    Log.d("Facebook-WebView", "Showing progress dialog...");
-            		createProgressDialog().show();
-            	}
-            }
-        }
-
-        @Override
-        public void onPageFinished(WebView view, String url) {
-            super.onPageFinished(view, url);
-            safeDismissDialog(mSpinner);
-
-			/*
-             * Once webview is fully loaded, set the mContent background to be transparent
-             * and make visible the 'x' image.
-             */
-            mContent.setBackgroundColor(Color.TRANSPARENT);
-            mWebView.setVisibility(View.VISIBLE);
-            mCrossImage.setVisibility(View.VISIBLE);
-        }
-    }
-
-    public static void safeDismissDialog(Dialog dialog) {
-        try {
-        	if (dialog != null) {
-        		dialog.dismiss();
-        	}
-        }
-        catch(NullPointerException e) {
-            Log.d("Facebook-WebView", "NPE dismissing dialog");
-        }
-        catch(IllegalArgumentException iae) {
-            Log.d("Facebook-WebView", "IAE dismissing dialog");
-        }
-    }
-}
diff --git a/facebook/src/com/facebook/android/Util.java b/facebook/src/com/facebook/android/Util.java
index 477613e07..b37d8af2b 100644
--- a/facebook/src/com/facebook/android/Util.java
+++ b/facebook/src/com/facebook/android/Util.java
@@ -1,5 +1,5 @@
-/*
- * Copyright 2010 Facebook, Inc.
+/**
+ * Copyright 2010-present Facebook
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -16,48 +16,32 @@
 
 package com.facebook.android;
 
-import java.io.BufferedOutputStream;
-import java.io.BufferedReader;
-import java.io.FileNotFoundException;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLDecoder;
-import java.net.URLEncoder;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
 import android.app.AlertDialog.Builder;
 import android.content.Context;
-import android.content.SharedPreferences.Editor;
 import android.os.Bundle;
-import android.util.Log;
-import android.webkit.CookieManager;
-import android.webkit.CookieSyncManager;
+import com.facebook.internal.Utility;
+
+import java.io.*;
+import java.net.*;
 
 /**
  * Utility class supporting the Facebook Object.
+ * <p/>
+ * THIS CLASS SHOULD BE CONSIDERED DEPRECATED.
+ * <p/>
+ * All public members of this class are intentionally deprecated.
+ * New code should instead use
+ * {@link com.facebook.Request}
+ * <p/>
+ * Adding @Deprecated to this class causes warnings in other deprecated classes
+ * that reference this one.  That is the only reason this entire class is not
+ * deprecated.
  *
- * @author ssoneff@facebook.com
- *
+ * @devDocDeprecated
  */
 public final class Util {
 
-    private static final String TAG = "Facebook-Utils";
-
-    private static final String SHARED_PREFS_NAME = "facebook_shared_prefs";
-    private static final String SSO_ENABLED_PREFS_KEY = "sso_enabled_key";
-
-    /**
-     * Set this to true to enable log output.  Remember to turn this back off
-     * before releasing.  Sending sensitive data to log is a security risk.
-     */
-    private static boolean ENABLE_LOG = false;
+    private final static String UTF8 = "UTF-8";
 
     /**
      * Generate the multi-part post body providing the parameters and boundary
@@ -67,23 +51,26 @@
      * @param boundary the random string as boundary
      * @return a string of the post body
      */
+    @Deprecated
     public static String encodePostBody(Bundle parameters, String boundary) {
         if (parameters == null) return "";
         StringBuilder sb = new StringBuilder();
 
         for (String key : parameters.keySet()) {
-            if (parameters.getByteArray(key) != null) {
+            Object parameter = parameters.get(key);
+            if (!(parameter instanceof String)) {
                 continue;
             }
 
             sb.append("Content-Disposition: form-data; name=\"" + key +
-                    "\"\r\n\r\n" + parameters.getString(key));
+                    "\"\r\n\r\n" + (String)parameter);
             sb.append("\r\n" + "--" + boundary + "\r\n");
         }
 
         return sb.toString();
     }
 
+    @Deprecated
     public static String encodeUrl(Bundle parameters) {
         if (parameters == null) {
             return "";
@@ -92,6 +79,11 @@ public static String encodeUrl(Bundle parameters) {
         StringBuilder sb = new StringBuilder();
         boolean first = true;
         for (String key : parameters.keySet()) {
+            Object parameter = parameters.get(key);
+            if (!(parameter instanceof String)) {
+                continue;
+            }
+
             if (first) first = false; else sb.append("&");
             sb.append(URLEncoder.encode(key) + "=" +
                       URLEncoder.encode(parameters.getString(key)));
@@ -99,15 +91,23 @@ public static String encodeUrl(Bundle parameters) {
         return sb.toString();
     }
 
+    @Deprecated
     public static Bundle decodeUrl(String s) {
         Bundle params = new Bundle();
         if (s != null) {
             String array[] = s.split("&");
             for (String parameter : array) {
                 String v[] = parameter.split("=");
-                if(v.length == 2) {
-                    params.putString(URLDecoder.decode(v[0]),
-                                     URLDecoder.decode(v[1]));
+
+                try {
+                    if (v.length == 2) {
+                        params.putString(URLDecoder.decode(v[0], UTF8),
+                                         URLDecoder.decode(v[1], UTF8));
+                    } else if (v.length == 1) {
+                        params.putString(URLDecoder.decode(v[0], UTF8), "");
+                    }
+                } catch (UnsupportedEncodingException e) {
+                    // shouldn't happen
                 }
             }
         }
@@ -120,6 +120,7 @@ public static Bundle decodeUrl(String s) {
      * @param url the URL to parse
      * @return a dictionary bundle of keys and values
      */
+    @Deprecated
     public static Bundle parseUrl(String url) {
         // hack to prevent MalformedURLException
         url = url.replace("fbconnect", "http");
@@ -147,6 +148,7 @@ public static Bundle parseUrl(String url) {
      * @throws MalformedURLException - if the URL format is invalid
      * @throws IOException - if a network problem occurs
      */
+    @Deprecated
     public static String openUrl(String url, String method, Bundle params)
           throws MalformedURLException, IOException {
         // random string as boundary for multi-part http post
@@ -158,7 +160,7 @@ public static String openUrl(String url, String method, Bundle params)
         if (method.equals("GET")) {
             url = url + "?" + encodeUrl(params);
         }
-        Util.logd("Facebook-Util", method + " URL: " + url);
+        Utility.logd("Facebook-Util", method + " URL: " + url);
         HttpURLConnection conn =
             (HttpURLConnection) new URL(url).openConnection();
         // GJV set connect & read timeouts to prevent infinite waiting
@@ -169,8 +171,9 @@ public static String openUrl(String url, String method, Bundle params)
         if (!method.equals("GET")) {
             Bundle dataparams = new Bundle();
             for (String key : params.keySet()) {
-                if (params.getByteArray(key) != null) {
-                        dataparams.putByteArray(key, params.getByteArray(key));
+                Object parameter = params.get(key);
+                if (parameter instanceof byte[]) {
+                    dataparams.putByteArray(key, (byte[])parameter);
                 }
             }
 
@@ -222,6 +225,7 @@ public static String openUrl(String url, String method, Bundle params)
         return response;
     }
 
+    @Deprecated
     private static String read(InputStream in) throws IOException {
         StringBuilder sb = new StringBuilder();
         BufferedReader r = new BufferedReader(new InputStreamReader(in), 1000);
@@ -232,71 +236,6 @@ private static String read(InputStream in) throws IOException {
         return sb.toString();
     }
 
-    public static void clearCookies(Context context) {
-        // Edge case: an illegal state exception is thrown if an instance of
-        // CookieSyncManager has not be created.  CookieSyncManager is normally
-        // created by a WebKit view, but this might happen if you start the
-        // app, restore saved state, and click logout before running a UI
-        // dialog in a WebView -- in which case the app crashes
-        @SuppressWarnings("unused")
-        CookieSyncManager cookieSyncMngr =
-            CookieSyncManager.createInstance(context);
-        CookieManager cookieManager = CookieManager.getInstance();
-        cookieManager.removeAllCookie();
-    }
-
-    /**
-     * Parse a server response into a JSON Object. This is a basic
-     * implementation using org.json.JSONObject representation. More
-     * sophisticated applications may wish to do their own parsing.
-     *
-     * The parsed JSON is checked for a variety of error fields and
-     * a FacebookException is thrown if an error condition is set,
-     * populated with the error message and error type or code if
-     * available.
-     *
-     * @param response - string representation of the response
-     * @return the response as a JSON Object
-     * @throws JSONException - if the response is not valid JSON
-     * @throws FacebookError - if an error condition is set
-     */
-    public static JSONObject parseJson(String response)
-          throws JSONException, FacebookError {
-        // Edge case: when sending a POST request to /[post_id]/likes
-        // the return value is 'true' or 'false'. Unfortunately
-        // these values cause the JSONObject constructor to throw
-        // an exception.
-        if (response.equals("false")) {
-            throw new FacebookError("request failed");
-        }
-        if (response.equals("true")) {
-            response = "{value : true}";
-        }
-        JSONObject json = new JSONObject(response);
-
-        // errors set by the server are not consistent
-        // they depend on the method and endpoint
-        if (json.has("error")) {
-            JSONObject error = json.getJSONObject("error");
-            throw new FacebookError(
-                    error.getString("message"), error.getString("type"), 0);
-        }
-        if (json.has("error_code") && json.has("error_msg")) {
-            throw new FacebookError(json.getString("error_msg"), "",
-                    Integer.parseInt(json.getString("error_code")));
-        }
-        if (json.has("error_code")) {
-            throw new FacebookError("request failed", "",
-                    Integer.parseInt(json.getString("error_code")));
-        }
-        if (json.has("error_msg")) {
-            throw new FacebookError(json.getString("error_msg"));
-        }
-        if (json.has("error_reason")) {
-            throw new FacebookError(json.getString("error_reason"));
-        }
-        return json;
-    }
 
     /**
      * Display a simple alert dialog with the given text and title.
@@ -308,41 +247,11 @@ public static JSONObject parseJson(String response)
      * @param text
      *          Alert dialog message
      */
+    @Deprecated
     public static void showAlert(Context context, String title, String text) {
         Builder alertBuilder = new Builder(context);
         alertBuilder.setTitle(title);
         alertBuilder.setMessage(text);
         alertBuilder.create().show();
     }
-
-    public static void setSsoEnabled(Context context, boolean singleSignOnEnabled) {
-        Util.logd(TAG, "Writing SSO enabled: " + String.valueOf(singleSignOnEnabled));
-        Editor ed = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE).edit();
-        ed.putBoolean(SSO_ENABLED_PREFS_KEY, singleSignOnEnabled);
-        ed.commit();
-    }
-
-    public static boolean getSsoEnabled(Context context) {
-        final boolean rtn = context.getSharedPreferences(SHARED_PREFS_NAME, Context.MODE_PRIVATE).getBoolean(SSO_ENABLED_PREFS_KEY, false);
-        Util.logd(TAG, "Read SSO enabled: " + String.valueOf(rtn));
-        return rtn;
-    }
-
-    /**
-     * A proxy for Log.d api that kills log messages in release build. It
-     * not recommended to send sensitive information to log output in
-     * shipping apps.
-     *
-     * @param tag
-     * @param msg
-     */
-    public static void logd(String tag, String msg) {
-        if (ENABLE_LOG) {
-            Log.d(tag, msg);
-        }
-    }
-    
-    public static void toggleLoggingEnabled(boolean enabled) {
-        ENABLE_LOG = enabled;
-    }
 }
diff --git a/facebook/tests/.classpath b/facebook/tests/.classpath
new file mode 100644
index 000000000..a4763d1ee
--- /dev/null
+++ b/facebook/tests/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/facebook/tests/.project b/facebook/tests/.project
new file mode 100644
index 000000000..82993b5a8
--- /dev/null
+++ b/facebook/tests/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>SDKTests</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/BooleanOGSample/.classpath b/samples/BooleanOGSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/BooleanOGSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/BooleanOGSample/.project b/samples/BooleanOGSample/.project
new file mode 100644
index 000000000..cd9402a77
--- /dev/null
+++ b/samples/BooleanOGSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>BooleanOGSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/FriendPickerSample/.classpath b/samples/FriendPickerSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/FriendPickerSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/FriendPickerSample/.project b/samples/FriendPickerSample/.project
new file mode 100644
index 000000000..c956fc90d
--- /dev/null
+++ b/samples/FriendPickerSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>FriendPickerSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/GraphApiSample/.classpath b/samples/GraphApiSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/GraphApiSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/GraphApiSample/.project b/samples/GraphApiSample/.project
new file mode 100644
index 000000000..cb993bbc8
--- /dev/null
+++ b/samples/GraphApiSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>GraphApiSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/Hackbook/.classpath b/samples/Hackbook/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/Hackbook/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/Hackbook/.project b/samples/Hackbook/.project
new file mode 100644
index 000000000..c453fce2f
--- /dev/null
+++ b/samples/Hackbook/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>Hackbook</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/HelloFacebookSample/.classpath b/samples/HelloFacebookSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/HelloFacebookSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/HelloFacebookSample/.project b/samples/HelloFacebookSample/.project
new file mode 100644
index 000000000..cb52d544b
--- /dev/null
+++ b/samples/HelloFacebookSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>HelloFacebookSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/PlacePickerSample/.classpath b/samples/PlacePickerSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/PlacePickerSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/PlacePickerSample/.project b/samples/PlacePickerSample/.project
new file mode 100644
index 000000000..73ec9015a
--- /dev/null
+++ b/samples/PlacePickerSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>PlacePickerSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/ProfilePictureSample/.classpath b/samples/ProfilePictureSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/ProfilePictureSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/ProfilePictureSample/.project b/samples/ProfilePictureSample/.project
new file mode 100644
index 000000000..44914352a
--- /dev/null
+++ b/samples/ProfilePictureSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>ProfilePictureSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/Scrumptious/.classpath b/samples/Scrumptious/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/Scrumptious/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/Scrumptious/.project b/samples/Scrumptious/.project
new file mode 100644
index 000000000..dfb9212a3
--- /dev/null
+++ b/samples/Scrumptious/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>Scrumptious</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/SessionLoginSample/.classpath b/samples/SessionLoginSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/SessionLoginSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/SessionLoginSample/.project b/samples/SessionLoginSample/.project
new file mode 100644
index 000000000..d8c641423
--- /dev/null
+++ b/samples/SessionLoginSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>SessionLoginSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/samples/SwitchUserSample/.classpath b/samples/SwitchUserSample/.classpath
new file mode 100644
index 000000000..655a4a827
--- /dev/null
+++ b/samples/SwitchUserSample/.classpath
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
+	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="src" path="gen"/>
+	<classpathentry kind="output" path="bin/classes"/>
+</classpath>
diff --git a/samples/SwitchUserSample/.project b/samples/SwitchUserSample/.project
new file mode 100644
index 000000000..2f6fda8c3
--- /dev/null
+++ b/samples/SwitchUserSample/.project
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>SwitchUserSample</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ResourceManagerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.PreCompilerBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>com.android.ide.eclipse.adt.ApkBuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>com.android.ide.eclipse.adt.AndroidNature</nature>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
