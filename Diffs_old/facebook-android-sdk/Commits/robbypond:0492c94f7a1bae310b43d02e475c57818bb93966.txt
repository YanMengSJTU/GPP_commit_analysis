diff --git a/.buckconfig b/.buckconfig
new file mode 100644
index 000000000..cfa58a9e4
--- /dev/null
+++ b/.buckconfig
@@ -0,0 +1,18 @@
+# .buckconfig.local is in .gitignore, so you do not have to worry about checking your
+# personal customizations to Buck into the repo.
+
+[java]
+    # This makes it possible to determine the package of a
+    # Java file from the path alone.
+    src_roots = /facebook/src/, /samples/HelloFacebookSample/src/
+
+    # We target gingerbread. Ensure that libraries target that.
+    source_level = 6
+    target_level = 6
+
+[build]
+    build_dependencies = FIRST_ORDER_ONLY
+
+[alias]
+    sdk = //facebook:android-sdk
+    hello-facebook = //samples/HelloFacebookSample:app
diff --git a/.buckversion b/.buckversion
new file mode 100644
index 000000000..f2e2f6494
--- /dev/null
+++ b/.buckversion
@@ -0,0 +1 @@
+62a21e0436bc4b72db9aa7fc2237d9cdf162b29f
diff --git a/.gitignore b/.gitignore
index 439d03e18..a933a6ed8 100644
--- a/.gitignore
+++ b/.gitignore
@@ -49,3 +49,4 @@ facebook/doc/
 facebook/lint.xml
 facebook/tests/lint.xml
 facebook/tests/assets/config.json
+gradle-app.setting
diff --git a/facebook/AndroidManifest.xml b/facebook/AndroidManifest.xml
index 2f9284fb0..1c7e0766a 100644
--- a/facebook/AndroidManifest.xml
+++ b/facebook/AndroidManifest.xml
@@ -18,5 +18,5 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.facebook.android">
     <application/>
-    <uses-sdk android:minSdkVersion="8" />
+    <uses-sdk android:minSdkVersion="9" />
 </manifest>
diff --git a/facebook/BUCK b/facebook/BUCK
new file mode 100644
index 000000000..fb805910e
--- /dev/null
+++ b/facebook/BUCK
@@ -0,0 +1,26 @@
+build_config(
+  name = 'config-debug',
+  package = 'com.facebook.android',
+  debug = True,
+)
+
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.facebook.android',
+  deps = [
+  ],
+)
+
+android_library(
+  name = 'android-sdk',
+  srcs = glob(['src/**/*.java']) + [':config-debug'],
+  deps = [
+    ':res',
+    '//libs:android-support-v4',
+    '//libs:bolts',
+  ],
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/facebook/TestApp/project.properties b/facebook/TestApp/project.properties
index b0620672e..f5ff80597 100644
--- a/facebook/TestApp/project.properties
+++ b/facebook/TestApp/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 
diff --git a/facebook/project.properties b/facebook/project.properties
index cd0ca122a..131a55407 100644
--- a/facebook/project.properties
+++ b/facebook/project.properties
@@ -12,4 +12,4 @@
 
 android.library=true
 # Project target.
-target=android-8
+target=android-9
diff --git a/facebook/src/com/facebook/AccessToken.java b/facebook/src/com/facebook/AccessToken.java
index 392d677e3..898abb5ce 100644
--- a/facebook/src/com/facebook/AccessToken.java
+++ b/facebook/src/com/facebook/AccessToken.java
@@ -27,11 +27,7 @@
 import java.io.InvalidObjectException;
 import java.io.ObjectInputStream;
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
+import java.util.*;
 
 /**
  * This class represents an access token returned by the Facebook Login service, along with associated
@@ -240,9 +236,11 @@ static AccessToken createFromWebBundle(List<String> requestedPermissions, Bundle
     static AccessToken createFromRefresh(AccessToken current, Bundle bundle) {
         // Only tokens obtained via SSO support refresh. Token refresh returns the expiration date in
         // seconds from the epoch rather than seconds from now.
-        assert (current.source == AccessTokenSource.FACEBOOK_APPLICATION_WEB ||
-                current.source == AccessTokenSource.FACEBOOK_APPLICATION_NATIVE ||
-                current.source == AccessTokenSource.FACEBOOK_APPLICATION_SERVICE);
+        if (current.source != AccessTokenSource.FACEBOOK_APPLICATION_WEB &&
+                current.source != AccessTokenSource.FACEBOOK_APPLICATION_NATIVE &&
+                current.source != AccessTokenSource.FACEBOOK_APPLICATION_SERVICE) {
+            throw new FacebookException("Invalid token source: " + current.source);
+        }
 
         Date expires = getBundleLongAsDate(bundle, EXPIRES_IN_KEY, new Date(0));
         String token = bundle.getString(ACCESS_TOKEN_KEY);
diff --git a/facebook/src/com/facebook/AppEventsConstants.java b/facebook/src/com/facebook/AppEventsConstants.java
index 24fd13872..51ba60e55 100644
--- a/facebook/src/com/facebook/AppEventsConstants.java
+++ b/facebook/src/com/facebook/AppEventsConstants.java
@@ -28,6 +28,12 @@
     /** Log this event when an app is being activated. */
     public static final String EVENT_NAME_ACTIVATED_APP = "fb_mobile_activate_app";
 
+    public static final String EVENT_NAME_DEACTIVATED_APP = "fb_mobile_deactivate_app";
+
+    public static final String EVENT_NAME_SESSION_INTERRUPTIONS = "fb_mobile_app_interruptions";
+
+    public static final String EVENT_NAME_TIME_BETWEEN_SESSIONS = "fb_mobile_time_between_sessions";
+
     /** Log this event when a user has completed registration with the app. */
     public static final String EVENT_NAME_COMPLETED_REGISTRATION = "fb_mobile_complete_registration";
 
@@ -164,5 +170,4 @@
 
     /** No-valued parameter value to be used with parameter keys that need a Yes/No value */
     public static final String EVENT_PARAM_VALUE_NO = "0";
-
 }
diff --git a/facebook/src/com/facebook/AppEventsLogger.java b/facebook/src/com/facebook/AppEventsLogger.java
index e35789a62..05e747c09 100644
--- a/facebook/src/com/facebook/AppEventsLogger.java
+++ b/facebook/src/com/facebook/AppEventsLogger.java
@@ -21,7 +21,10 @@
 import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 import android.util.Log;
-import com.facebook.internal.*;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 import com.facebook.model.GraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -31,6 +34,8 @@
 import java.math.BigDecimal;
 import java.util.*;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ScheduledThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 
 /**
@@ -122,41 +127,13 @@
         EXPLICIT_ONLY,
     }
 
-    private enum SuppressionTimeoutBehavior {
-        // Successfully logging an event will reset the timeout period (i.e., events will log no more than every N
-        // seconds).
-        RESET_TIMEOUT_WHEN_LOG_SUCCESSFUL,
-        // Attempting to log an event, even if it is suppressed, will reset the timeout period (i.e., events will not
-        // be logged until they have been "silent" for at least N seconds).
-        RESET_TIMEOUT_WHEN_LOG_ATTEMPTED,
-    }
-
-    private static class EventSuppression {
-        // Timeout period in seconds
-        private int timeoutPeriod;
-        private SuppressionTimeoutBehavior behavior;
-
-        EventSuppression(int timeoutPeriod, SuppressionTimeoutBehavior behavior) {
-            this.timeoutPeriod = timeoutPeriod;
-            this.behavior = behavior;
-        }
-
-        int getTimeoutPeriod() {
-            return timeoutPeriod;
-        }
-
-        SuppressionTimeoutBehavior getBehavior() {
-            return behavior;
-        }
-    }
-
     // Constants
     private static final String TAG = AppEventsLogger.class.getCanonicalName();
 
     private static final int NUM_LOG_EVENTS_TO_TRY_TO_FLUSH_AFTER                  = 100;
     private static final int FLUSH_PERIOD_IN_SECONDS                               = 60;
     private static final int APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS = 60 * 60 * 24;
-    private static final int APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS            = 5 * 60;
+    private static final int FLUSH_APP_SESSION_INFO_IN_SECONDS                     = 30;
 
     // Instance member variables
     private final Context context;
@@ -164,22 +141,12 @@ SuppressionTimeoutBehavior getBehavior() {
 
     private static Map<AccessTokenAppIdPair, SessionEventsState> stateMap =
             new ConcurrentHashMap<AccessTokenAppIdPair, SessionEventsState>();
-    private static Timer flushTimer;
-    private static Timer supportsAttributionRecheckTimer;
+    private static ScheduledThreadPoolExecutor backgroundExecutor;
     private static FlushBehavior flushBehavior = FlushBehavior.AUTO;
     private static boolean requestInFlight;
     private static Context applicationContext;
     private static Object staticLock = new Object();
     private static String hashedDeviceAndAppId;
-    private static Map<String, Date> mapEventsToSuppressionTime = new HashMap<String, Date>();
-    @SuppressWarnings("serial")
-    private static Map<String, EventSuppression> mapEventNameToSuppress = new HashMap<String, EventSuppression>() {
-        {
-            put(AppEventsConstants.EVENT_NAME_ACTIVATED_APP,
-                    new EventSuppression(APP_ACTIVATE_SUPPRESSION_PERIOD_IN_SECONDS,
-                            SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED));
-        }
-    };
 
     // Rather than retaining Sessions, we extract the information we need and track app events by
     // application ID and access token (which may be null for Session-less calls). This avoids needing to
@@ -291,8 +258,60 @@ public static void activateApp(Context context, String applicationId) {
         // can't reliably infer install state for all conditions of an app activate.
         Settings.publishInstallAsync(context, applicationId, null);
 
-        AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
-        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
+        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
+        final long eventTime = System.currentTimeMillis();
+        backgroundExecutor.execute(new Runnable() {
+          @Override
+          public void run() {
+            logger.logAppSessionResumeEvent(eventTime);
+          }
+        });
+    }
+
+    /**
+     * Notifies the events system that the app has been deactivated (put in the background) and
+     * tracks the application session information. Should be called whenever your app becomes
+     * inactive, typically in the onPause() method of each long-running Activity of your app.
+     *
+     * Use this method if your application ID is stored in application metadata, otherwise see
+     * {@link AppEventsLogger#deactivateApp(android.content.Context, String)}.
+     *
+     * @param context   Used to access the applicationId and the attributionId for non-authenticated users.
+     */
+    public static void deactivateApp(Context context) {
+        deactivateApp(context, Utility.getMetadataApplicationId(context));
+    }
+
+    /**
+     * Notifies the events system that the app has been deactivated (put in the background) and
+     * tracks the application session information. Should be called whenever your app becomes
+     * inactive, typically in the onPause() method of each long-running Activity of your app.
+     *
+     * @param context   Used to access the attributionId for non-authenticated users.
+     *
+     * @param applicationId  The specific applicationId to track session information for.
+     */
+    public static void deactivateApp(Context context, String applicationId) {
+        if (context == null || applicationId == null) {
+            throw new IllegalArgumentException("Both context and applicationId must be non-null");
+        }
+
+        final AppEventsLogger logger = new AppEventsLogger(context, applicationId, null);
+        final long eventTime = System.currentTimeMillis();
+        backgroundExecutor.execute(new Runnable() {
+          @Override
+          public void run() {
+            logger.logAppSessionSuspendEvent(eventTime);
+          }
+        });
+    }
+
+    private void logAppSessionResumeEvent(long eventTime) {
+        PersistedAppSessionInfo.onResume(applicationContext, accessTokenAppId, this, eventTime);
+    }
+
+    private void logAppSessionSuspendEvent(long eventTime) {
+        PersistedAppSessionInfo.onSuspend(applicationContext, accessTokenAppId, this, eventTime);
     }
 
     /**
@@ -538,6 +557,7 @@ public String getApplicationId() {
     // Private implementation
     //
 
+    @SuppressWarnings("UnusedDeclaration")
     private enum FlushReason {
         EXPLICIT,
         TIMER,
@@ -547,6 +567,7 @@ public String getApplicationId() {
         EAGER_FLUSHING_EVENT,
     }
 
+    @SuppressWarnings("UnusedDeclaration")
     private enum FlushResult {
         SUCCESS,
         SERVER_ERROR,
@@ -595,85 +616,65 @@ private AppEventsLogger(Context context, String applicationId, Session session)
 
     private static void initializeTimersIfNeeded() {
         synchronized (staticLock) {
-            if (flushTimer != null) {
+            if (backgroundExecutor != null) {
                 return;
             }
-            flushTimer = new Timer();
-            supportsAttributionRecheckTimer = new Timer();
+            backgroundExecutor = new ScheduledThreadPoolExecutor(1);
         }
 
-        flushTimer.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
-                            flushAndWait(FlushReason.TIMER);
-                        }
-                    }
-                },
-                0,  // start immediately
-                FLUSH_PERIOD_IN_SECONDS * 1000);
-
-        supportsAttributionRecheckTimer.schedule(
-                new TimerTask() {
-                    @Override
-                    public void run() {
-                        Set<String> applicationIds = new HashSet<String>();
-                        synchronized (staticLock) {
-                            for (AccessTokenAppIdPair accessTokenAppId  : stateMap.keySet()) {
-                                applicationIds.add(accessTokenAppId.getApplicationId());
-                            }
-                        }
-                        for (String applicationId : applicationIds) {
-                            Utility.queryAppSettings(applicationId, true);
-                        }
+        final Runnable flushRunnable = new Runnable() {
+            @Override
+            public void run() {
+                if (getFlushBehavior() != FlushBehavior.EXPLICIT_ONLY) {
+                    flushAndWait(FlushReason.TIMER);
+                }
+            }
+        };
+
+        backgroundExecutor.scheduleAtFixedRate(
+            flushRunnable,
+            0,
+            FLUSH_PERIOD_IN_SECONDS,
+            TimeUnit.SECONDS
+        );
+
+        final Runnable attributionRecheckRunnable = new Runnable() {
+            @Override
+            public void run() {
+                Set<String> applicationIds = new HashSet<String>();
+                synchronized (staticLock) {
+                    for (AccessTokenAppIdPair accessTokenAppId : stateMap.keySet()) {
+                        applicationIds.add(accessTokenAppId.getApplicationId());
                     }
-                },
-                0,   // start immediately
-                APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS * 1000);
+                }
+                for (String applicationId : applicationIds) {
+                    Utility.queryAppSettings(applicationId, true);
+                }
+            }
+        };
+
+        backgroundExecutor.scheduleAtFixedRate(
+            attributionRecheckRunnable,
+            0,
+            APP_SUPPORTS_ATTRIBUTION_ID_RECHECK_PERIOD_IN_SECONDS,
+            TimeUnit.SECONDS
+        );
     }
 
     private void logEvent(String eventName, Double valueToSum, Bundle parameters, boolean isImplicitlyLogged) {
-
         AppEvent event = new AppEvent(this.context, eventName, valueToSum, parameters, isImplicitlyLogged);
         logEvent(context, event, accessTokenAppId);
     }
 
-    private static void logEvent(Context context, AppEvent event, AccessTokenAppIdPair accessTokenAppId) {
-        if(shouldSuppressEvent(event)) {
-            return;
-        }
-
-        SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
-        state.addEvent(event);
-
-        flushIfNecessary();
-    }
-
-    // This will also update the timestamp based on specified behavior.
-    private static boolean shouldSuppressEvent(AppEvent event) {
-        EventSuppression suppressionInfo = mapEventNameToSuppress.get(event.getName());
-        if (suppressionInfo == null) {
-            return false;
-        }
-
-        Date timestamp = mapEventsToSuppressionTime.get(event.getName());
-        boolean suppressed;
-        if (timestamp == null) {
-            suppressed = false;
-        } else {
-            long delta = new Date().getTime() - timestamp.getTime();
-            suppressed = delta < (suppressionInfo.getTimeoutPeriod() * 1000);
-        }
-
-        // Update the time if we're not suppressed, OR if we are suppressed but the behavior is to reset even on
-        // suppressed events.
-        if (!suppressed ||
-                suppressionInfo.getBehavior() == SuppressionTimeoutBehavior.RESET_TIMEOUT_WHEN_LOG_ATTEMPTED) {
-            mapEventsToSuppressionTime.put(event.getName(), new Date());
-        }
-
-        return suppressed;
+   private static void logEvent(final Context context, final AppEvent event, final AccessTokenAppIdPair accessTokenAppId) {
+        Settings.getExecutor().execute(new Runnable() {
+            @Override
+            public void run() {
+                SessionEventsState state = getSessionEventsState(context, accessTokenAppId);
+                state.addEvent(event);
+                flushIfNecessary();
+            }
+        });
     }
 
     static void eagerFlush() {
@@ -705,13 +706,20 @@ private static int getAccumulatedEventCount() {
 
     // Creates a new SessionEventsState if not already in the map.
     private static SessionEventsState getSessionEventsState(Context context, AccessTokenAppIdPair accessTokenAppId) {
+        // Do this work outside of the lock to prevent deadlocks in implementation of
+        //  AdvertisingIdClient.getAdvertisingIdInfo, because that implementation blocks waiting on the main thread,
+        //  which may also grab this staticLock.
+        SessionEventsState state = stateMap.get(accessTokenAppId);
+        AttributionIdentifiers attributionIdentifiers = null;
+        if (state == null) {
+            // Retrieve attributionId, but we will only send it if attribution is supported for the app.
+            attributionIdentifiers = AttributionIdentifiers.getAttributionIdentifiers(context);
+        }
+
         synchronized (staticLock) {
-            SessionEventsState state = stateMap.get(accessTokenAppId);
+            // Check state again while we're locked.
+            state = stateMap.get(accessTokenAppId);
             if (state == null) {
-                // Retrieve attributionId, but we will only send it if attribution is supported for the app.
-                AttributionIdentifiers attributionIdentifiers =
-                    AttributionIdentifiers.getAttributionIdentifiers(context);
-
                 state = new SessionEventsState(attributionIdentifiers, context.getPackageName(), hashedDeviceAndAppId);
                 stateMap.put(accessTokenAppId, state);
             }
@@ -1216,6 +1224,134 @@ public String toString() {
         }
     }
 
+    static class PersistedAppSessionInfo {
+        private static final String PERSISTED_SESSION_INFO_FILENAME =
+                "AppEventsLogger.persistedsessioninfo";
+
+        private static final Object staticLock = new Object();
+        private static boolean hasChanges = false;
+        private static boolean isLoaded = false;
+        private static Map<AccessTokenAppIdPair, FacebookTimeSpentData> appSessionInfoMap;
+
+        private static final Runnable appSessionInfoFlushRunnable = new Runnable() {
+            @Override
+            public void run() {
+                PersistedAppSessionInfo.saveAppSessionInformation(applicationContext);
+            }
+        };
+
+        @SuppressWarnings("unchecked")
+        private static void restoreAppSessionInformation(Context context) {
+            ObjectInputStream ois = null;
+
+            synchronized (staticLock) {
+                if (!isLoaded) {
+                    try {
+                        ois =
+                            new ObjectInputStream(
+                                context.openFileInput(PERSISTED_SESSION_INFO_FILENAME));
+                        appSessionInfoMap =
+                            (HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>) ois.readObject();
+                        Logger.log(
+                            LoggingBehavior.APP_EVENTS,
+                            "AppEvents",
+                            "App session info loaded");
+                    } catch (FileNotFoundException fex) {
+                    } catch (Exception e) {
+                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                    } finally {
+                        Utility.closeQuietly(ois);
+                        context.deleteFile(PERSISTED_SESSION_INFO_FILENAME);
+                        if (appSessionInfoMap == null) {
+                            appSessionInfoMap =
+                                    new HashMap<AccessTokenAppIdPair, FacebookTimeSpentData>();
+                        }
+                        // Regardless of the outcome of the load, the session information cache
+                        // is always deleted. Therefore, always treat the session information cache
+                        // as loaded
+                        isLoaded = true;
+                        hasChanges = false;
+                    }
+                }
+            }
+        }
+
+        static void saveAppSessionInformation(Context context) {
+            ObjectOutputStream oos = null;
+
+            synchronized (staticLock) {
+                if (hasChanges) {
+                    try {
+                        oos = new ObjectOutputStream(
+                                new BufferedOutputStream(
+                                    context.openFileOutput(
+                                        PERSISTED_SESSION_INFO_FILENAME,
+                                        Context.MODE_PRIVATE)));
+                        oos.writeObject(appSessionInfoMap);
+                        hasChanges = false;
+                        Logger.log(LoggingBehavior.APP_EVENTS, "AppEvents", "App session info saved");
+                    } catch (Exception e) {
+                        Log.d(TAG, "Got unexpected exception: " + e.toString());
+                    } finally {
+                        Utility.closeQuietly(oos);
+                    }
+                }
+            }
+        }
+
+        static void onResume(
+          Context context,
+          AccessTokenAppIdPair accessTokenAppId,
+          AppEventsLogger logger,
+          long eventTime
+        ) {
+          synchronized (staticLock) {
+            FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+            timeSpentData.onResume(logger, eventTime);
+            onTimeSpentDataUpdate();
+          }
+        }
+
+        static void onSuspend(
+          Context context,
+          AccessTokenAppIdPair accessTokenAppId,
+          AppEventsLogger logger,
+          long eventTime
+        ) {
+          synchronized (staticLock) {
+            FacebookTimeSpentData timeSpentData = getTimeSpentData(context, accessTokenAppId);
+            timeSpentData.onSuspend(logger, eventTime);
+            onTimeSpentDataUpdate();
+          }
+        }
+
+        private static FacebookTimeSpentData getTimeSpentData(
+            Context context,
+            AccessTokenAppIdPair accessTokenAppId
+        ) {
+            restoreAppSessionInformation(context);
+            FacebookTimeSpentData result = null;
+
+            result = appSessionInfoMap.get(accessTokenAppId);
+            if (result == null) {
+                result = new FacebookTimeSpentData();
+                appSessionInfoMap.put(accessTokenAppId, result);
+            }
+
+            return result;
+        }
+
+        private static void onTimeSpentDataUpdate() {
+            if (!hasChanges) {
+                hasChanges = true;
+                backgroundExecutor.schedule(
+                    appSessionInfoFlushRunnable,
+                    FLUSH_APP_SESSION_INFO_IN_SECONDS,
+                    TimeUnit.SECONDS);
+            }
+        }
+    }
+
     // Read/write operations are thread-safe/atomic across all instances of PersistedEvents, but modifications
     // to any individual instance are not thread-safe.
     static class PersistedEvents {
diff --git a/facebook/src/com/facebook/AppLinkData.java b/facebook/src/com/facebook/AppLinkData.java
index 5309337c1..5dd213556 100644
--- a/facebook/src/com/facebook/AppLinkData.java
+++ b/facebook/src/com/facebook/AppLinkData.java
@@ -21,10 +21,11 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
-import android.os.Handler;
-import android.os.Looper;
+import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.*;
+import com.facebook.internal.AttributionIdentifiers;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 import com.facebook.model.GraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
@@ -150,7 +151,7 @@ private static void fetchDeferredAppLinkFromServer(
                 final String appLinkClassName = jsonResponse.optString(DEFERRED_APP_LINK_CLASS_FIELD);
                 final String appLinkUrl = jsonResponse.optString(DEFERRED_APP_LINK_URL_FIELD);
 
-                if (appLinkArgsJsonString != null && appLinkArgsJsonString != "") {
+                if (!TextUtils.isEmpty(appLinkArgsJsonString)) {
                     appLinkData = createFromJson(appLinkArgsJsonString);
 
                     if (tapTimeUtc != -1) {
diff --git a/facebook/src/com/facebook/AuthorizationClient.java b/facebook/src/com/facebook/AuthorizationClient.java
index f0f31f35b..00a0c0726 100644
--- a/facebook/src/com/facebook/AuthorizationClient.java
+++ b/facebook/src/com/facebook/AuthorizationClient.java
@@ -37,7 +37,10 @@
 import org.json.JSONObject;
 
 import java.io.Serializable;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 class AuthorizationClient implements Serializable {
     private static final long serialVersionUID = 1L;
@@ -72,10 +75,6 @@
     static final String EVENT_EXTRAS_MISSING_INTERNET_PERMISSION = "no_internet_permission";
     static final String EVENT_EXTRAS_NOT_TRIED = "not_tried";
     static final String EVENT_EXTRAS_NEW_PERMISSIONS = "new_permissions";
-    static final String EVENT_EXTRAS_SERVICE_DISABLED = "service_disabled";
-    static final String EVENT_EXTRAS_APP_CALL_ID = "call_id";
-    static final String EVENT_EXTRAS_PROTOCOL_VERSION = "protocol_version";
-    static final String EVENT_EXTRAS_WRITE_PRIVACY = "write_privacy";
 
     List<AuthHandler> handlersToTry;
     AuthHandler currentHandler;
@@ -598,6 +597,9 @@ boolean tryAuthorize(final AuthorizationRequest request) {
                 addLoggingExtra(ServerProtocol.DIALOG_PARAM_SCOPE, scope);
             }
 
+            SessionDefaultAudience audience = request.getDefaultAudience();
+            parameters.putString(ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, audience.getNativeProtocolAudience());
+
             String previousToken = request.getPreviousAccessToken();
             if (!Utility.isNullOrEmpty(previousToken) && (previousToken.equals(loadCookieToken()))) {
                 parameters.putString(ServerProtocol.DIALOG_PARAM_ACCESS_TOKEN, previousToken);
@@ -810,7 +812,7 @@ boolean tryAuthorize(AuthorizationRequest request) {
 
             String e2e = getE2E();
             Intent intent = NativeProtocol.createProxyAuthIntent(context, request.getApplicationId(),
-                    request.getPermissions(), e2e, request.isRerequest());
+                    request.getPermissions(), e2e, request.isRerequest(), request.getDefaultAudience());
 
             addLoggingExtra(ServerProtocol.DIALOG_PARAM_E2E, e2e);
 
diff --git a/facebook/src/com/facebook/BoltsMeasurementEventListener.java b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
index 8a1eaca0c..6e1d71039 100644
--- a/facebook/src/com/facebook/BoltsMeasurementEventListener.java
+++ b/facebook/src/com/facebook/BoltsMeasurementEventListener.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
-import android.os.Bundle;
 import android.support.v4.content.LocalBroadcastManager;
 
 public class BoltsMeasurementEventListener extends BroadcastReceiver {
diff --git a/facebook/src/com/facebook/FacebookAppLinkResolver.java b/facebook/src/com/facebook/FacebookAppLinkResolver.java
index e05e05f99..c36631ed2 100644
--- a/facebook/src/com/facebook/FacebookAppLinkResolver.java
+++ b/facebook/src/com/facebook/FacebookAppLinkResolver.java
@@ -36,6 +36,7 @@
  */
 public class FacebookAppLinkResolver implements AppLinkResolver {
 
+    private static final String APP_LINK_KEY = "app_links";
     private static final String APP_LINK_ANDROID_TARGET_KEY = "android";
     private static final String APP_LINK_WEB_TARGET_KEY = "web";
     private static final String APP_LINK_TARGET_PACKAGE_KEY = "package";
@@ -105,11 +106,12 @@ public AppLink then(Task<Map<Uri, AppLink>> resolveUrisTask) throws Exception {
         final Task<Map<Uri, AppLink>>.TaskCompletionSource taskCompletionSource = Task.create();
 
         Bundle appLinkRequestParameters = new Bundle();
-        appLinkRequestParameters.putString("type", "al");
+
         appLinkRequestParameters.putString("ids", graphRequestFields.toString());
         appLinkRequestParameters.putString(
                 "fields",
-                String.format("%s,%s", APP_LINK_ANDROID_TARGET_KEY, APP_LINK_WEB_TARGET_KEY));
+                String.format("%s.fields(%s,%s)", APP_LINK_KEY, APP_LINK_ANDROID_TARGET_KEY, APP_LINK_WEB_TARGET_KEY));
+
 
         Request appLinkRequest = new Request(
                 null, /* Session */
@@ -141,7 +143,9 @@ public void onCompleted(Response response) {
                             JSONObject urlData = null;
                             try {
                                 urlData = responseJson.getJSONObject(uri.toString());
-                                JSONArray rawTargets = urlData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
+                                JSONObject appLinkData = urlData.getJSONObject(APP_LINK_KEY);
+
+                                JSONArray rawTargets = appLinkData.getJSONArray(APP_LINK_ANDROID_TARGET_KEY);
 
                                 int targetsCount = rawTargets.length();
                                 List<AppLink.Target> targets = new ArrayList<AppLink.Target>(targetsCount);
@@ -153,7 +157,7 @@ public void onCompleted(Response response) {
                                     }
                                 }
 
-                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, urlData);
+                                Uri webFallbackUrl = getWebFallbackUriFromJson(uri, appLinkData);
                                 AppLink appLink = new AppLink(uri, targets, webFallbackUrl);
 
                                 appLinkResults.put(uri, appLink);
diff --git a/facebook/src/com/facebook/FacebookBroadcastReceiver.java b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
index ec2556c9b..1704cdaf8 100644
--- a/facebook/src/com/facebook/FacebookBroadcastReceiver.java
+++ b/facebook/src/com/facebook/FacebookBroadcastReceiver.java
@@ -4,7 +4,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.os.Bundle;
-import android.util.Log;
 import com.facebook.internal.NativeProtocol;
 
 /**
diff --git a/facebook/src/com/facebook/FacebookRequestError.java b/facebook/src/com/facebook/FacebookRequestError.java
index 937e2b580..954d0ecac 100644
--- a/facebook/src/com/facebook/FacebookRequestError.java
+++ b/facebook/src/com/facebook/FacebookRequestError.java
@@ -58,6 +58,9 @@
     private static final String ERROR_SUB_CODE_KEY = "error_subcode";
     private static final String ERROR_MSG_KEY = "error_msg";
     private static final String ERROR_REASON_KEY = "error_reason";
+    private static final String ERROR_USER_TITLE_KEY = "error_user_title";
+    private static final String ERROR_USER_MSG_KEY = "error_user_msg";
+    private static final String ERROR_IS_TRANSIENT_KEY = "is_transient";
 
     private static class Range {
         private final int start, end;
@@ -98,6 +101,9 @@ boolean contains(int value) {
     private final int subErrorCode;
     private final String errorType;
     private final String errorMessage;
+    private final String errorUserTitle;
+    private final String errorUserMessage;
+    private final boolean errorIsTransient;
     private final JSONObject requestResult;
     private final JSONObject requestResultBody;
     private final Object batchRequestResult;
@@ -105,9 +111,9 @@ boolean contains(int value) {
     private final FacebookException exception;
 
     private FacebookRequestError(int requestStatusCode, int errorCode,
-            int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
-            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection,
-            FacebookException exception) {
+            int subErrorCode, String errorType, String errorMessage, String errorUserTitle, String errorUserMessage,
+            boolean errorIsTransient, JSONObject requestResultBody, JSONObject requestResult, Object batchRequestResult,
+            HttpURLConnection connection, FacebookException exception) {
         this.requestStatusCode = requestStatusCode;
         this.errorCode = errorCode;
         this.subErrorCode = subErrorCode;
@@ -117,6 +123,9 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
         this.requestResult = requestResult;
         this.batchRequestResult = batchRequestResult;
         this.connection = connection;
+        this.errorUserTitle = errorUserTitle;
+        this.errorUserMessage = errorUserMessage;
+        this.errorIsTransient = errorIsTransient;
 
         boolean isLocalException = false;
         if (exception != null) {
@@ -172,28 +181,32 @@ private FacebookRequestError(int requestStatusCode, int errorCode,
             }
         }
 
+        // Notify user when error_user_msg is present
+        shouldNotify = errorUserMessage!= null && errorUserMessage.length() > 0;
+
         this.category = errorCategory;
         this.userActionMessageId = messageId;
         this.shouldNotifyUser = shouldNotify;
     }
 
     private FacebookRequestError(int requestStatusCode, int errorCode,
-            int subErrorCode, String errorType, String errorMessage, JSONObject requestResultBody,
-            JSONObject requestResult, Object batchRequestResult, HttpURLConnection connection) {
-        this(requestStatusCode, errorCode, subErrorCode, errorType, errorMessage,
-                requestResultBody, requestResult, batchRequestResult, connection, null);
+            int subErrorCode, String errorType, String errorMessage, String errorUserTitle, String errorUserMessage,
+            boolean errorIsTransient, JSONObject requestResultBody, JSONObject requestResult, Object batchRequestResult,
+            HttpURLConnection connection) {
+        this(requestStatusCode, errorCode, subErrorCode, errorType, errorMessage, errorUserTitle, errorUserMessage,
+                errorIsTransient, requestResultBody, requestResult, batchRequestResult, connection, null);
     }
 
     FacebookRequestError(HttpURLConnection connection, Exception exception) {
         this(INVALID_HTTP_STATUS_CODE, INVALID_ERROR_CODE, INVALID_ERROR_CODE,
-                null, null, null, null, null, connection,
+                null, null, null, null, false, null, null, null, connection,
                 (exception instanceof FacebookException) ?
                         (FacebookException) exception : new FacebookException(exception));
     }
 
     public FacebookRequestError(int errorCode, String errorType, String errorMessage) {
         this(INVALID_HTTP_STATUS_CODE, errorCode, INVALID_ERROR_CODE, errorType, errorMessage,
-                null, null, null, null, null);
+                null, null, false, null, null, null, null, null);
     }
 
     /**
@@ -279,6 +292,36 @@ public String getErrorMessage() {
         }
     }
 
+    /**
+     * A message suitable for display to the user, describing a user action necessary to enable Facebook functionality.
+     * Not all Facebook errors yield a message suitable for user display; however in all cases where
+     * shouldNotifyUser() returns true, this method returns a non-null message suitable for display.
+     *
+     * @return the error message returned from Facebook
+     */
+    public String getErrorUserMessage() {
+        return errorUserMessage;
+    }
+
+    /**
+     * A short summary of the error suitable for display to the user.
+     * Not all Facebook errors yield a title/message suitable for user display; however in all cases where
+     * getErrorUserTitle() returns valid String - user should be notified.
+     *
+     * @return the error message returned from Facebook
+     */
+    public String getErrorUserTitle() {
+        return errorUserTitle;
+    }
+
+    /**
+     * @return true if given error is transient and may succeed if the initial action is retried as-is.
+     * Application may use this information to display a "Retry" button, if user should be notified about this error.
+     */
+    public boolean getErrorIsTransient() {
+        return errorIsTransient;
+    }
+
     /**
      * Returns the body portion of the response corresponding to the request from Facebook.
      *
@@ -359,6 +402,9 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
                     // with several sub-properties, or else one or more top-level fields containing error info.
                     String errorType = null;
                     String errorMessage = null;
+                    String errorUserMessage = null;
+                    String errorUserTitle = null;
+                    boolean errorIsTransient = false;
                     int errorCode = INVALID_ERROR_CODE;
                     int errorSubCode = INVALID_ERROR_CODE;
 
@@ -371,6 +417,9 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
                         errorMessage = error.optString(ERROR_MESSAGE_FIELD_KEY, null);
                         errorCode = error.optInt(ERROR_CODE_FIELD_KEY, INVALID_ERROR_CODE);
                         errorSubCode = error.optInt(ERROR_SUB_CODE_KEY, INVALID_ERROR_CODE);
+                        errorUserMessage =  error.optString(ERROR_USER_MSG_KEY, null);
+                        errorUserTitle =  error.optString(ERROR_USER_TITLE_KEY, null);
+                        errorIsTransient = error.optBoolean(ERROR_IS_TRANSIENT_KEY, false);
                         hasError = true;
                     } else if (jsonBody.has(ERROR_CODE_KEY) || jsonBody.has(ERROR_MSG_KEY)
                             || jsonBody.has(ERROR_REASON_KEY)) {
@@ -383,14 +432,15 @@ static FacebookRequestError checkResponseAndCreateError(JSONObject singleResult,
 
                     if (hasError) {
                         return new FacebookRequestError(responseCode, errorCode, errorSubCode,
-                                errorType, errorMessage, jsonBody, singleResult, batchResult, connection);
+                                errorType, errorMessage, errorUserTitle, errorUserMessage, errorIsTransient, jsonBody,
+                                singleResult, batchResult, connection);
                     }
                 }
 
                 // If we didn't get error details, but we did get a failure response code, report it.
                 if (!HTTP_RANGE_SUCCESS.contains(responseCode)) {
                     return new FacebookRequestError(responseCode, INVALID_ERROR_CODE,
-                            INVALID_ERROR_CODE, null, null,
+                            INVALID_ERROR_CODE, null, null, null, null, false,
                             singleResult.has(BODY_KEY) ?
                                     (JSONObject) Utility.getStringPropertyAsJSON(
                                             singleResult, BODY_KEY, Response.NON_JSON_RESPONSE_PROPERTY) : null,
diff --git a/facebook/src/com/facebook/FacebookSdkVersion.java b/facebook/src/com/facebook/FacebookSdkVersion.java
index 4e0e5ea63..7067b769f 100644
--- a/facebook/src/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/com/facebook/FacebookSdkVersion.java
@@ -17,5 +17,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "3.16.0";
+    public static final String BUILD = "3.17.0";
 }
diff --git a/facebook/src/com/facebook/FacebookTimeSpentData.java b/facebook/src/com/facebook/FacebookTimeSpentData.java
new file mode 100644
index 000000000..08c2920b3
--- /dev/null
+++ b/facebook/src/com/facebook/FacebookTimeSpentData.java
@@ -0,0 +1,226 @@
+package com.facebook;
+
+import android.os.Bundle;
+import android.text.format.DateUtils;
+
+import com.facebook.internal.Logger;
+
+import java.io.Serializable;
+
+class FacebookTimeSpentData implements Serializable {
+    // Constants
+    private static final long serialVersionUID = 1L;
+    private static final String TAG = AppEventsLogger.class.getCanonicalName();
+    private static final long FIRST_TIME_LOAD_RESUME_TIME = -1;
+    private static final long INTERRUPTION_THRESHOLD_MILLISECONDS = 1000;
+    private static final long NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION =
+            60 * DateUtils.SECOND_IN_MILLIS;
+    private static final long APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS =
+            5 * DateUtils.MINUTE_IN_MILLIS;
+
+    // Should be kept in sync with the iOS sdk
+    private static final long[] INACTIVE_SECONDS_QUANTA =
+        new long[] {
+            5 * DateUtils.MINUTE_IN_MILLIS,
+            15 * DateUtils.MINUTE_IN_MILLIS,
+            30 * DateUtils.MINUTE_IN_MILLIS,
+            1 * DateUtils.HOUR_IN_MILLIS,
+            6 * DateUtils.HOUR_IN_MILLIS,
+            12 * DateUtils.HOUR_IN_MILLIS,
+            1 * DateUtils.DAY_IN_MILLIS,
+            2 * DateUtils.DAY_IN_MILLIS,
+            3 * DateUtils.DAY_IN_MILLIS,
+            7 * DateUtils.DAY_IN_MILLIS,
+            14 * DateUtils.DAY_IN_MILLIS,
+            21 * DateUtils.DAY_IN_MILLIS,
+            28 * DateUtils.DAY_IN_MILLIS,
+            60 * DateUtils.DAY_IN_MILLIS,
+            90 * DateUtils.DAY_IN_MILLIS,
+            120 * DateUtils.DAY_IN_MILLIS,
+            150 * DateUtils.DAY_IN_MILLIS,
+            180 * DateUtils.DAY_IN_MILLIS,
+            365 * DateUtils.DAY_IN_MILLIS,
+        };
+
+    private boolean isWarmLaunch;
+    private boolean isAppActive;
+    private long lastActivateEventLoggedTime;
+
+    // Member data that's persisted to disk
+    private long lastResumeTime;
+    private long lastSuspendTime;
+    private long millisecondsSpentInSession;
+    private int interruptionCount;
+
+    /**
+     * Serialization proxy for the FacebookTimeSpentData class. This is version 1 of
+     * serialization. Future serializations may differ in format. This
+     * class should not be modified. If serializations formats change,
+     * create a new class SerializationProxyVx.
+     */
+    private static class SerializationProxyV1 implements Serializable {
+        private static final long serialVersionUID = 6L;
+
+        private final long lastResumeTime;
+        private final long lastSuspendTime;
+        private final long millisecondsSpentInSession;
+        private final int interruptionCount;
+
+        SerializationProxyV1(
+            long lastResumeTime,
+            long lastSuspendTime,
+            long millisecondsSpentInSession,
+            int interruptionCount
+        ) {
+            this.lastResumeTime = lastResumeTime;
+            this.lastSuspendTime = lastSuspendTime;
+            this.millisecondsSpentInSession = millisecondsSpentInSession;
+            this.interruptionCount = interruptionCount;
+        }
+
+        private Object readResolve() {
+            return new FacebookTimeSpentData(
+                lastResumeTime,
+                lastSuspendTime,
+                millisecondsSpentInSession,
+                interruptionCount);
+        }
+    }
+
+    FacebookTimeSpentData() {
+        resetSession();
+    }
+
+    /**
+     * Constructor to be used for V1 serialization only, DO NOT CHANGE.
+     */
+    private FacebookTimeSpentData(
+        long lastResumeTime,
+        long lastSuspendTime,
+        long millisecondsSpentInSession,
+        int interruptionCount
+    ) {
+        resetSession();
+        this.lastResumeTime = lastResumeTime;
+        this.lastSuspendTime = lastSuspendTime;
+        this.millisecondsSpentInSession = millisecondsSpentInSession;
+        this.interruptionCount = interruptionCount;
+    }
+
+    private Object writeReplace() {
+        return new SerializationProxyV1(
+            lastResumeTime,
+            lastSuspendTime,
+            millisecondsSpentInSession,
+            interruptionCount
+        );
+    }
+
+    void onSuspend(AppEventsLogger logger, long eventTime) {
+        if (!isAppActive) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Suspend for inactive app");
+            return;
+        }
+
+        long now = eventTime;
+        long delta = (now - lastResumeTime);
+        if (delta < 0) {
+            Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+            delta = 0;
+        }
+        millisecondsSpentInSession += delta;
+        lastSuspendTime = now;
+        isAppActive = false;
+    }
+
+    void onResume(AppEventsLogger logger, long eventTime) {
+        long now = eventTime;
+
+        // Retain old behavior for activated app event - log the event if the event hasn't
+        // been logged in the previous suppression interval or this is a cold launch.
+        // If this is a cold launch, always log the event. Otherwise, use the last
+        // event log time to determine if the app activate should be suppressed or not.
+        if (isColdLaunch() ||
+            ((now - lastActivateEventLoggedTime) > APP_ACTIVATE_SUPPRESSION_PERIOD_IN_MILLISECONDS)) {
+            logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP);
+            lastActivateEventLoggedTime = now;
+        }
+
+        // If this is an application that's not calling onSuspend yet, log and return. We can't
+        // track time spent for this application as there are no calls to onSuspend.
+        if (isAppActive) {
+          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Resume for active app");
+          return;
+        }
+
+        long interruptionDurationMillis = wasSuspendedEver() ? now - lastSuspendTime : 0;
+        if (interruptionDurationMillis < 0) {
+          Logger.log(LoggingBehavior.APP_EVENTS, TAG, "Clock skew detected");
+          interruptionDurationMillis = 0;
+        }
+
+        // If interruption duration is > new session threshold, then log old session
+        // event and start a new session.
+        if (interruptionDurationMillis > NUM_MILLISECONDS_IDLE_TO_BE_NEW_SESSION) {
+            logAppDeactivatedEvent(logger, interruptionDurationMillis);
+        } else {
+            // We're not logging this resume event - check to see if this should count
+            // as an interruption
+            if (interruptionDurationMillis > INTERRUPTION_THRESHOLD_MILLISECONDS) {
+                interruptionCount++;
+            }
+        }
+
+        lastResumeTime = now;
+        isAppActive = true;
+    }
+
+    private void logAppDeactivatedEvent(AppEventsLogger logger, long interruptionDurationMillis) {
+        // Log the old session information and clear the data
+        Bundle eventParams = new Bundle();
+        eventParams.putInt(
+                AppEventsConstants.EVENT_NAME_SESSION_INTERRUPTIONS,
+                interruptionCount);
+        eventParams.putInt(
+                AppEventsConstants.EVENT_NAME_TIME_BETWEEN_SESSIONS,
+                getQuantaIndex(interruptionDurationMillis));
+        logger.logEvent(
+                AppEventsConstants.EVENT_NAME_DEACTIVATED_APP,
+                (millisecondsSpentInSession/DateUtils.SECOND_IN_MILLIS),
+                eventParams);
+        resetSession();
+    }
+
+    private static int getQuantaIndex(long timeBetweenSessions) {
+        int quantaIndex = 0;
+
+        while (
+            quantaIndex < INACTIVE_SECONDS_QUANTA.length &&
+            INACTIVE_SECONDS_QUANTA[quantaIndex] < timeBetweenSessions
+        ) {
+            ++quantaIndex;
+        }
+
+        return quantaIndex;
+    }
+
+    private void resetSession() {
+        isAppActive = false;
+        lastResumeTime = FIRST_TIME_LOAD_RESUME_TIME;
+        lastSuspendTime = FIRST_TIME_LOAD_RESUME_TIME;
+        interruptionCount = 0;
+        millisecondsSpentInSession = 0;
+    }
+
+    private boolean wasSuspendedEver() {
+        return lastSuspendTime != FIRST_TIME_LOAD_RESUME_TIME;
+    }
+
+    private boolean isColdLaunch() {
+        // On the very first call in the process lifecycle, this will always
+        // return true. After that, it will always return false.
+        boolean result = !isWarmLaunch;
+        isWarmLaunch = true;
+        return result;
+    }
+}
diff --git a/facebook/src/com/facebook/GetTokenClient.java b/facebook/src/com/facebook/GetTokenClient.java
index 23cb31bf8..c0f1a7015 100644
--- a/facebook/src/com/facebook/GetTokenClient.java
+++ b/facebook/src/com/facebook/GetTokenClient.java
@@ -18,7 +18,7 @@
 
 
 import android.content.Context;
-import android.os.*;
+import android.os.Bundle;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.PlatformServiceClient;
 
diff --git a/facebook/src/com/facebook/NativeAppCallAttachmentStore.java b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
index dc4108656..3704be274 100644
--- a/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
+++ b/facebook/src/com/facebook/NativeAppCallAttachmentStore.java
@@ -24,7 +24,10 @@
 
 import java.io.*;
 import java.net.URLEncoder;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
 
 /**
  * <p>This class works in conjunction with {@link NativeAppCallContentProvider} to allow apps to attach binary
diff --git a/facebook/src/com/facebook/NativeAppCallContentProvider.java b/facebook/src/com/facebook/NativeAppCallContentProvider.java
index bde165f58..374547a1c 100644
--- a/facebook/src/com/facebook/NativeAppCallContentProvider.java
+++ b/facebook/src/com/facebook/NativeAppCallContentProvider.java
@@ -24,8 +24,9 @@
 import android.util.Log;
 import android.util.Pair;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.UUID;
 
 /**
  * <p>Implements a <a href="http://developer.android.com/reference/android/content/ContentProvider.html">
diff --git a/facebook/src/com/facebook/Request.java b/facebook/src/com/facebook/Request.java
index 1bf5bc9fa..9b95938c8 100644
--- a/facebook/src/com/facebook/Request.java
+++ b/facebook/src/com/facebook/Request.java
@@ -42,15 +42,13 @@
 import java.util.regex.Pattern;
 
 /**
- * A single request to be sent to the Facebook Platform through either the <a
- * href="https://developers.facebook.com/docs/reference/api/">Graph API</a> or <a
- * href="https://developers.facebook.com/docs/reference/rest/">REST API</a>. The Request class provides functionality
+ * A single request to be sent to the Facebook Platform through the <a
+ * href="https://developers.facebook.com/docs/reference/api/">Graph API</a>. The Request class provides functionality
  * relating to serializing and deserializing requests and responses, making calls in batches (with a single round-trip
  * to the service) and making calls asynchronously.
  *
- * The particular service endpoint that a request targets is determined by either a graph path (see the
- * {@link #setGraphPath(String) setGraphPath} method) or a REST method name (see the {@link #setRestMethod(String)
- * setRestMethod} method); a single request may not target both.
+ * The particular service endpoint that a request targets is determined by a graph path (see the
+ * {@link #setGraphPath(String) setGraphPath} method).
  *
  * A Request can be executed either anonymously or representing an authenticated user. In the former case, no Session
  * needs to be specified, while in the latter, a Session that is in an opened state must be provided. If requests are
@@ -118,7 +116,6 @@
     private HttpMethod httpMethod;
     private String graphPath;
     private GraphObject graphObject;
-    private String restMethod;
     private String batchEntryName;
     private String batchEntryDependsOn;
     private boolean batchEntryOmitResultOnSuccess = true;
@@ -266,26 +263,6 @@ public static Request newPostRequest(Session session, String graphPath, GraphObj
         return request;
     }
 
-    /**
-     * Creates a new Request configured to make a call to the Facebook REST API.
-     *
-     * @param session
-     *            the Session to use, or null; if non-null, the session must be in an opened state
-     * @param restMethod
-     *            the method in the Facebook REST API to execute
-     * @param parameters
-     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
-     *            Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod
-     *            the HTTP method to use for the request; must be one of GET, POST, or DELETE
-     * @return a Request that is ready to execute
-     */
-    public static Request newRestRequest(Session session, String restMethod, Bundle parameters, HttpMethod httpMethod) {
-        Request request = new Request(session, null, parameters, httpMethod);
-        request.setRestMethod(restMethod);
-        return request;
-    }
-
     /**
      * Creates a new Request configured to retrieve a user's own profile.
      *
@@ -543,6 +520,7 @@ public static Request newStatusUpdateRequest(Session session, String message, Gr
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
      * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} with `true` for this user.
+     * <b>You must call this method from a background thread for it to work properly.</b>
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -577,6 +555,7 @@ public static Request newCustomAudienceThirdPartyIdRequest(Session session, Cont
      * A `null` ID will be provided into the callback if a) there is no native Facebook app, b) no one is logged into
      * it, or c) the app has previously called
      * {@link Settings#setLimitEventAndDataUsage(android.content.Context, boolean)} ;} with `true` for this user.
+     * <b>You must call this method from a background thread for it to work properly.</b>
      *
      * @param session
      *            the Session to issue the Request on, or null; if non-null, the session must be in an opened state.
@@ -875,7 +854,7 @@ public final String getGraphPath() {
     }
 
     /**
-     * Sets the graph path of this request. A graph path may not be set if a REST method has been specified.
+     * Sets the graph path of this request.
      *
      * @param graphPath
      *            the graph path for this request
@@ -945,25 +924,6 @@ public final void setParameters(Bundle parameters) {
         this.parameters = parameters;
     }
 
-    /**
-     * Returns the REST method to call for this request.
-     *
-     * @return the REST method
-     */
-    public final String getRestMethod() {
-        return this.restMethod;
-    }
-
-    /**
-     * Sets the REST method to call for this request. A REST method may not be set if a graph path has been specified.
-     *
-     * @param restMethod
-     *            the REST method to call
-     */
-    public final void setRestMethod(String restMethod) {
-        this.restMethod = restMethod;
-    }
-
     /**
      * Returns the Session associated with this request.
      *
@@ -1139,30 +1099,6 @@ public static RequestAsyncTask executePostRequestAsync(Session session, String g
         return newPostRequest(session, graphPath, graphObject, callback).executeAsync();
     }
 
-    /**
-     * Starts a new Request configured to make a call to the Facebook REST API.
-     * <p/>
-     * This should only be called from the UI thread.
-     *
-     * This method is deprecated. Prefer to call Request.newRestRequest(...).executeAsync();
-     *
-     * @param session
-     *            the Session to use, or null; if non-null, the session must be in an opened state
-     * @param restMethod
-     *            the method in the Facebook REST API to execute
-     * @param parameters
-     *            additional parameters to pass along with the Graph API request; parameters must be Strings, Numbers,
-     *            Bitmaps, Dates, or Byte arrays.
-     * @param httpMethod
-     *            the HTTP method to use for the request; must be one of GET, POST, or DELETE
-     * @return a RequestAsyncTask that is executing the request
-     */
-    @Deprecated
-    public static RequestAsyncTask executeRestRequestAsync(Session session, String restMethod, Bundle parameters,
-            HttpMethod httpMethod) {
-        return newRestRequest(session, restMethod, parameters, httpMethod).executeAsync();
-    }
-
     /**
      * Starts a new Request configured to retrieve a user's own profile.
      * <p/>
@@ -1392,10 +1328,6 @@ public static HttpURLConnection toHttpConnection(Collection<Request> requests) {
      */
     public static HttpURLConnection toHttpConnection(RequestBatch requests) {
 
-        for (Request request : requests) {
-            request.validate();
-        }
-
         URL url = null;
         try {
             if (requests.size() == 1) {
@@ -1702,8 +1634,8 @@ public static RequestAsyncTask executeConnectionAsync(Handler callbackHandler, H
     @Override
     public String toString() {
         return new StringBuilder().append("{Request: ").append(" session: ").append(session).append(", graphPath: ")
-                .append(graphPath).append(", graphObject: ").append(graphObject).append(", restMethod: ")
-                .append(restMethod).append(", httpMethod: ").append(httpMethod).append(", parameters: ")
+                .append(graphPath).append(", graphObject: ").append(graphObject)
+                .append(", httpMethod: ").append(httpMethod).append(", parameters: ")
                 .append(parameters).append("}").toString();
     }
 
@@ -1813,13 +1745,7 @@ final String getUrlForBatchedRequest() {
             throw new FacebookException("Can't override URL for a batch request");
         }
 
-        String baseUrl;
-        if (this.restMethod != null) {
-            baseUrl = getRestPathWithVersion();
-        } else {
-            baseUrl = getGraphPathWithVersion();
-        }
-
+        String baseUrl = getGraphPathWithVersion();
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
     }
@@ -1829,18 +1755,13 @@ final String getUrlForSingleRequest() {
             return overriddenURL.toString();
         }
 
-        String baseUrl;
-        if (this.restMethod != null) {
-            baseUrl = String.format("%s/%s", ServerProtocol.getRestUrlBase(), getRestPathWithVersion());
+        String graphBaseUrlBase;
+        if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
+            graphBaseUrlBase = ServerProtocol.getGraphVideoUrlBase();
         } else {
-            String graphBaseUrlBase;
-            if (this.getHttpMethod() == HttpMethod.POST && graphPath != null && graphPath.endsWith(VIDEOS_SUFFIX)) {
-                graphBaseUrlBase = ServerProtocol.getGraphVideoUrlBase();
-            } else {
-                graphBaseUrlBase = ServerProtocol.getGraphUrlBase();
-            }
-            baseUrl = String.format("%s/%s", graphBaseUrlBase, getGraphPathWithVersion());
+            graphBaseUrlBase = ServerProtocol.getGraphUrlBase();
         }
+        String baseUrl = String.format("%s/%s", graphBaseUrlBase, getGraphPathWithVersion());
 
         addCommonParameters();
         return appendParametersToBaseUrl(baseUrl);
@@ -1854,14 +1775,6 @@ private String getGraphPathWithVersion() {
         return String.format("%s/%s", this.version, this.graphPath);
     }
 
-    private String getRestPathWithVersion() {
-        Matcher matcher = versionPattern.matcher(this.restMethod);
-        if (matcher.matches()) {
-            return this.restMethod;
-        }
-        return String.format("%s/%s/%s", this.version, ServerProtocol.REST_METHOD_BASE, this.restMethod);
-    }
-
     private static class Attachment {
         private final Request request;
         private final Object value;
@@ -1933,12 +1846,6 @@ public void writeString(String key, String value) throws IOException {
         batch.put(batchEntry);
     }
 
-    private void validate() {
-        if (graphPath != null && restMethod != null) {
-            throw new IllegalArgumentException("Only one of a graph path or REST method may be specified per request.");
-        }
-    }
-
     private static boolean hasOnProgressCallbacks(RequestBatch requests) {
         for (RequestBatch.Callback callback : requests.getCallbacks()) {
             if (callback instanceof RequestBatch.OnProgressCallback) {
diff --git a/facebook/src/com/facebook/Response.java b/facebook/src/com/facebook/Response.java
index a5e408d88..f5620256b 100644
--- a/facebook/src/com/facebook/Response.java
+++ b/facebook/src/com/facebook/Response.java
@@ -17,7 +17,10 @@
 package com.facebook;
 
 import android.content.Context;
-import com.facebook.internal.*;
+import com.facebook.internal.CacheableRequestBatch;
+import com.facebook.internal.FileLruCache;
+import com.facebook.internal.Logger;
+import com.facebook.internal.Utility;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
 import org.json.JSONArray;
@@ -52,6 +55,9 @@
      */
     public static final String NON_JSON_RESPONSE_PROPERTY = "FACEBOOK_NON_JSON_RESULT";
 
+    // From v2.1 of the Graph API, write endpoints will now return valid JSON with the result as the value for the "success" key
+    public static final String SUCCESS_KEY = "success";
+
     private static final int INVALID_SESSION_FACEBOOK_ERROR_CODE = 190;
 
     private static final String CODE_KEY = "code";
diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index d0d2b5656..4fe231168 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -16,6 +16,7 @@
 
 package com.facebook;
 
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.content.*;
 import android.content.pm.ResolveInfo;
@@ -24,7 +25,10 @@
 import android.support.v4.content.LocalBroadcastManager;
 import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.internal.*;
+import com.facebook.internal.NativeProtocol;
+import com.facebook.internal.SessionAuthorizationType;
+import com.facebook.internal.Utility;
+import com.facebook.internal.Validate;
 import com.facebook.model.GraphMultiResult;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
@@ -124,8 +128,6 @@
     private static final String PUBLISH_PERMISSION_PREFIX = "publish";
     private static final String MANAGE_PERMISSION_PREFIX = "manage";
 
-    private static final String BASIC_INFO_PERMISSION = "basic_info";
-
     @SuppressWarnings("serial")
     private static final Set<String> OTHER_PUBLISH_PERMISSIONS = new HashSet<String>() {{
         add("ads_management");
@@ -190,6 +192,7 @@ private Object readResolve() {
      * class should not be modified. If serializations formats change,
      * create a new class SerializationProxyVx.
      */
+    @SuppressWarnings("UnusedDeclaration")
     private static class SerializationProxyV2 implements Serializable {
         private static final long serialVersionUID = 7663436173185080064L;
         private final String applicationId;
diff --git a/facebook/src/com/facebook/SessionDefaultAudience.java b/facebook/src/com/facebook/SessionDefaultAudience.java
index 2fdac3d01..3f1aea80b 100644
--- a/facebook/src/com/facebook/SessionDefaultAudience.java
+++ b/facebook/src/com/facebook/SessionDefaultAudience.java
@@ -51,7 +51,7 @@ private SessionDefaultAudience(String protocol) {
         nativeProtocolAudience = protocol;
     }
 
-    String getNativeProtocolAudience() {
+    public String getNativeProtocolAudience() {
         return nativeProtocolAudience;
     }
 }
diff --git a/facebook/src/com/facebook/Settings.java b/facebook/src/com/facebook/Settings.java
index b4608a4f1..c08376c1d 100644
--- a/facebook/src/com/facebook/Settings.java
+++ b/facebook/src/com/facebook/Settings.java
@@ -30,13 +30,16 @@
 import com.facebook.android.BuildConfig;
 import com.facebook.internal.AttributionIdentifiers;
 import com.facebook.internal.Utility;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.Validate;
+import com.facebook.model.GraphObject;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.lang.reflect.Field;
-import java.util.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.concurrent.*;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
@@ -58,6 +61,7 @@
     private static volatile String facebookDomain = FACEBOOK_COM;
     private static AtomicLong onProgressThreshold = new AtomicLong(65536);
     private static volatile boolean platformCompatibilityEnabled;
+    private static volatile boolean isLoggingEnabled = BuildConfig.DEBUG;
 
     private static final int DEFAULT_CORE_POOL_SIZE = 5;
     private static final int DEFAULT_MAXIMUM_POOL_SIZE = 128;
@@ -180,10 +184,26 @@ public static final void clearLoggingBehaviors() {
      */
     public static final boolean isLoggingBehaviorEnabled(LoggingBehavior behavior) {
         synchronized (loggingBehaviors) {
-            return BuildConfig.DEBUG && loggingBehaviors.contains(behavior);
+            return Settings.isLoggingEnabled() && loggingBehaviors.contains(behavior);
         }
     }
 
+    /**
+     * Indicates if logging is enabled.
+     */
+    public static final boolean isLoggingEnabled() {
+        return isLoggingEnabled;
+    }
+
+    /**
+     * Used to enable or disable logging, defaults to BuildConfig.DEBUG.
+     * @param enabled
+     *          Logging is enabled if true, disabled if false.
+     */
+    public static final void setIsLoggingEnabled(boolean enabled) {
+        isLoggingEnabled = enabled;
+    }
+
     /**
      * Returns the Executor used by the SDK for non-AsyncTask background work.
      *
@@ -364,7 +384,8 @@ static Response publishInstallAndWaitForResponse(
                 } else {
                     return new Response(null, null, null, graphObject, true);
                 }
-            } else if (identifiers.getAndroidAdvertiserId() == null && identifiers.getAttributionId() == null) {
+            } else if (identifiers == null ||
+                       (identifiers.getAndroidAdvertiserId() == null && identifiers.getAttributionId() == null)) {
                 throw new FacebookException("No attribution id available to send to server.");
             } else {
                 if (!Utility.queryAppSettings(applicationId, false).supportsAttribution()) {
diff --git a/facebook/src/com/facebook/TestSession.java b/facebook/src/com/facebook/TestSession.java
index 821c1f95d..ef8b7dd39 100644
--- a/facebook/src/com/facebook/TestSession.java
+++ b/facebook/src/com/facebook/TestSession.java
@@ -20,13 +20,12 @@
 import android.os.Bundle;
 import android.text.TextUtils;
 import android.util.Log;
-import com.facebook.model.GraphObject;
-import com.facebook.model.GraphObjectList;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
-import org.json.JSONException;
-import org.json.JSONObject;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
+import com.facebook.model.GraphUser;
 
 import java.util.*;
 
@@ -232,70 +231,48 @@ private static synchronized void retrieveTestAccountsForAppIfNeeded() {
 
         appTestAccounts = new HashMap<String, TestAccount>();
 
-        // The data we need is split across two different FQL tables. We construct two queries, submit them
+        // The data we need is split across two different graph API queries. We construct two queries, submit them
         // together (the second one refers to the first one), then cross-reference the results.
 
-        // Get the test accounts for this app.
-        String testAccountQuery = String.format("SELECT id,access_token FROM test_account WHERE app_id = %s",
-                testApplicationId);
-        // Get the user names for those accounts.
-        String userQuery = "SELECT uid,name FROM user WHERE uid IN (SELECT id FROM #test_accounts)";
+        Request.setDefaultBatchApplicationId(testApplicationId);
 
         Bundle parameters = new Bundle();
-
-        // Build a JSON string that contains our queries and pass it as the 'q' parameter of the query.
-        JSONObject multiquery;
-        try {
-            multiquery = new JSONObject();
-            multiquery.put("test_accounts", testAccountQuery);
-            multiquery.put("users", userQuery);
-        } catch (JSONException exception) {
-            throw new FacebookException(exception);
-        }
-        parameters.putString("q", multiquery.toString());
-
-        // We need to authenticate as this app.
         parameters.putString("access_token", getAppAccessToken());
 
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
+        Request requestTestUsers = new Request(null, "app/accounts/test-users", parameters, null);
+        requestTestUsers.setBatchEntryName("testUsers");
+        requestTestUsers.setBatchEntryOmitResultOnSuccess(false);
 
-        if (response.getError() != null) {
-            throw response.getError().getException();
-        }
+        Bundle testUserNamesParam = new Bundle();
+        testUserNamesParam.putString("access_token", getAppAccessToken());
+        testUserNamesParam.putString("ids", "{result=testUsers:$.data.*.id}");
+        testUserNamesParam.putString("fields", "name");
 
-        FqlResponse fqlResponse = response.getGraphObjectAs(FqlResponse.class);
+        Request requestTestUserNames = new Request(null, "", testUserNamesParam, null);
+        requestTestUserNames.setBatchEntryDependsOn("testUsers");
 
-        GraphObjectList<FqlResult> fqlResults = fqlResponse.getData();
-        if (fqlResults == null || fqlResults.size() != 2) {
-            throw new FacebookException("Unexpected number of results from FQL query");
+        List<Response> responses = Request.executeBatchAndWait(requestTestUsers, requestTestUserNames);
+        if (responses == null || responses.size() != 2) {
+            throw new FacebookException("Unexpected number of results from TestUsers batch query");
         }
 
-        // We get back two sets of results. The first is from the test_accounts query, the second from the users query.
-        Collection<TestAccount> testAccounts = fqlResults.get(0).getFqlResultSet().castToListOf(TestAccount.class);
-        Collection<UserAccount> userAccounts = fqlResults.get(1).getFqlResultSet().castToListOf(UserAccount.class);
+        TestAccountsResponse testAccountsResponse  = responses.get(0).getGraphObjectAs(TestAccountsResponse.class);
+        GraphObjectList<TestAccount> testAccounts = testAccountsResponse.getData();
 
-        // Use both sets of results to populate our static array of accounts.
-        populateTestAccounts(testAccounts, userAccounts);
+        // Response should contain a map of test accounts: { id's => { GraphUser } }
+        GraphObject userAccountsMap = responses.get(1).getGraphObject();
 
+        populateTestAccounts(testAccounts, userAccountsMap);
         return;
     }
 
     private static synchronized void populateTestAccounts(Collection<TestAccount> testAccounts,
-            Collection<UserAccount> userAccounts) {
-        // We get different sets of data from each of these queries. We want to combine them into a single data
-        // structure. We have added a Name property to the TestAccount interface, even though we don't really get
-        // a name back from the service from that query. We stick the Name from the corresponding UserAccount in it.
+                                                          GraphObject userAccountsMap) {
         for (TestAccount testAccount : testAccounts) {
+            GraphUser testUser = userAccountsMap.getPropertyAs(testAccount.getId(), GraphUser.class);
+            testAccount.setName(testUser.getName());
             storeTestAccount(testAccount);
         }
-
-        for (UserAccount userAccount : userAccounts) {
-            TestAccount testAccount = appTestAccounts.get(userAccount.getUid());
-            if (testAccount != null) {
-                testAccount.setName(userAccount.getName());
-            }
-        }
     }
 
     private static synchronized void storeTestAccount(TestAccount testAccount) {
@@ -442,7 +419,8 @@ private void deleteTestAccount(String testAccountId, String appAccessToken) {
         GraphObject graphObject = response.getGraphObject();
         if (error != null) {
             Log.w(LOG_TAG, String.format("Could not delete test account %s: %s", testAccountId, error.getException().toString()));
-        } else if (graphObject.getProperty(Response.NON_JSON_RESPONSE_PROPERTY) == (Boolean) false) {
+        } else if (graphObject.getProperty(Response.NON_JSON_RESPONSE_PROPERTY) == (Boolean) false
+                   || graphObject.getProperty(Response.SUCCESS_KEY) == (Boolean) false) {
             Log.w(LOG_TAG, String.format("Could not delete test account %s: unknown reason", testAccountId));
         }
     }
@@ -484,27 +462,14 @@ private String validNameStringFromInteger(long i) {
 
         String getAccessToken();
 
-        // Note: We don't actually get Name from our FQL query. We fill it in by correlating with UserAccounts.
-        String getName();
-
-        void setName(String name);
-    }
-
-    private interface UserAccount extends GraphObject {
-        String getUid();
-
+        // Note: We don't actually get Name from our accounts/test-users query. We fill it in by correlating with GraphUser.
         String getName();
 
         void setName(String name);
     }
 
-    private interface FqlResult extends GraphObject {
-        GraphObjectList<GraphObject> getFqlResultSet();
-
-    }
-
-    private interface FqlResponse extends GraphObject {
-        GraphObjectList<FqlResult> getData();
+    private interface TestAccountsResponse extends GraphObject {
+        GraphObjectList<TestAccount> getData();
     }
 
     private static final class TestTokenCachingStrategy extends TokenCachingStrategy {
diff --git a/facebook/src/com/facebook/UiLifecycleHelper.java b/facebook/src/com/facebook/UiLifecycleHelper.java
index d1656b5d6..8d5b73024 100644
--- a/facebook/src/com/facebook/UiLifecycleHelper.java
+++ b/facebook/src/com/facebook/UiLifecycleHelper.java
@@ -269,14 +269,7 @@ private boolean handleFacebookDialogActivityResult(int requestCode, int resultCo
             return true;
         }
 
-        String callIdString = data.getStringExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID);
-        UUID callId = null;
-        if (callIdString != null) {
-            try {
-                callId = UUID.fromString(callIdString);
-            } catch (IllegalArgumentException exception) {
-            }
-        }
+        UUID callId = NativeProtocol.getCallIdFromIntent(data);
 
         // Was this result for the call we are waiting on?
         if (callId != null && pendingFacebookDialogCall.getCallId().equals(callId)) {
diff --git a/facebook/src/com/facebook/android/FbDialog.java b/facebook/src/com/facebook/android/FbDialog.java
index 603e69280..e35bbaac4 100644
--- a/facebook/src/com/facebook/android/FbDialog.java
+++ b/facebook/src/com/facebook/android/FbDialog.java
@@ -18,7 +18,9 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import com.facebook.*;
+import com.facebook.FacebookDialogException;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
 import com.facebook.android.Facebook.DialogListener;
 import com.facebook.widget.WebDialog;
 
diff --git a/facebook/src/com/facebook/internal/AttributionIdentifiers.java b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
index 1c8f63018..4efe7a3e6 100644
--- a/facebook/src/com/facebook/internal/AttributionIdentifiers.java
+++ b/facebook/src/com/facebook/internal/AttributionIdentifiers.java
@@ -19,8 +19,11 @@
 import android.content.Context;
 import android.database.Cursor;
 import android.net.Uri;
+import android.os.Looper;
 import android.util.Log;
 
+import com.facebook.FacebookException;
+
 import java.lang.reflect.Method;
 
 /**
@@ -51,6 +54,11 @@
     private static AttributionIdentifiers getAndroidId(Context context) {
         AttributionIdentifiers identifiers = new AttributionIdentifiers();
         try {
+            // We can't call getAdvertisingIdInfo on the main thread or the app will potentially
+            // freeze, if this is the case throw:
+            if (Looper.myLooper() == Looper.getMainLooper()) {
+              throw new FacebookException("getAndroidId cannot be called on the main thread.");
+            }
             Method isGooglePlayServicesAvailable = Utility.getMethodQuietly(
                     "com.google.android.gms.common.GooglePlayServicesUtil",
                     "isGooglePlayServicesAvailable",
diff --git a/facebook/src/com/facebook/internal/ImageDownloader.java b/facebook/src/com/facebook/internal/ImageDownloader.java
index dc55fb917..69bea7f4a 100644
--- a/facebook/src/com/facebook/internal/ImageDownloader.java
+++ b/facebook/src/com/facebook/internal/ImageDownloader.java
@@ -30,7 +30,8 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URL;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class ImageDownloader {
     private static final int DOWNLOAD_QUEUE_MAX_CONCURRENT = WorkQueue.DEFAULT_MAX_CONCURRENT;
diff --git a/facebook/src/com/facebook/internal/NativeProtocol.java b/facebook/src/com/facebook/internal/NativeProtocol.java
index 7a7186c10..a2cf01912 100644
--- a/facebook/src/com/facebook/internal/NativeProtocol.java
+++ b/facebook/src/com/facebook/internal/NativeProtocol.java
@@ -25,7 +25,10 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.text.TextUtils;
-import com.facebook.*;
+import com.facebook.FacebookException;
+import com.facebook.FacebookOperationCanceledException;
+import com.facebook.SessionDefaultAudience;
+import com.facebook.Settings;
 
 import java.util.*;
 
@@ -57,12 +60,26 @@
     public static final int PROTOCOL_VERSION_20131107 = 20131107;
     public static final int PROTOCOL_VERSION_20140204 = 20140204;
     public static final int PROTOCOL_VERSION_20140324 = 20140324;
+    public static final int PROTOCOL_VERSION_20140701 = 20140701;
 
     public static final String EXTRA_PROTOCOL_VERSION = "com.facebook.platform.protocol.PROTOCOL_VERSION";
     public static final String EXTRA_PROTOCOL_ACTION = "com.facebook.platform.protocol.PROTOCOL_ACTION";
     public static final String EXTRA_PROTOCOL_CALL_ID = "com.facebook.platform.protocol.CALL_ID";
     public static final String EXTRA_GET_INSTALL_DATA_PACKAGE = "com.facebook.platform.extra.INSTALLDATA_PACKAGE";
 
+    public static final String EXTRA_PROTOCOL_BRIDGE_ARGS =
+            "com.facebook.platform.protocol.BRIDGE_ARGS";
+
+    public static final String EXTRA_PROTOCOL_METHOD_ARGS =
+            "com.facebook.platform.protocol.METHOD_ARGS";
+
+    public static final String EXTRA_PROTOCOL_METHOD_RESULTS =
+            "com.facebook.platform.protocol.RESULT_ARGS";
+
+    public static final String BRIDGE_ARG_APP_NAME_STRING = "app_name";
+    public static final String BRIDGE_ARG_ACTION_ID_STRING = "action_id";
+    public static final String BRIDGE_ARG_ERROR_BUNDLE = "error";
+
     // Messages supported by PlatformService:
     public static final int MESSAGE_GET_ACCESS_TOKEN_REQUEST = 0x10000;
     public static final int MESSAGE_GET_ACCESS_TOKEN_REPLY   = 0x10001;
@@ -126,12 +143,27 @@
     public static final String EXTRA_DATA_FAILURES_FATAL = "com.facebook.platform.extra.DATA_FAILURES_FATAL";
     public static final String EXTRA_PHOTOS = "com.facebook.platform.extra.PHOTOS";
 
+    public static final String METHOD_ARGS_PLACE_TAG = "PLACE";
+    public static final String METHOD_ARGS_FRIEND_TAGS = "FRIENDS";
+    public static final String METHOD_ARGS_LINK = "LINK";
+    public static final String METHOD_ARGS_IMAGE = "IMAGE";
+    public static final String METHOD_ARGS_TITLE = "TITLE";
+    public static final String METHOD_ARGS_SUBTITLE = "SUBTITLE";
+    public static final String METHOD_ARGS_DESCRIPTION = "DESCRIPTION";
+    public static final String METHOD_ARGS_REF = "REF";
+    public static final String METHOD_ARGS_DATA_FAILURES_FATAL = "DATA_FAILURES_FATAL";
+    public static final String METHOD_ARGS_PHOTOS = "PHOTOS";
+
     // Extras supported for ACTION_OGACTIONPUBLISH_DIALOG:
     public static final String EXTRA_ACTION = "com.facebook.platform.extra.ACTION";
     public static final String EXTRA_ACTION_TYPE = "com.facebook.platform.extra.ACTION_TYPE";
     public static final String EXTRA_PREVIEW_PROPERTY_NAME =
             "com.facebook.platform.extra.PREVIEW_PROPERTY_NAME";
 
+    public static final String METHOD_ARGS_ACTION = "ACTION";
+    public static final String METHOD_ARGS_ACTION_TYPE = "ACTION_TYPE";
+    public static final String METHOD_ARGS_PREVIEW_PROPERTY_NAME = "PREVIEW_PROPERTY_NAME";
+
     // OG objects will have this key to set to true if they should be created as part of OG Action publish
     public static final String OPEN_GRAPH_CREATE_OBJECT_KEY = "fbsdk:create_object";
     // Determines whether an image is user generated
@@ -157,9 +189,9 @@
     public static final String ERROR_PERMISSION_DENIED = "PermissionDenied";
     public static final String ERROR_SERVICE_DISABLED = "ServiceDisabled";
 
-    public static final String AUDIENCE_ME = "SELF";
-    public static final String AUDIENCE_FRIENDS = "ALL_FRIENDS";
-    public static final String AUDIENCE_EVERYONE = "EVERYONE";
+    public static final String AUDIENCE_ME = "only_me";
+    public static final String AUDIENCE_FRIENDS = "friends";
+    public static final String AUDIENCE_EVERYONE = "everyone";
 
     // Request codes for different categories of native protocol calls.
     public static final int DIALOG_REQUEST_CODE = 0xfacf;
@@ -170,9 +202,6 @@
     // Columns returned by PlatformProvider
     private static final String PLATFORM_PROVIDER_VERSION_COLUMN = "version";
 
-    // Broadcast action for asynchronously-executing AppCalls
-    private static final String PLATFORM_ASYNC_APPCALL_ACTION = "com.facebook.platform.AppCallResultBroadcast";
-
     private static abstract class NativeAppInfo {
         abstract protected String getPackage();
 
@@ -308,7 +337,7 @@ static Intent validateServiceIntent(Context context, Intent intent, NativeAppInf
     }
 
     public static Intent createProxyAuthIntent(Context context, String applicationId, List<String> permissions,
-            String e2e, boolean isRerequest) {
+            String e2e, boolean isRerequest, SessionDefaultAudience defaultAudience) {
         for (NativeAppInfo appInfo : facebookAppInfoList) {
             Intent intent = new Intent()
                     .setClassName(appInfo.getPackage(), FACEBOOK_PROXY_AUTH_ACTIVITY)
@@ -323,6 +352,7 @@ public static Intent createProxyAuthIntent(Context context, String applicationId
 
             intent.putExtra(ServerProtocol.DIALOG_PARAM_RESPONSE_TYPE, ServerProtocol.DIALOG_RESPONSE_TYPE_TOKEN);
             intent.putExtra(ServerProtocol.DIALOG_PARAM_RETURN_SCOPES, ServerProtocol.DIALOG_RETURN_SCOPES_TRUE);
+            intent.putExtra(ServerProtocol.DIALOG_PARAM_DEFAULT_AUDIENCE, defaultAudience.getNativeProtocolAudience());
 
             if (!Settings.getPlatformCompatibilityEnabled()) {
                 // Override the API Version for Auth
@@ -360,6 +390,7 @@ public static Intent createTokenRefreshIntent(Context context) {
     // Note: be sure this stays sorted in descending order; add new versions at the beginning
     private static final List<Integer> KNOWN_PROTOCOL_VERSIONS =
             Arrays.asList(
+                    PROTOCOL_VERSION_20140701,
                     PROTOCOL_VERSION_20140324,
                     PROTOCOL_VERSION_20140204,
                     PROTOCOL_VERSION_20131107,
@@ -389,15 +420,43 @@ private static Intent findActivityIntent(Context context, String activityAction,
         return intent;
     }
 
-    public static Intent createPlatformActivityIntent(Context context, String action, int version, Bundle extras) {
+    public static boolean isVersionCompatibleWithBucketedIntent(int version) {
+        return KNOWN_PROTOCOL_VERSIONS.contains(version) && version >= PROTOCOL_VERSION_20140701;
+    }
+
+    public static Intent createPlatformActivityIntent(
+            Context context,
+            String callId,
+            String action,
+            int version,
+            String applicationName,
+            Bundle extras) {
         Intent intent = findActivityIntent(context, INTENT_ACTION_PLATFORM_ACTIVITY, action);
         if (intent == null) {
             return null;
         }
 
-        intent.putExtras(extras)
-                .putExtra(EXTRA_PROTOCOL_VERSION, version)
-                .putExtra(EXTRA_PROTOCOL_ACTION, action);
+        String applicationId = Utility.getMetadataApplicationId(context);
+
+        intent.putExtra(EXTRA_PROTOCOL_VERSION, version)
+                .putExtra(EXTRA_PROTOCOL_ACTION, action)
+                .putExtra(EXTRA_APPLICATION_ID, applicationId);
+
+        if (isVersionCompatibleWithBucketedIntent(version)) {
+            // This is a bucketed intent
+            Bundle bridgeArguments = new Bundle();
+            bridgeArguments.putString(BRIDGE_ARG_ACTION_ID_STRING, callId);
+            bridgeArguments.putString(BRIDGE_ARG_APP_NAME_STRING, applicationName);
+            intent.putExtra(EXTRA_PROTOCOL_BRIDGE_ARGS, bridgeArguments);
+
+            Bundle methodArguments = extras == null ? new Bundle() : extras;
+            intent.putExtra(EXTRA_PROTOCOL_METHOD_ARGS, methodArguments);
+        } else {
+            // This is the older flat intent
+            intent.putExtra(EXTRA_PROTOCOL_CALL_ID, callId);
+            intent.putExtra(EXTRA_APPLICATION_NAME, applicationName);
+            intent.putExtras(extras);
+        }
 
         return intent;
     }
@@ -415,8 +474,58 @@ public static Intent createPlatformServiceIntent(Context context) {
         return null;
     }
 
+    public static int getProtocolVersionFromIntent(Intent intent) {
+        return intent.getIntExtra(EXTRA_PROTOCOL_VERSION, 0);
+    }
+
+    public static UUID getCallIdFromIntent(Intent intent) {
+        int version = getProtocolVersionFromIntent(intent);
+        String callIdString = null;
+        if (isVersionCompatibleWithBucketedIntent(version)) {
+            Bundle bridgeArgs = intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
+            if (bridgeArgs != null) {
+                callIdString = bridgeArgs.getString(BRIDGE_ARG_ACTION_ID_STRING);
+            }
+        } else {
+            callIdString = intent.getStringExtra(EXTRA_PROTOCOL_CALL_ID);
+        }
+
+        UUID callId = null;
+        if (callIdString != null) {
+            try {
+                callId = UUID.fromString(callIdString);
+            } catch (IllegalArgumentException exception) {
+            }
+        }
+        return callId;
+    }
+
+    public static Bundle getBridgeArgumentsFromIntent(Intent intent) {
+        int version = getProtocolVersionFromIntent(intent);
+        if (!isVersionCompatibleWithBucketedIntent(version)) {
+            return null;
+        }
+
+        return intent.getBundleExtra(EXTRA_PROTOCOL_BRIDGE_ARGS);
+    }
+
+    public static Bundle getSuccessResultsFromIntent(Intent resultIntent) {
+        int version = getProtocolVersionFromIntent(resultIntent);
+        Bundle extras = resultIntent.getExtras();
+        if (!isVersionCompatibleWithBucketedIntent(version) || extras == null) {
+            return extras;
+        }
+
+        return extras.getBundle(EXTRA_PROTOCOL_METHOD_RESULTS);
+    }
+
     public static boolean isErrorResult(Intent resultIntent) {
-        return resultIntent.hasExtra(STATUS_ERROR_TYPE);
+        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
+        if (bridgeArgs != null) {
+            return bridgeArgs.containsKey(BRIDGE_ARG_ERROR_BUNDLE);
+        } else {
+            return resultIntent.hasExtra(STATUS_ERROR_TYPE);
+        }
     }
 
     public static Exception getErrorFromResult(Intent resultIntent) {
@@ -424,12 +533,27 @@ public static Exception getErrorFromResult(Intent resultIntent) {
             return null;
         }
 
-        String type = resultIntent.getStringExtra(STATUS_ERROR_TYPE);
-        String description = resultIntent.getStringExtra(STATUS_ERROR_DESCRIPTION);
+        Bundle bridgeArgs = getBridgeArgumentsFromIntent(resultIntent);
+        if (bridgeArgs != null) {
+            Bundle errorBundle = bridgeArgs.getBundle(BRIDGE_ARG_ERROR_BUNDLE);
+            if (errorBundle != null) {
+                return getErrorFromResult(errorBundle);
+            }
+        }
 
-        if (type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
+        return getErrorFromResult(resultIntent.getExtras());
+    }
+
+    public static Exception getErrorFromResult(Bundle errorBundle) {
+        // TODO This is not going to work for JS dialogs, where the keys are not STATUS_ERROR_TYPE etc.
+        // TODO However, it should keep existing dialogs functional
+        String type = errorBundle.getString(STATUS_ERROR_TYPE);
+        String description = errorBundle.getString(STATUS_ERROR_DESCRIPTION);
+
+        if (type != null && type.equalsIgnoreCase(ERROR_USER_CANCELED)) {
             return new FacebookOperationCanceledException(description);
         }
+
         /* TODO parse error values and create appropriate exception class */
         return new FacebookException(description);
     }
diff --git a/facebook/src/com/facebook/internal/ServerProtocol.java b/facebook/src/com/facebook/internal/ServerProtocol.java
index 06155ce5e..bc9beecfa 100644
--- a/facebook/src/com/facebook/internal/ServerProtocol.java
+++ b/facebook/src/com/facebook/internal/ServerProtocol.java
@@ -39,6 +39,7 @@
     public static final String DIALOG_PARAM_RESPONSE_TYPE = "response_type";
     public static final String DIALOG_PARAM_RETURN_SCOPES = "return_scopes";
     public static final String DIALOG_PARAM_SCOPE = "scope";
+    public static final String DIALOG_PARAM_DEFAULT_AUDIENCE = "default_audience";
     public static final String DIALOG_REREQUEST_AUTH_TYPE = "rerequest";
     public static final String DIALOG_RESPONSE_TYPE_TOKEN = "token";
     public static final String DIALOG_RETURN_SCOPES_TRUE = "true";
@@ -46,9 +47,7 @@
     // URL components
     private static final String GRAPH_VIDEO_URL_FORMAT = "https://graph-video.%s";
     private static final String GRAPH_URL_FORMAT = "https://graph.%s";
-    private static final String REST_URL_FORMAT = "https://api.%s";
-    public static final String REST_METHOD_BASE = "method";
-    public static final String GRAPH_API_VERSION = "v2.0";
+    public static final String GRAPH_API_VERSION = "v2.1";
 
     private static final String LEGACY_API_VERSION = "v1.0";
 
@@ -69,10 +68,6 @@ public static final String getGraphVideoUrlBase() {
         return String.format(GRAPH_VIDEO_URL_FORMAT, Settings.getFacebookDomain());
     }
 
-    public static final String getRestUrlBase() {
-        return String.format(REST_URL_FORMAT, Settings.getFacebookDomain());
-    }
-
     public static final String getAPIVersion() {
         if (Settings.getPlatformCompatibilityEnabled()) {
             return LEGACY_API_VERSION;
diff --git a/facebook/src/com/facebook/internal/Utility.java b/facebook/src/com/facebook/internal/Utility.java
index 41fd4e3b6..19a8f4047 100644
--- a/facebook/src/com/facebook/internal/Utility.java
+++ b/facebook/src/com/facebook/internal/Utility.java
@@ -17,27 +17,19 @@
 package com.facebook.internal;
 
 import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.net.Uri;
-import android.os.BatteryManager;
-import android.os.Build;
 import android.os.Bundle;
-import android.os.Environment;
 import android.os.Parcelable;
-import android.os.StatFs;
 import android.provider.Settings.Secure;
-import android.telephony.TelephonyManager;
 import android.text.TextUtils;
-import android.util.DisplayMetrics;
 import android.util.Log;
-import android.view.Display;
-import android.view.WindowManager;
 import android.webkit.CookieManager;
 import android.webkit.CookieSyncManager;
-import com.facebook.*;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Settings;
 import com.facebook.android.BuildConfig;
 import com.facebook.model.GraphObject;
 import org.json.JSONArray;
@@ -85,12 +77,6 @@
     private static Map<String, FetchedAppSettings> fetchedAppSettings =
             new ConcurrentHashMap<String, FetchedAppSettings>();
 
-    private static int sNumCPUCores = 0;
-    private static long sTotalExternalStorageBytes = -1;
-    private static long sAvailableExternalStorageBytes = -1;
-    private static String sCarrierName = null;
-
-
   public static class FetchedAppSettings {
         private boolean supportsAttribution;
         private boolean supportsImplicitLogging;
@@ -366,13 +352,13 @@ public static void clearFacebookCookies(Context context) {
     }
 
     public static void logd(String tag, Exception e) {
-        if (BuildConfig.DEBUG && tag != null && e != null) {
+        if (Settings.isLoggingEnabled() && tag != null && e != null) {
             Log.d(tag, e.getClass().getSimpleName() + ": " + e.getMessage());
         }
     }
 
     public static void logd(String tag, String msg) {
-        if (BuildConfig.DEBUG && tag != null && msg != null) {
+        if (Settings.isLoggingEnabled() && tag != null && msg != null) {
             Log.d(tag, msg);
         }
     }
@@ -516,14 +502,6 @@ public static void setAppEventExtendedDeviceInfoParameters(GraphObject params, C
       params.setProperty("extinfo", extraInfoArray.toString());
     }
 
-  private static <T> void silentJSONObjectPut(JSONObject object, String key, T data) {
-      try {
-        object.put(key, data);
-      } catch (JSONException e) {
-        // Swallow
-      }
-    }
-
     public static Method getMethodQuietly(Class<?> clazz, String methodName, Class<?>... parameterTypes) {
         try {
             return clazz.getMethod(methodName, parameterTypes);
diff --git a/facebook/src/com/facebook/widget/FacebookDialog.java b/facebook/src/com/facebook/widget/FacebookDialog.java
index 1322228ca..226e1206a 100644
--- a/facebook/src/com/facebook/widget/FacebookDialog.java
+++ b/facebook/src/com/facebook/widget/FacebookDialog.java
@@ -29,7 +29,10 @@
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Validate;
-import com.facebook.model.*;
+import com.facebook.model.GraphObject;
+import com.facebook.model.GraphObjectList;
+import com.facebook.model.OpenGraphAction;
+import com.facebook.model.OpenGraphObject;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -341,9 +344,11 @@ public static boolean handleActivityResult(Context context, PendingCall appCall,
         if (callback != null) {
             if (NativeProtocol.isErrorResult(data)) {
                 Exception error = NativeProtocol.getErrorFromResult(data);
+
+                // TODO  - data.getExtras() doesn't work for the bucketed protocol.
                 callback.onError(appCall, error, data.getExtras());
             } else {
-                callback.onComplete(appCall, data.getExtras());
+                callback.onComplete(appCall, NativeProtocol.getSuccessResultsFromIntent(data));
             }
         }
 
@@ -480,7 +485,14 @@ static private String getEventName(String action, boolean hasPhotos) {
         return eventName;
     }
 
-    abstract static class Builder<CONCRETE extends Builder<?>> {
+    /**
+     * Provides a base class for various FacebookDialog builders. This is public primarily to allow its use elsewhere
+     * in the Android SDK; developers are discouraged from constructing their own FacebookDialog builders as the
+     * internal API may change.
+     *
+     * @param <CONCRETE> The concrete base class of the builder.
+     */
+    public abstract static class Builder<CONCRETE extends Builder<?>> {
         final protected Activity activity;
         final protected String applicationId;
         final protected PendingCall appCall;
@@ -489,7 +501,12 @@ static private String getEventName(String action, boolean hasPhotos) {
         protected HashMap<String, Bitmap> imageAttachments = new HashMap<String, Bitmap>();
         protected HashMap<String, File> imageAttachmentFiles = new HashMap<String, File>();
 
-        Builder(Activity activity) {
+        /**
+         * Constructor.
+         *
+         * @param activity the Activity which is presenting the native Share dialog; must not be null
+         */
+        public Builder(Activity activity) {
             Validate.notNull(activity, "activity");
 
             this.activity = activity;
@@ -549,16 +566,26 @@ public CONCRETE setFragment(Fragment fragment) {
         public FacebookDialog build() {
             validate();
 
-            Bundle extras = new Bundle();
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
-            putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
-            extras = setBundleExtras(extras);
-
             String action = getActionForFeatures(getDialogFeatures());
             int protocolVersion = getProtocolVersionForNativeDialog(activity, action,
                     getMinVersionForFeatures(getDialogFeatures()));
 
-            Intent intent = NativeProtocol.createPlatformActivityIntent(activity, action, protocolVersion, extras);
+            Bundle extras = null;
+            if (NativeProtocol.isVersionCompatibleWithBucketedIntent(protocolVersion)) {
+                // Facebook app supports the new bucketed protocol
+                extras = getMethodArguments();
+            } else {
+                // Facebook app only supports the old flat protocol
+                extras = setBundleExtras(new Bundle());
+            }
+
+            Intent intent = NativeProtocol.createPlatformActivityIntent(
+                    activity,
+                    appCall.getCallId().toString(),
+                    action,
+                    protocolVersion,
+                    applicationName,
+                    extras);
             if (intent == null) {
                 logDialogActivity(activity, fragment,
                         getEventName(action, extras.containsKey(NativeProtocol.EXTRA_PHOTOS)),
@@ -567,6 +594,7 @@ public FacebookDialog build() {
                 throw new FacebookException(
                         "Unable to create Intent; this likely means the Facebook app is not installed.");
             }
+
             appCall.setRequestIntent(intent);
 
             return new FacebookDialog(activity, fragment, appCall, getOnPresentCallback());
@@ -636,9 +664,11 @@ public void onPresent(Context context) throws Exception {
             return new ArrayList<String>(imageAttachments.keySet());
         }
 
-        abstract Bundle setBundleExtras(Bundle extras);
+        protected abstract Bundle setBundleExtras(Bundle extras);
 
-        void putExtra(Bundle extras, String key, String value) {
+        protected abstract Bundle getMethodArguments();
+
+        protected void putExtra(Bundle extras, String key, String value) {
             if (value != null) {
                 extras.putString(key, value);
             }
@@ -800,7 +830,7 @@ public CONCRETE setDataErrorsFatal(boolean dataErrorsFatal) {
         }
 
         @Override
-        Bundle setBundleExtras(Bundle extras) {
+        protected Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
             putExtra(extras, NativeProtocol.EXTRA_TITLE, name);
@@ -818,6 +848,27 @@ Bundle setBundleExtras(Bundle extras) {
             }
             return extras;
         }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArguments = new Bundle();
+
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_TITLE, name);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_SUBTITLE, caption);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_DESCRIPTION, description);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_LINK, link);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_IMAGE, picture);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_PLACE_TAG, place);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_TITLE, name);
+            putExtra(methodArguments, NativeProtocol.METHOD_ARGS_REF, ref);
+
+            methodArguments.putBoolean(NativeProtocol.METHOD_ARGS_DATA_FAILURES_FATAL, dataErrorsFatal);
+            if (!Utility.isNullOrEmpty(friends)) {
+                methodArguments.putStringArrayList(NativeProtocol.METHOD_ARGS_FRIEND_TAGS, friends);
+            }
+
+            return methodArguments;
+        }
     }
 
     /**
@@ -937,7 +988,7 @@ void validate() {
         }
 
         @Override
-        Bundle setBundleExtras(Bundle extras) {
+        protected Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_ID, applicationId);
             putExtra(extras, NativeProtocol.EXTRA_APPLICATION_NAME, applicationName);
             putExtra(extras, NativeProtocol.EXTRA_PLACE_TAG, place);
@@ -948,6 +999,20 @@ Bundle setBundleExtras(Bundle extras) {
             }
             return extras;
         }
+
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
+
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_PLACE_TAG, place);
+            methodArgs.putStringArrayList(NativeProtocol.METHOD_ARGS_PHOTOS, imageAttachmentUrls);
+
+            if (!Utility.isNullOrEmpty(friends)) {
+                methodArgs.putStringArrayList(NativeProtocol.METHOD_ARGS_FRIEND_TAGS, friends);
+            }
+
+            return methodArgs;
+        }
     }
 
     /**
@@ -1399,7 +1464,7 @@ void updateObjectAttachmentUrls(String objectProperty, List<String> attachmentUr
         }
 
         @Override
-        Bundle setBundleExtras(Bundle extras) {
+        protected Bundle setBundleExtras(Bundle extras) {
             putExtra(extras, NativeProtocol.EXTRA_PREVIEW_PROPERTY_NAME, previewPropertyName);
             putExtra(extras, NativeProtocol.EXTRA_ACTION_TYPE, actionType);
             extras.putBoolean(NativeProtocol.EXTRA_DATA_FAILURES_FATAL, dataErrorsFatal);
@@ -1413,6 +1478,23 @@ Bundle setBundleExtras(Bundle extras) {
             return extras;
         }
 
+        @Override
+        protected Bundle getMethodArguments() {
+            Bundle methodArgs = new Bundle();
+
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_PREVIEW_PROPERTY_NAME, previewPropertyName);
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_ACTION_TYPE, actionType);
+            methodArgs.putBoolean(NativeProtocol.METHOD_ARGS_DATA_FAILURES_FATAL, dataErrorsFatal);
+
+            JSONObject jsonAction = action.getInnerJSONObject();
+            jsonAction = flattenChildrenOfGraphObject(jsonAction);
+
+            String jsonString = jsonAction.toString();
+            putExtra(methodArgs, NativeProtocol.METHOD_ARGS_ACTION, jsonString);
+
+            return methodArgs;
+        }
+
         private JSONObject flattenChildrenOfGraphObject(JSONObject graphObject) {
             try {
                 // Clone the existing object to avoid modifying it from under the caller.
@@ -1577,7 +1659,6 @@ private PendingCall(Parcel in) {
 
         private void setRequestIntent(Intent requestIntent) {
             this.requestIntent = requestIntent;
-            this.requestIntent.putExtra(NativeProtocol.EXTRA_PROTOCOL_CALL_ID, callId.toString());
         }
 
         /**
diff --git a/facebook/src/com/facebook/widget/GraphObjectAdapter.java b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
index 285ddeec2..bc0adbfb1 100644
--- a/facebook/src/com/facebook/widget/GraphObjectAdapter.java
+++ b/facebook/src/com/facebook/widget/GraphObjectAdapter.java
@@ -23,7 +23,7 @@
 import android.view.ViewGroup;
 import android.view.ViewStub;
 import android.widget.*;
-import com.facebook.*;
+import com.facebook.FacebookException;
 import com.facebook.android.R;
 import com.facebook.internal.ImageDownloader;
 import com.facebook.internal.ImageRequest;
diff --git a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
index 17d6cb674..0f100ed03 100644
--- a/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
+++ b/facebook/src/com/facebook/widget/GraphObjectPagingLoader.java
@@ -20,9 +20,9 @@
 import android.os.Handler;
 import android.support.v4.content.Loader;
 import com.facebook.*;
+import com.facebook.internal.CacheableRequestBatch;
 import com.facebook.model.GraphObject;
 import com.facebook.model.GraphObjectList;
-import com.facebook.internal.CacheableRequestBatch;
 
 class GraphObjectPagingLoader<T extends GraphObject> extends Loader<SimpleGraphObjectCursor<T>> {
     private final Class<T> graphObjectClass;
diff --git a/facebook/src/com/facebook/widget/LoginButton.java b/facebook/src/com/facebook/widget/LoginButton.java
index 828b21d30..6f548f4dc 100644
--- a/facebook/src/com/facebook/widget/LoginButton.java
+++ b/facebook/src/com/facebook/widget/LoginButton.java
@@ -33,17 +33,18 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.Button;
-
 import com.facebook.*;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
-import com.facebook.model.GraphUser;
 import com.facebook.internal.SessionAuthorizationType;
 import com.facebook.internal.SessionTracker;
 import com.facebook.internal.Utility;
 import com.facebook.internal.Utility.FetchedAppSettings;
+import com.facebook.model.GraphUser;
 
-import java.util.*;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
 
 /**
  * A Log In/Log Out button that maintains session state and logs
diff --git a/facebook/src/com/facebook/widget/PickerFragment.java b/facebook/src/com/facebook/widget/PickerFragment.java
index 780fdfa9f..4ef6cbd23 100644
--- a/facebook/src/com/facebook/widget/PickerFragment.java
+++ b/facebook/src/com/facebook/widget/PickerFragment.java
@@ -32,10 +32,13 @@
 import android.view.ViewStub;
 import android.view.animation.AlphaAnimation;
 import android.widget.*;
-import com.facebook.*;
+import com.facebook.FacebookException;
+import com.facebook.Request;
+import com.facebook.Session;
+import com.facebook.SessionState;
 import com.facebook.android.R;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.SessionTracker;
+import com.facebook.model.GraphObject;
 
 import java.util.*;
 
diff --git a/facebook/src/com/facebook/widget/PlacePickerFragment.java b/facebook/src/com/facebook/widget/PlacePickerFragment.java
index 58b277583..043700161 100644
--- a/facebook/src/com/facebook/widget/PlacePickerFragment.java
+++ b/facebook/src/com/facebook/widget/PlacePickerFragment.java
@@ -35,9 +35,9 @@
 import com.facebook.*;
 import com.facebook.android.R;
 import com.facebook.internal.AnalyticsEvents;
-import com.facebook.model.GraphPlace;
 import com.facebook.internal.Logger;
 import com.facebook.internal.Utility;
+import com.facebook.model.GraphPlace;
 
 import java.util.*;
 
diff --git a/facebook/src/com/facebook/widget/ToolTipPopup.java b/facebook/src/com/facebook/widget/ToolTipPopup.java
index 58f64f357..0622416ce 100644
--- a/facebook/src/com/facebook/widget/ToolTipPopup.java
+++ b/facebook/src/com/facebook/widget/ToolTipPopup.java
@@ -16,11 +16,6 @@
 
 package com.facebook.widget;
 
-import java.lang.ref.WeakReference;
-
-import com.facebook.android.R;
-import com.facebook.widget.LoginButton.ToolTipMode;
-
 import android.app.Activity;
 import android.content.Context;
 import android.view.LayoutInflater;
@@ -31,6 +26,9 @@
 import android.widget.ImageView;
 import android.widget.PopupWindow;
 import android.widget.TextView;
+import com.facebook.android.R;
+
+import java.lang.ref.WeakReference;
 
 public class ToolTipPopup {
     
diff --git a/facebook/src/com/facebook/widget/WebDialog.java b/facebook/src/com/facebook/widget/WebDialog.java
index 84be24eec..9150f50a5 100644
--- a/facebook/src/com/facebook/widget/WebDialog.java
+++ b/facebook/src/com/facebook/widget/WebDialog.java
@@ -37,7 +37,8 @@
 import android.widget.ImageView;
 import android.widget.LinearLayout;
 import com.facebook.*;
-import com.facebook.android.*;
+import com.facebook.android.R;
+import com.facebook.android.Util;
 import com.facebook.internal.Logger;
 import com.facebook.internal.ServerProtocol;
 import com.facebook.internal.Utility;
@@ -51,7 +52,6 @@
 public class WebDialog extends Dialog {
     private static final String LOG_TAG = Logger.LOG_TAG_BASE + "WebDialog";
     private static final String DISPLAY_TOUCH = "touch";
-    private static final String USER_AGENT = "user_agent";
     static final String REDIRECT_URI = "fbconnect://success";
     static final String CANCEL_URI = "fbconnect://cancel";
     static final boolean DISABLE_SSL_CHECK_FOR_TESTING = false;
diff --git a/facebook/tests/AndroidManifest.xml b/facebook/tests/AndroidManifest.xml
index 09b8b240b..f3277e761 100644
--- a/facebook/tests/AndroidManifest.xml
+++ b/facebook/tests/AndroidManifest.xml
@@ -5,7 +5,7 @@
           android:versionCode="1"
           android:versionName="1.0">
     <uses-permission android:name="android.permission.INTERNET"></uses-permission>
-    <uses-sdk android:minSdkVersion="7" android:targetSdkVersion="7"/>
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="19"/>
     <!-- We add an application tag here just so that we can indicate that
          this package needs to link against the android.test library,
          which is needed when building test cases. -->
diff --git a/facebook/tests/project.properties b/facebook/tests/project.properties
index 705d57d8d..0506ceb9b 100644
--- a/facebook/tests/project.properties
+++ b/facebook/tests/project.properties
@@ -11,6 +11,6 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 test.runner=android.test.AndroidTestRunner
 android.library.reference.1=../../facebook
diff --git a/facebook/tests/src/com/facebook/AccessTokenTests.java b/facebook/tests/src/com/facebook/AccessTokenTests.java
index 7f4139be9..161070b0f 100644
--- a/facebook/tests/src/com/facebook/AccessTokenTests.java
+++ b/facebook/tests/src/com/facebook/AccessTokenTests.java
@@ -24,6 +24,7 @@
 import android.test.suitebuilder.annotation.SmallTest;
 import com.facebook.internal.NativeProtocol;
 import com.facebook.internal.Utility;
+import junit.framework.Assert;
 
 import java.io.IOException;
 import java.util.ArrayList;
@@ -34,8 +35,6 @@
 public final class AccessTokenTests extends AndroidTestCase {
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testEmptyToken() {
         List<String> permissions = Utility.arrayList();
         AccessToken token = AccessToken.createEmptyToken();
@@ -46,8 +45,6 @@ public void testEmptyToken() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromDialog() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -64,8 +61,27 @@ public void testFromDialog() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
+    public void testCreateFromRefreshFailure() {
+        AccessToken accessToken = AccessToken.createFromString(
+                "a token",
+                Utility.arrayList("stream_publish"),
+                AccessTokenSource.WEB_VIEW);
+
+        String token = "AnImaginaryTokenValue";
+
+        Bundle bundle = new Bundle();
+        bundle.putString("access_token", "AnImaginaryTokenValue");
+        bundle.putString("expires_in", "60");
+
+        try {
+            AccessToken.createFromRefresh(accessToken, bundle);
+            Assert.fail("Expected exception");
+        } catch (FacebookException ex) {
+            Assert.assertEquals("Invalid token source: " + AccessTokenSource.WEB_VIEW, ex.getMessage());
+        }
+    }
+
+    @SmallTest
     public void testFromSSOWithExpiresString() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -85,8 +101,6 @@ public void testFromSSOWithExpiresString() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromSSOWithExpiresLong() {
         List<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -105,8 +119,6 @@ public void testFromSSOWithExpiresLong() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testFromNativeLogin() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         String token = "AnImaginaryTokenValue";
@@ -126,8 +138,6 @@ public void testFromNativeLogin() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCacheRoundtrip() {
         ArrayList<String> permissions = Utility.arrayList("stream_publish", "go_outside_and_play");
         ArrayList<String> declinedPermissions = Utility.arrayList("no you may not", "no soup for you");
@@ -154,8 +164,6 @@ public void testCacheRoundtrip() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCachePutGet() {
         Bundle bundle = new Bundle();
 
@@ -200,8 +208,6 @@ public void testCachePutGet() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testBasicSerialization() throws IOException {
         AccessToken accessToken = AccessToken.createFromString("a token",
                 Arrays.asList("permission_1", "permission_2"), AccessTokenSource.WEB_VIEW);
@@ -215,8 +221,6 @@ public void testBasicSerialization() throws IOException {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testPermissionsAreImmutable() {
         List<String> permissions = Arrays.asList("go to Jail", "do not pass Go");
         AccessToken accessToken = new AccessToken("some token", new Date(), permissions, null,
@@ -232,8 +236,6 @@ public void testPermissionsAreImmutable() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCreateFromExistingTokenDefaults() {
         final String token = "A token of my esteem";
 
@@ -249,8 +251,6 @@ public void testCreateFromExistingTokenDefaults() {
     }
 
     @SmallTest
-    @MediumTest
-    @LargeTest
     public void testCreateFromExistingToken() {
         final String token = "A token of my esteem";
         final List<String> permissions = Arrays.asList("walk", "chew gum");
diff --git a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
index e9d99bfc5..c8fef2457 100644
--- a/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
+++ b/facebook/tests/src/com/facebook/AppEventsLoggerTests.java
@@ -41,25 +41,27 @@ public void testSimpleCall() throws InterruptedException {
 
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logEvent("an_event");
-        logger2.logEvent("another_event");
-
-        logger1.flush();
-
-        waitForBroadcastReceiver.waitForExpectedCalls();
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logEvent("an_event");
+            logger2.logEvent("another_event");
+
+            logger1.flush();
+
+            waitForBroadcastReceiver.waitForExpectedCalls();
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 
     public void testPersistedEvents() throws IOException, ClassNotFoundException {
@@ -68,49 +70,52 @@ public void testPersistedEvents() throws IOException, ClassNotFoundException {
         final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
 
-        getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
+            getActivity().getFileStreamPath(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME).delete();
 
-        TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
-        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
+            TestSession session1 = TestSession.createSessionWithSharedUser(getActivity(), null);
+            AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), session1);
 
-        logger1.logEvent("an_event");
+            logger1.logEvent("an_event");
 
-        AppEventsLogger.onContextStop();
+            AppEventsLogger.onContextStop();
 
-        FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
-        assertNotNull(fis);
+            FileInputStream fis = getActivity().openFileInput(AppEventsLogger.PersistedEvents.PERSISTED_EVENTS_FILENAME);
+            assertNotNull(fis);
 
-        ObjectInputStream ois = new ObjectInputStream(fis);
-        Object obj = ois.readObject();
-        ois.close();
+            ObjectInputStream ois = new ObjectInputStream(fis);
+            Object obj = ois.readObject();
+            ois.close();
 
-        assertTrue(obj instanceof HashMap);
+            assertTrue(obj instanceof HashMap);
 
-        logger1.flush();
+            logger1.flush();
 
-        logger1.logEvent("another_event");
+            logger1.logEvent("another_event");
 
-        waitForBroadcastReceiver.incrementExpectCount();
-        logger1.flush();
+            waitForBroadcastReceiver.incrementExpectCount();
+            logger1.flush();
 
-        waitForBroadcastReceiver.waitForExpectedCalls();
-        List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
-        assertEquals(1, receivedIntents.size());
+            waitForBroadcastReceiver.waitForExpectedCalls();
+            List<Intent> receivedIntents = waitForBroadcastReceiver.getReceivedIntents();
+            assertEquals(1, receivedIntents.size());
 
-        Intent intent = receivedIntents.get(0);
-        assertNotNull(intent);
+            Intent intent = receivedIntents.get(0);
+            assertNotNull(intent);
 
-        assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+            assertEquals(2, intent.getIntExtra(AppEventsLogger.APP_EVENTS_EXTRA_NUM_EVENTS_FLUSHED, 0));
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 
     @SuppressWarnings("deprecation")
@@ -126,23 +131,25 @@ public void testInsightsLoggerCompatibility() throws InterruptedException {
 
         final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
 
-        // Need to get notifications on another thread so we can wait for them.
-        runOnBlockerThread(new Runnable() {
-            @Override
-            public void run() {
-                broadcastManager.registerReceiver(waitForBroadcastReceiver,
-                        new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
-            }
-        }, true);
-
-        logger1.logConversionPixel("foo", 1.0);
-
-        // For some reason the flush can take an extraordinary amount of time, so increasing
-        // the timeout here to prevent failures.
-        waitForBroadcastReceiver.waitForExpectedCalls(600*1000);
-
-        closeBlockerAndAssertSuccess();
-
-        broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logConversionPixel("foo", 1.0);
+
+            // For some reason the flush can take an extraordinary amount of time, so increasing
+            // the timeout here to prevent failures.
+            waitForBroadcastReceiver.waitForExpectedCalls(600 * 1000);
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
     }
 }
diff --git a/facebook/tests/src/com/facebook/AsyncRequestTests.java b/facebook/tests/src/com/facebook/AsyncRequestTests.java
index f30af6bb7..ec219a6ef 100644
--- a/facebook/tests/src/com/facebook/AsyncRequestTests.java
+++ b/facebook/tests/src/com/facebook/AsyncRequestTests.java
@@ -238,7 +238,7 @@ public void run() {
 
     @LargeTest
     public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
+        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos", "publish_actions");
 
         final int image1Size = 120;
         final int image2Size = 150;
diff --git a/facebook/tests/src/com/facebook/BatchRequestTests.java b/facebook/tests/src/com/facebook/BatchRequestTests.java
index d75d31ab5..0f9ebc3e8 100644
--- a/facebook/tests/src/com/facebook/BatchRequestTests.java
+++ b/facebook/tests/src/com/facebook/BatchRequestTests.java
@@ -315,7 +315,7 @@ public void testClosedSessionDoesntAppendAccessToken() {
 
     @LargeTest
     public void testBatchUploadPhoto() {
-        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos");
+        TestSession session = openTestSessionWithSharedUserAndPermissions(null, "user_photos", "publish_actions");
 
         final int image1Size = 120;
         final int image2Size = 150;
diff --git a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
index c0afc8c73..bd199bf5d 100644
--- a/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
+++ b/facebook/tests/src/com/facebook/FacebookActivityTestCase.java
@@ -25,15 +25,17 @@
 import android.os.Handler;
 import android.test.ActivityInstrumentationTestCase2;
 import android.util.Log;
-import com.facebook.android.Util;
-import com.facebook.model.GraphObject;
 import com.facebook.internal.Utility;
+import com.facebook.model.GraphObject;
 import junit.framework.AssertionFailedError;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.io.*;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
 import java.net.HttpURLConnection;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -233,6 +235,9 @@ public void call(Session session, SessionState state, Exception exception) {
     protected void setUp() throws Exception {
         super.setUp();
 
+        // Make sure the logging is turned on.
+        Settings.setIsLoggingEnabled(true);
+
         // Make sure we have read application ID and secret.
         readApplicationIdAndSecret();
 
@@ -475,7 +480,6 @@ public void run() {
         return result.isEmpty() ? null : result.get(0);
     }
 
-
     /*
      * Classes and helpers related to asynchronous requests.
      */
diff --git a/facebook/tests/src/com/facebook/RequestTests.java b/facebook/tests/src/com/facebook/RequestTests.java
index 99da7ab6d..458689f19 100644
--- a/facebook/tests/src/com/facebook/RequestTests.java
+++ b/facebook/tests/src/com/facebook/RequestTests.java
@@ -437,27 +437,6 @@ public void testFacebookErrorResponseCreatesError() {
         assertNotNull(error.getRequestResultBody());
     }
 
-    @LargeTest
-    public void testFacebookSuccessResponseWithErrorCodeCreatesError() {
-        TestSession session = openTestSessionWithSharedUser();
-
-        Request request = Request.newRestRequest(session, "auth.extendSSOAccessToken", null, null);
-        assertNotNull(request);
-
-        // Because TestSession access tokens were not created via SSO, we expect to get an error from the service,
-        // but with a 200 (success) code.
-        Response response = request.executeAndWait();
-
-        assertTrue(response != null);
-
-        FacebookRequestError error = response.getError();
-        assertNotNull(error);
-
-        assertTrue(error.getException() instanceof FacebookServiceException);
-        assertTrue(error.getErrorCode() != FacebookRequestError.INVALID_ERROR_CODE);
-        assertNotNull(error.getRequestResultBody());
-    }
-
     @MediumTest
     @LargeTest
     public void testRequestWithUnopenedSessionFails() {
@@ -622,7 +601,7 @@ public void testDeleteObjectRequest() {
         GraphObject result = response.getGraphObject();
         assertNotNull(result);
 
-        assertTrue((Boolean) result.getProperty(Response.NON_JSON_RESPONSE_PROPERTY));
+        assertTrue((Boolean) result.getProperty(Response.SUCCESS_KEY));
         assertNotNull(response.getRawResponse());
     }
 
@@ -734,30 +713,6 @@ public void testPostStatusUpdate() {
         assertEquals(statusUpdate.getProperty("message"), retrievedStatusUpdate.getProperty("message"));
     }
 
-    @LargeTest
-    public void testRestMethodGetUser() {
-        TestSession session = openTestSessionWithSharedUser();
-        String testUserId = session.getTestUserId();
-
-        Bundle parameters = new Bundle();
-        parameters.putString("uids", testUserId);
-        parameters.putString("fields", "uid,name");
-
-        Request request = Request.newRestRequest(session, "users.getInfo", parameters, null);
-        Response response = request.executeAndWait();
-        assertNotNull(response);
-
-        GraphObjectList<GraphObject> graphObjects = response.getGraphObjectList();
-        assertNotNull(graphObjects);
-        assertEquals(1, graphObjects.size());
-
-        GraphObject user = graphObjects.get(0);
-        assertNotNull(user);
-        assertEquals(testUserId, user.getProperty("uid").toString());
-
-        assertNotNull(response.getRawResponse());
-    }
-
     @MediumTest
     @LargeTest
     public void testCallbackIsCalled() {
@@ -855,20 +810,6 @@ public void testBatchTimeoutCantBeNegative() {
         }
     }
 
-    @MediumTest
-    @LargeTest
-    public void testCantSetBothGraphPathAndRestMethod() {
-        Request request = new Request();
-        request.setGraphPath("me");
-        request.setRestMethod("amethod");
-        request.setCallback(new ExpectFailureCallback());
-
-        TestRequestAsyncTask task = new TestRequestAsyncTask(request);
-        task.executeOnBlockerThread();
-
-        waitAndAssertSuccess(1);
-    }
-
     @MediumTest
     @LargeTest
     public void testClosedSessionDoesntAppendAccessToken() {
diff --git a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
index bab3fb38f..ab7ad3341 100644
--- a/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
+++ b/facebook/tests/src/com/facebook/SharedPreferencesTokenCacheTests.java
@@ -159,6 +159,7 @@ public void testCacheRoundtrip() {
         TokenCachingStrategy.putSource(bundle, AccessTokenSource.FACEBOOK_APPLICATION_NATIVE);
         TokenCachingStrategy.putLastRefreshDate(bundle, earlier);
         TokenCachingStrategy.putPermissions(bundle, permissions);
+        TokenCachingStrategy.putDeclinedPermissions(bundle, Utility.arrayList("whatever"));
 
         cache.save(bundle);
         bundle = cache.load();
diff --git a/facebook/tests/src/com/facebook/TestSessionTests.java b/facebook/tests/src/com/facebook/TestSessionTests.java
index 8c72f4567..d0fee76c1 100644
--- a/facebook/tests/src/com/facebook/TestSessionTests.java
+++ b/facebook/tests/src/com/facebook/TestSessionTests.java
@@ -134,16 +134,15 @@ private int countTestUsers() {
 
         String appAccessToken = TestSession.getAppAccessToken();
         assertNotNull(appAccessToken);
-        String applicationId = session.getApplicationId();
-        assertNotNull(applicationId);
 
-        String fqlQuery = String.format("SELECT id FROM test_account WHERE app_id = %s", applicationId);
         Bundle parameters = new Bundle();
-        parameters.putString("q", fqlQuery);
+
         parameters.putString("access_token", appAccessToken);
+        parameters.putString("fields", "id");
+
+        Request requestTestUsers = new Request(null, "app/accounts/test-users", parameters, null);
 
-        Request request = new Request(null, "fql", parameters, null);
-        Response response = request.executeAndWait();
+        Response response = requestTestUsers.executeAndWait();
 
         JSONArray data = (JSONArray) response.getGraphObject().getProperty("data");
         return data.length();
diff --git a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
index 6cd705cf2..ac20bb49d 100644
--- a/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
+++ b/facebook/tests/src/com/facebook/internal/ImageResponseCacheTests.java
@@ -21,10 +21,7 @@
 import android.graphics.BitmapFactory;
 import android.test.AndroidTestCase;
 import android.test.suitebuilder.annotation.LargeTest;
-import android.test.suitebuilder.annotation.MediumTest;
 import com.facebook.TestUtils;
-import com.facebook.internal.Utility;
-import com.facebook.internal.ImageResponseCache;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -35,7 +32,7 @@
 
 public final class ImageResponseCacheTests extends AndroidTestCase {
 
-    @MediumTest @LargeTest
+    @LargeTest
     public void testImageCaching() throws Exception {
         // In unit test, since we need verify first access the image is not in cache
         // we need clear the cache first
@@ -47,10 +44,10 @@ public void testImageCaching() throws Exception {
         compareImages(bmp1, bmp2);
     }
     
-    @MediumTest @LargeTest
+    @LargeTest
     public void testImageNotCaching() throws IOException {
         
-        String imgUrl = "http://graph.facebook.com/ryanseacrest/picture?type=large";
+        String imgUrl = "https://graph.facebook.com/ryanseacrest/picture?type=large";
         
         Bitmap bmp1 = readImage(imgUrl, false);
         Bitmap bmp2 = readImage(imgUrl, false);
@@ -72,6 +69,7 @@ private Bitmap readImage(String uri, boolean expectedFromCache) {
                 HttpURLConnection connection = (HttpURLConnection)url.toURL().openConnection();
                 istream = ImageResponseCache.interceptAndCacheImageStream(safeGetContext(), connection);
             }
+
             assertTrue(istream != null);
             bmp = BitmapFactory.decodeStream(istream);
             assertTrue(bmp != null);
diff --git a/gradle.properties b/gradle.properties
index c4e4395e0..4fc65f988 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,4 +1,4 @@
-ANDROID_BUILD_MIN_SDK_VERSION=8
+ANDROID_BUILD_MIN_SDK_VERSION=9
 ANDROID_BUILD_TARGET_SDK_VERSION=19
 ANDROID_BUILD_TOOLS_VERSION=19.1.0
 ANDROID_BUILD_SDK_VERSION=19
@@ -18,4 +18,4 @@ POM_LICENCE_NAME=The Apache Software License, Version 2.0
 POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
 POM_LICENCE_DIST=repo
 POM_DEVELOPER_ID=robbypond
-POM_DEVELOPER_NAME=Robby Pond
\ No newline at end of file
+POM_DEVELOPER_NAME=Robby Pond
diff --git a/gradle/gradle/wrapper/gradle-wrapper.jar b/gradle/gradle/wrapper/gradle-wrapper.jar
deleted file mode 100644
index 667288ad6..000000000
Binary files a/gradle/gradle/wrapper/gradle-wrapper.jar and /dev/null differ
diff --git a/gradle/gradle/wrapper/gradle-wrapper.properties b/gradle/gradle/wrapper/gradle-wrapper.properties
deleted file mode 100644
index 221ce08bc..000000000
--- a/gradle/gradle/wrapper/gradle-wrapper.properties
+++ /dev/null
@@ -1,6 +0,0 @@
-#Mon Nov 04 15:03:41 PST 2013
-distributionBase=GRADLE_USER_HOME
-distributionPath=wrapper/dists
-zipStoreBase=GRADLE_USER_HOME
-zipStorePath=wrapper/dists
-distributionUrl=http\://services.gradle.org/distributions/gradle-1.8-bin.zip
diff --git a/gradle/gradlew b/gradle/gradlew
deleted file mode 100755
index 91a7e269e..000000000
--- a/gradle/gradlew
+++ /dev/null
@@ -1,164 +0,0 @@
-#!/usr/bin/env bash
-
-##############################################################################
-##
-##  Gradle start up script for UN*X
-##
-##############################################################################
-
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
-
-APP_NAME="Gradle"
-APP_BASE_NAME=`basename "$0"`
-
-# Use the maximum available, or set MAX_FD != -1 to use that value.
-MAX_FD="maximum"
-
-warn ( ) {
-    echo "$*"
-}
-
-die ( ) {
-    echo
-    echo "$*"
-    echo
-    exit 1
-}
-
-# OS specific support (must be 'true' or 'false').
-cygwin=false
-msys=false
-darwin=false
-case "`uname`" in
-  CYGWIN* )
-    cygwin=true
-    ;;
-  Darwin* )
-    darwin=true
-    ;;
-  MINGW* )
-    msys=true
-    ;;
-esac
-
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
-CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
-
-# Determine the Java command to use to start the JVM.
-if [ -n "$JAVA_HOME" ] ; then
-    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
-        # IBM's JDK on AIX uses strange locations for the executables
-        JAVACMD="$JAVA_HOME/jre/sh/java"
-    else
-        JAVACMD="$JAVA_HOME/bin/java"
-    fi
-    if [ ! -x "$JAVACMD" ] ; then
-        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-    fi
-else
-    JAVACMD="java"
-    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-
-Please set the JAVA_HOME variable in your environment to match the
-location of your Java installation."
-fi
-
-# Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
-    MAX_FD_LIMIT=`ulimit -H -n`
-    if [ $? -eq 0 ] ; then
-        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
-            MAX_FD="$MAX_FD_LIMIT"
-        fi
-        ulimit -n $MAX_FD
-        if [ $? -ne 0 ] ; then
-            warn "Could not set maximum file descriptor limit: $MAX_FD"
-        fi
-    else
-        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
-    fi
-fi
-
-# For Darwin, add options to specify how the application appears in the dock
-if $darwin; then
-    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
-fi
-
-# For Cygwin, switch paths to Windows format before running java
-if $cygwin ; then
-    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
-    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
-
-    # We build the pattern for arguments to be converted via cygpath
-    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
-    SEP=""
-    for dir in $ROOTDIRSRAW ; do
-        ROOTDIRS="$ROOTDIRS$SEP$dir"
-        SEP="|"
-    done
-    OURCYGPATTERN="(^($ROOTDIRS))"
-    # Add a user-defined pattern to the cygpath arguments
-    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
-        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
-    fi
-    # Now convert the arguments - kludge to limit ourselves to /bin/sh
-    i=0
-    for arg in "$@" ; do
-        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
-        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
-
-        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
-            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
-        else
-            eval `echo args$i`="\"$arg\""
-        fi
-        i=$((i+1))
-    done
-    case $i in
-        (0) set -- ;;
-        (1) set -- "$args0" ;;
-        (2) set -- "$args0" "$args1" ;;
-        (3) set -- "$args0" "$args1" "$args2" ;;
-        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
-        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
-        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
-        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
-        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
-        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
-    esac
-fi
-
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
-}
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
-
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradle/gradlew.bat b/gradle/gradlew.bat
deleted file mode 100644
index aec99730b..000000000
--- a/gradle/gradlew.bat
+++ /dev/null
@@ -1,90 +0,0 @@
-@if "%DEBUG%" == "" @echo off
-@rem ##########################################################################
-@rem
-@rem  Gradle startup script for Windows
-@rem
-@rem ##########################################################################
-
-@rem Set local scope for the variables with windows NT shell
-if "%OS%"=="Windows_NT" setlocal
-
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
-set DIRNAME=%~dp0
-if "%DIRNAME%" == "" set DIRNAME=.
-set APP_BASE_NAME=%~n0
-set APP_HOME=%DIRNAME%
-
-@rem Find java.exe
-if defined JAVA_HOME goto findJavaFromJavaHome
-
-set JAVA_EXE=java.exe
-%JAVA_EXE% -version >NUL 2>&1
-if "%ERRORLEVEL%" == "0" goto init
-
-echo.
-echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:findJavaFromJavaHome
-set JAVA_HOME=%JAVA_HOME:"=%
-set JAVA_EXE=%JAVA_HOME%/bin/java.exe
-
-if exist "%JAVA_EXE%" goto init
-
-echo.
-echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
-echo.
-echo Please set the JAVA_HOME variable in your environment to match the
-echo location of your Java installation.
-
-goto fail
-
-:init
-@rem Get command-line arguments, handling Windowz variants
-
-if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
-
-:win9xME_args
-@rem Slurp the command line arguments.
-set CMD_LINE_ARGS=
-set _SKIP=2
-
-:win9xME_args_slurp
-if "x%~1" == "x" goto execute
-
-set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
-
-:execute
-@rem Setup the command line
-
-set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
-
-@rem Execute Gradle
-"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
-
-:end
-@rem End local scope for the variables with windows NT shell
-if "%ERRORLEVEL%"=="0" goto mainEnd
-
-:fail
-rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
-rem the _cmd.exe /c_ return code!
-if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
-exit /b 1
-
-:mainEnd
-if "%OS%"=="Windows_NT" endlocal
-
-:omega
diff --git a/keystores/BUCK b/keystores/BUCK
new file mode 100644
index 000000000..15da20e6b
--- /dev/null
+++ b/keystores/BUCK
@@ -0,0 +1,8 @@
+keystore(
+  name = 'debug',
+  store = 'debug.keystore',
+  properties = 'debug.keystore.properties',
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/keystores/debug.keystore b/keystores/debug.keystore
new file mode 100644
index 000000000..364e105ed
Binary files /dev/null and b/keystores/debug.keystore differ
diff --git a/keystores/debug.keystore.properties b/keystores/debug.keystore.properties
new file mode 100644
index 000000000..121bfb49f
--- /dev/null
+++ b/keystores/debug.keystore.properties
@@ -0,0 +1,4 @@
+key.store=debug.keystore
+key.alias=androiddebugkey
+key.store.password=android
+key.alias.password=android
diff --git a/libs/BUCK b/libs/BUCK
new file mode 100644
index 000000000..1a2a7548a
--- /dev/null
+++ b/libs/BUCK
@@ -0,0 +1,15 @@
+prebuilt_jar(
+  name = 'android-support-v4',
+  binary_jar = 'android-support-v4.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
+
+prebuilt_jar(
+  name = 'bolts',
+  binary_jar = 'bolts.jar',
+  visibility = [
+    'PUBLIC',
+  ],
+)
diff --git a/samples/FriendPickerSample/AndroidManifest.xml b/samples/FriendPickerSample/AndroidManifest.xml
index d8f1911cd..13642ea38 100644
--- a/samples/FriendPickerSample/AndroidManifest.xml
+++ b/samples/FriendPickerSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.friendpicker"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
diff --git a/samples/FriendPickerSample/project.properties b/samples/FriendPickerSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/FriendPickerSample/project.properties
+++ b/samples/FriendPickerSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
index 478bd7a5d..215f95143 100644
--- a/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
+++ b/samples/FriendPickerSample/src/com/facebook/samples/friendpicker/FriendPickerSampleActivity.java
@@ -25,13 +25,12 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.TextView;
-
 import com.facebook.AppEventsLogger;
+import com.facebook.Session;
 import com.facebook.Session.NewPermissionsRequest;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphUser;
-import com.facebook.Session;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -91,6 +90,15 @@ protected void onResume() {
         AppEventsLogger.activateApp(this);
     }
 
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
+    }
+
     public void onActivityResult(int requestCode, int resultCode, Intent data) {
         switch (requestCode) {
             case PICK_FRIENDS_ACTIVITY:
diff --git a/samples/HelloFacebookSample/AndroidManifest.xml b/samples/HelloFacebookSample/AndroidManifest.xml
index 04809d609..c19c42f6d 100644
--- a/samples/HelloFacebookSample/AndroidManifest.xml
+++ b/samples/HelloFacebookSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.hellofacebook"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
diff --git a/samples/HelloFacebookSample/BUCK b/samples/HelloFacebookSample/BUCK
new file mode 100644
index 000000000..27198e91c
--- /dev/null
+++ b/samples/HelloFacebookSample/BUCK
@@ -0,0 +1,31 @@
+android_resource(
+  name = 'res',
+  res = 'res',
+  package = 'com.facebook',
+  deps = [
+    '//facebook:android-sdk',
+  ],
+)
+
+android_library(
+  name = 'lib',
+  srcs = glob(['src/**/*.java']),
+  deps = [
+    ':res',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
+
+android_binary(
+  name = 'app',
+  manifest = 'AndroidManifest.xml',
+  target = 'android-16',
+  keystore = '//keystores:debug',
+  package_type = 'debug',
+  deps = [
+    ':lib',
+    '//facebook:android-sdk',
+    '//libs:android-support-v4',
+  ],
+)
diff --git a/samples/HelloFacebookSample/project.properties b/samples/HelloFacebookSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/HelloFacebookSample/project.properties
+++ b/samples/HelloFacebookSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
index 33485efb4..8b737f11e 100644
--- a/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
+++ b/samples/HelloFacebookSample/src/com/facebook/samples/hellofacebook/HelloFacebookSampleActivity.java
@@ -38,7 +38,10 @@
 import com.facebook.model.GraphUser;
 import com.facebook.widget.*;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Date;
+import java.util.List;
 
 public class HelloFacebookSampleActivity extends FragmentActivity {
 
@@ -214,6 +217,10 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     public void onPause() {
         super.onPause();
         uiHelper.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/PlacePickerSample/AndroidManifest.xml b/samples/PlacePickerSample/AndroidManifest.xml
index b0697ff65..f469c0196 100644
--- a/samples/PlacePickerSample/AndroidManifest.xml
+++ b/samples/PlacePickerSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.placepicker"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
diff --git a/samples/PlacePickerSample/project.properties b/samples/PlacePickerSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/PlacePickerSample/project.properties
+++ b/samples/PlacePickerSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
index ce8008f8b..8847017ec 100644
--- a/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
+++ b/samples/PlacePickerSample/src/com/facebook/samples/placepicker/PlacePickerSampleActivity.java
@@ -29,11 +29,11 @@
 import android.widget.Button;
 import android.widget.TextView;
 import com.facebook.AppEventsLogger;
+import com.facebook.Session;
 import com.facebook.SessionState;
 import com.facebook.UiLifecycleHelper;
 import com.facebook.model.GraphLocation;
 import com.facebook.model.GraphPlace;
-import com.facebook.Session;
 
 public class PlacePickerSampleActivity extends FragmentActivity implements LocationListener {
     private static final int PLACE_ACTIVITY = 1;
@@ -136,6 +136,10 @@ protected void onDestroy() {
     protected void onPause() {
         super.onPause();
         lifecycleHelper.onPause();
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/RPSSample/AndroidManifest.xml b/samples/RPSSample/AndroidManifest.xml
index ed5066d49..06c1fc4c0 100644
--- a/samples/RPSSample/AndroidManifest.xml
+++ b/samples/RPSSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.rps"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     <application android:label="@string/app_name"
@@ -18,6 +18,12 @@
                 <action android:name="android.intent.action.MAIN"/>
                 <category android:name="android.intent.category.LAUNCHER"/>
             </intent-filter>
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:host="fb.me" android:scheme="https" />
+            </intent-filter>
         </activity>
         <activity android:name="FriendActivity"
                   android:label="@string/app_name" />
diff --git a/samples/RPSSample/post_app_objects.sh b/samples/RPSSample/post_app_objects.sh
index bda156e45..ba4533438 100755
--- a/samples/RPSSample/post_app_objects.sh
+++ b/samples/RPSSample/post_app_objects.sh
@@ -56,27 +56,59 @@ echo "  rock=$ROCK_IMAGE_URI"
 echo "  paper=$PAPER_IMAGE_URI"
 echo "  scissors=$SCISSORS_IMAGE_URI"
 
+# step 3 - create facebook hosted applink page for the app:
+# For mobile only app, facebook provide applink host service to generate a page: https://developers.facebook.com/docs/graph-api/reference/v2.0/app/app_link_hosts
+
+echo "creating facebook host applink page for mobile-only app:"
+
+FB_APPLINK_HOST_ID=` \
+curl https://graph.facebook.com/app/app_link_hosts -F access_token="$APPID|$APPSECRET" -F pretty=true -F name="RPSSample" \
+-F ios='[
+    {
+      "url" : "rps-sample-applink-example://",
+      "app_store_id" : 794163692,
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F android=' [
+    {
+      "package" : "com.facebook.samples.rps",
+      "app_name" : "RPS Sample",
+    },
+  ]' \
+-F web=' {
+    "should_fallback" : false,
+  }' \
+| perl -ne '/"id":\s*"(.*)"/ && print $1'`
+
+FB_APPLINK_HOST_URL=` \
+curl -X GET https://graph.facebook.com/v2.0/$FB_APPLINK_HOST_ID?access_token="$APPID|$APPSECRET" \
+| perl -ne '/"canonical_url":\s*"(.*)"/ && print $1' `
+
+echo "  applink host url id: $FB_APPLINK_HOST_ID"
+echo "  applink host url: $FB_APPLINK_HOST_URL"
+
 #
-# step 3 - create objects and capture their IDs in variables
+# step 4 - create objects and capture their IDs in variables
 #
 
 # rock
 ROCK_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Rock\",\"description\":\"Breaks scissors, alas is covered by paper.\",\"image\":\"$ROCK_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=rock\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 # paper
 PAPER_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Paper\",\"description\":\"Covers rock, sadly scissors cut it.\",\"image\":\"$PAPER_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=paper\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 # scissors
 SCISSORS_OBJID=` \
-  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
+  curl -s -X POST -F "object={\"title\":\"Scissors\",\"description\":\"Cuts paper, broken by rock -- bother.\",\"image\":\"$SCISSORS_IMAGE_URI\",\"url\":\"$FB_APPLINK_HOST_URL?gesture=scissors\"}" "https://graph.facebook.com/$APPID/objects/fb_sample_rps:gesture?access_token=$APPID|$APPSECRET" \
   | perl -ne '/"id":"(.*)"}/ && print $1' `
 
 #
-# step 4 - echo progress
+# step 5 - echo progress
 #
 
 echo "created application objects..."
@@ -85,7 +117,7 @@ echo "  paper=$PAPER_OBJID"
 echo "  scissors=$SCISSORS_OBJID"
 
 #
-# step 5 - write .java file for common objects
+# step 6 - write .java file for common objects
 #
 
 MFILE=src/com/facebook/samples/rps/CommonObjects.java
diff --git a/samples/RPSSample/project.properties b/samples/RPSSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/RPSSample/project.properties
+++ b/samples/RPSSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/RPSSample/res/values/styles.xml b/samples/RPSSample/res/values/styles.xml
index e43c8a696..e8378559b 100644
--- a/samples/RPSSample/res/values/styles.xml
+++ b/samples/RPSSample/res/values/styles.xml
@@ -30,7 +30,6 @@
     <style name="again_button_style" parent="@android:style/Widget.Button">
         <item name="android:width">200dp</item>
         <item name="android:height">75dp</item>
-        <item name="android:background">@drawable/com_facebook_loginbutton_silver</item>
         <item name="android:textSize">@dimen/text_size</item>
         <item name="android:textColor">@color/text_color</item>
         <item name="android:gravity">center</item>
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
index 3551eaff2..fdc669a96 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/CommonObjects.java
@@ -1,12 +1,12 @@
-/**
+/*
  * Copyright 2010-present Facebook.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
- *
+ * 
  *    http://www.apache.org/licenses/LICENSE-2.0
- *
+ 
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -18,8 +18,9 @@
 
 public class CommonObjects {
     public static final String BUILT_IN_OPEN_GRAPH_OBJECTS[] = {
-            "349677488467004", // rock
-            "231845580291424", // paper
-            "120373648159839"  // scissors
+            "672839339475385", // rock
+            "296430467206197", // paper
+            "524651207660361"  // scissors
     };
 }
+
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
index 0a14d072b..cd80632ba 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/FriendActivity.java
@@ -33,7 +33,6 @@
 import com.facebook.*;
 import com.facebook.model.GraphMultiResult;
 import com.facebook.model.GraphUser;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
 import com.facebook.widget.FriendPickerFragment;
 import com.facebook.widget.PickerFragment;
 import com.facebook.widget.WebDialog;
@@ -41,6 +40,8 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+
 public class FriendActivity extends FragmentActivity {
     private static final String TAG = FriendActivity.class.getName();
     private static final String INSTALLED = "installed";
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
index 5e6efe1f6..b26dd6489 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/MainActivity.java
@@ -26,12 +26,13 @@
 import android.view.Menu;
 import android.view.MenuItem;
 import android.widget.Toast;
+import bolts.AppLinks;
 import com.facebook.*;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-import static com.facebook.samples.rps.RpsGameUtils.*;
+import static com.facebook.samples.rps.RpsGameUtils.INVALID_CHOICE;
 
 public class MainActivity extends FragmentActivity {
     static final int RPS = 0;
@@ -54,9 +55,6 @@ public void call(Session session, SessionState state, Exception exception) {
     };
     private boolean hasNativeLink = false;
 
-    // the deep link url should be of the form http://some.path?fb_object_id=xxxxxxxxxx
-    private Pattern deepLinkPattern = Pattern.compile(".*fb_object_id=(\\d*)");
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -96,6 +94,16 @@ public void onPause() {
         super.onPause();
         uiHelper.onPause();
         isResumed = false;
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
+    }
+
+    @Override
+    public void onStop() {
+        super.onStop();
+        uiHelper.onStop();
     }
 
     @Override
@@ -184,30 +192,29 @@ private boolean handleNativeLink() {
             }
         }
         // See if we have a deep link in addition.
-        int deepLinkContent = getDeepLinkContent(getIntent().getData());
-        if (deepLinkContent != INVALID_CHOICE) {
+        int appLinkGesture = getAppLinkGesture(getIntent());
+        if (appLinkGesture != INVALID_CHOICE) {
             ContentFragment fragment = (ContentFragment) fragments[CONTENT];
-            fragment.setContentIndex(deepLinkContent);
+            fragment.setContentIndex(appLinkGesture);
             return true;
         }
         return false;
     }
 
-    private int getDeepLinkContent(Uri deepLinkUri) {
-        if (deepLinkUri != null) {
-            String deepLink = deepLinkUri.toString();
-
-            Matcher matcher = deepLinkPattern.matcher(deepLink);
-            if (matcher.matches()) {
-                String objectId = matcher.group(1);
-                for (int i = 0; i < CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS.length; i++) {
-                    if (CommonObjects.BUILT_IN_OPEN_GRAPH_OBJECTS[i].equals(objectId)) {
-                        return i;
-                    }
-                }
-            }
-        }
+    private int getAppLinkGesture(Intent intent) {
+      Uri targetURI = AppLinks.getTargetUrl(intent);
+      if (targetURI == null) {
         return INVALID_CHOICE;
+      }
+      String gesture = targetURI.getQueryParameter("gesture");
+      if (gesture != null && gesture.equalsIgnoreCase(getString(R.string.rock))) {
+        return RpsGameUtils.ROCK;
+      } else if (gesture.equalsIgnoreCase(getString(R.string.paper))) {
+        return RpsGameUtils.PAPER;
+      } else if (gesture.equalsIgnoreCase(getString(R.string.scissors))) {
+        return RpsGameUtils.SCISSORS;
+      }
+      return INVALID_CHOICE;
     }
 
     private void onSessionStateChange(Session session, SessionState state, Exception exception) {
diff --git a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
index 30d74bb1d..8e9d61f61 100644
--- a/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
+++ b/samples/RPSSample/src/com/facebook/samples/rps/RpsFragment.java
@@ -33,9 +33,6 @@
 import android.widget.*;
 import com.facebook.*;
 import com.facebook.model.GraphObject;
-import static com.facebook.samples.rps.OpenGraphUtils.*;
-import static com.facebook.samples.rps.RpsGameUtils.*;
-
 import com.facebook.model.OpenGraphAction;
 import com.facebook.model.OpenGraphObject;
 import com.facebook.widget.FacebookDialog;
@@ -43,6 +40,9 @@
 import java.util.Arrays;
 import java.util.Random;
 
+import static com.facebook.samples.rps.OpenGraphUtils.*;
+import static com.facebook.samples.rps.RpsGameUtils.*;
+
 public class RpsFragment extends Fragment {
 
     private static final String SHARE_GAME_LINK = "https://developers.facebook.com/android";
diff --git a/samples/Scrumptious/AndroidManifest.xml b/samples/Scrumptious/AndroidManifest.xml
index 9a83e201c..f5fadc8c7 100644
--- a/samples/Scrumptious/AndroidManifest.xml
+++ b/samples/Scrumptious/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.scrumptious"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.CAMERA"/>
diff --git a/samples/Scrumptious/project.properties b/samples/Scrumptious/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/Scrumptious/project.properties
+++ b/samples/Scrumptious/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
index 58daa220e..678fdcb4b 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/FullListView.java
@@ -17,7 +17,6 @@
 package com.facebook.scrumptious;
 
 import android.content.Context;
-import android.graphics.Rect;
 import android.util.AttributeSet;
 import android.view.View;
 import android.widget.ListAdapter;
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
index b1fcc58da..e496de8cc 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/MainActivity.java
@@ -99,6 +99,10 @@ public void onPause() {
         super.onPause();
         uiHelper.onPause();
         isResumed = false;
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
index 322979141..f6f572ce8 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SelectionFragment.java
@@ -629,10 +629,19 @@ public void onClick(DialogInterface dialogInterface, int i) {
             }
         }
 
+        String title = error.getErrorUserTitle();
+        String message = error.getErrorUserMessage();
+        if (message == null) {
+            message = dialogBody;
+        }
+        if (title == null) {
+            title = getResources().getString(R.string.error_dialog_title);
+        }
+
         new AlertDialog.Builder(getActivity())
                 .setPositiveButton(R.string.error_dialog_button_text, listener)
-                .setTitle(R.string.error_dialog_title)
-                .setMessage(dialogBody)
+                .setTitle(title)
+                .setMessage(message)
                 .show();
     }
 
diff --git a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
index c89ebbb50..2eaaede2a 100644
--- a/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
+++ b/samples/Scrumptious/src/com/facebook/scrumptious/SplashFragment.java
@@ -21,7 +21,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.Button;
 import android.widget.TextView;
 
 public class SplashFragment extends Fragment {
diff --git a/samples/SwitchUserSample/AndroidManifest.xml b/samples/SwitchUserSample/AndroidManifest.xml
index 8107b8d41..7f63ea40b 100644
--- a/samples/SwitchUserSample/AndroidManifest.xml
+++ b/samples/SwitchUserSample/AndroidManifest.xml
@@ -3,7 +3,7 @@
           package="com.facebook.samples.switchuser"
           android:versionCode="1"
           android:versionName="1.0">
-    <uses-sdk android:minSdkVersion="8"/>
+    <uses-sdk android:minSdkVersion="9"/>
     <uses-permission android:name="android.permission.INTERNET"/>
     <application android:label="@string/app_name"
                  android:icon="@drawable/icon" >
diff --git a/samples/SwitchUserSample/project.properties b/samples/SwitchUserSample/project.properties
index cee0509c6..a5c0144be 100644
--- a/samples/SwitchUserSample/project.properties
+++ b/samples/SwitchUserSample/project.properties
@@ -11,5 +11,5 @@
 #proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
 
 # Project target.
-target=android-8
+target=android-9
 android.library.reference.1=../../facebook
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
index b7ddd6adb..89a2f38c8 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/MainActivity.java
@@ -135,6 +135,10 @@ protected void onPause() {
         if (currentSession != null) {
             currentSession.removeCallback(sessionStatusCallback);
         }
+
+        // Call the 'deactivateApp' method to log an app event for use in analytics and advertising
+        // reporting.  Do so in the onPause methods of the primary Activities that an app may be launched into.
+        AppEventsLogger.deactivateApp(this);
     }
 
     @Override
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
index dd1b1bc77..0dab22ade 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/SettingsFragment.java
@@ -22,9 +22,9 @@
 import android.support.v4.app.ListFragment;
 import android.view.*;
 import android.widget.*;
+import com.facebook.SessionLoginBehavior;
 import com.facebook.model.GraphUser;
 import com.facebook.widget.ProfilePictureView;
-import com.facebook.SessionLoginBehavior;
 
 import java.util.ArrayList;
 import java.util.Arrays;
diff --git a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
index 479deb273..3e5f8399b 100644
--- a/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
+++ b/samples/SwitchUserSample/src/com/facebook/samples/switchuser/Slot.java
@@ -18,7 +18,8 @@
 
 import android.content.Context;
 import android.os.Bundle;
-import com.facebook.*;
+import com.facebook.SessionLoginBehavior;
+import com.facebook.SharedPreferencesTokenCachingStrategy;
 import com.facebook.model.GraphUser;
 
 public class Slot {
