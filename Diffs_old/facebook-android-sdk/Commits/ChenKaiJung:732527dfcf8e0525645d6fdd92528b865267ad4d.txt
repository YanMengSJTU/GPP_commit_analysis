diff --git a/facebook/src/com/facebook/Session.java b/facebook/src/com/facebook/Session.java
index 612ef3aae..125746c08 100644
--- a/facebook/src/com/facebook/Session.java
+++ b/facebook/src/com/facebook/Session.java
@@ -33,6 +33,7 @@
 
 
 
+
 import com.facebook.AccessToken;
 
 /**
@@ -412,7 +413,11 @@ public final Date getExpirationDate() {
     public final void openForRead(OpenRequest openRequest) {
         open(openRequest, SessionAuthorizationType.READ);
     }
-
+    
+    public final void openForReadWithRedirectUri(OpenRequest openRequest,String redirectUri) {
+    	setRedirectUri(redirectUri);
+        open(openRequest, SessionAuthorizationType.READ);
+    }
     /**
      * <p>
      * Logs a user in to Facebook.
@@ -888,6 +893,19 @@ public static Session openActiveSessionWithAccessToken(Context context, AccessTo
         return session;
     }
 
+    public static Session openActiveSessionWithRedirectUri(Activity activity, String redirectUri, boolean allowLoginUI,
+            StatusCallback callback) {
+    	OpenRequest openRequest=new OpenRequest(activity).setCallback(callback);
+        Session session = new Builder(activity).build();
+        session.setRedirectUri(redirectUri);
+        if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowLoginUI) {
+            setActiveSession(session);
+            session.openForRead(openRequest);
+            return session;
+        }
+        return null;
+    }    
+    
     private static Session openActiveSession(Context context, boolean allowLoginUI, OpenRequest openRequest) {
         Session session = new Builder(context).build();
         if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowLoginUI) {
diff --git a/funtown/src/tw/com/funtown/Session.java b/funtown/src/tw/com/funtown/Session.java
index aa3cb3d7e..aefd789b5 100644
--- a/funtown/src/tw/com/funtown/Session.java
+++ b/funtown/src/tw/com/funtown/Session.java
@@ -31,6 +31,8 @@
 import java.lang.ref.WeakReference;
 import java.util.*;
 
+
+
 /**
  * <p>
  * Session is used to authenticate a user and manage the user's session with
@@ -407,7 +409,10 @@ public final Date getExpirationDate() {
     public final void openForRead(OpenRequest openRequest) {
         open(openRequest, SessionAuthorizationType.READ);
     }
-
+    public final void openForReadWithRedirectUri(OpenRequest openRequest,String redirectUri) {
+    	setRedirectUri(redirectUri);
+        open(openRequest, SessionAuthorizationType.READ);
+    }
     /**
      * <p>
      * Logs a user in to Facebook.
@@ -881,7 +886,20 @@ public static Session openActiveSessionWithAccessToken(Context context, AccessTo
 
         return session;
     }
-
+    
+    public static Session openActiveSessionWithRedirectUri(Activity activity, String redirectUri, boolean allowLoginUI,
+            StatusCallback callback) {
+    	OpenRequest openRequest=new OpenRequest(activity).setCallback(callback);
+        Session session = new Builder(activity).build();
+        session.setRedirectUri(redirectUri);
+        if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowLoginUI) {
+            setActiveSession(session);
+            session.openForRead(openRequest);
+            return session;
+        }
+        return null;
+    } 
+    
     private static Session openActiveSession(Context context, boolean allowLoginUI, OpenRequest openRequest) {
         Session session = new Builder(context).build();
         if (SessionState.CREATED_TOKEN_LOADED.equals(session.getState()) || allowLoginUI) {
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
index c2b50daf7..3205bc8d8 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingActivityActivity.java
@@ -95,7 +95,7 @@ protected void onSaveInstanceState(Bundle outState) {
     private void updateView() {
         Session session = Session.getActiveSession();
         if (session.isOpened()) {
-            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key"));        	
+            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key") + "&uuid=" + session.getValues().get("uuid"));        	
 //            textInstructionsOrLink.setText(URL_PREFIX_FRIENDS + session.getAccessToken());
             buttonLoginLogout.setText(R.string.logout);
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
@@ -154,17 +154,17 @@ public void onUUIDGenerated(String UUID) {
 	            Uri redirectUri = Uri.parse(facebookBindingRedirectUri);
 	            Bundle parameters= new Bundle();
 	            
-	            parameters.putString("provider_id", "facebook");
+	            parameters.putString("provider", "facebook");
 	            parameters.putString("client_id", facebookApplicationId);		            
 	            parameters.putString("uuid", UUID);
 	            
 	            Uri redirectUriWithUUID=Utility.buildUri(redirectUri.getAuthority(), redirectUri.getPath(), parameters);
-	            session.setRedirectUri(redirectUriWithUUID.toString());
+
 	            
 	            if (!session.isOpened() && !session.isClosed()) {
-	                session.openForRead(new Session.OpenRequest(ac).setCallback(statusCallback));
+	                session.openForReadWithRedirectUri(new Session.OpenRequest(ac).setCallback(statusCallback), redirectUriWithUUID.toString());
 	            } else {
-	                Session.openActiveSession(ac, true, statusCallback);
+	                Session.openActiveSessionWithRedirectUri(ac,  redirectUriWithUUID.toString() , true, statusCallback);
 	            }	            
 			}     		
     	});
diff --git a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
index e22e18d74..329f8e288 100644
--- a/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
+++ b/samples/SessionLoginSample/src/com/facebook/samples/sessionlogin/LoginUsingFuntownActivityActivity.java
@@ -18,6 +18,8 @@
 
 import android.app.Activity;
 import android.content.Intent;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.net.Uri;
 import android.os.Bundle;
 import android.view.View;
@@ -96,7 +98,7 @@ protected void onSaveInstanceState(Bundle outState) {
     private void updateView() {
         Session session = Session.getActiveSession();
         if (session.isOpened()) {
-        	textInstructionsOrLink.setText(URL_PREFIX_PROFILE + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key"));
+        	textInstructionsOrLink.setText(URL_PREFIX_PROFILE + session.getAccessToken() + "&session_key=" + session.getValues().get("session_key")  + "&uuid=" + session.getValues().get("uuid"));
             buttonLoginLogout.setText(R.string.logout);
             buttonLoginLogout.setOnClickListener(new OnClickListener() {
                 public void onClick(View view) { onClickLogout(); }
@@ -148,16 +150,31 @@ private void onClickUUIDBinding() {
 			@Override
 			public void onUUIDGenerated(String UUID) {
 	            textInstructionsOrLink.setText("UUID : "+UUID);	
+	            String funtownBindingRedirectUri="";
+	            String funtownClientId="";
+	            try {
+	                ApplicationInfo ai = ac.getPackageManager().getApplicationInfo(
+	                        ac.getPackageName(), PackageManager.GET_META_DATA);
+	                if (ai.metaData != null) {
+	                	funtownBindingRedirectUri= ai.metaData.getString("tw.com.funtown.sdk.BindingRedirectUri");
+	                	funtownClientId= ai.metaData.getString("tw.com.funtown.sdk.ClientId");
+	                }
+	            } catch (PackageManager.NameNotFoundException e) {
+	            }	            
+	            
 	            Session session = Session.getActiveSession();
-	            Uri redirectUri = Uri.parse(Utility.getMetadataRedirctUri(ac));
+	            Uri redirectUri = Uri.parse(funtownBindingRedirectUri);
 	            Bundle parameters= new Bundle();
+	            
+	            parameters.putString("provider", "funtown");
+	            parameters.putString("client_id", funtownClientId);		            
 	            parameters.putString("uuid", UUID);
+	            
 	            Uri redirectUriWithUUID=Utility.buildUri(redirectUri.getAuthority(), redirectUri.getPath(), parameters);
-	            session.setRedirectUri(redirectUriWithUUID.toString());
 	            if (!session.isOpened() && !session.isClosed()) {
-	                session.openForRead(new Session.OpenRequest(ac).setCallback(statusCallback));
+	                session.openForReadWithRedirectUri(new Session.OpenRequest(ac).setCallback(statusCallback), redirectUriWithUUID.toString());
 	            } else {
-	                Session.openActiveSession(ac, true, statusCallback);
+	                Session.openActiveSessionWithRedirectUri(ac,  redirectUriWithUUID.toString() , true, statusCallback);
 	            }	            
 			}     		
     	});
