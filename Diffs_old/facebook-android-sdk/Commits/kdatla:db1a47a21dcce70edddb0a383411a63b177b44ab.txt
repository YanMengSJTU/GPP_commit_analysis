diff --git a/examples/Hackbook/res/layout/token_refresh.xml b/examples/Hackbook/res/layout/token_refresh.xml
new file mode 100644
index 000000000..6c15e5739
--- /dev/null
+++ b/examples/Hackbook/res/layout/token_refresh.xml
@@ -0,0 +1,72 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+	android:orientation="vertical" 
+	android:layout_width="fill_parent"
+	android:layout_height="fill_parent" 
+	android:background="@color/black">
+
+	<TextView 
+		android:id="@+id/tokenLabel"
+		android:text="@string/access_token_label"
+        android:textColor="@color/white"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingTop="3dp"
+        android:paddingLeft="3dp" />
+
+	<EditText
+	    android:id="@+id/tokenEdit"
+	    android:layout_width="match_parent"
+	    android:layout_height="wrap_content"
+	    android:editable="false" />
+	
+    <TextView 
+        android:id="@+id/tokenExpiresLabel"
+        android:text="@string/access_token_expires_label"
+        android:textColor="@color/white"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingTop="3dp"
+        android:paddingLeft="3dp" />
+
+    <EditText
+        android:id="@+id/tokenExpiresEdit"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:editable="false" />
+
+	<View
+         android:layout_width="fill_parent"
+         android:layout_height="2dip"
+         android:background="@color/grey" />
+	<LinearLayout
+    	android:layout_width="wrap_content"
+		android:layout_height="wrap_content"> 
+		<Button 
+			android:id="@+id/refresh_button"
+			android:text="@string/refresh_button"
+	        android:layout_width="wrap_content"
+	        android:layout_height="wrap_content" 
+	        android:padding="10dp" />
+	</LinearLayout>
+	<View
+         android:layout_width="fill_parent"
+         android:layout_height="2dip"
+         android:background="@color/grey" />
+   	<TextView 
+   		android:id="@+id/tip_label"
+   		android:text="@string/tip_label"
+        android:textColor="@color/white"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingTop="3dp"
+        android:paddingLeft="3dp" />
+	<TextView 
+		android:id="@+id/usefulTip"
+        android:text="@string/refresh_token_tip"
+        android:textColor="@color/white"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:paddingTop="5dp"
+        android:paddingLeft="3dp" />
+</LinearLayout>
\ No newline at end of file
diff --git a/examples/Hackbook/res/values/strings.xml b/examples/Hackbook/res/values/strings.xml
index 3f1436f38..8bfc1ac0f 100644
--- a/examples/Hackbook/res/values/strings.xml
+++ b/examples/Hackbook/res/values/strings.xml
@@ -19,6 +19,7 @@
 	<string name="target_url">Target URL:</string>
 	<string name="exception">Exception: </string>
 	<string name="tip_label">Tip:</string>
+	<string name="error">Error</string>
 	<string name="facebook_error">Facebook Error: </string>
 	<string name="api_response">Api Response:</string>
 	<string name="view_source">View Source</string>
@@ -77,4 +78,11 @@
 	<string name="enable_gps_title">Enable GPS</string>
 	<string name="enable_gps">Please enable GPS to get nearby places and check-in</string>
 	<string name="gps_settings">GPS Settings</string>
+	<string name="refresh_token_title">Refresh Token</string>    
+	<string name="refresh_button">Refresh</string>
+	<string name="refresh_button_pending">Refreshingâ€¦</string>
+	<string name="refresh_token_tip">In most cases the access token should be refreshed silently when the application is running (for example see Hackbook onResume method).</string>
+	<string name="refresh_token_binding_error">Binding to the Facebook Android Application failed (is it installed?).</string>
+	<string name="access_token_label">Current access token:</string>
+	<string name="access_token_expires_label">Token expires at:</string>
 </resources>
diff --git a/examples/Hackbook/src/com/facebook/android/Hackbook.java b/examples/Hackbook/src/com/facebook/android/Hackbook.java
index 31d73817d..63cb8fe66 100644
--- a/examples/Hackbook/src/com/facebook/android/Hackbook.java
+++ b/examples/Hackbook/src/com/facebook/android/Hackbook.java
@@ -62,11 +62,14 @@
 
 	final int AUTHORIZE_ACTIVITY_RESULT_CODE = 0;
 	final int PICK_EXISTING_PHOTO_RESULT_CODE = 1;
+	
+	// If access token will expire in less than 10 days we will try to refresh it
+	final long REFRESH_TOKEN_BARRIER = 10L * 24L * 60L * 60L * 1000L;
 
     private String graph_or_fql;
     
     private ListView list;
-    String[] main_items = {"Update Status", "App Requests", "Get Friends", "Upload Photo", "Place Check-in", "Run FQL Query", "Graph API Explorer"};
+    String[] main_items = {"Update Status", "App Requests", "Get Friends", "Upload Photo", "Place Check-in", "Run FQL Query", "Graph API Explorer", "Token Refresh"};
     String[] permissions = {"offline_access", "publish_stream", "user_photos", "publish_checkins", "photo_upload"};
     
     /** Called when the activity is first created. */
@@ -116,9 +119,21 @@ public void onCreate(Bundle savedInstanceState) {
     @Override
     public void onResume() {
     	super.onResume();
-    	if(Utility.mFacebook != null && !Utility.mFacebook.isSessionValid()) {
-	    	mText.setText("You are logged out! ");
-	        mUserPic.setImageBitmap(null);
+    	if(Utility.mFacebook != null) {
+    	    if (!Utility.mFacebook.isSessionValid()) {
+    	        mText.setText("You are logged out! ");
+    	        mUserPic.setImageBitmap(null);
+    	    } else {
+    	        long tokenValidPeriod = Utility.mFacebook.getAccessExpires() -
+    	                System.currentTimeMillis();
+    	        // To avoid making unnecessary calls we refresh only the old tokens.
+    	        if (Utility.mFacebook.getAccessExpires() != 0L &&
+    	                tokenValidPeriod < REFRESH_TOKEN_BARRIER) {
+    	            // Try to refresh the access token - if the operation succeeds the life of
+    	            // the token will be extended automatically. See also the TokenRefreshDialog.
+    	            Utility.mFacebook.refreshToken(this, null);
+    	        }
+    	    }
     	}
     }
 
@@ -344,6 +359,15 @@ public void onClick(DialogInterface dialog, int which) {
     			startActivity(myIntent);
     			break;
     		}
+    		
+    		case 7: {
+                if(!Utility.mFacebook.isSessionValid()) {
+                    Util.showAlert(this, "Warning", "You must first log in.");
+                }
+                else {
+                    new TokenRefreshDialog(Hackbook.this).show();
+                }
+    		}
     	}
     }
     
@@ -472,7 +496,7 @@ public void run() {
         }
 
     }
-    
+        
     /*
      * The Callback for notifying the application when authorization
      *  succeeds or fails.
diff --git a/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java b/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
new file mode 100644
index 000000000..d5e259605
--- /dev/null
+++ b/examples/Hackbook/src/com/facebook/android/TokenRefreshDialog.java
@@ -0,0 +1,99 @@
+package com.facebook.android;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.text.method.LinkMovementMethod;
+import android.view.View;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.TextView;
+
+public class TokenRefreshDialog extends Dialog {
+
+    private EditText tokenEdit, tokenExpiresEdit;
+    private TextView mUsefulTip;
+    private Button mRefreshButton;
+    private Activity activity;
+    
+    public TokenRefreshDialog(Activity activity) {
+        super(activity);
+        this.activity = activity;
+        setTitle(R.string.refresh_token_title);
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+               
+        setContentView(R.layout.token_refresh);
+
+        
+        tokenEdit = (EditText) findViewById(R.id.tokenEdit);
+        tokenEdit.setText(Utility.mFacebook.getAccessToken());
+        
+        tokenExpiresEdit = (EditText) findViewById(R.id.tokenExpiresEdit);
+        setExpiresAt(Utility.mFacebook.getAccessExpires());
+        
+        mUsefulTip = (TextView) findViewById(R.id.usefulTip);
+        mUsefulTip.setMovementMethod(LinkMovementMethod.getInstance());
+        mRefreshButton = (Button) findViewById(R.id.refresh_button);
+        
+        mRefreshButton.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+               changeButtonState(false);
+               RefreshTokenListener listener = new RefreshTokenListener();
+               if (!Utility.mFacebook.refreshToken(activity, listener)) {
+                   listener.onError(new Error(
+                           activity.getString(R.string.refresh_token_binding_error)));
+               }
+            }
+        });
+    }
+    
+    private class RefreshTokenListener implements Facebook.ServiceListener {
+        
+        @Override
+        public void onFacebookError(FacebookError e) {
+            changeButtonState(true);
+            String title = String.format(
+                    activity.getString(R.string.facebook_error)+"%d", e.getErrorCode());
+            Util.showAlert(activity, title, e.getMessage());
+        }
+        
+        @Override
+        public void onError(Error e) {
+            changeButtonState(true);
+            Util.showAlert(activity, activity.getString(R.string.error), e.getMessage());
+        }
+        
+        @Override
+        public void onComplete(Bundle values) {
+            changeButtonState(true);
+                      
+            // The access_token and expires_at values are automatically updated, so
+            // they can be obtained by using:
+            //  - Facebook.getAccessToken()
+            //  - Facebook.getAccessExpires()
+            // methods, but we can also get them from the 'values' bundle.
+            tokenEdit.setText(values.getString(Facebook.TOKEN));
+            setExpiresAt(values.getLong(Facebook.EXPIRES));
+        }
+    }
+    
+    private void changeButtonState(boolean enabled) {
+        mRefreshButton.setEnabled(enabled); 
+        mRefreshButton.setText(
+                enabled ? R.string.refresh_button : R.string.refresh_button_pending);
+    }
+    
+    private void setExpiresAt(long time) {
+        DateFormat dateFormat = SimpleDateFormat.getDateTimeInstance(
+                SimpleDateFormat.SHORT, SimpleDateFormat.SHORT);
+        tokenExpiresEdit.setText(dateFormat.format(new Date(time)));
+    }
+}
diff --git a/facebook/src/com/facebook/android/Facebook.java b/facebook/src/com/facebook/android/Facebook.java
index cbba479dc..b39ef0478 100644
--- a/facebook/src/com/facebook/android/Facebook.java
+++ b/facebook/src/com/facebook/android/Facebook.java
@@ -22,15 +22,23 @@
 
 import android.Manifest;
 import android.app.Activity;
+import android.app.Service;
 import android.content.ActivityNotFoundException;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.ServiceConnection;
 import android.content.pm.PackageInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.content.pm.ResolveInfo;
 import android.content.pm.Signature;
 import android.os.Bundle;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.Message;
+import android.os.Messenger;
+import android.os.RemoteException;
 import android.text.TextUtils;
 import android.util.Log;
 import android.webkit.CookieSyncManager;
@@ -93,7 +101,7 @@ public Facebook(String appId) {
         }
         mAppId = appId;
     }
-
+    
     /**
      * Default authorize method. Grants only basic permissions.
      *
@@ -288,7 +296,7 @@ private boolean validateAppSignatureForIntent(Activity activity,
      *            A list of permissions required for this application. If you do
      *            not require any permissions, pass an empty String array.
      */
-	private void startDialogAuth(Activity activity, String[] permissions) {
+    private void startDialogAuth(Activity activity, String[] permissions) {
         Bundle params = new Bundle();
         if (permissions.length > 0) {
             params.putString("scope", TextUtils.join(",", permissions));
@@ -370,7 +378,7 @@ public void authorizeCallback(int requestCode, int resultCode, Intent data) {
                         if (description != null) {
                             error = error + ":" + description;
                         }
-                    	Log.d("Facebook-authorize", "Login failed: " + error);
+                        Log.d("Facebook-authorize", "Login failed: " + error);
                         mAuthDialogListener.onFacebookError(
                           new FacebookError(error));
                     }
@@ -412,6 +420,148 @@ public void authorizeCallback(int requestCode, int resultCode, Intent data) {
             }
         }
     }
+    
+    /**
+     * Refresh OAuth access token method.
+     *
+     * Binds to Facebook for Android stand-alone application application to 
+     * refresh the access token.
+     *
+     * This method tries to connect to the Facebook App which will handle the
+     * authentication flow, and return a new OAuth access token. This method
+     * will automatically replace the old token with a new one.
+     *
+     * Note that this method is asynchronous and the callback will be invoked in
+     * the original calling thread (not in a background thread).
+     *
+     * Also note that requests may be made to the API without calling authorize
+     * first, in which case only public information is returned.
+     * 
+     * @param activity
+     *            The Android Activity that will be used to bind to the
+     *            Facebook RefreshToken Service
+     * @param serviceListener
+     *            Callback interface for notifying the calling application when
+     *            the refresh request has completed or failed (can be null). In
+     *            case of a success a new token can be found inside the result
+     *            Bundle under Facebook.ACCESS_TOKEN key.
+     * @return true if the binding to the RefreshToken Service was created
+     */
+    public boolean refreshToken(final Activity activity, final ServiceListener serviceListener) {
+        Intent intent = new Intent();
+
+        intent.setClassName("com.facebook.katana",
+                "com.facebook.katana.platform.TokenRefreshService");
+         
+        // Verify that the application whose package name is
+        // com.facebook.katana
+        // has the expected FB app signature.
+        if (!validateAppSignatureForIntent(activity, intent)) {
+            return false;
+        }
+        
+        mAuthActivity = activity;
+        
+        return activity.bindService(intent,
+                new TokenRefreshServiceConnection(serviceListener),
+                Service.BIND_AUTO_CREATE);
+    }
+    
+    /**
+     * Handles connection to the token refresh service.
+     * 
+     */
+    private class TokenRefreshServiceConnection implements ServiceConnection {
+        
+        final Messenger messageReceiver = new Messenger(new Handler() {
+            @Override
+            public void handleMessage(Message msg) {
+                String token = msg.getData().getString(TOKEN);
+                long expiresAt = msg.getData().getLong(EXPIRES) * 1000;
+                
+                // To avoid confusion we should return the expiration time in
+                // the same format as the getAccessExpires() function - that
+                // is in milliseconds.
+                Bundle resBundle = (Bundle)msg.getData().clone();
+                resBundle.putLong(EXPIRES, expiresAt);
+
+                if (token != null) {
+                    mAccessToken = token;
+                    mAccessExpires = expiresAt;
+                    serviceListener.onComplete(resBundle);
+                } else {
+                    String error = msg.getData().getString("error");
+                    int errorCode = msg.getData().getInt("error_code", -1);
+                    
+                    if (errorCode != -1) {
+                        serviceListener.onFacebookError(
+                                new FacebookError(error, null, errorCode));
+                    } else {
+                        serviceListener.onError(new Error(
+                                error != null ? error : "Unknown service error"));
+                    }
+                }
+                
+                // The refreshToken function should be called rarely,
+                // so there is no point in keeping the binding open.
+                mAuthActivity.unbindService(
+                        TokenRefreshServiceConnection.this);
+            }
+        });
+        
+        final ServiceListener serviceListener;
+        
+        Messenger messageSender = null;
+        
+        public TokenRefreshServiceConnection(ServiceListener serviceListener) {
+            if (serviceListener == null) {
+                // When user don't want to be notified about the results
+                // of this operation we create an empty callback just to
+                // avoid NullPointerExceptions.
+                serviceListener = new ServiceListener() {
+                    @Override
+                    public void onFacebookError(FacebookError e) {}
+                    @Override
+                    public void onError(Error e) {}
+                    @Override
+                    public void onComplete(Bundle values) {}
+                };
+            }
+            this.serviceListener = serviceListener;
+        }
+        
+        @Override
+        public void onServiceConnected(ComponentName className,
+                IBinder service) {
+            messageSender = new Messenger(service);
+            refreshToken();
+        }
+
+        @Override
+        public void onServiceDisconnected(ComponentName arg) {
+            serviceListener.onError(
+                    new Error("Service disconnected"));
+            // We returned an error so there's no point in
+            // keeping the binding open.
+            mAuthActivity.unbindService(TokenRefreshServiceConnection.this);
+        }
+        
+        private void refreshToken() {
+            Bundle requestData = new Bundle();
+            requestData.putString(TOKEN, mAccessToken);
+            
+            Message request = Message.obtain();
+            request.setData(requestData);
+            request.replyTo = messageReceiver;
+            
+            try {
+                messageSender.send(request);
+            } catch (RemoteException e) {
+                serviceListener.onError(
+                        new Error("Service connection error"));
+            }
+        }       
+    };
 
     /**
      * Invalidate the current user session by removing the access token in
@@ -686,7 +836,7 @@ public void setAccessExpires(long time) {
     public void setAccessExpiresIn(String expiresIn) {
         if (expiresIn != null && !expiresIn.equals("0")) {
             setAccessExpires(System.currentTimeMillis()
-                    + Integer.parseInt(expiresIn) * 1000);
+                    + Integer.parseInt(expiresIn) * 1000L);
         }
     }
 
@@ -739,7 +889,37 @@ public void setAppId(String appId) {
         public void onCancel();
 
     }
+    
+    /**
+     * Callback interface for service requests.
+     *
+     */
+    public static interface ServiceListener {
+
+        /**
+         * Called when a service request completes.
+         *
+         * @param values
+         *            Key-value string pairs extracted from the response.
+         */
+        public void onComplete(Bundle values);
+
+        /**
+         * Called when a Facebook server responds to the 
+         * request with an error.
+         *
+         */
+        public void onFacebookError(FacebookError e);
+        
+        /**
+         * Called when a Facebook Service responds to the 
+         * request with an error.
+         *
+         */
+        public void onError(Error e);
 
+    }
+    
     public static final String FB_APP_SIGNATURE =
         "30820268308201d102044a9c4610300d06092a864886f70d0101040500307a310"
         + "b3009060355040613025553310b30090603550408130243413112301006035504"
