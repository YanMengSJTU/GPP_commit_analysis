diff --git a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
index e3bf4d6c7..22fb6f6f0 100644
--- a/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
+++ b/facebook/src/androidTest/java/com/facebook/appevents/AppEventsLoggerTests.java
@@ -26,9 +26,12 @@
 import android.support.v4.content.LocalBroadcastManager;
 
 import com.facebook.AccessToken;
+import com.facebook.AccessTokenSource;
+import com.facebook.FacebookSdk;
 import com.facebook.FacebookTestCase;
 import com.facebook.WaitForBroadcastReceiver;
 import com.facebook.appevents.AppEventsLogger;
+import com.facebook.internal.FetchedAppSettingsManager;
 
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -49,7 +52,8 @@ public void testSimpleCall() throws InterruptedException {
         final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
         waitForBroadcastReceiver.incrementExpectCount();
 
-        final LocalBroadcastManager broadcastManager = LocalBroadcastManager.getInstance(getActivity());
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
 
         try {
             // Need to get notifications on another thread so we can wait for them.
@@ -82,4 +86,52 @@ public void run() {
             broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
         }
     }
+
+    public void testExplicitCallWithNoAppSettings() throws InterruptedException {
+        AppEventsLogger.setFlushBehavior(AppEventsLogger.FlushBehavior.EXPLICIT_ONLY);
+
+        AccessToken accessToken1 = getFakeAccessToken();
+        FacebookSdk.setApplicationId("234");
+
+        AppEventsLogger logger1 = AppEventsLogger.newLogger(getActivity(), accessToken1);
+
+        final WaitForBroadcastReceiver waitForBroadcastReceiver = new WaitForBroadcastReceiver();
+        waitForBroadcastReceiver.incrementExpectCount();
+
+        final LocalBroadcastManager broadcastManager =
+                LocalBroadcastManager.getInstance(getActivity());
+
+        try {
+            // Need to get notifications on another thread so we can wait for them.
+            runOnBlockerThread(new Runnable() {
+                @Override
+                public void run() {
+                    broadcastManager.registerReceiver(waitForBroadcastReceiver,
+                            new IntentFilter(AppEventsLogger.ACTION_APP_EVENTS_FLUSHED));
+                }
+            }, true);
+
+            logger1.logEvent("an_event");
+
+            logger1.flush();
+
+            waitForBroadcastReceiver.waitForExpectedCalls();
+
+            closeBlockerAndAssertSuccess();
+        } finally {
+            broadcastManager.unregisterReceiver(waitForBroadcastReceiver);
+        }
+    }
+
+    private AccessToken getFakeAccessToken() {
+        return new AccessToken(
+                "foobar",
+                "234",
+                "567",
+                null,
+                null,
+                AccessTokenSource.TEST_USER,
+                null,
+                null);
+    }
 }
diff --git a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
index 6e0d5c43c..72639ea02 100644
--- a/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
+++ b/facebook/src/main/java/com/facebook/FacebookSdkVersion.java
@@ -21,5 +21,5 @@
 package com.facebook;
 
 final class FacebookSdkVersion {
-    public static final String BUILD = "4.17.0";
+    public static final String BUILD = "4.18.0";
 }
diff --git a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
index 25656822b..616270d99 100644
--- a/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
+++ b/facebook/src/main/java/com/facebook/appevents/AppEventQueue.java
@@ -217,14 +217,16 @@ private static GraphRequest buildRequestForSession(
 
         postRequest.setParameters(requestParameters);
 
-        if (fetchedAppSettings == null) {
-            return null;
+        boolean supportsImplicitLogging = false;
+
+        if (fetchedAppSettings != null) {
+            supportsImplicitLogging = fetchedAppSettings.supportsImplicitLogging();
         }
 
         int numEvents = appEvents.populateRequest(
                 postRequest,
                 FacebookSdk.getApplicationContext(),
-                fetchedAppSettings.supportsImplicitLogging(),
+                supportsImplicitLogging,
                 limitEventUsage);
 
         if (numEvents == 0) {
diff --git a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
index 4dd7cc254..1d703b632 100644
--- a/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
+++ b/facebook/src/main/java/com/facebook/appevents/FacebookTimeSpentData.java
@@ -233,6 +233,9 @@ void onResume(AppEventsLogger logger, long eventTime, String sourceApplicationIn
                     sourceApplicationInfo);
             logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
             lastActivateEventLoggedTime = now;
+            if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+              logger.flush();
+            }
         }
 
         // If this is an application that's not calling onSuspend yet, log and return. We can't
diff --git a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
index fb9d45774..093519f17 100644
--- a/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
+++ b/facebook/src/main/java/com/facebook/appevents/internal/SessionLogger.java
@@ -26,6 +26,7 @@
 
 import com.facebook.LoggingBehavior;
 import com.facebook.appevents.AppEventsConstants;
+import com.facebook.appevents.AppEventsLogger;
 import com.facebook.internal.Logger;
 
 import java.util.Locale;
@@ -70,11 +71,14 @@ public static void logActivateApp(
         eventParams.putString(
                 AppEventsConstants.EVENT_PARAM_SOURCE_APPLICATION,
                 sourAppInfoStr);
-        new InternalAppEventsLogger(
+        AppEventsLogger logger = new InternalAppEventsLogger(
                 activityName,
                 appId,
-                null)
-                .logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+                null);
+        logger.logEvent(AppEventsConstants.EVENT_NAME_ACTIVATED_APP, eventParams);
+        if (logger.getFlushBehavior() != AppEventsLogger.FlushBehavior.EXPLICIT_ONLY) {
+          logger.flush();
+        }
     }
 
     public static void logDeactivateApp(
