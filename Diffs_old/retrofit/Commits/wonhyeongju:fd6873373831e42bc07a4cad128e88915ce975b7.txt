diff --git a/retrofit-converters/moshi/pom.xml b/retrofit-converters/moshi/pom.xml
index 76cd1aaed..259d23b02 100644
--- a/retrofit-converters/moshi/pom.xml
+++ b/retrofit-converters/moshi/pom.xml
@@ -30,20 +30,5 @@
       <version>1.9.0</version>
     </dependency>
 
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.okhttp3</groupId>
-      <artifactId>mockwebserver</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
   </dependencies>
 </project>
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 26706453a..089807a9c 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -22,6 +22,7 @@
 import java.lang.reflect.Type;
 import java.net.URI;
 import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Matcher;
@@ -52,6 +53,7 @@
 import retrofit2.http.PartMap;
 import retrofit2.http.Path;
 import retrofit2.http.Query;
+import retrofit2.http.QueryList;
 import retrofit2.http.QueryMap;
 import retrofit2.http.Url;
 
@@ -682,6 +684,19 @@ private Headers parseHeaders(String[] headers) {
         }
         gotBody = true;
         return new ParameterHandler.Body<>(converter);
+      } else if (annotation instanceof QueryList) {
+    	  Class<?> rawParameterType = Utils.getRawType(type);
+          if (!List.class.isAssignableFrom(rawParameterType)) {
+            throw parameterError(p, "@QueryList parameter type must be List.");
+          }
+          Type listType = Utils.getSupertype(type, rawParameterType, List.class);
+          if (!(listType instanceof ParameterizedType)) {
+            throw parameterError(p, "List must include generic types (e.g., List<KeyValue>)");
+          }
+          ParameterizedType parameterizedType = (ParameterizedType) listType;
+          Type valueType = Utils.getParameterUpperBound(1, parameterizedType);
+          Converter<?, String> valueConverter = retrofit.stringConverter(valueType, annotations);
+          return new ParameterHandler.QueryList<>(valueConverter, ((QueryList) annotation).encoded());
       }
 
       return null; // Not a Retrofit annotation.
