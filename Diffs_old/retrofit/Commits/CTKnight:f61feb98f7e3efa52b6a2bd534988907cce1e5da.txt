diff --git a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
index dcf67b4fe..827566e79 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
@@ -1,8 +1,12 @@
 package retrofit2.processors
 
 import com.google.auto.service.AutoService
-import retrofit2.Retrofit
-import javax.annotation.processing.*
+import javax.annotation.processing.AbstractProcessor
+import javax.annotation.processing.Filer
+import javax.annotation.processing.Messager
+import javax.annotation.processing.ProcessingEnvironment
+import javax.annotation.processing.Processor
+import javax.annotation.processing.RoundEnvironment
 import javax.lang.model.SourceVersion
 import javax.lang.model.element.Element
 import javax.lang.model.element.ElementKind
@@ -13,38 +17,39 @@ import javax.tools.Diagnostic
 
 @AutoService(Processor::class)
 class StaticCheckProcessor : AbstractProcessor() {
-    private lateinit var typeUtils: Types
-    private lateinit var elementUtils: Elements
-    private lateinit var filer: Filer
-    private lateinit var messager: Messager
-
-    @Synchronized
-    override fun init(env: ProcessingEnvironment) {
-        super.init(env)
-        typeUtils = env.typeUtils
-        elementUtils = env.elementUtils
-        filer = env.filer
-        messager = env.messager
+  private lateinit var typeUtils: Types
+  private lateinit var elementUtils: Elements
+  private lateinit var filer: Filer
+  private lateinit var messager: Messager
+
+  @Synchronized
+  override fun init(env: ProcessingEnvironment) {
+    super.init(env)
+    typeUtils = env.typeUtils
+    elementUtils = env.elementUtils
+    filer = env.filer
+    messager = env.messager
+  }
+
+  override fun process(annoations: Set<TypeElement>, env: RoundEnvironment): Boolean {
+    env.rootElements.forEach {
+      if (it.kind != ElementKind.INTERFACE) {
+        warning(it, "@RetrofitService is not annotated on an Interface, skipped")
+      }
     }
+    return true
+  }
 
-    override fun process(annoations: Set<TypeElement>, env: RoundEnvironment): Boolean {
-        env.rootElements.forEach {
-            if (it.kind != ElementKind.INTERFACE) {
-                warning(it,"@RetrofitService is not annotated on an Interface, skipped")
-            }
-        }
-        return true
-    }
-
-    override fun getSupportedAnnotationTypes(): Set<String> = setOf(RetrofitService::class.java.canonicalName)
+  override fun getSupportedAnnotationTypes(): Set<String> = setOf(
+      RetrofitService::class.java.canonicalName)
 
-    override fun getSupportedSourceVersion(): SourceVersion = SourceVersion.latestSupported()
+  override fun getSupportedSourceVersion(): SourceVersion = SourceVersion.latestSupported()
 
-    private fun error(e: Element, msg: String) {
-        messager.printMessage(Diagnostic.Kind.ERROR, msg, e)
-    }
+  private fun error(e: Element, msg: String) {
+    messager.printMessage(Diagnostic.Kind.ERROR, msg, e)
+  }
 
-    private fun warning(e: Element, msg: String) {
-        messager.printMessage(Diagnostic.Kind.WARNING, msg, e)
-    }
+  private fun warning(e: Element, msg: String) {
+    messager.printMessage(Diagnostic.Kind.WARNING, msg, e)
+  }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
index b39ea49f1..6728b58a6 100644
--- a/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
@@ -4,6 +4,6 @@
 
 @RetrofitService
 public interface SampleService {
-    @HEAD("/")
-    public void sampleMethod();
+  @HEAD("/")
+  void sampleMethod();
 }
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
index f860a5309..514cb1e88 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -5,54 +5,54 @@ import com.google.testing.compile.Compiler
 import com.google.testing.compile.Compiler.javac
 import com.google.testing.compile.JavaFileObjects
 import org.junit.Test
-import java.util.*
+import java.util.Locale
 import kotlin.test.assertEquals
 import kotlin.test.assertTrue
 
 class BaseTest {
 
-    private fun compiler(): Compiler = javac().withProcessors(StaticCheckProcessor())
+  private fun compiler(): Compiler = javac().withProcessors(StaticCheckProcessor())
 
-    @Test
-    fun sampleTest() {
-        val compilation =
-                compiler()
-                        .compile(JavaFileObjects.forSourceLines(
-                                "SampleService",
-                                """
-                    package retrofit2.processors;
+  @Test
+  fun sampleTest() {
+    val compilation =
+        compiler()
+            .compile(JavaFileObjects.forSourceLines(
+                "SampleService",
+                """
+                package retrofit2.processors;
 
-                    import retrofit2.http.HEAD;
+                import retrofit2.http.HEAD;
 
-                    @RetrofitService
-                    public interface SampleService {
-                        @HEAD("/")
-                        public void sampleMethod();
-                    }
+                @RetrofitService
+                public interface SampleService {
+                    @HEAD("/")
+                    public void sampleMethod();
+                }
                 """.trimIndent()))
 
-        assertEquals(compilation.status(), Compilation.Status.SUCCESS)
-        assertEquals(compilation.warnings().size, 0)
+    assertEquals(compilation.status(), Compilation.Status.SUCCESS)
+    assertEquals(compilation.warnings().size, 0)
 
-    }
+  }
 
-    @Test
-    fun interfaceOnlyTest() {
-        val compilation =  compiler()
-                .compile(JavaFileObjects.forSourceLines("SampleAbstractClass",
-                """
+  @Test
+  fun interfaceOnlyTest() {
+    val compilation = compiler()
+        .compile(JavaFileObjects.forSourceLines("SampleAbstractClass",
+            """
             package retrofit2.processors;
 
             @RetrofitService
             public abstract class SampleAbstractClass {
             }
-        """.trimIndent()
+            """.trimIndent()
         ))
 
-        assertEquals(compilation.status(), Compilation.Status.SUCCESS)
-        assertTrue(compilation.warnings().size == 1)
-        val onlyWarning = compilation.warnings().first()
-        assertTrue(onlyWarning.getMessage(Locale.getDefault())!!
-                .contentEquals("@RetrofitService is not annotated on an Interface, skipped"))
-    }
+    assertEquals(compilation.status(), Compilation.Status.SUCCESS)
+    assertTrue(compilation.warnings().size == 1)
+    val onlyWarning = compilation.warnings().first()
+    assertTrue(onlyWarning.getMessage(Locale.getDefault())!!
+        .contentEquals("@RetrofitService is not annotated on an Interface, skipped"))
+  }
 }
\ No newline at end of file
