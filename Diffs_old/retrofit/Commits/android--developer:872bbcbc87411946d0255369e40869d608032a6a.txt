diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
new file mode 100755
index 000000000..fd12a9838
--- /dev/null
+++ b/.buildscript/deploy_snapshot.sh
@@ -0,0 +1,26 @@
+#!/bin/bash
+#
+# Deploy a jar, source jar, and javadoc jar to Sonatype's snapshot repo.
+#
+# Adapted from https://coderwall.com/p/9b_lfq and
+# http://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
+
+SLUG="square/retrofit"
+JDK="oraclejdk8"
+BRANCH="master"
+
+set -e
+
+if [ "$TRAVIS_REPO_SLUG" != "$SLUG" ]; then
+  echo "Skipping snapshot deployment: wrong repository. Expected '$SLUG' but was '$TRAVIS_REPO_SLUG'."
+elif [ "$TRAVIS_JDK_VERSION" != "$JDK" ]; then
+  echo "Skipping snapshot deployment: wrong JDK. Expected '$JDK' but was '$TRAVIS_JDK_VERSION'."
+elif [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
+  echo "Skipping snapshot deployment: was pull request."
+elif [ "$TRAVIS_BRANCH" != "$BRANCH" ]; then
+  echo "Skipping snapshot deployment: wrong branch. Expected '$BRANCH' but was '$TRAVIS_BRANCH'."
+else
+  echo "Deploying snapshot..."
+  mvn clean source:jar javadoc:jar deploy --settings=".buildscript/settings.xml" -Dmaven.test.skip=true
+  echo "Snapshot deployed!"
+fi
diff --git a/.buildscript/settings.xml b/.buildscript/settings.xml
new file mode 100644
index 000000000..91f444b22
--- /dev/null
+++ b/.buildscript/settings.xml
@@ -0,0 +1,9 @@
+<settings>
+  <servers>
+    <server>
+      <id>sonatype-nexus-snapshots</id>
+      <username>${env.CI_DEPLOY_USERNAME}</username>
+      <password>${env.CI_DEPLOY_PASSWORD}</password>
+    </server>
+  </servers>
+</settings>
diff --git a/.travis.yml b/.travis.yml
index 3ba5e9a65..e6a844e22 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,8 +1,26 @@
 language: java
 
+jdk:
+  - oraclejdk7
+  - oraclejdk8
+
+after_success:
+  - .buildscript/deploy_snapshot.sh
+
+env:
+  global:
+    - secure: "M0bjPTMwinz0uXN6qjXcpyfvhz/YX9W7ty4RdV90jMU8ZJxSdGdKXRy1N0TsMO8ciOQ2fryE/FpiX+arrphnVvqUmGBh386lGvj1rhgrVqXNqlGE23cQpzHsQ0nNqTGIxnoE4dmJF3PjWoYG+B4WbFsSb3PB7sEjpLq7klqGeHk="
+    - secure: "iL5BdYAmMaEDRKxNx1d9Zxn0tfJhCzXBGUvn+p7QGeQDUSVCdCc8cXS4ePbRj0401pK20nK1OouIi0lLP+z0QpZY6RrKIEncGOZeSFPQbS/vnZ7niCYJQdXCZ/GOlYUkAW2AsQl5bzzHYbHKX/TVgTuO3iFlbyeoZZuIjD3VaiM="
+
 branches:
   except:
     - gh-pages
 
 notifications:
   email: false
+
+sudo: false
+
+cache:
+  directories:
+    - $HOME/.m2
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 397bb5cc3..80c420272 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,17 @@
 Change Log
 ==========
 
+Version 1.9.0 *(2015-01-07)*
+----------------------------
+
+ * Update to OkHttp 2.x's native API. If you are using OkHttp you must use version 2.0 or newer (the latest
+   is 2.2 at time of writing) and you no longer need to use the `okhttp-urlconnection` shim.
+ * New: Allow disabling Simple XML Framework's strict parsing.
+ * New: `@Header` now accepts a `List` or array for a type.
+ * New: `@Field` and `@FieldMap` now have options for enabling or disabling URL encoding of names and values.
+ * Fix: Remove query parameters from thread name when running background requests for asynchronous use.
+
+
 Version 1.8.0 *(2014-11-18)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 72df2c13d..c101a0078 100644
--- a/README.md
+++ b/README.md
@@ -14,16 +14,20 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.squareup.retrofit</groupId>
   <artifactId>retrofit</artifactId>
-  <version>1.8.0</version>
+  <version>1.9.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.squareup.retrofit:retrofit:1.8.0'
+compile 'com.squareup.retrofit:retrofit:1.9.0'
 ```
+
+Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
+
 Retrofit requires at minimum Java 6 or Android 2.3.
 
 
+
 License
 =======
 
@@ -44,3 +48,4 @@ License
 
  [1]: http://square.github.io/retrofit/
  [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit&a=retrofit&v=LATEST
+ [snap]: https://oss.sonatype.org/content/repositories/snapshots/
diff --git a/pom.xml b/pom.xml
index fa28f7e26..94206b4f0 100644
--- a/pom.xml
+++ b/pom.xml
@@ -50,8 +50,8 @@
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
-    <gson.version>2.3</gson.version>
-    <okhttp.version>2.0.0</okhttp.version>
+    <gson.version>2.3.1</gson.version>
+    <okhttp.version>2.2.0</okhttp.version>
     <rxjava.version>1.0.0</rxjava.version>
     <appengine.version>1.9.12</appengine.version>
 
@@ -104,11 +104,6 @@
         <artifactId>okhttp</artifactId>
         <version>${okhttp.version}</version>
       </dependency>
-      <dependency>
-        <groupId>com.squareup.okhttp</groupId>
-        <artifactId>okhttp-urlconnection</artifactId>
-        <version>${okhttp.version}</version>
-      </dependency>
       <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 1efcfeedd..49ed29d14 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -29,11 +29,6 @@
       <artifactId>okhttp</artifactId>
       <optional>true</optional>
     </dependency>
-    <dependency>
-      <groupId>com.squareup.okhttp</groupId>
-      <artifactId>okhttp-urlconnection</artifactId>
-      <optional>true</optional>
-    </dependency>
     <dependency>
       <groupId>io.reactivex</groupId>
       <artifactId>rxjava</artifactId>
diff --git a/retrofit/src/main/java/retrofit/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
index eace21daf..c3fd01032 100644
--- a/retrofit/src/main/java/retrofit/Platform.java
+++ b/retrofit/src/main/java/retrofit/Platform.java
@@ -139,30 +139,12 @@ private static Platform findPlatform() {
 
   /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */
   private static boolean hasOkHttpOnClasspath() {
-    boolean okUrlFactory = false;
-    try {
-      Class.forName("com.squareup.okhttp.OkUrlFactory");
-      okUrlFactory = true;
-    } catch (ClassNotFoundException e) {
-    }
-
-    boolean okHttpClient = false;
     try {
       Class.forName("com.squareup.okhttp.OkHttpClient");
-      okHttpClient = true;
-    } catch (ClassNotFoundException e) {
-    }
-
-    if (okHttpClient != okUrlFactory) {
-      throw new RuntimeException(""
-          + "Retrofit detected an unsupported OkHttp on the classpath.\n"
-          + "To use OkHttp with this version of Retrofit, you'll need:\n"
-          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n"
-          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n"
-          + "Note that OkHttp 2.0.0+ is supported!");
+      return true;
+    } catch (ClassNotFoundException ignored) {
     }
-
-    return okHttpClient;
+    return false;
   }
 
   /**
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptor.java b/retrofit/src/main/java/retrofit/RequestInterceptor.java
index 5fa484b35..406014a99 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptor.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java
@@ -17,7 +17,7 @@
 
     /**
      * Add a path parameter replacement without first URI encoding. This works exactly like a
-     * {@link retrofit.http.EncodedPath &#64;EncodedPath}-annotated method argument.
+     * {@link retrofit.http.Path &#64;Path}-annotated method argument with {@code encode=false}.
      */
     void addEncodedPathParam(String name, String value);
 
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index a5486249e..7604f1725 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -301,7 +301,12 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
 
         if (!methodInfo.isSynchronous) {
           // If we are executing asynchronously then update the current thread with a useful name.
-          Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length()));
+          int substrEnd = url.indexOf("?", serverUrl.length());
+          if (substrEnd == -1) {
+            substrEnd = url.length();
+          }
+          Thread.currentThread().setName(THREAD_PREFIX
+              + url.substring(serverUrl.length(), substrEnd));
         }
 
         if (logLevel.log()) {
diff --git a/retrofit/src/main/java/retrofit/client/OkClient.java b/retrofit/src/main/java/retrofit/client/OkClient.java
index 09c7874f8..b2725ea97 100644
--- a/retrofit/src/main/java/retrofit/client/OkClient.java
+++ b/retrofit/src/main/java/retrofit/client/OkClient.java
@@ -15,15 +15,22 @@
  */
 package retrofit.client;
 
+import com.squareup.okhttp.Headers;
+import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.OkUrlFactory;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.ResponseBody;
 import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.net.URL;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.concurrent.TimeUnit;
+import okio.BufferedSink;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
 
 /** Retrofit client that uses OkHttp for communication. */
-public class OkClient extends UrlConnectionClient {
+public class OkClient implements Client {
   private static OkHttpClient generateDefaultOkHttp() {
     OkHttpClient client = new OkHttpClient();
     client.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
@@ -31,17 +38,88 @@ private static OkHttpClient generateDefaultOkHttp() {
     return client;
   }
 
-  private final OkUrlFactory okUrlFactory;
+  private final OkHttpClient client;
 
   public OkClient() {
     this(generateDefaultOkHttp());
   }
 
   public OkClient(OkHttpClient client) {
-    this.okUrlFactory = new OkUrlFactory(client);
+    if (client == null) throw new NullPointerException("client == null");
+    this.client = client;
   }
 
-  @Override protected HttpURLConnection openConnection(Request request) throws IOException {
-    return okUrlFactory.open(new URL(request.getUrl()));
+  @Override public Response execute(Request request) throws IOException {
+    return parseResponse(client.newCall(createRequest(request)).execute());
+  }
+
+  static com.squareup.okhttp.Request createRequest(Request request) {
+    com.squareup.okhttp.Request.Builder builder = new com.squareup.okhttp.Request.Builder()
+        .url(request.getUrl())
+        .method(request.getMethod(), createRequestBody(request.getBody()));
+
+    List<Header> headers = request.getHeaders();
+    for (int i = 0, size = headers.size(); i < size; i++) {
+      Header header = headers.get(i);
+      String value = header.getValue();
+      if (value == null) value = "";
+      builder.addHeader(header.getName(), value);
+    }
+
+    return builder.build();
+  }
+
+  static Response parseResponse(com.squareup.okhttp.Response response) {
+    return new Response(response.request().urlString(), response.code(), response.message(),
+        createHeaders(response.headers()), createResponseBody(response.body()));
+  }
+
+  private static RequestBody createRequestBody(final TypedOutput body) {
+    if (body == null) {
+      return null;
+    }
+    final MediaType mediaType = MediaType.parse(body.mimeType());
+    return new RequestBody() {
+      @Override public MediaType contentType() {
+        return mediaType;
+      }
+
+      @Override public void writeTo(BufferedSink sink) throws IOException {
+        body.writeTo(sink.outputStream());
+      }
+
+      @Override public long contentLength() {
+        return body.length();
+      }
+    };
+  }
+
+  private static TypedInput createResponseBody(final ResponseBody body) {
+    if (body.contentLength() == 0) {
+      return null;
+    }
+    return new TypedInput() {
+      @Override public String mimeType() {
+        MediaType mediaType = body.contentType();
+        return mediaType == null ? null : mediaType.toString();
+      }
+
+      @Override public long length() {
+        return body.contentLength();
+      }
+
+      @Override public InputStream in() throws IOException {
+        return body.byteStream();
+      }
+    };
+  }
+
+  private static List<Header> createHeaders(Headers headers) {
+    int size = headers.size();
+    List<Header> headerList = new ArrayList<Header>(size);
+    for (int i = 0; i < size; i++) {
+      headerList.add(new Header(headers.name(i), headers.value(i)));
+    }
+    return headerList;
   }
 }
diff --git a/retrofit/src/test/java/retrofit/client/OkClientTest.java b/retrofit/src/test/java/retrofit/client/OkClientTest.java
new file mode 100644
index 000000000..9f65a5600
--- /dev/null
+++ b/retrofit/src/test/java/retrofit/client/OkClientTest.java
@@ -0,0 +1,159 @@
+// Copyright 2014 Square, Inc.
+package retrofit.client;
+
+import com.google.common.io.ByteStreams;
+import com.squareup.okhttp.Headers;
+import com.squareup.okhttp.MediaType;
+import com.squareup.okhttp.Protocol;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.ResponseBody;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import okio.Buffer;
+import okio.BufferedSource;
+import org.junit.Test;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedString;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static retrofit.TestingUtils.assertBytes;
+
+public final class OkClientTest {
+  private static final String HOST = "http://example.com";
+
+  @Test public void get() {
+    Request request = new Request("GET", HOST + "/foo/bar/?kit=kat", null, null);
+    com.squareup.okhttp.Request okRequest = OkClient.createRequest(request);
+
+    assertThat(okRequest.method()).isEqualTo("GET");
+    assertThat(okRequest.urlString()).isEqualTo(HOST + "/foo/bar/?kit=kat");
+    assertThat(okRequest.headers().size()).isEqualTo(0);
+    assertThat(okRequest.body()).isNull();
+  }
+
+  @Test public void post() throws IOException {
+    TypedString body = new TypedString("hi");
+    Request request = new Request("POST", HOST + "/foo/bar/", null, body);
+    com.squareup.okhttp.Request okRequest = OkClient.createRequest(request);
+
+    assertThat(okRequest.method()).isEqualTo("POST");
+    assertThat(okRequest.urlString()).isEqualTo(HOST + "/foo/bar/");
+    assertThat(okRequest.headers().size()).isEqualTo(0);
+
+    RequestBody okBody = okRequest.body();
+    assertThat(okBody).isNotNull();
+
+    Buffer buffer = new Buffer();
+    okBody.writeTo(buffer);
+    assertThat(buffer.readUtf8()).isEqualTo("hi");
+  }
+
+  @Test public void headers() {
+    List<Header> headers = new ArrayList<Header>();
+    headers.add(new Header("kit", "kat"));
+    headers.add(new Header("foo", "bar"));
+    headers.add(new Header("ping", null));
+    Request request = new Request("GET", HOST + "/this/", headers, null);
+    com.squareup.okhttp.Request okRequest = OkClient.createRequest(request);
+
+    Headers okHeaders = okRequest.headers();
+    assertThat(okHeaders.size()).isEqualTo(3);
+    assertThat(okHeaders.get("kit")).isEqualTo("kat");
+    assertThat(okHeaders.get("foo")).isEqualTo("bar");
+    assertThat(okHeaders.get("ping")).isEqualTo("");
+  }
+
+  @Test public void response() throws IOException {
+    com.squareup.okhttp.Response okResponse = new com.squareup.okhttp.Response.Builder()
+        .code(200).message("OK")
+        .body(new TestResponseBody("hello", "text/plain"))
+        .addHeader("foo", "bar")
+        .addHeader("kit", "kat")
+        .protocol(Protocol.HTTP_1_1)
+        .request(new com.squareup.okhttp.Request.Builder()
+            .url(HOST + "/foo/bar/")
+            .get()
+            .build())
+        .build();
+    Response response = OkClient.parseResponse(okResponse);
+
+    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
+    assertThat(response.getStatus()).isEqualTo(200);
+    assertThat(response.getReason()).isEqualTo("OK");
+    assertThat(response.getHeaders()) //
+        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"));
+    TypedInput responseBody = response.getBody();
+    assertThat(responseBody.mimeType()).isEqualTo("text/plain");
+    assertBytes(ByteStreams.toByteArray(responseBody.in()), "hello");
+  }
+
+  @Test public void responseNoContentType() throws IOException {
+    com.squareup.okhttp.Response okResponse = new com.squareup.okhttp.Response.Builder()
+        .code(200).message("OK")
+        .body(new TestResponseBody("hello", null))
+        .addHeader("foo", "bar")
+        .addHeader("kit", "kat")
+        .protocol(Protocol.HTTP_1_1)
+        .request(new com.squareup.okhttp.Request.Builder()
+            .url(HOST + "/foo/bar/")
+            .get()
+            .build())
+        .build();
+    Response response = OkClient.parseResponse(okResponse);
+
+    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
+    assertThat(response.getStatus()).isEqualTo(200);
+    assertThat(response.getReason()).isEqualTo("OK");
+    assertThat(response.getHeaders()) //
+        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"));
+    TypedInput responseBody = response.getBody();
+    assertThat(responseBody.mimeType()).isNull();
+    assertBytes(ByteStreams.toByteArray(responseBody.in()), "hello");
+  }
+
+  @Test public void emptyResponse() throws IOException {
+    com.squareup.okhttp.Response okResponse = new com.squareup.okhttp.Response.Builder()
+        .code(200)
+        .message("OK")
+        .body(new TestResponseBody("", null))
+        .addHeader("foo", "bar")
+        .addHeader("kit", "kat")
+        .protocol(Protocol.HTTP_1_1)
+        .request(new com.squareup.okhttp.Request.Builder()
+            .url(HOST + "/foo/bar/")
+            .get()
+            .build())
+        .build();
+    Response response = OkClient.parseResponse(okResponse);
+
+    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
+    assertThat(response.getStatus()).isEqualTo(200);
+    assertThat(response.getReason()).isEqualTo("OK");
+    assertThat(response.getHeaders()) //
+        .containsExactly(new Header("foo", "bar"), new Header("kit", "kat"));
+    assertThat(response.getBody()).isNull();
+  }
+
+  private static final class TestResponseBody extends ResponseBody {
+    private final Buffer buffer;
+    private final String contentType;
+
+    private TestResponseBody(String content, String contentType) {
+      this.buffer = new Buffer().writeUtf8(content);
+      this.contentType = contentType;
+    }
+
+    @Override public MediaType contentType() {
+      return contentType == null ? null : MediaType.parse(contentType);
+    }
+
+    @Override public long contentLength() {
+      return buffer.size();
+    }
+
+    @Override public BufferedSource source() {
+      return buffer.clone();
+    }
+  }
+}
