diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
index 5ef237983..5a3f712a0 100644
--- a/retrofit-mock/pom.xml
+++ b/retrofit-mock/pom.xml
@@ -35,6 +35,11 @@
       <artifactId>assertj-core</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>org.jetbrains.kotlinx</groupId>
+      <artifactId>kotlinx-coroutines-core</artifactId>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/SuspendApiTest.kt b/retrofit-mock/src/test/java/retrofit2/mock/SuspendApiTest.kt
new file mode 100644
index 000000000..2a3233e5d
--- /dev/null
+++ b/retrofit-mock/src/test/java/retrofit2/mock/SuspendApiTest.kt
@@ -0,0 +1,38 @@
+package retrofit2.mock
+
+import org.assertj.core.api.Assertions.assertThat
+import org.junit.Test
+import kotlinx.coroutines.runBlocking
+import org.junit.Before
+import retrofit2.Retrofit
+
+class SuspendApiTest {
+  interface SuspendService {
+    suspend fun response(): String
+  }
+
+  private lateinit var service: SuspendService
+
+  @Before fun setUp() {
+    val retrofit = Retrofit.Builder()
+        .baseUrl("http://example.com")
+        .build()
+    val mockRetrofit = MockRetrofit.Builder(retrofit)
+        .build()
+
+    val delegate: BehaviorDelegate<SuspendService> = mockRetrofit.create(SuspendService::class.java)
+
+    service = object: SuspendService {
+      override suspend fun response(): String {
+        val response = Calls.response("Response!")
+        return delegate.returning(response).response()
+      }
+    }
+  }
+
+  @Test fun suspendFunctionOnInterfaceReturnsResponse() {
+    runBlocking {
+      assertThat(service.response()).isEqualTo("Response!")
+    }
+  }
+}
