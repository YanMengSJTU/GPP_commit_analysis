diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index c83a1bc4e..617570d6c 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -25,6 +25,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
+
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
@@ -68,8 +69,8 @@
   private final boolean validateEagerly;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl, HttpUrl baseHttpsUrl,
-      List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
-      Executor callbackExecutor, boolean validateEagerly) {
+           List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
+           Executor callbackExecutor, boolean validateEagerly) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
     this.baseHttpsUrl = baseHttpsUrl;
@@ -131,11 +132,12 @@
     if (validateEagerly) {
       eagerlyValidateMethods(service);
     }
-    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
+    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
         new InvocationHandler() {
           private final Platform platform = Platform.get();
 
-          @Override public Object invoke(Object proxy, Method method, Object... args)
+          @Override
+          public Object invoke(Object proxy, Method method, Object... args)
               throws Throwable {
             // If the method is a method from Object then defer to normal invocation.
             if (method.getDeclaringClass() == Object.class) {
@@ -180,14 +182,18 @@ ServiceMethod loadServiceMethod(Method method) {
     return callFactory;
   }
 
-  /** The API base URL. */
+  /**
+   * The API base URL.
+   */
   public HttpUrl baseUrl() {
     return baseUrl;
   }
 
-  /** The API base Https URL. */
-  public HttpUrl baseHttpsUrl(){
-        return baseHttpsUrl;
+  /**
+   * The API base Https URL.
+   */
+  public HttpUrl baseHttpsUrl() {
+    return baseHttpsUrl;
   }
 
   /**
@@ -215,7 +221,7 @@ public HttpUrl baseHttpsUrl(){
    * @throws IllegalArgumentException if no call adapter available for {@code type}.
    */
   public CallAdapter<?> nextCallAdapter(CallAdapter.Factory skipPast, Type returnType,
-      Annotation[] annotations) {
+                                        Annotation[] annotations) {
     checkNotNull(returnType, "returnType == null");
     checkNotNull(annotations, "annotations == null");
 
@@ -261,7 +267,7 @@ public HttpUrl baseHttpsUrl(){
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> requestBodyConverter(Type type,
-      Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
+                                                            Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
     return nextRequestBodyConverter(null, type, parameterAnnotations, methodAnnotations);
   }
 
@@ -272,7 +278,7 @@ public HttpUrl baseHttpsUrl(){
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> nextRequestBodyConverter(Converter.Factory skipPast,
-      Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
+                                                                Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
     checkNotNull(type, "type == null");
     checkNotNull(parameterAnnotations, "parameterAnnotations == null");
     checkNotNull(methodAnnotations, "methodAnnotations == null");
@@ -322,7 +328,7 @@ public HttpUrl baseHttpsUrl(){
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<ResponseBody, T> nextResponseBodyConverter(Converter.Factory skipPast,
-      Type type, Annotation[] annotations) {
+                                                                  Type type, Annotation[] annotations) {
     checkNotNull(type, "type == null");
     checkNotNull(annotations, "annotations == null");
 
@@ -512,7 +518,7 @@ public Builder baseUrl(HttpUrl baseUrl) {
      *
      * @see #baseHttpsUrl(HttpUrl)
      */
-    public Builder baseHttpsUrl(String baseHttpsUrl){
+    public Builder baseHttpsUrl(String baseHttpsUrl) {
       checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
       HttpUrl httpsUrl = HttpUrl.parse(baseHttpsUrl);
       if (httpsUrl == null) {
@@ -523,7 +529,6 @@ public Builder baseHttpsUrl(String baseHttpsUrl){
 
     /**
      * This api is for https request.
-     *
      */
     public Builder baseHttpsUrl(HttpUrl baseHttpsUrl) {
       checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
@@ -535,7 +540,9 @@ public Builder baseHttpsUrl(HttpUrl baseHttpsUrl) {
       return this;
     }
 
-    /** Add converter factory for serialization and deserialization of objects. */
+    /**
+     * Add converter factory for serialization and deserialization of objects.
+     */
     public Builder addConverterFactory(Converter.Factory factory) {
       converterFactories.add(checkNotNull(factory, "factory == null"));
       return this;
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index e761e01a6..db440c439 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -26,6 +26,7 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
@@ -35,7 +36,9 @@
 import okhttp3.ResponseBody;
 import retrofit2.http.*;
 
-/** Adapts an invocation of an interface method into an HTTP call. */
+/**
+ * Adapts an invocation of an interface method into an HTTP call.
+ */
 final class ServiceMethod<T> {
   // Upper and lower characters, digits, underscores, and hyphens, starting with a character.
   static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";
@@ -75,19 +78,21 @@
     this.parameterHandlers = builder.parameterHandlers;
   }
 
-  /** Builds an HTTP ot Https request from method arguments. */
+  /**
+   * Builds an HTTP ot Https request from method arguments.
+   */
   Request toRequest(Object... args) throws IOException {
     RequestBuilder requestBuilder;
-    if(!isHttps){
-        requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-                contentType, hasBody, isFormEncoded, isMultipart);
-    }else {
-        requestBuilder = new RequestBuilder(httpMethod, baseHttpsUrl, relativeUrl, headers,
-              contentType, hasBody, isFormEncoded, isMultipart);
+    if (!isHttps) {
+      requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
+          contentType, hasBody, isFormEncoded, isMultipart);
+    } else {
+      requestBuilder = new RequestBuilder(httpMethod, baseHttpsUrl, relativeUrl, headers,
+          contentType, hasBody, isFormEncoded, isMultipart);
     }
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
-    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
+        ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
 
     int argumentCount = args != null ? args.length : 0;
     if (argumentCount != handlers.length) {
@@ -102,7 +107,9 @@ Request toRequest(Object... args) throws IOException {
     return requestBuilder.build();
   }
 
-  /** Builds a method return value from an HTTP response body. */
+  /**
+   * Builds a method return value from an HTTP response body.
+   */
   T toResponse(ResponseBody body) throws IOException {
     return responseConverter.convert(body);
   }
diff --git a/retrofit/src/main/java/retrofit2/http/TYPE.java b/retrofit/src/main/java/retrofit2/http/TYPE.java
index 9d2aa7818..399380421 100644
--- a/retrofit/src/main/java/retrofit2/http/TYPE.java
+++ b/retrofit/src/main/java/retrofit2/http/TYPE.java
@@ -15,8 +15,8 @@
 @Retention(RUNTIME)
 public @interface TYPE {
 
-    int TYPE_HTTP = 0;
-    int TYPE_HTTPS = 1;
+  int TYPE_HTTP = 0;
+  int TYPE_HTTPS = 1;
 
-    int value() default TYPE_HTTP;
+  int value() default TYPE_HTTP;
 }
