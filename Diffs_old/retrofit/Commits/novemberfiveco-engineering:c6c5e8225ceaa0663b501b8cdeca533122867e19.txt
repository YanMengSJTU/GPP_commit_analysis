diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 4ada1f631..b5f003f1c 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -25,15 +25,14 @@
 
 import static retrofit2.Utils.checkNotNull;
 
-abstract class ParameterHandler<T> {
+public abstract class ParameterHandler<T> {
     abstract void apply(RequestBuilder builder, T value) throws IOException;
 
     final ParameterHandler<Iterable<T>> iterable() {
         return new ParameterHandler<Iterable<T>>() {
             @Override
             void apply(RequestBuilder builder, Iterable<T> values) throws IOException {
-                if (values == null) return; // Skip null values.
-
+                if (values == null) return; // Skip null values
                 for (T value : values) {
                     ParameterHandler.this.apply(builder, value);
                 }
@@ -276,7 +275,7 @@ void apply(RequestBuilder builder, MultipartBody.Part value) throws IOException
         }
     }
 
-    static final class Name extends ParameterHandler<String> {
+    public static final class Name extends ParameterHandler<String> {
 
         private NameAnnotationHandler handler;
 
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index 3a25b6f53..66e157bff 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -26,7 +26,7 @@
 import okio.Buffer;
 import okio.BufferedSink;
 
-final class RequestBuilder {
+public class RequestBuilder {
   private static final char[] HEX_DIGITS =
       { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
   private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";
@@ -45,7 +45,7 @@
   private FormBody.Builder formBuilder;
   private RequestBody body;
 
-  RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,
+  public RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,
       MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {
     this.method = method;
     this.baseUrl = baseUrl;
@@ -73,7 +73,7 @@ void setRelativeUrl(Object relativeUrl) {
     this.relativeUrl = relativeUrl.toString();
   }
 
-  void addHeader(String name, String value) {
+  public void addHeader(String name, String value) {
     if ("Content-Type".equalsIgnoreCase(name)) {
       MediaType type = MediaType.parse(value);
       if (type == null) {
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 1d74d66b0..080b429f2 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -39,7 +39,7 @@
 /**
  * Adapts an invocation of an interface method into an HTTP call.
  */
-final class ServiceMethod<R, T> {
+public class ServiceMethod<R, T> {
     // Upper and lower characters, digits, underscores, and hyphens, starting with a character.
     static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";
     static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");
@@ -60,7 +60,7 @@
     private final ParameterHandler<?>[] parameterHandlers;
     private ParameterHandler.Name.NameAnnotationHandler nameAnnotationHandler;
 
-    ServiceMethod(Builder<R, T> builder) {
+    public ServiceMethod(Builder<R, T> builder) {
         this.callFactory = builder.retrofit.callFactory();
         this.callAdapter = builder.callAdapter;
         this.baseUrl = builder.retrofit.baseUrl();
