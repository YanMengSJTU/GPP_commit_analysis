diff --git a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
index 20e7a639c..14d707fc6 100644
--- a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
@@ -209,7 +209,7 @@ public int calculateDelayForCall() {
    */
   @SuppressWarnings("unchecked")
   public <T> T create(Class<T> service, T mockService) {
-    Utils.validateServiceClass(service);
+    Utils.validateServiceClass(false, service);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new MockHandler(mockService, restAdapter.getMethodInfoCache(service)));
   }
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 40b2c34cc..55d45b49b 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -171,7 +171,7 @@ private RestAdapter(Endpoint server, Client client, Executor httpExecutor,
     this.errorHandler = errorHandler;
     this.log = log;
     this.logLevel = logLevel;
-    this.allowExtendingInterface=false;
+    this.allowExtendingInterface = false;
   }
 
   /** Change the level of logging. */
@@ -183,8 +183,8 @@ public void setLogLevel(LogLevel loglevel) {
   }
 
   /** Change the ability to extend interfaces, may break Android **/
-  public void setAllowExtendingInterface(boolean allowExtendingInterface){
-    this.allowExtendingInterface=allowExtendingInterface;
+  public void setAllowExtendingInterface(boolean allowExtendingInterface) {
+    this.allowExtendingInterface = allowExtendingInterface;
   }
 
   /** The current logging level. */
@@ -195,7 +195,7 @@ public LogLevel getLogLevel() {
   /** Create an implementation of the API defined by the specified {@code service} interface. */
   @SuppressWarnings("unchecked")
   public <T> T create(Class<T> service) {
-    Utils.validateServiceClass(allowExtendingInterface,service);
+    Utils.validateServiceClass(allowExtendingInterface, service);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new RestHandler(getMethodInfoCache(service)));
   }
@@ -522,8 +522,8 @@ void logException(Throwable t, String url) {
     private boolean allowExtendingInterface = false;
 
     /** Change the ability to extend interfaces, may break Android **/
-    public Builder setAllowExtendingInterface(boolean allowExtendingInterface){
-      this.allowExtendingInterface=allowExtendingInterface;
+    public Builder setAllowExtendingInterface(boolean allowExtendingInterface) {
+      this.allowExtendingInterface = allowExtendingInterface;
       return this;
     }
 
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index 3228d1cb8..3ba3e4391 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -104,9 +104,11 @@ static Response replaceResponseBody(Response response, TypedInput body) {
     // Prevent API interfaces from extending other interfaces. This not only avoids a bug in
     // Android (http://b.android.com/58753) but it forces composition of API declarations which is
     // the recommended pattern.
-    if(!allowExtendingInterface) {
+    if (!allowExtendingInterface) {
       if (service.getInterfaces().length > 0) {
-        throw new IllegalArgumentException("Interface definitions must not extend other interfaces.");
+        throw new IllegalArgumentException(
+                "Interface definitions must not extend other interfaces."
+        );
       }
     }
   }
