diff --git a/retrofit-processors/pom.xml b/retrofit-processors/pom.xml
index ab42127e5..f0d4902ca 100644
--- a/retrofit-processors/pom.xml
+++ b/retrofit-processors/pom.xml
@@ -50,6 +50,12 @@
       <version>${junit.version}</version>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>com.google.testing.compile</groupId>
+      <artifactId>compile-testing</artifactId>
+      <version>0.15</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
index 15989f810..dcf67b4fe 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
@@ -1,20 +1,22 @@
 package retrofit2.processors
 
 import com.google.auto.service.AutoService
+import retrofit2.Retrofit
 import javax.annotation.processing.*
 import javax.lang.model.SourceVersion
 import javax.lang.model.element.Element
+import javax.lang.model.element.ElementKind
 import javax.lang.model.element.TypeElement
 import javax.lang.model.util.Elements
 import javax.lang.model.util.Types
 import javax.tools.Diagnostic
 
 @AutoService(Processor::class)
-class StaticCheckProcessor() : AbstractProcessor() {
-    private var typeUtils: Types? = null
-    private var elementUtils: Elements? = null
-    private var filer: Filer? = null
-    private var messager: Messager? = null
+class StaticCheckProcessor : AbstractProcessor() {
+    private lateinit var typeUtils: Types
+    private lateinit var elementUtils: Elements
+    private lateinit var filer: Filer
+    private lateinit var messager: Messager
 
     @Synchronized
     override fun init(env: ProcessingEnvironment) {
@@ -26,8 +28,12 @@ class StaticCheckProcessor() : AbstractProcessor() {
     }
 
     override fun process(annoations: Set<TypeElement>, env: RoundEnvironment): Boolean {
-        var result = false
-        return result
+        env.rootElements.forEach {
+            if (it.kind != ElementKind.INTERFACE) {
+                warning(it,"@RetrofitService is not annotated on an Interface, skipped")
+            }
+        }
+        return true
     }
 
     override fun getSupportedAnnotationTypes(): Set<String> = setOf(RetrofitService::class.java.canonicalName)
@@ -35,6 +41,10 @@ class StaticCheckProcessor() : AbstractProcessor() {
     override fun getSupportedSourceVersion(): SourceVersion = SourceVersion.latestSupported()
 
     private fun error(e: Element, msg: String) {
-        messager!!.printMessage(Diagnostic.Kind.ERROR, msg, e)
+        messager.printMessage(Diagnostic.Kind.ERROR, msg, e)
+    }
+
+    private fun warning(e: Element, msg: String) {
+        messager.printMessage(Diagnostic.Kind.WARNING, msg, e)
     }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java
new file mode 100644
index 000000000..1fd169c6d
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java
@@ -0,0 +1,5 @@
+package retrofit2.processors;
+
+@RetrofitService
+public abstract class SampleAbstractClass {
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java
new file mode 100644
index 000000000..9fd908c3e
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java
@@ -0,0 +1,5 @@
+package retrofit2.processors;
+
+@RetrofitService
+public class SampleClass {
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
new file mode 100644
index 000000000..b39ea49f1
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
@@ -0,0 +1,9 @@
+package retrofit2.processors;
+
+import retrofit2.http.HEAD;
+
+@RetrofitService
+public interface SampleService {
+    @HEAD("/")
+    public void sampleMethod();
+}
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
new file mode 100644
index 000000000..f860a5309
--- /dev/null
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -0,0 +1,58 @@
+package retrofit2.processors
+
+import com.google.testing.compile.Compilation
+import com.google.testing.compile.Compiler
+import com.google.testing.compile.Compiler.javac
+import com.google.testing.compile.JavaFileObjects
+import org.junit.Test
+import java.util.*
+import kotlin.test.assertEquals
+import kotlin.test.assertTrue
+
+class BaseTest {
+
+    private fun compiler(): Compiler = javac().withProcessors(StaticCheckProcessor())
+
+    @Test
+    fun sampleTest() {
+        val compilation =
+                compiler()
+                        .compile(JavaFileObjects.forSourceLines(
+                                "SampleService",
+                                """
+                    package retrofit2.processors;
+
+                    import retrofit2.http.HEAD;
+
+                    @RetrofitService
+                    public interface SampleService {
+                        @HEAD("/")
+                        public void sampleMethod();
+                    }
+                """.trimIndent()))
+
+        assertEquals(compilation.status(), Compilation.Status.SUCCESS)
+        assertEquals(compilation.warnings().size, 0)
+
+    }
+
+    @Test
+    fun interfaceOnlyTest() {
+        val compilation =  compiler()
+                .compile(JavaFileObjects.forSourceLines("SampleAbstractClass",
+                """
+            package retrofit2.processors;
+
+            @RetrofitService
+            public abstract class SampleAbstractClass {
+            }
+        """.trimIndent()
+        ))
+
+        assertEquals(compilation.status(), Compilation.Status.SUCCESS)
+        assertTrue(compilation.warnings().size == 1)
+        val onlyWarning = compilation.warnings().first()
+        assertTrue(onlyWarning.getMessage(Locale.getDefault())!!
+                .contentEquals("@RetrofitService is not annotated on an Interface, skipped"))
+    }
+}
\ No newline at end of file
