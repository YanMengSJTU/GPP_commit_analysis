diff --git a/retrofit-android/build.gradle b/retrofit-android/build.gradle
new file mode 100644
index 000000000..4c6ccac6f
--- /dev/null
+++ b/retrofit-android/build.gradle
@@ -0,0 +1,47 @@
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+    }
+}
+
+repositories {
+    jcenter()
+    maven { url "https://jitpack.io" }
+}
+
+apply plugin: 'com.android.library'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
+
+    lintOptions {
+        abortOnError false
+    }
+}
+
+dependencies {
+    compile project(':retrofit')
+    compile 'com.android.support:support-annotations:22.2.0'
+
+    compile 'com.squareup.retrofit:retrofit:1.9.0'
+    compile 'javax.inject:javax.inject:1'
+
+    // testing
+    testCompile 'junit:junit-dep:4.10'
+    testCompile 'org.mockito:mockito-core:1.8.5'
+    testCompile('org.robolectric:robolectric:2.3') {
+      exclude group: 'com.android.support'
+    }
+}
+
+tasks.withType(Test) {
+    testLogging {
+        exceptionFormat "full"
+        events "passed", "skipped", "failed", "standardOut", "standardError"
+        showStandardStreams = true
+    }
+}
diff --git a/retrofit-android/src/main/AndroidManifest.xml b/retrofit-android/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..d1bd988af
--- /dev/null
+++ b/retrofit-android/src/main/AndroidManifest.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="retrofit.android" />
diff --git a/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java b/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java
new file mode 100644
index 000000000..24dfa89df
--- /dev/null
+++ b/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package retrofit.android;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.ArrayList;
+import android.content.Context;
+import android.text.TextUtils;
+import android.accounts.AccountManager;
+import android.accounts.Account;
+import android.accounts.AccountManagerFuture;
+import android.app.Activity;
+import android.os.Bundle;
+import rx.Observable;
+import rx.functions.*;
+import javax.inject.Singleton;
+import android.util.Log;
+
+@Singleton
+public abstract class AuthenticationInterceptor extends retrofit.http.Retrofit.SimpleRequestInterceptor {
+    String token;
+    Activity activity;
+    Context context;
+
+    public abstract String accountType();
+    public abstract String authTokenType();
+    public abstract void intercept(String token, RequestFacade request);
+
+    public Context context() {
+        return context;
+    }
+
+    public Activity activity() {
+        return activity;
+    }
+
+    @Override
+    public void intercept(Object context, RequestFacade request) {
+        this.activity = (Activity) context;
+        this.context = (Context) context;
+        if (token == null) token = getAuthToken(activity, accountType(), authTokenType());
+        intercept(token, request);
+    }
+
+    public String getAuthToken(Activity activity, String accountType, String authTokenType) {
+        Log.d("retrogithub", "getAuthToken");
+        AccountManager accountManager = AccountManager.get(activity);
+        Account account = getAccount(accountManager, accountType);
+        Log.d("retrogithub", "account: " + account);
+        AccountManagerFuture<Bundle> bundleTask = null;
+        if (account == null) {
+            Log.d("retrogithub", "addAccount");
+            bundleTask = accountManager.addAccount(accountType, authTokenType, null, null, activity, null, null);
+        } else {
+            Log.d("retrogithub", "getAuthToken");
+            bundleTask = accountManager.getAuthToken(account, authTokenType, null, activity, null, null);
+        }
+
+        if (bundleTask == null) {
+            Log.d("retrogithub", "bundleTask: " + bundleTask);
+            return null;
+        }
+
+        final AccountManagerFuture<Bundle> finalBundleTask = bundleTask;
+        Bundle tokenBundle = null;
+        try {
+            Log.d("retrogithub", "tokenBundle");
+            tokenBundle = finalBundleTask.getResult();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        Log.d("retrogithub", "tokenBundle: " + tokenBundle);
+        if (tokenBundle == null) return null;
+
+        Log.d("retrogithub", "AccountManager.KEY_AUTHTOKEN");
+        return tokenBundle.getString(AccountManager.KEY_AUTHTOKEN);
+    }
+
+    public Account getAccount(AccountManager accountManager, String accountType) {
+        Log.d("retrogithub", "getAccount");
+        Account[] accounts = accountManager.getAccountsByType(accountType);
+        if (accounts.length > 0) return accounts[0];
+        return null; // not found
+    }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
index 919a150c4..ddf37a9a1 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -530,7 +530,10 @@ public boolean buildIsSingletonRequestInterceptor(ExecutableElement method) {
           // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
           requestInterceptor = mte.getTypeMirror();
         }
-        singleton = ((DeclaredType) requestInterceptor).getAnnotation(javax.inject.Singleton.class);
+
+        Types typeUtils = processingEnv.getTypeUtils();
+        TypeElement requestInterceptorType = (TypeElement) typeUtils.asElement(requestInterceptor);
+        singleton = requestInterceptorType.getAnnotation(javax.inject.Singleton.class);
       }
       return singleton != null;
     }
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index d2d416bd7..9a258e243 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -75,6 +75,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     retrofit.RequestInterceptor requestInterceptor = retrofit.RequestInterceptor.NONE;
     retrofit.ErrorHandler errorHandler = retrofit.ErrorHandler.DEFAULT;
     retrofit.http.Retrofit.RequestAuthenticator requestAuthenticator;
+    // FIXME context is tricky
     Object context;
     Map<Class<? extends retrofit.RequestInterceptor>, retrofit.RequestInterceptor> requestInterceptors = new HashMap<>();
 
@@ -85,6 +86,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     }
 
     public $subclass(Object object) {
+        // FIXME context is tricky
         this.context = object;
         client = new OkHttpClient();
 
@@ -331,6 +333,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 System.out.println("retrofit: myRequestInterceptor");
                 SimpleRequestFacade requestFacade = new SimpleRequestFacade(request);
                 if (finalRequestInterceptor instanceof retrofit.http.Retrofit.SimpleRequestInterceptor) {
+                    // FIXME context is tricky
                     ((retrofit.http.Retrofit.SimpleRequestInterceptor) finalRequestInterceptor).intercept(context, requestFacade);
                 } else {
                     finalRequestInterceptor.intercept(requestFacade);
@@ -355,6 +358,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
         #end
 
                 SimpleRequestFacade requestAuthenticatorFacade = new SimpleRequestFacade(request);
+                // FIXME context is tricky
                 requestAuthenticator.authorize(context, permissions);
                 requestAuthenticator.intercept(requestAuthenticatorFacade);
                 return requestAuthenticatorFacade.request();
diff --git a/retrofit2-github/build.gradle b/retrofit2-github/build.gradle
index 79b53a8de..e542b1e1b 100644
--- a/retrofit2-github/build.gradle
+++ b/retrofit2-github/build.gradle
@@ -28,6 +28,7 @@ android {
 dependencies {
     compile project(':retrofit')
     apt project(':retrofit-processor')
+    compile project(':retrofit-android')
     compile 'io.reactivex:rxjava:1.0.9'
     //compile 'io.reactivex:rxandroid:0.24.0'
     compile 'com.squareup.okhttp:okhttp:2.4.0'
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java
index 5f6c998e7..2f27b12cc 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java
@@ -13,84 +13,28 @@
  */
 package com.github.retrofit2;
 
-import retrofit.RequestInterceptor;
-import retrofit.http.Retrofit.RequestAuthenticator;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.ArrayList;
-import android.content.Context;
-import android.text.TextUtils;
-import retrofit.RequestInterceptor.RequestFacade;
-import android.accounts.AccountManager;
-import android.accounts.Account;
-import android.accounts.AccountManagerFuture;
-import android.app.Activity;
-import android.os.Bundle;
-import rx.Observable;
-import rx.functions.*;
 import javax.inject.Singleton;
+import retrofit.RequestInterceptor.RequestFacade;
+import retrofit.android.AuthenticationInterceptor;
 
 @Singleton
-public class GitHubAuthInterceptor extends retrofit.http.Retrofit.SimpleRequestInterceptor {
-    // TODO persistents
-    String token;
+public class GitHubAuthInterceptor extends AuthenticationInterceptor {
 
     @Override
-    public void intercept(Object context, RequestFacade request) {
-        if (token == null) {
-            token = getAuthToken((Activity) context, Collections.<String>emptyList());
-        }
-        if (token != null) request.addHeader("Authorization", "Bearer " + token);
+    public String accountType() {
+        //return context().getString(R.string.account_type);
+        return "com.github";
     }
 
-    public String getAuthToken(Activity activity, Collection<String> permissions) {
-        System.out.println("retrogithub: getAuthToken");
-        AccountManager accountManager = AccountManager.get(activity);
-        String accountType = "com.github";
-        //String authTokenType = TextUtils.join(",", permissions);
-        String authTokenType = accountType;
-        Account account = getAccount(accountManager, accountType);
-        System.out.println("retrogithub: account: " + account);
-        AccountManagerFuture<Bundle> bundleTask = null;
-        if (account == null) {
-            System.out.println("retrogithub: addAccount");
-            //bundleTask = accountManager.addAccount(accountType, authTokenType, permissions.toArray(new String[permissions.size()]), null, activity, null, null);
-            bundleTask = accountManager.addAccount(accountType, authTokenType, null, null, activity, null, null);
-        } else {
-            System.out.println("retrogithub: getAuthToken");
-            bundleTask = accountManager.getAuthToken(account, authTokenType, null, activity, null, null);
-        }
-
-        if (bundleTask == null) {
-            System.out.println("retrogithub: bundleTask: " + bundleTask);
-            return null;
-        }
-
-        final AccountManagerFuture<Bundle> finalBundleTask = bundleTask;
-        Bundle tokenBundle = null;
-        try {
-            System.out.println("retrogithub: tokenBundle");
-            tokenBundle = finalBundleTask.getResult();
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-
-        System.out.println("retrogithub: tokenBundle: " + tokenBundle);
-        if (tokenBundle == null) return null;
-
-        System.out.println("retrogithub: AccountManager.KEY_AUTHTOKEN");
-        return tokenBundle.getString(AccountManager.KEY_AUTHTOKEN);
+    @Override
+    public String authTokenType() {
+        //return context().getString(R.string.auth_token_type);
+        return "com.github";
     }
 
-    public Account getAccount(AccountManager accountManager, String accountType) {
-        System.out.println("retrogithub: getAccount");
-        Account[] accounts = accountManager.getAccountsByType(accountType);
-        if (accounts.length > 0) return accounts[0];
-        return null; // not found
+    @Override
+    public void intercept(String token, RequestFacade request) {
+        if (token != null) request.addHeader("Authorization", "Bearer " + token);
     }
 
-    public String getToken() {
-        return token;
-    }
 }
diff --git a/settings.gradle b/settings.gradle
index ce2fc3e5d..ecb00e445 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,4 +1,5 @@
 include 'retrofit', 'retrofit-processor'
 include 'retrofit2-github'
 include 'retrofit2-github-app'
+include 'retrofit-android'
 rootProject.name = 'retrofit-parent'
