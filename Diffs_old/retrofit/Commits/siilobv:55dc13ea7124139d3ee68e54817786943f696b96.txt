diff --git a/pom.xml b/pom.xml
index e040808e7..e42ca12ab 100644
--- a/pom.xml
+++ b/pom.xml
@@ -58,6 +58,7 @@
     <!-- Converter Dependencies -->
     <gson.version>2.7</gson.version>
     <protobuf.version>2.6.1</protobuf.version>
+    <protobuf.nano.version>3.0.0-alpha-5</protobuf.nano.version>
     <jackson.version>2.7.2</jackson.version>
     <wire.version>2.2.0</wire.version>
     <simplexml.version>2.7.1</simplexml.version>
@@ -131,6 +132,11 @@
         <artifactId>protobuf-java</artifactId>
         <version>${protobuf.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.google.protobuf.nano</groupId>
+        <artifactId>protobuf-javanano</artifactId>
+        <version>${protobuf.nano.version}</version>
+      </dependency>
       <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
diff --git a/retrofit-converters/protobuf-nano/README.md b/retrofit-converters/protobuf-nano/README.md
index 30365c72b..1c239ea43 100644
--- a/retrofit-converters/protobuf-nano/README.md
+++ b/retrofit-converters/protobuf-nano/README.md
@@ -3,17 +3,4 @@ Google Nano Protocol Buffer Converter
 
 A `Converter` which uses [Nano Protocol Buffer][1] binary serialization.
 
-To build this module, you will need to [install][2] the Android external\_protobuf module.
-
-To use the converter, depend on the `nano` classifier:
-
-```xml
-<dependency>
-  <groupId>com.squareup.retrofit</groupId>
-  <artifactId>retrofit-converters</artifactId>
-  <classifier>nano</classifier>
-</dependency>
-```
-
  [1]: https://github.com/android/platform_external_protobuf/tree/master/java/src/main/java/com/google/protobuf/nano
- [2]: https://github.com/android/platform_external_protobuf/blob/master/java/README.txt
diff --git a/retrofit-converters/protobuf-nano/pom.xml b/retrofit-converters/protobuf-nano/pom.xml
index e5aacd1e8..39978ea4c 100644
--- a/retrofit-converters/protobuf-nano/pom.xml
+++ b/retrofit-converters/protobuf-nano/pom.xml
@@ -15,14 +15,13 @@
 
   <dependencies>
     <dependency>
-      <groupId>com.squareup.retrofit2</groupId>
+      <groupId>${project.groupId}</groupId>
       <artifactId>retrofit</artifactId>
       <version>${project.version}</version>
     </dependency>
     <dependency>
       <groupId>com.google.protobuf.nano</groupId>
       <artifactId>protobuf-javanano</artifactId>
-      <version>3.0.0-alpha-5</version>
     </dependency>
 
     <dependency>
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java
index 8cb9b1793..ce23f877b 100644
--- a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java
@@ -28,7 +28,6 @@
  * <p>
  * This converter only applies for types which extend from {@link MessageNano} (or one of its
  * subclasses).
- * @author Keith Banks - Architect at siilo.com
  */
 public final class ProtoConverterFactory extends Converter.Factory {
   public static ProtoConverterFactory create() {
@@ -49,7 +48,7 @@ private ProtoConverterFactory() { }
       return null;
     }
 
-    return new ProtoResponseBodyConverter<>(getNanoProtoInstance(type));
+    return new ProtoResponseBodyConverter<>(type);
   }
 
   @Override
@@ -65,21 +64,5 @@ private ProtoConverterFactory() { }
     }
     return new ProtoRequestBodyConverter<>();
   }
-
-  private MessageNano getNanoProtoInstance(final Type type) {
-    Class<?> c = (Class<?>) type;
-    if (!(MessageNano.class.isAssignableFrom(c))) {
-      throw new IllegalArgumentException(
-                 "Expected a nanoproto message but was " + c.toString());
-    }
-
-    try {
-      return (MessageNano) c.newInstance();
-    } catch (InstantiationException e) {
-      throw new RuntimeException("Nanoproto instantiation failed", e);
-    } catch (IllegalAccessException e) {
-      throw new IllegalStateException(e);
-    }
-  }
 }
 
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java
index 3811da2df..10eaad1d3 100644
--- a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java
@@ -17,13 +17,11 @@
 
 import com.google.protobuf.nano.MessageNano;
 import java.io.IOException;
+
 import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import retrofit2.Converter;
 
-/**
- * * @author Keith Banks - Architect at siilo.com
- */
 final class ProtoRequestBodyConverter<T extends MessageNano> implements Converter<T, RequestBody> {
   private static final MediaType MEDIA_TYPE = MediaType.parse("application/x-protobuf");
 
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java
index 33dc601a7..8a3a75dc1 100644
--- a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java
@@ -18,27 +18,42 @@
 import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
 import com.google.protobuf.nano.MessageNano;
 import java.io.IOException;
+import java.lang.reflect.Type;
+
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
 
-/**
- * * @author Keith Banks - Architect at siilo.com
- */
 final class ProtoResponseBodyConverter<T extends MessageNano>
         implements Converter<ResponseBody, T> {
-  private final T instance;
-  ProtoResponseBodyConverter(T instance) {
-    this.instance = instance;
+  private final Type type;
+  ProtoResponseBodyConverter(Type type) {
+    this.type = type;
   }
 
   @Override public T convert(ResponseBody value) throws IOException {
     try {
-      return MessageNano.mergeFrom(instance, value.bytes());
+      return MessageNano.mergeFrom(getNanoProtoInstance(type), value.bytes());
     } catch (InvalidProtocolBufferNanoException e) {
       throw new RuntimeException(e); // Despite extending IOException, this is data mismatch.
     } finally {
       value.close();
     }
   }
+
+  private T getNanoProtoInstance(final Type type) {
+    Class<T> c = (Class<T>) type;
+    if (!(MessageNano.class.isAssignableFrom(c))) {
+      throw new IllegalArgumentException(
+              "Expected a nanoproto message but was " + c.toString());
+    }
+
+    try {
+      return c.newInstance();
+    } catch (InstantiationException e) {
+      throw new RuntimeException("Nanoproto instantiation failed", e);
+    } catch (IllegalAccessException e) {
+      throw new IllegalStateException(e);
+    }
+  }
 }
 
diff --git a/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java
index 12ea60515..f3f3416e0 100644
--- a/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java
+++ b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit2.converter.protobuf.nano;
 
 import java.io.IOException;
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
index 84157f394..814dc326b 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
@@ -28,4 +28,4 @@
     byte[] bytes = value.toByteArray();
     return RequestBody.create(MEDIA_TYPE, bytes);
   }
-}
\ No newline at end of file
+}
