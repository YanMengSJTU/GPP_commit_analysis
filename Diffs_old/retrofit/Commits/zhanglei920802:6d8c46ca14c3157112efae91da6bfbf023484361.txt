diff --git a/retrofit/src/main/java/retrofit2/BuiltInConverters.java b/retrofit/src/main/java/retrofit2/BuiltInConverters.java
index 2b19b52e5..3d3f85444 100644
--- a/retrofit/src/main/java/retrofit2/BuiltInConverters.java
+++ b/retrofit/src/main/java/retrofit2/BuiltInConverters.java
@@ -23,6 +23,9 @@
 import okhttp3.ResponseBody;
 import retrofit2.http.Streaming;
 
+/**
+ * 内建的转换器
+ */
 final class BuiltInConverters extends Converter.Factory {
     @Override
     public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
@@ -66,6 +69,9 @@ public RequestBody convert(RequestBody value) throws IOException {
         }
     }
 
+    /**
+     * 好像什么也没有做
+     */
     static final class StreamingResponseBodyConverter
             implements Converter<ResponseBody, ResponseBody> {
         static final StreamingResponseBodyConverter INSTANCE = new StreamingResponseBodyConverter();
@@ -76,6 +82,9 @@ public ResponseBody convert(ResponseBody value) throws IOException {
         }
     }
 
+    /**
+     * 转换
+     */
     static final class BufferingResponseBodyConverter
             implements Converter<ResponseBody, ResponseBody> {
         static final BufferingResponseBodyConverter INSTANCE = new BufferingResponseBodyConverter();
@@ -84,6 +93,7 @@ public ResponseBody convert(ResponseBody value) throws IOException {
         public ResponseBody convert(ResponseBody value) throws IOException {
             try {
                 // Buffer the entire body to avoid future I/O.
+                //将所有的内容放到buffer里面
                 return Utils.buffer(value);
             } finally {
                 value.close();
@@ -91,6 +101,9 @@ public ResponseBody convert(ResponseBody value) throws IOException {
         }
     }
 
+    /**
+     * 将Object转化为String
+     */
     static final class ToStringConverter implements Converter<Object, String> {
         static final ToStringConverter INSTANCE = new ToStringConverter();
 
diff --git a/retrofit/src/main/java/retrofit2/Call.java b/retrofit/src/main/java/retrofit2/Call.java
index b7e420e13..3ee994255 100644
--- a/retrofit/src/main/java/retrofit2/Call.java
+++ b/retrofit/src/main/java/retrofit2/Call.java
@@ -35,6 +35,7 @@
 public interface Call<T> extends Cloneable {
     /**
      * Synchronously send the request and return its response.
+     * 同步执行请求并返回结果
      *
      * @throws IOException      if a problem occurred talking to the server.
      * @throws RuntimeException (and subclasses) if an unexpected error occurs creating the request
@@ -45,18 +46,24 @@
     /**
      * Asynchronously send the request and notify {@code callback} of its response or if an error
      * occurred talking to the server, creating the request, or processing the response.
+     * <p>
+     * 异步执行请求
      */
     void enqueue(Callback<T> callback);
 
     /**
      * Returns true if this call has been either {@linkplain #execute() executed} or {@linkplain
      * #enqueue(Callback) enqueued}. It is an error to execute or enqueue a call more than once.
+     * <p>
+     * 判断当前的call是否已经被执行
      */
     boolean isExecuted();
 
     /**
      * Cancel this call. An attempt will be made to cancel in-flight calls, and if the call has not
      * yet been executed it never will be.
+     * <p>
+     * 取消当前的call的执行
      */
     void cancel();
 
diff --git a/retrofit/src/main/java/retrofit2/CallAdapter.java b/retrofit/src/main/java/retrofit2/CallAdapter.java
index 6e72b2d32..caa18bcad 100644
--- a/retrofit/src/main/java/retrofit2/CallAdapter.java
+++ b/retrofit/src/main/java/retrofit2/CallAdapter.java
@@ -24,6 +24,8 @@
  * created by {@linkplain Factory a factory} which is
  * {@linkplain Retrofit.Builder#addCallAdapterFactory(Factory) installed} into the {@link Retrofit}
  * instance.
+ *
+ * 将Response(call)适配为T
  */
 public interface CallAdapter<R, T> {
     /**
diff --git a/retrofit/src/main/java/retrofit2/Converter.java b/retrofit/src/main/java/retrofit2/Converter.java
index 9ea1a1836..3660da210 100644
--- a/retrofit/src/main/java/retrofit2/Converter.java
+++ b/retrofit/src/main/java/retrofit2/Converter.java
@@ -36,8 +36,17 @@
  * Convert objects to and from their representation in HTTP. Instances are created by {@linkplain
  * Factory a factory} which is {@linkplain Retrofit.Builder#addConverterFactory(Factory) installed}
  * into the {@link Retrofit} instance.
+ * <p>
+ * 内容转换器
  */
 public interface Converter<F, T> {
+    /**
+     * 将F 转换为T
+     *
+     * @param value
+     * @return
+     * @throws IOException
+     */
     T convert(F value) throws IOException;
 
     /** Creates {@link Converter} instances based on a type and target usage. */
@@ -47,6 +56,8 @@
          * {@code type} cannot be handled by this factory. This is used to create converters for
          * response types such as {@code SimpleResponse} from a {@code Call<SimpleResponse>}
          * declaration.
+         *
+         * 将Response转为指定的类型
          */
         public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
                 Retrofit retrofit) {
@@ -58,6 +69,8 @@
          * {@code type} cannot be handled by this factory. This is used to create converters for types
          * specified by {@link Body @Body}, {@link Part @Part}, and {@link PartMap @PartMap}
          * values.
+         *
+         * 将request转化为指定类型
          */
         public Converter<?, RequestBody> requestBodyConverter(Type type,
                 Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
@@ -70,6 +83,8 @@
          * specified by {@link Field @Field}, {@link FieldMap @FieldMap} values,
          * {@link Header @Header}, {@link HeaderMap @HeaderMap}, {@link Path @Path},
          * {@link Query @Query}, and {@link QueryMap @QueryMap} values.
+         *
+         * 将类容转为String类型
          */
         public Converter<?, String> stringConverter(Type type, Annotation[] annotations,
                 Retrofit retrofit) {
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 6f84c4f13..6c60793a2 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -29,11 +29,17 @@
     private final ServiceMethod<T, ?> serviceMethod;
     private final Object[] args;
 
+    /**
+     * 是否被取消
+     */
     private volatile boolean canceled;
 
     // All guarded by this.
-    private okhttp3.Call rawCall;
+    private okhttp3.Call rawCall;//OkHttp访问
     private Throwable creationFailure; // Either a RuntimeException or IOException.
+    /**
+     * 是否被执行
+     */
     private boolean executed;
 
     OkHttpCall(ServiceMethod<T, ?> serviceMethod, Object[] args) {
@@ -53,6 +59,10 @@ public synchronized Request request() {
         if (call != null) {
             return call.request();
         }
+
+        /**
+         * 判断上次是否创建失败
+         */
         if (creationFailure != null) {
             if (creationFailure instanceof IOException) {
                 throw new RuntimeException("Unable to create request.", creationFailure);
@@ -61,6 +71,8 @@ public synchronized Request request() {
                 throw (RuntimeException) creationFailure;
             }
         }
+
+        //创建
         try {
             return (rawCall = createRawCall()).request();
         } catch (RuntimeException e) {
@@ -76,6 +88,7 @@ public synchronized Request request() {
     public void enqueue(final Callback<T> callback) {
         if (callback == null) throw new NullPointerException("callback == null");
 
+        //用于okHttp.Call
         okhttp3.Call call;
         Throwable failure;
 
@@ -94,21 +107,25 @@ public void enqueue(final Callback<T> callback) {
             }
         }
 
+        //创建rawcall失败
         if (failure != null) {
             callback.onFailure(this, failure);
             return;
         }
 
+        //发现已经被canceled了
         if (canceled) {
             call.cancel();
         }
 
+        //请求okhttp执行
         call.enqueue(new okhttp3.Callback() {
             @Override
             public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse)
                     throws IOException {
                 Response<T> response;
                 try {
+                    //解析响应
                     response = parseResponse(rawResponse);
                 } catch (Throwable e) {
                     callFailure(e);
@@ -184,6 +201,12 @@ public synchronized boolean isExecuted() {
         return parseResponse(call.execute());
     }
 
+    /**
+     * 创建一个新的call
+     *
+     * @return
+     * @throws IOException
+     */
     private okhttp3.Call createRawCall() throws IOException {
         Request request = serviceMethod.toRequest(args);
         okhttp3.Call call = serviceMethod.callFactory.newCall(request);
@@ -201,6 +224,7 @@ public synchronized boolean isExecuted() {
                                  .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))
                                  .build();
 
+        //异常
         int code = rawResponse.code();
         if (code < 200 || code >= 300) {
             try {
@@ -212,6 +236,7 @@ public synchronized boolean isExecuted() {
             }
         }
 
+        //无内容
         if (code == 204 || code == 205) {
             rawBody.close();
             return Response.success(null, rawResponse);
@@ -219,6 +244,7 @@ public synchronized boolean isExecuted() {
 
         ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);
         try {
+            //响应成功
             T body = serviceMethod.toResponse(catchingBody);
             return Response.success(body, rawResponse);
         } catch (RuntimeException e) {
@@ -229,6 +255,9 @@ public synchronized boolean isExecuted() {
         }
     }
 
+    /**
+     * 取消
+     */
     public void cancel() {
         canceled = true;
 
@@ -251,6 +280,9 @@ public boolean isCanceled() {
         }
     }
 
+    /**
+     * 没有内容
+     */
     static final class NoContentResponseBody extends ResponseBody {
         private final MediaType contentType;
         private final long contentLength;
