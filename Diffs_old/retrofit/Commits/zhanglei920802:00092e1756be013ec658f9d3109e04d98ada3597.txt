diff --git a/doc/retrofit.vsdx b/doc/retrofit.vsdx
new file mode 100644
index 000000000..7256b676f
Binary files /dev/null and b/doc/retrofit.vsdx differ
diff --git a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
index b3fc6eb97..e14ae3af7 100644
--- a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
@@ -41,6 +41,9 @@ public Type responseType() {
 
             @Override
             public Call<Object> adapt(Call<Object> call) {
+                /**
+                 * 这里返回了默认的call,而没有立即执行
+                 */
                 return call;
             }
         };
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 6c60793a2..abeca9cf0 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -42,6 +42,11 @@
      */
     private boolean executed;
 
+    /**
+     * 构造一个call
+     * @param serviceMethod
+     * @param args
+     */
     OkHttpCall(ServiceMethod<T, ?> serviceMethod, Object[] args) {
         this.serviceMethod = serviceMethod;
         this.args = args;
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 9732a0489..17d498157 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -126,10 +126,17 @@
      */
     @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety.
     public <T> T create(final Class<T> service) {
+        //检验是不是接口
         Utils.validateServiceInterface(service);
+
+        //校验服务中的方法
         if (validateEagerly) {
             eagerlyValidateMethods(service);
         }
+
+        /**
+         * 创建代理类
+         */
         return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
                 new InvocationHandler() {
                     private final Platform platform = Platform.get();
@@ -141,20 +148,37 @@ public Object invoke(Object proxy, Method method, Object... args)
                         if (method.getDeclaringClass() == Object.class) {
                             return method.invoke(this, args);
                         }
+
+                        //java8中的默认方法
                         if (platform.isDefaultMethod(method)) {
                             return platform.invokeDefaultMethod(method, service, proxy, args);
                         }
+
+                        //通过接口中定义的方法找到对应的ServiceMethod
                         ServiceMethod<Object, Object> serviceMethod =
                                 (ServiceMethod<Object, Object>) loadServiceMethod(method);
+
+
                         OkHttpCall<Object> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+                        /**
+                         * 返回一个call的代理
+                         */
                         return serviceMethod.callAdapter.adapt(okHttpCall);
                     }
                 });
     }
 
+    /**
+     * 校验方法
+     *
+     * @param service
+     */
     private void eagerlyValidateMethods(Class<?> service) {
         Platform platform = Platform.get();
         for (Method method : service.getDeclaredMethods()) {
+            /**
+             * 接口默认方法只有在jdk8之后才有
+             */
             if (!platform.isDefaultMethod(method)) {
                 loadServiceMethod(method);
             }
@@ -162,9 +186,11 @@ private void eagerlyValidateMethods(Class<?> service) {
     }
 
     ServiceMethod<?, ?> loadServiceMethod(Method method) {
+        //默认从cache中取
         ServiceMethod<?, ?> result = serviceMethodCache.get(method);
         if (result != null) return result;
 
+        //读写的时候都加锁
         synchronized (serviceMethodCache) {
             result = serviceMethodCache.get(method);
             if (result == null) {
diff --git a/samples/src/main/java/com/example/retrofit/DynamicBaseUrl.java b/samples/src/main/java/com/example/retrofit/DynamicBaseUrl.java
index 882482242..55a444f77 100644
--- a/samples/src/main/java/com/example/retrofit/DynamicBaseUrl.java
+++ b/samples/src/main/java/com/example/retrofit/DynamicBaseUrl.java
@@ -16,6 +16,7 @@
 package com.example.retrofit;
 
 import java.io.IOException;
+
 import okhttp3.HttpUrl;
 import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
@@ -74,13 +75,13 @@ public static void main(String... args) throws IOException {
 
     Pop pop = retrofit.create(Pop.class);
 
-    Response<ResponseBody> response1 = pop.robots().execute();
-    System.out.println("Response from: " + response1.raw().request().url());
-    System.out.println(response1.body().string());
+//    Response<ResponseBody> response1 = pop.robots().execute();
+//    System.out.println("Response from: " + response1.raw().request().url());
+//    System.out.println(response1.body().string());
 
     hostSelectionInterceptor.setHost("www.pepsi.com");
 
-    pop.robots().enqueue(new Callback<ResponseBody>(){
+    pop.robots()/*将服务方法加入到队列*/.enqueue(new Callback<ResponseBody>(){
         @Override
         public void onResponse(Call<ResponseBody> call, Response<ResponseBody> response) {
             try {
@@ -96,7 +97,7 @@ public void onFailure(Call<ResponseBody> call, Throwable t) {
 
         }
     });
-    Response<ResponseBody> response2 = pop.robots().execute();
+      //   Response<ResponseBody> response2 = pop.robots().execute();
 //    System.out.println("Response from: " + response2.raw().request().url());
 //    System.out.println(response2.body().string());
   }
