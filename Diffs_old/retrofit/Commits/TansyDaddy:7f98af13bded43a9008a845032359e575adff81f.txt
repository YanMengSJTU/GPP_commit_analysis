diff --git a/retrofit/src/main/java/retrofit/Call.java b/retrofit/src/main/java/retrofit/Call.java
index 9e96e45c5..feca6922d 100644
--- a/retrofit/src/main/java/retrofit/Call.java
+++ b/retrofit/src/main/java/retrofit/Call.java
@@ -27,10 +27,28 @@
  * #enqueue}. In either case the call can be canceled at any time with {@link #cancel}. A call that
  * is busy writing its request or reading its response may receive a {@link IOException}; this is
  * working as designed.
+ *
+ * @modify by FanLei
+ * add dynamicBaseUrl and cachePloy param
  */
 public interface Call<T> extends Cloneable {
   Response<T> execute() throws IOException;
+
+  Response<T> execute(String dynamicBaseUrl) throws IOException;
+
+  Response<T> execute(RequestFactory.CachePloy cachePloy) throws IOException;
+
+  Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException;
+
   void enqueue(Callback<T> callback);
+
+  void enqueue(Callback<T> callback, String dynamicBaseUrl);
+
+  void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy);
+
+  void enqueue(Callback<T> callback, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy);
+
   void cancel();
+
   Call<T> clone();
 }
diff --git a/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
index 06a29ddae..23ffbc13b 100644
--- a/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
@@ -53,14 +53,46 @@
       this.delegate = delegate;
     }
 
-    @Override public void enqueue(Callback<T> callback) {
+    @Override
+    public void enqueue(Callback<T> callback) {
       delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback));
     }
 
-    @Override public Response<T> execute() throws IOException {
+    @Override
+    public void enqueue(Callback<T> callback, String dynamicBaseUrl) {
+      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), dynamicBaseUrl);
+    }
+
+    @Override
+    public void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy) {
+      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), cachePloy);
+    }
+
+    @Override
+    public void enqueue(Callback<T> callback, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
+      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), dynamicBaseUrl, cachePloy);
+    }
+
+    @Override
+    public Response<T> execute() throws IOException {
       return delegate.execute();
     }
 
+    @Override
+    public Response<T> execute(String dynamicBaseUrl) throws IOException {
+      return delegate.execute(dynamicBaseUrl);
+    }
+
+    @Override
+    public Response<T> execute(RequestFactory.CachePloy cachePloy) throws IOException {
+      return delegate.execute(cachePloy);
+    }
+
+    @Override
+    public Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException {
+      return delegate.execute(dynamicBaseUrl, cachePloy);
+    }
+
     @Override public void cancel() {
       delegate.cancel();
     }
diff --git a/retrofit/src/main/java/retrofit/OkHttpCall.java b/retrofit/src/main/java/retrofit/OkHttpCall.java
index e649fee74..bb82727c2 100644
--- a/retrofit/src/main/java/retrofit/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit/OkHttpCall.java
@@ -101,6 +101,71 @@ private void callSuccess(Response<T> response) {
     });
   }
 
+  @Override
+  public void enqueue(Callback<T> callback, String dynamicBaseUrl) {
+    enqueue(callback,dynamicBaseUrl, RequestFactory.CachePloy.FORCE_NETWORK);
+  }
+
+  @Override
+  public void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy) {
+    enqueue(callback,null, cachePloy);
+  }
+
+  @Override
+  public void enqueue(final Callback<T> callBack, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
+    synchronized (this) {
+      if (executed) throw new IllegalStateException("Already executed");
+      executed = true;
+    }
+
+    com.squareup.okhttp.Call rawCall;
+    try {
+      rawCall = createRawCall(dynamicBaseUrl,cachePloy);
+    } catch (Throwable t) {
+      callBack.onFailure(t);
+      return;
+    }
+    if (canceled) {
+      rawCall.cancel();
+    }
+    this.rawCall = rawCall;
+
+    rawCall.enqueue(new com.squareup.okhttp.Callback() {
+      private void callFailure(Throwable e) {
+        try {
+          callBack.onFailure(e);
+        } catch (Throwable t) {
+          t.printStackTrace();
+        }
+      }
+
+      private void callSuccess(Response<T> response) {
+        try {
+          callBack.onResponse(response, retrofit);
+        } catch (Throwable t) {
+          t.printStackTrace();
+        }
+      }
+
+      @Override
+      public void onFailure(Request request, IOException e) {
+        callFailure(e);
+      }
+
+      @Override
+      public void onResponse(com.squareup.okhttp.Response rawResponse) {
+        Response<T> response;
+        try {
+          response = parseResponse(rawResponse);
+        } catch (Throwable e) {
+          callFailure(e);
+          return;
+        }
+        callSuccess(response);
+      }
+    });
+  }
+
   public Response<T> execute() throws IOException {
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already executed");
@@ -116,10 +181,41 @@ private void callSuccess(Response<T> response) {
     return parseResponse(rawCall.execute());
   }
 
+  @Override
+  public Response<T> execute(String dynamicBaseUrl) throws IOException {
+    return execute(dynamicBaseUrl, RequestFactory.CachePloy.FORCE_NETWORK);
+  }
+
+  @Override
+  public Response<T> execute(RequestFactory.CachePloy cachePloy) throws IOException {
+    return execute(null, cachePloy);
+  }
+
+
+  @Override
+  public Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException {
+    synchronized (this) {
+      if (executed) throw new IllegalStateException("Already executed");
+      executed = true;
+    }
+
+    com.squareup.okhttp.Call rawCall = createRawCall(dynamicBaseUrl,cachePloy);
+    if (canceled) {
+      rawCall.cancel();
+    }
+    this.rawCall = rawCall;
+
+    return parseResponse(rawCall.execute());
+  }
+
   private com.squareup.okhttp.Call createRawCall() {
     return retrofit.client().newCall(requestFactory.create(args));
   }
 
+  private com.squareup.okhttp.Call createRawCall(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
+    return retrofit.client().newCall(requestFactory.create(dynamicBaseUrl, cachePloy, args));
+  }
+
   private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {
     ResponseBody rawBody = rawResponse.body();
 
@@ -236,4 +332,5 @@ void throwIfCaught() throws IOException {
       }
     }
   }
+
 }
diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 65eed2c1a..294df18ca 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -68,6 +68,32 @@
     }
   }
 
+  /**
+   * 增加Request.Builder动态传入
+   */
+  RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,
+                 MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart, Request.Builder reqBuilder) {
+    this.method = method;
+    this.baseUrl = baseUrl;
+    this.relativeUrl = relativeUrl;
+    this.requestBuilder = reqBuilder;
+    this.contentType = contentType;
+    this.hasBody = hasBody;
+
+    if (headers != null) {
+      requestBuilder.headers(headers);
+    }
+
+    if (isFormEncoded) {
+      // Will be set to 'body' in 'build'.
+      formEncodingBuilder = new FormEncodingBuilder();
+    } else if (isMultipart) {
+      // Will be set to 'body' in 'build'.
+      multipartBuilder = new MultipartBuilder();
+      multipartBuilder.type(MultipartBuilder.FORM);
+    }
+  }
+
   void setRelativeUrl(String relativeUrl) {
     this.relativeUrl = relativeUrl;
   }
@@ -226,4 +252,8 @@ Request build() {
       delegate.writeTo(sink);
     }
   }
+
+  public Request.Builder getRequestBuilder() {
+    return requestBuilder;
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/RequestFactory.java b/retrofit/src/main/java/retrofit/RequestFactory.java
index 0e1668198..bbbac7c72 100644
--- a/retrofit/src/main/java/retrofit/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit/RequestFactory.java
@@ -15,11 +15,17 @@
  */
 package retrofit;
 
+import android.text.TextUtils;
+
+import com.squareup.okhttp.CacheControl;
 import com.squareup.okhttp.Headers;
+import com.squareup.okhttp.HttpUrl;
 import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.Request;
 
-final class RequestFactory {
+import java.util.concurrent.TimeUnit;
+
+public final class RequestFactory {
   private final String method;
   private final BaseUrl baseUrl;
   private final String relativeUrl;
@@ -30,6 +36,10 @@
   private final boolean isMultipart;
   private final RequestBuilderAction[] requestBuilderActions;
 
+    public enum CachePloy {
+        MAX_AGE_0, MAX_STALE, FORCE_NETWORK, FORCE_CACHE
+    }
+
   RequestFactory(String method, BaseUrl baseUrl, String relativeUrl, Headers headers,
       MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,
       RequestBuilderAction[] requestBuilderActions) {
@@ -65,4 +75,94 @@ Request create(Object... args) {
 
     return requestBuilder.build();
   }
+
+    /**
+     * 增加动态传入接口缓存策略
+     * @add by FanLei
+     */
+    Request create(CachePloy cachePloy, Object... args) {
+        Request.Builder reqBuilder = null;
+
+        if (cachePloy == CachePloy.FORCE_NETWORK) {// 强制网络
+            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_NETWORK);
+        } else if (cachePloy == CachePloy.FORCE_CACHE) {// 强制缓存（onIfCached+maxStale=MAX.VALUE）
+            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_CACHE);
+        } else if (cachePloy == CachePloy.MAX_AGE_0) {// 优先网络
+            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
+                    .maxAge(0, TimeUnit.SECONDS)
+                    .build());
+        } else if (cachePloy == CachePloy.MAX_STALE) {// 优先缓存(未过期缓存，默认30天)
+            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
+                    .maxStale(30, TimeUnit.DAYS)
+                    .build());
+        }
+
+        RequestBuilder requestBuilder =
+                new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,
+                        isFormEncoded, isMultipart, reqBuilder);
+
+        if (args != null) {
+            RequestBuilderAction[] actions = requestBuilderActions;
+            if (actions.length != args.length) {
+                throw new IllegalArgumentException("Argument count ("
+                        + args.length
+                        + ") doesn't match action count ("
+                        + actions.length
+                        + ")");
+            }
+            for (int i = 0, count = args.length; i < count; i++) {
+                actions[i].perform(requestBuilder, args[i]);
+            }
+        }
+
+        return requestBuilder.build();
+    }
+
+    /**
+     * 增加动态传入baseURL和接口缓存策略
+     * @add by FanLei
+     */
+    Request create(String dymicBaseUrl, CachePloy cachePloy, Object... args) {
+        Request.Builder reqBuilder = null;
+
+        if (cachePloy == CachePloy.FORCE_NETWORK) {// 强制网络
+            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_NETWORK);
+        } else if (cachePloy == CachePloy.FORCE_CACHE) {// 强制缓存（onIfCached+maxStale=MAX.VALUE）
+            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_CACHE);
+        } else if (cachePloy == CachePloy.MAX_AGE_0) {// 优先网络
+            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
+                    .maxAge(0, TimeUnit.SECONDS)
+                    .build());
+        } else if (cachePloy == CachePloy.MAX_STALE) {// 优先缓存(未过期缓存，默认30天)
+            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
+                    .maxStale(30, TimeUnit.DAYS)
+                    .build());
+        }
+
+        HttpUrl baseHttpUrl = baseUrl.url();
+        if (!TextUtils.isEmpty(dymicBaseUrl)) {
+            baseHttpUrl = HttpUrl.parse(dymicBaseUrl);
+        }
+
+        RequestBuilder requestBuilder =
+                new RequestBuilder(method, baseHttpUrl, relativeUrl, headers, contentType, hasBody,
+                        isFormEncoded, isMultipart, reqBuilder);
+
+        if (args != null) {
+            RequestBuilderAction[] actions = requestBuilderActions;
+            if (actions.length != args.length) {
+                throw new IllegalArgumentException("Argument count ("
+                        + args.length
+                        + ") doesn't match action count ("
+                        + actions.length
+                        + ")");
+            }
+            for (int i = 0, count = args.length; i < count; i++) {
+                actions[i].perform(requestBuilder, args[i]);
+            }
+        }
+
+        return requestBuilder.build();
+    }
+
 }
