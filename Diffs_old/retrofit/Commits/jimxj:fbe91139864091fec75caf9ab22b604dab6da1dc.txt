diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java
index ef6db294e..3be1a8a9e 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit/ObservableCallAdapterFactoryTest.java
@@ -49,8 +49,8 @@
   @Before public void setUp() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new StringConverterFactory())
-        .callAdapterFactory(ObservableCallAdapterFactory.create())
+        .addConverterFactory(new StringConverterFactory())
+        .addCallAdapterFactory(ObservableCallAdapterFactory.create())
         .build();
     service = retrofit.create(Service.class);
   }
diff --git a/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java
index adc79d39e..3598056be 100644
--- a/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java
+++ b/retrofit-converters/gson/src/main/java/retrofit/GsonConverterFactory.java
@@ -45,6 +45,7 @@ private GsonConverterFactory(Gson gson) {
     this.gson = gson;
   }
 
+  /** Create a converter for {@code type}. */
   @Override public Converter<?> get(Type type) {
     TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));
     return new GsonConverter<>(adapter);
diff --git a/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java
index 8d58997dc..8dadf9cb5 100644
--- a/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java
+++ b/retrofit-converters/gson/src/test/java/retrofit/GsonConverterFactoryTest.java
@@ -89,7 +89,7 @@
         .create();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(GsonConverterFactory.create(gson))
+        .addConverterFactory(GsonConverterFactory.create(gson))
         .build();
     service = retrofit.create(Service.class);
   }
diff --git a/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java
index 8f4efc0e8..9949bb18a 100644
--- a/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java
+++ b/retrofit-converters/jackson/src/main/java/retrofit/JacksonConverterFactory.java
@@ -40,6 +40,7 @@ private JacksonConverterFactory(ObjectMapper mapper) {
     this.mapper = mapper;
   }
 
+  /** Create a converter for {@code type}. */
   @Override public Converter<?> get(Type type) {
     JavaType javaType = mapper.getTypeFactory().constructType(type);
     ObjectWriter writer = mapper.writerWithType(javaType);
diff --git a/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterFactoryTest.java
similarity index 98%
rename from retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java
rename to retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterFactoryTest.java
index 9df401a7b..83ba86fe6 100644
--- a/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterTest.java
+++ b/retrofit-converters/jackson/src/test/java/retrofit/JacksonConverterFactoryTest.java
@@ -38,7 +38,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class JacksonConverterTest {
+public class JacksonConverterFactoryTest {
   interface AnInterface {
     String getName();
   }
@@ -121,7 +121,7 @@
 
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(JacksonConverterFactory.create(mapper))
+        .addConverterFactory(JacksonConverterFactory.create(mapper))
         .build();
     service = retrofit.create(Service.class);
   }
diff --git a/retrofit-converters/moshi/src/main/java/retrofit/MoshiConverterFactory.java b/retrofit-converters/moshi/src/main/java/retrofit/MoshiConverterFactory.java
index 75506f511..e473964a7 100644
--- a/retrofit-converters/moshi/src/main/java/retrofit/MoshiConverterFactory.java
+++ b/retrofit-converters/moshi/src/main/java/retrofit/MoshiConverterFactory.java
@@ -38,6 +38,7 @@ private MoshiConverterFactory(Moshi moshi) {
     this.moshi = moshi;
   }
 
+  /** Create a converter for {@code type}. */
   @Override public Converter<?> get(Type type) {
     JsonAdapter<Object> adapter = moshi.adapter(type);
     return new MoshiConverter<>(adapter);
diff --git a/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterFactoryTest.java
similarity index 97%
rename from retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java
rename to retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterFactoryTest.java
index f919b96f6..b14da4b7e 100644
--- a/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterTest.java
+++ b/retrofit-converters/moshi/src/test/java/retrofit/MoshiConverterFactoryTest.java
@@ -32,7 +32,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public final class MoshiConverterTest {
+public final class MoshiConverterFactoryTest {
   interface AnInterface {
     String getName();
   }
@@ -88,7 +88,7 @@
         .build();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(MoshiConverterFactory.create(moshi))
+        .addConverterFactory(MoshiConverterFactory.create(moshi))
         .build();
     service = retrofit.create(Service.class);
   }
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit/ProtoConverterFactory.java b/retrofit-converters/protobuf/src/main/java/retrofit/ProtoConverterFactory.java
index bcb9d2640..f2249db1d 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit/ProtoConverterFactory.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit/ProtoConverterFactory.java
@@ -26,13 +26,18 @@ public static ProtoConverterFactory create() {
     return new ProtoConverterFactory();
   }
 
+
+  /**
+   * Create a converter for {@code type} provided it is a {@link MessageLite} type. Returns null
+   * otherwise.
+   */
   @Override public Converter<?> get(Type type) {
     if (!(type instanceof Class<?>)) {
-      throw new IllegalArgumentException("Expected a raw Class<?> but was " + type);
+      return null;
     }
     Class<?> c = (Class<?>) type;
     if (!MessageLite.class.isAssignableFrom(c)) {
-      throw new IllegalArgumentException("Expected a protobuf message but was " + c.getName());
+      return null;
     }
 
     Parser<MessageLite> parser;
@@ -42,7 +47,7 @@ public static ProtoConverterFactory create() {
       parser = (Parser<MessageLite>) field.get(null);
     } catch (NoSuchFieldException | IllegalAccessException e) {
       throw new IllegalArgumentException(
-          "Expected a protobuf message but " + c.getName() + " had no PARSER field.");
+          "Found a protobuf message but " + c.getName() + " had no PARSER field.");
     }
 
     return new ProtoConverter<>(parser);
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
similarity index 81%
rename from retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java
rename to retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
index ed5caa207..1a91f493c 100644
--- a/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterTest.java
+++ b/retrofit-converters/protobuf/src/test/java/retrofit/ProtoConverterFactoryTest.java
@@ -34,7 +34,7 @@
 import static org.junit.Assert.fail;
 import static retrofit.PhoneProtos.Phone;
 
-public final class ProtoConverterTest {
+public final class ProtoConverterFactoryTest {
   interface Service {
     @GET("/") Call<Phone> get();
     @POST("/") Call<Phone> post(@Body Phone impl);
@@ -49,7 +49,7 @@
   @Before public void setUp() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(ProtoConverterFactory.create())
+        .addConverterFactory(ProtoConverterFactory.create())
         .build();
     service = retrofit.create(Service.class);
   }
@@ -85,7 +85,12 @@
       service.wrongClass();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a protobuf message but was java.lang.String");
+      assertThat(e).hasMessage("Unable to create converter for class java.lang.String\n"
+          + "    for method Service.wrongClass");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for class java.lang.String. Tried:\n"
+              + " * retrofit.ProtoConverterFactory\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
@@ -97,7 +102,12 @@
       service.wrongType();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a raw Class<?> but was java.util.List<java.lang.String>");
+      assertThat(e).hasMessage("Unable to create converter for java.util.List<java.lang.String>\n"
+          + "    for method Service.wrongType");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for java.util.List<java.lang.String>. Tried:\n"
+              + " * retrofit.ProtoConverterFactory\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/SimpleXmlConverterFactory.java b/retrofit-converters/simplexml/src/main/java/retrofit/SimpleXmlConverterFactory.java
index 8f394c2c4..499839292 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/SimpleXmlConverterFactory.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit/SimpleXmlConverterFactory.java
@@ -54,9 +54,10 @@ public boolean isStrict() {
     return strict;
   }
 
+  /** Create a converter for {@code type} provided it is a class. Returns null otherwise. */
   @Override public Converter<?> get(Type type) {
     if (!(type instanceof Class)) {
-      throw new IllegalArgumentException("Expected a raw class but was " + type);
+      return null;
     }
     Class<?> cls = (Class<?>) type;
     return new SimpleXmlConverter<>(cls, serializer, strict);
diff --git a/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java b/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterFactoryTest.java
similarity index 96%
rename from retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java
rename to retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterFactoryTest.java
index 20df7596f..d0c6421ef 100644
--- a/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterTest.java
+++ b/retrofit-converters/simplexml/src/test/java/retrofit/SimpleXmlConverterFactoryTest.java
@@ -34,7 +34,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-public class SimpleXmlConverterTest {
+public class SimpleXmlConverterFactoryTest {
   interface Service {
     @GET("/") Call<MyObject> get();
     @POST("/") Call<MyObject> post(@Body MyObject impl);
@@ -50,7 +50,7 @@
     Persister persister = new Persister(format);
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(SimpleXmlConverterFactory.create(persister))
+        .addConverterFactory(SimpleXmlConverterFactory.create(persister))
         .build();
     service = retrofit.create(Service.class);
   }
diff --git a/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java
index 135e50d61..ebac705eb 100644
--- a/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java
+++ b/retrofit-converters/wire/src/main/java/retrofit/WireConverterFactory.java
@@ -39,13 +39,17 @@ private WireConverterFactory(Wire wire) {
     this.wire = wire;
   }
 
+  /**
+   * Create a converter for {@code type} provided it is a {@link Message} type. Returns null
+   * otherwise.
+   */
   @Override public Converter<?> get(Type type) {
     if (!(type instanceof Class<?>)) {
-      throw new IllegalArgumentException("Expected a raw Class<?> but was " + type);
+      return null;
     }
     Class<?> c = (Class<?>) type;
     if (!Message.class.isAssignableFrom(c)) {
-      throw new IllegalArgumentException("Expected a proto message but was " + c.getName());
+      return null;
     }
     //noinspection unchecked
     return new WireConverter<>(wire, (Class<Message>) c);
diff --git a/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
similarity index 80%
rename from retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java
rename to retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
index 9b395f93d..3d22ca7d2 100644
--- a/retrofit-converters/wire/src/test/java/retrofit/WireConverterTest.java
+++ b/retrofit-converters/wire/src/test/java/retrofit/WireConverterFactoryTest.java
@@ -33,7 +33,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 
-public final class WireConverterTest {
+public final class WireConverterFactoryTest {
   interface Service {
     @GET("/") Call<Phone> get();
     @POST("/") Call<Phone> post(@Body Phone impl);
@@ -48,7 +48,7 @@
   @Before public void setUp() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(WireConverterFactory.create())
+        .addConverterFactory(WireConverterFactory.create())
         .build();
     service = retrofit.create(Service.class);
   }
@@ -84,7 +84,12 @@
       service.wrongClass();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a proto message but was java.lang.String");
+      assertThat(e).hasMessage("Unable to create converter for class java.lang.String\n"
+          + "    for method Service.wrongClass");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for class java.lang.String. Tried:\n"
+              + " * retrofit.WireConverterFactory\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
@@ -96,7 +101,12 @@
       service.wrongType();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a raw Class<?> but was java.util.List<java.lang.String>");
+      assertThat(e).hasMessage("Unable to create converter for java.util.List<java.lang.String>\n"
+          + "    for method Service.wrongType");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for java.util.List<java.lang.String>. Tried:\n"
+              + " * retrofit.WireConverterFactory\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
diff --git a/retrofit/src/main/java/retrofit/Converter.java b/retrofit/src/main/java/retrofit/Converter.java
index 7405a9898..5df86878a 100644
--- a/retrofit/src/main/java/retrofit/Converter.java
+++ b/retrofit/src/main/java/retrofit/Converter.java
@@ -29,6 +29,7 @@
   RequestBody toBody(T value);
 
   interface Factory {
+    /** Create a converter for {@code type}. Returns null if the type cannot be handled. */
     Converter<?> get(Type type);
   }
 }
diff --git a/retrofit/src/main/java/retrofit/DefaultCallAdapter.java b/retrofit/src/main/java/retrofit/DefaultCallAdapter.java
index 00e9b524b..468af3161 100644
--- a/retrofit/src/main/java/retrofit/DefaultCallAdapter.java
+++ b/retrofit/src/main/java/retrofit/DefaultCallAdapter.java
@@ -31,10 +31,6 @@
       Type responseType = Utils.getCallResponseType(returnType);
       return new DefaultCallAdapter<>(responseType);
     }
-
-    @Override public String toString() {
-      return "Default";
-    }
   };
 
   private final Type responseType;
diff --git a/retrofit/src/main/java/retrofit/MethodHandler.java b/retrofit/src/main/java/retrofit/MethodHandler.java
index f0231aef8..5be68ea25 100644
--- a/retrofit/src/main/java/retrofit/MethodHandler.java
+++ b/retrofit/src/main/java/retrofit/MethodHandler.java
@@ -19,63 +19,53 @@
 import com.squareup.okhttp.ResponseBody;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.List;
 import retrofit.http.Streaming;
 
-import static retrofit.Utils.methodError;
-
 final class MethodHandler<T> {
   @SuppressWarnings("unchecked")
   static MethodHandler<?> create(Method method, OkHttpClient client, BaseUrl baseUrl,
-      CallAdapter.Factory callAdapterFactory, Converter.Factory converterFactory) {
+      List<CallAdapter.Factory> callAdapterFactories, List<Converter.Factory> converterFactories) {
     CallAdapter<Object> callAdapter =
-        (CallAdapter<Object>) createCallAdapter(method, callAdapterFactory);
+        (CallAdapter<Object>) createCallAdapter(method, callAdapterFactories);
     Converter<Object> responseConverter =
         (Converter<Object>) createResponseConverter(method, callAdapter.responseType(),
-            converterFactory);
-    RequestFactory requestFactory = RequestFactoryParser.parse(method, baseUrl, converterFactory);
+            converterFactories);
+    RequestFactory requestFactory = RequestFactoryParser.parse(method, baseUrl, converterFactories);
     return new MethodHandler<>(client, requestFactory, callAdapter, responseConverter);
   }
 
   private static CallAdapter<?> createCallAdapter(Method method,
-      CallAdapter.Factory adapterFactory) {
+      List<CallAdapter.Factory> adapterFactories) {
     Type returnType = method.getGenericReturnType();
     if (Utils.hasUnresolvableType(returnType)) {
-      throw methodError(method,
+      throw Utils.methodError(method,
           "Method return type must not include a type variable or wildcard: %s", returnType);
     }
-
     if (returnType == void.class) {
-      throw methodError(method, "Service methods cannot return void.");
+      throw Utils.methodError(method, "Service methods cannot return void.");
     }
-
-    CallAdapter<?> adapter = adapterFactory.get(returnType);
-    if (adapter == null) {
-      throw methodError(method, "Call adapter factory '%s' was unable to handle return type %s",
-          adapterFactory, returnType);
+    try {
+      return Utils.resolveCallAdapter(adapterFactories, returnType);
+    } catch (RuntimeException e) { // Wide exception range because factories are user code.
+      throw Utils.methodError(e, method, "Unable to create call adapter for %s", returnType);
     }
-    return adapter;
+
   }
 
   private static Converter<?> createResponseConverter(Method method, Type responseType,
-      Converter.Factory converterFactory) {
+      List<Converter.Factory> converterFactories) {
+    // TODO how can we not special case this? See TODO below, maybe...
     if (responseType == ResponseBody.class) {
       boolean isStreaming = method.isAnnotationPresent(Streaming.class);
       return new OkHttpResponseBodyConverter(isStreaming);
     }
 
-    if (converterFactory == null) {
-      throw methodError(method, "Method response type is "
-          + responseType
-          + " but no converter factory registered. "
-          + "Either add a converter factory to the Retrofit instance or use ResponseBody.");
-    }
-
-    Converter<?> converter = converterFactory.get(responseType);
-    if (converter == null) {
-      throw methodError(method, "Converter factory '%s' was unable to handle response type %s",
-          converterFactory, responseType);
+    try {
+      return Utils.resolveConverter(converterFactories, responseType);
+    } catch (RuntimeException e) { // Wide exception range because factories are user code.
+      throw Utils.methodError(e, method, "Unable to create converter for %s", responseType);
     }
-    return converter;
   }
 
   private final OkHttpClient client;
diff --git a/retrofit/src/main/java/retrofit/OkHttpBodyConverterFactory.java b/retrofit/src/main/java/retrofit/OkHttpBodyConverterFactory.java
new file mode 100644
index 000000000..8e06594a3
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/OkHttpBodyConverterFactory.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.ResponseBody;
+import java.lang.reflect.Type;
+
+final class OkHttpBodyConverterFactory implements Converter.Factory {
+  @Override public Converter<?> get(Type type) {
+    if (!(type instanceof Class)) {
+      return null;
+    }
+    Class<?> cls = (Class<?>) type;
+    if (RequestBody.class.isAssignableFrom(cls)) {
+      return new OkHttpRequestBodyConverter();
+    }
+    if (ResponseBody.class.isAssignableFrom(cls)) {
+      return new OkHttpResponseBodyConverter(false);
+    }
+    return null;
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/RequestBuilderAction.java b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
index bc8b1a472..46c43ddc5 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilderAction.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
@@ -17,6 +17,7 @@
 
 import com.squareup.okhttp.Headers;
 import java.lang.reflect.Array;
+import java.util.List;
 import java.util.Map;
 
 import static retrofit.Utils.checkNotNull;
@@ -205,11 +206,11 @@
   }
 
   static final class PartMap extends RequestBuilderAction {
-    private final Converter.Factory converterFactory;
+    private final List<Converter.Factory> converterFactories;
     private final String transferEncoding;
 
-    PartMap(Converter.Factory converterFactory, String transferEncoding) {
-      this.converterFactory = converterFactory;
+    PartMap(List<Converter.Factory> converterFactories, String transferEncoding) {
+      this.converterFactories = converterFactories;
       this.transferEncoding = transferEncoding;
     }
 
@@ -230,9 +231,11 @@
         Headers headers = Headers.of(
             "Content-Disposition", "name=\"" + entryKey + "\"",
             "Content-Transfer-Encoding", transferEncoding);
+
+        Class<?> entryClass = entryValue.getClass();
         //noinspection unchecked
         Converter<Object> converter =
-            (Converter<Object>) converterFactory.get(entryValue.getClass());
+            (Converter<Object>) Utils.resolveConverter(converterFactories, entryClass);
         builder.addPart(headers, converter.toBody(entryValue));
       }
     }
diff --git a/retrofit/src/main/java/retrofit/RequestFactoryParser.java b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
index cae07839d..90d52e5ec 100644
--- a/retrofit/src/main/java/retrofit/RequestFactoryParser.java
+++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
@@ -16,11 +16,11 @@
 package retrofit;
 
 import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
 import java.util.LinkedHashSet;
+import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Matcher;
@@ -54,10 +54,11 @@
   private static final Pattern PARAM_NAME_REGEX = Pattern.compile(PARAM);
   private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");
 
-  static RequestFactory parse(Method method, BaseUrl baseUrl, Converter.Factory converterFactory) {
+  static RequestFactory parse(Method method, BaseUrl baseUrl,
+      List<Converter.Factory> converterFactories) {
     RequestFactoryParser parser = new RequestFactoryParser(method);
     parser.parseMethodAnnotations();
-    parser.parseParameters(converterFactory);
+    parser.parseParameters(converterFactories);
     return parser.toRequestFactory(baseUrl);
   }
 
@@ -83,6 +84,11 @@ private RequestFactory toRequestFactory(BaseUrl baseUrl) {
         isFormEncoded, isMultipart, requestBuilderActions);
   }
 
+  private RuntimeException parameterError(Throwable cause, int index, String message,
+      Object... args) {
+    return methodError(cause, method, message + " (parameter #" + (index + 1) + ")", args);
+  }
+
   private RuntimeException parameterError(int index, String message, Object... args) {
     return methodError(method, message + " (parameter #" + (index + 1) + ")", args);
   }
@@ -186,7 +192,7 @@ private void parseHttpMethodAndPath(String httpMethod, String value, boolean has
     return builder.build();
   }
 
-  private void parseParameters(Converter.Factory converterFactory) {
+  private void parseParameters(List<Converter.Factory> converterFactories) {
     Type[] methodParameterTypes = method.getGenericParameterTypes();
     Annotation[][] methodParameterAnnotationArrays = method.getParameterAnnotations();
 
@@ -291,16 +297,11 @@ private void parseParameters(Converter.Factory converterFactory) {
                 "Content-Disposition", "name=\"" + part.value() + "\"",
                 "Content-Transfer-Encoding", part.encoding());
             Converter<?> converter;
-            if (methodParameterType == RequestBody.class) {
-              converter = new OkHttpRequestBodyConverter();
-            } else {
-              if (converterFactory == null) {
-                throw parameterError(i, "@Part parameter is %s"
-                    + " but no converter factory registered. Either add a converter factory"
-                    + " to the Retrofit instance or use RequestBody.",
-                    methodParameterType);
-              }
-              converter = converterFactory.get(methodParameterType);
+            try {
+              converter = Utils.resolveConverter(converterFactories, methodParameterType);
+            } catch (RuntimeException e) { // Wide exception range because factories are user code.
+              throw parameterError(e, i, "Unable to create @Part converter for %s",
+                  methodParameterType);
             }
             action = new RequestBuilderAction.Part<>(headers, converter);
             gotPart = true;
@@ -314,7 +315,7 @@ private void parseParameters(Converter.Factory converterFactory) {
               throw parameterError(i, "@PartMap parameter type must be Map.");
             }
             PartMap partMap = (PartMap) methodParameterAnnotation;
-            action = new RequestBuilderAction.PartMap(converterFactory, partMap.encoding());
+            action = new RequestBuilderAction.PartMap(converterFactories, partMap.encoding());
             gotPart = true;
 
           } else if (methodParameterAnnotation instanceof Body) {
@@ -327,18 +328,12 @@ private void parseParameters(Converter.Factory converterFactory) {
             }
 
             Converter<?> converter;
-            if (methodParameterType == RequestBody.class) {
-              converter = new OkHttpRequestBodyConverter();
-            } else {
-              if (converterFactory == null) {
-                throw parameterError(i, "@Body parameter is %s"
-                        + " but no converter factory registered. Either add a converter factory"
-                        + " to the Retrofit instance or use RequestBody.",
-                    methodParameterType);
-              }
-              converter = converterFactory.get(methodParameterType);
+            try {
+              converter = Utils.resolveConverter(converterFactories, methodParameterType);
+            } catch (RuntimeException e) { // Wide exception range because factories are user code.
+              throw parameterError(e, i, "Unable to create @Body converter for %s",
+                  methodParameterType);
             }
-
             action = new RequestBuilderAction.Body<>(converter);
             gotBody = true;
           }
diff --git a/retrofit/src/main/java/retrofit/Retrofit.java b/retrofit/src/main/java/retrofit/Retrofit.java
index 418b23c00..3f0561eac 100644
--- a/retrofit/src/main/java/retrofit/Retrofit.java
+++ b/retrofit/src/main/java/retrofit/Retrofit.java
@@ -22,7 +22,10 @@
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.LinkedHashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
 import retrofit.http.HTTP;
@@ -90,16 +93,16 @@
 
   private final OkHttpClient client;
   private final BaseUrl baseUrl;
-  private final Converter.Factory converterFactory;
-  private final CallAdapter.Factory adapterFactory;
+  private final List<Converter.Factory> converterFactories;
+  private final List<CallAdapter.Factory> adapterFactories;
   private final Executor callbackExecutor;
 
-  private Retrofit(OkHttpClient client, BaseUrl baseUrl, Converter.Factory converterFactory,
-      CallAdapter.Factory adapterFactory, Executor callbackExecutor) {
+  private Retrofit(OkHttpClient client, BaseUrl baseUrl, List<Converter.Factory> converterFactories,
+      List<CallAdapter.Factory> adapterFactories, Executor callbackExecutor) {
     this.client = client;
     this.baseUrl = baseUrl;
-    this.converterFactory = converterFactory;
-    this.adapterFactory = adapterFactory;
+    this.converterFactories = converterFactories;
+    this.adapterFactories = adapterFactories;
     this.callbackExecutor = callbackExecutor;
   }
 
@@ -126,7 +129,8 @@ private Retrofit(OkHttpClient client, BaseUrl baseUrl, Converter.Factory convert
     synchronized (methodHandlerCache) {
       handler = methodHandlerCache.get(method);
       if (handler == null) {
-        handler = MethodHandler.create(method, client, baseUrl, adapterFactory, converterFactory);
+        handler =
+            MethodHandler.create(method, client, baseUrl, adapterFactories, converterFactories);
         methodHandlerCache.put(method, handler);
       }
     }
@@ -143,15 +147,13 @@ public BaseUrl baseUrl() {
 
   /**
    * TODO
-   * <p>
-   * May be null.
    */
-  public Converter.Factory converterFactory() {
-    return converterFactory;
+  public List<Converter.Factory> converterFactories() {
+    return Collections.unmodifiableList(converterFactories);
   }
 
-  public CallAdapter.Factory callAdapterFactory() {
-    return adapterFactory;
+  public List<CallAdapter.Factory> callAdapterFactories() {
+    return Collections.unmodifiableList(adapterFactories);
   }
 
   public Executor callbackExecutor() {
@@ -167,8 +169,8 @@ public Executor callbackExecutor() {
   public static final class Builder {
     private OkHttpClient client;
     private BaseUrl baseUrl;
-    private Converter.Factory converterFactory;
-    private CallAdapter.Factory adapterFactory;
+    private List<Converter.Factory> converterFactories = new ArrayList<>();
+    private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
     private Executor callbackExecutor;
 
     /** The HTTP client used for requests. */
@@ -203,17 +205,17 @@ public Builder baseUrl(BaseUrl baseUrl) {
       return this;
     }
 
-    /** The converter used for serialization and deserialization of objects. */
-    public Builder converterFactory(Converter.Factory converterFactory) {
-      this.converterFactory = checkNotNull(converterFactory, "converterFactory == null");
+    /** Add converter factory for serialization and deserialization of objects. */
+    public Builder addConverterFactory(Converter.Factory converterFactory) {
+      converterFactories.add(checkNotNull(converterFactory, "converterFactory == null"));
       return this;
     }
 
     /**
      * TODO
      */
-    public Builder callAdapterFactory(CallAdapter.Factory factory) {
-      this.adapterFactory = checkNotNull(factory, "factory == null");
+    public Builder addCallAdapterFactory(CallAdapter.Factory factory) {
+      adapterFactories.add(checkNotNull(factory, "factory == null"));
       return this;
     }
 
@@ -232,15 +234,20 @@ public Retrofit build() {
         throw new IllegalStateException("Base URL required.");
       }
 
-      // Set any platform-appropriate defaults for unspecified components.
+      OkHttpClient client = this.client;
       if (client == null) {
         client = Platform.get().defaultClient();
       }
-      if (adapterFactory == null) {
-        adapterFactory = Platform.get().defaultCallAdapterFactory(callbackExecutor);
-      }
 
-      return new Retrofit(client, baseUrl, converterFactory, adapterFactory, callbackExecutor);
+      // Make a defensive copy of the adapters and add the default Call adapter.
+      List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);
+      adapterFactories.add(Platform.get().defaultCallAdapterFactory(callbackExecutor));
+
+      // Make a defensive copy of the converters and add the default OkHttp body converter.
+      List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);
+      converterFactories.add(new OkHttpBodyConverterFactory());
+
+      return new Retrofit(client, baseUrl, converterFactories, adapterFactories, callbackExecutor);
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index e90cd3c73..0f4b558ec 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -28,6 +28,7 @@
 import java.lang.reflect.TypeVariable;
 import java.lang.reflect.WildcardType;
 import java.util.Arrays;
+import java.util.List;
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.Source;
@@ -48,6 +49,41 @@ static void closeQuietly(Closeable closeable) {
     }
   }
 
+
+  static CallAdapter<?> resolveCallAdapter(List<CallAdapter.Factory> adapterFactories, Type type) {
+    for (int i = 0, count = adapterFactories.size(); i < count; i++) {
+      CallAdapter<?> adapter = adapterFactories.get(i).get(type);
+      if (adapter != null) {
+        return adapter;
+      }
+    }
+
+    StringBuilder builder = new StringBuilder("Could not locate call adapter for ")
+        .append(type)
+        .append(". Tried:");
+    for (CallAdapter.Factory adapterFactory : adapterFactories) {
+      builder.append("\n * ").append(adapterFactory.getClass().getName());
+    }
+    throw new IllegalArgumentException(builder.toString());
+  }
+
+  static Converter<?> resolveConverter(List<Converter.Factory> converterFactories, Type type) {
+    for (int i = 0, count = converterFactories.size(); i < count; i++) {
+      Converter<?> converter = converterFactories.get(i).get(type);
+      if (converter != null) {
+        return converter;
+      }
+    }
+
+    StringBuilder builder = new StringBuilder("Could not locate converter for ")
+        .append(type)
+        .append(". Tried:");
+    for (Converter.Factory converterFactory : converterFactories) {
+      builder.append("\n * ").append(converterFactory.getClass().getName());
+    }
+    throw new IllegalArgumentException(builder.toString());
+  }
+
   /**
    * Replace a {@link Response} with an identical copy whose body is backed by a
    * {@link Buffer} rather than a {@link Source}.
@@ -152,12 +188,20 @@ public static boolean hasUnresolvableType(Type type) {
   }
 
   static RuntimeException methodError(Method method, String message, Object... args) {
+    return methodError(null, method, message, args);
+  }
+
+  static RuntimeException methodError(Throwable cause, Method method, String message,
+      Object... args) {
     message = String.format(message, args);
-    return new IllegalArgumentException(message
+    IllegalArgumentException e = new IllegalArgumentException(message
         + "\n    for method "
         + method.getDeclaringClass().getSimpleName()
         + "."
         + method.getName());
+    e.initCause(cause);
+    return e;
+
   }
 
   static Type getCallResponseType(Type returnType) {
diff --git a/retrofit/src/test/java/retrofit/CallTest.java b/retrofit/src/test/java/retrofit/CallTest.java
index a0796cf07..a559db2c3 100644
--- a/retrofit/src/test/java/retrofit/CallTest.java
+++ b/retrofit/src/test/java/retrofit/CallTest.java
@@ -58,7 +58,7 @@
   @Test public void http200Sync() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -72,7 +72,7 @@
   @Test public void http200Async() throws InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -100,7 +100,7 @@
   @Test public void http404Sync() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -115,7 +115,7 @@
   @Test public void http404Async() throws InterruptedException, IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -144,7 +144,7 @@
   @Test public void transportProblemSync() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -161,7 +161,7 @@
   @Test public void transportProblemAsync() throws InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -188,7 +188,7 @@
   @Test public void conversionProblemOutgoingSync() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter<?> get(Type type) {
             return new StringConverter() {
               @Override public RequestBody toBody(Object value) {
@@ -212,7 +212,7 @@
   @Test public void conversionProblemOutgoingAsync() throws InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter<?> get(Type type) {
             return new StringConverter() {
               @Override public RequestBody toBody(Object value) {
@@ -245,7 +245,7 @@
   @Test public void conversionProblemIncomingSync() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter<?> get(Type type) {
             return new StringConverter() {
               @Override public String fromBody(ResponseBody body) throws IOException {
@@ -288,7 +288,7 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .client(client)
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter<?> get(Type type) {
             return new StringConverter() {
               @Override public String fromBody(ResponseBody body) throws IOException {
@@ -319,7 +319,7 @@
   @Test public void conversionProblemIncomingAsync() throws InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter<?> get(Type type) {
             return new StringConverter() {
               @Override public String fromBody(ResponseBody body) throws IOException {
@@ -355,7 +355,7 @@
     final Converter converter = spy(new ToStringConverterFactory.StringConverter());
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter get(Type type) {
             return converter;
           }
@@ -375,7 +375,7 @@
     final Converter converter = spy(new ToStringConverterFactory.StringConverter());
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory() {
+        .addConverterFactory(new ToStringConverterFactory() {
           @Override public Converter get(Type type) {
             return converter;
           }
@@ -394,7 +394,7 @@
   @Test public void successfulRequestResponseWhenMimeTypeMissing() throws Exception {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -407,7 +407,7 @@
   @Test public void responseBody() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -420,7 +420,7 @@
   @Test public void responseBodyBuffers() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -441,7 +441,7 @@
   @Test public void responseBodyStreams() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -464,7 +464,7 @@
   @Test public void rawResponseContentTypeAndLengthButNoSource() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -486,7 +486,7 @@
   @Test public void emptyResponse() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service example = retrofit.create(Service.class);
 
@@ -502,7 +502,7 @@
   @Test public void cancelBeforeExecute() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service service = retrofit.create(Service.class);
     Call<String> call = service.getString();
@@ -520,7 +520,7 @@
   @Test public void cancelBeforeEnqueue() throws Exception {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service service = retrofit.create(Service.class);
     Call<String> call = service.getString();
@@ -546,7 +546,7 @@
   @Test public void cloningExecutedRequestDoesNotCopyState() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service service = retrofit.create(Service.class);
 
@@ -563,7 +563,7 @@
   @Test public void cancelRequest() throws InterruptedException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Service service = retrofit.create(Service.class);
 
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 6fc52cb7d..b2b64fdce 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -149,7 +149,7 @@
   @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {
     class Example {
       @GET("/") //
-      Call<Object> method(@Body @Query("nope") Object o) {
+      Call<Object> method(@Body @Query("nope") String o) {
         return null;
       }
     }
@@ -407,7 +407,7 @@
   @Test public void nonBodyHttpMethodWithSingleEntity() {
     class Example {
       @GET("/") //
-      Call<Object> method(@Body Object o) {
+      Call<Object> method(@Body String o) {
         return null;
       }
     }
@@ -459,7 +459,7 @@
   @Test public void twoBodies() {
     class Example {
       @PUT("/") //
-      Call<Object> method(@Body int o1, @Body int o2) {
+      Call<Object> method(@Body String o1, @Body String o2) {
         return null;
       }
     }
@@ -476,7 +476,7 @@
     class Example {
       @Multipart //
       @PUT("/") //
-      Call<Object> method(@Part("one") int o1, @Body int o2) {
+      Call<Object> method(@Part("one") String o1, @Body String o2) {
         return null;
       }
     }
@@ -1661,9 +1661,10 @@ private Request buildRequest(Class<?> cls, Object... args) {
         return HttpUrl.parse("http://example.com/");
       }
     };
-    Converter.Factory converterFactory = new ToStringConverterFactory();
+    List<Converter.Factory> converterFactories =
+        Arrays.asList(new ToStringConverterFactory(), new OkHttpBodyConverterFactory());
 
-    RequestFactory requestFactory = RequestFactoryParser.parse(method, baseUrl, converterFactory);
+    RequestFactory requestFactory = RequestFactoryParser.parse(method, baseUrl, converterFactories);
     return requestFactory.create(args);
   }
 }
diff --git a/retrofit/src/test/java/retrofit/RetrofitTest.java b/retrofit/src/test/java/retrofit/RetrofitTest.java
index 27a1548d7..6934c6c05 100644
--- a/retrofit/src/test/java/retrofit/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit/RetrofitTest.java
@@ -134,7 +134,7 @@
 
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .callAdapterFactory(new MyCallAdapterFactory())
+        .addCallAdapterFactory(new MyCallAdapterFactory())
         .build();
     CallMethod example = retrofit.create(CallMethod.class);
     assertThat(example.allowed()).isNotNull();
@@ -162,8 +162,8 @@
 
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
-        .callAdapterFactory(new GreetingCallAdapterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
+        .addCallAdapterFactory(new GreetingCallAdapterFactory())
         .build();
     StringService example = retrofit.create(StringService.class);
     assertThat(example.get()).isEqualTo("Hi!");
@@ -178,9 +178,12 @@
       example.method();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Call adapter factory 'Default' was unable to"
-              + " handle return type java.util.concurrent.Future<java.lang.String>\n"
+      assertThat(e).hasMessage(
+          "Unable to create call adapter for java.util.concurrent.Future<java.lang.String>\n"
               + "    for method FutureMethod.method");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate call adapter for java.util.concurrent.Future<java.lang.String>. Tried:\n"
+              + " * retrofit.DefaultCallAdapter$1");
     }
   }
 
@@ -194,9 +197,11 @@
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
-          "@Body parameter is class java.lang.String but no converter factory registered. Either"
-              + " add a converter factory to the Retrofit instance or use RequestBody. (parameter #1)\n"
+          "Unable to create @Body converter for class java.lang.String (parameter #1)\n"
               + "    for method CallMethod.disallowed");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for class java.lang.String. Tried:\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
@@ -212,24 +217,21 @@
       example.disallowed();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Method response type is class java.lang.String but no converter factory registered. "
-              + "Either add a converter factory to the Retrofit instance or use ResponseBody.\n"
-              + "    for method CallMethod.disallowed");
+      assertThat(e).hasMessage("Unable to create converter for class java.lang.String\n"
+          + "    for method CallMethod.disallowed");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for class java.lang.String. Tried:\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
   @Test public void converterReturningNullThrows() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new Converter.Factory() {
+        .addConverterFactory(new Converter.Factory() {
           @Override public Converter<?> get(Type type) {
             return null;
           }
-
-          @Override public String toString() {
-            return "Nully";
-          }
         })
         .build();
     CallMethod service = retrofit.create(CallMethod.class);
@@ -238,9 +240,12 @@
       service.disallowed();
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Converter factory 'Nully' was unable to handle response type class java.lang.String\n"
-              + "    for method CallMethod.disallowed");
+      assertThat(e).hasMessage("Unable to create converter for class java.lang.String\n"
+          + "    for method CallMethod.disallowed");
+      assertThat(e.getCause()).hasMessage(
+          "Could not locate converter for class java.lang.String. Tried:\n"
+              + " * retrofit.RetrofitTest$1\n"
+              + " * retrofit.OkHttpBodyConverterFactory");
     }
   }
 
@@ -274,7 +279,7 @@
   @Test public void unresolvableTypeThrows() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
-        .converterFactory(new ToStringConverterFactory())
+        .addConverterFactory(new ToStringConverterFactory())
         .build();
     Unresolvable example = retrofit.create(Unresolvable.class);
 
@@ -410,32 +415,34 @@
 
   @Test public void converterNullThrows() {
     try {
-      new Retrofit.Builder().converterFactory(null);
+      new Retrofit.Builder().addConverterFactory(null);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage("converterFactory == null");
     }
   }
 
-  @Test public void converterNoDefault() {
+  @Test public void converterFactoryDefault() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
         .build();
-    assertThat(retrofit.converterFactory()).isNull();
+    List<Converter.Factory> converterFactories = retrofit.converterFactories();
+    assertThat(converterFactories).hasSize(1);
+    assertThat(converterFactories.get(0)).isInstanceOf(OkHttpBodyConverterFactory.class);
   }
 
   @Test public void converterFactoryPropagated() {
     Converter.Factory factory = mock(Converter.Factory.class);
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
-        .converterFactory(factory)
+        .addConverterFactory(factory)
         .build();
-    assertThat(retrofit.converterFactory()).isSameAs(factory);
+    assertThat(retrofit.converterFactories()).contains(factory);
   }
 
   @Test public void callAdapterFactoryNullThrows() {
     try {
-      new Retrofit.Builder().callAdapterFactory(null);
+      new Retrofit.Builder().addCallAdapterFactory(null);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage("factory == null");
@@ -446,16 +453,16 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
         .build();
-    assertThat(retrofit.callAdapterFactory()).isNotNull();
+    assertThat(retrofit.callAdapterFactories()).isNotEmpty();
   }
 
   @Test public void callAdapterFactoryPropagated() {
     CallAdapter.Factory factory = mock(CallAdapter.Factory.class);
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
-        .callAdapterFactory(factory)
+        .addCallAdapterFactory(factory)
         .build();
-    assertThat(retrofit.callAdapterFactory()).isSameAs(factory);
+    assertThat(retrofit.callAdapterFactories()).contains(factory);
   }
 
   @Test public void callbackExecutorNullThrows() {
diff --git a/retrofit/src/test/java/retrofit/ToStringConverterFactory.java b/retrofit/src/test/java/retrofit/ToStringConverterFactory.java
index 291622d94..fa6b77cec 100644
--- a/retrofit/src/test/java/retrofit/ToStringConverterFactory.java
+++ b/retrofit/src/test/java/retrofit/ToStringConverterFactory.java
@@ -25,6 +25,9 @@
   private static final MediaType MEDIA_TYPE = MediaType.parse("text/plain");
 
   @Override public Converter get(Type type) {
+    if (type != String.class) {
+      return null;
+    }
     return new StringConverter();
   }
 
diff --git a/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java b/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java
index 95ebb85da..64f4d0a5d 100644
--- a/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java
+++ b/samples/src/main/java/com/example/retrofit/CustomCallAdapter.java
@@ -97,7 +97,7 @@ private CallFuture(Call<T> call) {
   public static void main(String... args) {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://httpbin.org")
-        .callAdapterFactory(new ListenableFutureCallAdapterFactory())
+        .addCallAdapterFactory(new ListenableFutureCallAdapterFactory())
         .build();
 
     HttpBinService service = retrofit.create(HttpBinService.class);
