diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
index bb7b7fd05..f8ed20a4f 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
@@ -10,24 +10,24 @@
 
 
 /**
- * Created by jspiner on 2017. 7. 12..
+ * @author JSpiner (jspiner@naver.com)
  */
-public class ResponseObservable<T> extends Observable<T> {
+public class ResponseObservable<T> extends Observable<Response<T>> {
     private final Observable<Response<T>> upstream;
 
     ResponseObservable(Observable<Response<T>> upstream) {
         this.upstream = upstream;
     }
 
-    @Override protected void subscribeActual(Observer<? super T> observer) {
-        upstream.subscribe(new ResponseObservable.BodyObserver<T>(observer));
+    @Override protected void subscribeActual(Observer<? super Response<T>> observer) {
+        upstream.subscribe(new ResponseObservable.ResponseObserver<T>(observer));
     }
 
-    private static class BodyObserver<R> implements Observer<Response<R>> {
-        private final Observer<? super R> observer;
+    private static class ResponseObserver<R> implements Observer<Response<R>> {
+        private final Observer<? super Response<R>> observer;
         private boolean terminated;
 
-        BodyObserver(Observer<? super R> observer) {
+        ResponseObserver(Observer<? super Response<R>> observer) {
             this.observer = observer;
         }
 
@@ -37,7 +37,7 @@
 
         @Override public void onNext(Response<R> response) {
             if (response.isSuccessful()) {
-                observer.onNext(response.body());
+                observer.onNext(response);
             } else {
                 terminated = true;
                 Throwable t = new HttpException(response);
diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
index eccd30da3..0bd0100e3 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
@@ -28,6 +28,7 @@
   private final Type responseType;
   private final @Nullable Scheduler scheduler;
   private final boolean isAsync;
+  private final boolean isResponseObservable;
   private final boolean isResult;
   private final boolean isBody;
   private final boolean isFlowable;
@@ -36,11 +37,12 @@
   private final boolean isCompletable;
 
   RxJava2CallAdapter(Type responseType, @Nullable Scheduler scheduler, boolean isAsync,
-      boolean isResult, boolean isBody, boolean isFlowable, boolean isSingle, boolean isMaybe,
+      boolean isResponseObservable, boolean isResult, boolean isBody, boolean isFlowable, boolean isSingle, boolean isMaybe,
       boolean isCompletable) {
     this.responseType = responseType;
     this.scheduler = scheduler;
     this.isAsync = isAsync;
+    this.isResponseObservable = isResponseObservable;
     this.isResult = isResult;
     this.isBody = isBody;
     this.isFlowable = isFlowable;
@@ -59,7 +61,10 @@
         : new CallExecuteObservable<>(call);
 
     Observable<?> observable;
-    if (isResult) {
+    if (isResponseObservable){
+      observable = new ResponseObservable<>(responseObservable);
+    }
+    else if (isResult) {
       observable = new ResultObservable<>(responseObservable);
     } else if (isBody) {
       observable = new BodyObservable<>(responseObservable);
diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
index 8af54c505..485343d35 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
@@ -97,14 +97,15 @@ private RxJava2CallAdapterFactory(@Nullable Scheduler scheduler, boolean isAsync
     if (rawType == Completable.class) {
       // Completable is not parameterized (which is what the rest of this method deals with) so it
       // can only be created with a single configuration.
-      return new RxJava2CallAdapter(Void.class, scheduler, isAsync, false, true, false, false,
+      return new RxJava2CallAdapter(Void.class, scheduler, isAsync, false, false, true, false, false,
           false, true);
     }
 
     boolean isFlowable = rawType == Flowable.class;
     boolean isSingle = rawType == Single.class;
     boolean isMaybe = rawType == Maybe.class;
-    if (rawType != Observable.class && !isFlowable && !isSingle && !isMaybe) {
+    boolean isResponseObservable = rawType == ResponseObservable.class;
+    if (rawType != Observable.class && !isResponseObservable && !isFlowable && !isSingle && !isMaybe) {
       return null;
     }
 
@@ -139,7 +140,7 @@ private RxJava2CallAdapterFactory(@Nullable Scheduler scheduler, boolean isAsync
       isBody = true;
     }
 
-    return new RxJava2CallAdapter(responseType, scheduler, isAsync, isResult, isBody, isFlowable,
+    return new RxJava2CallAdapter(responseType, scheduler, isAsync, isResponseObservable, isResult, isBody, isFlowable,
         isSingle, isMaybe, false);
   }
 }
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
index e421c1652..935dd7293 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
@@ -17,6 +17,7 @@
 
 import io.reactivex.Observable;
 import java.io.IOException;
+
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Before;
@@ -36,6 +37,7 @@
   interface Service {
     @GET("/") Observable<String> body();
     @GET("/") Observable<Response<String>> response();
+    @GET("/") ResponseObservable<String> response2();
     @GET("/") Observable<Result<String>> result();
   }
 
@@ -58,6 +60,15 @@
     observer.assertValue("Hi").assertComplete();
   }
 
+
+  @Test public void rxBodySuccess200() {
+    server.enqueue(new MockResponse().setBody("Hi"));
+
+    RecordingObserver<String> observer = observerRule.create();
+    service.body().subscribe(observer);
+    observer.assertValue("Hi").assertComplete();
+  }
+
   @Test public void bodySuccess404() {
     server.enqueue(new MockResponse().setResponseCode(404));
 
