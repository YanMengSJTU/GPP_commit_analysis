diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index e8bcbb44d..6f6fbcafb 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -242,6 +242,35 @@ void apply(RequestBuilder builder, List<KeyValue<String, T>> value) throws IOExc
     }
   }
 
+  static final class FieldList<T> extends ParameterHandler<List<KeyValue<String, T>>> {
+    private final Converter<T, String> valueConverter;
+    private final boolean encoded;
+
+    FieldList(Converter<T, String> valueConverter, boolean encoded) {
+      this.valueConverter = valueConverter;
+      this.encoded = encoded;
+    }
+
+    void apply(RequestBuilder builder, List<KeyValue<String, T>> value) throws IOException {
+      if (value == null) {
+        throw new IllegalArgumentException("Field list was null.");
+      }
+
+      for (KeyValue<String, T> item : value) {
+    	  String entryKey = item.getKey();
+          if (entryKey == null) {
+            throw new IllegalArgumentException("Field list item contained null key.");
+          }
+          T entryValue = item.getValue();
+          if (entryValue == null) {
+            throw new IllegalArgumentException(
+                "Field list contained null value for key '" + entryKey + "'.");
+          }
+          builder.addQueryParam(entryKey, valueConverter.convert(entryValue), encoded);  
+      }
+    }
+  }  
+  
   static final class Part<T> extends ParameterHandler<T> {
     private final Headers headers;
     private final Converter<T, RequestBody> converter;
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 5f35b93b8..fd2090459 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -37,6 +37,7 @@
 import retrofit2.http.Body;
 import retrofit2.http.DELETE;
 import retrofit2.http.Field;
+import retrofit2.http.FieldList;
 import retrofit2.http.FieldMap;
 import retrofit2.http.FormUrlEncoded;
 import retrofit2.http.GET;
@@ -698,6 +699,20 @@ private Headers parseHeaders(String[] headers) {
           Converter<?, String> converter =
               retrofit.stringConverter(iterableType, annotations);
           return new ParameterHandler.QueryList<>(converter, ((QueryList) annotation).encoded());
+      } else if (annotation instanceof FieldList) {
+    	  Class<?> rawParameterType = Utils.getRawType(type);
+          if (!List.class.isAssignableFrom(rawParameterType)) {
+            throw parameterError(p, "@FieldList parameter type must be List.");
+          }
+          Type listType = Utils.getSupertype(type, rawParameterType, List.class);
+          if (!(listType instanceof ParameterizedType)) {
+            throw parameterError(p, "List must include generic types (e.g., List<KeyValue>)");
+          }
+          ParameterizedType parameterizedType = (ParameterizedType) type;
+          Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
+          Converter<?, String> converter =
+              retrofit.stringConverter(iterableType, annotations);
+          return new ParameterHandler.FieldList<>(converter, ((FieldList) annotation).encoded());
       }
 
       return null; // Not a Retrofit annotation.
diff --git a/retrofit/src/main/java/retrofit2/http/FieldList.java b/retrofit/src/main/java/retrofit2/http/FieldList.java
new file mode 100644
index 000000000..e121379fe
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/FieldList.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Named key/value pairs for a form-encoded request.
+ * <p>
+ * Simple Example:
+ * <pre><code>
+ * &#64;FormUrlEncoded
+ * &#64;POST("/things")
+ * Call&lt;ResponseBody&gt; things(@FieldMap Map&lt;String, String&gt; fields);
+ * </code></pre>
+ * Calling with {@code foo.things(ImmutableMap.of("foo", "bar", "kit", "kat")} yields a request
+ * body of {@code foo=bar&kit=kat}.
+ * <p>
+ * A {@code null} value for the map, as a key, or as a value is not allowed.
+ *
+ * @see FormUrlEncoded
+ * @see Field
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface FieldList {
+  /** Specifies whether the names and values are already URL encoded. */
+  boolean encoded() default false;
+}
