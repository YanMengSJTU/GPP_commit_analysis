diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index a5486249e..40b2c34cc 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -157,6 +157,8 @@ public boolean log() {
 
   volatile LogLevel logLevel;
 
+  volatile boolean allowExtendingInterface;
+
   private RestAdapter(Endpoint server, Client client, Executor httpExecutor,
       Executor callbackExecutor, RequestInterceptor requestInterceptor, Converter converter,
       ErrorHandler errorHandler, Log log, LogLevel logLevel) {
@@ -169,6 +171,7 @@ private RestAdapter(Endpoint server, Client client, Executor httpExecutor,
     this.errorHandler = errorHandler;
     this.log = log;
     this.logLevel = logLevel;
+    this.allowExtendingInterface=false;
   }
 
   /** Change the level of logging. */
@@ -179,6 +182,11 @@ public void setLogLevel(LogLevel loglevel) {
     this.logLevel = loglevel;
   }
 
+  /** Change the ability to extend interfaces, may break Android **/
+  public void setAllowExtendingInterface(boolean allowExtendingInterface){
+    this.allowExtendingInterface=allowExtendingInterface;
+  }
+
   /** The current logging level. */
   public LogLevel getLogLevel() {
     return logLevel;
@@ -187,7 +195,7 @@ public LogLevel getLogLevel() {
   /** Create an implementation of the API defined by the specified {@code service} interface. */
   @SuppressWarnings("unchecked")
   public <T> T create(Class<T> service) {
-    Utils.validateServiceClass(service);
+    Utils.validateServiceClass(allowExtendingInterface,service);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new RestHandler(getMethodInfoCache(service)));
   }
@@ -511,6 +519,13 @@ void logException(Throwable t, String url) {
     private ErrorHandler errorHandler;
     private Log log;
     private LogLevel logLevel = LogLevel.NONE;
+    private boolean allowExtendingInterface = false;
+
+    /** Change the ability to extend interfaces, may break Android **/
+    public Builder setAllowExtendingInterface(boolean allowExtendingInterface){
+      this.allowExtendingInterface=allowExtendingInterface;
+      return this;
+    }
 
     /** API endpoint URL. */
     public Builder setEndpoint(String endpoint) {
@@ -613,8 +628,10 @@ public RestAdapter build() {
         throw new IllegalArgumentException("Endpoint may not be null.");
       }
       ensureSaneDefaults();
-      return new RestAdapter(endpoint, client, httpExecutor, callbackExecutor,
-          requestInterceptor, converter, errorHandler, log, logLevel);
+      RestAdapter restAdapter = new RestAdapter(endpoint, client, httpExecutor, callbackExecutor,
+              requestInterceptor, converter, errorHandler, log, logLevel);
+      restAdapter.setAllowExtendingInterface(this.allowExtendingInterface);
+      return restAdapter;
     }
 
     private void ensureSaneDefaults() {
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index 49c0cbe75..3228d1cb8 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -97,15 +97,17 @@ static Response replaceResponseBody(Response response, TypedInput body) {
         response.getHeaders(), body);
   }
 
-  static <T> void validateServiceClass(Class<T> service) {
+  static <T> void validateServiceClass(boolean allowExtendingInterface, Class<T> service) {
     if (!service.isInterface()) {
       throw new IllegalArgumentException("Only interface endpoint definitions are supported.");
     }
     // Prevent API interfaces from extending other interfaces. This not only avoids a bug in
     // Android (http://b.android.com/58753) but it forces composition of API declarations which is
     // the recommended pattern.
-    if (service.getInterfaces().length > 0) {
-      throw new IllegalArgumentException("Interface definitions must not extend other interfaces.");
+    if(!allowExtendingInterface) {
+      if (service.getInterfaces().length > 0) {
+        throw new IllegalArgumentException("Interface definitions must not extend other interfaces.");
+      }
     }
   }
 
