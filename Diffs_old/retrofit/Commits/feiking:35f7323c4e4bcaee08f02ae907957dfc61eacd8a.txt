diff --git a/pom.xml b/pom.xml
index 8b5fa462a..1228c3a49 100644
--- a/pom.xml
+++ b/pom.xml
@@ -55,7 +55,7 @@
     <appengine.version>1.9.6</appengine.version>
 
     <!-- Converter Dependencies -->
-    <protobuf.version>2.5.0</protobuf.version>
+    <protobuf.version>2.6.0</protobuf.version>
     <jackson.version>2.4.1</jackson.version>
     <wire.version>1.5.1</wire.version>
     <simplexml.version>2.7.1</simplexml.version>
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index feeea4d90..0c8a21f4f 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -20,4 +20,23 @@
     <module>wire</module>
     <module>simplexml</module>
   </modules>
+
+  <profiles>
+    <profile>
+      <id>nano</id>
+      <modules>
+        <module>protobuf-nano</module>
+      </modules>
+      <build>
+        <plugins>
+          <plugin>
+            <artifactId>maven-jar-plugin</artifactId>
+            <configuration>
+              <classifier>nano</classifier>
+            </configuration>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
+  </profiles>
 </project>
diff --git a/retrofit-converters/protobuf-nano/README.md b/retrofit-converters/protobuf-nano/README.md
new file mode 100644
index 000000000..30365c72b
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/README.md
@@ -0,0 +1,19 @@
+Google Nano Protocol Buffer Converter
+=====================================
+
+A `Converter` which uses [Nano Protocol Buffer][1] binary serialization.
+
+To build this module, you will need to [install][2] the Android external\_protobuf module.
+
+To use the converter, depend on the `nano` classifier:
+
+```xml
+<dependency>
+  <groupId>com.squareup.retrofit</groupId>
+  <artifactId>retrofit-converters</artifactId>
+  <classifier>nano</classifier>
+</dependency>
+```
+
+ [1]: https://github.com/android/platform_external_protobuf/tree/master/java/src/main/java/com/google/protobuf/nano
+ [2]: https://github.com/android/platform_external_protobuf/blob/master/java/README.txt
diff --git a/retrofit-converters/protobuf-nano/pom.xml b/retrofit-converters/protobuf-nano/pom.xml
new file mode 100644
index 000000000..e78d818d3
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/pom.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.squareup.retrofit</groupId>
+    <artifactId>retrofit-converters</artifactId>
+    <version>1.6.2-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>converter-protobuf-nano</artifactId>
+  <name>Converter: Nano Protocol Buffers</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.squareup.retrofit</groupId>
+      <artifactId>retrofit</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.protobuf</groupId>
+      <artifactId>protobuf-java</artifactId>
+      <version>2.3.0</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.guava</groupId>
+      <artifactId>guava</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit/converter/NanoProtoConverter.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit/converter/NanoProtoConverter.java
new file mode 100644
index 000000000..161922063
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit/converter/NanoProtoConverter.java
@@ -0,0 +1,66 @@
+package retrofit.converter;
+
+import com.google.common.base.Objects;
+import com.google.common.io.ByteStreams;
+import com.google.common.reflect.TypeToken;
+import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
+import com.google.protobuf.nano.MessageNano;
+
+import retrofit.mime.TypedByteArray;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
+
+import java.io.IOException;
+import java.lang.reflect.Type;
+
+/** A {@link Converter} that reads and writes Nano Protocol Buffers. */
+public class NanoProtoConverter implements Converter {
+  private static final String MIME_TYPE = "application/x-protobuf";
+
+  @Override
+  public Object fromBody(final TypedInput body, final Type type) throws ConversionException {
+    if (!Objects.equal(MIME_TYPE, body.mimeType())) {
+      throw new ConversionException("Response content type was not a proto: " + body.mimeType());
+    }
+
+    try {
+      return MessageNano.mergeFrom(getNanoProtoInstance(type), getMessageByteArray(body));
+    } catch (InvalidProtocolBufferNanoException e) {
+      throw new ConversionException("Nanoproto conversion failed", e);
+    }
+  }
+
+  private MessageNano getNanoProtoInstance(final Type type) throws ConversionException {
+    final TypeToken typeToken = TypeToken.of(type);
+    if (!TypeToken.of(MessageNano.class).isAssignableFrom(typeToken)) {
+      throw new IllegalArgumentException(
+          "Expected a nanoproto message but was " + typeToken.toString());
+    }
+
+    try {
+      return (MessageNano) typeToken.getRawType().newInstance();
+    } catch (InstantiationException e) {
+      throw new ConversionException("Nanoproto instantiation failed", e);
+    } catch (IllegalAccessException e) {
+      throw new IllegalStateException(e);
+    }
+  }
+
+  private byte[] getMessageByteArray(final TypedInput body) throws ConversionException {
+    try {
+      return ByteStreams.toByteArray(body.in());
+    } catch (IOException e) {
+      throw new ConversionException("Reading nanoproto failed", e);
+    }
+  }
+
+  @Override
+  public TypedOutput toBody(final Object object) {
+    if (!(object instanceof MessageNano)) {
+     throw new IllegalArgumentException(
+         "Expected a nanoproto but was " + object.getClass().getName());
+    }
+    return new TypedByteArray(MIME_TYPE, MessageNano.toByteArray((MessageNano) object));
+  }
+
+}
diff --git a/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/NanoProtoConverterTest.java b/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/NanoProtoConverterTest.java
new file mode 100644
index 000000000..1e0d2d6ee
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/NanoProtoConverterTest.java
@@ -0,0 +1,88 @@
+package retrofit.converter;
+
+import com.google.common.io.BaseEncoding;
+import com.google.protobuf.InvalidProtocolBufferException;
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import org.junit.Before;
+import org.junit.Test;
+import retrofit.mime.TypedByteArray;
+import retrofit.mime.TypedOutput;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+import static retrofit.converter.PhoneProtos.Phone;
+
+public final class NanoProtoConverterTest {
+  private static final String ENCODED_PROTO = "Cg4oNTE5KSA4NjctNTMwOQ==";
+
+  private final NanoProtoConverter protoConverter = new NanoProtoConverter();
+  private final Phone proto = new Phone();
+
+  @Before public void setUp() {
+    proto.number = "(519) 867-5309";
+  }
+
+  @Test public void serialize() throws Exception {
+    TypedOutput protoBytes = protoConverter.toBody(proto);
+    assertThat(protoBytes.mimeType()).isEqualTo("application/x-protobuf");
+    assertThat(bytesOf(protoBytes)).isEqualTo(bytesOf(decodeBase64(ENCODED_PROTO)));
+  }
+
+  @Test public void deserialize() throws Exception {
+    Object proto = protoConverter.fromBody(decodeBase64(ENCODED_PROTO), Phone.class);
+    assertThat(proto).isEqualTo(proto);
+  }
+
+  @Test public void deserializeWrongClass() throws Exception {
+    try {
+      protoConverter.fromBody(decodeBase64(ENCODED_PROTO), String.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage("Expected a nanoproto message but was java.lang.String");
+    }
+  }
+
+  @Test public void deserializeWrongType() throws Exception {
+    try {
+      protoConverter.fromBody(decodeBase64(ENCODED_PROTO), ArrayList.class.getGenericSuperclass());
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage("Expected a nanoproto message but was java.util.AbstractList<E>");
+    }
+  }
+
+  @Test public void deserializeWrongValue() throws Exception {
+    try {
+      protoConverter.fromBody(decodeBase64("////"), Phone.class);
+      fail();
+    } catch (ConversionException expected) {
+      assertThat(expected.getCause() instanceof InvalidProtocolBufferException);
+    }
+  }
+
+  @Test public void deserializeWrongMime() throws Exception {
+    try {
+      protoConverter.fromBody(decodeBase64("////", "yummy/bytes"), Phone.class);
+      fail();
+    } catch (ConversionException e) {
+      assertThat(e).hasMessage("Response content type was not a proto: yummy/bytes");
+    }
+  }
+
+  private static byte[] bytesOf(TypedOutput protoBytes) throws IOException {
+    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
+    protoBytes.writeTo(bytes);
+    return bytes.toByteArray();
+  }
+
+  private static TypedByteArray decodeBase64(String base64) throws UnsupportedEncodingException {
+    return decodeBase64(base64, "application/x-protobuf");
+  }
+
+  private static TypedByteArray decodeBase64(String base64, String mime) throws UnsupportedEncodingException {
+    return new TypedByteArray(mime, BaseEncoding.base64().decode(base64));
+  }
+}
diff --git a/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/PhoneProtos.java b/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/PhoneProtos.java
new file mode 100644
index 000000000..76d856ec9
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/java/retrofit/converter/PhoneProtos.java
@@ -0,0 +1,76 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+
+package retrofit.converter;
+
+public interface PhoneProtos {
+  @SuppressWarnings("hiding")
+  public static final class Phone extends
+      com.google.protobuf.nano.MessageNano {
+    public static final Phone EMPTY_ARRAY[] = {};
+    public Phone() {}
+
+    // optional string number = 1;
+    public java.lang.String number = "";
+
+    public final Phone clear() {
+      number = "";
+      cachedSize = -1;
+      return this;
+    }
+
+    @Override
+    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
+                        throws java.io.IOException {
+      if (!this.number.equals("")) {
+        output.writeString(1, this.number);
+      }
+    }
+
+    @Override
+    public int getSerializedSize() {
+      int size = 0;
+      if (!this.number.equals("")) {
+        size += com.google.protobuf.nano.CodedOutputByteBufferNano
+            .computeStringSize(1, this.number);
+      }
+      cachedSize = size;
+      return size;
+    }
+
+    @Override
+    public Phone mergeFrom(
+        com.google.protobuf.nano.CodedInputByteBufferNano input)
+        throws java.io.IOException {
+      while (true) {
+        int tag = input.readTag();
+        switch (tag) {
+          case 0:
+            return this;
+          default: {
+            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
+              return this;
+            }
+            break;
+          }
+          case 10: {
+            this.number = input.readString();
+            break;
+          }
+        }
+      }
+    }
+
+    public static Phone parseFrom(byte[] data)
+        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
+      return com.google.protobuf.nano.MessageNano.mergeFrom(new Phone(), data);
+    }
+
+    public static Phone parseFrom(
+            com.google.protobuf.nano.CodedInputByteBufferNano input)
+        throws java.io.IOException {
+      return new Phone().mergeFrom(input);
+    }
+
+  }
+
+}
diff --git a/retrofit-converters/protobuf-nano/src/test/protos/phone.proto b/retrofit-converters/protobuf-nano/src/test/protos/phone.proto
new file mode 100644
index 000000000..43cd50489
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/protos/phone.proto
@@ -0,0 +1,10 @@
+syntax = "proto2";
+
+package retrofit;
+
+option java_package = "retrofit.converter";
+option java_outer_classname = "PhoneProtos";
+
+message Phone {
+  optional string number = 1;
+}
