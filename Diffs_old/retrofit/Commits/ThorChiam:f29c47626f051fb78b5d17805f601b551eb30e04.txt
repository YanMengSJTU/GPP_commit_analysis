diff --git a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
index efc87f4f2..4f021758f 100644
--- a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
@@ -28,7 +28,7 @@
 import retrofit2.Converter;
 
 final class GsonRequestBodyConverter<T> implements Converter<T, RequestBody> {
-  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
+  private static final MediaType MEDIA_TYPE = null;
   private static final Charset UTF_8 = Charset.forName("UTF-8");
 
   private final Gson gson;
@@ -45,6 +45,6 @@
     JsonWriter jsonWriter = gson.newJsonWriter(writer);
     adapter.write(jsonWriter, value);
     jsonWriter.close();
-    return RequestBody.create(null, buffer.readByteString());
+    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 90f420afa..6702f6979 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -215,14 +215,15 @@ public synchronized boolean isExecuted() {
             return Response.success(null, rawResponse);
         }
 
-        ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);
+//        ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);
+        ResponseBody catchingBody = Utils.buffer(rawBody);
         try {
             T body = serviceMethod.toResponse(catchingBody);
             return Response.success(body, rawResponse);
         } catch (RuntimeException e) {
             // If the underlying source threw an exception, propagate that rather than indicating it was
             // a runtime exception.
-            catchingBody.throwIfCaught();
+//            catchingBody.throwIfCaught();
             throw e;
         }
     }
@@ -249,48 +250,48 @@ public boolean isCanceled() {
         }
     }
 
-    static final class ExceptionCatchingRequestBody extends ResponseBody {
-        private final ResponseBody delegate;
-        IOException thrownException;
-
-        ExceptionCatchingRequestBody(ResponseBody delegate) {
-            this.delegate = delegate;
-        }
-
-        @Override
-        public MediaType contentType() {
-            return delegate.contentType();
-        }
-
-        @Override
-        public long contentLength() {
-            return delegate.contentLength();
-        }
-
-        @Override
-        public BufferedSource source() {
-            return Okio.buffer(new ForwardingSource(delegate.source()) {
-                @Override
-                public long read(Buffer sink, long byteCount) throws IOException {
-                    try {
-                        return super.read(sink, byteCount);
-                    } catch (IOException e) {
-                        thrownException = e;
-                        throw e;
-                    }
-                }
-            });
-        }
-
-        @Override
-        public void close() {
-            delegate.close();
-        }
-
-        void throwIfCaught() throws IOException {
-            if (thrownException != null) {
-                throw thrownException;
-            }
-        }
-    }
+//    static final class ExceptionCatchingRequestBody extends ResponseBody {
+//        private final ResponseBody delegate;
+//        IOException thrownException;
+//
+//        ExceptionCatchingRequestBody(ResponseBody delegate) {
+//            this.delegate = delegate;
+//        }
+//
+//        @Override
+//        public MediaType contentType() {
+//            return delegate.contentType();
+//        }
+//
+//        @Override
+//        public long contentLength() {
+//            return delegate.contentLength();
+//        }
+//
+//        @Override
+//        public BufferedSource source() {
+//            return Okio.buffer(new ForwardingSource(delegate.source()) {
+//                @Override
+//                public long read(Buffer sink, long byteCount) throws IOException {
+//                    try {
+//                        return super.read(sink, byteCount);
+//                    } catch (IOException e) {
+//                        thrownException = e;
+//                        throw e;
+//                    }
+//                }
+//            });
+//        }
+//
+//        @Override
+//        public void close() {
+//            delegate.close();
+//        }
+//
+//        void throwIfCaught() throws IOException {
+//            if (thrownException != null) {
+//                throw thrownException;
+//            }
+//        }
+//    }
 }
