diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 71606ce22..1b46fc400 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -56,7 +56,8 @@
   }
 
   static final class RelativeUrl extends ParameterHandler<Object> {
-    @Override void apply(RequestBuilder builder, @Nullable Object value) {
+    @Override
+    void apply(RequestBuilder builder, @Nullable Object value) {
       checkNotNull(value, "@Url parameter is null.");
       builder.setRelativeUrl(value);
     }
@@ -142,7 +143,8 @@
     @Nullable private final Converter<S, String> listValueConverter;
     private final boolean encoded;
 
-    QueryMap(@Nullable Converter<T, String> valueConverter, @Nullable Converter<S, String> listValueConverter, boolean encoded) {
+    QueryMap(@Nullable Converter<T, String> valueConverter,
+             @Nullable Converter<S, String> listValueConverter, boolean encoded) {
       this.valueConverter = valueConverter;
       this.listValueConverter = listValueConverter;
       this.encoded = encoded;
@@ -166,7 +168,7 @@
         }
 
         if (entryValue instanceof List && listValueConverter != null) {
-          List<S> entryValueList = (List<S>) entryValue;    //TODO there's got to be a safer way to do this
+          List<S> entryValueList = (List<S>) entryValue;
           for (S item :entryValueList) {
             String convertedEntryValue = listValueConverter.convert(item);
             if (convertedEntryValue == null) {
diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index 94e2ece5c..d68889025 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -470,7 +470,8 @@ private Headers parseHeaders(String[] headers) {
           valueConverter = retrofit.stringConverter(valueType, annotations);
         }
 
-        return new ParameterHandler.QueryMap<>(valueConverter, listValueConverter, ((QueryMap) annotation).encoded());
+        return new ParameterHandler.QueryMap<>(valueConverter, listValueConverter,
+            ((QueryMap) annotation).encoded());
 
       } else if (annotation instanceof Header) {
         validateResolvableType(p, type);
