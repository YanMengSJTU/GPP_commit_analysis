diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
index cd6030d08..73632ef3e 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -18,8 +18,8 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.lang.reflect.Array;
 import java.net.URLEncoder;
-import java.util.Arrays;
 
 public final class FormUrlEncodedTypedOutput implements TypedOutput {
   final ByteArrayOutputStream content = new ByteArrayOutputStream();
@@ -36,6 +36,14 @@ private void addFieldString(String name, String value) throws IOException {
     content.write(value.getBytes("UTF-8"));
   }
 
+  private void addFieldArray(String name, Object arrayValues) {
+    final int length = Array.getLength(arrayValues);
+    for (int i = 0; i < length ; i++) {
+      Object value = Array.get(arrayValues, i);
+      addField(name, value);
+    }
+  }
+
   private void addFieldIterable(String name, Iterable values) throws IOException {
      for (Object value: values) {
          addFieldString(name, value.toString());
@@ -54,8 +62,7 @@ public void addField(String name, Object value) {
       if (value instanceof Iterable) {
         addFieldIterable(name, (Iterable) value);
       } else if (value.getClass().isArray()) {
-        Iterable arrayAsList = Arrays.asList((Object[]) value);
-        addFieldIterable(name, arrayAsList);
+        addFieldArray(name, value);
       } else {
         addFieldString(name, value.toString());
       }
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
index 74b428c0f..526d60a54 100644
--- a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -58,6 +58,16 @@
     assertThat(actual).isEqualTo("ping=pong&ping=pong-too");
   }
 
+  @Test public void arrayPrimitiveParameter() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("ping", new int[]{1, 2});
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    fe.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo("ping=1&ping=2");
+  }
+
   @Test public void arrayIterable() throws Exception {
     FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
     fe.addField("ping", Arrays.asList(new String[]{"pong", "pong-too"}));
