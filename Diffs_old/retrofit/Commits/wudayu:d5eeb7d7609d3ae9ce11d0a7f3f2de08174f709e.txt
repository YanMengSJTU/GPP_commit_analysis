diff --git a/retrofit/src/main/java/retrofit/converter/GsonConverter.java b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
index 83308d4a2..5b4993182 100644
--- a/retrofit/src/main/java/retrofit/converter/GsonConverter.java
+++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
@@ -32,12 +32,19 @@
  * @author Jake Wharton (jw@squareup.com)
  */
 public class GsonConverter implements Converter {
+
+  public static final String APPLICATION_JSON_VALUE = "application/json";
+  public static final String TEXT_HTML_VALUE = "text/html";
+
   private final Gson gson;
+  private String mime;
   private String charset;
 
   /**
    * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
-   * decoding from JSON (when no charset is specified by a header) will use UTF-8.
+   * decoding from JSON
+   * (when no charset is specified by a header) will use UTF-8.
+   * (when no mime is specified by a header) will use APPLICATION_JSON_VALUE.
    */
   public GsonConverter(Gson gson) {
     this(gson, "UTF-8");
@@ -45,10 +52,29 @@ public GsonConverter(Gson gson) {
 
   /**
    * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
-   * decoding from JSON (when no charset is specified by a header) will use the specified charset.
+   * decoding from JSON
+   * (when no charset is specified by a header) will use UTF-8.
+   */
+  public GsonConverter(Gson gson, String mime) {
+    this(gson, mime, "UTF-8");
+  }
+
+  /**
+   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
+   * decoding from JSON
+   * (when no charset is specified by a header) will use the specified charset.
    */
   public GsonConverter(Gson gson, String charset) {
+    this(gson, APPLICATION_JSON_VALUE, charset);
+  }
+
+  /**
+   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
+   * decoding from JSON.
+   */
+  public GsonConverter(Gson gson, String mime, String charset) {
     this.gson = gson;
+    this.mime = mime;
     this.charset = charset;
   }
 
@@ -77,7 +103,7 @@ public GsonConverter(Gson gson, String charset) {
 
   @Override public TypedOutput toBody(Object object) {
     try {
-      return new JsonTypedOutput(gson.toJson(object).getBytes(charset), charset);
+      return new JsonTypedOutput(gson.toJson(object).getBytes(charset), mime, charset);
     } catch (UnsupportedEncodingException e) {
       throw new AssertionError(e);
     }
@@ -87,9 +113,9 @@ public GsonConverter(Gson gson, String charset) {
     private final byte[] jsonBytes;
     private final String mimeType;
 
-    JsonTypedOutput(byte[] jsonBytes, String encode) {
+    JsonTypedOutput(byte[] jsonBytes, String mime, String encode) {
       this.jsonBytes = jsonBytes;
-      this.mimeType = "application/json; charset=" + encode;
+      this.mimeType = mime + "; charset=" + encode;
     }
 
     @Override public String fileName() {
