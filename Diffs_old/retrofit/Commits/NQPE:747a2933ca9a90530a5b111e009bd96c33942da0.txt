diff --git a/Retrofit2_souce_analysis.pptx b/Retrofit2_souce_analysis.pptx
new file mode 100644
index 000000000..539ec9899
Binary files /dev/null and b/Retrofit2_souce_analysis.pptx differ
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index a89ba54eb..70f917ad6 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -174,6 +174,11 @@ private void callSuccess(Response<T> response) {
     return parseResponse(call.execute());
   }
 
+  /**
+   * 创建okhttp3的call
+   * @return
+   * @throws IOException
+   */
   private okhttp3.Call createRawCall() throws IOException {
     Request request = serviceMethod.toRequest(args);
     okhttp3.Call call = serviceMethod.callFactory.newCall(request);
@@ -183,6 +188,12 @@ private void callSuccess(Response<T> response) {
     return call;
   }
 
+  /**
+   * 转化okhttp3.Response为retrofit封装的Response
+   * @param rawResponse
+   * @return
+   * @throws IOException
+   */
   Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {
     ResponseBody rawBody = rawResponse.body();
 
@@ -207,10 +218,12 @@ private void callSuccess(Response<T> response) {
       return Response.success(null, rawResponse);
     }
 
-    //通过serviceMethod对ResponseBody进行转化，
-    // 然后返回，转化实际上就是通过responseConverter的convert方法
+    //ExceptionCatchingRequestBody为ResponseBody的代理类
+    //主要是读写内容的时候使用Okio的读写工具类来提高效率
     ExceptionCatchingRequestBody catchingBody = new ExceptionCatchingRequestBody(rawBody);
     try {
+      //通过serviceMethod对ResponseBody进行转化，
+      // 然后返回，转化实际上就是通过responseConverter的convert方法
       T body = serviceMethod.toResponse(catchingBody);
       return Response.success(body, rawResponse);
     } catch (RuntimeException e) {
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index cbbd6b95e..67d3b5d25 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -61,7 +61,9 @@
  *         1.首先构造retrofit，几个核心的参数呢，主要就是baseurl,callFactory(默认okhttpclient),
  *         converterFactories,adapterFactories,excallbackExecutor。
  *         2.通过create方法拿到接口的实现类，这里利用Java的Proxy类完成动态代理的相关代理
- *         3.在invoke方法内部，拿到我们所声明的注解以及实参等，构造ServiceMethod，ServiceMethod中解析了大量的信息，最痛可以通过toRequest构造出okhttp3.Request对象。有了okhttp3.Request对象就可以很自然的构建出okhttp3.call，最后calladapter对Call进行装饰返回。
+ *         3.在invoke方法内部，拿到我们所声明的注解以及实参等，构造ServiceMethod，ServiceMethod中解析了大量的信息，
+ *         最终可以通过toRequest构造出okhttp3.Request对象。有了okhttp3.Request对象就可以很自然的构建出okhttp3.call，
+ *         最后calladapter对Call进行装饰返回。
  *         4.拿到Call就可以执行enqueue或者execute方法了
  */
 public final class Retrofit {
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 47fd6f3f1..05bc7f4b1 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -161,8 +161,11 @@ R toResponse(ResponseBody body) throws IOException {
     Builder(Retrofit retrofit, Method method) {
       this.retrofit = retrofit;
       this.method = method;
+      //获取方法上的注解
       this.methodAnnotations = method.getAnnotations();
+      //方法参数——泛型
       this.parameterTypes = method.getGenericParameterTypes();
+      //方法参数——注解
       this.parameterAnnotationsArray = method.getParameterAnnotations();
     }
 
diff --git a/samples/src/main/java/com/example/retrofit/SimpleService.java b/samples/src/main/java/com/example/retrofit/SimpleService.java
index ef5a3060e..1f503a18a 100644
--- a/samples/src/main/java/com/example/retrofit/SimpleService.java
+++ b/samples/src/main/java/com/example/retrofit/SimpleService.java
@@ -18,6 +18,8 @@
 import java.io.IOException;
 import java.util.List;
 import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
 import retrofit2.converter.gson.GsonConverterFactory;
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
@@ -56,6 +58,17 @@ public static void main(String... args) throws IOException {
     // Create a call instance for looking up Retrofit contributors.
     Call<List<Contributor>> call = github.contributors("square", "retrofit");
 
+    call.enqueue(new Callback<List<Contributor>>() {
+      @Override
+      public void onResponse(Call<List<Contributor>> call, Response<List<Contributor>> response) {
+          //TODO
+      }
+
+      @Override
+      public void onFailure(Call<List<Contributor>> call, Throwable t) {
+          //TODO
+      }
+    });
     // Fetch and print a list of the contributors to the library.
     List<Contributor> contributors = call.execute().body();
     for (Contributor contributor : contributors) {
