diff --git a/CHANGELOG.md b/CHANGELOG.md
index 062256660..397bb5cc3 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,13 @@
 Change Log
 ==========
 
+Version 1.8.0 *(2014-11-18)*
+----------------------------
+
+ * Update to RxJava 1.0. This comes with the project's 'groupId' change from `com.netflix.rxjava` to
+   `io.reactivex` which is why the minor version was bumped.
+
+
 Version 1.7.1 *(2014-10-23)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 7fe13c3a7..72df2c13d 100644
--- a/README.md
+++ b/README.md
@@ -14,12 +14,12 @@ Download [the latest JAR][2] or grab via Maven:
 <dependency>
   <groupId>com.squareup.retrofit</groupId>
   <artifactId>retrofit</artifactId>
-  <version>1.7.1</version>
+  <version>1.8.0</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.squareup.retrofit:retrofit:1.7.1'
+compile 'com.squareup.retrofit:retrofit:1.8.0'
 ```
 Retrofit requires at minimum Java 6 or Android 2.3.
 
@@ -43,4 +43,4 @@ License
 
 
  [1]: http://square.github.io/retrofit/
- [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.retrofit&a=retrofit&v=LATEST
+ [2]: https://search.maven.org/remote_content?g=com.squareup.retrofit&a=retrofit&v=LATEST
diff --git a/deploy_website.sh b/deploy_website.sh
index 3d007cd5b..134675d3a 100755
--- a/deploy_website.sh
+++ b/deploy_website.sh
@@ -27,7 +27,7 @@ rm -rf *
 cp -R ../website/* .
 
 # Download the latest javadoc
-curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc" > javadoc.zip
+curl -L "https://search.maven.org/remote_content?g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc" > javadoc.zip
 mkdir javadoc
 unzip javadoc.zip -d javadoc
 rm javadoc.zip
diff --git a/pom.xml b/pom.xml
index 67c83033e..fa28f7e26 100644
--- a/pom.xml
+++ b/pom.xml
@@ -34,6 +34,7 @@
 
   <modules>
     <module>retrofit</module>
+    <module>retrofit-appengine</module>
     <module>retrofit-converters</module>
     <module>retrofit-mock</module>
     <module>samples</module>
@@ -51,7 +52,7 @@
     <android.platform>16</android.platform>
     <gson.version>2.3</gson.version>
     <okhttp.version>2.0.0</okhttp.version>
-    <rxjava.version>1.0.0-rc.4</rxjava.version>
+    <rxjava.version>1.0.0</rxjava.version>
     <appengine.version>1.9.12</appengine.version>
 
     <!-- Converter Dependencies -->
diff --git a/retrofit-appengine/pom.xml b/retrofit-appengine/pom.xml
new file mode 100644
index 000000000..42479b706
--- /dev/null
+++ b/retrofit-appengine/pom.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.squareup.retrofit</groupId>
+    <artifactId>parent</artifactId>
+    <version>2.0.0-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>retrofit-appengine</artifactId>
+  <name>Retrofit AppEngine</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.squareup.retrofit</groupId>
+      <artifactId>retrofit</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.appengine</groupId>
+      <artifactId>appengine-api-1.0-sdk</artifactId>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.mockito</groupId>
+      <artifactId>mockito-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.google.guava</groupId>
+      <artifactId>guava</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java b/retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java
similarity index 100%
rename from retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
rename to retrofit-appengine/src/main/java/retrofit/appengine/UrlFetchClient.java
diff --git a/retrofit-appengine/src/test/java/retrofit/TestingUtils.java b/retrofit-appengine/src/test/java/retrofit/TestingUtils.java
new file mode 100644
index 000000000..49fb8592f
--- /dev/null
+++ b/retrofit-appengine/src/test/java/retrofit/TestingUtils.java
@@ -0,0 +1,24 @@
+// Copyright 2013 Square, Inc.
+package retrofit;
+
+import java.io.IOException;
+import java.util.Map;
+import retrofit.mime.MimeHelper;
+import retrofit.mime.MultipartTypedOutput;
+import retrofit.mime.TypedOutput;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public final class TestingUtils {
+  public static TypedOutput createMultipart(Map<String, TypedOutput> parts) {
+    MultipartTypedOutput typedOutput = MimeHelper.newMultipart("foobarbaz");
+    for (Map.Entry<String, TypedOutput> part : parts.entrySet()) {
+      typedOutput.addPart(part.getKey(), part.getValue());
+    }
+    return typedOutput;
+  }
+
+  public static void assertBytes(byte[] bytes, String expected) throws IOException {
+    assertThat(new String(bytes, "UTF-8")).isEqualTo(expected);
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java b/retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java
similarity index 100%
rename from retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java
rename to retrofit-appengine/src/test/java/retrofit/appengine/UrlFetchClientTest.java
diff --git a/retrofit-appengine/src/test/java/retrofit/mime/MimeHelper.java b/retrofit-appengine/src/test/java/retrofit/mime/MimeHelper.java
new file mode 100644
index 000000000..9df96901f
--- /dev/null
+++ b/retrofit-appengine/src/test/java/retrofit/mime/MimeHelper.java
@@ -0,0 +1,18 @@
+// Copyright 2013 Square, Inc.
+package retrofit.mime;
+
+import java.util.List;
+
+public class MimeHelper {
+  public static List<byte[]> getParts(MultipartTypedOutput output) {
+    try {
+      return output.getParts();
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  public static MultipartTypedOutput newMultipart(String boundary) {
+    return new MultipartTypedOutput(boundary);
+  }
+}
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
index 359ab0adb..0a4c2b62c 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
@@ -18,22 +18,34 @@
  * @author Fabien Ric (fabien.ric@gmail.com)
  */
 public class SimpleXMLConverter implements Converter {
+  private static final boolean DEFAULT_STRICT = true;
   private static final String CHARSET = "UTF-8";
   private static final String MIME_TYPE = "application/xml; charset=" + CHARSET;
 
   private final Serializer serializer;
 
+  private final boolean strict;
+
   public SimpleXMLConverter() {
-    this(new Persister());
+    this(DEFAULT_STRICT);
+  }
+
+  public SimpleXMLConverter(boolean strict) {
+    this(new Persister(), strict);
   }
 
   public SimpleXMLConverter(Serializer serializer) {
+    this(serializer, DEFAULT_STRICT);
+  }
+
+  public SimpleXMLConverter(Serializer serializer, boolean strict) {
     this.serializer = serializer;
+    this.strict = strict;
   }
 
   @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
     try {
-      return serializer.read((Class<?>) type, body.in());
+      return serializer.read((Class<?>) type, body.in(), strict);
     } catch (Exception e) {
       throw new ConversionException(e);
     }
@@ -60,4 +72,8 @@ public SimpleXMLConverter(Serializer serializer) {
       }
     }
   }
+
+  public boolean isStrict() {
+    return strict;
+  }
 }
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 4dad3087d..1efcfeedd 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -39,11 +39,6 @@
       <artifactId>rxjava</artifactId>
       <optional>true</optional>
     </dependency>
-    <dependency>
-      <groupId>com.google.appengine</groupId>
-      <artifactId>appengine-api-1.0-sdk</artifactId>
-      <optional>true</optional>
-    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/retrofit/src/main/java/retrofit/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
index 57b2d6abc..eace21daf 100644
--- a/retrofit/src/main/java/retrofit/Platform.java
+++ b/retrofit/src/main/java/retrofit/Platform.java
@@ -24,7 +24,6 @@
 import retrofit.android.AndroidApacheClient;
 import retrofit.android.AndroidLog;
 import retrofit.android.MainThreadExecutor;
-import retrofit.appengine.UrlFetchClient;
 import retrofit.client.Client;
 import retrofit.client.OkClient;
 import retrofit.client.UrlConnectionClient;
@@ -52,10 +51,6 @@ private static Platform findPlatform() {
     } catch (ClassNotFoundException ignored) {
     }
 
-    if (System.getProperty("com.google.appengine.runtime.version") != null) {
-      return new AppEngine();
-    }
-
     return new Base();
   }
 
@@ -142,12 +137,6 @@ private static Platform findPlatform() {
     }
   }
 
-  private static class AppEngine extends Base {
-    @Override Client defaultClient() {
-      return new UrlFetchClient();
-    }
-  }
-
   /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */
   private static boolean hasOkHttpOnClasspath() {
     boolean okUrlFactory = false;
diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 939d72c56..f6a08cf82 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -253,30 +253,51 @@ void setArguments(Object[] args) {
       } else if (annotationType == retrofit.http.Header.class) {
         if (value != null) { // Skip null values.
           String name = ((retrofit.http.Header) annotation).value();
-          addHeader(name, value.toString());
+          if (value instanceof Iterable) {
+            for (Object iterableValue : (Iterable<?>) value) {
+              if (iterableValue != null) { // Skip null values.
+                addHeader(name, iterableValue.toString());
+              }
+            }
+          } else if (value.getClass().isArray()) {
+            for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
+              Object arrayValue = Array.get(value, x);
+              if (arrayValue != null) { // Skip null values.
+                addHeader(name, arrayValue.toString());
+              }
+            }
+          } else {
+            addHeader(name, value.toString());
+          }
         }
       } else if (annotationType == Field.class) {
-        String name = ((Field) annotation).value();
         if (value != null) { // Skip null values.
+          Field field = (Field) annotation;
+          String name = field.value();
+          boolean encodeName = field.encodeName();
+          boolean encodeValue = field.encodeValue();
           if (value instanceof Iterable) {
             for (Object iterableValue : (Iterable<?>) value) {
               if (iterableValue != null) { // Skip null values.
-                formBody.addField(name, iterableValue.toString());
+                formBody.addField(name, encodeName, iterableValue.toString(), encodeValue);
               }
             }
           } else if (value.getClass().isArray()) {
             for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
               Object arrayValue = Array.get(value, x);
               if (arrayValue != null) { // Skip null values.
-                formBody.addField(name, arrayValue.toString());
+                formBody.addField(name, encodeName, arrayValue.toString(), encodeValue);
               }
             }
           } else {
-            formBody.addField(name, value.toString());
+            formBody.addField(name, encodeName, value.toString(), encodeValue);
           }
         }
       } else if (annotationType == FieldMap.class) {
         if (value != null) { // Skip null values.
+          FieldMap fieldMap = (FieldMap) annotation;
+          boolean encodeNames = fieldMap.encodeNames();
+          boolean encodeValues = fieldMap.encodeValues();
           for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {
             Object entryKey = entry.getKey();
             if (entryKey == null) {
@@ -285,13 +306,14 @@ void setArguments(Object[] args) {
             }
             Object entryValue = entry.getValue();
             if (entryValue != null) { // Skip null values.
-              formBody.addField(entryKey.toString(), entryValue.toString());
+              formBody.addField(entryKey.toString(), encodeNames, entryValue.toString(),
+                  encodeValues);
             }
           }
         }
       } else if (annotationType == Part.class) {
-        String name = ((Part) annotation).value();
         if (value != null) { // Skip null values.
+          String name = ((Part) annotation).value();
           String transferEncoding = ((Part) annotation).encoding();
           if (value instanceof TypedOutput) {
             multipartBody.addPart(name, transferEncoding, (TypedOutput) value);
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 0ea320c9d..a5486249e 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -421,7 +421,7 @@ Request logAndReplaceRequest(String name, Request request, Object[] args) throws
           }
 
           byte[] bodyBytes = ((TypedByteArray) body).getBytes();
-          String bodyCharset = MimeUtil.parseCharset(body.mimeType());
+          String bodyCharset = MimeUtil.parseCharset(body.mimeType(), "UTF-8");
           log.log(new String(bodyBytes, bodyCharset));
         } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {
           if (!request.getHeaders().isEmpty()) {
@@ -468,7 +468,7 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
           byte[] bodyBytes = ((TypedByteArray) body).getBytes();
           bodySize = bodyBytes.length;
           String bodyMime = body.mimeType();
-          String bodyCharset = MimeUtil.parseCharset(bodyMime);
+          String bodyCharset = MimeUtil.parseCharset(bodyMime, "UTF-8");
           log.log(new String(bodyBytes, bodyCharset));
         }
       }
diff --git a/retrofit/src/main/java/retrofit/http/Field.java b/retrofit/src/main/java/retrofit/http/Field.java
index cdceca1a6..fce09d9c0 100644
--- a/retrofit/src/main/java/retrofit/http/Field.java
+++ b/retrofit/src/main/java/retrofit/http/Field.java
@@ -56,4 +56,10 @@
 @Retention(RUNTIME)
 public @interface Field {
   String value();
+
+  /** Specifies whether {@link #value()} is URL encoded. */
+  boolean encodeName() default true;
+
+  /** Specifies whether the argument value to the annotated method parameter is URL encoded. */
+  boolean encodeValue() default true;
 }
diff --git a/retrofit/src/main/java/retrofit/http/FieldMap.java b/retrofit/src/main/java/retrofit/http/FieldMap.java
index df1b925e8..09b6f4c0d 100644
--- a/retrofit/src/main/java/retrofit/http/FieldMap.java
+++ b/retrofit/src/main/java/retrofit/http/FieldMap.java
@@ -44,4 +44,9 @@
 @Target(PARAMETER)
 @Retention(RUNTIME)
 public @interface FieldMap {
+  /** Specifies whether parameter names (keys in the map) are URL encoded. */
+  boolean encodeNames() default true;
+
+  /** Specifies whether parameter values (values in the map) are URL encoded. */
+  boolean encodeValues() default true;
 }
diff --git a/retrofit/src/main/java/retrofit/http/Header.java b/retrofit/src/main/java/retrofit/http/Header.java
index 501b40b81..4ce2cf166 100644
--- a/retrofit/src/main/java/retrofit/http/Header.java
+++ b/retrofit/src/main/java/retrofit/http/Header.java
@@ -30,7 +30,8 @@
  * void foo(@Header("Accept-Language") String lang, Callback&lt;Response&gt; cb);
  * </pre>
  * <p>
- * Header parameters may be {@code null} which will omit them from the request.
+ * Header parameters may be {@code null} which will omit them from the request. Passing a
+ * {@link java.util.List List} or array will result in a header for each non-{@code null} item.
  * <p>
  * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
  * be included in the request.
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
index d807195a2..dc3a865d7 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -24,6 +24,10 @@
   final ByteArrayOutputStream content = new ByteArrayOutputStream();
 
   public void addField(String name, String value) {
+    addField(name, true, value, true);
+  }
+
+  public void addField(String name, boolean encodeName, String value, boolean encodeValue) {
     if (name == null) {
       throw new NullPointerException("name");
     }
@@ -34,8 +38,12 @@ public void addField(String name, String value) {
       content.write('&');
     }
     try {
-      name = URLEncoder.encode(name, "UTF-8");
-      value = URLEncoder.encode(value, "UTF-8");
+      if (encodeName) {
+        name = URLEncoder.encode(name, "UTF-8");
+      }
+      if (encodeValue) {
+        value = URLEncoder.encode(value, "UTF-8");
+      }
 
       content.write(name.getBytes("UTF-8"));
       content.write('=');
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 58534fdff..1b1a22217 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1456,6 +1456,30 @@ Response method(@Field("foo") String foo, @Field("ping") String ping) {
     assertTypedBytes(request.getBody(), "foo=bar&ping=pong");
   }
 
+  @Test public void formEncodedWithEncodedNameFieldParam() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/foo") //
+      Response method(@Field(value = "na+me", encodeName = false) String foo) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, "ba r");
+    assertTypedBytes(request.getBody(), "na+me=ba+r");
+  }
+
+  @Test public void formEncodedWithEncodedValueFieldParam() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/foo") //
+      Response method(@Field(value = "na me", encodeValue = false) String foo) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, "ba+r");
+    assertTypedBytes(request.getBody(), "na+me=ba+r");
+  }
+
   @Test public void formEncodedFieldOptional() {
     class Example {
       @FormUrlEncoded //
@@ -1511,6 +1535,40 @@ Response method(@Field("foo") int[] fields, @Field("kit") String kit) {
     assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=3&kit=kat");
   }
 
+  @Test public void formEncodedWithEncodedNameFieldParamMap() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/foo") //
+      Response method(@FieldMap(encodeNames = false) Map<String, Object> fieldMap) {
+        return null;
+      }
+    }
+
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+    fieldMap.put("k+it", "k at");
+    fieldMap.put("pin+g", "po ng");
+
+    Request request = buildRequest(Example.class, fieldMap);
+    assertTypedBytes(request.getBody(), "k+it=k+at&pin+g=po+ng");
+  }
+
+  @Test public void formEncodedWithEncodedValueFieldParamMap() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/foo") //
+      Response method(@FieldMap(encodeValues = false) Map<String, Object> fieldMap) {
+        return null;
+      }
+    }
+
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+    fieldMap.put("k it", "k+at");
+    fieldMap.put("pin g", "po+ng");
+
+    Request request = buildRequest(Example.class, fieldMap);
+    assertTypedBytes(request.getBody(), "k+it=k+at&pin+g=po+ng");
+  }
+
   @Test public void formEncodedFieldMap() {
     class Example {
       @FormUrlEncoded //
@@ -1680,6 +1738,36 @@ Response method(@retrofit.http.Header("kit") String kit) {
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void headerParamList() {
+    class Example {
+      @GET("/foo/bar/") //
+      Response method(@retrofit.http.Header("foo") List<String> kit) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
+  @Test public void headerParamArray() {
+    class Example {
+      @GET("/foo/bar/") //
+      Response method(@retrofit.http.Header("foo") String[] kit) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void contentTypeAnnotationHeaderOverrides() {
     class Example {
       @POST("/") //
diff --git a/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
index eb5b45104..5019ef6b2 100644
--- a/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
+++ b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
@@ -21,6 +21,7 @@
     assertThat(parseCharset("text/plain; notthecharset=utf-16;", "UTF-8")).isEqualToIgnoringCase("UTF-8");
   }
 
+  @SuppressWarnings("deprecation")
   @Test public void oldCharsetParsing() {
     assertThat(parseCharset("text/plain;charset=utf-8")).isEqualToIgnoringCase("UTF-8");
     assertThat(parseCharset("text/plain; charset=utf-8")).isEqualToIgnoringCase("UTF-8");
diff --git a/website/index.html b/website/index.html
index 81450325e..cfd04f78b 100644
--- a/website/index.html
+++ b/website/index.html
@@ -140,7 +140,7 @@ <h4>Synchronous vs. Asynchronous vs. Observable</h4>
 void getUserPhoto(@Path("id") int id, Callback&lt;Photo> cb);</pre>
             <p>On Android, callbacks will be executed on the main thread. For desktop applications callbacks will happen on the same thread that executed the HTTP request.</p>
 
-            <p>Retrofit also integrates <a href="https://github.com/Netflix/RxJava/wiki">RxJava</a> to support methods with a return type of <code>rx.Observable</code></p>
+            <p>Retrofit also integrates <a href="https://github.com/ReactiveX/RxJava/wiki">RxJava</a> to support methods with a return type of <code>rx.Observable</code></p>
             <pre class="prettyprint">@GET("/user/{id}/photo")
 Observable&lt;Photo> getUserPhoto(@Path("id") int id);</pre>
             <p>Observable requests are subscribed asynchronously and observed on the same thread that executed the HTTP request.  To observe on a different thread (e.g. Android's main thread) call <code>observeOn(Scheduler)</code> on the returned <code>Observable</code>.</p>
@@ -226,7 +226,7 @@ <h4>Logging</h4>
             <p>This logging can be added or changed at any point in the <code>RestAdapter</code>'s lifecycle by calling the same <code>.setLogLevel()</code> method and supplying a different <code>LogLevel</code> value.</p>
 
             <h3 id="download">Download</h3>
-            <p><a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.retrofit&a=retrofit&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>
+            <p><a href="https://search.maven.org/remote_content?g=com.squareup.retrofit&a=retrofit&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>
             <p>The source code to the Retrofit, its samples, and this website is <a href="http://github.com/square/retrofit">available on GitHub</a>.</p>
             <h4>Maven</h4>
             <pre class="prettyprint">&lt;dependency>
