diff --git a/pom.xml b/pom.xml
index 2989d3d4e..2e5ceb0dd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -23,14 +23,14 @@
     <version>7</version>
   </parent>
 
-  <groupId>com.squareup.retrofit2</groupId>
+  <groupId>com.loodah.retrofit2</groupId>
   <artifactId>parent</artifactId>
-  <version>2.4.0-SNAPSHOT</version>
+  <version>2.3.1</version>
   <packaging>pom</packaging>
 
   <name>Retrofit (Parent)</name>
   <description>Type-safe HTTP client for Android and Java by Square, Inc.</description>
-  <url>http://github.com/square/retrofit/</url>
+  <url>http://github.com/lby221/retrofit/</url>
 
   <modules>
     <module>retrofit</module>
@@ -76,9 +76,9 @@
   </properties>
 
   <scm>
-    <url>http://github.com/square/retrofit</url>
-    <connection>scm:git:git://github.com/square/retrofit.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/square/retrofit.git</developerConnection>
+    <url>http://github.com/lby221/retrofit</url>
+    <connection>scm:git:git://github.com/lby221/retrofit.git</connection>
+    <developerConnection>scm:git:ssh://git@github.com/lby221/retrofit.git</developerConnection>
     <tag>HEAD</tag>
   </scm>
 
@@ -95,8 +95,8 @@
   </licenses>
 
   <organization>
-    <name>Square, Inc.</name>
-    <url>http://squareup.com</url>
+    <name>Loodah, Inc.</name>
+    <url>http://loodah.com</url>
   </organization>
 
   <dependencyManagement>
diff --git a/retrofit-adapters/pom.xml b/retrofit-adapters/pom.xml
index 9c55ab105..6b6f4414b 100644
--- a/retrofit-adapters/pom.xml
+++ b/retrofit-adapters/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.retrofit2</groupId>
+    <groupId>com.loodah.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>2.3.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava/pom.xml b/retrofit-adapters/rxjava/pom.xml
index 4f010a453..5a93c599b 100644
--- a/retrofit-adapters/rxjava/pom.xml
+++ b/retrofit-adapters/rxjava/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.retrofit2</groupId>
+    <groupId>com.loodah.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>2.3.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -14,11 +14,6 @@
   <name>Adapter: RxJava</name>
 
   <dependencies>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
     <dependency>
       <groupId>io.reactivex</groupId>
       <artifactId>rxjava</artifactId>
diff --git a/retrofit-converters/gson/pom.xml b/retrofit-converters/gson/pom.xml
index 823e50491..ee80a7287 100644
--- a/retrofit-converters/gson/pom.xml
+++ b/retrofit-converters/gson/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.retrofit2</groupId>
+    <groupId>com.loodah.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>2.3.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -14,11 +14,6 @@
   <name>Converter: Gson</name>
 
   <dependencies>
-    <dependency>
-      <groupId>${project.groupId}</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
     <dependency>
       <groupId>com.google.code.gson</groupId>
       <artifactId>gson</artifactId>
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index c6258b38c..ba5d2a13a 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.retrofit2</groupId>
+    <groupId>com.loodah.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>2.3.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 6a2cea74b..30c19fefa 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -4,9 +4,9 @@
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
-    <groupId>com.squareup.retrofit2</groupId>
+    <groupId>com.loodah.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.4.0-SNAPSHOT</version>
+    <version>2.3.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit/src/main/java/retrofit2/LoodahInterceptor.java b/retrofit/src/main/java/retrofit2/LoodahInterceptor.java
new file mode 100644
index 000000000..46f2aa063
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/LoodahInterceptor.java
@@ -0,0 +1,19 @@
+package retrofit2;
+
+/**
+ * Created by baiyuliu on 5/23/17.
+ */
+public interface LoodahInterceptor {
+
+    // returns authorization header value
+    String addAuth();
+
+    // add signature based on string to sign generated
+    String addSignature(String stringToSign);
+
+    // set custom user agent
+    String setUserAgent();
+
+    // set Loodah endpoint
+    String setEndpoint();
+}
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index f27db26ee..a710d248d 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -16,6 +16,7 @@
 package retrofit2;
 
 import java.io.IOException;
+import java.util.Date;
 import javax.annotation.Nullable;
 import okhttp3.FormBody;
 import okhttp3.Headers;
@@ -40,6 +41,7 @@
 
   private final Request.Builder requestBuilder;
   private @Nullable MediaType contentType;
+  private @Nullable LoodahInterceptor loodahInterceptor;
 
   private final boolean hasBody;
   private @Nullable MultipartBody.Builder multipartBuilder;
@@ -48,13 +50,14 @@
 
   RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
-      boolean isFormEncoded, boolean isMultipart) {
+      boolean isFormEncoded, boolean isMultipart, @Nullable LoodahInterceptor interceptor) {
     this.method = method;
     this.baseUrl = baseUrl;
     this.relativeUrl = relativeUrl;
     this.requestBuilder = new Request.Builder();
     this.contentType = contentType;
     this.hasBody = hasBody;
+    this.loodahInterceptor = interceptor;
 
     if (headers != null) {
       requestBuilder.headers(headers);
@@ -223,6 +226,80 @@ Request build() {
       }
     }
 
+    // Add Loodah headers
+      StringBuffer sb = new StringBuffer();
+
+    String endpoint = relativeUrl != null ? relativeUrl : "";
+
+    if (loodahInterceptor != null) {
+        endpoint = loodahInterceptor.setEndpoint();
+    }
+
+    sb.append(method);
+    sb.append("\n");
+    sb.append(endpoint);
+    sb.append("\n\n");
+    sb.append("accept-encoding");
+    sb.append("\n");
+    sb.append("gzip");
+
+    String userAgent = "Loodah Android";
+    String epochtime = String.valueOf(new Date().getTime());
+
+    if (loodahInterceptor != null) {
+      sb.append("\n\n");
+      sb.append("authorization");
+      sb.append("\n");
+      sb.append(loodahInterceptor.addAuth());
+
+      userAgent = loodahInterceptor.setUserAgent();
+    }
+
+    sb.append("\n\n");
+    sb.append("connection");
+    sb.append("\n");
+    sb.append("Keep-Alive");
+    sb.append("\n\n");
+
+    if (body != null) {
+      try {
+          sb.append("content-length");
+          sb.append("\n");
+          sb.append(String.valueOf(body.contentLength()));
+          sb.append("\n\n");
+      } catch (Exception e) {
+          ; // Don't add any content-length headers
+      }
+    }
+
+    if (body != null && body.contentType() != null) {
+      sb.append("content-type");
+      sb.append("\n");
+      sb.append(body.contentType());
+      sb.append("\n\n");
+    }
+
+    sb.append("user-agent");
+    sb.append("\n");
+    sb.append(userAgent);
+    sb.append("\n\n");
+    sb.append(epochtime);
+
+    String stringToSign = sb.toString();
+    System.out.println(stringToSign);
+
+    String signature = "";
+    if (loodahInterceptor != null) {
+      signature = loodahInterceptor.addSignature(stringToSign);
+    }
+
+    requestBuilder.addHeader("User-Agent", userAgent);
+
+    if (!signature.isEmpty()) {
+      requestBuilder.addHeader("X-Loodah-Time", epochtime);
+      requestBuilder.addHeader("X-Loodah-Signature", signature);
+    }
+
     return requestBuilder
         .url(url)
         .method(method, body)
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 96d92b21a..6119d4596 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -66,16 +66,18 @@
   final List<CallAdapter.Factory> adapterFactories;
   final @Nullable Executor callbackExecutor;
   final boolean validateEagerly;
+  final LoodahInterceptor loodahInterceptor;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
       List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
-      @Nullable Executor callbackExecutor, boolean validateEagerly) {
+      @Nullable Executor callbackExecutor, boolean validateEagerly, LoodahInterceptor interceptor) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
     this.converterFactories = unmodifiableList(converterFactories); // Defensive copy at call site.
     this.adapterFactories = unmodifiableList(adapterFactories); // Defensive copy at call site.
     this.callbackExecutor = callbackExecutor;
     this.validateEagerly = validateEagerly;
+    this.loodahInterceptor = interceptor;
   }
 
   /**
@@ -151,6 +153,10 @@
         });
   }
 
+  LoodahInterceptor getLoodahInterceptor() {
+    return loodahInterceptor;
+  }
+
   private void eagerlyValidateMethods(Class<?> service) {
     Platform platform = Platform.get();
     for (Method method : service.getDeclaredMethods()) {
@@ -399,6 +405,7 @@ public Builder newBuilder() {
     private final List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
     private @Nullable Executor callbackExecutor;
     private boolean validateEagerly;
+    private LoodahInterceptor loodahInterceptor = null;
 
     Builder(Platform platform) {
       this.platform = platform;
@@ -552,12 +559,21 @@ public Builder validateEagerly(boolean validateEagerly) {
       return this;
     }
 
+    /**
+     * Sets API level interceptor to retrofit
+     */
+    public Builder setInterceptor(LoodahInterceptor interceptor) {
+      this.loodahInterceptor = interceptor;
+      return this;
+    }
+
     /**
      * Create the {@link Retrofit} instance using the configured values.
      * <p>
      * Note: If neither {@link #client} nor {@link #callFactory} is called a default {@link
      * OkHttpClient} will be created and used.
      */
+
     public Retrofit build() {
       if (baseUrl == null) {
         throw new IllegalStateException("Base URL required.");
@@ -581,7 +597,7 @@ public Retrofit build() {
       List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);
 
       return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,
-          callbackExecutor, validateEagerly);
+          callbackExecutor, validateEagerly, loodahInterceptor);
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index d0a19384c..68efba84d 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -66,6 +66,7 @@
 
   final okhttp3.Call.Factory callFactory;
   final CallAdapter<R, T> callAdapter;
+  final LoodahInterceptor loodahInterceptor;
 
   private final HttpUrl baseUrl;
   private final Converter<ResponseBody, R> responseConverter;
@@ -91,12 +92,13 @@
     this.isFormEncoded = builder.isFormEncoded;
     this.isMultipart = builder.isMultipart;
     this.parameterHandlers = builder.parameterHandlers;
+    this.loodahInterceptor = builder.loodahInterceptor;
   }
 
   /** Builds an HTTP request from method arguments. */
   Request toRequest(@Nullable Object... args) throws IOException {
     RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-        contentType, hasBody, isFormEncoded, isMultipart);
+        contentType, hasBody, isFormEncoded, isMultipart, loodahInterceptor);
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -149,6 +151,7 @@ R toResponse(ResponseBody body) throws IOException {
     ParameterHandler<?>[] parameterHandlers;
     Converter<ResponseBody, T> responseConverter;
     CallAdapter<T, R> callAdapter;
+    LoodahInterceptor loodahInterceptor;
 
     Builder(Retrofit retrofit, Method method) {
       this.retrofit = retrofit;
@@ -156,6 +159,7 @@ R toResponse(ResponseBody body) throws IOException {
       this.methodAnnotations = method.getAnnotations();
       this.parameterTypes = method.getGenericParameterTypes();
       this.parameterAnnotationsArray = method.getParameterAnnotations();
+      this.loodahInterceptor = retrofit.getLoodahInterceptor();
     }
 
     public ServiceMethod build() {
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 66be17b17..c2a819a8e 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -2700,6 +2700,7 @@ private static void assertBody(RequestBody body, String expected) {
   static <T> Request buildRequest(Class<T> cls, Object... args) {
     Retrofit.Builder retrofitBuilder = new Retrofit.Builder()
         .baseUrl("http://example.com/")
+            .setInterceptor(null)
         .addConverterFactory(new ToStringConverterFactory());
 
     return buildRequest(cls, retrofitBuilder, args);
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 92dfb74ca..72a385807 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -67,6 +67,27 @@
 public final class RetrofitTest {
   @Rule public final MockWebServer server = new MockWebServer();
 
+  class TestInterceptor implements LoodahInterceptor {
+    // returns authorization header value
+    public String addAuth(){
+      return "auth";
+    }
+
+    // add signature based on string to sign generated
+    public String addSignature(String stringToSign){
+      return "signature";
+    }
+
+    // set custom user agent
+    public String setUserAgent() {
+      return "user-agent";
+    }
+
+    public String setEndpoint() {
+      return "sendcode";
+    }
+  }
+
   interface CallMethod {
     @GET("/") Call<String> disallowed();
     @POST("/") Call<ResponseBody> disallowed(@Body String body);
@@ -218,13 +239,23 @@
 
   @Test public void validateEagerlyDisabledByDefault() {
     Retrofit retrofit = new Retrofit.Builder()
-        .baseUrl(server.url("/"))
+        .baseUrl(server.url("sendcode/"))
         .build();
 
     // Should not throw exception about incorrect configuration of the VoidService
     retrofit.create(VoidService.class);
   }
 
+  @Test public void validateLoodahInterceptor() {
+    Retrofit retrofit = new Retrofit.Builder()
+            .baseUrl(server.url("sendcode/"))
+            .setInterceptor(new TestInterceptor())
+            .build();
+
+    // Should not throw exception about incorrect configuration of the VoidService
+    retrofit.create(VoidService.class);
+  }
+
   @Test public void validateEagerlyDisabledByUser() {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
