diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
index 8a3f0df2d..375d51d61 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit2.adapter.rxjava2;
 
 import io.reactivex.Observable;
@@ -12,44 +27,43 @@
 /**
  * @author JSpiner (jspiner@naver.com)
  */
-public class ResponseObservable<T> extends Observable<Response<T>> {
-    private final Observable<Response<T>> upstream;
+final class ResponseObservable<T> extends Observable<Response<T>> {
+  private final Observable<Response<T>> upstream;
+  ResponseObservable(Observable<Response<T>> upstream) {
+    this.upstream = upstream;
+  }
+
+  @Override protected void subscribeActual(Observer<? super Response<T>> observer) {
+    upstream.subscribe(new ResponseObservable.ResponseObserver<T>(observer));
+  }
+
+  private static class ResponseObserver<R> implements Observer<Response<R>> {
+    private final Observer<? super Response<R>> observer;
+
+    ResponseObserver(Observer<? super Response<R>> observer) {
+      this.observer = observer;
+    }
+
+    @Override public void onSubscribe(Disposable disposable) {
+      observer.onSubscribe(disposable);
+    }
 
-    ResponseObservable(Observable<Response<T>> upstream) {
-        this.upstream = upstream;
+    @Override public void onNext(Response<R> response) {
+      observer.onNext(response);
     }
 
-    @Override protected void subscribeActual(Observer<? super Response<T>> observer) {
-        upstream.subscribe(new ResponseObservable.ResponseObserver<T>(observer));
+    @Override public void onComplete() {
+      observer.onComplete();
     }
 
-    private static class ResponseObserver<R> implements Observer<Response<R>> {
-        private final Observer<? super Response<R>> observer;
-
-        ResponseObserver(Observer<? super Response<R>> observer) {
-            this.observer = observer;
-        }
-
-        @Override public void onSubscribe(Disposable disposable) {
-            observer.onSubscribe(disposable);
-        }
-
-        @Override public void onNext(Response<R> response) {
-            observer.onNext(response);
-        }
-
-        @Override public void onComplete() {
-            observer.onComplete();
-        }
-
-        @Override public void onError(Throwable throwable) {
-            try {
-                observer.onError(throwable);
-            } catch (Throwable inner) {
-                Exceptions.throwIfFatal(inner);
-                RxJavaPlugins.onError(new CompositeException(throwable, inner));
-            }
-            return;
-        }
+    @Override public void onError(Throwable throwable) {
+      try {
+        observer.onError(throwable);
+      } catch (Throwable inner) {
+        Exceptions.throwIfFatal(inner);
+        RxJavaPlugins.onError(new CompositeException(throwable, inner));
+      }
+      return;
     }
+  }
 }
diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
index 0bd0100e3..42c7061ea 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapter.java
@@ -37,8 +37,8 @@
   private final boolean isCompletable;
 
   RxJava2CallAdapter(Type responseType, @Nullable Scheduler scheduler, boolean isAsync,
-      boolean isResponseObservable, boolean isResult, boolean isBody, boolean isFlowable, boolean isSingle, boolean isMaybe,
-      boolean isCompletable) {
+      boolean isResponseObservable, boolean isResult, boolean isBody, boolean isFlowable,
+      boolean isSingle, boolean isMaybe, boolean isCompletable) {
     this.responseType = responseType;
     this.scheduler = scheduler;
     this.isAsync = isAsync;
@@ -61,10 +61,9 @@
         : new CallExecuteObservable<>(call);
 
     Observable<?> observable;
-    if (isResponseObservable){
+    if (isResponseObservable) {
       observable = new ResponseObservable<>(responseObservable);
-    }
-    else if (isResult) {
+    } else if (isResult) {
       observable = new ResultObservable<>(responseObservable);
     } else if (isBody) {
       observable = new BodyObservable<>(responseObservable);
diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
index 485343d35..40d53828d 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/RxJava2CallAdapterFactory.java
@@ -97,15 +97,16 @@ private RxJava2CallAdapterFactory(@Nullable Scheduler scheduler, boolean isAsync
     if (rawType == Completable.class) {
       // Completable is not parameterized (which is what the rest of this method deals with) so it
       // can only be created with a single configuration.
-      return new RxJava2CallAdapter(Void.class, scheduler, isAsync, false, false, true, false, false,
-          false, true);
+      return new RxJava2CallAdapter(Void.class, scheduler, isAsync, false, false, true,
+          false, false, false, true);
     }
 
     boolean isFlowable = rawType == Flowable.class;
     boolean isSingle = rawType == Single.class;
     boolean isMaybe = rawType == Maybe.class;
     boolean isResponseObservable = rawType == ResponseObservable.class;
-    if (rawType != Observable.class && !isResponseObservable && !isFlowable && !isSingle && !isMaybe) {
+    if (rawType != Observable.class && !isResponseObservable && !isFlowable && !isSingle
+            && !isMaybe) {
       return null;
     }
 
@@ -140,7 +141,7 @@ private RxJava2CallAdapterFactory(@Nullable Scheduler scheduler, boolean isAsync
       isBody = true;
     }
 
-    return new RxJava2CallAdapter(responseType, scheduler, isAsync, isResponseObservable, isResult, isBody, isFlowable,
-        isSingle, isMaybe, false);
+    return new RxJava2CallAdapter(responseType, scheduler, isAsync, isResponseObservable, isResult,
+        isBody, isFlowable, isSingle, isMaybe, false);
   }
 }
