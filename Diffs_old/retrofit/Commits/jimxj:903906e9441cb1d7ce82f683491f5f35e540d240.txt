diff --git a/retrofit/src/main/java/com/magnet/MagnetServiceException.java b/retrofit/src/main/java/com/magnet/MagnetServiceException.java
new file mode 100644
index 000000000..89986cb69
--- /dev/null
+++ b/retrofit/src/main/java/com/magnet/MagnetServiceException.java
@@ -0,0 +1,41 @@
+package com.magnet;
+
+public class MagnetServiceException extends Exception {
+  private int code;
+
+  public MagnetServiceException() {
+  }
+
+  public MagnetServiceException(int code) {
+    this.code = code;
+  }
+
+  public MagnetServiceException(String message) {
+    this(message, 0);
+  }
+
+  public MagnetServiceException(String message, int code) {
+    this(message, null, code);
+  }
+
+  public MagnetServiceException(String message, Throwable cause) {
+    this(message, cause, 0);
+  }
+
+  public MagnetServiceException(String message, Throwable cause, int code) {
+    super(message, cause);
+    this.code = code;
+  }
+
+  public MagnetServiceException(Throwable cause) {
+    this(cause, 0);
+  }
+
+  public MagnetServiceException(Throwable cause, int code) {
+    this(null, cause, code);
+  }
+
+  public int getCode() {
+    return code;
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/OkHttpCall.java b/retrofit/src/main/java/retrofit/OkHttpCall.java
index 5e34cadcc..fc4b13731 100644
--- a/retrofit/src/main/java/retrofit/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit/OkHttpCall.java
@@ -15,6 +15,8 @@
  */
 package retrofit;
 
+import com.magnet.MagnetServiceException;
+import com.squareup.okhttp.CacheControl;
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.ResponseBody;
@@ -91,6 +93,16 @@ private void callSuccess(Response<T> response) {
         Response<T> response;
         try {
           response = parseResponse(rawResponse);
+
+          //JIM call failure callback if server returns error
+          if (isErrorResponse(rawResponse.code())) {
+            try {
+              callFailure(new MagnetServiceException(response.errorBody().string(),
+                      rawResponse.code()));
+            } catch (IOException e) {
+
+            }
+          }
         } catch (Throwable e) {
           callFailure(e);
           return;
@@ -128,7 +140,7 @@ private void callSuccess(Response<T> response) {
         .build();
 
     int code = rawResponse.code();
-    if (code < 200 || code >= 300) {
+    if (isErrorResponse(code)) {
       try {
         // Buffer the entire body to avoid future I/O.
         ResponseBody bufferedBody = Utils.readBodyToBytesIfNecessary(rawBody);
@@ -175,9 +187,18 @@ public void setArgs(Object[] args) {
   }
 
   public Request getRequest() {
+    return getRequest(null);
+  }
+  public Request getRequest(CacheControl cacheControl) {
     if (null == request) {
       request = requestFactory.create(args);
     }
+    if (null != cacheControl) {
+      request = request.newBuilder().cacheControl(cacheControl).build();
+    }
     return request;
   }
+  private boolean isErrorResponse(int responseCode) {
+     return responseCode < 200 || responseCode >= 300;
+  }
 }
