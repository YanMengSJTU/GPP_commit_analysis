diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
old mode 100644
new mode 100755
index 10238b026..030a22c66
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -360,4 +360,21 @@ private RawPart() {
       builder.setBody(body);
     }
   }
+
+  static final class Model<T> extends ParameterHandler<T> {
+
+    Model() {
+      String message = "For test purpose only";
+    }
+
+    @Override
+    void apply(RequestBuilder builder, @Nullable T value) {
+      if (value == null) {
+        throw new IllegalArgumentException("RequestModel parameter value must not be null.");
+      }
+
+      RequestModel requestModel = (RequestModel) value;
+      requestModel.fulfill(builder);
+    }
+  }
 }
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
old mode 100644
new mode 100755
index f27db26ee..cd5ee8285
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -27,7 +27,7 @@
 import okio.Buffer;
 import okio.BufferedSink;
 
-final class RequestBuilder {
+public final class RequestBuilder {
   private static final char[] HEX_DIGITS =
       { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
   private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";
@@ -46,7 +46,7 @@
   private @Nullable FormBody.Builder formBuilder;
   private @Nullable RequestBody body;
 
-  RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
+ public RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
       boolean isFormEncoded, boolean isMultipart) {
     this.method = method;
@@ -70,11 +70,11 @@
     }
   }
 
-  void setRelativeUrl(Object relativeUrl) {
+  public void setRelativeUrl(Object relativeUrl) {
     this.relativeUrl = relativeUrl.toString();
   }
 
-  void addHeader(String name, String value) {
+  public void addHeader(String name, String value) {
     if ("Content-Type".equalsIgnoreCase(name)) {
       MediaType type = MediaType.parse(value);
       if (type == null) {
@@ -86,7 +86,7 @@ void addHeader(String name, String value) {
     }
   }
 
-  void addPathParam(String name, String value, boolean encoded) {
+  public void addPathParam(String name, String value, boolean encoded) {
     if (relativeUrl == null) {
       // The relative URL is cleared when the first query parameter is set.
       throw new AssertionError();
@@ -143,7 +143,7 @@ private static void canonicalizeForPath(Buffer out, String input, int pos, int l
     }
   }
 
-  void addQueryParam(String name, @Nullable String value, boolean encoded) {
+  public void addQueryParam(String name, @Nullable String value, boolean encoded) {
     if (relativeUrl != null) {
       // Do a one-time combination of the built relative URL and the base URL.
       urlBuilder = baseUrl.newBuilder(relativeUrl);
@@ -164,7 +164,7 @@ void addQueryParam(String name, @Nullable String value, boolean encoded) {
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isFormEncoded was true.
-  void addFormField(String name, String value, boolean encoded) {
+  public void addFormField(String name, String value, boolean encoded) {
     if (encoded) {
       formBuilder.addEncoded(name, value);
     } else {
@@ -173,20 +173,20 @@ void addFormField(String name, String value, boolean encoded) {
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isMultipart was true.
-  void addPart(Headers headers, RequestBody body) {
+  public void addPart(Headers headers, RequestBody body) {
     multipartBuilder.addPart(headers, body);
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isMultipart was true.
-  void addPart(MultipartBody.Part part) {
+  public void addPart(MultipartBody.Part part) {
     multipartBuilder.addPart(part);
   }
 
-  void setBody(RequestBody body) {
+  public void setBody(RequestBody body) {
     this.body = body;
   }
 
-  Request build() {
+  public Request build() {
     HttpUrl url;
     HttpUrl.Builder urlBuilder = this.urlBuilder;
     if (urlBuilder != null) {
diff --git a/retrofit/src/main/java/retrofit2/RequestModel.java b/retrofit/src/main/java/retrofit2/RequestModel.java
new file mode 100644
index 000000000..205416702
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/RequestModel.java
@@ -0,0 +1,9 @@
+package retrofit2;
+
+/**
+ * Created by ihorkostenko on 3/5/18.
+ */
+
+public interface RequestModel {
+	void fulfill(RequestBuilder builder);
+}
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
old mode 100644
new mode 100755
index 9e718b604..66186fed5
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -43,6 +43,7 @@
 import retrofit2.http.HTTP;
 import retrofit2.http.Header;
 import retrofit2.http.HeaderMap;
+import retrofit2.http.Model;
 import retrofit2.http.Multipart;
 import retrofit2.http.OPTIONS;
 import retrofit2.http.PATCH;
@@ -717,6 +718,8 @@ private Headers parseHeaders(String[] headers) {
         }
         gotBody = true;
         return new ParameterHandler.Body<>(converter);
+      } else if (annotation instanceof Model) {
+        return new ParameterHandler.Model<>();
       }
 
       return null; // Not a Retrofit annotation.
diff --git a/retrofit/src/main/java/retrofit2/http/Model.java b/retrofit/src/main/java/retrofit2/http/Model.java
new file mode 100644
index 000000000..d32596605
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/Model.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2011 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+import retrofit2.Converter;
+import retrofit2.Retrofit;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface Model {
+}
