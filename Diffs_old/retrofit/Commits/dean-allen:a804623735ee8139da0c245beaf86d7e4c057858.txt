diff --git a/retrofit/src/main/java/retrofit/http/RequestBuilder.java b/retrofit/src/main/java/retrofit/http/RequestBuilder.java
index a7b849569..05c314f0f 100644
--- a/retrofit/src/main/java/retrofit/http/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/http/RequestBuilder.java
@@ -6,6 +6,7 @@
 import java.util.ArrayList;
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 import retrofit.http.client.Request;
 import retrofit.http.mime.TypedOutput;
@@ -81,7 +82,7 @@ Request build() {
     for (String pathParam : pathParams) {
       Parameter found = null;
       for (Parameter param : paramList) {
-        if (param.getName().equals(pathParam)) {
+        if (param.getName().toLowerCase(Locale.ENGLISH).equals(pathParam)) {
           found = param;
           break;
         }
diff --git a/retrofit/src/main/java/retrofit/http/RestMethodInfo.java b/retrofit/src/main/java/retrofit/http/RestMethodInfo.java
index beb72cf38..fc8ad9d0b 100644
--- a/retrofit/src/main/java/retrofit/http/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/http/RestMethodInfo.java
@@ -190,9 +190,9 @@ private void parseParameters() {
       for (Annotation parameterAnnotation : parameterAnnotations) {
         Class<? extends Annotation> annotationType = parameterAnnotation.annotationType();
         if (annotationType == Name.class) {
-          String name = ((Name) parameterAnnotation).value().toLowerCase(Locale.ENGLISH);
+          String name = ((Name) parameterAnnotation).value();
           namedParams[i] = name;
-          boolean isPathParam = pathParams.contains(name);
+          boolean isPathParam = pathParams.contains(name.toLowerCase(Locale.ENGLISH));
           if (parameterType == TypedOutput.class && (isPathParam || !restMethod.hasBody())) {
             throw new IllegalStateException("TypedOutput cannot be used as URL parameter.");
           }
@@ -218,7 +218,7 @@ private void parseParameters() {
     // Check for single entity + non-path parameters.
     if (singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
       for (String namedParam : namedParams) {
-        if (namedParam != null && !pathParams.contains(namedParam)) {
+        if (namedParam != null && !pathParams.contains(namedParam.toLowerCase(Locale.ENGLISH))) {
           throw new IllegalStateException(
               "Single entity and non-path parameters cannot both be present.");
         }
diff --git a/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java
index 7de05d4f1..722eed344 100644
--- a/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java
@@ -9,6 +9,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Locale;
 import java.util.Set;
 import org.apache.http.entity.mime.FormBodyPart;
 import org.apache.http.entity.mime.HttpMultipart;
@@ -49,6 +50,20 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void getWithPathParamUsingUppercase() throws Exception {
+      Request request = new Helper() //
+      .setMethod("GET") //
+      .setUrl("http://example.com") //
+      .setPath("/foo/bar/{PING}/{pong}/") //
+      .addNamedParam("PING", "PONG") //
+      .addNamedParam("pong", "ping") //
+      .build();
+      assertThat(request.getMethod()).isEqualTo("GET");
+      assertThat(request.getHeaders()).isEmpty();
+      assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/PONG/ping/");
+      assertThat(request.getBody()).isNull();
+  }
+
   @Test public void getWithQueryParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
