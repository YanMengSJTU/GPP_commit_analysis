diff --git a/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java b/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
index 40e222b15..5dc5e499c 100644
--- a/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
+++ b/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
@@ -2,15 +2,21 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.charset.Charset;
+import okio.Buffer;
+import okio.BufferedSource;
+import okio.ByteString;
+import okio.Sink;
+import okio.Timeout;
 import retrofit.mime.TypedInput;
 
 class ExceptionCatchingTypedInput implements TypedInput {
   private final TypedInput delegate;
-  private final ExceptionCatchingInputStream delegateStream;
+  private final ExceptionCatchingSource delegateSource;
 
   ExceptionCatchingTypedInput(TypedInput delegate) throws IOException {
     this.delegate = delegate;
-    this.delegateStream = new ExceptionCatchingInputStream(delegate.in());
+    this.delegateSource = new ExceptionCatchingSource(delegate.in());
   }
 
   @Override public String mimeType() {
@@ -21,95 +27,325 @@
     return delegate.length();
   }
 
-  @Override public InputStream in() throws IOException {
-    return delegateStream;
+  @Override public BufferedSource in() throws IOException {
+    return delegateSource;
   }
 
   IOException getThrownException() {
-    return delegateStream.thrownException;
+    return delegateSource.thrownException;
   }
 
   boolean threwException() {
-    return delegateStream.thrownException != null;
+    return delegateSource.thrownException != null;
   }
 
-  private static class ExceptionCatchingInputStream extends InputStream {
-    private final InputStream delegate;
+  private static class ExceptionCatchingSource implements BufferedSource {
+    private final BufferedSource delegate;
     private IOException thrownException;
 
-    ExceptionCatchingInputStream(InputStream delegate) {
+    ExceptionCatchingSource(BufferedSource delegate) {
       this.delegate = delegate;
     }
 
-    @Override public int read() throws IOException {
+    @Override public Buffer buffer() {
+      return delegate.buffer();
+    }
+
+    @Override public boolean exhausted() throws IOException {
       try {
-        return delegate.read();
+        return delegate.exhausted();
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public int read(byte[] buffer) throws IOException {
+    @Override public void require(long byteCount) throws IOException {
       try {
-        return delegate.read(buffer);
+        delegate.require(byteCount);
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public int read(byte[] buffer, int offset, int length) throws IOException {
+    @Override public boolean request(long byteCount) throws IOException {
       try {
-        return delegate.read(buffer, offset, length);
+        return delegate.request(byteCount);
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public long skip(long byteCount) throws IOException {
+    @Override public byte readByte() throws IOException {
       try {
-        return delegate.skip(byteCount);
+        return delegate.readByte();
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public int available() throws IOException {
+    @Override public short readShort() throws IOException {
       try {
-        return delegate.available();
+        return delegate.readShort();
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public void close() throws IOException {
+    @Override public short readShortLe() throws IOException {
       try {
-        delegate.close();
+        return delegate.readShortLe();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public int readInt() throws IOException {
+      try {
+        return delegate.readInt();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public int readIntLe() throws IOException {
+      try {
+        return delegate.readIntLe();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long readLong() throws IOException {
+      try {
+        return delegate.readLong();
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public synchronized void mark(int readLimit) {
-      delegate.mark(readLimit);
+    @Override public long readLongLe() throws IOException {
+      try {
+        return delegate.readLongLe();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
     }
 
-    @Override public synchronized void reset() throws IOException {
+    @Override public void skip(long byteCount) throws IOException {
       try {
-        delegate.reset();
+        delegate.skip(byteCount);
       } catch (IOException e) {
         thrownException = e;
         throw e;
       }
     }
 
-    @Override public boolean markSupported() {
-      return delegate.markSupported();
+    @Override public ByteString readByteString() throws IOException {
+      try {
+        return delegate.readByteString();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public ByteString readByteString(long byteCount) throws IOException {
+      try {
+        return delegate.readByteString(byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public byte[] readByteArray() throws IOException {
+      try {
+        return delegate.readByteArray();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public byte[] readByteArray(long byteCount) throws IOException {
+      try {
+        return delegate.readByteArray(byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public int read(byte[] sink) throws IOException {
+      try {
+        return delegate.read(sink);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public void readFully(byte[] sink) throws IOException {
+      try {
+        delegate.readFully(sink);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public int read(byte[] sink, int offset, int byteCount) throws IOException {
+      try {
+        return delegate.read(sink, offset, byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public void readFully(Buffer sink, long byteCount) throws IOException {
+      try {
+        delegate.readFully(sink, byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long readAll(Sink sink) throws IOException {
+      try {
+        return delegate.readAll(sink);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readUtf8() throws IOException {
+      try {
+        return delegate.readUtf8();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readUtf8(long byteCount) throws IOException {
+      try {
+        return delegate.readUtf8(byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readUtf8Line() throws IOException {
+      try {
+        return delegate.readUtf8Line();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readUtf8LineStrict() throws IOException {
+      try {
+        return delegate.readUtf8LineStrict();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readString(Charset charset) throws IOException {
+      try {
+        return delegate.readString(charset);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public String readString(long byteCount, Charset charset) throws IOException {
+      try {
+        return delegate.readString(byteCount, charset);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long indexOf(byte b) throws IOException {
+      try {
+        return delegate.indexOf(b);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long indexOf(byte b, long fromIndex) throws IOException {
+      try {
+        return delegate.indexOf(b, fromIndex);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long indexOfElement(ByteString targetBytes) throws IOException {
+      try {
+        return delegate.indexOfElement(targetBytes);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public long indexOfElement(ByteString targetBytes, long fromIndex)
+        throws IOException {
+      try {
+        return delegate.indexOfElement(targetBytes, fromIndex);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public InputStream inputStream() {
+      return delegate.inputStream();
+    }
+
+    @Override public long read(Buffer sink, long byteCount) throws IOException {
+      try {
+        return delegate.read(sink, byteCount);
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
+    }
+
+    @Override public Timeout timeout() {
+      return delegate.timeout();
+    }
+
+    @Override public void close() throws IOException {
+      try {
+        delegate.close();
+      } catch (IOException e) {
+        thrownException = e;
+        throw e;
+      }
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index de3eb086f..23acf7048 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -16,7 +16,6 @@
 package retrofit;
 
 import java.io.IOException;
-import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Array;
@@ -25,6 +24,7 @@
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
+import okio.BufferedSink;
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.converter.Converter;
@@ -439,8 +439,8 @@ Request build() throws UnsupportedEncodingException {
       return delegate.length();
     }
 
-    @Override public void writeTo(OutputStream out) throws IOException {
-      delegate.writeTo(out);
+    @Override public void writeTo(BufferedSink sink) throws IOException {
+      delegate.writeTo(sink);
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index 49c0cbe75..6b3088238 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -20,6 +20,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.Executor;
+import okio.Buffer;
 import retrofit.client.Request;
 import retrofit.client.Response;
 import retrofit.mime.TypedByteArray;
@@ -58,9 +59,9 @@ static Request readBodyToBytesIfNecessary(Request request) throws IOException {
     }
 
     String bodyMime = body.mimeType();
-    ByteArrayOutputStream baos = new ByteArrayOutputStream();
-    body.writeTo(baos);
-    body = new TypedByteArray(bodyMime, baos.toByteArray());
+    Buffer buffer = new Buffer();
+    body.writeTo(buffer);
+    body = new TypedByteArray(bodyMime, buffer.readByteArray());
 
     return new Request(request.getMethod(), request.getUrl(), request.getHeaders(), body);
   }
@@ -76,7 +77,7 @@ static Response readBodyToBytesIfNecessary(Response response) throws IOException
     }
 
     String bodyMime = body.mimeType();
-    InputStream is = body.in();
+    InputStream is = body.in().inputStream();
     try {
       byte[] bodyBytes = Utils.streamToBytes(is);
       body = new TypedByteArray(bodyMime, bodyBytes);
diff --git a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
index 0b9d28ef7..b9b3da6a4 100644
--- a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
+++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
@@ -11,6 +11,7 @@
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
+import okio.Buffer;
 import retrofit.client.Client;
 import retrofit.client.Header;
 import retrofit.client.Request;
@@ -76,9 +77,9 @@ static HTTPRequest createRequest(Request request) throws IOException {
         fetchRequest.addHeader(new HTTPHeader("Content-Type", mimeType));
       }
 
-      ByteArrayOutputStream baos = new ByteArrayOutputStream();
-      body.writeTo(baos);
-      fetchRequest.setPayload(baos.toByteArray());
+      Buffer buffer = new Buffer();
+      body.writeTo(buffer);
+      fetchRequest.setPayload(buffer.readByteArray());
     }
 
     return fetchRequest;
diff --git a/retrofit/src/main/java/retrofit/client/ApacheClient.java b/retrofit/src/main/java/retrofit/client/ApacheClient.java
index ac85d7838..f10e3af14 100644
--- a/retrofit/src/main/java/retrofit/client/ApacheClient.java
+++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java
@@ -15,14 +15,14 @@
  */
 package retrofit.client;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.net.URI;
 import java.util.ArrayList;
 import java.util.List;
+import okio.Buffer;
+import okio.Okio;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.StatusLine;
@@ -162,13 +162,13 @@ public GenericHttpRequest(Request request) {
     }
 
     @Override public InputStream getContent() throws IOException {
-      ByteArrayOutputStream out = new ByteArrayOutputStream();
-      typedOutput.writeTo(out);
-      return new ByteArrayInputStream(out.toByteArray());
+      Buffer buffer = new Buffer();
+      typedOutput.writeTo(buffer);
+      return buffer.inputStream();
     }
 
     @Override public void writeTo(OutputStream out) throws IOException {
-      typedOutput.writeTo(out);
+      typedOutput.writeTo(Okio.buffer(Okio.sink(out)));
     }
 
     @Override public boolean isStreaming() {
diff --git a/retrofit/src/main/java/retrofit/client/OkClient.java b/retrofit/src/main/java/retrofit/client/OkClient.java
index b2725ea97..5a0042a74 100644
--- a/retrofit/src/main/java/retrofit/client/OkClient.java
+++ b/retrofit/src/main/java/retrofit/client/OkClient.java
@@ -21,11 +21,11 @@
 import com.squareup.okhttp.RequestBody;
 import com.squareup.okhttp.ResponseBody;
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import okio.BufferedSink;
+import okio.BufferedSource;
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
 
@@ -54,9 +54,9 @@ public OkClient(OkHttpClient client) {
   }
 
   static com.squareup.okhttp.Request createRequest(Request request) {
-    com.squareup.okhttp.Request.Builder builder = new com.squareup.okhttp.Request.Builder()
-        .url(request.getUrl())
-        .method(request.getMethod(), createRequestBody(request.getBody()));
+    com.squareup.okhttp.Request.Builder builder =
+        new com.squareup.okhttp.Request.Builder().url(request.getUrl())
+            .method(request.getMethod(), createRequestBody(request.getBody()));
 
     List<Header> headers = request.getHeaders();
     for (int i = 0, size = headers.size(); i < size; i++) {
@@ -85,7 +85,7 @@ private static RequestBody createRequestBody(final TypedOutput body) {
       }
 
       @Override public void writeTo(BufferedSink sink) throws IOException {
-        body.writeTo(sink.outputStream());
+        body.writeTo(sink);
       }
 
       @Override public long contentLength() {
@@ -108,8 +108,8 @@ private static TypedInput createResponseBody(final ResponseBody body) {
         return body.contentLength();
       }
 
-      @Override public InputStream in() throws IOException {
-        return body.byteStream();
+      @Override public BufferedSource in() throws IOException {
+        return body.source();
       }
     };
   }
diff --git a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
index cd7872e67..a4965ad60 100644
--- a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
+++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
@@ -22,6 +22,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+import okio.BufferedSource;
+import okio.Okio;
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
 
@@ -39,8 +41,7 @@ public UrlConnectionClient() {
   }
 
   protected HttpURLConnection openConnection(Request request) throws IOException {
-    HttpURLConnection connection =
-        (HttpURLConnection) new URL(request.getUrl()).openConnection();
+    HttpURLConnection connection = (HttpURLConnection) new URL(request.getUrl()).openConnection();
     connection.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS);
     connection.setReadTimeout(Defaults.READ_TIMEOUT_MILLIS);
     return connection;
@@ -65,7 +66,7 @@ void prepareRequest(HttpURLConnection connection, Request request) throws IOExce
       } else {
         connection.setChunkedStreamingMode(CHUNK_SIZE);
       }
-      body.writeTo(connection.getOutputStream());
+      body.writeTo(Okio.buffer(Okio.sink(connection.getOutputStream())));
     }
   }
 
@@ -113,8 +114,8 @@ private TypedInputStream(String mimeType, long length, InputStream stream) {
       return length;
     }
 
-    @Override public InputStream in() throws IOException {
-      return stream;
+    @Override public BufferedSource in() throws IOException {
+      return Okio.buffer(Okio.source(stream));
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit/converter/GsonConverter.java b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
index 83308d4a2..136763015 100644
--- a/retrofit/src/main/java/retrofit/converter/GsonConverter.java
+++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
@@ -19,9 +19,9 @@
 import com.google.gson.JsonParseException;
 import java.io.IOException;
 import java.io.InputStreamReader;
-import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Type;
+import okio.BufferedSink;
 import retrofit.mime.MimeUtil;
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
@@ -59,7 +59,7 @@ public GsonConverter(Gson gson, String charset) {
     }
     InputStreamReader isr = null;
     try {
-      isr = new InputStreamReader(body.in(), charset);
+      isr = new InputStreamReader(body.in().inputStream(), charset);
       return gson.fromJson(isr, type);
     } catch (IOException e) {
       throw new ConversionException(e);
@@ -104,8 +104,8 @@ public GsonConverter(Gson gson, String charset) {
       return jsonBytes.length;
     }
 
-    @Override public void writeTo(OutputStream out) throws IOException {
-      out.write(jsonBytes);
+    @Override public void writeTo(BufferedSink sink) throws IOException {
+      sink.write(jsonBytes);
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
index dc3a865d7..42af9e249 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -15,13 +15,13 @@
  */
 package retrofit.mime;
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.OutputStream;
 import java.net.URLEncoder;
+import okio.Buffer;
+import okio.BufferedSink;
 
 public final class FormUrlEncodedTypedOutput implements TypedOutput {
-  final ByteArrayOutputStream content = new ByteArrayOutputStream();
+  final Buffer content = new Buffer();
 
   public void addField(String name, String value) {
     addField(name, true, value, true);
@@ -35,7 +35,7 @@ public void addField(String name, boolean encodeName, String value, boolean enco
       throw new NullPointerException("value");
     }
     if (content.size() > 0) {
-      content.write('&');
+      content.writeByte((byte) '&');
     }
     try {
       if (encodeName) {
@@ -46,7 +46,7 @@ public void addField(String name, boolean encodeName, String value, boolean enco
       }
 
       content.write(name.getBytes("UTF-8"));
-      content.write('=');
+      content.writeByte((byte) '=');
       content.write(value.getBytes("UTF-8"));
     } catch (IOException e) {
       throw new RuntimeException(e);
@@ -65,7 +65,7 @@ public void addField(String name, boolean encodeName, String value, boolean enco
     return content.size();
   }
 
-  @Override public void writeTo(OutputStream out) throws IOException {
-    out.write(content.toByteArray());
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    sink.writeAll(content);
   }
 }
diff --git a/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
index 8067cfdd7..9b229e90c 100644
--- a/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
@@ -16,13 +16,13 @@
 
 package retrofit.mime;
 
-import java.io.ByteArrayOutputStream;
 import java.io.IOException;
-import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.UUID;
+import okio.Buffer;
+import okio.BufferedSink;
 
 public final class MultipartTypedOutput implements TypedOutput {
   public static final String DEFAULT_TRANSFER_ENCODING = "binary";
@@ -47,11 +47,11 @@ public MimePart(String name, String transferEncoding, TypedOutput body, String b
       this.boundary = boundary;
     }
 
-    public void writeTo(OutputStream out) throws IOException {
+    public void writeTo(BufferedSink sink) throws IOException {
       build();
-      out.write(partBoundary);
-      out.write(partHeader);
-      body.writeTo(out);
+      sink.write(partBoundary);
+      sink.write(partHeader);
+      body.writeTo(sink);
     }
 
     public long size() {
@@ -90,9 +90,9 @@ public MultipartTypedOutput() {
   List<byte[]> getParts() throws IOException {
     List<byte[]> parts = new ArrayList<byte[]>(mimeParts.size());
     for (MimePart part : mimeParts) {
-      ByteArrayOutputStream bos = new ByteArrayOutputStream();
-      part.writeTo(bos);
-      parts.add(bos.toByteArray());
+      Buffer buffer = new Buffer();
+      part.writeTo(buffer);
+      parts.add(buffer.readByteArray());
     }
     return parts;
   }
@@ -139,11 +139,11 @@ public int getPartCount() {
     return length;
   }
 
-  @Override public void writeTo(OutputStream out) throws IOException {
+  @Override public void writeTo(BufferedSink sink) throws IOException {
     for (MimePart part : mimeParts) {
-      part.writeTo(out);
+      part.writeTo(sink);
     }
-    out.write(footer);
+    sink.write(footer);
   }
 
   private static byte[] buildBoundary(String boundary, boolean first, boolean last) {
diff --git a/retrofit/src/main/java/retrofit/mime/TypedByteArray.java b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
index 3403684fc..337d77b9e 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
@@ -15,11 +15,11 @@
  */
 package retrofit.mime;
 
-import java.io.ByteArrayInputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.util.Arrays;
+import okio.Buffer;
+import okio.BufferedSink;
+import okio.BufferedSource;
 
 /**
  * Byte array and its mime type.
@@ -62,12 +62,12 @@ public TypedByteArray(String mimeType, byte[] bytes) {
     return bytes.length;
   }
 
-  @Override public void writeTo(OutputStream out) throws IOException {
-    out.write(bytes);
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    sink.write(bytes);
   }
 
-  @Override public InputStream in() throws IOException {
-    return new ByteArrayInputStream(bytes);
+  @Override public BufferedSource in() throws IOException {
+    return new Buffer().write(bytes);
   }
 
   @Override public boolean equals(Object o) {
diff --git a/retrofit/src/main/java/retrofit/mime/TypedFile.java b/retrofit/src/main/java/retrofit/mime/TypedFile.java
index 43fcd3a07..cd9026b7e 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedFile.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedFile.java
@@ -16,10 +16,11 @@
 package retrofit.mime;
 
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.OutputStream;
+import okio.BufferedSink;
+import okio.BufferedSource;
+import okio.Okio;
+import okio.Source;
 
 /**
  * File and its mime type.
@@ -65,20 +66,19 @@ public File file() {
     return file.getName();
   }
 
-  @Override public InputStream in() throws IOException {
-    return new FileInputStream(file);
+  @Override public BufferedSource in() throws IOException {
+    return Okio.buffer(Okio.source(file));
   }
 
-  @Override public void writeTo(OutputStream out) throws IOException {
-    byte[] buffer = new byte[BUFFER_SIZE];
-    FileInputStream in = new FileInputStream(file);
+  @Override public void writeTo(BufferedSink sink) throws IOException {
+    Source source = null;
     try {
-      int read;
-      while ((read = in.read(buffer)) != -1) {
-        out.write(buffer, 0, read);
-      }
+      source = Okio.source(file);
+      sink.writeAll(source);
     } finally {
-      in.close();
+      if (source != null) {
+        source.close();
+      }
     }
   }
 
diff --git a/retrofit/src/main/java/retrofit/mime/TypedInput.java b/retrofit/src/main/java/retrofit/mime/TypedInput.java
index f05afb84d..b19e7585f 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedInput.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedInput.java
@@ -16,7 +16,7 @@
 package retrofit.mime;
 
 import java.io.IOException;
-import java.io.InputStream;
+import okio.BufferedSource;
 
 /**
  * Binary data with an associated mime type.
@@ -35,5 +35,5 @@
    * Read bytes as stream. Unless otherwise specified, this method may only be called once. It is
    * the responsibility of the caller to close the stream.
    */
-  InputStream in() throws IOException;
+  BufferedSource in() throws IOException;
 }
diff --git a/retrofit/src/main/java/retrofit/mime/TypedOutput.java b/retrofit/src/main/java/retrofit/mime/TypedOutput.java
index f15055f8f..97f5f6615 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedOutput.java
@@ -16,7 +16,7 @@
 package retrofit.mime;
 
 import java.io.IOException;
-import java.io.OutputStream;
+import okio.BufferedSink;
 
 /**
  * Binary data with an associated mime type.
@@ -24,9 +24,11 @@
  * @author Bob Lee (bob@squareup.com)
  */
 public interface TypedOutput {
-  /** Original filename.
+  /**
+   * Original filename.
    *
-   * Used only for multipart requests, may be null. */
+   * Used only for multipart requests, may be null.
+   */
   String fileName();
 
   /** Returns the mime type. */
@@ -36,5 +38,5 @@
   long length();
 
   /** Writes these bytes to the given output stream. */
-  void writeTo(OutputStream out) throws IOException;
+  void writeTo(BufferedSink sink) throws IOException;
 }
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
index 0e3f79df4..414be5ee0 100644
--- a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -1,7 +1,7 @@
 // Copyright 2013 Square, Inc.
 package retrofit.mime;
 
-import java.io.ByteArrayOutputStream;
+import okio.Buffer;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -12,9 +12,9 @@
     fe.addField("a&b", "c=d");
     fe.addField("space, the", "final frontier");
 
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    fe.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
+    Buffer buffer = new Buffer();
+    fe.writeTo(buffer);
+    String actual = buffer.readByteString().utf8();
     assertThat(actual).isEqualTo("a%26b=c%3Dd&space%2C+the=final+frontier");
   }
 
@@ -22,9 +22,9 @@
     FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
     fe.addField("ooɟ", "ɹɐq");
 
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    fe.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
+    Buffer buffer = new Buffer();
+    fe.writeTo(buffer);
+    String actual = buffer.readByteString().utf8();
     assertThat(actual).isEqualTo("oo%C9%9F=%C9%B9%C9%90q");
   }
 
@@ -32,17 +32,17 @@
     FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
     fe.addField("sim", "ple");
 
-    ByteArrayOutputStream out1 = new ByteArrayOutputStream();
-    fe.writeTo(out1);
-    String actual1 = new String(out1.toByteArray(), "UTF-8");
+    Buffer buffer1 = new Buffer();
+    fe.writeTo(buffer1);
+    String actual1 = buffer1.readByteString().utf8();
     assertThat(actual1).isEqualTo("sim=ple");
 
     fe.addField("hey", "there");
     fe.addField("help", "me");
 
-    ByteArrayOutputStream out2 = new ByteArrayOutputStream();
-    fe.writeTo(out2);
-    String actual2 = new String(out2.toByteArray(), "UTF-8");
+    Buffer buffer2 = new Buffer();
+    fe.writeTo(buffer2);
+    String actual2 = buffer2.readByteString().utf8();
     assertThat(actual2).isEqualTo("sim=ple&hey=there&help=me");
   }
 }
