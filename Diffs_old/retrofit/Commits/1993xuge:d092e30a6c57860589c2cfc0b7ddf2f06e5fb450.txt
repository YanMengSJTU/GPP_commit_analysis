diff --git a/retrofit/src/main/java/retrofit2/CallAdapter.java b/retrofit/src/main/java/retrofit2/CallAdapter.java
index 97d34585d..e13ec99ae 100644
--- a/retrofit/src/main/java/retrofit2/CallAdapter.java
+++ b/retrofit/src/main/java/retrofit2/CallAdapter.java
@@ -34,6 +34,8 @@
    * <p>
    * Note: This is typically not the same type as the {@code returnType} provided to this call
    * adapter's factory.
+   *
+   * 返回 解析Http响应 后的数据类型。也就是 定义的网络请求方法的返回对象Call的泛型参数
    */
   Type responseType();
 
@@ -53,6 +55,8 @@
    *   });
    * }
    * </code></pre>
+   *
+   *
    */
   T adapt(Call<R> call);
 
@@ -64,9 +68,10 @@
     /**
      * Returns a call adapter for interface methods that return {@code returnType}, or null if it
      * cannot be handled by this factory.
+     * 根据网络请求接口的 返回值Call中的泛型参数类型、注解。得到实际需要的CallAdater对象
      */
     public abstract @Nullable CallAdapter<?, ?> get(Type returnType, Annotation[] annotations,
-        Retrofit retrofit);
+                                                    Retrofit retrofit);
 
     /**
      * Extract the upper bound of the generic parameter at {@code index} from {@code type}. For
@@ -79,6 +84,9 @@ protected static Type getParameterUpperBound(int index, ParameterizedType type)
     /**
      * Extract the raw class type from {@code type}. For example, the type representing
      * {@code List<? extends Runnable>} returns {@code List.class}.
+     *
+     *
+     *
      */
     protected static Class<?> getRawType(Type type) {
       return Utils.getRawType(type);
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index a9040f8b3..6ee695940 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -25,7 +25,9 @@
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
+
 import javax.annotation.Nullable;
+
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
@@ -58,18 +60,54 @@
  * @author Jake Wharton (jw@squareup.com)
  */
 public final class Retrofit {
+  /**
+   * 主要用于缓存，比如缓存网络相关配置、方法、数据转换适配器、网络请求适配器等。
+   * <p>
+   * key：Http请求方法；
+   * value：ServiceMethod对象，其实就是网络请求接口中被Retrofit注解注释的方法，将其解析后生成的对象
+   */
   private final Map<Method, ServiceMethod<?>> serviceMethodCache = new ConcurrentHashMap<>();
 
+  /**
+   * 它是请求网络的OkHttp的工厂，用于生产OkHttpClient的工厂
+   */
   final okhttp3.Call.Factory callFactory;
+
+  /**
+   * 这是网络请求url的基地址，使用时会和 网络请求接口中的相对地址拼接起来
+   */
   final HttpUrl baseUrl;
+
+  /**
+   * 数据转换器工厂集合。
+   * 数据转换器就是对请求网络之后的得到的Response进行转换，转换成能够使用的Java对象。
+   * 数据转换器工厂 ： 是用来生产 数据转换器的。
+   * <p>
+   * 这个集合就是用来 存放 数据转换器工厂的集合
+   */
   final List<Converter.Factory> converterFactories;
+
+  /**
+   * 网络请求适配器的工厂集合。
+   * <p>
+   * 网络请求适配器：就是将call对象转换成其他类型。
+   */
   final List<CallAdapter.Factory> callAdapterFactories;
-  final @Nullable Executor callbackExecutor;
+
+  /**
+   * 用于执行回调。在Android中默认使用的的是 MianThread Executor
+   */
+  final @Nullable
+  Executor callbackExecutor;
+
+  /**
+   * 是否需要立即解析接口中的方法
+   */
   final boolean validateEagerly;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
-      List<Converter.Factory> converterFactories, List<CallAdapter.Factory> callAdapterFactories,
-      @Nullable Executor callbackExecutor, boolean validateEagerly) {
+           List<Converter.Factory> converterFactories, List<CallAdapter.Factory> callAdapterFactories,
+           @Nullable Executor callbackExecutor, boolean validateEagerly) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
     this.converterFactories = converterFactories; // Copy+unmodifiable at call site.
@@ -130,23 +168,24 @@
     if (validateEagerly) {
       eagerlyValidateMethods(service);
     }
-    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
-        new InvocationHandler() {
-          private final Platform platform = Platform.get();
-          private final Object[] emptyArgs = new Object[0];
-
-          @Override public Object invoke(Object proxy, Method method, @Nullable Object[] args)
-              throws Throwable {
-            // If the method is a method from Object then defer to normal invocation.
-            if (method.getDeclaringClass() == Object.class) {
-              return method.invoke(this, args);
-            }
-            if (platform.isDefaultMethod(method)) {
-              return platform.invokeDefaultMethod(method, service, proxy, args);
-            }
-            return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);
-          }
-        });
+    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
+            new InvocationHandler() {
+              private final Platform platform = Platform.get();
+              private final Object[] emptyArgs = new Object[0];
+
+              @Override
+              public Object invoke(Object proxy, Method method, @Nullable Object[] args)
+                      throws Throwable {
+                // If the method is a method from Object then defer to normal invocation.
+                if (method.getDeclaringClass() == Object.class) {
+                  return method.invoke(this, args);
+                }
+                if (platform.isDefaultMethod(method)) {
+                  return platform.invokeDefaultMethod(method, service, proxy, args);
+                }
+                return loadServiceMethod(method).invoke(args != null ? args : emptyArgs);
+              }
+            });
   }
 
   private void eagerlyValidateMethods(Class<?> service) {
@@ -180,7 +219,9 @@ private void eagerlyValidateMethods(Class<?> service) {
     return callFactory;
   }
 
-  /** The API base URL. */
+  /**
+   * The API base URL.
+   */
   public HttpUrl baseUrl() {
     return baseUrl;
   }
@@ -210,7 +251,7 @@ public HttpUrl baseUrl() {
    * @throws IllegalArgumentException if no call adapter available for {@code type}.
    */
   public CallAdapter<?, ?> nextCallAdapter(@Nullable CallAdapter.Factory skipPast, Type returnType,
-      Annotation[] annotations) {
+                                           Annotation[] annotations) {
     checkNotNull(returnType, "returnType == null");
     checkNotNull(annotations, "annotations == null");
 
@@ -223,8 +264,8 @@ public HttpUrl baseUrl() {
     }
 
     StringBuilder builder = new StringBuilder("Could not locate call adapter for ")
-        .append(returnType)
-        .append(".\n");
+            .append(returnType)
+            .append(".\n");
     if (skipPast != null) {
       builder.append("  Skipped:");
       for (int i = 0; i < start; i++) {
@@ -256,7 +297,7 @@ public HttpUrl baseUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> requestBodyConverter(Type type,
-      Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
+                                                            Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
     return nextRequestBodyConverter(null, type, parameterAnnotations, methodAnnotations);
   }
 
@@ -267,8 +308,8 @@ public HttpUrl baseUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> nextRequestBodyConverter(
-      @Nullable Converter.Factory skipPast, Type type, Annotation[] parameterAnnotations,
-      Annotation[] methodAnnotations) {
+          @Nullable Converter.Factory skipPast, Type type, Annotation[] parameterAnnotations,
+          Annotation[] methodAnnotations) {
     checkNotNull(type, "type == null");
     checkNotNull(parameterAnnotations, "parameterAnnotations == null");
     checkNotNull(methodAnnotations, "methodAnnotations == null");
@@ -277,7 +318,7 @@ public HttpUrl baseUrl() {
     for (int i = start, count = converterFactories.size(); i < count; i++) {
       Converter.Factory factory = converterFactories.get(i);
       Converter<?, RequestBody> converter =
-          factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);
+              factory.requestBodyConverter(type, parameterAnnotations, methodAnnotations, this);
       if (converter != null) {
         //noinspection unchecked
         return (Converter<T, RequestBody>) converter;
@@ -285,8 +326,8 @@ public HttpUrl baseUrl() {
     }
 
     StringBuilder builder = new StringBuilder("Could not locate RequestBody converter for ")
-        .append(type)
-        .append(".\n");
+            .append(type)
+            .append(".\n");
     if (skipPast != null) {
       builder.append("  Skipped:");
       for (int i = 0; i < start; i++) {
@@ -318,14 +359,14 @@ public HttpUrl baseUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<ResponseBody, T> nextResponseBodyConverter(
-      @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations) {
+          @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations) {
     checkNotNull(type, "type == null");
     checkNotNull(annotations, "annotations == null");
 
     int start = converterFactories.indexOf(skipPast) + 1;
     for (int i = start, count = converterFactories.size(); i < count; i++) {
       Converter<ResponseBody, ?> converter =
-          converterFactories.get(i).responseBodyConverter(type, annotations, this);
+              converterFactories.get(i).responseBodyConverter(type, annotations, this);
       if (converter != null) {
         //noinspection unchecked
         return (Converter<ResponseBody, T>) converter;
@@ -333,8 +374,8 @@ public HttpUrl baseUrl() {
     }
 
     StringBuilder builder = new StringBuilder("Could not locate ResponseBody converter for ")
-        .append(type)
-        .append(".\n");
+            .append(type)
+            .append(".\n");
     if (skipPast != null) {
       builder.append("  Skipped:");
       for (int i = 0; i < start; i++) {
@@ -359,7 +400,7 @@ public HttpUrl baseUrl() {
 
     for (int i = 0, count = converterFactories.size(); i < count; i++) {
       Converter<?, String> converter =
-          converterFactories.get(i).stringConverter(type, annotations, this);
+              converterFactories.get(i).stringConverter(type, annotations, this);
       if (converter != null) {
         //noinspection unchecked
         return (Converter<T, String>) converter;
@@ -375,7 +416,8 @@ public HttpUrl baseUrl() {
    * The executor used for {@link Callback} methods on a {@link Call}. This may be {@code null},
    * in which case callbacks should be made synchronously on the background thread.
    */
-  public @Nullable Executor callbackExecutor() {
+  public @Nullable
+  Executor callbackExecutor() {
     return callbackExecutor;
   }
 
@@ -390,12 +432,18 @@ public Builder newBuilder() {
    * are optional.
    */
   public static final class Builder {
+    /**
+     * Platform：代表了Retrofit所适配的平台
+     */
     private final Platform platform;
-    private @Nullable okhttp3.Call.Factory callFactory;
-    private @Nullable HttpUrl baseUrl;
+    private @Nullable
+    okhttp3.Call.Factory callFactory;
+    private @Nullable
+    HttpUrl baseUrl;
     private final List<Converter.Factory> converterFactories = new ArrayList<>();
     private final List<CallAdapter.Factory> callAdapterFactories = new ArrayList<>();
-    private @Nullable Executor callbackExecutor;
+    private @Nullable
+    Executor callbackExecutor;
     private boolean validateEagerly;
 
     Builder(Platform platform) {
@@ -413,15 +461,15 @@ public Builder() {
 
       // Do not add the default BuiltIntConverters and platform-aware converters added by build().
       for (int i = 1,
-          size = retrofit.converterFactories.size() - platform.defaultConverterFactoriesSize();
-          i < size; i++) {
+           size = retrofit.converterFactories.size() - platform.defaultConverterFactoriesSize();
+           i < size; i++) {
         converterFactories.add(retrofit.converterFactories.get(i));
       }
 
       // Do not add the default, platform-aware call adapters added by build().
       for (int i = 0,
-          size = retrofit.callAdapterFactories.size() - platform.defaultCallAdapterFactoriesSize();
-          i < size; i++) {
+           size = retrofit.callAdapterFactories.size() - platform.defaultCallAdapterFactoriesSize();
+           i < size; i++) {
         callAdapterFactories.add(retrofit.callAdapterFactories.get(i));
       }
 
@@ -455,6 +503,7 @@ public Builder callFactory(okhttp3.Call.Factory factory) {
      */
     public Builder baseUrl(String baseUrl) {
       checkNotNull(baseUrl, "baseUrl == null");
+      // 首先使用 OkHttp中的HttpUrl的get方法，将String类型的url转换成HttpUrl对象
       return baseUrl(HttpUrl.get(baseUrl));
     }
 
@@ -510,7 +559,9 @@ public Builder baseUrl(String baseUrl) {
      */
     public Builder baseUrl(HttpUrl baseUrl) {
       checkNotNull(baseUrl, "baseUrl == null");
+      // 将HttpUrl对象的内容进行切分
       List<String> pathSegments = baseUrl.pathSegments();
+      // 判断切分后的列表中，最后一个是不是斜杠
       if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {
         throw new IllegalArgumentException("baseUrl must end in /: " + baseUrl);
       }
@@ -518,7 +569,10 @@ public Builder baseUrl(HttpUrl baseUrl) {
       return this;
     }
 
-    /** Add converter factory for serialization and deserialization of objects. */
+    /**
+     * Add converter factory for serialization and deserialization of objects.
+     * 用于设置数据解析器工厂的
+     */
     public Builder addConverterFactory(Converter.Factory factory) {
       converterFactories.add(checkNotNull(factory, "factory == null"));
       return this;
@@ -545,12 +599,16 @@ public Builder callbackExecutor(Executor executor) {
       return this;
     }
 
-    /** Returns a modifiable list of call adapter factories. */
+    /**
+     * Returns a modifiable list of call adapter factories.
+     */
     public List<CallAdapter.Factory> callAdapterFactories() {
       return this.callAdapterFactories;
     }
 
-    /** Returns a modifiable list of converter factories. */
+    /**
+     * Returns a modifiable list of converter factories.
+     */
     public List<Converter.Factory> converterFactories() {
       return this.converterFactories;
     }
@@ -571,36 +629,46 @@ public Builder validateEagerly(boolean validateEagerly) {
      * OkHttpClient} will be created and used.
      */
     public Retrofit build() {
+      // 1、检查 baseUrl进行非空判断，如果baseUrl为空，则抛出异常
+      // 这就表明 在Retrofit中必须设置baseUrl
       if (baseUrl == null) {
         throw new IllegalStateException("Base URL required.");
       }
 
+      // 2、检查 网络请求执行器 callFactory 是否为空，
+      // 如果是则创建默认的OkHttpClient对象
+      // 这也就表明 Retrofit中默认是使用OkHttp进行网络请求的
       okhttp3.Call.Factory callFactory = this.callFactory;
       if (callFactory == null) {
         callFactory = new OkHttpClient();
       }
 
+      // 3、检查 回调方法执行器的。这个执行器用在异步请求时
+      // 如果为空，则通过platform中的defaultCallbackExecutor提供的默认执行器来初始化callbackExecutor
       Executor callbackExecutor = this.callbackExecutor;
       if (callbackExecutor == null) {
         callbackExecutor = platform.defaultCallbackExecutor();
       }
 
+      // 4、创建 网络请求适配器列表，将Builder中设置的网络请求适配器和平台默认的请求适配器 加入其中
       // Make a defensive copy of the adapters and add the default Call adapter.
       List<CallAdapter.Factory> callAdapterFactories = new ArrayList<>(this.callAdapterFactories);
       callAdapterFactories.addAll(platform.defaultCallAdapterFactories(callbackExecutor));
 
+      // 5、同样创建 数据转换器列表，并将相关的转换器加入其中
       // Make a defensive copy of the converters.
       List<Converter.Factory> converterFactories = new ArrayList<>(
-          1 + this.converterFactories.size() + platform.defaultConverterFactoriesSize());
+              1 + this.converterFactories.size() + platform.defaultConverterFactoriesSize());
 
       // Add the built-in converter factory first. This prevents overriding its behavior but also
       // ensures correct behavior when using converters that consume all types.
-      converterFactories.add(new BuiltInConverters());
-      converterFactories.addAll(this.converterFactories);
-      converterFactories.addAll(platform.defaultConverterFactories());
+      converterFactories.add(new BuiltInConverters()); // 加入特定的BuiltInConverters转换器
+      converterFactories.addAll(this.converterFactories); // 加入 在Builder中设置的转换器
+      converterFactories.addAll(platform.defaultConverterFactories()); // 加入平台默认的转换器
 
+      // 6、将上面的变量传递给 Retrofit的构造函数，进行创建Retrofit对象
       return new Retrofit(callFactory, baseUrl, unmodifiableList(converterFactories),
-          unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);
+              unmodifiableList(callAdapterFactories), callbackExecutor, validateEagerly);
     }
   }
 }
