diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java
new file mode 100644
index 000000000..dd1019627
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java
@@ -0,0 +1,4 @@
+package retrofit2.processors;
+
+public interface SampleReturn {
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
index 6728b58a6..a74206816 100644
--- a/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
+++ b/retrofit-processors/src/test/java/retrofit2/processors/SampleService.java
@@ -1,9 +1,9 @@
 package retrofit2.processors;
 
-import retrofit2.http.HEAD;
+import retrofit2.Call;
+import retrofit2.http.GET;
 
 @RetrofitService
 public interface SampleService {
-  @HEAD("/")
-  void sampleMethod();
+  @GET("/") Call<Void> getVoid();
 }
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java
new file mode 100644
index 000000000..c4c238063
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java
@@ -0,0 +1,13 @@
+package retrofit2.processors.returntype;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.processors.RetrofitService;
+
+@RetrofitService
+public interface NestedTypeVariable {
+  @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java
new file mode 100644
index 000000000..b357aced3
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java
@@ -0,0 +1,10 @@
+package retrofit2.processors.returntype;
+
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.processors.RetrofitService;
+
+@RetrofitService
+public interface TypeVariable {
+  @GET("/") <T> Call<T> typeVariable();
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java
new file mode 100644
index 000000000..23aa32e0c
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java
@@ -0,0 +1,11 @@
+package retrofit2.processors.returntype;
+
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.processors.RetrofitService;
+
+@RetrofitService
+public interface TypeVariableUpperBound {
+  @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java
new file mode 100644
index 000000000..1de54c5b6
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java
@@ -0,0 +1,10 @@
+package retrofit2.processors.returntype;
+
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.processors.RetrofitService;
+
+@RetrofitService
+public interface Wildcard {
+  @GET("/") Call<?> wildcard();
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java
new file mode 100644
index 000000000..2dca4b996
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java
@@ -0,0 +1,11 @@
+package retrofit2.processors.returntype;
+
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.http.GET;
+import retrofit2.processors.RetrofitService;
+
+@RetrofitService
+public interface WildcardUpperBound {
+  @GET("/") Call<? extends ResponseBody> wildcardUpperBound();
+}
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
index b7c831adb..401e8ed05 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -13,16 +13,17 @@ class BaseTest {
         compiler()
             .compile(JavaFileObjects.forSourceLines(
                 "retrofit2.processors.SampleService",
-                """
+          """
                 package retrofit2.processors;
 
-                import retrofit2.http.HEAD;
+                import retrofit2.Call;
+                import retrofit2.http.GET;
 
                 @RetrofitService
                 public interface SampleService {
-                  @HEAD("/")
-                  public void sampleMethod();
+                  @GET("/") Call<Void> getVoid();
                 }
+
                 """))
 
     assertEquals(compilation.status(), Compilation.Status.SUCCESS)
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
new file mode 100644
index 000000000..45257f396
--- /dev/null
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
@@ -0,0 +1,31 @@
+package retrofit2.processors
+
+import com.google.testing.compile.Compilation
+import com.google.testing.compile.JavaFileObjects
+import org.junit.Test
+import kotlin.test.assertEquals
+
+class ReturnTypeTest {
+  @Test
+  fun typeVariableTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.returntype.TypeVariable",
+        """
+        package retrofit2.processors.returntype;
+
+        import retrofit2.Call;
+        import retrofit2.http.GET;
+        import retrofit2.processors.RetrofitService;
+
+        @RetrofitService
+        public interface TypeVariable {
+          @GET("/") <T> Call<T> typeVariable();
+        }
+        """
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt
index 024d3eb32..a6f820cb8 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt
@@ -2,5 +2,9 @@ package retrofit2.processors
 
 import com.google.testing.compile.Compiler
 import retrofit2.RetrofitCheckProcessor
+import java.util.Locale
+import javax.tools.Diagnostic
 
-fun compiler(): Compiler = Compiler.javac().withProcessors(RetrofitCheckProcessor())
\ No newline at end of file
+fun compiler(): Compiler = Compiler.javac().withProcessors(RetrofitCheckProcessor())
+
+fun <S> Diagnostic<S>.getMessage(): String? = getMessage(null)
\ No newline at end of file
