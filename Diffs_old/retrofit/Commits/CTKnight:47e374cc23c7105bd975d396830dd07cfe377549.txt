diff --git a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
similarity index 59%
rename from retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
rename to retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
index 827566e79..ad224d364 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/processors/StaticCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
@@ -1,6 +1,8 @@
-package retrofit2.processors
+package retrofit2
 
 import com.google.auto.service.AutoService
+import retrofit2.processors.ErrorMessage
+import retrofit2.processors.RetrofitService
 import javax.annotation.processing.AbstractProcessor
 import javax.annotation.processing.Filer
 import javax.annotation.processing.Messager
@@ -10,13 +12,14 @@ import javax.annotation.processing.RoundEnvironment
 import javax.lang.model.SourceVersion
 import javax.lang.model.element.Element
 import javax.lang.model.element.ElementKind
+import javax.lang.model.element.ExecutableElement
 import javax.lang.model.element.TypeElement
 import javax.lang.model.util.Elements
 import javax.lang.model.util.Types
 import javax.tools.Diagnostic
 
 @AutoService(Processor::class)
-class StaticCheckProcessor : AbstractProcessor() {
+class RetrofitCheckProcessor : AbstractProcessor() {
   private lateinit var typeUtils: Types
   private lateinit var elementUtils: Elements
   private lateinit var filer: Filer
@@ -32,10 +35,13 @@ class StaticCheckProcessor : AbstractProcessor() {
   }
 
   override fun process(annoations: Set<TypeElement>, env: RoundEnvironment): Boolean {
-    env.rootElements.forEach {
-      if (it.kind != ElementKind.INTERFACE) {
-        warning(it, "@RetrofitService is not annotated on an Interface, skipped")
+    env.getElementsAnnotatedWith(RetrofitService::class.java).forEach { annotated ->
+      if (annotated !is TypeElement) {
+        warning(annotated, ErrorMessage.NOT_TYPE_ELEMENT)
+        return@forEach
       }
+
+      validateInterface(annotated)
     }
     return true
   }
@@ -52,4 +58,25 @@ class StaticCheckProcessor : AbstractProcessor() {
   private fun warning(e: Element, msg: String) {
     messager.printMessage(Diagnostic.Kind.WARNING, msg, e)
   }
+
+  private fun validateInterface(annotated: TypeElement) {
+    if (annotated.kind != ElementKind.INTERFACE) {
+      error(annotated, ErrorMessage.INVALID_TYPE)
+    }
+
+    if (!annotated.interfaces.isEmpty()) {
+      error(annotated, ErrorMessage.TOO_MUCH_INTERFACE)
+    }
+
+    val methods = annotated
+        .enclosedElements
+        .mapNotNull { element -> element as? ExecutableElement }
+        .filter { element -> !element.isDefault }
+
+    methods.forEach { validateMethod(it) }
+  }
+
+  private fun validateMethod(element: ExecutableElement) {
+    val returnType = element.returnType
+  }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt b/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt
new file mode 100644
index 000000000..b0d04350f
--- /dev/null
+++ b/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt
@@ -0,0 +1,9 @@
+package retrofit2.processors
+
+class ErrorMessage {
+  companion object {
+    const val INVALID_TYPE = "API declarations must be interfaces."
+    const val TOO_MUCH_INTERFACE = "API interfaces must not extend other interfaces."
+    const val NOT_TYPE_ELEMENT = "The annotated element is not an instance of TypeElement, skipped"
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java b/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java
new file mode 100644
index 000000000..4c72e53fe
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java
@@ -0,0 +1,5 @@
+package retrofit2.processors;
+
+@RetrofitService
+public interface ExtendedInterface extends SampleService {
+}
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
index 514cb1e88..b7c831adb 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -1,24 +1,18 @@
 package retrofit2.processors
 
 import com.google.testing.compile.Compilation
-import com.google.testing.compile.Compiler
-import com.google.testing.compile.Compiler.javac
 import com.google.testing.compile.JavaFileObjects
 import org.junit.Test
-import java.util.Locale
 import kotlin.test.assertEquals
-import kotlin.test.assertTrue
 
 class BaseTest {
 
-  private fun compiler(): Compiler = javac().withProcessors(StaticCheckProcessor())
-
   @Test
   fun sampleTest() {
     val compilation =
         compiler()
             .compile(JavaFileObjects.forSourceLines(
-                "SampleService",
+                "retrofit2.processors.SampleService",
                 """
                 package retrofit2.processors;
 
@@ -26,33 +20,13 @@ class BaseTest {
 
                 @RetrofitService
                 public interface SampleService {
-                    @HEAD("/")
-                    public void sampleMethod();
+                  @HEAD("/")
+                  public void sampleMethod();
                 }
-                """.trimIndent()))
+                """))
 
     assertEquals(compilation.status(), Compilation.Status.SUCCESS)
     assertEquals(compilation.warnings().size, 0)
-
   }
 
-  @Test
-  fun interfaceOnlyTest() {
-    val compilation = compiler()
-        .compile(JavaFileObjects.forSourceLines("SampleAbstractClass",
-            """
-            package retrofit2.processors;
-
-            @RetrofitService
-            public abstract class SampleAbstractClass {
-            }
-            """.trimIndent()
-        ))
-
-    assertEquals(compilation.status(), Compilation.Status.SUCCESS)
-    assertTrue(compilation.warnings().size == 1)
-    val onlyWarning = compilation.warnings().first()
-    assertTrue(onlyWarning.getMessage(Locale.getDefault())!!
-        .contentEquals("@RetrofitService is not annotated on an Interface, skipped"))
-  }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
new file mode 100644
index 000000000..08e78070e
--- /dev/null
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
@@ -0,0 +1,73 @@
+package retrofit2.processors
+
+import com.google.testing.compile.Compilation
+import com.google.testing.compile.JavaFileObjects
+import org.junit.Test
+import java.util.Locale
+import javax.tools.JavaFileObject
+import kotlin.test.assertEquals
+import kotlin.test.assertTrue
+
+class TargetTypeTest {
+
+  @Test
+  fun extendedInterfaceTest() {
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.ExtendedInterface",
+        """
+        package retrofit2.processors;
+
+        @RetrofitService
+        public interface ExtendedInterface extends SampleService {
+        }
+        """
+    )
+    val compilation = compiler().compile(javaFileObject)
+
+
+    assertEquals(1, compilation.errors().size)
+    val onlyError = compilation.errors().firstOrNull()
+    assertEquals(ErrorMessage.TOO_MUCH_INTERFACE,
+        onlyError?.getMessage(Locale.getDefault()))
+  }
+
+  @Test
+  fun abstractClassTest() {
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.SampleAbstractClass",
+        """
+            package retrofit2.processors;
+
+            @RetrofitService
+            public abstract class SampleAbstractClass {
+            }
+            """
+    )
+    invalidTypeTest(javaFileObject)
+  }
+
+  @Test
+  fun classTest() {
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.SampleClass",
+        """
+        package retrofit2.processors;
+
+        @RetrofitService
+        public class SampleClass {
+        }
+        """
+    )
+    invalidTypeTest(javaFileObject)
+  }
+
+  private fun invalidTypeTest(javaFileObject: JavaFileObject) {
+    val compilation = compiler()
+        .compile(javaFileObject)
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    val onlyWarning = compilation.errors().firstOrNull()
+    assertEquals(ErrorMessage.INVALID_TYPE, onlyWarning?.getMessage(Locale.getDefault()))
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt
new file mode 100644
index 000000000..024d3eb32
--- /dev/null
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/TestUtils.kt
@@ -0,0 +1,6 @@
+package retrofit2.processors
+
+import com.google.testing.compile.Compiler
+import retrofit2.RetrofitCheckProcessor
+
+fun compiler(): Compiler = Compiler.javac().withProcessors(RetrofitCheckProcessor())
\ No newline at end of file
