diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
index ca7ffdfc0..84f00639f 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
@@ -68,6 +68,21 @@
         });
     }
 
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Observable<List<Contributor>> contributorListWithoutAuth(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    public Observable<Contributor> contributorsWithoutAuth(
+            String owner,
+            String repo) {
+        return contributorListWithoutAuth(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
     @GET("https://api.github.com/repos/{owner}/{repo}/contributors")
     public abstract Observable<List<Contributor>> contributorListWithoutBaseUrl(
             @Path("owner") String owner,
@@ -237,7 +252,7 @@ public abstract Response deleteRepository(
     public Observable<Contributor> contributorsWithDateGson(
             String owner,
             String repo) {
-        return contributorList(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+        return contributorListWithoutAuth(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
             @Override public Observable<Contributor> call(List<Contributor> list) {
                 return Observable.from(list);
             }
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index b667bab2e..dd32c9b26 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -42,27 +42,27 @@
     @Test
     public void testGetWithBaseUrl() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.contributors("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.contributorsWithoutAuth("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
             }
         }).toList().toBlocking().single();
-        assertTrue(contributors.contains("JakeWharton"));
-        assertTrue(contributors.size() > 1);
+        assertTrue(contributorsWithoutAuth.contains("JakeWharton"));
+        assertTrue(contributorsWithoutAuth.size() > 1);
     }
 
     @Test
     public void testGetWithoutBaseUrl() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.contributorsWithoutBaseUrl("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.contributorsWithoutBaseUrl("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
             }
         }).toList().toBlocking().single();
-        assertTrue(contributors.contains("JakeWharton"));
-        assertTrue(contributors.size() > 1);
+        assertTrue(contributorsWithoutAuth.contains("JakeWharton"));
+        assertTrue(contributorsWithoutAuth.size() > 1);
     }
 
     @Test
@@ -150,7 +150,7 @@ public void testAutoJson() {
     @Test
     public void testStar() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.star("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.star("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
@@ -162,7 +162,7 @@ public void testStar() {
     @Test
     public void testUnstar() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.unstar("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.unstar("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
@@ -307,27 +307,54 @@ public void testBlockingResponse() {
     @Test
     public void testMethodGson() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.contributorsWithGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.contributorsWithGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
             }
         }).toList().toBlocking().single();
-        assertTrue(contributors.contains("JakeWharton"));
-        assertTrue(contributors.size() > 1);
+        assertTrue(contributorsWithoutAuth.contains("JakeWharton"));
+        assertTrue(contributorsWithoutAuth.size() > 1);
     }
 
     @Test
     public void testMethodDateGson() {
         GitHub github = GitHub.create();
-        List<String> contributors = github.contributorsWithDateGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+        List<String> contributorsWithoutAuth = github.contributorsWithDateGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
             @Override public String call(Contributor contributor) {
                 System.out.println(contributor.login);
                 return contributor.login;
             }
         }).toList().toBlocking().single();
-        assertTrue(contributors.contains("JakeWharton"));
-        assertTrue(contributors.size() > 1);
+        assertTrue(contributorsWithoutAuth.contains("JakeWharton"));
+        assertTrue(contributorsWithoutAuth.size() > 1);
     }
 
+    @Test
+    public void testAndroidAuthenticationRequestInterceptor() {
+    }
+    @Test
+    public void testGlobalHeaders() {
+    }
+    @Test
+    public void testRetryHeaders() {
+    }
+    @Test
+    public void testRequestInterceptor() {
+    }
+    @Test
+    public void testRequestInterceptorOnMethod() {
+    }
+    @Test
+    public void testErrorHandler() {
+    }
+    @Test
+    public void testErrorHandlerOnMethod() {
+    }
+    @Test
+    public void testLogLevel() {
+    }
+    @Test
+    public void testConverterOnMethod() {
+    }
 }
