diff --git a/retrofit/build.gradle b/retrofit/build.gradle
index effbef8fb..38f0ff677 100644
--- a/retrofit/build.gradle
+++ b/retrofit/build.gradle
@@ -17,13 +17,14 @@ apply plugin: 'java'
 //     maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
 //     maven { url "http://repo.maven.apache.org/maven2" }
 //}
+
 dependencies {
     compile 'com.squareup.okio:okio:1.3.0'
 //    compile project(':okio')
 //    compile group: 'com.google.code.gson', name: 'gson', version:'2.3.1'
 //    compile group: 'com.google.android', name: 'android', version:'4.1.1.4'
 //    compile group: 'com.squareup.okhttp', name: 'okhttp', version:'2.2.0'
-//    compile group: 'io.reactivex', name: 'rxjava', version:'1.0.0'
+//    testCompile group: 'io.reactivex', name: 'rxjava', version:'1.0.0'
 //    testCompile group: 'junit', name: 'junit', version:'4.11'
 //    testCompile group: 'org.assertj', name: 'assertj-core', version:'1.7.0'
 //    testCompile group: 'org.mockito', name: 'mockito-core', version:'1.9.5'
diff --git a/retrofit/src/test/java/retrofit/EndpointsTest.java b/retrofit/src/test/java/retrofit/EndpointsTest.java
index 50c41dcf3..0b6039cab 100644
--- a/retrofit/src/test/java/retrofit/EndpointsTest.java
+++ b/retrofit/src/test/java/retrofit/EndpointsTest.java
@@ -1,13 +1,13 @@
-// Copyright 2014 Square, Inc.
-package retrofit;
-
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class EndpointsTest {
-  @Test public void endpoint() {
-    Endpoint endpoint = Endpoint.createFixed("http://example.com");
-    assertThat(endpoint.url()).isEqualTo("http://example.com");
-  }
-}
+//// Copyright 2014 Square, Inc.
+//package retrofit;
+//
+//import org.junit.Test;
+//
+//import static org.assertj.core.api.Assertions.assertThat;
+//
+//public class EndpointsTest {
+//  @Test public void endpoint() {
+//    Endpoint endpoint = Endpoint.createFixed("http://example.com");
+//    assertThat(endpoint.url()).isEqualTo("http://example.com");
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/ErrorHandlerTest.java b/retrofit/src/test/java/retrofit/ErrorHandlerTest.java
index 6de8d00f4..047775634 100644
--- a/retrofit/src/test/java/retrofit/ErrorHandlerTest.java
+++ b/retrofit/src/test/java/retrofit/ErrorHandlerTest.java
@@ -1,128 +1,128 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Response;
-import java.io.IOException;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import org.junit.Before;
-import org.junit.Test;
-import retrofit.http.GET;
-import rx.Observable;
-import rx.Observer;
-
-import static com.squareup.okhttp.Protocol.HTTP_1_1;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-
-public class ErrorHandlerTest {
-
-  interface ExampleClient {
-    @GET("/")
-    Response throwsCustomException() throws TestException;
-
-    @GET("/")
-    void onErrorWrappedCustomException(Callback<Response> callback);
-
-    @GET("/")
-    Observable<Response> onErrorCustomException();
-  }
-
-  static class TestException extends Exception {
-  }
-
-  ExampleClient example;
-  ErrorHandler errorHandler;
-
-  @Before public void setup() {
-    errorHandler = mock(ErrorHandler.class);
-
-    OkHttpClient client = new OkHttpClient();
-    client.interceptors().add(new Interceptor() {
-      @Override public Response intercept(Chain chain) throws IOException {
-        return new Response.Builder()
-            .code(400)
-            .message("Invalid")
-            .request(chain.request())
-            .protocol(HTTP_1_1)
-            .build();
-      }
-    });
-
-    example = new RestAdapter.Builder() //
-        .setEndpoint("http://example.com")
-        .setClient(client)
-        .setErrorHandler(errorHandler)
-        .setCallbackExecutor(new Utils.SynchronousExecutor())
-        .build()
-        .create(ExampleClient.class);
-  }
-
-  @Test public void customizedExceptionUsed() throws Throwable {
-    TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    try {
-      example.throwsCustomException();
-      failBecauseExceptionWasNotThrown(TestException.class);
-    } catch (TestException e) {
-      assertThat(e).isSameAs(exception);
-    }
-  }
-
-  @Test public void onErrorWrappedCustomException() throws Throwable {
-    final TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    example.onErrorWrappedCustomException(new Callback<Response>() {
-
-      @Override public void success(Response response, Response response2) {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-
-      @Override public void failure(RetrofitError error) {
-        assertThat(error.getCause()).isSameAs(exception);
-      }
-    });
-  }
-
-  @Test public void onErrorCustomException() throws Throwable {
-    final TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.onErrorCustomException().subscribe(new Observer<Response>() {
-      @Override public void onCompleted() {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-
-      @Override public void onError(Throwable e) {
-        assertThat(e).isSameAs(exception);
-        latch.countDown();
-      }
-
-      @Override public void onNext(Response response) {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-  }
-
-  @Test public void returningNullThrowsException() throws Exception {
-    doReturn(null).when(errorHandler).handleError(any(RetrofitError.class));
-
-    try {
-      example.throwsCustomException();
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e.getMessage()).isEqualTo("Error handler returned null for wrapped exception.");
-    }
-  }
-}
+//// Copyright 2013 Square, Inc.
+//package retrofit;
+//
+//import com.squareup.okhttp.Interceptor;
+//import com.squareup.okhttp.OkHttpClient;
+//import com.squareup.okhttp.Response;
+//import java.io.IOException;
+//import java.util.concurrent.CountDownLatch;
+//import java.util.concurrent.TimeUnit;
+//import org.junit.Before;
+//import org.junit.Test;
+//import retrofit.http.GET;
+//import rx.Observable;
+//import rx.Observer;
+//
+//import static com.squareup.okhttp.Protocol.HTTP_1_1;
+//import static org.assertj.core.api.Assertions.assertThat;
+//import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
+//import static org.junit.Assert.assertTrue;
+//import static org.junit.Assert.fail;
+//import static org.mockito.Matchers.any;
+//import static org.mockito.Mockito.doReturn;
+//import static org.mockito.Mockito.mock;
+//
+//public class ErrorHandlerTest {
+//
+//  interface ExampleClient {
+//    @GET("/")
+//    Response throwsCustomException() throws TestException;
+//
+//    @GET("/")
+//    void onErrorWrappedCustomException(Callback<Response> callback);
+//
+//    @GET("/")
+//    Observable<Response> onErrorCustomException();
+//  }
+//
+//  static class TestException extends Exception {
+//  }
+//
+//  ExampleClient example;
+//  ErrorHandler errorHandler;
+//
+//  @Before public void setup() {
+//    errorHandler = mock(ErrorHandler.class);
+//
+//    OkHttpClient client = new OkHttpClient();
+//    client.interceptors().add(new Interceptor() {
+//      @Override public Response intercept(Chain chain) throws IOException {
+//        return new Response.Builder()
+//            .code(400)
+//            .message("Invalid")
+//            .request(chain.request())
+//            .protocol(HTTP_1_1)
+//            .build();
+//      }
+//    });
+//
+//    example = new RestAdapter.Builder() //
+//        .setEndpoint("http://example.com")
+//        .setClient(client)
+//        .setErrorHandler(errorHandler)
+//        .setCallbackExecutor(new Utils.SynchronousExecutor())
+//        .build()
+//        .create(ExampleClient.class);
+//  }
+//
+//  @Test public void customizedExceptionUsed() throws Throwable {
+//    TestException exception = new TestException();
+//    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
+//
+//    try {
+//      example.throwsCustomException();
+//      failBecauseExceptionWasNotThrown(TestException.class);
+//    } catch (TestException e) {
+//      assertThat(e).isSameAs(exception);
+//    }
+//  }
+//
+//  @Test public void onErrorWrappedCustomException() throws Throwable {
+//    final TestException exception = new TestException();
+//    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
+//
+//    example.onErrorWrappedCustomException(new Callback<Response>() {
+//
+//      @Override public void success(Response response, Response response2) {
+//        failBecauseExceptionWasNotThrown(TestException.class);
+//      }
+//
+//      @Override public void failure(RetrofitError error) {
+//        assertThat(error.getCause()).isSameAs(exception);
+//      }
+//    });
+//  }
+//
+//  @Test public void onErrorCustomException() throws Throwable {
+//    final TestException exception = new TestException();
+//    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
+//
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.onErrorCustomException().subscribe(new Observer<Response>() {
+//      @Override public void onCompleted() {
+//        failBecauseExceptionWasNotThrown(TestException.class);
+//      }
+//
+//      @Override public void onError(Throwable e) {
+//        assertThat(e).isSameAs(exception);
+//        latch.countDown();
+//      }
+//
+//      @Override public void onNext(Response response) {
+//        failBecauseExceptionWasNotThrown(TestException.class);
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//  }
+//
+//  @Test public void returningNullThrowsException() throws Exception {
+//    doReturn(null).when(errorHandler).handleError(any(RetrofitError.class));
+//
+//    try {
+//      example.throwsCustomException();
+//      fail();
+//    } catch (IllegalStateException e) {
+//      assertThat(e.getMessage()).isEqualTo("Error handler returned null for wrapped exception.");
+//    }
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/MethodInfoTest.java b/retrofit/src/test/java/retrofit/MethodInfoTest.java
index cffec1afc..2c397316d 100644
--- a/retrofit/src/test/java/retrofit/MethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/MethodInfoTest.java
@@ -1,220 +1,220 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.google.gson.reflect.TypeToken;
-import com.squareup.okhttp.Response;
-import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import org.junit.Test;
-import retrofit.http.Body;
-import retrofit.http.GET;
-import retrofit.http.POST;
-import retrofit.http.Streaming;
-import rx.Observable;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-@SuppressWarnings("unused") // Lots of unused parameters for example code.
-public class MethodInfoTest {
-  @Test public void pathParameterParsing() throws Exception {
-    expectParams("/");
-    expectParams("/foo");
-    expectParams("/foo/bar");
-    expectParams("/foo/bar/{}");
-    expectParams("/foo/bar/{taco}", "taco");
-    expectParams("/foo/bar/{t}", "t");
-    expectParams("/foo/bar/{!!!}/"); // Invalid parameter.
-    expectParams("/foo/bar/{}/{taco}", "taco");
-    expectParams("/foo/bar/{taco}/or/{burrito}", "taco", "burrito");
-    expectParams("/foo/bar/{taco}/or/{taco}", "taco");
-    expectParams("/foo/bar/{taco-shell}", "taco-shell");
-    expectParams("/foo/bar/{taco_shell}", "taco_shell");
-    expectParams("/foo/bar/{sha256}", "sha256");
-    expectParams("/foo/bar/{TACO}", "TACO");
-    expectParams("/foo/bar/{taco}/{tAco}/{taCo}", "taco", "tAco", "taCo");
-    expectParams("/foo/bar/{1}"); // Invalid parameter, name cannot start with digit.
-  }
-
-  private static void expectParams(String path, String... expected) {
-    Set<String> calculated = MethodInfo.parsePathParameters(path);
-    assertThat(calculated).hasSize(expected.length);
-    if (expected.length > 0) {
-      assertThat(calculated).containsExactly(expected);
-    }
-  }
-
-  static class Dummy {
-  }
-
-  @Test public void concreteBodyType() {
-    class Example {
-      @POST("/foo") Response a(@Body Dummy body) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.requestObjectType).isEqualTo(Dummy.class);
-  }
-
-  @Test public void genericBodyType() {
-    class Example {
-      @POST("/foo") Response a(@Body List<String> body) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.requestObjectType).isEqualTo(expected);
-  }
-
-  @Test public void wildcardBodyType() {
-    class Example {
-      @POST("/foo") Response a(@Body List<? super String> body) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    Type expected = new TypeToken<List<? super String>>() {}.getType();
-    assertThat(methodInfo.requestObjectType).isEqualTo(expected);
-  }
-
-  @Test public void concreteCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(ResponseCallback cb) {
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void genericCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(Callback<Response> cb) {
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void wildcardGenericCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(Callback<? extends Response> c) {
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void genericCallbackWithGenericType() {
-    class Example {
-      @GET("/foo") void a(Callback<List<String>> c) {
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  // RestMethodInfo reconstructs this type from MultimapCallback<String, Set<Long>>. It contains
-  // a little of everything: a parameterized type, a generic array, and a wildcard.
-  private static Map<? extends String, Set<Long>[]> extendingGenericCallbackType;
-
-  @Test public void extendingGenericCallback() throws Exception {
-    class Example {
-      @GET("/foo") void a(MultimapCallback<String, Set<Long>> callback) {
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(
-        MethodInfoTest.class.getDeclaredField("extendingGenericCallbackType").getGenericType());
-  }
-
-  @Test public void synchronousResponse() {
-    class Example {
-      @GET("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void synchronousGenericResponse() {
-    class Example {
-      @GET("/foo") List<String> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  @Test public void streamingResponse() {
-    class Example {
-      @GET("/foo") @Streaming Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void observableResponse() {
-    class Example {
-      @GET("/foo") Observable<Response> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void observableGenericResponse() {
-    class Example {
-      @GET("/foo") Observable<List<String>> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.onlyMethod(Example.class);
-    MethodInfo methodInfo = new MethodInfo(method);
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  private static interface ResponseCallback extends Callback<Response> {
-  }
-
-  private static interface MultimapCallback<K, V> extends Callback<Map<? extends K, V[]>> {
-  }
-}
+//// Copyright 2013 Square, Inc.
+//package retrofit;
+//
+//import com.google.gson.reflect.TypeToken;
+//import com.squareup.okhttp.Response;
+//import java.lang.reflect.Method;
+//import java.lang.reflect.Type;
+//import java.util.List;
+//import java.util.Map;
+//import java.util.Set;
+//import org.junit.Test;
+//import retrofit.http.Body;
+//import retrofit.http.GET;
+//import retrofit.http.POST;
+//import retrofit.http.Streaming;
+//import rx.Observable;
+//
+//import static org.assertj.core.api.Assertions.assertThat;
+//
+//@SuppressWarnings("unused") // Lots of unused parameters for example code.
+//public class MethodInfoTest {
+//  @Test public void pathParameterParsing() throws Exception {
+//    expectParams("/");
+//    expectParams("/foo");
+//    expectParams("/foo/bar");
+//    expectParams("/foo/bar/{}");
+//    expectParams("/foo/bar/{taco}", "taco");
+//    expectParams("/foo/bar/{t}", "t");
+//    expectParams("/foo/bar/{!!!}/"); // Invalid parameter.
+//    expectParams("/foo/bar/{}/{taco}", "taco");
+//    expectParams("/foo/bar/{taco}/or/{burrito}", "taco", "burrito");
+//    expectParams("/foo/bar/{taco}/or/{taco}", "taco");
+//    expectParams("/foo/bar/{taco-shell}", "taco-shell");
+//    expectParams("/foo/bar/{taco_shell}", "taco_shell");
+//    expectParams("/foo/bar/{sha256}", "sha256");
+//    expectParams("/foo/bar/{TACO}", "TACO");
+//    expectParams("/foo/bar/{taco}/{tAco}/{taCo}", "taco", "tAco", "taCo");
+//    expectParams("/foo/bar/{1}"); // Invalid parameter, name cannot start with digit.
+//  }
+//
+//  private static void expectParams(String path, String... expected) {
+//    Set<String> calculated = MethodInfo.parsePathParameters(path);
+//    assertThat(calculated).hasSize(expected.length);
+//    if (expected.length > 0) {
+//      assertThat(calculated).containsExactly(expected);
+//    }
+//  }
+//
+//  static class Dummy {
+//  }
+//
+//  @Test public void concreteBodyType() {
+//    class Example {
+//      @POST("/foo") Response a(@Body Dummy body) {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.requestObjectType).isEqualTo(Dummy.class);
+//  }
+//
+//  @Test public void genericBodyType() {
+//    class Example {
+//      @POST("/foo") Response a(@Body List<String> body) {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    Type expected = new TypeToken<List<String>>() {}.getType();
+//    assertThat(methodInfo.requestObjectType).isEqualTo(expected);
+//  }
+//
+//  @Test public void wildcardBodyType() {
+//    class Example {
+//      @POST("/foo") Response a(@Body List<? super String> body) {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    Type expected = new TypeToken<List<? super String>>() {}.getType();
+//    assertThat(methodInfo.requestObjectType).isEqualTo(expected);
+//  }
+//
+//  @Test public void concreteCallbackTypes() {
+//    class Example {
+//      @GET("/foo") void a(ResponseCallback cb) {
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void genericCallbackTypes() {
+//    class Example {
+//      @GET("/foo") void a(Callback<Response> cb) {
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void wildcardGenericCallbackTypes() {
+//    class Example {
+//      @GET("/foo") void a(Callback<? extends Response> c) {
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void genericCallbackWithGenericType() {
+//    class Example {
+//      @GET("/foo") void a(Callback<List<String>> c) {
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//
+//    Type expected = new TypeToken<List<String>>() {}.getType();
+//    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
+//  }
+//
+//  // RestMethodInfo reconstructs this type from MultimapCallback<String, Set<Long>>. It contains
+//  // a little of everything: a parameterized type, a generic array, and a wildcard.
+//  private static Map<? extends String, Set<Long>[]> extendingGenericCallbackType;
+//
+//  @Test public void extendingGenericCallback() throws Exception {
+//    class Example {
+//      @GET("/foo") void a(MultimapCallback<String, Set<Long>> callback) {
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(
+//        MethodInfoTest.class.getDeclaredField("extendingGenericCallbackType").getGenericType());
+//  }
+//
+//  @Test public void synchronousResponse() {
+//    class Example {
+//      @GET("/foo") Response a() {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void synchronousGenericResponse() {
+//    class Example {
+//      @GET("/foo") List<String> a() {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//
+//    Type expected = new TypeToken<List<String>>() {}.getType();
+//    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
+//  }
+//
+//  @Test public void streamingResponse() {
+//    class Example {
+//      @GET("/foo") @Streaming Response a() {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void observableResponse() {
+//    class Example {
+//      @GET("/foo") Observable<Response> a() {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
+//  }
+//
+//  @Test public void observableGenericResponse() {
+//    class Example {
+//      @GET("/foo") Observable<List<String>> a() {
+//        return null;
+//      }
+//    }
+//
+//    Method method = TestingUtils.onlyMethod(Example.class);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//    Type expected = new TypeToken<List<String>>() {}.getType();
+//    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
+//  }
+//
+//  private static interface ResponseCallback extends Callback<Response> {
+//  }
+//
+//  private static interface MultimapCallback<K, V> extends Callback<Map<? extends K, V[]>> {
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/MockClient.java b/retrofit/src/test/java/retrofit/MockClient.java
index 1fea6c0cc..b05c7f85f 100644
--- a/retrofit/src/test/java/retrofit/MockClient.java
+++ b/retrofit/src/test/java/retrofit/MockClient.java
@@ -1,50 +1,50 @@
-// Copyright 2015 Square, Inc.
-package retrofit;
-
-import com.squareup.okhttp.Interceptor;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.Response;
-import java.io.IOException;
-import java.util.ArrayDeque;
-import java.util.Deque;
-
-import static com.squareup.okhttp.Protocol.HTTP_1_1;
-
-final class MockClient implements Interceptor {
-  private Deque<Object> events = new ArrayDeque<Object>();
-  private Deque<Request> requests = new ArrayDeque<Request>();
-
-  @Override public Response intercept(Chain chain) throws IOException {
-    Request request = chain.request();
-    requests.addLast(request);
-
-    Object event = events.removeFirst();
-    if (event instanceof IOException) {
-      throw (IOException) event;
-    }
-    if (event instanceof RuntimeException) {
-      throw (RuntimeException) event;
-    }
-    if (event instanceof Response.Builder) {
-      Response.Builder response = (Response.Builder) event;
-      return response.request(request).protocol(HTTP_1_1).build();
-    }
-    throw new IllegalStateException("Unknown event " + event.getClass());
-  }
-
-  public void enqueueResponse(Response.Builder response) {
-    events.addLast(response);
-  }
-
-  public void enqueueUnexpectedException(RuntimeException exception) {
-    events.addLast(exception);
-  }
-
-  public void enqueueIOException(IOException exception) {
-    events.addLast(exception);
-  }
-
-  public Request takeRequest() {
-    return requests.removeFirst();
-  }
-}
+//// Copyright 2015 Square, Inc.
+//package retrofit;
+//
+//import com.squareup.okhttp.Interceptor;
+//import com.squareup.okhttp.Request;
+//import com.squareup.okhttp.Response;
+//import java.io.IOException;
+//import java.util.ArrayDeque;
+//import java.util.Deque;
+//
+//import static com.squareup.okhttp.Protocol.HTTP_1_1;
+//
+//final class MockClient implements Interceptor {
+//  private Deque<Object> events = new ArrayDeque<Object>();
+//  private Deque<Request> requests = new ArrayDeque<Request>();
+//
+//  @Override public Response intercept(Chain chain) throws IOException {
+//    Request request = chain.request();
+//    requests.addLast(request);
+//
+//    Object event = events.removeFirst();
+//    if (event instanceof IOException) {
+//      throw (IOException) event;
+//    }
+//    if (event instanceof RuntimeException) {
+//      throw (RuntimeException) event;
+//    }
+//    if (event instanceof Response.Builder) {
+//      Response.Builder response = (Response.Builder) event;
+//      return response.request(request).protocol(HTTP_1_1).build();
+//    }
+//    throw new IllegalStateException("Unknown event " + event.getClass());
+//  }
+//
+//  public void enqueueResponse(Response.Builder response) {
+//    events.addLast(response);
+//  }
+//
+//  public void enqueueUnexpectedException(RuntimeException exception) {
+//    events.addLast(exception);
+//  }
+//
+//  public void enqueueIOException(IOException exception) {
+//    events.addLast(exception);
+//  }
+//
+//  public Request takeRequest() {
+//    return requests.removeFirst();
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 3585600be..747edf6c1 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1,1823 +1,1823 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.google.gson.Gson;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.Request;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.Response;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.math.BigInteger;
-import java.util.Arrays;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import okio.Buffer;
-import org.junit.Ignore;
-import org.junit.Test;
-import retrofit.converter.Converter;
-import retrofit.converter.GsonConverter;
-import retrofit.http.Body;
-import retrofit.http.DELETE;
-import retrofit.http.Field;
-import retrofit.http.FieldMap;
-import retrofit.http.GET;
-import retrofit.http.HEAD;
-import retrofit.http.HTTP;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.PATCH;
-import retrofit.http.POST;
-import retrofit.http.PUT;
-import retrofit.http.Part;
-import retrofit.http.PartMap;
-import retrofit.http.Path;
-import retrofit.http.Query;
-import retrofit.http.QueryMap;
-import retrofit.http.Streaming;
-import rx.Observable;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-@SuppressWarnings("UnusedParameters") // Parameters inspected reflectively.
-public class RequestBuilderTest {
-  private RequestInterceptor interceptor;
-
-  @Test public void custom1Method() {
-    class Example {
-      @HTTP(method = "CUSTOM1", path = "/foo")
-      Response method() {
-        return null;
-      }
-    }
-
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("CUSTOM1");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo");
-    assertThat(request.body()).isNull();
-  }
-
-  @Ignore // TODO https://github.com/square/okhttp/issues/229
-  @Test public void custom2Method() {
-    class Example {
-      @HTTP(method = "CUSTOM2", path = "/foo", hasBody = true)
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.method()).isEqualTo("CUSTOM2");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo");
-    assertBody(request.body(), "hi");
-  }
-
-  //@Test public void onlyOneEncodingIsAllowedMultipartFirst() {
-  //  class Example {
-  //    @Multipart //
-  //    @FormUrlEncoded //
-  //    @POST("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
-  //  }
-  //}
-  //
-  //@Test public void onlyOneEncodingIsAllowedFormEncodingFirst() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @Multipart //
-  //    @POST("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
-  //  }
-  //}
-
-  @Test public void invalidPathParam() throws Exception {
-    class Example {
-      @GET("/") //
-      Response method(@Path("hey!") String thing) {
-        return null;
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @Path parameter name must match \\{([a-zA-Z][a-zA-Z0-9_-]*)\\}."
-              + " Found: hey! (parameter #1)");
-    }
-  }
-
-  @Test public void pathParamNotAllowedInQuery() throws Exception {
-    class Example {
-      @GET("/foo?bar={bar}") //
-      Response method(@Path("bar") String thing) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: URL query string \"bar={bar}\" must not have replace block."
-              + " For dynamic query parameters use @Query.");
-    }
-  }
-
-  @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {
-    class Example {
-      @GET("/") //
-      Response method(@Body @Query("nope") Object o) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Multiple Retrofit annotations found, only one allowed:"
-              + " @Body, @Query. (parameter #1)");
-    }
-  }
-
-  @Test public void twoMethodsFail() {
-    class Example {
-      @PATCH("/foo") //
-      @POST("/foo") //
-      Response method() {
-        return null;
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Only one HTTP method is allowed. Found: PATCH and POST.");
-    }
-  }
-
-  @Test public void pathMustBePrefixedWithSlash() {
-    class Example {
-      @GET("foo/bar") //
-      Response method() {
-        return null;
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: URL path \"foo/bar\" must start with '/'.");
-    }
-  }
-
-  @Test public void streamingResponseNotAllowed() {
-    class Example {
-      @GET("/foo") //
-      @Streaming //
-      String method() {
-        return null;
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Only methods having Response as data type are allowed to have @Streaming annotation.");
-    }
-  }
-
-  @Test public void streamingResponseWithCallbackNotAllowed() {
-    class Example {
-      @GET("/foo") //
-      @Streaming //
-      void method(Callback<String> callback) {
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Only methods having Response as data type are allowed to have @Streaming annotation.");
-    }
-  }
-
-  @Test public void observableWithCallback() {
-    class Example {
-      @GET("/foo") //
-      Observable<Response> method(Callback<Response> callback) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Must have return type or Callback as last argument, not both.");
-    }
-  }
-
-  @Test public void missingCallbackTypes() {
-    class Example {
-      @GET("/foo") //
-      void method(@Query("id") String id) {
-      }
-    }
-
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Must have either a return type or Callback as last argument.");
-    }
-  }
-
-  @Test public void nonParameterizedCallbackFails() {
-    class Example {
-      @GET("/foo") //
-      void method(Callback cb) {
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Last parameter must be of type Callback<X> or Callback<? super X>.");
-    }
-  }
-
-  @Test public void synchronousWithAsyncCallback() {
-    class Example {
-      @GET("/foo") //
-      Response method(Callback<Response> callback) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Must have return type or Callback as last argument, not both.");
-    }
-  }
-
-  @Test public void lackingMethod() {
-    class Example {
-      Response method() {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: HTTP method annotation is required (e.g., @GET, @POST, etc.).");
-    }
-  }
-
-  @Test public void implicitMultipartForbidden() {
-    class Example {
-      @POST("/") //
-      Response method(@Part("a") int a) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @Part parameters can only be used with multipart encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void implicitMultipartWithPartMapForbidden() {
-    class Example {
-      @POST("/") //
-      Response method(@PartMap Map<String, String> params) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @PartMap parameters can only be used with multipart encoding. (parameter #1)");
-    }
-  }
-
-  //@Test public void multipartFailsOnNonBodyMethod() {
-  //  class Example {
-  //    @Multipart //
-  //    @GET("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage(
-  //        "Example.method: Multipart can only be specified on HTTP methods with request body (e.g., @POST).");
-  //  }
-  //}
-  //
-  //@Test public void multipartFailsWithNoParts() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: Multipart method must contain at least one @Part.");
-  //  }
-  //}
-
-  @Test public void implicitFormEncodingByFieldForbidden() {
-    class Example {
-      @POST("/") //
-      Response method(@Field("a") int a) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @Field parameters can only be used with form encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void implicitFormEncodingByFieldMapForbidden() {
-    class Example {
-      @POST("/") //
-      Response method(@FieldMap Map<String, String> a) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @FieldMap parameters can only be used with form encoding. (parameter #1)");
-    }
-  }
-
-  //@Test public void formEncodingFailsOnNonBodyMethod() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @GET("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage(
-  //        "Example.method: FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).");
-  //  }
-  //}
-  //
-  //@Test public void formEncodingFailsWithNoParts() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/") //
-  //    Response method() {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: Form-encoded method must contain at least one @Field.");
-  //  }
-  //}
-
-  @Test public void headersFailWhenEmptyOnMethod() {
-    class Example {
-      @GET("/") //
-      @Headers({}) //
-      Response method() {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: @Headers annotation is empty.");
-    }
-  }
-
-  @Test public void headersFailWhenMalformed() {
-    class Example {
-      @GET("/") //
-      @Headers("Malformed") //
-      Response method() {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: @Headers value must be in the form \"Name: Value\". Found: \"Malformed\"");
-    }
-  }
-
-  @Test public void pathParamNonPathParamAndTypedBytes() {
-    class Example {
-      @PUT("/{a}") //
-      Response method(@Path("a") int a, @Path("b") int b, @Body int c) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: URL \"/{a}\" does not contain \"{b}\". (parameter #2)");
-    }
-  }
-
-  @Test public void parameterWithoutAnnotation() {
-    class Example {
-      @GET("/") //
-      Response method(String a) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: No Retrofit annotation found. (parameter #1)");
-    }
-  }
-
-  @Test public void nonBodyHttpMethodWithSingleEntity() {
-    class Example {
-      @GET("/") //
-      Response method(@Body Object o) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.method: Non-body HTTP method cannot contain @Body or @TypedOutput.");
-    }
-  }
-
-  @Test public void queryMapMustBeAMap() {
-    class Example {
-      @GET("/") //
-      Response method(@QueryMap List<String> a) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: @QueryMap parameter type must be Map. (parameter #1)");
-    }
-  }
-
-  @Test public void queryMapRejectsNullKeys() {
-    class Example {
-      @GET("/") //
-      Response method(@QueryMap Map<String, String> a) {
-        return null;
-      }
-    }
-
-    Map<String, String> queryParams = new LinkedHashMap<String, String>();
-    queryParams.put("ping", "pong");
-    queryParams.put(null, "kat");
-
-    try {
-      buildRequest(Example.class, queryParams);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Parameter #1 query map contained null key.");
-    }
-  }
-
-  @Test public void twoBodies() {
-    class Example {
-      @PUT("/") //
-      Response method(@Body int o1, @Body int o2) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.method: Multiple @Body method annotations found.");
-    }
-  }
-
-  //@Test public void bodyInNonBodyRequest() {
-  //  class Example {
-  //    @Multipart //
-  //    @PUT("/") //
-  //    Response method(@Part("one") int o1, @Body int o2) {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage(
-  //        "Example.method: @Body parameters cannot be used with form or multi-part encoding. (parameter #2)");
-  //  }
-  //}
-
-  @Test public void get() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void delete() {
-    class Example {
-      @DELETE("/foo/bar/") //
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("DELETE");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "");
-  }
-
-  @Test public void head() {
-    class Example {
-      @HEAD("/foo/bar/") //
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("HEAD");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void post() {
-    class Example {
-      @POST("/foo/bar/") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.method()).isEqualTo("POST");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "hi");
-  }
-
-  @Test public void put() {
-    class Example {
-      @PUT("/foo/bar/") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.method()).isEqualTo("PUT");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "hi");
-  }
-
-  @Test public void patch() {
-    class Example {
-      @PATCH("/foo/bar/") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.method()).isEqualTo("PATCH");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "hi");
-  }
-
-  @Test public void getWithPathParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "po ng");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodedPathParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path(value = "ping", encode = false) String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "po%20ng");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithInterceptorPathParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addPathParam("ping", "po ng");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithInterceptorEncodedPathParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addEncodedPathParam("ping", "po%20ng");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorPathParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/{kit}/") //
-      Response method(@Path("ping") String ping) {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addPathParam("kit", "kat");
-      }
-    };
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithInterceptorQueryParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addQueryParam("ping", "po ng");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=po+ng");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorQueryParam() {
-    class Example {
-      @GET("/foo/bar/{kit}/") //
-      Response method(@Path("kit") String kit) {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addQueryParam("ping", "pong");
-      }
-    };
-    Request request = buildRequest(Example.class, "kat");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/kat/?ping=pong");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithInterceptorPathParamAndInterceptorQueryParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addPathParam("ping", "pong");
-        request.addQueryParam("butter", "finger");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/?butter=finger");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorPathParamAndInterceptorQueryParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/{kit}/") //
-      Response method(@Path("ping") String ping) {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addPathParam("kit", "kat");
-        request.addQueryParam("butter", "finger");
-      }
-    };
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/?butter=finger");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void pathParamRequired() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class, new Object[] { null });
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).isEqualTo("Path parameter \"ping\" value must not be null.");
-    }
-  }
-
-  @Test public void getWithQueryParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("ping") String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=pong");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodedQueryParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query(value = "ping", encodeValue = false) String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "p+o+n+g");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=p+o+n+g");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodeNameQueryParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query(value = "pi ng", encodeName = true) String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?pi+ng=pong");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodeNameEncodedValueQueryParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query(value = "pi ng", encodeName = true, encodeValue = false) String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "po+ng");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?pi+ng=po+ng");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void queryParamOptionalOmitsQuery() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("ping") String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, new Object[] { null });
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  }
-
-  @Test public void queryParamOptional() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("foo") String foo, @Query("ping") String ping,
-          @Query("kit") String kit) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "bar", null, "kat");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?foo=bar&kit=kat");
-  }
-
-  @Test public void getWithQueryUrlAndParam() {
-    class Example {
-      @GET("/foo/bar/?hi=mom") //
-      Response method(@Query("ping") String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?hi=mom&ping=pong");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithQuery() {
-    class Example {
-      @GET("/foo/bar/?hi=mom") //
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?hi=mom");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping, @Query("kit") String kit,
-          @Query("riff") String riff) {
-        return null;
-      }
-    }
-
-    Request request = buildRequest(Example.class, "pong", "kat", "raff");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryQuestionMarkParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping, @Query("kit") String kit) {
-        return null;
-      }
-    }
-
-    Request request = buildRequest(Example.class, "pong?", "kat?");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryAmpersandParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping, @Query("kit") String kit) {
-        return null;
-      }
-    }
-
-    Request request = buildRequest(Example.class, "pong&", "kat&");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryHashParam() {
-    class Example {
-      @GET("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping, @Query("kit") String kit) {
-        return null;
-      }
-    }
-
-    Request request = buildRequest(Example.class, "pong#", "kat#");
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithQueryParamList() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("key") List<Object> keys) {
-        return null;
-      }
-    }
-
-    List<Object> values = Arrays.<Object>asList(1, 2, null, "three");
-    Request request = buildRequest(Example.class, values);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithQueryParamArray() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("key") Object[] keys) {
-        return null;
-      }
-    }
-
-    Object[] values = { 1, 2, null, "three" };
-    Request request = buildRequest(Example.class, new Object[] { values });
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithQueryParamPrimitiveArray() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Query("key") int[] keys) {
-        return null;
-      }
-    }
-
-    int[] values = { 1, 2, 3 };
-    Request request = buildRequest(Example.class, new Object[] { values });
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=3");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithQueryParamMap() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@QueryMap Map<String, Object> query) {
-        return null;
-      }
-    }
-
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("kit", "kat");
-    params.put("foo", null);
-    params.put("ping", "pong");
-
-    Request request = buildRequest(Example.class, params);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?kit=kat&ping=pong");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodedQueryParamMap() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@QueryMap(encodeValues = false) Map<String, Object> query) {
-        return null;
-      }
-    }
-
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("kit", "k%20t");
-    params.put("foo", null);
-    params.put("ping", "p%20g");
-
-    Request request = buildRequest(Example.class, params);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?kit=k%20t&ping=p%20g");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodeNameQueryParamMap() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@QueryMap(encodeNames = true) Map<String, Object> query) {
-        return null;
-      }
-    }
-
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("k it", "k t");
-    params.put("fo o", null);
-    params.put("pi ng", "p g");
-
-    Request request = buildRequest(Example.class, params);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?k+it=k+t&pi+ng=p+g");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void getWithEncodeNameEncodedValueQueryParamMap() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(
-          @QueryMap(encodeNames = true, encodeValues = false) Map<String, Object> query) {
-        return null;
-      }
-    }
-
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("k it", "k%20t");
-    params.put("fo o", null);
-    params.put("pi ng", "p%20g");
-
-    Request request = buildRequest(Example.class, params);
-    assertThat(request.method()).isEqualTo("GET");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?k+it=k%20t&pi+ng=p%20g");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void normalPostWithPathParam() {
-    class Example {
-      @POST("/foo/bar/{ping}/") //
-      Response method(@Path("ping") String ping) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "pong");
-    assertThat(request.method()).isEqualTo("POST");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/");
-    assertBody(request.body(), "");
-  }
-
-  @Test public void bodyGson() {
-    class Example {
-      @POST("/foo/bar/") //
-      Response method(@Body Object body) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, Arrays.asList("quick", "brown", "fox"));
-    assertThat(request.method()).isEqualTo("POST");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "[\"quick\",\"brown\",\"fox\"]");
-  }
-
-  @Test public void bodyTypedInput() {
-    class Example {
-      @POST("/foo/bar/") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.method()).isEqualTo("POST");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertBody(request.body(), "hi");
-  }
-
-  @Test public void bodyRequired() {
-    class Example {
-      @POST("/foo/bar/") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    try {
-      buildRequest(Example.class, new Object[] { null });
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).isEqualTo("Body parameter value must not be null.");
-    }
-  }
-
-  @Test public void bodyWithPathParams() {
-    class Example {
-      @POST("/foo/bar/{ping}/{kit}/") //
-      Response method(@Path("ping") String ping, @Body Object body, @Path("kit") String kit) {
-        return null;
-      }
-    }
-    Request request =
-        buildRequest(Example.class, "pong", Arrays.asList("quick", "brown", "fox"), "kat");
-    assertThat(request.method()).isEqualTo("POST");
-    assertThat(request.headers().size()).isZero();
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/");
-    assertBody(request.body(), "[\"quick\",\"brown\",\"fox\"]");
-  }
-  //
-  //@Test public void simpleMultipart() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@Part("ping") String ping, @Part("kit") TypedInput kit) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
-  //  assertThat(request.method()).isEqualTo("POST");
-  //  assertThat(request.headers().size()).isZero();
-  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  //
-  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
-  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
-  //  assertThat(bodyParts).hasSize(2);
-  //
-  //  Iterator<byte[]> iterator = bodyParts.iterator();
-  //
-  //  String one = new String(iterator.next(), UTF_8);
-  //  assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
-  //
-  //  String two = new String(iterator.next(), UTF_8);
-  //  assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
-  //}
-  //
-  //@Test public void multipartWithEncoding() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@Part(value = "ping", encoding = "8-bit") String ping,
-  //        @Part(value = "kit", encoding = "7-bit") TypedInput kit) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
-  //  assertThat(request.method()).isEqualTo("POST");
-  //  assertThat(request.headers().size()).isZero();
-  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  //
-  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
-  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
-  //  assertThat(bodyParts).hasSize(2);
-  //
-  //  Iterator<byte[]> iterator = bodyParts.iterator();
-  //
-  //  String one = new String(iterator.next(), UTF_8);
-  //  assertThat(one).contains("name=\"ping\"\r\n")
-  //      .contains("Content-Transfer-Encoding: 8-bit")
-  //      .endsWith("\r\npong");
-  //
-  //  String two = new String(iterator.next(), UTF_8);
-  //  assertThat(two).contains("name=\"kit\"")
-  //      .contains("Content-Transfer-Encoding: 7-bit")
-  //      .endsWith("\r\nkat");
-  //}
-  //
-  //@Test public void multipartPartMap() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@PartMap Map<String, Object> parts) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
-  //  params.put("ping", "pong");
-  //  params.put("kit", new TypedString("kat"));
-  //
-  //  Request request = buildRequest(Example.class, params);
-  //  assertThat(request.method()).isEqualTo("POST");
-  //  assertThat(request.headers().size()).isZero();
-  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  //
-  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
-  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
-  //  assertThat(bodyParts).hasSize(2);
-  //
-  //  Iterator<byte[]> iterator = bodyParts.iterator();
-  //
-  //  String one = new String(iterator.next(), UTF_8);
-  //  assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
-  //
-  //  String two = new String(iterator.next(), UTF_8);
-  //  assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
-  //}
-  //
-  //@Test public void multipartPartMapWithEncoding() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@PartMap(encoding = "8-bit") Map<String, Object> parts) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
-  //  params.put("ping", "pong");
-  //  params.put("kit", new TypedString("kat"));
-  //
-  //  Request request = buildRequest(Example.class, params);
-  //  assertThat(request.method()).isEqualTo("POST");
-  //  assertThat(request.headers().size()).isZero();
-  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  //
-  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
-  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
-  //  assertThat(bodyParts).hasSize(2);
-  //
-  //  Iterator<byte[]> iterator = bodyParts.iterator();
-  //
-  //  String one = new String(iterator.next(), UTF_8);
-  //  assertThat(one).contains("name=\"ping\"\r\n")
-  //      .contains("Content-Transfer-Encoding: 8-bit")
-  //      .endsWith("\r\npong");
-  //
-  //  String two = new String(iterator.next(), UTF_8);
-  //  assertThat(two).contains("name=\"kit\"")
-  //      .contains("Content-Transfer-Encoding: 8-bit")
-  //      .endsWith("\r\nkat");
-  //}
-  //
-  //@Test public void multipartPartMapRejectsNullKeys() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@PartMap Map<String, Object> parts) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
-  //  params.put("ping", "pong");
-  //  params.put(null, "kat");
-  //
-  //  try {
-  //    buildRequest(Example.class, params);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Parameter #1 part map contained null key.");
-  //  }
-  //}
-  //
-  //@Test public void multipartNullRemovesPart() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@Part("ping") String ping, @Part("fizz") String fizz) {
-  //      return null;
-  //    }
-  //  }
-  //  Request request = buildRequest(Example.class, "pong", null);
-  //  assertThat(request.method()).isEqualTo("POST");
-  //  assertThat(request.headers().size()).isZero();
-  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-  //
-  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
-  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
-  //  assertThat(bodyParts).hasSize(1);
-  //
-  //  Iterator<byte[]> iterator = bodyParts.iterator();
-  //
-  //  String one = new String(iterator.next(), UTF_8);
-  //  assertThat(one).contains("name=\"ping\"").endsWith("\r\npong");
-  //}
-  //
-  //@Test public void multipartPartOptional() {
-  //  class Example {
-  //    @Multipart //
-  //    @POST("/foo/bar/") //
-  //    Response method(@Part("ping") RequestBody ping) {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class, new Object[] { null });
-  //    fail();
-  //  } catch (IllegalStateException e) {
-  //    assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");
-  //  }
-  //}
-  //
-  //@Test public void simpleFormEncoded() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field("foo") String foo, @Field("ping") String ping) {
-  //      return null;
-  //    }
-  //  }
-  //  Request request = buildRequest(Example.class, "bar", "pong");
-  //  assertBody(request.body(), "foo=bar&ping=pong");
-  //}
-  //
-  //@Test public void formEncodedWithEncodedNameFieldParam() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field(value = "na+me", encodeName = false) String foo) {
-  //      return null;
-  //    }
-  //  }
-  //  Request request = buildRequest(Example.class, "ba r");
-  //  assertBody(request.body(), "na+me=ba+r");
-  //}
-  //
-  //@Test public void formEncodedWithEncodedValueFieldParam() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field(value = "na me", encodeValue = false) String foo) {
-  //      return null;
-  //    }
-  //  }
-  //  Request request = buildRequest(Example.class, "ba+r");
-  //  assertBody(request.body(), "na+me=ba+r");
-  //}
-  //
-  //@Test public void formEncodedFieldOptional() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field("foo") String foo, @Field("ping") String ping,
-  //        @Field("kit") String kit) {
-  //      return null;
-  //    }
-  //  }
-  //  Request request = buildRequest(Example.class, "bar", null, "kat");
-  //  assertBody(request.body(), "foo=bar&kit=kat");
-  //}
-  //
-  //@Test public void formEncodedFieldList() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field("foo") List<Object> fields, @Field("kit") String kit) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  List<Object> values = Arrays.<Object>asList("foo", "bar", null, 3);
-  //  Request request = buildRequest(Example.class, values, "kat");
-  //  assertBody(request.body(), "foo=foo&foo=bar&foo=3&kit=kat");
-  //}
-  //
-  //@Test public void formEncodedFieldArray() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field("foo") Object[] fields, @Field("kit") String kit) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Object[] values = { 1, 2, null, "three" };
-  //  Request request = buildRequest(Example.class, values, "kat");
-  //  assertBody(request.body(), "foo=1&foo=2&foo=three&kit=kat");
-  //}
-  //
-  //@Test public void formEncodedFieldPrimitiveArray() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@Field("foo") int[] fields, @Field("kit") String kit) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  int[] values = { 1, 2, 3 };
-  //  Request request = buildRequest(Example.class, values, "kat");
-  //  assertBody(request.body(), "foo=1&foo=2&foo=3&kit=kat");
-  //}
-  //
-  //@Test public void formEncodedWithEncodedNameFieldParamMap() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@FieldMap(encodeNames = false) Map<String, Object> fieldMap) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
-  //  fieldMap.put("k+it", "k at");
-  //  fieldMap.put("pin+g", "po ng");
-  //
-  //  Request request = buildRequest(Example.class, fieldMap);
-  //  assertBody(request.body(), "k+it=k+at&pin+g=po+ng");
-  //}
-  //
-  //@Test public void formEncodedWithEncodedValueFieldParamMap() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@FieldMap(encodeValues = false) Map<String, Object> fieldMap) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
-  //  fieldMap.put("k it", "k+at");
-  //  fieldMap.put("pin g", "po+ng");
-  //
-  //  Request request = buildRequest(Example.class, fieldMap);
-  //  assertBody(request.body(), "k+it=k+at&pin+g=po+ng");
-  //}
-  //
-  //@Test public void formEncodedFieldMap() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/foo") //
-  //    Response method(@FieldMap Map<String, Object> fieldMap) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
-  //  fieldMap.put("kit", "kat");
-  //  fieldMap.put("foo", null);
-  //  fieldMap.put("ping", "pong");
-  //
-  //  Request request = buildRequest(Example.class, fieldMap);
-  //  assertBody(request.body(), "kit=kat&ping=pong");
-  //}
-  //
-  //@Test public void fieldMapRejectsNullKeys() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/") //
-  //    Response method(@FieldMap Map<String, Object> a) {
-  //      return null;
-  //    }
-  //  }
-  //
-  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
-  //  fieldMap.put("kit", "kat");
-  //  fieldMap.put("foo", null);
-  //  fieldMap.put(null, "pong");
-  //
-  //  try {
-  //    buildRequest(Example.class, fieldMap);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Parameter #1 field map contained null key.");
-  //  }
-  //}
-  //
-  //@Test public void fieldMapMustBeAMap() {
-  //  class Example {
-  //    @FormUrlEncoded //
-  //    @POST("/") //
-  //    Response method(@FieldMap List<String> a) {
-  //      return null;
-  //    }
-  //  }
-  //  try {
-  //    buildRequest(Example.class);
-  //    fail();
-  //  } catch (IllegalArgumentException e) {
-  //    assertThat(e).hasMessage("Example.method: @FieldMap parameter type must be Map. (parameter #1)");
-  //  }
-  //}
-
-  @Test public void simpleHeaders() {
-    class Example {
-      @GET("/foo/bar/")
-      @Headers({
-          "ping: pong",
-          "kit: kat"
-      })
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.get("ping")).isEqualTo("pong");
-    assertThat(headers.get("kit")).isEqualTo("kat");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void simpleInterceptorHeaders() {
-    class Example {
-      @GET("/foo/bar/")
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addHeader("ping", "pong");
-        request.addHeader("kit", "kat");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.get("ping")).isEqualTo("pong");
-    assertThat(headers.get("kit")).isEqualTo("kat");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void headersAndInterceptorHeaders() {
-    class Example {
-      @GET("/foo/bar/") //
-      @Headers("ping: pong") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addHeader("kit", "kat");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.get("ping")).isEqualTo("pong");
-    assertThat(headers.get("kit")).isEqualTo("kat");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void allThreeHeaderTypes() {
-    class Example {
-      @GET("/foo/bar/") //
-      @Headers("ping: pong") //
-      Response method(@Header("fizz") String fizz) {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addHeader("kit", "kat");
-      }
-    };
-    Request request = buildRequest(Example.class, "buzz");
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(3);
-    assertThat(headers.get("ping")).isEqualTo("pong");
-    assertThat(headers.get("kit")).isEqualTo("kat");
-    assertThat(headers.get("fizz")).isEqualTo("buzz");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void headerParamToString() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Header("kit") BigInteger kit) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, new BigInteger("1234"));
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(1);
-    assertThat(headers.get("kit")).isEqualTo("1234");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void headerParam() {
-    class Example {
-      @GET("/foo/bar/") //
-      @Headers("ping: pong") //
-      Response method(@Header("kit") String kit) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, "kat");
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.get("ping")).isEqualTo("pong");
-    assertThat(headers.get("kit")).isEqualTo("kat");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void headerParamList() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Header("foo") List<String> kit) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.values("foo")).containsExactly("bar", "baz");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void headerParamArray() {
-    class Example {
-      @GET("/foo/bar/") //
-      Response method(@Header("foo") String[] kit) {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
-    assertThat(request.method()).isEqualTo("GET");
-    com.squareup.okhttp.Headers headers = request.headers();
-    assertThat(headers.size()).isEqualTo(2);
-    assertThat(headers.values("foo")).containsExactly("bar", "baz");
-    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.body()).isNull();
-  }
-
-  @Test public void contentTypeAnnotationHeaderOverrides() {
-    class Example {
-      @POST("/") //
-      @Headers("Content-Type: text/not-plain") //
-      Response method(@Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
-    Request request = buildRequest(Example.class, body);
-    assertThat(request.body().contentType().toString()).isEqualTo("text/not-plain");
-  }
-
-  @Test public void contentTypeAnnotationHeaderAddsHeaderWithNoBody() {
-    class Example {
-      @DELETE("/") //
-      @Headers("Content-Type: text/not-plain") //
-      Response method() {
-        return null;
-      }
-    }
-    Request request = buildRequest(Example.class);
-    assertThat(request.headers().get("Content-Type")).isEqualTo("text/not-plain");
-  }
-
-  @Test public void contentTypeInterceptorHeaderAddsHeaderWithNoBody() {
-    class Example {
-      @DELETE("/") //
-      Response method() {
-        return null;
-      }
-    }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
-        request.addHeader("Content-Type", "text/not-plain");
-      }
-    };
-    Request request = buildRequest(Example.class);
-    assertThat(request.headers().get("Content-Type")).isEqualTo("text/not-plain");
-  }
-
-  @Test public void contentTypeParameterHeaderOverrides() {
-    class Example {
-      @POST("/") //
-      Response method(@Header("Content-Type") String contentType, @Body RequestBody body) {
-        return null;
-      }
-    }
-    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "Plain");
-    Request request = buildRequest(Example.class, "text/not-plain", body);
-    assertThat(request.body().contentType().toString()).isEqualTo("text/not-plain");
-  }
-
-  private static void assertBody(RequestBody body, String expected) {
-    assertThat(body).isNotNull();
-    Buffer buffer = new Buffer();
-    try {
-      body.writeTo(buffer);
-      assertThat(buffer.readUtf8()).isEqualTo(expected);
-    } catch (IOException e) {
-      throw new RuntimeException(e);
-    }
-  }
-
-  private static final Converter GSON = new GsonConverter(new Gson());
-
-  private Request buildRequest(Class<?> cls, Object... args) {
-    Method method = TestingUtils.onlyMethod(cls);
-    MethodInfo methodInfo = new MethodInfo(method);
-
-    RequestBuilder builder = new RequestBuilder("http://example.com/", methodInfo, GSON);
-    if (interceptor != null) {
-      interceptor.intercept(builder);
-    }
-    builder.setArguments(args);
-
-    return builder.build();
-  }
-}
+//// Copyright 2013 Square, Inc.
+//package retrofit;
+//
+//import com.google.gson.Gson;
+//import com.squareup.okhttp.MediaType;
+//import com.squareup.okhttp.Request;
+//import com.squareup.okhttp.RequestBody;
+//import com.squareup.okhttp.Response;
+//import java.io.IOException;
+//import java.lang.reflect.Method;
+//import java.math.BigInteger;
+//import java.util.Arrays;
+//import java.util.LinkedHashMap;
+//import java.util.List;
+//import java.util.Map;
+//import okio.Buffer;
+//import org.junit.Ignore;
+//import org.junit.Test;
+//import retrofit.converter.Converter;
+//import retrofit.converter.GsonConverter;
+//import retrofit.http.Body;
+//import retrofit.http.DELETE;
+//import retrofit.http.Field;
+//import retrofit.http.FieldMap;
+//import retrofit.http.GET;
+//import retrofit.http.HEAD;
+//import retrofit.http.HTTP;
+//import retrofit.http.Header;
+//import retrofit.http.Headers;
+//import retrofit.http.PATCH;
+//import retrofit.http.POST;
+//import retrofit.http.PUT;
+//import retrofit.http.Part;
+//import retrofit.http.PartMap;
+//import retrofit.http.Path;
+//import retrofit.http.Query;
+//import retrofit.http.QueryMap;
+//import retrofit.http.Streaming;
+//import rx.Observable;
+//
+//import static org.assertj.core.api.Assertions.assertThat;
+//import static org.junit.Assert.fail;
+//
+//@SuppressWarnings("UnusedParameters") // Parameters inspected reflectively.
+//public class RequestBuilderTest {
+//  private RequestInterceptor interceptor;
+//
+//  @Test public void custom1Method() {
+//    class Example {
+//      @HTTP(method = "CUSTOM1", path = "/foo")
+//      Response method() {
+//        return null;
+//      }
+//    }
+//
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("CUSTOM1");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Ignore // TODO https://github.com/square/okhttp/issues/229
+//  @Test public void custom2Method() {
+//    class Example {
+//      @HTTP(method = "CUSTOM2", path = "/foo", hasBody = true)
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.method()).isEqualTo("CUSTOM2");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo");
+//    assertBody(request.body(), "hi");
+//  }
+//
+//  //@Test public void onlyOneEncodingIsAllowedMultipartFirst() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @FormUrlEncoded //
+//  //    @POST("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
+//  //  }
+//  //}
+//  //
+//  //@Test public void onlyOneEncodingIsAllowedFormEncodingFirst() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @Multipart //
+//  //    @POST("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
+//  //  }
+//  //}
+//
+//  @Test public void invalidPathParam() throws Exception {
+//    class Example {
+//      @GET("/") //
+//      Response method(@Path("hey!") String thing) {
+//        return null;
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @Path parameter name must match \\{([a-zA-Z][a-zA-Z0-9_-]*)\\}."
+//              + " Found: hey! (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void pathParamNotAllowedInQuery() throws Exception {
+//    class Example {
+//      @GET("/foo?bar={bar}") //
+//      Response method(@Path("bar") String thing) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: URL query string \"bar={bar}\" must not have replace block."
+//              + " For dynamic query parameters use @Query.");
+//    }
+//  }
+//
+//  @Test public void multipleParameterAnnotationsNotAllowed() throws Exception {
+//    class Example {
+//      @GET("/") //
+//      Response method(@Body @Query("nope") Object o) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Multiple Retrofit annotations found, only one allowed:"
+//              + " @Body, @Query. (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void twoMethodsFail() {
+//    class Example {
+//      @PATCH("/foo") //
+//      @POST("/foo") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Only one HTTP method is allowed. Found: PATCH and POST.");
+//    }
+//  }
+//
+//  @Test public void pathMustBePrefixedWithSlash() {
+//    class Example {
+//      @GET("foo/bar") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: URL path \"foo/bar\" must start with '/'.");
+//    }
+//  }
+//
+//  @Test public void streamingResponseNotAllowed() {
+//    class Example {
+//      @GET("/foo") //
+//      @Streaming //
+//      String method() {
+//        return null;
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Only methods having Response as data type are allowed to have @Streaming annotation.");
+//    }
+//  }
+//
+//  @Test public void streamingResponseWithCallbackNotAllowed() {
+//    class Example {
+//      @GET("/foo") //
+//      @Streaming //
+//      void method(Callback<String> callback) {
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Only methods having Response as data type are allowed to have @Streaming annotation.");
+//    }
+//  }
+//
+//  @Test public void observableWithCallback() {
+//    class Example {
+//      @GET("/foo") //
+//      Observable<Response> method(Callback<Response> callback) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Must have return type or Callback as last argument, not both.");
+//    }
+//  }
+//
+//  @Test public void missingCallbackTypes() {
+//    class Example {
+//      @GET("/foo") //
+//      void method(@Query("id") String id) {
+//      }
+//    }
+//
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Must have either a return type or Callback as last argument.");
+//    }
+//  }
+//
+//  @Test public void nonParameterizedCallbackFails() {
+//    class Example {
+//      @GET("/foo") //
+//      void method(Callback cb) {
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Last parameter must be of type Callback<X> or Callback<? super X>.");
+//    }
+//  }
+//
+//  @Test public void synchronousWithAsyncCallback() {
+//    class Example {
+//      @GET("/foo") //
+//      Response method(Callback<Response> callback) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Must have return type or Callback as last argument, not both.");
+//    }
+//  }
+//
+//  @Test public void lackingMethod() {
+//    class Example {
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: HTTP method annotation is required (e.g., @GET, @POST, etc.).");
+//    }
+//  }
+//
+//  @Test public void implicitMultipartForbidden() {
+//    class Example {
+//      @POST("/") //
+//      Response method(@Part("a") int a) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @Part parameters can only be used with multipart encoding. (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void implicitMultipartWithPartMapForbidden() {
+//    class Example {
+//      @POST("/") //
+//      Response method(@PartMap Map<String, String> params) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @PartMap parameters can only be used with multipart encoding. (parameter #1)");
+//    }
+//  }
+//
+//  //@Test public void multipartFailsOnNonBodyMethod() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @GET("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage(
+//  //        "Example.method: Multipart can only be specified on HTTP methods with request body (e.g., @POST).");
+//  //  }
+//  //}
+//  //
+//  //@Test public void multipartFailsWithNoParts() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Example.method: Multipart method must contain at least one @Part.");
+//  //  }
+//  //}
+//
+//  @Test public void implicitFormEncodingByFieldForbidden() {
+//    class Example {
+//      @POST("/") //
+//      Response method(@Field("a") int a) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @Field parameters can only be used with form encoding. (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void implicitFormEncodingByFieldMapForbidden() {
+//    class Example {
+//      @POST("/") //
+//      Response method(@FieldMap Map<String, String> a) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @FieldMap parameters can only be used with form encoding. (parameter #1)");
+//    }
+//  }
+//
+//  //@Test public void formEncodingFailsOnNonBodyMethod() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @GET("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage(
+//  //        "Example.method: FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).");
+//  //  }
+//  //}
+//  //
+//  //@Test public void formEncodingFailsWithNoParts() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/") //
+//  //    Response method() {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Example.method: Form-encoded method must contain at least one @Field.");
+//  //  }
+//  //}
+//
+//  @Test public void headersFailWhenEmptyOnMethod() {
+//    class Example {
+//      @GET("/") //
+//      @Headers({}) //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: @Headers annotation is empty.");
+//    }
+//  }
+//
+//  @Test public void headersFailWhenMalformed() {
+//    class Example {
+//      @GET("/") //
+//      @Headers("Malformed") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: @Headers value must be in the form \"Name: Value\". Found: \"Malformed\"");
+//    }
+//  }
+//
+//  @Test public void pathParamNonPathParamAndTypedBytes() {
+//    class Example {
+//      @PUT("/{a}") //
+//      Response method(@Path("a") int a, @Path("b") int b, @Body int c) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: URL \"/{a}\" does not contain \"{b}\". (parameter #2)");
+//    }
+//  }
+//
+//  @Test public void parameterWithoutAnnotation() {
+//    class Example {
+//      @GET("/") //
+//      Response method(String a) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: No Retrofit annotation found. (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void nonBodyHttpMethodWithSingleEntity() {
+//    class Example {
+//      @GET("/") //
+//      Response method(@Body Object o) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage(
+//          "Example.method: Non-body HTTP method cannot contain @Body or @TypedOutput.");
+//    }
+//  }
+//
+//  @Test public void queryMapMustBeAMap() {
+//    class Example {
+//      @GET("/") //
+//      Response method(@QueryMap List<String> a) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: @QueryMap parameter type must be Map. (parameter #1)");
+//    }
+//  }
+//
+//  @Test public void queryMapRejectsNullKeys() {
+//    class Example {
+//      @GET("/") //
+//      Response method(@QueryMap Map<String, String> a) {
+//        return null;
+//      }
+//    }
+//
+//    Map<String, String> queryParams = new LinkedHashMap<String, String>();
+//    queryParams.put("ping", "pong");
+//    queryParams.put(null, "kat");
+//
+//    try {
+//      buildRequest(Example.class, queryParams);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Parameter #1 query map contained null key.");
+//    }
+//  }
+//
+//  @Test public void twoBodies() {
+//    class Example {
+//      @PUT("/") //
+//      Response method(@Body int o1, @Body int o2) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Example.method: Multiple @Body method annotations found.");
+//    }
+//  }
+//
+//  //@Test public void bodyInNonBodyRequest() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @PUT("/") //
+//  //    Response method(@Part("one") int o1, @Body int o2) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage(
+//  //        "Example.method: @Body parameters cannot be used with form or multi-part encoding. (parameter #2)");
+//  //  }
+//  //}
+//
+//  @Test public void get() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void delete() {
+//    class Example {
+//      @DELETE("/foo/bar/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("DELETE");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "");
+//  }
+//
+//  @Test public void head() {
+//    class Example {
+//      @HEAD("/foo/bar/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("HEAD");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void post() {
+//    class Example {
+//      @POST("/foo/bar/") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.method()).isEqualTo("POST");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "hi");
+//  }
+//
+//  @Test public void put() {
+//    class Example {
+//      @PUT("/foo/bar/") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.method()).isEqualTo("PUT");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "hi");
+//  }
+//
+//  @Test public void patch() {
+//    class Example {
+//      @PATCH("/foo/bar/") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.method()).isEqualTo("PATCH");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "hi");
+//  }
+//
+//  @Test public void getWithPathParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "po ng");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodedPathParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path(value = "ping", encode = false) String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "po%20ng");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithInterceptorPathParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addPathParam("ping", "po ng");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithInterceptorEncodedPathParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addEncodedPathParam("ping", "po%20ng");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/po%20ng/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathParamAndInterceptorPathParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/{kit}/") //
+//      Response method(@Path("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addPathParam("kit", "kat");
+//      }
+//    };
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithInterceptorQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addQueryParam("ping", "po ng");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=po+ng");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathParamAndInterceptorQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/{kit}/") //
+//      Response method(@Path("kit") String kit) {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addQueryParam("ping", "pong");
+//      }
+//    };
+//    Request request = buildRequest(Example.class, "kat");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/kat/?ping=pong");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithInterceptorPathParamAndInterceptorQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addPathParam("ping", "pong");
+//        request.addQueryParam("butter", "finger");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/?butter=finger");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathParamAndInterceptorPathParamAndInterceptorQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/{kit}/") //
+//      Response method(@Path("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addPathParam("kit", "kat");
+//        request.addQueryParam("butter", "finger");
+//      }
+//    };
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/?butter=finger");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void pathParamRequired() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class, new Object[] { null });
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e.getMessage()).isEqualTo("Path parameter \"ping\" value must not be null.");
+//    }
+//  }
+//
+//  @Test public void getWithQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=pong");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodedQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query(value = "ping", encodeValue = false) String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "p+o+n+g");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?ping=p+o+n+g");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodeNameQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query(value = "pi ng", encodeName = true) String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?pi+ng=pong");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodeNameEncodedValueQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query(value = "pi ng", encodeName = true, encodeValue = false) String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "po+ng");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?pi+ng=po+ng");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void queryParamOptionalOmitsQuery() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, new Object[] { null });
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  }
+//
+//  @Test public void queryParamOptional() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("foo") String foo, @Query("ping") String ping,
+//          @Query("kit") String kit) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "bar", null, "kat");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?foo=bar&kit=kat");
+//  }
+//
+//  @Test public void getWithQueryUrlAndParam() {
+//    class Example {
+//      @GET("/foo/bar/?hi=mom") //
+//      Response method(@Query("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?hi=mom&ping=pong");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithQuery() {
+//    class Example {
+//      @GET("/foo/bar/?hi=mom") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?hi=mom");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathAndQueryParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping, @Query("kit") String kit,
+//          @Query("riff") String riff) {
+//        return null;
+//      }
+//    }
+//
+//    Request request = buildRequest(Example.class, "pong", "kat", "raff");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathAndQueryQuestionMarkParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping, @Query("kit") String kit) {
+//        return null;
+//      }
+//    }
+//
+//    Request request = buildRequest(Example.class, "pong?", "kat?");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathAndQueryAmpersandParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping, @Query("kit") String kit) {
+//        return null;
+//      }
+//    }
+//
+//    Request request = buildRequest(Example.class, "pong&", "kat&");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithPathAndQueryHashParam() {
+//    class Example {
+//      @GET("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping, @Query("kit") String kit) {
+//        return null;
+//      }
+//    }
+//
+//    Request request = buildRequest(Example.class, "pong#", "kat#");
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithQueryParamList() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("key") List<Object> keys) {
+//        return null;
+//      }
+//    }
+//
+//    List<Object> values = Arrays.<Object>asList(1, 2, null, "three");
+//    Request request = buildRequest(Example.class, values);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithQueryParamArray() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("key") Object[] keys) {
+//        return null;
+//      }
+//    }
+//
+//    Object[] values = { 1, 2, null, "three" };
+//    Request request = buildRequest(Example.class, new Object[] { values });
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithQueryParamPrimitiveArray() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Query("key") int[] keys) {
+//        return null;
+//      }
+//    }
+//
+//    int[] values = { 1, 2, 3 };
+//    Request request = buildRequest(Example.class, new Object[] { values });
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=3");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithQueryParamMap() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@QueryMap Map<String, Object> query) {
+//        return null;
+//      }
+//    }
+//
+//    Map<String, Object> params = new LinkedHashMap<String, Object>();
+//    params.put("kit", "kat");
+//    params.put("foo", null);
+//    params.put("ping", "pong");
+//
+//    Request request = buildRequest(Example.class, params);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?kit=kat&ping=pong");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodedQueryParamMap() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@QueryMap(encodeValues = false) Map<String, Object> query) {
+//        return null;
+//      }
+//    }
+//
+//    Map<String, Object> params = new LinkedHashMap<String, Object>();
+//    params.put("kit", "k%20t");
+//    params.put("foo", null);
+//    params.put("ping", "p%20g");
+//
+//    Request request = buildRequest(Example.class, params);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?kit=k%20t&ping=p%20g");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodeNameQueryParamMap() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@QueryMap(encodeNames = true) Map<String, Object> query) {
+//        return null;
+//      }
+//    }
+//
+//    Map<String, Object> params = new LinkedHashMap<String, Object>();
+//    params.put("k it", "k t");
+//    params.put("fo o", null);
+//    params.put("pi ng", "p g");
+//
+//    Request request = buildRequest(Example.class, params);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?k+it=k+t&pi+ng=p+g");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void getWithEncodeNameEncodedValueQueryParamMap() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(
+//          @QueryMap(encodeNames = true, encodeValues = false) Map<String, Object> query) {
+//        return null;
+//      }
+//    }
+//
+//    Map<String, Object> params = new LinkedHashMap<String, Object>();
+//    params.put("k it", "k%20t");
+//    params.put("fo o", null);
+//    params.put("pi ng", "p%20g");
+//
+//    Request request = buildRequest(Example.class, params);
+//    assertThat(request.method()).isEqualTo("GET");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/?k+it=k%20t&pi+ng=p%20g");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void normalPostWithPathParam() {
+//    class Example {
+//      @POST("/foo/bar/{ping}/") //
+//      Response method(@Path("ping") String ping) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "pong");
+//    assertThat(request.method()).isEqualTo("POST");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/");
+//    assertBody(request.body(), "");
+//  }
+//
+//  @Test public void bodyGson() {
+//    class Example {
+//      @POST("/foo/bar/") //
+//      Response method(@Body Object body) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, Arrays.asList("quick", "brown", "fox"));
+//    assertThat(request.method()).isEqualTo("POST");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "[\"quick\",\"brown\",\"fox\"]");
+//  }
+//
+//  @Test public void bodyTypedInput() {
+//    class Example {
+//      @POST("/foo/bar/") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.method()).isEqualTo("POST");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertBody(request.body(), "hi");
+//  }
+//
+//  @Test public void bodyRequired() {
+//    class Example {
+//      @POST("/foo/bar/") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    try {
+//      buildRequest(Example.class, new Object[] { null });
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e.getMessage()).isEqualTo("Body parameter value must not be null.");
+//    }
+//  }
+//
+//  @Test public void bodyWithPathParams() {
+//    class Example {
+//      @POST("/foo/bar/{ping}/{kit}/") //
+//      Response method(@Path("ping") String ping, @Body Object body, @Path("kit") String kit) {
+//        return null;
+//      }
+//    }
+//    Request request =
+//        buildRequest(Example.class, "pong", Arrays.asList("quick", "brown", "fox"), "kat");
+//    assertThat(request.method()).isEqualTo("POST");
+//    assertThat(request.headers().size()).isZero();
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/pong/kat/");
+//    assertBody(request.body(), "[\"quick\",\"brown\",\"fox\"]");
+//  }
+//  //
+//  //@Test public void simpleMultipart() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@Part("ping") String ping, @Part("kit") TypedInput kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
+//  //  assertThat(request.method()).isEqualTo("POST");
+//  //  assertThat(request.headers().size()).isZero();
+//  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  //
+//  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
+//  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
+//  //  assertThat(bodyParts).hasSize(2);
+//  //
+//  //  Iterator<byte[]> iterator = bodyParts.iterator();
+//  //
+//  //  String one = new String(iterator.next(), UTF_8);
+//  //  assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
+//  //
+//  //  String two = new String(iterator.next(), UTF_8);
+//  //  assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
+//  //}
+//  //
+//  //@Test public void multipartWithEncoding() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@Part(value = "ping", encoding = "8-bit") String ping,
+//  //        @Part(value = "kit", encoding = "7-bit") TypedInput kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
+//  //  assertThat(request.method()).isEqualTo("POST");
+//  //  assertThat(request.headers().size()).isZero();
+//  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  //
+//  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
+//  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
+//  //  assertThat(bodyParts).hasSize(2);
+//  //
+//  //  Iterator<byte[]> iterator = bodyParts.iterator();
+//  //
+//  //  String one = new String(iterator.next(), UTF_8);
+//  //  assertThat(one).contains("name=\"ping\"\r\n")
+//  //      .contains("Content-Transfer-Encoding: 8-bit")
+//  //      .endsWith("\r\npong");
+//  //
+//  //  String two = new String(iterator.next(), UTF_8);
+//  //  assertThat(two).contains("name=\"kit\"")
+//  //      .contains("Content-Transfer-Encoding: 7-bit")
+//  //      .endsWith("\r\nkat");
+//  //}
+//  //
+//  //@Test public void multipartPartMap() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@PartMap Map<String, Object> parts) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
+//  //  params.put("ping", "pong");
+//  //  params.put("kit", new TypedString("kat"));
+//  //
+//  //  Request request = buildRequest(Example.class, params);
+//  //  assertThat(request.method()).isEqualTo("POST");
+//  //  assertThat(request.headers().size()).isZero();
+//  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  //
+//  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
+//  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
+//  //  assertThat(bodyParts).hasSize(2);
+//  //
+//  //  Iterator<byte[]> iterator = bodyParts.iterator();
+//  //
+//  //  String one = new String(iterator.next(), UTF_8);
+//  //  assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
+//  //
+//  //  String two = new String(iterator.next(), UTF_8);
+//  //  assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
+//  //}
+//  //
+//  //@Test public void multipartPartMapWithEncoding() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@PartMap(encoding = "8-bit") Map<String, Object> parts) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
+//  //  params.put("ping", "pong");
+//  //  params.put("kit", new TypedString("kat"));
+//  //
+//  //  Request request = buildRequest(Example.class, params);
+//  //  assertThat(request.method()).isEqualTo("POST");
+//  //  assertThat(request.headers().size()).isZero();
+//  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  //
+//  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
+//  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
+//  //  assertThat(bodyParts).hasSize(2);
+//  //
+//  //  Iterator<byte[]> iterator = bodyParts.iterator();
+//  //
+//  //  String one = new String(iterator.next(), UTF_8);
+//  //  assertThat(one).contains("name=\"ping\"\r\n")
+//  //      .contains("Content-Transfer-Encoding: 8-bit")
+//  //      .endsWith("\r\npong");
+//  //
+//  //  String two = new String(iterator.next(), UTF_8);
+//  //  assertThat(two).contains("name=\"kit\"")
+//  //      .contains("Content-Transfer-Encoding: 8-bit")
+//  //      .endsWith("\r\nkat");
+//  //}
+//  //
+//  //@Test public void multipartPartMapRejectsNullKeys() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@PartMap Map<String, Object> parts) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> params = new LinkedHashMap<String, Object>();
+//  //  params.put("ping", "pong");
+//  //  params.put(null, "kat");
+//  //
+//  //  try {
+//  //    buildRequest(Example.class, params);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Parameter #1 part map contained null key.");
+//  //  }
+//  //}
+//  //
+//  //@Test public void multipartNullRemovesPart() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@Part("ping") String ping, @Part("fizz") String fizz) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  Request request = buildRequest(Example.class, "pong", null);
+//  //  assertThat(request.method()).isEqualTo("POST");
+//  //  assertThat(request.headers().size()).isZero();
+//  //  assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//  //
+//  //  MultipartTypedOutput body = (MultipartTypedOutput) request.body();
+//  //  List<byte[]> bodyParts = MimeHelper.getParts(body);
+//  //  assertThat(bodyParts).hasSize(1);
+//  //
+//  //  Iterator<byte[]> iterator = bodyParts.iterator();
+//  //
+//  //  String one = new String(iterator.next(), UTF_8);
+//  //  assertThat(one).contains("name=\"ping\"").endsWith("\r\npong");
+//  //}
+//  //
+//  //@Test public void multipartPartOptional() {
+//  //  class Example {
+//  //    @Multipart //
+//  //    @POST("/foo/bar/") //
+//  //    Response method(@Part("ping") RequestBody ping) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class, new Object[] { null });
+//  //    fail();
+//  //  } catch (IllegalStateException e) {
+//  //    assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");
+//  //  }
+//  //}
+//  //
+//  //@Test public void simpleFormEncoded() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field("foo") String foo, @Field("ping") String ping) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  Request request = buildRequest(Example.class, "bar", "pong");
+//  //  assertBody(request.body(), "foo=bar&ping=pong");
+//  //}
+//  //
+//  //@Test public void formEncodedWithEncodedNameFieldParam() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field(value = "na+me", encodeName = false) String foo) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  Request request = buildRequest(Example.class, "ba r");
+//  //  assertBody(request.body(), "na+me=ba+r");
+//  //}
+//  //
+//  //@Test public void formEncodedWithEncodedValueFieldParam() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field(value = "na me", encodeValue = false) String foo) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  Request request = buildRequest(Example.class, "ba+r");
+//  //  assertBody(request.body(), "na+me=ba+r");
+//  //}
+//  //
+//  //@Test public void formEncodedFieldOptional() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field("foo") String foo, @Field("ping") String ping,
+//  //        @Field("kit") String kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  Request request = buildRequest(Example.class, "bar", null, "kat");
+//  //  assertBody(request.body(), "foo=bar&kit=kat");
+//  //}
+//  //
+//  //@Test public void formEncodedFieldList() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field("foo") List<Object> fields, @Field("kit") String kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  List<Object> values = Arrays.<Object>asList("foo", "bar", null, 3);
+//  //  Request request = buildRequest(Example.class, values, "kat");
+//  //  assertBody(request.body(), "foo=foo&foo=bar&foo=3&kit=kat");
+//  //}
+//  //
+//  //@Test public void formEncodedFieldArray() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field("foo") Object[] fields, @Field("kit") String kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Object[] values = { 1, 2, null, "three" };
+//  //  Request request = buildRequest(Example.class, values, "kat");
+//  //  assertBody(request.body(), "foo=1&foo=2&foo=three&kit=kat");
+//  //}
+//  //
+//  //@Test public void formEncodedFieldPrimitiveArray() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@Field("foo") int[] fields, @Field("kit") String kit) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  int[] values = { 1, 2, 3 };
+//  //  Request request = buildRequest(Example.class, values, "kat");
+//  //  assertBody(request.body(), "foo=1&foo=2&foo=3&kit=kat");
+//  //}
+//  //
+//  //@Test public void formEncodedWithEncodedNameFieldParamMap() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@FieldMap(encodeNames = false) Map<String, Object> fieldMap) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+//  //  fieldMap.put("k+it", "k at");
+//  //  fieldMap.put("pin+g", "po ng");
+//  //
+//  //  Request request = buildRequest(Example.class, fieldMap);
+//  //  assertBody(request.body(), "k+it=k+at&pin+g=po+ng");
+//  //}
+//  //
+//  //@Test public void formEncodedWithEncodedValueFieldParamMap() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@FieldMap(encodeValues = false) Map<String, Object> fieldMap) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+//  //  fieldMap.put("k it", "k+at");
+//  //  fieldMap.put("pin g", "po+ng");
+//  //
+//  //  Request request = buildRequest(Example.class, fieldMap);
+//  //  assertBody(request.body(), "k+it=k+at&pin+g=po+ng");
+//  //}
+//  //
+//  //@Test public void formEncodedFieldMap() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/foo") //
+//  //    Response method(@FieldMap Map<String, Object> fieldMap) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+//  //  fieldMap.put("kit", "kat");
+//  //  fieldMap.put("foo", null);
+//  //  fieldMap.put("ping", "pong");
+//  //
+//  //  Request request = buildRequest(Example.class, fieldMap);
+//  //  assertBody(request.body(), "kit=kat&ping=pong");
+//  //}
+//  //
+//  //@Test public void fieldMapRejectsNullKeys() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/") //
+//  //    Response method(@FieldMap Map<String, Object> a) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //
+//  //  Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
+//  //  fieldMap.put("kit", "kat");
+//  //  fieldMap.put("foo", null);
+//  //  fieldMap.put(null, "pong");
+//  //
+//  //  try {
+//  //    buildRequest(Example.class, fieldMap);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Parameter #1 field map contained null key.");
+//  //  }
+//  //}
+//  //
+//  //@Test public void fieldMapMustBeAMap() {
+//  //  class Example {
+//  //    @FormUrlEncoded //
+//  //    @POST("/") //
+//  //    Response method(@FieldMap List<String> a) {
+//  //      return null;
+//  //    }
+//  //  }
+//  //  try {
+//  //    buildRequest(Example.class);
+//  //    fail();
+//  //  } catch (IllegalArgumentException e) {
+//  //    assertThat(e).hasMessage("Example.method: @FieldMap parameter type must be Map. (parameter #1)");
+//  //  }
+//  //}
+//
+//  @Test public void simpleHeaders() {
+//    class Example {
+//      @GET("/foo/bar/")
+//      @Headers({
+//          "ping: pong",
+//          "kit: kat"
+//      })
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.get("ping")).isEqualTo("pong");
+//    assertThat(headers.get("kit")).isEqualTo("kat");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void simpleInterceptorHeaders() {
+//    class Example {
+//      @GET("/foo/bar/")
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addHeader("ping", "pong");
+//        request.addHeader("kit", "kat");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.get("ping")).isEqualTo("pong");
+//    assertThat(headers.get("kit")).isEqualTo("kat");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void headersAndInterceptorHeaders() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      @Headers("ping: pong") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addHeader("kit", "kat");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.get("ping")).isEqualTo("pong");
+//    assertThat(headers.get("kit")).isEqualTo("kat");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void allThreeHeaderTypes() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      @Headers("ping: pong") //
+//      Response method(@Header("fizz") String fizz) {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addHeader("kit", "kat");
+//      }
+//    };
+//    Request request = buildRequest(Example.class, "buzz");
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(3);
+//    assertThat(headers.get("ping")).isEqualTo("pong");
+//    assertThat(headers.get("kit")).isEqualTo("kat");
+//    assertThat(headers.get("fizz")).isEqualTo("buzz");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void headerParamToString() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Header("kit") BigInteger kit) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, new BigInteger("1234"));
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(1);
+//    assertThat(headers.get("kit")).isEqualTo("1234");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void headerParam() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      @Headers("ping: pong") //
+//      Response method(@Header("kit") String kit) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, "kat");
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.get("ping")).isEqualTo("pong");
+//    assertThat(headers.get("kit")).isEqualTo("kat");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void headerParamList() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Header("foo") List<String> kit) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.values("foo")).containsExactly("bar", "baz");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void headerParamArray() {
+//    class Example {
+//      @GET("/foo/bar/") //
+//      Response method(@Header("foo") String[] kit) {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
+//    assertThat(request.method()).isEqualTo("GET");
+//    com.squareup.okhttp.Headers headers = request.headers();
+//    assertThat(headers.size()).isEqualTo(2);
+//    assertThat(headers.values("foo")).containsExactly("bar", "baz");
+//    assertThat(request.urlString()).isEqualTo("http://example.com/foo/bar/");
+//    assertThat(request.body()).isNull();
+//  }
+//
+//  @Test public void contentTypeAnnotationHeaderOverrides() {
+//    class Example {
+//      @POST("/") //
+//      @Headers("Content-Type: text/not-plain") //
+//      Response method(@Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "hi");
+//    Request request = buildRequest(Example.class, body);
+//    assertThat(request.body().contentType().toString()).isEqualTo("text/not-plain");
+//  }
+//
+//  @Test public void contentTypeAnnotationHeaderAddsHeaderWithNoBody() {
+//    class Example {
+//      @DELETE("/") //
+//      @Headers("Content-Type: text/not-plain") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.headers().get("Content-Type")).isEqualTo("text/not-plain");
+//  }
+//
+//  @Test public void contentTypeInterceptorHeaderAddsHeaderWithNoBody() {
+//    class Example {
+//      @DELETE("/") //
+//      Response method() {
+//        return null;
+//      }
+//    }
+//    interceptor = new RequestInterceptor() {
+//      @Override public void intercept(RequestFacade request) {
+//        request.addHeader("Content-Type", "text/not-plain");
+//      }
+//    };
+//    Request request = buildRequest(Example.class);
+//    assertThat(request.headers().get("Content-Type")).isEqualTo("text/not-plain");
+//  }
+//
+//  @Test public void contentTypeParameterHeaderOverrides() {
+//    class Example {
+//      @POST("/") //
+//      Response method(@Header("Content-Type") String contentType, @Body RequestBody body) {
+//        return null;
+//      }
+//    }
+//    RequestBody body = RequestBody.create(MediaType.parse("text/plain"), "Plain");
+//    Request request = buildRequest(Example.class, "text/not-plain", body);
+//    assertThat(request.body().contentType().toString()).isEqualTo("text/not-plain");
+//  }
+//
+//  private static void assertBody(RequestBody body, String expected) {
+//    assertThat(body).isNotNull();
+//    Buffer buffer = new Buffer();
+//    try {
+//      body.writeTo(buffer);
+//      assertThat(buffer.readUtf8()).isEqualTo(expected);
+//    } catch (IOException e) {
+//      throw new RuntimeException(e);
+//    }
+//  }
+//
+//  private static final Converter GSON = new GsonConverter(new Gson());
+//
+//  private Request buildRequest(Class<?> cls, Object... args) {
+//    Method method = TestingUtils.onlyMethod(cls);
+//    MethodInfo methodInfo = new MethodInfo(method);
+//
+//    RequestBuilder builder = new RequestBuilder("http://example.com/", methodInfo, GSON);
+//    if (interceptor != null) {
+//      interceptor.intercept(builder);
+//    }
+//    builder.setArguments(args);
+//
+//    return builder.build();
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
index d435fd514..3c20a1a4b 100644
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -1,232 +1,232 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.google.gson.JsonParseException;
-import com.squareup.okhttp.OkHttpClient;
-import com.squareup.okhttp.Response;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;
-import java.util.concurrent.CountDownLatch;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.atomic.AtomicReference;
-import org.junit.Before;
-import org.junit.Rule;
-import org.junit.Test;
-import retrofit.http.Body;
-import retrofit.http.GET;
-import retrofit.http.Headers;
-import retrofit.http.POST;
-import retrofit.http.Streaming;
-import rx.Observable;
-import rx.functions.Action1;
-
-import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-import static retrofit.Utils.SynchronousExecutor;
-
-public class RestAdapterTest {
-  private interface Example {
-    @Headers("Foo: Bar")
-    @GET("/") String something();
-    @Headers("Foo: Bar")
-    @GET("/") void something(Callback<String> callback);
-    @GET("/") Response direct();
-    @GET("/") void direct(Callback<Response> callback);
-    @GET("/") @Streaming Response streaming();
-    @POST("/") Observable<String> observable(@Body String body);
-  }
-  private interface InvalidExample extends Example {
-  }
-
-  @Rule public final MockWebServerRule server = new MockWebServerRule();
-
-  private Example example;
-
-  @Before public void setUp() {
-    OkHttpClient client = new OkHttpClient();
-
-    example = new RestAdapter.Builder() //
-        .setClient(client)
-        .setCallbackExecutor(new SynchronousExecutor())
-        .setEndpoint(server.getUrl("/").toString())
-        .build()
-        .create(Example.class);
-  }
-
-  @Test public void objectMethodsStillWork() {
-    assertThat(example.hashCode()).isNotZero();
-    assertThat(example.equals(this)).isFalse();
-    assertThat(example.toString()).isNotEmpty();
-  }
-
-  @Test public void interfaceWithExtendIsNotSupported() {
-    try {
-      new RestAdapter.Builder().setEndpoint("http://foo/").build().create(InvalidExample.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Interface definitions must not extend other interfaces.");
-    }
-  }
-
-  @Test public void successfulRequestResponseWhenMimeTypeMissing() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hi").removeHeader("Content-Type"));
-    String string = example.something();
-    assertThat(string).isEqualTo("Hi");
-  }
-
-  @Test public void malformedResponseThrowsConversionException() throws Exception {
-    server.enqueue(new MockResponse().setBody("{"));
-    try {
-      example.something();
-      fail();
-    } catch (RetrofitError e) {
-      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.UNEXPECTED);
-      assertThat(e.getResponse().code()).isEqualTo(200);
-      assertThat(e.getCause()).isInstanceOf(JsonParseException.class);
-      assertThat(e.getResponse().body()).isNull();
-    }
-  }
-
-  @Test public void errorResponseThrowsHttpError() throws Exception {
-    server.enqueue(new MockResponse().setStatus("HTTP/1.1 500 Broken"));
-
-    try {
-      example.something();
-      fail();
-    } catch (RetrofitError e) {
-      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.HTTP);
-      assertThat(e.getResponse().code()).isEqualTo(500);
-      assertThat(e.getSuccessType()).isEqualTo(String.class);
-    }
-  }
-
-  @Test public void clientExceptionThrowsNetworkError() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hi").setSocketPolicy(DISCONNECT_AT_START));
-
-    try {
-      example.something();
-      fail();
-    } catch (RetrofitError e) {
-      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);
-    }
-  }
-
-  @Test public void getResponseDirectly() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hey"));
-    Response response = example.direct();
-    assertThat(response.body().string()).isEqualTo("Hey");
-  }
-
-  @Test public void streamingResponse() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hey").setBodyDelayTimeMs(500));
-    Response response = example.streaming();
-    long startNs = System.nanoTime();
-    response.body().string();
-    long tookNs = System.nanoTime() - startNs;
-    assertThat(tookNs).isGreaterThanOrEqualTo(500);
-  }
-
-  @Test public void getResponseDirectlyAsync() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hey"));
-
-    final AtomicReference<Response> responseRef = new AtomicReference<Response>();
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.direct(new Callback<Response>() {
-      @Override public void success(Response response, Response response2) {
-        responseRef.set(response);
-        latch.countDown();
-      }
-
-      @Override public void failure(RetrofitError error) {
-        throw new AssertionError();
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-
-    assertThat(responseRef.get().body().string()).isEqualTo("Hey");
-  }
-
-  @Test public void getAsync() throws Exception {
-    server.enqueue(new MockResponse().setBody("Hey"));
-
-    final AtomicReference<String> bodyRef = new AtomicReference<String>();
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.something(new Callback<String>() {
-      @Override public void success(String body, Response response) {
-        bodyRef.set(body);
-        latch.countDown();
-      }
-
-      @Override public void failure(RetrofitError error) {
-        throw new AssertionError();
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-
-    assertThat(bodyRef.get()).isEqualTo("Hey");
-  }
-
-  @Test public void errorAsync() throws Exception {
-    server.enqueue(new MockResponse().setStatus("HTTP/1.1 500 Broken!").setBody("Hey"));
-
-    final AtomicReference<RetrofitError> errorRef = new AtomicReference<RetrofitError>();
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.something(new Callback<String>() {
-      @Override public void success(String s, Response response) {
-        throw new AssertionError();
-      }
-
-      @Override public void failure(RetrofitError error) {
-        errorRef.set(error);
-        latch.countDown();
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-
-    RetrofitError error = errorRef.get();
-    assertThat(error.getResponse().code()).isEqualTo(500);
-    assertThat(error.getResponse().message()).isEqualTo("Broken!");
-    assertThat(error.getSuccessType()).isEqualTo(String.class);
-    assertThat(error.getBody()).isEqualTo("Hey");
-  }
-
-  @Test public void observableCallsOnNext() throws Exception {
-    server.enqueue(new MockResponse().setBody("hello"));
-
-    final AtomicReference<String> bodyRef = new AtomicReference<String>();
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.observable("Howdy").subscribe(new Action1<String>() {
-      @Override public void call(String body) {
-        bodyRef.set(body);
-        latch.countDown();
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-
-    assertThat(bodyRef.get()).isEqualTo("hello");
-  }
-
-  @Test public void observableCallsOnError() throws Exception {
-    server.enqueue(new MockResponse().setResponseCode(500));
-
-    final AtomicReference<Throwable> errorRef = new AtomicReference<Throwable>();
-    final CountDownLatch latch = new CountDownLatch(1);
-    example.observable("Howdy").subscribe(new Action1<String>() {
-      @Override public void call(String s) {
-        throw new AssertionError();
-      }
-    }, new Action1<Throwable>() {
-      @Override public void call(Throwable throwable) {
-        errorRef.set(throwable);
-        latch.countDown();
-      }
-    });
-    assertTrue(latch.await(1, TimeUnit.SECONDS));
-
-    RetrofitError error = (RetrofitError) errorRef.get();
-    assertThat(error.getResponse().code()).isEqualTo(500);
-    assertThat(error.getSuccessType()).isEqualTo(String.class);
-  }
-}
+//// Copyright 2013 Square, Inc.
+//package retrofit;
+//
+//import com.google.gson.JsonParseException;
+//import com.squareup.okhttp.OkHttpClient;
+//import com.squareup.okhttp.Response;
+//import com.squareup.okhttp.mockwebserver.MockResponse;
+//import com.squareup.okhttp.mockwebserver.rule.MockWebServerRule;
+//import java.util.concurrent.CountDownLatch;
+//import java.util.concurrent.TimeUnit;
+//import java.util.concurrent.atomic.AtomicReference;
+//import org.junit.Before;
+//import org.junit.Rule;
+//import org.junit.Test;
+//import retrofit.http.Body;
+//import retrofit.http.GET;
+//import retrofit.http.Headers;
+//import retrofit.http.POST;
+//import retrofit.http.Streaming;
+//import rx.Observable;
+//import rx.functions.Action1;
+//
+//import static com.squareup.okhttp.mockwebserver.SocketPolicy.DISCONNECT_AT_START;
+//import static org.assertj.core.api.Assertions.assertThat;
+//import static org.junit.Assert.assertTrue;
+//import static org.junit.Assert.fail;
+//import static retrofit.Utils.SynchronousExecutor;
+//
+//public class RestAdapterTest {
+//  private interface Example {
+//    @Headers("Foo: Bar")
+//    @GET("/") String something();
+//    @Headers("Foo: Bar")
+//    @GET("/") void something(Callback<String> callback);
+//    @GET("/") Response direct();
+//    @GET("/") void direct(Callback<Response> callback);
+//    @GET("/") @Streaming Response streaming();
+//    @POST("/") Observable<String> observable(@Body String body);
+//  }
+//  private interface InvalidExample extends Example {
+//  }
+//
+//  @Rule public final MockWebServerRule server = new MockWebServerRule();
+//
+//  private Example example;
+//
+//  @Before public void setUp() {
+//    OkHttpClient client = new OkHttpClient();
+//
+//    example = new RestAdapter.Builder() //
+//        .setClient(client)
+//        .setCallbackExecutor(new SynchronousExecutor())
+//        .setEndpoint(server.getUrl("/").toString())
+//        .build()
+//        .create(Example.class);
+//  }
+//
+//  @Test public void objectMethodsStillWork() {
+//    assertThat(example.hashCode()).isNotZero();
+//    assertThat(example.equals(this)).isFalse();
+//    assertThat(example.toString()).isNotEmpty();
+//  }
+//
+//  @Test public void interfaceWithExtendIsNotSupported() {
+//    try {
+//      new RestAdapter.Builder().setEndpoint("http://foo/").build().create(InvalidExample.class);
+//      fail();
+//    } catch (IllegalArgumentException e) {
+//      assertThat(e).hasMessage("Interface definitions must not extend other interfaces.");
+//    }
+//  }
+//
+//  @Test public void successfulRequestResponseWhenMimeTypeMissing() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hi").removeHeader("Content-Type"));
+//    String string = example.something();
+//    assertThat(string).isEqualTo("Hi");
+//  }
+//
+//  @Test public void malformedResponseThrowsConversionException() throws Exception {
+//    server.enqueue(new MockResponse().setBody("{"));
+//    try {
+//      example.something();
+//      fail();
+//    } catch (RetrofitError e) {
+//      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.UNEXPECTED);
+//      assertThat(e.getResponse().code()).isEqualTo(200);
+//      assertThat(e.getCause()).isInstanceOf(JsonParseException.class);
+//      assertThat(e.getResponse().body()).isNull();
+//    }
+//  }
+//
+//  @Test public void errorResponseThrowsHttpError() throws Exception {
+//    server.enqueue(new MockResponse().setStatus("HTTP/1.1 500 Broken"));
+//
+//    try {
+//      example.something();
+//      fail();
+//    } catch (RetrofitError e) {
+//      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.HTTP);
+//      assertThat(e.getResponse().code()).isEqualTo(500);
+//      assertThat(e.getSuccessType()).isEqualTo(String.class);
+//    }
+//  }
+//
+//  @Test public void clientExceptionThrowsNetworkError() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hi").setSocketPolicy(DISCONNECT_AT_START));
+//
+//    try {
+//      example.something();
+//      fail();
+//    } catch (RetrofitError e) {
+//      assertThat(e.getKind()).isEqualTo(RetrofitError.Kind.NETWORK);
+//    }
+//  }
+//
+//  @Test public void getResponseDirectly() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hey"));
+//    Response response = example.direct();
+//    assertThat(response.body().string()).isEqualTo("Hey");
+//  }
+//
+//  @Test public void streamingResponse() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hey").setBodyDelayTimeMs(500));
+//    Response response = example.streaming();
+//    long startNs = System.nanoTime();
+//    response.body().string();
+//    long tookNs = System.nanoTime() - startNs;
+//    assertThat(tookNs).isGreaterThanOrEqualTo(500);
+//  }
+//
+//  @Test public void getResponseDirectlyAsync() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hey"));
+//
+//    final AtomicReference<Response> responseRef = new AtomicReference<Response>();
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.direct(new Callback<Response>() {
+//      @Override public void success(Response response, Response response2) {
+//        responseRef.set(response);
+//        latch.countDown();
+//      }
+//
+//      @Override public void failure(RetrofitError error) {
+//        throw new AssertionError();
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//
+//    assertThat(responseRef.get().body().string()).isEqualTo("Hey");
+//  }
+//
+//  @Test public void getAsync() throws Exception {
+//    server.enqueue(new MockResponse().setBody("Hey"));
+//
+//    final AtomicReference<String> bodyRef = new AtomicReference<String>();
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.something(new Callback<String>() {
+//      @Override public void success(String body, Response response) {
+//        bodyRef.set(body);
+//        latch.countDown();
+//      }
+//
+//      @Override public void failure(RetrofitError error) {
+//        throw new AssertionError();
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//
+//    assertThat(bodyRef.get()).isEqualTo("Hey");
+//  }
+//
+//  @Test public void errorAsync() throws Exception {
+//    server.enqueue(new MockResponse().setStatus("HTTP/1.1 500 Broken!").setBody("Hey"));
+//
+//    final AtomicReference<RetrofitError> errorRef = new AtomicReference<RetrofitError>();
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.something(new Callback<String>() {
+//      @Override public void success(String s, Response response) {
+//        throw new AssertionError();
+//      }
+//
+//      @Override public void failure(RetrofitError error) {
+//        errorRef.set(error);
+//        latch.countDown();
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//
+//    RetrofitError error = errorRef.get();
+//    assertThat(error.getResponse().code()).isEqualTo(500);
+//    assertThat(error.getResponse().message()).isEqualTo("Broken!");
+//    assertThat(error.getSuccessType()).isEqualTo(String.class);
+//    assertThat(error.getBody()).isEqualTo("Hey");
+//  }
+//
+//  @Test public void observableCallsOnNext() throws Exception {
+//    server.enqueue(new MockResponse().setBody("hello"));
+//
+//    final AtomicReference<String> bodyRef = new AtomicReference<String>();
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.observable("Howdy").subscribe(new Action1<String>() {
+//      @Override public void call(String body) {
+//        bodyRef.set(body);
+//        latch.countDown();
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//
+//    assertThat(bodyRef.get()).isEqualTo("hello");
+//  }
+//
+//  @Test public void observableCallsOnError() throws Exception {
+//    server.enqueue(new MockResponse().setResponseCode(500));
+//
+//    final AtomicReference<Throwable> errorRef = new AtomicReference<Throwable>();
+//    final CountDownLatch latch = new CountDownLatch(1);
+//    example.observable("Howdy").subscribe(new Action1<String>() {
+//      @Override public void call(String s) {
+//        throw new AssertionError();
+//      }
+//    }, new Action1<Throwable>() {
+//      @Override public void call(Throwable throwable) {
+//        errorRef.set(throwable);
+//        latch.countDown();
+//      }
+//    });
+//    assertTrue(latch.await(1, TimeUnit.SECONDS));
+//
+//    RetrofitError error = (RetrofitError) errorRef.get();
+//    assertThat(error.getResponse().code()).isEqualTo(500);
+//    assertThat(error.getSuccessType()).isEqualTo(String.class);
+//  }
+//}
diff --git a/retrofit/src/test/java/retrofit/converter/GsonConverterTest.java b/retrofit/src/test/java/retrofit/converter/GsonConverterTest.java
index 98c10c93b..03fad913c 100644
--- a/retrofit/src/test/java/retrofit/converter/GsonConverterTest.java
+++ b/retrofit/src/test/java/retrofit/converter/GsonConverterTest.java
@@ -1,78 +1,78 @@
-// Copyright 2015 Square, Inc.
-package retrofit.converter;
-
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.squareup.okhttp.MediaType;
-import com.squareup.okhttp.RequestBody;
-import com.squareup.okhttp.ResponseBody;
-import java.io.IOException;
-import java.lang.reflect.Type;
-import okio.Buffer;
-import org.assertj.core.api.AbstractCharSequenceAssert;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
-
-public final class GsonConverterTest {
-  private Converter converter;
-
-  interface Example {
-    String getName();
-  }
-
-  class Impl implements Example {
-    private final String theName;
-
-    Impl(String name) {
-      theName = name;
-    }
-
-    @Override public String getName() {
-      return theName;
-    }
-  }
-
-  @Before public void setUp() {
-    Gson gson = new GsonBuilder()
-        .registerTypeAdapter(Example.class, new JsonSerializer<Example>() {
-          @Override public JsonElement serialize(Example example, Type type,
-              JsonSerializationContext json) {
-            JsonObject object = new JsonObject();
-            object.addProperty("name", example.getName());
-            return object;
-          }
-        })
-        .create();
-    converter = new GsonConverter(gson);
-  }
-
-  @Test public void serialization() throws IOException {
-    RequestBody body = converter.toBody(new Impl("value"), Impl.class);
-    assertBody(body).isEqualTo("{\"theName\":\"value\"}");
-  }
-
-  @Test public void serializationTypeUsed() throws IOException {
-    RequestBody body = converter.toBody(new Impl("value"), Example.class);
-    assertBody(body).isEqualTo("{\"name\":\"value\"}");
-  }
-
-  @Test public void deserialization() throws IOException {
-    ResponseBody body =
-        ResponseBody.create(MediaType.parse("text/plain"), "{\"theName\":\"value\"}");
-    Impl impl = (Impl) converter.fromBody(body, Impl.class);
-    assertEquals("value", impl.getName());
-  }
-
-  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {
-    Buffer buffer = new Buffer();
-    body.writeTo(buffer);
-    return assertThat(buffer.readUtf8());
-  }
-}
+//// Copyright 2015 Square, Inc.
+//package retrofit.converter;
+//
+//import com.google.gson.Gson;
+//import com.google.gson.GsonBuilder;
+//import com.google.gson.JsonElement;
+//import com.google.gson.JsonObject;
+//import com.google.gson.JsonSerializationContext;
+//import com.google.gson.JsonSerializer;
+//import com.squareup.okhttp.MediaType;
+//import com.squareup.okhttp.RequestBody;
+//import com.squareup.okhttp.ResponseBody;
+//import java.io.IOException;
+//import java.lang.reflect.Type;
+//import okio.Buffer;
+//import org.assertj.core.api.AbstractCharSequenceAssert;
+//import org.junit.Before;
+//import org.junit.Test;
+//
+//import static org.assertj.core.api.Assertions.assertThat;
+//import static org.junit.Assert.assertEquals;
+//
+//public final class GsonConverterTest {
+//  private Converter converter;
+//
+//  interface Example {
+//    String getName();
+//  }
+//
+//  class Impl implements Example {
+//    private final String theName;
+//
+//    Impl(String name) {
+//      theName = name;
+//    }
+//
+//    @Override public String getName() {
+//      return theName;
+//    }
+//  }
+//
+//  @Before public void setUp() {
+//    Gson gson = new GsonBuilder()
+//        .registerTypeAdapter(Example.class, new JsonSerializer<Example>() {
+//          @Override public JsonElement serialize(Example example, Type type,
+//              JsonSerializationContext json) {
+//            JsonObject object = new JsonObject();
+//            object.addProperty("name", example.getName());
+//            return object;
+//          }
+//        })
+//        .create();
+//    converter = new GsonConverter(gson);
+//  }
+//
+//  @Test public void serialization() throws IOException {
+//    RequestBody body = converter.toBody(new Impl("value"), Impl.class);
+//    assertBody(body).isEqualTo("{\"theName\":\"value\"}");
+//  }
+//
+//  @Test public void serializationTypeUsed() throws IOException {
+//    RequestBody body = converter.toBody(new Impl("value"), Example.class);
+//    assertBody(body).isEqualTo("{\"name\":\"value\"}");
+//  }
+//
+//  @Test public void deserialization() throws IOException {
+//    ResponseBody body =
+//        ResponseBody.create(MediaType.parse("text/plain"), "{\"theName\":\"value\"}");
+//    Impl impl = (Impl) converter.fromBody(body, Impl.class);
+//    assertEquals("value", impl.getName());
+//  }
+//
+//  private static AbstractCharSequenceAssert<?, String> assertBody(RequestBody body) throws IOException {
+//    Buffer buffer = new Buffer();
+//    body.writeTo(buffer);
+//    return assertThat(buffer.readUtf8());
+//  }
+//}
