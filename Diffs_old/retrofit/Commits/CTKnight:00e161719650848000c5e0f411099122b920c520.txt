diff --git a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
index 7ca0bbfeb..858c04aec 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
@@ -84,7 +84,7 @@ class RetrofitCheckProcessor : AbstractProcessor() {
       }
       is WildcardTypeName -> {
         processingEnvironment.error(element,
-            "${ErrorMessage.METHOD_RETURN_UNRESOLVED}: $returnTypeName")
+            ErrorMessage.METHOD_RETURN_UNRESOLVED)
       }
       is ArrayTypeName -> {
         validReturnType(returnTypeName.componentType, element)
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
index 45257f396..c7ab6571f 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
@@ -28,4 +28,101 @@ class ReturnTypeTest {
     assertEquals(1, compilation.errors().size)
     assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
   }
+
+  @Test
+  fun typeVariableUpperBoundTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.returntype.TypeVariableUpperBound",
+        """
+        package retrofit2.processors.returntype;
+
+        import okhttp3.ResponseBody;
+        import retrofit2.Call;
+        import retrofit2.http.GET;
+        import retrofit2.processors.RetrofitService;
+
+        @RetrofitService
+        public interface TypeVariableUpperBound {
+          @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();
+        }
+        """
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+  }
+
+  @Test
+  fun wildcardTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.returntype.Wildcard",
+        """
+        package retrofit2.processors.returntype;
+
+        import retrofit2.Call;
+        import retrofit2.http.GET;
+        import retrofit2.processors.RetrofitService;
+
+        @RetrofitService
+        public interface Wildcard {
+          @GET("/") Call<?> wildcard();
+        }
+        """
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED, compilation.errors().firstOrNull()?.getMessage())
+  }
+
+  @Test
+  fun wildcardUpperBoundTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.returntype.WildcardUpperBound",
+        """
+        package retrofit2.processors.returntype;
+
+        import okhttp3.ResponseBody;
+        import retrofit2.Call;
+        import retrofit2.http.GET;
+        import retrofit2.processors.RetrofitService;
+
+        @RetrofitService
+        public interface WildcardUpperBound {
+          @GET("/") Call<? extends ResponseBody> wildcardUpperBound();
+        }
+        """
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED, compilation.errors().firstOrNull()?.getMessage())
+  }
+
+  @Test
+  fun nestedTypeVariableTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.returntype.NestedTypeVariable",
+        """
+        package retrofit2.processors.returntype;
+
+        import java.util.List;
+        import java.util.Map;
+        import java.util.Set;
+        import retrofit2.Call;
+        import retrofit2.http.GET;
+        import retrofit2.processors.RetrofitService;
+
+        @RetrofitService
+        public interface NestedTypeVariable {
+          @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();
+        }
+        """
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+  }
 }
\ No newline at end of file
