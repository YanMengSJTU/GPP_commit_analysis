diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index d04bb1915..de1994f67 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -177,6 +177,25 @@ private void addQueryParam(String name, String value, boolean urlEncodeValue) {
     }
   }
 
+  private void addSingleOrMultipleQueryParams(String name, Object value, boolean urlEncodeValue) {
+      if (value instanceof Iterable) {
+          for (Object iterableValue : (Iterable<?>) value) {
+              if (iterableValue != null) { // Skip null values
+                  addQueryParam(name, iterableValue.toString(), urlEncodeValue);
+              }
+          }
+      } else if (value.getClass().isArray()) {
+          for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
+              Object arrayValue = Array.get(value, x);
+              if (arrayValue != null) { // Skip null values
+                  addQueryParam(name, arrayValue.toString(), urlEncodeValue);
+              }
+          }
+      } else {
+          addQueryParam(name, value.toString(), urlEncodeValue);
+      }
+  }
+
   void setArguments(Object[] args) {
     if (args == null) {
       return;
@@ -208,22 +227,7 @@ void setArguments(Object[] args) {
         case ENCODED_QUERY:
           if (value != null) { // Skip null values.
             boolean urlEncodeValue = paramUsage == QUERY;
-            if (value instanceof Iterable) {
-              for (Object iterableValue : (Iterable<?>) value) {
-                if (iterableValue != null) { // Skip null values
-                  addQueryParam(name, iterableValue.toString(), urlEncodeValue);
-                }
-              }
-            } else if (value.getClass().isArray()) {
-              for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
-                Object arrayValue = Array.get(value, x);
-                if (arrayValue != null) { // Skip null values
-                  addQueryParam(name, arrayValue.toString(), urlEncodeValue);
-                }
-              }
-            } else {
-              addQueryParam(name, value.toString(), urlEncodeValue);
-            }
+            addSingleOrMultipleQueryParams(name, value, urlEncodeValue);
           }
           break;
         case QUERY_MAP:
@@ -233,7 +237,7 @@ void setArguments(Object[] args) {
             for (Map.Entry<?, ?> entry : ((Map<?, ?>) value).entrySet()) {
               Object entryValue = entry.getValue();
               if (entryValue != null) { // Skip null values.
-                addQueryParam(entry.getKey().toString(), entryValue.toString(), urlEncodeValue);
+                addSingleOrMultipleQueryParams(entry.getKey().toString(), entryValue, urlEncodeValue);
               }
             }
           }
diff --git a/retrofit/src/main/java/retrofit/http/QueryMap.java b/retrofit/src/main/java/retrofit/http/QueryMap.java
index 46a9c5e09..da6b6059c 100644
--- a/retrofit/src/main/java/retrofit/http/QueryMap.java
+++ b/retrofit/src/main/java/retrofit/http/QueryMap.java
@@ -27,6 +27,8 @@
  * <p>
  * Both keys and values are converted to strings using {@link String#valueOf(Object)}. Values are
  * URL encoded and {@code null} will not include the query parameter in the URL.
+ * Passing an {@link java.lang.Iterable Iterable} or array as a value will result in a query parameter for
+ * each non-{@code null} item.
  * <p>
  * Simple Example:
  * <pre>
@@ -35,6 +37,14 @@
  * </pre>
  * Calling with {@code foo.list(ImmutableMap.of("foo", "bar", "kit", "kat"))} yields
  * {@code /search?foo=bar&kit=kat}.
+ * <p>
+ * Iterable example:
+ * <pre>
+ * &#64;GET("/search")
+ * void list(@QueryMap Map&lt;String, Object&gt; filters);
+ * </pre>
+ * Calling with {@code foo.list(ImmutableMap.of("category", ImmutableSet.of("one", "two")))} yields
+ * {@code /search?category=one&category=two}.
  *
  * @see Query
  * @see QueryMap
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 5fe78daab..577654158 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -368,6 +368,24 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void getWithQueryParamsMap() throws Exception {
+    Map<String, Object> params = new LinkedHashMap<String, Object>();
+    params.put("k1", Arrays.asList(1, 2, null, "3"));
+    params.put("k2", new Object[] {1, 2, null, "3"});
+    params.put("k3", new int[] {1, 2});
+
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/") //
+        .addQueryMapParams("options", params) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/?k1=1&k1=2&k1=3&k2=1&k2=2&k2=3&k3=1&k3=2");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void getWithEncodedQueryParamMap() throws Exception {
     Map<String, Object> params = new LinkedHashMap<String, Object>();
     params.put("kit", "k%20t");
