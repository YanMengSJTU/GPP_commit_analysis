diff --git a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
index f8ed20a4f..8a3f0df2d 100644
--- a/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
+++ b/retrofit-adapters/rxjava2/src/main/java/retrofit2/adapter/rxjava2/ResponseObservable.java
@@ -25,7 +25,6 @@
 
     private static class ResponseObserver<R> implements Observer<Response<R>> {
         private final Observer<? super Response<R>> observer;
-        private boolean terminated;
 
         ResponseObserver(Observer<? super Response<R>> observer) {
             this.observer = observer;
@@ -36,37 +35,21 @@
         }
 
         @Override public void onNext(Response<R> response) {
-            if (response.isSuccessful()) {
-                observer.onNext(response);
-            } else {
-                terminated = true;
-                Throwable t = new HttpException(response);
-                try {
-                    observer.onError(t);
-                } catch (Throwable inner) {
-                    Exceptions.throwIfFatal(inner);
-                    RxJavaPlugins.onError(new CompositeException(t, inner));
-                }
-            }
+            observer.onNext(response);
         }
 
         @Override public void onComplete() {
-            if (!terminated) {
-                observer.onComplete();
-            }
+            observer.onComplete();
         }
 
         @Override public void onError(Throwable throwable) {
-            if (!terminated) {
+            try {
                 observer.onError(throwable);
-            } else {
-                // This should never happen! onNext handles and forwards errors automatically.
-                Throwable broken = new AssertionError(
-                        "This should never happen! Report as a bug with the full stacktrace.");
-                //noinspection UnnecessaryInitCause Two-arg AssertionError constructor is 1.7+ only.
-                broken.initCause(throwable);
-                RxJavaPlugins.onError(broken);
+            } catch (Throwable inner) {
+                Exceptions.throwIfFatal(inner);
+                RxJavaPlugins.onError(new CompositeException(throwable, inner));
             }
+            return;
         }
     }
 }
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
index 4196f1eb9..ce7996059 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
@@ -18,6 +18,9 @@
 import io.reactivex.Observable;
 import java.io.IOException;
 
+import io.reactivex.Observer;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.functions.Consumer;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Before;
@@ -38,6 +41,7 @@
     @GET("/") Observable<String> body();
     @GET("/") Observable<Response<String>> response();
     @GET("/") Observable<Result<String>> result();
+    @GET("/") ResponseObservable<String> responseObservable();
   }
 
   private Service service;
@@ -134,4 +138,31 @@
     assertThat(result.error()).isInstanceOf(IOException.class);
     observer.assertComplete();
   }
+
+  @Test public void responseObservableSuccess200() {
+    server.enqueue(new MockResponse());
+
+    RecordingObserver<Response<String>> observer = observerRule.create();
+    service.responseObservable().subscribe(observer);
+    assertThat(observer.takeValue().isSuccessful()).isTrue();
+    observer.assertComplete();
+  }
+
+  @Test public void responseObservableSuccess404() {
+    server.enqueue(new MockResponse().setResponseCode(404));
+
+    RecordingObserver<Response<String>> observer = observerRule.create();
+    service.responseObservable().subscribe(observer);
+    assertThat(observer.takeValue().isSuccessful()).isFalse();
+    observer.assertComplete();
+  }
+
+  @Test public void responseObservableFailure() {
+    server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
+
+    RecordingObserver<Response<String>> observer = observerRule.create();
+    service.responseObservable().subscribe(observer);
+    observer.assertError(IOException.class);
+  }
+
 }
