diff --git a/retrofit-android/build.gradle b/retrofit-android/build.gradle
index 81aa80762..f9aaae27f 100644
--- a/retrofit-android/build.gradle
+++ b/retrofit-android/build.gradle
@@ -18,7 +18,7 @@ apply plugin: 'com.android.library'
 
 android {
     compileSdkVersion 22
-    buildToolsVersion "22.0.1"
+    buildToolsVersion "23.0.2"
 
     lintOptions {
         abortOnError false
diff --git a/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java b/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java
index 24dfa89df..f6ebfb35f 100644
--- a/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java
+++ b/retrofit-android/src/main/java/retrofit/android/AuthenticationInterceptor.java
@@ -13,22 +13,16 @@
  */
 package retrofit.android;
 
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.ArrayList;
-import android.content.Context;
-import android.text.TextUtils;
-import android.accounts.AccountManager;
 import android.accounts.Account;
+import android.accounts.AccountManager;
 import android.accounts.AccountManagerFuture;
 import android.app.Activity;
+import android.content.Context;
 import android.os.Bundle;
-import rx.Observable;
-import rx.functions.*;
-import javax.inject.Singleton;
 import android.util.Log;
 
+import javax.inject.Singleton;
+
 @Singleton
 public abstract class AuthenticationInterceptor extends retrofit.http.Retrofit.SimpleRequestInterceptor {
     String token;
diff --git a/retrofit2-github/build.gradle b/retrofit2-github/build.gradle
index d6b95aa5c..ef4eebb49 100644
--- a/retrofit2-github/build.gradle
+++ b/retrofit2-github/build.gradle
@@ -18,7 +18,7 @@ apply plugin: 'com.neenbedankt.android-apt'
 
 android {
     compileSdkVersion 22
-    buildToolsVersion "22.0.1"
+    buildToolsVersion "23.0.2"
 
     lintOptions {
         abortOnError false
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
index d0d45e9be..60e4551a2 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
@@ -13,16 +13,30 @@
  */
 package com.github.retrofit2;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
 import retrofit.ErrorHandler;
 import retrofit.RetrofitError;
 import retrofit.client.Response;
 
 public class MockErrorHandler implements ErrorHandler {
+    public static int errorCode;
+    public static String responseBody;
+
     @Override public Throwable handleError(RetrofitError cause) {
         System.out.println("MockErrorHandler: " + cause);
         Response r = cause.getResponse();
         System.out.println("MockErrorHandler: Response: " + r);
         if (r != null) {
+            errorCode = r.getStatus();
+            try {
+                responseBody = readString(r.getBody().in(), "UTF-8");
+            } catch(IOException e) {
+                return e;
+            }
+
             System.out.println("MockErrorHandler: status: " + r.getStatus());
             if (r.getStatus() == 401) {
                 return new RuntimeException("401", cause);
@@ -30,5 +44,22 @@
         }
         return cause;
     }
+
+
+    public static String readString(InputStream inputStream, String encoding)
+            throws IOException {
+        return new String(readByteArray(inputStream), encoding);
+    }
+
+    private static byte[] readByteArray(InputStream inputStream)
+            throws IOException {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        byte[] buffer = new byte[1024];
+        int length = 0;
+        while ((length = inputStream.read(buffer)) != -1) {
+            baos.write(buffer, 0, length);
+        }
+        return baos.toByteArray();
+    }
 }
 
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java
index 7f160257e..f4f7e1e5c 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java
@@ -13,22 +13,15 @@
  */
 package com.github.retrofit2;
 
-import retrofit.http.Retrofit.*;
-import retrofit.http.Retrofit;
-
-import rx.Observable;
-import java.io.File;
-
-import retrofit.converter.*;
-import java.util.List;
-import rx.functions.*;
-import retrofit.mime.TypedFile;
-import retrofit.mime.TypedString;
-import com.github.mobile.model.*;
-import retrofit.client.Response;
-import retrofit.Callback;
 import android.app.Activity;
 
+import retrofit.converter.GsonConverter;
+import retrofit.http.Retrofit;
+import retrofit.http.Retrofit.ErrorHandler;
+import retrofit.http.Retrofit.GET;
+import retrofit.http.Retrofit.LogLevel;
+import retrofit.http.Retrofit.Path;
+
 @Retrofit("https://api.github.com")
 @retrofit.http.Retrofit.Headers({ // optional
     "Accept: application/vnd.github.v3.full+json",
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index 7d0f545a8..0698efaf3 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -14,40 +14,36 @@
 
 package com.github.retrofit2;
 
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import org.json.JSONObject;
-import org.json.JSONException;
+import com.squareup.okhttp.mockwebserver.MockResponse;
+import com.squareup.okhttp.mockwebserver.MockWebServer;
 
-import static org.mockito.Mockito.verify;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertTrue;
-import com.github.*;
+import org.junit.Test;
 
-import rx.Observable;
-import rx.functions.*;
-import java.util.Arrays;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.SocketTimeoutException;
 import java.util.List;
-import retrofit.client.Response;
-import retrofit.RetrofitError;
-import java.io.*;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import retrofit.ErrorHandler;
 import retrofit.RetrofitError;
 import retrofit.client.Response;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-import com.squareup.okhttp.mockwebserver.MockResponse;
-import com.squareup.okhttp.mockwebserver.MockWebServer;
-import com.squareup.okhttp.HttpUrl;
-import java.net.HttpURLConnection;
+import rx.functions.Func1;
+
+import static junit.framework.Assert.assertNotNull;
+import static junit.framework.Assert.fail;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 public class MainTest {
+    private String responseBody;
+    private Integer responseBode;
+
     @Test
     public void testGetWithBaseUrl() {
         GitHub github = GitHub.create();
@@ -215,15 +211,15 @@ public void testCallbackResponse() {
             public void success(Response response, Response response2) {
                 StringBuilder sb = new StringBuilder();
                 try {
-                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getBody().in()));
-                String read = null;
+                    BufferedReader reader = new BufferedReader(new InputStreamReader(response.getBody().in()));
+                    String read = null;
 
                     read = reader.readLine();
-                    while (read != null) {
+                    while(read != null) {
                         sb.append(read);
                         read = reader.readLine();
                     }
-                } catch (IOException e) {
+                } catch(IOException e) {
                 }
 
                 String string = sb.toString();
@@ -255,9 +251,10 @@ public void testCallbackList() {
             @Override
             public void success(List<Contributor> list, Response response) {
                 boolean contains = false;
-                for (Contributor c : list) {
+                for(Contributor c : list) {
                     System.out.println(c.login);
-                    if (!c.login.equals("yongjhih")) continue;
+                    if(!c.login.equals("yongjhih"))
+                        continue;
                     contains = true;
                 }
                 assertTrue(contains);
@@ -392,7 +389,7 @@ public void testErrorHandler() { // SocketTimeoutException
     @Test
     public void testHttpErrorHandler() {
         MockWebServer server = new MockWebServer();
-        server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
+        server.enqueue(new MockResponse().setBody("{ \"error\": \"failure msg\"").setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
         try {
             server.start();
         } catch (Throwable e) {
@@ -423,6 +420,92 @@ public void testHttpErrorHandler() {
         assertEquals(status.get(), HttpURLConnection.HTTP_NOT_FOUND);
     }
 
+    @Test
+    public void testBuilderHttpErrorHandlerReturnsBodyAndErrorCode() throws IOException {
+        MockWebServer server = new MockWebServer();
+        server.enqueue(new MockResponse().setBody("SomeBody").setResponseCode(HttpURLConnection.HTTP_UNAUTHORIZED));
+        server.start();
+
+        MockService service = MockService.builder()
+                .errorHandler(new ErrorHandler() {
+                    @Override public Throwable handleError(RetrofitError cause) {
+
+                        Response r = cause.getResponse();
+                        String bodyString = null;
+                        try {
+                            bodyString = MockErrorHandler.readString(r.getBody().in(), "UTF-8");
+                        } catch(IOException e) {
+                            e.printStackTrace();
+                            fail();
+                        }
+                        assertEquals("Body didn't match when there was an error response", "SomeBody", bodyString);
+                        assertEquals(r.getStatus(), HttpURLConnection.HTTP_UNAUTHORIZED);
+
+                        return cause;
+                    }
+                })
+                .build();
+
+        String s = service.get(server.url("/").toString());
+        assertNotNull(s);
+        assertEquals("Body wasn't as expected: ", s, "SomeBody");
+
+        server.shutdown();
+    }
+
+    @Test
+    public void testCreatorHttpErrorHandlerReturnsBodyAndErrorCode() throws IOException {
+        MockWebServer server = new MockWebServer();
+        server.enqueue(new MockResponse().setBody("SomeBody").setResponseCode(HttpURLConnection.HTTP_UNAUTHORIZED));
+        server.start();
+
+        // init errorhandler static vars
+        MockErrorHandler.errorCode = -1;
+        MockErrorHandler.responseBody = null;
+
+        MockService service = MockService.create();
+        String s = service.get(server.url("/").toString());
+
+        // verify that the errorhandler was called
+        assertEquals("ErrorHandler didn't get error code", MockErrorHandler.errorCode, HttpURLConnection.HTTP_UNAUTHORIZED);
+        assertEquals("Body wasn't received by ErrorHandler", MockErrorHandler.responseBody, "SomeBody");
+
+        assertNotNull(s);
+        assertEquals("Body wasn't as expected: ", s, "SomeBody");
+
+        server.shutdown();
+    }
+
+    @Test
+    public void testHttpErrorHandlerSocketTimeout() throws IOException {
+        MockWebServer server = new MockWebServer();
+        server.enqueue(new MockResponse().setBody("SomeBody").setResponseCode(HttpURLConnection.HTTP_OK).setBodyDelay(60, TimeUnit.SECONDS));
+        server.start();
+
+        final AtomicInteger status = new AtomicInteger(-1);
+        MockService service = MockService.builder()
+                .errorHandler(new ErrorHandler() {
+                    @Override public Throwable handleError(RetrofitError cause) {
+
+                        assertTrue(cause.getCause().getCause() instanceof SocketTimeoutException);
+                        status.set(0);
+
+                        return cause;
+                    }
+                })
+                .build();
+
+        String s = service.get(server.url("/").toString());
+        assertEquals("Error handler wasn't called", status.get(), 0);
+        assertEquals("Body should be null because of timeout", s, null);
+
+        try {
+            server.shutdown();
+        } catch (IOException e) {
+            // ignore...server will be stuck in timeout still
+        }
+    }
+
     @Test
     public void testErrorHandlerOnMethod() {
     }
