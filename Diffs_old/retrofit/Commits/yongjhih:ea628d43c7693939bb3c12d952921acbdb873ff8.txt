diff --git a/.gitignore b/.gitignore
new file mode 100644
index 000000000..eaba17fe0
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,39 @@
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+out/
+build/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+.project
+.classpath
+.settings
+target/
+libs/
+classes/
+gen-external-apklibs/
+tmp/
+
+# IDEA Ignores
+*.iml
+*.ipr
+*.iws
+.idea/
+.gradle/
+
+# MAC
+*.DS_Store
+
+*.orig
diff --git a/.travis.yml b/.travis.yml
new file mode 100644
index 000000000..37debf7cc
--- /dev/null
+++ b/.travis.yml
@@ -0,0 +1,19 @@
+language: android
+jdk:
+    - oraclejdk7
+    - oraclejdk8
+android:
+  components:
+    - build-tools-22.0.1
+    - android-22
+    - extra-android-support
+    - extra-android-m2repository
+  licenses:
+    - '.+'
+
+before_install:
+    - export JAVA7_HOME=/usr/lib/jvm/java-7-oracle
+    - export JAVA8_HOME=/usr/lib/jvm/java-8-oracle
+    - export JAVA_HOME=$JAVA7_HOME
+script:
+    - ./gradlew clean assemble || ./gradlew clean assemble
diff --git a/LICENSE.txt b/LICENSE.txt
new file mode 100644
index 000000000..7a4a3ea24
--- /dev/null
+++ b/LICENSE.txt
@@ -0,0 +1,202 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
diff --git a/README.md b/README.md
index e8ceaba0a..9235b9b98 100644
--- a/README.md
+++ b/README.md
@@ -1,27 +1,60 @@
-# Retrofit2
+# Retrofit 2
 
-Retrofit2 turns your REST API into a Java interface.
+[![Download](https://api.bintray.com/packages/yongjhih/maven/retrofit/images/download.svg)](https://bintray.com/yongjhih/maven/retrofit/_latestVersion)
+[![JitPack](https://img.shields.io/github/tag/yongjhih/retrofit.svg?label=JitPack)](https://jitpack.io/#yongjhih/retrofit)
+[![javadoc](https://img.shields.io/github/tag/yongjhih/retrofit.svg?label=javadoc)](https://jitpack.io/com/github/yongjhih/retrofit/2.0.0/javadoc/index.html)
+[![Build Status](https://travis-ci.org/yongjhih/retrofit.svg)](https://travis-ci.org/yongjhih/retrofit)
+[![Join the chat at https://gitter.im/yongjhih/retrofit](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/yongjhih/retrofit?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
+
+[![](https://avatars0.githubusercontent.com/u/5761889?v=3&s=48)](https://github.com/Wendly)
+[![](https://avatars3.githubusercontent.com/u/213736?v=3&s=48)](https://github.com/yongjhih)
+Contributors..
+[![](art/medium-48.jpg)](https://medium.com/@yongjhih/retrofit2-aa2fffd1a3c0)
+
+![retrofit2](art/retrofit2.png)
+
+[![](art/screenshot-yongjhih.jpg)](https://appetize.io/app/3trwbht63k0rkfmbxbt51h84cr)
+
+retrofit2 turns your REST API into a Java interface.
+
+square/retrofit is a great project. So, why reinvent the wheel? Retrofit 2 is the first to implement the full stack with generated code. The guiding principle is to generate code that mimics the code that traceable and performant as it can be.
+
+google/dagger2 has also re-implemented square/dagger.
+
+Retrofit 2 is a compile-time evolution approach to dependency injection. Taking the approach started in Retrofit 1.x to its ultimate conclusion, Retrofit 2.0 eliminates all reflection, and improves code clarity.
+
+Retrofit 2 has implemented almost retrofit’s features. And bonus:
+
+* [@RetryHeaders](#support-retryheaders)
+* [Global Headers](#global-headers)
+* [@Converter](#custom-converter-for-method)
+
+For retrofit1 users: [Migration](#migration).
+
+And here is [Live Demo](https://appetize.io/app/3trwbht63k0rkfmbxbt51h84cr).
+
+# Usage
 
 ```java
 @Retrofit("https://api.github.com")
-public abstract class GitHubService {
+public abstract class GitHub {
   @GET("/users/{user}/repos")
-  List<Repo> listRepos(@Path("user") String user);
-  
-  public static GitHubService create() {
-    return new Retrofit_GitHubService();
+  public abstract List<Repo> repos(@Path("user") String user);
+
+  public static GitHub create() {
+    return new Retrofit_GitHub();
   }
 }
 ```
 
 ```java
-GitHubService github = GitHubService.create();
+GitHub github = GitHub.create();
 ```
 
-Each call on the generated GitHubService makes an HTTP request to the remote webserver.
+Each call on the generated instance of GitHub makes an HTTP request to the remote webserver.
 
 ```java
-List<Repo> repos = service.listRepos("octocat");
+List<Repo> repos = github.repos("octocat");
 ```
 
 Use annotations to describe the HTTP request:
@@ -29,3 +62,437 @@ Use annotations to describe the HTTP request:
 * URL parameter replacement and query parameter support
 * Object conversion to request body (e.g., JSON, protocol buffers)
 * Multipart request body and file upload
+
+## API Declaration
+
+Annotations on the interface methods and its parameters indicate how a request will be handled.
+
+## REQUEST METHOD
+
+Every method must have an HTTP annotation that provides the request method and relative URL. There are five built-in annotations: `GET`, `POST`, `PUT`, `DELETE`, and `HEAD`. The relative URL of the resource is specified in the annotation.
+
+```java
+@GET("/users/list")
+```
+
+You can also specify query parameters in the URL.
+
+```java
+@GET("/users/list?sort=desc")
+```
+
+## URL MANIPULATION
+
+A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by `{` and `}`. A corresponding parameter must be annotated with `@Path` using the same string.
+
+```java
+@GET("/group/{id}/users")
+abstract Observable<List<User>> groupList(@Path("id") int groupId);
+```
+
+Query parameters can also be added.
+
+```java
+@GET("/group/{id}/users")
+abstract Observable<List<User>> groupList(@Path("id") int groupId, @Query("sort") String sort);
+```
+
+For complex query parameter combinations a `Map` can be used.
+
+```java
+@GET("/group/{id}/users")
+abstract Observable<List<User>> groupList(@Path("id") int groupId, @QueryMap Map<String, String> options);
+```
+
+## REQUEST BODY
+
+An object can be specified for use as an HTTP request body with the `@Body` annotation.
+
+```java
+@POST("/users/new")
+abstract Observable<User> createUser(@Body User user> cb);
+```
+
+The object will also be converted using the converter.
+
+## FORM ENCODED AND MULTIPART
+
+Methods can also be declared to send form-encoded and multipart data.
+
+Form-encoded data is sent when `@FormUrlEncoded` is present on the method. Each key-value pair is annotated with `@Field` containing the name and the object providing the value.
+
+```java
+@FormUrlEncoded
+@POST("/user/edit")
+abstract Observable<User> updateUser(@Field("first_name") String first, @Field("last_name") String last);
+```
+
+Multipart requests are used when `@Multipart` is present on the method. Parts are declared using the `@Part` annotation.
+
+```java
+@Multipart
+@PUT("/user/photo")
+abstract Observable<User> updateUser(@Part("photo") TypedFile photo, @Part("description") TypedString description);
+```
+
+Multipart parts use the converter. In progress: or they can implement `TypedOutput` to handle their own serialization.
+
+## HEADER MANIPULATION
+
+You can set static headers for a method using the `@Headers` annotation.
+
+```java
+@Headers("Cache-Control: max-age=640000")
+@GET("/widget/list")
+abstract Observable<List<Widget>> widgetList();
+```
+
+```java
+@Headers({
+    "Accept: application/vnd.github.v3.full+json",
+    "User-Agent: Retrofit2"
+})
+@GET("/users/{username}")
+abstract Observable<User> getUser(@Path("username") String username);
+```
+
+Note that headers do not overwrite each other. All headers with the same name will be included in the request.
+
+A request Header can be updated dynamically using the `@Header` annotation. A corresponding parameter must be provided to the `@Header`. If the value is null, the header will be omitted. Otherwise, `toString` will be called on the value, and the result used.
+
+```java
+@GET("/user")
+Observable<User> getUser(@Header("Authorization") String authorization);
+```
+
+### Global Headers
+
+Headers that need to be added to every request can be specified using `@Headers` on your service. The following code uses `@Headers` that will add a User-Agent header to every request.
+
+```java
+@Retrofit("https://api.github.com")
+@Headers({
+    "Accept: application/vnd.github.v3.full+json",
+    "User-Agent: Retrofit2"
+})
+abstract class GitHub {
+    // ..
+}
+```
+
+## SYNCHRONOUS VS. ASYNCHRONOUS VS. OBSERVABLE
+
+Methods can be declared for either synchronous or asynchronous execution.
+
+A method with a return type will be executed synchronously.
+
+```java
+@GET("/user/{id}/photo")
+Photo getUserPhoto(@Path("id") int id);
+```
+
+Asynchronous execution requires the last parameter of the method be a `Callback`.
+
+```java
+@GET("/user/{id}/photo")
+void getUserPhoto(@Path("id") int id, Callback<Photo> cb);
+```
+
+On Android, callbacks will be executed on the main thread. For desktop applications callbacks will happen on the same thread that executed the HTTP request.
+
+Retrofit also integrates [RxJava](https://github.com/ReactiveX/RxJava/wiki) to support methods with a return type of `rx.Observable`
+
+```java
+@GET("/user/{id}/photo")
+Observable<Photo> getUserPhoto(@Path("id") int id);
+```
+
+Observable requests are subscribed asynchronously and observed on the same thread that executed the HTTP request. To observe on a different thread (e.g. Android's main thread) call `observeOn(Scheduler)` on the returned `Observable`.
+
+## RESPONSE OBJECT TYPE
+
+HTTP responses are automatically converted to a specified type using the RestAdapter's converter which defaults to JSON. The desired type is declared as the method return type or using the Callback or Observable.
+
+```java
+@GET("/users/list")
+List<User> userList();
+```
+
+```java
+@GET("/users/list")
+void userList(Callback<List<User>> cb);
+```
+
+```java
+@GET("/users/list")
+Observable<List<User>> userList();
+```
+
+For access to the raw HTTP response use the Response type.
+
+```java
+@GET("/users/list")
+Response userList();
+```
+
+```java
+@GET("/users/list")
+void userList(Callback<Response> cb);
+```
+
+```java
+@GET("/users/list")
+Observable<Response> userList();
+```
+
+## Target Configuration
+
+`Retrofit\_TARGET` is the class through which your API interfaces are turned into callable objects. By default, Retrofit2 will give you sane defaults for your platform but it allows for customization.
+
+### JSON CONVERSION
+
+Retrofit2 uses [LoganSquare](https://github.com/bluelinelabs/LoganSquare) by default to convert HTTP bodies to and from JSON. If you want to specify behavior that is different from Gson's defaults (e.g. naming policies, date formats, custom types), provide a new `Gson` instance with your desired behavior when building a `Retrofit_TARGET`. Refer to the [Gson documentation](https://sites.google.com/site/gson/gson-user-guide) for more details on customization.
+
+### CUSTOM GSON CONVERTER EXAMPLE
+
+The following code creates a new Gson instance that will convert all fields from lower case with underscores to camel case and vice versa. It also registers a type adapter for the `Date` class. This `DateTypeAdapter` will be used anytime Gson encounters a `Date` field.
+
+The gson instance is passed as a parameter to `GsonConverter`, which is a wrapper class for converting types.
+
+```java
+public static class DateGsonConverter extends GsonConverter {
+    public DateGsonConverter() {
+        super(new com.google.gson.GsonBuilder()
+            .setFieldNamingPolicy(com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+            .registerTypeAdapter(java.util.Date.class, new com.google.gson.internal.bind.DateTypeAdapter())
+            .create());
+    }
+}
+
+@Retrofit("https://api.github.com")
+@Converter(DateGsonConverter.class)
+abstract class GitHub {
+    // ..
+}
+```
+
+Each call on the generated `GitHub` will return objects converted using the Gson implementation provided to the `Retrofit_GitHub`.
+
+### CUSTOM CONVERTER FOR METHOD
+
+Specify another converter instance for one of methods by the following code:
+
+```java
+@Retrofit("https://api.github.com")
+@Converter(DateGsonConverter.class)
+abstract class GitHub {
+    @GET("/users/{username}")
+    @Converter(LoganSquareConverter.class)
+    abstract Observable<User> getUser(@Path("username") String username);
+
+    // ..
+}
+```
+
+### CONTENT FORMAT AGNOSTIC
+
+In addition to JSON, Retrofit can be configured to use other content formats. Retrofit provides alternate converters for XML (using [Simple](http://simple.sourceforge.net/)) and Protocol Buffers (using [protobuf](https://code.google.com/p/protobuf/) or [Wire](https://github.com/square/wire)). Please see the [retrofit-converters](https://github.com/square/retrofit/tree/master/retrofit-converters) directory for the full listing of converters.
+
+The following code shows how to use `SimpleXMLConverter` to communicate with an API that uses XML
+
+```java
+@Retrofit("https://api.github.com")
+@Converter(SimpleXMLConverter.class)
+abstract class GitHub {
+    // ..
+}
+```
+
+### CUSTOM CONVERTERS
+
+If you need to communicate with an API that uses a content-format that Retrofit does not support out of the box (e.g. YAML, txt, custom format) or you wish to use a different library to implement an existing format, you can easily create your own converter. Create a class that implements the [`Converter` interface](https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/converter/Converter.java) and pass in an instance when building your adapter.
+
+## CUSTOM ERROR HANDLING
+
+If you need custom error handling for requests, you may provide your own ErrorHandler. The following code shows how to throw a custom exception when a response returns a HTTP 401 status code
+
+```java
+@Retrofit("https://api.github.com")
+@ErrorHandler(MyErrorHandler.class)
+class GitHub {
+    // ..
+}
+```
+
+```java
+public class MyErrorHandler implements ErrorHandler {
+    @Override public Throwable handleError(RetrofitError cause) {
+        Response r = cause.getResponse();
+        if (r != null && r.getStatus() == 401) {
+            return new RuntimeException("401", cause);
+        }
+        return cause;
+    }
+}
+```
+
+Note that if the return exception is checked, it must be declared on the interface method. It is recommended that you pass the supplied RetrofitError as the cause to any new exceptions you throw.
+
+## LOGGING
+
+If you need to take a closer look at the requests and responses you can easily add logging levels to the `Retrofit_GitHub` with the `LogLevel` property. The possible logging levels are `BASIC`, `FULL`, `HEADERS`, and `NONE`.
+
+The following code shows the addition of a full log level which will log the headers, body, and metadata for both requests and responses.
+
+```java
+@Retrofit("https://api.github.com")
+@LogLevel(LogLevel.FULL)
+abstract class GitHub {
+    // ..
+}
+```
+
+## Support `@RetryHeaders`
+
+For Retry Stale example:
+
+```java
+@Retrofit("https://api.github.com")
+@RetryHeaders("Cache-Control: max-age=640000")
+abstract class GitHub {
+    // ..
+}
+```
+
+Retry the request with cache if network issue.
+
+## Support `@RequestInterceptor`
+
+```java
+@Retrofit("https://api.github.com")
+@RequestInterceptor(MyRequestInterceptor.class)
+abstract class GitHub {
+    // ..
+}
+```
+
+## Migration
+
+1. Add `@Retrofit("https://api.github.com")` line
+2. Change `interface GitHub` to `abstract class GitHub`
+3. Add `public static GitHub create() { return new Retrofit_GitHub(); }`
+
+For example:
+
+```java
+@Retrofit("https://api.github.com") // 1. Add this line
+abstract class GitHub { // 2. Change to abstract class
+  @GET("/users/{user}/repos")
+  List<Repo> listRepos(@Path("user") String user);
+  public static GitHub create() { return new Retrofit_GitHub(); } // 3. Add creator
+}
+
+Github github = GitHub.create();
+```
+
+Another way:
+
+```java
+@Retrofit("https://api.github.com")
+abstract class GitHubBean implements GitHub {
+  public static GitHub create() { return new Retrofit_GitHub(); }
+}
+
+Github github = GitHubBean.create();
+```
+
+## Installation
+
+via jcenter:
+
+```java
+repositories {
+    jcenter()
+}
+
+dependencies {
+    compile 'com.infstory:retrofit:2.0.0'
+    apt 'com.infstory:retrofit-processor:2.0.0'
+}
+```
+
+or via jitpack (in progress):
+
+```java
+repositories {
+    jcenter()
+    mavne { url "https://jitpack.io" }
+}
+
+dependencies {
+    compile 'com.github.yongjhih.retrofit:retrofit:-SNAPSHOT'
+    apt 'com.github.yongjhih.retrofit:retrofit-processor:-SNAPSHOT'
+}
+```
+
+## Live Demo
+
+* https://appetize.io/app/3trwbht63k0rkfmbxbt51h84cr
+
+## Test
+
+Test github client:
+
+```bash
+./gradlew clean :retrofit2-github:testDebug
+```
+
+All tests:
+
+```bash
+./gradlew clean test
+```
+
+Github sample app:
+
+```bash
+./gradlew clean :retrofit2-github-app:assembleDebug
+```
+
+## Development
+
+* Support POST, DELTE, PUT: http://www.twitch.tv/yoandrew/v/7918907
+
+## References
+
+* http://square.github.io/retrofit/
+* https://github.com/square/okhttp/wiki/Recipes
+* http://square.github.io/okhttp/javadoc/com/squareup/okhttp/RequestBody.html
+
+## See Also
+
+* jw/retrofit-two? https://github.com/JakeWharton/u2020/compare/jw/retrofit-two
+* square/jw/code-gen, 49407dbb19f48072ab5fce8a49f38606ce07bd27, 2013
+
+## Credit
+
+* Square, Inc.
+
+## License
+
+```
+Copyright 2013 Square, Inc.
+Copyright 2015 8tory, Inc.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+```
diff --git a/art/medium-48.jpg b/art/medium-48.jpg
new file mode 100644
index 000000000..2a619ccb6
Binary files /dev/null and b/art/medium-48.jpg differ
diff --git a/art/res/mipmap-hdpi/ic_launcher.png b/art/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..35083490c
Binary files /dev/null and b/art/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/art/res/mipmap-mdpi/ic_launcher.png b/art/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..7f4d15748
Binary files /dev/null and b/art/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/art/res/mipmap-xhdpi/ic_launcher.png b/art/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..f494b9b61
Binary files /dev/null and b/art/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/art/res/mipmap-xxhdpi/ic_launcher.png b/art/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..28298d625
Binary files /dev/null and b/art/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/art/res/mipmap-xxxhdpi/ic_launcher.png b/art/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..80825cf74
Binary files /dev/null and b/art/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/art/retrofit2-1618.png b/art/retrofit2-1618.png
new file mode 100644
index 000000000..c8ad202df
Binary files /dev/null and b/art/retrofit2-1618.png differ
diff --git a/art/retrofit2.png b/art/retrofit2.png
new file mode 100644
index 000000000..80825cf74
Binary files /dev/null and b/art/retrofit2.png differ
diff --git a/art/retrofit2.svg b/art/retrofit2.svg
new file mode 100644
index 000000000..a049a78dc
--- /dev/null
+++ b/art/retrofit2.svg
@@ -0,0 +1,1318 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg:svg
+   xmlns:dc="http://purl.org/dc/elements/1.1/"
+   xmlns:cc="http://creativecommons.org/ns#"
+   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
+   xmlns:svg="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
+   version="1.1"
+   width="100%"
+   height="100%"
+   viewBox="0 0 909.93669 909.93669"
+   id="svg3051"
+   xml:space="preserve"
+   style="overflow:visible"
+   inkscape:version="0.48.5 r10040"
+   sodipodi:docname="retrofit2.svg"
+   inkscape:export-filename="retrofit2.png"
+   inkscape:export-xdpi="160.03311"
+   inkscape:export-ydpi="160.03311"><sodipodi:namedview
+   pagecolor="#ffffff"
+   bordercolor="#666666"
+   borderopacity="1"
+   objecttolerance="10"
+   gridtolerance="10"
+   guidetolerance="10"
+   inkscape:pageopacity="0"
+   inkscape:pageshadow="2"
+   inkscape:window-width="1163"
+   inkscape:window-height="729"
+   id="namedview20"
+   showgrid="false"
+   inkscape:zoom="0.11362703"
+   inkscape:cx="-442.98424"
+   inkscape:cy="-201.0266"
+   inkscape:window-x="544"
+   inkscape:window-y="187"
+   inkscape:window-maximized="0"
+   inkscape:current-layer="svg3051"
+   fit-margin-top="0"
+   fit-margin-left="0"
+   fit-margin-right="0"
+   fit-margin-bottom="0"
+   showguides="true"
+   inkscape:guide-bbox="true"
+   inkscape:snap-to-guides="false" /><svg:metadata
+   id="metadata3077"><rdf:RDF><cc:Work
+       rdf:about=""><dc:format>image/svg+xml</dc:format><dc:type
+         rdf:resource="http://purl.org/dc/dcmitype/StillImage" /><dc:title></dc:title></cc:Work></rdf:RDF></svg:metadata><svg:defs
+   id="defs3075">
+
+
+
+
+
+
+
+
+
+
+<svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4041"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4043" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4045" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4047" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4049" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4051" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4053"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4055" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4057" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4059" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4061" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4063" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4065"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4067" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4069" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4071" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4073" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4075" /></svg:filter>
+
+<svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4053-8"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4055-4" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4057-5" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4059-7" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4061-6" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4063-7" /></svg:filter>
+
+
+
+
+
+
+<svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4053-1"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4055-7" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4057-4" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4059-0" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4061-9" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4063-4" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3049"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3051" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3053" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur3055" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset3057" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3059" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-8"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-8" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-2" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-4" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-5" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-5" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3067"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3069" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3071" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3073" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3075" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3077" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4053-1-1"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4055-7-4" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4057-4-2" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4059-0-3" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4061-9-2" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4063-4-2" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3207"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3209" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3211" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur3213" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset3215" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3217" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-8-1"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-8-6" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-2-8" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-4-5" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-5-7" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-5-6" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3225"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3227" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3229" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3231" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3233" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3235" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4498"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4500" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4502" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="20"
+     result="blur"
+     id="feGaussianBlur4504" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4506" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4508" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4510"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4512" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4514" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="20"
+     result="blur"
+     id="feGaussianBlur4516" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4518" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4520" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4522"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4524" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4526" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="20"
+     result="blur"
+     id="feGaussianBlur4528" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4530" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4532" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4564"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4566" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4568" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="10"
+     result="blur"
+     id="feGaussianBlur4570" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4572" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4574" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4576"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4578" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4580" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="10"
+     result="blur"
+     id="feGaussianBlur4582" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4584" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4586" /></svg:filter><svg:filter
+   style="color-interpolation-filters:sRGB;"
+   inkscape:label="Drop Shadow"
+   id="filter4588"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4590" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4592" /><svg:feGaussianBlur
+     in="composite"
+     stdDeviation="10"
+     result="blur"
+     id="feGaussianBlur4594" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset4596" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4598" /></svg:filter>
+
+
+
+
+
+
+<svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-8-17"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-8-4" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-2-0" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-4-9" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-5-4" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-5-8" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3197"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3199" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3201" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3203" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3205" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3207" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter4053-5"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood4055-5" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite4057-1" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur4059-71" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset4061-1" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite4063-5" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3305"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3307" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3309" /><svg:feGaussianBlur
+     stdDeviation="2.4"
+     result="blur"
+     id="feGaussianBlur3311" /><svg:feOffset
+     dx="0"
+     dy="2"
+     result="offset"
+     id="feOffset3313" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3315" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-2"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-7" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-6" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-1" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-4" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-2" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3323"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3325" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3327" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3329" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3331" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3333" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-2-2"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-7-7" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-6-9" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-1-5" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-4-4" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-2-3" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3468"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3470" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3472" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3474" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3476" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3478" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3801-6"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3803-0" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3805-24" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3807-8" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3809-6" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3811-50" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3627"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3629" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3631" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3633" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3635" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3637" /></svg:filter><svg:filter
+   inkscape:label="Drop Shadow"
+   id="filter3639"
+   color-interpolation-filters="sRGB"><svg:feFlood
+     flood-opacity="0.8"
+     flood-color="rgb(0,0,0)"
+     result="flood"
+     id="feFlood3641" /><svg:feComposite
+     in="flood"
+     in2="SourceGraphic"
+     operator="in"
+     result="composite1"
+     id="feComposite3643" /><svg:feGaussianBlur
+     stdDeviation="5"
+     result="blur"
+     id="feGaussianBlur3645" /><svg:feOffset
+     dx="0"
+     dy="10"
+     result="offset"
+     id="feOffset3647" /><svg:feComposite
+     in="SourceGraphic"
+     in2="offset"
+     operator="over"
+     result="composite2"
+     id="feComposite3649" /></svg:filter></svg:defs>
+  
+
+
+
+
+<svg:rect
+   style="fill:#2196f3;fill-opacity:1;fill-rule:nonzero;stroke:none"
+   id="rect3021"
+   width="909.93671"
+   height="909.93671"
+   x="3080.2529"
+   y="391.63214"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" />
+
+
+
+<image />
+
+
+
+
+
+
+<svg:path
+   sodipodi:type="arc"
+   style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;filter:url(#filter3801)"
+   id="path3783"
+   sodipodi:cx="248.62042"
+   sodipodi:cy="23.948263"
+   sodipodi:rx="99.008133"
+   sodipodi:ry="99.008133"
+   d="m 347.62856,23.948263 a 99.008133,99.008133 0 1 1 -198.01627,0 99.008133,99.008133 0 1 1 198.01627,0 z"
+   transform="matrix(2.1044294,0,0,2.1044294,3012.0171,796.20306)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:path
+   sodipodi:type="arc"
+   style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;filter:url(#filter3801)"
+   id="path3779"
+   sodipodi:cx="-294.03915"
+   sodipodi:cy="262.0748"
+   sodipodi:rx="220.9183"
+   sodipodi:ry="220.9183"
+   d="m -73.12085,262.0748 a 220.9183,220.9183 0 1 1 -441.83661,0 220.9183,220.9183 0 1 1 441.83661,0 z"
+   transform="matrix(0.72818852,0,0,0.72818852,3749.3372,655.76063)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:text
+   xml:space="preserve"
+   style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter3801);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+   x="128.51422"
+   y="205.48384"
+   id="text2997"
+   sodipodi:linespacing="125%"
+   transform="matrix(2.1769006,0,0,2.1769006,3170.2063,473.2898)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265"><svg:tspan
+     sodipodi:role="line"
+     x="128.51422"
+     y="205.48384"
+     id="tspan3001">@</svg:tspan></svg:text>
+
+
+
+
+
+
+
+
+
+<svg:g
+   id="g3053"
+   transform="translate(3071.5941,252.82961)"><svg:text
+   transform="matrix(1.0596532,0,0,1.0327764,235.24616,392.37762)"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   xml:space="preserve"
+   id="obj-start"
+   y="308.31335"
+   x="-107.85273"
+   sodipodi:linespacing="125%"><svg:tspan
+     id="tspan3093"
+     y="308.31335"
+     x="-107.85273"
+     style="fill:#ffffff">{</svg:tspan></svg:text>
+
+
+
+
+<svg:text
+   sodipodi:linespacing="125%"
+   x="-107.85273"
+   y="308.31335"
+   id="text3038"
+   xml:space="preserve"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   transform="matrix(-1.0596532,0,0,1.0327764,692.00806,392.37762)"><svg:tspan
+     style="fill:#ffffff"
+     x="-107.85273"
+     y="308.31335"
+     id="tspan3040">{</svg:tspan></svg:text>
+
+
+
+
+</svg:g>
+<svg:path
+   sodipodi:type="arc"
+   style="fill:#2196f3;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3031"
+   sodipodi:cx="204.61681"
+   sodipodi:cy="513.90417"
+   sodipodi:rx="536.84412"
+   sodipodi:ry="536.84412"
+   d="m 741.46092,513.90417 a 536.84412,536.84412 0 1 1 -1073.68823,0 536.84412,536.84412 0 1 1 1073.68823,0 z"
+   transform="matrix(0.772541,0,0,0.772541,281.89921,2318.7169)" />
+<svg:rect
+   style="fill:#2196f3;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="rect3021-6"
+   width="909.93671"
+   height="909.93671"
+   x="-921.69714"
+   y="1351.0876"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:path
+   sodipodi:type="arc"
+   style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-8-1)"
+   id="path3779-1-1"
+   sodipodi:cx="-294.03915"
+   sodipodi:cy="262.0748"
+   sodipodi:rx="220.9183"
+   sodipodi:ry="220.9183"
+   d="m -73.12085,262.0748 a 220.9183,220.9183 0 1 1 -441.83661,0 220.9183,220.9183 0 1 1 441.83661,0 z"
+   transform="matrix(0.72818852,0,0,0.72818852,-258.83586,1633.8852)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:text
+   xml:space="preserve"
+   style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-8-1);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+   x="128.51422"
+   y="205.48384"
+   id="text2997-7-8"
+   sodipodi:linespacing="125%"
+   transform="matrix(2.1769006,0,0,2.1769006,-837.96666,1451.4144)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265"><svg:tspan
+     sodipodi:role="line"
+     x="128.51422"
+     y="205.48384"
+     id="tspan3001-1-9">@</svg:tspan></svg:text>
+
+
+
+<svg:g
+   style="overflow:visible"
+   id="g3025-2"
+   transform="translate(-932.58746,1369.7568)"><svg:text
+   transform="matrix(1.0596532,0,0,1.0327764,276.3718,253.57508)"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053-1-1);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   xml:space="preserve"
+   id="obj-start-1-7"
+   y="308.31335"
+   x="-107.85273"
+   sodipodi:linespacing="125%"><svg:tspan
+     id="tspan3093-5-9"
+     y="308.31335"
+     x="-107.85273"
+     style="fill:#ffffff">{</svg:tspan></svg:text>
+
+
+
+<svg:text
+   sodipodi:linespacing="125%"
+   x="-107.85273"
+   y="308.31335"
+   id="text3038-2-5"
+   xml:space="preserve"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053-1-1);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   transform="matrix(-1.0596532,0,0,1.0327764,642.89946,253.57508)"><svg:tspan
+     style="fill:#ffffff"
+     x="-107.85273"
+     y="308.31335"
+     id="tspan3040-7-4">{</svg:tspan></svg:text>
+
+
+
+</svg:g>
+<svg:g
+   id="Page-1"
+   transform="matrix(33.524436,0,0,33.524436,-2360.7417,-18.978353)"
+   style="fill:#2196f3;fill-opacity:1;stroke:none"><svg:g
+     id="icon-132-cloud"
+     style="fill:#2196f3;fill-opacity:1"><svg:path
+       d="M 26.882863,15.36551 C 28.713291,16.108508 30,17.903581 30,20 c 0,2.755805 -2.238325,5 -4.99944,5 L 7.9994399,25 C 5.2324942,25 3,22.761424 3,20 3,17.949131 4.2396588,16.181608 6.0118966,15.411539 l 0,0 C 6.0040021,15.275367 6,15.138151 6,15 6,11.134007 9.1340066,8 13,8 15.612757,8 17.891182,9.4314488 19.093808,11.552882 19.820616,11.198716 20.637102,11 21.5,11 c 2.648655,0 4.860022,1.872249 5.382863,4.36551 z"
+       id="cloud"
+       inkscape:connector-curvature="0"
+       style="fill:#2196f3;fill-opacity:1" /></svg:g></svg:g><svg:path
+   sodipodi:type="arc"
+   style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-8)"
+   id="path3779-1"
+   sodipodi:cx="-294.03915"
+   sodipodi:cy="262.0748"
+   sodipodi:rx="220.9183"
+   sodipodi:ry="220.9183"
+   d="m -73.12085,262.0748 a 220.9183,220.9183 0 1 1 -441.83661,0 220.9183,220.9183 0 1 1 441.83661,0 z"
+   transform="matrix(0.75615669,0,0,0.75615669,-1604.5688,380.29409)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:text
+   xml:space="preserve"
+   style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-8);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+   x="128.51422"
+   y="205.48384"
+   id="text2997-7"
+   sodipodi:linespacing="125%"
+   transform="matrix(2.2605107,0,0,2.2605107,-2205.9429,190.81501)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265"><svg:tspan
+     sodipodi:role="line"
+     x="128.51422"
+     y="205.48384"
+     id="tspan3001-1">@</svg:tspan></svg:text>
+<svg:text
+   sodipodi:linespacing="125%"
+   x="-107.85273"
+   y="308.31335"
+   id="obj-start-1"
+   xml:space="preserve"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053-1);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   transform="matrix(0.75914465,0,0,0.73988988,-2024.2075,459.48595)"><svg:tspan
+     style="fill:#ffffff"
+     x="-107.85273"
+     y="308.31335"
+     id="tspan3093-5">{</svg:tspan></svg:text>
+<svg:text
+   transform="matrix(-0.75914465,0,0,0.73988988,-1623.624,459.48595)"
+   style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;filter:url(#filter4053-1);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+   xml:space="preserve"
+   id="text3038-2"
+   y="308.31335"
+   x="-107.85273"
+   sodipodi:linespacing="125%"><svg:tspan
+     id="tspan3040-7"
+     y="308.31335"
+     x="-107.85273"
+     style="fill:#ffffff">{</svg:tspan></svg:text>
+<svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-1131.4612,1515.7082)"
+   sodipodi:type="arc"
+   style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-0-8"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-1030.3955,1515.7082)"
+   sodipodi:type="arc"
+   style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-1-9-8"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-930.44166,1515.7082)"
+   sodipodi:type="arc"
+   style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-1-7-4-2"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:g
+   id="g3446"
+   transform="translate(1876.4406,-57.363033)"><svg:path
+     inkscape:export-ydpi="160.03265"
+     inkscape:export-xdpi="160.03265"
+     inkscape:export-filename="json2notification-2-square-blue.png"
+     transform="matrix(0.75615669,0,0,0.75615669,674.68504,427.27107)"
+     d="m -73.12085,262.0748 c 0,122.00981 -98.90849,220.9183 -220.9183,220.9183 -122.00981,0 -220.91831,-98.90849 -220.91831,-220.9183 0,-122.00981 98.9085,-220.918306 220.91831,-220.918306 122.00981,0 220.9183,98.908496 220.9183,220.918306 z"
+     sodipodi:ry="220.9183"
+     sodipodi:rx="220.9183"
+     sodipodi:cy="262.0748"
+     sodipodi:cx="-294.03915"
+     id="path3779-1-8"
+     style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-8-17)"
+     sodipodi:type="arc" /><svg:text
+     inkscape:export-ydpi="160.03265"
+     inkscape:export-xdpi="160.03265"
+     inkscape:export-filename="json2notification-2-square-blue.png"
+     transform="matrix(2.2605107,0,0,2.2605107,70.199436,230.68037)"
+     sodipodi:linespacing="125%"
+     id="text2997-7-2"
+     y="205.48384"
+     x="128.51422"
+     style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-8-17);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+     xml:space="preserve"><svg:tspan
+       id="tspan3001-1-4"
+       y="205.48384"
+       x="128.51422"
+       sodipodi:role="line">@</svg:tspan></svg:text>
+<svg:path
+     id="path6"
+     style="fill:#2196f3;fill-opacity:1;overflow:visible"
+     d="m 720.44704,374.51437 c -7.4785,0 -14.7715,0.6521 -21.9708,1.6199 -6.3633,-116.3769 -102.7119,-208.8006 -220.641,-208.8006 -96.2931,0 -169.6129,70.1095 -199.9172,156.012 -16.1659,-4.2422 -41.654,-15.042 -59.1606,-15.042 -110.0395,0 -199.244304,89.2134 -199.244304,199.3016 0,110.0516 89.204804,199.2755 199.244304,199.2755 5.8986,0 12.5776,0 19.7595,0 32.0162,87.623 115.9936,150.4483 214.5934,150.4483 98.5442,0 182.4835,-62.8235 214.5014,-150.4483 23.1796,0 41.5984,0 52.8336,0 91.7907,0 166.2048,-74.4073 166.2048,-166.1962 0,-91.782 -74.4124,-166.1702 -166.2031,-166.1702 z m -267.3367,451.2824 c -81.0932,0 -150.6911,-48.9747 -180.959,-118.916 -10.3628,-23.9896 -16.1486,-50.4073 -16.1486,-78.183 0,-108.8601 88.2196,-197.1075 197.1076,-197.1075 108.8133,0 197.033,88.2474 197.033,197.1075 0,27.7757 -5.8049,54.1917 -16.185,78.183 -30.2506,69.9413 -99.8104,118.916 -180.848,118.916 z"
+     inkscape:connector-curvature="0" /></svg:g><svg:path
+   style="fill:#ffffff"
+   inkscape:connector-curvature="0"
+   d="m 618.2202,2904.4995 c 87.16685,0 152.54192,-64.3509 152.54192,-152.5419 0,-88.1911 -60.62454,-152.542 -152.54192,-152.542 -3.35611,0 0,0 -21.79178,0 -14.25186,-74.2443 -65.37507,-130.7501 -174.33371,-130.7501 -91.89548,0 -152.54192,65.3751 -152.54192,130.7501 v 21.7918 c 0,0 -152.54192,0.6756 -152.54192,130.7502 0,89.2152 43.58328,152.5419 130.75013,152.5419 0,0 368.0838,0 370.4592,0 z"
+   id="Cloud__x2601_" /><svg:path
+   sodipodi:type="arc"
+   style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-2)"
+   id="path3779-3"
+   sodipodi:cx="-294.03915"
+   sodipodi:cy="262.0748"
+   sodipodi:rx="220.9183"
+   sodipodi:ry="220.9183"
+   d="m -73.12085,262.0748 a 220.9183,220.9183 0 1 1 -441.83661,0 220.9183,220.9183 0 1 1 441.83661,0 z"
+   transform="matrix(0.60045637,0,0,0.60045637,609.55282,2464.8994)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:text
+   xml:space="preserve"
+   style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-2);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+   x="128.51422"
+   y="205.48384"
+   id="text2997-2"
+   sodipodi:linespacing="125%"
+   transform="matrix(1.7950487,0,0,1.7950487,132.00774,2314.436)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265"><svg:tspan
+     sodipodi:role="line"
+     x="128.51422"
+     y="205.48384"
+     id="tspan3001-2">@</svg:tspan></svg:text>
+<svg:g
+   style="fill:#000000;overflow:visible"
+   id="g3053-1"
+   transform="matrix(0.56415139,0,0,0.56415139,2163.8363,1933.9148)"><svg:text
+     transform="matrix(1.0596532,0,0,1.0327764,235.24616,392.37762)"
+     style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;filter:url(#filter4053-5);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+     xml:space="preserve"
+     id="obj-start-6"
+     y="308.31335"
+     x="-107.85273"
+     sodipodi:linespacing="125%"><svg:tspan
+       id="tspan3093-8"
+       y="308.31335"
+       x="-107.85273"
+       style="fill:#000000">{</svg:tspan></svg:text>
+<svg:text
+     sodipodi:linespacing="125%"
+     x="-107.85273"
+     y="308.31335"
+     id="text3038-5"
+     xml:space="preserve"
+     style="font-size:437.85296631px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;filter:url(#filter4053-5);font-family:Bitstream Vera Sans Mono;-inkscape-font-specification:Bitstream Vera Sans Mono"
+     transform="matrix(-1.0596532,0,0,1.0327764,692.00806,392.37762)"><svg:tspan
+       style="fill:#000000"
+       x="-107.85273"
+       y="308.31335"
+       id="tspan3040-76">{</svg:tspan></svg:text>
+</svg:g><svg:text
+   xml:space="preserve"
+   style="font-size:257.34106445px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;font-family:Impact;-inkscape-font-specification:Impact"
+   x="181.6058"
+   y="2845.4839"
+   id="text3412"
+   sodipodi:linespacing="125%"><svg:tspan
+     sodipodi:role="line"
+     id="tspan3414"
+     x="181.6058"
+     y="2845.4839">{</svg:tspan></svg:text>
+<svg:text
+   xml:space="preserve"
+   style="font-size:254.43753052px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#000000;fill-opacity:1;stroke:none;font-family:Impact;-inkscape-font-specification:Impact"
+   x="600.10168"
+   y="2846.6812"
+   id="text3418"
+   sodipodi:linespacing="125%"><svg:tspan
+     sodipodi:role="line"
+     id="tspan3420"
+     x="600.10168"
+     y="2846.6812">}</svg:tspan></svg:text>
+<svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-382.41449,2164.7152)"
+   sodipodi:type="arc"
+   style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-0-8-1"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-281.34872,2164.7152)"
+   sodipodi:type="arc"
+   style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-1-9-8-8"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:path
+   transform="matrix(0.36630992,0,0,0.36630992,-181.39491,2164.7152)"
+   sodipodi:type="arc"
+   style="fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible"
+   id="path3100-1-7-4-2-9"
+   sodipodi:cx="1975.7622"
+   sodipodi:cy="1790.0089"
+   sodipodi:rx="83.606865"
+   sodipodi:ry="83.606865"
+   d="m 2059.3691,1790.0089 a 83.606865,83.606865 0 1 1 -167.2138,0 83.606865,83.606865 0 1 1 167.2138,0 z" /><svg:path
+   sodipodi:type="arc"
+   style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-2-2)"
+   id="path3779-3-3"
+   sodipodi:cx="-294.03915"
+   sodipodi:cy="262.0748"
+   sodipodi:rx="220.9183"
+   sodipodi:ry="220.9183"
+   d="m -73.12085,262.0748 a 220.9183,220.9183 0 1 1 -441.83661,0 220.9183,220.9183 0 1 1 441.83661,0 z"
+   transform="matrix(0.60045637,0,0,0.60045637,518.18595,1342.5527)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265" /><svg:text
+   xml:space="preserve"
+   style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-2-2);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+   x="128.51422"
+   y="205.48384"
+   id="text2997-2-3"
+   sodipodi:linespacing="125%"
+   transform="matrix(1.7950487,0,0,1.7950487,40.640984,1192.0893)"
+   inkscape:export-filename="json2notification-2-square-blue.png"
+   inkscape:export-xdpi="160.03265"
+   inkscape:export-ydpi="160.03265"><svg:tspan
+     sodipodi:role="line"
+     x="128.51422"
+     y="205.48384"
+     id="tspan3001-2-4">@</svg:tspan></svg:text>
+<svg:g
+   id="g3704"
+   transform="matrix(0.92375053,0,0,0.92375053,-90.955086,-126.56101)"><svg:path
+     id="Cloud__x2601_-2"
+     d="m 852.6048,891.47497 c 130.80959,0 228.9165,-96.57008 228.9165,-228.91652 0,-132.34658 -90.97793,-228.91666 -228.9165,-228.91666 -5.03644,0 0,0 -32.70252,0 -21.38739,-111.41691 -98.10693,-196.21402 -261.61903,-196.21402 -137.90551,0 -228.91648,98.10708 -228.91648,196.21402 v 32.7025 c 0,0 -228.91652,1.01387 -228.91652,196.21416 0,133.88344 65.40457,228.91652 196.21416,228.91652 0,0 552.37567,0 555.94039,0 z"
+     inkscape:connector-curvature="0"
+     style="fill:#2196f3;fill-opacity:1;overflow:visible" /><svg:text
+     sodipodi:linespacing="125%"
+     id="text3412-1"
+     y="788.42511"
+     x="216.86737"
+     style="font-size:343.65969849px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;font-family:Impact;-inkscape-font-specification:Impact"
+     xml:space="preserve"><svg:tspan
+       y="788.42511"
+       x="216.86737"
+       id="tspan3414-1"
+       sodipodi:role="line">{</svg:tspan></svg:text>
+<svg:text
+     sodipodi:linespacing="125%"
+     id="text3418-3"
+     y="783.07825"
+     x="849.12006"
+     style="font-size:339.78222656px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;font-family:Impact;-inkscape-font-specification:Impact"
+     xml:space="preserve"><svg:tspan
+       y="783.07825"
+       x="849.12006"
+       id="tspan3420-8"
+       sodipodi:role="line">}</svg:tspan></svg:text>
+<svg:path
+     inkscape:export-ydpi="160.03265"
+     inkscape:export-xdpi="160.03265"
+     inkscape:export-filename="json2notification-2-square-blue.png"
+     transform="matrix(2.414802,0,0,2.414802,-3.465471,618.05416)"
+     d="m 347.62856,23.948263 c 0,54.680682 -44.32746,99.008137 -99.00814,99.008137 -54.68068,0 -99.00813,-44.327455 -99.00813,-99.008137 0,-54.680682 44.32745,-99.008133 99.00813,-99.008133 54.68068,0 99.00814,44.327451 99.00814,99.008133 z"
+     sodipodi:ry="99.008133"
+     sodipodi:rx="99.008133"
+     sodipodi:cy="23.948263"
+     sodipodi:cx="248.62042"
+     id="path3783-9"
+     style="fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-6)"
+     sodipodi:type="arc" /><svg:path
+     inkscape:export-ydpi="160.03265"
+     inkscape:export-xdpi="160.03265"
+     inkscape:export-filename="json2notification-2-square-blue.png"
+     transform="matrix(0.83558566,0,0,0.83558566,842.59858,456.89856)"
+     d="m -73.12085,262.0748 c 0,122.00981 -98.90849,220.9183 -220.9183,220.9183 -122.00981,0 -220.91831,-98.90849 -220.91831,-220.9183 0,-122.00981 98.9085,-220.918306 220.91831,-220.918306 122.00981,0 220.9183,98.908496 220.9183,220.918306 z"
+     sodipodi:ry="220.9183"
+     sodipodi:rx="220.9183"
+     sodipodi:cy="262.0748"
+     sodipodi:cx="-294.03915"
+     id="path3779-0"
+     style="fill:#d40000;fill-opacity:1;fill-rule:nonzero;stroke:none;overflow:visible;filter:url(#filter3801-6)"
+     sodipodi:type="arc" /><svg:text
+     inkscape:export-ydpi="160.03265"
+     inkscape:export-xdpi="160.03265"
+     inkscape:export-filename="json2notification-2-square-blue.png"
+     transform="matrix(2.4979616,0,0,2.4979616,178.05431,247.51594)"
+     sodipodi:linespacing="125%"
+     id="text2997-0"
+     y="205.48384"
+     x="128.51422"
+     style="font-size:135.82684326px;font-style:normal;font-variant:normal;font-weight:900;font-stretch:normal;text-align:start;line-height:125%;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;fill:#ffffff;fill-opacity:1;stroke:none;overflow:visible;filter:url(#filter3801-6);font-family:Source Code Pro Black;-inkscape-font-specification:'Source Code Pro Black, Heavy'"
+     xml:space="preserve"><svg:tspan
+       id="tspan3001-6"
+       y="205.48384"
+       x="128.51422"
+       sodipodi:role="line">@</svg:tspan></svg:text>
+</svg:g></svg:svg>
\ No newline at end of file
diff --git a/art/screenshot-yongjhih-retrofit2.jpg b/art/screenshot-yongjhih-retrofit2.jpg
new file mode 100644
index 000000000..57dd3f860
Binary files /dev/null and b/art/screenshot-yongjhih-retrofit2.jpg differ
diff --git a/art/screenshot-yongjhih.jpg b/art/screenshot-yongjhih.jpg
new file mode 100644
index 000000000..ce7a18405
Binary files /dev/null and b/art/screenshot-yongjhih.jpg differ
diff --git a/art/web_hi_res_512.png b/art/web_hi_res_512.png
new file mode 100644
index 000000000..8f93bc0ba
Binary files /dev/null and b/art/web_hi_res_512.png differ
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 000000000..495c5038e
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..8c0fb64a8
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..fcbb664d3
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Nov 26 13:24:28 PST 2014
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
diff --git a/gradlew b/gradlew
new file mode 100755
index 000000000..91a7e269e
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 000000000..8a0b282aa
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/retrofit-processor/build.gradle b/retrofit-processor/build.gradle
new file mode 100644
index 000000000..e79193fb7
--- /dev/null
+++ b/retrofit-processor/build.gradle
@@ -0,0 +1,35 @@
+apply plugin: 'java'
+apply from: 'deploy.gradle'
+
+targetCompatibility = '1.6'
+sourceCompatibility = '1.6'
+
+repositories {
+    jcenter()
+    maven { url "https://jitpack.io" }
+}
+
+dependencies {
+  compile project(':retrofit')
+  compile 'com.google.auto.service:auto-service:1.0-rc2'
+  compile 'com.google.code.findbugs:jsr305:2.0.3'
+  compile 'org.apache.velocity:velocity:1.7'
+  compile 'org.ow2.asm:asm:4.1'
+  compile 'com.infstory:converter-logansquare-retrofit:1.0.0'
+  compile 'com.squareup.retrofit:retrofit:1.9.0'
+  compile 'io.reactivex:rxjava:1.0.9'
+  compile 'com.squareup.okhttp:okhttp:2.4.0'
+
+  testCompile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
+  testCompile 'com.google.guava:guava-testlib:17.0'
+  testCompile 'com.google.testing.compile:compile-testing:0.6'
+  testCompile 'com.google.android:android:4.1.1.4'
+  testCompile 'com.google.truth:truth:0.25'
+}
+
+tasks.withType(Test) {
+  testLogging {
+    exceptionFormat "full"
+    events "passed", "skipped", "failed"
+  }
+}
diff --git a/retrofit-processor/deploy.gradle b/retrofit-processor/deploy.gradle
new file mode 100644
index 000000000..1184f2a36
--- /dev/null
+++ b/retrofit-processor/deploy.gradle
@@ -0,0 +1,111 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+    return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.groupId = GROUP
+                pom.artifactId = POM_ARTIFACT_ID
+                pom.version = VERSION_NAME
+
+                repository(url: getReleaseRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+                snapshotRepository(url: getSnapshotRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    // http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
+    task javadocsJar(type: Jar, dependsOn: javadoc) {
+        classifier = 'javadoc'
+        from javadoc.destinationDir
+        //classpath += configurations.compile // http://stackoverflow.com/questions/10895032/javadoc-with-gradle-dont-get-the-libraries-while-running-javadoc-task
+    }
+
+    task sourcesJar(type: Jar) {
+        classifier = 'sources'
+        from sourceSets.main.allSource
+    }
+
+    artifacts {
+        archives sourcesJar
+        archives javadocsJar
+    }
+}
diff --git a/retrofit-processor/gradle.properties b/retrofit-processor/gradle.properties
new file mode 100644
index 000000000..87d5a93a3
--- /dev/null
+++ b/retrofit-processor/gradle.properties
@@ -0,0 +1,21 @@
+VERSION_NAME=2.0.0
+VERSION_CODE=200
+#GROUP=com.github.yongjhih
+GROUP=com.infstory
+
+POM_DESCRIPTION=Turns your REST API into a Java interface
+POM_URL=https://github.com/yongjhih/retrofit
+POM_SCM_URL=https://github.com/yongjhih/retrofit
+POM_SCM_CONNECTION=scm:git@github.com:yongjhih/retrofit.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:yongjhih/retrofit.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=yongjhih
+POM_DEVELOPER_NAME=Andrew Chen
+
+POM_NAME=Retrofit2 Processor
+POM_ARTIFACT_ID=retrofit-processor
+POM_PACKAGING=jar
+
+RELEASE_REPOSITORY_URL=https://api.bintray.com/maven/yongjhih/maven/retrofit-processor/
diff --git a/retrofit-processor/src/main/java/retrofit/processor/AbortProcessingException.java b/retrofit-processor/src/main/java/retrofit/processor/AbortProcessingException.java
new file mode 100644
index 000000000..c58956f3f
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/AbortProcessingException.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+/**
+ * Exception thrown when annotation processing should be aborted for the current class. Processing
+ * can continue on other classes. Throwing this exception does not cause a compiler error, so either
+ * one should explicitly be emitted or it should be clear that the compiler will be producing its
+ * own error for other reasons.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+@SuppressWarnings("serial")
+class AbortProcessingException extends RuntimeException {
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodExtractor.java b/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodExtractor.java
new file mode 100644
index 000000000..1498600b4
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodExtractor.java
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableListMultimap;
+
+import java.util.ArrayDeque;
+import java.util.Deque;
+
+/**
+ * An ultrasimplified Java parser for {@link EclipseHack} that examines classes to extract just
+ * the abstract methods. The parsing is very superficial. It assumes that the source text is
+ * syntactically correct, which it must be in the context of an annotation processor because the
+ * compiler doesn't invoke the processor if there are syntax errors.
+ *
+ * <p>We recognize the text {@code ... class Foo ... { ... } } as a class called Foo, whose
+ * definition extends to the matching right brace. Within a class definition, we recognize the text
+ * {@code abstract ... bar ( ) } as an abstract method called bar. We also recognize {@code ...
+ * interface Foo ... { ... } } so that we can discover {@code @Retrofit} classes that are nested
+ * in an interface.
+ *
+ * <p>We construct a {@code Map<String, List<String>>} that represents the abstract methods found in
+ * each class, in the order they were found. If com.example.Foo contains a nested class Bar, then
+ * there will be an entry for "com.example.Foo.Bar" in this Map.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+final class AbstractMethodExtractor {
+  AbstractMethodExtractor() { }
+
+  // Here are the details of the matching. We track the current brace depth, and we artificially
+  // consider that the whole file is at brace depth 1 inside a pseudo-class whose name is the
+  // name of the package. When we see a class definition, we push the fully-qualified name of the
+  // class on a stack so that we can associate abstract methods we find with the possibly-nested
+  // class they belong to. A class definition must occur at brace depth one more than the class
+  // containing it, which is equivalent to saying that the brace depth must be the same as the
+  // class stack depth. This check excludes local class definitions within methods and
+  // initializers. If we meet these constraints and we see the word "class" followed by an
+  // identifier Foo, then we consider that we are entering the definition of class Foo. We determine
+  // the fully-qualified name of Foo, which is container.Foo, where container is the current top of
+  // the class stack (initially, the package name). We push this new fully-qualified name on the
+  // class stack. We have not yet seen the left brace with the class definition so at this point the
+  // class stack depth is one more than the brace depth. When we subsequently see a right brace that
+  // takes us back to this situation then we know we have completed the definition of Foo and we can
+  // pop it from the class stack.
+  //
+  // We check that the token after "class" is indeed an identifier to avoid confusion
+  // with Foo.class. Even though the tokenizer does not distinguish between identifiers and
+  // keywords, it is enough to exclude the single word "instanceof" because that is the only word
+  // that can legally appear after Foo.class (though in a legal program the resultant expression
+  // will always be true).
+  //
+  // Again, we are at the top level of a class when the brace depth is equal to the class stack
+  // depth. If we then see the word "abstract" then that is the start either of an abstract class
+  // definition or of an abstract method. We record that we have seen "abstract" and we cancel
+  // that indication as soon as we see a left brace, to exclude the abstract class case, and also
+  // the case of interfaces or @interfaces redundantly declared abstract. Now, when
+  // we see an identifier that is preceded by an uncanceled "abstract" and followed by a left paren
+  // then we have found an abstract method of the class on the top of the class stack. We record it
+  // in the list of abstract methods of the class on the top of the class stack. We don't bother
+  // checking that the method has no parameters, because an @Retrofit class will cause a compiler
+  // error if there are abstract methods with parameters, since the @Retrofit processor doesn't
+  // know how to implement them in the concrete subclass it generates.
+  ImmutableListMultimap<String, String> abstractMethods(
+      JavaTokenizer tokenizer, String packageName) {
+    ImmutableListMultimap.Builder<String, String> abstractMethods = ImmutableListMultimap.builder();
+    Deque<String> classStack = new ArrayDeque<String>();
+    classStack.addLast(packageName);
+    int braceDepth = 1;
+    boolean sawAbstract = false;
+    String className = null;
+    for (String previousToken = "", token = tokenizer.nextToken();
+        token != null;
+        previousToken = token, token = tokenizer.nextToken()) {
+      boolean topLevel = (braceDepth == classStack.size());
+      if (className != null) {
+        if (Character.isJavaIdentifierStart(className.charAt(0))
+            && !className.equals("instanceof")) {
+          String container = classStack.getLast();
+          // container might be empty in the case of a packageless class
+          classStack.add(container.isEmpty() ? className : container + "." + className);
+        }
+        className = null;
+      }
+      if (token.equals("{")) {
+        braceDepth++;
+        sawAbstract = false;
+      } else if (token.equals("}")) {
+        braceDepth--;
+        if (topLevel) {
+          classStack.removeLast();
+        }
+      } else if (topLevel) {
+        if (token.equals("class") || token.equals("interface")) {
+          className = tokenizer.nextToken();
+        } else if (token.equals("abstract")) {
+          sawAbstract = true;
+        } else if (token.equals("(")) {
+          if (sawAbstract && Character.isJavaIdentifierStart(previousToken.charAt(0))) {
+            abstractMethods.put(classStack.getLast(), previousToken);
+          }
+          sawAbstract = false;
+        }
+      }
+    }
+    return abstractMethods.build();
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodLister.java b/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodLister.java
new file mode 100644
index 000000000..4d09dd97c
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/AbstractMethodLister.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableList;
+
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Modifier;
+
+/**
+ * A class file parser that lists the no-arg abstract methods in a class.
+ *
+ * @author Éamonn McManus
+ */
+class AbstractMethodLister {
+  private final InputStream inputStream;
+
+  AbstractMethodLister(InputStream inputStream) {
+    this.inputStream = inputStream;
+  }
+
+  ImmutableList<String> abstractNoArgMethods() {
+    try {
+      return abstractNoArgMethodsX();
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private ImmutableList<String> abstractNoArgMethodsX() throws IOException {
+    ClassReader classReader = new ClassReader(inputStream);
+    RecordingClassVisitor classVisitor = new RecordingClassVisitor();
+    classReader.accept(classVisitor, 0);
+    return classVisitor.abstractNoArgMethods.build();
+  }
+
+  private static class RecordingClassVisitor extends ClassVisitor {
+    private final ImmutableList.Builder<String> abstractNoArgMethods = ImmutableList.builder();
+
+    RecordingClassVisitor() {
+      super(Opcodes.ASM4);
+    }
+
+    @Override
+    public MethodVisitor visitMethod(
+        int access, String name, String desc, String signature, String[] exceptions) {
+      // The class-file method descriptor desc is a string that will contain "()" only if the
+      // method has no arguments, and will end with "V" (actually "()V") only if the method
+      // is void.
+      if (Modifier.isAbstract(access) && desc.contains("()") && !desc.endsWith("V")) {
+        abstractNoArgMethods.add(name);
+      }
+      return super.visitMethod(access, name, desc, signature, exceptions);
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/AnnotationOutput.java b/retrofit-processor/src/main/java/retrofit/processor/AnnotationOutput.java
new file mode 100644
index 000000000..f877e9b50
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/AnnotationOutput.java
@@ -0,0 +1,244 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableMap;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.SimpleAnnotationValueVisitor6;
+import javax.tools.Diagnostic;
+
+/**
+ * Handling of default values for annotation members.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+class AnnotationOutput {
+  private final TypeSimplifier typeSimplifier;
+
+  AnnotationOutput(TypeSimplifier typeSimplifier) {
+    this.typeSimplifier = typeSimplifier;
+  }
+
+  /**
+   * Visitor that produces a string representation of an annotation value, suitable for inclusion
+   * in a Java source file as an annotation member or as the initializer of a variable of the
+   * appropriate type. The syntax for the two is the same except for annotation members that are
+   * themselves annotations. Within an annotation, an annotation member can be written as
+   * {@code @NestedAnnotation(...)}, while in an initializer it must be written as an object,
+   * for example the construction of an {@code @AutoAnnotation} class. That's why we have this
+   * abstract class and two concrete subclasses.
+   */
+  private abstract class SourceFormVisitor
+      extends SimpleAnnotationValueVisitor6<Void, StringBuilder> {
+    @Override
+    protected Void defaultAction(Object value, StringBuilder sb) {
+      sb.append(value);
+      return null;
+    }
+
+    @Override
+    public Void visitArray(List<? extends AnnotationValue> values, StringBuilder sb) {
+      sb.append('{');
+      String sep = "";
+      for (AnnotationValue value : values) {
+        sb.append(sep);
+        visit(value, sb);
+        sep = ", ";
+      }
+      sb.append('}');
+      return null;
+    }
+
+    @Override
+    public Void visitChar(char c, StringBuilder sb) {
+      appendQuoted(sb, c);
+      return null;
+    }
+
+    @Override
+    public Void visitLong(long i, StringBuilder sb) {
+      sb.append(i).append('L');
+      return null;
+    }
+
+    @Override
+    public Void visitDouble(double d, StringBuilder sb) {
+      if (Double.isNaN(d)) {
+        sb.append("Double.NaN");
+      } else if (d == Double.POSITIVE_INFINITY) {
+        sb.append("Double.POSITIVE_INFINITY");
+      } else if (d == Double.NEGATIVE_INFINITY) {
+        sb.append("Double.NEGATIVE_INFINITY");
+      } else {
+        sb.append(d);
+      }
+      return null;
+    }
+
+    @Override
+    public Void visitFloat(float f, StringBuilder sb) {
+      if (Float.isNaN(f)) {
+        sb.append("Float.NaN");
+      } else if (f == Float.POSITIVE_INFINITY) {
+        sb.append("Float.POSITIVE_INFINITY");
+      } else if (f == Float.NEGATIVE_INFINITY) {
+        sb.append("Float.NEGATIVE_INFINITY");
+      } else {
+        sb.append(f).append('F');
+      }
+      return null;
+    }
+
+    @Override
+    public Void visitEnumConstant(VariableElement c, StringBuilder sb) {
+      sb.append(typeSimplifier.simplify(c.asType())).append('.').append(c.getSimpleName());
+      return null;
+    }
+
+    @Override
+    public Void visitString(String s, StringBuilder sb) {
+      appendQuoted(sb, s);
+      return null;
+    }
+
+    @Override
+    public Void visitType(TypeMirror classConstant, StringBuilder sb) {
+      sb.append(typeSimplifier.simplify(classConstant)).append(".class");
+      return null;
+    }
+  }
+
+  private class InitializerSourceFormVisitor extends SourceFormVisitor {
+    private final ProcessingEnvironment processingEnv;
+    private final String memberName;
+    private final Element context;
+
+    InitializerSourceFormVisitor(
+        ProcessingEnvironment processingEnv, String memberName, Element context) {
+      this.processingEnv = processingEnv;
+      this.memberName = memberName;
+      this.context = context;
+    }
+
+    @Override
+    public Void visitAnnotation(AnnotationMirror a, StringBuilder sb) {
+      processingEnv.getMessager().printMessage(
+          Diagnostic.Kind.ERROR,
+          "@AutoAnnotation cannot yet supply a default value for annotation-valued member '"
+              + memberName + "'",
+          context);
+      sb.append("null");
+      return null;
+    }
+  }
+
+  private class AnnotationSourceFormVisitor extends SourceFormVisitor {
+    @Override
+    public Void visitAnnotation(AnnotationMirror a, StringBuilder sb) {
+      sb.append('@').append(typeSimplifier.simplify(a.getAnnotationType()));
+      Map<ExecutableElement, AnnotationValue> map = ImmutableMap.copyOf(a.getElementValues());
+      if (!map.isEmpty()) {
+        sb.append('(');
+        String sep = "";
+        for (Map.Entry<ExecutableElement, AnnotationValue> entry : map.entrySet()) {
+          sb.append(sep).append(entry.getKey().getSimpleName()).append(" = ");
+          sep = ", ";
+          this.visit(entry.getValue(), sb);
+        }
+        sb.append(')');
+      }
+      return null;
+    }
+  }
+
+  /**
+   * Returns a string representation of the given annotation value, suitable for inclusion in a Java
+   * source file as the initializer of a variable of the appropriate type.
+   */
+  String sourceFormForInitializer(
+      AnnotationValue annotationValue,
+      ProcessingEnvironment processingEnv,
+      String memberName,
+      Element context) {
+    SourceFormVisitor visitor =
+        new InitializerSourceFormVisitor(processingEnv, memberName, context);
+    StringBuilder sb = new StringBuilder();
+    visitor.visit(annotationValue, sb);
+    return sb.toString();
+  }
+
+  /**
+   * Returns a string representation of the given annotation mirror, suitable for inclusion in a
+   * Java source file to reproduce the annotation in source form.
+   */
+  String sourceFormForAnnotation(AnnotationMirror annotationMirror) {
+    StringBuilder sb = new StringBuilder();
+    new AnnotationSourceFormVisitor().visitAnnotation(annotationMirror, sb);
+    return sb.toString();
+  }
+
+  private static StringBuilder appendQuoted(StringBuilder sb, String s) {
+    sb.append('"');
+    for (int i = 0; i < s.length(); i++) {
+      appendEscaped(sb, s.charAt(i));
+    }
+    return sb.append('"');
+  }
+
+  private static StringBuilder appendQuoted(StringBuilder sb, char c) {
+    sb.append('\'');
+    appendEscaped(sb, c);
+    return sb.append('\'');
+  }
+
+  private static void appendEscaped(StringBuilder sb, char c) {
+    switch (c) {
+    case '\\':
+    case '"':
+    case '\'':
+      sb.append('\\').append(c);
+      break;
+    case '\n':
+      sb.append("\\n");
+      break;
+    case '\r':
+      sb.append("\\r");
+      break;
+    case '\t':
+      sb.append("\\t");
+      break;
+    default:
+      if (c < 0x20) {
+        sb.append(String.format("\\%03o", (int) c));
+      } else if (c < 0x7f || Character.isLetter(c)) {
+        sb.append(c);
+      } else {
+        sb.append(String.format("\\u%04x", (int) c));
+      }
+      break;
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java b/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java
new file mode 100644
index 000000000..e5867a32d
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java
@@ -0,0 +1,473 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import retrofit.http.Retrofit;
+import com.google.auto.common.MoreElements;
+import com.google.auto.common.MoreTypes;
+import com.google.common.base.Equivalence;
+import com.google.common.base.Optional;
+import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+import java.beans.Introspector;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.ErrorType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.type.TypeVisitor;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.SimpleTypeVisitor6;
+import javax.lang.model.util.Types;
+
+/**
+ * Support for Retrofit builders.
+ *
+ * @author Éamonn McManus
+ */
+class BuilderSpec {
+  private static final Equivalence<TypeMirror> TYPE_EQUIVALENCE = MoreTypes.equivalence();
+
+  private final TypeElement autoValueClass;
+  private final Elements elementUtils;
+  private final ErrorReporter errorReporter;
+
+  BuilderSpec(
+      TypeElement autoValueClass,
+      ProcessingEnvironment processingEnv,
+      ErrorReporter errorReporter) {
+    this.autoValueClass = autoValueClass;
+    this.elementUtils = processingEnv.getElementUtils();
+    this.errorReporter = errorReporter;
+  }
+
+  private static final Set<ElementKind> CLASS_OR_INTERFACE =
+      Sets.immutableEnumSet(ElementKind.CLASS, ElementKind.INTERFACE);
+
+  /**
+   * Determines if the {@code @Retrofit} class for this instance has a correct nested
+   * {@code @Retrofit.Builder} class or interface and return a representation of it in an
+   * {@code Optional} if so.
+   */
+  Optional<Builder> getBuilder() {
+    Optional<TypeElement> builderTypeElement = Optional.absent();
+    for (TypeElement containedClass : ElementFilter.typesIn(autoValueClass.getEnclosedElements())) {
+      if (MoreElements.isAnnotationPresent(containedClass, Retrofit.Builder.class)) {
+        if (!CLASS_OR_INTERFACE.contains(containedClass.getKind())) {
+          errorReporter.reportError(
+              "@Retrofit.Builder can only apply to a class or an interface", containedClass);
+        } else if (builderTypeElement.isPresent()) {
+          errorReporter.reportError(
+              autoValueClass + " already has a Builder: " + builderTypeElement.get(),
+              containedClass);
+        } else {
+          builderTypeElement = Optional.of(containedClass);
+        }
+      }
+    }
+
+    Optional<ExecutableElement> validateMethod = Optional.absent();
+    for (ExecutableElement containedMethod :
+        ElementFilter.methodsIn(autoValueClass.getEnclosedElements())) {
+      if (MoreElements.isAnnotationPresent(containedMethod, Retrofit.Validate.class)) {
+        if (containedMethod.getModifiers().contains(Modifier.STATIC)) {
+          errorReporter.reportError(
+              "@Retrofit.Validate cannot apply to a static method", containedMethod);
+        } else if (!containedMethod.getParameters().isEmpty()) {
+          errorReporter.reportError(
+              "@Retrofit.Validate method must not have parameters", containedMethod);
+        } else if (containedMethod.getReturnType().getKind() != TypeKind.VOID) {
+          errorReporter.reportError(
+              "Return type of @Retrofit.Validate method must be void", containedMethod);
+        } else if (validateMethod.isPresent()) {
+          errorReporter.reportError(
+              "There can only be one @Retrofit.Validate method", containedMethod);
+        } else {
+          validateMethod = Optional.of(containedMethod);
+        }
+      }
+    }
+
+    if (builderTypeElement.isPresent()) {
+      return builderFrom(builderTypeElement.get(), validateMethod);
+    } else {
+      if (validateMethod.isPresent()) {
+        errorReporter.reportError(
+            "@Retrofit.Validate is only meaningful if there is an @Retrofit.Builder",
+            validateMethod.get());
+      }
+      return Optional.absent();
+    }
+  }
+
+  /**
+   * Representation of an {@code Retrofit.Builder} class or interface.
+   */
+  class Builder {
+    private final TypeElement builderTypeElement;
+    private final ExecutableElement buildMethod;
+    private final ImmutableList<ExecutableElement> setters;
+    private final Optional<ExecutableElement> validateMethod;
+
+    Builder(
+        TypeElement builderTypeElement,
+        ExecutableElement build,
+        List<ExecutableElement> setters,
+        Optional<ExecutableElement> validateMethod) {
+      this.builderTypeElement = builderTypeElement;
+      this.buildMethod = build;
+      this.setters = ImmutableList.copyOf(setters);
+      this.validateMethod = validateMethod;
+    }
+
+    ExecutableElement buildMethod() {
+      return buildMethod;
+    }
+
+    /**
+     * Returns a map from property name to setter method. If the setter methods are invalid
+     * (for example not every getter has a setter, or some setters don't correspond to getters)
+     * then emits an error message and returns null.
+     *
+     * @param getterToPropertyName a list of getter methods, such as {@code abstract String foo();}
+     *                             or {@code abstract String getFoo();}.
+     */
+    private Map<String, ExecutableElement> makeSetterMap(
+        Map<ExecutableElement, String> getterToPropertyName) {
+
+      // Map property names to types based on the getters.
+      Map<String, TypeMirror> getterMap = new TreeMap<String, TypeMirror>();
+      for (Map.Entry<ExecutableElement, String> entry : getterToPropertyName.entrySet()) {
+        getterMap.put(entry.getValue(), entry.getKey().getReturnType());
+      }
+
+      Map<String, ExecutableElement> noPrefixMap = Maps.newLinkedHashMap();
+      Map<String, ExecutableElement> prefixMap = Maps.newLinkedHashMap();
+
+      boolean ok = true;
+      // For each setter, check that its name and type correspond to a getter, and remove it from
+      // the map if so.
+      for (ExecutableElement setter : setters) {
+        Map<String, ExecutableElement> map = noPrefixMap;
+        String name = setter.getSimpleName().toString();
+        TypeMirror type = getterMap.get(name);
+        if (type == null && name.startsWith("set")) {
+          name = Introspector.decapitalize(name.substring(3));
+          type = getterMap.get(name);
+          map = prefixMap;
+        }
+        if (type == null) {
+          errorReporter.reportError(
+              "Method does not correspond to a property of " + autoValueClass, setter);
+          ok = false;
+        } else {
+          VariableElement parameter = Iterables.getOnlyElement(setter.getParameters());
+          if (TYPE_EQUIVALENCE.equivalent(type, parameter.asType())) {
+            getterMap.remove(name);
+            map.put(name, setter);
+          } else {
+            errorReporter.reportError("Parameter type should be " + type, parameter);
+            ok = false;
+          }
+        }
+      }
+      if (!ok) {
+        return null;
+      }
+
+      boolean prefixing = !prefixMap.isEmpty();
+      if (prefixing && !noPrefixMap.isEmpty()) {
+        errorReporter.reportError(
+            "If any setter methods use the setFoo convention then all must",
+            noPrefixMap.values().iterator().next());
+        return null;
+      }
+
+      // If there are any properties left in the map then we didn't see setters for them. Report
+      // an error for each one separately.
+      if (!getterMap.isEmpty()) {
+        for (Map.Entry<String, TypeMirror> entry : getterMap.entrySet()) {
+          String setterName = prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();
+          String error = String.format(
+              "Expected a method with this signature: %s%s %s(%s)",
+              builderTypeElement,
+              TypeSimplifier.actualTypeParametersString(builderTypeElement),
+              setterName,
+              entry.getValue());
+          errorReporter.reportError(error, builderTypeElement);
+        }
+        return null;
+      }
+
+      return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;
+    }
+
+    private String prefixWithSet(String propertyName) {
+      // This is not internationalizationally correct, but it corresponds to what
+      // Introspector.decapitalize does.
+      return "set" + Character.toUpperCase(propertyName.charAt(0)) + propertyName.substring(1);
+    }
+
+    /**
+     * Finds any methods in the set that return the builder type. If the builder has type parameters
+     * {@code <A, B>}, then the return type of the method must be {@code Builder<A, B>} with
+     * the same parameter names. We enforce elsewhere that the names and bounds of the builder
+     * parameters must be the same as those of the @Retrofit class. Here's a correct example:
+     * <pre>
+     * {@code @Retrofit abstract class Foo<A extends Number, B> {
+     *   abstract int someProperty();
+     *
+     *   abstract Builder<A, B> toBuilder();
+     *
+     *   interface Builder<A extends Number, B> {...}
+     * }}
+     * </pre>
+     * <p/>
+     * <p>We currently impose that there cannot be more than one such method.</p>
+     */
+    ImmutableSet<ExecutableElement> toBuilderMethods(
+        Types typeUtils, Set<ExecutableElement> abstractMethods) {
+
+      ImmutableList<String> builderTypeParamNames =
+          FluentIterable.from(builderTypeElement.getTypeParameters())
+              .transform(SimpleNameFunction.INSTANCE)
+              .toList();
+
+      ImmutableSet.Builder<ExecutableElement> methods = ImmutableSet.builder();
+      for (ExecutableElement method : abstractMethods) {
+        if (builderTypeElement.equals(typeUtils.asElement(method.getReturnType()))) {
+          methods.add(method);
+          DeclaredType returnType = MoreTypes.asDeclared(method.getReturnType());
+          ImmutableList.Builder<String> typeArguments = ImmutableList.builder();
+          for (TypeMirror typeArgument : returnType.getTypeArguments()) {
+            if (typeArgument.getKind().equals(TypeKind.TYPEVAR)) {
+              typeArguments.add(typeUtils.asElement(typeArgument).getSimpleName().toString());
+            }
+          }
+          if (!builderTypeParamNames.equals(typeArguments.build())) {
+            errorReporter.reportError(
+                "Builder converter method should return "
+                    + builderTypeElement
+                    + TypeSimplifier.actualTypeParametersString(builderTypeElement),
+                method);
+          }
+        }
+      }
+      ImmutableSet<ExecutableElement> builderMethods = methods.build();
+      if (builderMethods.size() > 1) {
+        errorReporter.reportError(
+            "There can be at most one builder converter method", builderMethods.iterator().next());
+      }
+      return builderMethods;
+    }
+
+    void defineVars(
+        RetrofitTemplateVars vars,
+        TypeSimplifier typeSimplifier,
+        Map<ExecutableElement, String> getterToPropertyName) {
+      Map<String, ExecutableElement> propertyNameToSetter = makeSetterMap(getterToPropertyName);
+      if (propertyNameToSetter == null) {
+        return;
+      }
+      vars.builderIsInterface = builderTypeElement.getKind() == ElementKind.INTERFACE;
+      vars.builderTypeName = TypeSimplifier.classNameOf(builderTypeElement);
+      vars.builderFormalTypes = typeSimplifier.formalTypeParametersString(builderTypeElement);
+      vars.builderActualTypes = TypeSimplifier.actualTypeParametersString(builderTypeElement);
+      vars.buildMethodName = buildMethod.getSimpleName().toString();
+      if (validateMethod.isPresent()) {
+        vars.validators = ImmutableSet.of(validateMethod.get().getSimpleName().toString());
+      } else {
+        vars.validators = ImmutableSet.of();
+      }
+      ImmutableMap.Builder<String, String> setterNameBuilder = ImmutableMap.builder();
+      for (Map.Entry<String, ExecutableElement> entry : propertyNameToSetter.entrySet()) {
+        setterNameBuilder.put(entry.getKey(), entry.getValue().getSimpleName().toString());
+      }
+      vars.builderSetterNames = setterNameBuilder.build();
+    }
+  }
+
+  /**
+   * Returns a representation of the given {@code @Retrofit.Builder} class or interface. If the
+   * class or interface has abstract methods that could not be part of any builder, emits error
+   * messages and returns null.
+   */
+  private Optional<Builder> builderFrom(
+      TypeElement builderTypeElement, Optional<ExecutableElement> validateMethod) {
+
+    // We require the builder to have the same type parameters as the @Retrofit class, meaning the
+    // same names and bounds. In principle the type parameters could have different names, but that
+    // would be confusing, and our code would reject it anyway because it wouldn't consider that
+    // the return type of Foo<U> build() was really the same as the declaration of Foo<T>. This
+    // check produces a better error message in that case and similar ones.
+
+    boolean ok = true;
+    int nTypeParameters = autoValueClass.getTypeParameters().size();
+    if (nTypeParameters != builderTypeElement.getTypeParameters().size()) {
+      ok = false;
+    } else {
+      for (int i = 0; i < nTypeParameters; i++) {
+        TypeParameterElement autoValueParam = autoValueClass.getTypeParameters().get(i);
+        TypeParameterElement builderParam = builderTypeElement.getTypeParameters().get(i);
+        if (!autoValueParam.getSimpleName().equals(builderParam.getSimpleName())) {
+          ok = false;
+          break;
+        }
+        Set<TypeMirror> autoValueBounds = new TypeMirrorSet(autoValueParam.getBounds());
+        Set<TypeMirror> builderBounds = new TypeMirrorSet(builderParam.getBounds());
+        if (!autoValueBounds.equals(builderBounds)) {
+          ok = false;
+          break;
+        }
+      }
+    }
+    if (!ok) {
+      errorReporter.reportError(
+          "Type parameters of " + builderTypeElement + " must have same names and bounds as "
+              + "type parameters of " + autoValueClass, builderTypeElement);
+      return Optional.absent();
+    }
+
+    String typeParams = TypeSimplifier.actualTypeParametersString(autoValueClass);
+
+    List<ExecutableElement> buildMethods = new ArrayList<ExecutableElement>();
+    List<ExecutableElement> setterMethods = new ArrayList<ExecutableElement>();
+    // For each abstract method (in builderTypeElement or inherited), check that it is either
+    // a setter method or a build method. A setter method has one argument and returns
+    // builderTypeElement. A build method has no arguments and returns the @Retrofit class.
+    // Record each method in one of the two lists.
+    for (ExecutableElement method : abstractMethods(builderTypeElement)) {
+      boolean thisOk = false;
+      int nParameters = method.getParameters().size();
+      if (nParameters == 0
+          && TYPE_EQUIVALENCE.equivalent(method.getReturnType(), autoValueClass.asType())) {
+        buildMethods.add(method);
+        thisOk = true;
+      } else if (nParameters == 1
+          && TYPE_EQUIVALENCE.equivalent(method.getReturnType(), builderTypeElement.asType())) {
+        setterMethods.add(method);
+        thisOk = true;
+      }
+      if (!thisOk) {
+        errorReporter.reportError(
+            "Builder methods must either have no arguments and return "
+                + autoValueClass + typeParams + " or have one argument and return "
+                + builderTypeElement + typeParams,
+            method);
+        ok = false;
+      }
+    }
+    if (buildMethods.isEmpty()) {
+      errorReporter.reportError(
+          "Builder must have a single no-argument method returning "
+              + autoValueClass + typeParams,
+          builderTypeElement);
+      ok = false;
+    } else if (buildMethods.size() > 1) {
+      // More than one eligible build method. Emit an error for each one, that is attached to
+      // that build method.
+      for (ExecutableElement buildMethod : buildMethods) {
+        errorReporter.reportError(
+            "Builder must have a single no-argument method returning "
+                + autoValueClass + typeParams,
+            buildMethod);
+      }
+      ok = false;
+    }
+
+    if (ok) {
+      return Optional.of(new Builder(
+          builderTypeElement,
+          Iterables.getOnlyElement(buildMethods),
+          setterMethods,
+          validateMethod));
+    } else {
+      return Optional.absent();
+    }
+  }
+
+  // Return a list of all abstract methods in the given TypeElement or inherited from ancestors.
+  private List<ExecutableElement> abstractMethods(TypeElement typeElement) {
+    List<ExecutableElement> methods = new ArrayList<ExecutableElement>();
+    addAbstractMethods(typeElement.asType(), methods);
+    return methods;
+  }
+
+  private static final TypeVisitor<Element, Void> AS_ELEMENT_VISITOR =
+      new SimpleTypeVisitor6<Element, Void>() {
+        @Override protected Element defaultAction(TypeMirror e, Void p) {
+          throw new IllegalArgumentException(e + "cannot be converted to an Element");
+        }
+
+        @Override public Element visitDeclared(DeclaredType t, Void p) {
+          return t.asElement();
+        }
+
+        @Override public Element visitError(ErrorType t, Void p) {
+          return t.asElement();
+        }
+
+        @Override public Element visitTypeVariable(TypeVariable t, Void p) {
+          return t.asElement();
+        }
+      };
+
+  private void addAbstractMethods(
+      TypeMirror typeMirror, List<ExecutableElement> abstractMethods) {
+    if (typeMirror.getKind() != TypeKind.DECLARED) {
+      return;
+    }
+
+    TypeElement typeElement = MoreElements.asType(typeMirror.accept(AS_ELEMENT_VISITOR, null));
+    addAbstractMethods(typeElement.getSuperclass(), abstractMethods);
+    for (TypeMirror interfaceMirror : typeElement.getInterfaces()) {
+      addAbstractMethods(interfaceMirror, abstractMethods);
+    }
+    for (ExecutableElement method : ElementFilter.methodsIn(typeElement.getEnclosedElements())) {
+      for (Iterator<ExecutableElement> it = abstractMethods.iterator(); it.hasNext(); ) {
+        ExecutableElement maybeOverridden = it.next();
+        if (elementUtils.overrides(method, maybeOverridden, typeElement)) {
+          it.remove();
+        }
+      }
+      if (method.getModifiers().contains(Modifier.ABSTRACT)) {
+        abstractMethods.add(method);
+      }
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/EclipseHack.java b/retrofit-processor/src/main/java/retrofit/processor/EclipseHack.java
new file mode 100644
index 000000000..0c93fc2be
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/EclipseHack.java
@@ -0,0 +1,247 @@
+/*
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableListMultimap;
+
+import java.io.FileReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.lang.reflect.Method;
+import java.net.URI;
+import java.net.URL;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.concurrent.Callable;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
+
+/**
+ * Works around an Eclipse bug where methods are sorted into alphabetical order before being given
+ * to annotation processors. Unfortunately this seems to be deeply built in to the JDT compiler
+ * that Eclipse uses. The bug has been open for over three years with no progress.
+ * <p>
+ * To work around the problem, we access Eclipse-specific APIs to find the original source code of
+ * the class with the {@code @Retrofit} annotation, and we do just enough parsing of that code to
+ * be able to pick out the abstract method declarations so we can determine their order. The code
+ * to access Eclipse-specific APIs will fail in environments other than Eclipse (for example, javac)
+ * and the methods will be left in the order they came in, which in these other environments should
+ * already be the correct order.
+ * <p>
+ * This is obviously a giant hack, and the right thing would be for the Eclipse compiler to be
+ * fixed. The approach here works, but is vulnerable to future changes in the Eclipse API. If
+ * {@code @Retrofit} constructor calls like {@code new Retrofit_Foo(...)} suddenly start being
+ * redlined in a new Eclipse version then the likely cause is that the APIs have changed and this
+ * hack will need to be updated to track the change.
+ * <p>
+ * @see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=300408">Eclipse bug 300408</a>
+ *
+ * @author Éamonn McManus
+ */
+class EclipseHack {
+  private final ProcessingEnvironment processingEnv;
+
+  EclipseHack(ProcessingEnvironment processingEnv) {
+    this.processingEnv = processingEnv;
+  }
+
+  /**
+   * Reorders the properties (abstract methods) in the given list to correspond to the order found
+   * by parsing the source code of the given type. In environments other than Eclipse this method
+   * has no effect.
+   */
+  void reorderProperties(List<RetrofitProcessor.Property> properties) {
+    // Eclipse sorts methods in each class. Because of the way we construct the list, we will see
+    // all the abstract property methods from a given class or interface consecutively. So we can
+    // fix each sublist independently.
+    int index = 0;
+    while (index < properties.size()) {
+      TypeElement owner = properties.get(index).getOwner();
+      int nextIndex = index + 1;
+      while (nextIndex < properties.size() && properties.get(nextIndex).getOwner().equals(owner)) {
+        nextIndex++;
+      }
+      List<RetrofitProcessor.Property> subList = properties.subList(index, nextIndex);
+      reorderProperties(owner, subList);
+      index = nextIndex;
+    }
+  }
+
+  private void reorderProperties(TypeElement type, List<RetrofitProcessor.Property> properties) {
+    PropertyOrderer propertyOrderer = getPropertyOrderer(type);
+    if (propertyOrderer == null) {
+      return;
+    }
+    final ImmutableList<String> order;
+    try {
+      order = propertyOrderer.determinePropertyOrder();
+    } catch (IOException e) {
+      processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE, e.toString());
+      return;
+    }
+    // We expect that all the properties will be found, but if not then we won't try reordering.
+    boolean allFound = true;
+    for (RetrofitProcessor.Property property : properties) {
+      allFound &= order.contains(property.getGetter());
+    }
+    if (allFound) {
+      // We successfully found the abstract methods corresponding to all the properties, so now
+      // reorder the List<Property> to reflect the order of the methods.
+      Comparator<RetrofitProcessor.Property> comparator = new Comparator<RetrofitProcessor.Property>() {
+        @Override
+        public int compare(RetrofitProcessor.Property a, RetrofitProcessor.Property b) {
+          String aName = a.getGetter();
+          String bName = b.getGetter();
+          return order.indexOf(aName) - order.indexOf(bName);
+        }
+      };
+      Collections.sort(properties, comparator);
+    }
+  }
+
+  private PropertyOrderer getPropertyOrderer(TypeElement type) {
+    try {
+      // If we are in Eclipse, then processingEnv will be an instance of
+      // org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeProcessingEnvImpl
+      // and we can access its getEnclosingIFile method to obtain an Eclipse
+      // org.eclipse.core.resources.IFile. Then we will access the
+      //   String getCharset();
+      // and
+      //   InputStream getContents();
+      // methods to access the whole source file that includes this class.
+      // If the class in question has not changed since Eclipse last succeessfully compiled it
+      // then the IFile will be the compiled class file rather than the source, and we will need
+      // to read the order of the methods out of the class file. The method
+      //    URI getRawLocationURI();
+      // will tell us this because the URI will end with .class instead of .java.
+      // If we are not in Eclipse then the reflection here will fail and we will return null,
+      // which will mean that the caller won't try to reorder.
+      Method getEnclosingIFile =
+          processingEnv.getClass().getMethod("getEnclosingIFile", Element.class);
+      final Object iFile = getEnclosingIFile.invoke(processingEnv, type);
+      URI uri = (URI) iFile.getClass().getMethod("getRawLocationURI").invoke(iFile);
+      if (uri.getPath().endsWith(".class")) {
+        return new BinaryPropertyOrderer(uri);
+      } else {
+        Method getCharset = iFile.getClass().getMethod("getCharset");
+        final String charset = (String) getCharset.invoke(iFile);
+        final Method getContents = iFile.getClass().getMethod("getContents");
+        Callable<Reader> readerProvider = new Callable<Reader>() {
+          @Override
+          public Reader call() throws Exception {
+            InputStream inputStream = (InputStream) getContents.invoke(iFile);
+            return new InputStreamReader(inputStream, charset);
+          }
+        };
+        return new SourcePropertyOrderer(type, readerProvider);
+      }
+    } catch (Exception e) {
+      // The method getRawLocationURI used above exists on the Eclipse IDE environment, but not on
+      // the batch compiler environment. However, the file can also be obtained from the TypeElement
+      // through the getFileName method.
+      if (!type.getClass().getName().toLowerCase().contains("eclipse")) {
+        // Guard against the case where a non-Eclipse type happens to have a getFileName method
+        return null;
+      }
+      try {
+        final String filename = (String) type.getClass().getMethod("getFileName").invoke(type);
+        Callable<Reader> readerProvider = new Callable<Reader>() {
+          @Override
+          public Reader call() throws Exception {
+            return new FileReader(filename);
+          }
+        };
+        return new SourcePropertyOrderer(type, readerProvider);
+      } catch (Exception e2) {
+        // Reflection failed (twice), so we are presumably not in Eclipse.
+        return null;
+      }
+    }
+  }
+
+  private interface PropertyOrderer {
+    ImmutableList<String> determinePropertyOrder() throws IOException;
+  }
+
+  private class SourcePropertyOrderer implements PropertyOrderer {
+    private final TypeElement type;
+    private final Callable<Reader> readerProvider;
+
+    /**
+     * Constructs an object that scans the source code of the given type and returns the names of
+     * all abstract methods directly declared in the type (not in nested types). The type itself may
+     * be nested inside another class. Returns an empty list if the order could not be determined.
+     *
+     * @param type The type whose source is being scanned.
+     * @param readerProvider A Callable that returns a Reader that will read the source of the whole
+     *     file in which the class is declared.
+     */
+    SourcePropertyOrderer(TypeElement type, Callable<Reader> readerProvider) {
+      this.type = type;
+      this.readerProvider = readerProvider;
+    }
+
+    @Override public ImmutableList<String> determinePropertyOrder() throws IOException {
+      Reader sourceReader;
+      try {
+        sourceReader = readerProvider.call();
+      } catch (Exception e) {
+        return ImmutableList.of();
+      }
+      try {
+        String packageName = TypeSimplifier.packageNameOf(type);
+        String className = type.getQualifiedName().toString();
+        AbstractMethodExtractor extractor = new AbstractMethodExtractor();
+        JavaTokenizer tokenizer = new JavaTokenizer(sourceReader);
+        ImmutableListMultimap<String, String> methodOrders =
+            extractor.abstractMethods(tokenizer, packageName);
+        return methodOrders.get(className);
+      } finally {
+        sourceReader.close();
+      }
+    }
+  }
+
+  private class BinaryPropertyOrderer implements PropertyOrderer {
+    private final URI classFileUri;
+
+    BinaryPropertyOrderer(URI classFileUri) {
+      this.classFileUri = classFileUri;
+    }
+
+    @Override
+    public ImmutableList<String> determinePropertyOrder() throws IOException {
+      InputStream inputStream = null;
+      try {
+        URL classFileUrl = classFileUri.toURL();
+        inputStream = classFileUrl.openStream();
+        AbstractMethodLister lister = new AbstractMethodLister(inputStream);
+        return lister.abstractNoArgMethods();
+      } finally {
+        if (inputStream != null) {
+          inputStream.close();
+        }
+      }
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/ErrorReporter.java b/retrofit-processor/src/main/java/retrofit/processor/ErrorReporter.java
new file mode 100644
index 000000000..4b3abd679
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/ErrorReporter.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+
+import javax.annotation.processing.Messager;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Element;
+import javax.tools.Diagnostic;
+
+/**
+ * Handle error reporting for an annotation processor.
+ *
+ * @see com.felipecsl.retrofit.mutable.Retrofit
+ * @author Éamonn McManus
+ */
+class ErrorReporter {
+  private final Messager messager;
+
+  ErrorReporter(ProcessingEnvironment processingEnv) {
+    this.messager = processingEnv.getMessager();
+  }
+
+  /**
+   * Issue a compilation warning.
+   *
+   * @param msg the text of the warning
+   * @param e the element to which it pertains
+   */
+  void reportWarning(String msg, Element e) {
+    messager.printMessage(Diagnostic.Kind.WARNING, msg, e);
+  }
+
+  /**
+   * Issue a compilation error. This method does not throw an exception, since we want to continue
+   * processing and perhaps report other errors. It is a good idea to introduce a test case in
+   * CompilationTest for any new call to reportError(...) to ensure that we continue correctly after
+   * an error.
+   *
+   * @param msg the text of the warning
+   * @param e the element to which it pertains
+   */
+  void reportError(String msg, Element e) {
+    messager.printMessage(Diagnostic.Kind.ERROR, msg, e);
+  }
+
+  /**
+   * Issue a compilation error and abandon the processing of this class. This does not prevent the
+   * processing of other classes.
+   *
+   * @param msg the text of the error
+   * @param e the element to which it pertains
+   */
+  void abortWithError(String msg, Element e) {
+    reportError(msg, e);
+    throw new AbortProcessingException();
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processor/src/main/java/retrofit/processor/GwtCompatibility.java b/retrofit-processor/src/main/java/retrofit/processor/GwtCompatibility.java
new file mode 100644
index 000000000..7a0b81d24
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/GwtCompatibility.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.base.Joiner;
+import com.google.common.base.Optional;
+import com.google.common.collect.Lists;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Name;
+import javax.lang.model.element.TypeElement;
+
+class GwtCompatibility {
+  private final Optional<AnnotationMirror> gwtCompatibleAnnotation;
+
+  GwtCompatibility(TypeElement type) {
+    Optional<AnnotationMirror> gwtCompatibleAnnotation = Optional.absent();
+    List<? extends AnnotationMirror> annotations = type.getAnnotationMirrors();
+    for (AnnotationMirror annotation : annotations) {
+      Name name = annotation.getAnnotationType().asElement().getSimpleName();
+      if (name.contentEquals("GwtCompatible")) {
+        gwtCompatibleAnnotation = Optional.of(annotation);
+      }
+    }
+    this.gwtCompatibleAnnotation = gwtCompatibleAnnotation;
+  }
+
+  Optional<AnnotationMirror> gwtCompatibleAnnotation() {
+    return gwtCompatibleAnnotation;
+  }
+
+  String gwtCompatibleAnnotationString() {
+    if (gwtCompatibleAnnotation.isPresent()) {
+      AnnotationMirror annotation = gwtCompatibleAnnotation.get();
+      TypeElement annotationElement = (TypeElement) annotation.getAnnotationType().asElement();
+      String annotationArguments;
+      if (annotation.getElementValues().isEmpty()) {
+        annotationArguments = "";
+      } else {
+        List<String> elements = Lists.newArrayList();
+        for (Map.Entry<ExecutableElement, AnnotationValue> entry :
+            Collections.unmodifiableMap(annotation.getElementValues()).entrySet()) {
+          elements.add(entry.getKey().getSimpleName() + " = " + entry.getValue());
+        }
+        annotationArguments = "(" + Joiner.on(", ").join(elements) + ")";
+      }
+      return "@" + annotationElement.getQualifiedName() + annotationArguments;
+    } else {
+      return "";
+    }
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processor/src/main/java/retrofit/processor/GwtSerialization.java b/retrofit-processor/src/main/java/retrofit/processor/GwtSerialization.java
new file mode 100644
index 000000000..2d3961752
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/GwtSerialization.java
@@ -0,0 +1,222 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.base.Optional;
+
+import org.apache.velocity.runtime.parser.node.SimpleNode;
+
+import java.io.IOException;
+import java.io.Writer;
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.SortedSet;
+import java.util.zip.CRC32;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
+import javax.tools.JavaFileObject;
+
+/**
+ * Generates GWT serialization code for {@code @Retrofit} classes also marked
+ * {@code @GwtCompatible(serializable = true)}.
+ *
+ * @author Éamonn McManus
+ */
+class GwtSerialization {
+  private final GwtCompatibility gwtCompatibility;
+  private final ProcessingEnvironment processingEnv;
+  private final TypeElement type;
+
+  GwtSerialization(
+      GwtCompatibility gwtCompatibility, ProcessingEnvironment processingEnv, TypeElement type) {
+    this.gwtCompatibility = gwtCompatibility;
+    this.processingEnv = processingEnv;
+    this.type = type;
+  }
+
+  private boolean shouldWriteGwtSerializer() {
+    Optional<AnnotationMirror> optionalGwtCompatible = gwtCompatibility.gwtCompatibleAnnotation();
+    if (optionalGwtCompatible.isPresent()) {
+      AnnotationMirror gwtCompatible = optionalGwtCompatible.get();
+      for (Map.Entry<ExecutableElement, AnnotationValue> entry :
+          Collections.unmodifiableMap(gwtCompatible.getElementValues()).entrySet()) {
+        if (entry.getKey().getSimpleName().contentEquals("serializable")
+            && entry.getValue().getValue().equals(true)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Writes the GWT serializer for the given type, if appropriate. An {@code @Retrofit} class gets
+   * a GWT serializer if it is annotated with {@code @GwtCompatible(serializable = true)}, where the
+   * {@code @GwtCompatible} annotation can come from any package.
+   *
+   * <p>If the type is com.example.Foo then the generated Retrofit subclass is
+   * com.example.Retrofit_Foo and the GWT serializer is
+   * com.example.Retrofit_Foo_CustomFieldSerializer.
+   *
+   * @param autoVars the template variables defined for this type.
+   */
+  void maybeWriteGwtSerializer(RetrofitTemplateVars autoVars) {
+    if (shouldWriteGwtSerializer()) {
+      GwtTemplateVars vars = new GwtTemplateVars();
+      vars.imports = autoVars.imports;
+      vars.pkg = autoVars.pkg;
+      vars.subclass = autoVars.subclass;
+      String className = (vars.pkg.isEmpty() ? "" : vars.pkg + ".") + vars.subclass
+          + "_CustomFieldSerializer";
+      vars.serializerClass = TypeSimplifier.simpleNameOf(className);
+      vars.props = new ArrayList<Property>();
+      for (RetrofitProcessor.Property prop : autoVars.props) {
+        vars.props.add(new Property(prop));
+      }
+      vars.classHashString = computeClassHash(autoVars.props);
+      String text = vars.toText();
+      writeSourceFile(className, text, type);
+    }
+  }
+
+  public static class Property {
+    private final RetrofitProcessor.Property property;
+    private final boolean isCastingUnchecked;
+
+    Property(RetrofitProcessor.Property property) {
+      this.property = property;
+      this.isCastingUnchecked = TypeSimplifier.isCastingUnchecked(property.getReturnType());
+    }
+
+    @Override public String toString() {
+      return property.toString();
+    }
+
+    public String getGetter() {
+      return property.getGetter();
+    }
+
+    public String getType() {
+      return property.getType();
+    }
+
+    /**
+     * Returns the suffix in serializer method names for values of the given type. For example,
+     * if the type is "int" then the returned value will be "Int" because the serializer methods
+     * are called readInt and writeInt. There are methods for all primitive types and String;
+     * every other type uses readObject and writeObject.
+     */
+    public String getGwtType() {
+      String type = property.getType();
+      if (property.getKind().isPrimitive()) {
+        return Character.toUpperCase(type.charAt(0)) + type.substring(1);
+      } else if (type.equals("String")) {
+        return "String";
+      } else {
+        return "Object";
+      }
+    }
+
+    /**
+     * Returns a string to be inserted before the call to the readFoo() call so that the expression
+     * can be assigned to the given type. For primitive types and String, the readInt() etc methods
+     * already return the right type so the string is empty. For other types, the string is a cast
+     * like "(Foo) ".
+     */
+    public String getGwtCast() {
+      if (property.getKind().isPrimitive() || getType().equals("String")) {
+        return "";
+      } else {
+        return "(" + getType() + ") ";
+      }
+    }
+
+    public boolean isCastingUnchecked() {
+      return isCastingUnchecked;
+    }
+  }
+
+  @SuppressWarnings("unused")  // some fields are only read through reflection
+  static class GwtTemplateVars extends TemplateVars {
+    /** The properties defined by the parent class's abstract methods. */
+    List<Property> props;
+
+    /** The fully-qualified names of the classes to be imported in the generated class. */
+    SortedSet<String> imports;
+
+    /**
+     * The package of the class with the {@code @Retrofit} annotation and its generated subclass.
+     */
+    String pkg;
+
+    /** The simple name of the generated subclass. */
+    String subclass;
+
+    /** The simple name of the generated GWT serializer class. */
+    String serializerClass;
+
+    /** A string that should change if any salient details of the serialized class change. */
+    String classHashString;
+
+    private static final SimpleNode TEMPLATE = parsedTemplateForResource("gwtserializer.vm");
+
+    @Override
+    SimpleNode parsedTemplate() {
+      return TEMPLATE;
+    }
+  }
+
+  private void writeSourceFile(String className, String text, TypeElement originatingType) {
+    try {
+      JavaFileObject sourceFile =
+          processingEnv.getFiler().createSourceFile(className, originatingType);
+      Writer writer = sourceFile.openWriter();
+      try {
+        writer.write(text);
+      } finally {
+        writer.close();
+      }
+    } catch (IOException e) {
+      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,
+          "Could not write generated class " + className + ": " + e);
+    }
+  }
+
+  private static final Charset UTF8 = Charset.forName("UTF-8");
+
+  private String computeClassHash(List<RetrofitProcessor.Property> props) {
+    TypeSimplifier typeSimplifier = new TypeSimplifier(
+        processingEnv.getTypeUtils(), "", new TypeMirrorSet(), null);
+    CRC32 crc = new CRC32();
+    update(crc, typeSimplifier.simplify(type.asType()) + ":");
+    for (RetrofitProcessor.Property prop : props) {
+      update(crc, prop.toString() + ":" + prop.getType() + ";");
+    }
+    return String.format("%08x", crc.getValue());
+  }
+
+  private static void update(CRC32 crc, String s) {
+    crc.update(s.getBytes(UTF8));
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/JavaTokenizer.java b/retrofit-processor/src/main/java/retrofit/processor/JavaTokenizer.java
new file mode 100644
index 000000000..b47afe4b4
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/JavaTokenizer.java
@@ -0,0 +1,204 @@
+/*
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import java.io.IOException;
+import java.io.Reader;
+
+/**
+ * A simplistic Java tokenizer that is just enough for {@link EclipseHack} to be able to scan Java
+ * classes to find their abstract methods in order. This tokenizer can assume that the source code
+ * is syntactically correct because the annotation processor won't run otherwise. It makes no effort
+ * to account for Unicode escapes like {@code \}{@code u1234} but it is hard to imagine that
+ * mattering. It also makes no effort to account for surrogate pairs, but again unless someone is
+ * using such a pair in the name of one of the abstract methods we are looking for that should not
+ * matter.
+ *
+ * @author Éamonn McManus
+ */
+class JavaTokenizer {
+  private final Reader reader;
+  private char c;
+  private static final char EOF = 0xffff;  // This is a noncharacter in the Unicode standard.
+
+  JavaTokenizer(Reader reader) {
+    this.reader = reader;
+    next();
+  }
+
+  /**
+   * Returns the next token from the source code, or null if there are no more tokens. It is not
+   * an error to call this method again after it has returned null, in which case it will return
+   * null again. Much information is discarded: for example all numeric and string literals are
+   * represented as {@code 0}. The returned string can be null but it cannot be empty, so it is safe
+   * to check its first character if it is not null.
+   */
+  String nextToken() {
+    // The invariant here is that when this method returns, c is the first character that is not
+    // part of the previous token. This avoids having to look ahead, or "unget" characters.
+    if (c == EOF) {
+      return null;
+    }
+    // First, skip all space, comments of both varieties, and slashes that are not part of comments.
+    // We're not interested in slashes for the analysis we do so this saves us from having to
+    // recover from reading both the / and the b in a/b before realizing it is not a comment.
+    skipSpaceAndCommentsAndSlashes();
+    if (c == EOF) {
+      return null;
+    }
+    if (c == '\'' || c == '"') {
+      // We represent all strings and character literals as 0 because we don't care about them.
+      skipCharacterOrStringLiteral();
+      return "0";
+    }
+    if (c == '.') {
+      // A dot might be the start of a floating point constant like .123 or it might be a standalone
+      // token. If it is followed by a digit then it is the first case, and we will fall into the
+      // next "if" to skip the number. Otherwise we return the dot token.
+      next();
+      if (!isAsciiDigit(c)) {
+        return ".";
+      }
+    }
+    if (isAsciiDigit(c)) {
+      // We represent all numbers as 0 because we don't care about them.
+      skipNumber();
+      return "0";
+    }
+    if (Character.isJavaIdentifierStart(c)) {
+      // We don't distinguish keywords from identifiers so anything that starts with a Java letter
+      // is an identifier, which we scan and return as a token.
+      return identifier();
+    }
+    char cc = c;
+    next();
+    return Character.toString(cc);
+  }
+
+  private static boolean isAsciiDigit(int c) {
+    return '0' <= c && c <= '9';
+  }
+
+  // Scan a Java identifier whose first character is c, and return with c being the first
+  // character after the identifier.
+  private String identifier() {
+    StringBuilder sb = new StringBuilder();
+    while (Character.isJavaIdentifierPart(c)) {
+      sb.append(c);
+      next();
+    }
+    return sb.toString();
+  }
+
+  // Scan a Java number whose first character is c, and return with c being the first character
+  // after the number. We use a very loose grammar to recognize numbers since we know that they
+  // must be syntactically correct.
+  private void skipNumber() {
+    boolean lastWasE = false;
+    while (c == '.' || Character.isLetterOrDigit(c) || (lastWasE && (c == '+' || c == '-'))) {
+      lastWasE = (c == 'e' || c == 'E');
+      next();
+    }
+  }
+
+  // Skip over space and comments and slashes. On return, c is the first character that is not
+  // any of these.
+  private void skipSpaceAndCommentsAndSlashes() {
+    while (true) {
+      if (Character.isWhitespace(c)) {
+        next();
+        continue;
+      }
+      if (c != '/') {
+        return;
+      }
+      next();
+      switch (c) {
+        case '/':
+          skipSlashSlashComment();
+          break;
+        case '*':
+          skipSlashStarComment();
+          break;
+      }
+      // Now c is either the first character after a comment or the character immediately after /
+      // that was neither // nor /*.
+    }
+  }
+
+  // Scan a // comment. On entry, c is the second / in the comment. Since we are going to be
+  // dropping all whitespace anyway we can return as soon as we see \n or \r with c equal to that.
+  private void skipSlashSlashComment() {
+    while (c != '\n' && c != '\r' && c != EOF) {
+      next();
+    }
+  }
+
+  // Scan a /* comment. On entry, c is the * in /* so we must skip it to avoid recognizing
+  // /*/ as a complete comment. On return, c is the character after */ .
+  private void skipSlashStarComment() {
+    next();
+    while (true) {
+      switch (c) {
+        case EOF:
+          return;
+        case '*':
+          next();
+          if (c == '/') {
+            next();
+            return;
+          }
+          break;
+        default:
+          next();
+          break;
+      }
+    }
+  }
+
+  // Scan a character literal ('a', '\'', etc) or a string literal ("aa", "\"foo\"", etc).
+  // On entry, c is the opening quote character and on return c is the character after the
+  // corresponding closing quote. The only special treatment is to skip the character after \
+  // so we don't prematurely stop when we see \' or \".
+  private void skipCharacterOrStringLiteral() {
+    char quote = c;  // ' or "
+    next();
+    while (c != quote && c != EOF) {
+      if (c == '\\') {
+        next();
+      }
+      next();
+    }
+    next();
+  }
+
+  // Set c to the next character from the input, or to EOF if there are no more characters.
+  private void next() {
+    if (c == EOF) {
+      return;
+    }
+    try {
+      int c1 = reader.read();
+      if (c1 < 0) {
+        c = EOF;
+      } else {
+        c = (char) c1;
+      }
+    } catch (IOException e) {
+      c = EOF;
+    }
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processor/src/main/java/retrofit/processor/MissingTypeException.java b/retrofit-processor/src/main/java/retrofit/processor/MissingTypeException.java
new file mode 100644
index 000000000..13c6d4f4b
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/MissingTypeException.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+/**
+ * Exception thrown in the specific case where processing of a class was abandoned because it
+ * required types that the class references to be present and they were not. This case is handled
+ * specially because it is possible that those types might be generated later during annotation
+ * processing, so we should reattempt the processing of the class in a later annotation processing
+ * round.
+ *
+ * @author Éamonn McManus
+ */
+@SuppressWarnings("serial")
+class MissingTypeException extends RuntimeException {
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/Reformatter.java b/retrofit-processor/src/main/java/retrofit/processor/Reformatter.java
new file mode 100644
index 000000000..bfe7f4302
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/Reformatter.java
@@ -0,0 +1,198 @@
+package retrofit.processor;
+
+/**
+ * Postprocessor that runs over the output of the template engine in order to make it look nicer.
+ * Mostly, this involves removing surplus horizontal and vertical space.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+class Reformatter {
+  static String fixup(String s) {
+    s = removeTrailingSpace(s);
+    s = compressBlankLines(s);
+    s = compressSpace(s);
+    return s;
+  }
+
+  private static String removeTrailingSpace(String s) {
+    // Remove trailing space from all lines. This is mainly to make it easier to find
+    // blank lines later.
+    if (!s.endsWith("\n")) {
+      s += '\n';
+    }
+    StringBuilder sb = new StringBuilder(s.length());
+    int start = 0;
+    while (start < s.length()) {
+      int nl = s.indexOf('\n', start);
+      int i = nl - 1;
+      while (i >= start && s.charAt(i) == ' ') {
+        i--;
+      }
+      sb.append(s.substring(start, i + 1)).append('\n');
+      start = nl + 1;
+    }
+    return sb.toString();
+  }
+
+  private static String compressBlankLines(String s) {
+    // Remove extra blank lines. An "extra" blank line is either a blank line where the previous
+    // line was also blank; or a blank line that appears inside parentheses or inside more than one
+    // set of braces. This means that we preserve blank lines inside our top-level class, but not
+    // within our generated methods.
+    StringBuilder sb = new StringBuilder(s.length());
+    int braces = 0;
+    int parens = 0;
+    for (int i = 0; i < s.length(); i++) {
+      char c = s.charAt(i);
+      switch (c) {
+        case '(':
+          parens++;
+          break;
+        case ')':
+          parens--;
+          break;
+        case '{':
+          braces++;
+          break;
+        case '}':
+          braces--;
+          break;
+        case '\n':
+          int j = i + 1;
+          while (j < s.length() && s.charAt(j) == '\n') {
+            j++;
+          }
+          if (j > i + 1) {
+            if (parens == 0 && braces <= 1) {
+              sb.append("\n");
+            }
+            i = j - 1;
+          }
+          break;
+      }
+      sb.append(c);
+    }
+    return sb.toString();
+  }
+
+  private static String compressSpace(String s) {
+    // Remove extra spaces. An "extra" space is one that is not part of the indentation at the start
+    // of a line, and where the next character is also a space or a right paren or a semicolon
+    // or a comma, or the preceding character is a left paren.
+    // TODO(user): consider merging all three passes using this tokenization approach.
+    StringBuilder sb = new StringBuilder(s.length());
+    Tokenizer tokenizer = new Tokenizer(s);
+    int len = s.length();
+    int end;
+    for (int start = 0; start < len; start = end) {
+      end = tokenizer.tokenEnd(start);
+      if (s.charAt(start) == ' ') {
+        // Since we consider a newline plus following indentation to be a single token, we only
+        // see a token starting with ' ' if it is in the middle of a line.
+        if (sb.charAt(sb.length() - 1) == '(') {
+          continue;
+        }
+        // Since we ensure that the tokenized string ends with \n, and a whitespace token stops
+        // at \n, it is safe to look at end.
+        char nextC = s.charAt(end);
+        if (",;)".indexOf(nextC) >= 0) {
+          continue;
+        }
+        sb.append(' ');
+      } else {
+        sb.append(s.substring(start, end));
+      }
+    }
+    return sb.toString();
+  }
+
+  // A simplistic Java tokenizer. This is different from the one in JavaTokenizer (which is only
+  // needed for EclipseHack). The needs of the two tokenizers are very different: JavaTokenizer is
+  // only needed to scan through an existing source file to find abstract method declarations, so
+  // it can discard everything that isn't needed for that, including comments and string literals
+  // for example. Meanwhile, this Tokenizer needs to return a sequence of tokens that can be used
+  // to reconstruct the source code. JavaTokenizer also operates on a Reader (which in practice is
+  // coming from a file), while here we already have the source code in a String, which means that
+  // we can just return token boundaries rather than the tokens themselves.
+  //
+  // We are not dealing with arbitrary user code so we can assume there are no exotic things like
+  // tabs or Unicode escapes that resolve into quotes. The purpose of the tokenizer here is to
+  // return a sequence of offsets that split the string up in a way that allows us to work with
+  // spaces without having to worry whether they are inside strings or comments. The particular
+  // properties we use are that every string and character literal and every comment is a single
+  // token; every newline plus all following indentation is a single token; and every other string
+  // of consecutive spaces outside a comment or literal is a single token. That means that we can
+  // safely compress a token that starts with a space into a single space, without falsely removing
+  // indentation or changing the contents of strings.
+  private static class Tokenizer {
+    private final String s;
+
+    Tokenizer(String s) {
+      if (!s.endsWith("\n")) {
+        s += "\n";
+        // This allows us to avoid checking for the end of the string in most cases.
+      }
+      this.s = s;
+    }
+
+    int tokenEnd(int start) {
+      if (start >= s.length()) {
+        return s.length();
+      }
+      switch (s.charAt(start)) {
+        case ' ':
+        case '\n':
+          return spaceEnd(start);
+        case '/':
+          if (s.charAt(start + 1) == '*') {
+            return blockCommentEnd(start);
+          } else if (s.charAt(start + 1) == '/') {
+            return lineCommentEnd(start);
+          } else {
+            return start + 1;
+          }
+        case '\'':
+        case '"':
+          return quoteEnd(start);
+        default:
+          // Every other character is considered to be its own token.
+          return start + 1;
+      }
+    }
+
+    int spaceEnd(int start) {
+      assert s.charAt(start) == ' ' || s.charAt(start) == '\n';
+      int i;
+      for (i = start + 1; i < s.length() && s.charAt(i) == ' '; i++) {
+      }
+      return i;
+    }
+
+    int blockCommentEnd(int start) {
+      assert s.charAt(start) == '/' && s.charAt(start + 1) == '*';
+      int i;
+      for (i = start + 1; s.charAt(i) != '*' || s.charAt(i + 1) != '/'; i++) {
+      }
+      return i;
+    }
+
+    int lineCommentEnd(int start) {
+      assert s.charAt(start) == '/' && s.charAt(start + 1) == '/';
+      int end = s.indexOf('\n', start + 2);
+      assert end > 0;
+      return end;
+    }
+
+    int quoteEnd(int start) {
+      char quote = s.charAt(start);
+      assert quote == '\'' || quote == '"';
+      int i;
+      for (i = start + 1; s.charAt(i) != quote; i++) {
+        if (s.charAt(i) == '\\') {
+          i++;
+        }
+      }
+      return i + 1;
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitBuilderProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitBuilderProcessor.java
new file mode 100644
index 000000000..0561b783d
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitBuilderProcessor.java
@@ -0,0 +1,97 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import static com.google.auto.common.MoreElements.isAnnotationPresent;
+
+import retrofit.http.Retrofit;
+import com.google.auto.common.MoreElements;
+import com.google.auto.common.SuperficialValidation;
+import com.google.auto.service.AutoService;
+import com.google.common.collect.ImmutableSet;
+
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
+
+/**
+ * Annotation processor that checks that the type that {@link Retrofit.Builder} is applied to is
+ * nested inside an {@code @Retrofit} class. The actual code generation for builders is done in
+ * {@link RetrofitProcessor}.
+ *
+ * @author Éamonn McManus
+ */
+@AutoService(Processor.class)
+public class RetrofitBuilderProcessor extends AbstractProcessor {
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    return ImmutableSet.of(
+        Retrofit.Builder.class.getCanonicalName(), Retrofit.Validate.class.getCanonicalName());
+  }
+
+  @Override
+  public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latest();
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    Set<? extends Element> builderTypes =
+        roundEnv.getElementsAnnotatedWith(Retrofit.Builder.class);
+    if (!SuperficialValidation.validateElements(builderTypes)) {
+      return false;
+    }
+    for (Element annotatedType : builderTypes) {
+      // Double-check that the annotation is there. Sometimes the compiler gets confused in case of
+      // erroneous source code. SuperficialValidation should protect us against this but it doesn't
+      // cost anything to check again.
+      if (isAnnotationPresent(annotatedType, Retrofit.Builder.class)) {
+        validate(
+            annotatedType,
+            "@Retrofit.Builder can only be applied to a class or interface inside an"
+                + " @Retrofit class");
+      }
+    }
+
+    Set<? extends Element> validateMethods =
+        roundEnv.getElementsAnnotatedWith(Retrofit.Validate.class);
+    if (!SuperficialValidation.validateElements(validateMethods)) {
+      return false;
+    }
+    for (Element annotatedMethod : validateMethods) {
+      if (isAnnotationPresent(annotatedMethod, Retrofit.Validate.class)) {
+        validate(
+            annotatedMethod,
+            "@Retrofit.Validate can only be applied to a method inside an @Retrofit class");
+      }
+    }
+    return false;
+  }
+
+  private void validate(Element annotatedType, String errorMessage) {
+    Element container = annotatedType.getEnclosingElement();
+    if (!MoreElements.isAnnotationPresent(container, Retrofit.class)) {
+      processingEnv.getMessager().printMessage(
+          Diagnostic.Kind.ERROR, errorMessage, annotatedType);
+    }
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
new file mode 100644
index 000000000..f1b86b708
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -0,0 +1,1506 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ * Copyright (C) 2012 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import retrofit.http.Retrofit;
+import retrofit.RetrofitError;
+import retrofit.Callback;
+import com.google.auto.service.AutoService;
+import com.google.common.base.Functions;
+import com.google.common.base.Function;
+import com.google.common.base.Joiner;
+import com.google.common.base.Optional;
+import com.google.common.base.Throwables;
+import com.google.common.collect.FluentIterable;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
+
+import java.beans.Introspector;
+import java.io.IOException;
+import java.io.Serializable;
+import java.io.Writer;
+import java.lang.annotation.Annotation;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.BitSet;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
+
+import javax.annotation.Generated;
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+import javax.tools.JavaFileObject;
+import javax.lang.model.type.MirroredTypeException;
+
+/**
+ * Javac annotation processor (compiler plugin) for value types; user code never references this
+ * class.
+ *
+ * @author Éamonn McManus
+ * @see retrofit.http.Retrofit
+ */
+@AutoService(Processor.class)
+public class RetrofitProcessor extends AbstractProcessor {
+  public RetrofitProcessor() {
+  }
+
+  @Override
+  public Set<String> getSupportedAnnotationTypes() {
+    return ImmutableSet.of(Retrofit.class.getName());
+  }
+
+  @Override
+  public SourceVersion getSupportedSourceVersion() {
+    return SourceVersion.latestSupported();
+  }
+
+  private ErrorReporter errorReporter;
+
+  /**
+   * Qualified names of {@code @Retrofit} classes that we attempted to process but had to abandon
+   * because we needed other types that they referenced and those other types were missing.
+   */
+  private final List<String> deferredTypeNames = new ArrayList<String>();
+
+  @Override
+  public synchronized void init(ProcessingEnvironment processingEnv) {
+    super.init(processingEnv);
+    errorReporter = new ErrorReporter(processingEnv);
+  }
+
+  @Override
+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+    List<TypeElement> deferredTypes = new ArrayList<TypeElement>();
+    for (String deferred : deferredTypeNames) {
+      deferredTypes.add(processingEnv.getElementUtils().getTypeElement(deferred));
+    }
+    if (roundEnv.processingOver()) {
+      // This means that the previous round didn't generate any new sources, so we can't have found
+      // any new instances of @Retrofit; and we can't have any new types that are the reason a type
+      // was in deferredTypes.
+      for (TypeElement type : deferredTypes) {
+        errorReporter.reportError("Did not generate @Retrofit class for " + type.getQualifiedName()
+            + " because it references undefined types", type);
+      }
+      return false;
+    }
+    Collection<? extends Element> annotatedElements =
+        roundEnv.getElementsAnnotatedWith(Retrofit.class);
+    List<TypeElement> types = new ImmutableList.Builder<TypeElement>()
+        .addAll(deferredTypes)
+        .addAll(ElementFilter.typesIn(annotatedElements))
+        .build();
+    deferredTypeNames.clear();
+    for (TypeElement type : types) {
+      try {
+        processType(type);
+      } catch (AbortProcessingException e) {
+        // We abandoned this type; continue with the next.
+      } catch (MissingTypeException e) {
+        // We abandoned this type, but only because we needed another type that it references and
+        // that other type was missing. It is possible that the missing type will be generated by
+        // further annotation processing, so we will try again on the next round (perhaps failing
+        // again and adding it back to the list). We save the name of the @Retrofit type rather
+        // than its TypeElement because it is not guaranteed that it will be represented by
+        // the same TypeElement on the next round.
+        deferredTypeNames.add(type.getQualifiedName().toString());
+      } catch (RuntimeException e) {
+        // Don't propagate this exception, which will confusingly crash the compiler.
+        // Instead, report a compiler error with the stack trace.
+        String trace = Throwables.getStackTraceAsString(e);
+        errorReporter.reportError("@Retrofit processor threw an exception: " + trace, type);
+      }
+    }
+    return false;  // never claim annotation, because who knows what other processors want?
+  }
+
+  private String generatedClassName(TypeElement type, String prefix) {
+    String name = type.getSimpleName().toString();
+    while (type.getEnclosingElement() instanceof TypeElement) {
+      type = (TypeElement) type.getEnclosingElement();
+      name = type.getSimpleName() + "_" + name;
+    }
+    String pkg = TypeSimplifier.packageNameOf(type);
+    String dot = pkg.isEmpty() ? "" : ".";
+    return pkg + dot + prefix + name;
+  }
+
+  private String generatedSubclassName(TypeElement type) {
+    return generatedClassName(type, "Retrofit_");
+  }
+
+  public interface Action1<T> {
+      void call(T t);
+  }
+
+  private void onAnnotationForProperty(AnnotationMirror annotation) {
+      onAnnotationForProperty.call(annotation);
+  }
+
+  private Action1<? super AnnotationMirror> onAnnotationForProperty;
+
+  private void annotationForProperty(Action1<? super AnnotationMirror> onAnnotationForProperty) {
+      this.onAnnotationForProperty = onAnnotationForProperty;
+  }
+
+  public static class Part {
+    private final String name;
+    private final String mimeType;
+    private final boolean isFile;
+    private final boolean isTypedFile;
+    private final boolean isTypedString;
+    private final boolean isTypedByteArray;
+
+    public Part(String name, String mimeType, boolean isFile, boolean isTypedFile, boolean isTypedString, boolean isTypedByteArray) {
+      this.name = name;
+      this.mimeType = mimeType;
+      this.isFile = isFile;
+      this.isTypedFile = isTypedFile;
+      this.isTypedString = isTypedString;
+      this.isTypedByteArray = isTypedByteArray;
+    }
+
+    public String getName() {
+      return name;
+    }
+
+    public String getMimeType() {
+      return mimeType;
+    }
+    public boolean isFile() {
+      return isFile;
+    }
+    public boolean isTypedFile() {
+      return isTypedFile;
+    }
+    public boolean isTypedString() {
+      return isTypedString;
+    }
+    public boolean isTypedByteArray() {
+      return isTypedByteArray;
+    }
+  }
+
+  /**
+   * A property of an {@code @Retrofit} class, defined by one of its abstract methods.
+   * An instance of this class is made available to the Velocity template engine for
+   * each property. The public methods of this class define JavaBeans-style properties
+   * that are accessible from templates. For example {@link #getType()} means we can
+   * write {@code $p.type} for a Velocity variable {@code $p} that is a {@code Property}.
+   */
+  public static class Property {
+    private final String name;
+    private final String identifier;
+    private final ExecutableElement method;
+    private final String type;
+    private String typeArgs;
+    private String typeArgs2;
+    private final ImmutableList<String> annotations;
+    private final String args;
+    private final String path;
+    private final Map<String, String> queries;
+    private final List<String> queryMaps;
+    private final List<String> queryBundles;
+    private final boolean isGet;
+    private final boolean isPut;
+    private final boolean isPost;
+    private final boolean isDelete;
+    private final boolean isHead;
+    private final boolean isObservable; // returnType Observable
+    private final boolean isResponseType; // returnType == Response || returnType<Response>
+    private final boolean isVoid;
+    private final boolean isBlocking;
+    private final String body;
+    private final String callbackType;
+    private final TypeMirror callbackTypeMirror;
+    private final String callbackArg;
+    private final ProcessingEnvironment processingEnv;
+    private final TypeSimplifier typeSimplifier;
+    private final List<String> permissions;
+    private final Map<String, String> headers;
+    private final Map<String, String> fields;
+    private final Map<String, Part> parts;
+    private String callbackName;
+    public final String converter;
+    public String gsonConverter = "";
+    public final String errorHandler;
+    public final String logLevel;
+
+    Property(
+        String name,
+        String identifier,
+        ExecutableElement method,
+        String type,
+        TypeSimplifier typeSimplifier,
+        ProcessingEnvironment processingEnv
+        ) {
+      this.name = name;
+      this.identifier = identifier;
+      this.method = method;
+      this.type = type;
+      this.typeSimplifier = typeSimplifier;
+      this.processingEnv = processingEnv;
+      this.annotations = buildAnnotations(typeSimplifier);
+      this.args = formalTypeArgsString(method);
+      this.path = buildPath(method);
+      this.queries = buildQueries(method);
+      this.queryMaps = buildQueryMaps(method);
+      this.queryBundles = buildQueryBundles(method);
+      this.isGet = buildIsGet(method);
+      this.isPut = buildIsPut(method);
+      this.isPost = buildIsPost(method);
+      this.isDelete = buildIsDelete(method);
+      this.isHead = buildIsHead(method);
+      this.isObservable = buildIsObservable(method);
+      this.body = buildBody(method);
+      this.callbackTypeMirror = buildCallbackTypeMirror(method);
+      //this.callbackType = buildTypeArgument(callbackTypeMirror);
+      this.callbackType = buildCallbackTypeArgument(method);
+      this.callbackArg = buildTypeArguments(callbackType);
+      this.isBlocking = !isCallback() && !isObservable();
+      this.isResponseType = buildIsResponseType(method);
+      if (isObservable()) {
+        this.typeArgs = buildTypeArguments(type); // Observable<List<String>> -> List<String>
+        this.typeArgs2 = buildTypeArguments(typeArgs); // Observable<List<String>> -> String
+      } else if (isCallback()) {
+        this.typeArgs = callbackType;  // Callback<List<String>> -> List<String>
+        this.typeArgs2 = buildTypeArguments(typeArgs); // Callback<List<String>> -> String
+      } else { // isBlocking
+        this.typeArgs = type;
+      }
+      if ("".equals(typeArgs)) typeArgs = callbackType;
+      this.isVoid = buildIsVoid(method);
+      this.permissions = buildPermissions(method);
+      this.headers = buildHeaders(method);
+      this.fields = buildFields(method);
+      this.parts = buildParts(method);
+      this.converter = buildConverter(method);
+      this.errorHandler = buildErrorHandler(method);
+      this.logLevel = buildLogLevel(method);
+    }
+
+    private String buildConverter(ExecutableElement method) {
+      String converterName = "";
+      Retrofit.Converter converterAnnotation = method.getAnnotation(Retrofit.Converter.class);
+      if (converterAnnotation != null) {
+        TypeMirror converter = null;
+        try {
+          converter = getTypeMirror(processingEnv, converterAnnotation.value());
+        } catch (MirroredTypeException mte) {
+          // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+          converter = mte.getTypeMirror();
+        }
+        converterName = typeSimplifier.simplify(converter);
+        TypeMirror gsonConverterType = getTypeMirror(processingEnv, retrofit.converter.GsonConverter.class);
+        Types typeUtils = processingEnv.getTypeUtils();
+        if (typeUtils.isSubtype(gsonConverterType, converter)) {
+          this.gsonConverter = converterName;
+        }
+      }
+      return converterName;
+    }
+
+    private String buildErrorHandler(ExecutableElement method) {
+      String name = "";
+      Retrofit.ErrorHandler errorHandlerAnnotation = method.getAnnotation(Retrofit.ErrorHandler.class);
+      if (errorHandlerAnnotation != null) {
+        TypeMirror errorHandler = null;
+        try {
+          errorHandler = getTypeMirror(processingEnv, errorHandlerAnnotation.value());
+        } catch (MirroredTypeException mte) {
+          // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+          errorHandler = mte.getTypeMirror();
+        }
+        name = typeSimplifier.simplify(errorHandler);
+      }
+      return name;
+    }
+
+    private String buildLogLevel(ExecutableElement method) {
+      Retrofit.LogLevel logLevelAnnotation = method.getAnnotation(Retrofit.LogLevel.class);
+      if (logLevelAnnotation != null) {
+        return ""; // TODO
+      }
+      return "";
+    }
+
+    private boolean buildIsObservable(ExecutableElement method) {
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeMirror obsType = getTypeMirror(processingEnv, rx.Observable.class);
+      TypeMirror returnType = method.getReturnType();
+
+      if (returnType instanceof DeclaredType) {
+        List<? extends TypeMirror> params = ((DeclaredType) returnType).getTypeArguments();
+        if (params.size() == 1) {
+          obsType = typeUtils.getDeclaredType((TypeElement) typeUtils.asElement(obsType), new TypeMirror[] {params.get(0)});
+
+          return typeUtils.isSubtype(returnType, obsType);
+        }
+      }
+
+      return false;
+    }
+
+    private boolean buildIsVoid(ExecutableElement method) {
+      return method.getReturnType().getKind() == TypeKind.VOID;
+    }
+
+    private boolean buildIsResponseType(ExecutableElement method) {
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeMirror responseType = getTypeMirror(processingEnv, retrofit.client.Response.class);
+      TypeMirror returnType = method.getReturnType();
+
+      if (isObservable()) {
+        List<? extends TypeMirror> params = ((DeclaredType) returnType).getTypeArguments();
+        if (params.size() == 1) { // Observable<Response>
+          returnType = params.get(0); // Response
+          return typeUtils.isSubtype(returnType, responseType);
+        }
+      } else if (isCallback()) {
+        List<? extends TypeMirror> params = ((DeclaredType) callbackTypeMirror).getTypeArguments();
+        if (params.size() == 1) { //  Callback<Response>
+          returnType = params.get(0); // Response
+          return typeUtils.isSubtype(returnType, responseType);
+        }
+      }
+
+      return typeUtils.isSubtype(returnType, responseType); // isBlocking()
+    }
+
+    private String buildTypeArguments(String type) {
+      Pattern pattern = Pattern.compile( "<(.*)>" );
+      Matcher m = pattern.matcher(type);
+      if (m.find()) return m.group(1);
+      return "";
+    }
+
+    private TypeMirror buildCallbackTypeMirror(ExecutableElement method) {
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeMirror callback = getTypeMirror(processingEnv, Callback.class);
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        TypeMirror type = parameter.asType();
+        if (type instanceof DeclaredType) {
+          List<? extends TypeMirror> params = ((DeclaredType) type).getTypeArguments();
+          if (params.size() == 1) {
+            callback = typeUtils.getDeclaredType((TypeElement) typeUtils.asElement(callback), new TypeMirror[] {params.get(0)});
+
+            if (typeUtils.isSubtype(type, callback)) {
+              this.callbackName = parameter.getSimpleName().toString();
+              return callback;
+            }
+          }
+        }
+      }
+      return null;
+    }
+
+    private String buildCallbackTypeArgument(ExecutableElement method) {
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeMirror callback = getTypeMirror(processingEnv, Callback.class);
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        TypeMirror type = parameter.asType();
+        if (type instanceof DeclaredType) {
+          List<? extends TypeMirror> params = ((DeclaredType) type).getTypeArguments();
+          if (params.size() == 1) {
+            callback = typeUtils.getDeclaredType((TypeElement) typeUtils.asElement(callback), new TypeMirror[] {params.get(0)});
+
+            if (typeUtils.isSubtype(type, callback)) {
+              return typeSimplifier.simplify(params.get(0));
+            }
+          }
+        }
+      }
+      return "";
+    }
+
+    private String buildTypeArgument(TypeMirror type) {
+      if (type != null) {
+        List<? extends TypeMirror> params = ((DeclaredType) type).getTypeArguments();
+        return typeSimplifier.simplify(params.get(0));
+      }
+      return "";
+    }
+
+    public boolean buildIsGet(ExecutableElement method) {
+      // TODO duplicated routine
+      return method.getAnnotation(Retrofit.GET.class) != null || method.getAnnotation(retrofit.http.HEAD.class) != null;
+    }
+
+    public boolean buildIsPost(ExecutableElement method) {
+      // TODO duplicated routine
+      return method.getAnnotation(Retrofit.POST.class) != null || method.getAnnotation(retrofit.http.HEAD.class) != null;
+    }
+
+    public boolean buildIsPut(ExecutableElement method) {
+      // TODO duplicated routine
+      return method.getAnnotation(Retrofit.PUT.class) != null || method.getAnnotation(retrofit.http.HEAD.class) != null;
+    }
+
+    public boolean buildIsDelete(ExecutableElement method) {
+      // TODO duplicated routine
+      return method.getAnnotation(Retrofit.DELETE.class) != null || method.getAnnotation(retrofit.http.HEAD.class) != null;
+    }
+
+    public boolean buildIsHead(ExecutableElement method) {
+      // TODO duplicated routine
+      return method.getAnnotation(Retrofit.HEAD.class) != null || method.getAnnotation(retrofit.http.HEAD.class) != null;
+    }
+
+    public String buildBody(ExecutableElement method) {
+      String body = "";
+
+      if (method.getAnnotation(Retrofit.POST.class) == null && method.getAnnotation(retrofit.http.POST.class) == null) return body;
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        if (parameter.getAnnotation(Retrofit.Body.class) != null || method.getAnnotation(retrofit.http.Body.class) != null) {
+          body = parameter.getSimpleName().toString();
+        }
+      }
+      return body;
+    }
+
+    public List<String> buildPermissions(ExecutableElement method) {
+      Retrofit.GET get = method.getAnnotation(Retrofit.GET.class);
+      Retrofit.PUT put = method.getAnnotation(Retrofit.PUT.class);
+      Retrofit.POST post = method.getAnnotation(Retrofit.POST.class);
+      Retrofit.DELETE delete = method.getAnnotation(Retrofit.DELETE.class);
+      Retrofit.HEAD head = method.getAnnotation(Retrofit.HEAD.class);
+      if (get != null) return Arrays.asList(get.permissions());
+      if (put != null) return Arrays.asList(put.permissions());
+      if (post != null) return Arrays.asList(post.permissions());
+      if (delete != null) return Arrays.asList(delete.permissions());
+      if (head != null) return Arrays.asList(head.permissions());
+      return Collections.emptyList();
+    }
+
+    public Map<String, String> buildHeaders(ExecutableElement method) {
+      Map<String, String> map = new HashMap<String, String>();
+      String[] headers;
+
+      Retrofit.Headers headersAnnotation = method.getAnnotation(Retrofit.Headers.class);
+      retrofit.http.Headers headers1Annotation = method.getAnnotation(retrofit.http.Headers.class);
+      if (headersAnnotation != null) {
+        headers = headersAnnotation.value();
+      } else if (headers1Annotation != null) {
+        headers = headers1Annotation.value();
+      } else {
+        return Collections.emptyMap();
+      }
+
+      for (String header : headers) {
+        String[] tokens = header.split(":");
+        map.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+      }
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        Retrofit.Header header = parameter.getAnnotation(Retrofit.Header.class);
+        retrofit.http.Header header1 = parameter.getAnnotation(retrofit.http.Header.class);
+        String key = null;
+        if (header != null) {
+          key = header.value().equals("") ? parameter.getSimpleName().toString() : header.value();
+        } else if (header1 != null) {
+          key = header1.value().equals("") ? parameter.getSimpleName().toString() : header1.value();
+        } else {
+          continue;
+        }
+        map.put(key, parameter.getSimpleName().toString());
+      }
+
+      return map;
+    }
+
+    public Map<String, String> buildFields(ExecutableElement method) {
+      Map<String, String> map = new HashMap<String, String>();
+      // TODO FieldMap
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        Retrofit.Field field = parameter.getAnnotation(Retrofit.Field.class);
+        retrofit.http.Field field1 = parameter.getAnnotation(retrofit.http.Field.class);
+        String key = null;
+        if (field != null) {
+          key = field.value().equals("") ? parameter.getSimpleName().toString() : field.value();
+        } else if (field1 != null) {
+          key = field1.value().equals("") ? parameter.getSimpleName().toString() : field1.value();
+        } else {
+          continue;
+        }
+        map.put(key, parameter.getSimpleName().toString());
+      }
+
+      return map;
+    }
+
+    public Map<String, Part> buildParts(ExecutableElement method) {
+      Map<String, Part> map = new HashMap<String, Part>();
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeMirror fileType = getTypeMirror(processingEnv, java.io.File.class);
+      TypeMirror typedFileType = getTypeMirror(processingEnv, retrofit.mime.TypedFile.class);
+      TypeMirror typedStringType = getTypeMirror(processingEnv, retrofit.mime.TypedString.class);
+      TypeMirror typedByteArrayType = getTypeMirror(processingEnv, retrofit.mime.TypedByteArray.class);
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        String mimeType = "";
+        String value = "";
+        Retrofit.Part partAnnotation = parameter.getAnnotation(Retrofit.Part.class);
+        retrofit.http.Part part1Annotation = parameter.getAnnotation(retrofit.http.Part.class);
+        if (partAnnotation != null) {
+          value = partAnnotation.value();
+          mimeType = partAnnotation.mimeType();
+        } else if (part1Annotation != null) {
+          value = part1Annotation.value();
+        } else {
+          continue;
+        }
+
+        TypeMirror type = parameter.asType();
+        boolean isFile = typeUtils.isSubtype(type, fileType);
+        boolean isTypedFile = typeUtils.isSubtype(type, typedFileType);
+        boolean isTypedString = typeUtils.isSubtype(type, typedStringType);
+        boolean isTypedByteArray = typeUtils.isSubtype(type, typedByteArrayType);
+
+        String key = value.equals("") ? parameter.getSimpleName().toString() : value;
+        map.put(key, new Part(parameter.getSimpleName().toString(), mimeType, isFile, isTypedFile, isTypedString, isTypedByteArray));
+      }
+      return map;
+    }
+
+    // /{postId}
+    // /{userIdA}/friends/{userIdB}
+    // "/" + userIdA + "/friends/" + userIdB
+    // "/" + userIdA + "/friends/" + userIdB + ""
+    public String buildPath(ExecutableElement method) {
+      String fullPath = buildRawPath(method);
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        Retrofit.Path path = parameter.getAnnotation(Retrofit.Path.class);
+        retrofit.http.Path path1 = parameter.getAnnotation(retrofit.http.Path.class);
+        if ((path != null) && (!path.value().equals(""))) {
+          fullPath = fullPath.replace("{" + path.value() + "}", "\" + " +
+              parameter.getSimpleName().toString() + " + \"");
+        } else if ((path1 != null) && (!path1.value().equals(""))) {
+          fullPath = fullPath.replace("{" + path1.value() + "}", "\" + " +
+              parameter.getSimpleName().toString() + " + \"");
+        } else {
+          fullPath = fullPath.replace("{" + parameter.getSimpleName().toString() + "}", "\" + " +
+              parameter.getSimpleName().toString() + " + \"");
+        }
+      }
+
+      return fullPath.replaceAll("\\?.+", "");
+    }
+
+    public String buildRawPath(ExecutableElement method) {
+      // TODO duplicated routine
+      String rawPath = null;
+      Retrofit.GET get = method.getAnnotation(Retrofit.GET.class);
+      Retrofit.PUT put = method.getAnnotation(Retrofit.PUT.class);
+      Retrofit.POST post = method.getAnnotation(Retrofit.POST.class);
+      Retrofit.DELETE delete = method.getAnnotation(Retrofit.DELETE.class);
+      Retrofit.HEAD head = method.getAnnotation(Retrofit.HEAD.class);
+      if (get != null) rawPath = get.value();
+      if (put != null) rawPath = put.value();
+      if (post != null) rawPath = post.value();
+      if (delete != null) rawPath = delete.value();
+      if (head != null) rawPath = head.value();
+      retrofit.http.GET get1 = method.getAnnotation(retrofit.http.GET.class);
+      retrofit.http.PUT put1 = method.getAnnotation(retrofit.http.PUT.class);
+      retrofit.http.POST post1 = method.getAnnotation(retrofit.http.POST.class);
+      retrofit.http.DELETE delete1 = method.getAnnotation(retrofit.http.DELETE.class);
+      retrofit.http.HEAD head1 = method.getAnnotation(retrofit.http.HEAD.class);
+      if (get1 != null) rawPath = get1.value();
+      if (put1 != null) rawPath = put1.value();
+      if (post1 != null) rawPath = post1.value();
+      if (delete1 != null) rawPath = delete1.value();
+      if (head1 != null) rawPath = head1.value();
+      return rawPath;
+    }
+
+    public Map<String, String> buildQueries(ExecutableElement method) {
+      Map<String, String> map = new HashMap<String, String>();
+
+      String fullPath = buildRawPath(method);
+      if (fullPath.indexOf("?") != -1) {
+        fullPath = fullPath.replaceAll("^.*\\?", "");
+        String[] queries = fullPath.split("&");
+        for (String query : queries) {
+          String[] keyValue = query.split("=");
+          map.put(keyValue[0], "\"" + keyValue[1] + "\"");
+        }
+      }
+
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        String value = "";
+        Retrofit.Query query = parameter.getAnnotation(Retrofit.Query.class);
+        retrofit.http.Query query1 = parameter.getAnnotation(retrofit.http.Query.class);
+        if (query != null) {
+          value = query.value();
+        } else if (query1 != null) {
+          value = query1.value();
+        } else {
+          continue;
+        }
+
+        String key = value.equals("") ? parameter.getSimpleName().toString() : value;
+        map.put(key, parameter.getSimpleName().toString());
+      }
+
+      return map;
+    }
+
+    public List<String> buildQueryMaps(ExecutableElement method) {
+      List<String> queryMaps = new ArrayList<String>();
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        Retrofit.QueryMap queryMap = parameter.getAnnotation(Retrofit.QueryMap.class);
+        retrofit.http.QueryMap queryMap1 = parameter.getAnnotation(retrofit.http.QueryMap.class);
+        if (queryMap != null) {
+        } else if (queryMap1 != null) {
+        } else {
+          continue;
+        }
+
+        queryMaps.add(parameter.getSimpleName().toString());
+      }
+      return queryMaps;
+    }
+
+    public List<String> buildQueryBundles(ExecutableElement method) {
+      List<String> queryBundles = new ArrayList<String>();
+      List<? extends VariableElement> parameters = method.getParameters();
+      for (VariableElement parameter : parameters) {
+        Retrofit.QueryBundle queryBundle = parameter.getAnnotation(Retrofit.QueryBundle.class);
+        if (queryBundle == null) {
+          continue;
+        }
+
+        queryBundles.add(parameter.getSimpleName().toString());
+      }
+      return queryBundles;
+    }
+
+    private ImmutableList<String> buildAnnotations(TypeSimplifier typeSimplifier) {
+      ImmutableList.Builder<String> builder = ImmutableList.builder();
+
+      for (AnnotationMirror annotationMirror : method.getAnnotationMirrors()) {
+        TypeElement annotationElement =
+            (TypeElement) annotationMirror.getAnnotationType().asElement();
+        if (annotationElement.getQualifiedName().toString().equals(Override.class.getName())) {
+          // Don't copy @Override if present, since we will be adding our own @Override in the
+          // implementation.
+          continue;
+        }
+        // TODO(user): we should import this type if it is not already imported
+        AnnotationOutput annotationOutput = new AnnotationOutput(typeSimplifier);
+        builder.add(annotationOutput.sourceFormForAnnotation(annotationMirror));
+      }
+
+      return builder.build();
+    }
+
+    /**
+     * Returns the name of the property as it should be used when declaring identifiers (fields and
+     * parameters). If the original getter method was {@code foo()} then this will be {@code foo}.
+     * If it was {@code getFoo()} then it will be {@code foo}. If it was {@code getPackage()} then
+     * it will be something like {@code package0}, since {@code package} is a reserved word.
+     */
+    @Override
+    public String toString() {
+      return identifier;
+    }
+
+    /**
+     * Returns the name of the property as it should be used in strings visible to users. This is
+     * usually the same as {@code toString()}, except that if we had to use an identifier like
+     * "package0" because "package" is a reserved word, the name here will be the original
+     * "package".
+     */
+    public String getName() {
+      return name;
+    }
+
+    /**
+     * Returns the name of the getter method for this property as defined by the {@code @Retrofit}
+     * class. For property {@code foo}, this will be {@code foo} or {@code getFoo} or {@code isFoo}.
+     */
+    public String getGetter() {
+      return method.getSimpleName().toString();
+    }
+
+    TypeElement getOwner() {
+      return (TypeElement) method.getEnclosingElement();
+    }
+
+    TypeMirror getReturnType() {
+      return method.getReturnType();
+    }
+
+    public String getType() {
+      return type;
+    }
+
+    public String getTypeArgs() {
+      return typeArgs;
+    }
+
+    public String getTypeArgs2() {
+      return typeArgs2;
+    }
+
+    public TypeKind getKind() {
+      return method.getReturnType().getKind();
+    }
+
+    public String getCastType() {
+      return primitive() ? box(method.getReturnType().getKind()) : getType();
+    }
+
+    private String box(TypeKind kind) {
+      switch (kind) {
+        case BOOLEAN:
+          return "Boolean";
+        case BYTE:
+          return "Byte";
+        case SHORT:
+          return "Short";
+        case INT:
+          return "Integer";
+        case LONG:
+          return "Long";
+        case CHAR:
+          return "Character";
+        case FLOAT:
+          return "Float";
+        case DOUBLE:
+          return "Double";
+        default:
+          throw new RuntimeException("Unknown primitive of kind " + kind);
+        }
+    }
+
+    public boolean primitive() {
+      return method.getReturnType().getKind().isPrimitive();
+    }
+
+    public boolean isCallback() {
+      return (callbackType != null && !"".equals(callbackType));
+    }
+
+    public String getCallbackType() {
+      return callbackType;
+    }
+
+    public String getCallbackArg() {
+      return callbackArg;
+    }
+
+    public String getCallbackName() {
+      return callbackName;
+    }
+
+    public boolean isObservable() {
+      return isObservable;
+    }
+
+    public boolean isVoid() {
+      return isVoid;
+    }
+
+    public boolean isBlocking() {
+      return isBlocking;
+    }
+
+    public boolean isResponseType() {
+      return isResponseType;
+    }
+
+    public String getBody() {
+      return body;
+    }
+
+    public String getConverter() {
+      return converter;
+    }
+
+    public String getGsonConverter() {
+      return gsonConverter;
+    }
+
+    public String getErrorHandler() {
+      return errorHandler;
+    }
+
+    public String getLogLevel() {
+      return logLevel;
+    }
+
+    public List<String> getPermissions() {
+      return permissions;
+    }
+
+    public boolean isGet() {
+      return isGet;
+    }
+
+    public boolean isPut() {
+      return isPut;
+    }
+
+    public boolean isPost() {
+      return isPost;
+    }
+
+    public boolean isDelete() {
+      return isDelete;
+    }
+
+    public boolean isHead() {
+      return isHead;
+    }
+
+    public List<String> getAnnotations() {
+      return annotations;
+    }
+
+    public String getArgs() {
+      return args;
+    }
+
+    public String getPath() {
+      return path;
+    }
+
+    public Map<String, String> getQueries() {
+      return queries;
+    }
+
+    public List<String> getQueryMaps() {
+      return queryMaps;
+    }
+
+    public List<String> getQueryBundles() {
+      return queryBundles;
+    }
+
+    public Map<String, String> getHeaders() {
+      return headers;
+    }
+
+    public Map<String, String> getFields() {
+      return fields;
+    }
+
+    public Map<String, Part> getParts() {
+      return parts;
+    }
+
+    public boolean isNullable() {
+      for (AnnotationMirror annotationMirror : method.getAnnotationMirrors()) {
+        String name = annotationMirror.getAnnotationType().asElement().getSimpleName().toString();
+        if (name.equals("Nullable")) {
+          return true;
+        }
+      }
+      return false;
+    }
+
+    public String getAccess() {
+      Set<Modifier> mods = method.getModifiers();
+      if (mods.contains(Modifier.PUBLIC)) {
+        return "public ";
+      } else if (mods.contains(Modifier.PROTECTED)) {
+        return "protected ";
+      } else {
+        return "";
+      }
+    }
+  }
+
+  private static boolean isJavaLangObject(TypeElement type) {
+    return type.getSuperclass().getKind() == TypeKind.NONE && type.getKind() == ElementKind.CLASS;
+  }
+
+  private enum ObjectMethodToOverride {
+    NONE, TO_STRING, EQUALS, HASH_CODE, DESCRIBE_CONTENTS, WRITE_TO_PARCEL
+  }
+
+  private static ObjectMethodToOverride objectMethodToOverride(ExecutableElement method) {
+    String name = method.getSimpleName().toString();
+    switch (method.getParameters().size()) {
+      case 0:
+        if (name.equals("toString")) {
+          return ObjectMethodToOverride.TO_STRING;
+        } else if (name.equals("hashCode")) {
+          return ObjectMethodToOverride.HASH_CODE;
+        } else if (name.equals("describeContents")) {
+          return ObjectMethodToOverride.DESCRIBE_CONTENTS;
+        }
+        break;
+      case 1:
+        if (name.equals("equals")
+            && method.getParameters().get(0).asType().toString().equals("java.lang.Object")) {
+          return ObjectMethodToOverride.EQUALS;
+        }
+        break;
+      case 2:
+        if (name.equals("writeToParcel")
+            && method.getParameters().get(0).asType().toString().equals("android.os.Parcel")
+            && method.getParameters().get(1).asType().toString().equals("int")) {
+          return ObjectMethodToOverride.WRITE_TO_PARCEL;
+        }
+        break;
+    }
+    return ObjectMethodToOverride.NONE;
+  }
+
+  private void findLocalAndInheritedMethods(TypeElement type, List<ExecutableElement> methods) {
+    Types typeUtils = processingEnv.getTypeUtils();
+    Elements elementUtils = processingEnv.getElementUtils();
+    for (TypeMirror superInterface : type.getInterfaces()) {
+      findLocalAndInheritedMethods((TypeElement) typeUtils.asElement(superInterface), methods);
+    }
+    if (type.getSuperclass().getKind() != TypeKind.NONE) {
+      // Visit the superclass after superinterfaces so we will always see the implementation of a
+      // method after any interfaces that declared it.
+      findLocalAndInheritedMethods(
+          (TypeElement) typeUtils.asElement(type.getSuperclass()), methods);
+    }
+    // Add each method of this class, and in so doing remove any inherited method it overrides.
+    // This algorithm is quadratic in the number of methods but it's hard to see how to improve
+    // that while still using Elements.overrides.
+    List<ExecutableElement> theseMethods = ElementFilter.methodsIn(type.getEnclosedElements());
+    for (ExecutableElement method : theseMethods) {
+      if (!method.getModifiers().contains(Modifier.PRIVATE)) {
+        boolean alreadySeen = false;
+        for (Iterator<ExecutableElement> methodIter = methods.iterator(); methodIter.hasNext(); ) {
+          ExecutableElement otherMethod = methodIter.next();
+          if (elementUtils.overrides(method, otherMethod, type)) {
+            methodIter.remove();
+          } else if (method.getSimpleName().equals(otherMethod.getSimpleName())
+              && method.getParameters().equals(otherMethod.getParameters())) {
+            // If we inherit this method on more than one path, we don't want to add it twice.
+            alreadySeen = true;
+          }
+        }
+        if (!alreadySeen) {
+          /*
+          Retrofit.GET action = method.getAnnotation(Retrofit.GET.class);
+          System.out.printf(
+              "%s Action value = %s\n",
+              method.getSimpleName(),
+              action == null ? null : action.value() );
+          */
+          methods.add(method);
+        }
+      }
+    }
+  }
+
+  private void processType(TypeElement type) {
+    Retrofit autoValue = type.getAnnotation(Retrofit.class);
+    if (autoValue == null) {
+      // This shouldn't happen unless the compilation environment is buggy,
+      // but it has happened in the past and can crash the compiler.
+      errorReporter.abortWithError("annotation processor for @Retrofit was invoked with a type"
+          + " that does not have that annotation; this is probably a compiler bug", type);
+    }
+    if (type.getKind() != ElementKind.CLASS) {
+      errorReporter.abortWithError(
+          "@" + Retrofit.class.getName() + " only applies to classes", type);
+    }
+    if (ancestorIsRetrofit(type)) {
+      errorReporter.abortWithError("One @Retrofit class may not extend another", type);
+    }
+    if (implementsAnnotation(type)) {
+      errorReporter.abortWithError("@Retrofit may not be used to implement an annotation"
+          + " interface; try using @AutoAnnotation instead", type);
+    }
+    RetrofitTemplateVars vars = new RetrofitTemplateVars();
+    vars.pkg = TypeSimplifier.packageNameOf(type);
+    vars.origClass = TypeSimplifier.classNameOf(type);
+    vars.simpleClassName = TypeSimplifier.simpleNameOf(vars.origClass);
+    vars.subclass = TypeSimplifier.simpleNameOf(generatedSubclassName(type));
+    defineVarsForType(type, vars);
+    GwtCompatibility gwtCompatibility = new GwtCompatibility(type);
+    vars.gwtCompatibleAnnotation = gwtCompatibility.gwtCompatibleAnnotationString();
+    String text = vars.toText();
+    text = Reformatter.fixup(text);
+    writeSourceFile(generatedSubclassName(type), text, type);
+    GwtSerialization gwtSerialization = new GwtSerialization(gwtCompatibility, processingEnv, type);
+    gwtSerialization.maybeWriteGwtSerializer(vars);
+  }
+
+  private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
+    Types typeUtils = processingEnv.getTypeUtils();
+    List<ExecutableElement> methods = new ArrayList<ExecutableElement>();
+    findLocalAndInheritedMethods(type, methods);
+    determineObjectMethodsToGenerate(methods, vars);
+    ImmutableSet<ExecutableElement> methodsToImplement = methodsToImplement(methods);
+    Set<TypeMirror> types = new TypeMirrorSet();
+    types.addAll(returnTypesOf(methodsToImplement));
+    //    TypeMirror javaxAnnotationGenerated = getTypeMirror(Generated.class);
+    //    types.add(javaxAnnotationGenerated);
+    TypeMirror javaUtilArrays = getTypeMirror(Arrays.class);
+    if (containsArrayType(types)) {
+      // If there are array properties then we will be referencing java.util.Arrays.
+      // Arrange to import it unless that would introduce ambiguity.
+      types.add(javaUtilArrays);
+    }
+    BuilderSpec builderSpec = new BuilderSpec(type, processingEnv, errorReporter);
+    Optional<BuilderSpec.Builder> builder = builderSpec.getBuilder();
+    ImmutableSet<ExecutableElement> toBuilderMethods;
+    if (builder.isPresent()) {
+      types.add(getTypeMirror(BitSet.class));
+      toBuilderMethods = builder.get().toBuilderMethods(typeUtils, methodsToImplement);
+    } else {
+      toBuilderMethods = ImmutableSet.of();
+    }
+    vars.toBuilderMethods =
+        FluentIterable.from(toBuilderMethods).transform(SimpleNameFunction.INSTANCE).toList();
+    Set<ExecutableElement> propertyMethods = Sets.difference(methodsToImplement, toBuilderMethods);
+    String pkg = TypeSimplifier.packageNameOf(type);
+    TypeSimplifier typeSimplifier = new TypeSimplifier(typeUtils, pkg, types, type.asType());
+    vars.imports = typeSimplifier.typesToImport();
+    //    vars.generated = typeSimplifier.simplify(javaxAnnotationGenerated);
+    vars.arrays = typeSimplifier.simplify(javaUtilArrays);
+    vars.bitSet = typeSimplifier.simplifyRaw(getTypeMirror(BitSet.class));
+    ImmutableMap<ExecutableElement, String> methodToPropertyName =
+        methodToPropertyNameMap(propertyMethods);
+    Map<ExecutableElement, String> methodToIdentifier =
+        Maps.newLinkedHashMap(methodToPropertyName);
+    fixReservedIdentifiers(methodToIdentifier);
+    List<Property> props = new ArrayList<Property>();
+    for (ExecutableElement method : propertyMethods) {
+      String propertyType = typeSimplifier.simplify(method.getReturnType());
+      String propertyName = methodToPropertyName.get(method);
+      String identifier = methodToIdentifier.get(method);
+      List<String> args = new ArrayList<String>();
+      props.add(new Property(propertyName, identifier, method, propertyType, typeSimplifier, processingEnv));
+    }
+    // If we are running from Eclipse, undo the work of its compiler which sorts methods.
+    eclipseHack().reorderProperties(props);
+    vars.props = props;
+    vars.serialVersionUID = getSerialVersionUID(type);
+    vars.formalTypes = typeSimplifier.formalTypeParametersString(type);
+    vars.actualTypes = TypeSimplifier.actualTypeParametersString(type);
+    vars.wildcardTypes = wildcardTypeParametersString(type);
+    Retrofit typeAnnoation = type.getAnnotation(Retrofit.class);
+    vars.baseUrl = typeAnnoation.value();
+
+    Map<String, String> headerMap = new HashMap<String, String>();
+    Retrofit.Headers headersAnnotation = type.getAnnotation(Retrofit.Headers.class);
+    if (headersAnnotation != null) {
+      for (String header : headersAnnotation.value()) {
+        String[] tokens = header.split(":");
+        headerMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+      }
+      vars.headers = headerMap;
+    }
+
+    Map<String, String> retryHeaderMap = new HashMap<String, String>();
+    Retrofit.RetryHeaders retryHeadersAnnotation = type.getAnnotation(Retrofit.RetryHeaders.class);
+    if (retryHeadersAnnotation != null) {
+      for (String header : retryHeadersAnnotation.value()) {
+        String[] tokens = header.split(":");
+        retryHeaderMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+      }
+      vars.retryHeaders = retryHeaderMap;
+    }
+
+    Retrofit.Converter converterAnnotation = type.getAnnotation(Retrofit.Converter.class);
+    if (converterAnnotation != null) {
+      TypeMirror converter = null;
+      try {
+        converter = getTypeMirror(converterAnnotation.value());
+      } catch (MirroredTypeException mte) {
+        // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+        converter = mte.getTypeMirror();
+      }
+      vars.converter = typeSimplifier.simplify(converter);
+      TypeMirror gsonConverterType = getTypeMirror(retrofit.converter.GsonConverter.class);
+      if (typeUtils.isSubtype(gsonConverterType, converter)) {
+        vars.gsonConverter = vars.converter;
+      }
+    }
+    Retrofit.ErrorHandler errorHandlerAnnotation = type.getAnnotation(Retrofit.ErrorHandler.class);
+    if (errorHandlerAnnotation != null) {
+      TypeMirror errorHandler = null;
+      try {
+        errorHandler = getTypeMirror(errorHandlerAnnotation.value());
+      } catch (MirroredTypeException mte) {
+        // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+        errorHandler = mte.getTypeMirror();
+      }
+      vars.errorHandler = typeSimplifier.simplify(errorHandler);
+    }
+    Retrofit.LogLevel logLevelAnnotation = type.getAnnotation(Retrofit.LogLevel.class);
+    if (logLevelAnnotation != null) {
+      vars.logLevel = logLevelAnnotation.value();
+    }
+    Retrofit.RequestInterceptor requestInterceptorAnnotation = type.getAnnotation(Retrofit.RequestInterceptor.class);
+    if (requestInterceptorAnnotation != null) {
+      TypeMirror requestInterceptor = null;
+      try {
+        requestInterceptor = getTypeMirror(requestInterceptorAnnotation.value());
+      } catch (MirroredTypeException mte) {
+        // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+        requestInterceptor = mte.getTypeMirror();
+      }
+      vars.requestInterceptor = typeSimplifier.simplify(requestInterceptor);
+    }
+
+    TypeElement parcelable = processingEnv.getElementUtils().getTypeElement("android.os.Parcelable");
+    vars.parcelable = parcelable != null
+      && processingEnv.getTypeUtils().isAssignable(type.asType(), parcelable.asType());
+    // Check for @Retrofit.Builder and add appropriate variables if it is present.
+    if (builder.isPresent()) {
+      builder.get().defineVars(vars, typeSimplifier, methodToPropertyName);
+    }
+  }
+
+  private ImmutableMap<ExecutableElement, String> methodToPropertyNameMap(
+      Iterable<ExecutableElement> propertyMethods) {
+    ImmutableMap.Builder<ExecutableElement, String> builder = ImmutableMap.builder();
+    boolean allGetters = allGetters(propertyMethods);
+    for (ExecutableElement method : propertyMethods) {
+      String methodName = method.getSimpleName().toString();
+      String name = allGetters ? nameWithoutPrefix(methodName) : methodName;
+      builder.put(method, name);
+    }
+    ImmutableMap<ExecutableElement, String> map = builder.build();
+    if (allGetters) {
+      checkDuplicateGetters(map);
+    }
+    return map;
+  }
+
+  private static boolean allGetters(Iterable<ExecutableElement> methods) {
+    for (ExecutableElement method : methods) {
+      String name = method.getSimpleName().toString();
+      // TODO(user): decide whether getfoo() (without a capital) is a getter. Currently it is.
+      boolean get = name.startsWith("get") && !name.equals("get");
+      boolean is = name.startsWith("is") && !name.equals("is")
+          && method.getReturnType().getKind() == TypeKind.BOOLEAN;
+      if (!get && !is) {
+        return false;
+      }
+    }
+    return true;
+  }
+
+  private String nameWithoutPrefix(String name) {
+    if (name.startsWith("get")) {
+      name = name.substring(3);
+    } else {
+      assert name.startsWith("is");
+      name = name.substring(2);
+    }
+    return Introspector.decapitalize(name);
+  }
+
+  private void checkDuplicateGetters(Map<ExecutableElement, String> methodToIdentifier) {
+    if (true) return;
+    Set<String> seen = Sets.newHashSet();
+    for (Map.Entry<ExecutableElement, String> entry : methodToIdentifier.entrySet()) {
+      if (!seen.add(entry.getValue())) {
+        errorReporter.reportError(
+            "More than one @Retrofit property called " + entry.getValue(), entry.getKey());
+      }
+    }
+  }
+
+  // If we have a getter called getPackage() then we can't use the identifier "package" to represent
+  // its value since that's a reserved word.
+  private void fixReservedIdentifiers(Map<ExecutableElement, String> methodToIdentifier) {
+    for (Map.Entry<ExecutableElement, String> entry : methodToIdentifier.entrySet()) {
+      if (SourceVersion.isKeyword(entry.getValue())) {
+        entry.setValue(disambiguate(entry.getValue(), methodToIdentifier.values()));
+      }
+    }
+  }
+
+  private String disambiguate(String name, Collection<String> existingNames) {
+    for (int i = 0; ; i++) {
+      String candidate = name + i;
+      if (!existingNames.contains(candidate)) {
+        return candidate;
+      }
+    }
+  }
+
+  private Set<TypeMirror> returnTypesOf(Iterable<ExecutableElement> methods) {
+    Set<TypeMirror> returnTypes = new TypeMirrorSet();
+    for (ExecutableElement method : methods) {
+      returnTypes.add(method.getReturnType());
+    }
+    return returnTypes;
+  }
+
+  private static boolean containsArrayType(Set<TypeMirror> types) {
+    for (TypeMirror type : types) {
+      if (type.getKind() == TypeKind.ARRAY) {
+        return true;
+      }
+    }
+    return false;
+  }
+
+  /**
+   * Given a list of all methods defined in or inherited by a class, sets the equals, hashCode, and
+   * toString fields of vars according as the corresponding methods should be generated.
+   */
+  private static void determineObjectMethodsToGenerate(
+      List<ExecutableElement> methods, RetrofitTemplateVars vars) {
+    // The defaults here only come into play when an ancestor class doesn't exist.
+    // Compilation will fail in that case, but we don't want it to crash the compiler with
+    // an exception before it does. If all ancestors do exist then we will definitely find
+    // definitions of these three methods (perhaps the ones in Object) so we will overwrite these:
+    vars.equals = false;
+    vars.hashCode = false;
+    vars.toString = false;
+    for (ExecutableElement method : methods) {
+      ObjectMethodToOverride override = objectMethodToOverride(method);
+      boolean canGenerate = method.getModifiers().contains(Modifier.ABSTRACT)
+          || isJavaLangObject((TypeElement) method.getEnclosingElement());
+      switch (override) {
+        case EQUALS:
+          vars.equals = canGenerate;
+          break;
+        case HASH_CODE:
+          vars.hashCode = canGenerate;
+          break;
+        case TO_STRING:
+          vars.toString = canGenerate;
+          break;
+      }
+    }
+  }
+
+  private ImmutableSet<ExecutableElement> methodsToImplement(List<ExecutableElement> methods) {
+    ImmutableSet.Builder<ExecutableElement> toImplement = ImmutableSet.builder();
+    boolean errors = false;
+    for (ExecutableElement method : methods) {
+      if (method.getModifiers().contains(Modifier.ABSTRACT)
+          && objectMethodToOverride(method) == ObjectMethodToOverride.NONE) {
+        if (method.getParameters().isEmpty() && method.getReturnType().getKind() != TypeKind.VOID) {
+          if (isReferenceArrayType(method.getReturnType())) {
+            errorReporter.reportError("An @Retrofit class cannot define an array-valued property"
+                + " unless it is a primitive array", method);
+            errors = true;
+          }
+          toImplement.add(method);
+        } else {
+          toImplement.add(method);
+        }
+      }
+    }
+    if (errors) {
+      throw new AbortProcessingException();
+    }
+    return toImplement.build();
+  }
+
+  private static boolean isReferenceArrayType(TypeMirror type) {
+    return type.getKind() == TypeKind.ARRAY
+        && !((ArrayType) type).getComponentType().getKind().isPrimitive();
+  }
+
+  private void writeSourceFile(String className, String text, TypeElement originatingType) {
+    try {
+      JavaFileObject sourceFile =
+          processingEnv.getFiler().createSourceFile(className, originatingType);
+      Writer writer = sourceFile.openWriter();
+      try {
+        writer.write(text);
+      } finally {
+        writer.close();
+      }
+    } catch (IOException e) {
+      processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,
+          "Could not write generated class " + className + ": " + e);
+    }
+  }
+
+  private boolean ancestorIsRetrofit(TypeElement type) {
+    while (true) {
+      TypeMirror parentMirror = type.getSuperclass();
+      if (parentMirror.getKind() == TypeKind.NONE) {
+        return false;
+      }
+      Types typeUtils = processingEnv.getTypeUtils();
+      TypeElement parentElement = (TypeElement) typeUtils.asElement(parentMirror);
+      if (parentElement.getAnnotation(Retrofit.class) != null) {
+        return true;
+      }
+      type = parentElement;
+    }
+  }
+
+  private boolean implementsAnnotation(TypeElement type) {
+    Types typeUtils = processingEnv.getTypeUtils();
+    return typeUtils.isAssignable(type.asType(), getTypeMirror(Annotation.class));
+  }
+
+  // Return a string like "1234L" if type instanceof Serializable and defines
+  // serialVersionUID = 1234L, otherwise "".
+  private String getSerialVersionUID(TypeElement type) {
+    Types typeUtils = processingEnv.getTypeUtils();
+    TypeMirror serializable = getTypeMirror(Serializable.class);
+    if (typeUtils.isAssignable(type.asType(), serializable)) {
+      List<VariableElement> fields = ElementFilter.fieldsIn(type.getEnclosedElements());
+      for (VariableElement field : fields) {
+        if (field.getSimpleName().toString().equals("serialVersionUID")) {
+          Object value = field.getConstantValue();
+          if (field.getModifiers().containsAll(Arrays.asList(Modifier.STATIC, Modifier.FINAL))
+              && field.asType().getKind() == TypeKind.LONG
+              && value != null) {
+            return value + "L";
+          } else {
+            errorReporter.reportError(
+                "serialVersionUID must be a static final long compile-time constant", field);
+            break;
+          }
+        }
+      }
+    }
+    return "";
+  }
+
+  private TypeMirror getTypeMirror(Class<?> c) {
+    return getTypeMirror(processingEnv, c);
+  }
+
+  private TypeMirror getTypeMirror(String canonicalName) {
+    return getTypeMirror(processingEnv, canonicalName);
+  }
+
+  private static TypeMirror getTypeMirror(ProcessingEnvironment processingEnv, Class<?> c) {
+    return getTypeMirror(processingEnv, c.getCanonicalName());
+  }
+
+  private static TypeMirror getTypeMirror(ProcessingEnvironment processingEnv, String canonicalName) {
+    return processingEnv.getElementUtils().getTypeElement(canonicalName).asType();
+  }
+
+  // The @Retrofit type, with a ? for every type.
+  // If we have @Retrofit abstract class Foo<T extends Something> then this method will return
+  // just <?>.
+  private static String wildcardTypeParametersString(TypeElement type) {
+    List<? extends TypeParameterElement> typeParameters = type.getTypeParameters();
+    if (typeParameters.isEmpty()) {
+      return "";
+    } else {
+      return "<"
+          + Joiner.on(", ").join(
+          FluentIterable.from(typeParameters).transform(Functions.constant("?")))
+          + ">";
+    }
+  }
+
+  private static String catArgsString(ExecutableElement method) {
+    List<? extends VariableElement> parameters = method.getParameters();
+    if (parameters.isEmpty()) {
+      return "";
+    } else {
+      return ""
+        + Joiner.on(" + ").join(
+        FluentIterable.from(parameters).transform(new Function<VariableElement, String>() {
+          @Override
+          public String apply(VariableElement element) {
+            return "" + element.getSimpleName();
+          }
+        }))
+        + "";
+    }
+  }
+
+  private static String formalArgsString(ExecutableElement method) {
+    List<? extends VariableElement> parameters = method.getParameters();
+    if (parameters.isEmpty()) {
+      return "";
+    } else {
+      return ""
+        + Joiner.on(", ").join(
+        FluentIterable.from(parameters).transform(new Function<VariableElement, String>() {
+          @Override
+          public String apply(VariableElement element) {
+            return "" + element.getSimpleName();
+          }
+        }))
+        + "";
+    }
+  }
+
+  private static String formalTypeArgsString(ExecutableElement method) {
+    List<? extends VariableElement> parameters = method.getParameters();
+    if (parameters.isEmpty()) {
+      return "";
+    } else {
+      return ""
+        + Joiner.on(", ").join(
+        FluentIterable.from(parameters).transform(new Function<VariableElement, String>() {
+          @Override
+          public String apply(VariableElement element) {
+            return "final " + element.asType() + " " + element.getSimpleName();
+          }
+        }))
+        + "";
+    }
+  }
+
+  private EclipseHack eclipseHack() {
+    return new EclipseHack(processingEnv);
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
new file mode 100644
index 000000000..67c5b3db9
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
@@ -0,0 +1,161 @@
+/*
+ * Copyright (C) 2012 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import org.apache.velocity.runtime.parser.node.SimpleNode;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+
+/**
+ * The variables to substitute into the retrofit.vm template.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+@SuppressWarnings("unused")  // the fields in this class are only read via reflection
+class RetrofitTemplateVars extends TemplateVars {
+
+  /** The properties defined by the parent class's abstract methods. */
+  List<RetrofitProcessor.Property> props;
+
+  /** Whether to generate an equals(Object) method. */
+  Boolean equals;
+  /** Whether to generate a hashCode() method. */
+  Boolean hashCode;
+  /** Whether to generate a toString() method. */
+  Boolean toString;
+
+  /** Whether to generate a Parcelable creator. */
+  Boolean parcelable;
+
+  /** The fully-qualified names of the classes to be imported in the generated class. */
+  SortedSet<String> imports;
+
+  /** The spelling of the java.util.Arrays class: Arrays or java.util.Arrays. */
+  String arrays;
+
+  /** The spelling of the java.util.BitSet class: BitSet or java.util.BitSet. */
+  String bitSet;
+
+  /**
+   * The full spelling of the {@code @GwtCompatible} annotation to add to this class, or an empty
+   * string if there is none. A non-empty value might look something like
+   * {@code "@com.google.common.annotations.GwtCompatible(serializable = true)"}.
+   */
+  String gwtCompatibleAnnotation;
+
+  /** The text of the serialVersionUID constant, or empty if there is none. */
+  String serialVersionUID;
+
+  /**
+   * The package of the class with the {@code @Retrofit} annotation and its generated subclass.
+   */
+  String pkg;
+  /**
+   * The name of the class with the {@code @Retrofit} annotation, including containing
+   * classes but not including the package name.
+   */
+  String origClass;
+  /** The simple name of the class with the {@code @Retrofit} annotation. */
+  String simpleClassName;
+  /** The simple name of the generated subclass. */
+  String subclass;
+
+  /**
+   * The formal generic signature of the class with the {@code @Retrofit} annotation and its
+   * generated subclass. This is empty, or contains type variables with optional bounds,
+   * for example {@code <K, V extends K>}.
+   */
+  String formalTypes;
+  /**
+   * The generic signature used by the generated subclass for its superclass reference.
+   * This is empty, or contains only type variables with no bounds, for example
+   * {@code <K, V>}.
+   */
+  String actualTypes;
+  /**
+   * The generic signature in {@link #actualTypes} where every variable has been replaced
+   * by a wildcard, for example {@code <?, ?>}.
+   */
+  String wildcardTypes;
+
+  /**
+   * The name of the builder type as it should appear in source code, or empty if there is no
+   * builder type. If class {@code Address} contains {@code @Retrofit.Builder} class Builder
+   * then this will typically be {@code "Address.Builder"}.
+   */
+  String builderTypeName = "";
+
+  /**
+   * The formal generic signature of the {@code Retrofit.Builder} class. This is empty, or contains
+   * type variables with optional bounds, for example {@code <K, V extends K>}.
+   */
+  String builderFormalTypes = "";
+  /**
+   * The generic signature used by the generated builder subclass for its superclass reference.
+   * This is empty, or contains only type variables with no bounds, for example
+   * {@code <K, V>}.
+   */
+  String builderActualTypes = "";
+
+  /**
+   * True if the builder being implemented is an interface, false if it is an abstract class.
+   */
+  Boolean builderIsInterface = false;
+
+  /**
+   * The simple name of the builder's build method, often {@code "build"}.
+   */
+  String buildMethodName = "";
+
+  /**
+   * A map from property names (like foo) to the corresponding setter method names (foo or setFoo).
+   */
+  Map<String, String> builderSetterNames = Collections.emptyMap();
+
+  /**
+   * The names of any {@code toBuilder()} methods, that is methods that return the builder type.
+   */
+  List<String> toBuilderMethods;
+
+  String baseUrl = "";
+
+  Map<String, String> headers = Collections.emptyMap();
+  Map<String, String> retryHeaders = Collections.emptyMap();
+
+  String converter = "";
+  String gsonConverter = "";
+  String errorHandler = "";
+  retrofit.RestAdapter.LogLevel logLevel = retrofit.RestAdapter.LogLevel.NONE;
+
+  String requestInterceptor = "";
+
+  /**
+   * The simple names of validation methods (marked {@code @Retrofit.Validate}) in the Retrofit
+   * class. (Currently, this set is either empty or a singleton.)
+   */
+  Set<String> validators = Collections.emptySet();
+
+  private static final SimpleNode TEMPLATE = parsedTemplateForResource("retrofit.vm");
+
+  @Override
+  SimpleNode parsedTemplate() {
+    return TEMPLATE;
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/SimpleNameFunction.java b/retrofit-processor/src/main/java/retrofit/processor/SimpleNameFunction.java
new file mode 100644
index 000000000..938f191bb
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/SimpleNameFunction.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.base.Function;
+
+import javax.lang.model.element.Element;
+
+enum SimpleNameFunction implements Function<Element, String> {
+  INSTANCE {
+    @Override
+    public String apply(Element element) {
+      return element.getSimpleName().toString();
+    }
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processor/src/main/java/retrofit/processor/TemplateVars.java b/retrofit-processor/src/main/java/retrofit/processor/TemplateVars.java
new file mode 100644
index 000000000..b7efcf2fe
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/TemplateVars.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableList;
+
+import org.apache.velocity.VelocityContext;
+import org.apache.velocity.runtime.log.NullLogChute;
+import org.apache.velocity.runtime.RuntimeConstants;
+import org.apache.velocity.runtime.RuntimeInstance;
+import org.apache.velocity.runtime.parser.ParseException;
+import org.apache.velocity.runtime.parser.node.SimpleNode;
+
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.StringWriter;
+import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import org.apache.velocity.runtime.resource.ResourceCacheImpl;
+
+/**
+ * A template and a set of variables to be substituted into that template. A concrete subclass of
+ * this class defines a set of fields that are template variables, and an implementation of the
+ * {@link #parsedTemplate()} method which is the template to substitute them into. Once the values
+ * of the fields have been assigned, the {@link #toText()} method returns the result of substituting
+ * them into the template.
+ *
+ * <p>The subclass must be a direct subclass of this class. Fields cannot be static unless they are
+ * also final. They cannot be private, though they can be package-private if the class is in the
+ * same package as this class. They cannot be primitive or null, so that there is a clear indication
+ * when a field has not been set.
+ *
+ * @author Éamonn McManus
+ */
+abstract class TemplateVars {
+  abstract SimpleNode parsedTemplate();
+
+  private static final RuntimeInstance velocityRuntimeInstance = new RuntimeInstance();
+  static {
+    // Ensure that $undefinedvar will produce an exception rather than outputting $undefinedvar.
+    velocityRuntimeInstance.setProperty(RuntimeConstants.RUNTIME_REFERENCES_STRICT, "true");
+    velocityRuntimeInstance.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM_CLASS,
+        new NullLogChute());
+    velocityRuntimeInstance.setProperty(RuntimeConstants.RESOURCE_MANAGER_CACHE_CLASS,
+        ResourceCacheImpl.class.getName());
+    // Setting ResourceCacheImpl is should not be necessary since that is the default value, but
+    // ensures that Maven shading sees that Apache Commons classes referenced from ResourceCacheImpl
+    // are indeed referenced and cannot be removed during minimization.
+
+    // Disable any logging that Velocity might otherwise see fit to do.
+    velocityRuntimeInstance.setProperty(RuntimeConstants.RUNTIME_LOG_LOGSYSTEM, new NullLogChute());
+
+    // Velocity likes its "managers", LogManager and ResourceManager, which it loads through the
+    // context class loader. If that loader can see another copy of Velocity then that will lead
+    // to hard-to-diagnose exceptions during initialization.
+    Thread currentThread = Thread.currentThread();
+    ClassLoader oldContextLoader = currentThread.getContextClassLoader();
+    try {
+      currentThread.setContextClassLoader(TemplateVars.class.getClassLoader());
+      velocityRuntimeInstance.init();
+    } finally {
+      currentThread.setContextClassLoader(oldContextLoader);
+    }
+  }
+
+  private final ImmutableList<Field> fields;
+
+  TemplateVars() {
+    if (getClass().getSuperclass() != TemplateVars.class) {
+      throw new IllegalArgumentException("Class must extend TemplateVars directly");
+    }
+    ImmutableList.Builder<Field> fields = ImmutableList.builder();
+    Field[] declaredFields = getClass().getDeclaredFields();
+    for (Field field : declaredFields) {
+      if (field.isSynthetic() || isStaticFinal(field)) {
+        continue;
+      }
+      if (Modifier.isPrivate(field.getModifiers())) {
+        throw new IllegalArgumentException("Field cannot be private: " + field);
+      }
+      if (Modifier.isStatic(field.getModifiers())) {
+        throw new IllegalArgumentException("Field cannot be static unless also final: " + field);
+      }
+      if (field.getType().isPrimitive()) {
+        throw new IllegalArgumentException("Field cannot be primitive: " + field);
+      }
+      fields.add(field);
+    }
+    this.fields = fields.build();
+  }
+
+  /**
+   * Returns the result of substituting the variables defined by the fields of this class
+   * (a concrete subclass of TemplateVars) into the template returned by {@link #parsedTemplate()}.
+   */
+  String toText() {
+    VelocityContext velocityContext = toVelocityContext();
+    StringWriter writer = new StringWriter();
+    SimpleNode parsedTemplate = parsedTemplate();
+    boolean rendered = velocityRuntimeInstance.render(
+        velocityContext, writer, parsedTemplate.getTemplateName(), parsedTemplate);
+    if (!rendered) {
+      // I don't know when this happens. Usually you get an exception during rendering.
+      throw new IllegalArgumentException("Template rendering failed");
+    }
+    return writer.toString();
+  }
+
+  private VelocityContext toVelocityContext() {
+    VelocityContext velocityContext = new VelocityContext();
+    for (Field field : fields) {
+      Object value = fieldValue(field, this);
+      if (value == null) {
+        throw new IllegalArgumentException("Field cannot be null (was it set?): " + field);
+      }
+      Object old = velocityContext.put(field.getName(), value);
+      if (old != null) {
+        throw new IllegalArgumentException("Two fields called " + field.getName() + "?!");
+      }
+    }
+    return velocityContext;
+  }
+
+  static SimpleNode parsedTemplateForResource(String templateStr, String resourceName) {
+    try {
+      return velocityRuntimeInstance.parse(templateStr, resourceName);
+    } catch (ParseException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  static SimpleNode parsedTemplateForResource(String resourceName) {
+    InputStream in = RetrofitTemplateVars.class.getResourceAsStream(resourceName);
+    if (in == null) {
+      throw new IllegalArgumentException("Could not find resource: " + resourceName);
+    }
+    try {
+      Reader reader = new InputStreamReader(in, "UTF-8");
+      return velocityRuntimeInstance.parse(reader, resourceName);
+    } catch (UnsupportedEncodingException e) {
+      throw new AssertionError(e);
+    } catch (ParseException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  private static Object fieldValue(Field field, Object container) {
+    try {
+      return field.get(container);
+    } catch (IllegalAccessException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private static boolean isStaticFinal(Field field) {
+    int modifiers = field.getModifiers();
+    return Modifier.isStatic(modifiers) && Modifier.isFinal(modifiers);
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/TypeMirrorSet.java b/retrofit-processor/src/main/java/retrofit/processor/TypeMirrorSet.java
new file mode 100644
index 000000000..10eea864e
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/TypeMirrorSet.java
@@ -0,0 +1,112 @@
+/*
+ * Copyright (C) 2014 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.auto.common.MoreTypes;
+import com.google.common.base.Equivalence;
+
+import java.util.AbstractSet;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Set;
+
+import javax.lang.model.type.TypeMirror;
+
+/**
+ * A set of TypeMirror objects.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+class TypeMirrorSet extends AbstractSet<TypeMirror> {
+  private final Set<Equivalence.Wrapper<TypeMirror>> wrappers =
+      new HashSet<Equivalence.Wrapper<TypeMirror>>();
+
+  TypeMirrorSet() {
+  }
+
+  TypeMirrorSet(Collection<? extends TypeMirror> types) {
+    addAll(types);
+  }
+
+  private Equivalence.Wrapper<TypeMirror> wrap(TypeMirror typeMirror) {
+    return MoreTypes.equivalence().wrap(typeMirror);
+  }
+
+  @Override
+  public boolean add(TypeMirror typeMirror) {
+    return wrappers.add(wrap(typeMirror));
+  }
+
+  @Override
+  public Iterator<TypeMirror> iterator() {
+    final Iterator<Equivalence.Wrapper<TypeMirror>> iterator = wrappers.iterator();
+    return new Iterator<TypeMirror>() {
+      @Override
+      public boolean hasNext() {
+        return iterator.hasNext();
+      }
+
+      @Override
+      public TypeMirror next() {
+        return iterator.next().get();
+      }
+
+      @Override
+      public void remove() {
+        iterator.remove();
+      }
+    };
+  }
+
+  @Override
+  public int size() {
+    return wrappers.size();
+  }
+
+  @Override
+  public boolean contains(Object o) {
+    if (o instanceof TypeMirror) {
+      return wrappers.contains(wrap((TypeMirror) o));
+    } else {
+      return false;
+    }
+  }
+
+  @Override
+  public boolean remove(Object o) {
+    if (o instanceof TypeMirror) {
+      return wrappers.remove(wrap((TypeMirror) o));
+    } else {
+      return false;
+    }
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (o instanceof TypeMirrorSet) {
+      TypeMirrorSet that = (TypeMirrorSet) o;
+      return wrappers.equals(that.wrappers);
+    } else {
+      return false;
+    }
+  }
+
+  @Override
+  public int hashCode() {
+    return wrappers.hashCode();
+  }
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/TypeSimplifier.java b/retrofit-processor/src/main/java/retrofit/processor/TypeSimplifier.java
new file mode 100644
index 000000000..9faa255cf
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/TypeSimplifier.java
@@ -0,0 +1,515 @@
+/*
+ * Copyright (C) 2012 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import static javax.lang.model.element.Modifier.PRIVATE;
+
+import com.google.common.base.Joiner;
+import com.google.common.base.Predicate;
+import com.google.common.collect.FluentIterable;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.SortedSet;
+import java.util.TreeSet;
+
+import javax.lang.model.element.Element;
+import javax.lang.model.element.PackageElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.ErrorType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.type.WildcardType;
+import javax.lang.model.util.AbstractTypeVisitor6;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.SimpleTypeVisitor6;
+import javax.lang.model.util.Types;
+
+/**
+ * Takes a set of types and a package and determines which of those types can be imported, and how
+ * to spell any of the types in the set given those imports.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+final class TypeSimplifier {
+  /**
+   * The spelling that should be used to refer to a given class, and an indication of whether it
+   * should be imported.
+   */
+  private static class Spelling {
+    final String spelling;
+    final boolean importIt;
+
+    Spelling(String spelling, boolean importIt) {
+      this.spelling = spelling;
+      this.importIt = importIt;
+    }
+  }
+
+  private final Types typeUtils;
+  private final Map<String, Spelling> imports;
+
+  /**
+   * Makes a new simplifier for the given package and set of types.
+   *
+   * @param typeUtils the result of {@code ProcessingEnvironment.getTypeUtils()} for the current
+   *     annotation processing environment.
+   * @param packageName the name of the package from which classes will be referenced. Classes that
+   *     are in the same package do not need to be imported.
+   * @param types the types that will be referenced.
+   * @param base a base class that the class containing the references will extend. This is needed
+   *     because nested classes in that class or one of its ancestors are in scope in the generated
+   *     subclass, so a reference to another class with the same name as one of them is ambiguous.
+   *
+   * @throws MissingTypeException if one of the input types contains an error (typically,
+   *     is undefined). This may be something like {@code UndefinedClass}, or something more subtle
+   *     like {@code Set<UndefinedClass<?>>}.
+   */
+  TypeSimplifier(Types typeUtils, String packageName, Set<TypeMirror> types, TypeMirror base) {
+    this.typeUtils = typeUtils;
+    Set<TypeMirror> typesPlusBase = new TypeMirrorSet(types);
+    if (base != null) {
+      typesPlusBase.add(base);
+    }
+    Set<TypeMirror> referenced = referencedClassTypes(typeUtils, typesPlusBase);
+    Set<TypeMirror> defined = nonPrivateDeclaredTypes(typeUtils, base);
+    this.imports = findImports(typeUtils, packageName, referenced, defined);
+  }
+
+  /**
+   * Returns the set of types to import. We import every type that is neither in java.lang nor in
+   * the package containing the Retrofit class, provided that the result refers to the type
+   * unambiguously. For example, if there is a property of type java.util.Map.Entry then we will
+   * import java.util.Map.Entry and refer to the property as Entry. We could also import just
+   * java.util.Map in this case and refer to Map.Entry, but currently we never do that.
+   */
+  SortedSet<String> typesToImport() {
+    SortedSet<String> typesToImport = new TreeSet<String>();
+    for (Map.Entry<String, Spelling> entry : imports.entrySet()) {
+      if (entry.getValue().importIt) {
+        typesToImport.add(entry.getKey());
+      }
+    }
+    return typesToImport;
+  }
+
+  /**
+   * Returns a string that can be used to refer to the given type given the imports defined by
+   * {@link #typesToImport}.
+   */
+  String simplify(TypeMirror type) {
+    return type.accept(TO_STRING_TYPE_VISITOR, new StringBuilder()).toString();
+  }
+
+  /**
+   * Returns a string that can be used to refer to the given raw type given the imports defined by
+   * {@link #typesToImport}. The difference between this and {@link #simplify} is that the string
+   * returned here will not include type parameters.
+   */
+  String simplifyRaw(TypeMirror type) {
+    return type.accept(TO_STRING_RAW_TYPE_VISITOR, new StringBuilder()).toString();
+  }
+
+  // The formal type parameters of the given type.
+  // If we have @Retrofit abstract class Foo<T extends SomeClass> then this method will
+  // return <T extends Something> for Foo. Likewise it will return the angle-bracket part of:
+  // Foo<SomeClass>
+  // Foo<T extends Number>
+  // Foo<E extends Enum<E>>
+  // Foo<K, V extends Comparable<? extends K>>
+  // Type variables need special treatment because we only want to include their bounds when they
+  // are declared, not when they are referenced. We don't want to include the bounds of the second E
+  // in <E extends Enum<E>> or of the second K in <K, V extends Comparable<? extends K>>. That's
+  // why we put the "extends" handling here and not in ToStringTypeVisitor.
+  String formalTypeParametersString(TypeElement type) {
+    List<? extends TypeParameterElement> typeParameters = type.getTypeParameters();
+    if (typeParameters.isEmpty()) {
+      return "";
+    } else {
+      StringBuilder sb = new StringBuilder("<");
+      String sep = "";
+      for (TypeParameterElement typeParameter : typeParameters) {
+        sb.append(sep);
+        sep = ", ";
+        appendTypeParameterWithBounds(sb, typeParameter);
+      }
+      return sb.append(">").toString();
+    }
+  }
+
+  // The actual type parameters of the given type.
+  // If we have @Retrofit abstract class Foo<T extends Something> then the subclass will be
+  // final class Retrofit_Foo<T extends Something> extends Foo<T>.
+  // <T extends Something> is the formal type parameter list and
+  // <T> is the actual type parameter list, which is what this method returns.
+  static String actualTypeParametersString(TypeElement type) {
+    List<? extends TypeParameterElement> typeParameters = type.getTypeParameters();
+    if (typeParameters.isEmpty()) {
+      return "";
+    } else {
+      return "<"
+          + FluentIterable.from(typeParameters)
+              .transform(SimpleNameFunction.INSTANCE)
+              .join(Joiner.on(", "))
+          + ">";
+    }
+  }
+
+  private void appendTypeParameterWithBounds(StringBuilder sb, TypeParameterElement typeParameter) {
+    sb.append(typeParameter.getSimpleName());
+    String sep = " extends ";
+    for (TypeMirror bound : typeParameter.getBounds()) {
+      if (!bound.toString().equals("java.lang.Object")) {
+        sb.append(sep);
+        sep = " & ";
+        bound.accept(TO_STRING_TYPE_VISITOR, sb);
+      }
+    }
+  }
+
+  private final ToStringTypeVisitor TO_STRING_TYPE_VISITOR = new ToStringTypeVisitor();
+  private final ToStringTypeVisitor TO_STRING_RAW_TYPE_VISITOR = new ToStringRawTypeVisitor();
+
+  /**
+   * Visitor that produces a string representation of a type for use in generated code.
+   * The visitor takes into account the imports defined by {@link #typesToImport} and will use
+   * the short names of those types.
+   *
+   * <p>A simpler alternative would be just to use TypeMirror.toString() and regular expressions to
+   * pick apart the type references and replace fully-qualified types where possible. That depends
+   * on unspecified behaviour of TypeMirror.toString(), though, and is vulnerable to formatting
+   * quirks such as the way it omits the space after the comma in
+   * {@code java.util.Map<java.lang.String, java.lang.String>}.
+   */
+  private class ToStringTypeVisitor extends SimpleTypeVisitor6<StringBuilder, StringBuilder> {
+    @Override protected StringBuilder defaultAction(TypeMirror type, StringBuilder sb) {
+      return sb.append(type);
+    }
+
+    @Override public StringBuilder visitArray(ArrayType type, StringBuilder sb) {
+      return visit(type.getComponentType(), sb).append("[]");
+    }
+
+    @Override public StringBuilder visitDeclared(DeclaredType type, StringBuilder sb) {
+      TypeElement typeElement = (TypeElement) typeUtils.asElement(type);
+      String typeString = typeElement.getQualifiedName().toString();
+      if (imports.containsKey(typeString)) {
+        sb.append(imports.get(typeString).spelling);
+      } else {
+        sb.append(typeString);
+      }
+      appendTypeArguments(type, sb);
+      return sb;
+    }
+
+    void appendTypeArguments(DeclaredType type, StringBuilder sb) {
+      List<? extends TypeMirror> arguments = type.getTypeArguments();
+      if (!arguments.isEmpty()) {
+        sb.append("<");
+        String sep = "";
+        for (TypeMirror argument : arguments) {
+          sb.append(sep);
+          sep = ", ";
+          visit(argument, sb);
+        }
+        sb.append(">");
+      }
+    }
+
+    @Override public StringBuilder visitWildcard(WildcardType type, StringBuilder sb) {
+      sb.append("?");
+      TypeMirror extendsBound = type.getExtendsBound();
+      TypeMirror superBound = type.getSuperBound();
+      if (superBound != null) {
+        sb.append(" super ");
+        visit(superBound, sb);
+      } else if (extendsBound != null) {
+        sb.append(" extends ");
+        visit(extendsBound, sb);
+      }
+      return sb;
+    }
+  }
+
+  private class ToStringRawTypeVisitor extends ToStringTypeVisitor {
+    @Override
+    void appendTypeArguments(DeclaredType type, StringBuilder sb) {
+    }
+  }
+
+  /**
+   * Returns the name of the given type, including any enclosing types but not the package.
+   */
+  static String classNameOf(TypeElement type) {
+    String name = type.getQualifiedName().toString();
+    String pkgName = packageNameOf(type);
+    return pkgName.isEmpty() ? name : name.substring(pkgName.length() + 1);
+  }
+
+  /**
+   * Returns the name of the package that the given type is in. If the type is in the default
+   * (unnamed) package then the name is the empty string.
+   */
+  static String packageNameOf(TypeElement type) {
+    while (true) {
+      Element enclosing = type.getEnclosingElement();
+      if (enclosing instanceof PackageElement) {
+        return ((PackageElement) enclosing).getQualifiedName().toString();
+      }
+      type = (TypeElement) enclosing;
+    }
+  }
+
+  static String simpleNameOf(String s) {
+    if (s.contains(".")) {
+      return s.substring(s.lastIndexOf('.') + 1);
+    } else {
+      return s;
+    }
+  }
+
+  /**
+   * Given a set of referenced types, works out which of them should be imported and what the
+   * resulting spelling of each one is.
+   *
+   * <p>This method operates on a {@code Set<TypeMirror>} rather than just a {@code Set<String>}
+   * because it is not strictly possible to determine what part of a fully-qualified type name is
+   * the package and what part is the top-level class. For example, {@code java.util.Map.Entry} is
+   * a class called {@code Map.Entry} in a package called {@code java.util} assuming Java
+   * conventions are being followed, but it could theoretically also be a class called {@code Entry}
+   * in a package called {@code java.util.Map}. Since we are operating as part of the compiler, our
+   * goal should be complete correctness, and the only way to achieve that is to operate on the real
+   * representations of types.
+   *
+   * @param packageName The name of the package where the class containing these references is
+   *     defined. Other classes within the same package do not need to be imported.
+   * @param referenced The complete set of declared types (classes and interfaces) that will be
+   *     referenced in the generated code.
+   * @param defined The complete set of declared types (classes and interfaces) that are defined
+   *     within the scope of the generated class (i.e. nested somewhere in its superclass chain,
+   *     or in its interface set)
+   * @return a map where the keys are fully-qualified types and the corresponding values indicate
+   *     whether the type should be imported, and how the type should be spelled in the source code.
+   */
+  private static Map<String, Spelling> findImports(
+      Types typeUtils, String packageName, Set<TypeMirror> referenced, Set<TypeMirror> defined) {
+    Map<String, Spelling> imports = new HashMap<String, Spelling>();
+    Set<TypeMirror> typesInScope = new TypeMirrorSet();
+    typesInScope.addAll(referenced);
+    typesInScope.addAll(defined);
+    Set<String> ambiguous = ambiguousNames(typeUtils, typesInScope);
+    for (TypeMirror type : referenced) {
+      TypeElement typeElement = (TypeElement) typeUtils.asElement(type);
+      String fullName = typeElement.getQualifiedName().toString();
+      String simpleName = typeElement.getSimpleName().toString();
+      String pkg = packageNameOf(typeElement);
+      boolean importIt;
+      String spelling;
+      if (ambiguous.contains(simpleName)) {
+        importIt = false;
+        spelling = fullName;
+      } else if (pkg.equals(packageName) || pkg.equals("java.lang")) {
+        importIt = false;
+        spelling = fullName.substring(pkg.isEmpty() ? 0 : pkg.length() + 1);
+      } else {
+        importIt = true;
+        spelling = simpleName;
+      }
+      imports.put(fullName, new Spelling(spelling, importIt));
+    }
+    return imports;
+  }
+
+  /**
+   * Finds all declared types (classes and interfaces) that are referenced in the given
+   * {@code Set<TypeMirror>}. This includes classes and interfaces that appear directly in the set,
+   * but also ones that appear in type parameters and the like. For example, if the set contains
+   * {@code java.util.List<? extends java.lang.Number>} then both {@code java.util.List} and
+   * {@code java.lang.Number} will be in the resulting set.
+   */
+  private static Set<TypeMirror> referencedClassTypes(Types typeUtil, Set<TypeMirror> types) {
+    Set<TypeMirror> referenced = new TypeMirrorSet();
+    ReferencedClassTypeVisitor referencedClassVisitor =
+        new ReferencedClassTypeVisitor(typeUtil, referenced);
+    for (TypeMirror type : types) {
+      referencedClassVisitor.visit(type);
+    }
+    return referenced;
+  }
+
+  private static class ReferencedClassTypeVisitor extends SimpleTypeVisitor6<Void, Void> {
+    private final Types typeUtils;
+    private final Set<TypeMirror> referencedTypes;
+    private final Set<TypeMirror> seenTypes;
+
+    ReferencedClassTypeVisitor(Types typeUtils, Set<TypeMirror> referenced) {
+      this.typeUtils = typeUtils;
+      this.referencedTypes = referenced;
+      this.seenTypes = new TypeMirrorSet();
+    }
+
+    @Override public Void visitArray(ArrayType t, Void p) {
+      return visit(t.getComponentType(), p);
+    }
+
+    @Override public Void visitDeclared(DeclaredType t, Void p) {
+      if (seenTypes.add(t)) {
+        referencedTypes.add(typeUtils.erasure(t));
+        for (TypeMirror param : t.getTypeArguments()) {
+          visit(param, p);
+        }
+      }
+      return null;
+    }
+
+    @Override public Void visitTypeVariable(TypeVariable t, Void p) {
+      // Instead of visiting t.getUpperBound(), we explicitly visit the supertypes of t.
+      // The reason is that for a variable like <T extends Foo & Bar>, t.getUpperBound() will be
+      // the intersection type Foo & Bar, with no really simple way to extract Foo and Bar. But
+      // directSupertypes(t) will be exactly [Foo, Bar]. For plain <T>, directSupertypes(t) will
+      // be java.lang.Object, and it is harmless for us to record a reference to that since we won't
+      // try to import it or use it in the output string for <T>.
+      for (TypeMirror upper : typeUtils.directSupertypes(t)) {
+        visit(upper, p);
+      }
+      return visit(t.getLowerBound(), p);
+    }
+
+    @Override public Void visitWildcard(WildcardType t, Void p) {
+      for (TypeMirror bound : new TypeMirror[] {t.getSuperBound(), t.getExtendsBound()}) {
+        if (bound != null) {
+          visit(bound, p);
+        }
+      }
+      return null;
+    }
+
+    @Override public Void visitError(ErrorType t, Void p) {
+      throw new MissingTypeException();
+    }
+  }
+
+  /**
+   * Finds all types that are declared with non private visibility by the given {@code TypeMirror},
+   * any class in its superclass chain, or any interface it implements.
+   */
+  private static Set<TypeMirror> nonPrivateDeclaredTypes(Types typeUtils, TypeMirror type) {
+    if (type == null) {
+      return new TypeMirrorSet();
+    } else {
+      Set<TypeMirror> declared = new TypeMirrorSet();
+      declared.add(type);
+      List<TypeElement> nestedTypes =
+          ElementFilter.typesIn(typeUtils.asElement(type).getEnclosedElements());
+      for (TypeElement nestedType : nestedTypes) {
+        if (!nestedType.getModifiers().contains(PRIVATE)) {
+          declared.add(nestedType.asType());
+        }
+      }
+      for (TypeMirror supertype : typeUtils.directSupertypes(type)) {
+        declared.addAll(nonPrivateDeclaredTypes(typeUtils, supertype));
+      }
+      return declared;
+    }
+  }
+
+  private static Set<String> ambiguousNames(Types typeUtils, Set<TypeMirror> types) {
+    Set<String> ambiguous = new HashSet<String>();
+    Set<String> simpleNames = new HashSet<String>();
+    for (TypeMirror type : types) {
+      if (type.getKind() == TypeKind.ERROR) {
+        throw new MissingTypeException();
+      }
+      String simpleName = typeUtils.asElement(type).getSimpleName().toString();
+      if (!simpleNames.add(simpleName)) {
+        ambiguous.add(simpleName);
+      }
+    }
+    return ambiguous;
+  }
+
+  /**
+   * Returns true if casting to the given type will elicit an unchecked warning from the
+   * compiler. Only generic types such as {@code List<String>} produce such warnings. There will be
+   * no warning if the type's only generic parameters are simple wildcards, as in {@code Map<?, ?>}.
+   */
+  static boolean isCastingUnchecked(TypeMirror type) {
+    return CASTING_UNCHECKED_VISITOR.visit(type, false);
+  }
+
+  /**
+   * Visitor that tells whether a type is erased, in the sense of {@link #isCastingUnchecked}. Each
+   * visitX method returns true if its input parameter is true or if the type being visited is
+   * erased.
+   */
+  private static final AbstractTypeVisitor6<Boolean, Boolean> CASTING_UNCHECKED_VISITOR =
+      new SimpleTypeVisitor6<Boolean, Boolean>() {
+    @Override protected Boolean defaultAction(TypeMirror e, Boolean p) {
+      return p;
+    }
+
+    @Override public Boolean visitUnknown(TypeMirror t, Boolean p) {
+      // We don't know whether casting is unchecked for this mysterious type but assume it is,
+      // so we will insert a possible-unnecessary @SuppressWarnings("unchecked").
+      return true;
+    }
+
+    @Override public Boolean visitArray(ArrayType t, Boolean p) {
+      return visit(t.getComponentType(), p);
+    }
+
+    @Override public Boolean visitDeclared(DeclaredType t, Boolean p) {
+      return p || FluentIterable.from(t.getTypeArguments()).anyMatch(UNCHECKED_TYPE_ARGUMENT);
+    }
+
+    @Override public Boolean visitTypeVariable(TypeVariable t, Boolean p) {
+      return true;
+    }
+
+    // If a type has a type argument, then casting to the type is unchecked, except if the argument
+    // is <?> or <? extends Object>. The same applies to all type arguments, so casting to Map<?, ?>
+    // does not produce an unchecked warning for example.
+    private final Predicate<TypeMirror> UNCHECKED_TYPE_ARGUMENT = new Predicate<TypeMirror>() {
+      @Override public boolean apply(TypeMirror arg) {
+        if (arg.getKind() == TypeKind.WILDCARD) {
+          WildcardType wildcard = (WildcardType) arg;
+          if (wildcard.getExtendsBound() == null || isJavaLangObject(wildcard.getExtendsBound())) {
+            // This is <?>, unless there's a super bound, in which case it is <? super Foo> and
+            // is erased.
+            return (wildcard.getSuperBound() != null);
+          }
+        }
+        return true;
+      }
+    };
+
+    private boolean isJavaLangObject(TypeMirror type) {
+      if (type.getKind() != TypeKind.DECLARED) {
+        return false;
+      }
+      DeclaredType declaredType = (DeclaredType) type;
+      TypeElement typeElement = (TypeElement) declaredType.asElement();
+      return typeElement.getQualifiedName().contentEquals("java.lang.Object");
+    }
+  };
+}
diff --git a/retrofit-processor/src/main/java/retrofit/processor/package-info.java b/retrofit-processor/src/main/java/retrofit/processor/package-info.java
new file mode 100644
index 000000000..7eba1d9fb
--- /dev/null
+++ b/retrofit-processor/src/main/java/retrofit/processor/package-info.java
@@ -0,0 +1,18 @@
+/*
+ * Copyright (C) 2013 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+/**
+ * This package contains the annotation processor that implements the
+ * {@link retrofit.http.Retrofit} API.
+ */
+package retrofit.processor;
\ No newline at end of file
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/gwtserializer.vm b/retrofit-processor/src/main/resources/retrofit/processor/gwtserializer.vm
new file mode 100644
index 000000000..f9a6d9e6b
--- /dev/null
+++ b/retrofit-processor/src/main/resources/retrofit/processor/gwtserializer.vm
@@ -0,0 +1,59 @@
+## Template for each generated AutoValue_Foo_CustomFieldSerializer class.
+## This template uses the Apache Velocity Template Language (VTL).
+## The variables ($pkg, $props, and so on) are defined by the fields of
+## GwtSerialization.GwtTemplateVars.
+##
+## Comments, like this one, begin with ##. The comment text extends up to and including the newline
+## character at the end of the line. So comments also serve to join a line to the next one.
+## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
+## That does mean that we sometimes need an extra blank line after such a directive.
+##
+## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.
+## TODO(emcmanus): perform the post-processing.
+#if (!$pkg.empty)
+package $pkg;
+#end
+
+#foreach ($i in $imports)
+import $i;
+#end
+import com.google.gwt.user.client.rpc.SerializationException;
+import com.google.gwt.user.client.rpc.SerializationStreamReader;
+import com.google.gwt.user.client.rpc.SerializationStreamWriter;
+
+@${generated}("com.google.auto.value.processor.AutoValueProcessor")
+public final class $serializerClass {
+  // There are no instances of this class.
+  private ${serializerClass}() {}
+
+  public static $subclass instantiate(
+      SerializationStreamReader streamReader) throws SerializationException {
+#foreach ($p in $props)
+    #if ($p.castingUnchecked)
+    @SuppressWarnings("unchecked")
+    #end
+    $p.type $p = ${p.gwtCast}streamReader.read${p.gwtType}();
+#end
+    return new ${subclass}(#foreach ($p in $props) $p #if ($foreach.hasNext) , #end #end);
+  }
+
+  public static void serialize(
+      SerializationStreamWriter streamWriter,
+      $subclass instance) throws SerializationException {
+#foreach ($p in $props)
+    streamWriter.write${p.gwtType}(instance.${p.getter}());
+#end
+  }
+
+  public static void deserialize(
+      @SuppressWarnings("unused") SerializationStreamReader streamReader,
+      @SuppressWarnings("unused") $subclass instance) {
+    // instantiate already did all the work.
+  }
+
+  // This dummy field is a hash of the fields in $subclass that will change if they do, including
+  // if their order changes. This is because GWT identity for a class that has a serializer is
+  // based on the fields of the serializer rather than the class itself.
+  @SuppressWarnings("unused")
+  private int dummy_$classHashString;
+}
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
new file mode 100644
index 000000000..a2a6c7f59
--- /dev/null
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -0,0 +1,818 @@
+## Template for each generated Retrofit_Foo class.
+## This template uses the Apache Velocity Template Language (VTL).
+## The variables ($pkg, $props, and so on) are defined by the fields of MutableRetrofitTemplateVars.
+##
+## Comments, like this one, begin with ##. The comment text extends up to and including the newline
+## character at the end of the line. So comments also serve to join a line to the next one.
+## Velocity deletes a newline after a directive (#if, #foreach, #end etc) so ## is not needed there.
+## That does mean that we sometimes need an extra blank line after such a directive.
+##
+## A post-processing step will remove unwanted spaces and blank lines, but will not join two lines.
+
+#if (!$pkg.empty)
+package $pkg;
+#end
+
+#foreach ($i in $imports)
+import $i;
+#end
+
+import org.json.JSONObject;
+import org.json.JSONException;
+
+import rx.Observable;
+import rx.Subscriber;
+import rx.functions.*;
+
+import com.bluelinelabs.logansquare.LoganSquare;
+
+import android.util.Log;
+
+import java.util.List;
+import java.util.ArrayList;
+
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.Headers;
+import com.squareup.okhttp.OkHttpClient;
+import com.squareup.okhttp.MediaType;
+import com.squareup.okhttp.ResponseBody;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.FormEncodingBuilder;
+import com.squareup.okhttp.MultipartBuilder;
+
+import java.io.IOException;
+import retrofit.converter.*;
+import java.io.*;
+import retrofit.mime.*;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import com.google.gson.Gson;
+//import com.google.gson.reflect.TypeToken;
+import retrofit.http.TypeToken;
+import retrofit.http.RequestException;
+import retrofit.RetrofitError;
+import retrofit.client.Header;
+import retrofit.RestAdapter.LogLevel;
+import com.squareup.okhttp.HttpUrl;
+import retrofit.RequestInterceptor;
+
+import rx.schedulers.*;
+
+/**
+ * @see "https://github.com/square/okhttp/wiki/Recipes"
+ */
+${gwtCompatibleAnnotation}
+public final class $subclass$formalTypes extends $origClass$actualTypes {
+
+    final OkHttpClient client;
+    public static final String _MIME_APP_JSON = "applications/json";
+    public static final String _CHARSET_UTF8 = "charset=utf-8";
+    public static final String _MIME_APP_JSON_CHARSET_UTF8 = _MIME_APP_JSON + "; " + _CHARSET_UTF8;
+    Converter converter;
+    retrofit.RestAdapter.LogLevel logLevel;
+    retrofit.RequestInterceptor requestInterceptor = retrofit.RequestInterceptor.NONE;
+    retrofit.ErrorHandler errorHandler = retrofit.ErrorHandler.DEFAULT;
+
+## Constructor
+
+    public $subclass() {
+        client = new OkHttpClient();
+
+        try {
+
+#if ($converter != "")
+    #if ($gsonConverter != "")
+
+            this.converter = new ${converter}(new com.google.gson.Gson());
+
+    #else
+
+            this.converter = new ${converter}();
+
+    #end
+#else
+
+            /**
+             * Parse JsonArray
+             * gson.fromJson(jsonString, Wrapper[].class);
+             * mapper.readValue(jsonString, typeFactory.constructCollectionType(List.class, SomeClass.class));
+             */
+
+            this.converter = new retrofit.converter.LoganSquareConverter();
+
+#end
+
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+        this.logLevel = retrofit.RestAdapter.LogLevel.$logLevel;
+
+#if ($requestInterceptor != "")
+
+        this.requestInterceptor = new $requestInterceptor();
+
+#end
+
+#if ($errorHandler != "")
+
+        this.errorHandler = new $errorHandler();
+
+#end
+
+    }
+
+## Property getters
+
+#foreach ($p in $props)
+
+    @Override
+    ${p.access}${p.type} ${p.getter}(${p.args}) {
+
+        Converter myConverter = this.converter;
+
+#if ($p.converter != "")
+
+        try {
+
+    #if ($p.gsonConverter != "")
+
+            myConverter = new ${p.converter}(new com.google.gson.Gson());
+
+    #else
+
+            myConverter = new ${p.converter}();
+
+    #end
+
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+
+#end
+
+        final Converter finalConverter = myConverter;
+
+        String _url = "${p.path}";
+        if (!_url.startsWith("http://") && !_url.startsWith("https://")) {
+            _url = "${baseUrl}" + _url;
+        }
+
+        HttpUrl.Builder httpUrlBuilder = HttpUrl.parse(_url).newBuilder();
+
+    #foreach ($query in $p.queries.entrySet())
+
+        httpUrlBuilder.addQueryParameter("${query.key}", $query.value);
+
+    #end
+
+        HttpUrl httpUrl = httpUrlBuilder.build();
+
+        Request.Builder requestBuilder = new Request.Builder().url(httpUrl);
+
+        final String _finalUrl = httpUrl.toString();
+
+        String bodyString = null;
+
+    #if ($p.get)
+
+    #elseif ($p.post)
+        #if ($p.body && $p.body != "")
+
+        TypedOutput typedOutput = null;
+        try {
+            typedOutput = finalConverter.toBody($p.body);
+            bodyString = toString(typedOutput);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+            //throw retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+        }
+        //if (bodyString == null) throw new NullPointerException();
+        requestBuilder.post(RequestBody.create(MediaType.parse(typedOutput.mimeType()), bodyString));
+
+        #elseif (!$p.fields.isEmpty())
+
+        FormEncodingBuilder formBuilder = new FormEncodingBuilder();
+
+            #foreach ($field in $p.fields.entrySet())
+
+        formBuilder.add("$field.key", $field.value);
+
+            #end
+
+        requestBuilder.post(formBuilder.build());
+
+        #end
+    #elseif ($p.put)
+        #if (!$p.parts.isEmpty())
+
+        MultipartBuilder partsBuilder = new MultipartBuilder().type(MultipartBuilder.FORM);
+
+##        String value == null;
+##        MediaType mediaType = null;
+
+            #foreach ($part in $p.parts.entrySet())
+                #if ($part.value.typedFile)
+
+        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
+            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.file()));
+
+                #elseif ($part.value.typedString)
+
+##       mediaType = MediaType.parse(${part.value.name}.mimeType());
+##       toString(${part.value.name});
+##       bodyStringBuilder.append(value);
+
+        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
+            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.toString()));
+
+                #elseif ($part.value.typedByteArray)
+
+        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
+            RequestBody.create(MediaType.parse(${part.value.name}.mimeType()), ${part.value.name}.getBytes()));
+
+## new String(bodyBytes, bodyCharset);
+
+                #elseif ($part.value.mimeType != "")
+
+                ## elseif ($part.value.file)
+
+        partsBuilder.addPart(Headers.of("Content-Disposition", "form-data; name=\"${part.key}\""),
+            RequestBody.create(MediaType.parse("${part.value.mimeType}"), ${part.value.name}));
+
+                #else
+
+        partsBuilder.addFormDataPart("${part.key}", ${part.value.name});
+
+                #end
+            #end
+
+        requestBuilder.put(partsBuilder.build());
+
+        #else
+
+        requestBuilder.put(RequestBody.create(MediaType.parse(_MIME_APP_JSON_CHARSET_UTF8), ""));
+
+        #end
+
+    #elseif ($p.delete)
+
+        requestBuilder.delete();
+
+    #elseif ($p.head)
+
+        requestBuilder.head();
+
+    #end
+
+    #foreach ($header in $headers.entrySet())
+
+        requestBuilder.addHeader("$header.key", $header.value);
+
+    #end
+
+    #foreach ($header in $p.headers.entrySet())
+
+        requestBuilder.addHeader("$header.key", $header.value);
+
+    #end
+
+        Request request = requestBuilder.build();
+
+    #if ($requestInterceptor != "")
+
+        SimpleRequestFacade requestFacade = new SimpleRequestFacade(request);
+        requestInterceptor.intercept(requestFacade);
+        request = requestFacade.request();
+
+    #end
+
+        if (logLevel.log()) {
+            // Log the request data.
+            try {
+              request = logAndReplaceRequest("HTTP", request, bodyString);
+            } catch (IOException e) {
+            }
+        }
+
+        Observable<com.squareup.okhttp.Response> responseCachedObs = Observable.create(new OnSubscribeResponse(client, request)).doOnNext(new Action1<com.squareup.okhttp.Response>() {
+            @Override public void call(com.squareup.okhttp.Response response) {
+            }
+
+    #if (!$retryHeaders.isEmpty())
+
+        }).onErrorResumeNext(new Func1<Throwable, Observable<com.squareup.okhttp.Response>>() {
+            @Override public Observable<com.squareup.okhttp.Response> call(Throwable e) {
+                if (e instanceof RequestException) {
+                    RequestException requestException = (RequestException) e;
+                    Request.Builder reqBuilder = requestException.request().newBuilder();
+
+        #foreach ($header in $retryHeaders.entrySet())
+
+                    reqBuilder.addHeader("$header.key", $header.value);
+
+        #end
+
+                    return Observable.create(new OnSubscribeResponse(client, reqBuilder.build()));
+                }
+                return Observable.error(e);
+            }
+
+    #end
+
+        #if ($errorHandler != "")
+
+        }).onErrorResumeNext(new Func1<Throwable, Observable<com.squareup.okhttp.Response>>() {
+            @Override public Observable<com.squareup.okhttp.Response> call(Throwable e) {
+                if (e instanceof IOException) {
+                    return Observable.error(retrofit.RetrofitError.networkError(_finalUrl, (IOException) e));
+                }
+                return Observable.error(e);
+            }
+
+        #end
+
+        })
+        .cache();
+
+    #if (!$p.responseType)
+        #if ($p.observable)
+
+        $p.type obs;
+
+        #elseif ($p.callback)
+
+        Observable<$p.typeArgs> obs;
+
+        #else
+
+        Observable<$p.type> obs;
+
+        #end
+
+        obs = responseCachedObs.map(new Func1<com.squareup.okhttp.Response, String>() {
+            @Override public String call(com.squareup.okhttp.Response response) {
+                try {
+                    return response.body().string();
+                } catch (Exception e) {
+                    //throw new RuntimeException(e);
+                    throw retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                }
+            }
+        }).filter(new Func1<String, Boolean>() {
+            @Override public Boolean call(String json) {
+                return json != null;
+            }
+        }).map(new Func1<String, $p.typeArgs>() {
+            @Override public $p.typeArgs call(String json) {
+                // TODO Using RetrofitConveter
+                try {
+                    if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
+                        log.log(json);
+                    }
+
+        #if ($p.typeArgs2 != "")
+
+                    Type type = new TypeToken<${p.typeArgs}>(){}.getType();
+                    return (${p.typeArgs}) finalConverter.fromBody(new JsonTypedInput(json), type);
+
+        #else
+
+                    return (${p.typeArgs}) finalConverter.fromBody(new JsonTypedInput(json), ${p.typeArgs}.class);
+
+        #end
+
+                } catch (Exception e) {
+                    //throw new RuntimeException(e);
+                    throw retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                }
+            }
+        }).filter(new Func1<$p.typeArgs, Boolean>() {
+            @Override public Boolean call($p.typeArgs object) {
+                return object != null;
+            }
+        });
+
+    #end
+
+        Observable<retrofit.client.Response> retrofitResponseObs = responseCachedObs.map(new Func1<com.squareup.okhttp.Response, retrofit.client.Response>() {
+            @Override public retrofit.client.Response call(com.squareup.okhttp.Response response) {
+                return parseResponse(response);
+            }
+        });
+
+    #if ($p.blocking)
+        #if ($p.responseType)
+
+        return retrofitResponseObs
+
+        #if ($errorHandler != "")
+
+            .onErrorResumeNext(new Func1<Throwable, Observable<retrofit.client.Response>>() {
+                @Override public Observable<retrofit.client.Response> call(Throwable e) {
+                    retrofit.RetrofitError retrofitError = null;
+                    if (e instanceof retrofit.RetrofitError) {
+                        retrofitError = (retrofit.RetrofitError) e;
+                    } else {
+                        retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                    }
+                    // network error should be handled before
+                    if (retrofitError.getKind() == RetrofitError.Kind.NETWORK) {
+                        return Observable.error(retrofitError);
+                    }
+                    return Observable.error(errorHandler.handleError(retrofitError));
+                }
+            })
+
+        #end
+
+            .subscribeOn(Schedulers.io()).toBlocking().single();
+
+        #else
+
+        return obs
+
+        #if ($errorHandler != "")
+
+            .onErrorResumeNext(new Func1<Throwable, Observable<$p.type>>() {
+                @Override public Observable<$p.type> call(Throwable e) {
+                    retrofit.RetrofitError retrofitError = null;
+                    if (e instanceof retrofit.RetrofitError) {
+                        retrofitError = (retrofit.RetrofitError) e;
+                    } else {
+                        retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                    }
+                    return Observable.error(errorHandler.handleError(retrofitError));
+                }
+            })
+
+        #end
+
+            .subscribeOn(Schedulers.io()).toBlocking().single();
+
+        #end
+    #elseif ($p.callback)
+        #if ($p.responseType) // Callback<Response>
+
+        retrofitResponseObs
+
+        #if ($errorHandler != "")
+
+            .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
+                @Override public Observable<$p.typeArgs> call(Throwable e) {
+                    retrofit.RetrofitError retrofitError = null;
+                    if (e instanceof retrofit.RetrofitError) {
+                        retrofitError = (retrofit.RetrofitError) e;
+                    } else {
+                        retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                    }
+                    return Observable.error(errorHandler.handleError(retrofitError));
+                }
+            })
+
+        #end
+
+            .subscribeOn(Schedulers.io()).subscribe(new Action1<$p.typeArgs>() {
+            @Override public void call($p.typeArgs object) {
+                ${p.callbackName}.success(object, object);
+            }
+        }, new Action1<Throwable>() {
+            @Override public void call(Throwable e) {
+                ${p.callbackName}.failure(retrofit.RetrofitError.unexpectedError(_finalUrl, e));
+            }
+        });
+
+        #else // Callback<MODEL>
+
+        Observable.zip(retrofitResponseObs, obs, new Func2<retrofit.client.Response, $p.typeArgs, $p.typeArgs>() {
+            @Override public $p.typeArgs call(retrofit.client.Response response, $p.typeArgs object) {
+                ${p.callbackName}.success(object, response);
+                return object;
+            }
+        })
+
+        #if ($errorHandler != "")
+
+        .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
+            @Override public Observable<$p.typeArgs> call(Throwable e) {
+                retrofit.RetrofitError retrofitError = null;
+                if (e instanceof retrofit.RetrofitError) {
+                    retrofitError = (retrofit.RetrofitError) e;
+                } else {
+                    retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                }
+                return Observable.error(errorHandler.handleError(retrofitError));
+            }
+        })
+
+        #end
+
+        .subscribeOn(Schedulers.io()).subscribe(new Action1<$p.typeArgs>() {
+            @Override public void call($p.typeArgs object) {
+            }
+        }, new Action1<Throwable>() {
+            @Override public void call(Throwable e) {
+                ${p.callbackName}.failure(retrofit.RetrofitError.unexpectedError(_finalUrl, e));
+            }
+        });
+
+        #end
+    #else
+        #if ($p.responseType)
+
+        return retrofitResponseObs;
+
+        #else
+
+        return obs
+
+        #if ($errorHandler != "")
+
+        .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
+            @Override public Observable<$p.typeArgs> call(Throwable e) {
+                retrofit.RetrofitError retrofitError = null;
+                if (e instanceof retrofit.RetrofitError) {
+                    retrofitError = (retrofit.RetrofitError) e;
+                } else {
+                    retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
+                }
+                return Observable.error(errorHandler.handleError(retrofitError));
+            }
+        })
+
+        #end
+
+            ;
+
+        #end
+    #end
+
+    }
+#end
+
+    // TODO onUnSubscribe to call.cancel();
+    public static class OnSubscribeResponse implements Observable.OnSubscribe<com.squareup.okhttp.Response> {
+        final Request request;
+        final OkHttpClient client;
+
+        public OnSubscribeResponse(OkHttpClient client, Request request) {
+            this.request = request;
+            this.client = client;
+        }
+
+        @Override
+        public void call(final Subscriber<? super com.squareup.okhttp.Response> sub) {
+            try {
+                client.newCall(request).enqueue(new com.squareup.okhttp.Callback() {
+                    @Override public void onFailure(Request r, IOException e) {
+                        sub.onError(new RequestException(r, e));
+                    }
+                    @Override public void onResponse(com.squareup.okhttp.Response response) {
+                        sub.onNext(response);
+                        sub.onCompleted();
+                    }
+                });
+            } catch (Exception e) {
+                sub.onError(e);
+            }
+        }
+    }
+
+    public static class JsonTypedInput implements TypedInput {
+        public static final String MIME_APP_JSON = "applications/json";
+        public static final String CHARSET_UTF8 = "charset=utf-8";
+        public static final String MIME_APP_JSON_CHARSET_UTF8 = MIME_APP_JSON + "; " + _CHARSET_UTF8;
+        private final byte[] bytes;
+        private final InputStream in;
+
+        public JsonTypedInput(String json) {
+            bytes = json.getBytes(); // json.getBytes(java.nio.charset.StandardCharsets.UTF_8.toString());
+            in = new ByteArrayInputStream(json.getBytes());
+        }
+
+        @Override public InputStream in() {
+            return in;
+        }
+        @Override public long length() {
+            return bytes.length;
+        }
+        @Override public String mimeType() {
+            return MIME_APP_JSON_CHARSET_UTF8;
+        }
+    }
+
+    public static String toString(TypedOutput typedOutput) {
+        String string = null;
+        try {
+            ByteArrayOutputStream bytesOutputStream = new ByteArrayOutputStream();
+            typedOutput.writeTo(bytesOutputStream);
+            string = bytesOutputStream.toString(); // bytesOutputStream.toString(java.nio.charset.StandardCharsets.UTF_8.toString());
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+        return string;
+    }
+
+    public static class SimpleRequestFacade implements RequestInterceptor.RequestFacade {
+        Request.Builder requestBuilder;
+        HttpUrl.Builder httpUrlBuilder;
+        String path;
+
+        public SimpleRequestFacade(Request request) {
+            this.requestBuilder = request.newBuilder();
+            HttpUrl httpUrl = request.httpUrl();
+            this.path = java.net.URLDecoder.decode(httpUrl.encodedPath());
+            this.httpUrlBuilder = httpUrl.newBuilder();
+        }
+
+        public Request.Builder requestBuilder() {
+            httpUrlBuilder.encodedPath(path);
+            return requestBuilder;
+        }
+
+        public Request request() {
+            return requestBuilder().url(httpUrlBuilder.build()).build();
+        }
+
+        @Override public void addEncodedPathParam(String name, String value) {
+            if (name == null || "".equals(name)) {
+                path += "/" + value;
+            } else {
+                path = path.replace("{" + name + "}", value);
+            }
+        }
+        @Override public void addEncodedQueryParam(String name, String value) {
+            httpUrlBuilder.addEncodedQueryParameter(name, value);
+        }
+        @Override public void addHeader(String name, String value) {
+            requestBuilder.addHeader(name, value);
+        }
+        @Override public void addPathParam(String name, String value) {
+            addEncodedPathParam(java.net.URLDecoder.decode(name), java.net.URLDecoder.decode(value));
+        }
+        @Override public void addQueryParam(String name, String value) {
+            httpUrlBuilder.addQueryParameter(name, value);
+        }
+    }
+
+    static retrofit.client.Response parseResponse(com.squareup.okhttp.Response response) {
+        return new retrofit.client.Response(response.request().urlString(), response.code(), response.message(),
+                createHeaders(response.headers()), createResponseBody(response.body()));
+    }
+
+    private static TypedInput createResponseBody(final ResponseBody body) {
+        try {
+            if (body.contentLength() == 0) {
+                return null;
+            }
+        } catch (IOException e) {
+            return null;
+        }
+        return new TypedInput() {
+            @Override public String mimeType() {
+                MediaType mediaType = body.contentType();
+                return mediaType == null ? null : mediaType.toString();
+            }
+
+            @Override public long length() {
+                try {
+                    return body.contentLength();
+                } catch (IOException e) {
+                    return 0L;
+                }
+            }
+
+            @Override public InputStream in() throws IOException {
+                return body.byteStream();
+            }
+        };
+    }
+
+    private static List<Header> createHeaders(Headers headers) {
+        int size = headers.size();
+        List<Header> headerList = new ArrayList<Header>(size);
+        for (int i = 0; i < size; i++) {
+            headerList.add(new Header(headers.name(i), headers.value(i)));
+        }
+        return headerList;
+    }
+
+    /** Simple logging abstraction for debug messages. */
+    public interface Log {
+        /** Log a debug message to the appropriate console. */
+        void log(String message);
+
+        /** A {@link Log} implementation which does not log anything. */
+        Log NONE = new Log() {
+            @Override public void log(String message) {
+            }
+        };
+    }
+
+    // TODO @Log()
+    private Log log = new Log() {
+        @Override public void log(String message) {
+            System.out.println(message);
+        }
+    };
+
+  /** Log request headers and body. Consumes request body and returns identical replacement. */
+  Request logAndReplaceRequest(String name, Request request, String bodyString) throws IOException {
+      log.log(String.format("---> %s %s %s", name, request.method(), request.urlString()));
+
+      if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
+          log.log(request.headers().toString());
+
+          String bodySize = "no";
+          RequestBody body = request.body();
+          if (body != null) {
+              MediaType type = body.contentType();
+              if (type != null) {
+                  log.log("Content-Type: " + type);
+              }
+
+              long bodyLength = body.contentLength();
+              bodySize = bodyLength + "-byte";
+              if (bodyLength != -1) {
+                  log.log("Content-Length: " + bodyLength);
+              }
+
+              if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
+                  if (request.headers().size() > 0) {
+                      log.log("");
+                  }
+                  log.log(bodyString);
+              } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {
+                  if (request.headers().size() > 0) {
+                      log.log("---> REQUEST:");
+                  }
+                  // TODO args
+              }
+          }
+
+          log.log(String.format("---> END %s (%s body)", name, bodySize));
+      }
+
+      return request;
+  }
+
+  /** Log response headers and body. Consumes response body and returns identical replacement. */
+  /*
+  private Response logAndReplaceResponse(String url, Response response, long elapsedTime)
+      throws IOException {
+    log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));
+
+    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
+      for (Header header : response.getHeaders()) {
+        log.log(header.toString());
+      }
+
+      long bodySize = 0;
+      TypedInput body = response.getBody();
+      if (body != null) {
+        bodySize = body.length();
+
+        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
+          if (!response.getHeaders().isEmpty()) {
+            log.log("");
+          }
+
+          if (!(body instanceof TypedByteArray)) {
+            // Read the entire response body so we can log it and replace the original response
+            response = Utils.readBodyToBytesIfNecessary(response);
+            body = response.getBody();
+          }
+
+          byte[] bodyBytes = ((TypedByteArray) body).getBytes();
+          bodySize = bodyBytes.length;
+          String bodyMime = body.mimeType();
+          String bodyCharset = MimeUtil.parseCharset(bodyMime, "UTF-8");
+          log.log(new String(bodyBytes, bodyCharset));
+        }
+      }
+
+      log.log(String.format("<--- END HTTP (%s-byte body)", bodySize));
+    }
+
+    return response;
+  }
+
+  private void logResponseBody(TypedInput body, Object convert) {
+    if (logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {
+      log.log("<--- BODY:");
+      log.log(convert.toString());
+    }
+  }
+  */
+
+  /** Log an exception that occurred during the processing of a request or response. */
+  /*
+  void logException(Throwable t, String url) {
+    log.log(String.format("---- ERROR %s", url != null ? url : ""));
+    StringWriter sw = new StringWriter();
+    t.printStackTrace(new PrintWriter(sw));
+    log.log(sw.toString());
+    log.log("---- END ERROR");
+  }
+  */
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodExtractorTest.java b/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodExtractorTest.java
new file mode 100644
index 000000000..47e640a82
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodExtractorTest.java
@@ -0,0 +1,106 @@
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableMultimap;
+
+import junit.framework.TestCase;
+
+import java.io.StringReader;
+
+/**
+ * Tests for {@link AbstractMethodExtractor}.
+ *
+ * @author Éamonn McManus
+ */
+public class AbstractMethodExtractorTest extends TestCase {
+  public void testSimple() {
+    String source = "package com.example;\n"
+        + "import retrofit.http.Retrofit;\n"
+        + "import java.util.Map;\n"
+        + "@Retrofit"
+        + "abstract class Foo {\n"
+        + "  Foo(int one, String two, Map<String, String> three) {\n"
+        + "    return new Retrofit_Foo(one, two, three);\n"
+        + "  }\n"
+        + "  abstract int one();\n"
+        + "  abstract String two();\n"
+        + "  abstract Map<String, String> three();\n"
+        + "}\n";
+    JavaTokenizer tokenizer = new JavaTokenizer(new StringReader(source));
+    AbstractMethodExtractor extractor = new AbstractMethodExtractor();
+    ImmutableMultimap<String, String> expected = ImmutableMultimap.of(
+        "com.example.Foo", "one",
+        "com.example.Foo", "two",
+        "com.example.Foo", "three");
+    ImmutableMultimap<String, String> actual = extractor.abstractMethods(tokenizer, "com.example");
+    assertEquals(expected, actual);
+  }
+
+  public void testNested() {
+    String source = "package com.example;\n"
+        + "import retrofit.http.Retrofit;\n"
+        + "import java.util.Map;\n"
+        + "abstract class Foo {\n"
+        + "  @Retrofit\n"
+        + "  abstract class Baz {\n"
+        + "    abstract <T extends Number & Comparable<T>> T complicated();\n"
+        + "    abstract int simple();\n"
+        + "    abstract class Irrelevant {\n"
+        + "      void distraction() {\n"
+        + "        abstract class FurtherDistraction {\n"
+        + "          abstract int buh();\n"
+        + "        }\n"
+        + "      }\n"
+        + "    }\n"
+        + "  }\n"
+        + "  @Retrofit\n"
+        + "  abstract class Bar {\n"
+        + "    abstract String whatever();\n"
+        + "  }\n"
+        + "  abstract class AlsoIrrelevant {\n"
+        + "    void distraction() {}\n"
+        + "  }\n"
+        + "}\n";
+    JavaTokenizer tokenizer = new JavaTokenizer(new StringReader(source));
+    AbstractMethodExtractor extractor = new AbstractMethodExtractor();
+    ImmutableMultimap<String, String> expected = ImmutableMultimap.of(
+        "com.example.Foo.Baz", "complicated",
+        "com.example.Foo.Baz", "simple",
+        "com.example.Foo.Bar", "whatever");
+    ImmutableMultimap<String, String> actual = extractor.abstractMethods(tokenizer, "com.example");
+    assertEquals(expected, actual);
+  }
+
+  public void testClassConstants() {
+    // Regression test for a bug where String.class was parsed as introducing a class definition
+    // of a later identifier.
+    String source = "package com.example;\n"
+        + "import retrofit.http.Retrofit;\n"
+        + "import com.google.common.collect.ImmutableSet;\n"
+        + "import com.google.common.labs.reflect.ValueType;\n"
+        + "import com.google.common.primitives.Primitives;\n"
+        + "public final class ProducerMetadata<T> extends ValueType {\n"
+        + "  private static final ImmutableSet<Class<?>> ALLOWABLE_MAP_KEY_TYPES =\n"
+        + "    ImmutableSet.<Class<?>>builder()\n"
+        + "    .addAll(Primitives.allPrimitiveTypes())\n"
+        + "    .addAll(Primitives.allWrapperTypes())\n"
+        + "    .add(String.class)\n"
+        + "    .add(Class.class)\n"
+        + "    .build();\n"
+        + "  @Retrofit abstract static class SourcedKeySet {\n"
+        + "    abstract ImmutableSet<Key<?>> unknownSource();\n"
+        + "    abstract ImmutableSet<Key<?>> fromInputs();\n"
+        + "    abstract ImmutableSet<Key<?>> fromNodes();\n"
+        + "    abstract ImmutableSet<Key<?>> all();\n"
+        + "  }\n"
+        + "}";
+    JavaTokenizer tokenizer = new JavaTokenizer(new StringReader(source));
+    AbstractMethodExtractor extractor = new AbstractMethodExtractor();
+    ImmutableMultimap<String, String> expected = ImmutableMultimap.of(
+        "com.example.ProducerMetadata.SourcedKeySet", "unknownSource",
+        "com.example.ProducerMetadata.SourcedKeySet", "fromInputs",
+        "com.example.ProducerMetadata.SourcedKeySet", "fromNodes",
+        "com.example.ProducerMetadata.SourcedKeySet", "all");
+    ImmutableMultimap<String, String> actual = extractor.abstractMethods(tokenizer, "com.example");
+    assertEquals(expected, actual);
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodListerTest.java b/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodListerTest.java
new file mode 100644
index 000000000..9b72920fa
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/AbstractMethodListerTest.java
@@ -0,0 +1,57 @@
+package retrofit.processor;
+
+import junit.framework.TestCase;
+
+import java.io.InputStream;
+import java.util.Arrays;
+import java.util.List;
+
+/**
+ * Tests for {@link AbstractMethodLister}.
+ *
+ * @author Éamonn McManus
+ */
+public class AbstractMethodListerTest extends TestCase {
+  /** Test class for the abstractNoArgMethods() test cases. */
+  public abstract class Abstract {
+    abstract int foo();
+    abstract String baz(int x);
+    abstract boolean bar();
+    abstract void irrelevantVoid();
+    abstract Thread baz();
+    void irrelevant() {}
+    int alsoIrrelevant() {
+      return 0;
+    }
+  }
+
+  /** Test class for the abstractNoArgMethods() test cases. */
+  abstract class AbstractSub extends Abstract {
+    @Override boolean bar() {
+      return false;
+    }
+
+    public abstract String buh();
+  }
+
+  // Test that the abstract no-arg non-void methods we scan out of the given class correspond
+  // to the expected ones. We use the hallowed trick of looking up the class file as a resource
+  // in order to be able to read its contents.
+  private void testAbstractNoArgMethods(Class<?> abstractClass, String... expectedMethods)
+      throws Exception {
+    ClassLoader loader = abstractClass.getClassLoader();
+    String resourceName = abstractClass.getName().replace('.', '/') + ".class";
+    InputStream inputStream = loader.getResourceAsStream(resourceName);
+    AbstractMethodLister abstractMethodLister = new AbstractMethodLister(inputStream);
+    List<String> methods = abstractMethodLister.abstractNoArgMethods();
+    assertEquals(Arrays.asList(expectedMethods), methods);
+  }
+
+  public void testAbstractNoParent() throws Exception {
+    testAbstractNoArgMethods(Abstract.class, "foo", "bar", "baz");
+  }
+
+  public void testAbstractWithParent() throws Exception {
+    testAbstractNoArgMethods(AbstractSub.class, "buh");
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/CompilationErrorsTest.java b/retrofit-processor/src/test/java/retrofit/processor/CompilationErrorsTest.java
new file mode 100644
index 000000000..5465d9fd1
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/CompilationErrorsTest.java
@@ -0,0 +1,234 @@
+/*
+ * Copyright (C) 2012 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.base.Charsets;
+import com.google.common.base.Predicates;
+import com.google.common.collect.ArrayListMultimap;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMultimap;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Multimap;
+import com.google.common.io.Files;
+
+import junit.framework.TestCase;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.regex.Pattern;
+
+import javax.tools.Diagnostic;
+import javax.tools.DiagnosticCollector;
+import javax.tools.JavaCompiler;
+import javax.tools.JavaFileObject;
+import javax.tools.JavaFileObject.Kind;
+import javax.tools.StandardJavaFileManager;
+import javax.tools.StandardLocation;
+import javax.tools.ToolProvider;
+
+/**
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class CompilationErrorsTest extends TestCase {
+
+  // TODO(user): add tests for:
+  // - superclass in a different package with nonpublic abstract methods (this must fail but
+  //   is it clean?)
+
+  private JavaCompiler javac;
+  private DiagnosticCollector<JavaFileObject> diagnosticCollector;
+  private StandardJavaFileManager fileManager;
+  private File tmpDir;
+
+  @Override
+  protected void setUp() {
+    javac = ToolProvider.getSystemJavaCompiler();
+    diagnosticCollector = new DiagnosticCollector<JavaFileObject>();
+    fileManager = javac.getStandardFileManager(diagnosticCollector, null, null);
+    tmpDir = Files.createTempDir();
+  }
+
+  @Override
+  protected void tearDown() {
+    boolean deletedAll = deleteDirectory(tmpDir);
+    assertTrue(deletedAll);
+  }
+
+  // Files.deleteRecursively has been deprecated because Dr Evil could put a symlink in the
+  // temporary directory while this test is running and make you delete a bunch of unrelated stuff.
+  // That's surely not much of a problem here, but just in case, we check that anything we're going
+  // to delete is either a directory or ends with .java or .class.
+  // TODO(user): simplify now that we are only using this to test compilation failure.
+  // It should be straightforward to know exactly what files will be generated.
+  private boolean deleteDirectory(File dir) {
+    File[] files = dir.listFiles();
+    boolean deletedAll = true;
+    for (File file : files) {
+      if (file.isDirectory()) {
+        deletedAll &= deleteDirectory(file);
+      } else if (file.getName().endsWith(".java") || file.getName().endsWith(".class")) {
+        deletedAll &= file.delete();
+      } else {
+        fail("Not deleting unexpected file " + file);
+      }
+    }
+    return dir.delete() && deletedAll;
+  }
+
+  // Ensure that assertCompilationFails does in fact throw AssertionError when compilation succeeds.
+  /* FIXME
+  public void testAssertCompilationFails() throws Exception {
+    String testSourceCode =
+        "package foo.bar;\n" +
+        "import retrofit.http.Retrofit;\n" +
+        "import retrofit.http.Retrofit.GET;\n" +
+        "@Retrofit\n" +
+        "public abstract class Baz {\n" +
+        "  @GET(\"/\")" +
+        "  public abstract Observable<Integer> integer();\n" +
+        "  public static Baz create() {\n" +
+        "    return new Retrofit_Baz();\n" +
+        "  }\n" +
+        "}\n";
+    boolean compiled = false;
+    try {
+      assertCompilationFails(ImmutableList.of(testSourceCode));
+      compiled = true;
+    } catch (AssertionError expected) {
+    }
+    assertFalse(compiled);
+  }
+  */
+  public void testDummy() { }
+
+  // We compile the test classes by writing the source out to our temporary directory and invoking
+  // the compiler on them. An earlier version of this test used an in-memory JavaFileManager, but
+  // that is probably overkill, and in any case led to a problem that I gave up trying to fix,
+  // where a bunch of classes were somehow failing to load, such as junit.framework.TestFailure
+  // and the local classes that are defined in the various test methods. The TestFailure class in
+  // particular worked fine if I instantiated it before running any test code, but something in the
+  // invocation of javac.getTask with the MemoryFileManager broke things. I don't know how to
+  // explain what I saw other than as a bug in the JDK and the simplest fix was just to use
+  // the standard JavaFileManager.
+  private void assertCompilationFails(List<String> testSourceCode) throws IOException {
+    assertCompilationResultIs(ImmutableMultimap.of(Diagnostic.Kind.ERROR, Pattern.compile("")),
+        testSourceCode);
+  }
+
+  private void assertCompilationSucceedsWithoutWarning(List<String> testSourceCode)
+      throws IOException {
+    assertCompilationResultIs(ImmutableMultimap.<Diagnostic.Kind, Pattern>of(), testSourceCode);
+  }
+
+  private void assertCompilationResultIs(
+      Multimap<Diagnostic.Kind, Pattern> expectedDiagnostics,
+      List<String> testSourceCode) throws IOException {
+    assertFalse(testSourceCode.isEmpty());
+
+    StringWriter compilerOut = new StringWriter();
+
+    List<String> options = ImmutableList.of(
+        "-sourcepath", tmpDir.getPath(),
+        "-d", tmpDir.getPath(),
+        "-processor", RetrofitProcessor.class.getName(),
+        "-Xlint");
+    javac.getTask(compilerOut, fileManager, diagnosticCollector, options, null, null);
+    // This doesn't compile anything but communicates the paths to the JavaFileManager.
+
+    // Convert the strings containing the source code of the test classes into files that we
+    // can feed to the compiler.
+    List<String> classNames = Lists.newArrayList();
+    List<JavaFileObject> sourceFiles = Lists.newArrayList();
+    for (String source : testSourceCode) {
+      ClassName className = ClassName.extractFromSource(source);
+      File dir = new File(tmpDir, className.sourceDirectoryName());
+      dir.mkdirs();
+      assertTrue(dir.isDirectory());  // True if we just made it, or it was already there.
+      String sourceName = className.simpleName + ".java";
+      Files.write(source, new File(dir, sourceName), Charsets.UTF_8);
+      classNames.add(className.fullName());
+      JavaFileObject sourceFile = fileManager.getJavaFileForInput(
+          StandardLocation.SOURCE_PATH, className.fullName(), Kind.SOURCE);
+      sourceFiles.add(sourceFile);
+    }
+    assertEquals(classNames.size(), sourceFiles.size());
+
+    // Compile the classes.
+    JavaCompiler.CompilationTask javacTask = javac.getTask(
+        compilerOut, fileManager, diagnosticCollector, options, classNames, sourceFiles);
+    boolean compiledOk = javacTask.call();
+
+    // Check that there were no compilation errors unless we were expecting there to be.
+    // We ignore "notes", typically debugging output from the annotation processor
+    // when that is enabled.
+    Multimap<Diagnostic.Kind, String> diagnostics = ArrayListMultimap.create();
+    for (Diagnostic<?> diagnostic : diagnosticCollector.getDiagnostics()) {
+      boolean ignore = (diagnostic.getKind() == Diagnostic.Kind.NOTE
+          || (diagnostic.getKind() == Diagnostic.Kind.WARNING
+              && diagnostic.getMessage(null).contains(
+                  "No processor claimed any of these annotations")));
+      if (!ignore) {
+        diagnostics.put(diagnostic.getKind(), diagnostic.getMessage(null));
+      }
+    }
+    assertEquals(diagnostics.containsKey(Diagnostic.Kind.ERROR), !compiledOk);
+    assertEquals("Diagnostic kinds should match: " + diagnostics,
+        expectedDiagnostics.keySet(), diagnostics.keySet());
+    for (Map.Entry<Diagnostic.Kind, Pattern> expectedDiagnostic : expectedDiagnostics.entries()) {
+      Collection<String> actualDiagnostics = diagnostics.get(expectedDiagnostic.getKey());
+      assertTrue("Diagnostics should contain " + expectedDiagnostic + ": " + diagnostics,
+          Iterables.any(actualDiagnostics, Predicates.contains(expectedDiagnostic.getValue())));
+    }
+  }
+
+  private static class ClassName {
+    final String packageName; // Package name with trailing dot. May be empty but not null.
+    final String simpleName;
+
+    private ClassName(String packageName, String simpleName) {
+      this.packageName = packageName;
+      this.simpleName = simpleName;
+    }
+
+    // Extract the package and simple name of the top-level class defined in the given string,
+    // which is a Java sourceUnit unit.
+    static ClassName extractFromSource(String sourceUnit) {
+      String pkg;
+      if (sourceUnit.contains("package ")) {
+        // (?s) means that . matches everything including \n
+        pkg = sourceUnit.replaceAll("(?s).*?package ([a-z.]+);.*", "$1") + ".";
+      } else {
+        pkg = "";
+      }
+      String cls = sourceUnit.replaceAll("(?s).*?(class|interface|enum) ([A-Za-z0-9_$]+).*", "$2");
+      assertTrue(cls, cls.matches("[A-Za-z0-9_$]+"));
+      return new ClassName(pkg, cls);
+    }
+
+    String fullName() {
+      return packageName + simpleName;
+    }
+
+    String sourceDirectoryName() {
+      return packageName.replace('.', '/');
+    }
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/CompilationTest.java b/retrofit-processor/src/test/java/retrofit/processor/CompilationTest.java
new file mode 100644
index 000000000..8e63da430
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/CompilationTest.java
@@ -0,0 +1,716 @@
+/*
+ * Copyright (C) 2014 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import static com.google.common.truth.Truth.assertAbout;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableSet;
+import com.google.testing.compile.JavaFileObjects;
+
+import junit.framework.TestCase;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.ElementFilter;
+import javax.tools.JavaFileObject;
+
+import retrofit.processor.RetrofitBuilderProcessor;
+import retrofit.processor.RetrofitProcessor;
+
+/**
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class CompilationTest extends TestCase {
+    /* FIXME
+  public void testCompilation() {
+    // Positive test case that ensures we generate the expected code for at least one case.
+    // Most Retrofit code-generation tests are functional, meaning that we check that the generated
+    // code does the right thing rather than checking what it looks like, but this test is a sanity
+    // check that we are not generating correct but weird code.
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract int buh();",
+        "",
+        "  public static Baz create(int buh) {",
+        "    return new Retrofit_Baz(buh);",
+        "  }",
+        "}");
+    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines(
+        "foo.bar.Retrofit_Baz",
+        "package foo.bar;",
+        "",
+        "final class Retrofit_Baz extends Baz {",
+        "  private final int buh;",
+        "",
+        "  Retrofit_Baz(int buh) {",
+        "    this.buh = buh;",
+        "  }",
+        "",
+        "  @Override public int buh() {",
+        "    return buh;",
+        "  }",
+        "",
+        "  @Override public String toString() {",
+        "    return \"Baz{\"",
+        "        + \"buh=\" + buh",
+        "        + \"}\";",
+        "  }",
+        "",
+        "  @Override public boolean equals(Object o) {",
+        "    if (o == this) {",
+        "      return true;",
+        "    }",
+        "    if (o instanceof Baz) {",
+        "      Baz that = (Baz) o;",
+        "      return (this.buh == that.buh());",
+        "    }",
+        "    return false;",
+        "  }",
+        "",
+        "  @Override public int hashCode() {",
+        "    int h = 1;",
+        "    h *= 1000003;",
+        "    h ^= this.buh;",
+        "    return h;",
+        "  }",
+        "}"
+    );
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(expectedOutput);
+  }
+    */
+
+  /* FIXME
+  public void testImports() {
+    // Test that referring to the same class in two different ways does not confuse the import logic
+    // into thinking it is two different classes and that therefore it can't import. The code here
+    // is nonsensical but successfully reproduces a real problem, which is that a TypeMirror that is
+    // extracted using Elements.getTypeElement(name).asType() does not compare equal to one that is
+    // extracted from ExecutableElement.getReturnType(), even though Types.isSameType considers them
+    // equal. So unless we are careful, the java.util.Arrays that we import explicitly to use its
+    // methods will appear different from the java.util.Arrays that is the return type of the
+    // arrays() method here.
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "import java.util.Arrays;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract int[] ints();",
+        "  public abstract Arrays arrays();",
+        "",
+        "  public static Baz create(int[] ints, Arrays arrays) {",
+        "    return new Retrofit_Baz(ints, arrays);",
+        "  }",
+        "}");
+    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines(
+        "foo.bar.Retrofit_Baz",
+        "package foo.bar;",
+        "",
+        "import java.util.Arrays;",
+        "",
+        "final class Retrofit_Baz extends Baz {",
+        "  private final int[] ints;",
+        "  private final Arrays arrays;",
+        "",
+        "  Retrofit_Baz(int[] ints, Arrays arrays) {",
+        "    if (ints == null) {",
+        "      throw new NullPointerException(\"Null ints\");",
+        "    }",
+        "    this.ints = ints;",
+        "    if (arrays == null) {",
+        "      throw new NullPointerException(\"Null arrays\");",
+        "    }",
+        "    this.arrays = arrays;",
+        "  }",
+        "",
+        "  @Override public int[] ints() {",
+        "    return ints.clone();",
+        "  }",
+        "",
+        "  @Override public Arrays arrays() {",
+        "    return arrays;",
+        "  }",
+        "",
+        "  @Override public String toString() {",
+        "    return \"Baz{\"",
+        "        + \"ints=\" + Arrays.toString(ints) + \", \"",
+        "        + \"arrays=\" + arrays",
+        "        + \"}\";",
+        "  }",
+        "",
+        "  @Override public boolean equals(Object o) {",
+        "    if (o == this) {",
+        "      return true;",
+        "    }",
+        "    if (o instanceof Baz) {",
+        "      Baz that = (Baz) o;",
+        "      return (Arrays.equals(this.ints, (that instanceof Retrofit_Baz) "
+                      + "? ((Retrofit_Baz) that).ints : that.ints()))",
+        "          && (this.arrays.equals(that.arrays()));",
+        "    }",
+        "    return false;",
+        "  }",
+        "",
+        "  @Override public int hashCode() {",
+        "    int h = 1;",
+        "    h *= 1000003;",
+        "    h ^= Arrays.hashCode(this.ints);",
+        "    h *= 1000003;",
+        "    h ^= this.arrays.hashCode();",
+        "    return h;",
+        "  }",
+        "}"
+    );
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(expectedOutput);
+  }
+  */
+
+  public void testNoMultidimensionalPrimitiveArrays() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract int[][] ints();",
+        "",
+        "  public static Baz create(int[][] ints) {",
+        "    return new Retrofit_Baz(ints);",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("Retrofit class cannot define an array-valued property "
+            + "unless it is a primitive array")
+        .in(javaFileObject).onLine(7);
+  }
+
+  public void testNoObjectArrays() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract String[] strings();",
+        "",
+        "  public static Baz create(String[] strings) {",
+        "    return new Retrofit_Baz(strings);",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("Retrofit class cannot define an array-valued property "
+            + "unless it is a primitive array")
+        .in(javaFileObject).onLine(7);
+  }
+
+  public void testAnnotationOnInterface() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public interface Baz {}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("Retrofit only applies to classes")
+        .in(javaFileObject).onLine(6);
+  }
+
+  public void testAnnotationOnEnum() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public enum Baz {}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("Retrofit only applies to classes")
+        .in(javaFileObject).onLine(6);
+  }
+
+  /* FIXME
+  public void testExtendRetrofit() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Outer",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "public class Outer {",
+        "  @Retrofit",
+        "  static abstract class Parent {",
+        "    static Parent create(int randomProperty) {",
+        "      return new Retrofit_Outer_Parent(randomProperty);",
+        "    }",
+        "",
+        "    abstract int randomProperty();",
+        "  }",
+        "",
+        "  @Retrofit",
+        "  static abstract class Child extends Parent {",
+        "    static Child create(int randomProperty) {",
+        "      return new Retrofit_Outer_Child(randomProperty);",
+        "    }",
+        "",
+        "    abstract int randomProperty();",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("may not extend")
+        .in(javaFileObject).onLine(16);
+  }
+  */
+
+  public void testNonExistentSuperclass() throws Exception {
+    // The main purpose of this test is to check that RetrofitProcessor doesn't crash the
+    // compiler in this case.
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Existent extends NonExistent {",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("NonExistent")
+        .in(javaFileObject).onLine(6);
+  }
+
+  public void testCannotImplementAnnotation() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.RetentionImpl",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "import java.lang.annotation.Retention;",
+        "import java.lang.annotation.RetentionPolicy;",
+        "",
+        "@Retrofit",
+        "public abstract class RetentionImpl implements Retention {",
+        "  public static Retention create(RetentionPolicy policy) {",
+        "    return new Retrofit_RetentionImpl(policy);",
+        "  }",
+        "",
+        "  @Override public Class<? extends Retention> annotationType() {",
+        "    return Retention.class;",
+        "  }",
+        "",
+        "  @Override public boolean equals(Object o) {",
+        "    return (o instanceof Retention && value().equals((Retention) o).value());",
+        "  }",
+        "",
+        "  @Override public int hashCode() {",
+        "    return (\"value\".hashCode() * 127) ^ value().hashCode();",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("may not be used to implement an annotation interface")
+        .in(javaFileObject).onLine(8);
+  }
+
+  public void testMissingPropertyType() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract MissingType missingType();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("MissingType")
+        .in(javaFileObject).onLine(7);
+  }
+
+  public void testMissingGenericPropertyType() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract MissingType<?> missingType();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("MissingType")
+        .in(javaFileObject).onLine(7);
+  }
+
+  public void testMissingComplexGenericPropertyType() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "import java.util.Map;",
+        "import java.util.Set;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract Map<Set<?>, MissingType<?>> missingType();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("MissingType")
+        .in(javaFileObject).onLine(10);
+  }
+
+  public void testMissingSuperclassGenericParameter() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz<T extends MissingType<?>> {",
+        "  public abstract int foo();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .failsToCompile()
+        .withErrorContaining("MissingType")
+        .in(javaFileObject).onLine(6);
+  }
+
+  public void testRetrofitBuilderOnTopLevelClass() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Builder",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit.Builder",
+        "public interface Builder {",
+        "  Builder foo(int x);",
+        "  Object build();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor(), new RetrofitBuilderProcessor())
+        .failsToCompile()
+        .withErrorContaining("can only be applied to a class or interface inside")
+        .in(javaFileObject).onLine(6);
+  }
+
+  public void testRetrofitBuilderNotInsideRetrofit() throws Exception {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "public abstract class Baz {",
+        "  abstract int foo();",
+        "",
+        "  static Builder builder() {",
+        "    return new Retrofit_Baz.Builder();",
+        "  }",
+        "",
+        "  @Retrofit.Builder",
+        "  public interface Builder {",
+        "    Builder foo(int x);",
+        "    Baz build();",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor(), new RetrofitBuilderProcessor())
+        .failsToCompile()
+        .withErrorContaining("can only be applied to a class or interface inside")
+        .in(javaFileObject).onLine(13);
+  }
+
+  public void testRetrofitBuilderDuplicate() {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  @Retrofit.Builder",
+        "  public interface Builder1 {",
+        "    Baz build();",
+        "  }",
+        "",
+        "  @Retrofit.Builder",
+        "  public interface Builder2 {",
+        "    Baz build();",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor(), new RetrofitBuilderProcessor())
+        .failsToCompile()
+        .withErrorContaining("already has a Builder: foo.bar.Baz.Builder1")
+        .in(javaFileObject).onLine(13);
+  }
+
+  public void testRetrofitValidateNotInRetrofit() {
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "public abstract class Baz {",
+        "  abstract String blam();",
+        "",
+        "  @Retrofit.Validate",
+        "  void validate() {}",
+        "",
+        "  public interface Builder {",
+        "    Builder blam(String x);",
+        "    Baz build();",
+        "  }",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor(), new RetrofitBuilderProcessor())
+        .failsToCompile()
+        .withErrorContaining(
+            "@Retrofit.Validate can only be applied to a method inside an @Retrofit class")
+        .in(javaFileObject).onLine(9);
+  }
+
+  private static class PoisonedRetrofitProcessor extends RetrofitProcessor {
+    private final IllegalArgumentException filerException;
+
+    PoisonedRetrofitProcessor(IllegalArgumentException filerException) {
+      this.filerException = filerException;
+    }
+
+    private class ErrorInvocationHandler implements InvocationHandler {
+      private final ProcessingEnvironment originalProcessingEnv;
+
+      ErrorInvocationHandler(ProcessingEnvironment originalProcessingEnv) {
+        this.originalProcessingEnv = originalProcessingEnv;
+      }
+
+      @Override
+      public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+        if (method.getName().equals("getFiler")) {
+          throw filerException;
+        } else {
+          return method.invoke(originalProcessingEnv, args);
+        }
+      }
+    };
+
+    @Override
+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+      ProcessingEnvironment poisonedProcessingEnv = (ProcessingEnvironment) Proxy.newProxyInstance(
+          getClass().getClassLoader(),
+          new Class<?>[] {ProcessingEnvironment.class},
+          new ErrorInvocationHandler(processingEnv));
+      processingEnv = poisonedProcessingEnv;
+      return super.process(annotations, roundEnv);
+    }
+  }
+
+  /* FIXME
+  public void testExceptionBecomesError() throws Exception {
+    // Ensure that if the annotation processor code gets an unexpected exception, it is converted
+    // into a compiler error rather than being propagated. Otherwise the output can be very
+    // confusing to the user who stumbles into a bug that causes an exception, whether in
+    // RetrofitProcessor or javac.
+    // We inject an exception by subclassing RetrofitProcessor in order to poison its processingEnv
+    // in a way that will cause an exception the first time it tries to get the Filer.
+    IllegalArgumentException exception =
+        new IllegalArgumentException("I don't understand the question, and I won't respond to it");
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  public abstract int foo();",
+        "}");
+    assertAbout(javaSource())
+        .that(javaFileObject)
+        .processedWith(new PoisonedRetrofitProcessor(exception))
+        .failsToCompile()
+        .withErrorContaining(exception.toString())
+        .in(javaFileObject).onLine(6);
+  }
+  */
+
+  @Retention(RetentionPolicy.SOURCE)
+  public @interface Foo {}
+
+  /* Processor that generates an empty class BarFoo every time it sees a class Bar annotated with
+   * @Foo.
+   */
+  public static class FooProcessor extends AbstractProcessor {
+    @Override
+    public Set<String> getSupportedAnnotationTypes() {
+      return ImmutableSet.of(Foo.class.getCanonicalName());
+    }
+
+    @Override
+    public SourceVersion getSupportedSourceVersion() {
+      return SourceVersion.latestSupported();
+    }
+
+    @Override
+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+      Set<? extends Element> elements = roundEnv.getElementsAnnotatedWith(Foo.class);
+      for (TypeElement type : ElementFilter.typesIn(elements)) {
+        try {
+          generateFoo(type);
+        } catch (IOException e) {
+          throw new AssertionError(e);
+        }
+      }
+      return false;
+    }
+
+    private void generateFoo(TypeElement type) throws IOException {
+      String pkg = TypeSimplifier.packageNameOf(type);
+      String className = type.getSimpleName().toString();
+      String generatedClassName = className + "Foo";
+      JavaFileObject source =
+          processingEnv.getFiler().createSourceFile(pkg + "." + generatedClassName, type);
+      PrintWriter writer = new PrintWriter(source.openWriter());
+      writer.println("package " + pkg + ";");
+      writer.println("public class " + generatedClassName + " {}");
+      writer.close();
+    }
+  }
+
+  /* FIXME
+  public void testReferencingGeneratedClass() {
+    // Test that ensures that a type that does not exist can be the type of an @Retrofit property
+    // as long as it later does come into existence. The BarFoo type referenced here does not exist
+    // when the RetrofitProcessor runs on the first round, but the FooProcessor then generates it.
+    // That generation provokes a further round of annotation processing and RetrofitProcessor
+    // should succeed then.
+    JavaFileObject bazFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "import retrofit.http.Retrofit.GET;",
+        "import rx.Observable;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  @GET(\"/\")",
+        "  public abstract Observable<BarFoo> barFoo();",
+        "",
+        "  public static Baz create() {",
+        "    return new Retrofit_Baz();",
+        "  }",
+        "}");
+    JavaFileObject barFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Bar",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "",
+        "@" + Foo.class.getCanonicalName(),
+        "public abstract class Bar {",
+        "  public abstract BarFoo barFoo();",
+        "}");
+    assertAbout(javaSources())
+        .that(ImmutableList.of(bazFileObject, barFileObject))
+        .processedWith(new RetrofitProcessor(), new FooProcessor())
+        .compilesWithoutError();
+  }
+  */
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/JavaTokenizerTest.java b/retrofit-processor/src/test/java/retrofit/processor/JavaTokenizerTest.java
new file mode 100644
index 000000000..698c3bea0
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/JavaTokenizerTest.java
@@ -0,0 +1,64 @@
+package retrofit.processor;
+
+import junit.framework.TestCase;
+
+import java.io.StringReader;
+
+/**
+ * Unit tests for {@link JavaTokenizer}.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class JavaTokenizerTest extends TestCase {
+  public void testSimple() {
+    // Construct a string containing the tokens produced from this source code, with a space after
+    // each one, and compare it with what we expect from the tokenization.
+    String source = "package com.example;\n"
+        + "import com.example.foo.Bar;\n"
+        + "\n"
+        + "/**\n"
+        + " * Fictitious Foo class.\n"
+        + " */\n"
+        + "public class Foo {   // comment\n"
+        + "  abstract int bar();\n"
+        + "  Foo() {}\n"
+        + "  public static create(int bar) {\n"
+        + "    System.out.println(\"hello, \\\"world\\\"\");\n"
+        + "    int x = 1729;\n"
+        + "    float f = 1.2e+3;\n"
+        + "    char c1 = 'x';\n"
+        + "    char c2 = '\\'';\n"
+        + "    char c3 = '\\\\';\n"
+        + "    return new Retrofit_Foo(bar);\n"
+        + "  }\n"
+        + "}\n";
+    String expectedTokens = "package com . example ; "
+        + "import com . example . foo . Bar ; "
+        + "public class Foo { "
+        + "abstract int bar ( ) ; "
+        + "Foo ( ) { } "
+        + "public static create ( int bar ) { "
+        + "System . out . println ( 0 ) ; "
+        + "int x = 0 ; "
+        + "float f = 0 ; "
+        + "char c1 = 0 ; "
+        + "char c2 = 0 ; "
+        + "char c3 = 0 ; "
+        + "return new Retrofit_Foo ( bar ) ; "
+        + "} "
+        + "} ";
+    JavaTokenizer tokenizer = new JavaTokenizer(new StringReader(source));
+    StringBuilder tokenStringBuilder = new StringBuilder();
+    String token;
+    while ((token = tokenizer.nextToken()) != null) {
+      assertFalse(token.contains(" "));
+      tokenStringBuilder.append(token).append(' ');
+      if (tokenStringBuilder.length() > 1000) {
+        // The tokenizer must be stuck in a loop returning the same token over and over.
+        fail("Too many tokens: " + tokenStringBuilder);
+      }
+    }
+    String tokens = tokenStringBuilder.toString();
+    assertEquals(expectedTokens, tokens);
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/NoVelocityLoggingTest.java b/retrofit-processor/src/test/java/retrofit/processor/NoVelocityLoggingTest.java
new file mode 100644
index 000000000..4dd7c64c5
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/NoVelocityLoggingTest.java
@@ -0,0 +1,85 @@
+package retrofit.processor;
+
+import static com.google.common.truth.Truth.assert_;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+import com.google.common.io.Files;
+import com.google.testing.compile.JavaFileObjects;
+
+import junit.framework.TestCase;
+import org.apache.velocity.runtime.log.JdkLogChute;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.logging.FileHandler;
+import java.util.logging.Level;
+import java.util.logging.LogManager;
+import java.util.logging.Logger;
+import java.util.logging.SimpleFormatter;
+
+import javax.tools.JavaFileObject;
+
+/**
+ * Ensure that we have foiled Velocity in its attempts to log by default. If users have Log4J in
+ * their classpath then Velocity will typically create a velocity.log file which is of no interest
+ * and is likely to cause confusion. This test checks that we have successfully disabled that
+ * behaviour.
+ *
+ * @see <a href="https://github.com/google/auto/issues/151">Issue 151</a>
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class NoVelocityLoggingTest extends TestCase {
+  /* FIXME
+  public void testDontLog() throws IOException {
+    File log = File.createTempFile("NoVelocityLoggingTest", "log");
+    try {
+      doTestDontLog(log);
+    } finally {
+      log.delete();
+    }
+  }
+  */
+  public void testDummy() { }
+
+  private void doTestDontLog(File log) throws IOException {
+    // Set things up so that if Velocity is successfully logging then we will see its log output
+    // in the temporary file we have created. This depends on Velocity falling back on JDK logging,
+    // so this test won't do anything useful if its classpath contains Log4J or Commons Logging or
+    // any of the other exotic logging systems that Velocity will pounce on if it sees them.
+    FileHandler fileHandler = new FileHandler(log.getPath());
+    fileHandler.setFormatter(new SimpleFormatter());
+    Logger logger = Logger.getLogger(JdkLogChute.DEFAULT_LOG_NAME);
+    logger.addHandler(fileHandler);
+    logger.setLevel(Level.ALL);
+    LogManager logManager = LogManager.getLogManager();
+    logManager.addLogger(logger);
+
+    // Now do a random compilation that implies using RetrofitProcessor.
+    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines(
+        "foo.bar.Baz",
+        "package foo.bar;",
+        "",
+        "import retrofit.http.Retrofit;",
+        "import retrofit.http.Retrofit.GET;",
+        "import rx.Observable;",
+        "",
+        "@Retrofit",
+        "public abstract class Baz {",
+        "  @GET(\"/\")",
+        "  public abstract Observable<Integer> buh();",
+        "",
+        "  public static Baz create() {",
+        "    return new Retrofit_Baz();",
+        "  }",
+        "}");
+    assert_().about(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .compilesWithoutError();
+
+    // The log file should be empty.
+    fileHandler.close();
+    assertEquals("", Files.toString(log, StandardCharsets.UTF_8));
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/PropertyAnnotationsTest.java b/retrofit-processor/src/test/java/retrofit/processor/PropertyAnnotationsTest.java
new file mode 100644
index 000000000..a54bdcfbc
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/PropertyAnnotationsTest.java
@@ -0,0 +1,339 @@
+package retrofit.processor;
+
+import static com.google.common.truth.Truth.assert_;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+
+import junit.framework.TestCase;
+
+import java.util.List;
+
+import javax.tools.JavaFileObject;
+
+/**
+ * Tests to ensure annotations are kept on Retrofit generated classes
+ *
+ * @author jmcampanini
+ */
+public class PropertyAnnotationsTest extends TestCase {
+
+  private static final String PROPERTY_ANNOTATION_TEST =
+      "retrofit.processor.PropertyAnnotationsTest";
+  private static final String TEST_ANNOTATION =
+      "@retrofit.processor.PropertyAnnotationsTest.TestAnnotation";
+
+  public static enum TestEnum {
+    A, B;
+
+    @Override
+    public String toString() {
+      // used to prove that the method we determine the value does not use the `toString()` method
+      // of the enum
+      return "not the same value";
+    }
+  }
+
+  public static @interface TestAnnotation {
+    byte testByte() default 1;
+    short testShort() default 2;
+    int testInt() default 3;
+    long testLong() default 4L;
+    float testFloat() default 5.6f;
+    double testDouble() default 7.8d;
+    char testChar() default 'a';
+    String testString() default "10";
+    boolean testBoolean() default false;
+    Class<?> testClass() default TestEnum.class;
+    TestEnum testEnum() default TestEnum.A;
+    OtherAnnotation testAnnotation() default @OtherAnnotation(foo = 23, bar = "baz");
+  }
+
+  public static @interface OtherAnnotation {
+    int foo() default 123;
+    String bar() default "bar";
+  }
+
+  public static @interface TestAnnotationArray {
+    byte[] testBytes() default {1, 2};
+    short[] testShorts() default {3, 4};
+    int[] testInts() default {5, 6};
+    long[] testLongs() default {7L, 8L};
+    float[] testFloats() default {9.1f, 2.3f};
+    double[] testDoubles() default {4.5d, 6.7d};
+    char[] testChars() default {'a', 'b'};
+    String[] testStrings() default {"cde", "fgh"};
+    boolean[] testBooleans() default {true, false};
+    Class<?>[] testClasses() default {TestEnum.class, TestEnum.class};
+    TestEnum[] testEnums() default {TestEnum.A, TestEnum.B};
+    OtherAnnotation[] testAnnotations()
+        default {@OtherAnnotation(foo = 999), @OtherAnnotation(bar = "baz")};
+  }
+
+  private JavaFileObject sourceCode(List<String> imports, List<String> annotations) {
+    ImmutableList<String> list = ImmutableList.<String>builder()
+        .add(
+            "package foo.bar;",
+            "",
+            "import retrofit.http.Retrofit;",
+            "import retrofit.http.Retrofit.GET;"
+        )
+        .addAll(imports)
+        .add(
+            "",
+            "@Retrofit(\"http://example.com\")",
+            "public abstract class Baz {"
+        )
+        .addAll(annotations)
+        .add(
+            "  @GET(\"/\")",
+            "  public abstract Observable<Integer> buh();",
+            "",
+            "  public static Baz create() {",
+            "    return new Retrofit_Baz();",
+            "  }",
+            "}"
+        )
+        .build();
+
+    String[] lines = list.toArray(new String[list.size()]);
+    return JavaFileObjects.forSourceLines("foo.bar.Baz", lines);
+  }
+
+  private JavaFileObject expectedCode(List<String> annotations) {
+    ImmutableList<String> list = ImmutableList.<String>builder()
+        .add(
+            "package foo.bar;",
+            "",
+            "final class Retrofit_Baz extends Baz {",
+            "  private final int buh;",
+            "",
+            "  Retrofit_Baz(int buh) {",
+            "    this.buh = buh;",
+            "  }",
+            ""
+        )
+        .addAll(annotations)
+        .add(
+            "  @Override public int buh() {",
+            "    return buh;",
+            "  }",
+            "",
+            "  @Override public String toString() {",
+            "    return \"Baz{\"",
+            "        + \"buh=\" + buh",
+            "        + \"}\";",
+            "  }",
+            "",
+            "  @Override public boolean equals(Object o) {",
+            "    if (o == this) {",
+            "      return true;",
+            "    }",
+            "    if (o instanceof Baz) {",
+            "      Baz that = (Baz) o;",
+            "      return (this.buh == that.buh());",
+            "    }",
+            "    return false;",
+            "  }",
+            "",
+            "  @Override public int hashCode() {",
+            "    int h = 1;",
+            "    h *= 1000003;",
+            "    h ^= this.buh;",
+            "    return h;",
+            "  }",
+            "}"
+        )
+        .build();
+
+    String[] lines = list.toArray(new String[list.size()]);
+    return JavaFileObjects.forSourceLines("foo.bar.Retrofit_Baz", lines);
+  }
+
+  private void assertGeneratedMatches(
+      List<String> imports,
+      List<String> annotations,
+      List<String> expectedAnnotations) {
+
+    JavaFileObject javaFileObject = sourceCode(imports, annotations);
+    JavaFileObject expectedOutput = expectedCode(expectedAnnotations);
+
+    assert_().about(javaSource())
+        .that(javaFileObject)
+        .processedWith(new RetrofitProcessor())
+        .compilesWithoutError()
+        .and().generatesSources(expectedOutput);
+  }
+
+  /*
+  public void testSimpleAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.of("import javax.annotation.Nullable;"),
+        ImmutableList.of("@Nullable"),
+        ImmutableList.of("@javax.annotation.Nullable"));
+  }
+
+  public void testSingleStringValueAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of("@SuppressWarnings(\"a\")"),
+        ImmutableList.of("@java.lang.SuppressWarnings(value={\"a\"})"));
+  }
+
+  public void testMultiStringValueAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of("@SuppressWarnings({\"a\", \"b\"})"),
+        ImmutableList.of("@java.lang.SuppressWarnings(value={\"a\", \"b\"})"));
+  }
+
+  public void testNumberValueAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION + "(testShort = 1, testInt = 2, testLong = 3L)"),
+        ImmutableList.of(TEST_ANNOTATION + "(testShort = 1, testInt = 2, testLong = 3L)"));
+  }
+
+  public void testByteValueAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION + "(testByte = 0)"),
+        ImmutableList.of(TEST_ANNOTATION + "(testByte = 0)"));
+  }
+
+  public void testDecimalValueAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION + "(testDouble = 1.2d, testFloat = 3.4f)"),
+        ImmutableList.of(TEST_ANNOTATION + "(testDouble = 1.2d, testFloat = 3.4f)"));
+  }
+
+  public void testOtherValuesAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testBoolean = true, testString = \"hallo\", testChar = 'a')"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testBoolean = true, testString = \"hallo\", testChar = 'a')"));
+  }
+
+  public void testClassAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testClass = String.class)"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testClass = java.lang.String.class)"));
+  }
+
+  public void testEnumAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testEnum = " + PROPERTY_ANNOTATION_TEST + ".TestEnum.A)"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testEnum = " + PROPERTY_ANNOTATION_TEST + ".TestEnum.A)"));
+  }
+
+  public void testEmptyAnnotationAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testAnnotation = @" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation)"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testAnnotation = @" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation)"));
+  }
+
+  public void testValuedAnnotationAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testAnnotation = @" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation(foo=999))"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "(testAnnotation = @" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation(foo=999))"));
+  }
+
+  public void testNumberArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testShorts = {2, 3}, testInts = {4, 5}, testLongs = {6L, 7L})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testShorts = {2, 3}, testInts = {4, 5}, testLongs = {6L, 7L})"));
+  }
+
+  public void testByteArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION + "Array(testBytes = {0, 1})"),
+        ImmutableList.of(TEST_ANNOTATION + "Array(testBytes = {0, 1})"));
+  }
+
+  public void testDecimalArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testDoubles = {1.2d, 3.4d}, testFloats = {5.6f, 7.8f})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testDoubles = {1.2d, 3.4d}, testFloats = {5.6f, 7.8f})"));
+  }
+
+  public void testOtherArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testBooleans = {false, false},"
+            + " testStrings = {\"aaa\", \"bbb\"}, testChars={'x', 'y'})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testBooleans = {false, false},"
+            + " testStrings = {\"aaa\", \"bbb\"}, testChars={'x', 'y'})"));
+  }
+
+  public void testClassArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION + "Array(testClasses = {String.class, Long.class})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testClasses = {java.lang.String.class, java.lang.Long.class})"));
+  }
+
+  public void testImportedClassArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.of("import javax.annotation.Nullable;"),
+        ImmutableList.of(TEST_ANNOTATION + "Array(testClasses = {Nullable.class, Long.class})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testClasses = {javax.annotation.Nullable.class, java.lang.Long.class})"));
+  }
+
+  public void testEnumArrayAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testEnums = {" + PROPERTY_ANNOTATION_TEST + ".TestEnum.A})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testEnums = {" + PROPERTY_ANNOTATION_TEST + ".TestEnum.A})"));
+  }
+
+  public void testArrayOfEmptyAnnotationAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testAnnotations = {@" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testAnnotations = {@" + PROPERTY_ANNOTATION_TEST + ".OtherAnnotation})"));
+  }
+
+  public void testArrayOfValuedAnnotationAnnotation() {
+    assertGeneratedMatches(
+        ImmutableList.<String>of(),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testAnnotations = {@" + PROPERTY_ANNOTATION_TEST
+            + ".OtherAnnotation(foo = 999)})"),
+        ImmutableList.of(TEST_ANNOTATION
+            + "Array(testAnnotations = {@" + PROPERTY_ANNOTATION_TEST
+            + ".OtherAnnotation(foo = 999)})"));
+  }
+  */
+  public void testDummy() { }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/ReformatterTest.java b/retrofit-processor/src/test/java/retrofit/processor/ReformatterTest.java
new file mode 100644
index 000000000..600b85d7e
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/ReformatterTest.java
@@ -0,0 +1,73 @@
+package retrofit.processor;
+
+import junit.framework.TestCase;
+
+/**
+ * Unit tests for {@link Reformatter}.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class ReformatterTest extends TestCase {
+  public void testSimple() {
+    String input =
+        "\n"
+        + "package com.latin.declension;  \n"
+        + "\n"
+        + "\n"
+        + "public  class  Idem  {  \n"
+        + "  \n"
+        + "  Eadem   idem  ;  \n"
+        + "\n"
+        + "  Eundem eandem ( Idem  eiusdem  )  {\n"
+        + "\n"
+        + "    eiusdem (   eiusdem  )  ;  \n"
+        + "\n"
+        + "    eidem_eidem_eidem( ) ;\n"
+        + "\n"
+        + "  }\n"
+        + "\n"
+        + "\n"
+        + "  Eodem ( Eadem eodem ) { }\n";
+    String output =
+        "\n"
+        + "package com.latin.declension;\n"
+        + "\n"
+        + "public class Idem {\n"
+        + "\n"
+        + "  Eadem idem;\n"
+        + "\n"
+        + "  Eundem eandem (Idem eiusdem) {\n"
+        + "    eiusdem (eiusdem);\n"
+        + "    eidem_eidem_eidem();\n"
+        + "  }\n"
+        + "\n"
+        + "  Eodem (Eadem eodem) { }\n";
+    assertEquals(output, Reformatter.fixup(input));
+  }
+
+  public void testSpecialSpaces() {
+    String input =
+        "\n"
+        + "package com.example.whatever;\n"
+        + "\n"
+        + "public class SomeClass {\n"
+        + "  static final String STRING = \"  hello  world  \\n\";  \n"
+        + "  static final String STRING_WITH_QUOTES = \" \\\"quote  me  now  \\\"  \"  ;\n"
+        + "  static final int INT = /* not a string \" */  23  ;\n"
+        + "  static final char QUOTE = '\"'  ;\n"
+        + "  static final char QUOTE2 = '\\\"'  ;\n"
+        + "}\n";
+    String output =
+        "\n"
+        + "package com.example.whatever;\n"
+        + "\n"
+        + "public class SomeClass {\n"
+        + "  static final String STRING = \"  hello  world  \\n\";\n"
+        + "  static final String STRING_WITH_QUOTES = \" \\\"quote  me  now  \\\"  \";\n"
+        + "  static final int INT = /* not a string \" */ 23;\n"
+        + "  static final char QUOTE = '\"';\n"
+        + "  static final char QUOTE2 = '\\\"';\n"
+        + "}\n";
+    assertEquals(output, Reformatter.fixup(input));
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/TemplateVarsTest.java b/retrofit-processor/src/test/java/retrofit/processor/TemplateVarsTest.java
new file mode 100644
index 000000000..bd2900081
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/TemplateVarsTest.java
@@ -0,0 +1,122 @@
+package retrofit.processor;
+
+import com.google.common.collect.ImmutableList;
+
+import junit.framework.TestCase;
+import org.apache.velocity.runtime.RuntimeSingleton;
+import org.apache.velocity.runtime.parser.ParseException;
+import org.apache.velocity.runtime.parser.node.SimpleNode;
+
+import java.io.Reader;
+import java.io.StringReader;
+import java.util.List;
+
+/**
+ * Tests for FieldReader.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class TemplateVarsTest extends TestCase {
+  static class HappyVars extends TemplateVars {
+    Integer integer;
+    String string;
+    List<Integer> list;
+    private static final String IGNORED_STATIC_FINAL = "hatstand";
+
+    @Override SimpleNode parsedTemplate() {
+      return parsedTemplateForString("integer=$integer string=$string list=$list");
+    }
+  }
+
+  static SimpleNode parsedTemplateForString(String string) {
+    try {
+      Reader reader = new StringReader(string);
+      return RuntimeSingleton.parse(reader, string);
+    } catch (ParseException e) {
+      throw new AssertionError(e);
+    }
+  }
+
+  public void testHappy() {
+    HappyVars happy = new HappyVars();
+    happy.integer = 23;
+    happy.string = "wibble";
+    happy.list = ImmutableList.of(5, 17, 23);
+    assertEquals("hatstand", HappyVars.IGNORED_STATIC_FINAL);  // just to avoid unused warning
+    String expectedText = "integer=23 string=wibble list=[5, 17, 23]";
+    String actualText = happy.toText();
+    assertEquals(expectedText, actualText);
+  }
+
+  public void testUnset() {
+    HappyVars sad = new HappyVars();
+    sad.integer = 23;
+    sad.list = ImmutableList.of(23);
+    try {
+      sad.toText();
+      fail("Did not get expected exception");
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+
+  static class SubSub extends HappyVars {}
+
+  public void testSubSub() {
+    try {
+      new SubSub();
+      fail("Did not get expected exception");
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+
+  static class Private extends TemplateVars {
+    Integer integer;
+    private String string;
+
+    @Override SimpleNode parsedTemplate() {
+      throw new UnsupportedOperationException();
+    }
+  }
+
+  public void testPrivate() {
+    try {
+      new Private();
+      fail("Did not get expected exception");
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+
+  static class Static extends TemplateVars {
+    Integer integer;
+    static String string;
+
+    @Override SimpleNode parsedTemplate() {
+      throw new UnsupportedOperationException();
+    }
+  }
+
+  public void testStatic() {
+    try {
+      new Static();
+      fail("Did not get expected exception");
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+
+  static class Primitive extends TemplateVars{
+    int integer;
+    String string;
+
+    @Override SimpleNode parsedTemplate() {
+      throw new UnsupportedOperationException();
+    }
+  }
+
+  public void testPrimitive() {
+    try {
+      new Primitive();
+      fail("Did not get expected exception");
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/TypeSimplifierTest.java b/retrofit-processor/src/test/java/retrofit/processor/TypeSimplifierTest.java
new file mode 100644
index 000000000..fa6f5c92b
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/TypeSimplifierTest.java
@@ -0,0 +1,667 @@
+/*
+ * Copyright (C) 2012 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import com.google.common.base.Charsets;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.io.Files;
+
+import junit.framework.TestCase;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.ErrorType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.type.TypeVariable;
+import javax.lang.model.util.ElementFilter;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+import javax.tools.DiagnosticCollector;
+import javax.tools.JavaCompiler;
+import javax.tools.JavaFileObject;
+import javax.tools.JavaFileObject.Kind;
+import javax.tools.StandardJavaFileManager;
+import javax.tools.StandardLocation;
+import javax.tools.ToolProvider;
+
+/**
+ * Tests for {@link TypeSimplifier}.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class TypeSimplifierTest extends TestCase {
+  private static final ImmutableMap<String, String> CLASS_TO_SOURCE = ImmutableMap.of(
+      "Test",
+          "public class Test {}\n",
+      "MultipleBounds",
+          "import java.util.List;\n"
+          + "public class MultipleBounds<K extends List<V> & Comparable<K>, V> {}\n",
+      "Erasure",
+          "import java.util.List;\n"
+          + "import java.util.Map;\n"
+          + "@SuppressWarnings(\"rawtypes\")"
+          + "public class Erasure<T> {\n"
+          + "  int intNo; boolean booleanNo; int[] intArrayNo; String stringNo;\n"
+          + "  String[] stringArrayNo; List rawListNo; List<?> listOfQueryNo;\n"
+          + "  List<? extends Object> listOfQueryExtendsObjectNo;\n"
+          + "  Map<?, ?> mapQueryToQueryNo;\n"
+          + "\n"
+          + "  List<String> listOfStringYes; List<? extends String> listOfQueryExtendsStringYes;\n"
+          + "  List<? super String> listOfQuerySuperStringYes; List<T> listOfTypeVarYes;\n"
+          + "  List<? extends T> listOfQueryExtendsTypeVarYes;\n"
+          + "  List<? super T> listOfQuerySuperTypeVarYes;\n"
+          + "}\n",
+      "Wildcards",
+          "import java.util.Map;\n"
+          + "public abstract class Wildcards {\n"
+          + "  abstract <T extends V, U extends T, V> Map<? extends T, ? super U> one();\n"
+          + "  abstract <T extends V, U extends T, V> Map<? extends T, ? super U> two();\n"
+          + "}\n"
+  );
+  private static final ImmutableMap<String, String> ERROR_CLASS_TO_SOURCE = ImmutableMap.of(
+      "ExtendsUndefinedType",
+          "public class ExtendsUndefinedType extends MissingType {}\n"
+  );
+
+  // This test is a bit unusual. The reason is that TypeSimplifier relies on interfaces such as
+  // Types, TypeMirror, and TypeElement whose implementations are provided by the annotation
+  // processing environment. While we could make fake or mock implementations of those interfaces,
+  // the resulting test would be very verbose and would not obviously be testing the right thing.
+  // Instead, we run the compiler with a simple annotation-processing environment that allows us
+  // to capture the real implementations of these interfaces. Since those implementations are not
+  // necessarily valid when the compiler has exited, we run all our test cases from within our
+  // annotation processor, converting test failures into compiler errors. Then testTypeSimplifier()
+  // passes if there were no compiler errors, and otherwise fails with a message that is a
+  // concatenation of all the individual failures.
+  public void testTypeSimplifier() throws Exception {
+    doTestTypeSimplifierWithSources(new MainTestProcessor(), CLASS_TO_SOURCE);
+  }
+
+  public void testTypeSimplifierErrorTypes() throws IOException {
+    doTestTypeSimplifierWithSources(new ErrorTestProcessor(), ERROR_CLASS_TO_SOURCE);
+  }
+
+  private void doTestTypeSimplifierWithSources(
+      AbstractTestProcessor testProcessor, ImmutableMap<String, String> classToSource)
+      throws IOException {
+    File tmpDir = Files.createTempDir();
+    for (String className : classToSource.keySet()) {
+      File java = new File(tmpDir, className + ".java");
+      Files.write(classToSource.get(className), java, Charsets.UTF_8);
+    }
+    try {
+      doTestTypeSimplifier(testProcessor, tmpDir, classToSource);
+    } finally {
+      for (String className : classToSource.keySet()) {
+        File java = new File(tmpDir, className + ".java");
+        assertTrue(java.delete());
+        new File(tmpDir, className + ".class").delete();
+      }
+      assertTrue(tmpDir.delete());
+    }
+  }
+
+  private void doTestTypeSimplifier(
+      AbstractTestProcessor testProcessor, File tmpDir, ImmutableMap<String, String> classToSource)
+      throws IOException {
+    JavaCompiler javac = ToolProvider.getSystemJavaCompiler();
+    DiagnosticCollector<JavaFileObject> diagnosticCollector =
+        new DiagnosticCollector<JavaFileObject>();
+    StandardJavaFileManager fileManager =
+        javac.getStandardFileManager(diagnosticCollector, null, null);
+
+    StringWriter compilerOut = new StringWriter();
+
+    List<String> options = ImmutableList.of(
+        "-sourcepath", tmpDir.getPath(),
+        "-d", tmpDir.getPath(),
+        "-Xlint");
+    javac.getTask(compilerOut, fileManager, diagnosticCollector, options, null, null);
+    // This doesn't compile anything but communicates the paths to the JavaFileManager.
+
+    ImmutableList.Builder<JavaFileObject> javaFilesBuilder = ImmutableList.builder();
+    for (String className : classToSource.keySet()) {
+      JavaFileObject sourceFile = fileManager.getJavaFileForInput(
+          StandardLocation.SOURCE_PATH, className, Kind.SOURCE);
+      javaFilesBuilder.add(sourceFile);
+    }
+
+    // Compile the empty source file to trigger the annotation processor.
+    // (Annotation processors are somewhat misnamed because they run even on classes with no
+    // annotations.)
+    JavaCompiler.CompilationTask javacTask = javac.getTask(
+        compilerOut, fileManager, diagnosticCollector, options,
+        classToSource.keySet(), javaFilesBuilder.build());
+    javacTask.setProcessors(ImmutableList.of(testProcessor));
+    javacTask.call();
+    List<Diagnostic<? extends JavaFileObject>> diagnostics =
+        new ArrayList<Diagnostic<? extends JavaFileObject>>(diagnosticCollector.getDiagnostics());
+
+    // In the ErrorTestProcessor case, the code being compiled contains a deliberate reference to an
+    // undefined type, so that we can capture an instance of ErrorType. (Synthesizing one ourselves
+    // leads to ClassCastException inside javac.) So remove any errors for that from the output, and
+    // only fail if there were other errors.
+    for (Iterator<Diagnostic<? extends JavaFileObject>> it = diagnostics.iterator();
+         it.hasNext(); ) {
+      Diagnostic<? extends JavaFileObject> diagnostic = it.next();
+      if (diagnostic.getSource() != null
+          && diagnostic.getSource().getName().contains("ExtendsUndefinedType")) {
+        it.remove();
+      }
+    }
+    // In the ErrorTestProcessor case, compilerOut.toString() will include the error for
+    // ExtendsUndefinedType, which can safely be ignored, as well as stack traces for any failing
+    // assertion.
+    assertEquals(compilerOut.toString() + diagnosticCollector.getDiagnostics(),
+        ImmutableList.of(), diagnostics);
+  }
+
+  // A type which is deliberately ambiguous with Map.Entry. Used to perform an ambiguity test below.
+  static final class Entry {}
+
+  private abstract static class AbstractTestProcessor extends AbstractProcessor {
+    private boolean testsRan;
+    Types typeUtil;
+
+    @Override
+    public Set<String> getSupportedAnnotationTypes() {
+      return ImmutableSet.of("*");
+    }
+
+    @Override
+    public final SourceVersion getSupportedSourceVersion() {
+      return SourceVersion.latest();
+    }
+
+    @Override
+    public final boolean process(
+        Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+      if (!testsRan) {
+        testsRan = true;
+        typeUtil = processingEnv.getTypeUtils();
+        runTests();
+      }
+      return false;
+    }
+
+    private void runTests() {
+      for (Method method : getClass().getMethods()) {
+        if (method.getName().startsWith("test")) {
+          try {
+            method.invoke(this);
+          } catch (Exception e) {
+            Throwable cause = (e instanceof InvocationTargetException) ? e.getCause() : e;
+            StringWriter stringWriter = new StringWriter();
+            cause.printStackTrace(new PrintWriter(stringWriter));
+            processingEnv.getMessager().printMessage(
+                Diagnostic.Kind.ERROR, stringWriter.toString());
+          }
+        }
+      }
+    }
+
+    TypeElement typeElementOf(String name) {
+      return processingEnv.getElementUtils().getTypeElement(name);
+    }
+
+    TypeMirror typeMirrorOf(String name) {
+      return typeElementOf(name).asType();
+    }
+
+    TypeMirror baseWithoutContainedTypes() {
+      return typeMirrorOf("java.lang.Object");
+    }
+
+    TypeMirror baseDeclaresEntry() {
+      return typeMirrorOf("java.util.Map");
+    }
+  }
+
+  private static class MainTestProcessor extends AbstractTestProcessor {
+    private Set<TypeMirror> typeMirrorSet(TypeMirror... typeMirrors) {
+      Set<TypeMirror> set = new TypeMirrorSet();
+      for (TypeMirror typeMirror : typeMirrors) {
+        assertTrue(set.add(typeMirror));
+      }
+      return set;
+    }
+
+    private TypeMirror objectMirror() {
+      return typeMirrorOf("java.lang.Object");
+    }
+
+    private TypeMirror cloneReturnTypeMirror() {
+      TypeElement object = typeElementOf("java.lang.Object");
+      ExecutableElement clone = null;
+      for (Element element : object.getEnclosedElements()) {
+        if (element.getSimpleName().contentEquals("clone")) {
+          clone = (ExecutableElement) element;
+          break;
+        }
+      }
+      return clone.getReturnType();
+    }
+
+    /**
+     * This test shows why we need to have TypeMirrorSet. The mirror of java.lang.Object obtained
+     * from {@link Elements#getTypeElement Elements.getTypeElement("java.lang.Object")} does not
+     * compare equal to the mirror of the return type of Object.clone(), even though that is also
+     * java.lang.Object and {@link Types#isSameType} considers them the same.
+     *
+     * <p>There's no requirement that this test pass and if it starts failing or doesn't work in
+     * another test environment then we can delete it. The specification of
+     * {@link TypeMirror#equals} explicitly says that it cannot be used for type equality, so even
+     * if this particular case stops being a problem (which means this test would fail), we would
+     * need TypeMirrorSet for complete correctness.
+     */
+    public void testQuirkyTypeMirrors() {
+      TypeMirror objectMirror = objectMirror();
+      TypeMirror cloneReturnTypeMirror = cloneReturnTypeMirror();
+      assertFalse(objectMirror.equals(cloneReturnTypeMirror));
+      assertTrue(typeUtil.isSameType(objectMirror, cloneReturnTypeMirror));
+    }
+
+    public void testTypeMirrorSet() {
+      TypeMirror objectMirror = objectMirror();
+      TypeMirror otherObjectMirror = cloneReturnTypeMirror();
+      Set<TypeMirror> set = new TypeMirrorSet();
+      assertEquals(0, set.size());
+      assertTrue(set.isEmpty());
+      boolean added = set.add(objectMirror);
+      assertTrue(added);
+      assertEquals(1, set.size());
+
+      Set<TypeMirror> otherSet = typeMirrorSet(otherObjectMirror);
+      assertEquals(set, otherSet);
+      assertEquals(otherSet, set);
+      assertEquals(set.hashCode(), otherSet.hashCode());
+
+      assertFalse(set.add(otherObjectMirror));
+      assertTrue(set.contains(otherObjectMirror));
+
+      assertFalse(set.contains(null));
+      assertFalse(set.contains("foo"));
+      assertFalse(set.remove(null));
+      assertFalse(set.remove("foo"));
+
+      TypeElement list = typeElementOf("java.util.List");
+      TypeMirror listOfObjectMirror = typeUtil.getDeclaredType(list, objectMirror);
+      TypeMirror listOfOtherObjectMirror = typeUtil.getDeclaredType(list, otherObjectMirror);
+      assertFalse(listOfObjectMirror.equals(listOfOtherObjectMirror));
+      assertTrue(typeUtil.isSameType(listOfObjectMirror, listOfOtherObjectMirror));
+      added = set.add(listOfObjectMirror);
+      assertTrue(added);
+      assertEquals(2, set.size());
+      assertFalse(set.add(listOfOtherObjectMirror));
+      assertTrue(set.contains(listOfOtherObjectMirror));
+
+      boolean removed = set.remove(listOfOtherObjectMirror);
+      assertTrue(removed);
+      assertFalse(set.contains(listOfObjectMirror));
+
+      set.removeAll(otherSet);
+      assertTrue(set.isEmpty());
+    }
+
+    public void testTypeMirrorSetWildcardCapture() {
+      // TODO(user): this test should really be in MoreTypesTest.
+      // This test checks the assumption made by MoreTypes that you can find the
+      // upper bounds of a TypeVariable tv like this:
+      //   TypeParameterElement tpe = (TypeParameterElement) tv.asElement();
+      //   List<? extends TypeMirror> bounds = tpe.getBounds();
+      // There was some doubt as to whether this would be true in exotic cases involving
+      // wildcard capture, but apparently it is.
+      // The methods one and two here have identical signatures:
+      //   abstract <T extends V, U extends T, V> Map<? extends T, ? super U> name();
+      // Their return types should be considered equal by TypeMirrorSet. The capture of
+      // each return type is different from the original return type, but the two captures
+      // should compare equal to each other. We also add various other types like ? super U
+      // to the set to ensure that the implied calls to the equals and hashCode visitors
+      // don't cause a ClassCastException for TypeParameterElement.
+      TypeElement wildcardsElement = typeElementOf("Wildcards");
+      List<? extends ExecutableElement> methods =
+          ElementFilter.methodsIn(wildcardsElement.getEnclosedElements());
+      assertEquals(2, methods.size());
+      ExecutableElement one = methods.get(0);
+      ExecutableElement two = methods.get(1);
+      assertEquals("one", one.getSimpleName().toString());
+      assertEquals("two", two.getSimpleName().toString());
+      TypeMirrorSet typeMirrorSet = new TypeMirrorSet();
+      assertTrue(typeMirrorSet.add(one.getReturnType()));
+      assertFalse(typeMirrorSet.add(two.getReturnType()));
+      DeclaredType captureOne = (DeclaredType) typeUtil.capture(one.getReturnType());
+      assertTrue(typeMirrorSet.add(captureOne));
+      DeclaredType captureTwo = (DeclaredType) typeUtil.capture(two.getReturnType());
+      assertFalse(typeMirrorSet.add(captureTwo));
+      // Reminder: captureOne is Map<?#123 extends T, ?#456 super U>
+      TypeVariable extendsT = (TypeVariable) captureOne.getTypeArguments().get(0);
+      assertTrue(typeMirrorSet.add(extendsT));
+      assertTrue(typeMirrorSet.add(extendsT.getLowerBound()));  // NoType
+      for (TypeMirror bound : ((TypeParameterElement) extendsT.asElement()).getBounds()) {
+        assertTrue(typeMirrorSet.add(bound));
+      }
+      TypeVariable superU = (TypeVariable) captureOne.getTypeArguments().get(1);
+      assertTrue(typeMirrorSet.add(superU));
+      //      assertTrue(typeMirrorSet.add(superU.getLowerBound()));
+    }
+
+    public void testPackageNameOfString() {
+      assertEquals("java.lang", TypeSimplifier.packageNameOf(typeElementOf("java.lang.String")));
+    }
+
+    public void testPackageNameOfMapEntry() {
+      assertEquals("java.util", TypeSimplifier.packageNameOf(typeElementOf("java.util.Map.Entry")));
+    }
+
+    public void testPackageNameOfDefaultPackage() {
+      String aClassName = CLASS_TO_SOURCE.keySet().iterator().next();
+      assertEquals("", TypeSimplifier.packageNameOf(typeElementOf(aClassName)));
+    }
+
+    public void testImportsForNoTypes() {
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", typeMirrorSet(), baseWithoutContainedTypes());
+      assertEquals(ImmutableSet.of(), typeSimplifier.typesToImport());
+    }
+
+    public void testImportsForImplicitlyImportedTypes() {
+      Set<TypeMirror> types = typeMirrorSet(
+          typeMirrorOf("java.lang.String"),
+          typeMirrorOf("javax.management.MBeanServer"),  // Same package, so no import.
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeUtil.getPrimitiveType(TypeKind.BOOLEAN)
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "javax.management", types, baseWithoutContainedTypes());
+      assertEquals(ImmutableSet.of(), typeSimplifier.typesToImport());
+    }
+
+    public void testImportsForPlainTypes() {
+      Set<TypeMirror> types = typeMirrorSet(
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeMirrorOf("java.lang.String"),
+          typeMirrorOf("java.util.Map"),
+          typeMirrorOf("java.util.Map.Entry"),
+          typeMirrorOf("java.util.regex.Pattern"),
+          typeMirrorOf("javax.management.MBeanServer"));
+      List<String> expectedImports = ImmutableList.of(
+          "java.util.Map",
+          "java.util.Map.Entry",
+          "java.util.regex.Pattern",
+          "javax.management.MBeanServer"
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(expectedImports, ImmutableList.copyOf(typeSimplifier.typesToImport()));
+    }
+
+    public void testImportsForComplicatedTypes() {
+      TypeElement list = typeElementOf("java.util.List");
+      TypeElement map = typeElementOf("java.util.Map");
+      Set<TypeMirror> types = typeMirrorSet(
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeMirrorOf("java.util.regex.Pattern"),
+          typeUtil.getDeclaredType(list,  // List<Timer>
+              typeMirrorOf("java.util.Timer")),
+          typeUtil.getDeclaredType(map,   // Map<? extends Timer, ? super BigInteger>
+              typeUtil.getWildcardType(typeMirrorOf("java.util.Timer"), null),
+              typeUtil.getWildcardType(null, typeMirrorOf("java.math.BigInteger"))));
+      // Timer is referenced twice but should obviously only be imported once.
+      List<String> expectedImports = ImmutableList.of(
+          "java.math.BigInteger",
+          "java.util.List",
+          "java.util.Map",
+          "java.util.Timer",
+          "java.util.regex.Pattern"
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(expectedImports, ImmutableList.copyOf(typeSimplifier.typesToImport()));
+    }
+
+    public void testImportsForArrayTypes() {
+      TypeElement list = typeElementOf("java.util.List");
+      TypeElement set = typeElementOf("java.util.Set");
+      Set<TypeMirror> types = typeMirrorSet(
+          typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.INT)),
+          typeUtil.getArrayType(typeMirrorOf("java.util.regex.Pattern")),
+          typeUtil.getArrayType(          // Set<Matcher[]>[]
+              typeUtil.getDeclaredType(set,
+                  typeUtil.getArrayType(typeMirrorOf("java.util.regex.Matcher")))),
+          typeUtil.getDeclaredType(list,  // List<Timer[]>
+              typeUtil.getArrayType(typeMirrorOf("java.util.Timer"))));
+      // Timer is referenced twice but should obviously only be imported once.
+      List<String> expectedImports = ImmutableList.of(
+          "java.util.List",
+          "java.util.Set",
+          "java.util.Timer",
+          "java.util.regex.Matcher",
+          "java.util.regex.Pattern"
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(expectedImports, ImmutableList.copyOf(typeSimplifier.typesToImport()));
+    }
+
+    public void testImportsForDefaultPackage() {
+      Set<TypeMirror> types = typeMirrorSet();
+      for (String className : CLASS_TO_SOURCE.keySet()) {
+        assertTrue(types.add(typeMirrorOf(className)));
+        // These are all in the default package so they don't need to be imported.
+        // But MultipleBounds references java.util.List so that will be imported.
+      }
+      types.addAll(typeMirrorSet(
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeMirrorOf("java.lang.String"),
+          typeMirrorOf("java.util.Map"),
+          typeMirrorOf("java.util.Map.Entry"),
+          typeMirrorOf("java.util.regex.Pattern"),
+          typeMirrorOf("javax.management.MBeanServer")));
+      List<String> expectedImports = ImmutableList.of(
+          "java.util.List",
+          "java.util.Map",
+          "java.util.Map.Entry",
+          "java.util.regex.Pattern",
+          "javax.management.MBeanServer"
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "", types, baseWithoutContainedTypes());
+      assertEquals(expectedImports, ImmutableList.copyOf(typeSimplifier.typesToImport()));
+    }
+
+    public void testImportsForAmbiguousNames() {
+      Set<TypeMirror> types = typeMirrorSet(
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeMirrorOf("java.awt.List"),
+          typeMirrorOf("java.lang.String"),
+          typeMirrorOf("java.util.List"),
+          typeMirrorOf("java.util.Map")
+      );
+      List<String> expectedImports = ImmutableList.of(
+          "java.util.Map"
+      );
+      TypeSimplifier typeSimplifier
+          = new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(expectedImports, ImmutableList.copyOf(typeSimplifier.typesToImport()));
+    }
+
+    public void testSimplifyJavaLangString() {
+      TypeMirror string = typeMirrorOf("java.lang.String");
+      Set<TypeMirror> types = typeMirrorSet(string);
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals("String", typeSimplifier.simplify(string));
+    }
+
+    public void testSimplifyJavaLangThreadState() {
+      TypeMirror threadState = typeMirrorOf("java.lang.Thread.State");
+      Set<TypeMirror> types = typeMirrorSet(threadState);
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals("Thread.State", typeSimplifier.simplify(threadState));
+    }
+
+    public void testSimplifyAmbiguousNames() {
+      TypeMirror javaAwtList = typeMirrorOf("java.awt.List");
+      TypeMirror javaUtilList = typeMirrorOf("java.util.List");
+      Set<TypeMirror> types = typeMirrorSet(javaAwtList, javaUtilList);
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(javaAwtList.toString(), typeSimplifier.simplify(javaAwtList));
+      assertEquals(javaUtilList.toString(), typeSimplifier.simplify(javaUtilList));
+    }
+
+    public void testSimplifyAmbiguityFromWithinClass() {
+      TypeMirror otherEntry = typeMirrorOf(TypeSimplifierTest.class.getCanonicalName() + ".Entry");
+      Set<TypeMirror> types = typeMirrorSet(otherEntry);
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseDeclaresEntry());
+      assertEquals(otherEntry.toString(), typeSimplifier.simplify(otherEntry));
+    }
+
+    public void testSimplifyJavaLangNamesake() {
+      TypeMirror javaLangDouble = typeMirrorOf("java.lang.Double");
+      TypeMirror awtDouble = typeMirrorOf("java.awt.geom.Arc2D.Double");
+      Set<TypeMirror> types = typeMirrorSet(javaLangDouble, awtDouble);
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      assertEquals(javaLangDouble.toString(), typeSimplifier.simplify(javaLangDouble));
+      assertEquals(awtDouble.toString(), typeSimplifier.simplify(awtDouble));
+    }
+
+    public void testSimplifyComplicatedTypes() {
+      TypeElement list = typeElementOf("java.util.List");
+      TypeElement map = typeElementOf("java.util.Map");
+      TypeMirror string = typeMirrorOf("java.lang.String");
+      TypeMirror integer = typeMirrorOf("java.lang.Integer");
+      TypeMirror pattern = typeMirrorOf("java.util.regex.Pattern");
+      TypeMirror timer = typeMirrorOf("java.util.Timer");
+      TypeMirror bigInteger = typeMirrorOf("java.math.BigInteger");
+      Set<TypeMirror> types = typeMirrorSet(
+          typeUtil.getPrimitiveType(TypeKind.INT),
+          typeUtil.getArrayType(typeUtil.getPrimitiveType(TypeKind.BYTE)),
+          pattern,
+          typeUtil.getArrayType(pattern),
+          typeUtil.getArrayType(typeUtil.getArrayType(pattern)),
+          typeUtil.getDeclaredType(list, typeUtil.getWildcardType(null, null)),
+          typeUtil.getDeclaredType(list, timer),
+          typeUtil.getDeclaredType(map, string, integer),
+          typeUtil.getDeclaredType(map,
+              typeUtil.getWildcardType(timer, null), typeUtil.getWildcardType(null, bigInteger)));
+      Set<String> expectedSimplifications = ImmutableSet.of(
+          "int",
+          "byte[]",
+          "Pattern",
+          "Pattern[]",
+          "Pattern[][]",
+          "List<?>",
+          "List<Timer>",
+          "Map<String, Integer>",
+          "Map<? extends Timer, ? super BigInteger>"
+      );
+      TypeSimplifier typeSimplifier =
+          new TypeSimplifier(typeUtil, "foo.bar", types, baseWithoutContainedTypes());
+      Set<String> actualSimplifications = new HashSet<String>();
+      for (TypeMirror type : types) {
+        actualSimplifications.add(typeSimplifier.simplify(type));
+      }
+      assertEquals(expectedSimplifications, actualSimplifications);
+    }
+
+    public void testSimplifyMultipleBounds() {
+      TypeElement multipleBoundsElement = typeElementOf("MultipleBounds");
+      TypeMirror multipleBoundsMirror = multipleBoundsElement.asType();
+      TypeSimplifier typeSimplifier = new TypeSimplifier(typeUtil, "",
+          typeMirrorSet(multipleBoundsMirror), baseWithoutContainedTypes());
+      assertEquals(ImmutableSet.of("java.util.List"), typeSimplifier.typesToImport());
+      assertEquals("MultipleBounds<K, V>", typeSimplifier.simplify(multipleBoundsMirror));
+      assertEquals("<K extends List<V> & Comparable<K>, V>",
+          typeSimplifier.formalTypeParametersString(multipleBoundsElement));
+    }
+
+    // Test TypeSimplifier.isCastingUnchecked. We do this by examining the fields of the Erasure
+    // class that is defined in CLASS_TO_SOURCE. A field whose name ends with Yes has a type where
+    // isCastingUnchecked should return true, and one whose name ends with No has a type where
+    // isCastingUnchecked should return false.
+    public void testIsCastingUnchecked() {
+      TypeElement erasureClass = typeElementOf("Erasure");
+      List<VariableElement> fields = ElementFilter.fieldsIn(erasureClass.getEnclosedElements());
+      for (VariableElement field : fields) {
+        String fieldName = field.getSimpleName().toString();
+        boolean expectUnchecked;
+        if (fieldName.endsWith("Yes")) {
+          expectUnchecked = true;
+        } else if (fieldName.endsWith("No")) {
+          expectUnchecked = false;
+        } else {
+          throw new AssertionError("Fields in Erasure class must end with Yes or No: " + fieldName);
+        }
+        TypeMirror fieldType = field.asType();
+        boolean actualUnchecked = TypeSimplifier.isCastingUnchecked(fieldType);
+        assertEquals("Unchecked-cast status for " + fieldType, expectUnchecked, actualUnchecked);
+      }
+    }
+  }
+
+  private static class ErrorTestProcessor extends AbstractTestProcessor {
+    public void testErrorTypes() {
+      TypeElement extendsUndefinedType =
+          processingEnv.getElementUtils().getTypeElement("ExtendsUndefinedType");
+      ErrorType errorType = (ErrorType) extendsUndefinedType.getSuperclass();
+      TypeMirror javaLangObject = typeMirrorOf("java.lang.Object");
+      TypeElement list = typeElementOf("java.util.List");
+      TypeMirror listOfError = typeUtil.getDeclaredType(list, errorType);
+      TypeMirror queryExtendsError = typeUtil.getWildcardType(errorType, null);
+      TypeMirror listOfQueryExtendsError = typeUtil.getDeclaredType(list, queryExtendsError);
+      TypeMirror querySuperError = typeUtil.getWildcardType(null, errorType);
+      TypeMirror listOfQuerySuperError = typeUtil.getDeclaredType(list, querySuperError);
+      TypeMirror arrayOfError = typeUtil.getArrayType(errorType);
+      TypeMirror[] typesWithErrors = {
+          errorType, listOfError, listOfQueryExtendsError, listOfQuerySuperError, arrayOfError
+      };
+      for (TypeMirror typeWithError : typesWithErrors) {
+        try {
+          new TypeSimplifier(typeUtil, "foo.bar", ImmutableSet.of(typeWithError), javaLangObject);
+          fail("Expected exception for type: " + typeWithError);
+        } catch (MissingTypeException expected) {
+        }
+      }
+    }
+  }
+}
diff --git a/retrofit-processor/src/test/java/retrofit/processor/VelocityClassLoaderTest.java b/retrofit-processor/src/test/java/retrofit/processor/VelocityClassLoaderTest.java
new file mode 100644
index 000000000..9a2c1e9b9
--- /dev/null
+++ b/retrofit-processor/src/test/java/retrofit/processor/VelocityClassLoaderTest.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2014 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.processor;
+
+import static com.google.common.truth.Truth.assertThat;
+import static com.google.common.truth.Truth.assert_;
+import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
+
+import com.google.common.base.Joiner;
+import com.google.common.collect.ImmutableList;
+import com.google.testing.compile.JavaFileObjects;
+
+import junit.framework.TestCase;
+
+import org.apache.velocity.app.Velocity;
+
+import java.net.URLClassLoader;
+
+import retrofit.http.Retrofit;
+import retrofit.processor.RetrofitProcessor;
+
+/**
+ * Test that Velocity doesn't cause the processor to fail in unusual class-loading environments.
+ * It has a bunch of overengineered "managers" like LogManager and ResourceManager that it wants
+ * to load, and the ClassLoader that it uses to load them is the context class loader. If that
+ * loader sees a different copy of Velocity (even if it is the same version) then Velocity will
+ * fail to initialize.
+ *
+ * @author emcmanus@google.com (Éamonn McManus)
+ */
+public class VelocityClassLoaderTest extends TestCase {
+  /**
+   * Make a different ClassLoader that loads the same URLs as this one, and use it to compile
+   * an {@code @Retrofit} class. If Velocity loads its managers using the context class loader,
+   * and that loader is still the original one that loaded this test, then it will find the
+   * original copy of the Velocity classes rather than the one from the new loader, and fail.
+   *
+   * <p>This test assumes that the test class was loaded by a URLClassLoader and that that loader's
+   * URLs also include the Velocity classes.
+   */
+  /*
+  /* FIXME
+  public void testClassLoaderHack() throws Exception {
+    URLClassLoader myLoader = (URLClassLoader) getClass().getClassLoader();
+    URLClassLoader newLoader = new URLClassLoader(myLoader.getURLs(), myLoader.getParent());
+    String velocityClassName = Velocity.class.getName();
+    Class<?> myVelocity = myLoader.loadClass(velocityClassName);
+    Class<?> newVelocity = newLoader.loadClass(velocityClassName);
+    assertThat(myVelocity).isNotEqualTo(newVelocity);
+    Runnable test = (Runnable) newLoader.loadClass(RunInClassLoader.class.getName()).newInstance();
+    assertThat(test.getClass()).isNotEqualTo(RunInClassLoader.class);
+    test.run();
+  }
+  */
+  public void testDummy() { }
+
+  public static class RunInClassLoader implements Runnable {
+    @Override
+    public void run() {
+      String source = Joiner.on('\n').join(ImmutableList.of(
+          "package foo.bar;",
+          "import " + Retrofit.class.getName() + ";",
+          "import " + Retrofit.class.getName() + ".GET;",
+          "import rx.Observable;",
+          "@Retrofit abstract class Test {",
+          "  @GET(\"/\")",
+          "  abstract Observable<Integer> baz();",
+          "  static Test create() {",
+          "    return new Retrofit_Test();",
+          "  }",
+          "}"));
+      assert_().about(javaSource())
+          .that(JavaFileObjects.forSourceString("foo.bar.Test", source))
+          .processedWith(new RetrofitProcessor())
+          .compilesWithoutError();
+    }
+  }
+}
diff --git a/retrofit/build.gradle b/retrofit/build.gradle
new file mode 100644
index 000000000..e63db2e70
--- /dev/null
+++ b/retrofit/build.gradle
@@ -0,0 +1,25 @@
+apply plugin: 'java'
+apply from: 'deploy.gradle'
+
+targetCompatibility = '1.6'
+sourceCompatibility = '1.6'
+
+repositories {
+    jcenter()
+    maven { url "https://jitpack.io" }
+}
+
+dependencies {
+    //compile 'com.github.yongjhih:converter-logansquare-retrofit:-SNAPSHOT'
+    compile 'com.infstory:converter-logansquare-retrofit:1.0.0'
+    compile 'com.squareup.okhttp:okhttp:2.4.0'
+    compile 'com.squareup.retrofit:retrofit:1.9.0'
+    compile 'io.reactivex:rxjava:1.0.9'
+}
+
+tasks.withType(Test) {
+  testLogging {
+    exceptionFormat "full"
+    events "passed", "skipped", "failed"
+  }
+}
diff --git a/retrofit/deploy.gradle b/retrofit/deploy.gradle
new file mode 100644
index 000000000..1184f2a36
--- /dev/null
+++ b/retrofit/deploy.gradle
@@ -0,0 +1,111 @@
+/*
+ * Copyright 2013 Chris Banes
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'maven'
+apply plugin: 'signing'
+
+def isReleaseBuild() {
+    return VERSION_NAME.contains("SNAPSHOT") == false
+}
+
+def getReleaseRepositoryUrl() {
+    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
+            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
+}
+
+def getSnapshotRepositoryUrl() {
+    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
+            : "https://oss.sonatype.org/content/repositories/snapshots/"
+}
+
+def getRepositoryUsername() {
+    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
+}
+
+def getRepositoryPassword() {
+    return hasProperty('BINTRAY_KEY') ? BINTRAY_KEY : ""
+}
+
+afterEvaluate { project ->
+    uploadArchives {
+        repositories {
+            mavenDeployer {
+                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
+
+                pom.groupId = GROUP
+                pom.artifactId = POM_ARTIFACT_ID
+                pom.version = VERSION_NAME
+
+                repository(url: getReleaseRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+                snapshotRepository(url: getSnapshotRepositoryUrl()) {
+                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
+                }
+
+                pom.project {
+                    name POM_NAME
+                    packaging POM_PACKAGING
+                    description POM_DESCRIPTION
+                    url POM_URL
+
+                    scm {
+                        url POM_SCM_URL
+                        connection POM_SCM_CONNECTION
+                        developerConnection POM_SCM_DEV_CONNECTION
+                    }
+
+                    licenses {
+                        license {
+                            name POM_LICENCE_NAME
+                            url POM_LICENCE_URL
+                            distribution POM_LICENCE_DIST
+                        }
+                    }
+
+                    developers {
+                        developer {
+                            id POM_DEVELOPER_ID
+                            name POM_DEVELOPER_NAME
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+    signing {
+        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
+        sign configurations.archives
+    }
+
+    // http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
+    task javadocsJar(type: Jar, dependsOn: javadoc) {
+        classifier = 'javadoc'
+        from javadoc.destinationDir
+        //classpath += configurations.compile // http://stackoverflow.com/questions/10895032/javadoc-with-gradle-dont-get-the-libraries-while-running-javadoc-task
+    }
+
+    task sourcesJar(type: Jar) {
+        classifier = 'sources'
+        from sourceSets.main.allSource
+    }
+
+    artifacts {
+        archives sourcesJar
+        archives javadocsJar
+    }
+}
diff --git a/retrofit/gradle.properties b/retrofit/gradle.properties
new file mode 100644
index 000000000..252204615
--- /dev/null
+++ b/retrofit/gradle.properties
@@ -0,0 +1,21 @@
+VERSION_NAME=2.0.0
+VERSION_CODE=200
+#GROUP=com.github.yongjhih
+GROUP=com.infstory
+
+POM_DESCRIPTION=Turns your REST API into a Java interface
+POM_URL=https://github.com/yongjhih/retrofit
+POM_SCM_URL=https://github.com/yongjhih/retrofit
+POM_SCM_CONNECTION=scm:git@github.com:yongjhih/retrofit.git
+POM_SCM_DEV_CONNECTION=scm:git@github.com:yongjhih/retrofit.git
+POM_LICENCE_NAME=The Apache Software License, Version 2.0
+POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
+POM_LICENCE_DIST=repo
+POM_DEVELOPER_ID=yongjhih
+POM_DEVELOPER_NAME=Andrew Chen
+
+POM_NAME=Retrofit2
+POM_ARTIFACT_ID=retrofit
+POM_PACKAGING=jar
+
+RELEASE_REPOSITORY_URL=https://api.bintray.com/maven/yongjhih/maven/retrofit/
diff --git a/retrofit/src/main/java/retrofit/http/RequestException.java b/retrofit/src/main/java/retrofit/http/RequestException.java
new file mode 100644
index 000000000..5e9458887
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/RequestException.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package retrofit.http;
+
+import com.squareup.okhttp.*;
+
+public class RequestException extends RuntimeException {
+    final Request request;
+    public RequestException(Request request, Throwable e) {
+        super(e);
+        this.request = request;
+    }
+    public Request request() {
+        return request;
+    }
+}
diff --git a/retrofit/src/main/java/retrofit/http/Retrofit.java b/retrofit/src/main/java/retrofit/http/Retrofit.java
new file mode 100644
index 000000000..585e0bb84
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Retrofit.java
@@ -0,0 +1,648 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ * Copyright (C) 2012 Google, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import static java.lang.annotation.RetentionPolicy.SOURCE;
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.ElementType.TYPE;
+
+import java.util.List;
+import rx.functions.*;
+
+/**
+ * baseUrl
+ */
+@Documented
+@Retention(SOURCE)
+@Target(TYPE)
+public @interface Retrofit {
+  String value() default "";
+
+  @Retention(RUNTIME)
+  @Target(TYPE)
+  public @interface Builder {
+  }
+
+  /**
+   * Specifies that the annotated method is a validation method. The method should be a non-private
+   * no-argument method in an Retrofit class. It will be called by the {@code build()} method of
+   * the {@link Builder @Retrofit.Builder} implementation, immediately after constructing the new
+   * object. It can throw an exception if the new object fails validation checks.
+   */
+  @Retention(RUNTIME)
+  @Target(METHOD)
+  public @interface Validate {
+  }
+
+  /**
+   * For @RetryHeaders @GET|@PUT|@POST|@DELETE, @RetryHeaders class
+   */
+  @Retention(RUNTIME)
+  @Target({METHOD, TYPE})
+  public @interface RetryHeaders {
+    String[] value();
+    Class<? extends Throwable>[] exceptions() default Throwable.class;
+    //Class<? extends ErrorHandler> errorHandler() default ErrorHandler.class;
+    //Class<? extends ErrorHandler> onRetry() default ErrorHandler.class;
+    //Class<? extends ErrorHandler> onNext() default ErrorHandler.class;
+  }
+
+  /**
+   * For @ErrorHandler @GET|@PUT|@POST|@DELETE, @ErrorHandler class
+   */
+  @Retention(RUNTIME)
+  @Target({METHOD, TYPE})
+  public @interface ErrorHandler {
+    Class<? extends retrofit.ErrorHandler> value() default retrofit.ErrorHandler.class;
+  }
+
+  /**
+   * For @Converter @GET|@PUT|@POST|@DELETE, @Converter class
+   */
+  @Retention(RUNTIME)
+  @Target({METHOD, TYPE})
+  public @interface Converter {
+    Class<? extends retrofit.converter.Converter> value() default retrofit.converter.Converter.class;
+  }
+
+  /**
+   * For @LogLevel @GET|@PUT|@POST|@DELETE, @LogLevel class
+   */
+  // TODO aspect alternative?
+  @Retention(RUNTIME)
+  @Target({METHOD, TYPE})
+  public @interface LogLevel {
+    retrofit.RestAdapter.LogLevel value() default retrofit.RestAdapter.LogLevel.NONE;
+  }
+
+  @Retention(RUNTIME)
+  @Target(PARAMETER)
+  public @interface QueryBundle {
+  }
+
+  @Retention(RUNTIME)
+  @Target({TYPE, METHOD})
+  public @interface QueryBinding {
+      String value() default "";
+      Class<? extends Bindable> binder() default Bindable.class;
+  }
+
+  @Retention(RUNTIME)
+  @Target({TYPE, METHOD})
+  public @interface RequestInterceptor {
+      Class<? extends retrofit.RequestInterceptor> value() default retrofit.RequestInterceptor.class;
+  }
+
+  public static interface Bindable<T> extends Func1<T, String> {
+      public String call(T t);
+  }
+
+  /** Make a DELETE request to a REST path relative to base URL. */
+  @Documented
+  @Retention(RUNTIME)
+  @Target(METHOD)
+  @RestMethod("DELETE")
+  public @interface DELETE {
+    String value() default "";
+    String[] permissions() default {};
+  }
+
+  /**
+   * Use this annotation on a service method param when you want to directly control the request body
+   * of a POST/PUT request (instead of sending in as request parameters or form-style request
+   * body). If the value of the parameter implements {@link retrofit.mime.TypedOutput TypedOutput},
+   * the request body will be written exactly as specified by
+   * {@link retrofit.mime.TypedOutput#writeTo(java.io.OutputStream)}. If the value does not implement
+   * TypedOutput, the object will be serialized using the {@link retrofit.RestAdapter RestAdapter}'s
+   * {@link retrofit.converter.Converter Converter} and the result will be set directly as the
+   * request body.
+   * <p>
+   * Body parameters may not be {@code null}.
+   *
+   * @author Eric Denman (edenman@squareup.com)
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface Body {
+  }
+
+  /**
+   * Named replacement in the URL path. Values are converted to string using
+   * {@link String#valueOf(Object)}. Values are used literally without URL encoding. See
+   * {@link retrofit.http.Path @Path} for URL encoding equivalent.
+   * <p>
+   * <pre>
+   * &#64;GET("/image/{id}")
+   * void example(@EncodedPath("id") int id, ..);
+   * </pre>
+   * <p>
+   * Path parameters may not be {@code null}.
+   *
+   * @see Path
+   * @deprecated Use {@link Path} with {@link Path#encode() encode = false}.
+   */
+  @Documented
+  @Deprecated
+  @Retention(RUNTIME)
+  @Target(PARAMETER)
+  public @interface EncodedPath {
+    String value();
+  }
+
+  /**
+   * Encoded query parameter appended to the URL.
+   * <p>
+   * Values are converted to strings using {@link String#valueOf(Object)}. Values are not URL
+   * encoded. {@code null} values will not include the query parameter in the URL. See
+   * {@link Query @Query} for URL-encoding equivalent.
+   *
+   * @see Query
+   * @see QueryMap
+   * @deprecated Use {@link Query} with {@link Query#encodeValue() encodeValue = false}.
+   */
+  @Documented
+  @Deprecated
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface EncodedQuery {
+    String value();
+  }
+
+  /**
+   * Query keys and values appended to the URL.
+   * <p>
+   * Both keys and values are converted to strings using {@link String#valueOf(Object)}. Values are
+   * not URL encoded. {@code null} values will not include the query parameter in the URL. See
+   * {@link QueryMap @QueryMap} for URL-encoding equivalent.
+   *
+   * @see Query
+   * @see QueryMap
+   * @deprecated Use {@link QueryMap} with {@link QueryMap#encodeValues() encodeValues = false}.
+   */
+  @Documented
+  @Deprecated
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface EncodedQueryMap {
+  }
+
+  /**
+   * Named pair for a form-encoded request.
+   * <pre>
+   * &#64;FormUrlEncoded &#64;POST(&#64;Field)
+   * </pre>
+   * <p>
+   * Values are converted to strings using {@link String#valueOf(Object)} and then form URL encoded.
+   * {@code null} values are ignored. Passing a {@link java.util.List List} or array will result in a
+   * field pair for each non-{@code null} item.
+   * <p>
+   * Simple Example:
+   * <pre>
+   * &#64;FormUrlEncoded
+   * &#64;POST("/")
+   * void example(@Field("name") String name, @Field("occupation") String occupation);
+   * }
+   * </pre>
+   * Calling with {@code foo.example("Bob Smith", "President")} yields a request body of
+   * {@code name=Bob+Smith&occupation=President}.
+   * <p>
+   * Array Example:
+   * <pre>
+   * &#64;FormUrlEncoded
+   * &#64;POST("/list")
+   * void example(@Field("name") String... names);
+   * </pre>
+   * Calling with {@code foo.example("Bob Smith", "Jane Doe")} yields a request body of
+   * {@code name=Bob+Smith&name=Jane+Doe}.
+   *
+   * @see FormUrlEncoded
+   * @see FieldMap
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface Field {
+    String value();
+
+    /** Specifies whether {@link #value()} is URL encoded. */
+    boolean encodeName() default true;
+
+    /** Specifies whether the argument value to the annotated method parameter is URL encoded. */
+    boolean encodeValue() default true;
+  }
+
+  /**
+   * Named key/value pairs for a form-encoded request.
+   * <p>
+   * Field values may be {@code null} which will omit them from the request body.
+   * <p>
+   * Simple Example:
+   * <pre>
+   * &#64;FormUrlEncoded
+   * &#64;POST("/things")
+   * void things(@FieldMap Map&lt;String, String&gt; fields);
+   * }
+   * </pre>
+   * Calling with {@code foo.things(ImmutableMap.of("foo", "bar", "kit", "kat")} yields a request
+   * body of {@code foo=bar&kit=kat}.
+   *
+   * @see FormUrlEncoded
+   * @see Field
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface FieldMap {
+    /** Specifies whether parameter names (keys in the map) are URL encoded. */
+    boolean encodeNames() default true;
+
+    /** Specifies whether parameter values (values in the map) are URL encoded. */
+    boolean encodeValues() default true;
+  }
+
+  /**
+   * Denotes that the request body will use form URL encoding. Fields should be declared as
+   * parameters and annotated with {@link Field @Field}.
+   * For &#64;FormUrlEncoded &#64;POST(&#64;Field)
+   * <p>
+   * Requests made with this annotation will have {@code application/x-www-form-urlencoded} MIME
+   * type. Field names and values will be UTF-8 encoded before being URI-encoded in accordance to
+   * <a href="http://tools.ietf.org/html/rfc3986">RFC-3986</a>.
+   */
+  @Retention(RUNTIME)
+  @Target(METHOD)
+  public @interface FormUrlEncoded {
+  }
+
+  /** Make a GET request to a REST path relative to base URL. */
+  @Documented
+  @Target(METHOD)
+  @Retention(RUNTIME)
+  @RestMethod("GET")
+  public @interface GET {
+    String value() default "";
+    String[] permissions() default {};
+  }
+
+  /**
+   * Replaces the header with the the value of its target.
+   * &#64;GET|&#64;PUT|&#64;POST|&#64;DELETE(&#64;Header)
+   * <p>
+   * <pre>
+   * &#64;GET("/")
+   * void foo(@Header("Accept-Language") String lang, Callback&lt;Response&gt; cb);
+   * </pre>
+   * <p>
+   * Header parameters may be {@code null} which will omit them from the request. Passing a
+   * {@link java.util.List List} or array will result in a header for each non-{@code null} item.
+   * <p>
+   * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
+   * be included in the request.
+   *
+   * @author Adrian Cole (adrianc@netflix.com)
+   */
+  @Retention(RUNTIME)
+  @Target(PARAMETER)
+  public @interface Header {
+    String value();
+  }
+
+  /**
+   * Adds headers literally supplied in the {@code value}.
+   * <pre>
+   * &#64;Headers &#64;GET|&#64;PUT|&#64;POST|&#64;DELETE, &#64;Headers class Retrofit
+   * </pre>
+   * <p>
+   * <pre>
+   * &#64;Headers("Cache-Control: max-age=640000")
+   * &#64;GET("/")
+   * ...
+   *
+   * &#64;Headers({
+   *   "X-Foo: Bar",
+   *   "X-Ping: Pong"
+   * })
+   * &#64;GET("/")
+   * ...
+   * </pre>
+   * <p>
+   * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
+   * be included in the request.
+   *
+   * @author Adrian Cole (adrianc@netflix.com)
+   */
+  @Documented
+  @Target({METHOD, TYPE})
+  @Retention(RUNTIME)
+  public @interface Headers {
+    String[] value();
+  }
+
+  /** Make a HEAD request to a REST path relative to base URL. */
+  @Documented
+  @Target(METHOD)
+  @Retention(RUNTIME)
+  @RestMethod("HEAD")
+  public @interface HEAD {
+    String value();
+    String[] permissions() default {};
+  }
+
+  /**
+   * Denotes that the request body is multi-part. Parts should be declared as parameters and
+   * annotated with {@link Part @Part}.
+   * <pre>
+   * &#64;Multipart &#64;PUT(&#64;Part)
+   * </pre>
+   */
+  @Retention(RUNTIME)
+  @Target(METHOD)
+  public @interface Multipart {
+  }
+
+  /**
+   * Denotes a single part of a multi-part request.
+   * <pre>
+   * &#64;Multipart &#64;PUT(&#64;Part)
+   * </pre>
+   * <p>
+   * The parameter type on which this annotation exists will be processed in one of three ways:
+   * <ul>
+   * <li>If the type implements {@link retrofit.mime.TypedOutput TypedOutput} the headers and
+   * body will be used directly.</li>
+   * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}
+   * content type.</li>
+   * <li>Other object types will be converted to an appropriate representation by calling {@link
+   * retrofit.converter.Converter#toBody(Object)}.</li>
+   * </ul>
+   * <p>
+   * Values may be {@code null} which will omit them from the request body.
+   * <p>
+   * <pre>
+   * &#64;Multipart
+   * &#64;POST("/")
+   * void example(&#64;Part("description") String description,
+   *              &#64;Part("image") TypedFile image,
+   *              ...
+   * );
+   * </pre>
+   * <p>
+   * Part parameters may not be {@code null}.
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface Part {
+    String value();
+    /** The {@code Content-Transfer-Encoding} of this part. */
+    String encoding() default "binary";
+    // "text/plain"|"text/plain; charset=UTF-8"|"text/x-markdown; charset=utf-8"
+    String mimeType() default "";
+  }
+
+ /**
+  * Denotes name and value parts of a multi-part request
+  * <p>
+  * Values of the map on which this annotation exists will be processed in one of three ways:
+  * <ul>
+  * <li>If the type implements {@link retrofit.mime.TypedOutput TypedOutput} the headers and
+  * body will be used directly.</li>
+  * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}
+  * content type.</li>
+  * <li>Other object types will be converted to an appropriate representation by calling {@link
+  * retrofit.converter.Converter#toBody(Object)}.</li>
+  * </ul>
+  * <p>
+  * <pre>
+  * &#64;Multipart
+  * &#64;POST("/upload")
+  * void upload(&#64;Part("file") TypedFile file, &#64;PartMap Map&lt;String, String&gt; params);
+  * </pre>
+  * <p>
+  *
+  * @see Multipart
+  * @see Part
+  */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface PartMap {
+    /** The {@code Content-Transfer-Encoding} of this part. */
+    String encoding() default "binary";
+  }
+
+  /** Make a PATCH request to a REST path relative to base URL. */
+  @Documented
+  @Target(METHOD)
+  @Retention(RUNTIME)
+  @RestMethod(value = "PATCH", hasBody = true)
+  public @interface PATCH {
+    String value();
+  }
+
+  /**
+   * Named replacement in the URL path. Values are converted to string using
+   * {@link String#valueOf(Object)} and URL encoded.
+   * <pre>
+   * &#64;GET|&#64;PUT|&#64;POST|&#64;DELETE(&#64;Path)
+   * </pre>
+   * <p>
+   * Simple example:
+   * <pre>
+   * &#64;GET("/image/{id}")
+   * void example(@Path("id") int id);
+   * </pre>
+   * Calling with {@code foo.example(1)} yields {@code /image/1}.
+   * <p>
+   * Values are URL encoded by default. Disable with {@code encode=false}.
+   * <pre>
+   * &#64;GET("/user/{name}")
+   * void encoded(@Path("name") String name);
+   *
+   * &#64;GET("/user/{name}")
+   * void notEncoded(@Path(value="name", encode=false) String name);
+   * </pre>
+   * Calling {@code foo.encoded("John+Doe")} yields {@code /user/John%2BDoe} whereas
+   * {@code foo.notEncoded("John+Doe")} yields {@code /user/John+Doe}.
+   * <p>
+   * Path parameters may not be {@code null}.
+   */
+  @Documented
+  @Retention(RUNTIME)
+  @Target(PARAMETER)
+  public @interface Path {
+    String value();
+
+    /** Specifies whether the argument value to the annotated method parameter is URL encoded. */
+    boolean encode() default true;
+  }
+
+  /** Make a POST request to a REST path relative to base URL. */
+  @Documented
+  @Target(METHOD)
+  @Retention(RUNTIME)
+  @RestMethod(value = "POST", hasBody = true)
+  public @interface POST {
+    String value();
+    String[] permissions() default {};
+  }
+
+  /** Make a PUT request to a REST path relative to base URL. */
+  @Documented
+  @Target(METHOD)
+  @Retention(RUNTIME)
+  @RestMethod(value = "PUT", hasBody = true)
+  public @interface PUT {
+    String value();
+    String[] permissions() default {};
+  }
+
+  /**
+   * Query parameter appended to the URL. &#64;GET|&#64;PUT|&#64;POST|&#64;DELETE(&#64;Query)
+   * <p>
+   * Values are converted to strings using {@link String#valueOf(Object)} and then URL encoded.
+   * {@code null} values are ignored. Passing a {@link java.util.List List} or array will result in a
+   * query parameter for each non-{@code null} item.
+   * <p>
+   * Simple Example:
+   * <pre>
+   * &#64;GET("/list")
+   * void list(@Query("page") int page);
+   * </pre>
+   * Calling with {@code foo.list(1)} yields {@code /list?page=1}.
+   * <p>
+   * Example with {@code null}:
+   * <pre>
+   * &#64;GET("/list")
+   * void list(@Query("category") String category);
+   * </pre>
+   * Calling with {@code foo.list(null)} yields {@code /list}.
+   * <p>
+   * Array Example:
+   * <pre>
+   * &#64;GET("/list")
+   * void list(@Query("category") String... categories);
+   * </pre>
+   * Calling with {@code foo.list("bar", "baz")} yields
+   * {@code /list?category=foo&category=bar}.
+   * <p>
+   * Parameter names are not URL encoded. Specify {@link #encodeName() encodeName=true} to change
+   * this behavior.
+   * <pre>
+   * &#64;GET("/search")
+   * void list(@Query(value="foo+bar", encodeName=true) String foobar);
+   * </pre>
+   * Calling with {@code foo.list("baz")} yields {@code /search?foo%2Bbar=foo}.
+   * <p>
+   * Parameter values are URL encoded by default. Specify {@link #encodeValue() encodeValue=false} to
+   * change this behavior.
+   * <pre>
+   * &#64;GET("/search")
+   * void list(@Query(value="foo", encodeValue=false) String foo);
+   * </pre>
+   * Calling with {@code foo.list("foo+foo"))} yields {@code /search?foo=foo+bar}.
+   *
+   * @see QueryMap
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface Query {
+    /** The query parameter name. */
+    String value();
+
+    /** Specifies whether {@link #value()} is URL encoded. */
+    boolean encodeName() default false;
+
+    /** Specifies whether the argument value to the annotated method parameter is URL encoded. */
+    boolean encodeValue() default true;
+  }
+
+  /**
+   * Query parameter keys and values appended to the URL.
+   * <p>
+   * Both keys and values are converted to strings using {@link String#valueOf(Object)}. Values are
+   * URL encoded and {@code null} will not include the query parameter in the URL. {@code null} keys
+   * are not allowed.
+   * <p>
+   * Simple Example:
+   * <pre>
+   * &#64;GET("/search")
+   * void list(@QueryMap Map&lt;String, String&gt; filters);
+   * </pre>
+   * Calling with {@code foo.list(ImmutableMap.of("foo", "bar", "kit", "kat"))} yields
+   * {@code /search?foo=bar&kit=kat}.
+   * <p>
+   * Map keys representing the parameter names are not URL encoded. Specify
+   * {@link #encodeNames() encodeNames=true} to change this behavior.
+   * <pre>
+   * &#64;GET("/search")
+   * void list(@QueryMap(encodeNames=true) Map&lt;String, String&gt; filters);
+   * </pre>
+   * Calling with {@code foo.list(ImmutableMap.of("foo+bar", "foo+bar"))} yields
+   * {@code /search?foo%2Bbar=foo}.
+   * <p>
+   * Map values representing parameter values are URL encoded by default. Specify
+   * {@link #encodeValues() encodeValues=false} to change this behavior.
+   * <pre>
+   * &#64;GET("/search")
+   * void list(@QueryMap(encodeValues=false) Map&lt;String, String&gt; filters);
+   * </pre>
+   * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+foo"))} yields
+   * {@code /search?foo=foo%2Bbar}.
+   *
+   * @see Query
+   */
+  @Documented
+  @Target(PARAMETER)
+  @Retention(RUNTIME)
+  public @interface QueryMap {
+    /** Specifies whether parameter names (keys in the map) are URL encoded. */
+    boolean encodeNames() default false;
+
+    /** Specifies whether parameter values (values in the map) are URL encoded. */
+    boolean encodeValues() default true;
+  }
+
+  @Documented
+  @Target(ANNOTATION_TYPE)
+  @Retention(RUNTIME)
+  public @interface RestMethod {
+    String value();
+    boolean hasBody() default false;
+  }
+
+  /**
+   * Treat the response body on methods returning {@link retrofit.client.Response Response} as is,
+   * i.e. without converting {@link retrofit.client.Response#getBody() getBody()} to {@code byte[]}.
+   * <pre>
+   * &#64;GET &#64;Streaming
+   * </pre>
+   */
+  @Documented
+  @Retention(RUNTIME)
+  @Target(METHOD)
+  public @interface Streaming {
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/TypePreconditions.java b/retrofit/src/main/java/retrofit/http/TypePreconditions.java
new file mode 100644
index 000000000..bd7970500
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/TypePreconditions.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package retrofit.http;
+
+/**
+ * A simple utility class used to check method Preconditions.
+ *
+ * <pre>
+ * public long divideBy(long value) {
+ *   Preconditions.checkArgument(value != 0);
+ *   return this.value / value;
+ * }
+ * </pre>
+ *
+ * @author Inderjeet Singh
+ * @author Joel Leitch
+ */
+public final class TypePreconditions {
+  public static <T> T checkNotNull(T obj) {
+    if (obj == null) {
+      throw new NullPointerException();
+    }
+    return obj;
+  }
+
+  public static void checkArgument(boolean condition) {
+    if (!condition) {
+      throw new IllegalArgumentException();
+    }
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/TypeToken.java b/retrofit/src/main/java/retrofit/http/TypeToken.java
new file mode 100644
index 000000000..713a0e074
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/TypeToken.java
@@ -0,0 +1,305 @@
+/*
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package retrofit.http;
+
+import retrofit.http.Types;
+import retrofit.http.TypePreconditions;
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Represents a generic type {@code T}. Java doesn't yet provide a way to
+ * represent generic types, so this class does. Forces clients to create a
+ * subclass of this class which enables retrieval the type information even at
+ * runtime.
+ *
+ * <p>For example, to create a type literal for {@code List<String>}, you can
+ * create an empty anonymous inner class:
+ *
+ * <p>
+ * {@code TypeToken<List<String>> list = new TypeToken<List<String>>() {};}
+ *
+ * <p>This syntax cannot be used to create type literals that have wildcard
+ * parameters, such as {@code Class<?>} or {@code List<? extends CharSequence>}.
+ *
+ * @author Bob Lee
+ * @author Sven Mawson
+ * @author Jesse Wilson
+ */
+public class TypeToken<T> {
+  final Class<? super T> rawType;
+  final Type type;
+  final int hashCode;
+
+  /**
+   * Constructs a new type literal. Derives represented class from type
+   * parameter.
+   *
+   * <p>Clients create an empty anonymous subclass. Doing so embeds the type
+   * parameter in the anonymous class's type hierarchy so we can reconstitute it
+   * at runtime despite erasure.
+   */
+  @SuppressWarnings("unchecked")
+  protected TypeToken() {
+    this.type = getSuperclassTypeParameter(getClass());
+    this.rawType = (Class<? super T>) Types.getRawType(type);
+    this.hashCode = type.hashCode();
+  }
+
+  /**
+   * Unsafe. Constructs a type literal manually.
+   */
+  @SuppressWarnings("unchecked")
+  TypeToken(Type type) {
+    this.type = Types.canonicalize(TypePreconditions.checkNotNull(type));
+    this.rawType = (Class<? super T>) Types.getRawType(this.type);
+    this.hashCode = this.type.hashCode();
+  }
+
+  /**
+   * Returns the type from super class's type parameter in {@link Types#canonicalize
+   * canonical form}.
+   */
+  static Type getSuperclassTypeParameter(Class<?> subclass) {
+    Type superclass = subclass.getGenericSuperclass();
+    if (superclass instanceof Class) {
+      throw new RuntimeException("Missing type parameter.");
+    }
+    ParameterizedType parameterized = (ParameterizedType) superclass;
+    return Types.canonicalize(parameterized.getActualTypeArguments()[0]);
+  }
+
+  /**
+   * Returns the raw (non-generic) type for this type.
+   */
+  public final Class<? super T> getRawType() {
+    return rawType;
+  }
+
+  /**
+   * Gets underlying {@code Type} instance.
+   */
+  public final Type getType() {
+    return type;
+  }
+
+  /**
+   * Check if this type is assignable from the given class object.
+   *
+   * @deprecated this implementation may be inconsistent with javac for types
+   *     with wildcards.
+   */
+  @Deprecated
+  public boolean isAssignableFrom(Class<?> cls) {
+    return isAssignableFrom((Type) cls);
+  }
+
+  /**
+   * Check if this type is assignable from the given Type.
+   *
+   * @deprecated this implementation may be inconsistent with javac for types
+   *     with wildcards.
+   */
+  @Deprecated
+  public boolean isAssignableFrom(Type from) {
+    if (from == null) {
+      return false;
+    }
+
+    if (type.equals(from)) {
+      return true;
+    }
+
+    if (type instanceof Class<?>) {
+      return rawType.isAssignableFrom(Types.getRawType(from));
+    } else if (type instanceof ParameterizedType) {
+      return isAssignableFrom(from, (ParameterizedType) type,
+          new HashMap<String, Type>());
+    } else if (type instanceof GenericArrayType) {
+      return rawType.isAssignableFrom(Types.getRawType(from))
+          && isAssignableFrom(from, (GenericArrayType) type);
+    } else {
+      throw buildUnexpectedTypeError(
+          type, Class.class, ParameterizedType.class, GenericArrayType.class);
+    }
+  }
+
+  /**
+   * Check if this type is assignable from the given type token.
+   *
+   * @deprecated this implementation may be inconsistent with javac for types
+   *     with wildcards.
+   */
+  @Deprecated
+  public boolean isAssignableFrom(TypeToken<?> token) {
+    return isAssignableFrom(token.getType());
+  }
+
+  /**
+   * Private helper function that performs some assignability checks for
+   * the provided GenericArrayType.
+   */
+  private static boolean isAssignableFrom(Type from, GenericArrayType to) {
+    Type toGenericComponentType = to.getGenericComponentType();
+    if (toGenericComponentType instanceof ParameterizedType) {
+      Type t = from;
+      if (from instanceof GenericArrayType) {
+        t = ((GenericArrayType) from).getGenericComponentType();
+      } else if (from instanceof Class<?>) {
+        Class<?> classType = (Class<?>) from;
+        while (classType.isArray()) {
+          classType = classType.getComponentType();
+        }
+        t = classType;
+      }
+      return isAssignableFrom(t, (ParameterizedType) toGenericComponentType,
+          new HashMap<String, Type>());
+    }
+    // No generic defined on "to"; therefore, return true and let other
+    // checks determine assignability
+    return true;
+  }
+
+  /**
+   * Private recursive helper function to actually do the type-safe checking
+   * of assignability.
+   */
+  private static boolean isAssignableFrom(Type from, ParameterizedType to,
+      Map<String, Type> typeVarMap) {
+
+    if (from == null) {
+      return false;
+    }
+
+    if (to.equals(from)) {
+      return true;
+    }
+
+    // First figure out the class and any type information.
+    Class<?> clazz = Types.getRawType(from);
+    ParameterizedType ptype = null;
+    if (from instanceof ParameterizedType) {
+      ptype = (ParameterizedType) from;
+    }
+
+    // Load up parameterized variable info if it was parameterized.
+    if (ptype != null) {
+      Type[] tArgs = ptype.getActualTypeArguments();
+      TypeVariable<?>[] tParams = clazz.getTypeParameters();
+      for (int i = 0; i < tArgs.length; i++) {
+        Type arg = tArgs[i];
+        TypeVariable<?> var = tParams[i];
+        while (arg instanceof TypeVariable<?>) {
+          TypeVariable<?> v = (TypeVariable<?>) arg;
+          arg = typeVarMap.get(v.getName());
+        }
+        typeVarMap.put(var.getName(), arg);
+      }
+
+      // check if they are equivalent under our current mapping.
+      if (typeEquals(ptype, to, typeVarMap)) {
+        return true;
+      }
+    }
+
+    for (Type itype : clazz.getGenericInterfaces()) {
+      if (isAssignableFrom(itype, to, new HashMap<String, Type>(typeVarMap))) {
+        return true;
+      }
+    }
+
+    // Interfaces didn't work, try the superclass.
+    Type sType = clazz.getGenericSuperclass();
+    return isAssignableFrom(sType, to, new HashMap<String, Type>(typeVarMap));
+  }
+
+  /**
+   * Checks if two parameterized types are exactly equal, under the variable
+   * replacement described in the typeVarMap.
+   */
+  private static boolean typeEquals(ParameterizedType from,
+      ParameterizedType to, Map<String, Type> typeVarMap) {
+    if (from.getRawType().equals(to.getRawType())) {
+      Type[] fromArgs = from.getActualTypeArguments();
+      Type[] toArgs = to.getActualTypeArguments();
+      for (int i = 0; i < fromArgs.length; i++) {
+        if (!matches(fromArgs[i], toArgs[i], typeVarMap)) {
+          return false;
+        }
+      }
+      return true;
+    }
+    return false;
+  }
+
+  private static AssertionError buildUnexpectedTypeError(
+      Type token, Class<?>... expected) {
+
+    // Build exception message
+    StringBuilder exceptionMessage =
+        new StringBuilder("Unexpected type. Expected one of: ");
+    for (Class<?> clazz : expected) {
+      exceptionMessage.append(clazz.getName()).append(", ");
+    }
+    exceptionMessage.append("but got: ").append(token.getClass().getName())
+        .append(", for type token: ").append(token.toString()).append('.');
+
+    return new AssertionError(exceptionMessage.toString());
+  }
+
+  /**
+   * Checks if two types are the same or are equivalent under a variable mapping
+   * given in the type map that was provided.
+   */
+  private static boolean matches(Type from, Type to, Map<String, Type> typeMap) {
+    return to.equals(from)
+        || (from instanceof TypeVariable
+        && to.equals(typeMap.get(((TypeVariable<?>) from).getName())));
+
+  }
+
+  @Override public final int hashCode() {
+    return this.hashCode;
+  }
+
+  @Override public final boolean equals(Object o) {
+    return o instanceof TypeToken<?>
+        && Types.equals(type, ((TypeToken<?>) o).type);
+  }
+
+  @Override public final String toString() {
+    return Types.typeToString(type);
+  }
+
+  /**
+   * Gets type literal for the given {@code Type} instance.
+   */
+  public static TypeToken<?> get(Type type) {
+    return new TypeToken<Object>(type);
+  }
+
+  /**
+   * Gets type literal for the given {@code Class} instance.
+   */
+  public static <T> TypeToken<T> get(Class<T> type) {
+    return new TypeToken<T>(type);
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/Types.java b/retrofit/src/main/java/retrofit/http/Types.java
new file mode 100644
index 000000000..80460844d
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Types.java
@@ -0,0 +1,586 @@
+/**
+ * Copyright (C) 2008 Google Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package retrofit.http;
+
+import static retrofit.http.TypePreconditions.checkArgument;
+import static retrofit.http.TypePreconditions.checkNotNull;
+
+import java.io.Serializable;
+import java.lang.reflect.Array;
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.GenericDeclaration;
+import java.lang.reflect.Modifier;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.WildcardType;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Map;
+import java.util.NoSuchElementException;
+import java.util.Properties;
+
+/**
+ * Static methods for working with types.
+ *
+ * @author Bob Lee
+ * @author Jesse Wilson
+ */
+public final class Types {
+  static final Type[] EMPTY_TYPE_ARRAY = new Type[] {};
+
+  private Types() {}
+
+  /**
+   * Returns a new parameterized type, applying {@code typeArguments} to
+   * {@code rawType} and enclosed by {@code ownerType}.
+   *
+   * @return a {@link java.io.Serializable serializable} parameterized type.
+   */
+  public static ParameterizedType newParameterizedTypeWithOwner(
+      Type ownerType, Type rawType, Type... typeArguments) {
+    return new ParameterizedTypeImpl(ownerType, rawType, typeArguments);
+  }
+
+  /**
+   * Returns an array type whose elements are all instances of
+   * {@code componentType}.
+   *
+   * @return a {@link java.io.Serializable serializable} generic array type.
+   */
+  public static GenericArrayType arrayOf(Type componentType) {
+    return new GenericArrayTypeImpl(componentType);
+  }
+
+  /**
+   * Returns a type that represents an unknown type that extends {@code bound}.
+   * For example, if {@code bound} is {@code CharSequence.class}, this returns
+   * {@code ? extends CharSequence}. If {@code bound} is {@code Object.class},
+   * this returns {@code ?}, which is shorthand for {@code ? extends Object}.
+   */
+  public static WildcardType subtypeOf(Type bound) {
+    return new WildcardTypeImpl(new Type[] { bound }, EMPTY_TYPE_ARRAY);
+  }
+
+  /**
+   * Returns a type that represents an unknown supertype of {@code bound}. For
+   * example, if {@code bound} is {@code String.class}, this returns {@code ?
+   * super String}.
+   */
+  public static WildcardType supertypeOf(Type bound) {
+    return new WildcardTypeImpl(new Type[] { Object.class }, new Type[] { bound });
+  }
+
+  /**
+   * Returns a type that is functionally equal but not necessarily equal
+   * according to {@link Object#equals(Object) Object.equals()}. The returned
+   * type is {@link java.io.Serializable}.
+   */
+  public static Type canonicalize(Type type) {
+    if (type instanceof Class) {
+      Class<?> c = (Class<?>) type;
+      return c.isArray() ? new GenericArrayTypeImpl(canonicalize(c.getComponentType())) : c;
+
+    } else if (type instanceof ParameterizedType) {
+      ParameterizedType p = (ParameterizedType) type;
+      return new ParameterizedTypeImpl(p.getOwnerType(),
+          p.getRawType(), p.getActualTypeArguments());
+
+    } else if (type instanceof GenericArrayType) {
+      GenericArrayType g = (GenericArrayType) type;
+      return new GenericArrayTypeImpl(g.getGenericComponentType());
+
+    } else if (type instanceof WildcardType) {
+      WildcardType w = (WildcardType) type;
+      return new WildcardTypeImpl(w.getUpperBounds(), w.getLowerBounds());
+
+    } else {
+      // type is either serializable as-is or unsupported
+      return type;
+    }
+  }
+
+  public static Class<?> getRawType(Type type) {
+    if (type instanceof Class<?>) {
+      // type is a normal class.
+      return (Class<?>) type;
+
+    } else if (type instanceof ParameterizedType) {
+      ParameterizedType parameterizedType = (ParameterizedType) type;
+
+      // I'm not exactly sure why getRawType() returns Type instead of Class.
+      // Neal isn't either but suspects some pathological case related
+      // to nested classes exists.
+      Type rawType = parameterizedType.getRawType();
+      checkArgument(rawType instanceof Class);
+      return (Class<?>) rawType;
+
+    } else if (type instanceof GenericArrayType) {
+      Type componentType = ((GenericArrayType)type).getGenericComponentType();
+      return Array.newInstance(getRawType(componentType), 0).getClass();
+
+    } else if (type instanceof TypeVariable) {
+      // we could use the variable's bounds, but that won't work if there are multiple.
+      // having a raw type that's more general than necessary is okay
+      return Object.class;
+
+    } else if (type instanceof WildcardType) {
+      return getRawType(((WildcardType) type).getUpperBounds()[0]);
+
+    } else {
+      String className = type == null ? "null" : type.getClass().getName();
+      throw new IllegalArgumentException("Expected a Class, ParameterizedType, or "
+          + "GenericArrayType, but <" + type + "> is of type " + className);
+    }
+  }
+
+  static boolean equal(Object a, Object b) {
+    return a == b || (a != null && a.equals(b));
+  }
+
+  /**
+   * Returns true if {@code a} and {@code b} are equal.
+   */
+  public static boolean equals(Type a, Type b) {
+    if (a == b) {
+      // also handles (a == null && b == null)
+      return true;
+
+    } else if (a instanceof Class) {
+      // Class already specifies equals().
+      return a.equals(b);
+
+    } else if (a instanceof ParameterizedType) {
+      if (!(b instanceof ParameterizedType)) {
+        return false;
+      }
+
+      // TODO: save a .clone() call
+      ParameterizedType pa = (ParameterizedType) a;
+      ParameterizedType pb = (ParameterizedType) b;
+      return equal(pa.getOwnerType(), pb.getOwnerType())
+          && pa.getRawType().equals(pb.getRawType())
+          && Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());
+
+    } else if (a instanceof GenericArrayType) {
+      if (!(b instanceof GenericArrayType)) {
+        return false;
+      }
+
+      GenericArrayType ga = (GenericArrayType) a;
+      GenericArrayType gb = (GenericArrayType) b;
+      return equals(ga.getGenericComponentType(), gb.getGenericComponentType());
+
+    } else if (a instanceof WildcardType) {
+      if (!(b instanceof WildcardType)) {
+        return false;
+      }
+
+      WildcardType wa = (WildcardType) a;
+      WildcardType wb = (WildcardType) b;
+      return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())
+          && Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());
+
+    } else if (a instanceof TypeVariable) {
+      if (!(b instanceof TypeVariable)) {
+        return false;
+      }
+      TypeVariable<?> va = (TypeVariable<?>) a;
+      TypeVariable<?> vb = (TypeVariable<?>) b;
+      return va.getGenericDeclaration() == vb.getGenericDeclaration()
+          && va.getName().equals(vb.getName());
+
+    } else {
+      // This isn't a type we support. Could be a generic array type, wildcard type, etc.
+      return false;
+    }
+  }
+
+  private static int hashCodeOrZero(Object o) {
+    return o != null ? o.hashCode() : 0;
+  }
+
+  public static String typeToString(Type type) {
+    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
+  }
+
+  /**
+   * Returns the generic supertype for {@code supertype}. For example, given a class {@code
+   * IntegerSet}, the result for when supertype is {@code Set.class} is {@code Set<Integer>} and the
+   * result when the supertype is {@code Collection.class} is {@code Collection<Integer>}.
+   */
+  static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResolve) {
+    if (toResolve == rawType) {
+      return context;
+    }
+
+    // we skip searching through interfaces if unknown is an interface
+    if (toResolve.isInterface()) {
+      Class<?>[] interfaces = rawType.getInterfaces();
+      for (int i = 0, length = interfaces.length; i < length; i++) {
+        if (interfaces[i] == toResolve) {
+          return rawType.getGenericInterfaces()[i];
+        } else if (toResolve.isAssignableFrom(interfaces[i])) {
+          return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve);
+        }
+      }
+    }
+
+    // check our supertypes
+    if (!rawType.isInterface()) {
+      while (rawType != Object.class) {
+        Class<?> rawSupertype = rawType.getSuperclass();
+        if (rawSupertype == toResolve) {
+          return rawType.getGenericSuperclass();
+        } else if (toResolve.isAssignableFrom(rawSupertype)) {
+          return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve);
+        }
+        rawType = rawSupertype;
+      }
+    }
+
+    // we can't resolve this further
+    return toResolve;
+  }
+
+  /**
+   * Returns the generic form of {@code supertype}. For example, if this is {@code
+   * ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code
+   * Iterable.class}.
+   *
+   * @param supertype a superclass of, or interface implemented by, this.
+   */
+  static Type getSupertype(Type context, Class<?> contextRawType, Class<?> supertype) {
+    checkArgument(supertype.isAssignableFrom(contextRawType));
+    return resolve(context, contextRawType,
+        Types.getGenericSupertype(context, contextRawType, supertype));
+  }
+
+  /**
+   * Returns the component type of this array type.
+   * @throws ClassCastException if this type is not an array.
+   */
+  public static Type getArrayComponentType(Type array) {
+    return array instanceof GenericArrayType
+        ? ((GenericArrayType) array).getGenericComponentType()
+        : ((Class<?>) array).getComponentType();
+  }
+
+  /**
+   * Returns the element type of this collection type.
+   * @throws IllegalArgumentException if this type is not a collection.
+   */
+  public static Type getCollectionElementType(Type context, Class<?> contextRawType) {
+    Type collectionType = getSupertype(context, contextRawType, Collection.class);
+
+    if (collectionType instanceof WildcardType) {
+      collectionType = ((WildcardType)collectionType).getUpperBounds()[0];
+    }
+    if (collectionType instanceof ParameterizedType) {
+      return ((ParameterizedType) collectionType).getActualTypeArguments()[0];
+    }
+    return Object.class;
+  }
+
+  /**
+   * Returns a two element array containing this map's key and value types in
+   * positions 0 and 1 respectively.
+   */
+  public static Type[] getMapKeyAndValueTypes(Type context, Class<?> contextRawType) {
+    /*
+     * Work around a problem with the declaration of java.util.Properties. That
+     * class should extend Hashtable<String, String>, but it's declared to
+     * extend Hashtable<Object, Object>.
+     */
+    if (context == Properties.class) {
+      return new Type[] { String.class, String.class }; // TODO: test subclasses of Properties!
+    }
+
+    Type mapType = getSupertype(context, contextRawType, Map.class);
+    // TODO: strip wildcards?
+    if (mapType instanceof ParameterizedType) {
+      ParameterizedType mapParameterizedType = (ParameterizedType) mapType;
+      return mapParameterizedType.getActualTypeArguments();
+    }
+    return new Type[] { Object.class, Object.class };
+  }
+
+  public static Type resolve(Type context, Class<?> contextRawType, Type toResolve) {
+    // this implementation is made a little more complicated in an attempt to avoid object-creation
+    while (true) {
+      if (toResolve instanceof TypeVariable) {
+        TypeVariable<?> typeVariable = (TypeVariable<?>) toResolve;
+        toResolve = resolveTypeVariable(context, contextRawType, typeVariable);
+        if (toResolve == typeVariable) {
+          return toResolve;
+        }
+
+      } else if (toResolve instanceof Class && ((Class<?>) toResolve).isArray()) {
+        Class<?> original = (Class<?>) toResolve;
+        Type componentType = original.getComponentType();
+        Type newComponentType = resolve(context, contextRawType, componentType);
+        return componentType == newComponentType
+            ? original
+            : arrayOf(newComponentType);
+
+      } else if (toResolve instanceof GenericArrayType) {
+        GenericArrayType original = (GenericArrayType) toResolve;
+        Type componentType = original.getGenericComponentType();
+        Type newComponentType = resolve(context, contextRawType, componentType);
+        return componentType == newComponentType
+            ? original
+            : arrayOf(newComponentType);
+
+      } else if (toResolve instanceof ParameterizedType) {
+        ParameterizedType original = (ParameterizedType) toResolve;
+        Type ownerType = original.getOwnerType();
+        Type newOwnerType = resolve(context, contextRawType, ownerType);
+        boolean changed = newOwnerType != ownerType;
+
+        Type[] args = original.getActualTypeArguments();
+        for (int t = 0, length = args.length; t < length; t++) {
+          Type resolvedTypeArgument = resolve(context, contextRawType, args[t]);
+          if (resolvedTypeArgument != args[t]) {
+            if (!changed) {
+              args = args.clone();
+              changed = true;
+            }
+            args[t] = resolvedTypeArgument;
+          }
+        }
+
+        return changed
+            ? newParameterizedTypeWithOwner(newOwnerType, original.getRawType(), args)
+            : original;
+
+      } else if (toResolve instanceof WildcardType) {
+        WildcardType original = (WildcardType) toResolve;
+        Type[] originalLowerBound = original.getLowerBounds();
+        Type[] originalUpperBound = original.getUpperBounds();
+
+        if (originalLowerBound.length == 1) {
+          Type lowerBound = resolve(context, contextRawType, originalLowerBound[0]);
+          if (lowerBound != originalLowerBound[0]) {
+            return supertypeOf(lowerBound);
+          }
+        } else if (originalUpperBound.length == 1) {
+          Type upperBound = resolve(context, contextRawType, originalUpperBound[0]);
+          if (upperBound != originalUpperBound[0]) {
+            return subtypeOf(upperBound);
+          }
+        }
+        return original;
+
+      } else {
+        return toResolve;
+      }
+    }
+  }
+
+  static Type resolveTypeVariable(Type context, Class<?> contextRawType, TypeVariable<?> unknown) {
+    Class<?> declaredByRaw = declaringClassOf(unknown);
+
+    // we can't reduce this further
+    if (declaredByRaw == null) {
+      return unknown;
+    }
+
+    Type declaredBy = getGenericSupertype(context, contextRawType, declaredByRaw);
+    if (declaredBy instanceof ParameterizedType) {
+      int index = indexOf(declaredByRaw.getTypeParameters(), unknown);
+      return ((ParameterizedType) declaredBy).getActualTypeArguments()[index];
+    }
+
+    return unknown;
+  }
+
+  private static int indexOf(Object[] array, Object toFind) {
+    for (int i = 0; i < array.length; i++) {
+      if (toFind.equals(array[i])) {
+        return i;
+      }
+    }
+    throw new NoSuchElementException();
+  }
+
+  /**
+   * Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by
+   * a class.
+   */
+  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
+    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
+    return genericDeclaration instanceof Class
+        ? (Class<?>) genericDeclaration
+        : null;
+  }
+
+  private static void checkNotPrimitive(Type type) {
+    checkArgument(!(type instanceof Class<?>) || !((Class<?>) type).isPrimitive());
+  }
+
+  private static final class ParameterizedTypeImpl implements ParameterizedType, Serializable {
+    private final Type ownerType;
+    private final Type rawType;
+    private final Type[] typeArguments;
+
+    public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments) {
+      // require an owner type if the raw type needs it
+      if (rawType instanceof Class<?>) {
+        Class<?> rawTypeAsClass = (Class<?>) rawType;
+        boolean isStaticOrTopLevelClass = Modifier.isStatic(rawTypeAsClass.getModifiers())
+            || rawTypeAsClass.getEnclosingClass() == null;
+        checkArgument(ownerType != null || isStaticOrTopLevelClass);
+      }
+
+      this.ownerType = ownerType == null ? null : canonicalize(ownerType);
+      this.rawType = canonicalize(rawType);
+      this.typeArguments = typeArguments.clone();
+      for (int t = 0; t < this.typeArguments.length; t++) {
+        checkNotNull(this.typeArguments[t]);
+        checkNotPrimitive(this.typeArguments[t]);
+        this.typeArguments[t] = canonicalize(this.typeArguments[t]);
+      }
+    }
+
+    public Type[] getActualTypeArguments() {
+      return typeArguments.clone();
+    }
+
+    public Type getRawType() {
+      return rawType;
+    }
+
+    public Type getOwnerType() {
+      return ownerType;
+    }
+
+    @Override public boolean equals(Object other) {
+      return other instanceof ParameterizedType
+          && Types.equals(this, (ParameterizedType) other);
+    }
+
+    @Override public int hashCode() {
+      return Arrays.hashCode(typeArguments)
+          ^ rawType.hashCode()
+          ^ hashCodeOrZero(ownerType);
+    }
+
+    @Override public String toString() {
+      StringBuilder stringBuilder = new StringBuilder(30 * (typeArguments.length + 1));
+      stringBuilder.append(typeToString(rawType));
+
+      if (typeArguments.length == 0) {
+        return stringBuilder.toString();
+      }
+
+      stringBuilder.append("<").append(typeToString(typeArguments[0]));
+      for (int i = 1; i < typeArguments.length; i++) {
+        stringBuilder.append(", ").append(typeToString(typeArguments[i]));
+      }
+      return stringBuilder.append(">").toString();
+    }
+
+    private static final long serialVersionUID = 0;
+  }
+
+  private static final class GenericArrayTypeImpl implements GenericArrayType, Serializable {
+    private final Type componentType;
+
+    public GenericArrayTypeImpl(Type componentType) {
+      this.componentType = canonicalize(componentType);
+    }
+
+    public Type getGenericComponentType() {
+      return componentType;
+    }
+
+    @Override public boolean equals(Object o) {
+      return o instanceof GenericArrayType
+          && Types.equals(this, (GenericArrayType) o);
+    }
+
+    @Override public int hashCode() {
+      return componentType.hashCode();
+    }
+
+    @Override public String toString() {
+      return typeToString(componentType) + "[]";
+    }
+
+    private static final long serialVersionUID = 0;
+  }
+
+  /**
+   * The WildcardType interface supports multiple upper bounds and multiple
+   * lower bounds. We only support what the Java 6 language needs - at most one
+   * bound. If a lower bound is set, the upper bound must be Object.class.
+   */
+  private static final class WildcardTypeImpl implements WildcardType, Serializable {
+    private final Type upperBound;
+    private final Type lowerBound;
+
+    public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {
+      checkArgument(lowerBounds.length <= 1);
+      checkArgument(upperBounds.length == 1);
+
+      if (lowerBounds.length == 1) {
+        checkNotNull(lowerBounds[0]);
+        checkNotPrimitive(lowerBounds[0]);
+        checkArgument(upperBounds[0] == Object.class);
+        this.lowerBound = canonicalize(lowerBounds[0]);
+        this.upperBound = Object.class;
+
+      } else {
+        checkNotNull(upperBounds[0]);
+        checkNotPrimitive(upperBounds[0]);
+        this.lowerBound = null;
+        this.upperBound = canonicalize(upperBounds[0]);
+      }
+    }
+
+    public Type[] getUpperBounds() {
+      return new Type[] { upperBound };
+    }
+
+    public Type[] getLowerBounds() {
+      return lowerBound != null ? new Type[] { lowerBound } : EMPTY_TYPE_ARRAY;
+    }
+
+    @Override public boolean equals(Object other) {
+      return other instanceof WildcardType
+          && Types.equals(this, (WildcardType) other);
+    }
+
+    @Override public int hashCode() {
+      // this equals Arrays.hashCode(getLowerBounds()) ^ Arrays.hashCode(getUpperBounds());
+      return (lowerBound != null ? 31 + lowerBound.hashCode() : 1)
+          ^ (31 + upperBound.hashCode());
+    }
+
+    @Override public String toString() {
+      if (lowerBound != null) {
+        return "? super " + typeToString(lowerBound);
+      } else if (upperBound == Object.class) {
+        return "?";
+      } else {
+        return "? extends " + typeToString(upperBound);
+      }
+    }
+
+    private static final long serialVersionUID = 0;
+  }
+}
diff --git a/retrofit2-github-app/.gitignore b/retrofit2-github-app/.gitignore
new file mode 100644
index 000000000..796b96d1c
--- /dev/null
+++ b/retrofit2-github-app/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/retrofit2-github-app/build.gradle b/retrofit2-github-app/build.gradle
new file mode 100644
index 000000000..c602a51c8
--- /dev/null
+++ b/retrofit2-github-app/build.gradle
@@ -0,0 +1,97 @@
+buildscript {
+    repositories {
+        jcenter()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.+'
+        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
+        classpath 'me.tatarka:gradle-retrolambda:3.1.0'
+        classpath "com.jakewharton.hugo:hugo-plugin:1.2.1"
+    }
+}
+
+apply plugin: 'android-sdk-manager'
+apply plugin: 'com.android.application'
+apply plugin: 'me.tatarka.retrolambda'
+apply plugin: 'hugo'
+apply plugin: 'com.neenbedankt.android-apt'
+apply from: 'deploy.gradle'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_8
+        targetCompatibility JavaVersion.VERSION_1_8
+    }
+
+    packagingOptions {
+        exclude 'META-INF/services/javax.annotation.processing.Processor'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/NOTICE'
+        exclude 'META-INF/NOTICE.txt'
+        exclude 'LICENSE'
+        exclude 'LICENSE.txt'
+        exclude '.readme'
+    }
+
+    defaultConfig {
+        applicationId "com.github.retrofit2.app"
+        minSdkVersion 9
+        targetSdkVersion 22
+        versionCode 1
+        versionName "1.0"
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+repositories {
+    jcenter()
+    maven { url "https://jitpack.io" }
+}
+
+dependencies {
+    compile 'com.android.support:design:22.2.0'
+    compile 'com.android.support:appcompat-v7:22.2.0'
+    compile 'com.android.support:cardview-v7:22.2.0'
+    compile 'com.android.support:recyclerview-v7:22.2.0'
+    compile 'com.android.support:support-annotations:22.2.0'
+
+    compile 'com.github.bumptech.glide:glide:3.6.0'
+    compile 'de.hdodenhof:circleimageview:1.3.0'
+
+    compile 'io.reactivex:rxjava:1.0.9'
+    compile 'io.reactivex:rxandroid:0.24.0'
+
+    compile 'com.jakewharton:butterknife:6.1.0'
+    //compile 'com.jakewharton.timber:timber:2.5.1'
+    compile 'com.facebook.fresco:fresco:0.4.0'
+
+    compile 'com.google.dagger:dagger:2.0'
+    apt 'com.google.dagger:dagger-compiler:2.0'
+    provided 'javax.annotation:jsr250-api:1.0'
+
+    compile 'com.github.frankiesardo:auto-parcel:0.3'
+    apt 'com.github.frankiesardo:auto-parcel-processor:0.3'
+
+    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'
+    androidTestCompile 'org.assertj:assertj-core:1.6.1'
+    androidTestCompile 'com.squareup.assertj:assertj-android:1.0.0'
+    androidTestCompile 'com.android.support:support-annotations:22.2.0'
+
+    testCompile 'junit:junit:4.12'
+    testCompile 'org.assertj:assertj-core:1.6.1'
+    compile 'com.infstory:proguard-snippets:1.0.0'
+
+    compile project(':retrofit2-github')
+}
diff --git a/retrofit2-github-app/deploy.gradle b/retrofit2-github-app/deploy.gradle
new file mode 100644
index 000000000..4ed55da62
--- /dev/null
+++ b/retrofit2-github-app/deploy.gradle
@@ -0,0 +1 @@
+apply plugin: 'maven'
diff --git a/retrofit2-github-app/proguard-rules.pro b/retrofit2-github-app/proguard-rules.pro
new file mode 100644
index 000000000..6bb4c1c28
--- /dev/null
+++ b/retrofit2-github-app/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /usr/local/google/home/chrisbanes/bin/current-android-sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/retrofit2-github-app/src/main/AndroidManifest.xml b/retrofit2-github-app/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..1f2def468
--- /dev/null
+++ b/retrofit2-github-app/src/main/AndroidManifest.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.github.retrofit2.app">
+
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:theme="@style/Theme.App">
+
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name=".CheeseDetailActivity" />
+    </application>
+
+</manifest>
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/BindViewHolder.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/BindViewHolder.java
new file mode 100644
index 000000000..99c866682
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/BindViewHolder.java
@@ -0,0 +1,13 @@
+package com.github.retrofit2.app;
+
+import android.view.View;
+import android.view.ViewGroup;
+import android.support.v7.widget.RecyclerView;
+
+public abstract class BindViewHolder<T> extends RecyclerView.ViewHolder {
+    public BindViewHolder(View itemView) {
+        super(itemView);
+    }
+
+    public abstract void onBind(int position, T item);
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Card.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Card.java
new file mode 100644
index 000000000..b2e5665e5
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Card.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import auto.parcel.AutoParcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+
+@AutoParcel
+public abstract class Card implements Parcelable {
+    @Nullable
+    public abstract String icon();
+    @Nullable
+    public abstract String text1();
+    @Nullable
+    public abstract String message();
+    @Nullable
+    public abstract String image();
+
+    @AutoParcel.Builder
+    public abstract static class Builder {
+        public abstract Builder icon(String s);
+        public abstract Builder text1(String s);
+        public abstract Builder message(String s);
+        public abstract Builder image(String s);
+        public abstract Card build();
+    }
+
+    public static Builder builder() {
+        return new AutoParcel_Card.Builder();
+    }
+
+    public abstract Builder toBuilder();
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CardsFragment.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CardsFragment.java
new file mode 100644
index 000000000..a05204948
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CardsFragment.java
@@ -0,0 +1,168 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.widget.TextViewCompat;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import butterknife.ButterKnife;
+import butterknife.InjectView;
+
+import rx.Observable;
+import rx.Subscription;
+import rx.functions.*;
+
+import rx.android.app.*;
+
+import android.support.v4.widget.SwipeRefreshLayout;
+public class CardsFragment extends Fragment {
+    @InjectView(R.id.list)
+    RecyclerView listView;
+    @InjectView(R.id.refresh)
+    SwipeRefreshLayout refreshView;
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragment_list_swipe, container, false);
+        ButterKnife.inject(this, view);
+
+        listAdapter = ListRecyclerAdapter.create();
+        listAdapter.createViewHolder(new Func2<ViewGroup, Integer, CardViewHolder>() {
+            @Override
+            public CardViewHolder call(ViewGroup parent, Integer position) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_card, parent, false);
+
+                /*
+                TypedValue typedValue = new TypedValue();
+                parent.getContext().getTheme().resolveAttribute(R.attr.selectableItemBackground, typedValue, true);
+                view.setBackgroundResource(typedValue.resourceId);
+                */
+
+                return new CardViewHolder(view);
+            }
+        });
+
+        listView.setLayoutManager(new LinearLayoutManager(listView.getContext()));
+        listView.setAdapter(listAdapter);
+
+        refreshView.setOnRefreshListener(() -> {
+            load();
+        });
+
+        return view;
+    }
+
+    @Override
+    public void setUserVisibleHint(boolean isVisibleToUser) {
+        if (isVisibleToUser) {
+            load();
+        }
+    }
+
+    public Subscription load() {
+        refreshView.setRefreshing(true);
+        return AppObservable.bindFragment(CardsFragment.this, items).toList().subscribe(list -> {
+            android.util.Log.d("RetroWeibo", "list: " + list);
+            android.util.Log.d("RetroWeibo", "list.size(): " + list.size());
+            listAdapter.getList().clear();
+            listAdapter.getList().addAll(list);
+            listAdapter.notifyDataSetChanged();
+        }, e -> {}, () -> {
+            refreshView.setRefreshing(false);
+        });
+    }
+
+
+    private ListRecyclerAdapter<Card, CardViewHolder> listAdapter;
+    Observable<Card> items;
+
+    public CardsFragment items(Observable<Card> items) {
+        this.items = items;
+
+        return this;
+    }
+
+    public static CardsFragment create() {
+        return new CardsFragment();
+    }
+
+    public static class CardViewHolder extends BindViewHolder<Card> {
+        @InjectView(R.id.icon)
+        ImageView icon;
+        @InjectView(R.id.text1)
+        TextView text1;
+        @InjectView(R.id.message)
+        TextView message;
+        @InjectView(R.id.image)
+        ImageView image;
+
+        public CardViewHolder(View itemView) {
+            super(itemView);
+            ButterKnife.inject(this, itemView);
+        };
+
+        @Override
+        public void onBind(int position, Card item) {
+            if (!android.text.TextUtils.isEmpty(item.text1())) text1.setText(item.text1());
+            if (!android.text.TextUtils.isEmpty(item.message())) message.setText(item.message());
+
+            if (!android.text.TextUtils.isEmpty(item.icon())) {
+                Glide.with(itemView.getContext())
+                    .load(item.icon())
+                    .fitCenter()
+                    .into(icon);
+            }
+
+            if (!android.text.TextUtils.isEmpty(item.image())) {
+                Glide.with(itemView.getContext())
+                    .load(item.image())
+                    .fitCenter()
+                    .into(image);
+            }
+
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Context context = v.getContext();
+                    Intent intent = new Intent(context, CheeseDetailActivity.class);
+                    if (!android.text.TextUtils.isEmpty(item.text1())) intent.putExtra(CheeseDetailActivity.EXTRA_NAME, item.text1());
+
+                    context.startActivity(intent);
+                }
+            });
+        }
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseDetailActivity.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseDetailActivity.java
new file mode 100644
index 000000000..b345b7d31
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseDetailActivity.java
@@ -0,0 +1,151 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.design.widget.CollapsingToolbarLayout;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.widget.ImageView;
+
+import com.bumptech.glide.Glide;
+
+import java.util.Random;
+
+import butterknife.ButterKnife;
+import butterknife.InjectView;
+
+import rx.Observable;
+import rx.functions.*;
+
+import rx.android.app.*;
+
+import java.util.Arrays;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+import android.support.annotation.Nullable;
+import android.view.LayoutInflater;
+
+public class CheeseDetailActivity extends AppCompatActivity {
+
+    public static final String EXTRA_NAME = "cheese_name";
+
+    @InjectView(R.id.list)
+    RecyclerView listView;
+
+    private ListRecyclerAdapter<SimplePost, SimplePostViewHolder> listAdapter;
+
+    public static class SimplePost {
+        String title;
+        String content;
+        public String title() {
+            return title;
+        }
+        public String content() {
+            return content;
+        }
+        public SimplePost title(String title) {
+            this.title = title;
+            return this;
+        }
+        public SimplePost content(String content) {
+            this.content = content;
+            return this;
+        }
+        public static SimplePost create() {
+            return new SimplePost();
+        }
+    }
+
+    public static class SimplePostViewHolder extends BindViewHolder<SimplePost> {
+        @InjectView(R.id.text1)
+        TextView text1;
+        @InjectView(R.id.text2)
+        TextView text2;
+
+        public SimplePostViewHolder(View itemView) {
+            super(itemView);
+            ButterKnife.inject(this, itemView);
+        };
+
+        @Override
+        public void onBind(int position, SimplePost item) {
+            if (!android.text.TextUtils.isEmpty(item.title())) text1.setText(item.title());
+            if (!android.text.TextUtils.isEmpty(item.content())) text2.setText(item.content());
+        }
+    }
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_detail);
+        ButterKnife.inject(this);
+
+        listAdapter = ListRecyclerAdapter.create();
+
+        listAdapter.createViewHolder(new Func2<ViewGroup, Integer, SimplePostViewHolder>() {
+            @Override
+            public SimplePostViewHolder call(@Nullable ViewGroup viewGroup, Integer position) {
+                return new SimplePostViewHolder(LayoutInflater.from(CheeseDetailActivity.this).inflate(R.layout.item_post_card, viewGroup, false));
+            }
+        });
+
+        listAdapter.getList().addAll(Arrays.asList(SimplePost.create(), SimplePost.create(), SimplePost.create()));
+
+        listView.setLayoutManager(new android.support.v7.widget.LinearLayoutManager(this));
+        listView.setAdapter(listAdapter);
+
+        Intent intent = getIntent();
+        final String cheeseName = intent.getStringExtra(EXTRA_NAME);
+
+        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+
+        CollapsingToolbarLayout collapsingToolbar =
+                (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);
+        collapsingToolbar.setTitle(cheeseName);
+
+        loadBackdrop();
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                finish();
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+    private void loadBackdrop() {
+        final ImageView imageView = (ImageView) findViewById(R.id.backdrop);
+        Glide.with(this).load(Cheeses.getRandomCheeseDrawable()).centerCrop().into(imageView);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.sample_actions, menu);
+        return true;
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseListFragment.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseListFragment.java
new file mode 100644
index 000000000..f6e42866f
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/CheeseListFragment.java
@@ -0,0 +1,146 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.widget.TextViewCompat;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import butterknife.ButterKnife;
+import butterknife.InjectView;
+
+import rx.Observable;
+import rx.functions.*;
+
+import rx.android.app.*;
+
+public class CheeseListFragment extends Fragment {
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        RecyclerView rv = (RecyclerView) inflater.inflate(
+                R.layout.fragment_cheese_list, container, false);
+        setupRecyclerView(rv);
+        return rv;
+    }
+
+    private void setupRecyclerView(RecyclerView recyclerView) {
+        recyclerView.setLayoutManager(new LinearLayoutManager(recyclerView.getContext()));
+        recyclerView.setAdapter(new SimpleStringRecyclerViewAdapter(getActivity(),
+                getRandomSublist(Cheeses.sCheeseStrings, 30)));
+    }
+
+    private List<String> getRandomSublist(String[] array, int amount) {
+        ArrayList<String> list = new ArrayList<>(amount);
+        Random random = new Random();
+        while (list.size() < amount) {
+            list.add(array[random.nextInt(array.length)]);
+        }
+        return list;
+    }
+
+    public static class SimpleStringRecyclerViewAdapter
+            extends RecyclerView.Adapter<SimpleStringRecyclerViewAdapter.ViewHolder> {
+
+        private final TypedValue mTypedValue = new TypedValue();
+        private int mBackground;
+        private List<String> mValues;
+
+        public static class ViewHolder extends RecyclerView.ViewHolder {
+            public String mBoundString;
+
+            public final View mView;
+            public final ImageView mImageView;
+            public final TextView mTextView;
+
+            public ViewHolder(View view) {
+                super(view);
+                mView = view;
+                mImageView = (ImageView) view.findViewById(R.id.icon);
+                mTextView = (TextView) view.findViewById(android.R.id.text1);
+            }
+
+            @Override
+            public String toString() {
+                return super.toString() + " '" + mTextView.getText();
+            }
+        }
+
+        public String getValueAt(int position) {
+            return mValues.get(position);
+        }
+
+        public SimpleStringRecyclerViewAdapter(Context context, List<String> items) {
+            context.getTheme().resolveAttribute(R.attr.selectableItemBackground, mTypedValue, true);
+            mBackground = mTypedValue.resourceId;
+            mValues = items;
+        }
+
+        @Override
+        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
+            View view = LayoutInflater.from(parent.getContext())
+                    .inflate(R.layout.list_item, parent, false);
+            view.setBackgroundResource(mBackground);
+            return new ViewHolder(view);
+        }
+
+        @Override
+        public void onBindViewHolder(final ViewHolder holder, int position) {
+            holder.mBoundString = mValues.get(position);
+            holder.mTextView.setText(mValues.get(position));
+
+            holder.mView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Context context = v.getContext();
+                    Intent intent = new Intent(context, CheeseDetailActivity.class);
+                    intent.putExtra(CheeseDetailActivity.EXTRA_NAME, holder.mBoundString);
+
+                    context.startActivity(intent);
+                }
+            });
+
+            Glide.with(holder.mImageView.getContext())
+                    .load(Cheeses.getRandomCheeseDrawable())
+                    .fitCenter()
+                    .into(holder.mImageView);
+        }
+
+        @Override
+        public int getItemCount() {
+            return mValues.size();
+        }
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Cheeses.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Cheeses.java
new file mode 100644
index 000000000..d59753b78
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Cheeses.java
@@ -0,0 +1,174 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import java.util.Random;
+
+public class Cheeses {
+
+    private static final Random RANDOM = new Random();
+
+    public static int getRandomCheeseDrawable() {
+        switch (RANDOM.nextInt(5)) {
+            default:
+            case 0:
+                return R.drawable.cheese_1;
+            case 1:
+                return R.drawable.cheese_2;
+            case 2:
+                return R.drawable.cheese_3;
+            case 3:
+                return R.drawable.cheese_4;
+            case 4:
+                return R.drawable.cheese_5;
+        }
+    }
+
+    public static final String[] sCheeseStrings = {
+            "Abbaye de Belloc", "Abbaye du Mont des Cats", "Abertam", "Abondance", "Ackawi",
+            "Acorn", "Adelost", "Affidelice au Chablis", "Afuega'l Pitu", "Airag", "Airedale",
+            "Aisy Cendre", "Allgauer Emmentaler", "Alverca", "Ambert", "American Cheese",
+            "Ami du Chambertin", "Anejo Enchilado", "Anneau du Vic-Bilh", "Anthoriro", "Appenzell",
+            "Aragon", "Ardi Gasna", "Ardrahan", "Armenian String", "Aromes au Gene de Marc",
+            "Asadero", "Asiago", "Aubisque Pyrenees", "Autun", "Avaxtskyr", "Baby Swiss",
+            "Babybel", "Baguette Laonnaise", "Bakers", "Baladi", "Balaton", "Bandal", "Banon",
+            "Barry's Bay Cheddar", "Basing", "Basket Cheese", "Bath Cheese", "Bavarian Bergkase",
+            "Baylough", "Beaufort", "Beauvoorde", "Beenleigh Blue", "Beer Cheese", "Bel Paese",
+            "Bergader", "Bergere Bleue", "Berkswell", "Beyaz Peynir", "Bierkase", "Bishop Kennedy",
+            "Blarney", "Bleu d'Auvergne", "Bleu de Gex", "Bleu de Laqueuille",
+            "Bleu de Septmoncel", "Bleu Des Causses", "Blue", "Blue Castello", "Blue Rathgore",
+            "Blue Vein (Australian)", "Blue Vein Cheeses", "Bocconcini", "Bocconcini (Australian)",
+            "Boeren Leidenkaas", "Bonchester", "Bosworth", "Bougon", "Boule Du Roves",
+            "Boulette d'Avesnes", "Boursault", "Boursin", "Bouyssou", "Bra", "Braudostur",
+            "Breakfast Cheese", "Brebis du Lavort", "Brebis du Lochois", "Brebis du Puyfaucon",
+            "Bresse Bleu", "Brick", "Brie", "Brie de Meaux", "Brie de Melun", "Brillat-Savarin",
+            "Brin", "Brin d' Amour", "Brin d'Amour", "Brinza (Burduf Brinza)",
+            "Briquette de Brebis", "Briquette du Forez", "Broccio", "Broccio Demi-Affine",
+            "Brousse du Rove", "Bruder Basil", "Brusselae Kaas (Fromage de Bruxelles)", "Bryndza",
+            "Buchette d'Anjou", "Buffalo", "Burgos", "Butte", "Butterkase", "Button (Innes)",
+            "Buxton Blue", "Cabecou", "Caboc", "Cabrales", "Cachaille", "Caciocavallo", "Caciotta",
+            "Caerphilly", "Cairnsmore", "Calenzana", "Cambazola", "Camembert de Normandie",
+            "Canadian Cheddar", "Canestrato", "Cantal", "Caprice des Dieux", "Capricorn Goat",
+            "Capriole Banon", "Carre de l'Est", "Casciotta di Urbino", "Cashel Blue", "Castellano",
+            "Castelleno", "Castelmagno", "Castelo Branco", "Castigliano", "Cathelain",
+            "Celtic Promise", "Cendre d'Olivet", "Cerney", "Chabichou", "Chabichou du Poitou",
+            "Chabis de Gatine", "Chaource", "Charolais", "Chaumes", "Cheddar",
+            "Cheddar Clothbound", "Cheshire", "Chevres", "Chevrotin des Aravis", "Chontaleno",
+            "Civray", "Coeur de Camembert au Calvados", "Coeur de Chevre", "Colby", "Cold Pack",
+            "Comte", "Coolea", "Cooleney", "Coquetdale", "Corleggy", "Cornish Pepper",
+            "Cotherstone", "Cotija", "Cottage Cheese", "Cottage Cheese (Australian)",
+            "Cougar Gold", "Coulommiers", "Coverdale", "Crayeux de Roncq", "Cream Cheese",
+            "Cream Havarti", "Crema Agria", "Crema Mexicana", "Creme Fraiche", "Crescenza",
+            "Croghan", "Crottin de Chavignol", "Crottin du Chavignol", "Crowdie", "Crowley",
+            "Cuajada", "Curd", "Cure Nantais", "Curworthy", "Cwmtawe Pecorino",
+            "Cypress Grove Chevre", "Danablu (Danish Blue)", "Danbo", "Danish Fontina",
+            "Daralagjazsky", "Dauphin", "Delice des Fiouves", "Denhany Dorset Drum", "Derby",
+            "Dessertnyj Belyj", "Devon Blue", "Devon Garland", "Dolcelatte", "Doolin",
+            "Doppelrhamstufel", "Dorset Blue Vinney", "Double Gloucester", "Double Worcester",
+            "Dreux a la Feuille", "Dry Jack", "Duddleswell", "Dunbarra", "Dunlop", "Dunsyre Blue",
+            "Duroblando", "Durrus", "Dutch Mimolette (Commissiekaas)", "Edam", "Edelpilz",
+            "Emental Grand Cru", "Emlett", "Emmental", "Epoisses de Bourgogne", "Esbareich",
+            "Esrom", "Etorki", "Evansdale Farmhouse Brie", "Evora De L'Alentejo", "Exmoor Blue",
+            "Explorateur", "Feta", "Feta (Australian)", "Figue", "Filetta", "Fin-de-Siecle",
+            "Finlandia Swiss", "Finn", "Fiore Sardo", "Fleur du Maquis", "Flor de Guia",
+            "Flower Marie", "Folded", "Folded cheese with mint", "Fondant de Brebis",
+            "Fontainebleau", "Fontal", "Fontina Val d'Aosta", "Formaggio di capra", "Fougerus",
+            "Four Herb Gouda", "Fourme d' Ambert", "Fourme de Haute Loire", "Fourme de Montbrison",
+            "Fresh Jack", "Fresh Mozzarella", "Fresh Ricotta", "Fresh Truffles", "Fribourgeois",
+            "Friesekaas", "Friesian", "Friesla", "Frinault", "Fromage a Raclette", "Fromage Corse",
+            "Fromage de Montagne de Savoie", "Fromage Frais", "Fruit Cream Cheese",
+            "Frying Cheese", "Fynbo", "Gabriel", "Galette du Paludier", "Galette Lyonnaise",
+            "Galloway Goat's Milk Gems", "Gammelost", "Gaperon a l'Ail", "Garrotxa", "Gastanberra",
+            "Geitost", "Gippsland Blue", "Gjetost", "Gloucester", "Golden Cross", "Gorgonzola",
+            "Gornyaltajski", "Gospel Green", "Gouda", "Goutu", "Gowrie", "Grabetto", "Graddost",
+            "Grafton Village Cheddar", "Grana", "Grana Padano", "Grand Vatel",
+            "Grataron d' Areches", "Gratte-Paille", "Graviera", "Greuilh", "Greve",
+            "Gris de Lille", "Gruyere", "Gubbeen", "Guerbigny", "Halloumi",
+            "Halloumy (Australian)", "Haloumi-Style Cheese", "Harbourne Blue", "Havarti",
+            "Heidi Gruyere", "Hereford Hop", "Herrgardsost", "Herriot Farmhouse", "Herve",
+            "Hipi Iti", "Hubbardston Blue Cow", "Hushallsost", "Iberico", "Idaho Goatster",
+            "Idiazabal", "Il Boschetto al Tartufo", "Ile d'Yeu", "Isle of Mull", "Jarlsberg",
+            "Jermi Tortes", "Jibneh Arabieh", "Jindi Brie", "Jubilee Blue", "Juustoleipa",
+            "Kadchgall", "Kaseri", "Kashta", "Kefalotyri", "Kenafa", "Kernhem", "Kervella Affine",
+            "Kikorangi", "King Island Cape Wickham Brie", "King River Gold", "Klosterkaese",
+            "Knockalara", "Kugelkase", "L'Aveyronnais", "L'Ecir de l'Aubrac", "La Taupiniere",
+            "La Vache Qui Rit", "Laguiole", "Lairobell", "Lajta", "Lanark Blue", "Lancashire",
+            "Langres", "Lappi", "Laruns", "Lavistown", "Le Brin", "Le Fium Orbo", "Le Lacandou",
+            "Le Roule", "Leafield", "Lebbene", "Leerdammer", "Leicester", "Leyden", "Limburger",
+            "Lincolnshire Poacher", "Lingot Saint Bousquet d'Orb", "Liptauer", "Little Rydings",
+            "Livarot", "Llanboidy", "Llanglofan Farmhouse", "Loch Arthur Farmhouse",
+            "Loddiswell Avondale", "Longhorn", "Lou Palou", "Lou Pevre", "Lyonnais", "Maasdam",
+            "Macconais", "Mahoe Aged Gouda", "Mahon", "Malvern", "Mamirolle", "Manchego",
+            "Manouri", "Manur", "Marble Cheddar", "Marbled Cheeses", "Maredsous", "Margotin",
+            "Maribo", "Maroilles", "Mascares", "Mascarpone", "Mascarpone (Australian)",
+            "Mascarpone Torta", "Matocq", "Maytag Blue", "Meira", "Menallack Farmhouse",
+            "Menonita", "Meredith Blue", "Mesost", "Metton (Cancoillotte)", "Meyer Vintage Gouda",
+            "Mihalic Peynir", "Milleens", "Mimolette", "Mine-Gabhar", "Mini Baby Bells", "Mixte",
+            "Molbo", "Monastery Cheeses", "Mondseer", "Mont D'or Lyonnais", "Montasio",
+            "Monterey Jack", "Monterey Jack Dry", "Morbier", "Morbier Cru de Montagne",
+            "Mothais a la Feuille", "Mozzarella", "Mozzarella (Australian)",
+            "Mozzarella di Bufala", "Mozzarella Fresh, in water", "Mozzarella Rolls", "Munster",
+            "Murol", "Mycella", "Myzithra", "Naboulsi", "Nantais", "Neufchatel",
+            "Neufchatel (Australian)", "Niolo", "Nokkelost", "Northumberland", "Oaxaca",
+            "Olde York", "Olivet au Foin", "Olivet Bleu", "Olivet Cendre",
+            "Orkney Extra Mature Cheddar", "Orla", "Oschtjepka", "Ossau Fermier", "Ossau-Iraty",
+            "Oszczypek", "Oxford Blue", "P'tit Berrichon", "Palet de Babligny", "Paneer", "Panela",
+            "Pannerone", "Pant ys Gawn", "Parmesan (Parmigiano)", "Parmigiano Reggiano",
+            "Pas de l'Escalette", "Passendale", "Pasteurized Processed", "Pate de Fromage",
+            "Patefine Fort", "Pave d'Affinois", "Pave d'Auge", "Pave de Chirac", "Pave du Berry",
+            "Pecorino", "Pecorino in Walnut Leaves", "Pecorino Romano", "Peekskill Pyramid",
+            "Pelardon des Cevennes", "Pelardon des Corbieres", "Penamellera", "Penbryn",
+            "Pencarreg", "Perail de Brebis", "Petit Morin", "Petit Pardou", "Petit-Suisse",
+            "Picodon de Chevre", "Picos de Europa", "Piora", "Pithtviers au Foin",
+            "Plateau de Herve", "Plymouth Cheese", "Podhalanski", "Poivre d'Ane", "Polkolbin",
+            "Pont l'Eveque", "Port Nicholson", "Port-Salut", "Postel", "Pouligny-Saint-Pierre",
+            "Pourly", "Prastost", "Pressato", "Prince-Jean", "Processed Cheddar", "Provolone",
+            "Provolone (Australian)", "Pyengana Cheddar", "Pyramide", "Quark",
+            "Quark (Australian)", "Quartirolo Lombardo", "Quatre-Vents", "Quercy Petit",
+            "Queso Blanco", "Queso Blanco con Frutas --Pina y Mango", "Queso de Murcia",
+            "Queso del Montsec", "Queso del Tietar", "Queso Fresco", "Queso Fresco (Adobera)",
+            "Queso Iberico", "Queso Jalapeno", "Queso Majorero", "Queso Media Luna",
+            "Queso Para Frier", "Queso Quesadilla", "Rabacal", "Raclette", "Ragusano", "Raschera",
+            "Reblochon", "Red Leicester", "Regal de la Dombes", "Reggianito", "Remedou",
+            "Requeson", "Richelieu", "Ricotta", "Ricotta (Australian)", "Ricotta Salata", "Ridder",
+            "Rigotte", "Rocamadour", "Rollot", "Romano", "Romans Part Dieu", "Roncal", "Roquefort",
+            "Roule", "Rouleau De Beaulieu", "Royalp Tilsit", "Rubens", "Rustinu", "Saaland Pfarr",
+            "Saanenkaese", "Saga", "Sage Derby", "Sainte Maure", "Saint-Marcellin",
+            "Saint-Nectaire", "Saint-Paulin", "Salers", "Samso", "San Simon", "Sancerre",
+            "Sap Sago", "Sardo", "Sardo Egyptian", "Sbrinz", "Scamorza", "Schabzieger", "Schloss",
+            "Selles sur Cher", "Selva", "Serat", "Seriously Strong Cheddar", "Serra da Estrela",
+            "Sharpam", "Shelburne Cheddar", "Shropshire Blue", "Siraz", "Sirene", "Smoked Gouda",
+            "Somerset Brie", "Sonoma Jack", "Sottocenare al Tartufo", "Soumaintrain",
+            "Sourire Lozerien", "Spenwood", "Sraffordshire Organic", "St. Agur Blue Cheese",
+            "Stilton", "Stinking Bishop", "String", "Sussex Slipcote", "Sveciaost", "Swaledale",
+            "Sweet Style Swiss", "Swiss", "Syrian (Armenian String)", "Tala", "Taleggio", "Tamie",
+            "Tasmania Highland Chevre Log", "Taupiniere", "Teifi", "Telemea", "Testouri",
+            "Tete de Moine", "Tetilla", "Texas Goat Cheese", "Tibet", "Tillamook Cheddar",
+            "Tilsit", "Timboon Brie", "Toma", "Tomme Brulee", "Tomme d'Abondance",
+            "Tomme de Chevre", "Tomme de Romans", "Tomme de Savoie", "Tomme des Chouans", "Tommes",
+            "Torta del Casar", "Toscanello", "Touree de L'Aubier", "Tourmalet",
+            "Trappe (Veritable)", "Trois Cornes De Vendee", "Tronchon", "Trou du Cru", "Truffe",
+            "Tupi", "Turunmaa", "Tymsboro", "Tyn Grug", "Tyning", "Ubriaco", "Ulloa",
+            "Vacherin-Fribourgeois", "Valencay", "Vasterbottenost", "Venaco", "Vendomois",
+            "Vieux Corse", "Vignotte", "Vulscombe", "Waimata Farmhouse Blue",
+            "Washed Rind Cheese (Australian)", "Waterloo", "Weichkaese", "Wellington",
+            "Wensleydale", "White Stilton", "Whitestone Farmhouse", "Wigmore", "Woodside Cabecou",
+            "Xanadu", "Xynotyro", "Yarg Cornish", "Yarra Valley Pyramid", "Yorkshire Blue",
+            "Zamorano", "Zanetti Grana Padano", "Zanetti Parmigiano Reggiano"
+    };
+
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Item.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Item.java
new file mode 100644
index 000000000..77ed850d6
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/Item.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import auto.parcel.AutoParcel;
+import android.os.Parcelable;
+import android.support.annotation.Nullable;
+
+@AutoParcel
+public abstract class Item implements Parcelable {
+    @Nullable
+    public abstract String icon();
+    @Nullable
+    public abstract String text1();
+
+    @AutoParcel.Builder
+    public abstract static class Builder {
+        public abstract Builder icon(String s);
+        public abstract Builder text1(String s);
+        public abstract Item build();
+    }
+
+    public static Builder builder() {
+        return new AutoParcel_Item.Builder();
+    }
+
+    public abstract Builder toBuilder();
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListFragment.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListFragment.java
new file mode 100644
index 000000000..376d29452
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListFragment.java
@@ -0,0 +1,134 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.widget.TextViewCompat;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import com.bumptech.glide.Glide;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import butterknife.ButterKnife;
+import butterknife.InjectView;
+
+import rx.Observable;
+import rx.functions.*;
+
+import rx.android.app.*;
+
+public class ListFragment extends Fragment {
+    RecyclerView listView;
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        listView = (RecyclerView) inflater.inflate(R.layout.fragment_list, container, false);
+
+        listAdapter = ListRecyclerAdapter.create();
+        listAdapter.createViewHolder(new Func2<ViewGroup, Integer, ItemViewHolder>() {
+            @Override
+            public ItemViewHolder call(ViewGroup parent, Integer position) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item, parent, false);
+
+                /*
+                TypedValue typedValue = new TypedValue();
+                parent.getContext().getTheme().resolveAttribute(R.attr.selectableItemBackground, typedValue, true);
+                view.setBackgroundResource(typedValue.resourceId);
+                */
+
+                return new ItemViewHolder(view);
+            }
+        });
+        listView.setLayoutManager(new LinearLayoutManager(listView.getContext()));
+        listView.setAdapter(listAdapter);
+
+        return listView;
+    }
+
+    @Override
+    public void setUserVisibleHint(boolean isVisibleToUser) {
+        if (isVisibleToUser) {
+            items.toList().subscribe(list -> {
+                listAdapter.getList().clear();
+                listAdapter.getList().addAll(list);
+                listAdapter.notifyDataSetChanged();
+            });
+        }
+    }
+
+    private ListRecyclerAdapter<Item, ItemViewHolder> listAdapter;
+    Observable<Item> items;
+
+    public ListFragment items(Observable<Item> items) {
+        this.items = items;
+        return this;
+    }
+
+    public static ListFragment create() {
+        return new ListFragment();
+    }
+
+    public static class ItemViewHolder extends BindViewHolder<Item> {
+        @InjectView(R.id.icon)
+        ImageView icon;
+        @InjectView(R.id.text1)
+        TextView text1;
+
+        public ItemViewHolder(View itemView) {
+            super(itemView);
+            ButterKnife.inject(this, itemView);
+        };
+
+        @Override
+        public void onBind(int position, Item item) {
+            if (!android.text.TextUtils.isEmpty(item.text1())) text1.setText(item.text1());
+
+            if (!android.text.TextUtils.isEmpty(item.icon())) {
+                Glide.with(itemView.getContext())
+                    .load(item.icon())
+                    .fitCenter()
+                    .into(icon);
+            }
+
+            itemView.setOnClickListener(new View.OnClickListener() {
+                @Override
+                public void onClick(View v) {
+                    Context context = v.getContext();
+                    Intent intent = new Intent(context, CheeseDetailActivity.class);
+                    if (!android.text.TextUtils.isEmpty(item.text1())) intent.putExtra(CheeseDetailActivity.EXTRA_NAME, item.text1());
+
+                    context.startActivity(intent);
+                }
+            });
+        }
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListRecyclerAdapter.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListRecyclerAdapter.java
new file mode 100644
index 000000000..3df89c35e
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/ListRecyclerAdapter.java
@@ -0,0 +1,78 @@
+package com.github.retrofit2.app;
+
+import android.view.View;
+import android.view.ViewGroup;
+import android.support.v7.widget.RecyclerView;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import rx.functions.*;
+
+public class ListRecyclerAdapter<T, VH extends BindViewHolder<T>> extends RecyclerView.Adapter<VH> {
+    private List<T> mList = Collections.emptyList();
+    protected Action3<VH, Integer, T> mOnBindViewHolder;
+    protected Func2<ViewGroup, Integer, VH> mOnCreateViewHolder;
+
+    public ListRecyclerAdapter(List<T> list) {
+        mList = list;
+    }
+
+    public static <R, VHH extends BindViewHolder<R>> ListRecyclerAdapter<R, VHH> create() {
+        return create(new ArrayList<R>());
+    }
+
+    public static <R, VHH extends BindViewHolder<R>> ListRecyclerAdapter<R, VHH> create(List<R> list) {
+        return new ListRecyclerAdapter<>(list);
+    }
+
+    @Override
+    public VH onCreateViewHolder(ViewGroup parent, int viewType) {
+        if (mOnCreateViewHolder != null) return mOnCreateViewHolder.call(parent, viewType);
+        return null;
+    }
+
+    protected ListRecyclerAdapter<T, VH> createViewHolder(Func2<ViewGroup, Integer, VH> onCreateViewHolder) {
+        mOnCreateViewHolder = onCreateViewHolder;
+        return this;
+    }
+
+    private boolean onBindViewHolderSupered;
+
+    @Override
+    public void onBindViewHolder(VH viewHolder, int position) { // final, DO NOT Override until certainly
+        onBindViewHolderSupered = false;
+        onBindViewHolder(viewHolder, position, mList.get(position));
+        if (!onBindViewHolderSupered) throw new IllegalArgumentException("super.onBindViewHolder() not be called");
+    }
+
+    // super me
+    public void onBindViewHolder(VH viewHolder, int position, T item) { // final, DO NOT Override until certainly
+        onBindViewHolderSupered = true;
+        if (mOnBindViewHolder == null) {
+            mOnBindViewHolder = new Action3<VH, Integer, T>() {
+                @Override
+                public void call(VH vh, Integer i, T t) {
+                    vh.onBind(i, t);
+                }
+            };
+        }
+        mOnBindViewHolder.call(viewHolder, position, item);
+    }
+
+    public ListRecyclerAdapter<T, VH> bindViewHolder(Action3<VH, Integer, T> onBindViewHolder) {
+        mOnBindViewHolder = onBindViewHolder;
+        return this;
+    }
+
+    @Override
+    public int getItemCount() {
+        int i = mList.size();
+        return i;
+    }
+
+    public List<T> getList() {
+        return mList;
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MainActivity.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MainActivity.java
new file mode 100644
index 000000000..2b7b7d106
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MainActivity.java
@@ -0,0 +1,287 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.os.Bundle;
+import android.support.design.widget.FloatingActionButton;
+import android.support.design.widget.NavigationView;
+import android.support.design.widget.Snackbar;
+import android.support.design.widget.TabLayout;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentPagerAdapter;
+import android.support.v4.view.GravityCompat;
+import android.support.v4.view.ViewPager;
+import android.support.v4.widget.DrawerLayout;
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.text.TextUtils;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Toast;
+import android.content.Intent;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import rx.Observable;
+import rx.functions.*;
+
+import com.github.retrofit2.*;
+
+import butterknife.InjectView;
+import butterknife.ButterKnife;
+import java.net.URLEncoder;
+
+public class MainActivity extends AppCompatActivity {
+
+    private DrawerLayout mDrawerLayout;
+
+    private GitHub github;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        ButterKnife.inject(this);
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+        final ActionBar ab = getSupportActionBar();
+        ab.setHomeAsUpIndicator(R.drawable.ic_menu);
+        ab.setDisplayHomeAsUpEnabled(true);
+
+        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);
+
+        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
+        if (navigationView != null) {
+            setupDrawerContent(navigationView);
+        }
+
+        ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);
+        if (viewPager != null) {
+            setupViewPager(viewPager);
+        }
+
+        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
+        fab.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                Snackbar.make(view, "Here's a Snackbar", Snackbar.LENGTH_LONG)
+                        .setAction("Action", null).show();
+            }
+        });
+
+        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
+        tabLayout.setupWithViewPager(viewPager);
+
+        github = GitHub.create();
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.sample_actions, menu);
+        return true;
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            case android.R.id.home:
+                mDrawerLayout.openDrawer(GravityCompat.START);
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+
+
+    private void setupViewPager(ViewPager viewPager) {
+        Adapter adapter = new Adapter(getSupportFragmentManager());
+        setupAdapter(adapter);
+        viewPager.setAdapter(adapter);
+    }
+
+    private void setupAdapter(Adapter adapter) {
+        adapter.fragments.add(FragmentPage.create().title("yongjhih").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.repositories("yongjhih").take(1280).toSortedList((a, b) -> {
+                    return b.stargazers_count - a.stargazers_count;
+                }).flatMap(list -> Observable.from(list)).map(repo -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(repo.owner.avatar_url);
+                    card.text1 = Observable.just(repo.name);
+                    card.message = Observable.just(repo.description);
+                    card.likeCount = Observable.just(repo.stargazers_count);
+                    card.commentCount = Observable.just(repo.forks_count);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("yongjhih/retrofit2").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.contributors("yongjhih", "retrofit2").take(1280).map(contributor -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(contributor.avatar_url);
+                    card.text1 = Observable.just(contributor.login);
+                    card.message = Observable.just(contributor.login);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("8tory").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.orgRepositories("8tory").take(1280).toSortedList((a, b) -> {
+                    return b.stargazers_count - a.stargazers_count;
+                }).flatMap(list -> Observable.from(list)).map(repo -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(repo.owner.avatar_url);
+                    card.text1 = Observable.just(repo.name);
+                    card.message = Observable.just(repo.description);
+                    card.likeCount = Observable.just(repo.stargazers_count);
+                    card.commentCount = Observable.just(repo.forks_count);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("8tory/json2notification").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.contributors("8tory", "json2notification").take(1280).map(contributor -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(contributor.avatar_url);
+                    card.text1 = Observable.just(contributor.login);
+                    card.message = Observable.just(contributor.login);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("yongjhih/RetroFacebook").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.contributors("yongjhih", "RetroFacebook").take(1280).map(contributor -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(contributor.avatar_url);
+                    card.text1 = Observable.just(contributor.login);
+                    card.message = Observable.just(contributor.login);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("yongjhih/proguard-annotations").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.contributors("yongjhih", "proguard-annotations").take(1280).map(contributor -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(contributor.avatar_url);
+                    card.text1 = Observable.just(contributor.login);
+                    card.message = Observable.just(contributor.login);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+        adapter.fragments.add(FragmentPage.create().title("yongjhih/RxParse").fragment(() -> {
+            return RxCardsFragment.create()
+                .items(Observable.defer(() -> github.contributors("yongjhih", "RxParse").take(1280).map(contributor -> {
+                    RxCard card = new RxCard();
+                    card.icon = Observable.just(contributor.avatar_url);
+                    card.text1 = Observable.just(contributor.login);
+                    card.message = Observable.just(contributor.login);
+                    //card.image = Observable.just(contributor.originalPic());
+                    return card;
+                })));
+        }));
+    }
+
+    private void setupDrawerContent(NavigationView navigationView) {
+        navigationView.setNavigationItemSelectedListener(
+                new NavigationView.OnNavigationItemSelectedListener() {
+            @Override
+            public boolean onNavigationItemSelected(MenuItem menuItem) {
+                menuItem.setChecked(true);
+                mDrawerLayout.closeDrawers();
+                return true;
+            }
+        });
+    }
+
+    static class FragmentPage {
+        Func0<Fragment> onFragment;
+        Fragment fragment;
+        String title;
+
+        public Fragment fragment() {
+            if (fragment == null) fragment = onFragment.call();
+            return fragment;
+        }
+
+        public String title() {
+            return title;
+        }
+
+        public FragmentPage fragment(Func0<Fragment> onFragment) {
+            this.onFragment = onFragment;
+            return this;
+        }
+
+        public FragmentPage title(String title) {
+            this.title = title;
+            return this;
+        }
+
+        public static FragmentPage create() {
+            return new FragmentPage();
+        }
+
+    }
+
+    static class Adapter extends FragmentPagerAdapter {
+        public List<FragmentPage> fragments = new ArrayList<>(); // NOTICE: memleak
+
+        public Adapter(FragmentManager fm) {
+            super(fm);
+        }
+
+        @Override
+        public Fragment getItem(int position) {
+            return fragments.get(position).fragment();
+        }
+
+        @Override
+        public int getCount() {
+            return fragments.size();
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            return fragments.get(position).title();
+        }
+
+        @Override
+        public int getItemPosition(Object object) {
+            return FragmentPagerAdapter.POSITION_NONE;
+        }
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        //github.onActivityResult(requestCode, resultCode, data);
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MeasuredLinearLayoutManager.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MeasuredLinearLayoutManager.java
new file mode 100644
index 000000000..a09fe47a7
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/MeasuredLinearLayoutManager.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Context;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.view.View;
+import android.view.ViewGroup;
+
+public class MeasuredLinearLayoutManager extends LinearLayoutManager {
+    public MeasuredLinearLayoutManager(Context context) {
+        super(context);
+    }
+
+    public MeasuredLinearLayoutManager(Context context, int orientation, boolean reverseLayout) {
+        super(context, orientation, reverseLayout);
+    }
+
+    private int[] mMeasuredDimension = new int[2];
+
+    @Override
+    public void onMeasure(RecyclerView.Recycler recycler, RecyclerView.State state,
+            int widthSpec, int heightSpec) {
+        final int widthMode = View.MeasureSpec.getMode(widthSpec);
+        final int heightMode = View.MeasureSpec.getMode(heightSpec);
+        final int widthSize = View.MeasureSpec.getSize(widthSpec);
+        final int heightSize = View.MeasureSpec.getSize(heightSpec);
+        int width = 0;
+        int height = 0;
+        for (int i = 0; i < getItemCount(); i++) {
+            try {
+                measureScrapChild(recycler, i,
+                        View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
+                        View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
+                        mMeasuredDimension);
+            } catch (IndexOutOfBoundsException e) { // will throw with OperatorTick and animation
+                //e.printStackTrace();
+            }
+
+            if (getOrientation() == HORIZONTAL) {
+                width = width + mMeasuredDimension[0];
+                if (i == 0) {
+                    height = mMeasuredDimension[1];
+                }
+            } else {
+                height = height + mMeasuredDimension[1];
+                if (i == 0) {
+                    width = mMeasuredDimension[0];
+                }
+            }
+        }
+        switch (widthMode) {
+            case View.MeasureSpec.EXACTLY:
+                width = widthSize;
+            case View.MeasureSpec.AT_MOST:
+            case View.MeasureSpec.UNSPECIFIED:
+        }
+
+        switch (heightMode) {
+            case View.MeasureSpec.EXACTLY:
+                height = heightSize;
+            case View.MeasureSpec.AT_MOST:
+            case View.MeasureSpec.UNSPECIFIED:
+        }
+
+        setMeasuredDimension(width, height);
+    }
+
+    private void measureScrapChild(RecyclerView.Recycler recycler, int position, int widthSpec,
+            int heightSpec, int[] measuredDimension) {
+        View view = recycler.getViewForPosition(position);
+        if (view != null) {
+            RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();
+            int childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,
+                    getPaddingLeft() + getPaddingRight(), p.width);
+            int childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,
+                    getPaddingTop() + getPaddingBottom(), p.height);
+            view.measure(childWidthSpec, childHeightSpec);
+            measuredDimension[0] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;
+            measuredDimension[1] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;
+            recycler.recycleView(view);
+        }
+    }
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCard.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCard.java
new file mode 100644
index 000000000..d58b2f187
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCard.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.support.annotation.Nullable;
+
+import rx.Observable;
+import rx.functions.*;
+
+public class RxCard {
+    @Nullable
+    public Observable<String> icon = Observable.empty();
+    @Nullable
+    public Observable<String> text1 = Observable.empty();
+    @Nullable
+    public Observable<String> message = Observable.empty();
+    @Nullable
+    public Observable<String> image = Observable.empty();
+    @Nullable
+    public Observable<Boolean> liked = Observable.empty();
+    @Nullable
+    public Observable<Integer> likeCount = Observable.empty();
+    @Nullable
+    public Observable<Integer> commentCount = Observable.empty();
+}
diff --git a/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCardsFragment.java b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCardsFragment.java
new file mode 100644
index 000000000..c8086e4e8
--- /dev/null
+++ b/retrofit2-github-app/src/main/java/com/github/retrofit2/app/RxCardsFragment.java
@@ -0,0 +1,275 @@
+/*
+ * Copyright (C) 2015 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.github.retrofit2.app;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.support.v4.widget.TextViewCompat;
+import android.support.v7.widget.LinearLayoutManager;
+import android.support.v7.widget.RecyclerView;
+import android.util.TypedValue;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+import android.widget.EditText;
+
+import com.bumptech.glide.Glide;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+import butterknife.ButterKnife;
+import butterknife.InjectView;
+
+import rx.Observable;
+import rx.Subscription;
+import rx.functions.*;
+import rx.subjects.*;
+
+import rx.android.app.*;
+import rx.android.view.ViewObservable;
+
+import android.support.v4.widget.SwipeRefreshLayout;
+import android.support.v7.widget.CardView;
+
+public class RxCardsFragment extends Fragment {
+    @InjectView(R.id.list)
+    RecyclerView listView;
+    @InjectView(R.id.refresh)
+    SwipeRefreshLayout refreshView;
+
+    //Subject<View, View> viewSubject = PublishSubject.create();
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view = inflater.inflate(R.layout.fragment_list_swipe, container, false);
+        ButterKnife.inject(this, view);
+        //viewSubject.onNext(view);
+
+        listAdapter = ListRecyclerAdapter.create();
+        listAdapter.createViewHolder(new Func2<ViewGroup, Integer, CardViewHolder>() {
+            @Override
+            public CardViewHolder call(ViewGroup parent, Integer position) {
+                View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_card, parent, false);
+
+                /*
+                TypedValue typedValue = new TypedValue();
+                parent.getContext().getTheme().resolveAttribute(R.attr.selectableItemBackground, typedValue, true);
+                view.setBackgroundResource(typedValue.resourceId);
+                */
+
+                return new CardViewHolder(view);
+            }
+        });
+
+        listView.setLayoutManager(new LinearLayoutManager(listView.getContext()));
+        listView.setAdapter(listAdapter);
+
+        refreshView.setOnRefreshListener(() -> {
+            load();
+        });
+
+        return view;
+    }
+
+    @Override
+    public void setUserVisibleHint(boolean isVisibleToUser) {
+        if (isVisibleToUser) {
+            //if (refreshView == null) {
+                //viewSubject.asObservable().subscribe(v -> load()); // FIXME onDestoryView unsubscribe subscription?
+            //} else {
+                load();
+            //}
+        }
+    }
+
+    public Subscription load() {
+        if (refreshView != null) refreshView.setRefreshing(true);
+        return AppObservable.bindFragment(RxCardsFragment.this, items).toList().subscribe(list -> {
+            android.util.Log.d("RetroWeibo", "list: " + list);
+            android.util.Log.d("RetroWeibo", "list.size(): " + list.size());
+            listAdapter.getList().clear();
+            listAdapter.getList().addAll(list);
+            listAdapter.notifyDataSetChanged();
+        }, e -> {}, () -> {
+            refreshView.setRefreshing(false);
+        });
+    }
+
+    private ListRecyclerAdapter<RxCard, CardViewHolder> listAdapter;
+    Observable<RxCard> items;
+
+    public RxCardsFragment items(Observable<RxCard> items) {
+        this.items = items;
+
+        return this;
+    }
+
+    public static RxCardsFragment create() {
+        return new RxCardsFragment();
+    }
+
+    public static class CardViewHolder extends BindViewHolder<RxCard> {
+        @InjectView(R.id.icon)
+        ImageView icon;
+        @InjectView(R.id.text1)
+        TextView text1;
+        @InjectView(R.id.message)
+        TextView message;
+        @InjectView(R.id.imageCard)
+        CardView imageCard;
+        @InjectView(R.id.image)
+        ImageView image;
+        @InjectView(R.id.comments)
+        RecyclerView commentsView;
+        @InjectView(R.id.likeCount)
+        TextView likeCountView;
+        @InjectView(R.id.like)
+        ImageView likeView;
+        @InjectView(R.id.comment)
+        ImageView commentView;
+        @InjectView(R.id.commentCount)
+        TextView commentCountView;
+        @InjectView(R.id.comment_avatar)
+        ImageView commentAvatar;
+        @InjectView(R.id.comment_edit)
+        EditText commentEdit;
+        @InjectView(R.id.send)
+        ImageView sendView;
+
+        ListRecyclerAdapter<String, CommentViewHolder> commentsAdapter;
+        boolean liked;
+        int likeCount;
+        int commentCount;
+
+        public CardViewHolder(View itemView) {
+            super(itemView);
+            ButterKnife.inject(this, itemView);
+
+            commentsAdapter = ListRecyclerAdapter.create();
+            commentsAdapter.createViewHolder(new Func2<ViewGroup, Integer, CommentViewHolder>() {
+                @Override
+                public CommentViewHolder call(ViewGroup parent, Integer position) {
+                    View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.item_comment, parent, false);
+
+                    return new CommentViewHolder(view);
+                }
+            });
+
+            commentsView.setLayoutManager(new MeasuredLinearLayoutManager(commentsView.getContext()));
+            commentsView.setAdapter(commentsAdapter);
+        }
+
+        @Override
+        public void onBind(int position, RxCard item) {
+            icon.setVisibility(View.GONE);
+            ViewObservable.bindView(icon, item.icon).filter(url -> !android.text.TextUtils.isEmpty(url)).subscribe(url -> {
+                icon.setVisibility(View.VISIBLE);
+                Glide.with(itemView.getContext())
+                    .load(url)
+                    .fitCenter()
+                    .into(icon);
+            });
+
+            itemView.setOnClickListener(v -> {}); // clear
+            ViewObservable.bindView(text1, item.text1)
+                .filter(name -> !android.text.TextUtils.isEmpty(name))
+                .subscribe(name -> {
+                    text1.setText(name);
+
+                    itemView.setOnClickListener(v -> {
+                        Context context = v.getContext();
+                        Intent intent = new Intent(context, CheeseDetailActivity.class);
+
+                        if (!android.text.TextUtils.isEmpty(name)) intent.putExtra(CheeseDetailActivity.EXTRA_NAME, name);
+
+                        context.startActivity(intent);
+                    });
+                });
+
+            ViewObservable.bindView(message, item.message)
+                .filter(s -> !android.text.TextUtils.isEmpty(s))
+                .subscribe(s -> message.setText(s));
+
+            image.setVisibility(View.GONE);
+            imageCard.setVisibility(View.GONE);
+            ViewObservable.bindView(image, item.image).filter(url -> !android.text.TextUtils.isEmpty(url)).subscribe(url -> {
+                image.setVisibility(View.VISIBLE);
+                imageCard.setVisibility(View.VISIBLE);
+                Glide.with(itemView.getContext())
+                    .load(url)
+                    .fitCenter()
+                    .into(image);
+            });
+
+            likeCount = 0;
+            likeCountView.setText("" + likeCount); // clear
+            ViewObservable.bindView(likeCountView, item.likeCount).subscribe(i -> {
+                likeCount = i;
+                likeCountView.setText("" + likeCount);
+            });
+
+            commentCount = 0;
+            commentCountView.setText("" + commentCount); // clear
+            ViewObservable.bindView(commentCountView, item.commentCount).subscribe(i -> {
+                commentCount = i;
+                commentCountView.setText("" + commentCount);
+            });
+
+            liked = false;
+            likeView.setOnClickListener(v -> {}); // clear
+            Glide.with(itemView.getContext())
+                .load(R.drawable.ic_thumb_up_outline)
+                .fitCenter()
+                .into(likeView);
+
+            commentsView.setVisibility(View.GONE);
+            commentsAdapter.getList().clear();
+        }
+    }
+
+    public static class CommentViewHolder extends BindViewHolder<String> {
+        @InjectView(R.id.icon)
+        ImageView icon;
+        @InjectView(R.id.text1)
+        TextView text1;
+        @InjectView(R.id.like)
+        ImageView likeView;
+        @InjectView(R.id.likes)
+        TextView likes;
+
+        public CommentViewHolder(View itemView) {
+            super(itemView);
+            ButterKnife.inject(this, itemView);
+        }
+
+        boolean liked;
+        int likeCount;
+
+        @Override
+        public void onBind(int position, String item) {
+        }
+    }
+}
+
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment.png
new file mode 100644
index 000000000..130766b53
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment_outline.png
new file mode 100644
index 000000000..aa645666d
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_dashboard.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_dashboard.png
new file mode 100644
index 000000000..6aef19629
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_dashboard.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_discuss.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_discuss.png
new file mode 100644
index 000000000..dc9341cea
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_discuss.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_done.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_done.png
new file mode 100644
index 000000000..c26640d36
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_done.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_event.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_event.png
new file mode 100644
index 000000000..70f281f0c
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_event.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_forum.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_forum.png
new file mode 100644
index 000000000..24d01be88
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_forum.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_headset.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_headset.png
new file mode 100644
index 000000000..fbbcc1d4f
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_headset.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_menu.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_menu.png
new file mode 100644
index 000000000..8962cbd91
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_menu.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_send.png
new file mode 100644
index 000000000..71b41c923
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up.png
new file mode 100644
index 000000000..02f781571
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..2e75ed085
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-hdpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment.png
new file mode 100644
index 000000000..cbc6b099b
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment_outline.png
new file mode 100644
index 000000000..1dc1908ca
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-ldpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_send.png
new file mode 100644
index 000000000..bec464561
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up.png
new file mode 100644
index 000000000..18fad7590
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..f48237435
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-ldpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment.png
new file mode 100644
index 000000000..1a6266fb6
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment_outline.png
new file mode 100644
index 000000000..573544d19
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_dashboard.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_dashboard.png
new file mode 100644
index 000000000..c4288e5a7
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_dashboard.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_discuss.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_discuss.png
new file mode 100644
index 000000000..6979bbe5b
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_discuss.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_done.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_done.png
new file mode 100644
index 000000000..ba9cf0634
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_done.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_event.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_event.png
new file mode 100644
index 000000000..dd23be04b
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_event.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_forum.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_forum.png
new file mode 100644
index 000000000..bdc899577
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_forum.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_headset.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_headset.png
new file mode 100644
index 000000000..833084412
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_headset.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_menu.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_menu.png
new file mode 100644
index 000000000..c62db8c86
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_menu.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_send.png
new file mode 100644
index 000000000..56d747407
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up.png
new file mode 100644
index 000000000..1d5a101a0
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..6144f4409
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-mdpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment.png
new file mode 100644
index 000000000..9e6cacefb
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment_outline.png
new file mode 100644
index 000000000..3acca278c
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_dashboard.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_dashboard.png
new file mode 100644
index 000000000..cc100a64c
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_dashboard.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_discuss.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_discuss.png
new file mode 100644
index 000000000..8eedc8a38
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_discuss.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_done.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_done.png
new file mode 100644
index 000000000..1f4846cbe
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_done.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_event.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_event.png
new file mode 100644
index 000000000..348a80587
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_event.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_forum.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_forum.png
new file mode 100644
index 000000000..28759b6eb
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_forum.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_headset.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_headset.png
new file mode 100644
index 000000000..a09aa7a18
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_headset.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_menu.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_menu.png
new file mode 100644
index 000000000..36859f094
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_menu.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_send.png
new file mode 100644
index 000000000..af0e84847
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up.png
new file mode 100644
index 000000000..c8cdff1c9
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..976505be3
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_unknown_avatar.png b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_unknown_avatar.png
new file mode 100644
index 000000000..c7d631ec0
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xhdpi/ic_unknown_avatar.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment.png
new file mode 100644
index 000000000..f4e3e75bd
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment_outline.png
new file mode 100644
index 000000000..ac8b89b9e
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_dashboard.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_dashboard.png
new file mode 100644
index 000000000..f6d0a0dbc
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_dashboard.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_discuss.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_discuss.png
new file mode 100644
index 000000000..e1d812bb5
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_discuss.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_done.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_done.png
new file mode 100644
index 000000000..699d0b2c4
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_done.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_event.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_event.png
new file mode 100644
index 000000000..efbe8f76a
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_event.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_forum.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_forum.png
new file mode 100644
index 000000000..8f50781b8
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_forum.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_headset.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_headset.png
new file mode 100644
index 000000000..53169d967
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_headset.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_menu.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_menu.png
new file mode 100644
index 000000000..1a5109828
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_menu.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_send.png
new file mode 100644
index 000000000..dc79f3469
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up.png
new file mode 100644
index 000000000..fbd132baf
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..8c4084e99
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxhdpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment.png
new file mode 100644
index 000000000..19c8684dc
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment_outline.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment_outline.png
new file mode 100644
index 000000000..d163bec1c
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_comment_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_done.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_done.png
new file mode 100644
index 000000000..bf5bc7e09
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_done.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_menu.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_menu.png
new file mode 100644
index 000000000..c15d63467
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_menu.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_send.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_send.png
new file mode 100644
index 000000000..ae1f2d3dc
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_send.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up.png
new file mode 100644
index 000000000..309862d93
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up_outline.png b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up_outline.png
new file mode 100644
index 000000000..b58c465d1
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable-xxxhdpi/ic_thumb_up_outline.png differ
diff --git a/retrofit2-github-app/src/main/res/drawable/cheese_1.jpg b/retrofit2-github-app/src/main/res/drawable/cheese_1.jpg
new file mode 100644
index 000000000..65be51c6b
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable/cheese_1.jpg differ
diff --git a/retrofit2-github-app/src/main/res/drawable/cheese_2.jpg b/retrofit2-github-app/src/main/res/drawable/cheese_2.jpg
new file mode 100644
index 000000000..ae83e1ac6
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable/cheese_2.jpg differ
diff --git a/retrofit2-github-app/src/main/res/drawable/cheese_3.jpg b/retrofit2-github-app/src/main/res/drawable/cheese_3.jpg
new file mode 100644
index 000000000..362ef3874
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable/cheese_3.jpg differ
diff --git a/retrofit2-github-app/src/main/res/drawable/cheese_4.jpg b/retrofit2-github-app/src/main/res/drawable/cheese_4.jpg
new file mode 100644
index 000000000..052ef4c72
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable/cheese_4.jpg differ
diff --git a/retrofit2-github-app/src/main/res/drawable/cheese_5.jpg b/retrofit2-github-app/src/main/res/drawable/cheese_5.jpg
new file mode 100644
index 000000000..137a7f3a1
Binary files /dev/null and b/retrofit2-github-app/src/main/res/drawable/cheese_5.jpg differ
diff --git a/retrofit2-github-app/src/main/res/layout/activity_detail.xml b/retrofit2-github-app/src/main/res/layout/activity_detail.xml
new file mode 100644
index 000000000..d767d4c04
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/activity_detail.xml
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/main_content"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:fitsSystemWindows="true">
+
+    <android.support.design.widget.AppBarLayout
+        android:id="@+id/appbar"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/detail_backdrop_height"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        android:fitsSystemWindows="true">
+
+        <android.support.design.widget.CollapsingToolbarLayout
+            android:id="@+id/collapsing_toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            app:layout_scrollFlags="scroll|exitUntilCollapsed"
+            android:fitsSystemWindows="true"
+            app:contentScrim="?attr/colorPrimary"
+            app:expandedTitleMarginStart="48dp"
+            app:expandedTitleMarginEnd="64dp">
+
+            <ImageView
+                android:id="@+id/backdrop"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:scaleType="centerCrop"
+                android:fitsSystemWindows="true"
+                app:layout_collapseMode="parallax" />
+
+            <android.support.v7.widget.Toolbar
+                android:id="@+id/toolbar"
+                android:layout_width="match_parent"
+                android:layout_height="?attr/actionBarSize"
+                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+                app:layout_collapseMode="pin" />
+
+        </android.support.design.widget.CollapsingToolbarLayout>
+
+    </android.support.design.widget.AppBarLayout>
+
+    <android.support.v7.widget.RecyclerView
+        android:id="@+id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior" />
+
+    <android.support.design.widget.FloatingActionButton
+        android:layout_height="wrap_content"
+        android:layout_width="wrap_content"
+        app:layout_anchor="@id/appbar"
+        app:layout_anchorGravity="bottom|right|end"
+        android:src="@drawable/ic_discuss"
+        android:layout_margin="@dimen/fab_margin"
+        android:clickable="true"/>
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/retrofit2-github-app/src/main/res/layout/activity_main.xml b/retrofit2-github-app/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..c6328acd0
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/activity_main.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/drawer_layout"
+    android:layout_height="match_parent"
+    android:layout_width="match_parent"
+    android:fitsSystemWindows="true">
+
+    <include layout="@layout/include_list_viewpager"/>
+
+    <android.support.design.widget.NavigationView
+        android:id="@+id/nav_view"
+        android:layout_height="match_parent"
+        android:layout_width="wrap_content"
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true"
+        app:headerLayout="@layout/nav_header"
+        app:menu="@menu/drawer_view"/>
+
+</android.support.v4.widget.DrawerLayout>
\ No newline at end of file
diff --git a/retrofit2-github-app/src/main/res/layout/fragment_cheese_list.xml b/retrofit2-github-app/src/main/res/layout/fragment_cheese_list.xml
new file mode 100644
index 000000000..20b4c2e7b
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/fragment_cheese_list.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<android.support.v7.widget.RecyclerView xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/recyclerview"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
\ No newline at end of file
diff --git a/retrofit2-github-app/src/main/res/layout/fragment_list.xml b/retrofit2-github-app/src/main/res/layout/fragment_list.xml
new file mode 100644
index 000000000..f0cd2edc2
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/fragment_list.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<android.support.v7.widget.RecyclerView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/list"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
diff --git a/retrofit2-github-app/src/main/res/layout/fragment_list_swipe.xml b/retrofit2-github-app/src/main/res/layout/fragment_list_swipe.xml
new file mode 100644
index 000000000..bb7201198
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/fragment_list_swipe.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<!--<RelativeLayout-->
+    <!--xmlns:android="http://schemas.android.com/apk/res/android"-->
+    <!--android:layout_width="match_parent"-->
+    <!--android:layout_height="match_parent"-->
+    <!-->-->
+    <android.support.v4.widget.SwipeRefreshLayout
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:id="@+id/refresh"
+        >
+        <android.support.v7.widget.RecyclerView
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:id="@+id/list"
+            />
+    </android.support.v4.widget.SwipeRefreshLayout>
+<!--</RelativeLayout>-->
diff --git a/retrofit2-github-app/src/main/res/layout/include_list_viewpager.xml b/retrofit2-github-app/src/main/res/layout/include_list_viewpager.xml
new file mode 100644
index 000000000..53205b6df
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/include_list_viewpager.xml
@@ -0,0 +1,62 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/main_content"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <android.support.design.widget.AppBarLayout
+        android:id="@+id/appbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+            app:layout_scrollFlags="scroll|enterAlways" />
+
+        <android.support.design.widget.TabLayout
+            android:id="@+id/tabs"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:tabMode="scrollable"
+            app:textAllCaps="false"
+            />
+
+    </android.support.design.widget.AppBarLayout>
+
+    <android.support.v4.view.ViewPager
+        android:id="@+id/viewpager"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_behavior="@string/appbar_scrolling_view_behavior" />
+
+    <android.support.design.widget.FloatingActionButton
+        android:id="@+id/fab"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="end|bottom"
+        android:layout_margin="@dimen/fab_margin"
+        android:src="@drawable/ic_done" />
+
+</android.support.design.widget.CoordinatorLayout>
diff --git a/retrofit2-github-app/src/main/res/layout/item_card.xml b/retrofit2-github-app/src/main/res/layout/item_card.xml
new file mode 100644
index 000000000..02e84a46d
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/item_card.xml
@@ -0,0 +1,228 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<android.support.v7.widget.CardView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="@dimen/card_margin"
+    >
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        >
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            style="@style/Widget.CardContent"
+            >
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingLeft="16dp"
+                android:paddingRight="16dp"
+                android:paddingTop="8dp"
+                android:paddingBottom="8dp"
+                android:gravity="center_vertical">
+
+                <de.hdodenhof.circleimageview.CircleImageView
+                    android:id="@+id/icon"
+                    android:layout_width="@dimen/list_item_avatar_size"
+                    android:layout_height="@dimen/list_item_avatar_size"
+                    android:layout_marginRight="16dp"/>
+
+                <TextView
+                    android:id="@+id/text1"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textAppearance="?attr/textAppearanceListItem"/>
+
+            </LinearLayout>
+
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/cheese_ipsum"
+                android:id="@+id/message"
+                android:layout_marginBottom="4dp"
+                />
+
+            <android.support.v7.widget.CardView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                app:cardElevation="3dp"
+                android:elevation="3dp"
+                app:cardCornerRadius="3dp"
+                android:id="@+id/imageCard"
+                >
+                <ImageView
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:scaleType="centerCrop"
+                    android:id="@+id/image"
+                    />
+            </android.support.v7.widget.CardView>
+
+            <!-- horizontal like count, comment count -->
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:layout_marginTop="2dp"
+                android:layout_marginBottom="2dp"
+                >
+                <ImageView
+                    android:layout_width="14dp"
+                    android:layout_height="14dp"
+                    android:src="@drawable/ic_thumb_up"
+                    />
+                <Space
+                    android:layout_width="2dp"
+                    android:layout_height="wrap_content"
+                    />
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="0"
+                    android:textSize="11sp"
+                    android:id="@+id/likeCount"
+                    />
+                <Space
+                    android:layout_width="12dp"
+                    android:layout_height="wrap_content"
+                    />
+                <ImageView
+                    android:layout_width="14dp"
+                    android:layout_height="14dp"
+                    android:src="@drawable/ic_comment"
+                    />
+                <Space
+                    android:layout_width="2dp"
+                    android:layout_height="wrap_content"
+                    />
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="132"
+                    android:textSize="11sp"
+                    android:id="@+id/commentCount"
+                    />
+            </LinearLayout>
+        </LinearLayout>
+
+        <!-- TODO horizontal buttons -->
+
+        <View
+            android:layout_width="match_parent"
+            android:layout_height="1px"
+            android:background="#3333"
+            />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:paddingTop="12dp"
+            android:paddingBottom="12dp"
+            android:paddingLeft="16dp"
+            android:paddingRight="16dp"
+            >
+            <ImageView
+                android:layout_width="24dp"
+                android:layout_height="24dp"
+                android:src="@drawable/ic_thumb_up_outline"
+                android:id="@+id/like"
+                />
+            <Space
+                android:layout_width="16dp"
+                android:layout_height="wrap_content"
+                />
+            <ImageView
+                android:layout_width="24dp"
+                android:layout_height="24dp"
+                android:src="@drawable/ic_comment_outline"
+                android:id="@+id/comment"
+                />
+        </LinearLayout>
+
+        <View
+            android:layout_width="match_parent"
+            android:layout_height="1px"
+            android:background="#3333"
+            />
+
+        <!-- comments with gray background -->
+
+        <android.support.v7.widget.RecyclerView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:id="@+id/comments"
+            />
+
+        <View
+            android:layout_width="match_parent"
+            android:layout_height="1px"
+            android:background="#3333"
+            />
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="horizontal"
+            android:background="#f3f3f3"
+            android:paddingTop="12dp"
+            android:paddingBottom="12dp"
+            android:paddingLeft="8dp"
+            android:paddingRight="8dp"
+            >
+            <de.hdodenhof.circleimageview.CircleImageView
+                android:id="@+id/comment_avatar"
+                android:layout_width="@dimen/list_item_avatar_size"
+                android:layout_height="@dimen/list_item_avatar_size"
+                />
+            <Space
+                android:layout_width="8dp"
+                android:layout_height="wrap_content"
+                />
+            <EditText
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_weight="1"
+                android:hint="Comment..."
+                android:id="@+id/comment_edit"
+                android:layout_gravity="center_vertical"
+                />
+            <Space
+                android:layout_width="8dp"
+                android:layout_height="wrap_content"
+                />
+            <ImageView
+                android:layout_width="24dp"
+                android:layout_height="24dp"
+                android:id="@+id/send"
+                android:src="@drawable/ic_send"
+                android:layout_gravity="center_vertical"
+                />
+        </LinearLayout>
+
+    </LinearLayout>
+</android.support.v7.widget.CardView>
diff --git a/retrofit2-github-app/src/main/res/layout/item_comment.xml b/retrofit2-github-app/src/main/res/layout/item_comment.xml
new file mode 100644
index 000000000..0fca1de8a
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/item_comment.xml
@@ -0,0 +1,133 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<!--<LinearLayout-->
+    <!--xmlns:android="http://schemas.android.com/apk/res/android"-->
+    <!--xmlns:app="http://schemas.android.com/apk/res-auto"-->
+    <!--android:layout_width="match_parent"-->
+    <!--android:layout_height="wrap_content"-->
+    <!--android:background="#f3f3f3"-->
+    <!-->-->
+
+    <!--<View-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="1px"-->
+        <!--android:background="#3333"-->
+        <!--/>-->
+
+    <!--<LinearLayout-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:padding="4dp"-->
+        <!--android:background="#f3f3f3"-->
+        <!-->-->
+
+        <!--<de.hdodenhof.circleimageview.CircleImageView-->
+            <!--android:layout_width="@dimen/list_item_avatar_size"-->
+            <!--android:layout_height="@dimen/list_item_avatar_size"-->
+            <!--android:layout_marginRight="16dp"-->
+            <!--android:src="@drawable/ic_unknown_avatar"-->
+            <!--android:id="@+id/icon"-->
+            <!--android:padding="8dp"-->
+            <!--/>-->
+
+        <!--<TextView-->
+            <!--android:layout_width="match_parent"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:layout_gravity="center_vertical"-->
+            <!--android:text="yo"-->
+            <!--android:id="@+id/text1"-->
+            <!--android:textAppearance="?attr/textAppearanceListItem"-->
+            <!--/>-->
+
+    <!--</LinearLayout>-->
+<!--</LinearLayout>-->
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:background="#f3f3f3"
+    >
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1px"
+        android:background="#3333"
+        />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="8dp"
+        android:paddingRight="8dp"
+        android:paddingTop="8dp"
+        android:paddingBottom="8dp"
+        android:orientation="horizontal"
+        >
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:layout_width="@dimen/list_item_avatar_size"
+            android:layout_height="@dimen/list_item_avatar_size"
+            android:src="@drawable/ic_unknown_avatar"
+            android:id="@+id/icon"
+            android:padding="8dp"
+            />
+
+        <Space
+            android:layout_width="16dp"
+            android:layout_height="wrap_content"
+            />
+
+        <TextView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:layout_gravity="center_vertical"
+            android:text="yo"
+            android:id="@+id/text1"
+            />
+
+        <Space
+            android:layout_width="16dp"
+            android:layout_height="wrap_content"
+            />
+
+        <ImageView
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:id="@+id/like"
+            android:layout_gravity="center_vertical"
+            android:src="@drawable/ic_thumb_up_outline"
+            />
+
+        <Space
+            android:layout_width="8dp"
+            android:layout_height="wrap_content"
+            />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/likes"
+            android:layout_gravity="center_vertical"
+            android:text="0"
+            />
+
+    </LinearLayout>
+</LinearLayout>
diff --git a/retrofit2-github-app/src/main/res/layout/item_post_card.xml b/retrofit2-github-app/src/main/res/layout/item_post_card.xml
new file mode 100644
index 000000000..c8f11a401
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/item_post_card.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<android.support.v7.widget.CardView
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="@dimen/card_margin">
+
+    <LinearLayout
+        style="@style/Widget.CardContent"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Info"
+            android:textAppearance="@style/TextAppearance.AppCompat.Title"
+            android:id="@+id/text1"
+            />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="@string/cheese_ipsum"
+            android:id="@+id/text2"
+            />
+
+    </LinearLayout>
+
+</android.support.v7.widget.CardView>
+
diff --git a/retrofit2-github-app/src/main/res/layout/list_item.xml b/retrofit2-github-app/src/main/res/layout/list_item.xml
new file mode 100644
index 000000000..55dcce6dd
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/list_item.xml
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:paddingLeft="16dp"
+    android:paddingRight="16dp"
+    android:paddingTop="8dp"
+    android:paddingBottom="8dp"
+    android:gravity="center_vertical">
+
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/icon"
+        android:layout_width="@dimen/list_item_avatar_size"
+        android:layout_height="@dimen/list_item_avatar_size"
+        android:layout_marginRight="16dp"/>
+
+    <TextView
+        android:id="@+id/text1"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="?attr/textAppearanceListItem"/>
+
+</LinearLayout>
diff --git a/retrofit2-github-app/src/main/res/layout/nav_header.xml b/retrofit2-github-app/src/main/res/layout/nav_header.xml
new file mode 100644
index 000000000..e3bdb2654
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/layout/nav_header.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="192dp"
+    android:background="?attr/colorPrimaryDark"
+    android:padding="16dp"
+    android:theme="@style/ThemeOverlay.AppCompat.Dark"
+    android:orientation="vertical"
+    android:gravity="bottom">
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Username"
+        android:textAppearance="@style/TextAppearance.AppCompat.Body1"/>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/retrofit2-github-app/src/main/res/menu/drawer_view.xml b/retrofit2-github-app/src/main/res/menu/drawer_view.xml
new file mode 100644
index 000000000..d89d6e1f8
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/menu/drawer_view.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<menu xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <group android:checkableBehavior="single">
+        <item
+            android:id="@+id/nav_home"
+            android:icon="@drawable/ic_dashboard"
+            android:title="Home" />
+        <item
+            android:id="@+id/nav_messages"
+            android:icon="@drawable/ic_event"
+            android:title="Messages" />
+        <item
+            android:id="@+id/nav_friends"
+            android:icon="@drawable/ic_headset"
+            android:title="Friends" />
+        <item
+            android:id="@+id/nav_discussion"
+            android:icon="@drawable/ic_forum"
+            android:title="Discussion" />
+    </group>
+
+    <item android:title="Sub items">
+        <menu>
+            <item
+                android:icon="@drawable/ic_dashboard"
+                android:title="Sub item 1" />
+            <item
+                android:icon="@drawable/ic_forum"
+                android:title="Sub item 2" />
+        </menu>
+    </item>
+
+</menu>
diff --git a/retrofit2-github-app/src/main/res/menu/sample_actions.xml b/retrofit2-github-app/src/main/res/menu/sample_actions.xml
new file mode 100644
index 000000000..6082477d4
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/menu/sample_actions.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/action_settings"
+        android:title="@string/menu_settings"
+        app:showAsAction="never" />
+</menu>
diff --git a/retrofit2-github-app/src/main/res/mipmap-hdpi/ic_launcher.png b/retrofit2-github-app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..35083490c
Binary files /dev/null and b/retrofit2-github-app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/retrofit2-github-app/src/main/res/mipmap-mdpi/ic_launcher.png b/retrofit2-github-app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..7f4d15748
Binary files /dev/null and b/retrofit2-github-app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/retrofit2-github-app/src/main/res/mipmap-xhdpi/ic_launcher.png b/retrofit2-github-app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..f494b9b61
Binary files /dev/null and b/retrofit2-github-app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/retrofit2-github-app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/retrofit2-github-app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..28298d625
Binary files /dev/null and b/retrofit2-github-app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/retrofit2-github-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/retrofit2-github-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..80825cf74
Binary files /dev/null and b/retrofit2-github-app/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/retrofit2-github-app/src/main/res/values-v21/styles.xml b/retrofit2-github-app/src/main/res/values-v21/styles.xml
new file mode 100644
index 000000000..0448552b4
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/values-v21/styles.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<resources>
+
+    <style name="Theme.App" parent="Base.Theme.App">
+        <item name="android:windowDrawsSystemBarBackgrounds">true</item>
+        <item name="android:statusBarColor">@android:color/transparent</item>
+    </style>
+
+</resources>
diff --git a/retrofit2-github-app/src/main/res/values/colors.xml b/retrofit2-github-app/src/main/res/values/colors.xml
new file mode 100644
index 000000000..f3d3e7675
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/values/colors.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<resources>
+    <color name="window_background">#FFF5F5F5</color>
+</resources>
\ No newline at end of file
diff --git a/retrofit2-github-app/src/main/res/values/dimens.xml b/retrofit2-github-app/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..bac1b2512
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/values/dimens.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<resources>
+    <dimen name="detail_backdrop_height">256dp</dimen>
+    <dimen name="card_margin">16dp</dimen>
+    <dimen name="fab_margin">16dp</dimen>
+    <dimen name="list_item_avatar_size">40dp</dimen>
+</resources>
\ No newline at end of file
diff --git a/retrofit2-github-app/src/main/res/values/strings.xml b/retrofit2-github-app/src/main/res/values/strings.xml
new file mode 100644
index 000000000..48b944447
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/values/strings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<resources>
+    <string name="app_name">RetroGithub</string>
+
+  <string name="cheese_ipsum">Jarlsberg lancashire edam. Dolcelatte hard cheese brie st. agur blue
+    cheese caerphilly bavarian bergkase cheese and biscuits mascarpone. Cheeseburger swiss bavarian
+    bergkase cream cheese fromage frais cheesy feet port-salut airedale. St. agur blue cheese rubber
+    cheese caerphilly cheddar cheesecake cream cheese manchego lancashire. Roquefort squirty cheese
+    the big cheese.</string>
+  <string name="checkin">Checkin</string>
+  <string name="menu_settings">Settings</string>
+
+</resources>
diff --git a/retrofit2-github-app/src/main/res/values/styles.xml b/retrofit2-github-app/src/main/res/values/styles.xml
new file mode 100644
index 000000000..981c555ee
--- /dev/null
+++ b/retrofit2-github-app/src/main/res/values/styles.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2015 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+-->
+
+<resources>
+
+    <style name="Theme.App" parent="Base.Theme.App">
+    </style>
+
+    <style name="Base.Theme.App" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+        <item name="android:windowBackground">@color/window_background</item>
+    </style>
+
+    <color name="colorPrimary">@color/colorMaterialDesignBlue</color>
+    <color name="colorPrimaryDark">@color/colorMaterialDesignBlue</color>
+    <color name="colorAccent">#FF4081</color>
+
+    <color name="colorMaterialDesignTeal500">#26A69A</color>
+    <color name="colorMaterialDesignCyan">#00BCD4</color>
+    <color name="colorMaterialDesignBlue">#1976D2</color>
+    <color name="colorMaterialDesignIndigo">#303F9F</color>
+
+
+    <style name="Widget.CardContent" parent="android:Widget">
+        <item name="android:paddingLeft">16dp</item>
+        <item name="android:paddingRight">16dp</item>
+        <item name="android:paddingTop">24dp</item>
+        <item name="android:paddingBottom">24dp</item>
+        <item name="android:orientation">vertical</item>
+    </style>
+
+</resources>
diff --git a/retrofit2-github/build.gradle b/retrofit2-github/build.gradle
new file mode 100644
index 000000000..972f48a31
--- /dev/null
+++ b/retrofit2-github/build.gradle
@@ -0,0 +1,59 @@
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.2.3'
+        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.4'
+    }
+}
+
+repositories {
+    jcenter()
+    maven { url "https://jitpack.io" }
+}
+
+apply plugin: 'com.android.library'
+apply plugin: 'com.neenbedankt.android-apt'
+
+android {
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
+
+    lintOptions {
+        abortOnError false
+    }
+}
+
+dependencies {
+    compile project(':retrofit')
+    apt project(':retrofit-processor')
+    compile 'io.reactivex:rxjava:1.0.9'
+    compile 'com.squareup.okhttp:okhttp:2.4.0'
+    //compile 'com.infstory:logansquare:1.1.1'
+    //apt 'com.infstory:logansquare-compiler:1.1.1'
+    apt 'com.bluelinelabs:logansquare-compiler:1.1.0'
+    compile 'com.bluelinelabs:logansquare:1.1.0'
+    //compile 'com.infstory:auto-json:1.0.2'
+    //apt 'com.infstory:auto-json-processor:1.0.2'
+    compile 'com.android.support:support-annotations:22.2.0'
+
+    compile 'com.squareup.retrofit:converter-jackson:1.9.0'
+    compile 'com.squareup.retrofit:retrofit:1.9.0'
+    compile 'com.google.code.gson:gson:2.3'
+
+    // testing
+    testCompile 'junit:junit-dep:4.10'
+    testCompile 'org.mockito:mockito-core:1.8.5'
+    testCompile('org.robolectric:robolectric:2.3') {
+      exclude group: 'com.android.support'
+    }
+}
+
+tasks.withType(Test) {
+    testLogging {
+        exceptionFormat "full"
+        events "passed", "skipped", "failed", "standardOut", "standardError"
+        showStandardStreams = true
+    }
+}
diff --git a/retrofit2-github/src/main/AndroidManifest.xml b/retrofit2-github/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..52ed7287c
--- /dev/null
+++ b/retrofit2-github/src/main/AndroidManifest.xml
@@ -0,0 +1,3 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.github.retrofit2" />
diff --git a/retrofit2-github/src/main/java/com/github/mobile/model/App.java b/retrofit2-github/src/main/java/com/github/mobile/model/App.java
new file mode 100644
index 000000000..d541a69d6
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/mobile/model/App.java
@@ -0,0 +1,75 @@
+package com.github.mobile.model;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class App {
+
+    private String name;
+    private String url;
+    private String clientId;
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The name
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     *
+     * @param name
+     * The name
+     */
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    /**
+     *
+     * @return
+     * The url
+     */
+    public String getUrl() {
+        return url;
+    }
+
+    /**
+     *
+     * @param url
+     * The url
+     */
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    /**
+     *
+     * @return
+     * The clientId
+     */
+    public String getClientId() {
+        return clientId;
+    }
+
+    /**
+     *
+     * @param clientId
+     * The client_id
+     */
+    public void setClientId(String clientId) {
+        this.clientId = clientId;
+    }
+
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/retrofit2-github/src/main/java/com/github/mobile/model/Authorization.java b/retrofit2-github/src/main/java/com/github/mobile/model/Authorization.java
new file mode 100644
index 000000000..217e89889
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/mobile/model/Authorization.java
@@ -0,0 +1,191 @@
+package com.github.mobile.model;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class Authorization {
+
+    private int id;
+    private String url;
+    private App app;
+    private String token;
+    private String note;
+    private Object noteUrl;
+    private String createdAt;
+    private String updatedAt;
+    private List<String> scopes = new ArrayList<>();
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The id
+     */
+    public int getId() {
+        return id;
+    }
+
+    /**
+     *
+     * @param id
+     * The id
+     */
+    public void setId(int id) {
+        this.id = id;
+    }
+
+    /**
+     *
+     * @return
+     * The url
+     */
+    public String getUrl() {
+        return url;
+    }
+
+    /**
+     *
+     * @param url
+     * The url
+     */
+    public void setUrl(String url) {
+        this.url = url;
+    }
+
+    /**
+     *
+     * @return
+     * The app
+     */
+    public App getApp() {
+        return app;
+    }
+
+    /**
+     *
+     * @param app
+     * The app
+     */
+    public void setApp(App app) {
+        this.app = app;
+    }
+
+    /**
+     *
+     * @return
+     * The token
+     */
+    public String getToken() {
+        return token;
+    }
+
+    /**
+     *
+     * @param token
+     * The token
+     */
+    public void setToken(String token) {
+        this.token = token;
+    }
+
+    /**
+     *
+     * @return
+     * The note
+     */
+    public String getNote() {
+        return note;
+    }
+
+    /**
+     *
+     * @param note
+     * The note
+     */
+    public void setNote(String note) {
+        this.note = note;
+    }
+
+    /**
+     *
+     * @return
+     * The noteUrl
+     */
+    public Object getNoteUrl() {
+        return noteUrl;
+    }
+
+    /**
+     *
+     * @param noteUrl
+     * The note_url
+     */
+    public void setNoteUrl(Object noteUrl) {
+        this.noteUrl = noteUrl;
+    }
+
+    /**
+     *
+     * @return
+     * The createdAt
+     */
+    public String getCreatedAt() {
+        return createdAt;
+    }
+
+    /**
+     *
+     * @param createdAt
+     * The created_at
+     */
+    public void setCreatedAt(String createdAt) {
+        this.createdAt = createdAt;
+    }
+
+    /**
+     *
+     * @return
+     * The updatedAt
+     */
+    public String getUpdatedAt() {
+        return updatedAt;
+    }
+
+    /**
+     *
+     * @param updatedAt
+     * The updated_at
+     */
+    public void setUpdatedAt(String updatedAt) {
+        this.updatedAt = updatedAt;
+    }
+
+    /**
+     *
+     * @return
+     * The scopes
+     */
+    public List<String> getScopes() {
+        return scopes;
+    }
+
+    /**
+     *
+     * @param scopes
+     * The scopes
+     */
+    public void setScopes(List<String> scopes) {
+        this.scopes = scopes;
+    }
+
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/Contributor.java b/retrofit2-github/src/main/java/com/github/retrofit2/Contributor.java
new file mode 100644
index 000000000..a4b2a47dd
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/Contributor.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.github.retrofit2;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.bluelinelabs.logansquare.annotation.JsonField;
+import com.bluelinelabs.logansquare.annotation.JsonObject;
+
+@JsonIgnoreProperties(ignoreUnknown = true)
+@JsonObject
+public class Contributor {
+    @JsonField
+    public String login;
+    @JsonField
+    public int contributions;
+
+    @JsonField
+    public long id;
+    @JsonField
+    public String avatar_url;
+    @JsonField
+    public String gravatar_id;
+    @JsonField
+    public String url;
+    @JsonField
+    public String html_url;
+    @JsonField
+    public String followers_url;
+    @JsonField
+    public String following_url;
+    @JsonField
+    public String gists_url;
+    @JsonField
+    public String starred_url;
+    @JsonField
+    public String subscriptions_url;
+    @JsonField
+    public String organizations_url;
+    @JsonField
+    public String repos_url;
+    @JsonField
+    public String events_url;
+    @JsonField
+    public String received_events_url;
+    @JsonField
+    public String type;
+    @JsonField
+    public boolean site_admin;
+
+    //@JsonIgnore
+    //public String login() {
+        //return login();
+    //}
+    public Contributor() {
+    }
+
+    public Contributor(String login, int contributions) {
+        this.login = login;
+        this.contributions = contributions;
+    }
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
new file mode 100644
index 000000000..47149d4c8
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
@@ -0,0 +1,276 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.http.*;
+import retrofit.http.Retrofit.RetryHeaders;
+import retrofit.http.Retrofit.ErrorHandler;
+import retrofit.http.Retrofit.RequestInterceptor;
+import retrofit.http.Retrofit.LogLevel;
+import retrofit.http.Retrofit.Bindable;
+import retrofit.http.Retrofit.QueryBinding;
+
+import rx.Observable;
+import java.io.File;
+
+import retrofit.converter.*;
+import java.util.List;
+import rx.functions.*;
+import retrofit.mime.TypedFile;
+import retrofit.mime.TypedString;
+import com.github.mobile.model.*;
+import retrofit.client.Response;
+import retrofit.Callback;
+
+@Retrofit("https://api.github.com")
+@retrofit.http.Retrofit.Headers({ // optional
+    "Accept: application/vnd.github.v3.full+json",
+    "User-Agent: Retrofit2"
+})
+@RetryHeaders( // optional
+    value = "Cache-Control: max-age=640000",
+    exceptions = retrofit.http.RequestException.class
+)
+@Retrofit.Converter(GsonConverter.class) // optional
+//@Retrofit.Converter(LoganSquareConverter.class) // default
+@LogLevel(retrofit.RestAdapter.LogLevel.FULL) // optional
+@RequestInterceptor(GitHubRequestInterceptor.class)
+@ErrorHandler(GitHubErrorHandler.class)
+public abstract class GitHub {
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Observable<List<Contributor>> contributorList(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    public Observable<Contributor> contributors(
+            String owner,
+            String repo) {
+        return contributorList(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    @GET("https://api.github.com/repos/{owner}/{repo}/contributors")
+    public abstract Observable<List<Contributor>> contributorListWithoutBaseUrl(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    public Observable<Contributor> contributorsWithoutBaseUrl(
+            String owner,
+            String repo) {
+        return contributorListWithoutBaseUrl(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    @GET("{url}")
+    public abstract Observable<List<Contributor>> contributorListDynamic(@Path("url") String url);
+
+    public Observable<Contributor> contributorsDynamic(String url) {
+        return contributorListDynamic(url).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    @POST("/user/edit")
+    public abstract Observable<Contributor> updateUser(@Body Contributor user);
+
+    @FormUrlEncoded
+    @POST("/user/edit")
+    public abstract Observable<Contributor> updateUser(@Field("first_name") String first, @Field("last_name") String last);
+
+    @Multipart
+    @PUT("/user/photo")
+    public abstract Observable<Contributor> updateUser(@retrofit.http.Retrofit.Part(value = "photo", mimeType = "image/png") File photo, @Part("description") String description);
+    @Multipart
+    @PUT("/user/photo")
+    public abstract Observable<Contributor> updateUserWithTypedFile(@Part("photo") TypedFile photo, @Part("description") String description);
+    @Multipart
+    @PUT("/user/photo")
+    public abstract Observable<Contributor> updateUserWithTypedStringAnootation(@Part("photo") TypedFile photo, @retrofit.http.Retrofit.Part(value = "description", mimeType = "application/json") String description);
+    @Multipart
+    @PUT("/user/photo")
+    public abstract Observable<Contributor> updateUserWithTypedString(@Part("photo") TypedFile photo, @Part("description") TypedString description);
+
+    @Headers("Cache-Control: max-age=640000")
+    @GET("/widget/list")
+    public abstract Observable<Contributor> widgetList();
+
+    @Headers({
+        "Accept: application/vnd.github.v3.full+json",
+        "User-Agent: Retrofit2"
+    })
+    @GET("/users/{username}")
+    public abstract Observable<Contributor> getUser(@Path("username") String username);
+
+    @Headers({
+        "Accept: application/vnd.github.v3.full+json",
+        "User-Agent: Retrofit2"
+    })
+    @GET("/user")
+    public abstract Observable<Contributor> getUserWithAuthorization(@Header("Authorization") String authorization);
+
+    @Headers({
+        "Accept: application/vnd.github.v3.full+json",
+        "User-Agent: Retrofit2"
+    })
+    @PUT("/user/starred/{owner}/{repo}")
+    public abstract Observable<Contributor> star(@Query("access_token") String accessToken,
+        @Path("owner") String owner,
+        @Path("repo") String repo);
+
+    @Headers({
+        "Accept: application/vnd.github.v3.full+json",
+        "User-Agent: Retrofit2"
+    })
+    @DELETE("/user/starred/{owner}/{repo}")
+    public abstract Observable<Contributor> unstar(@Query("access_token") String accessToken,
+        @Path("owner") String owner,
+        @Path("repo") String repo);
+
+    @DELETE("/repos/{owner}/{repo}")
+    public abstract Observable<Contributor> deleteRepository(
+            @Header("Authorization") String basicCredentials,
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    @GET("/authorizations")
+    public abstract Observable<Authorization> getAuthorizations(@Header("Authorization") String token);
+
+    @POST("/authorizations")
+    public abstract Observable<Authorization> createDeleteAuthorization(@Header("Authorization") String basicCredentials,
+            @Body Authorization authorization);
+
+    @GET("/users/{username}/repos")
+    @QueryBinding(value = "access_token", binder = AuthorizationBinder.class)
+    public abstract Observable<Repository> repositoriesBinder(@Header("username") String username);
+
+    //@GET("/users/repos") // TODO intercepter // TODO header-binding
+    //public abstract Observable<Repository> repositories();
+
+    public static class AuthorizationBinder implements Bindable<Authorization> {
+        @Override public String call(Authorization authorization) {
+            return authorization.getToken();
+        }
+    }
+
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Observable<Response> contributorResponse(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract void contributorResponse(
+            @Path("owner") String owner,
+            @Path("repo") String repo, Callback<Response> callback);
+
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract void contributorList(
+            @Path("owner") String owner,
+            @Path("repo") String repo, Callback<List<Contributor>> callback);
+
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract List<Contributor> contributorListBlocking(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Response contributorResponseBlocking(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    @POST("/user/repos")
+    public abstract Observable<Repository> createRepository(@Body Repository repository);
+
+    @DELETE("/repos/{owner}/{repo}")
+    public abstract Response deleteRepository(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    @POST("/orgs/{org}/repos")
+    public abstract Observable<Repository> createRepository(@Query("org") String org, @Body Repository repository);
+
+    @Retrofit.Converter(GsonConverter.class) // optional
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Observable<List<Contributor>> contributorListWithGson(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    public Observable<Contributor> contributorsWithGson(
+            String owner,
+            String repo) {
+        return contributorListWithGson(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    @Retrofit.Converter(DateGsonConverter.class) // optional
+    @GET("/repos/{owner}/{repo}/contributors")
+    public abstract Observable<List<Contributor>> contributorListWithDateGson(
+            @Path("owner") String owner,
+            @Path("repo") String repo);
+
+    public Observable<Contributor> contributorsWithDateGson(
+            String owner,
+            String repo) {
+        return contributorList(owner, repo).flatMap(new Func1<List<Contributor>, Observable<Contributor>>() {
+            @Override public Observable<Contributor> call(List<Contributor> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    public static class DateGsonConverter extends GsonConverter {
+        public DateGsonConverter() {
+            super(new com.google.gson.GsonBuilder()
+                .setFieldNamingPolicy(com.google.gson.FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES)
+                .registerTypeAdapter(java.util.Date.class, new com.google.gson.internal.bind.DateTypeAdapter())
+                .create());
+        }
+    }
+
+    @GET("/users/{username}/repos")
+    public abstract Observable<List<Repository>> repositoryList(@Path("username") String username);
+
+    public Observable<Repository> repositories(String username) {
+        return repositoryList(username).flatMap(new Func1<List<Repository>, Observable<Repository>>() {
+            @Override public Observable<Repository> call(List<Repository> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    @GET("/orgs/{org}/repos")
+    public abstract Observable<List<Repository>> orgRepositoryList(@Path("org") String org);
+
+    public Observable<Repository> orgRepositories(String org) {
+        return orgRepositoryList(org).flatMap(new Func1<List<Repository>, Observable<Repository>>() {
+            @Override public Observable<Repository> call(List<Repository> list) {
+                return Observable.from(list);
+            }
+        });
+    }
+
+    public static GitHub create() {
+        return new Retrofit_GitHub();
+    }
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubErrorHandler.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubErrorHandler.java
new file mode 100644
index 000000000..e2f065200
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubErrorHandler.java
@@ -0,0 +1,28 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.ErrorHandler;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+
+public class GitHubErrorHandler implements ErrorHandler {
+    @Override public Throwable handleError(RetrofitError cause) {
+        Response r = cause.getResponse();
+        if (r != null && r.getStatus() == 401) {
+            return new RuntimeException("401", cause);
+        }
+        return cause;
+    }
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubRequestInterceptor.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubRequestInterceptor.java
new file mode 100644
index 000000000..95cf414da
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubRequestInterceptor.java
@@ -0,0 +1,23 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.RequestInterceptor;
+
+public class GitHubRequestInterceptor implements RequestInterceptor {
+    @Override
+    public void intercept(RequestFacade request) {
+        request.addHeader("User-Agent", "RequestInterceptor");
+    }
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/Repository.java b/retrofit2-github/src/main/java/com/github/retrofit2/Repository.java
new file mode 100644
index 000000000..6520d434d
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/Repository.java
@@ -0,0 +1,162 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.github.retrofit2;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.bluelinelabs.logansquare.annotation.JsonField;
+import com.bluelinelabs.logansquare.annotation.JsonObject;
+
+/**
+ * <pre>
+ *  "id": 1296269,
+ *  "owner": {
+ *    "login": "octocat",
+ *    "id": 1,
+ *    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+ *    "gravatar_id": "",
+ *    "url": "https://api.github.com/users/octocat",
+ *    "html_url": "https://github.com/octocat",
+ *    "followers_url": "https://api.github.com/users/octocat/followers",
+ *    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+ *    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+ *    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+ *    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+ *    "organizations_url": "https://api.github.com/users/octocat/orgs",
+ *    "repos_url": "https://api.github.com/users/octocat/repos",
+ *    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+ *    "received_events_url": "https://api.github.com/users/octocat/received_events",
+ *    "type": "User",
+ *    "site_admin": false
+ *  },
+ *  "name": "Hello-World",
+ *  "full_name": "octocat/Hello-World",
+ *  "description": "This your first repo!",
+ *  "private": false,
+ *  "fork": true,
+ *  "url": "https://api.github.com/repos/octocat/Hello-World",
+ *  "html_url": "https://github.com/octocat/Hello-World",
+ *  "clone_url": "https://github.com/octocat/Hello-World.git",
+ *  "git_url": "git://github.com/octocat/Hello-World.git",
+ *  "ssh_url": "git@github.com:octocat/Hello-World.git",
+ *  "svn_url": "https://svn.github.com/octocat/Hello-World",
+ *  "mirror_url": "git://git.example.com/octocat/Hello-World",
+ *  "homepage": "https://github.com",
+ *  "language": null,
+ *  "forks_count": 9,
+ *  "stargazers_count": 80,
+ *  "watchers_count": 80,
+ *  "size": 108,
+ *  "default_branch": "master",
+ *  "open_issues_count": 0,
+ *  "has_issues": true,
+ *  "has_wiki": true,
+ *  "has_pages": false,
+ *  "has_downloads": true,
+ *  "pushed_at": "2011-01-26T19:06:43Z",
+ *  "created_at": "2011-01-26T19:01:12Z",
+ *  "updated_at": "2011-01-26T19:14:43Z",
+ *  "permissions": {
+ *    "admin": false,
+ *    "push": false,
+ *    "pull": true
+ *  }
+ * <pre>
+ *
+ * @see "https://developer.github.com/v3/repos/"
+ */
+@JsonIgnoreProperties(ignoreUnknown = true)
+@JsonObject
+public class Repository {
+    @JsonField
+    public long id;
+    @JsonField
+    public Contributor owner;
+    @JsonField
+    public String name;
+    @JsonField
+    public String full_name;
+    @JsonField
+    public String description;
+
+    @JsonField(name = "private")
+    public Boolean isPrivate;
+
+    @JsonField
+    public Boolean fork;
+    @JsonField
+    public String url;
+    @JsonField
+    public String html_url;
+    @JsonField
+    public String clone_url;
+    @JsonField
+    public String git_url;
+    @JsonField
+    public String ssh_url;
+    @JsonField
+    public String svn_url;
+    @JsonField
+    public String mirror_url;
+    @JsonField
+    public String homepage;
+    @JsonField
+    public String language;
+    @JsonField
+    public int forks_count;
+    @JsonField
+    public int stargazers_count;
+    @JsonField
+    public int watchers_count;
+    @JsonField
+    public int size;
+    @JsonField
+    public String default_branch;
+    @JsonField
+    public int open_issues_count;
+    @JsonField
+    public Boolean has_issues;
+    @JsonField
+    public Boolean has_wiki;
+    @JsonField
+    public Boolean has_pages;
+    @JsonField
+    public Boolean has_downloads;
+    @JsonField
+    public String pushed_at;
+    @JsonField
+    public String created_at;
+    @JsonField
+    public String updated_at;
+    @JsonField
+    public Permission permissions;
+
+    @JsonIgnoreProperties(ignoreUnknown = true)
+    @JsonObject
+    public static class Permission {
+        @JsonField
+        public boolean admin;
+        @JsonField
+        public boolean push;
+        @JsonField
+        public boolean pull;
+
+        public Permission() {
+        }
+    }
+
+    public Repository() {
+    }
+}
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
new file mode 100644
index 000000000..b667bab2e
--- /dev/null
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -0,0 +1,333 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+
+package com.github.retrofit2;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import org.json.JSONObject;
+import org.json.JSONException;
+
+import static org.mockito.Mockito.verify;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import com.github.*;
+
+import rx.Observable;
+import rx.functions.*;
+import java.util.Arrays;
+import java.util.List;
+import retrofit.client.Response;
+import retrofit.RetrofitError;
+import java.io.*;
+import java.util.concurrent.CountDownLatch;
+
+public class MainTest {
+    @Test
+    public void testGetWithBaseUrl() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.contributors("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+        assertTrue(contributors.contains("JakeWharton"));
+        assertTrue(contributors.size() > 1);
+    }
+
+    @Test
+    public void testGetWithoutBaseUrl() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.contributorsWithoutBaseUrl("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+        assertTrue(contributors.contains("JakeWharton"));
+        assertTrue(contributors.size() > 1);
+    }
+
+    @Test
+    public void testGetWithUrl() {
+        GitHub github = GitHub.create();
+
+        List<String> contributors = github.contributorsDynamic("https://api.github.com/repos/yongjhih/retrofit/contributors").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+        assertTrue(contributors.contains("JakeWharton"));
+        assertTrue(contributors.size() > 1);
+    }
+
+    /*
+    //tested
+    @Test
+    public void testPostBody() {
+        GitHub github = GitHub.create();
+        Repository localRepo = new Repository();
+        localRepo.name = "tmp";
+        Repository repository = github.createRepository(localRepo).toBlocking().first();
+        assertTrue(repository.name.equals("tmp"));
+    }
+    */
+
+    /*
+    //tested
+    @Test
+    public void testDelete() {
+        GitHub github = GitHub.create();
+        Repository localRepo = new Repository();
+        localRepo.name = "tmp";
+        Response response = github.deleteRepository("yongjhih", "tmp");
+        assertTrue(response.getStatus() == 204);
+    }
+    */
+
+    @Test
+    public void testPut() {
+    }
+    @Test
+    public void testPostField() {
+    }
+
+    @Test
+    public void testGetFile() {
+    }
+    @Test
+    public void testPostFile() {
+    }
+    @Test
+    public void testPostPart() {
+    }
+    @Test
+    public void testGetWithHeader() {
+    }
+    @Test
+    public void testPutTypedFile() {
+    }
+    @Test
+    public void testPutTypedFileTypedString() {
+    }
+
+    @Test
+    public void testGson() {
+    }
+    @Test
+    public void testJackson() {
+    }
+    @Test
+    public void testMoshi() {
+    }
+    @Test
+    public void testLoganSquare() {
+    }
+    @Test
+    public void testAutoJson() {
+    }
+
+    /*
+    //tested
+    @Test
+    public void testStar() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.star("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+    }
+
+    //tested
+    @Test
+    public void testUnstar() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.unstar("YOUR_TOKEN_HERE", "yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+    }
+    */
+
+    @Test
+    public void testObservableResponse() {
+        GitHub github = GitHub.create();
+        String string = github.contributorResponse("yongjhih", "retrofit").map(new Func1<Response, String>() {
+            @Override public String call(Response response) {
+                StringBuilder sb = new StringBuilder();
+                try {
+                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getBody().in()));
+                String read = null;
+
+                    read = reader.readLine();
+                    while (read != null) {
+                        sb.append(read);
+                        read = reader.readLine();
+                    }
+                } catch (IOException e) {
+                }
+
+                return sb.toString();
+            }
+        }).toBlocking().single();
+        System.out.println(string);
+        assertTrue(string.contains("JakeWharton"));
+    }
+
+    @Test
+    public void testCallbackResponse() {
+        final CountDownLatch signal = new CountDownLatch(1);
+
+        GitHub github = GitHub.create();
+        github.contributorResponse("yongjhih", "retrofit", new retrofit.Callback<Response>() {
+            @Override
+            public void success(Response response, Response response2) {
+                StringBuilder sb = new StringBuilder();
+                try {
+                BufferedReader reader = new BufferedReader(new InputStreamReader(response.getBody().in()));
+                String read = null;
+
+                    read = reader.readLine();
+                    while (read != null) {
+                        sb.append(read);
+                        read = reader.readLine();
+                    }
+                } catch (IOException e) {
+                }
+
+                String string = sb.toString();
+                System.out.println(string);
+                assertTrue(string.contains("JakeWharton"));
+                signal.countDown();
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                assertTrue(false);
+                signal.countDown();
+            }
+        });
+        try {
+            signal.await();
+        } catch (InterruptedException e) {
+            assertTrue(false);
+        }
+
+    }
+
+    @Test
+    public void testCallbackList() {
+        final CountDownLatch signal = new CountDownLatch(1);
+
+        GitHub github = GitHub.create();
+        github.contributorList("yongjhih", "retrofit", new retrofit.Callback<List<Contributor>>() {
+            @Override
+            public void success(List<Contributor> list, Response response) {
+                boolean contains = false;
+                for (Contributor c : list) {
+                    System.out.println(c.login);
+                    if (!c.login.equals("yongjhih")) continue;
+                    contains = true;
+                }
+                assertTrue(contains);
+                signal.countDown();
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                assertTrue(false);
+                signal.countDown();
+            }
+        });
+        try {
+            signal.await();
+        } catch (InterruptedException e) {
+            assertTrue(false);
+        }
+    }
+
+    @Test
+    public void testBlockingList() {
+        GitHub github = GitHub.create();
+        List<Contributor> list = github.contributorListBlocking("yongjhih", "retrofit");
+        boolean contains = false;
+        for (Contributor c : list) {
+            System.out.println(c.login);
+            if (!c.login.equals("yongjhih")) continue;
+            contains = true;
+        }
+        assertTrue(contains);
+    }
+
+    @Test
+    public void testBlockingResponse() {
+        GitHub github = GitHub.create();
+        Response response = github.contributorResponseBlocking("yongjhih", "retrofit");
+
+        StringBuilder sb = new StringBuilder();
+        try {
+            BufferedReader reader = new BufferedReader(new InputStreamReader(response.getBody().in()));
+            String read = null;
+
+            read = reader.readLine();
+            while (read != null) {
+                sb.append(read);
+                read = reader.readLine();
+            }
+        } catch (IOException e) {
+        }
+
+        String string = sb.toString();
+        System.out.println(string);
+        assertTrue(string.contains("JakeWharton"));
+    }
+
+    @Test
+    public void testMethodGson() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.contributorsWithGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+        assertTrue(contributors.contains("JakeWharton"));
+        assertTrue(contributors.size() > 1);
+    }
+
+    @Test
+    public void testMethodDateGson() {
+        GitHub github = GitHub.create();
+        List<String> contributors = github.contributorsWithDateGson("yongjhih", "retrofit").map(new Func1<Contributor, String>() {
+            @Override public String call(Contributor contributor) {
+                System.out.println(contributor.login);
+                return contributor.login;
+            }
+        }).toList().toBlocking().single();
+        assertTrue(contributors.contains("JakeWharton"));
+        assertTrue(contributors.size() > 1);
+    }
+
+}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..ce2fc3e5d
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,4 @@
+include 'retrofit', 'retrofit-processor'
+include 'retrofit2-github'
+include 'retrofit2-github-app'
+rootProject.name = 'retrofit-parent'
