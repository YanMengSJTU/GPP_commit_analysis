diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index a6e788468..75017297c 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -22,10 +22,11 @@
 import retrofit.mime.MultipartTypedOutput;
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
+
 import java.io.UnsupportedEncodingException;
+import java.lang.reflect.Array;
 import java.net.URLEncoder;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 final class RequestBuilder implements RequestInterceptor.RequestFacade {
@@ -148,18 +149,25 @@ void addQueryParam(String name, Object value, boolean urlEncodeValue) {
     }
 
     if (value instanceof Iterable) {
-        addQueryParamIterable(name, (Iterable) value, urlEncodeValue);
+      addQueryParamIterable(name, (Iterable) value, urlEncodeValue);
     } else if (value.getClass().isArray()) {
-        Iterable arrayAsList = Arrays.asList((Object[]) value);
-        addQueryParamIterable(name, arrayAsList, urlEncodeValue);
+      addQueryParamArray(name, value, urlEncodeValue);
     } else {
-        addQueryParamString(name, value.toString(), urlEncodeValue);
+      addQueryParamString(name, value.toString(), urlEncodeValue);
+    }
+  }
+
+  void addQueryParamArray(String name, Object arrayValues, boolean urlEncodeValue) {
+    final int length = Array.getLength(arrayValues);
+    for (int i = 0; i < length ; i++) {
+      Object value = Array.get(arrayValues, i);
+      addQueryParam(name, value, urlEncodeValue);
     }
   }
 
   void addQueryParamIterable(String name, Iterable values, boolean urlEncodeValue) {
     for (Object value: values) {
-        addQueryParamString(name, value.toString(), urlEncodeValue);
+      addQueryParam(name, value, urlEncodeValue);
     }
   }
 
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index f32274fdb..b7ff0b7d6 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -198,6 +198,19 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void getWithQueryParamArrayPrimitive() throws Exception {
+    Request request = new Helper() //
+            .setMethod("GET") //
+            .setUrl("http://example.com") //
+            .setPath("/foo/bar/") //
+            .addQueryParam("ping", new int[]{1, 2}) //
+            .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=1&ping=2");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void getWithQueryParamIterable() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
@@ -212,6 +225,8 @@
   }
 
 
+
+
     @Test public void queryParamOptional() throws Exception {
     Request request1 = new Helper() //
         .setMethod("GET") //
