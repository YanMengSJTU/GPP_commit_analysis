diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 31c983c83..1921e0fa2 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -191,10 +191,28 @@ void addQueryMapParams(String name, Map<?, ?> values) {
     }
   }
   
-  void addPartList(String name, Iterable<?> values) {
+  void addFieldListParams(String name, Iterable<?> values) {
+    FormUrlEncodedTypedOutput formBody = this.formBody;
+    String keyName = name.concat("[]");
+    
+    for (Object value : values) {
+      if (value == null) {
+        throw new IllegalArgumentException("Part param value map must not be null.");       
+      }
+      
+      formBody.addField(keyName, value.toString());
+    }
+  }
+  
+  void addPartListParams(String name, Iterable<?> values) {
 	  MultipartTypedOutput multiPart = this.multipartBody;
-	  String keyName = name + "[]";
+	  String keyName = name.concat("[]");
+	  
 	  for (Object value : values) {
+	    if (value == null) {
+	      throw new IllegalArgumentException("Part param value map must not be null.");	      
+	    }
+	    
 		  multiPart.addPart(keyName, new TypedString(value.toString()));
 	  }
   }
@@ -249,7 +267,11 @@ void setArguments(Object[] args) {
           break;
         case FIELD:
           if (value != null) { // Skip null values.
-            formBody.addField(name, value.toString());
+            if (value instanceof Iterable<?>) {
+              addFieldListParams(name, (Iterable<?>) value);
+            } else {
+              formBody.addField(name, value.toString());
+            }
           }
           break;
         case PART:
@@ -259,7 +281,7 @@ void setArguments(Object[] args) {
             } else if (value instanceof String) {
               multipartBody.addPart(name, new TypedString((String) value));
             } else if (value instanceof Iterable<?>) {
-              addPartList(name, (Iterable<?>) value);
+              addPartListParams(name, (Iterable<?>) value);
             } else {
               multipartBody.addPart(name, converter.toBody(value));
             }
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index e38f10d12..7c6804869 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -5,6 +5,7 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.lang.reflect.Method;
+import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -406,8 +407,6 @@
   }
 
   @Test public void simpleMultipart() throws Exception {
-	List<Object> values = new ArrayList<Object>(Arrays.asList(1, 2, "three"));
-	
     Request request = new Helper() //
         .setMethod("POST") //
         .setHasBody() //
@@ -416,7 +415,6 @@
         .setMultipart() //
         .addPart("ping", "pong") //
         .addPart("kit", new TypedString("kat")) //
-        .addPart("feed", values)
         .build();
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
@@ -424,24 +422,15 @@
 
     MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
     List<byte[]> bodyParts = MimeHelper.getParts(body);
-    assertThat(bodyParts).hasSize(5);
+    assertThat(bodyParts).hasSize(2);
 
     Iterator<byte[]> iterator = bodyParts.iterator();
-
+    
     String one = new String(iterator.next(), "UTF-8");
     assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
 
     String two = new String(iterator.next(), "UTF-8");
     assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
-
-    String three = new String(iterator.next(), "UTF-8");
-    assertThat(three).contains("name=\"feed[]\"").endsWith("\r\n1");
-    
-    String four = new String(iterator.next(), "UTF-8");
-    assertThat(four).contains("name=\"feed[]\"").endsWith("\r\n2");
-
-    String five = new String(iterator.next(), "UTF-8");
-    assertThat(five).contains("name=\"feed[]\"").endsWith("\r\nthree");
   }
 
   @Test public void multipartNullRemovesPart() throws Exception {
@@ -483,6 +472,35 @@
       assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");
     }
   }
+  
+  @Test public void multipartIterablePart() throws Exception {
+		Request request = new Helper() //
+		    .setMethod("POST") //
+		    .setHasBody() //
+		    .setUrl("http://example.com") //
+		    .setPath("/foo/bar/") //
+		    .setMultipart() //
+		    .addPart("ping", "pong") //
+		    .addPart("feed", Arrays.<Object>asList(1, 2, "three")) //
+		    .build();
+
+		MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
+		List<byte[]> bodyParts = MimeHelper.getParts(body);
+		assertThat(bodyParts).hasSize(4);
+
+		Iterator<byte[]> iterator = bodyParts.iterator();
+		String one = new String(iterator.next(), "UTF-8");
+		assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
+
+		String two = new String(iterator.next(), "UTF-8");
+		assertThat(two).contains("name=\"feed[]\"").endsWith("\r\n1");
+
+		String three = new String(iterator.next(), "UTF-8");
+		assertThat(three).contains("name=\"feed[]\"").endsWith("\r\n2");
+
+		String four = new String(iterator.next(), "UTF-8");
+		assertThat(four).contains("name=\"feed[]\"").endsWith("\r\nthree");
+  }
 
   @Test public void simpleFormEncoded() throws Exception {
     Request request = new Helper() //
@@ -511,6 +529,29 @@
     assertTypedBytes(request.getBody(), "foo=bar&kit=kat");
   }
 
+  @Test public void formEncodedIteratableField() throws Exception {
+    Request request = new Helper() //
+        .setMethod("POST") //
+        .setHasBody() //
+        .setUrl("http://example.com") //
+        .setPath("/foo") //
+        .setFormEncoded() //
+        .addField("foo", "bar") //
+        .addField("hoge", Arrays.<Object>asList(1, 2, "huga")) //
+        .build();
+
+    String encode = "UTF-8";
+    String listParamName = URLEncoder.encode("hoge[]", encode);
+    StringBuilder expectedBody = new StringBuilder();
+    expectedBody.append("foo=bar");
+    expectedBody.append("&").append(listParamName).append("=").append(URLEncoder.encode("1", encode));
+    expectedBody.append("&").append(listParamName).append("=").append(URLEncoder.encode("2", encode));
+    expectedBody.append("&").append(listParamName).append("=").append(URLEncoder.encode("huga", encode));
+    
+    assertTypedBytes(request.getBody(), expectedBody.toString());
+  }
+
+
   @Test public void simpleHeaders() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
@@ -702,7 +743,7 @@ Helper addQueryMapParams(String name, Map<String, Object> values) {
       return this;
     }
 
-    Helper addField(String name, String value) {
+    Helper addField(String name, Object value) {
       paramNames.add(name);
       paramUsages.add(FIELD);
       args.add(value);
