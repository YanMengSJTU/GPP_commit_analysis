diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 28a73cf96..b194d4ed5 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -61,18 +61,16 @@
 
   private final okhttp3.Call.Factory callFactory;
   private final HttpUrl baseUrl;
-  private final HttpUrl baseHttpsUrl;
   private final List<Converter.Factory> converterFactories;
   private final List<CallAdapter.Factory> adapterFactories;
   private final Executor callbackExecutor;
   private final boolean validateEagerly;
 
-  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl, HttpUrl baseHttpsUrl,
+  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
       List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
       Executor callbackExecutor, boolean validateEagerly) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
-    this.baseHttpsUrl = baseHttpsUrl;
     this.converterFactories = unmodifiableList(converterFactories); // Defensive copy at call site.
     this.adapterFactories = unmodifiableList(adapterFactories); // Defensive copy at call site.
     this.callbackExecutor = callbackExecutor;
@@ -131,12 +129,11 @@
     if (validateEagerly) {
       eagerlyValidateMethods(service);
     }
-    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
+    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new InvocationHandler() {
           private final Platform platform = Platform.get();
 
-          @Override
-          public Object invoke(Object proxy, Method method, Object... args)
+          @Override public Object invoke(Object proxy, Method method, Object... args)
               throws Throwable {
             // If the method is a method from Object then defer to normal invocation.
             if (method.getDeclaringClass() == Object.class) {
@@ -186,13 +183,6 @@ public HttpUrl baseUrl() {
     return baseUrl;
   }
 
-  /**
-   * The API base Https URL.
-   */
-  public HttpUrl baseHttpsUrl() {
-    return baseHttpsUrl;
-  }
-
   /**
    * Returns a list of the factories tried when creating a
    * {@linkplain #callAdapter(Type, Annotation[])} call adapter}.
@@ -396,7 +386,6 @@ public Executor callbackExecutor() {
     private Platform platform;
     private okhttp3.Call.Factory callFactory;
     private HttpUrl baseUrl;
-    private HttpUrl baseHttpsUrl;
     private List<Converter.Factory> converterFactories = new ArrayList<>();
     private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
     private Executor callbackExecutor;
@@ -510,36 +499,7 @@ public Builder baseUrl(HttpUrl baseUrl) {
       return this;
     }
 
-    /**
-     * Set the API base Https URL.
-     *
-     * @see #baseHttpsUrl(HttpUrl)
-     */
-    public Builder baseHttpsUrl(String baseHttpsUrl) {
-      checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
-      HttpUrl httpsUrl = HttpUrl.parse(baseHttpsUrl);
-      if (httpsUrl == null) {
-        throw new IllegalArgumentException("Illegal URL: " + baseHttpsUrl);
-      }
-      return baseHttpsUrl(httpsUrl);
-    }
-
-    /**
-     * This api is for https request.
-     */
-    public Builder baseHttpsUrl(HttpUrl baseHttpsUrl) {
-      checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
-      List<String> pathSegments = baseHttpsUrl.pathSegments();
-      if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {
-        throw new IllegalArgumentException("baseHttpsUrl must end in /: " + baseHttpsUrl);
-      }
-      this.baseHttpsUrl = baseHttpsUrl;
-      return this;
-    }
-
-    /**
-     * Add converter factory for serialization and deserialization of objects.
-     */
+    /** Add converter factory for serialization and deserialization of objects. */
     public Builder addConverterFactory(Converter.Factory factory) {
       converterFactories.add(checkNotNull(factory, "factory == null"));
       return this;
@@ -603,7 +563,7 @@ public Retrofit build() {
       // Make a defensive copy of the converters.
       List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);
 
-      return new Retrofit(callFactory, baseUrl, baseHttpsUrl, converterFactories, adapterFactories,
+      return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,
           callbackExecutor, validateEagerly);
     }
   }
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 9a8466029..26706453a 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -54,7 +54,6 @@
 import retrofit2.http.Query;
 import retrofit2.http.QueryMap;
 import retrofit2.http.Url;
-import retrofit2.http.TYPE;
 
 /** Adapts an invocation of an interface method into an HTTP call. */
 final class ServiceMethod<T> {
@@ -67,7 +66,6 @@
   final CallAdapter<?> callAdapter;
 
   private final HttpUrl baseUrl;
-  private final HttpUrl baseHttpsUrl;
   private final Converter<ResponseBody, T> responseConverter;
   private final String httpMethod;
   private final String relativeUrl;
@@ -76,14 +74,12 @@
   private final boolean hasBody;
   private final boolean isFormEncoded;
   private final boolean isMultipart;
-  private final boolean isHttps;
   private final ParameterHandler<?>[] parameterHandlers;
 
   ServiceMethod(Builder<T> builder) {
     this.callFactory = builder.retrofit.callFactory();
     this.callAdapter = builder.callAdapter;
     this.baseUrl = builder.retrofit.baseUrl();
-    this.baseHttpsUrl = builder.retrofit.baseHttpsUrl();
     this.responseConverter = builder.responseConverter;
     this.httpMethod = builder.httpMethod;
     this.relativeUrl = builder.relativeUrl;
@@ -92,20 +88,13 @@
     this.hasBody = builder.hasBody;
     this.isFormEncoded = builder.isFormEncoded;
     this.isMultipart = builder.isMultipart;
-    this.isHttps = builder.isHttps;
     this.parameterHandlers = builder.parameterHandlers;
   }
 
   /** Builds an HTTP request from method arguments. */
   Request toRequest(Object... args) throws IOException {
-    RequestBuilder requestBuilder;
-    if (!isHttps) {
-      requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-          contentType, hasBody, isFormEncoded, isMultipart);
-    } else {
-      requestBuilder = new RequestBuilder(httpMethod, baseHttpsUrl, relativeUrl, headers,
-          contentType, hasBody, isFormEncoded, isMultipart);
-    }
+    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
+        contentType, hasBody, isFormEncoded, isMultipart);
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -123,9 +112,7 @@ Request toRequest(Object... args) throws IOException {
     return requestBuilder.build();
   }
 
-  /**
-   * Builds a method return value from an HTTP response body.
-   */
+  /** Builds a method return value from an HTTP response body. */
   T toResponse(ResponseBody body) throws IOException {
     return responseConverter.convert(body);
   }
@@ -153,7 +140,6 @@ T toResponse(ResponseBody body) throws IOException {
     boolean hasBody;
     boolean isFormEncoded;
     boolean isMultipart;
-    boolean isHttps;
     String relativeUrl;
     Headers headers;
     MediaType contentType;
@@ -286,9 +272,6 @@ private void parseMethodAnnotation(Annotation annotation) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
-      } else if (annotation instanceof TYPE) {
-        int type = ((TYPE) annotation).value();
-        isHttps = type == TYPE.TYPE_HTTPS ? true : false;
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit2/http/TYPE.java b/retrofit/src/main/java/retrofit2/http/TYPE.java
deleted file mode 100644
index 399380421..000000000
--- a/retrofit/src/main/java/retrofit2/http/TYPE.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package retrofit2.http;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-/**
- * Request type(http or https)
- */
-@Documented
-@Target(METHOD)
-@Retention(RUNTIME)
-public @interface TYPE {
-
-  int TYPE_HTTP = 0;
-  int TYPE_HTTPS = 1;
-
-  int value() default TYPE_HTTP;
-}
