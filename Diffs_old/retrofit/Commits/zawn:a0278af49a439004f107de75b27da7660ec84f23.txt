diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 1d83a9394..ea2c50a86 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -15,6 +15,10 @@
  */
 package retrofit2;
 
+import okhttp3.Headers;
+import okhttp3.MultipartBody;
+import okhttp3.RequestBody;
+
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Array;
@@ -23,10 +27,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import okhttp3.Headers;
-import okhttp3.MultipartBody;
-import okhttp3.RequestBody;
-
 import static retrofit2.Utils.checkNotNull;
 
 abstract class ParameterHandler<T> {
@@ -310,7 +310,7 @@ private RawPart() {
   static final class ParamQuery<T> extends ParameterHandler<T> {
     public final String key;
     private final String name;
-    private final String value;
+    public final String value;
     private final Converter<T, String> valueConverter;
     private final boolean encoded;
 
@@ -356,7 +356,7 @@ private RawPart() {
     private final static String UTF_8 = "utf-8";
     public final String key;
     private final String name;
-    private final String value;
+    public final String value;
     private final Converter<T, String> valueConverter;
 
     ParamHeader(String header, Converter<T, String> valueConverter) {
@@ -365,7 +365,7 @@ private RawPart() {
       this.value = checkNotNull(header.substring(index + 1), "query value null");
       Set<String> set = ServiceMethod.parseHeaderParameters(this.value);
       if (set.size() > 1) {
-        throw new IllegalArgumentException("@ParamQuerys Configuration errors,at "
+        throw new IllegalArgumentException("@ParamHeader Configuration errors,at "
             + name
             + ", You can only have"
             + " a maximum of one parameter");
@@ -424,7 +424,7 @@ String extactValid(String value) {
     }
 
     String encode(String content, String charset) {
-      if (key == content || "".equals(content)) {
+      if (content == null || "".equals(content.trim())) {
         return null;
       }
       try {
@@ -438,7 +438,7 @@ String encode(String content, String charset) {
 
   public static class ParamUrl<T> extends ParameterHandler<T> {
 
-    private final String url;
+    public final String url;
 
     public final String key;
 
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index ed9103c1e..e0a1648bf 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -182,11 +182,14 @@ void loadTypeCommonActions(Class service) {
     }
   }
 
-  ParamProvider getParamProvider(Type serivce) {
+  ParamProvider getParamProvider(Class serivce) {
     return paramProvider;
   }
 
-  ParameterHandler[] getTypeCommonHandlers(Type serivce) {
+  ParameterHandler[] getTypeCommonHandlers(Class serivce) {
+    if (!typeCommonHandlersCache.containsKey(serivce)) {
+      loadTypeCommonActions(serivce);
+    }
     return typeCommonHandlersCache.get(serivce);
   }
 
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index cc0dc2114..b870e1e0a 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -113,13 +113,16 @@ Request toRequest(Object... args) throws IOException {
         Object value = null;
         if (parameterHandler instanceof ParameterHandler.ParamUrl) {
           String paramName = ((ParameterHandler.ParamUrl) parameterHandler).key;
-          value = (paramName == null) ? null : paramProvider.getUrlParam(paramName);
+          value = (paramName == null) ? ((ParameterHandler.ParamUrl) parameterHandler).url :
+              paramProvider.getUrlParam(paramName);
         } else if (parameterHandler instanceof ParameterHandler.ParamHeader) {
           String paramName = ((ParameterHandler.ParamHeader) parameterHandler).key;
-          value = (paramName == null) ? null : paramProvider.getHeaderParam(paramName);
+          value = (paramName == null) ? ((ParameterHandler.ParamHeader) parameterHandler).value :
+              paramProvider.getHeaderParam(paramName);
         } else if (parameterHandler instanceof ParameterHandler.ParamQuery) {
           String paramName = ((ParameterHandler.ParamQuery) parameterHandler).key;
-          value = (paramName == null) ? null : paramProvider.getQueryParam(paramName);
+          value = (paramName == null) ? ((ParameterHandler.ParamQuery) parameterHandler).value :
+              paramProvider.getQueryParam(paramName);
         }
         if (value != null)
           parameterHandler.apply(requestBuilder, value);
diff --git a/retrofit/src/test/java/retrofit2/CallCacheControlTest.java b/retrofit/src/test/java/retrofit2/CallCacheControlTest.java
new file mode 100644
index 000000000..2d3d1a58e
--- /dev/null
+++ b/retrofit/src/test/java/retrofit2/CallCacheControlTest.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (C) 2015 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+import okhttp3.CacheControl;
+import okhttp3.Request;
+import okhttp3.ResponseBody;
+import okhttp3.mockwebserver.MockWebServer;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.Headers;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicReference;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
+public final class CallCacheControlTest {
+  @Rule public final MockWebServer server = new MockWebServer();
+
+  interface Service {
+    @GET("/") Call<String> getString();
+  }
+
+  @Test public void callWitCacheControlTest() throws IOException {
+    final Request request = buildRequest(Service.class, CacheControl.FORCE_CACHE);
+    assertThat(request.headers().get("Cache-Control")).isEqualTo(CacheControl.FORCE_CACHE.toString
+        ());
+  }
+
+  @Test public void callOverrideMethodCacheControlTest() throws IOException {
+    class Example {
+
+      @GET("/")
+      @Headers("Cache-Control: text/not-plain") //
+      Call<ResponseBody> method() {
+        return null;
+      }
+    }
+    final Request request = buildRequest(Example.class, CacheControl.FORCE_CACHE);
+    assertThat(request.headers().get("Cache-Control")).isEqualTo(CacheControl.FORCE_CACHE.toString
+        ());
+  }
+
+  static Request buildRequest(Class<?> cls, CacheControl cacheControl, Object... args) {
+    final AtomicReference<Request> requestRef = new AtomicReference<>();
+    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
+      @Override public okhttp3.Call newCall(Request request) {
+        requestRef.set(request);
+        throw new UnsupportedOperationException("Not implemented");
+      }
+    };
+
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl("http://example.com/")
+        .addConverterFactory(new ToStringConverterFactory())
+        .callFactory(callFactory)
+        .build();
+
+    Method method = TestingUtils.onlyMethod(cls);
+    ServiceMethod<?> serviceMethod = retrofit.loadServiceMethod(method);
+    OkHttpCall<?> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+    Call<?> call = (Call<?>) serviceMethod.callAdapter.adapt(okHttpCall);
+    try {
+      call.execute(cacheControl);
+      throw new AssertionError();
+    } catch (UnsupportedOperationException ignored) {
+      return requestRef.get();
+    } catch (RuntimeException e) {
+      throw e;
+    } catch (Exception e) {
+      throw new AssertionError(e);
+    }
+  }
+}
diff --git a/retrofit/src/test/java/retrofit2/TypeParamRequestBuilderTest.java b/retrofit/src/test/java/retrofit2/TypeParamRequestBuilderTest.java
new file mode 100644
index 000000000..b009a95b7
--- /dev/null
+++ b/retrofit/src/test/java/retrofit2/TypeParamRequestBuilderTest.java
@@ -0,0 +1,250 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+import okhttp3.MediaType;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.ResponseBody;
+import okio.Buffer;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.ParamHeaders;
+import retrofit2.http.ParamQuerys;
+import retrofit2.http.ParamUrl;
+import retrofit2.http.Query;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicReference;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+@SuppressWarnings({"UnusedParameters", "unused"}) // Parameters inspected reflectively.
+public final class TypeParamRequestBuilderTest {
+  private static final MediaType TEXT_PLAIN = MediaType.parse("text/plain");
+
+  @Test public void noParamProvider() throws Exception {
+
+    @ParamHeaders({"X-House365: {house365}", "User-Agent: {userAgent}"})
+    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      buildRequest(Example.class, null, "zhang");
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "Use type parameters must be set ParamProvider");
+    }
+  }
+
+  @Test public void paramProvider() throws Exception {
+
+    @ParamHeaders({"X-House365: {house365}", "User-Agent: {userAgent}"})
+    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.headers().get("X-House365")).isEqualTo("house365");
+      assertThat(request.headers().get("User-Agent")).isEqualTo("userAgent");
+
+    } catch (IllegalArgumentException e) {
+      e.printStackTrace();
+    }
+  }
+
+  @Test public void errorMultipleHeaderParam() throws Exception {
+
+    @ParamHeaders({"X-House365: {house365},{house366}", "User-Agent: {userAgent}"})
+    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.headers().get("X-House365")).isEqualTo("house365");
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "@ParamHeader Configuration errors,at X-House365, You can only have a maximum of one " +
+              "parameter");
+    }
+  }
+
+  @Test public void multipleHeaderParam() throws Exception {
+
+    @ParamHeaders({"X-House365-Client: {deviceid=<deviceId>;phone=<phone>;uid=<userId>;" +
+        "app_channel=<app_channel>}"})
+    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.headers().get("X-House365-Client")).isEqualTo("deviceid=%3CdeviceId%3E;" +
+          "phone=%3Cphone%3E;uid=%3CuserId%3E;app_channel=%3Capp_channel%3E");
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "@ParamHeader Configuration errors,at X-House365, You can only have a maximum of one " +
+              "parameter");
+    }
+  }
+
+  @Test public void urlParam() throws Exception {
+
+//    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    @ParamUrl("http://www.baidu.com")
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.url().toString()).isEqualTo("http://www.baidu.com/foo?bar=zhang");
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "@ParamHeader Configuration errors,at X-House365, You can only have a maximum of one " +
+              "parameter");
+    }
+  }
+
+  @Test public void url2Param() throws Exception {
+
+//    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    @ParamUrl("{base}")
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.url().toString()).isEqualTo("http://www.baidu.com/foo?bar=zhang");
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "@ParamHeader Configuration errors,at X-House365, You can only have a maximum of one " +
+              "parameter");
+    }
+  }
+
+  @Test public void paramQuerys() throws Exception {
+
+    @ParamQuerys({"userid={userid}", "city={city}", "v={verison}", "version={version}"})
+    class Example {
+      @GET("/foo") //
+      Call<ResponseBody> method(@Query("bar") String thing) {
+        return null;
+      }
+    }
+    try {
+      final Request request = buildRequest(Example.class, paramProvider, "zhang");
+      assertThat(request.url().toString()).isEqualTo("http://example.com/foo?userid=userid&city=city&v=verison&version=version&bar=zhang");
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+          "@ParamHeader Configuration errors,at X-House365, You can only have a maximum of one " +
+              "parameter");
+    }
+  }
+
+
+  private static void assertBody(RequestBody body, String expected) {
+    assertThat(body).isNotNull();
+    Buffer buffer = new Buffer();
+    try {
+      body.writeTo(buffer);
+      assertThat(buffer.readUtf8()).isEqualTo(expected);
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  private static ParamProvider paramProvider = new ParamProvider() {
+    @Override public Object getHeaderParam(String paramName) {
+      return paramName;
+    }
+
+    @Override public Object getUrlParam(String paramName) {
+      return "http://www.baidu.com";
+    }
+
+    @Override public Object getQueryParam(String paramName) {
+      return paramName;
+    }
+  };
+
+  static Request buildRequest(Class<?> cls, ParamProvider paramProvider, Object... args) {
+    final AtomicReference<Request> requestRef = new AtomicReference<>();
+    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
+      @Override public okhttp3.Call newCall(Request request) {
+        requestRef.set(request);
+        throw new UnsupportedOperationException("Not implemented");
+      }
+    };
+
+
+    Retrofit retrofit;
+    if (paramProvider == null) {
+      retrofit = new Retrofit.Builder()
+          .baseUrl("http://example.com/")
+          .addConverterFactory(new ToStringConverterFactory())
+          .callFactory(callFactory)
+          .build();
+
+    } else {
+      retrofit = new Retrofit.Builder()
+          .baseUrl("http://example.com/")
+          .addConverterFactory(new ToStringConverterFactory())
+          .setParamProvider(paramProvider)
+          .callFactory(callFactory)
+          .build();
+    }
+    Method method = TestingUtils.onlyMethod(cls);
+    ServiceMethod<?> serviceMethod = retrofit.loadServiceMethod(method);
+    OkHttpCall<?> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+    Call<?> call = (Call<?>) serviceMethod.callAdapter.adapt(okHttpCall);
+    try {
+      call.execute();
+      throw new AssertionError();
+    } catch (UnsupportedOperationException ignored) {
+      return requestRef.get();
+    } catch (RuntimeException e) {
+      throw e;
+    } catch (Exception e) {
+      throw new AssertionError(e);
+    }
+  }
+}
