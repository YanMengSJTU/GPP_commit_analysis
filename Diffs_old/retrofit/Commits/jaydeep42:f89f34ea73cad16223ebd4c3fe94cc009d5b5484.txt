diff --git a/retrofit/src/main/java/retrofit2/CustomCallback.java b/retrofit/src/main/java/retrofit2/CustomCallback.java
index a36a60ca6..f09c79d8a 100644
--- a/retrofit/src/main/java/retrofit2/CustomCallback.java
+++ b/retrofit/src/main/java/retrofit2/CustomCallback.java
@@ -5,11 +5,11 @@
 import retrofit2.Response;
 
 public interface CustomCallback<T> extends Callback<T> {
-    /**
-     * Invoked when a network fluctuation occurred talking to the server
-     * on processing the response.
-     *
-     * @param errorCode - when after retrying the call still fails with errocode
-     */
-    void onFailResponse(int errorCode, Call<T> call, Response<T> response);
+  /**
+   * Invoked when a network fluctuation occurred talking to the server
+   * on processing the response.
+   *
+   * @param errorCode - when after retrying the call still fails with errocode
+   */
+  void onFailResponse(int errorCode, Call<T> call, Response<T> response);
 }
diff --git a/retrofit/src/main/java/retrofit2/RetryCallback.java b/retrofit/src/main/java/retrofit2/RetryCallback.java
index 9f567c330..997b5bc7e 100644
--- a/retrofit/src/main/java/retrofit2/RetryCallback.java
+++ b/retrofit/src/main/java/retrofit2/RetryCallback.java
@@ -4,53 +4,53 @@
 import retrofit2.Response;
 
 class RetryCallback<T> implements CustomCallback<T> {
-    private int totalRetries = 0;
-    private static final String TAG = RetryCallback.class.getSimpleName();
-    private final Call<T> call;
-    private int retryCount = 0;
-
-    RetryCallback(Call<T> call, int totalRetries) {
-        this.call = call;
-        this.totalRetries = totalRetries;
-    }
+  private int totalRetries = 0;
+  private static final String TAG = RetryCallback.class.getSimpleName();
+  private final Call<T> call;
+  private int retryCount = 0;
+
+  RetryCallback(Call<T> call, int totalRetries) {
+    this.call = call;
+    this.totalRetries = totalRetries;
+  }
 
-    @Override
-    public void onResponse(Call<T> call, Response<T> response) {
-        if (!RetryHelper.isCallSuccess(response)) {
-            if (retryCount++ < totalRetries) {
-                retry();
-            } else {
-                onFinalFail(response.code(),call,response);
-            }
-        } else {
-            onFinalResponse(call, response);
-        }
+  @Override
+  public void onResponse(Call<T> call, Response<T> response) {
+    if (!RetryHelper.isCallSuccess(response)) {
+      if (retryCount++ < totalRetries) {
+        retry();
+      } else {
+        onFinalFail(response.code(),call,response);
+      }
+    } else {
+      onFinalResponse(call, response);
     }
+  }
 
 
-    @Override
-    public void onFailure(Call<T> call, Throwable t) {
-        onFinalFailure(call, t);
-    }
+  @Override
+  public void onFailure(Call<T> call, Throwable t) {
+    onFinalFailure(call, t);
+  }
 
-    @Override
-    public void onFailResponse(int errorCode, Call<T> call, Response<T> response) {
-        onFinalFail(response.code(), call, response);
-    }
+  @Override
+  public void onFailResponse(int errorCode, Call<T> call, Response<T> response) {
+    onFinalFail(response.code(), call, response);
+  }
 
-    public void onFinalResponse(Call<T> call, Response<T> response) {
+  public void onFinalResponse(Call<T> call, Response<T> response) {
 
-    }
+  }
 
-    public void onFinalFailure(Call<T> call, Throwable t) {
+  public void onFinalFailure(Call<T> call, Throwable t) {
 
-    }
+  }
 
-    public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
+  public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
 
-    }
+  }
 
-    private void retry() {
-        call.clone().enqueue(this);
-    }
+  private void retry() {
+    call.clone().enqueue(this);
+  }
 }
diff --git a/retrofit/src/main/java/retrofit2/RetryHelper.java b/retrofit/src/main/java/retrofit2/RetryHelper.java
index a5e3a0d68..3d9e56286 100644
--- a/retrofit/src/main/java/retrofit2/RetryHelper.java
+++ b/retrofit/src/main/java/retrofit2/RetryHelper.java
@@ -9,58 +9,59 @@
  * case if you you want to set autometically retry the network call.
  */
 public class RetryHelper {
-    private static final int DEFAULT_RETRIES = 1;
-    private static int SUCCESS_CODE = 200;
+  private static final int DEFAULT_RETRIES = 1;
+  private static int SUCCESS_CODE = 200;
 
-    /**
-     * Method with custom retry counts
-     */
-    public static <T> void enqueueRetry(Call<T> call, final int retryCount, final CustomCallback<T> callback) {
-        call.enqueue(new RetryCallback<T>(call, retryCount) {
-            @Override
-            public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
-                callback.onFailResponse(errorCode, call, response);
-            }
+  /**
+   * Method with custom retry counts
+   */
+  public static <T> void enqueueRetry(Call<T> call, final int retryCount, final CustomCallback<T> callback) {
 
-            @Override
-            public void onFinalResponse(Call<T> call, Response<T> response) {
-                callback.onResponse(call, response);
-            }
+    call.enqueue(new RetryCallback<T>(call, retryCount) {
+      @Override
+     public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
+       callback.onFailResponse(errorCode, call, response);
+     }
 
-            @Override
-            public void onFinalFailure(Call<T> call, Throwable t) {
-                callback.onFailure(call, t);
-            }
-        });
-    }
+     @Override
+     public void onFinalResponse(Call<T> call, Response<T> response) {
+       callback.onResponse(call, response);
+     }
 
-    /**
-     * if you are go with default retry counts
-     */
-    public static <T> void enqueueRetry(Call<T> call, final CustomCallback<T> callback) {
-        enqueueRetry(call, DEFAULT_RETRIES, callback);
-    }
+     @Override
+     public void onFinalFailure(Call<T> call, Throwable t) {
+        callback.onFailure(call, t);
+     }
+     });
+   }
 
-    static boolean isCallSuccess(Response response) {
-        return response.code() == SUCCESS_CODE;
-    }
+  /**
+   * if you are go with default retry counts
+   */
+  public static <T> void enqueueRetry(Call<T> call, final CustomCallback<T> callback) {
+    enqueueRetry(call, DEFAULT_RETRIES, callback);
+  }
 
-    /**
-     * getter method to get the success code
-     *
-     * @return Success code
-     */
-    public static int getSuccessCode() {
-        return SUCCESS_CODE;
-    }
+  static boolean isCallSuccess(Response response) {
+    return response.code() == SUCCESS_CODE;
+  }
 
-    /**
-     * setter method to set custom success code
-     *
-     * @param successCode
-     */
-    public static void setSuccessCode(int successCode) {
-        RetryHelper.SUCCESS_CODE = successCode;
-    }
+  /**
+   * getter method to get the success code
+   *
+   * @return Success code
+   */
+  public static int getSuccessCode() {
+    return SUCCESS_CODE;
+  }
+
+  /**
+   * setter method to set custom success code
+   *
+   * @param successCode
+   */
+  public static void setSuccessCode(int successCode) {
+    RetryHelper.SUCCESS_CODE = successCode;
+  }
 
 }
diff --git a/samples/src/main/java/com/example/retrofit/SimpleRetryService.java b/samples/src/main/java/com/example/retrofit/SimpleRetryService.java
index 7ba1f6b34..ac9b07049 100644
--- a/samples/src/main/java/com/example/retrofit/SimpleRetryService.java
+++ b/samples/src/main/java/com/example/retrofit/SimpleRetryService.java
@@ -19,15 +19,13 @@
 import java.util.List;
 
 import retrofit2.Call;
+import retrofit2.CustomCallback;
 import retrofit2.Retrofit;
+import retrofit2.RetryHelper;
 import retrofit2.converter.gson.GsonConverterFactory;
 import retrofit2.http.GET;
 import retrofit2.http.Path;
 
-import retrofit2.CustomCallback;
-import retrofit2.RetryCall;
-import retrofit2.RetryHelper;
-
 
 public final class SimpleService {
   public static final String API_URL = "https://api.github.com";
