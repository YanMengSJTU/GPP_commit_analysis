diff --git a/pom.xml b/pom.xml
index 9c9272b32..13380e504 100644
--- a/pom.xml
+++ b/pom.xml
@@ -49,7 +49,7 @@
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
-    <okhttp.version>3.9.1</okhttp.version>
+    <okhttp.version>3.10.0-SNAPSHOT</okhttp.version>
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
     <!-- Adapter Dependencies -->
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index f27db26ee..da1c27e34 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -42,19 +42,21 @@
   private @Nullable MediaType contentType;
 
   private final boolean hasBody;
+  private final boolean offlineMode;
   private @Nullable MultipartBody.Builder multipartBuilder;
   private @Nullable FormBody.Builder formBuilder;
   private @Nullable RequestBody body;
 
   RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
-      boolean isFormEncoded, boolean isMultipart) {
+      boolean isFormEncoded, boolean isMultipart, boolean offlineMode) {
     this.method = method;
     this.baseUrl = baseUrl;
     this.relativeUrl = relativeUrl;
     this.requestBuilder = new Request.Builder();
     this.contentType = contentType;
     this.hasBody = hasBody;
+    this.offlineMode = offlineMode;
 
     if (headers != null) {
       requestBuilder.headers(headers);
@@ -225,6 +227,7 @@ Request build() {
 
     return requestBuilder
         .url(url)
+        .supportOffline(offlineMode)
         .method(method, body)
         .build();
   }
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index d0a19384c..db0e6965a 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -48,6 +48,7 @@
 import retrofit2.http.OPTIONS;
 import retrofit2.http.PATCH;
 import retrofit2.http.POST;
+import retrofit2.http.OfflineMode;
 import retrofit2.http.PUT;
 import retrofit2.http.Part;
 import retrofit2.http.PartMap;
@@ -77,6 +78,7 @@
   private final boolean isFormEncoded;
   private final boolean isMultipart;
   private final ParameterHandler<?>[] parameterHandlers;
+  private final boolean isOfflineMode;
 
   ServiceMethod(Builder<R, T> builder) {
     this.callFactory = builder.retrofit.callFactory();
@@ -86,6 +88,7 @@
     this.httpMethod = builder.httpMethod;
     this.relativeUrl = builder.relativeUrl;
     this.headers = builder.headers;
+    this.isOfflineMode = builder.isOfflineMode;
     this.contentType = builder.contentType;
     this.hasBody = builder.hasBody;
     this.isFormEncoded = builder.isFormEncoded;
@@ -96,7 +99,7 @@
   /** Builds an HTTP request from method arguments. */
   Request toRequest(@Nullable Object... args) throws IOException {
     RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-        contentType, hasBody, isFormEncoded, isMultipart);
+        contentType, hasBody, isFormEncoded, isMultipart, isOfflineMode);
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -138,6 +141,7 @@ R toResponse(ResponseBody body) throws IOException {
     boolean gotPath;
     boolean gotQuery;
     boolean gotUrl;
+    boolean isOfflineMode;
     String httpMethod;
     boolean hasBody;
     boolean isFormEncoded;
@@ -275,6 +279,9 @@ private void parseMethodAnnotation(Annotation annotation) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
+      } else if (annotation instanceof OfflineMode) {
+        OfflineMode offlineMode = (OfflineMode) annotation;
+        this.isOfflineMode = offlineMode.value();
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit2/http/OfflineMode.java b/retrofit/src/main/java/retrofit2/http/OfflineMode.java
new file mode 100644
index 000000000..451c60948
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/OfflineMode.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import okhttp3.HttpUrl;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface OfflineMode {
+  /**
+   * A relative or absolute path, or full URL of the endpoint. This value is optional if the first
+   * parameter of the method is annotated with {@link Url @Url}.
+   * <p>
+   * See {@linkplain retrofit2.Retrofit.Builder#baseUrl(HttpUrl) base URL} for details of how
+   * this is resolved against a base URL to create the full endpoint URL.
+   */
+  boolean value() default false;
+}
