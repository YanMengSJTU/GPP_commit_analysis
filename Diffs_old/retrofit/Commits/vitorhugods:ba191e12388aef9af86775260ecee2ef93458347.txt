diff --git a/retrofit/src/main/java/retrofit2/DefaultParameterHandler.java b/retrofit/src/main/java/retrofit2/DefaultParameterHandler.java
new file mode 100644
index 000000000..accf4020c
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/DefaultParameterHandler.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+import static retrofit2.Utils.checkNotNull;
+
+abstract class DefaultParameterHandler {
+
+  abstract void apply(RequestBuilder builder);
+
+  static final class DefaultField extends DefaultParameterHandler {
+    private final String name;
+    private final String value;
+    private final boolean encoded;
+
+    DefaultField(String name, String value, boolean encoded) {
+      this.name = checkNotNull(name, "name == null");
+      this.value = checkNotNull(value, "value == null");
+      this.encoded = encoded;
+    }
+
+    @Override
+    void apply(RequestBuilder builder) {
+      builder.addFormField(name, value, encoded);
+    }
+  }
+}
diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index 78c6dd847..1f6917186 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -35,6 +35,8 @@
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
 import retrofit2.http.Body;
+import retrofit2.http.DefaultField;
+import retrofit2.http.DefaultParameters;
 import retrofit2.http.DELETE;
 import retrofit2.http.Field;
 import retrofit2.http.FieldMap;
@@ -74,6 +76,7 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
   private final boolean hasBody;
   private final boolean isFormEncoded;
   private final boolean isMultipart;
+  private final @Nullable DefaultParameterHandler[] defaultParameterHandlers;
   private final ParameterHandler<?>[] parameterHandlers;
 
   RequestFactory(Builder builder) {
@@ -87,6 +90,7 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
     isFormEncoded = builder.isFormEncoded;
     isMultipart = builder.isMultipart;
     parameterHandlers = builder.parameterHandlers;
+    defaultParameterHandlers = builder.defaultParameterHandlers;
   }
 
   okhttp3.Request create(Object[] args) throws IOException {
@@ -108,6 +112,12 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
       handlers[p].apply(requestBuilder, args[p]);
     }
 
+    if (defaultParameterHandlers != null) {
+      for (DefaultParameterHandler defaultParameterHandler: defaultParameterHandlers) {
+        defaultParameterHandler.apply(requestBuilder);
+      }
+    }
+
     return requestBuilder.get()
         .tag(Invocation.class, new Invocation(method, argumentList))
         .build();
@@ -147,6 +157,7 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
     @Nullable MediaType contentType;
     @Nullable Set<String> relativeUrlParamNames;
     @Nullable ParameterHandler<?>[] parameterHandlers;
+    @Nullable DefaultParameterHandler[] defaultParameterHandlers;
 
     Builder(Retrofit retrofit, Method method) {
       this.retrofit = retrofit;
@@ -232,6 +243,8 @@ private void parseMethodAnnotation(Annotation annotation) {
           throw methodError(method, "Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
+      } else if (annotation instanceof DefaultParameters) {
+        defaultParameterHandlers = parseRequestDefaultParameters((DefaultParameters) annotation);
       }
     }
 
@@ -286,6 +299,20 @@ private Headers parseHeaders(String[] headers) {
       return builder.build();
     }
 
+    private DefaultParameterHandler[] parseRequestDefaultParameters(DefaultParameters annotation) {
+      DefaultField[] fields = annotation.fields();
+      if (fields.length > 0) {
+        gotField = true;
+      }
+      DefaultParameterHandler[] defaultParameterHandlers
+              = new DefaultParameterHandler[fields.length];
+      for (int i = 0; i < fields.length; i++) {
+        defaultParameterHandlers[i] = new DefaultParameterHandler.DefaultField(
+                fields[i].name(), fields[i].value(), fields[i].encoded());
+      }
+      return defaultParameterHandlers;
+    }
+
     private ParameterHandler<?> parseParameter(
         int p, Type parameterType, @Nullable Annotation[] annotations) {
       ParameterHandler<?> result = null;
diff --git a/retrofit/src/main/java/retrofit2/http/DefaultField.java b/retrofit/src/main/java/retrofit2/http/DefaultField.java
new file mode 100644
index 000000000..4336846b4
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/DefaultField.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface DefaultField {
+  String name();
+  String value();
+  boolean encoded() default false;
+}
diff --git a/retrofit/src/main/java/retrofit2/http/DefaultParameters.java b/retrofit/src/main/java/retrofit2/http/DefaultParameters.java
new file mode 100644
index 000000000..7d4c89714
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/DefaultParameters.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface DefaultParameters {
+  DefaultField[] fields() default {};
+}
diff --git a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
index bf78a3385..5b5fb0898 100644
--- a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
@@ -35,29 +35,7 @@
 import org.junit.Test;
 import retrofit2.helpers.NullObjectConverterFactory;
 import retrofit2.helpers.ToStringConverterFactory;
-import retrofit2.http.Body;
-import retrofit2.http.DELETE;
-import retrofit2.http.Field;
-import retrofit2.http.FieldMap;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.HEAD;
-import retrofit2.http.HTTP;
-import retrofit2.http.Header;
-import retrofit2.http.HeaderMap;
-import retrofit2.http.Headers;
-import retrofit2.http.Multipart;
-import retrofit2.http.OPTIONS;
-import retrofit2.http.PATCH;
-import retrofit2.http.POST;
-import retrofit2.http.PUT;
-import retrofit2.http.Part;
-import retrofit2.http.PartMap;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-import retrofit2.http.QueryMap;
-import retrofit2.http.QueryName;
-import retrofit2.http.Url;
+import retrofit2.http.*;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNull;
@@ -2536,6 +2514,24 @@
     assertThat(buffer.readUtf8()).isEqualTo("hello=world");
   }
 
+  @Test public void simpleDefaultFormEncoded() {
+    class Example {
+      @FormUrlEncoded //
+      @POST("/foo") //
+      @DefaultParameters(fields = {
+        @DefaultField(name = "foo", value = "bar"),
+        @DefaultField(name = "ping", value = "pong")
+      })
+      Call<ResponseBody> method(@Field(value = "John") String person) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, "Doe");
+    RequestBody body = request.body();
+    assertBody(body, "John=Doe&foo=bar&ping=pong");
+    assertThat(body.contentType().toString()).isEqualTo("application/x-www-form-urlencoded");
+  }
+
   @Test public void simpleHeaders() {
     class Example {
       @GET("/foo/bar/")
