diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 8b0ebc2cd..615579b0e 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -547,8 +547,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
                 RetrofitError retrofitError = null;
                 if (e instanceof IOException) {
+                    System.out.println("retrofit: OnSubscribeResponse.onError(): is IOException: " + e);
                     retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) e);
+                } else if (e instanceof RequestException) {
+                    System.out.println("retrofit: OnSubscribeResponse.onError(): is RequestException: " + e);
+                    retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) ((RequestException) e).getCause());
                 } else {
+                    System.out.println("retrofit: OnSubscribeResponse.onError(): not IOException/RequestException: " + e);
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
                 Throwable handledError = errorHandler.handleError(retrofitError);
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
index e37e66d6b..d0d45e9be 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
@@ -19,9 +19,14 @@
 
 public class MockErrorHandler implements ErrorHandler {
     @Override public Throwable handleError(RetrofitError cause) {
+        System.out.println("MockErrorHandler: " + cause);
         Response r = cause.getResponse();
-        if (r != null && r.getStatus() == 401) {
-            return new RuntimeException("401", cause);
+        System.out.println("MockErrorHandler: Response: " + r);
+        if (r != null) {
+            System.out.println("MockErrorHandler: status: " + r.getStatus());
+            if (r.getStatus() == 401) {
+                return new RuntimeException("401", cause);
+            }
         }
         return cause;
     }
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index dd6e05d18..1936a5553 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -353,16 +353,16 @@ public void testRequestInterceptor() {
     public void testRequestInterceptorOnMethod() {
     }
     @Test
-    public void testErrorHandler() {
+    public void testErrorHandler() { // SocketTimeoutException
         MockWebServer server = new MockWebServer();
         try {
             server.start();
         } catch (Throwable e) {}
         final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
+        //MockService service = MockService.create();
         MockService service = MockService.builder()
             .errorHandler(new ErrorHandler() {
                 @Override public Throwable handleError(RetrofitError cause) {
-                    System.out.println("handled!!");
                     hasErrorHandled.set(true);
                     Response r = cause.getResponse();
                     if (r != null && r.getStatus() == 401) {
