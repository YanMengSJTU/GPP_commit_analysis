diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index 3fbbbf17b..e231eccea 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -17,6 +17,7 @@
   <modules>
     <module>gson</module>
     <module>protobuf</module>
+    <module>protobuf-nano</module>
     <module>jackson</module>
     <module>wire</module>
     <module>simplexml</module>
diff --git a/retrofit-converters/protobuf-nano/README.md b/retrofit-converters/protobuf-nano/README.md
new file mode 100644
index 000000000..30365c72b
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/README.md
@@ -0,0 +1,19 @@
+Google Nano Protocol Buffer Converter
+=====================================
+
+A `Converter` which uses [Nano Protocol Buffer][1] binary serialization.
+
+To build this module, you will need to [install][2] the Android external\_protobuf module.
+
+To use the converter, depend on the `nano` classifier:
+
+```xml
+<dependency>
+  <groupId>com.squareup.retrofit</groupId>
+  <artifactId>retrofit-converters</artifactId>
+  <classifier>nano</classifier>
+</dependency>
+```
+
+ [1]: https://github.com/android/platform_external_protobuf/tree/master/java/src/main/java/com/google/protobuf/nano
+ [2]: https://github.com/android/platform_external_protobuf/blob/master/java/README.txt
diff --git a/retrofit-converters/protobuf-nano/pom.xml b/retrofit-converters/protobuf-nano/pom.xml
new file mode 100644
index 000000000..e5aacd1e8
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/pom.xml
@@ -0,0 +1,44 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.squareup.retrofit2</groupId>
+    <artifactId>retrofit-converters</artifactId>
+    <version>2.1.1-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>converter-protobuf-nano</artifactId>
+  <name>Converter: Nano Protocol Buffers</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.squareup.retrofit2</groupId>
+      <artifactId>retrofit</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.google.protobuf.nano</groupId>
+      <artifactId>protobuf-javanano</artifactId>
+      <version>3.0.0-alpha-5</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup.okhttp3</groupId>
+      <artifactId>mockwebserver</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java
new file mode 100644
index 000000000..8cb9b1793
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoConverterFactory.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.converter.protobuf.nano;
+
+import com.google.protobuf.nano.MessageNano;
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Type;
+import okhttp3.RequestBody;
+import okhttp3.ResponseBody;
+import retrofit2.Converter;
+import retrofit2.Retrofit;
+
+/**
+ * A {@linkplain Converter.Factory converter} which uses Protocol Buffers Nano.
+ * <p>
+ * This converter only applies for types which extend from {@link MessageNano} (or one of its
+ * subclasses).
+ * @author Keith Banks - Architect at siilo.com
+ */
+public final class ProtoConverterFactory extends Converter.Factory {
+  public static ProtoConverterFactory create() {
+    return new ProtoConverterFactory();
+  }
+
+  private ProtoConverterFactory() { }
+
+  @Override
+  public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+                                                        Annotation[] annotations,
+                                                        Retrofit retrofit) {
+    if (!(type instanceof Class<?>)) {
+      return null;
+    }
+    Class<?> c = (Class<?>) type;
+    if (!MessageNano.class.isAssignableFrom(c)) {
+      return null;
+    }
+
+    return new ProtoResponseBodyConverter<>(getNanoProtoInstance(type));
+  }
+
+  @Override
+  public Converter<?, RequestBody> requestBodyConverter(Type type,
+                                                      Annotation[] parameterAnnotations,
+                                                      Annotation[] methodAnnotations,
+                                                      Retrofit retrofit) {
+    if (!(type instanceof Class<?>)) {
+      return null;
+    }
+    if (!MessageNano.class.isAssignableFrom((Class<?>) type)) {
+      return null;
+    }
+    return new ProtoRequestBodyConverter<>();
+  }
+
+  private MessageNano getNanoProtoInstance(final Type type) {
+    Class<?> c = (Class<?>) type;
+    if (!(MessageNano.class.isAssignableFrom(c))) {
+      throw new IllegalArgumentException(
+                 "Expected a nanoproto message but was " + c.toString());
+    }
+
+    try {
+      return (MessageNano) c.newInstance();
+    } catch (InstantiationException e) {
+      throw new RuntimeException("Nanoproto instantiation failed", e);
+    } catch (IllegalAccessException e) {
+      throw new IllegalStateException(e);
+    }
+  }
+}
+
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java
new file mode 100644
index 000000000..3811da2df
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoRequestBodyConverter.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.converter.protobuf.nano;
+
+import com.google.protobuf.nano.MessageNano;
+import java.io.IOException;
+import okhttp3.MediaType;
+import okhttp3.RequestBody;
+import retrofit2.Converter;
+
+/**
+ * * @author Keith Banks - Architect at siilo.com
+ */
+final class ProtoRequestBodyConverter<T extends MessageNano> implements Converter<T, RequestBody> {
+  private static final MediaType MEDIA_TYPE = MediaType.parse("application/x-protobuf");
+
+  @Override public RequestBody convert(T value) throws IOException {
+    byte[] bytes = MessageNano.toByteArray(value);
+    return RequestBody.create(MEDIA_TYPE, bytes);
+  }
+}
+
diff --git a/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java
new file mode 100644
index 000000000..33dc601a7
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/main/java/retrofit2/converter/protobuf/nano/ProtoResponseBodyConverter.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.converter.protobuf.nano;
+
+import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
+import com.google.protobuf.nano.MessageNano;
+import java.io.IOException;
+import okhttp3.ResponseBody;
+import retrofit2.Converter;
+
+/**
+ * * @author Keith Banks - Architect at siilo.com
+ */
+final class ProtoResponseBodyConverter<T extends MessageNano>
+        implements Converter<ResponseBody, T> {
+  private final T instance;
+  ProtoResponseBodyConverter(T instance) {
+    this.instance = instance;
+  }
+
+  @Override public T convert(ResponseBody value) throws IOException {
+    try {
+      return MessageNano.mergeFrom(instance, value.bytes());
+    } catch (InvalidProtocolBufferNanoException e) {
+      throw new RuntimeException(e); // Despite extending IOException, this is data mismatch.
+    } finally {
+      value.close();
+    }
+  }
+}
+
diff --git a/retrofit-converters/protobuf-nano/src/test/gen-protos.sh b/retrofit-converters/protobuf-nano/src/test/gen-protos.sh
new file mode 100755
index 000000000..86ecbce3d
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/gen-protos.sh
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+set -ex
+protoc --javanano_out=java/ protos/phone.proto
\ No newline at end of file
diff --git a/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/PhoneProtos.java b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/PhoneProtos.java
new file mode 100644
index 000000000..2d5e9e51c
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/PhoneProtos.java
@@ -0,0 +1,106 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+
+package retrofit2.converter.protobuf.nano;
+
+@SuppressWarnings("hiding")
+public interface PhoneProtos {
+
+  public static final class Phone extends
+      com.google.protobuf.nano.MessageNano {
+
+    private static volatile Phone[] _emptyArray;
+    public static Phone[] emptyArray() {
+      // Lazily initializes the empty array
+      if (_emptyArray == null) {
+        synchronized (
+            com.google.protobuf.nano.InternalNano.LAZY_INIT_LOCK) {
+          if (_emptyArray == null) {
+            _emptyArray = new Phone[0];
+          }
+        }
+      }
+      return _emptyArray;
+    }
+
+    // optional string number = 1;
+    public java.lang.String number;
+
+    // optional bool voicemail = 2;
+    public boolean voicemail;
+
+    public Phone() {
+      clear();
+    }
+
+    public Phone clear() {
+      number = "";
+      voicemail = false;
+      cachedSize = -1;
+      return this;
+    }
+
+    @Override
+    public void writeTo(com.google.protobuf.nano.CodedOutputByteBufferNano output)
+        throws java.io.IOException {
+      if (!this.number.equals("")) {
+        output.writeString(1, this.number);
+      }
+      if (this.voicemail != false) {
+        output.writeBool(2, this.voicemail);
+      }
+      super.writeTo(output);
+    }
+
+    @Override
+    protected int computeSerializedSize() {
+      int size = super.computeSerializedSize();
+      if (!this.number.equals("")) {
+        size += com.google.protobuf.nano.CodedOutputByteBufferNano
+            .computeStringSize(1, this.number);
+      }
+      if (this.voicemail != false) {
+        size += com.google.protobuf.nano.CodedOutputByteBufferNano
+            .computeBoolSize(2, this.voicemail);
+      }
+      return size;
+    }
+
+    @Override
+    public Phone mergeFrom(
+            com.google.protobuf.nano.CodedInputByteBufferNano input)
+        throws java.io.IOException {
+      while (true) {
+        int tag = input.readTag();
+        switch (tag) {
+          case 0:
+            return this;
+          default: {
+            if (!com.google.protobuf.nano.WireFormatNano.parseUnknownField(input, tag)) {
+              return this;
+            }
+            break;
+          }
+          case 10: {
+            this.number = input.readString();
+            break;
+          }
+          case 16: {
+            this.voicemail = input.readBool();
+            break;
+          }
+        }
+      }
+    }
+
+    public static Phone parseFrom(byte[] data)
+        throws com.google.protobuf.nano.InvalidProtocolBufferNanoException {
+      return com.google.protobuf.nano.MessageNano.mergeFrom(new Phone(), data);
+    }
+
+    public static Phone parseFrom(
+            com.google.protobuf.nano.CodedInputByteBufferNano input)
+        throws java.io.IOException {
+      return new Phone().mergeFrom(input);
+    }
+  }
+}
diff --git a/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java
new file mode 100644
index 000000000..12ea60515
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/java/retrofit2/converter/protobuf/nano/ProtoConverterTest.java
@@ -0,0 +1,126 @@
+package retrofit2.converter.protobuf.nano;
+
+import java.io.IOException;
+import java.util.List;
+
+import com.google.protobuf.nano.InvalidProtocolBufferNanoException;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import okhttp3.mockwebserver.RecordedRequest;
+import okio.Buffer;
+import okio.ByteString;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.Retrofit;
+import retrofit2.http.Body;
+import retrofit2.http.GET;
+import retrofit2.http.POST;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+import static retrofit2.converter.protobuf.nano.PhoneProtos.Phone;
+
+public final class ProtoConverterTest {
+  interface Service {
+    @GET("/")
+    Call<Phone> get();
+    @POST("/") Call<Phone> post(@Body Phone impl);
+    @GET("/") Call<String> wrongClass();
+    @GET("/") Call<List<String>> wrongType();
+  }
+
+  @Rule
+  public final MockWebServer server = new MockWebServer();
+
+  private Service service;
+
+  @Before public void setUp() {
+    Retrofit retrofit = new Retrofit.Builder()
+            .baseUrl(server.url("/"))
+            .addConverterFactory(ProtoConverterFactory.create())
+            .build();
+    service = retrofit.create(Service.class);
+  }
+
+  @Test
+  public void serializeAndDeserialize() throws IOException, InterruptedException {
+    ByteString encoded = ByteString.decodeBase64("Cg4oNTE5KSA4NjctNTMwOQ==");
+    server.enqueue(new MockResponse().setBody(new Buffer().write(encoded)));
+
+    Phone phone = new Phone();
+    phone.number = "(519) 867-5309";
+    Call<Phone> call = service.post(phone);
+    Response<Phone> response = call.execute();
+    Phone body = response.body();
+    assertThat(body.number).isEqualTo("(519) 867-5309");
+
+    RecordedRequest request = server.takeRequest();
+    assertThat(request.getBody().readByteString()).isEqualTo(encoded);
+    assertThat(request.getHeader("Content-Type")).isEqualTo("application/x-protobuf");
+  }
+
+  @Test public void deserializeEmpty() throws IOException {
+    server.enqueue(new MockResponse());
+
+    Call<Phone> call = service.get();
+    Response<Phone> response = call.execute();
+    Phone body = response.body();
+    assertThat(body.number).isEqualTo("");
+    assertThat(body.voicemail).isFalse();
+  }
+
+  @Test public void deserializeWrongClass() throws IOException {
+    ByteString encoded = ByteString.decodeBase64("Cg4oNTE5KSA4NjctNTMwOQ==");
+    server.enqueue(new MockResponse().setBody(new Buffer().write(encoded)));
+
+    try {
+      service.wrongClass();
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""
+              + "Unable to create converter for class java.lang.String\n"
+              + "    for method Service.wrongClass");
+      assertThat(e.getCause()).hasMessage(""
+              + "Could not locate ResponseBody converter for class java.lang.String.\n"
+              + "  Tried:\n"
+              + "   * retrofit2.BuiltInConverters\n"
+              + "   * retrofit2.converter.protobuf.nano.ProtoConverterFactory");
+    }
+  }
+
+  @Test public void deserializeWrongType() throws IOException {
+    ByteString encoded = ByteString.decodeBase64("Cg4oNTE5KSA4NjctNTMwOQ==");
+    server.enqueue(new MockResponse().setBody(new Buffer().write(encoded)));
+
+    try {
+      service.wrongType();
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(""
+              + "Unable to create converter for java.util.List<java.lang.String>\n"
+              + "    for method Service.wrongType");
+      assertThat(e.getCause()).hasMessage(""
+              + "Could not locate ResponseBody converter for java.util.List<java.lang.String>.\n"
+              + "  Tried:\n"
+              + "   * retrofit2.BuiltInConverters\n"
+              + "   * retrofit2.converter.protobuf.nano.ProtoConverterFactory");
+    }
+  }
+
+  @Test public void deserializeWrongValue() throws IOException {
+    ByteString encoded = ByteString.decodeBase64("////");
+    server.enqueue(new MockResponse().setBody(new Buffer().write(encoded)));
+
+    Call<?> call = service.get();
+    try {
+      call.execute();
+      fail();
+    } catch (RuntimeException e) {
+      assertThat(e.getCause()).isInstanceOf(InvalidProtocolBufferNanoException.class)
+              .hasMessageContaining("input ended unexpectedly");
+    }
+  }
+}
diff --git a/retrofit-converters/protobuf-nano/src/test/protos/phone.proto b/retrofit-converters/protobuf-nano/src/test/protos/phone.proto
new file mode 100644
index 000000000..42894b8b2
--- /dev/null
+++ b/retrofit-converters/protobuf-nano/src/test/protos/phone.proto
@@ -0,0 +1,12 @@
+syntax = "proto2";
+
+package retrofit2.converter.protobuf;
+
+option java_package = "retrofit2.converter.protobuf";
+option java_outer_classname = "PhoneProtos";
+
+message Phone {
+  optional string number = 1;
+
+  optional bool voicemail = 2;
+}
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
index 814dc326b..84157f394 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
@@ -28,4 +28,4 @@
     byte[] bytes = value.toByteArray();
     return RequestBody.create(MEDIA_TYPE, bytes);
   }
-}
+}
\ No newline at end of file
