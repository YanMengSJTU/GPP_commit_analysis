diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index be227f4a6..112e987aa 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -94,11 +94,9 @@
       default:
         throw new IllegalArgumentException("Unknown request type: " + methodInfo.requestType);
     }
-    if(methodInfo.finalFields!=null)
-    {
+    if (methodInfo.finalFields != null) {
         Iterator<Map.Entry<String, String>> iterator = methodInfo.finalFields.entrySet().iterator();
-        while(iterator.hasNext())
-        {
+        while (iterator.hasNext()) {
             Map.Entry<String, String> entry = iterator.next();
             formBody.addField(entry.getKey(), entry.getValue());
         }
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index 265d338ec..fce788322 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -104,7 +104,7 @@
   Set<String> requestUrlParamNames;
   String requestQuery;
   List<retrofit.client.Header> headers;
-  Map<String,String> finalFields;
+  Map<String, String> finalFields;
   String contentTypeHeader;
   boolean isStreaming;
 
@@ -193,16 +193,15 @@ private void parseMethodAnnotations() {
         }
         isStreaming = true;
       } else if (annotationType == FinalFields.class) {
-          FinalFields finalField = ((FinalFields) methodAnnotation);
-          if(finalFields == null)
-              finalFields = new HashMap<String, String>();
-          String[] names=finalField.names();
-          String[] values=finalField.values();
-          if(names.length!=values.length)
-          throw methodError(
-                  "Final fields annotation should have exactly same names and values");
-          for(int i=0;i<names.length;i++)
-              finalFields.put(names[i],values[i]);
+        FinalFields finalField = ((FinalFields) methodAnnotation);
+        if (finalFields == null)
+          finalFields = new HashMap<String, String>();
+        String[] names = finalField.names();
+        String[] values = finalField.values();
+        if (names.length != values.length)
+          throw methodError("Final fields annotation should have exactly same names and values");
+        for (int i = 0; i < names.length; i++)
+          finalFields.put(names[i], values[i]);
       }
     }
 
