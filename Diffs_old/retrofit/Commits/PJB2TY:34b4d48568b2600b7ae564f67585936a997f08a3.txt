diff --git a/.buildscript/deploy_snapshot.sh b/.buildscript/deploy_snapshot.sh
index 8743f45b4..c25831dfe 100755
--- a/.buildscript/deploy_snapshot.sh
+++ b/.buildscript/deploy_snapshot.sh
@@ -6,7 +6,7 @@
 # https://benlimmer.com/2013/12/26/automatically-publish-javadoc-to-gh-pages-with-travis-ci/
 
 SLUG="square/retrofit"
-JDK="oraclejdk8"
+JDK="openjdk8"
 BRANCH="master"
 
 set -e
diff --git a/.travis.yml b/.travis.yml
index d5b32858e..bcbd5d7b9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,7 +1,7 @@
 language: java
 
 jdk:
-  - oraclejdk8
+  - openjdk8
 
 # Ensure Javadoc and source jar generation is exercised.
 install: mvn install javadoc:jar source:jar -DskipTests=true -B -V
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 4a4492fe4..febb18e05 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,53 @@
 Change Log
 ==========
 
+Version 2.6.1 *(2019-07-31)*
+----------------------------
+
+ * Fix: Avoid `IOException`s being wrapped in `UndeclaredThrowableException` in rare cases.
+ * Fix: Include no-content `ResponseBody` for responses created by `Response.error`.
+ * Fix: Update embedded R8/ProGuard rules to not warn about nested classes used for Kotlin extensions.
+
+
+Version 2.6.0 *(2019-06-05)*
+----------------------------
+
+ * New: Support `suspend` modifier on functions for Kotlin! This allows you to express the asynchrony of HTTP requests
+   in an idiomatic fashion for the language.
+
+   ```kotlin
+   @GET("users/{id}")
+   suspend fun user(@Path("id") id: Long): User
+   ```
+
+   Behind the scenes this behaves as if defined as `fun user(...): Call<User>` and then invoked with `Call.enqueue`.
+   You can also return `Response<User>` for access to the response metadata.
+
+   Currently this integration only supports non-null response body types. Follow
+   [issue 3075](https://github.com/square/retrofit/issues/3075) for nullable type support.
+
+ * New: **`@Tag`** parameter annotation for setting tags on the underlying OkHttp `Request` object. These can be read
+   in `CallAdapter`s or OkHttp `Interceptor`s for tracing, analytics, varying behavior, and more.
+
+ * New: **`@SkipCallbackExecutor`** method annotation will result in your `Call` invoking its `Callback` on the
+   background thread on which the HTTP call was made.
+
+ * New: Support OkHttp's `Headers` type for `@HeaderMap` parameters.
+
+ * New: Add `Retrofit.Builder.baseUrl(URL)` overload.
+
+ * Fix: Add embedded R8/ProGuard rule which retains Retrofit interfaces (while still allowing obfuscation). This
+   is needed because R8 running in 'full mode' (i.e., not in ProGuard-compatibility mode) will see that there are
+   no subtypes of these interfaces and rewrite any code which references instances to null.
+ * Fix: Mark `HttpException.response()` as `@Nullable` as serializing the exception does not retain this instance.
+ * Fix: Fatal errors (such as stack overflows, out of memory, etc.) now propagate to the OkHttp `Dispatcher` thread
+   on which they are running.
+ * Fix: Ensure JAX-B converter closes the response body when an exception is thrown during deserialization.
+ * Fix: Ignore static methods when performing eager validation of interface methods.
+ * Fix: Ensure that calling `source()` twice on the `ResponseBody` passed to a `Converter` always returns the same
+   instance. Prior to the fix, intermediate buffering would cause response data to be lost.
+
+
 Version 2.5.0 *(2018-11-18)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 74d6a26f2..dd8618493 100644
--- a/README.md
+++ b/README.md
@@ -9,11 +9,11 @@ For more information please see [the website][1].
 Download
 --------
 
-Download [the latest JAR][2] or grab from Maven central at the coordinates `com.squareup.retrofit2:retrofit:2.5.0`.
+Download [the latest JAR][2] or grab from Maven central at the coordinates `com.squareup.retrofit2:retrofit:2.6.1`.
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
 
-Retrofit requires at minimum Java 7 or Android 2.3.
+Retrofit requires at minimum Java 8+ or Android API 21+.
 
 
 R8 / ProGuard
diff --git a/pom.xml b/pom.xml
index 5779d6d7d..780fc7b6e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,7 @@
 
   <groupId>com.squareup.retrofit2</groupId>
   <artifactId>parent</artifactId>
-  <version>2.6.0-SNAPSHOT</version>
+  <version>2.7.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Retrofit (Parent)</name>
@@ -45,12 +45,12 @@
     <project.reporting.sourceEncoding>UTF-8</project.reporting.sourceEncoding>
 
     <!-- Compilation -->
-    <java.version>1.7</java.version>
+    <java.version>1.8</java.version>
     <kotlin.version>1.3.10</kotlin.version>
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
-    <okhttp.version>3.12.0</okhttp.version>
+    <okhttp.version>3.14.0</okhttp.version>
     <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
@@ -319,8 +319,8 @@
         <configuration>
           <signature>
             <groupId>org.codehaus.mojo.signature</groupId>
-            <artifactId>java16</artifactId>
-            <version>1.1</version>
+            <artifactId>java18</artifactId>
+            <version>1.0</version>
           </signature>
         </configuration>
       </plugin>
diff --git a/retrofit-adapters/guava/pom.xml b/retrofit-adapters/guava/pom.xml
index 074b15d90..bea80fe97 100644
--- a/retrofit-adapters/guava/pom.xml
+++ b/retrofit-adapters/guava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
index f56fcf63a..a6dc4c48b 100644
--- a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
+++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.guava;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/java8/pom.xml b/retrofit-adapters/java8/pom.xml
index 1a513ac2e..62e5b0a60 100644
--- a/retrofit-adapters/java8/pom.xml
+++ b/retrofit-adapters/java8/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -53,18 +53,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>animal-sniffer-maven-plugin</artifactId>
-        <version>${animal.sniffer.version}</version>
-        <configuration>
-          <signature>
-            <groupId>org.kaazing.mojo.signature</groupId>
-            <artifactId>java18</artifactId>
-            <version>1.0</version>
-          </signature>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
index 81c6ec90b..992ac261e 100644
--- a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
+++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.java8;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/pom.xml b/retrofit-adapters/pom.xml
index ef0a5b107..f0bdd6e68 100644
--- a/retrofit-adapters/pom.xml
+++ b/retrofit-adapters/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava/pom.xml b/retrofit-adapters/rxjava/pom.xml
index 60ccffe7b..098560b14 100644
--- a/retrofit-adapters/rxjava/pom.xml
+++ b/retrofit-adapters/rxjava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
index 07b56dc36..6483e50d9 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
@@ -26,7 +26,6 @@
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
 import rx.Observable;
-import rx.functions.Action1;
 
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -139,12 +138,7 @@
 
     final RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();
     service.response()
-        .doOnNext(new Action1<Response<String>>() {
-          @Override
-          public void call(Response<String> response) {
-            subscriber.unsubscribe();
-          }
-        })
+        .doOnNext(response -> subscriber.unsubscribe())
         .subscribe(subscriber);
 
     assertThat(subscriber.takeValue().body()).isEqualTo("Hi");
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
index 49de8bf19..103c17a13 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.rxjava;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/rxjava2/pom.xml b/retrofit-adapters/rxjava2/pom.xml
index d75008a48..64db06c98 100644
--- a/retrofit-adapters/rxjava2/pom.xml
+++ b/retrofit-adapters/rxjava2/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
index d020b3a6a..d6fe3066e 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
@@ -18,7 +18,6 @@
 import io.reactivex.Completable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.observers.TestObserver;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.io.IOException;
@@ -27,7 +26,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.Dispatcher;
 import okhttp3.OkHttpClient;
@@ -60,16 +58,10 @@
   private List<Throwable> uncaughtExceptions = new ArrayList<>();
 
   @Before public void setUp() {
-    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {
-      @Override public Thread newThread(Runnable r) {
-        Thread thread = new Thread(r);
-        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
-          @Override public void uncaughtException(Thread t, Throwable e) {
-            uncaughtExceptions.add(e);
-          }
-        });
-        return thread;
-      }
+    ExecutorService executorService = Executors.newCachedThreadPool(r -> {
+      Thread thread = new Thread(r);
+      thread.setUncaughtExceptionHandler((t, e) -> uncaughtExceptions.add(e));
+      return thread;
     });
 
     OkHttpClient client = new OkHttpClient.Builder()
@@ -113,13 +105,11 @@
 
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicReference<Throwable> errorRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!errorRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
-        latch.countDown();
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!errorRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
+      latch.countDown();
     });
 
     TestObserver<Void> observer = new TestObserver<>();
@@ -139,13 +129,11 @@
 
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!pluginRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
-        latch.countDown();
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!pluginRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
+      latch.countDown();
     });
 
     TestObserver<Void> observer = new TestObserver<>();
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
index 6c558b029..9dda24a27 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -58,11 +57,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> errorRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!errorRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!errorRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
     });
 
@@ -81,11 +78,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!pluginRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!pluginRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
index 34afbbeef..b4be4ffe3 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
@@ -18,7 +18,6 @@
 import io.reactivex.Flowable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -76,11 +75,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -101,11 +98,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -144,11 +139,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +161,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -211,11 +202,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -235,11 +224,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
index d5f83e1bd..44b643e8c 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
@@ -20,8 +20,8 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
+import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Before;
@@ -33,8 +33,6 @@
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
 
-import java.util.concurrent.atomic.AtomicReference;
-
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -64,11 +62,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -87,11 +83,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -116,11 +110,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -139,11 +131,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +158,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -192,11 +180,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
index 1afe1eaa3..82ed41824 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
@@ -16,7 +16,6 @@
 package retrofit2.adapter.rxjava2;
 
 import io.reactivex.Observable;
-import io.reactivex.functions.Function;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.io.IOException;
 import okhttp3.mockwebserver.MockResponse;
@@ -139,11 +138,7 @@
   @Test public void observableAssembly() {
     try {
       final Observable<String> justMe = Observable.just("me");
-      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {
-        @Override public Observable apply(Observable f) {
-          return justMe;
-        }
-      });
+      RxJavaPlugins.setOnObservableAssembly(f -> justMe);
       assertThat(service.body()).isEqualTo(justMe);
     } finally {
       RxJavaPlugins.reset();
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
index 05c1d4f8f..be4899ebc 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -76,11 +75,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -101,11 +98,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -144,11 +139,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +161,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -211,11 +202,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -235,11 +224,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
index 294722783..612d2e02d 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -63,11 +62,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -86,11 +83,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -115,11 +110,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -138,11 +131,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -167,11 +158,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -191,11 +180,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
index c975258cb..6bb111d71 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.rxjava2;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/scala/pom.xml b/retrofit-adapters/scala/pom.xml
index a432d79b9..47a8089e0 100644
--- a/retrofit-adapters/scala/pom.xml
+++ b/retrofit-adapters/scala/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
index a46c087d3..874ded15f 100644
--- a/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
+++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.scala;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-converters/gson/pom.xml b/retrofit-converters/gson/pom.xml
index 66d816eb3..dfba1c12c 100644
--- a/retrofit-converters/gson/pom.xml
+++ b/retrofit-converters/gson/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/guava/pom.xml b/retrofit-converters/guava/pom.xml
index ea734f257..01cb40a91 100644
--- a/retrofit-converters/guava/pom.xml
+++ b/retrofit-converters/guava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
index 5ef6abfaa..a1f9b576f 100644
--- a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
@@ -23,12 +23,8 @@
 
 final class AlwaysNullConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, Object> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return null;
-      }
-    };
+    return value -> null;
   }
 }
diff --git a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
index 24426222a..f85e16b63 100644
--- a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
@@ -72,16 +72,12 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new Converter.Factory() {
-          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          @Nullable @Override public Converter<ResponseBody, Object> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             if (getRawType(type) != Object.class) {
               return null;
             }
-            return new Converter<ResponseBody, Object>() {
-              @Override public Object convert(ResponseBody value) {
-                return object;
-              }
-            };
+            return value -> object;
           }
         })
         .addConverterFactory(GuavaOptionalConverterFactory.create())
diff --git a/retrofit-converters/jackson/pom.xml b/retrofit-converters/jackson/pom.xml
index c8191ab87..cd1b631e3 100644
--- a/retrofit-converters/jackson/pom.xml
+++ b/retrofit-converters/jackson/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/java8/pom.xml b/retrofit-converters/java8/pom.xml
index 3fbe9c62c..db657b724 100644
--- a/retrofit-converters/java8/pom.xml
+++ b/retrofit-converters/java8/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -48,18 +48,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>animal-sniffer-maven-plugin</artifactId>
-        <version>${animal.sniffer.version}</version>
-        <configuration>
-          <signature>
-            <groupId>org.kaazing.mojo.signature</groupId>
-            <artifactId>java18</artifactId>
-            <version>1.0</version>
-          </signature>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
index b94d5fd78..161daa081 100644
--- a/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
+++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
@@ -23,12 +23,8 @@
 
 final class AlwaysNullConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, Object> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return null;
-      }
-    };
+    return value -> null;
   }
 }
diff --git a/retrofit-converters/jaxb/pom.xml b/retrofit-converters/jaxb/pom.xml
index 857b8e84c..f98310228 100644
--- a/retrofit-converters/jaxb/pom.xml
+++ b/retrofit-converters/jaxb/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/moshi/pom.xml b/retrofit-converters/moshi/pom.xml
index 2aefc02a8..b59d2df1b 100644
--- a/retrofit-converters/moshi/pom.xml
+++ b/retrofit-converters/moshi/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
index 3eb6ceebc..c92bf0bb7 100644
--- a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
+++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
@@ -16,7 +16,6 @@
 package retrofit2.converter.moshi;
 
 import com.squareup.moshi.FromJson;
-import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.JsonDataException;
 import com.squareup.moshi.JsonQualifier;
 import com.squareup.moshi.JsonReader;
@@ -26,9 +25,7 @@
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.annotation.Retention;
-import java.lang.reflect.Type;
 import java.nio.charset.Charset;
-import java.util.Set;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -142,16 +139,13 @@
 
   @Before public void setUp() {
     Moshi moshi = new Moshi.Builder()
-        .add(new JsonAdapter.Factory() {
-          @Override public JsonAdapter<?> create(Type type, Set<? extends Annotation> annotations,
-              Moshi moshi) {
-            for (Annotation annotation : annotations) {
-              if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {
-                throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);
-              }
+        .add((type, annotations, moshi1) -> {
+          for (Annotation annotation : annotations) {
+            if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {
+              throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);
             }
-            return null;
           }
+          return null;
         })
         .add(new Adapters())
         .build();
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index 399f25e60..ea5f43707 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/protobuf/pom.xml b/retrofit-converters/protobuf/pom.xml
index 82ff21956..9fd86d556 100644
--- a/retrofit-converters/protobuf/pom.xml
+++ b/retrofit-converters/protobuf/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/scalars/pom.xml b/retrofit-converters/scalars/pom.xml
index daa0b6838..8ebfc00bf 100644
--- a/retrofit-converters/scalars/pom.xml
+++ b/retrofit-converters/scalars/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/simplexml/pom.xml b/retrofit-converters/simplexml/pom.xml
index 360212071..c5cc09d46 100644
--- a/retrofit-converters/simplexml/pom.xml
+++ b/retrofit-converters/simplexml/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/wire/pom.xml b/retrofit-converters/wire/pom.xml
index 5d188cf89..d658aae41 100644
--- a/retrofit-converters/wire/pom.xml
+++ b/retrofit-converters/wire/pom.xml
@@ -10,7 +10,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
index 7cd6d4e3a..5ef237983 100644
--- a/retrofit-mock/pom.xml
+++ b/retrofit-mock/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
index b525696fb..c1adf9cfa 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
@@ -16,8 +16,6 @@
 package retrofit2.mock;
 
 import java.lang.annotation.Annotation;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
 import java.util.concurrent.ExecutorService;
@@ -55,15 +53,12 @@ public T returningResponse(@Nullable Object response) {
   public <R> T returning(Call<R> call) {
     final Call<R> behaviorCall = new BehaviorCall<>(behavior, executor, call);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class[] { service },
-        new InvocationHandler() {
-          @Override
-          public T invoke(Object proxy, Method method, Object[] args) throws Throwable {
-            Type returnType = method.getGenericReturnType();
-            Annotation[] methodAnnotations = method.getAnnotations();
-            CallAdapter<R, T> callAdapter =
-                (CallAdapter<R, T>) retrofit.callAdapter(returnType, methodAnnotations);
-            return callAdapter.adapt(behaviorCall);
-          }
+        (proxy, method, args) -> {
+          Type returnType = method.getGenericReturnType();
+          Annotation[] methodAnnotations = method.getAnnotations();
+          CallAdapter<R, T> callAdapter =
+              (CallAdapter<R, T>) retrofit.callAdapter(returnType, methodAnnotations);
+          return callAdapter.adapt(behaviorCall);
         });
   }
 }
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
index 263808dd4..8069a071f 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
@@ -67,11 +67,8 @@ public static NetworkBehavior create(Random random) {
   private volatile int failurePercent = DEFAULT_FAILURE_PERCENT;
   private volatile Throwable failureException;
   private volatile int errorPercent = DEFAULT_ERROR_PERCENT;
-  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {
-    @Override public Response<?> call() {
-      return Response.error(500, ResponseBody.create(null, new byte[0]));
-    }
-  };
+  private volatile Callable<Response<?>> errorFactory =
+      () -> Response.error(500, ResponseBody.create(null, new byte[0]));
 
   private NetworkBehavior(Random random) {
     this.random = random;
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
index 7199da059..a3cd05c77 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
@@ -209,13 +209,11 @@
 
     final Call<String> call = service.response();
 
-    new Thread(new Runnable() {
-      @Override public void run() {
-        try {
-          Thread.sleep(100);
-          call.cancel();
-        } catch (InterruptedException ignored) {
-        }
+    new Thread(() -> {
+      try {
+        Thread.sleep(100);
+        call.cancel();
+      } catch (InterruptedException ignored) {
       }
     }).start();
 
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
index 8b044175a..6571fda4f 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
@@ -242,10 +242,8 @@
 
   @Test public void deferredThrowExecute() throws IOException {
     final IOException failure = new IOException("Hey");
-    Call<Object> failing = Calls.defer(new Callable<Call<Object>>() {
-      @Override public Call<Object> call() throws Exception {
-        throw failure;
-      }
+    Call<Object> failing = Calls.defer(() -> {
+      throw failure;
     });
     try {
       failing.execute();
@@ -257,10 +255,8 @@
 
   @Test public void deferredThrowEnqueue() {
     final IOException failure = new IOException("Hey");
-    Call<Object> failing = Calls.defer(new Callable<Call<Object>>() {
-      @Override public Call<Object> call() throws Exception {
-        throw failure;
-      }
+    Call<Object> failing = Calls.defer(() -> {
+      throw failure;
     });
     final AtomicReference<Throwable> failureRef = new AtomicReference<>();
     failing.enqueue(new Callback<Object>() {
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
index 73de57911..3224226c7 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
@@ -111,11 +111,7 @@
   }
 
   @Test public void errorFactoryCannotReturnNull() {
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        return null;
-      }
-    });
+    behavior.setErrorFactory(() -> null);
     try {
       behavior.createErrorResponse();
       fail();
@@ -126,10 +122,8 @@
 
   @Test public void errorFactoryCannotThrow() {
     final RuntimeException broken = new RuntimeException("Broken");
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        throw broken;
-      }
+    behavior.setErrorFactory(() -> {
+      throw broken;
     });
     try {
       behavior.createErrorResponse();
@@ -141,11 +135,7 @@
   }
 
   @Test public void errorFactoryCannotReturnSuccess() {
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        return Response.success("Taco");
-      }
-    });
+    behavior.setErrorFactory(() -> Response.success("Taco"));
     try {
       behavior.createErrorResponse();
       fail();
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index eab2b859a..05c350a28 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
index a16aef4b2..e7a9c3b5f 100644
--- a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
@@ -19,12 +19,11 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+import java.util.Objects;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
 import okhttp3.Request;
 
-import static retrofit2.Utils.checkNotNull;
-
 final class DefaultCallAdapterFactory extends CallAdapter.Factory {
   private final @Nullable Executor callbackExecutor;
 
@@ -70,28 +69,22 @@
     }
 
     @Override public void enqueue(final Callback<T> callback) {
-      checkNotNull(callback, "callback == null");
+      Objects.requireNonNull(callback, "callback == null");
 
       delegate.enqueue(new Callback<T>() {
         @Override public void onResponse(Call<T> call, final Response<T> response) {
-          callbackExecutor.execute(new Runnable() {
-            @Override public void run() {
-              if (delegate.isCanceled()) {
-                // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.
-                callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
-              } else {
-                callback.onResponse(ExecutorCallbackCall.this, response);
-              }
+          callbackExecutor.execute(() -> {
+            if (delegate.isCanceled()) {
+              // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.
+              callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
+            } else {
+              callback.onResponse(ExecutorCallbackCall.this, response);
             }
           });
         }
 
         @Override public void onFailure(Call<T> call, final Throwable t) {
-          callbackExecutor.execute(new Runnable() {
-            @Override public void run() {
-              callback.onFailure(ExecutorCallbackCall.this, t);
-            }
-          });
+          callbackExecutor.execute(() -> callback.onFailure(ExecutorCallbackCall.this, t));
         }
       });
     }
diff --git a/retrofit/src/main/java/retrofit2/HttpException.java b/retrofit/src/main/java/retrofit2/HttpException.java
index f53e76e78..0159817c1 100644
--- a/retrofit/src/main/java/retrofit2/HttpException.java
+++ b/retrofit/src/main/java/retrofit2/HttpException.java
@@ -15,14 +15,13 @@
  */
 package retrofit2;
 
+import java.util.Objects;
 import javax.annotation.Nullable;
 
-import static retrofit2.Utils.checkNotNull;
-
 /** Exception for an unexpected, non-2xx HTTP response. */
 public class HttpException extends RuntimeException {
   private static String getMessage(Response<?> response) {
-    checkNotNull(response, "response == null");
+    Objects.requireNonNull(response, "response == null");
     return "HTTP " + response.code() + " " + response.message();
   }
 
diff --git a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
index bc8bdf814..e79205ab2 100644
--- a/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/HttpServiceMethod.java
@@ -186,9 +186,22 @@
 
       //noinspection unchecked Checked by reflection inside RequestFactory.
       Continuation<ResponseT> continuation = (Continuation<ResponseT>) args[args.length - 1];
-      return isNullable
-          ? KotlinExtensions.awaitNullable(call, continuation)
-          : KotlinExtensions.await(call, continuation);
+
+      // Calls to OkHttp Call.enqueue() like those inside await and awaitNullable can sometimes
+      // invoke the supplied callback with an exception before the invoking stack frame can return.
+      // Coroutines will intercept the subsequent invocation of the Continuation and throw the
+      // exception synchronously. A Java Proxy cannot throw checked exceptions without them being
+      // declared on the interface method. To avoid the synchronous checked exception being wrapped
+      // in an UndeclaredThrowableException, it is intercepted and supplied to a helper which will
+      // force suspension to occur so that it can be instead delivered to the continuation to
+      // bypass this restriction.
+      try {
+        return isNullable
+            ? KotlinExtensions.awaitNullable(call, continuation)
+            : KotlinExtensions.await(call, continuation);
+      } catch (Exception e) {
+        return KotlinExtensions.yieldAndThrow(e, continuation);
+      }
     }
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/Invocation.java b/retrofit/src/main/java/retrofit2/Invocation.java
index 6f1ca5fb4..01468658c 100644
--- a/retrofit/src/main/java/retrofit2/Invocation.java
+++ b/retrofit/src/main/java/retrofit2/Invocation.java
@@ -19,8 +19,7 @@
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-
-import static retrofit2.Utils.checkNotNull;
+import java.util.Objects;
 
 /**
  * A single invocation of a Retrofit service interface method. This class captures both the method
@@ -51,8 +50,8 @@
  */
 public final class Invocation {
   public static Invocation of(Method method, List<?> arguments) {
-    checkNotNull(method, "method == null");
-    checkNotNull(arguments, "arguments == null");
+    Objects.requireNonNull(method, "method == null");
+    Objects.requireNonNull(arguments, "arguments == null");
     return new Invocation(method, new ArrayList<>(arguments)); // Defensive copy.
   }
 
diff --git a/retrofit/src/main/java/retrofit2/KotlinExtensions.kt b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
index b24212e08..7137ac928 100644
--- a/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
+++ b/retrofit/src/main/java/retrofit2/KotlinExtensions.kt
@@ -19,6 +19,7 @@
 package retrofit2
 
 import kotlinx.coroutines.suspendCancellableCoroutine
+import kotlinx.coroutines.yield
 import kotlin.coroutines.resume
 import kotlin.coroutines.resumeWithException
 
@@ -95,3 +96,8 @@ suspend fun <T : Any> Call<T>.awaitResponse(): Response<T> {
     })
   }
 }
+
+internal suspend fun Exception.yieldAndThrow(): Nothing {
+  yield()
+  throw this
+}
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index a5b5b9237..cc348a660 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -16,6 +16,7 @@
 package retrofit2;
 
 import java.io.IOException;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import javax.annotation.concurrent.GuardedBy;
 import okhttp3.MediaType;
@@ -26,7 +27,6 @@
 import okio.ForwardingSource;
 import okio.Okio;
 
-import static retrofit2.Utils.checkNotNull;
 import static retrofit2.Utils.throwIfFatal;
 
 final class OkHttpCall<T> implements Call<T> {
@@ -84,7 +84,7 @@
   }
 
   @Override public void enqueue(final Callback<T> callback) {
-    checkNotNull(callback, "callback == null");
+    Objects.requireNonNull(callback, "callback == null");
 
     okhttp3.Call call;
     Throwable failure;
diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 1d416c475..7dcf4741f 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -19,12 +19,11 @@
 import java.lang.reflect.Array;
 import java.lang.reflect.Method;
 import java.util.Map;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
 
-import static retrofit2.Utils.checkNotNull;
-
 abstract class ParameterHandler<T> {
   abstract void apply(RequestBuilder builder, @Nullable T value) throws IOException;
 
@@ -76,7 +75,7 @@
     private final Converter<T, String> valueConverter;
 
     Header(String name, Converter<T, String> valueConverter) {
-      this.name = checkNotNull(name, "name == null");
+      this.name = Objects.requireNonNull(name, "name == null");
       this.valueConverter = valueConverter;
     }
 
@@ -101,7 +100,7 @@
     Path(Method method, int p, String name, Converter<T, String> valueConverter, boolean encoded) {
       this.method = method;
       this.p = p;
-      this.name = checkNotNull(name, "name == null");
+      this.name = Objects.requireNonNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
@@ -121,7 +120,7 @@
     private final boolean encoded;
 
     Query(String name, Converter<T, String> valueConverter, boolean encoded) {
-      this.name = checkNotNull(name, "name == null");
+      this.name = Objects.requireNonNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
@@ -252,7 +251,7 @@
     private final boolean encoded;
 
     Field(String name, Converter<T, String> valueConverter, boolean encoded) {
-      this.name = checkNotNull(name, "name == null");
+      this.name = Objects.requireNonNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index f24d4817a..f6853af8d 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -21,17 +21,13 @@
 import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptyList;
 import static java.util.Collections.singletonList;
-import static java.util.Collections.unmodifiableList;
 
 class Platform {
   private static final Platform PLATFORM = findPlatform();
@@ -48,12 +44,13 @@ private static Platform findPlatform() {
       }
     } catch (ClassNotFoundException ignored) {
     }
-    try {
-      Class.forName("java.util.Optional");
-      return new Java8();
-    } catch (ClassNotFoundException ignored) {
-    }
-    return new Platform();
+    return new Platform(true);
+  }
+
+  private final boolean hasJava8Types;
+
+  Platform(boolean hasJava8Types) {
+    this.hasJava8Types = hasJava8Types;
   }
 
   @Nullable Executor defaultCallbackExecutor() {
@@ -62,105 +59,51 @@ private static Platform findPlatform() {
 
   List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
       @Nullable Executor callbackExecutor) {
-    return singletonList(new DefaultCallAdapterFactory(callbackExecutor));
+    DefaultCallAdapterFactory executorFactory = new DefaultCallAdapterFactory(callbackExecutor);
+    return hasJava8Types
+        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)
+        : singletonList(executorFactory);
   }
 
   int defaultCallAdapterFactoriesSize() {
-    return 1;
+    return hasJava8Types ? 2 : 1;
   }
 
   List<? extends Converter.Factory> defaultConverterFactories() {
-    return emptyList();
+    return hasJava8Types
+        ? singletonList(OptionalConverterFactory.INSTANCE)
+        : emptyList();
   }
 
   int defaultConverterFactoriesSize() {
-    return 0;
+    return hasJava8Types ? 1 : 0;
   }
 
   boolean isDefaultMethod(Method method) {
-    return false;
+    return hasJava8Types && method.isDefault();
   }
 
   @Nullable Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object,
       @Nullable Object... args) throws Throwable {
-    throw new UnsupportedOperationException();
-  }
-
-  @IgnoreJRERequirement // Only classloaded and used on Java 8.
-  static class Java8 extends Platform {
-    @Override boolean isDefaultMethod(Method method) {
-      return method.isDefault();
-    }
-
-    @Override Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object,
-        @Nullable Object... args) throws Throwable {
-      // Because the service interface might not be public, we need to use a MethodHandle lookup
-      // that ignores the visibility of the declaringClass.
-      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);
-      constructor.setAccessible(true);
-      return constructor.newInstance(declaringClass, -1 /* trusted */)
-          .unreflectSpecial(method, declaringClass)
-          .bindTo(object)
-          .invokeWithArguments(args);
-    }
-
-    @Override List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
-        @Nullable Executor callbackExecutor) {
-      List<CallAdapter.Factory> factories = new ArrayList<>(2);
-      factories.add(CompletableFutureCallAdapterFactory.INSTANCE);
-      factories.add(new DefaultCallAdapterFactory(callbackExecutor));
-      return unmodifiableList(factories);
-    }
-
-    @Override int defaultCallAdapterFactoriesSize() {
-      return 2;
-    }
-
-    @Override List<? extends Converter.Factory> defaultConverterFactories() {
-      return singletonList(OptionalConverterFactory.INSTANCE);
-    }
-
-    @Override int defaultConverterFactoriesSize() {
-      return 1;
-    }
+    // Because the service interface might not be public, we need to use a MethodHandle lookup
+    // that ignores the visibility of the declaringClass.
+    Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);
+    constructor.setAccessible(true);
+    return constructor.newInstance(declaringClass, -1 /* trusted */)
+        .unreflectSpecial(method, declaringClass)
+        .bindTo(object)
+        .invokeWithArguments(args);
   }
 
-  static class Android extends Platform {
-    @IgnoreJRERequirement // Guarded by API check.
-    @Override boolean isDefaultMethod(Method method) {
-      if (Build.VERSION.SDK_INT < 24) {
-        return false;
-      }
-      return method.isDefault();
+  static final class Android extends Platform {
+    Android() {
+      super(Build.VERSION.SDK_INT >= 24);
     }
 
     @Override public Executor defaultCallbackExecutor() {
       return new MainThreadExecutor();
     }
 
-    @Override List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
-        @Nullable Executor callbackExecutor) {
-      if (callbackExecutor == null) throw new AssertionError();
-      DefaultCallAdapterFactory executorFactory = new DefaultCallAdapterFactory(callbackExecutor);
-      return Build.VERSION.SDK_INT >= 24
-        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)
-        : singletonList(executorFactory);
-    }
-
-    @Override int defaultCallAdapterFactoriesSize() {
-      return Build.VERSION.SDK_INT >= 24 ? 2 : 1;
-    }
-
-    @Override List<? extends Converter.Factory> defaultConverterFactories() {
-      return Build.VERSION.SDK_INT >= 24
-          ? singletonList(OptionalConverterFactory.INSTANCE)
-          : Collections.<Converter.Factory>emptyList();
-    }
-
-    @Override int defaultConverterFactoriesSize() {
-      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;
-    }
-
     static class MainThreadExecutor implements Executor {
       private final Handler handler = new Handler(Looper.getMainLooper());
 
diff --git a/retrofit/src/main/java/retrofit2/Response.java b/retrofit/src/main/java/retrofit2/Response.java
index 1db6eb479..7c5a4646c 100644
--- a/retrofit/src/main/java/retrofit2/Response.java
+++ b/retrofit/src/main/java/retrofit2/Response.java
@@ -15,14 +15,13 @@
  */
 package retrofit2;
 
+import java.util.Objects;
 import javax.annotation.Nullable;
 import okhttp3.Headers;
 import okhttp3.Protocol;
 import okhttp3.Request;
 import okhttp3.ResponseBody;
 
-import static retrofit2.Utils.checkNotNull;
-
 /** An HTTP response. */
 public final class Response<T> {
   /** Create a synthetic successful response with {@code body} as the deserialized body. */
@@ -56,7 +55,7 @@
    * deserialized body.
    */
   public static <T> Response<T> success(@Nullable T body, Headers headers) {
-    checkNotNull(headers, "headers == null");
+    Objects.requireNonNull(headers, "headers == null");
     return success(body, new okhttp3.Response.Builder() //
         .code(200)
         .message("OK")
@@ -71,7 +70,7 @@
    * body.
    */
   public static <T> Response<T> success(@Nullable T body, okhttp3.Response rawResponse) {
-    checkNotNull(rawResponse, "rawResponse == null");
+    Objects.requireNonNull(rawResponse, "rawResponse == null");
     if (!rawResponse.isSuccessful()) {
       throw new IllegalArgumentException("rawResponse must be successful response");
     }
@@ -83,8 +82,10 @@
    * as the error body.
    */
   public static <T> Response<T> error(int code, ResponseBody body) {
+    Objects.requireNonNull(body, "body == null");
     if (code < 400) throw new IllegalArgumentException("code < 400: " + code);
     return error(body, new okhttp3.Response.Builder() //
+        .body(new OkHttpCall.NoContentResponseBody(body.contentType(), body.contentLength()))
         .code(code)
         .message("Response.error()")
         .protocol(Protocol.HTTP_1_1)
@@ -94,8 +95,8 @@
 
   /** Create an error response from {@code rawResponse} with {@code body} as the error body. */
   public static <T> Response<T> error(ResponseBody body, okhttp3.Response rawResponse) {
-    checkNotNull(body, "body == null");
-    checkNotNull(rawResponse, "rawResponse == null");
+    Objects.requireNonNull(body, "body == null");
+    Objects.requireNonNull(rawResponse, "rawResponse == null");
     if (rawResponse.isSuccessful()) {
       throw new IllegalArgumentException("rawResponse should not be successful response");
     }
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index a0cc56929..ebabe714f 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -21,9 +21,14 @@
 import java.lang.reflect.Modifier;
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
+import java.net.URL;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Deque;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
@@ -37,7 +42,6 @@
 import retrofit2.http.Url;
 
 import static java.util.Collections.unmodifiableList;
-import static retrofit2.Utils.checkNotNull;
 
 /**
  * Retrofit adapts a Java interface to HTTP calls by using annotations on the declared methods to
@@ -127,10 +131,7 @@
    */
   @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety.
   public <T> T create(final Class<T> service) {
-    Utils.validateServiceInterface(service);
-    if (validateEagerly) {
-      eagerlyValidateMethods(service);
-    }
+    validateServiceInterface(service);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new InvocationHandler() {
           private final Platform platform = Platform.get();
@@ -150,11 +151,33 @@
         });
   }
 
-  private void eagerlyValidateMethods(Class<?> service) {
-    Platform platform = Platform.get();
-    for (Method method : service.getDeclaredMethods()) {
-      if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {
-        loadServiceMethod(method);
+  private void validateServiceInterface(Class<?> service) {
+    if (!service.isInterface()) {
+      throw new IllegalArgumentException("API declarations must be interfaces.");
+    }
+
+    Deque<Class<?>> check = new ArrayDeque<>(1);
+    check.add(service);
+    while (!check.isEmpty()) {
+      Class<?> candidate = check.removeFirst();
+      if (candidate.getTypeParameters().length != 0) {
+        StringBuilder message = new StringBuilder("Type parameters are unsupported on ")
+            .append(candidate.getName());
+        if (candidate != service) {
+          message.append(" which is an interface of ")
+              .append(service.getName());
+        }
+        throw new IllegalArgumentException(message.toString());
+      }
+      Collections.addAll(check, candidate.getInterfaces());
+    }
+
+    if (validateEagerly) {
+      Platform platform = Platform.get();
+      for (Method method : service.getDeclaredMethods()) {
+        if (!platform.isDefaultMethod(method) && !Modifier.isStatic(method.getModifiers())) {
+          loadServiceMethod(method);
+        }
       }
     }
   }
@@ -212,8 +235,8 @@ public HttpUrl baseUrl() {
    */
   public CallAdapter<?, ?> nextCallAdapter(@Nullable CallAdapter.Factory skipPast, Type returnType,
       Annotation[] annotations) {
-    checkNotNull(returnType, "returnType == null");
-    checkNotNull(annotations, "annotations == null");
+    Objects.requireNonNull(returnType, "returnType == null");
+    Objects.requireNonNull(annotations, "annotations == null");
 
     int start = callAdapterFactories.indexOf(skipPast) + 1;
     for (int i = start, count = callAdapterFactories.size(); i < count; i++) {
@@ -270,9 +293,9 @@ public HttpUrl baseUrl() {
   public <T> Converter<T, RequestBody> nextRequestBodyConverter(
       @Nullable Converter.Factory skipPast, Type type, Annotation[] parameterAnnotations,
       Annotation[] methodAnnotations) {
-    checkNotNull(type, "type == null");
-    checkNotNull(parameterAnnotations, "parameterAnnotations == null");
-    checkNotNull(methodAnnotations, "methodAnnotations == null");
+    Objects.requireNonNull(type, "type == null");
+    Objects.requireNonNull(parameterAnnotations, "parameterAnnotations == null");
+    Objects.requireNonNull(methodAnnotations, "methodAnnotations == null");
 
     int start = converterFactories.indexOf(skipPast) + 1;
     for (int i = start, count = converterFactories.size(); i < count; i++) {
@@ -320,8 +343,8 @@ public HttpUrl baseUrl() {
    */
   public <T> Converter<ResponseBody, T> nextResponseBodyConverter(
       @Nullable Converter.Factory skipPast, Type type, Annotation[] annotations) {
-    checkNotNull(type, "type == null");
-    checkNotNull(annotations, "annotations == null");
+    Objects.requireNonNull(type, "type == null");
+    Objects.requireNonNull(annotations, "annotations == null");
 
     int start = converterFactories.indexOf(skipPast) + 1;
     for (int i = start, count = converterFactories.size(); i < count; i++) {
@@ -355,8 +378,8 @@ public HttpUrl baseUrl() {
    * {@linkplain #converterFactories() factories}.
    */
   public <T> Converter<T, String> stringConverter(Type type, Annotation[] annotations) {
-    checkNotNull(type, "type == null");
-    checkNotNull(annotations, "annotations == null");
+    Objects.requireNonNull(type, "type == null");
+    Objects.requireNonNull(annotations, "annotations == null");
 
     for (int i = 0, count = converterFactories.size(); i < count; i++) {
       Converter<?, String> converter =
@@ -436,7 +459,7 @@ public Builder() {
      * This is a convenience method for calling {@link #callFactory}.
      */
     public Builder client(OkHttpClient client) {
-      return callFactory(checkNotNull(client, "client == null"));
+      return callFactory(Objects.requireNonNull(client, "client == null"));
     }
 
     /**
@@ -445,17 +468,27 @@ public Builder client(OkHttpClient client) {
      * Note: Calling {@link #client} automatically sets this value.
      */
     public Builder callFactory(okhttp3.Call.Factory factory) {
-      this.callFactory = checkNotNull(factory, "factory == null");
+      this.callFactory = Objects.requireNonNull(factory, "factory == null");
       return this;
     }
 
+    /**
+     * Set the API base URL.
+     *
+     * @see #baseUrl(HttpUrl)
+     */
+    public Builder baseUrl(URL baseUrl) {
+      Objects.requireNonNull(baseUrl, "baseUrl == null");
+      return baseUrl(HttpUrl.get(baseUrl.toString()));
+    }
+
     /**
      * Set the API base URL.
      *
      * @see #baseUrl(HttpUrl)
      */
     public Builder baseUrl(String baseUrl) {
-      checkNotNull(baseUrl, "baseUrl == null");
+      Objects.requireNonNull(baseUrl, "baseUrl == null");
       return baseUrl(HttpUrl.get(baseUrl));
     }
 
@@ -510,7 +543,7 @@ public Builder baseUrl(String baseUrl) {
      * Result: http://github.com/square/retrofit/ (note the scheme stays 'http')
      */
     public Builder baseUrl(HttpUrl baseUrl) {
-      checkNotNull(baseUrl, "baseUrl == null");
+      Objects.requireNonNull(baseUrl, "baseUrl == null");
       List<String> pathSegments = baseUrl.pathSegments();
       if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {
         throw new IllegalArgumentException("baseUrl must end in /: " + baseUrl);
@@ -521,7 +554,7 @@ public Builder baseUrl(HttpUrl baseUrl) {
 
     /** Add converter factory for serialization and deserialization of objects. */
     public Builder addConverterFactory(Converter.Factory factory) {
-      converterFactories.add(checkNotNull(factory, "factory == null"));
+      converterFactories.add(Objects.requireNonNull(factory, "factory == null"));
       return this;
     }
 
@@ -530,7 +563,7 @@ public Builder addConverterFactory(Converter.Factory factory) {
      * Call}.
      */
     public Builder addCallAdapterFactory(CallAdapter.Factory factory) {
-      callAdapterFactories.add(checkNotNull(factory, "factory == null"));
+      callAdapterFactories.add(Objects.requireNonNull(factory, "factory == null"));
       return this;
     }
 
@@ -542,7 +575,7 @@ public Builder addCallAdapterFactory(CallAdapter.Factory factory) {
      * return types}.
      */
     public Builder callbackExecutor(Executor executor) {
-      this.callbackExecutor = checkNotNull(executor, "executor == null");
+      this.callbackExecutor = Objects.requireNonNull(executor, "executor == null");
       return this;
     }
 
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 25fdcbf5e..6ddf88028 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -27,6 +27,7 @@
 import java.lang.reflect.WildcardType;
 import java.util.Arrays;
 import java.util.NoSuchElementException;
+import java.util.Objects;
 import javax.annotation.Nullable;
 import okhttp3.ResponseBody;
 import okio.Buffer;
@@ -62,7 +63,7 @@ static RuntimeException parameterError(Method method, int p, String message, Obj
   }
 
   static Class<?> getRawType(Type type) {
-    checkNotNull(type, "type == null");
+    Objects.requireNonNull(type, "type == null");
 
     if (type instanceof Class<?>) {
       // Type is a normal class.
@@ -299,13 +300,6 @@ static void checkNotPrimitive(Type type) {
     }
   }
 
-  static <T> T checkNotNull(@Nullable T object, String message) {
-    if (object == null) {
-      throw new NullPointerException(message);
-    }
-    return object;
-  }
-
   /** Returns true if {@code annotations} contains an instance of {@code cls}. */
   static boolean isAnnotationPresent(Annotation[] annotations,
       Class<? extends Annotation> cls) {
@@ -323,18 +317,6 @@ static ResponseBody buffer(final ResponseBody body) throws IOException {
     return ResponseBody.create(body.contentType(), body.contentLength(), buffer);
   }
 
-  static <T> void validateServiceInterface(Class<T> service) {
-    if (!service.isInterface()) {
-      throw new IllegalArgumentException("API declarations must be interfaces.");
-    }
-    // Prevent API interfaces from extending other interfaces. This not only avoids a bug in
-    // Android (http://b.android.com/58753) but it forces composition of API declarations which is
-    // the recommended pattern.
-    if (service.getInterfaces().length > 0) {
-      throw new IllegalArgumentException("API interfaces must not extend other interfaces.");
-    }
-  }
-
   static Type getParameterUpperBound(int index, ParameterizedType type) {
     Type[] types = type.getActualTypeArguments();
     if (index < 0 || index >= types.length) {
@@ -396,7 +378,7 @@ static boolean hasUnresolvableType(@Nullable Type type) {
       }
 
       for (Type typeArgument : typeArguments) {
-        checkNotNull(typeArgument, "typeArgument == null");
+        Objects.requireNonNull(typeArgument, "typeArgument == null");
         checkNotPrimitive(typeArgument);
       }
 
diff --git a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
index 67a4d45f2..66b2b0963 100644
--- a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
+++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
@@ -21,6 +21,7 @@
 
 # Top-level functions that can only be used by Kotlin.
 -dontwarn retrofit2.KotlinExtensions
+-dontwarn retrofit2.KotlinExtensions$*
 
 # With R8 full mode, it sees no subtypes of Retrofit interfaces since they are created with a Proxy
 # and replaces all potential values with null. Explicitly keeping the interfaces prevents this.
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index a99bf3646..f347189ef 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -22,7 +22,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
-import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -195,13 +194,11 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<?, RequestBody> requestBodyConverter(Type type,
+          public Converter<String, RequestBody> requestBodyConverter(Type type,
               Annotation[] parameterAnnotations, Annotation[] methodAnnotations,
               Retrofit retrofit) {
-            return new Converter<String, RequestBody>() {
-              @Override public RequestBody convert(String value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -222,13 +219,11 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<?, RequestBody> requestBodyConverter(Type type,
+          public Converter<String, RequestBody> requestBodyConverter(Type type,
               Annotation[] parameterAnnotations, Annotation[] methodAnnotations,
               Retrofit retrofit) {
-            return new Converter<String, RequestBody>() {
-              @Override public RequestBody convert(String value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -258,12 +253,10 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -284,18 +277,16 @@
   @Test public void conversionProblemIncomingMaskedByConverterIsUnwrapped() throws IOException {
     // MWS has no way to trigger IOExceptions during the response body so use an interceptor.
     OkHttpClient client = new OkHttpClient.Builder() //
-        .addInterceptor(new Interceptor() {
-          @Override public okhttp3.Response intercept(Chain chain) throws IOException {
-            okhttp3.Response response = chain.proceed(chain.request());
-            ResponseBody body = response.body();
-            BufferedSource source = Okio.buffer(new ForwardingSource(body.source()) {
-              @Override public long read(Buffer sink, long byteCount) throws IOException {
-                throw new IOException("cause");
-              }
-            });
-            body = ResponseBody.create(body.contentType(), body.contentLength(), source);
-            return response.newBuilder().body(body).build();
-          }
+        .addInterceptor(chain -> {
+          okhttp3.Response response = chain.proceed(chain.request());
+          ResponseBody body = response.body();
+          BufferedSource source = Okio.buffer(new ForwardingSource(body.source()) {
+            @Override public long read(Buffer sink, long byteCount) throws IOException {
+              throw new IOException("cause");
+            }
+          });
+          body = ResponseBody.create(body.contentType(), body.contentLength(), source);
+          return response.newBuilder().body(body).build();
         }).build();
 
     Retrofit retrofit = new Retrofit.Builder()
@@ -303,16 +294,14 @@
         .client(client)
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                try {
-                  return value.string();
-                } catch (IOException e) {
-                  // Some serialization libraries mask transport problems in runtime exceptions. Bad!
-                  throw new RuntimeException("wrapper", e);
-                }
+            return value -> {
+              try {
+                return value.string();
+              } catch (IOException e) {
+                // Some serialization libraries mask transport problems in runtime exceptions. Bad!
+                throw new RuntimeException("wrapper", e);
               }
             };
           }
@@ -336,12 +325,10 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -369,16 +356,14 @@
   }
 
   @Test public void http204SkipsConverter() throws IOException {
-    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) {
-        throw new AssertionError();
-      }
+    final Converter<ResponseBody, String> converter = value -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             return converter;
           }
@@ -394,16 +379,14 @@
   }
 
   @Test public void http205SkipsConverter() throws IOException {
-    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) {
-        throw new AssertionError();
-      }
+    final Converter<ResponseBody, String> converter = value -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             return converter;
           }
@@ -422,15 +405,13 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new Converter.Factory() {
-          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          @Override public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                String prefix = value.source().readUtf8(2);
-                value.source().skip(20_000 - 4);
-                String suffix = value.source().readUtf8();
-                return prefix + suffix;
-              }
+            return value -> {
+              String prefix = value.source().readUtf8(2);
+              value.source().skip(20_000 - 4);
+              String suffix = value.source().readUtf8();
+              return prefix + suffix;
             };
           }
         })
diff --git a/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
index e23a5d3c1..85182a469 100644
--- a/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
@@ -20,10 +20,8 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.List;
-import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 import okhttp3.Request;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -37,11 +35,7 @@
   private final Retrofit retrofit = new Retrofit.Builder()
       .baseUrl("http://localhost:1")
       .build();
-  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {
-    @Override public void execute(@NotNull Runnable command) {
-      command.run();
-    }
-  });
+  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(Runnable::run);
 
   @Test public void rawTypeThrows() {
     try {
diff --git a/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
index 501c909e4..fe101cae4 100644
--- a/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
+++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
@@ -15,31 +15,41 @@
  */
 package retrofit2;
 
-// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features.
+import java.io.IOException;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
 public final class Java8DefaultMethodsTest {
-  //@Rule public final MockWebServer server = new MockWebServer();
-  //
-  //interface Example {
-  //  @GET("/") Call<String> user(@Query("name") String name);
-  //
-  //  default Call<String> user() {
-  //    return user("hey");
-  //  }
-  //}
-  //
-  //@Test public void test() throws IOException {
-  //  server.enqueue(new MockResponse().setBody("Hi"));
-  //  server.enqueue(new MockResponse().setBody("Hi"));
-  //
-  //  Retrofit retrofit = new Retrofit.Builder()
-  //      .baseUrl(server.url("/"))
-  //      .addConverterFactory(new ToStringConverterFactory())
-  //      .build();
-  //  Example example = retrofit.create(Example.class);
-  //
-  //  Response<String> response = example.user().execute();
-  //  assertThat(response.body()).isEqualTo("Hi");
-  //  Response<String> response2 = example.user("Hi").execute();
-  //  assertThat(response2.body()).isEqualTo("Hi");
-  //}
+  @Rule public final MockWebServer server = new MockWebServer();
+
+  interface Example {
+    @GET("/") Call<String> user(@Query("name") String name);
+
+    default Call<String> user() {
+      return user("hey");
+    }
+  }
+
+  @Test public void test() throws IOException {
+    server.enqueue(new MockResponse().setBody("Hi"));
+    server.enqueue(new MockResponse().setBody("Hi"));
+
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .addConverterFactory(new ToStringConverterFactory())
+        .build();
+    Example example = retrofit.create(Example.class);
+
+    Response<String> response = example.user().execute();
+    assertThat(response.body()).isEqualTo("Hi");
+    Response<String> response2 = example.user("Hi").execute();
+    assertThat(response2.body()).isEqualTo("Hi");
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
index bc2521d5a..807a21015 100644
--- a/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
+++ b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
@@ -15,28 +15,36 @@
  */
 package retrofit2;
 
-// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features.
+import okhttp3.mockwebserver.MockWebServer;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
+
+import static org.junit.Assert.assertNotNull;
+
 public final class Java8DefaultStaticMethodsInValidationTest {
-  //@Rule public final MockWebServer server = new MockWebServer();
-  //
-  //interface Example {
-  //  @GET("/") Call<String> user(@Query("name") String name);
-  //
-  //  default Call<String> user() {
-  //    return user("hey");
-  //  }
-  //
-  //  static String staticMethod() {
-  //    return "Hi";
-  //  }
-  //}
-  //
-  //@Test public void test() throws IOException {
-  //  Retrofit retrofit = new Retrofit.Builder()
-  //      .baseUrl(server.url("/"))
-  //      .addConverterFactory(new ToStringConverterFactory())
-  //      .validateEagerly(true)
-  //      .build();
-  //  Example example = retrofit.create(Example.class);
-  //}
+  @Rule public final MockWebServer server = new MockWebServer();
+
+  interface Example {
+    @GET("/") Call<String> user(@Query("name") String name);
+
+    default Call<String> user() {
+      return user("hey");
+    }
+
+    static String staticMethod() {
+      return "Hi";
+    }
+  }
+
+  @Test public void test() {
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .addConverterFactory(new ToStringConverterFactory())
+        .validateEagerly(true)
+        .build();
+    assertNotNull(retrofit.create(Example.class));
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt b/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
index 629b02624..e3c005e81 100644
--- a/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
+++ b/retrofit/src/test/java/retrofit2/KotlinSuspendTest.kt
@@ -273,4 +273,26 @@ class KotlinSuspendTest {
     val body = runBlocking { example.body() }
     assertThat(body).isEqualTo("HiHiHiHiHi")
   }
+
+  @Test fun checkedExceptionsAreNotSynchronouslyThrown() = runBlocking {
+    val retrofit = Retrofit.Builder()
+        .baseUrl("https://unresolved-host.com/")
+        .addConverterFactory(ToStringConverterFactory())
+        .build()
+    val example = retrofit.create(Service::class.java)
+
+    server.shutdown()
+
+    // The problematic behavior of the UnknownHostException being synchronously thrown is
+    // probabilistic based on thread preemption. Running a thousand times will almost always
+    // trigger it, so we run an order of magnitude more to be safe.
+    repeat(10000) {
+      try {
+        example.body()
+        fail()
+      } catch (_: IOException) {
+        // We expect IOException, the bad behavior will wrap this in UndeclaredThrowableException.
+      }
+    }
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
index dd7f3a675..057e8d3d4 100644
--- a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
@@ -3013,10 +3013,8 @@ private static void assertBody(RequestBody body, String expected) {
   }
 
   static <T> Request buildRequest(Class<T> cls, Retrofit.Builder builder, Object... args) {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new UnsupportedOperationException("Not implemented");
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new UnsupportedOperationException("Not implemented");
     };
 
     Retrofit retrofit = builder.callFactory(callFactory).build();
diff --git a/retrofit/src/test/java/retrofit2/ResponseTest.java b/retrofit/src/test/java/retrofit2/ResponseTest.java
index 02ab96677..2acf7a0f9 100644
--- a/retrofit/src/test/java/retrofit2/ResponseTest.java
+++ b/retrofit/src/test/java/retrofit2/ResponseTest.java
@@ -16,6 +16,7 @@
 package retrofit2;
 
 import okhttp3.Headers;
+import okhttp3.MediaType;
 import okhttp3.Protocol;
 import okhttp3.ResponseBody;
 import org.junit.Test;
@@ -119,9 +120,17 @@
   }
 
   @Test public void error() {
-    ResponseBody errorBody = ResponseBody.create(null, "Broken!");
+    MediaType plainText = MediaType.get("text/plain; charset=utf-8");
+    ResponseBody errorBody = ResponseBody.create(plainText, "Broken!");
     Response<?> response = Response.error(400, errorBody);
     assertThat(response.raw()).isNotNull();
+    assertThat(response.raw().body().contentType()).isEqualTo(plainText);
+    assertThat(response.raw().body().contentLength()).isEqualTo(7);
+    try {
+      response.raw().body().source();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
     assertThat(response.code()).isEqualTo(400);
     assertThat(response.message()).isEqualTo("Response.error()");
     assertThat(response.headers().size()).isZero();
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 7b7240dc6..3ffabbc5b 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -20,6 +20,8 @@
 import java.lang.annotation.Retention;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+import java.net.MalformedURLException;
+import java.net.URL;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -35,12 +37,10 @@
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
-import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Rule;
 import org.junit.Test;
 import retrofit2.helpers.DelegatingCallAdapterFactory;
@@ -85,6 +85,10 @@
   }
   interface Extending extends CallMethod {
   }
+  interface TypeParam<T> {
+  }
+  interface ExtendingTypeParam extends TypeParam<String> {
+  }
   interface StringService {
     @GET("/") String get();
   }
@@ -129,15 +133,47 @@
     assertThat(example.toString()).isNotEmpty();
   }
 
-  @Test public void interfaceWithExtendIsNotSupported() {
+  @Test public void interfaceWithTypeParameterThrows() {
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .build();
+
+    server.enqueue(new MockResponse().setBody("Hi"));
+
+    try {
+      retrofit.create(TypeParam.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage("Type parameters are unsupported on retrofit2.RetrofitTest$TypeParam");
+    }
+  }
+
+  @Test public void interfaceWithExtend() throws IOException {
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .build();
+
+    server.enqueue(new MockResponse().setBody("Hi"));
+
+    Extending extending = retrofit.create(Extending.class);
+    String result = extending.getResponseBody().execute().body().string();
+    assertEquals("Hi", result);
+  }
+
+  @Test public void interfaceWithExtendWithTypeParameterThrows() {
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .build();
+
+    server.enqueue(new MockResponse().setBody("Hi"));
+
     try {
-      retrofit.create(Extending.class);
+      retrofit.create(ExtendingTypeParam.class);
       fail();
     } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("API interfaces must not extend other interfaces.");
+      assertThat(e).hasMessage(
+          "Type parameters are unsupported on retrofit2.RetrofitTest$TypeParam "
+              + "which is an interface of retrofit2.RetrofitTest$ExtendingTypeParam");
     }
   }
 
@@ -150,15 +186,9 @@
     };
     Converter.Factory converter = new Converter.Factory() {};
     HttpUrl baseUrl = server.url("/");
-    Executor executor = new Executor() {
-      @Override public void execute(@NotNull Runnable command) {
-        command.run();
-      }
-    };
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new AssertionError();
-      }
+    Executor executor = Runnable::run;
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new AssertionError();
     };
 
     Retrofit one = new Retrofit.Builder()
@@ -439,11 +469,7 @@
           Retrofit retrofit) {
         annotationsRef.set(annotations);
 
-        return new Converter<Object, String>() {
-          @Override public String convert(Object value) throws IOException {
-            return String.valueOf(value);
-          }
-        };
+        return (Converter<Object, String>) String::valueOf;
       }
     }
     Retrofit retrofit = new Retrofit.Builder()
@@ -749,6 +775,14 @@
     assertThat(retrofit.baseUrl()).isSameAs(url);
   }
 
+  @Test public void baseJavaUrlPropagated() throws MalformedURLException {
+    URL url = new URL("http://example.com/");
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(url)
+        .build();
+    assertThat(retrofit.baseUrl()).isEqualTo(HttpUrl.get("http://example.com/"));
+  }
+
   @Test public void clientNullThrows() {
     try {
       new Retrofit.Builder().client(null);
@@ -766,10 +800,8 @@
   }
 
   @Test public void callFactoryPropagated() {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new AssertionError();
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -789,11 +821,9 @@
 
   @Test public void callFactoryUsed() throws IOException {
     final AtomicBoolean called = new AtomicBoolean();
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        called.set(true);
-        return new OkHttpClient().newCall(request);
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      called.set(true);
+      return new OkHttpClient().newCall(request);
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -808,11 +838,7 @@
   }
 
   @Test public void callFactoryReturningNullThrows() throws IOException {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        return null;
-      }
-    };
+    okhttp3.Call.Factory callFactory = request -> null;
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
         .callFactory(callFactory)
@@ -832,10 +858,8 @@
 
   @Test public void callFactoryThrowingPropagates() {
     final RuntimeException cause = new RuntimeException("Broken!");
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw cause;
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw cause;
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -1318,7 +1342,7 @@
 
   @Test public void callbackExecutorPropagatesDefaultAndroid() {
     final Executor executor = Executors.newSingleThreadExecutor();
-    Platform platform = new Platform() {
+    Platform platform = new Platform(true) {
       @Override Executor defaultCallbackExecutor() {
         return executor;
       }
@@ -1330,10 +1354,8 @@
   }
 
   @Test public void callbackExecutorPropagated() {
-    Executor executor = new Executor() {
-      @Override public void execute(@NotNull Runnable command) {
-        throw new AssertionError();
-      }
+    Executor executor = command -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -1345,11 +1367,9 @@
   @Test public void callbackExecutorUsedForSuccess() throws InterruptedException {
     final CountDownLatch runnableLatch = new CountDownLatch(1);
     final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        runnableRef.set(command);
-        runnableLatch.countDown();
-      }
+    Executor executor = command -> {
+      runnableRef.set(command);
+      runnableLatch.countDown();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -1381,11 +1401,9 @@
   @Test public void callbackExecutorUsedForFailure() throws InterruptedException {
     final CountDownLatch runnableLatch = new CountDownLatch(1);
     final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        runnableRef.set(command);
-        runnableLatch.countDown();
-      }
+    Executor executor = command -> {
+      runnableRef.set(command);
+      runnableLatch.countDown();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -1415,11 +1433,7 @@
   }
 
   @Test public void skippedCallbackExecutorNotUsedForSuccess() throws InterruptedException {
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        fail();
-      }
-    };
+    Executor executor = command -> fail();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .callbackExecutor(executor)
@@ -1443,11 +1457,7 @@
   }
 
   @Test public void skippedCallbackExecutorNotUsedForFailure() throws InterruptedException {
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        fail();
-      }
-    };
+    Executor executor = command -> fail();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .callbackExecutor(executor)
diff --git a/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java b/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
index bf3134696..74cc79864 100644
--- a/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
@@ -25,15 +25,11 @@
 public final class ObjectInstanceConverterFactory extends Converter.Factory {
   public static final Object VALUE = new Object();
 
-  @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(
+  @Override public @Nullable Converter<ResponseBody, Object> responseBodyConverter(
       Type type, Annotation[] annotations, Retrofit retrofit) {
     if (type != Object.class) {
       return null;
     }
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return VALUE;
-      }
-    };
+    return value -> VALUE;
   }
 }
diff --git a/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java b/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
index c267d3356..32af21a76 100644
--- a/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.helpers;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import javax.annotation.Nullable;
@@ -28,26 +27,18 @@
 public class ToStringConverterFactory extends Converter.Factory {
   static final MediaType MEDIA_TYPE = MediaType.get("text/plain");
 
-  @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(
+  @Override public @Nullable Converter<ResponseBody, String> responseBodyConverter(
       Type type, Annotation[] annotations, Retrofit retrofit) {
     if (String.class.equals(type)) {
-      return new Converter<ResponseBody, String>() {
-        @Override public String convert(ResponseBody value) throws IOException {
-          return value.string();
-        }
-      };
+      return ResponseBody::string;
     }
     return null;
   }
 
-  @Override public @Nullable Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public @Nullable Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
     if (String.class.equals(type)) {
-      return new Converter<String, RequestBody>() {
-        @Override public RequestBody convert(String value) throws IOException {
-          return RequestBody.create(MEDIA_TYPE, value);
-        }
-      };
+      return value -> RequestBody.create(MEDIA_TYPE, value);
     }
     return null;
   }
diff --git a/samples/pom.xml b/samples/pom.xml
index cd3997811..a37e5450e 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.0-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/samples/src/main/java/com/example/retrofit/ChunkingConverter.java b/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
index 1a2bde63a..7877b80c8 100644
--- a/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
+++ b/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
@@ -49,7 +49,7 @@
    * present on {@code @Body} params.
    */
   static class ChunkingConverterFactory extends Converter.Factory {
-    @Override public @Nullable Converter<?, RequestBody> requestBodyConverter(Type type,
+    @Override public @Nullable Converter<Object, RequestBody> requestBodyConverter(Type type,
         Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
       boolean isBody = false;
       boolean isChunked = false;
@@ -65,19 +65,17 @@
       final Converter<Object, RequestBody> delegate =
           retrofit.nextRequestBodyConverter(this, type, parameterAnnotations, methodAnnotations);
       // Wrap it in a Converter which removes the content length from the delegate's body.
-      return new Converter<Object, RequestBody>() {
-        @Override public RequestBody convert(Object value) throws IOException {
-          final RequestBody realBody = delegate.convert(value);
-          return new RequestBody() {
-            @Override public MediaType contentType() {
-              return realBody.contentType();
-            }
+      return value -> {
+        final RequestBody realBody = delegate.convert(value);
+        return new RequestBody() {
+          @Override public MediaType contentType() {
+            return realBody.contentType();
+          }
 
-            @Override public void writeTo(BufferedSink sink) throws IOException {
-              realBody.writeTo(sink);
-            }
-          };
-        }
+          @Override public void writeTo(BufferedSink sink) throws IOException {
+            realBody.writeTo(sink);
+          }
+        };
       };
     }
   }
diff --git a/website/index.html b/website/index.html
index c34bd1687..8851af552 100644
--- a/website/index.html
+++ b/website/index.html
@@ -144,7 +144,8 @@ <h4>Converters</h4>
                 <li><a href="https://developers.google.com/protocol-buffers/">Protobuf</a>: <code>com.squareup.retrofit2:converter-protobuf</code></li>
                 <li><a href="https://github.com/square/wire">Wire</a>: <code>com.squareup.retrofit2:converter-wire</code></li>
                 <li><a href="http://simple.sourceforge.net/">Simple XML</a>: <code>com.squareup.retrofit2:converter-simplexml</code></li>
-                <li>Scalars (primitives, boxed, and String): <code>com.squareup.retrofit2:converter-scalars</code></li>
+		<li><a href="https://docs.oracle.com/javase/tutorial/jaxb/intro/index.html">JAXB</a>: <code>com.squareup.retrofit2:converter-jaxb</code></li>
+		<li>Scalars (primitives, boxed, and String): <code>com.squareup.retrofit2:converter-scalars</code></li>
               </ul>
               <p>Here's an example of using the <code>GsonConverterFactory</code> class to generate an implementation of the <code>GitHubService</code> interface which uses Gson for its deserialization.</p>
               <pre class="prettyprint">Retrofit retrofit = new Retrofit.Builder()
