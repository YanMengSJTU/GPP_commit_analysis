diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index 0f4b558ec..ed35ee92c 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -33,15 +33,15 @@
 import okio.BufferedSource;
 import okio.Source;
 
-final class Utils {
-  static <T> T checkNotNull(T object, String message) {
+public final class Utils {
+  public static <T> T checkNotNull(T object, String message) {
     if (object == null) {
       throw new NullPointerException(message);
     }
     return object;
   }
 
-  static void closeQuietly(Closeable closeable) {
+  public static void closeQuietly(Closeable closeable) {
     if (closeable == null) return;
     try {
       closeable.close();
@@ -50,7 +50,8 @@ static void closeQuietly(Closeable closeable) {
   }
 
 
-  static CallAdapter<?> resolveCallAdapter(List<CallAdapter.Factory> adapterFactories, Type type) {
+  public static CallAdapter<?> resolveCallAdapter(List<CallAdapter.Factory> adapterFactories,
+                                                  Type type) {
     for (int i = 0, count = adapterFactories.size(); i < count; i++) {
       CallAdapter<?> adapter = adapterFactories.get(i).get(type);
       if (adapter != null) {
@@ -67,7 +68,8 @@ static void closeQuietly(Closeable closeable) {
     throw new IllegalArgumentException(builder.toString());
   }
 
-  static Converter<?> resolveConverter(List<Converter.Factory> converterFactories, Type type) {
+  public static Converter<?> resolveConverter(List<Converter.Factory> converterFactories,
+                                              Type type) {
     for (int i = 0, count = converterFactories.size(); i < count; i++) {
       Converter<?> converter = converterFactories.get(i).get(type);
       if (converter != null) {
@@ -88,7 +90,8 @@ static void closeQuietly(Closeable closeable) {
    * Replace a {@link Response} with an identical copy whose body is backed by a
    * {@link Buffer} rather than a {@link Source}.
    */
-  static ResponseBody readBodyToBytesIfNecessary(final ResponseBody body) throws IOException {
+  public static ResponseBody readBodyToBytesIfNecessary(final ResponseBody body)
+          throws IOException {
     if (body == null) {
       return null;
     }
@@ -101,7 +104,7 @@ static ResponseBody readBodyToBytesIfNecessary(final ResponseBody body) throws I
     return ResponseBody.create(body.contentType(), body.contentLength(), buffer);
   }
 
-  static <T> void validateServiceClass(Class<T> service) {
+  public static <T> void validateServiceClass(Class<T> service) {
     if (!service.isInterface()) {
       throw new IllegalArgumentException("Only interface baseUrl definitions are supported.");
     }
@@ -187,11 +190,11 @@ public static boolean hasUnresolvableType(Type type) {
     }
   }
 
-  static RuntimeException methodError(Method method, String message, Object... args) {
+  public static RuntimeException methodError(Method method, String message, Object... args) {
     return methodError(null, method, message, args);
   }
 
-  static RuntimeException methodError(Throwable cause, Method method, String message,
+  public static RuntimeException methodError(Throwable cause, Method method, String message,
       Object... args) {
     message = String.format(message, args);
     IllegalArgumentException e = new IllegalArgumentException(message
@@ -204,7 +207,7 @@ static RuntimeException methodError(Throwable cause, Method method, String messa
 
   }
 
-  static Type getCallResponseType(Type returnType) {
+  public static Type getCallResponseType(Type returnType) {
     if (!(returnType instanceof ParameterizedType)) {
       throw new IllegalArgumentException(
           "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
