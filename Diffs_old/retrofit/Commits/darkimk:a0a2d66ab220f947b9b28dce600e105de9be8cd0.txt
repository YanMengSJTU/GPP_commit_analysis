diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 7e55362ea..c9313f7af 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -165,11 +165,12 @@ public Object invoke(Object proxy, Method method, @Nullable Object[] args)
                         if (platform.isDefaultMethod(method)) {
                             return platform.invokeDefaultMethod(method, service, proxy, args);
                         }
-
+                        //将该方法映射为ServiceMethood
                         ServiceMethod<Object, Object> serviceMethod =
                                 (ServiceMethod<Object, Object>) loadServiceMethod(method);
+                        //创建OkHttpCall对象
                         OkHttpCall<Object> okHttpCall = new OkHttpCall<>(serviceMethod, args);
-
+                        //利用CallAdapter将okHttpCall转换为指定的类型(默认为Call<Object>)
                         return serviceMethod.callAdapter.adapt(okHttpCall);
                     }
                 });
@@ -606,32 +607,31 @@ public Retrofit build() {
             if (baseUrl == null) {
                 throw new IllegalStateException("Base URL required.");
             }
-
             okhttp3.Call.Factory callFactory = this.callFactory;
+            //如果未指定callFactory，则默认创建一个OkHttpClint来使用
             if (callFactory == null) {
                 callFactory = new OkHttpClient();
             }
 
             Executor callbackExecutor = this.callbackExecutor;
+            //如果未指定callbackExecutor，则获取默认的callbackExecutor
             if (callbackExecutor == null) {
-                //此处创建默认的callbackExecutor
                 callbackExecutor = platform.defaultCallbackExecutor();
             }
 
-            // Make a defensive copy of the adapters and add the default Call adapter.
+            //做一次深度拷贝
             List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);
-            //此处创建默认的CallAdapter
+            //此处将默认的CallAdapter放到集合末尾
             adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));
 
-            // Make a defensive copy of the converters.
+            //做一次深度拷贝
             List<Converter.Factory> converterFactories =
                     new ArrayList<>(1 + this.converterFactories.size());
 
-            // Add the built-in converter factory first. This prevents overriding its behavior but also
-            // ensures correct behavior when using converters that consume all types.
+            //此处将默认的Converter.Factory实现添加到集合首位置
             converterFactories.add(new BuiltInConverters());
             converterFactories.addAll(this.converterFactories);
-
+            //返回Retrofit实例
             return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,
                     callbackExecutor, validateEagerly);
         }
