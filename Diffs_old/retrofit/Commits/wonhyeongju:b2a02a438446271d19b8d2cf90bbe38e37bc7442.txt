diff --git a/retrofit/src/main/java/retrofit2/KeyValue.java b/retrofit/src/main/java/retrofit2/KeyValue.java
new file mode 100644
index 000000000..4273be22c
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/KeyValue.java
@@ -0,0 +1,26 @@
+package retrofit2;
+
+public class KeyValue<K, V> {
+
+    public K key;
+
+    public V value;
+
+    public KeyValue(final K key, final V value) {
+        this.key = key;
+        this.value = value;
+    }
+
+    @Override
+    public String toString() {
+        return key.toString() + ":" + value.toString();
+    }
+
+    public V getValue() {
+        return value;
+    }
+
+    public K getKey() {
+        return key;
+    }
+}
diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index c332fad50..e8bcbb44d 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.lang.reflect.Array;
+import java.util.List;
 import java.util.Map;
 import okhttp3.Headers;
 import okhttp3.MultipartBody;
@@ -138,6 +139,35 @@
       }
     }
   }
+  
+  static final class QueryList<T> extends ParameterHandler<List<KeyValue<String, T>>> {
+    private final Converter<T, String> valueConverter;
+    private final boolean encoded;
+
+    QueryList(Converter<T, String> valueConverter, boolean encoded) {
+      this.valueConverter = valueConverter;
+      this.encoded = encoded;
+    }
+
+    void apply(RequestBuilder builder, List<KeyValue<String, T>> value) throws IOException {
+      if (value == null) {
+        throw new IllegalArgumentException("Query list was null.");
+      }
+
+      for (KeyValue<String, T> item : value) {
+    	  String entryKey = item.getKey();
+          if (entryKey == null) {
+            throw new IllegalArgumentException("Query list item contained null key.");
+          }
+          T entryValue = item.getValue();
+          if (entryValue == null) {
+            throw new IllegalArgumentException(
+                "Query map contained null value for key '" + entryKey + "'.");
+          }
+          builder.addQueryParam(entryKey, valueConverter.convert(entryValue), encoded);  
+      }
+    }
+  }
 
   static final class HeaderMap<T> extends ParameterHandler<Map<String, T>> {
     private final Converter<T, String> valueConverter;
diff --git a/retrofit/src/main/java/retrofit2/http/QueryList.java b/retrofit/src/main/java/retrofit2/http/QueryList.java
new file mode 100644
index 000000000..f17cfcdac
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/QueryList.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Query parameter keys and values appended to the URL.
+ * <p>
+ * Both keys and values are converted to strings using {@link String#valueOf(Object)}.
+ * <p>
+ * Simple Example:
+ * <pre><code>
+ * &#64;GET("/search")
+ * Call&lt;ResponseBody&gt; list(@QueryMap Map&lt;String, String&gt; filters);
+ * </code></pre>
+ * Calling with {@code foo.list(ImmutableMap.of("foo", "bar", "kit", "kat"))} yields
+ * {@code /search?foo=bar&kit=kat}.
+ * <p>
+ * Map keys and values representing parameter values are URL encoded by default. Specify
+ * {@link #encoded() encoded=true} to change this behavior.
+ * <pre><code>
+ * &#64;GET("/search")
+ * Call&lt;ResponseBody&gt; list(@QueryMap(encoded=true) Map&lt;String, String&gt; filters);
+ * </code></pre>
+ * Calling with {@code foo.list(ImmutableMap.of("foo", "foo+bar"))} yields
+ * {@code /search?foo=foo+bar}.
+ * <p>
+ * A {@code null} value for the map, as a key, or as a value is not allowed.
+ *
+ * @see Query
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface QueryList {
+  /** Specifies whether parameter names and values are already URL encoded. */
+  boolean encoded() default false;
+}
