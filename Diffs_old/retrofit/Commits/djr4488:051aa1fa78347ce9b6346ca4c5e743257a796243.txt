diff --git a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbConverterFactory.java b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbConverterFactory.java
index b1317f838..9bbdf307b 100644
--- a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbConverterFactory.java
+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbConverterFactory.java
@@ -17,9 +17,13 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
 import javax.annotation.Nullable;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
+import javax.xml.bind.Marshaller;
+import javax.xml.bind.Unmarshaller;
 import javax.xml.bind.annotation.XmlRootElement;
 import okhttp3.MediaType;
 import okhttp3.RequestBody;
@@ -46,17 +50,38 @@ public static JaxbConverterFactory create(JAXBContext context) {
     return new JaxbConverterFactory(context);
   }
 
+  /** Create an instance using {@code context}, {@code marshaller}, and {@code unmarshaller} for conversion. */
+  @SuppressWarnings("ConstantConditions")
+  public static JaxbConverterFactory create(JAXBContext context, Map<String, Object> marshallerProperties,
+       Map<String, Object> unmarshallerProperties) {
+    if (context == null) throw new NullPointerException("context == null");
+    if (marshallerProperties == null) throw new NullPointerException("marshallerProperties == null");
+    if (unmarshallerProperties == null) throw new NullPointerException("unmarshallerProperties == null");
+    return new JaxbConverterFactory(context, marshallerProperties, unmarshallerProperties);
+  }
+
   /** If null, a new JAXB context will be created for each type to be converted. */
   private final @Nullable JAXBContext context;
+  private final @Nullable Map<String, Object> marshallerProperties;
+  private final @Nullable Map<String, Object> unmarshallerProperties;
 
   private JaxbConverterFactory(@Nullable JAXBContext context) {
     this.context = context;
+    this.marshallerProperties = new HashMap<>();
+    this. unmarshallerProperties = new HashMap<>();
+  }
+
+  private JaxbConverterFactory(@Nullable JAXBContext context, @Nullable Map<String, Object> marshallerProperties,
+      @Nullable Map<String, Object> unmarshallerProperties) {
+    this.context = context;
+    this.marshallerProperties = marshallerProperties;
+    this.unmarshallerProperties = unmarshallerProperties;
   }
 
   @Override public @Nullable Converter<?, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
     if (type instanceof Class && ((Class<?>) type).isAnnotationPresent(XmlRootElement.class)) {
-      return new JaxbRequestConverter<>(contextForType((Class<?>) type), (Class<?>) type);
+      return new JaxbRequestConverter<>(contextForType((Class<?>) type), (Class<?>) type, marshallerProperties);
     }
     return null;
   }
@@ -64,7 +89,7 @@ private JaxbConverterFactory(@Nullable JAXBContext context) {
   @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(
       Type type, Annotation[] annotations, Retrofit retrofit) {
     if (type instanceof Class && ((Class<?>) type).isAnnotationPresent(XmlRootElement.class)) {
-      return new JaxbResponseConverter<>(contextForType((Class<?>) type), (Class<?>) type);
+      return new JaxbResponseConverter<>(contextForType((Class<?>) type), (Class<?>) type, unmarshallerProperties);
     }
     return null;
   }
diff --git a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbRequestConverter.java b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbRequestConverter.java
index 7030c7a90..7ef3e8bde 100644
--- a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbRequestConverter.java
+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbRequestConverter.java
@@ -16,6 +16,8 @@
 package retrofit2.converter.jaxb;
 
 import java.io.IOException;
+import java.util.Map;
+import java.util.Set;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Marshaller;
@@ -30,16 +32,24 @@
   final XMLOutputFactory xmlOutputFactory = XMLOutputFactory.newInstance();
   final JAXBContext context;
   final Class<T> type;
+  final Map<String, Object> marshallerProperties;
 
-  JaxbRequestConverter(JAXBContext context, Class<T> type) {
+  JaxbRequestConverter(JAXBContext context, Class<T> type, Map<String, Object> marshallerProperties) {
     this.context = context;
     this.type = type;
+    this.marshallerProperties = marshallerProperties;
   }
 
   @Override public RequestBody convert(final T value) throws IOException {
     Buffer buffer = new Buffer();
     try {
       Marshaller marshaller = context.createMarshaller();
+      if (!marshallerProperties.isEmpty()) {
+        Set<String> keys = marshallerProperties.keySet();
+        for (String key : keys) {
+          marshaller.setProperty(key, marshallerProperties.get(key));
+        }
+      }
 
       XMLStreamWriter xmlWriter = xmlOutputFactory.createXMLStreamWriter(
           buffer.outputStream(), JaxbConverterFactory.XML.charset().name());
diff --git a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java
index 469b863d1..aa1a4e05d 100644
--- a/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java
+++ b/retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java
@@ -16,6 +16,8 @@
 package retrofit2.converter.jaxb;
 
 import java.io.IOException;
+import java.util.Map;
+import java.util.Set;
 import javax.xml.bind.JAXBContext;
 import javax.xml.bind.JAXBException;
 import javax.xml.bind.Unmarshaller;
@@ -29,10 +31,12 @@
   final XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();
   final JAXBContext context;
   final Class<T> type;
+  final Map<String, Object> unmarshallerProperties;
 
-  JaxbResponseConverter(JAXBContext context, Class<T> type) {
+  JaxbResponseConverter(JAXBContext context, Class<T> type, Map<String, Object> unmarshallerProperties) {
     this.context = context;
     this.type = type;
+    this.unmarshallerProperties = unmarshallerProperties;
 
     // Prevent XML External Entity attacks (XXE).
     xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);
@@ -42,6 +46,13 @@
   @Override public T convert(ResponseBody value) throws IOException {
     try {
       Unmarshaller unmarshaller = context.createUnmarshaller();
+      if (!unmarshallerProperties.isEmpty()) {
+        Set<String> keys = unmarshallerProperties.keySet();
+        for (String key : keys) {
+          unmarshaller.setProperty(key, unmarshallerProperties.get(key));
+        }
+      }
+
       XMLStreamReader streamReader = xmlInputFactory.createXMLStreamReader(value.charStream());
       return unmarshaller.unmarshal(streamReader, type).getValue();
     } catch (JAXBException | XMLStreamException e) {
diff --git a/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java b/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java
index 186d506fb..5c503c634 100644
--- a/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java
+++ b/retrofit-converters/jaxb/src/test/java/retrofit2/converter/jaxb/JaxbConverterFactoryTest.java
@@ -16,7 +16,12 @@
 package retrofit2.converter.jaxb;
 
 import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
 import javax.xml.bind.JAXBContext;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Marshaller;
+
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -46,6 +51,14 @@
       + "</phone_number>"
       + "</contact>";
 
+  static final String SAMPLE_CONTACT_XML_WITHOUT_HEADER = ""
+      + "<contact>"
+      + "<name>Jenny</name>"
+      + "<phone_number type=\"MOBILE\">"
+      + "<number>867-5309</number>"
+      + "</phone_number>"
+      + "</contact>";
+
   interface Service {
     @POST("/") Call<Void> postXml(@Body Contact contact);
     @GET("/") Call<Contact> getXml();
@@ -54,31 +67,57 @@
   @Rule public final MockWebServer server = new MockWebServer();
 
   private Service service;
+  private Service serviceWithUserSuppliedMarshallingProperties;
 
-  @Before public void setUp() {
+  @Before public void setUp() throws JAXBException {
     JaxbConverterFactory factory = JaxbConverterFactory.create();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(factory)
         .build();
     service = retrofit.create(Service.class);
+
+    JAXBContext jaxbContextNoHeader = JAXBContext.newInstance(SAMPLE_CONTACT.getClass());
+    Map<String, Object> marshallerProperties = new HashMap<>();
+    marshallerProperties.put(Marshaller.JAXB_FRAGMENT, true);
+    Map<String, Object> unmarshallerProperties = new HashMap<>();
+    JaxbConverterFactory factoryNoHeader =
+            JaxbConverterFactory.create(jaxbContextNoHeader, marshallerProperties, unmarshallerProperties);
+    Retrofit retrofitNoHeader = new Retrofit.Builder()
+            .baseUrl(server.url("/"))
+            .addConverterFactory(factoryNoHeader)
+            .build();
+    serviceWithUserSuppliedMarshallingProperties = retrofitNoHeader.create(Service.class);
   }
 
   @Test public void xmlRequestBody() throws Exception {
-    server.enqueue(new MockResponse());
+    executeXmlRequestBodyTest(service, SAMPLE_CONTACT_XML);
+  }
 
+  @Test public void xmlRequestBodyWithMarshallerProperties() throws Exception {
+    executeXmlRequestBodyTest(serviceWithUserSuppliedMarshallingProperties, SAMPLE_CONTACT_XML_WITHOUT_HEADER);
+  }
+
+  private <T extends Service> void executeXmlRequestBodyTest(T service, String comparisonXml) throws Exception {
+    server.enqueue(new MockResponse());
     Call<Void> call = service.postXml(SAMPLE_CONTACT);
     call.execute();
-
     RecordedRequest request = server.takeRequest();
     assertThat(request.getHeader("Content-Type")).isEqualTo("application/xml; charset=utf-8");
-    assertThat(request.getBody().readUtf8()).isEqualTo(SAMPLE_CONTACT_XML);
+    assertThat(request.getBody().readUtf8()).isEqualTo(comparisonXml);
   }
 
   @Test public void xmlResponseBody() throws Exception {
-    server.enqueue(new MockResponse()
-        .setBody(SAMPLE_CONTACT_XML));
+    executeXmlResponseBodyTest(service, SAMPLE_CONTACT_XML);
+  }
 
+  @Test public void xmlResponseBodyWithUnmarshallerProperties() throws Exception {
+    executeXmlResponseBodyTest(serviceWithUserSuppliedMarshallingProperties, SAMPLE_CONTACT_XML_WITHOUT_HEADER);
+  }
+
+  private <T extends Service> void executeXmlResponseBodyTest(T service, String bodyXml) throws Exception {
+    server.enqueue(new MockResponse()
+        .setBody(bodyXml));
     Call<Contact> call = service.getXml();
     Response<Contact> response = call.execute();
     assertThat(response.body()).isEqualTo(SAMPLE_CONTACT);
diff --git a/retrofit/src/main/java/retrofit2/Converter.java b/retrofit/src/main/java/retrofit2/Converter.java
index 37a64f8d1..cb9187887 100644
--- a/retrofit/src/main/java/retrofit2/Converter.java
+++ b/retrofit/src/main/java/retrofit2/Converter.java
@@ -20,6 +20,8 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import javax.annotation.Nullable;
+import javax.xml.bind.Marshaller;
+
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import retrofit2.http.Body;
