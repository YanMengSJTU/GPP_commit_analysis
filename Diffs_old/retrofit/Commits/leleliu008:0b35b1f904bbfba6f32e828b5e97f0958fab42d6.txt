diff --git a/.gitignore b/.gitignore
index 846cab690..292785b7e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -13,6 +13,8 @@ lib
 target
 pom.xml.*
 release.properties
+retrofit/local.properties
+retrofit/.gradle/
 
 # Idea
 .idea
diff --git a/README.md b/README.md
index 60b96a0e2..9ce04e134 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,10 @@
 Retrofit
 ========
+这是对Retrofit的扩展，需要使用的话，添加如下依赖：
+```
+api("com.fpliu:retrofit:2.4.0")
+```
+=========================================================
 
 Type-safe HTTP client for Android and Java by Square, Inc.
 
diff --git a/retrofit/build.gradle.kts b/retrofit/build.gradle.kts
new file mode 100644
index 000000000..e18c1539f
--- /dev/null
+++ b/retrofit/build.gradle.kts
@@ -0,0 +1,135 @@
+import java.util.Properties
+
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        //用于上传maven包到jCenter中
+        //https://github.com/bintray/gradle-bintray-plugin
+        classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3")
+    }
+}
+
+plugins {
+    id("com.jfrog.bintray").version("1.7.3")
+    java
+    maven
+}
+
+java {
+    sourceSets {
+        getByName("main") {
+            java.srcDirs("src/main/java")
+        }
+    }
+}
+
+repositories {
+    jcenter()
+    google()
+}
+
+dependencies {
+    implementation("com.squareup.okhttp3:okhttp:3.10.0")
+    implementation("com.google.code.findbugs:jsr305:3.0.2")
+    
+    compileOnly("com.google.android:android:4.1.1.4")
+    compileOnly("org.codehaus.mojo:animal-sniffer-annotations:1.16")
+}
+
+val rootProjectName: String = project.name
+
+// 这里是groupId,必须填写,一般填你唯一的包名
+group = "com.fpliu"
+
+//这个是版本号，必须填写
+version = "2.4.0"
+
+// 项目的主页,这个是说明，可随便填
+val siteUrl = "https://github.com/leleliu008/$rootProjectName"
+
+// GitHub仓库的URL,这个是说明，可随便填
+val gitUrl = "https://github.com/leleliu008/$rootProjectName"
+
+
+tasks {
+    "install"(Upload::class) {
+        repositories {
+            withConvention(MavenRepositoryHandlerConvention::class) {
+                mavenInstaller {
+                    configuration = configurations.getByName("archives")
+                    pom.project {
+                        withGroovyBuilder {
+                            "packaging"("jar")
+                            "artifactId"(rootProjectName)
+                            "name"(rootProjectName)
+                            "url"(siteUrl)
+                            "licenses" {
+                                "license" {
+                                    "name"("The Apache Software License, Version 2.0")
+                                    "url"("http://www.apache.org/licenses/LICENSE-2.0.txt")
+                                }
+                            }
+                            "developers" {
+                                "developer" {
+                                    "id"("fpliu")
+                                    "name"("fpliu")
+                                    "email"("leleliu008@gmail.com")
+                                }
+                            }
+                            "scm" {
+                                "connection"(gitUrl)
+                                "developerConnection"(gitUrl)
+                                "url"(siteUrl)
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+// 生成jar包的task
+val sourcesJarTask = task("sourcesJar", Jar::class) {
+    from(java.sourceSets["main"].java.srcDirs)
+    baseName = rootProjectName
+    classifier = "sources"
+}
+
+// 生成jarDoc的task
+val javadocTask = task("javadoc_", Javadoc::class) {
+    source(java.sourceSets["main"].java.srcDirs)
+//    classpath += project.files(java.)
+    isFailOnError = false
+}
+
+// 生成javaDoc的jar
+val javadocJarTask = task("javadocJar", Jar::class) {
+    from(javadocTask.destinationDir)
+    baseName = rootProjectName
+    classifier = "javadoc"
+}.dependsOn(javadocTask)
+
+artifacts {
+    add("archives", javadocJarTask)
+    add("archives", sourcesJarTask)
+}
+
+val properties = Properties().apply { load(project.rootProject.file("local.properties").inputStream()) }
+bintray {
+    user = properties.getProperty("bintray.user")
+    key = properties.getProperty("bintray.apikey")
+
+    setConfigurations("archives")
+    pkg = PackageConfig().apply {
+        userOrg = "fpliu"
+        repo = "newton"
+        name = rootProjectName
+        websiteUrl = siteUrl
+        vcsUrl = gitUrl
+        setLicenses("Apache-2.0")
+        publish = true
+    }
+}
diff --git a/retrofit/gradle/wrapper/gradle-wrapper.jar b/retrofit/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..f6b961fd5
Binary files /dev/null and b/retrofit/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/retrofit/gradle/wrapper/gradle-wrapper.properties b/retrofit/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..bf3de2183
--- /dev/null
+++ b/retrofit/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/retrofit/gradlew b/retrofit/gradlew
new file mode 100755
index 000000000..cccdd3d51
--- /dev/null
+++ b/retrofit/gradlew
@@ -0,0 +1,172 @@
+#!/usr/bin/env sh
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
diff --git a/retrofit/gradlew.bat b/retrofit/gradlew.bat
new file mode 100644
index 000000000..e95643d6a
--- /dev/null
+++ b/retrofit/gradlew.bat
@@ -0,0 +1,84 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/retrofit/settings.gradle.kts b/retrofit/settings.gradle.kts
new file mode 100644
index 000000000..cb0294d2f
--- /dev/null
+++ b/retrofit/settings.gradle.kts
@@ -0,0 +1 @@
+rootProject.name = "retrofit"
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index d6be7c63e..57eae6b06 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -530,7 +530,7 @@ public static String toJSONString(Map<String, Object> map) {
               || clazz == Boolean.class) {
         jsonStringBuilder.append(value).append(",");
       } else {
-        jsonStringBuilder.append("\"").append(value).append("\"").append(",");
+        jsonStringBuilder.append("\"").append(escapeJSONString(value.toString())).append("\"").append(",");
       }
     }
     String result = jsonStringBuilder.toString();
@@ -540,4 +540,25 @@ public static String toJSONString(Map<String, Object> map) {
     result += "}";
     return result;
   }
+
+  private static String escapeJSONString(String value) {
+    if (value == null || value == "") return value;
+    StringBuilder stringBuilder = new StringBuilder(value);
+    int length = value.length();
+    for (int i = 0; i < length; i++) {
+      char ch = value.charAt(i);
+      switch (ch) {
+        case '"': stringBuilder.append("\"");break;
+        case '\\': stringBuilder.append("\\\\");break;
+        case '/': stringBuilder.append("\\/");break;
+        case '\t': stringBuilder.append("\\t");break;
+        case '\r': stringBuilder.append("\\r");break;
+        case '\n': stringBuilder.append("\\n");break;
+        case '\b': stringBuilder.append("\\b");break;
+        case '\f': stringBuilder.append("\\f");break;
+        default: stringBuilder.append(ch);
+      }
+    }
+    return stringBuilder.toString();
+  }
 }
