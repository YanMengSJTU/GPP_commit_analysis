diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
index 8f23798d2..ab96d7dcd 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -1205,8 +1205,13 @@ private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
     Retrofit.Headers headersAnnotation = type.getAnnotation(Retrofit.Headers.class);
     if (headersAnnotation != null) {
       for (String header : headersAnnotation.value()) {
-        String[] tokens = header.split(":");
-        headerMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+        try {
+          String[] tokens = header.split(":");
+          headerMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+        } catch (ArrayIndexOutOfBoundsException e) {
+          errorReporter.reportError(
+              "Invalid syntax: @Retrofit.Headers(\"" + header + "\")", type);
+        }
       }
       vars.headers = headerMap;
     }
@@ -1215,8 +1220,13 @@ private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
     Retrofit.RetryHeaders retryHeadersAnnotation = type.getAnnotation(Retrofit.RetryHeaders.class);
     if (retryHeadersAnnotation != null) {
       for (String header : retryHeadersAnnotation.value()) {
-        String[] tokens = header.split(":");
-        retryHeaderMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+        try {
+          String[] tokens = header.split(":");
+          retryHeaderMap.put(tokens[0].trim(), "\"" + tokens[1].trim() + "\"");
+        } catch (ArrayIndexOutOfBoundsException e) {
+          errorReporter.reportError(
+              "Invalid syntax: @Retrofit.RetryHeaders(\"" + header + "\")", type);
+        }
       }
       vars.retryHeaders = retryHeaderMap;
     }
