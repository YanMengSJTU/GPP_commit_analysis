diff --git a/.gitignore b/.gitignore
index 133735f7b..2fe9c596e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,7 @@
+.gradle
+/local.properties
+.DS_Store
+
 .classpath
 .project
 .settings
diff --git a/.travis.yml b/.travis.yml
deleted file mode 100644
index 3ba5e9a65..000000000
--- a/.travis.yml
+++ /dev/null
@@ -1,8 +0,0 @@
-language: java
-
-branches:
-  except:
-    - gh-pages
-
-notifications:
-  email: false
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
deleted file mode 100644
index 9b568ddc6..000000000
--- a/CONTRIBUTING.md
+++ /dev/null
@@ -1,17 +0,0 @@
-Contributing
-============
-
-If you would like to contribute code to Retrofit you can do so through GitHub by
-forking the repository and sending a pull request.
-
-When submitting code, please make every effort to follow existing conventions
-and style in order to keep the code as readable as possible. Please also make
-sure your code compiles by running `mvn clean verify`. Checkstyle failures
-during compilation indicate errors in your style and can be viewed in the
-`checkstyle-result.xml` file.
-
-Before your code can be accepted into the project you must also sign the
-[Individual Contributor License Agreement (CLA)][1].
-
-
- [1]: https://spreadsheets.google.com/spreadsheet/viewform?formkey=dDViT2xzUHAwRkI3X3k5Z0lQM091OGc6MQ&ndplr=1
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 000000000..80eec1a79
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,16 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        mavenCentral()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:0.9.+'
+    }
+}
+
+allprojects {
+    repositories {
+        mavenCentral()
+    }
+}
diff --git a/checkstyle.xml b/checkstyle.xml
deleted file mode 100644
index 4727a6aeb..000000000
--- a/checkstyle.xml
+++ /dev/null
@@ -1,122 +0,0 @@
-<?xml version="1.0"?>
-<!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
-
-<module name="Checker">
-    <module name="NewlineAtEndOfFile"/>
-    <module name="FileLength"/>
-    <module name="FileTabCharacter"/>
-
-    <!-- Trailing spaces -->
-    <module name="RegexpSingleline">
-        <property name="format" value="\s+$"/>
-        <property name="message" value="Line has trailing spaces."/>
-    </module>
-
-    <module name="TreeWalker">
-        <property name="cacheFile" value="${checkstyle.cache.file}"/>
-
-        <!-- Checks for Javadoc comments.                     -->
-        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-        <!--module name="JavadocMethod"/-->
-        <!--module name="JavadocType"/-->
-        <!--module name="JavadocVariable"/-->
-        <!--module name="JavadocStyle"/-->
-
-
-        <!-- Checks for Naming Conventions.                  -->
-        <!-- See http://checkstyle.sf.net/config_naming.html -->
-        <module name="ConstantName"/>
-        <module name="LocalFinalVariableName"/>
-        <module name="LocalVariableName"/>
-        <module name="MemberName"/>
-        <module name="MethodName"/>
-        <module name="PackageName"/>
-        <module name="ParameterName"/>
-        <module name="StaticVariableName"/>
-        <module name="TypeName"/>
-
-
-        <!-- Checks for imports                              -->
-        <!-- See http://checkstyle.sf.net/config_import.html -->
-        <module name="AvoidStarImport"/>
-        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
-        <module name="RedundantImport"/>
-        <module name="UnusedImports"/>
-
-
-        <!-- Checks for Size Violations.                    -->
-        <!-- See http://checkstyle.sf.net/config_sizes.html -->
-        <module name="LineLength">
-            <property name="max" value="100"/>
-        </module>
-        <module name="MethodLength"/>
-        <!--module name="ParameterNumber"/-->
-
-
-        <!-- Checks for whitespace                               -->
-        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-        <module name="GenericWhitespace"/>
-        <module name="EmptyForIteratorPad"/>
-        <module name="MethodParamPad"/>
-        <module name="NoWhitespaceAfter">
-          <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
-        </module>
-        <module name="NoWhitespaceBefore"/>
-        <module name="OperatorWrap"/>
-        <module name="ParenPad"/>
-        <module name="TypecastParenPad"/>
-        <module name="WhitespaceAfter"/>
-        <module name="WhitespaceAround"/>
-
-
-        <!-- Modifier Checks                                    -->
-        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-        <module name="ModifierOrder"/>
-        <module name="RedundantModifier"/>
-
-
-        <!-- Checks for blocks. You know, those {}'s         -->
-        <!-- See http://checkstyle.sf.net/config_blocks.html -->
-        <!--module name="AvoidNestedBlocks"/-->
-        <!--module name="EmptyBlock"/-->
-        <module name="LeftCurly"/>
-        <!--module name="NeedBraces"/-->
-        <module name="RightCurly"/>
-
-
-        <!-- Checks for common coding problems               -->
-        <!-- See http://checkstyle.sf.net/config_coding.html -->
-        <!--module name="AvoidInlineConditionals"/-->
-        <module name="CovariantEquals"/>
-        <module name="DoubleCheckedLocking"/>
-        <module name="EmptyStatement"/>
-        <module name="EqualsAvoidNull"/>
-        <module name="EqualsHashCode"/>
-        <!--module name="HiddenField"/-->
-        <module name="IllegalInstantiation"/>
-        <!--module name="InnerAssignment"/-->
-        <!--module name="MagicNumber"/-->
-        <module name="MissingSwitchDefault"/>
-        <module name="RedundantThrows"/>
-        <module name="SimplifyBooleanExpression"/>
-        <module name="SimplifyBooleanReturn"/>
-
-        <!-- Checks for class design                         -->
-        <!-- See http://checkstyle.sf.net/config_design.html -->
-        <!--module name="DesignForExtension"/-->
-        <!--module name="FinalClass"/-->
-        <!--module name="HideUtilityClassConstructor"/-->
-        <module name="InterfaceIsType"/>
-        <!--module name="VisibilityModifier"/-->
-
-
-        <!-- Miscellaneous other checks.                   -->
-        <!-- See http://checkstyle.sf.net/config_misc.html -->
-        <module name="ArrayTypeStyle"/>
-        <!--module name="FinalParameters"/-->
-        <!--module name="TodoComment"/-->
-        <module name="UpperEll"/>
-    </module>
-</module>
diff --git a/deploy_website.sh b/deploy_website.sh
deleted file mode 100755
index 3d007cd5b..000000000
--- a/deploy_website.sh
+++ /dev/null
@@ -1,45 +0,0 @@
-#!/bin/bash
-
-set -ex
-
-REPO="git@github.com:square/retrofit.git"
-GROUP_ID="com.squareup.retrofit"
-ARTIFACT_ID="retrofit"
-
-DIR=temp-clone
-
-# Delete any existing temporary website clone
-rm -rf $DIR
-
-# Clone the current repo into temp folder
-git clone $REPO $DIR
-
-# Move working directory into temp folder
-cd $DIR
-
-# Checkout and track the gh-pages branch
-git checkout -t origin/gh-pages
-
-# Delete everything
-rm -rf *
-
-# Copy website files from real repo
-cp -R ../website/* .
-
-# Download the latest javadoc
-curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc" > javadoc.zip
-mkdir javadoc
-unzip javadoc.zip -d javadoc
-rm javadoc.zip
-
-# Stage all files in git and create a commit
-git add .
-git add -u
-git commit -m "Website at $(date)"
-
-# Push the new files up to GitHub
-git push origin gh-pages
-
-# Delete our temp folder
-cd ..
-rm -rf $DIR
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 000000000..5d08ba75b
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,18 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Settings specified in this file will override any Gradle settings
+# configured through the IDE.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..8c0fb64a8
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..5de946b07
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Wed Apr 10 15:27:10 PDT 2013
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=http\://services.gradle.org/distributions/gradle-1.10-all.zip
diff --git a/gradlew b/gradlew
new file mode 100644
index 000000000..91a7e269e
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 000000000..8a0b282aa
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index f2650ecdb..000000000
--- a/pom.xml
+++ /dev/null
@@ -1,221 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
- Copyright (C) 2012 Square, Inc.
-
-  Licensed under the Apache License, Version 2.0 (the "License");
-  you may not use this file except in compliance with the License.
-  You may obtain a copy of the License at
-
-       http://www.apache.org/licenses/LICENSE-2.0
-
-  Unless required by applicable law or agreed to in writing, software
-  distributed under the License is distributed on an "AS IS" BASIS,
-  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  See the License for the specific language governing permissions and
-  limitations under the License.
--->
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>org.sonatype.oss</groupId>
-    <artifactId>oss-parent</artifactId>
-    <version>7</version>
-  </parent>
-
-  <groupId>com.squareup.retrofit</groupId>
-  <artifactId>parent</artifactId>
-  <version>1.6.1-SNAPSHOT</version>
-  <packaging>pom</packaging>
-
-  <name>Retrofit (Parent)</name>
-  <description>Type-safe REST client for Android and Java by Square, Inc.</description>
-  <url>http://github.com/square/retrofit/</url>
-
-  <modules>
-    <module>retrofit</module>
-    <module>retrofit-converters</module>
-    <module>retrofit-mock</module>
-    <module>retrofit-samples</module>
-  </modules>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    <project.reporting.sourceEncoding>UTF-8</project.reporting.sourceEncoding>
-
-    <!-- Compilation -->
-    <java.version>1.6</java.version>
-
-    <!-- Dependencies -->
-    <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
-    <gson.version>2.2.4</gson.version>
-    <okhttp.version>1.6.0</okhttp.version>
-    <rxjava.version>0.19.0</rxjava.version>
-    <appengine.version>1.8.9</appengine.version>
-
-    <!-- Converter Dependencies -->
-    <protobuf.version>2.5.0</protobuf.version>
-    <jackson.version>2.3.1</jackson.version>
-    <wire.version>1.2.0</wire.version>
-    <simplexml.version>2.7.1</simplexml.version>
-
-    <!-- Test Dependencies -->
-    <junit.version>4.10</junit.version>
-    <assertj.version>1.5.0</assertj.version>
-    <mockito.version>1.9.5</mockito.version>
-    <guava.version>16.0</guava.version>
-  </properties>
-
-  <scm>
-    <url>http://github.com/square/retrofit</url>
-    <connection>scm:git:git://github.com/square/retrofit.git</connection>
-    <developerConnection>scm:git:ssh://git@github.com/square/retrofit.git</developerConnection>
-    <tag>HEAD</tag>
-  </scm>
-
-  <issueManagement>
-    <system>GitHub Issues</system>
-    <url>http://github.com/square/retrofit/issues</url>
-  </issueManagement>
-
-  <licenses>
-    <license>
-      <name>Apache 2.0</name>
-      <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-    </license>
-  </licenses>
-
-  <organization>
-    <name>Square, Inc.</name>
-    <url>http://squareup.com</url>
-  </organization>
-
-  <dependencyManagement>
-    <dependencies>
-      <dependency>
-        <groupId>com.google.android</groupId>
-        <artifactId>android</artifactId>
-        <version>${android.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup.okhttp</groupId>
-        <artifactId>okhttp</artifactId>
-        <version>${okhttp.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup.okhttp</groupId>
-        <artifactId>okhttp-urlconnection</artifactId>
-        <version>${okhttp.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.code.gson</groupId>
-        <artifactId>gson</artifactId>
-        <version>${gson.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.netflix.rxjava</groupId>
-        <artifactId>rxjava-core</artifactId>
-        <version>${rxjava.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.appengine</groupId>
-        <artifactId>appengine-api-1.0-sdk</artifactId>
-        <version>${appengine.version}</version>
-      </dependency>
-
-      <dependency>
-        <groupId>com.google.protobuf</groupId>
-        <artifactId>protobuf-java</artifactId>
-        <version>${protobuf.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.fasterxml.jackson.core</groupId>
-        <artifactId>jackson-databind</artifactId>
-        <version>${jackson.version}</version>
-     </dependency>
-      <dependency>
-        <groupId>com.squareup.wire</groupId>
-        <artifactId>wire-runtime</artifactId>
-        <version>${wire.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.simpleframework</groupId>
-        <artifactId>simple-xml</artifactId>
-        <version>${simplexml.version}</version>
-      </dependency>
-
-      <dependency>
-        <groupId>junit</groupId>
-        <artifactId>junit</artifactId>
-        <version>${junit.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.assertj</groupId>
-        <artifactId>assertj-core</artifactId>
-        <version>${assertj.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>org.mockito</groupId>
-        <artifactId>mockito-core</artifactId>
-        <version>${mockito.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.google.guava</groupId>
-        <artifactId>guava</artifactId>
-        <version>${guava.version}</version>
-      </dependency>
-      <dependency>
-        <groupId>com.squareup.okhttp</groupId>
-        <artifactId>mockwebserver</artifactId>
-        <version>${okhttp.version}</version>
-      </dependency>
-    </dependencies>
-  </dependencyManagement>
-
-  <build>
-    <pluginManagement>
-      <plugins>
-        <plugin>
-          <groupId>org.apache.maven.plugins</groupId>
-          <artifactId>maven-compiler-plugin</artifactId>
-          <version>3.0</version>
-          <configuration>
-            <source>${java.version}</source>
-            <target>${java.version}</target>
-          </configuration>
-        </plugin>
-      </plugins>
-    </pluginManagement>
-
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-release-plugin</artifactId>
-        <version>2.5</version>
-        <configuration>
-          <autoVersionSubmodules>true</autoVersionSubmodules>
-        </configuration>
-      </plugin>
-
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-checkstyle-plugin</artifactId>
-        <version>2.9.1</version>
-        <configuration>
-          <failsOnError>true</failsOnError>
-          <configLocation>checkstyle.xml</configLocation>
-          <consoleOutput>true</consoleOutput>
-        </configuration>
-        <executions>
-          <execution>
-            <phase>verify</phase>
-            <goals>
-              <goal>checkstyle</goal>
-            </goals>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/rapidrest/build.gradle b/rapidrest/build.gradle
new file mode 100644
index 000000000..d4001f4d4
--- /dev/null
+++ b/rapidrest/build.gradle
@@ -0,0 +1,28 @@
+apply plugin: 'android-library'
+
+android {
+    compileSdkVersion 19
+    buildToolsVersion "19.1.0"
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion 19
+        versionCode 1
+        versionName "0.1.0"
+    }
+    buildTypes {
+        release {
+            runProguard false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
+        }
+    }
+}
+
+dependencies {
+    provided 'com.android.support:support-v4:19.1.0'
+    provided 'com.squareup.okhttp:okhttp:2.0.0'
+    provided 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
+    provided 'com.google.code.gson:gson:2.2.4'
+    provided 'org.simpleframework:simple-xml:2.7.1'
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+}
diff --git a/rapidrest/proguard-rules.txt b/rapidrest/proguard-rules.txt
new file mode 100644
index 000000000..8d8502988
--- /dev/null
+++ b/rapidrest/proguard-rules.txt
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in C:/Android/android-studio/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the ProGuard
+# include property in project.properties.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
\ No newline at end of file
diff --git a/rapidrest/src/main/AndroidManifest.xml b/rapidrest/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..aa6174f9b
--- /dev/null
+++ b/rapidrest/src/main/AndroidManifest.xml
@@ -0,0 +1,3 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="rapid.rest">
+</manifest>
diff --git a/retrofit/src/main/java/retrofit/Callback.java b/rapidrest/src/main/java/rapid/rest/Callback.java
similarity index 93%
rename from retrofit/src/main/java/retrofit/Callback.java
rename to rapidrest/src/main/java/rapid/rest/Callback.java
index d05acdb63..b4e75b71f 100644
--- a/retrofit/src/main/java/retrofit/Callback.java
+++ b/rapidrest/src/main/java/rapid/rest/Callback.java
@@ -13,9 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
-
-import retrofit.client.Response;
+package rapid.rest;
 
 /**
  * Communicates responses from a server or offline requests. One and only one method will be
@@ -34,7 +32,7 @@
 public interface Callback<T> {
 
   /** Successful HTTP response. */
-  void success(T t, Response response);
+  void success(T t, rapid.rest.client.Response response);
 
   /**
    * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected
diff --git a/retrofit/src/main/java/retrofit/CallbackRunnable.java b/rapidrest/src/main/java/rapid/rest/CallbackRunnable.java
similarity index 91%
rename from retrofit/src/main/java/retrofit/CallbackRunnable.java
rename to rapidrest/src/main/java/rapid/rest/CallbackRunnable.java
index afd663602..31a1aca45 100644
--- a/retrofit/src/main/java/retrofit/CallbackRunnable.java
+++ b/rapidrest/src/main/java/rapid/rest/CallbackRunnable.java
@@ -13,16 +13,16 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.util.concurrent.Executor;
 
-import static retrofit.RetrofitError.unexpectedError;
+import static rapid.rest.RetrofitError.unexpectedError;
 
 /**
  * A {@link Runnable} executed on a background thread to invoke {@link #obtainResponse()} which
  * performs an HTTP request. The response of the request, whether it be an object or exception, is
- * then marshaled to the supplied {@link Executor} in the form of a method call on a
+ * then marshaled to the supplied {@link java.util.concurrent.Executor} in the form of a method call on a
  * {@link Callback}.
  */
 abstract class CallbackRunnable<T> implements Runnable {
diff --git a/retrofit/src/main/java/retrofit/Endpoint.java b/rapidrest/src/main/java/rapid/rest/Endpoint.java
similarity index 95%
rename from retrofit/src/main/java/retrofit/Endpoint.java
rename to rapidrest/src/main/java/rapid/rest/Endpoint.java
index 59a35646b..edf9a4863 100644
--- a/retrofit/src/main/java/retrofit/Endpoint.java
+++ b/rapidrest/src/main/java/rapid/rest/Endpoint.java
@@ -1,4 +1,4 @@
-package retrofit;
+package rapid.rest;
 
 /**
  * Represents an API endpoint URL and associated name. Callers should always consult the instance
diff --git a/retrofit/src/main/java/retrofit/Endpoints.java b/rapidrest/src/main/java/rapid/rest/Endpoints.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/Endpoints.java
rename to rapidrest/src/main/java/rapid/rest/Endpoints.java
index 62a062b5e..db1a95952 100644
--- a/retrofit/src/main/java/retrofit/Endpoints.java
+++ b/rapidrest/src/main/java/rapid/rest/Endpoints.java
@@ -1,4 +1,4 @@
-package retrofit;
+package rapid.rest;
 
 /**
  * Static factory methods for creating {@link Endpoint} instances.
diff --git a/retrofit/src/main/java/retrofit/ErrorHandler.java b/rapidrest/src/main/java/rapid/rest/ErrorHandler.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/ErrorHandler.java
rename to rapidrest/src/main/java/rapid/rest/ErrorHandler.java
index 9934528ce..854976650 100644
--- a/retrofit/src/main/java/retrofit/ErrorHandler.java
+++ b/rapidrest/src/main/java/rapid/rest/ErrorHandler.java
@@ -13,10 +13,10 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 /**
- * A hook allowing clients to customize {@link retrofit.client.Response response} exceptions.
+ * A hook allowing clients to customize {@link rapid.rest.client.Response response} exceptions.
  *
  * @author Sam Beran sberan@gmail.com
  */
diff --git a/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java b/rapidrest/src/main/java/rapid/rest/ExceptionCatchingTypedInput.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
rename to rapidrest/src/main/java/rapid/rest/ExceptionCatchingTypedInput.java
index 40e222b15..a43cd2221 100644
--- a/retrofit/src/main/java/retrofit/ExceptionCatchingTypedInput.java
+++ b/rapidrest/src/main/java/rapid/rest/ExceptionCatchingTypedInput.java
@@ -1,8 +1,9 @@
-package retrofit;
+package rapid.rest;
 
 import java.io.IOException;
 import java.io.InputStream;
-import retrofit.mime.TypedInput;
+
+import rapid.rest.mime.TypedInput;
 
 class ExceptionCatchingTypedInput implements TypedInput {
   private final TypedInput delegate;
diff --git a/rapidrest/src/main/java/rapid/rest/Platform.java b/rapidrest/src/main/java/rapid/rest/Platform.java
new file mode 100644
index 000000000..c2975ff75
--- /dev/null
+++ b/rapidrest/src/main/java/rapid/rest/Platform.java
@@ -0,0 +1,197 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package rapid.rest;
+
+import android.os.Build;
+import android.os.Process;
+
+import com.google.gson.Gson;
+
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+
+import static android.os.Process.THREAD_PRIORITY_BACKGROUND;
+import static java.lang.Thread.MIN_PRIORITY;
+
+public abstract class Platform {
+    private static final Platform PLATFORM = new Android();
+
+    static Platform get() {
+        return PLATFORM;
+    }
+
+    abstract rapid.rest.converter.Converter defaultConverter();
+
+    abstract rapid.rest.client.Client.Provider defaultClient();
+
+    abstract Executor defaultHttpExecutor();
+
+    abstract Executor defaultCallbackExecutor();
+
+    abstract RestAdapter.Log defaultLog();
+
+    /**
+     * Provides sane defaults for operation on the JVM.
+     */
+    private static class Base extends rapid.rest.Platform {
+        @Override
+        rapid.rest.converter.Converter defaultConverter() {
+            return new rapid.rest.converter.GsonConverter(new Gson());
+        }
+
+        @Override
+        rapid.rest.client.Client.Provider defaultClient() {
+            final rapid.rest.client.Client client;
+            if (hasOkHttpOnClasspath()) {
+                client = OkClientInstantiator.instantiate();
+            } else {
+                client = new rapid.rest.client.UrlConnectionClient();
+            }
+            return new rapid.rest.client.Client.Provider() {
+                @Override
+                public rapid.rest.client.Client get() {
+                    return client;
+                }
+            };
+        }
+
+        @Override
+        Executor defaultHttpExecutor() {
+            return Executors.newCachedThreadPool(new ThreadFactory() {
+                @Override
+                public Thread newThread(final Runnable r) {
+                    return new Thread(new Runnable() {
+                        @Override
+                        public void run() {
+                            Thread.currentThread().setPriority(MIN_PRIORITY);
+                            r.run();
+                        }
+                    }, RestAdapter.IDLE_THREAD_NAME);
+                }
+            });
+        }
+
+        @Override
+        Executor defaultCallbackExecutor() {
+            return new Utils.SynchronousExecutor();
+        }
+
+        @Override
+        RestAdapter.Log defaultLog() {
+            return new RestAdapter.Log() {
+                @Override
+                public void log(String message) {
+                    System.out.println(message);
+                }
+            };
+        }
+    }
+
+    /**
+     * Provides sane defaults for operation on Android.
+     */
+    private static class Android extends rapid.rest.Platform {
+        @Override
+        rapid.rest.converter.Converter defaultConverter() {
+            return new rapid.rest.converter.GsonConverter(new Gson());
+        }
+
+        @Override
+        rapid.rest.client.Client.Provider defaultClient() {
+            final rapid.rest.client.Client client;
+            if (hasOkHttpOnClasspath()) {
+                client = OkClientInstantiator.instantiate();
+            } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {
+                client = new rapid.rest.android.AndroidApacheClient();
+            } else {
+                client = new rapid.rest.client.UrlConnectionClient();
+            }
+            return new rapid.rest.client.Client.Provider() {
+                @Override
+                public rapid.rest.client.Client get() {
+                    return client;
+                }
+            };
+        }
+
+        @Override
+        Executor defaultHttpExecutor() {
+            return Executors.newCachedThreadPool(new ThreadFactory() {
+                @Override
+                public Thread newThread(final Runnable r) {
+                    return new Thread(new Runnable() {
+                        @Override
+                        public void run() {
+                            Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND);
+                            r.run();
+                        }
+                    }, RestAdapter.IDLE_THREAD_NAME);
+                }
+            });
+        }
+
+        @Override
+        Executor defaultCallbackExecutor() {
+            return new rapid.rest.android.MainThreadExecutor();
+        }
+
+        @Override
+        RestAdapter.Log defaultLog() {
+            return new rapid.rest.android.AndroidLog("Retrofit");
+        }
+    }
+
+    /**
+     * Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath.
+     */
+    private static boolean hasOkHttpOnClasspath() {
+        boolean okUrlFactory = false;
+        try {
+            Class.forName("com.squareup.okhttp.OkUrlFactory");
+            okUrlFactory = true;
+        } catch (ClassNotFoundException e) {
+        }
+
+        boolean okHttpClient = false;
+        try {
+            Class.forName("com.squareup.okhttp.OkHttpClient");
+            okHttpClient = true;
+        } catch (ClassNotFoundException e) {
+        }
+
+        if (okHttpClient != okUrlFactory) {
+            throw new RuntimeException(""
+                    + "Retrofit detected an unsupported OkHttp on the classpath.\n"
+                    + "To use OkHttp with this version of Retrofit, you'll need:\n"
+                    + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n"
+                    + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n"
+                    + "Note that OkHttp 2.0.0+ is supported!");
+        }
+
+        return okHttpClient;
+    }
+
+    /**
+     * Indirection for OkHttp class to prevent VerifyErrors on Android 2.0 and earlier when the
+     * dependency is not present.
+     */
+    private static class OkClientInstantiator {
+        static rapid.rest.client.Client instantiate() {
+            return new rapid.rest.client.OkClient();
+        }
+    }
+}
diff --git a/retrofit/src/main/java/retrofit/Profiler.java b/rapidrest/src/main/java/rapid/rest/Profiler.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/Profiler.java
rename to rapidrest/src/main/java/rapid/rest/Profiler.java
index 842d4504d..45578f3e9 100644
--- a/retrofit/src/main/java/retrofit/Profiler.java
+++ b/rapidrest/src/main/java/rapid/rest/Profiler.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 /**
  * A hook allowing clients to log HTTP method times and response status codes.
@@ -41,7 +41,7 @@
    * @param beforeCallData the data returned by the corresponding {@link #beforeCall()}.
    */
   void afterCall(RequestInformation requestInfo, long elapsedTime, int statusCode,
-      T beforeCallData);
+                 T beforeCallData);
 
   /** Information about the HTTP request. */
   public static final class RequestInformation {
diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/rapidrest/src/main/java/rapid/rest/RequestBuilder.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/RequestBuilder.java
rename to rapidrest/src/main/java/rapid/rest/RequestBuilder.java
index 5fa5127b3..ed6057163 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/rapidrest/src/main/java/rapid/rest/RequestBuilder.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.io.IOException;
 import java.io.OutputStream;
@@ -23,24 +23,24 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.converter.Converter;
-import retrofit.mime.FormUrlEncodedTypedOutput;
-import retrofit.mime.MultipartTypedOutput;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
 
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;
+import rapid.rest.client.Header;
+import rapid.rest.client.Request;
+import rapid.rest.converter.Converter;
+import rapid.rest.mime.FormUrlEncodedTypedOutput;
+import rapid.rest.mime.MultipartTypedOutput;
+import rapid.rest.mime.TypedOutput;
+import rapid.rest.mime.TypedString;
+
+import static rapid.rest.RestMethodInfo.ParamUsage.QUERY;
+import static rapid.rest.RestMethodInfo.ParamUsage.QUERY_MAP;
 
 final class RequestBuilder implements RequestInterceptor.RequestFacade {
   private final Converter converter;
   private final String[] paramNames;
-  private final RestMethodInfo.ParamUsage[] paramUsages;
+  private final rapid.rest.RestMethodInfo.ParamUsage[] paramUsages;
   private final String requestMethod;
   private final boolean isSynchronous;
-  private final boolean isObservable;
   private final String apiUrl;
 
   private final FormUrlEncodedTypedOutput formBody;
@@ -60,7 +60,6 @@
     paramUsages = methodInfo.requestParamUsage;
     requestMethod = methodInfo.requestMethod;
     isSynchronous = methodInfo.isSynchronous;
-    isObservable = methodInfo.isObservable;
 
     if (methodInfo.headers != null) {
       headers = new ArrayList<Header>(methodInfo.headers);
@@ -181,7 +180,7 @@ void setArguments(Object[] args) {
       return;
     }
     int count = args.length;
-    if (!isSynchronous && !isObservable) {
+    if (!isSynchronous) {
       count -= 1;
     }
     for (int i = 0; i < count; i++) {
@@ -343,11 +342,11 @@ Request build() throws UnsupportedEncodingException {
     return new Request(requestMethod, url.toString(), headers, body);
   }
 
-  private static class MimeOverridingTypedOutput implements TypedOutput {
-    private final TypedOutput delegate;
+  private static class MimeOverridingTypedOutput implements rapid.rest.mime.TypedOutput {
+    private final rapid.rest.mime.TypedOutput delegate;
     private final String mimeType;
 
-    MimeOverridingTypedOutput(TypedOutput delegate, String mimeType) {
+    MimeOverridingTypedOutput(rapid.rest.mime.TypedOutput delegate, String mimeType) {
       this.delegate = delegate;
       this.mimeType = mimeType;
     }
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptor.java b/rapidrest/src/main/java/rapid/rest/RequestInterceptor.java
similarity index 90%
rename from retrofit/src/main/java/retrofit/RequestInterceptor.java
rename to rapidrest/src/main/java/rapid/rest/RequestInterceptor.java
index 5fa484b35..3da2d6851 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptor.java
+++ b/rapidrest/src/main/java/rapid/rest/RequestInterceptor.java
@@ -1,4 +1,4 @@
-package retrofit;
+package rapid.rest;
 
 /** Intercept every request before it is executed in order to add additional data. */
 public interface RequestInterceptor {
@@ -10,14 +10,14 @@
     void addHeader(String name, String value);
 
     /**
-     * Add a path parameter replacement. This works exactly like a {@link retrofit.http.Path
+     * Add a path parameter replacement. This works exactly like a {@link rapid.rest.http.Path
      * &#64;Path}-annotated method argument.
      */
     void addPathParam(String name, String value);
 
     /**
      * Add a path parameter replacement without first URI encoding. This works exactly like a
-     * {@link retrofit.http.EncodedPath &#64;EncodedPath}-annotated method argument.
+     * {@link rapid.rest.http.EncodedPath &#64;EncodedPath}-annotated method argument.
      */
     void addEncodedPathParam(String name, String value);
 
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java b/rapidrest/src/main/java/rapid/rest/RequestInterceptorTape.java
similarity index 99%
rename from retrofit/src/main/java/retrofit/RequestInterceptorTape.java
rename to rapidrest/src/main/java/rapid/rest/RequestInterceptorTape.java
index d53d8f4ff..e55fec49b 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
+++ b/rapidrest/src/main/java/rapid/rest/RequestInterceptorTape.java
@@ -1,4 +1,4 @@
-package retrofit;
+package rapid.rest;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/retrofit/src/main/java/retrofit/ResponseCallback.java b/rapidrest/src/main/java/rapid/rest/ResponseCallback.java
similarity index 59%
rename from retrofit/src/main/java/retrofit/ResponseCallback.java
rename to rapidrest/src/main/java/rapid/rest/ResponseCallback.java
index 9f0aa08b0..958b7c68d 100644
--- a/retrofit/src/main/java/retrofit/ResponseCallback.java
+++ b/rapidrest/src/main/java/rapid/rest/ResponseCallback.java
@@ -13,20 +13,18 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
-
-import retrofit.client.Response;
+package rapid.rest;
 
 /**
- * An extension of {@link Callback} which returns only {@link Response} object
- * in {@link Callback#success(Object, retrofit.client.Response)} method.
+ * An extension of {@link Callback} which returns only {@link rapid.rest.client.Response} object
+ * in {@link Callback#success(Object, rapid.rest.client.Response)} method.
  */
-public abstract class ResponseCallback implements Callback<Response> {
+public abstract class ResponseCallback implements Callback<rapid.rest.client.Response> {
 
-  @Override public void success(Response response, Response response2) {
+  @Override public void success(rapid.rest.client.Response response, rapid.rest.client.Response response2) {
     success(response);
   }
 
   /** Successful HTTP response. */
-  public abstract void success(Response response);
+  public abstract void success(rapid.rest.client.Response response);
 }
diff --git a/retrofit/src/main/java/retrofit/ResponseWrapper.java b/rapidrest/src/main/java/rapid/rest/ResponseWrapper.java
similarity index 68%
rename from retrofit/src/main/java/retrofit/ResponseWrapper.java
rename to rapidrest/src/main/java/rapid/rest/ResponseWrapper.java
index 65b881367..8554ad3ed 100644
--- a/retrofit/src/main/java/retrofit/ResponseWrapper.java
+++ b/rapidrest/src/main/java/rapid/rest/ResponseWrapper.java
@@ -13,21 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
-
-import retrofit.client.Response;
+package rapid.rest;
 
 /**
- * A wrapper that holds the {@link Response} and {@link retrofit.converter.Converter} response to
- * be used by the {@link CallbackRunnable} for success method calls on {@link Callback}.
+ * A wrapper that holds the {@link rapid.rest.client.Response} and {@link rapid.rest.converter.Converter} response to
+ * be used by the {@link rapid.rest.CallbackRunnable} for success method calls on {@link Callback}.
  *
  * @author JJ Ford (jj.n.ford@gmail.com)
  */
 final class ResponseWrapper {
-  final Response response;
+  final rapid.rest.client.Response response;
   final Object responseBody;
 
-  ResponseWrapper(Response response, Object responseBody) {
+  ResponseWrapper(rapid.rest.client.Response response, Object responseBody) {
     this.response = response;
     this.responseBody = responseBody;
   }
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/rapidrest/src/main/java/rapid/rest/RestAdapter.java
similarity index 84%
rename from retrofit/src/main/java/retrofit/RestAdapter.java
rename to rapidrest/src/main/java/rapid/rest/RestAdapter.java
index 19e05298d..54d67c00f 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/rapidrest/src/main/java/rapid/rest/RestAdapter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.io.IOException;
 import java.io.PrintWriter;
@@ -26,17 +26,16 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
-import retrofit.Profiler.RequestInformation;
-import retrofit.client.Client;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.converter.ConversionException;
-import retrofit.converter.Converter;
-import retrofit.mime.MimeUtil;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
+
+import rapid.rest.Profiler.RequestInformation;
+import rapid.rest.client.Header;
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
+import rapid.rest.converter.ConversionException;
+import rapid.rest.mime.MimeUtil;
+import rapid.rest.mime.TypedByteArray;
+import rapid.rest.mime.TypedInput;
+import rapid.rest.mime.TypedOutput;
 
 /**
  * Adapts a Java interface to a REST API.
@@ -45,49 +44,49 @@
  * the form in which the HTTP call should be made.
  * <p>
  * The relative path for a given method is obtained from an annotation on the method describing
- * the request type. The built-in methods are {@link retrofit.http.GET GET},
- * {@link retrofit.http.PUT PUT}, {@link retrofit.http.POST POST}, {@link retrofit.http.HEAD HEAD},
- * and {@link retrofit.http.DELETE DELETE}. You can define your own HTTP method by creating an
+ * the request type. The built-in methods are {@link rapid.rest.http.GET GET},
+ * {@link rapid.rest.http.PUT PUT}, {@link rapid.rest.http.POST POST}, {@link rapid.rest.http.HEAD HEAD},
+ * and {@link rapid.rest.http.DELETE DELETE}. You can define your own HTTP method by creating an
  * annotation that takes a {code String} value and itself is annotated with
- * {@link retrofit.http.RestMethod @RestMethod}.
+ * {@link rapid.rest.http.RestMethod @RestMethod}.
  * <p>
  * Method parameters can be used to replace parts of the URL by annotating them with
- * {@link retrofit.http.Path @Path}. Replacement sections are denoted by an identifier surrounded
+ * {@link rapid.rest.http.Path @Path}. Replacement sections are denoted by an identifier surrounded
  * by curly braces (e.g., "{foo}"). To add items to the query string of a URL use
- * {@link retrofit.http.Query @Query}. If the path or query element has already been URI encoded
- * use {@link retrofit.http.EncodedPath @EncodedPath} or
- * {@link retrofit.http.EncodedQuery @EncodedQuery} to prevent repeated encoding.
+ * {@link rapid.rest.http.Query @Query}. If the path or query element has already been URI encoded
+ * use {@link rapid.rest.http.EncodedPath @EncodedPath} or
+ * {@link rapid.rest.http.EncodedQuery @EncodedQuery} to prevent repeated encoding.
  * <p>
  * HTTP requests happen in one of two ways:
  * <ul>
- * <li>On the provided HTTP {@link Executor} with callbacks marshaled to the callback
- * {@link Executor}. The last method parameter should be of type {@link Callback}. The HTTP
+ * <li>On the provided HTTP {@link java.util.concurrent.Executor} with callbacks marshaled to the callback
+ * {@link java.util.concurrent.Executor}. The last method parameter should be of type {@link Callback}. The HTTP
  * response will be converted to the callback's parameter type using the specified
- * {@link retrofit.converter.Converter Converter}. If the callback parameter type uses a wildcard,
+ * {@link rapid.rest.converter.Converter Converter}. If the callback parameter type uses a wildcard,
  * the lower bound will be used as the conversion type.
  * <li>On the current thread returning the response or throwing a {@link RetrofitError}. The HTTP
  * response will be converted to the method's return type using the specified
- * {@link retrofit.converter.Converter Converter}.
+ * {@link rapid.rest.converter.Converter Converter}.
  * </ul>
  * <p>
- * The body of a request is denoted by the {@link retrofit.http.Body @Body} annotation. The object
+ * The body of a request is denoted by the {@link rapid.rest.http.Body @Body} annotation. The object
  * will be converted to request representation by a call to
- * {@link retrofit.converter.Converter#toBody(Object) toBody} on the supplied
- * {@link retrofit.converter.Converter Converter} for this instance. The body can also be a
- * {@link TypedOutput} where it will be used directly.
+ * {@link rapid.rest.converter.Converter#toBody(Object) toBody} on the supplied
+ * {@link rapid.rest.converter.Converter Converter} for this instance. The body can also be a
+ * {@link rapid.rest.mime.TypedOutput} where it will be used directly.
  * <p>
  * Alternative request body formats are supported by method annotations and corresponding parameter
  * annotations:
  * <ul>
- * <li>{@link retrofit.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value
- * pairs specified by the {@link retrofit.http.Field @Field} parameter annotation.
- * <li>{@link retrofit.http.Multipart @Multipart} - RFC 2387-compliant multi-part data with parts
- * specified by the {@link retrofit.http.Part @Part} parameter annotation.
+ * <li>{@link rapid.rest.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value
+ * pairs specified by the {@link rapid.rest.http.Field @Field} parameter annotation.
+ * <li>{@link rapid.rest.http.Multipart @Multipart} - RFC 2387-compliant multi-part data with parts
+ * specified by the {@link rapid.rest.http.Part @Part} parameter annotation.
  * </ul>
  * <p>
  * Additional static headers can be added for an endpoint using the
- * {@link retrofit.http.Headers @Headers} method annotation. For per-request control over a header
- * annotate a parameter with {@link Header @Header}.
+ * {@link rapid.rest.http.Headers @Headers} method annotation. For per-request control over a header
+ * annotate a parameter with {@link rapid.rest.client.Header @Header}.
  * <p>
  * For example:
  * <pre>
@@ -149,18 +148,17 @@ public boolean log() {
   final Executor httpExecutor;
   final Executor callbackExecutor;
   final RequestInterceptor requestInterceptor;
-  final Converter converter;
+  final rapid.rest.converter.Converter converter;
   final Log log;
   final ErrorHandler errorHandler;
 
-  private final Client.Provider clientProvider;
+  private final rapid.rest.client.Client.Provider clientProvider;
   private final Profiler profiler;
-  private RxSupport rxSupport;
 
   volatile LogLevel logLevel;
 
-  private RestAdapter(Endpoint server, Client.Provider clientProvider, Executor httpExecutor,
-      Executor callbackExecutor, RequestInterceptor requestInterceptor, Converter converter,
+  private RestAdapter(Endpoint server, rapid.rest.client.Client.Provider clientProvider, Executor httpExecutor,
+      Executor callbackExecutor, RequestInterceptor requestInterceptor, rapid.rest.converter.Converter converter,
       Profiler profiler, ErrorHandler errorHandler, Log log, LogLevel logLevel) {
     this.server = server;
     this.clientProvider = clientProvider;
@@ -252,28 +250,13 @@ static RestMethodInfo getMethodInfo(Map<Method, RestMethodInfo> cache, Method me
         throw new IllegalStateException("Asynchronous invocation requires calling setExecutors.");
       }
 
-      if (methodInfo.isObservable) {
-        if (rxSupport == null) {
-          if (Platform.HAS_RX_JAVA) {
-            rxSupport = new RxSupport(httpExecutor, errorHandler, requestInterceptor);
-          } else {
-            throw new IllegalStateException("Observable method found but no RxJava on classpath.");
-          }
-        }
-        return rxSupport.createRequestObservable(new RxSupport.Invoker() {
-          @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {
-            return (ResponseWrapper) invokeRequest(requestInterceptor, methodInfo, args);
-          }
-        });
-      }
-
       // Apply the interceptor synchronously, recording the interception so we can replay it later.
       // This way we still defer argument serialization to the background thread.
       final RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
       requestInterceptor.intercept(interceptorTape);
 
       Callback<?> callback = (Callback<?>) args[args.length - 1];
-      httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor, errorHandler) {
+      httpExecutor.execute(new rapid.rest.CallbackRunnable(callback, callbackExecutor, errorHandler) {
         @Override public ResponseWrapper obtainResponse() {
           return (ResponseWrapper) invokeRequest(interceptorTape, methodInfo, args);
         }
@@ -494,18 +477,18 @@ void logException(Throwable t, String url) {
     log.log("---- END ERROR");
   }
 
-  private static Profiler.RequestInformation getRequestInfo(String serverUrl,
-      RestMethodInfo methodDetails, Request request) {
+  private static RequestInformation getRequestInfo(String serverUrl,
+      RestMethodInfo methodDetails, rapid.rest.client.Request request) {
     long contentLength = 0;
     String contentType = null;
 
-    TypedOutput body = request.getBody();
+    rapid.rest.mime.TypedOutput body = request.getBody();
     if (body != null) {
       contentLength = body.length();
       contentType = body.mimeType();
     }
 
-    return new Profiler.RequestInformation(methodDetails.requestMethod, serverUrl,
+    return new RequestInformation(methodDetails.requestMethod, serverUrl,
         methodDetails.requestUrl, contentLength, contentType);
   }
 
@@ -515,8 +498,8 @@ void logException(Throwable t, String url) {
    * Calling the following methods is required before calling {@link #build()}:
    * <ul>
    * <li>{@link #setEndpoint(Endpoint)}</li>
-   * <li>{@link #setClient(Client.Provider)}</li>
-   * <li>{@link #setConverter(Converter)}</li>
+   * <li>{@link #setClient(rapid.rest.client.Client.Provider)}</li>
+   * <li>{@link #setConverter(rapid.rest.converter.Converter)}</li>
    * </ul>
    * <p>
    * If you are using asynchronous execution (i.e., with {@link Callback Callbacks}) the following
@@ -527,11 +510,11 @@ void logException(Throwable t, String url) {
    */
   public static class Builder {
     private Endpoint endpoint;
-    private Client.Provider clientProvider;
+    private rapid.rest.client.Client.Provider clientProvider;
     private Executor httpExecutor;
     private Executor callbackExecutor;
     private RequestInterceptor requestInterceptor;
-    private Converter converter;
+    private rapid.rest.converter.Converter converter;
     private Profiler profiler;
     private ErrorHandler errorHandler;
     private Log log;
@@ -556,19 +539,19 @@ public Builder setEndpoint(Endpoint endpoint) {
     }
 
     /** The HTTP client used for requests. */
-    public Builder setClient(final Client client) {
+    public Builder setClient(final rapid.rest.client.Client client) {
       if (client == null) {
         throw new NullPointerException("Client may not be null.");
       }
-      return setClient(new Client.Provider() {
-        @Override public Client get() {
+      return setClient(new rapid.rest.client.Client.Provider() {
+        @Override public rapid.rest.client.Client get() {
           return client;
         }
       });
     }
 
     /** The HTTP client used for requests. */
-    public Builder setClient(Client.Provider clientProvider) {
+    public Builder setClient(rapid.rest.client.Client.Provider clientProvider) {
       if (clientProvider == null) {
         throw new NullPointerException("Client provider may not be null.");
       }
@@ -589,7 +572,7 @@ public Builder setExecutors(Executor httpExecutor, Executor callbackExecutor) {
         throw new NullPointerException("HTTP executor may not be null.");
       }
       if (callbackExecutor == null) {
-        callbackExecutor = new Utils.SynchronousExecutor();
+        callbackExecutor = new rapid.rest.Utils.SynchronousExecutor();
       }
       this.httpExecutor = httpExecutor;
       this.callbackExecutor = callbackExecutor;
@@ -606,7 +589,7 @@ public Builder setRequestInterceptor(RequestInterceptor requestInterceptor) {
     }
 
     /** The converter used for serialization and deserialization of objects. */
-    public Builder setConverter(Converter converter) {
+    public Builder setConverter(rapid.rest.converter.Converter converter) {
       if (converter == null) {
         throw new NullPointerException("Converter may not be null.");
       }
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/rapidrest/src/main/java/rapid/rest/RestMethodInfo.java
similarity index 86%
rename from retrofit/src/main/java/retrofit/RestMethodInfo.java
rename to rapidrest/src/main/java/rapid/rest/RestMethodInfo.java
index cf73f9491..ec1869503 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/rapidrest/src/main/java/rapid/rest/RestMethodInfo.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
@@ -27,32 +27,25 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import retrofit.client.Response;
-import retrofit.http.Body;
-import retrofit.http.EncodedPath;
-import retrofit.http.EncodedQuery;
-import retrofit.http.EncodedQueryMap;
-import retrofit.http.Field;
-import retrofit.http.FieldMap;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.Multipart;
-import retrofit.http.Part;
-import retrofit.http.PartMap;
-import retrofit.http.Path;
-import retrofit.http.Query;
-import retrofit.http.QueryMap;
-import retrofit.http.Streaming;
-import retrofit.http.RestMethod;
-import rx.Observable;
+
+import rapid.rest.client.Header;
+import rapid.rest.http.Body;
+import rapid.rest.http.EncodedPath;
+import rapid.rest.http.EncodedQuery;
+import rapid.rest.http.EncodedQueryMap;
+import rapid.rest.http.Field;
+import rapid.rest.http.FieldMap;
+import rapid.rest.http.Part;
+import rapid.rest.http.PartMap;
+import rapid.rest.http.Path;
+import rapid.rest.http.Query;
+import rapid.rest.http.QueryMap;
 
 /** Request metadata about a service interface declaration. */
 final class RestMethodInfo {
 
   private enum ResponseType {
     VOID,
-    OBSERVABLE,
     OBJECT
   }
 
@@ -92,7 +85,6 @@
   // Method-level details
   final ResponseType responseType;
   final boolean isSynchronous;
-  final boolean isObservable;
   Type responseObjectType;
   RequestType requestType = RequestType.SIMPLE;
   String requestMethod;
@@ -100,7 +92,7 @@
   String requestUrl;
   Set<String> requestUrlParamNames;
   String requestQuery;
-  List<retrofit.client.Header> headers;
+  List<rapid.rest.client.Header> headers;
   String contentTypeHeader;
   boolean isStreaming;
 
@@ -112,7 +104,6 @@
     this.method = method;
     responseType = parseResponseType();
     isSynchronous = (responseType == ResponseType.OBJECT);
-    isObservable = (responseType == ResponseType.OBSERVABLE);
   }
 
   private RuntimeException methodError(String message, Object... args) {
@@ -140,12 +131,12 @@ synchronized void init() {
   private void parseMethodAnnotations() {
     for (Annotation methodAnnotation : method.getAnnotations()) {
       Class<? extends Annotation> annotationType = methodAnnotation.annotationType();
-      RestMethod methodInfo = null;
+      rapid.rest.http.RestMethod methodInfo = null;
 
       // Look for a @RestMethod annotation on the parameter annotation indicating request method.
       for (Annotation innerAnnotation : annotationType.getAnnotations()) {
-        if (RestMethod.class == innerAnnotation.annotationType()) {
-          methodInfo = (RestMethod) innerAnnotation;
+        if (rapid.rest.http.RestMethod.class == innerAnnotation.annotationType()) {
+          methodInfo = (rapid.rest.http.RestMethod) innerAnnotation;
           break;
         }
       }
@@ -165,27 +156,27 @@ private void parseMethodAnnotations() {
         parsePath(path);
         requestMethod = methodInfo.value();
         requestHasBody = methodInfo.hasBody();
-      } else if (annotationType == Headers.class) {
-        String[] headersToParse = ((Headers) methodAnnotation).value();
+      } else if (annotationType == rapid.rest.http.Headers.class) {
+        String[] headersToParse = ((rapid.rest.http.Headers) methodAnnotation).value();
         if (headersToParse.length == 0) {
           throw methodError("@Headers annotation is empty.");
         }
         headers = parseHeaders(headersToParse);
-      } else if (annotationType == Multipart.class) {
+      } else if (annotationType == rapid.rest.http.Multipart.class) {
         if (requestType != RequestType.SIMPLE) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         requestType = RequestType.MULTIPART;
-      } else if (annotationType == FormUrlEncoded.class) {
+      } else if (annotationType == rapid.rest.http.FormUrlEncoded.class) {
         if (requestType != RequestType.SIMPLE) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         requestType = RequestType.FORM_URL_ENCODED;
-      } else if (annotationType == Streaming.class) {
-        if (responseObjectType != Response.class) {
+      } else if (annotationType == rapid.rest.http.Streaming.class) {
+        if (responseObjectType != rapid.rest.client.Response.class) {
           throw methodError(
               "Only methods having %s as data type are allowed to have @%s annotation.",
-              Response.class.getSimpleName(), Streaming.class.getSimpleName());
+              rapid.rest.client.Response.class.getSimpleName(), rapid.rest.http.Streaming.class.getSimpleName());
         }
         isStreaming = true;
       }
@@ -234,8 +225,8 @@ private void parsePath(String path) {
     requestQuery = query;
   }
 
-  List<retrofit.client.Header> parseHeaders(String[] headers) {
-    List<retrofit.client.Header> headerList = new ArrayList<retrofit.client.Header>();
+  List<rapid.rest.client.Header> parseHeaders(String[] headers) {
+    List<rapid.rest.client.Header> headerList = new ArrayList<rapid.rest.client.Header>();
     for (String header : headers) {
       int colon = header.indexOf(':');
       if (colon == -1 || colon == 0 || colon == header.length() - 1) {
@@ -247,7 +238,7 @@ private void parsePath(String path) {
       if ("Content-Type".equalsIgnoreCase(headerName)) {
         contentTypeHeader = headerValue;
       } else {
-        headerList.add(new retrofit.client.Header(headerName, headerValue));
+        headerList.add(new Header(headerName, headerValue));
       }
     }
     return headerList;
@@ -286,14 +277,6 @@ private ResponseType parseResponseType() {
     }
 
     if (hasReturnType) {
-      if (Platform.HAS_RX_JAVA) {
-        Class rawReturnType = Types.getRawType(returnType);
-        if (RxSupport.isObservable(rawReturnType)) {
-          returnType = RxSupport.getObservableType(returnType, rawReturnType);
-          responseObjectType = getParameterUpperBound((ParameterizedType) returnType);
-          return ResponseType.OBSERVABLE;
-        }
-      }
       responseObjectType = returnType;
       return ResponseType.OBJECT;
     }
@@ -327,7 +310,7 @@ private void parseParameters() {
 
     Annotation[][] parameterAnnotationArrays = method.getParameterAnnotations();
     int count = parameterAnnotationArrays.length;
-    if (!isSynchronous && !isObservable) {
+    if (!isSynchronous) {
       count -= 1; // Callback is last argument when not a synchronous method.
     }
 
@@ -381,8 +364,8 @@ private void parseParameters() {
             }
 
             paramUsage[i] = ParamUsage.ENCODED_QUERY_MAP;
-          } else if (annotationType == Header.class) {
-            String name = ((Header) parameterAnnotation).value();
+          } else if (annotationType == rapid.rest.http.Header.class) {
+            String name = ((rapid.rest.http.Header) parameterAnnotation).value();
             if (parameterType != String.class) {
               throw parameterError(i, "@Header parameter type must be String. Found: %s.",
                   parameterType.getSimpleName());
@@ -485,15 +468,4 @@ private void validatePathName(int index, String name) {
     }
     return patterns;
   }
-
-  /** Indirection to avoid log complaints if RxJava isn't present. */
-  private static final class RxSupport {
-    public static boolean isObservable(Class rawType) {
-      return rawType == Observable.class;
-    }
-
-    public static Type getObservableType(Type contextType, Class contextRawType) {
-      return Types.getSupertype(contextType, contextRawType, Observable.class);
-    }
-  }
 }
diff --git a/retrofit/src/main/java/retrofit/RetrofitError.java b/rapidrest/src/main/java/rapid/rest/RetrofitError.java
similarity index 79%
rename from retrofit/src/main/java/retrofit/RetrofitError.java
rename to rapidrest/src/main/java/rapid/rest/RetrofitError.java
index 7b923e8f3..19cccede5 100644
--- a/retrofit/src/main/java/retrofit/RetrofitError.java
+++ b/rapidrest/src/main/java/rapid/rest/RetrofitError.java
@@ -13,27 +13,23 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
-import retrofit.client.Response;
-import retrofit.converter.ConversionException;
-import retrofit.converter.Converter;
-import retrofit.mime.TypedInput;
 
 public class RetrofitError extends RuntimeException {
   public static RetrofitError networkError(String url, IOException exception) {
     return new RetrofitError(exception.getMessage(), url, null, null, null, true, exception);
   }
 
-  public static RetrofitError conversionError(String url, Response response, Converter converter,
-      Type successType, ConversionException exception) {
+  public static RetrofitError conversionError(String url, rapid.rest.client.Response response, rapid.rest.converter.Converter converter,
+      Type successType, rapid.rest.converter.ConversionException exception) {
     return new RetrofitError(exception.getMessage(), url, response, converter, successType, false,
         exception);
   }
 
-  public static RetrofitError httpError(String url, Response response, Converter converter,
+  public static RetrofitError httpError(String url, rapid.rest.client.Response response, rapid.rest.converter.Converter converter,
       Type successType) {
     String message = response.getStatus() + " " + response.getReason();
     return new RetrofitError(message, url, response, converter, successType, false, null);
@@ -44,12 +40,12 @@ public static RetrofitError unexpectedError(String url, Throwable exception) {
   }
 
   private final String url;
-  private final Response response;
-  private final Converter converter;
+  private final rapid.rest.client.Response response;
+  private final rapid.rest.converter.Converter converter;
   private final Type successType;
   private final boolean networkError;
 
-  RetrofitError(String message, String url, Response response, Converter converter,
+  RetrofitError(String message, String url, rapid.rest.client.Response response, rapid.rest.converter.Converter converter,
       Type successType, boolean networkError, Throwable exception) {
     super(message, exception);
     this.url = url;
@@ -65,7 +61,7 @@ public String getUrl() {
   }
 
   /** Response object containing status code, headers, body, etc. */
-  public Response getResponse() {
+  public rapid.rest.client.Response getResponse() {
     return response;
   }
 
@@ -98,13 +94,13 @@ public Object getBodyAs(Type type) {
     if (response == null) {
       return null;
     }
-    TypedInput body = response.getBody();
+    rapid.rest.mime.TypedInput body = response.getBody();
     if (body == null) {
       return null;
     }
     try {
       return converter.fromBody(body, type);
-    } catch (ConversionException e) {
+    } catch (rapid.rest.converter.ConversionException e) {
       throw new RuntimeException(e);
     }
   }
diff --git a/retrofit/src/main/java/retrofit/Types.java b/rapidrest/src/main/java/rapid/rest/Types.java
similarity index 99%
rename from retrofit/src/main/java/retrofit/Types.java
rename to rapidrest/src/main/java/rapid/rest/Types.java
index 0ad4e5518..771363010 100644
--- a/retrofit/src/main/java/retrofit/Types.java
+++ b/rapidrest/src/main/java/rapid/rest/Types.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.GenericArrayType;
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/rapidrest/src/main/java/rapid/rest/Utils.java
similarity index 88%
rename from retrofit/src/main/java/retrofit/Utils.java
rename to rapidrest/src/main/java/rapid/rest/Utils.java
index 49c0cbe75..9c934cf74 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/rapidrest/src/main/java/rapid/rest/Utils.java
@@ -14,23 +14,24 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit;
+package rapid.rest;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.Executor;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
+
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
+import rapid.rest.mime.TypedByteArray;
+import rapid.rest.mime.TypedInput;
+import rapid.rest.mime.TypedOutput;
 
 final class Utils {
   private static final int BUFFER_SIZE = 0x1000;
 
   /**
-   * Creates a {@code byte[]} from reading the entirety of an {@link InputStream}. May return an
+   * Creates a {@code byte[]} from reading the entirety of an {@link java.io.InputStream}. May return an
    * empty array but never {@code null}.
    * <p>
    * Copied from Guava's {@code ByteStreams} class.
@@ -48,7 +49,7 @@
   }
 
   /**
-   * Conditionally replace a {@link Request} with an identical copy whose body is backed by a
+   * Conditionally replace a {@link rapid.rest.client.Request} with an identical copy whose body is backed by a
    * byte[] rather than an input stream.
    */
   static Request readBodyToBytesIfNecessary(Request request) throws IOException {
@@ -66,7 +67,7 @@ static Request readBodyToBytesIfNecessary(Request request) throws IOException {
   }
 
   /**
-   * Conditionally replace a {@link Response} with an identical copy whose body is backed by a
+   * Conditionally replace a {@link rapid.rest.client.Response} with an identical copy whose body is backed by a
    * byte[] rather than an input stream.
    */
   static Response readBodyToBytesIfNecessary(Response response) throws IOException {
diff --git a/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java b/rapidrest/src/main/java/rapid/rest/android/AndroidApacheClient.java
similarity index 60%
rename from retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
rename to rapidrest/src/main/java/rapid/rest/android/AndroidApacheClient.java
index d5ae3dc8a..b6991650b 100644
--- a/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
+++ b/rapidrest/src/main/java/rapid/rest/android/AndroidApacheClient.java
@@ -13,20 +13,19 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.android;
+package rapid.rest.android;
 
 import android.net.http.AndroidHttpClient;
-import retrofit.client.ApacheClient;
 
 /**
- * Provides a {@link retrofit.client.Client} which uses the Android-specific version of
- * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}.
+ * Provides a {@link rapid.rest.client.Client} which uses the Android-specific version of
+ * {@link org.apache.http.client.HttpClient}, {@link android.net.http.AndroidHttpClient}.
  * <p>
- * If you need to provide a customized version of the {@link AndroidHttpClient} or a different
- * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly.
+ * If you need to provide a customized version of the {@link android.net.http.AndroidHttpClient} or a different
+ * {@link org.apache.http.client.HttpClient} on Android use {@link rapid.rest.client.ApacheClient} directly.
  */
-public final class AndroidApacheClient extends ApacheClient {
+public final class AndroidApacheClient extends rapid.rest.client.ApacheClient {
   public AndroidApacheClient() {
-    super(AndroidHttpClient.newInstance("Retrofit"));
+    super(AndroidHttpClient.newInstance("RapidRest"));
   }
 }
diff --git a/retrofit/src/main/java/retrofit/android/AndroidLog.java b/rapidrest/src/main/java/rapid/rest/android/AndroidLog.java
similarity index 82%
rename from retrofit/src/main/java/retrofit/android/AndroidLog.java
rename to rapidrest/src/main/java/rapid/rest/android/AndroidLog.java
index a5ac5d084..b82df3da8 100644
--- a/retrofit/src/main/java/retrofit/android/AndroidLog.java
+++ b/rapidrest/src/main/java/rapid/rest/android/AndroidLog.java
@@ -1,9 +1,10 @@
-package retrofit.android;
+package rapid.rest.android;
 
 import android.util.Log;
-import retrofit.RestAdapter;
 
-/** A {@link RestAdapter.Log logger} for Android. */
+import rapid.rest.RestAdapter;
+
+/** A {@link rapid.rest.RestAdapter.Log logger} for Android. */
 public class AndroidLog implements RestAdapter.Log {
   private static final int LOG_CHUNK_SIZE = 4000;
 
@@ -22,7 +23,7 @@ public AndroidLog(String tag) {
 
   /**
    * Called one or more times for each call to {@link #log(String)}. The length of {@code chunk}
-   * will be no more than 4000 characters to support Android's {@link Log} class.
+   * will be no more than 4000 characters to support Android's {@link android.util.Log} class.
    */
   public void logChunk(String chunk) {
     Log.d(getTag(), chunk);
diff --git a/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java b/rapidrest/src/main/java/rapid/rest/android/MainThreadExecutor.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/android/MainThreadExecutor.java
rename to rapidrest/src/main/java/rapid/rest/android/MainThreadExecutor.java
index 81440d041..480eaf57e 100644
--- a/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java
+++ b/rapidrest/src/main/java/rapid/rest/android/MainThreadExecutor.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.android;
+package rapid.rest.android;
 
 import android.os.Handler;
 import android.os.Looper;
diff --git a/retrofit/src/main/java/retrofit/client/ApacheClient.java b/rapidrest/src/main/java/rapid/rest/client/ApacheClient.java
similarity index 86%
rename from retrofit/src/main/java/retrofit/client/ApacheClient.java
rename to rapidrest/src/main/java/rapid/rest/client/ApacheClient.java
index ac85d7838..d7d14510c 100644
--- a/retrofit/src/main/java/retrofit/client/ApacheClient.java
+++ b/rapidrest/src/main/java/rapid/rest/client/ApacheClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -37,10 +37,8 @@
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 import org.apache.http.util.EntityUtils;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedOutput;
 
-/** A {@link Client} which uses an implementation of Apache's {@link HttpClient}. */
+/** A {@link Client} which uses an implementation of Apache's {@link org.apache.http.client.HttpClient}. */
 public class ApacheClient implements Client {
   private static HttpClient createDefaultClient() {
     HttpParams params = new BasicHttpParams();
@@ -51,7 +49,7 @@ private static HttpClient createDefaultClient() {
 
   private final HttpClient client;
 
-  /** Creates an instance backed by {@link DefaultHttpClient}. */
+  /** Creates an instance backed by {@link org.apache.http.impl.client.DefaultHttpClient}. */
   public ApacheClient() {
     this(createDefaultClient());
   }
@@ -60,7 +58,7 @@ public ApacheClient(HttpClient client) {
     this.client = client;
   }
 
-  @Override public Response execute(Request request) throws IOException {
+  @Override public rapid.rest.client.Response execute(Request request) throws IOException {
     HttpUriRequest apacheRequest = createRequest(request);
     HttpResponse apacheResponse = execute(client, apacheRequest);
     return parseResponse(request.getUrl(), apacheResponse);
@@ -78,7 +76,7 @@ static HttpUriRequest createRequest(Request request) {
     return new GenericHttpRequest(request);
   }
 
-  static Response parseResponse(String url, HttpResponse response) throws IOException {
+  static rapid.rest.client.Response parseResponse(String url, HttpResponse response) throws IOException {
     StatusLine statusLine = response.getStatusLine();
     int status = statusLine.getStatusCode();
     String reason = statusLine.getReasonPhrase();
@@ -94,14 +92,14 @@ static Response parseResponse(String url, HttpResponse response) throws IOExcept
       headers.add(new Header(name, value));
     }
 
-    TypedByteArray body = null;
+    rapid.rest.mime.TypedByteArray body = null;
     HttpEntity entity = response.getEntity();
     if (entity != null) {
       byte[] bytes = EntityUtils.toByteArray(entity);
-      body = new TypedByteArray(contentType, bytes);
+      body = new rapid.rest.mime.TypedByteArray(contentType, bytes);
     }
 
-    return new Response(url, status, reason, headers, body);
+    return new rapid.rest.client.Response(url, status, reason, headers, body);
   }
 
   private static class GenericHttpRequest extends HttpRequestBase {
@@ -144,11 +142,11 @@ public GenericHttpRequest(Request request) {
     }
   }
 
-  /** Container class for passing an entire {@link TypedOutput} as an {@link HttpEntity}. */
+  /** Container class for passing an entire {@link rapid.rest.mime.TypedOutput} as an {@link org.apache.http.HttpEntity}. */
   static class TypedOutputEntity extends AbstractHttpEntity {
-    final TypedOutput typedOutput;
+    final rapid.rest.mime.TypedOutput typedOutput;
 
-    TypedOutputEntity(TypedOutput typedOutput) {
+    TypedOutputEntity(rapid.rest.mime.TypedOutput typedOutput) {
       this.typedOutput = typedOutput;
       setContentType(typedOutput.mimeType());
     }
diff --git a/retrofit/src/main/java/retrofit/client/Client.java b/rapidrest/src/main/java/rapid/rest/client/Client.java
similarity index 90%
rename from retrofit/src/main/java/retrofit/client/Client.java
rename to rapidrest/src/main/java/rapid/rest/client/Client.java
index 53a75b2eb..445302a12 100644
--- a/retrofit/src/main/java/retrofit/client/Client.java
+++ b/rapidrest/src/main/java/rapid/rest/client/Client.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import java.io.IOException;
 
@@ -24,13 +24,13 @@
 public interface Client {
   /**
    * Synchronously execute an HTTP represented by {@code request} and encapsulate all response data
-   * into a {@link Response} instance.
+   * into a {@link rapid.rest.client.Response} instance.
    * <p>
    * Note: If the request has a body, its length and mime type will have already been added to the
    * header list as {@code Content-Length} and {@code Content-Type}, respectively. Do NOT alter
    * these values as they might have been set as a result of an application-level configuration.
    */
-  Response execute(Request request) throws IOException;
+  rapid.rest.client.Response execute(Request request) throws IOException;
 
   /**
    * Deferred means of obtaining a {@link Client}. For asynchronous requests this will always be
diff --git a/retrofit/src/main/java/retrofit/client/Defaults.java b/rapidrest/src/main/java/rapid/rest/client/Defaults.java
similarity index 87%
rename from retrofit/src/main/java/retrofit/client/Defaults.java
rename to rapidrest/src/main/java/rapid/rest/client/Defaults.java
index 09d1876ab..be1ff8100 100644
--- a/retrofit/src/main/java/retrofit/client/Defaults.java
+++ b/rapidrest/src/main/java/rapid/rest/client/Defaults.java
@@ -1,4 +1,4 @@
-package retrofit.client;
+package rapid.rest.client;
 
 final class Defaults {
   static final int CONNECT_TIMEOUT_MILLIS = 15 * 1000; // 15s
diff --git a/retrofit/src/main/java/retrofit/client/Header.java b/rapidrest/src/main/java/rapid/rest/client/Header.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/client/Header.java
rename to rapidrest/src/main/java/rapid/rest/client/Header.java
index 41daf5b22..9cf227408 100644
--- a/retrofit/src/main/java/retrofit/client/Header.java
+++ b/rapidrest/src/main/java/rapid/rest/client/Header.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 /** Represents an HTTP header name/value pair. */
 public final class Header {
diff --git a/retrofit/src/main/java/retrofit/client/OkClient.java b/rapidrest/src/main/java/rapid/rest/client/OkClient.java
similarity index 93%
rename from retrofit/src/main/java/retrofit/client/OkClient.java
rename to rapidrest/src/main/java/rapid/rest/client/OkClient.java
index 09c7874f8..93ae412e9 100644
--- a/retrofit/src/main/java/retrofit/client/OkClient.java
+++ b/rapidrest/src/main/java/rapid/rest/client/OkClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import com.squareup.okhttp.OkHttpClient;
 import com.squareup.okhttp.OkUrlFactory;
@@ -23,7 +23,7 @@
 import java.util.concurrent.TimeUnit;
 
 /** Retrofit client that uses OkHttp for communication. */
-public class OkClient extends UrlConnectionClient {
+public class OkClient extends rapid.rest.client.UrlConnectionClient {
   private static OkHttpClient generateDefaultOkHttp() {
     OkHttpClient client = new OkHttpClient();
     client.setConnectTimeout(Defaults.CONNECT_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
diff --git a/retrofit/src/main/java/retrofit/client/Request.java b/rapidrest/src/main/java/rapid/rest/client/Request.java
similarity index 83%
rename from retrofit/src/main/java/retrofit/client/Request.java
rename to rapidrest/src/main/java/rapid/rest/client/Request.java
index 8d2199def..df96ec8d7 100644
--- a/retrofit/src/main/java/retrofit/client/Request.java
+++ b/rapidrest/src/main/java/rapid/rest/client/Request.java
@@ -13,21 +13,22 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import retrofit.mime.TypedOutput;
+
+import rapid.rest.mime.TypedOutput;
 
 /** Encapsulates all of the information necessary to make an HTTP request. */
 public final class Request {
   private final String method;
   private final String url;
-  private final List<Header> headers;
-  private final TypedOutput body;
+  private final List<rapid.rest.client.Header> headers;
+  private final rapid.rest.mime.TypedOutput body;
 
-  public Request(String method, String url, List<Header> headers, TypedOutput body) {
+  public Request(String method, String url, List<rapid.rest.client.Header> headers, rapid.rest.mime.TypedOutput body) {
     if (method == null) {
       throw new NullPointerException("Method must not be null.");
     }
@@ -40,7 +41,7 @@ public Request(String method, String url, List<Header> headers, TypedOutput body
     if (headers == null) {
       this.headers = Collections.emptyList();
     } else {
-      this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
+      this.headers = Collections.unmodifiableList(new ArrayList<rapid.rest.client.Header>(headers));
     }
 
     this.body = body;
diff --git a/retrofit/src/main/java/retrofit/client/Response.java b/rapidrest/src/main/java/rapid/rest/client/Response.java
similarity index 76%
rename from retrofit/src/main/java/retrofit/client/Response.java
rename to rapidrest/src/main/java/rapid/rest/client/Response.java
index 64dd88bf9..963e80a7d 100644
--- a/retrofit/src/main/java/retrofit/client/Response.java
+++ b/rapidrest/src/main/java/rapid/rest/client/Response.java
@@ -13,28 +13,27 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import retrofit.mime.TypedInput;
 
 /**
  * An HTTP response.
  * <p>
  * When used directly as a data type for an interface method, the response body is buffered to a
- * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an
+ * {@code byte[]}. Annotate the method with {@link rapid.rest.http.Streaming @Streaming} for an
  * unbuffered stream from the network.
  */
 public final class Response {
   private final String url;
   private final int status;
   private final String reason;
-  private final List<Header> headers;
-  private final TypedInput body;
+  private final List<rapid.rest.client.Header> headers;
+  private final rapid.rest.mime.TypedInput body;
 
-  public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {
+  public Response(String url, int status, String reason, List<rapid.rest.client.Header> headers, rapid.rest.mime.TypedInput body) {
     if (url == null) {
       throw new IllegalArgumentException("url == null");
     }
@@ -51,7 +50,7 @@ public Response(String url, int status, String reason, List<Header> headers, Typ
     this.url = url;
     this.status = status;
     this.reason = reason;
-    this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
+    this.headers = Collections.unmodifiableList(new ArrayList<rapid.rest.client.Header>(headers));
     this.body = body;
   }
 
@@ -71,12 +70,12 @@ public String getReason() {
   }
 
   /** An unmodifiable collection of headers. */
-  public List<Header> getHeaders() {
+  public List<rapid.rest.client.Header> getHeaders() {
     return headers;
   }
 
   /** Response body. May be {@code null}. */
-  public TypedInput getBody() {
+  public rapid.rest.mime.TypedInput getBody() {
     return body;
   }
 }
diff --git a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java b/rapidrest/src/main/java/rapid/rest/client/UrlConnectionClient.java
similarity index 85%
rename from retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
rename to rapidrest/src/main/java/rapid/rest/client/UrlConnectionClient.java
index cd7872e67..751fa0e0a 100644
--- a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
+++ b/rapidrest/src/main/java/rapid/rest/client/UrlConnectionClient.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.client;
+package rapid.rest.client;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -22,17 +22,17 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
 
-/** Retrofit client that uses {@link HttpURLConnection} for communication. */
+import rapid.rest.mime.TypedInput;
+
+/** Retrofit client that uses {@link java.net.HttpURLConnection} for communication. */
 public class UrlConnectionClient implements Client {
   private static final int CHUNK_SIZE = 4096;
 
   public UrlConnectionClient() {
   }
 
-  @Override public Response execute(Request request) throws IOException {
+  @Override public rapid.rest.client.Response execute(Request request) throws IOException {
     HttpURLConnection connection = openConnection(request);
     prepareRequest(connection, request);
     return readResponse(connection);
@@ -50,11 +50,11 @@ void prepareRequest(HttpURLConnection connection, Request request) throws IOExce
     connection.setRequestMethod(request.getMethod());
     connection.setDoInput(true);
 
-    for (Header header : request.getHeaders()) {
+    for (rapid.rest.client.Header header : request.getHeaders()) {
       connection.addRequestProperty(header.getName(), header.getValue());
     }
 
-    TypedOutput body = request.getBody();
+    rapid.rest.mime.TypedOutput body = request.getBody();
     if (body != null) {
       connection.setDoOutput(true);
       connection.addRequestProperty("Content-Type", body.mimeType());
@@ -69,16 +69,16 @@ void prepareRequest(HttpURLConnection connection, Request request) throws IOExce
     }
   }
 
-  Response readResponse(HttpURLConnection connection) throws IOException {
+  rapid.rest.client.Response readResponse(HttpURLConnection connection) throws IOException {
     int status = connection.getResponseCode();
     String reason = connection.getResponseMessage();
     if (reason == null) reason = ""; // HttpURLConnection treats empty reason as null.
 
-    List<Header> headers = new ArrayList<Header>();
+    List<rapid.rest.client.Header> headers = new ArrayList<rapid.rest.client.Header>();
     for (Map.Entry<String, List<String>> field : connection.getHeaderFields().entrySet()) {
       String name = field.getKey();
       for (String value : field.getValue()) {
-        headers.add(new Header(name, value));
+        headers.add(new rapid.rest.client.Header(name, value));
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit/converter/ConversionException.java b/rapidrest/src/main/java/rapid/rest/converter/ConversionException.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/converter/ConversionException.java
rename to rapidrest/src/main/java/rapid/rest/converter/ConversionException.java
index 6673efc0b..bdeb185bb 100644
--- a/retrofit/src/main/java/retrofit/converter/ConversionException.java
+++ b/rapidrest/src/main/java/rapid/rest/converter/ConversionException.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.converter;
+package rapid.rest.converter;
 
 /** Indicate that conversion was unable to complete successfully. */
 @SuppressWarnings("UnusedDeclaration")
diff --git a/retrofit/src/main/java/retrofit/converter/Converter.java b/rapidrest/src/main/java/rapid/rest/converter/Converter.java
similarity index 72%
rename from retrofit/src/main/java/retrofit/converter/Converter.java
rename to rapidrest/src/main/java/rapid/rest/converter/Converter.java
index 6ac5b6fa8..ab4da92d9 100644
--- a/retrofit/src/main/java/retrofit/converter/Converter.java
+++ b/rapidrest/src/main/java/rapid/rest/converter/Converter.java
@@ -13,11 +13,9 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.converter;
+package rapid.rest.converter;
 
 import java.lang.reflect.Type;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
 
 /**
  * Arbiter for converting objects to and from their representation in HTTP.
@@ -31,12 +29,12 @@
    * @param body HTTP response body.
    * @param type Target object type.
    * @return Instance of {@code type} which will be cast by the caller.
-   * @throws ConversionException if conversion was unable to complete. This will trigger a call to
-   * {@link retrofit.Callback#failure(retrofit.RetrofitError)} or throw a
-   * {@link retrofit.RetrofitError}. The exception message should report all necessary information
+   * @throws rapid.rest.converter.ConversionException if conversion was unable to complete. This will trigger a call to
+   * {@link rapid.rest.Callback#failure(rapid.rest.RetrofitError)} or throw a
+   * {@link rapid.rest.RetrofitError}. The exception message should report all necessary information
    * about its cause as the response body will be set to {@code null}.
    */
-  Object fromBody(TypedInput body, Type type) throws ConversionException;
+  Object fromBody(rapid.rest.mime.TypedInput body, Type type) throws rapid.rest.converter.ConversionException;
 
   /**
    * Convert and object to an appropriate representation for HTTP transport.
@@ -44,5 +42,5 @@
    * @param object Object instance to convert.
    * @return Representation of the specified object as bytes.
    */
-  TypedOutput toBody(Object object);
+  rapid.rest.mime.TypedOutput toBody(Object object);
 }
diff --git a/retrofit/src/main/java/retrofit/converter/GsonConverter.java b/rapidrest/src/main/java/rapid/rest/converter/GsonConverter.java
similarity index 78%
rename from retrofit/src/main/java/retrofit/converter/GsonConverter.java
rename to rapidrest/src/main/java/rapid/rest/converter/GsonConverter.java
index 6aa1d7d41..6dd9adae3 100644
--- a/retrofit/src/main/java/retrofit/converter/GsonConverter.java
+++ b/rapidrest/src/main/java/rapid/rest/converter/GsonConverter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.converter;
+package rapid.rest.converter;
 
 import com.google.gson.Gson;
 import com.google.gson.JsonParseException;
@@ -22,9 +22,6 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Type;
-import retrofit.mime.MimeUtil;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
 
 /**
  * A {@link Converter} which uses GSON for serialization and deserialization of entities.
@@ -36,7 +33,7 @@
   private String encoding;
 
   /**
-   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
+   * Create an instance using the supplied {@link com.google.gson.Gson} object for conversion. Encoding to JSON and
    * decoding from JSON (when no charset is specified by a header) will use UTF-8.
    */
   public GsonConverter(Gson gson) {
@@ -44,7 +41,7 @@ public GsonConverter(Gson gson) {
   }
 
   /**
-   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
+   * Create an instance using the supplied {@link com.google.gson.Gson} object for conversion. Encoding to JSON and
    * decoding from JSON (when no charset is specified by a header) will use the specified encoding.
    */
   public GsonConverter(Gson gson, String encoding) {
@@ -52,19 +49,19 @@ public GsonConverter(Gson gson, String encoding) {
     this.encoding = encoding;
   }
 
-  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
+  @Override public Object fromBody(rapid.rest.mime.TypedInput body, Type type) throws rapid.rest.converter.ConversionException {
     String charset = "UTF-8";
     if (body.mimeType() != null) {
-      charset = MimeUtil.parseCharset(body.mimeType());
+      charset = rapid.rest.mime.MimeUtil.parseCharset(body.mimeType());
     }
     InputStreamReader isr = null;
     try {
       isr = new InputStreamReader(body.in(), charset);
       return gson.fromJson(isr, type);
     } catch (IOException e) {
-      throw new ConversionException(e);
+      throw new rapid.rest.converter.ConversionException(e);
     } catch (JsonParseException e) {
-      throw new ConversionException(e);
+      throw new rapid.rest.converter.ConversionException(e);
     } finally {
       if (isr != null) {
         try {
@@ -75,7 +72,7 @@ public GsonConverter(Gson gson, String encoding) {
     }
   }
 
-  @Override public TypedOutput toBody(Object object) {
+  @Override public rapid.rest.mime.TypedOutput toBody(Object object) {
     try {
       return new JsonTypedOutput(gson.toJson(object).getBytes(encoding), encoding);
     } catch (UnsupportedEncodingException e) {
@@ -83,7 +80,7 @@ public GsonConverter(Gson gson, String encoding) {
     }
   }
 
-  private static class JsonTypedOutput implements TypedOutput {
+  private static class JsonTypedOutput implements rapid.rest.mime.TypedOutput {
     private final byte[] jsonBytes;
     private final String mimeType;
 
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java b/rapidrest/src/main/java/rapid/rest/converter/SimpleXMLConverter.java
similarity index 91%
rename from retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
rename to rapidrest/src/main/java/rapid/rest/converter/SimpleXMLConverter.java
index 359ab0adb..ae9bc34db 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit/converter/SimpleXMLConverter.java
+++ b/rapidrest/src/main/java/rapid/rest/converter/SimpleXMLConverter.java
@@ -1,4 +1,4 @@
-package retrofit.converter;
+package rapid.rest.converter;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -8,9 +8,9 @@
 import org.simpleframework.xml.core.Persister;
 import org.simpleframework.xml.Serializer;
 
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
+import rapid.rest.mime.TypedByteArray;
+import rapid.rest.mime.TypedInput;
+import rapid.rest.mime.TypedOutput;
 
 /**
  * A {@link Converter} which uses SimpleXML for reading and writing entities.
diff --git a/retrofit/src/main/java/retrofit/http/Body.java b/rapidrest/src/main/java/rapid/rest/http/Body.java
similarity index 79%
rename from retrofit/src/main/java/retrofit/http/Body.java
rename to rapidrest/src/main/java/rapid/rest/http/Body.java
index 95368be0c..a00ccc912 100644
--- a/retrofit/src/main/java/retrofit/http/Body.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Body.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -25,11 +25,11 @@
 /**
  * Use this annotation on a service method param when you want to directly control the request body
  * of a POST/PUT request (instead of sending in as request parameters or form-style request
- * body). If the value of the parameter implements {@link retrofit.mime.TypedOutput TypedOutput},
+ * body). If the value of the parameter implements {@link rapid.rest.mime.TypedOutput TypedOutput},
  * the request body will be written exactly as specified by
- * {@link retrofit.mime.TypedOutput#writeTo(java.io.OutputStream)}. If the value does not implement
- * TypedOutput, the object will be serialized using the {@link retrofit.RestAdapter RestAdapter}'s
- * {@link retrofit.converter.Converter Converter} and the result will be set directly as the
+ * {@link rapid.rest.mime.TypedOutput#writeTo(java.io.OutputStream)}. If the value does not implement
+ * TypedOutput, the object will be serialized using the {@link rapid.rest.RestAdapter RestAdapter}'s
+ * {@link rapid.rest.converter.Converter Converter} and the result will be set directly as the
  * request body.
  * <p>
  * Body parameters may not be {@code null}.
diff --git a/retrofit/src/main/java/retrofit/http/DELETE.java b/rapidrest/src/main/java/rapid/rest/http/DELETE.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/http/DELETE.java
rename to rapidrest/src/main/java/rapid/rest/http/DELETE.java
index 82968958b..d3f9cd9ff 100644
--- a/retrofit/src/main/java/retrofit/http/DELETE.java
+++ b/rapidrest/src/main/java/rapid/rest/http/DELETE.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod("DELETE")
+@rapid.rest.http.RestMethod("DELETE")
 public @interface DELETE {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/EncodedPath.java b/rapidrest/src/main/java/rapid/rest/http/EncodedPath.java
similarity index 93%
rename from retrofit/src/main/java/retrofit/http/EncodedPath.java
rename to rapidrest/src/main/java/rapid/rest/http/EncodedPath.java
index 142aca057..e8af6b37f 100644
--- a/retrofit/src/main/java/retrofit/http/EncodedPath.java
+++ b/rapidrest/src/main/java/rapid/rest/http/EncodedPath.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -25,7 +25,7 @@
 /**
  * Named replacement in the URL path. Values are converted to string using
  * {@link String#valueOf(Object)}. Values are used literally without URL encoding. See
- * {@link retrofit.http.Path @Path} for URL encoding equivalent.
+ * {@link Path @Path} for URL encoding equivalent.
  * <p>
  * <pre>
  * &#64;GET("/image/{id}")
diff --git a/retrofit/src/main/java/retrofit/http/EncodedQuery.java b/rapidrest/src/main/java/rapid/rest/http/EncodedQuery.java
similarity index 85%
rename from retrofit/src/main/java/retrofit/http/EncodedQuery.java
rename to rapidrest/src/main/java/rapid/rest/http/EncodedQuery.java
index 4ca0828cb..87016ecf7 100644
--- a/retrofit/src/main/java/retrofit/http/EncodedQuery.java
+++ b/rapidrest/src/main/java/rapid/rest/http/EncodedQuery.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -27,11 +27,11 @@
  * <p>
  * Values are converted to strings using {@link String#valueOf(Object)}. Values are not URL
  * encoded. {@code null} values will not include the query parameter in the URL. See
- * {@link Query @Query} for URL-encoding equivalent.
+ * {@link rapid.rest.http.Query @Query} for URL-encoding equivalent.
  *
- * @see Query
- * @see QueryMap
- * @see EncodedQueryMap
+ * @see rapid.rest.http.Query
+ * @see rapid.rest.http.QueryMap
+ * @see rapid.rest.http.EncodedQueryMap
  */
 @Documented
 @Target(PARAMETER)
diff --git a/retrofit/src/main/java/retrofit/http/EncodedQueryMap.java b/rapidrest/src/main/java/rapid/rest/http/EncodedQueryMap.java
similarity index 85%
rename from retrofit/src/main/java/retrofit/http/EncodedQueryMap.java
rename to rapidrest/src/main/java/rapid/rest/http/EncodedQueryMap.java
index 0148e95a7..9078fe885 100644
--- a/retrofit/src/main/java/retrofit/http/EncodedQueryMap.java
+++ b/rapidrest/src/main/java/rapid/rest/http/EncodedQueryMap.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -27,11 +27,11 @@
  * <p>
  * Both keys and values are converted to strings using {@link String#valueOf(Object)}. Values are
  * not URL encoded. {@code null} values will not include the query parameter in the URL. See
- * {@link QueryMap @QueryMap} for URL-encoding equivalent.
+ * {@link rapid.rest.http.QueryMap @QueryMap} for URL-encoding equivalent.
  *
- * @see Query
- * @see QueryMap
- * @see EncodedQuery
+ * @see rapid.rest.http.Query
+ * @see rapid.rest.http.QueryMap
+ * @see rapid.rest.http.EncodedQuery
  */
 @Documented
 @Target(PARAMETER)
diff --git a/retrofit/src/main/java/retrofit/http/Field.java b/rapidrest/src/main/java/rapid/rest/http/Field.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/Field.java
rename to rapidrest/src/main/java/rapid/rest/http/Field.java
index cdceca1a6..5774399b0 100644
--- a/retrofit/src/main/java/retrofit/http/Field.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Field.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/FieldMap.java b/rapidrest/src/main/java/rapid/rest/http/FieldMap.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/FieldMap.java
rename to rapidrest/src/main/java/rapid/rest/http/FieldMap.java
index df1b925e8..0604ef3aa 100644
--- a/retrofit/src/main/java/retrofit/http/FieldMap.java
+++ b/rapidrest/src/main/java/rapid/rest/http/FieldMap.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java b/rapidrest/src/main/java/rapid/rest/http/FormUrlEncoded.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/FormUrlEncoded.java
rename to rapidrest/src/main/java/rapid/rest/http/FormUrlEncoded.java
index 74c34ea3b..f2e0497f2 100644
--- a/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java
+++ b/rapidrest/src/main/java/rapid/rest/http/FormUrlEncoded.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/GET.java b/rapidrest/src/main/java/rapid/rest/http/GET.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/http/GET.java
rename to rapidrest/src/main/java/rapid/rest/http/GET.java
index 3cc64990b..e7ee202d8 100644
--- a/retrofit/src/main/java/retrofit/http/GET.java
+++ b/rapidrest/src/main/java/rapid/rest/http/GET.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod("GET")
+@rapid.rest.http.RestMethod("GET")
 public @interface GET {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/HEAD.java b/rapidrest/src/main/java/rapid/rest/http/HEAD.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/http/HEAD.java
rename to rapidrest/src/main/java/rapid/rest/http/HEAD.java
index 9f5f9e718..46dcdcb72 100644
--- a/retrofit/src/main/java/retrofit/http/HEAD.java
+++ b/rapidrest/src/main/java/rapid/rest/http/HEAD.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod("HEAD")
+@rapid.rest.http.RestMethod("HEAD")
 public @interface HEAD {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/Header.java b/rapidrest/src/main/java/rapid/rest/http/Header.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/Header.java
rename to rapidrest/src/main/java/rapid/rest/http/Header.java
index 501b40b81..6cfae5bcf 100644
--- a/retrofit/src/main/java/retrofit/http/Header.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Header.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Headers.java b/rapidrest/src/main/java/rapid/rest/http/Headers.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/Headers.java
rename to rapidrest/src/main/java/rapid/rest/http/Headers.java
index 36b9ff438..e3450e31a 100644
--- a/retrofit/src/main/java/retrofit/http/Headers.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Headers.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Multipart.java b/rapidrest/src/main/java/rapid/rest/http/Multipart.java
similarity index 92%
rename from retrofit/src/main/java/retrofit/http/Multipart.java
rename to rapidrest/src/main/java/rapid/rest/http/Multipart.java
index 79467217e..073e8985d 100644
--- a/retrofit/src/main/java/retrofit/http/Multipart.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Multipart.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -24,7 +24,7 @@
 
 /**
  * Denotes that the request body is multi-part. Parts should be declared as parameters and
- * annotated with {@link Part @Part}.
+ * annotated with {@link rapid.rest.http.Part @Part}.
  */
 @Documented
 @Target(METHOD)
diff --git a/retrofit/src/main/java/retrofit/http/PATCH.java b/rapidrest/src/main/java/rapid/rest/http/PATCH.java
similarity index 92%
rename from retrofit/src/main/java/retrofit/http/PATCH.java
rename to rapidrest/src/main/java/rapid/rest/http/PATCH.java
index c978a2877..1ef7cc0c8 100644
--- a/retrofit/src/main/java/retrofit/http/PATCH.java
+++ b/rapidrest/src/main/java/rapid/rest/http/PATCH.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod(value = "PATCH", hasBody = true)
+@rapid.rest.http.RestMethod(value = "PATCH", hasBody = true)
 public @interface PATCH {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/POST.java b/rapidrest/src/main/java/rapid/rest/http/POST.java
similarity index 92%
rename from retrofit/src/main/java/retrofit/http/POST.java
rename to rapidrest/src/main/java/rapid/rest/http/POST.java
index c85f62daf..4bb64497c 100644
--- a/retrofit/src/main/java/retrofit/http/POST.java
+++ b/rapidrest/src/main/java/rapid/rest/http/POST.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod(value = "POST", hasBody = true)
+@rapid.rest.http.RestMethod(value = "POST", hasBody = true)
 public @interface POST {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/PUT.java b/rapidrest/src/main/java/rapid/rest/http/PUT.java
similarity index 92%
rename from retrofit/src/main/java/retrofit/http/PUT.java
rename to rapidrest/src/main/java/rapid/rest/http/PUT.java
index e8e006fca..3a68a9343 100644
--- a/retrofit/src/main/java/retrofit/http/PUT.java
+++ b/rapidrest/src/main/java/rapid/rest/http/PUT.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -26,7 +26,7 @@
 @Documented
 @Target(METHOD)
 @Retention(RUNTIME)
-@RestMethod(value = "PUT", hasBody = true)
+@rapid.rest.http.RestMethod(value = "PUT", hasBody = true)
 public @interface PUT {
   String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/Part.java b/rapidrest/src/main/java/rapid/rest/http/Part.java
similarity index 90%
rename from retrofit/src/main/java/retrofit/http/Part.java
rename to rapidrest/src/main/java/rapid/rest/http/Part.java
index 6466bafd9..13a06a2ea 100644
--- a/retrofit/src/main/java/retrofit/http/Part.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Part.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -27,12 +27,12 @@
  * <p>
  * The parameter type on which this annotation exists will be processed in one of three ways:
  * <ul>
- * <li>If the type implements {@link retrofit.mime.TypedOutput TypedOutput} the headers and
+ * <li>If the type implements {@link rapid.rest.mime.TypedOutput TypedOutput} the headers and
  * body will be used directly.</li>
  * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}
  * content type.</li>
  * <li>Other object types will be converted to an appropriate representation by calling {@link
- * retrofit.converter.Converter#toBody(Object)}.</li>
+ * rapid.rest.converter.Converter#toBody(Object)}.</li>
  * </ul>
  * <p>
  * Values may be {@code null} which will omit them from the request body.
diff --git a/retrofit/src/main/java/retrofit/http/PartMap.java b/rapidrest/src/main/java/rapid/rest/http/PartMap.java
similarity index 86%
rename from retrofit/src/main/java/retrofit/http/PartMap.java
rename to rapidrest/src/main/java/rapid/rest/http/PartMap.java
index 40da835b6..f0492ca1c 100644
--- a/retrofit/src/main/java/retrofit/http/PartMap.java
+++ b/rapidrest/src/main/java/rapid/rest/http/PartMap.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -27,12 +27,12 @@
  * <p>
  * Values of the map on which this annotation exists will be processed in one of three ways:
  * <ul>
- * <li>If the type implements {@link retrofit.mime.TypedOutput TypedOutput} the headers and
+ * <li>If the type implements {@link rapid.rest.mime.TypedOutput TypedOutput} the headers and
  * body will be used directly.</li>
  * <li>If the type is {@link String} the value will also be used directly with a {@code text/plain}
  * content type.</li>
  * <li>Other object types will be converted to an appropriate representation by calling {@link
- * retrofit.converter.Converter#toBody(Object)}.</li>
+ * rapid.rest.converter.Converter#toBody(Object)}.</li>
  * </ul>
  * <p>
  * <pre>
@@ -42,8 +42,8 @@
  * </pre>
  * <p>
  *
- * @see Multipart
- * @see Part
+ * @see rapid.rest.http.Multipart
+ * @see rapid.rest.http.Part
  */
 @Documented
 @Target(PARAMETER)
diff --git a/retrofit/src/main/java/retrofit/http/Path.java b/rapidrest/src/main/java/rapid/rest/http/Path.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/Path.java
rename to rapidrest/src/main/java/rapid/rest/http/Path.java
index cd0ae4115..68315141e 100644
--- a/retrofit/src/main/java/retrofit/http/Path.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Path.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Query.java b/rapidrest/src/main/java/rapid/rest/http/Query.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/Query.java
rename to rapidrest/src/main/java/rapid/rest/http/Query.java
index ad83ec160..294ceb403 100644
--- a/retrofit/src/main/java/retrofit/http/Query.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Query.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/QueryMap.java b/rapidrest/src/main/java/rapid/rest/http/QueryMap.java
similarity index 98%
rename from retrofit/src/main/java/retrofit/http/QueryMap.java
rename to rapidrest/src/main/java/rapid/rest/http/QueryMap.java
index 46a9c5e09..219f74f48 100644
--- a/retrofit/src/main/java/retrofit/http/QueryMap.java
+++ b/rapidrest/src/main/java/rapid/rest/http/QueryMap.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/RestMethod.java b/rapidrest/src/main/java/rapid/rest/http/RestMethod.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/http/RestMethod.java
rename to rapidrest/src/main/java/rapid/rest/http/RestMethod.java
index dec22637b..5d009bc51 100644
--- a/retrofit/src/main/java/retrofit/http/RestMethod.java
+++ b/rapidrest/src/main/java/rapid/rest/http/RestMethod.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Streaming.java b/rapidrest/src/main/java/rapid/rest/http/Streaming.java
similarity index 80%
rename from retrofit/src/main/java/retrofit/http/Streaming.java
rename to rapidrest/src/main/java/rapid/rest/http/Streaming.java
index 2c7e1830f..4d7ff3ed2 100644
--- a/retrofit/src/main/java/retrofit/http/Streaming.java
+++ b/rapidrest/src/main/java/rapid/rest/http/Streaming.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.http;
+package rapid.rest.http;
 
 import java.lang.annotation.Documented;
 import java.lang.annotation.Retention;
@@ -23,8 +23,8 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * Treat the response body on methods returning {@link retrofit.client.Response Response} as is,
- * i.e. without converting {@link retrofit.client.Response#getBody() getBody()} to {@code byte[]}.
+ * Treat the response body on methods returning {@link rapid.rest.client.Response Response} as is,
+ * i.e. without converting {@link rapid.rest.client.Response#getBody() getBody()} to {@code byte[]}.
  */
 @Documented
 @Target(METHOD)
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/rapidrest/src/main/java/rapid/rest/mime/FormUrlEncodedTypedOutput.java
similarity index 93%
rename from retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
rename to rapidrest/src/main/java/rapid/rest/mime/FormUrlEncodedTypedOutput.java
index d807195a2..d85d67e3c 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/FormUrlEncodedTypedOutput.java
@@ -13,14 +13,14 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URLEncoder;
 
-public final class FormUrlEncodedTypedOutput implements TypedOutput {
+public final class FormUrlEncodedTypedOutput implements rapid.rest.mime.TypedOutput {
   final ByteArrayOutputStream content = new ByteArrayOutputStream();
 
   public void addField(String name, String value) {
diff --git a/retrofit/src/main/java/retrofit/mime/MimeUtil.java b/rapidrest/src/main/java/rapid/rest/mime/MimeUtil.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/mime/MimeUtil.java
rename to rapidrest/src/main/java/rapid/rest/mime/MimeUtil.java
index 7307703d5..59ec00d74 100644
--- a/retrofit/src/main/java/retrofit/mime/MimeUtil.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/MimeUtil.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
diff --git a/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java b/rapidrest/src/main/java/rapid/rest/mime/MultipartTypedOutput.java
similarity index 99%
rename from retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
rename to rapidrest/src/main/java/rapid/rest/mime/MultipartTypedOutput.java
index f6dfcff18..53d2c7b7e 100644
--- a/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/MultipartTypedOutput.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
diff --git a/retrofit/src/main/java/retrofit/mime/TypedByteArray.java b/rapidrest/src/main/java/rapid/rest/mime/TypedByteArray.java
similarity index 94%
rename from retrofit/src/main/java/retrofit/mime/TypedByteArray.java
rename to rapidrest/src/main/java/rapid/rest/mime/TypedByteArray.java
index a167ae9c9..54acfadea 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/TypedByteArray.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
@@ -26,7 +26,7 @@
  *
  * @author Bob Lee (bob@squareup.com)
  */
-public class TypedByteArray implements TypedInput, TypedOutput {
+public class TypedByteArray implements rapid.rest.mime.TypedInput, rapid.rest.mime.TypedOutput {
   private final String mimeType;
   private final byte[] bytes;
 
diff --git a/retrofit/src/main/java/retrofit/mime/TypedFile.java b/rapidrest/src/main/java/rapid/rest/mime/TypedFile.java
similarity index 96%
rename from retrofit/src/main/java/retrofit/mime/TypedFile.java
rename to rapidrest/src/main/java/rapid/rest/mime/TypedFile.java
index 43fcd3a07..b714ee490 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedFile.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/TypedFile.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -26,7 +26,7 @@
  *
  * @author Bob Lee (bob@squareup.com)
  */
-public class TypedFile implements TypedInput, TypedOutput {
+public class TypedFile implements rapid.rest.mime.TypedInput, rapid.rest.mime.TypedOutput {
   private static final int BUFFER_SIZE = 4096;
 
   private final String mimeType;
diff --git a/retrofit/src/main/java/retrofit/mime/TypedInput.java b/rapidrest/src/main/java/rapid/rest/mime/TypedInput.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/mime/TypedInput.java
rename to rapidrest/src/main/java/rapid/rest/mime/TypedInput.java
index f05afb84d..bf2bdfce2 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedInput.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/TypedInput.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/retrofit/src/main/java/retrofit/mime/TypedOutput.java b/rapidrest/src/main/java/rapid/rest/mime/TypedOutput.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/mime/TypedOutput.java
rename to rapidrest/src/main/java/rapid/rest/mime/TypedOutput.java
index f15055f8f..68ad435ca 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedOutput.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/TypedOutput.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.IOException;
 import java.io.OutputStream;
diff --git a/retrofit/src/main/java/retrofit/mime/TypedString.java b/rapidrest/src/main/java/rapid/rest/mime/TypedString.java
similarity index 97%
rename from retrofit/src/main/java/retrofit/mime/TypedString.java
rename to rapidrest/src/main/java/rapid/rest/mime/TypedString.java
index 9c83230ff..9b86cd309 100644
--- a/retrofit/src/main/java/retrofit/mime/TypedString.java
+++ b/rapidrest/src/main/java/rapid/rest/mime/TypedString.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.UnsupportedEncodingException;
 
diff --git a/retrofit/src/test/java/retrofit/CallbackRunnableTest.java b/rapidrest/src/test/java/retrofit/CallbackRunnableTest.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/CallbackRunnableTest.java
rename to rapidrest/src/test/java/retrofit/CallbackRunnableTest.java
index 57cf710b3..fabdebe02 100644
--- a/retrofit/src/test/java/retrofit/CallbackRunnableTest.java
+++ b/rapidrest/src/test/java/retrofit/CallbackRunnableTest.java
@@ -11,7 +11,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static retrofit.Utils.SynchronousExecutor;
+import static rapid.rest.Utils.SynchronousExecutor;
 
 public class CallbackRunnableTest {
   private Executor executor = spy(new SynchronousExecutor());
diff --git a/retrofit/src/test/java/retrofit/EndpointsTest.java b/rapidrest/src/test/java/retrofit/EndpointsTest.java
similarity index 100%
rename from retrofit/src/test/java/retrofit/EndpointsTest.java
rename to rapidrest/src/test/java/retrofit/EndpointsTest.java
diff --git a/retrofit/src/test/java/retrofit/ErrorHandlerTest.java b/rapidrest/src/test/java/retrofit/ErrorHandlerTest.java
similarity index 95%
rename from retrofit/src/test/java/retrofit/ErrorHandlerTest.java
rename to rapidrest/src/test/java/retrofit/ErrorHandlerTest.java
index b42265c59..cda2554ba 100644
--- a/retrofit/src/test/java/retrofit/ErrorHandlerTest.java
+++ b/rapidrest/src/test/java/retrofit/ErrorHandlerTest.java
@@ -5,11 +5,11 @@
 import java.util.Collections;
 import org.junit.Before;
 import org.junit.Test;
-import retrofit.client.Client;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.http.GET;
+import rapid.rest.client.Client;
+import rapid.rest.client.Header;
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
+import rapid.rest.http.GET;
 import rx.Observable;
 import rx.Observer;
 
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/rapidrest/src/test/java/retrofit/RequestBuilderTest.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/RequestBuilderTest.java
rename to rapidrest/src/test/java/retrofit/RequestBuilderTest.java
index ad2c5aac9..0b0cd36e9 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/rapidrest/src/test/java/retrofit/RequestBuilderTest.java
@@ -13,31 +13,31 @@
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.converter.Converter;
-import retrofit.converter.GsonConverter;
-import retrofit.mime.MimeHelper;
-import retrofit.mime.MultipartTypedOutput;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
+import rapid.rest.client.Header;
+import rapid.rest.client.Request;
+import rapid.rest.converter.Converter;
+import rapid.rest.converter.GsonConverter;
+import rapid.rest.mime.MimeHelper;
+import rapid.rest.mime.MultipartTypedOutput;
+import rapid.rest.mime.TypedOutput;
+import rapid.rest.mime.TypedString;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
-import static retrofit.RestMethodInfo.ParamUsage;
-import static retrofit.RestMethodInfo.ParamUsage.BODY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD_MAP;
-import static retrofit.RestMethodInfo.ParamUsage.HEADER;
-import static retrofit.RestMethodInfo.ParamUsage.PART;
-import static retrofit.RestMethodInfo.ParamUsage.PART_MAP;
-import static retrofit.RestMethodInfo.ParamUsage.PATH;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;
-import static retrofit.RestMethodInfo.RequestType;
+import static rapid.restMethodInfo.ParamUsage;
+import static rapid.restMethodInfo.ParamUsage.BODY;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_PATH;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
+import static rapid.restMethodInfo.ParamUsage.FIELD;
+import static rapid.restMethodInfo.ParamUsage.FIELD_MAP;
+import static rapid.restMethodInfo.ParamUsage.HEADER;
+import static rapid.restMethodInfo.ParamUsage.PART;
+import static rapid.restMethodInfo.ParamUsage.PART_MAP;
+import static rapid.restMethodInfo.ParamUsage.PATH;
+import static rapid.restMethodInfo.ParamUsage.QUERY;
+import static rapid.restMethodInfo.ParamUsage.QUERY_MAP;
+import static rapid.restMethodInfo.RequestType;
 
 public class RequestBuilderTest {
   @Test public void normalGet() throws Exception {
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/rapidrest/src/test/java/retrofit/RestAdapterTest.java
similarity index 97%
rename from retrofit/src/test/java/retrofit/RestAdapterTest.java
rename to rapidrest/src/test/java/retrofit/RestAdapterTest.java
index 545261f0d..464427255 100644
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/rapidrest/src/test/java/retrofit/RestAdapterTest.java
@@ -14,20 +14,20 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
-import retrofit.client.Client;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.converter.ConversionException;
-import retrofit.http.Body;
-import retrofit.http.GET;
-import retrofit.http.Headers;
-import retrofit.http.POST;
-import retrofit.http.Path;
-import retrofit.http.Streaming;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
+import rapid.rest.client.Client;
+import rapid.rest.client.Header;
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
+import rapid.rest.converter.ConversionException;
+import rapid.rest.http.Body;
+import rapid.rest.http.GET;
+import rapid.rest.http.Headers;
+import rapid.rest.http.POST;
+import rapid.rest.http.Path;
+import rapid.rest.http.Streaming;
+import rapid.rest.mime.TypedInput;
+import rapid.rest.mime.TypedOutput;
+import rapid.rest.mime.TypedString;
 import rx.Observable;
 import rx.functions.Action1;
 
@@ -44,11 +44,11 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
-import static retrofit.Profiler.RequestInformation;
-import static retrofit.RestAdapter.LogLevel.BASIC;
-import static retrofit.RestAdapter.LogLevel.FULL;
-import static retrofit.RestAdapter.LogLevel.HEADERS;
-import static retrofit.Utils.SynchronousExecutor;
+import static rapid.rest.Profiler.RequestInformation;
+import static rapid.restAdapter.LogLevel.BASIC;
+import static rapid.restAdapter.LogLevel.FULL;
+import static rapid.restAdapter.LogLevel.HEADERS;
+import static rapid.rest.Utils.SynchronousExecutor;
 
 public class RestAdapterTest {
   private static final List<Header> NO_HEADERS = Collections.emptyList();
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/rapidrest/src/test/java/retrofit/RestMethodInfoTest.java
similarity index 95%
rename from retrofit/src/test/java/retrofit/RestMethodInfoTest.java
rename to rapidrest/src/test/java/retrofit/RestMethodInfoTest.java
index fcf67096f..661484af6 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/rapidrest/src/test/java/retrofit/RestMethodInfoTest.java
@@ -11,50 +11,50 @@
 import java.util.Map;
 import java.util.Set;
 import org.junit.Test;
-import retrofit.client.Response;
-import retrofit.http.Body;
-import retrofit.http.DELETE;
-import retrofit.http.EncodedPath;
-import retrofit.http.EncodedQuery;
-import retrofit.http.EncodedQueryMap;
-import retrofit.http.Field;
-import retrofit.http.FieldMap;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.GET;
-import retrofit.http.HEAD;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.Multipart;
-import retrofit.http.PATCH;
-import retrofit.http.POST;
-import retrofit.http.PUT;
-import retrofit.http.Part;
-import retrofit.http.PartMap;
-import retrofit.http.Path;
-import retrofit.http.Query;
-import retrofit.http.QueryMap;
-import retrofit.http.RestMethod;
-import retrofit.http.Streaming;
-import retrofit.mime.TypedOutput;
+import rapid.rest.client.Response;
+import rapid.rest.http.Body;
+import rapid.rest.http.DELETE;
+import rapid.rest.http.EncodedPath;
+import rapid.rest.http.EncodedQuery;
+import rapid.rest.http.EncodedQueryMap;
+import rapid.rest.http.Field;
+import rapid.rest.http.FieldMap;
+import rapid.rest.http.FormUrlEncoded;
+import rapid.rest.http.GET;
+import rapid.rest.http.HEAD;
+import rapid.rest.http.Header;
+import rapid.rest.http.Headers;
+import rapid.rest.http.Multipart;
+import rapid.rest.http.PATCH;
+import rapid.rest.http.POST;
+import rapid.rest.http.PUT;
+import rapid.rest.http.Part;
+import rapid.rest.http.PartMap;
+import rapid.rest.http.Path;
+import rapid.rest.http.Query;
+import rapid.rest.http.QueryMap;
+import rapid.rest.http.RestMethod;
+import rapid.rest.http.Streaming;
+import rapid.rest.mime.TypedOutput;
 import rx.Observable;
 
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static retrofit.RestMethodInfo.ParamUsage.BODY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD_MAP;
-import static retrofit.RestMethodInfo.ParamUsage.HEADER;
-import static retrofit.RestMethodInfo.ParamUsage.PATH;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY_MAP;
-import static retrofit.RestMethodInfo.RequestType.FORM_URL_ENCODED;
-import static retrofit.RestMethodInfo.RequestType.MULTIPART;
-import static retrofit.RestMethodInfo.RequestType.SIMPLE;
+import static rapid.restMethodInfo.ParamUsage.BODY;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_PATH;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY;
+import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
+import static rapid.restMethodInfo.ParamUsage.FIELD;
+import static rapid.restMethodInfo.ParamUsage.FIELD_MAP;
+import static rapid.restMethodInfo.ParamUsage.HEADER;
+import static rapid.restMethodInfo.ParamUsage.PATH;
+import static rapid.restMethodInfo.ParamUsage.QUERY;
+import static rapid.restMethodInfo.ParamUsage.QUERY_MAP;
+import static rapid.restMethodInfo.RequestType.FORM_URL_ENCODED;
+import static rapid.restMethodInfo.RequestType.MULTIPART;
+import static rapid.restMethodInfo.RequestType.SIMPLE;
 
 @SuppressWarnings("unused") // Lots of unused parameters for example code.
 public class RestMethodInfoTest {
@@ -1199,8 +1199,8 @@ Response a(@Field("a") String a) {
     methodInfo.init();
 
     assertThat(methodInfo.headers).isEqualTo(
-        Arrays.asList(new retrofit.client.Header("X-Foo", "Bar"),
-            new retrofit.client.Header("X-Ping", "Pong")));
+        Arrays.asList(new rapid.rest.client.Header("X-Foo", "Bar"),
+            new rapid.rest.client.Header("X-Ping", "Pong")));
   }
 
   @Test public void twoHeaderParams() {
diff --git a/retrofit/src/test/java/retrofit/RxSupportTest.java b/rapidrest/src/test/java/retrofit/RxSupportTest.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/RxSupportTest.java
rename to rapidrest/src/test/java/retrofit/RxSupportTest.java
index 287d7e3fe..c3ac34b50 100644
--- a/retrofit/src/test/java/retrofit/RxSupportTest.java
+++ b/rapidrest/src/test/java/retrofit/RxSupportTest.java
@@ -10,9 +10,9 @@
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
-import retrofit.client.Header;
-import retrofit.client.Response;
-import retrofit.mime.TypedInput;
+import rapid.rest.client.Header;
+import rapid.rest.client.Response;
+import rapid.rest.mime.TypedInput;
 import rx.Observer;
 import rx.Subscription;
 import rx.schedulers.Schedulers;
@@ -25,8 +25,8 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static retrofit.RequestInterceptor.RequestFacade;
-import static retrofit.RxSupport.Invoker;
+import static rapid.rest.RequestInterceptor.RequestFacade;
+import static rapid.rest.RxSupport.Invoker;
 
 public class RxSupportTest {
 
diff --git a/retrofit/src/test/java/retrofit/TestingUtils.java b/rapidrest/src/test/java/retrofit/TestingUtils.java
similarity index 92%
rename from retrofit/src/test/java/retrofit/TestingUtils.java
rename to rapidrest/src/test/java/retrofit/TestingUtils.java
index ea9ca09a3..de15b6689 100644
--- a/retrofit/src/test/java/retrofit/TestingUtils.java
+++ b/rapidrest/src/test/java/retrofit/TestingUtils.java
@@ -4,8 +4,8 @@
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.Map;
-import retrofit.mime.MultipartTypedOutput;
-import retrofit.mime.TypedOutput;
+import rapid.rest.mime.MultipartTypedOutput;
+import rapid.rest.mime.TypedOutput;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
diff --git a/retrofit/src/test/java/retrofit/client/ApacheClientTest.java b/rapidrest/src/test/java/retrofit/client/ApacheClientTest.java
similarity index 94%
rename from retrofit/src/test/java/retrofit/client/ApacheClientTest.java
rename to rapidrest/src/test/java/retrofit/client/ApacheClientTest.java
index 4cb15bbb8..3bfed0d6f 100644
--- a/retrofit/src/test/java/retrofit/client/ApacheClientTest.java
+++ b/rapidrest/src/test/java/retrofit/client/ApacheClientTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.client;
+package rapid.rest.client;
 
 import com.google.common.io.ByteStreams;
 import java.io.IOException;
@@ -16,14 +16,14 @@
 import org.apache.http.message.BasicHttpResponse;
 import org.apache.http.message.BasicStatusLine;
 import org.junit.Test;
-import retrofit.TestingUtils;
-import retrofit.mime.MultipartTypedOutput;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
+import rapid.rest.TestingUtils;
+import rapid.rest.mime.MultipartTypedOutput;
+import rapid.rest.mime.TypedOutput;
+import rapid.rest.mime.TypedString;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static retrofit.TestingUtils.assertBytes;
-import static retrofit.client.ApacheClient.TypedOutputEntity;
+import static rapid.rest.TestingUtils.assertBytes;
+import static rapid.rest.client.ApacheClient.TypedOutputEntity;
 
 public class ApacheClientTest {
   private static final String HOST = "http://example.com";
diff --git a/retrofit/src/test/java/retrofit/client/ClientIntegrationTest.java b/rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java
similarity index 94%
rename from retrofit/src/test/java/retrofit/client/ClientIntegrationTest.java
rename to rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java
index 6739bc784..329c81c87 100644
--- a/retrofit/src/test/java/retrofit/client/ClientIntegrationTest.java
+++ b/rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java
@@ -1,5 +1,5 @@
 //// Copyright 2014 Square, Inc.
-//package retrofit.client;
+//package rapid.rest.client;
 //
 //import com.squareup.okhttp.mockwebserver.MockResponse;
 //import com.squareup.okhttp.mockwebserver.MockWebServer;
@@ -12,10 +12,10 @@
 //import org.junit.Test;
 //import org.junit.runner.RunWith;
 //import org.junit.runners.Parameterized;
-//import retrofit.RestAdapter;
-//import retrofit.http.Body;
-//import retrofit.http.GET;
-//import retrofit.http.POST;
+//import rapid.restAdapter;
+//import rapid.rest.http.Body;
+//import rapid.rest.http.GET;
+//import rapid.rest.http.POST;
 //
 //import static org.assertj.core.api.Assertions.assertThat;
 //
diff --git a/retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java b/rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java
rename to rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java
index 926e4b042..098df9b02 100644
--- a/retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java
+++ b/rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.client;
+package rapid.rest.client;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -13,7 +13,7 @@
 import java.util.Map;
 
 /**
- * Provides POJO behavior for all of the APIs {@link retrofit.client.UrlConnectionClient}
+ * Provides POJO behavior for all of the APIs {@link rapid.rest.client.UrlConnectionClient}
  * interacts with.
  */
 public class DummyHttpUrlConnection extends HttpURLConnection {
diff --git a/retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java b/rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java
similarity index 97%
rename from retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
rename to rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java
index 3539ef0a3..e8d1523dc 100644
--- a/retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
+++ b/rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.client;
+package rapid.rest.client;
 
 import com.google.common.io.ByteStreams;
 import java.io.ByteArrayInputStream;
@@ -10,12 +10,12 @@
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
-import retrofit.TestingUtils;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
+import rapid.rest.TestingUtils;
+import rapid.rest.mime.TypedOutput;
+import rapid.rest.mime.TypedString;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static retrofit.TestingUtils.assertBytes;
+import static rapid.rest.TestingUtils.assertBytes;
 
 public class UrlConnectionClientTest {
   private static final String HOST = "http://example.com";
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
similarity index 98%
rename from retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
rename to rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
index 0e3f79df4..212da813f 100644
--- a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ b/rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.ByteArrayOutputStream;
 import org.junit.Test;
diff --git a/retrofit/src/test/java/retrofit/mime/MimeHelper.java b/rapidrest/src/test/java/retrofit/mime/MimeHelper.java
similarity index 91%
rename from retrofit/src/test/java/retrofit/mime/MimeHelper.java
rename to rapidrest/src/test/java/retrofit/mime/MimeHelper.java
index f7d438a8f..4f788bde2 100644
--- a/retrofit/src/test/java/retrofit/mime/MimeHelper.java
+++ b/rapidrest/src/test/java/retrofit/mime/MimeHelper.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.util.List;
 
diff --git a/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java b/rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java
similarity index 93%
rename from retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
rename to rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java
index eb0765fef..f6e2b0e72 100644
--- a/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
+++ b/rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java
@@ -1,10 +1,10 @@
 // Copyright 2012 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static retrofit.mime.MimeUtil.parseCharset;
+import static rapid.rest.mime.MimeUtil.parseCharset;
 
 public class MimeUtilTest {
   @Test public void charsetParsing() {
diff --git a/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java b/rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
similarity index 99%
rename from retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
rename to rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
index 0fad627da..02ed3d943 100644
--- a/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
+++ b/rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.ByteArrayOutputStream;
 import org.junit.Test;
diff --git a/retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java b/rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
rename to rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java
index b076a0328..53f25fb18 100644
--- a/retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
+++ b/rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java
@@ -1,5 +1,5 @@
 // Copyright 2010 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import org.junit.Test;
 
diff --git a/retrofit/src/test/java/retrofit/mime/TypedFileTest.java b/rapidrest/src/test/java/retrofit/mime/TypedFileTest.java
similarity index 98%
rename from retrofit/src/test/java/retrofit/mime/TypedFileTest.java
rename to rapidrest/src/test/java/retrofit/mime/TypedFileTest.java
index 4d1cc69c2..b73d50b54 100644
--- a/retrofit/src/test/java/retrofit/mime/TypedFileTest.java
+++ b/rapidrest/src/test/java/retrofit/mime/TypedFileTest.java
@@ -1,5 +1,5 @@
 // Copyright 2010 Square, Inc.
-package retrofit.mime;
+package rapid.rest.mime;
 
 import java.io.File;
 import java.io.FileOutputStream;
diff --git a/retrofit-converters/README.md b/retrofit-converters/README.md
deleted file mode 100644
index ec010c032..000000000
--- a/retrofit-converters/README.md
+++ /dev/null
@@ -1,14 +0,0 @@
-Retrofit Converters
-===================
-
-Retrofit ships with a default converter for JSON that uses Gson but the library is content-format
-agnostic. The child modules contained herein are additional converters for other popular formats.
-
-To use, supply an instance of your desired converter when building your `RestAdapter` instance.
-
-```java
-RestAdapter restAdapter = new RestAdapter.Builder()
-    .setEndpoint("https://api.example.com")
-    .setConverter(new ProtoConverter())
-    .build();
-```
diff --git a/retrofit-converters/jackson/README.md b/retrofit-converters/jackson/README.md
deleted file mode 100644
index d07b0afa6..000000000
--- a/retrofit-converters/jackson/README.md
+++ /dev/null
@@ -1,10 +0,0 @@
-Jackson Converter
-=================
-
-A `Converter` which uses [Jackson][1] for serialization to and from JSON.
-
-A default `ObjectMapper` instance will be created or one can be configured and passed to the
-`JacksonConverter` construction to further control the serialization.
-
-
- [1]: http://wiki.fasterxml.com/JacksonHome
diff --git a/retrofit-converters/jackson/pom.xml b/retrofit-converters/jackson/pom.xml
deleted file mode 100644
index 0bcf44657..000000000
--- a/retrofit-converters/jackson/pom.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>retrofit-converters</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>converter-jackson</artifactId>
-  <name>Converter: Jackson</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.fasterxml.jackson.core</groupId>
-      <artifactId>jackson-databind</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java b/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java
deleted file mode 100644
index d481128b5..000000000
--- a/retrofit-converters/jackson/src/main/java/retrofit/converter/JacksonConverter.java
+++ /dev/null
@@ -1,56 +0,0 @@
-package retrofit.converter;
-
-import com.fasterxml.jackson.core.JsonParseException;
-import com.fasterxml.jackson.core.JsonProcessingException;
-import com.fasterxml.jackson.databind.JavaType;
-import com.fasterxml.jackson.databind.JsonMappingException;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.lang.reflect.Type;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-
-/**
- * A {@link Converter} which uses Jackson for reading and writing entities.
- *
- * @author Kai Waldron (kaiwaldron@gmail.com)
- */
-public class JacksonConverter implements Converter {
-  private static final String MIME_TYPE = "application/json; charset=UTF-8";
-
-  private final ObjectMapper objectMapper;
-
-  public JacksonConverter() {
-    this(new ObjectMapper());
-  }
-
-  public JacksonConverter(ObjectMapper objectMapper) {
-    this.objectMapper = objectMapper;
-  }
-
-  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
-    try {
-      JavaType javaType = objectMapper.getTypeFactory().constructType(type);
-      return objectMapper.readValue(body.in(), javaType);
-    } catch (JsonParseException e) {
-      throw new ConversionException(e);
-    } catch (JsonMappingException e) {
-      throw new ConversionException(e);
-    } catch (IOException e) {
-      throw new ConversionException(e);
-    }
-  }
-
-  @Override public TypedOutput toBody(Object object) {
-    try {
-      String json = objectMapper.writeValueAsString(object);
-      return new TypedByteArray(MIME_TYPE, json.getBytes("UTF-8"));
-    } catch (JsonProcessingException e) {
-      throw new AssertionError(e);
-    } catch (UnsupportedEncodingException e) {
-      throw new AssertionError(e);
-    }
-  }
-}
diff --git a/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java b/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java
deleted file mode 100644
index 3396ccf01..000000000
--- a/retrofit-converters/jackson/src/test/java/retrofit/converter/JacksonConverterTest.java
+++ /dev/null
@@ -1,81 +0,0 @@
-package retrofit.converter;
-
-import com.fasterxml.jackson.annotation.JsonProperty;
-import java.io.ByteArrayOutputStream;
-import org.junit.Test;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class JacksonConverterTest {
-  private static final String MIME_TYPE = "application/json; charset=UTF-8";
-  private static final MyObject OBJECT = new MyObject("hello world", 10);
-  private final String JSON = "{\"message\":\"hello world\",\"count\":10}";
-
-  private final JacksonConverter converter = new JacksonConverter();
-
-  @Test public void serialize() throws Exception {
-    TypedOutput typedOutput = converter.toBody(OBJECT);
-    assertThat(typedOutput.mimeType()).isEqualTo(MIME_TYPE);
-    assertThat(asString(typedOutput)).isEqualTo(JSON);
-  }
-
-  @Test public void deserialize() throws Exception {
-    TypedInput input = new TypedByteArray(MIME_TYPE, JSON.getBytes());
-    MyObject result = (MyObject) converter.fromBody(input, MyObject.class);
-    assertThat(result).isEqualTo(OBJECT);
-  }
-
-  @Test(expected = ConversionException.class)
-  public void deserializeWrongValue() throws Exception {
-    TypedInput input = new TypedByteArray(MIME_TYPE, "{\"foo\":\"bar\"}".getBytes());
-    converter.fromBody(input, MyObject.class);
-  }
-
-  @Test(expected = ConversionException.class)
-  public void deserializeWrongClass() throws Exception {
-    TypedInput input = new TypedByteArray(MIME_TYPE, JSON.getBytes());
-    converter.fromBody(input, String.class);
-  }
-
-  private String asString(TypedOutput typedOutput) throws Exception {
-    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-    typedOutput.writeTo(bytes);
-    return new String(bytes.toByteArray());
-  }
-
-  static class MyObject {
-    private final String message;
-    private final int count;
-
-    public MyObject(@JsonProperty("message") String message, @JsonProperty("count") int count) {
-      this.message = message;
-      this.count = count;
-    }
-
-    public String getMessage() {
-      return message;
-    }
-
-    public int getCount() {
-      return count;
-    }
-
-    @Override public boolean equals(Object o) {
-      if (this == o) return true;
-      if (o == null || getClass() != o.getClass()) return false;
-
-      MyObject myObject = (MyObject) o;
-      return count == myObject.count
-          && !(message != null ? !message.equals(myObject.message) : myObject.message != null);
-    }
-
-    @Override public int hashCode() {
-      int result = message != null ? message.hashCode() : 0;
-      result = 31 * result + count;
-      return result;
-    }
-  }
-}
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
deleted file mode 100644
index 1c540cb80..000000000
--- a/retrofit-converters/pom.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>retrofit-converters</artifactId>
-  <name>Converters</name>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>protobuf</module>
-    <module>jackson</module>
-    <module>wire</module>
-    <module>simplexml</module>
-  </modules>
-</project>
diff --git a/retrofit-converters/protobuf/README.md b/retrofit-converters/protobuf/README.md
deleted file mode 100644
index ca4334147..000000000
--- a/retrofit-converters/protobuf/README.md
+++ /dev/null
@@ -1,7 +0,0 @@
-Google Protocol Buffer Converter
-================================
-
-A `Converter` which uses [Protocol Buffer][1] binary serialization.
-
-
- [1]: https://developers.google.com/protocol-buffers/
diff --git a/retrofit-converters/protobuf/pom.xml b/retrofit-converters/protobuf/pom.xml
deleted file mode 100644
index 419a3271b..000000000
--- a/retrofit-converters/protobuf/pom.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>retrofit-converters</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>converter-protobuf</artifactId>
-  <name>Converter: Protocol Buffers</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.google.protobuf</groupId>
-      <artifactId>protobuf-java</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java
deleted file mode 100644
index f4c0b6778..000000000
--- a/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java
+++ /dev/null
@@ -1,55 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.converter;
-
-import com.google.protobuf.AbstractMessageLite;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-
-/** A {@link Converter} that reads and writes protocol buffers. */
-public class ProtoConverter implements Converter {
-  private static final String MIME_TYPE = "application/x-protobuf";
-
-  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
-    if (!(type instanceof Class<?>)) {
-      throw new IllegalArgumentException("Expected a raw Class<?> but was " + type);
-    }
-    Class<?> c = (Class<?>) type;
-    if (!AbstractMessageLite.class.isAssignableFrom(c)) {
-      throw new IllegalArgumentException("Expected a protobuf message but was " + c.getName());
-    }
-
-    String mimeType = body.mimeType();
-    if (!MIME_TYPE.equals(mimeType)) {
-      throw new ConversionException("Response content type was not a proto: " + mimeType);
-    }
-
-    try {
-      Method parseFrom = c.getMethod("parseFrom", InputStream.class);
-      return parseFrom.invoke(null, body.in());
-    } catch (InvocationTargetException e) {
-      throw new ConversionException(c.getName() + ".parseFrom() failed", e.getCause());
-    } catch (NoSuchMethodException e) {
-      throw new IllegalArgumentException("Expected a protobuf message but was " + c.getName());
-    } catch (IllegalAccessException e) {
-      throw new AssertionError();
-    } catch (IOException e) {
-      throw new ConversionException(e);
-    }
-  }
-
-  @Override public TypedOutput toBody(Object object) {
-    if (!(object instanceof AbstractMessageLite)) {
-      throw new IllegalArgumentException(
-          "Expected a protobuf message but was " + (object != null ? object.getClass().getName()
-              : "null"));
-    }
-    byte[] bytes = ((AbstractMessageLite) object).toByteArray();
-    return new TypedByteArray(MIME_TYPE, bytes);
-  }
-}
diff --git a/retrofit-converters/protobuf/src/test/gen-protos.sh b/retrofit-converters/protobuf/src/test/gen-protos.sh
deleted file mode 100755
index 999d7f533..000000000
--- a/retrofit-converters/protobuf/src/test/gen-protos.sh
+++ /dev/null
@@ -1,4 +0,0 @@
-#!/bin/bash
-
-set -ex
-protoc --java_out=java/ protos/phone.proto
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/converter/PhoneProtos.java b/retrofit-converters/protobuf/src/test/java/retrofit/converter/PhoneProtos.java
deleted file mode 100644
index 460f8cc35..000000000
--- a/retrofit-converters/protobuf/src/test/java/retrofit/converter/PhoneProtos.java
+++ /dev/null
@@ -1,521 +0,0 @@
-// Generated by the protocol buffer compiler.  DO NOT EDIT!
-// source: protos/phone.proto
-
-package retrofit.converter;
-
-public final class PhoneProtos {
-  private PhoneProtos() {}
-  public static void registerAllExtensions(
-      com.google.protobuf.ExtensionRegistry registry) {
-  }
-  public interface PhoneOrBuilder
-      extends com.google.protobuf.MessageOrBuilder {
-
-    // optional string number = 1;
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    boolean hasNumber();
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    java.lang.String getNumber();
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    com.google.protobuf.ByteString
-        getNumberBytes();
-  }
-  /**
-   * Protobuf type {@code retrofit.Phone}
-   */
-  public static final class Phone extends
-      com.google.protobuf.GeneratedMessage
-      implements PhoneOrBuilder {
-    // Use Phone.newBuilder() to construct.
-    private Phone(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
-      super(builder);
-      this.unknownFields = builder.getUnknownFields();
-    }
-    private Phone(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }
-
-    private static final Phone defaultInstance;
-    public static Phone getDefaultInstance() {
-      return defaultInstance;
-    }
-
-    public Phone getDefaultInstanceForType() {
-      return defaultInstance;
-    }
-
-    private final com.google.protobuf.UnknownFieldSet unknownFields;
-    @java.lang.Override
-    public final com.google.protobuf.UnknownFieldSet
-        getUnknownFields() {
-      return this.unknownFields;
-    }
-    private Phone(
-        com.google.protobuf.CodedInputStream input,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws com.google.protobuf.InvalidProtocolBufferException {
-      initFields();
-      int mutable_bitField0_ = 0;
-      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
-          com.google.protobuf.UnknownFieldSet.newBuilder();
-      try {
-        boolean done = false;
-        while (!done) {
-          int tag = input.readTag();
-          switch (tag) {
-            case 0:
-              done = true;
-              break;
-            default: {
-              if (!parseUnknownField(input, unknownFields,
-                                     extensionRegistry, tag)) {
-                done = true;
-              }
-              break;
-            }
-            case 10: {
-              bitField0_ |= 0x00000001;
-              number_ = input.readBytes();
-              break;
-            }
-          }
-        }
-      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
-        throw e.setUnfinishedMessage(this);
-      } catch (java.io.IOException e) {
-        throw new com.google.protobuf.InvalidProtocolBufferException(
-            e.getMessage()).setUnfinishedMessage(this);
-      } finally {
-        this.unknownFields = unknownFields.build();
-        makeExtensionsImmutable();
-      }
-    }
-    public static final com.google.protobuf.Descriptors.Descriptor
-        getDescriptor() {
-      return retrofit.converter.PhoneProtos.internal_static_retrofit_Phone_descriptor;
-    }
-
-    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
-        internalGetFieldAccessorTable() {
-      return retrofit.converter.PhoneProtos.internal_static_retrofit_Phone_fieldAccessorTable
-          .ensureFieldAccessorsInitialized(
-              retrofit.converter.PhoneProtos.Phone.class, retrofit.converter.PhoneProtos.Phone.Builder.class);
-    }
-
-    public static com.google.protobuf.Parser<Phone> PARSER =
-        new com.google.protobuf.AbstractParser<Phone>() {
-      public Phone parsePartialFrom(
-          com.google.protobuf.CodedInputStream input,
-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-          throws com.google.protobuf.InvalidProtocolBufferException {
-        return new Phone(input, extensionRegistry);
-      }
-    };
-
-    @java.lang.Override
-    public com.google.protobuf.Parser<Phone> getParserForType() {
-      return PARSER;
-    }
-
-    private int bitField0_;
-    // optional string number = 1;
-    public static final int NUMBER_FIELD_NUMBER = 1;
-    private java.lang.Object number_;
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    public boolean hasNumber() {
-      return ((bitField0_ & 0x00000001) == 0x00000001);
-    }
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    public java.lang.String getNumber() {
-      java.lang.Object ref = number_;
-      if (ref instanceof java.lang.String) {
-        return (java.lang.String) ref;
-      } else {
-        com.google.protobuf.ByteString bs = 
-            (com.google.protobuf.ByteString) ref;
-        java.lang.String s = bs.toStringUtf8();
-        if (bs.isValidUtf8()) {
-          number_ = s;
-        }
-        return s;
-      }
-    }
-    /**
-     * <code>optional string number = 1;</code>
-     */
-    public com.google.protobuf.ByteString
-        getNumberBytes() {
-      java.lang.Object ref = number_;
-      if (ref instanceof java.lang.String) {
-        com.google.protobuf.ByteString b = 
-            com.google.protobuf.ByteString.copyFromUtf8(
-                (java.lang.String) ref);
-        number_ = b;
-        return b;
-      } else {
-        return (com.google.protobuf.ByteString) ref;
-      }
-    }
-
-    private void initFields() {
-      number_ = "";
-    }
-    private byte memoizedIsInitialized = -1;
-    public final boolean isInitialized() {
-      byte isInitialized = memoizedIsInitialized;
-      if (isInitialized != -1) return isInitialized == 1;
-
-      memoizedIsInitialized = 1;
-      return true;
-    }
-
-    public void writeTo(com.google.protobuf.CodedOutputStream output)
-                        throws java.io.IOException {
-      getSerializedSize();
-      if (((bitField0_ & 0x00000001) == 0x00000001)) {
-        output.writeBytes(1, getNumberBytes());
-      }
-      getUnknownFields().writeTo(output);
-    }
-
-    private int memoizedSerializedSize = -1;
-    public int getSerializedSize() {
-      int size = memoizedSerializedSize;
-      if (size != -1) return size;
-
-      size = 0;
-      if (((bitField0_ & 0x00000001) == 0x00000001)) {
-        size += com.google.protobuf.CodedOutputStream
-          .computeBytesSize(1, getNumberBytes());
-      }
-      size += getUnknownFields().getSerializedSize();
-      memoizedSerializedSize = size;
-      return size;
-    }
-
-    private static final long serialVersionUID = 0L;
-    @java.lang.Override
-    protected java.lang.Object writeReplace()
-        throws java.io.ObjectStreamException {
-      return super.writeReplace();
-    }
-
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        com.google.protobuf.ByteString data)
-        throws com.google.protobuf.InvalidProtocolBufferException {
-      return PARSER.parseFrom(data);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        com.google.protobuf.ByteString data,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws com.google.protobuf.InvalidProtocolBufferException {
-      return PARSER.parseFrom(data, extensionRegistry);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(byte[] data)
-        throws com.google.protobuf.InvalidProtocolBufferException {
-      return PARSER.parseFrom(data);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        byte[] data,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws com.google.protobuf.InvalidProtocolBufferException {
-      return PARSER.parseFrom(data, extensionRegistry);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(java.io.InputStream input)
-        throws java.io.IOException {
-      return PARSER.parseFrom(input);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        java.io.InputStream input,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws java.io.IOException {
-      return PARSER.parseFrom(input, extensionRegistry);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseDelimitedFrom(java.io.InputStream input)
-        throws java.io.IOException {
-      return PARSER.parseDelimitedFrom(input);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseDelimitedFrom(
-        java.io.InputStream input,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws java.io.IOException {
-      return PARSER.parseDelimitedFrom(input, extensionRegistry);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        com.google.protobuf.CodedInputStream input)
-        throws java.io.IOException {
-      return PARSER.parseFrom(input);
-    }
-    public static retrofit.converter.PhoneProtos.Phone parseFrom(
-        com.google.protobuf.CodedInputStream input,
-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-        throws java.io.IOException {
-      return PARSER.parseFrom(input, extensionRegistry);
-    }
-
-    public static Builder newBuilder() { return Builder.create(); }
-    public Builder newBuilderForType() { return newBuilder(); }
-    public static Builder newBuilder(retrofit.converter.PhoneProtos.Phone prototype) {
-      return newBuilder().mergeFrom(prototype);
-    }
-    public Builder toBuilder() { return newBuilder(this); }
-
-    @java.lang.Override
-    protected Builder newBuilderForType(
-        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
-      Builder builder = new Builder(parent);
-      return builder;
-    }
-    /**
-     * Protobuf type {@code retrofit.Phone}
-     */
-    public static final class Builder extends
-        com.google.protobuf.GeneratedMessage.Builder<Builder>
-       implements retrofit.converter.PhoneProtos.PhoneOrBuilder {
-      public static final com.google.protobuf.Descriptors.Descriptor
-          getDescriptor() {
-        return retrofit.converter.PhoneProtos.internal_static_retrofit_Phone_descriptor;
-      }
-
-      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
-          internalGetFieldAccessorTable() {
-        return retrofit.converter.PhoneProtos.internal_static_retrofit_Phone_fieldAccessorTable
-            .ensureFieldAccessorsInitialized(
-                retrofit.converter.PhoneProtos.Phone.class, retrofit.converter.PhoneProtos.Phone.Builder.class);
-      }
-
-      // Construct using retrofit.converter.PhoneProtos.Phone.newBuilder()
-      private Builder() {
-        maybeForceBuilderInitialization();
-      }
-
-      private Builder(
-          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
-        super(parent);
-        maybeForceBuilderInitialization();
-      }
-      private void maybeForceBuilderInitialization() {
-        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
-        }
-      }
-      private static Builder create() {
-        return new Builder();
-      }
-
-      public Builder clear() {
-        super.clear();
-        number_ = "";
-        bitField0_ = (bitField0_ & ~0x00000001);
-        return this;
-      }
-
-      public Builder clone() {
-        return create().mergeFrom(buildPartial());
-      }
-
-      public com.google.protobuf.Descriptors.Descriptor
-          getDescriptorForType() {
-        return retrofit.converter.PhoneProtos.internal_static_retrofit_Phone_descriptor;
-      }
-
-      public retrofit.converter.PhoneProtos.Phone getDefaultInstanceForType() {
-        return retrofit.converter.PhoneProtos.Phone.getDefaultInstance();
-      }
-
-      public retrofit.converter.PhoneProtos.Phone build() {
-        retrofit.converter.PhoneProtos.Phone result = buildPartial();
-        if (!result.isInitialized()) {
-          throw newUninitializedMessageException(result);
-        }
-        return result;
-      }
-
-      public retrofit.converter.PhoneProtos.Phone buildPartial() {
-        retrofit.converter.PhoneProtos.Phone result = new retrofit.converter.PhoneProtos.Phone(this);
-        int from_bitField0_ = bitField0_;
-        int to_bitField0_ = 0;
-        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
-          to_bitField0_ |= 0x00000001;
-        }
-        result.number_ = number_;
-        result.bitField0_ = to_bitField0_;
-        onBuilt();
-        return result;
-      }
-
-      public Builder mergeFrom(com.google.protobuf.Message other) {
-        if (other instanceof retrofit.converter.PhoneProtos.Phone) {
-          return mergeFrom((retrofit.converter.PhoneProtos.Phone)other);
-        } else {
-          super.mergeFrom(other);
-          return this;
-        }
-      }
-
-      public Builder mergeFrom(retrofit.converter.PhoneProtos.Phone other) {
-        if (other == retrofit.converter.PhoneProtos.Phone.getDefaultInstance()) return this;
-        if (other.hasNumber()) {
-          bitField0_ |= 0x00000001;
-          number_ = other.number_;
-          onChanged();
-        }
-        this.mergeUnknownFields(other.getUnknownFields());
-        return this;
-      }
-
-      public final boolean isInitialized() {
-        return true;
-      }
-
-      public Builder mergeFrom(
-          com.google.protobuf.CodedInputStream input,
-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
-          throws java.io.IOException {
-        retrofit.converter.PhoneProtos.Phone parsedMessage = null;
-        try {
-          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
-        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
-          parsedMessage = (retrofit.converter.PhoneProtos.Phone) e.getUnfinishedMessage();
-          throw e;
-        } finally {
-          if (parsedMessage != null) {
-            mergeFrom(parsedMessage);
-          }
-        }
-        return this;
-      }
-      private int bitField0_;
-
-      // optional string number = 1;
-      private java.lang.Object number_ = "";
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public boolean hasNumber() {
-        return ((bitField0_ & 0x00000001) == 0x00000001);
-      }
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public java.lang.String getNumber() {
-        java.lang.Object ref = number_;
-        if (!(ref instanceof java.lang.String)) {
-          java.lang.String s = ((com.google.protobuf.ByteString) ref)
-              .toStringUtf8();
-          number_ = s;
-          return s;
-        } else {
-          return (java.lang.String) ref;
-        }
-      }
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public com.google.protobuf.ByteString
-          getNumberBytes() {
-        java.lang.Object ref = number_;
-        if (ref instanceof String) {
-          com.google.protobuf.ByteString b = 
-              com.google.protobuf.ByteString.copyFromUtf8(
-                  (java.lang.String) ref);
-          number_ = b;
-          return b;
-        } else {
-          return (com.google.protobuf.ByteString) ref;
-        }
-      }
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public Builder setNumber(
-          java.lang.String value) {
-        if (value == null) {
-    throw new NullPointerException();
-  }
-  bitField0_ |= 0x00000001;
-        number_ = value;
-        onChanged();
-        return this;
-      }
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public Builder clearNumber() {
-        bitField0_ = (bitField0_ & ~0x00000001);
-        number_ = getDefaultInstance().getNumber();
-        onChanged();
-        return this;
-      }
-      /**
-       * <code>optional string number = 1;</code>
-       */
-      public Builder setNumberBytes(
-          com.google.protobuf.ByteString value) {
-        if (value == null) {
-    throw new NullPointerException();
-  }
-  bitField0_ |= 0x00000001;
-        number_ = value;
-        onChanged();
-        return this;
-      }
-
-      // @@protoc_insertion_point(builder_scope:retrofit.Phone)
-    }
-
-    static {
-      defaultInstance = new Phone(true);
-      defaultInstance.initFields();
-    }
-
-    // @@protoc_insertion_point(class_scope:retrofit.Phone)
-  }
-
-  private static com.google.protobuf.Descriptors.Descriptor
-    internal_static_retrofit_Phone_descriptor;
-  private static
-    com.google.protobuf.GeneratedMessage.FieldAccessorTable
-      internal_static_retrofit_Phone_fieldAccessorTable;
-
-  public static com.google.protobuf.Descriptors.FileDescriptor
-      getDescriptor() {
-    return descriptor;
-  }
-  private static com.google.protobuf.Descriptors.FileDescriptor
-      descriptor;
-  static {
-    java.lang.String[] descriptorData = {
-      "\n\022protos/phone.proto\022\010retrofit\"\027\n\005Phone\022" +
-      "\016\n\006number\030\001 \001(\tB!\n\022retrofit.converterB\013P" +
-      "honeProtos"
-    };
-    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
-      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
-        public com.google.protobuf.ExtensionRegistry assignDescriptors(
-            com.google.protobuf.Descriptors.FileDescriptor root) {
-          descriptor = root;
-          internal_static_retrofit_Phone_descriptor =
-            getDescriptor().getMessageTypes().get(0);
-          internal_static_retrofit_Phone_fieldAccessorTable = new
-            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
-              internal_static_retrofit_Phone_descriptor,
-              new java.lang.String[] { "Number", });
-          return null;
-        }
-      };
-    com.google.protobuf.Descriptors.FileDescriptor
-      .internalBuildGeneratedFileFrom(descriptorData,
-        new com.google.protobuf.Descriptors.FileDescriptor[] {
-        }, assigner);
-  }
-
-  // @@protoc_insertion_point(outer_class_scope)
-}
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
deleted file mode 100644
index 90cc78a67..000000000
--- a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.converter;
-
-import com.google.common.io.BaseEncoding;
-import com.google.protobuf.InvalidProtocolBufferException;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import org.junit.Test;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedOutput;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-import static retrofit.converter.PhoneProtos.Phone;
-
-public final class ProtoConverterTest {
-  private static final Phone PROTO = Phone.newBuilder().setNumber("(519) 867-5309").build();
-  private static final String ENCODED_PROTO = "Cg4oNTE5KSA4NjctNTMwOQ==";
-
-  private final ProtoConverter protoConverter = new ProtoConverter();
-
-  @Test public void serialize() throws Exception {
-    TypedOutput protoBytes = protoConverter.toBody(PROTO);
-    assertThat(protoBytes.mimeType()).isEqualTo("application/x-protobuf");
-    assertThat(bytesOf(protoBytes)).isEqualTo(bytesOf(decodeBase64(ENCODED_PROTO)));
-  }
-
-  @Test public void deserialize() throws Exception {
-    Object proto = protoConverter.fromBody(decodeBase64(ENCODED_PROTO), Phone.class);
-    assertThat(proto).isEqualTo(PROTO);
-  }
-
-  @Test public void deserializeWrongClass() throws Exception {
-    try {
-      protoConverter.fromBody(decodeBase64(ENCODED_PROTO), String.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a protobuf message but was java.lang.String");
-    }
-  }
-
-  @Test public void deserializeWrongType() throws Exception {
-    try {
-      protoConverter.fromBody(decodeBase64(ENCODED_PROTO), ArrayList.class.getGenericSuperclass());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a raw Class<?> but was java.util.AbstractList<E>");
-    }
-  }
-
-  @Test public void deserializeWrongValue() throws Exception {
-    try {
-      protoConverter.fromBody(decodeBase64("////"), Phone.class);
-      fail();
-    } catch (ConversionException expected) {
-      assertThat(expected.getCause() instanceof InvalidProtocolBufferException);
-    }
-  }
-
-  @Test public void deserializeWrongMime() throws Exception {
-    try {
-      protoConverter.fromBody(decodeBase64("////", "yummy/bytes"), Phone.class);
-      fail();
-    } catch (ConversionException e) {
-      assertThat(e).hasMessage("Response content type was not a proto: yummy/bytes");
-    }
-  }
-
-  private static byte[] bytesOf(TypedOutput protoBytes) throws IOException {
-    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-    protoBytes.writeTo(bytes);
-    return bytes.toByteArray();
-  }
-
-  private static TypedByteArray decodeBase64(String base64) throws UnsupportedEncodingException {
-    return decodeBase64(base64, "application/x-protobuf");
-  }
-
-  private static TypedByteArray decodeBase64(String base64, String mime) throws UnsupportedEncodingException {
-    return new TypedByteArray(mime, BaseEncoding.base64().decode(base64));
-  }
-}
diff --git a/retrofit-converters/protobuf/src/test/protos/phone.proto b/retrofit-converters/protobuf/src/test/protos/phone.proto
deleted file mode 100644
index 63a39a470..000000000
--- a/retrofit-converters/protobuf/src/test/protos/phone.proto
+++ /dev/null
@@ -1,8 +0,0 @@
-package retrofit;
-
-option java_package = "retrofit.converter";
-option java_outer_classname = "PhoneProtos";
-
-message Phone {
-  optional string number = 1;
-}
diff --git a/retrofit-converters/simplexml/README.md b/retrofit-converters/simplexml/README.md
deleted file mode 100644
index 8d5b8e369..000000000
--- a/retrofit-converters/simplexml/README.md
+++ /dev/null
@@ -1,19 +0,0 @@
-Simple XML Converter
-====================
-
-A `Converter` which uses [Simple][1] for XML serialization.
-
-A default `Serializer` instance will be created or one can be configured and passed to the
-`SimpleXMLConverter` construction to further control the serialization.
-
-
-Android
--------
-
-Simple depends on artifacts which are already provided by the Android platform. When specifying as
-a Maven or Gradle dependency, exclude the following transitive dependencies: `stax:stax-api`,
-`stax:stax`, and `xpp3:xpp3`.
-
-
-
- [1]: http://simple.sourceforge.net/
diff --git a/retrofit-converters/simplexml/pom.xml b/retrofit-converters/simplexml/pom.xml
deleted file mode 100644
index a8165625b..000000000
--- a/retrofit-converters/simplexml/pom.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>retrofit-converters</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>converter-simplexml</artifactId>
-  <name>Converter: SimpleXML</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>org.simpleframework</groupId>
-      <artifactId>simple-xml</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java b/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
deleted file mode 100644
index ab9819d72..000000000
--- a/retrofit-converters/simplexml/src/test/java/retrofit/converter/SimpleXMLConverterTest.java
+++ /dev/null
@@ -1,139 +0,0 @@
-package retrofit.converter;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-import java.io.ByteArrayOutputStream;
-
-import org.junit.Test;
-import org.simpleframework.xml.Default;
-import org.simpleframework.xml.DefaultType;
-import org.simpleframework.xml.Element;
-import org.simpleframework.xml.core.Persister;
-import org.simpleframework.xml.stream.Format;
-import org.simpleframework.xml.stream.HyphenStyle;
-import org.simpleframework.xml.stream.Verbosity;
-
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-
-public class SimpleXMLConverterTest {
-	private static final String MIME_TYPE = "application/xml; charset=UTF-8";
-
-	private final MyObject obj = new MyObject("hello world", 10);
-	private final String objAsXML = String.format(
-			"<my-object><message>%s</message><count>%d</count></my-object>",
-			obj.getMessage(), obj.getCount());
-	private final Converter converter = initConverter();
-
-	private static Converter initConverter() {
-		Format format = new Format(0, null, new HyphenStyle(), Verbosity.HIGH);
-		Persister persister = new Persister(format);
-		return new SimpleXMLConverter(persister);
-	}
-
-	@Test
-	public void serialize() throws Exception {
-		final TypedOutput typedOutput = converter.toBody(obj);
-		assertThat(typedOutput.mimeType()).isEqualTo(MIME_TYPE);
-		assertThat(asString(typedOutput)).isEqualTo(objAsXML);
-	}
-
-	@Test
-	public void deserialize() throws Exception {
-		final TypedInput input = new TypedByteArray(MIME_TYPE,
-				objAsXML.getBytes());
-		final MyObject result = (MyObject) converter.fromBody(input,
-				MyObject.class);
-		assertThat(result).isEqualTo(obj);
-	}
-
-	@Test(expected = ConversionException.class)
-	public void deserializeWrongValue() throws Exception {
-		final TypedInput input = new TypedByteArray(MIME_TYPE,
-				"<myObject><foo/><bar/></myObject>".getBytes());
-		converter.fromBody(input, MyObject.class);
-
-	}
-
-	@Test
-	public void deserializeWrongClass() throws Exception {
-		final TypedInput input = new TypedByteArray(MIME_TYPE,
-				objAsXML.getBytes());
-		Object result = converter.fromBody(input, String.class);
-		assertThat(result).isNull();
-	}
-
-	private String asString(TypedOutput typedOutput) throws Exception {
-		final ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-		typedOutput.writeTo(bytes);
-		return new String(bytes.toByteArray());
-	}
-
-	@Default(value = DefaultType.FIELD)
-	static class MyObject {
-		@Element
-		private String message;
-		@Element
-		private int count;
-
-		public MyObject() {
-		}
-
-		public MyObject(String message, int count) {
-			this.message = message;
-			this.count = count;
-		}
-
-		public void setMessage(String message) {
-			this.message = message;
-		}
-
-		public String getMessage() {
-			return message;
-		}
-
-		public void setCount(int count) {
-			this.count = count;
-		}
-
-		public int getCount() {
-			return count;
-		}
-
-		@Override
-		public int hashCode() {
-			final int prime = 31;
-			int result = 1;
-			result = prime * result + count;
-			result = prime * result
-					+ ((message == null) ? 0 : message.hashCode());
-			return result;
-		}
-
-		@Override
-		public boolean equals(Object obj) {
-			if (this == obj) {
-				return true;
-			}
-			if (obj == null) {
-				return false;
-			}
-			if (getClass() != obj.getClass()) {
-				return false;
-			}
-			MyObject other = (MyObject) obj;
-			if (count != other.count) {
-				return false;
-			}
-			if (message == null) {
-				if (other.message != null) {
-					return false;
-				}
-			} else if (!message.equals(other.message)) {
-				return false;
-			}
-			return true;
-		}
-	}
-}
diff --git a/retrofit-converters/wire/README.md b/retrofit-converters/wire/README.md
deleted file mode 100644
index 88069b48f..000000000
--- a/retrofit-converters/wire/README.md
+++ /dev/null
@@ -1,10 +0,0 @@
-Wire Converter
-==============
-
-A `Converter` which uses [Wire][1] for protocol buffer-compatible serialization.
-
-A default `Wire` instance will be created or one can be configured and passed to the
-`WireConverter` construction to further control the serialization.
-
-
- [1]: https://github.com/square/wire
diff --git a/retrofit-converters/wire/pom.xml b/retrofit-converters/wire/pom.xml
deleted file mode 100644
index 5d8fd9fb4..000000000
--- a/retrofit-converters/wire/pom.xml
+++ /dev/null
@@ -1,47 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<!--
-  ~ Copyright 2013 Square, Inc.
-  -->
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>retrofit-converters</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>converter-wire</artifactId>
-  <name>Converter: Wire Protocol Buffers</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.wire</groupId>
-      <artifactId>wire-runtime</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java b/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java
deleted file mode 100644
index 046769642..000000000
--- a/retrofit-converters/wire/src/main/java/retrofit/converter/WireConverter.java
+++ /dev/null
@@ -1,68 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.converter;
-
-import com.squareup.wire.Message;
-import com.squareup.wire.Wire;
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.Type;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedInput;
-import retrofit.mime.TypedOutput;
-
-/** A {@link Converter} that reads and writes protocol buffers using Wire. */
-public class WireConverter implements Converter {
-  private static final String MIME_TYPE = "application/x-protobuf";
-
-  private final Wire wire;
-
-  /** Create a converter with a default {@link Wire} instance. */
-  public WireConverter() {
-    this(new Wire());
-  }
-
-  /** Create a converter using the supplied {@link Wire} instance. */
-  public WireConverter(Wire wire) {
-    this.wire = wire;
-  }
-
-  @SuppressWarnings("unchecked") //
-  @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
-    if (!(type instanceof Class<?>)) {
-      throw new IllegalArgumentException("Expected a raw Class<?> but was " + type);
-    }
-    Class<?> c = (Class<?>) type;
-    if (!Message.class.isAssignableFrom(c)) {
-      throw new IllegalArgumentException("Expected a proto message but was " + c.getName());
-    }
-
-    if (!MIME_TYPE.equalsIgnoreCase(body.mimeType())) {
-      throw new IllegalArgumentException("Expected a proto but was: " + body.mimeType());
-    }
-
-    InputStream in = null;
-    try {
-      in = body.in();
-      return wire.parseFrom(in, (Class<Message>) c);
-    } catch (IOException e) {
-      throw new ConversionException(e);
-    } finally {
-      if (in != null) {
-        try {
-          in.close();
-        } catch (IOException ignored) {
-        }
-      }
-    }
-  }
-
-  @Override public TypedOutput toBody(Object object) {
-    if (!(object instanceof Message)) {
-      throw new IllegalArgumentException(
-          "Expected a proto message but was " + (object != null ? object.getClass().getName()
-              : "null"));
-    }
-    byte[] bytes = ((Message) object).toByteArray();
-    return new TypedByteArray(MIME_TYPE, bytes);
-  }
-}
diff --git a/retrofit-converters/wire/src/test/java/retrofit/converter/Person.java b/retrofit-converters/wire/src/test/java/retrofit/converter/Person.java
deleted file mode 100644
index 3c18499df..000000000
--- a/retrofit-converters/wire/src/test/java/retrofit/converter/Person.java
+++ /dev/null
@@ -1,210 +0,0 @@
-// Copyright 2013 Square, Inc.
-
-// Code generated by Wire protocol buffer compiler, do not edit.
-// Source file: ../wire-runtime/src/test/proto/person.proto
-package retrofit.converter;
-
-import com.squareup.wire.Message;
-import com.squareup.wire.ProtoEnum;
-import com.squareup.wire.ProtoField;
-import java.util.Collections;
-import java.util.List;
-
-import static com.squareup.wire.Message.Datatype.ENUM;
-import static com.squareup.wire.Message.Datatype.INT32;
-import static com.squareup.wire.Message.Datatype.STRING;
-import static com.squareup.wire.Message.Label.REPEATED;
-import static com.squareup.wire.Message.Label.REQUIRED;
-
-public final class Person extends Message {
-
-  public static final String DEFAULT_NAME = "";
-  public static final Integer DEFAULT_ID = 0;
-  public static final String DEFAULT_EMAIL = "";
-  public static final List<PhoneNumber> DEFAULT_PHONE = Collections.emptyList();
-
-  /**
-   * The customer's full name.
-   */
-  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
-  public final String name;
-
-  /**
-   * The customer's ID number.
-   */
-  @ProtoField(tag = 2, type = INT32, label = REQUIRED)
-  public final Integer id;
-
-  /**
-   * Email address for the customer.
-   */
-  @ProtoField(tag = 3, type = STRING)
-  public final String email;
-
-  /**
-   * A list of the user's phone numbers.
-   */
-  @ProtoField(tag = 4, label = REPEATED)
-  public final List<PhoneNumber> phone;
-
-  private Person(Builder builder) {
-    super(builder);
-    this.name = builder.name;
-    this.id = builder.id;
-    this.email = builder.email;
-    this.phone = immutableCopyOf(builder.phone);
-  }
-
-  @Override
-  public boolean equals(Object other) {
-    if (!(other instanceof Person)) return false;
-    Person o = (Person) other;
-    return equals(name, o.name)
-        && equals(id, o.id)
-        && equals(email, o.email)
-        && equals(phone, o.phone);
-  }
-
-  @Override
-  public int hashCode() {
-    int result = hashCode;
-    if (result == 0) {
-      result = name != null ? name.hashCode() : 0;
-      result = result * 37 + (id != null ? id.hashCode() : 0);
-      result = result * 37 + (email != null ? email.hashCode() : 0);
-      result = result * 37 + (phone != null ? phone.hashCode() : 0);
-      hashCode = result;
-    }
-    return result;
-  }
-
-  public static final class Builder extends Message.Builder<Person> {
-
-    public String name;
-    public Integer id;
-    public String email;
-    public List<PhoneNumber> phone;
-
-    public Builder() {
-    }
-
-    public Builder(Person message) {
-      super(message);
-      if (message == null) return;
-      this.name = message.name;
-      this.id = message.id;
-      this.email = message.email;
-      this.phone = copyOf(message.phone);
-    }
-
-    public Builder name(String name) {
-      this.name = name;
-      return this;
-    }
-
-    public Builder id(Integer id) {
-      this.id = id;
-      return this;
-    }
-
-    public Builder email(String email) {
-      this.email = email;
-      return this;
-    }
-
-    public Builder phone(List<PhoneNumber> phone) {
-      this.phone = phone;
-      return this;
-    }
-
-    @Override
-    public Person build() {
-      checkRequiredFields();
-      return new Person(this);
-    }
-  }
-
-  public enum PhoneType {
-    @ProtoEnum(0)
-    MOBILE,
-    @ProtoEnum(1)
-    HOME,
-    @ProtoEnum(2)
-    WORK,
-  }
-
-  public static final class PhoneNumber extends Message {
-
-    public static final String DEFAULT_NUMBER = "";
-    public static final PhoneType DEFAULT_TYPE = PhoneType.HOME;
-
-    /**
-     * The user's phone number.
-     */
-    @ProtoField(tag = 1, type = STRING, label = REQUIRED)
-    public final String number;
-
-    /**
-     * The type of phone stored here.
-     */
-    @ProtoField(tag = 2, type = ENUM)
-    public final PhoneType type;
-
-    private PhoneNumber(Builder builder) {
-      super(builder);
-      this.number = builder.number;
-      this.type = builder.type;
-    }
-
-    @Override
-    public boolean equals(Object other) {
-      if (!(other instanceof PhoneNumber)) return false;
-      PhoneNumber o = (PhoneNumber) other;
-      return equals(number, o.number)
-          && equals(type, o.type);
-    }
-
-    @Override
-    public int hashCode() {
-      int result = hashCode;
-      if (result == 0) {
-        result = number != null ? number.hashCode() : 0;
-        result = result * 37 + (type != null ? type.hashCode() : 0);
-        hashCode = result;
-      }
-      return result;
-    }
-
-    public static final class Builder extends Message.Builder<PhoneNumber> {
-
-      public String number;
-      public PhoneType type;
-
-      public Builder() {
-      }
-
-      public Builder(PhoneNumber message) {
-        super(message);
-        if (message == null) return;
-        this.number = message.number;
-        this.type = message.type;
-      }
-
-      public Builder number(String number) {
-        this.number = number;
-        return this;
-      }
-
-      public Builder type(PhoneType type) {
-        this.type = type;
-        return this;
-      }
-
-      @Override
-      public PhoneNumber build() {
-        checkRequiredFields();
-        return new PhoneNumber(this);
-      }
-    }
-  }
-}
diff --git a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java b/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java
deleted file mode 100644
index 6756dd8c4..000000000
--- a/retrofit-converters/wire/src/test/java/retrofit/converter/WireConverterTest.java
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.converter;
-
-import com.google.common.io.BaseEncoding;
-import com.squareup.wire.Wire;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.util.ArrayList;
-import org.junit.Test;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedOutput;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-public final class WireConverterTest {
-  private static final Person PROTO =
-      new Person.Builder().id(42).name("Omar Little").email("omar@theking.org").build();
-  private static final String PROTO_ENCODED = "CgtPbWFyIExpdHRsZRAqGhBvbWFyQHRoZWtpbmcub3Jn";
-
-  private WireConverter converter = new WireConverter(new Wire());
-
-  @Test public void serialize() throws Exception {
-    TypedOutput protoBytes = converter.toBody(PROTO);
-    assertThat(protoBytes.mimeType()).isEqualTo("application/x-protobuf");
-    assertThat(bytesOf(protoBytes)).isEqualTo(bytesOf(decodeBase64(PROTO_ENCODED)));
-  }
-
-  @Test public void deserialize() throws Exception {
-    Object proto = converter.fromBody(decodeBase64(PROTO_ENCODED), Person.class);
-    assertThat(proto).isEqualTo(PROTO);
-  }
-
-  @Test public void deserializeWrongClass() throws Exception {
-    try {
-      converter.fromBody(decodeBase64(PROTO_ENCODED), String.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a proto message but was java.lang.String");
-    }
-  }
-
-  @Test public void deserializeWrongType() throws Exception {
-    try {
-      converter.fromBody(decodeBase64(PROTO_ENCODED),
-          ArrayList.class.getGenericSuperclass());
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a raw Class<?> but was java.util.AbstractList<E>");
-    }
-  }
-
-  @Test public void deserializeWrongValue() throws Exception {
-    try {
-      converter.fromBody(decodeBase64("////"), Person.class);
-      fail();
-    } catch (ConversionException expected) {
-      assertThat(expected.getCause()).isInstanceOf(IOException.class);
-    }
-  }
-
-  @Test public void deserializeWrongMime() throws Exception {
-    try {
-      converter.fromBody(decodeBase64("////", "yummy/bytes"), Person.class);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Expected a proto but was: yummy/bytes");
-    }
-  }
-
-  private static byte[] bytesOf(TypedOutput protoBytes) throws IOException {
-    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
-    protoBytes.writeTo(bytes);
-    return bytes.toByteArray();
-  }
-
-  private static TypedByteArray decodeBase64(String base64) throws UnsupportedEncodingException {
-    return decodeBase64(base64, "application/x-protobuf");
-  }
-
-  private static TypedByteArray decodeBase64(String base64, String mime) throws UnsupportedEncodingException {
-    return new TypedByteArray(mime, BaseEncoding.base64().decode(base64));
-  }
-}
diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
deleted file mode 100644
index 9e03aea82..000000000
--- a/retrofit-mock/pom.xml
+++ /dev/null
@@ -1,56 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>retrofit-mock</artifactId>
-  <name>Retrofit Mock Adapter</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <optional>true</optional>
-    </dependency>
-
-    <dependency>
-      <groupId>com.netflix.rxjava</groupId>
-      <artifactId>rxjava-core</artifactId>
-      <optional>true</optional>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-mock/src/main/java/retrofit/MockHttpException.java b/retrofit-mock/src/main/java/retrofit/MockHttpException.java
index 908cd562d..6d1641aa9 100644
--- a/retrofit-mock/src/main/java/retrofit/MockHttpException.java
+++ b/retrofit-mock/src/main/java/retrofit/MockHttpException.java
@@ -3,9 +3,9 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import retrofit.client.Header;
-import retrofit.client.Response;
-import retrofit.converter.Converter;
+import rapid.rest.client.Header;
+import rapid.rest.client.Response;
+import rapid.rest.converter.Converter;
 
 import static java.net.HttpURLConnection.HTTP_BAD_REQUEST;
 import static java.net.HttpURLConnection.HTTP_FORBIDDEN;
diff --git a/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java
index 7c2809fd6..0c2c159e6 100644
--- a/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java
+++ b/retrofit-mock/src/main/java/retrofit/MockHttpRetrofitError.java
@@ -2,7 +2,7 @@
 package retrofit;
 
 import java.lang.reflect.Type;
-import retrofit.client.Response;
+import rapid.rest.client.Response;
 
 class MockHttpRetrofitError extends RetrofitError {
   private final Object body;
diff --git a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
index 2cec5cc0b..3521a9148 100644
--- a/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
+++ b/retrofit-mock/src/main/java/retrofit/MockRestAdapter.java
@@ -10,13 +10,13 @@
 import java.util.Random;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
-import retrofit.client.Request;
-import retrofit.client.Response;
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
 import rx.Observable;
 import rx.Subscriber;
 
-import static retrofit.RestAdapter.LogLevel;
-import static retrofit.RetrofitError.unexpectedError;
+import static rapid.restAdapter.LogLevel;
+import static rapid.rest.RetrofitError.unexpectedError;
 
 /**
  * Wraps mock implementations of API interfaces so that they exhibit the delay and error
diff --git a/retrofit-mock/src/main/java/retrofit/MockTypedInput.java b/retrofit-mock/src/main/java/retrofit/MockTypedInput.java
index 278aebc02..cdac608b2 100644
--- a/retrofit-mock/src/main/java/retrofit/MockTypedInput.java
+++ b/retrofit-mock/src/main/java/retrofit/MockTypedInput.java
@@ -5,8 +5,8 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
-import retrofit.converter.Converter;
-import retrofit.mime.TypedInput;
+import rapid.rest.converter.Converter;
+import rapid.rest.mime.TypedInput;
 
 class MockTypedInput implements TypedInput {
   private final Converter converter;
diff --git a/retrofit-mock/src/main/java/retrofit/android/AndroidMockValuePersistence.java b/retrofit-mock/src/main/java/retrofit/android/AndroidMockValuePersistence.java
index 80cab9abc..aa82a66a0 100644
--- a/retrofit-mock/src/main/java/retrofit/android/AndroidMockValuePersistence.java
+++ b/retrofit-mock/src/main/java/retrofit/android/AndroidMockValuePersistence.java
@@ -1,8 +1,8 @@
 // Copyright 2013 Square, Inc.
-package retrofit.android;
+package rapid.rest.android;
 
 import android.content.SharedPreferences;
-import retrofit.MockRestAdapter;
+import rapid.rest.MockRestAdapter;
 
 /**
  * A {@link MockRestAdapter.ValueChangeListener value change listener} for {@link MockRestAdapter}
diff --git a/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
index 2eb1225bb..6001b3056 100644
--- a/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
+++ b/retrofit-mock/src/test/java/retrofit/MockRestAdapterTest.java
@@ -10,10 +10,10 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.junit.Before;
 import org.junit.Test;
-import retrofit.client.Client;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.http.GET;
+import rapid.rest.client.Client;
+import rapid.rest.client.Request;
+import rapid.rest.client.Response;
+import rapid.rest.http.GET;
 import rx.Observable;
 import rx.functions.Action1;
 
@@ -28,8 +28,8 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.verifyZeroInteractions;
-import static retrofit.MockRestAdapter.ValueChangeListener;
-import static retrofit.Utils.SynchronousExecutor;
+import static rapid.rest.MockRestAdapter.ValueChangeListener;
+import static rapid.rest.Utils.SynchronousExecutor;
 
 public class MockRestAdapterTest {
   interface SyncExample {
diff --git a/retrofit-samples/github-client/pom.xml b/retrofit-samples/github-client/pom.xml
deleted file mode 100644
index 4b0ecacca..000000000
--- a/retrofit-samples/github-client/pom.xml
+++ /dev/null
@@ -1,23 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit.samples</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>github-client</artifactId>
-  <name>Sample: GitHub Client</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java b/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
index f71a10bac..f2a1fde31 100644
--- a/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
+++ b/retrofit-samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
@@ -16,9 +16,9 @@
 package com.example.retrofit;
 
 import java.util.List;
-import retrofit.RestAdapter;
-import retrofit.http.GET;
-import retrofit.http.Path;
+import rapid.restAdapter;
+import rapid.rest.http.GET;
+import rapid.rest.http.Path;
 
 public class GitHubClient {
   private static final String API_URL = "https://api.github.com";
diff --git a/retrofit-samples/mock-github-client/pom.xml b/retrofit-samples/mock-github-client/pom.xml
deleted file mode 100644
index 4554db5ca..000000000
--- a/retrofit-samples/mock-github-client/pom.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<!--
-  ~ Copyright 2013 Square, Inc.
-  -->
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit.samples</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>mock-github-client</artifactId>
-  <name>Sample: Mock GitHub Client</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.retrofit</groupId>
-      <artifactId>retrofit-mock</artifactId>
-      <version>${project.version}</version>
-    </dependency>
-  </dependencies>
-</project>
diff --git a/retrofit-samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java b/retrofit-samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java
index 9d2df6c5c..f94cd9ea7 100644
--- a/retrofit-samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java
+++ b/retrofit-samples/mock-github-client/src/main/java/com/example/retrofit/GitHubClient.java
@@ -6,10 +6,10 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import retrofit.MockRestAdapter;
-import retrofit.RestAdapter;
-import retrofit.http.GET;
-import retrofit.http.Path;
+import rapid.rest.MockRestAdapter;
+import rapid.restAdapter;
+import rapid.rest.http.GET;
+import rapid.rest.http.Path;
 
 public class GitHubClient {
   private static final String API_URL = "https://api.github.com";
diff --git a/retrofit-samples/pom.xml b/retrofit-samples/pom.xml
deleted file mode 100644
index a79813583..000000000
--- a/retrofit-samples/pom.xml
+++ /dev/null
@@ -1,22 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <groupId>com.squareup.retrofit.samples</groupId>
-  <artifactId>parent</artifactId>
-  <name>Samples</name>
-  <packaging>pom</packaging>
-
-  <modules>
-    <module>github-client</module>
-    <module>mock-github-client</module>
-  </modules>
-</project>
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
deleted file mode 100644
index 27139f479..000000000
--- a/retrofit/pom.xml
+++ /dev/null
@@ -1,87 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <parent>
-    <groupId>com.squareup.retrofit</groupId>
-    <artifactId>parent</artifactId>
-    <version>1.6.1-SNAPSHOT</version>
-    <relativePath>../pom.xml</relativePath>
-  </parent>
-
-  <artifactId>retrofit</artifactId>
-  <name>Retrofit</name>
-
-  <dependencies>
-    <dependency>
-      <groupId>com.google.code.gson</groupId>
-      <artifactId>gson</artifactId>
-    </dependency>
-
-    <dependency>
-      <groupId>com.google.android</groupId>
-      <artifactId>android</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.okhttp</groupId>
-      <artifactId>okhttp</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.okhttp</groupId>
-      <artifactId>okhttp-urlconnection</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.netflix.rxjava</groupId>
-      <artifactId>rxjava-core</artifactId>
-      <optional>true</optional>
-    </dependency>
-    <dependency>
-      <groupId>com.google.appengine</groupId>
-      <artifactId>appengine-api-1.0-sdk</artifactId>
-      <optional>true</optional>
-    </dependency>
-
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.assertj</groupId>
-      <artifactId>assertj-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.mockito</groupId>
-      <artifactId>mockito-core</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.google.guava</groupId>
-      <artifactId>guava</artifactId>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>com.squareup.okhttp</groupId>
-      <artifactId>mockwebserver</artifactId>
-      <scope>test</scope>
-    </dependency>
-  </dependencies>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>org.apache.maven.plugins</groupId>
-        <artifactId>maven-compiler-plugin</artifactId>
-        <configuration>
-          <!-- The AppEngine dependency has an annotation processor we don't want to run. -->
-          <compilerArgument>-proc:none</compilerArgument>
-        </configuration>
-      </plugin>
-    </plugins>
-  </build>
-</project>
diff --git a/retrofit/src/main/java/retrofit/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
deleted file mode 100644
index 5a394746f..000000000
--- a/retrofit/src/main/java/retrofit/Platform.java
+++ /dev/null
@@ -1,215 +0,0 @@
-/*
- * Copyright (C) 2013 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package retrofit;
-
-import android.os.Build;
-import android.os.Process;
-import com.google.gson.Gson;
-import java.util.concurrent.Executor;
-import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
-import retrofit.android.AndroidApacheClient;
-import retrofit.android.AndroidLog;
-import retrofit.android.MainThreadExecutor;
-import retrofit.appengine.UrlFetchClient;
-import retrofit.client.Client;
-import retrofit.client.OkClient;
-import retrofit.client.UrlConnectionClient;
-import retrofit.converter.Converter;
-import retrofit.converter.GsonConverter;
-
-import static android.os.Process.THREAD_PRIORITY_BACKGROUND;
-import static java.lang.Thread.MIN_PRIORITY;
-
-abstract class Platform {
-  private static final Platform PLATFORM = findPlatform();
-
-  static final boolean HAS_RX_JAVA = hasRxJavaOnClasspath();
-
-  static Platform get() {
-    return PLATFORM;
-  }
-
-  private static Platform findPlatform() {
-    try {
-      Class.forName("android.os.Build");
-      if (Build.VERSION.SDK_INT != 0) {
-        return new Android();
-      }
-    } catch (ClassNotFoundException ignored) {
-    }
-
-    if (System.getProperty("com.google.appengine.runtime.version") != null) {
-      return new AppEngine();
-    }
-
-    return new Base();
-  }
-
-  abstract Converter defaultConverter();
-  abstract Client.Provider defaultClient();
-  abstract Executor defaultHttpExecutor();
-  abstract Executor defaultCallbackExecutor();
-  abstract RestAdapter.Log defaultLog();
-
-  /** Provides sane defaults for operation on the JVM. */
-  private static class Base extends Platform {
-    @Override Converter defaultConverter() {
-      return new GsonConverter(new Gson());
-    }
-
-    @Override Client.Provider defaultClient() {
-      final Client client;
-      if (hasOkHttpOnClasspath()) {
-        client = OkClientInstantiator.instantiate();
-      } else {
-        client = new UrlConnectionClient();
-      }
-      return new Client.Provider() {
-        @Override public Client get() {
-          return client;
-        }
-      };
-    }
-
-    @Override Executor defaultHttpExecutor() {
-      return Executors.newCachedThreadPool(new ThreadFactory() {
-        @Override public Thread newThread(final Runnable r) {
-          return new Thread(new Runnable() {
-            @Override public void run() {
-              Thread.currentThread().setPriority(MIN_PRIORITY);
-              r.run();
-            }
-          }, RestAdapter.IDLE_THREAD_NAME);
-        }
-      });
-    }
-
-    @Override Executor defaultCallbackExecutor() {
-      return new Utils.SynchronousExecutor();
-    }
-
-    @Override RestAdapter.Log defaultLog() {
-      return new RestAdapter.Log() {
-        @Override public void log(String message) {
-          System.out.println(message);
-        }
-      };
-    }
-  }
-
-  /** Provides sane defaults for operation on Android. */
-  private static class Android extends Platform {
-    @Override Converter defaultConverter() {
-      return new GsonConverter(new Gson());
-    }
-
-    @Override Client.Provider defaultClient() {
-      final Client client;
-      if (hasOkHttpOnClasspath()) {
-        client = OkClientInstantiator.instantiate();
-      } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {
-        client = new AndroidApacheClient();
-      } else {
-        client = new UrlConnectionClient();
-      }
-      return new Client.Provider() {
-        @Override public Client get() {
-          return client;
-        }
-      };
-    }
-
-    @Override Executor defaultHttpExecutor() {
-      return Executors.newCachedThreadPool(new ThreadFactory() {
-        @Override public Thread newThread(final Runnable r) {
-          return new Thread(new Runnable() {
-            @Override public void run() {
-              Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND);
-              r.run();
-            }
-          }, RestAdapter.IDLE_THREAD_NAME);
-        }
-      });
-    }
-
-    @Override Executor defaultCallbackExecutor() {
-      return new MainThreadExecutor();
-    }
-
-    @Override RestAdapter.Log defaultLog() {
-      return new AndroidLog("Retrofit");
-    }
-  }
-
-  private static class AppEngine extends Base {
-    @Override Client.Provider defaultClient() {
-      final UrlFetchClient client = new UrlFetchClient();
-      return new Client.Provider() {
-        @Override public Client get() {
-          return client;
-        }
-      };
-    }
-  }
-
-  /** Determine whether or not OkHttp 1.6 or newer is present on the runtime classpath. */
-  private static boolean hasOkHttpOnClasspath() {
-    boolean okUrlFactory = false;
-    try {
-      Class.forName("com.squareup.okhttp.OkUrlFactory");
-      okUrlFactory = true;
-    } catch (ClassNotFoundException e) {
-    }
-
-    boolean okHttpClient = false;
-    try {
-      Class.forName("com.squareup.okhttp.OkHttpClient");
-      okHttpClient = true;
-    } catch (ClassNotFoundException e) {
-    }
-
-    if (okHttpClient != okUrlFactory) {
-      throw new RuntimeException(""
-          + "Retrofit detected an unsupported OkHttp on the classpath.\n"
-          + "To use OkHttp with this version of Retrofit, you'll need:\n"
-          + "1. com.squareup.okhttp:okhttp:1.6.0 (or newer)\n"
-          + "2. com.squareup.okhttp:okhttp-urlconnection:1.6.0 (or newer)\n"
-          + "Note that OkHttp 2.0.0+ is supported!");
-    }
-
-    return okHttpClient;
-  }
-
-  /**
-   * Indirection for OkHttp class to prevent VerifyErrors on Android 2.0 and earlier when the
-   * dependency is not present.
-   */
-  private static class OkClientInstantiator {
-    static Client instantiate() {
-      return new OkClient();
-    }
-  }
-
-  private static boolean hasRxJavaOnClasspath() {
-    try {
-      Class.forName("rx.Observable");
-      return true;
-    } catch (ClassNotFoundException ignored) {
-    }
-    return false;
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/RxSupport.java b/retrofit/src/main/java/retrofit/RxSupport.java
deleted file mode 100644
index 9f1c61415..000000000
--- a/retrofit/src/main/java/retrofit/RxSupport.java
+++ /dev/null
@@ -1,64 +0,0 @@
-package retrofit;
-
-import java.util.concurrent.Executor;
-import java.util.concurrent.FutureTask;
-import rx.Observable;
-import rx.Subscriber;
-import rx.subscriptions.Subscriptions;
-
-/**
- * Utilities for supporting RxJava Observables.
- * <p>
- * RxJava might not be on the available to use. Check {@link Platform#HAS_RX_JAVA} before calling.
- */
-final class RxSupport {
-  /** A callback into {@link RestAdapter} to actually invoke the request. */
-  interface Invoker {
-    /** Invoke the request. The interceptor will be "tape" from the time of subscription. */
-    ResponseWrapper invoke(RequestInterceptor requestInterceptor);
-  }
-
-  private final Executor executor;
-  private final ErrorHandler errorHandler;
-  private final RequestInterceptor requestInterceptor;
-
-  RxSupport(Executor executor, ErrorHandler errorHandler, RequestInterceptor requestInterceptor) {
-    this.executor = executor;
-    this.errorHandler = errorHandler;
-    this.requestInterceptor = requestInterceptor;
-  }
-
-  Observable createRequestObservable(final Invoker invoker) {
-    return Observable.create(new Observable.OnSubscribe<Object>() {
-      @Override public void call(Subscriber<? super Object> subscriber) {
-        RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
-        requestInterceptor.intercept(interceptorTape);
-
-        Runnable runnable = getRunnable(subscriber, invoker, interceptorTape);
-        FutureTask<Void> task = new FutureTask<Void>(runnable, null);
-
-        // Subscribe to the future task of the network call allowing unsubscription.
-        subscriber.add(Subscriptions.from(task));
-        executor.execute(task);
-      }
-    });
-  }
-
-  private Runnable getRunnable(final Subscriber<? super Object> subscriber, final Invoker invoker,
-      final RequestInterceptorTape interceptorTape) {
-    return new Runnable() {
-      @Override public void run() {
-        try {
-          if (subscriber.isUnsubscribed()) {
-            return;
-          }
-          ResponseWrapper wrapper = invoker.invoke(interceptorTape);
-          subscriber.onNext(wrapper.responseBody);
-          subscriber.onCompleted();
-        } catch (RetrofitError e) {
-          subscriber.onError(errorHandler.handleError(e));
-        }
-      }
-    };
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
deleted file mode 100644
index 5bc229861..000000000
--- a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package retrofit.appengine;
-
-import com.google.appengine.api.urlfetch.HTTPHeader;
-import com.google.appengine.api.urlfetch.HTTPMethod;
-import com.google.appengine.api.urlfetch.HTTPRequest;
-import com.google.appengine.api.urlfetch.HTTPResponse;
-import com.google.appengine.api.urlfetch.URLFetchService;
-import com.google.appengine.api.urlfetch.URLFetchServiceFactory;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-import retrofit.client.Client;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.mime.TypedByteArray;
-import retrofit.mime.TypedOutput;
-
-/** A {@link Client} for Google AppEngine's which uses its {@link URLFetchService}. */
-public class UrlFetchClient implements Client {
-  private static HTTPMethod getHttpMethod(String method) {
-    if ("GET".equals(method)) {
-      return HTTPMethod.GET;
-    } else if ("POST".equals(method)) {
-      return HTTPMethod.POST;
-    } else if ("PATCH".equals(method)) {
-      return HTTPMethod.PATCH;
-    } else if ("PUT".equals(method)) {
-      return HTTPMethod.PUT;
-    } else if ("DELETE".equals(method)) {
-      return HTTPMethod.DELETE;
-    } else if ("HEAD".equals(method)) {
-      return HTTPMethod.HEAD;
-    } else {
-      throw new IllegalStateException("Illegal HTTP method: " + method);
-    }
-  }
-
-  private final URLFetchService urlFetchService;
-
-  public UrlFetchClient() {
-    this(URLFetchServiceFactory.getURLFetchService());
-  }
-
-  public UrlFetchClient(URLFetchService urlFetchService) {
-    this.urlFetchService = urlFetchService;
-  }
-
-  @Override public Response execute(Request request) throws IOException {
-    HTTPRequest fetchRequest = createRequest(request);
-    HTTPResponse fetchResponse = execute(urlFetchService, fetchRequest);
-    return parseResponse(fetchResponse);
-  }
-
-  /** Execute the specified {@code request} using the provided {@code urlFetchService}. */
-  protected HTTPResponse execute(URLFetchService urlFetchService, HTTPRequest request)
-      throws IOException {
-    return urlFetchService.fetch(request);
-  }
-
-  static HTTPRequest createRequest(Request request) throws IOException {
-    HTTPMethod httpMethod = getHttpMethod(request.getMethod());
-    URL url = new URL(request.getUrl());
-    HTTPRequest fetchRequest = new HTTPRequest(url, httpMethod);
-
-    for (Header header : request.getHeaders()) {
-      fetchRequest.addHeader(new HTTPHeader(header.getName(), header.getValue()));
-    }
-
-    TypedOutput body = request.getBody();
-    if (body != null) {
-      ByteArrayOutputStream baos = new ByteArrayOutputStream();
-      body.writeTo(baos);
-      fetchRequest.setPayload(baos.toByteArray());
-    }
-
-    return fetchRequest;
-  }
-
-  static Response parseResponse(HTTPResponse response) {
-    String url = response.getFinalUrl().toString();
-    int status = response.getResponseCode();
-
-    List<HTTPHeader> fetchHeaders = response.getHeaders();
-    List<Header> headers = new ArrayList<Header>(fetchHeaders.size());
-    String contentType = "application/octet-stream";
-    for (HTTPHeader fetchHeader : fetchHeaders) {
-      String name = fetchHeader.getName();
-      String value = fetchHeader.getValue();
-      if ("Content-Type".equalsIgnoreCase(name)) {
-        contentType = value;
-      }
-      headers.add(new Header(name, value));
-    }
-
-    TypedByteArray body = null;
-    byte[] fetchBody = response.getContent();
-    if (fetchBody != null) {
-      body = new TypedByteArray(contentType, fetchBody);
-    }
-
-    return new Response(url, status, "", headers, body);
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/package-info.java b/retrofit/src/main/java/retrofit/http/package-info.java
deleted file mode 100644
index 2dae09c79..000000000
--- a/retrofit/src/main/java/retrofit/http/package-info.java
+++ /dev/null
@@ -1,4 +0,0 @@
-// Copyright 2014 Square, Inc.
-
-/** Annotations for interface methods to control the HTTP request behavior. */
-package retrofit.http;
diff --git a/retrofit/src/main/java/retrofit/package-info.java b/retrofit/src/main/java/retrofit/package-info.java
deleted file mode 100644
index 0c6596b3e..000000000
--- a/retrofit/src/main/java/retrofit/package-info.java
+++ /dev/null
@@ -1,12 +0,0 @@
-// Copyright 2014 Square, Inc.
-
-/**
- * Retrofit turns your REST API into a Java interface.
- * <pre>
- * public interface GitHubService {
- *   &#64;GET("/users/{user}/repos")
- *   List&lt;Repo&gt; listRepos(@Path("user") String user);
- * }
- * </pre>
- */
-package retrofit;
diff --git a/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java b/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java
deleted file mode 100644
index 35455fb65..000000000
--- a/retrofit/src/test/java/retrofit/appengine/UrlFetchClientTest.java
+++ /dev/null
@@ -1,125 +0,0 @@
-// Copyright 2014 Square, Inc.
-package retrofit.appengine;
-
-import com.google.appengine.api.urlfetch.HTTPHeader;
-import com.google.appengine.api.urlfetch.HTTPRequest;
-import com.google.appengine.api.urlfetch.HTTPResponse;
-import com.google.common.io.ByteStreams;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import org.junit.Test;
-import retrofit.TestingUtils;
-import retrofit.client.Header;
-import retrofit.client.Request;
-import retrofit.client.Response;
-import retrofit.mime.TypedOutput;
-import retrofit.mime.TypedString;
-
-import static com.google.appengine.api.urlfetch.HTTPMethod.GET;
-import static com.google.appengine.api.urlfetch.HTTPMethod.POST;
-import static java.util.Arrays.asList;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static retrofit.TestingUtils.assertBytes;
-
-public class UrlFetchClientTest {
-  private static final String HOST = "http://example.com";
-
-  @Test public void get() throws IOException {
-    Request request = new Request("GET", HOST + "/foo/bar/?kit=kat", null, null);
-    HTTPRequest fetchRequest = UrlFetchClient.createRequest(request);
-
-    assertThat(fetchRequest.getMethod()).isEqualTo(GET);
-    assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + "/foo/bar/?kit=kat");
-    assertThat(fetchRequest.getHeaders()).isEmpty();
-    assertThat(fetchRequest.getPayload()).isNull();
-  }
-
-  @Test public void post() throws IOException {
-    TypedString body = new TypedString("hi");
-    Request request = new Request("POST", HOST + "/foo/bar/", null, body);
-    HTTPRequest fetchRequest = UrlFetchClient.createRequest(request);
-
-    assertThat(fetchRequest.getMethod()).isEqualTo(POST);
-    assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + "/foo/bar/");
-    List<HTTPHeader> fetchHeaders = fetchRequest.getHeaders();
-    assertThat(fetchHeaders).hasSize(0);
-    assertBytes(fetchRequest.getPayload(), "hi");
-  }
-
-  @Test public void multipart() throws IOException {
-    Map<String, TypedOutput> bodyParams = new LinkedHashMap<String, TypedOutput>();
-    bodyParams.put("foo", new TypedString("bar"));
-    bodyParams.put("ping", new TypedString("pong"));
-    TypedOutput body = TestingUtils.createMultipart(bodyParams);
-    Request request = new Request("POST", HOST + "/that/", null, body);
-    HTTPRequest fetchRequest = UrlFetchClient.createRequest(request);
-
-    assertThat(fetchRequest.getMethod()).isEqualTo(POST);
-    assertThat(fetchRequest.getURL().toString()).isEqualTo(HOST + "/that/");
-    List<HTTPHeader> fetchHeaders = fetchRequest.getHeaders();
-    assertThat(fetchHeaders).hasSize(0);
-    assertThat(fetchRequest.getPayload()).isNotEmpty();
-  }
-
-  @Test public void headers() throws IOException {
-    List<Header> headers = new ArrayList<Header>();
-    headers.add(new Header("kit", "kat"));
-    headers.add(new Header("foo", "bar"));
-    Request request = new Request("GET", HOST + "/this/", headers, null);
-    HTTPRequest fetchRequest = UrlFetchClient.createRequest(request);
-
-    List<HTTPHeader> fetchHeaders = fetchRequest.getHeaders();
-    assertThat(fetchHeaders).hasSize(2);
-    assertHeader(fetchHeaders.get(0), "kit", "kat");
-    assertHeader(fetchHeaders.get(1), "foo", "bar");
-  }
-
-  @Test public void response() throws Exception {
-    HTTPResponse fetchResponse = mock(HTTPResponse.class);
-    when(fetchResponse.getHeaders()).thenReturn(
-        asList(new HTTPHeader("foo", "bar"), new HTTPHeader("kit", "kat"),
-            new HTTPHeader("Content-Type", "text/plain")));
-    when(fetchResponse.getContent()).thenReturn("hello".getBytes("UTF-8"));
-    when(fetchResponse.getFinalUrl()).thenReturn(new URL(HOST + "/foo/bar/"));
-    when(fetchResponse.getResponseCode()).thenReturn(200);
-
-    Response response = UrlFetchClient.parseResponse(fetchResponse);
-
-    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("");
-    assertThat(response.getHeaders()).hasSize(3) //
-        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),
-            new Header("Content-Type", "text/plain"));
-    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
-  }
-
-  @Test public void emptyResponse() throws Exception {
-    HTTPResponse fetchResponse = mock(HTTPResponse.class);
-    when(fetchResponse.getHeaders()).thenReturn(
-        asList(new HTTPHeader("foo", "bar"), new HTTPHeader("kit", "kat")));
-    when(fetchResponse.getContent()).thenReturn(null);
-    when(fetchResponse.getFinalUrl()).thenReturn(new URL(HOST + "/foo/bar/"));
-    when(fetchResponse.getResponseCode()).thenReturn(200);
-
-    Response response = UrlFetchClient.parseResponse(fetchResponse);
-
-    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("");
-    assertThat(response.getHeaders()).hasSize(2) //
-        .containsExactly(new Header("foo", "bar"), new Header("kit", "kat"));
-    assertThat(response.getBody()).isNull();
-  }
-
-  private static void assertHeader(HTTPHeader header, String name, String value) {
-    assertThat(header.getName()).isEqualTo(name);
-    assertThat(header.getValue()).isEqualTo(value);
-  }
-}
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 000000000..9bb00449b
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':rapidrest'
