diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 3a01247e5..2c198c87c 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -282,6 +282,9 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
         Type type = methodDetails.responseObjectType;
 
         if (statusCode >= 200 && statusCode < 300) { // 2XX == successful request
+          if (type.equals(Void.class)) {
+            return null;
+          }
           // Caller requested the raw Response object directly.
           if (type.equals(Response.class)) {
             // Read the entire stream and replace with one backed by a byte[]
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
index 65e16ffc6..f8db15186 100644
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -34,6 +34,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 import static retrofit.Profiler.RequestInformation;
@@ -71,6 +72,7 @@
     @GET("/") void something(Callback<Object> callback);
     @GET("/") Response direct();
     @GET("/") void direct(Callback<Response> callback);
+    @GET("/") Void directWithVoidResponse();
   }
 
   private Client mockClient;
@@ -442,6 +444,20 @@ public void log(String message) {
         .thenReturn(response);
     assertThat(example.direct()).isSameAs(response);
   }
+  
+  @Test public void getNoResponseShouldNotTouchResponse() throws Exception {
+      // given
+      TypedInput mockInput = mock(TypedInput.class);
+      Response response = new Response(200, "OK", NO_HEADERS, mockInput);
+      when(mockClient.execute(any(Request.class))) //
+          .thenReturn(response);
+      
+      // when
+      example.directWithVoidResponse();
+      
+      // then
+      verify(mockInput, never()).in();
+    }
 
   @Test public void getResponseDirectlyAsync() throws Exception {
     Response response = new Response(200, "OK", NO_HEADERS, null);
