diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 000000000..3d514f29a
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,13 @@
+Change Log
+==========
+
+Version 1.0.1 *(2013-05-13)*
+----------------------------
+
+ * Fix: Correct bad regex behavior on Android.
+
+
+Version 1.0.0 *(2013-05-13)*
+----------------------------
+
+Initial release.
diff --git a/README.md b/README.md
index 81607e1d0..96a762649 100644
--- a/README.md
+++ b/README.md
@@ -3,62 +3,29 @@ Retrofit
 
 Type-safe REST client for Android and Java by Square, Inc.
 
+For more information please see [the website][1].
 
-Usage
------
 
-Create an interface for your API.  You can create as many of these interfaces as you like.  For
-each interface you create, calling `RestAdapter.create(MyInterface.class)` will create an
-instance of that API handler, which you can then store and use throughout your application.  An
-example interface:
+Download
+--------
 
-```java
-public interface DummyServiceAsync {
-  // Produces a url like "foo/bar?id=idValue".
-  @GET("foo/bar")
-  void normalGet(@Name("id") String id, Callback<MyJsonObj> callback);
+Download [the latest JAR][2] or grab via Maven:
 
-  // Produces a url like "foo/idValue/bar?category=categoryValue".
-  @GET("foo/{id}/bar")
-  void getWithPathParam(@Name("id") String id, @Name("category") String category, Callback<MyJsonObj> callback);
-
-  // Produces a url like "foo/bar/idValue" and body like "id=idValue&body=bodyValue".
-  @POST("foo/bar/{id}")
-  void normalPost(@Name("id") String id, @Name("body") String body, Callback<MyJsonObj> callback);
-
-  // Produces a url like "foo/bar/idValue" and body generated by MyJsonObj.
-  @POST("foo/bar/{id}")
-  void singleEntityPost(@SingleEntity MyJsonObj card, @Name("id") String id, Callback<MyJsonObj> callback);
-}
-```
-
-Each method has a `Callback` type specified at the end of the parameter list.  This is how your
-application will handle the results of your network calls asynchronously: errors and successful
-responses are both handled by the `Callback` interface.
-
-If you want to use the `@SingleEntity` method of specifying request body (see `singleEntityPost` above),
-your `MyJsonObject` will need to implement `TypedBytes`.
-
-For synchronous execution, omit the `Callback` parameter and specify the response as the return type.
-
-```java
-public interface DummyServiceSync {
-  @GET("foo/bar")
-  MyJsonObj normalGet(@Name("id") String id);
-}
+```xml
+<dependency>
+    <groupId>com.squareup.retrofit</groupId>
+    <artifactId>retrofit</artifactId>
+    <version>(insert latest version)</version>
+</dependency>
 ```
 
-Also worth noting: for POST/PUT requests using default form encoding for the request entity (see
-normalPost), any path parameters are also included in the request body.  This is different from the
-behavior of GET/DELETE, where path parameters are excluded from the query string.
-
 
 
 
 License
 =======
 
-    Copyright 2012 Square, Inc.
+    Copyright 2013 Square, Inc.
 
     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
@@ -71,3 +38,7 @@ License
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     See the License for the specific language governing permissions and
     limitations under the License.
+
+
+ [1]: http://square.github.io/retrofit/
+ [2]: http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.retrofit&a=retrofit&v=LATEST
diff --git a/checkstyle.xml b/checkstyle.xml
index c75dc8d30..97406003b 100644
--- a/checkstyle.xml
+++ b/checkstyle.xml
@@ -79,7 +79,7 @@
 
         <!-- Checks for blocks. You know, those {}'s         -->
         <!-- See http://checkstyle.sf.net/config_blocks.html -->
-        <module name="AvoidNestedBlocks"/>
+        <!--module name="AvoidNestedBlocks"/-->
         <!--module name="EmptyBlock"/-->
         <module name="LeftCurly"/>
         <!--module name="NeedBraces"/-->
diff --git a/deploy_website.sh b/deploy_website.sh
new file mode 100755
index 000000000..3d007cd5b
--- /dev/null
+++ b/deploy_website.sh
@@ -0,0 +1,45 @@
+#!/bin/bash
+
+set -ex
+
+REPO="git@github.com:square/retrofit.git"
+GROUP_ID="com.squareup.retrofit"
+ARTIFACT_ID="retrofit"
+
+DIR=temp-clone
+
+# Delete any existing temporary website clone
+rm -rf $DIR
+
+# Clone the current repo into temp folder
+git clone $REPO $DIR
+
+# Move working directory into temp folder
+cd $DIR
+
+# Checkout and track the gh-pages branch
+git checkout -t origin/gh-pages
+
+# Delete everything
+rm -rf *
+
+# Copy website files from real repo
+cp -R ../website/* .
+
+# Download the latest javadoc
+curl -L "http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=$GROUP_ID&a=$ARTIFACT_ID&v=LATEST&c=javadoc" > javadoc.zip
+mkdir javadoc
+unzip javadoc.zip -d javadoc
+rm javadoc.zip
+
+# Stage all files in git and create a commit
+git add .
+git add -u
+git commit -m "Website at $(date)"
+
+# Push the new files up to GitHub
+git push origin gh-pages
+
+# Delete our temp folder
+cd ..
+rm -rf $DIR
diff --git a/pom.xml b/pom.xml
index 414cad2c4..8235f2617 100644
--- a/pom.xml
+++ b/pom.xml
@@ -14,9 +14,7 @@
   See the License for the specific language governing permissions and
   limitations under the License.
 -->
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
@@ -27,7 +25,7 @@
 
   <groupId>com.squareup.retrofit</groupId>
   <artifactId>parent</artifactId>
-  <version>1.0.0-SNAPSHOT</version>
+  <version>1.0.1</version>
   <packaging>pom</packaging>
 
   <name>Retrofit (Parent)</name>
@@ -50,8 +48,9 @@
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
-    <gson.version>2.2.2</gson.version>
+    <gson.version>2.2.3</gson.version>
     <javax.inject.version>1</javax.inject.version>
+    <okhttp.version>1.0.1</okhttp.version>
 
     <!-- Test Dependencies -->
     <junit.version>4.10</junit.version>
@@ -66,21 +65,6 @@
     <developerConnection>scm:git:ssh://git@github.com/square/retrofit.git</developerConnection>
   </scm>
 
-  <!-- Bring in Maven Central Snapshots for Gson 2.2.3-SNAPSHOT -->
-  <repositories>
-    <repository>
-      <id>sonatype-nexus-snapshots</id>
-      <name>Sonatype Nexus Snapshots</name>
-      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
-      <releases>
-        <enabled>false</enabled>
-      </releases>
-      <snapshots>
-        <enabled>true</enabled>
-      </snapshots>
-    </repository>
-  </repositories>
-
   <issueManagement>
     <system>GitHub Issues</system>
     <url>http://github.com/square/retrofit/issues</url>
@@ -105,6 +89,11 @@
         <artifactId>android</artifactId>
         <version>${android.version}</version>
       </dependency>
+      <dependency>
+        <groupId>com.squareup.okhttp</groupId>
+        <artifactId>okhttp</artifactId>
+        <version>${okhttp.version}</version>
+      </dependency>
       <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index f2ecdc6c2..6005683ac 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -1,14 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.squareup.retrofit</groupId>
     <artifactId>parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -25,6 +23,11 @@
       <artifactId>android</artifactId>
       <optional>true</optional>
     </dependency>
+    <dependency>
+      <groupId>com.squareup.okhttp</groupId>
+      <artifactId>okhttp</artifactId>
+      <optional>true</optional>
+    </dependency>
 
     <dependency>
       <groupId>junit</groupId>
diff --git a/retrofit/src/main/java/retrofit/Callback.java b/retrofit/src/main/java/retrofit/Callback.java
new file mode 100644
index 000000000..45c2cf23b
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/Callback.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import retrofit.client.Response;
+
+/**
+ * Communicates responses to server or offline requests. Contains a callback method for each
+ * possible outcome. One and only one method will be invoked in response to a given request.
+ *
+ * @param <T> expected response type
+ * @author Bob Lee (bob@squareup.com)
+ */
+public interface Callback<T> {
+
+  /** Successful HTTP response. */
+  void success(T t, Response response);
+
+  /**
+   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected
+   * exception.
+   */
+  void failure(RetrofitError error);
+}
diff --git a/retrofit/src/main/java/retrofit/http/CallbackRunnable.java b/retrofit/src/main/java/retrofit/CallbackRunnable.java
similarity index 65%
rename from retrofit/src/main/java/retrofit/http/CallbackRunnable.java
rename to retrofit/src/main/java/retrofit/CallbackRunnable.java
index debfa2610..c11734003 100644
--- a/retrofit/src/main/java/retrofit/http/CallbackRunnable.java
+++ b/retrofit/src/main/java/retrofit/CallbackRunnable.java
@@ -1,5 +1,19 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 import java.util.concurrent.Executor;
 
diff --git a/retrofit/src/main/java/retrofit/http/ChangeableServer.java b/retrofit/src/main/java/retrofit/ChangeableServer.java
similarity index 58%
rename from retrofit/src/main/java/retrofit/http/ChangeableServer.java
rename to retrofit/src/main/java/retrofit/ChangeableServer.java
index f247024fa..e2ad65b0d 100644
--- a/retrofit/src/main/java/retrofit/http/ChangeableServer.java
+++ b/retrofit/src/main/java/retrofit/ChangeableServer.java
@@ -1,4 +1,19 @@
-package retrofit.http;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 /** A {@link Server} whose URL and name can be changed at runtime. */
 public class ChangeableServer extends Server {
@@ -24,7 +39,7 @@ public void update(String url) {
     this.url = url;
   }
 
-  /** Update the URL and name returned by {@link #getUrl()} and {@link #getName()}, respetively. */
+  /** Update the URL and name returned by {@link #getUrl()} and {@link #getName()}, respectively. */
   public void update(String url, String name) {
     this.url = url;
     this.name = name;
diff --git a/retrofit/src/main/java/retrofit/http/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
similarity index 57%
rename from retrofit/src/main/java/retrofit/http/Platform.java
rename to retrofit/src/main/java/retrofit/Platform.java
index 1a8de06d2..8721a097d 100644
--- a/retrofit/src/main/java/retrofit/http/Platform.java
+++ b/retrofit/src/main/java/retrofit/Platform.java
@@ -1,4 +1,19 @@
-package retrofit.http;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 import android.os.Build;
 import android.os.Process;
@@ -7,15 +22,16 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
-import retrofit.http.android.AndroidApacheClient;
-import retrofit.http.android.MainThreadExecutor;
-import retrofit.http.client.Client;
-import retrofit.http.client.UrlConnectionClient;
+import retrofit.android.AndroidApacheClient;
+import retrofit.android.MainThreadExecutor;
+import retrofit.client.Client;
+import retrofit.client.OkClient;
+import retrofit.client.UrlConnectionClient;
+import retrofit.converter.Converter;
+import retrofit.converter.GsonConverter;
 
 import static android.os.Process.THREAD_PRIORITY_BACKGROUND;
 import static java.lang.Thread.MIN_PRIORITY;
-import static retrofit.http.RestAdapter.IDLE_THREAD_NAME;
-import static retrofit.http.Utils.SynchronousExecutor;
 
 abstract class Platform {
   private static final Platform PLATFORM = findPlatform();
@@ -33,9 +49,7 @@ private static Platform findPlatform() {
     }
   }
 
-  Converter defaultConverter() {
-    return new GsonConverter(new Gson());
-  }
+  abstract Converter defaultConverter();
   abstract Client.Provider defaultClient();
   abstract Executor defaultHttpExecutor();
   abstract Executor defaultCallbackExecutor();
@@ -43,8 +57,17 @@ Converter defaultConverter() {
 
   /** Provides sane defaults for operation on the JVM. */
   private static class Base extends Platform {
+    @Override Converter defaultConverter() {
+      return new GsonConverter(new Gson());
+    }
+
     @Override Client.Provider defaultClient() {
-      final Client client = new UrlConnectionClient();
+      final Client client;
+      if (hasOkHttpOnClasspath()) {
+        client = OkClientInstantiator.instantiate();
+      } else {
+        client = new UrlConnectionClient();
+      }
       return new Client.Provider() {
         @Override public Client get() {
           return client;
@@ -60,13 +83,13 @@ Converter defaultConverter() {
               Thread.currentThread().setPriority(MIN_PRIORITY);
               r.run();
             }
-          }, IDLE_THREAD_NAME);
+          }, RestAdapter.IDLE_THREAD_NAME);
         }
       });
     }
 
     @Override Executor defaultCallbackExecutor() {
-      return new SynchronousExecutor();
+      return new Utils.SynchronousExecutor();
     }
 
     @Override RestAdapter.Log defaultLog() {
@@ -80,9 +103,15 @@ Converter defaultConverter() {
 
   /** Provides sane defaults for operation on Android. */
   private static class Android extends Platform {
+    @Override Converter defaultConverter() {
+      return new GsonConverter(new Gson());
+    }
+
     @Override Client.Provider defaultClient() {
       final Client client;
-      if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {
+      if (hasOkHttpOnClasspath()) {
+        client = OkClientInstantiator.instantiate();
+      } else if (Build.VERSION.SDK_INT < Build.VERSION_CODES.GINGERBREAD) {
         client = new AndroidApacheClient();
       } else {
         client = new UrlConnectionClient();
@@ -102,7 +131,7 @@ Converter defaultConverter() {
               Process.setThreadPriority(THREAD_PRIORITY_BACKGROUND);
               r.run();
             }
-          }, IDLE_THREAD_NAME);
+          }, RestAdapter.IDLE_THREAD_NAME);
         }
       });
     }
@@ -119,4 +148,24 @@ Converter defaultConverter() {
       };
     }
   }
+
+  /** Determine whether or not OkHttp is present on the runtime classpath. */
+  private static boolean hasOkHttpOnClasspath() {
+    try {
+      Class.forName("com.squareup.okhttp.OkHttpClient");
+      return true;
+    } catch (ClassNotFoundException e) {
+      return false;
+    }
+  }
+
+  /**
+   * Indirection for OkHttp class to prevent VerifyErrors on Android 2.0 and earlier when the
+   * dependency is not present.
+   */
+  private static class OkClientInstantiator {
+    static Client instantiate() {
+      return new OkClient();
+    }
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/http/Profiler.java b/retrofit/src/main/java/retrofit/Profiler.java
similarity index 76%
rename from retrofit/src/main/java/retrofit/http/Profiler.java
rename to retrofit/src/main/java/retrofit/Profiler.java
index f1737906c..842d4504d 100644
--- a/retrofit/src/main/java/retrofit/http/Profiler.java
+++ b/retrofit/src/main/java/retrofit/Profiler.java
@@ -1,5 +1,19 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 /**
  * A hook allowing clients to log HTTP method times and response status codes.
@@ -12,7 +26,7 @@
    * Invoked before an HTTP method call. The object returned by this method will be
    * passed to {@link #afterCall} when the call returns.
    * <p>
-   * This method gives implementors the opportunity to include information that may
+   * This method gives implementers the opportunity to include information that may
    * change during the server call in {@code afterCall} logic.
    */
   T beforeCall();
diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
new file mode 100644
index 000000000..1cb800c7d
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -0,0 +1,189 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.List;
+import retrofit.client.Header;
+import retrofit.client.Request;
+import retrofit.converter.Converter;
+import retrofit.mime.FormUrlEncodedTypedOutput;
+import retrofit.mime.MultipartTypedOutput;
+import retrofit.mime.TypedOutput;
+
+/** Builds HTTP requests from Java method invocations. */
+final class RequestBuilder {
+  private final Converter converter;
+
+  private RestMethodInfo methodInfo;
+  private Object[] args;
+  private String apiUrl;
+  private List<retrofit.client.Header> headers;
+
+  RequestBuilder(Converter converter) {
+    this.converter = converter;
+  }
+
+  /** Supply cached method metadata info. */
+  RequestBuilder methodInfo(RestMethodInfo methodDetails) {
+    this.methodInfo = methodDetails;
+    return this;
+  }
+
+  /** Base API url. */
+  RequestBuilder apiUrl(String apiUrl) {
+    this.apiUrl = apiUrl;
+    return this;
+  }
+
+  /** Arguments from method invocation. */
+  RequestBuilder args(Object[] args) {
+    this.args = args;
+    return this;
+  }
+
+  /** A list of custom headers. */
+  RequestBuilder headers(List<retrofit.client.Header> headers) {
+    this.headers = headers;
+    return this;
+  }
+
+  /**
+   * Construct a {@link Request} from the supplied information. You <strong>must</strong> call
+   * {@link #methodInfo}, {@link #apiUrl}, {@link #args}, and {@link #headers} before invoking this
+   * method.
+   */
+  Request build() throws UnsupportedEncodingException {
+    String apiUrl = this.apiUrl;
+
+    StringBuilder url = new StringBuilder(apiUrl);
+    if (apiUrl.endsWith("/")) {
+      // We require relative paths to start with '/'. Prevent a double-slash.
+      url.deleteCharAt(url.length() - 1);
+    }
+
+    // Append the method relative URL.
+    url.append(buildRelativeUrl());
+
+    // Append query parameters, if needed.
+    if (methodInfo.hasQueryParams) {
+      boolean first = true;
+      String requestQuery = methodInfo.requestQuery;
+      if (requestQuery != null) {
+        url.append(requestQuery);
+        first = false;
+      }
+      String[] requestQueryName = methodInfo.requestQueryName;
+      for (int i = 0; i < requestQueryName.length; i++) {
+        String query = requestQueryName[i];
+        if (query != null) {
+          String value = URLEncoder.encode(String.valueOf(args[i]), "UTF-8");
+          url.append(first ? '?' : '&').append(query).append('=').append(value);
+          first = false;
+        }
+      }
+    }
+
+    List<retrofit.client.Header> headers = new ArrayList<retrofit.client.Header>();
+    if (this.headers != null) {
+      headers.addAll(this.headers);
+    }
+    List<Header> methodHeaders = methodInfo.headers;
+    if (methodHeaders != null) {
+      headers.addAll(methodHeaders);
+    }
+    // RFC 2616: Header names are case-insensitive.
+    String[] requestParamHeader = methodInfo.requestParamHeader;
+    if (requestParamHeader != null) {
+      for (int i = 0; i < requestParamHeader.length; i++) {
+        String name = requestParamHeader[i];
+        if (name == null) continue;
+        Object arg = args[i];
+        if (arg != null) {
+          headers.add(new retrofit.client.Header(name, String.valueOf(arg)));
+        }
+      }
+    }
+
+    return new Request(methodInfo.requestMethod, url.toString(), headers, buildBody());
+  }
+
+  /** Create the final relative URL by performing parameter replacement. */
+  private String buildRelativeUrl() throws UnsupportedEncodingException {
+    String replacedPath = methodInfo.requestUrl;
+    String[] requestUrlParam = methodInfo.requestUrlParam;
+    for (int i = 0; i < requestUrlParam.length; i++) {
+      String param = requestUrlParam[i];
+      if (param != null) {
+        String value = URLEncoder.encode(String.valueOf(args[i]), "UTF-8");
+        replacedPath = replacedPath.replace("{" + param + "}", value);
+      }
+    }
+    return replacedPath;
+  }
+
+  /** Create the request body using the method info and invocation arguments. */
+  private TypedOutput buildBody() {
+    switch (methodInfo.requestType) {
+      case SIMPLE: {
+        int bodyIndex = methodInfo.bodyIndex;
+        if (bodyIndex == RestMethodInfo.NO_BODY) {
+          return null;
+        }
+        Object body = args[bodyIndex];
+        if (body instanceof TypedOutput) {
+          return (TypedOutput) body;
+        } else {
+          return converter.toBody(body);
+        }
+      }
+
+      case FORM_URL_ENCODED: {
+        FormUrlEncodedTypedOutput body = new FormUrlEncodedTypedOutput();
+        String[] requestFormFields = methodInfo.requestFormFields;
+        for (int i = 0; i < requestFormFields.length; i++) {
+          String name = requestFormFields[i];
+          if (name != null) {
+            body.addField(name, String.valueOf(args[i]));
+          }
+        }
+        return body;
+      }
+
+      case MULTIPART: {
+        MultipartTypedOutput body = new MultipartTypedOutput();
+        String[] requestMultipartPart = methodInfo.requestMultipartPart;
+        for (int i = 0; i < requestMultipartPart.length; i++) {
+          String name = requestMultipartPart[i];
+          if (name != null) {
+            Object value = args[i];
+            if (value instanceof TypedOutput) {
+              body.addPart(name, (TypedOutput) value);
+            } else {
+              body.addPart(name, converter.toBody(value));
+            }
+          }
+        }
+        return body;
+      }
+
+      default:
+        throw new IllegalArgumentException("Unknown request type " + methodInfo.requestType);
+    }
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/RequestHeaders.java b/retrofit/src/main/java/retrofit/RequestHeaders.java
new file mode 100644
index 000000000..c1bef05d5
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/RequestHeaders.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import java.util.Collections;
+import java.util.List;
+import retrofit.client.Header;
+
+/** Manages headers for each request. */
+public interface RequestHeaders {
+  /**
+   * Get a list of headers for a request. This method will be called once for each request allowing
+   * you to change the list as the state of your application changes.
+   */
+  List<Header> get();
+
+  /** Empty header list. */
+  RequestHeaders NONE = new RequestHeaders() {
+    @Override public List<Header> get() {
+      return Collections.emptyList();
+    }
+  };
+}
diff --git a/retrofit/src/main/java/retrofit/ResponseWrapper.java b/retrofit/src/main/java/retrofit/ResponseWrapper.java
new file mode 100644
index 000000000..65b881367
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/ResponseWrapper.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import retrofit.client.Response;
+
+/**
+ * A wrapper that holds the {@link Response} and {@link retrofit.converter.Converter} response to
+ * be used by the {@link CallbackRunnable} for success method calls on {@link Callback}.
+ *
+ * @author JJ Ford (jj.n.ford@gmail.com)
+ */
+final class ResponseWrapper {
+  final Response response;
+  final Object responseBody;
+
+  ResponseWrapper(Response response, Object responseBody) {
+    this.response = response;
+    this.responseBody = responseBody;
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
similarity index 67%
rename from retrofit/src/main/java/retrofit/http/RestAdapter.java
rename to retrofit/src/main/java/retrofit/RestAdapter.java
index 7c67c2d52..95199c37c 100644
--- a/retrofit/src/main/java/retrofit/http/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -1,5 +1,19 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -12,18 +26,79 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
-import retrofit.http.Profiler.RequestInformation;
-import retrofit.http.client.Client;
-import retrofit.http.client.Request;
-import retrofit.http.client.Response;
-import retrofit.http.mime.TypedByteArray;
-import retrofit.http.mime.TypedInput;
-import retrofit.http.mime.TypedOutput;
-
-import static retrofit.http.Utils.SynchronousExecutor;
+import retrofit.Profiler.RequestInformation;
+import retrofit.client.Client;
+import retrofit.client.Header;
+import retrofit.client.Request;
+import retrofit.client.Response;
+import retrofit.converter.ConversionException;
+import retrofit.converter.Converter;
+import retrofit.mime.MimeUtil;
+import retrofit.mime.TypedByteArray;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
 
 /**
- * Converts Java method calls to Rest calls.
+ * Adapts a Java interface to a REST API.
+ * <p>
+ * API endpoints are defined as methods on an interface with annotations providing metadata about
+ * the form in which the HTTP call should be made.
+ * <p>
+ * The relative path for a given method is obtained from an annotation on the method describing
+ * the request type. The built-in methods are {@link retrofit.http.GET GET},
+ * {@link retrofit.http.PUT PUT}, {@link retrofit.http.POST POST}, {@link retrofit.http.HEAD HEAD},
+ * and {@link retrofit.http.DELETE DELETE}. You can define your own HTTP method by creating an
+ * annotation that takes a {code String} value and itself is annotated with
+ * {@link retrofit.http.RestMethod @RestMethod}.
+ * <p>
+ * Method parameters can be used to replace parts of the URL by annotating them with
+ * {@link retrofit.http.Path @Path}. Replacement sections are denoted by an identifier surrounded
+ * by curly braces (e.g., "{foo}"). To add items to the query string of a URL use
+ * {@link retrofit.http.Query @Query}.
+ * <p>
+ * HTTP requests happen in one of two ways:
+ * <ul>
+ * <li>On the provided HTTP {@link Executor} with callbacks marshaled to the callback
+ * {@link Executor}. The last method parameter should be of type {@link Callback}. The HTTP
+ * response will be converted to the callback's parameter type using the specified
+ * {@link retrofit.converter.Converter Converter}. If the callback parameter type uses a wildcard,
+ * the lower bound will be used as the conversion type.
+ * <li>On the current thread returning the response or throwing a {@link RetrofitError}. The HTTP
+ * response will be converted to the method's return type using the specified
+ * {@link retrofit.converter.Converter Converter}.
+ * </ul>
+ * <p>
+ * The body of a request is denoted by the {@link retrofit.http.Body @Body} annotation. The object
+ * will be converted to request representation by a call to
+ * {@link retrofit.converter.Converter#toBody(Object) toBody} on the supplied
+ * {@link retrofit.converter.Converter Converter} for this instance. The body can also be a
+ * {@link TypedOutput} where it will be used directly.
+ * <p>
+ * Alternative request body formats are supported by method annotations and corresponding parameter
+ * annotations:
+ * <ul>
+ * <li>{@link retrofit.http.FormUrlEncoded @FormUrlEncoded} - Form-encoded data with key-value
+ * pairs specified by the {@link retrofit.http.Field @Field} parameter annotation.
+ * <li>{@link retrofit.http.Multipart @Multipart} - RFC 2387-compliant multi-part data with parts
+ * specified by the {@link retrofit.http.Part @Part} parameter annotation.
+ * </ul>
+ * <p>
+ * Additional static headers can be added for an endpoint using the
+ * {@link retrofit.http.Headers @Headers} method annotation. For per-request control over a header
+ * annotate a parameter with {@link Header @Header}.
+ * <p>
+ * For example:
+ * <pre>
+ * public interface MyApi {
+ *   &#64;POST("/category/{cat}") // Asynchronous execution.
+ *   void categoryList(@Path("cat") String a, @Query("page") int b, Callback&lt;List&lt;Item>> cb);
+ *   &#64;POST("/category/{cat}") // Synchronous execution.
+ *   List&lt;Item> categoryList(@Path("cat") String a, @Query("page") int b);
+ * }
+ * </pre>
+ * <p>
+ * Calling {@link #create(Class)} with {@code MyApi.class} will validate and create a new
+ * implementation of the API.
  *
  * @author Bob Lee (bob@squareup.com)
  * @author Jake Wharton (jw@squareup.com)
@@ -43,68 +118,38 @@
   private final Client.Provider clientProvider;
   private final Executor httpExecutor;
   private final Executor callbackExecutor;
-  private final Headers headers;
+  private final RequestHeaders requestHeaders;
   private final Converter converter;
   private final Profiler profiler;
   private final Log log;
   private volatile boolean debug;
 
   private RestAdapter(Server server, Client.Provider clientProvider, Executor httpExecutor,
-      Executor callbackExecutor, Headers headers, Converter converter, Profiler profiler, Log log,
-      boolean debug) {
+      Executor callbackExecutor, RequestHeaders requestHeaders, Converter converter,
+      Profiler profiler, Log log, boolean debug) {
     this.server = server;
     this.clientProvider = clientProvider;
     this.httpExecutor = httpExecutor;
     this.callbackExecutor = callbackExecutor;
-    this.headers = headers;
+    this.requestHeaders = requestHeaders;
     this.converter = converter;
     this.profiler = profiler;
     this.log = log;
     this.debug = debug;
   }
 
-  /** Toggle debug logging on and off. */
+  /** Toggle debug logging on or off. */
   public void setDebug(boolean debug) {
     this.debug = debug;
   }
 
-  /**
-   * Adapts a Java interface to a REST API.
-   * <p>
-   * The relative path for a given method is obtained from an annotation on the method describing
-   * the request type. The names of URL parameters are retrieved from {@link Name}
-   * annotations on the method parameters.
-   * <p>
-   * HTTP requests happen in one of two ways:
-   * <ul>
-   * <li>On the provided HTTP {@link Executor} with callbacks marshaled to the callback
-   * {@link Executor}. The last method parameter should be of type {@link Callback}. The HTTP
-   * response will be converted to the callback's parameter type using the specified
-   * {@link Converter}. If the callback parameter type uses a wildcard, the lower bound will be
-   * used as the conversion type.</li>
-   * <li>On the current thread returning the response or throwing a {@link RetrofitError}. The HTTP
-   * response will be converted to the method's return type using the specified
-   * {@link Converter}.</li>
-   * </ul>
-   * <p>
-   * For example:
-   * <pre>
-   *   public interface MyApi {
-   *     &#64;POST("go") // Asynchronous execution.
-   *     void go(@Name("a") String a, @Name("b") int b, Callback&lt;? super MyResult> callback);
-   *     &#64;POST("go") // Synchronous execution.
-   *     MyResult go(@Name("a") String a, @Name("b") int b);
-   *   }
-   * </pre>
-   *
-   * @param type to implement
-   */
+  /** Create an implementation of the API defined by the specified {@code service} interface. */
   @SuppressWarnings("unchecked")
-  public <T> T create(Class<T> type) {
-    if (!type.isInterface()) {
+  public <T> T create(Class<T> service) {
+    if (!service.isInterface()) {
       throw new IllegalArgumentException("Only interface endpoint definitions are supported.");
     }
-    return (T) Proxy.newProxyInstance(type.getClassLoader(), new Class<?>[] { type },
+    return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
         new RestHandler());
   }
 
@@ -150,8 +195,8 @@ public void setDebug(boolean debug) {
     /**
      * Execute an HTTP request.
      *
-     * @return HTTP response object of specified {@code type}.
-     * @throws RetrofitError Thrown if any error occurs during the HTTP request.
+     * @return HTTP response object of specified {@code type} or {@code null}.
+     * @throws RetrofitError if any error occurs during the HTTP request.
      */
     private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
       methodDetails.init(); // Ensure all relevant method information has been loaded.
@@ -160,10 +205,10 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
       String url = serverUrl; // Keep some url in case RequestBuilder throws an exception.
       try {
         Request request = new RequestBuilder(converter) //
-            .setApiUrl(serverUrl)
-            .setArgs(args)
-            .setHeaders(headers.get())
-            .setMethodInfo(methodDetails)
+            .apiUrl(serverUrl) //
+            .args(args) //
+            .headers(requestHeaders.get()) //
+            .methodInfo(methodDetails) //
             .build();
         url = request.getUrl();
 
@@ -188,6 +233,7 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
         int statusCode = response.getStatus();
         if (profiler != null) {
           RequestInformation requestInfo = getRequestInfo(serverUrl, methodDetails, request);
+          //noinspection unchecked
           profiler.afterCall(requestInfo, elapsedTime, statusCode, profilerObject);
         }
 
@@ -195,7 +241,7 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
           response = logAndReplaceResponse(url, response, elapsedTime);
         }
 
-        Type type = methodDetails.type;
+        Type type = methodDetails.responseObjectType;
 
         if (statusCode >= 200 && statusCode < 300) { // 2XX == successful request
           // Caller requested the raw Response object directly.
@@ -263,7 +309,7 @@ private Request logAndReplaceRequest(Request request) throws IOException {
       byte[] bodyBytes = baos.toByteArray();
       bodySize = bodyBytes.length;
       String bodyMime = body.mimeType();
-      String bodyString = new String(bodyBytes, Utils.parseCharset(bodyMime));
+      String bodyString = new String(bodyBytes, MimeUtil.parseCharset(bodyMime));
       for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {
         int end = Math.min(len, i + LOG_CHUNK_SIZE);
         log.log(bodyString.substring(i, end));
@@ -303,7 +349,7 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
       byte[] bodyBytes = ((TypedByteArray) body).getBytes();
       bodySize = bodyBytes.length;
       String bodyMime = body.mimeType();
-      String bodyCharset = Utils.parseCharset(bodyMime);
+      String bodyCharset = MimeUtil.parseCharset(bodyMime);
       String bodyString = new String(bodyBytes, bodyCharset);
       for (int i = 0, len = bodyString.length(); i < len; i += LOG_CHUNK_SIZE) {
         int end = Math.min(len, i + LOG_CHUNK_SIZE);
@@ -327,8 +373,8 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
       contentType = body.mimeType();
     }
 
-    return new Profiler.RequestInformation(methodDetails.restMethod.value(), serverUrl,
-        methodDetails.path, contentLength, contentType);
+    return new Profiler.RequestInformation(methodDetails.requestMethod, serverUrl,
+        methodDetails.requestUrl, contentLength, contentType);
   }
 
   /**
@@ -352,23 +398,26 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
     private Client.Provider clientProvider;
     private Executor httpExecutor;
     private Executor callbackExecutor;
-    private Headers headers;
+    private RequestHeaders requestHeaders;
     private Converter converter;
     private Profiler profiler;
     private Log log;
     private boolean debug;
 
+    /** API server base URL. */
     public Builder setServer(String endpoint) {
       if (endpoint == null) throw new NullPointerException("endpoint");
       return setServer(new Server(endpoint));
     }
 
+    /** API server. */
     public Builder setServer(Server server) {
       if (server == null) throw new NullPointerException("server");
       this.server = server;
       return this;
     }
 
+    /** The HTTP client used for requests. */
     public Builder setClient(final Client client) {
       if (client == null) throw new NullPointerException("client");
       return setClient(new Client.Provider() {
@@ -378,6 +427,7 @@ public Builder setClient(final Client client) {
       });
     }
 
+    /** The HTTP client used for requests. */
     public Builder setClient(Client.Provider clientProvider) {
       if (clientProvider == null) throw new NullPointerException("clientProvider");
       this.clientProvider = clientProvider;
@@ -394,47 +444,53 @@ public Builder setClient(Client.Provider clientProvider) {
      */
     public Builder setExecutors(Executor httpExecutor, Executor callbackExecutor) {
       if (httpExecutor == null) throw new NullPointerException("httpExecutor");
-      if (callbackExecutor == null) callbackExecutor = new SynchronousExecutor();
+      if (callbackExecutor == null) callbackExecutor = new Utils.SynchronousExecutor();
       this.httpExecutor = httpExecutor;
       this.callbackExecutor = callbackExecutor;
       return this;
     }
 
-    public Builder setHeaders(Headers headers) {
-      if (headers == null) throw new NullPointerException("headers");
-      this.headers = headers;
+    /**  */
+    public Builder setRequestHeaders(RequestHeaders requestHeaders) {
+      if (requestHeaders == null) throw new NullPointerException("requestHeaders");
+      this.requestHeaders = requestHeaders;
       return this;
     }
 
+    /** The converter used for serialization and deserialization of objects. */
     public Builder setConverter(Converter converter) {
       if (converter == null) throw new NullPointerException("converter");
       this.converter = converter;
       return this;
     }
 
+    /** Set the profiler used to measure requests. */
     public Builder setProfiler(Profiler profiler) {
       if (profiler == null) throw new NullPointerException("profiler");
       this.profiler = profiler;
       return this;
     }
 
+    /** Configure debug logging mechanism. */
     public Builder setLog(Log log) {
       if (log == null) throw new NullPointerException("log");
       this.log = log;
       return this;
     }
 
+    /** Enable debug logging. */
     public Builder setDebug(boolean debug) {
       this.debug = debug;
       return this;
     }
 
+    /** Create the {@link RestAdapter} instances. */
     public RestAdapter build() {
       if (server == null) {
         throw new IllegalArgumentException("Server may not be null.");
       }
       ensureSaneDefaults();
-      return new RestAdapter(server, clientProvider, httpExecutor, callbackExecutor, headers,
+      return new RestAdapter(server, clientProvider, httpExecutor, callbackExecutor, requestHeaders,
           converter, profiler, log, debug);
     }
 
@@ -454,8 +510,8 @@ private void ensureSaneDefaults() {
       if (log == null) {
         log = Platform.get().defaultLog();
       }
-      if (headers == null) {
-        headers = Headers.NONE;
+      if (requestHeaders == null) {
+        requestHeaders = RequestHeaders.NONE;
       }
     }
   }
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
new file mode 100644
index 000000000..0eafca32c
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -0,0 +1,412 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.WildcardType;
+import java.util.ArrayList;
+import java.util.LinkedHashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+import retrofit.http.Body;
+import retrofit.http.Field;
+import retrofit.http.FormUrlEncoded;
+import retrofit.http.Header;
+import retrofit.http.Headers;
+import retrofit.http.Multipart;
+import retrofit.http.Part;
+import retrofit.http.Path;
+import retrofit.http.Query;
+import retrofit.http.RestMethod;
+
+/** Request metadata about a service interface declaration. */
+final class RestMethodInfo {
+  static final int NO_BODY = -1;
+
+  // Matches strings containing lowercase characters, digits, underscores, or hyphens that start
+  // with a lowercase character in between '{' and '}'.
+  private static final Pattern URL_PARAMETERS = Pattern.compile("\\{([a-z][a-z0-9_-]*)\\}");
+
+  enum RequestType {
+    /** No content-specific logic required. */
+    SIMPLE,
+    /** Multi-part request body. */
+    MULTIPART,
+    /** Form URL-encoded request body. */
+    FORM_URL_ENCODED
+  }
+
+  final Method method;
+
+  boolean loaded = false;
+
+  // Method-level details
+  final boolean isSynchronous;
+  Type responseObjectType;
+  RequestType requestType = RequestType.SIMPLE;
+  String requestMethod;
+  boolean requestHasBody;
+  String requestUrl;
+  Set<String> requestUrlParamNames;
+  String requestQuery;
+  List<retrofit.client.Header> headers;
+
+  // Parameter-level details
+  String[] requestUrlParam;
+  String[] requestQueryName;
+  boolean hasQueryParams = false;
+  String[] requestFormFields;
+  String[] requestMultipartPart;
+  String[] requestParamHeader;
+  int bodyIndex = NO_BODY;
+
+  RestMethodInfo(Method method) {
+    this.method = method;
+    isSynchronous = parseResponseType();
+  }
+
+  synchronized void init() {
+    if (loaded) return;
+
+    parseMethodAnnotations();
+    parseParameters();
+
+    loaded = true;
+  }
+
+  /** Loads {@link #requestMethod} and {@link #requestType}. */
+  private void parseMethodAnnotations() {
+    for (Annotation methodAnnotation : method.getAnnotations()) {
+      Class<? extends Annotation> annotationType = methodAnnotation.annotationType();
+      RestMethod methodInfo = null;
+
+      // Look for a @RestMethod annotation on the parameter annotation indicating request method.
+      for (Annotation innerAnnotation : annotationType.getAnnotations()) {
+        if (RestMethod.class == innerAnnotation.annotationType()) {
+          methodInfo = (RestMethod) innerAnnotation;
+          break;
+        }
+      }
+
+      if (methodInfo != null) {
+        if (requestMethod != null) {
+          throw new IllegalArgumentException("Method "
+              + method.getName()
+              + " contains multiple HTTP methods. Found: "
+              + requestMethod
+              + " and "
+              + methodInfo.value());
+        }
+        String path;
+        try {
+          path = (String) annotationType.getMethod("value").invoke(methodAnnotation);
+        } catch (Exception e) {
+          throw new RuntimeException("Failed to extract path from "
+              + annotationType.getSimpleName()
+              + " annotation on "
+              + method.getName()
+              + ".", e);
+        }
+        parsePath(path);
+        requestMethod = methodInfo.value();
+        requestHasBody = methodInfo.hasBody();
+      } else if (annotationType == Headers.class) {
+        String[] headersToParse = ((Headers) methodAnnotation).value();
+        if (headersToParse.length == 0) {
+          throw new IllegalStateException("Headers annotation was empty.");
+        }
+        headers = parseHeaders(headersToParse);
+      } else if (annotationType == Multipart.class) {
+        if (requestType != RequestType.SIMPLE) {
+          throw new IllegalStateException(
+              "Only one encoding annotation per method is allowed: " + method.getName());
+        }
+        requestType = RequestType.MULTIPART;
+      } else if (annotationType == FormUrlEncoded.class) {
+        if (requestType != RequestType.SIMPLE) {
+          throw new IllegalStateException(
+              "Only one encoding annotation per method is allowed: " + method.getName());
+        }
+        requestType = RequestType.FORM_URL_ENCODED;
+      }
+    }
+
+    if (requestMethod == null) {
+      throw new IllegalStateException(
+          "Method " + method.getName() + " not annotated with request type (e.g., GET, POST).");
+    }
+    if (!requestHasBody) {
+      if (requestType == RequestType.MULTIPART) {
+        throw new IllegalStateException(
+            "Multipart can only be specific on HTTP methods with request body (e.g., POST). ("
+                + method.getName()
+                + ")");
+      }
+      if (requestType == RequestType.FORM_URL_ENCODED) {
+        throw new IllegalStateException(
+            "Multipart can only be specific on HTTP methods with request body (e.g., POST). ("
+                + method.getName()
+                + ")");
+      }
+    }
+  }
+
+  /** Loads {@link #requestUrl}, {@link #requestUrlParamNames}, and {@link #requestQuery}. */
+  private void parsePath(String path) {
+    if (path == null || path.length() == 0 || path.charAt(0) != '/') {
+      throw new IllegalArgumentException("URL path \""
+          + path
+          + "\" on method "
+          + method.getName()
+          + " must start with '/'. ("
+          + method.getName()
+          + ")");
+    }
+
+    // Get the relative URL path and existing query string, if present.
+    String url = path;
+    String query = null;
+    int question = path.indexOf('?');
+    if (question != -1 && question < path.length() - 1) {
+      url = path.substring(0, question);
+      query = path.substring(question + 1);
+      hasQueryParams = true;
+
+      // Ensure the query string does not have any named parameters.
+      Matcher queryParamMatcher = URL_PARAMETERS.matcher(query);
+      if (queryParamMatcher.find()) {
+        throw new IllegalStateException("URL query string \""
+            + query
+            + "\" on method "
+            + method.getName()
+            + " may not have replace block.");
+      }
+    }
+
+    Set<String> urlParams = parsePathParameters(path);
+
+    requestUrl = url;
+    requestUrlParamNames = urlParams;
+    requestQuery = query;
+  }
+
+  private List<retrofit.client.Header> parseHeaders(String[] headers) {
+    List<retrofit.client.Header> headerList = new ArrayList<retrofit.client.Header>();
+    for (String header : headers) {
+      int colon = header.indexOf(':');
+      if (colon == -1 || colon == 0 || colon == headers.length - 1) {
+        throw new IllegalStateException("Header must be in the form 'Name: Value': " + header);
+      }
+      headerList.add(new retrofit.client.Header(header.substring(0, colon),
+          header.substring(colon + 1).trim()));
+    }
+    return headerList;
+  }
+
+  /** Loads {@link #responseObjectType}. Returns {@code true} if method is synchronous. */
+  private boolean parseResponseType() {
+    // Synchronous methods have a non-void return type.
+    Type returnType = method.getGenericReturnType();
+
+    // Asynchronous methods should have a Callback type as the last argument.
+    Type lastArgType = null;
+    Class<?> lastArgClass = null;
+    Type[] parameterTypes = method.getGenericParameterTypes();
+    if (parameterTypes.length > 0) {
+      Type typeToCheck = parameterTypes[parameterTypes.length - 1];
+      lastArgType = typeToCheck;
+      if (typeToCheck instanceof ParameterizedType) {
+        typeToCheck = ((ParameterizedType) typeToCheck).getRawType();
+      }
+      if (typeToCheck instanceof Class) {
+        lastArgClass = (Class<?>) typeToCheck;
+      }
+    }
+
+    boolean hasReturnType = returnType != void.class;
+    boolean hasCallback = lastArgClass != null && Callback.class.isAssignableFrom(lastArgClass);
+
+    // Check for invalid configurations.
+    if (hasReturnType && hasCallback) {
+      throw new IllegalArgumentException("Method "
+          + method.getName()
+          + " may only have return type or Callback as last argument, not both.");
+    }
+    if (!hasReturnType && !hasCallback) {
+      throw new IllegalArgumentException("Method "
+          + method.getName()
+          + " must have either a return type or Callback as last argument.");
+    }
+
+    if (hasReturnType) {
+      responseObjectType = returnType;
+      return true;
+    }
+
+    lastArgType = Types.getSupertype(lastArgType, Types.getRawType(lastArgType), Callback.class);
+    if (lastArgType instanceof ParameterizedType) {
+      Type[] types = ((ParameterizedType) lastArgType).getActualTypeArguments();
+      for (int i = 0; i < types.length; i++) {
+        Type type = types[i];
+        if (type instanceof WildcardType) {
+          types[i] = ((WildcardType) type).getUpperBounds()[0];
+        }
+      }
+      responseObjectType = types[0];
+      return false;
+    }
+
+    throw new IllegalArgumentException("Last parameter of "
+        + method.getName()
+        + " must be of type Callback<X> or Callback<? super X>. Found: "
+        + lastArgType);
+  }
+
+  /**
+   * Loads {@link #requestUrlParam}, {@link #requestQueryName}, {@link #requestFormFields},
+   * {@link #requestMultipartPart}, and {@link #requestParamHeader}. Must be called after
+   * {@link #parseMethodAnnotations()}.
+   */
+  private void parseParameters() {
+    Class<?>[] parameterTypes = method.getParameterTypes();
+
+    Annotation[][] parameterAnnotationArrays = method.getParameterAnnotations();
+    int count = parameterAnnotationArrays.length;
+    if (!isSynchronous) {
+      count -= 1; // Callback is last argument when not a synchronous method.
+    }
+
+    String[] urlParam = new String[count];
+    String[] queryName = new String[count];
+    String[] formValue = new String[count];
+    String[] multipartPart = new String[count];
+    String[] paramHeader = new String[count];
+    boolean gotField = false;
+    boolean gotPart = false;
+
+    for (int i = 0; i < count; i++) {
+      boolean hasRetrofitAnnotation = false;
+
+      Class<?> parameterType = parameterTypes[i];
+      Annotation[] parameterAnnotations = parameterAnnotationArrays[i];
+      if (parameterAnnotations != null) {
+        for (Annotation parameterAnnotation : parameterAnnotations) {
+          Class<? extends Annotation> annotationType = parameterAnnotation.annotationType();
+
+          if (annotationType == Path.class) {
+            hasRetrofitAnnotation = true;
+            String name = ((Path) parameterAnnotation).value();
+
+            // Verify URL replacement name is actually present in the URL path.
+            if (!requestUrlParamNames.contains(name)) {
+              throw new IllegalStateException(
+                  "Method path \"" + requestUrl + "\" does not contain {" + name + "}.");
+            }
+
+            urlParam[i] = name;
+          } else if (annotationType == Query.class) {
+            hasRetrofitAnnotation = true;
+            hasQueryParams = true;
+            String name = ((Query) parameterAnnotation).value();
+
+            queryName[i] = name;
+          } else if (annotationType == Header.class) {
+            String name = ((Header) parameterAnnotation).value();
+            if (parameterType != String.class) {
+              throw new IllegalStateException("@Header parameter type must be String: " + name);
+            }
+
+            hasRetrofitAnnotation = true;
+            paramHeader[i] = name;
+          } else if (annotationType == Field.class) {
+            if (requestType != RequestType.FORM_URL_ENCODED) {
+              throw new IllegalStateException(
+                  "@Field parameters can only be used with form encoding.");
+            }
+
+            String name = ((Field) parameterAnnotation).value();
+
+            gotField = true;
+            hasRetrofitAnnotation = true;
+            formValue[i] = name;
+          } else if (annotationType == Part.class) {
+            if (requestType != RequestType.MULTIPART) {
+              throw new IllegalStateException(
+                  "@Part parameters can only be used with multipart encoding.");
+            }
+
+            String name = ((Part) parameterAnnotation).value();
+
+            gotPart = true;
+            hasRetrofitAnnotation = true;
+            multipartPart[i] = name;
+          } else if (annotationType == Body.class) {
+            if (requestType != RequestType.SIMPLE) {
+              throw new IllegalStateException(
+                  "@Body parameters cannot be used with form or multi-part encoding.");
+            }
+            if (bodyIndex != NO_BODY) {
+              throw new IllegalStateException(
+                  "Method annotated with multiple Body method annotations: " + method);
+            }
+
+            hasRetrofitAnnotation = true;
+            bodyIndex = i;
+          }
+        }
+      }
+
+      if (!hasRetrofitAnnotation) {
+        throw new IllegalStateException(
+            "No annotations found on parameter " + (i + 1) + " of " + method.getName());
+      }
+    }
+
+    if (requestType == RequestType.SIMPLE && !requestHasBody && bodyIndex != NO_BODY) {
+      throw new IllegalStateException("Non-body HTTP method cannot contain @Body or @TypedOutput.");
+    }
+    if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {
+      throw new IllegalStateException("Form-encoded method must contain at least one @Field.");
+    }
+    if (requestType == RequestType.MULTIPART && !gotPart) {
+      throw new IllegalStateException("Multipart method must contain at least one @Part.");
+    }
+
+    requestUrlParam = urlParam;
+    requestQueryName = queryName;
+    requestFormFields = formValue;
+    requestMultipartPart = multipartPart;
+    requestParamHeader = paramHeader;
+  }
+
+  /**
+   * Gets the set of unique path parameters used in the given URI. If a parameter is used twice
+   * in the URI, it will only show up once in the set.
+   */
+  static Set<String> parsePathParameters(String path) {
+    Matcher m = URL_PARAMETERS.matcher(path);
+    Set<String> patterns = new LinkedHashSet<String>();
+    while (m.find()) {
+      patterns.add(m.group(1));
+    }
+    return patterns;
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/RetrofitError.java b/retrofit/src/main/java/retrofit/RetrofitError.java
similarity index 76%
rename from retrofit/src/main/java/retrofit/http/RetrofitError.java
rename to retrofit/src/main/java/retrofit/RetrofitError.java
index 7aa36666b..4a8b2cff0 100644
--- a/retrofit/src/main/java/retrofit/http/RetrofitError.java
+++ b/retrofit/src/main/java/retrofit/RetrofitError.java
@@ -1,10 +1,26 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 import java.io.IOException;
 import java.lang.reflect.Type;
-import retrofit.http.client.Response;
-import retrofit.http.mime.TypedInput;
+import retrofit.client.Response;
+import retrofit.converter.ConversionException;
+import retrofit.converter.Converter;
+import retrofit.mime.TypedInput;
 
 public class RetrofitError extends RuntimeException {
   public static RetrofitError networkError(String url, IOException exception) {
diff --git a/retrofit/src/main/java/retrofit/http/Server.java b/retrofit/src/main/java/retrofit/Server.java
similarity index 58%
rename from retrofit/src/main/java/retrofit/http/Server.java
rename to retrofit/src/main/java/retrofit/Server.java
index b1c63b820..4237dbd00 100644
--- a/retrofit/src/main/java/retrofit/http/Server.java
+++ b/retrofit/src/main/java/retrofit/Server.java
@@ -1,5 +1,19 @@
-// Copyright 2010 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2010 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 /**
  * Represents an API endpoint URL and associated name. Callers should always consult the instance
diff --git a/retrofit/src/main/java/retrofit/http/Types.java b/retrofit/src/main/java/retrofit/Types.java
similarity index 99%
rename from retrofit/src/main/java/retrofit/http/Types.java
rename to retrofit/src/main/java/retrofit/Types.java
index 3aadc9c22..0ad4e5518 100644
--- a/retrofit/src/main/java/retrofit/http/Types.java
+++ b/retrofit/src/main/java/retrofit/Types.java
@@ -1,4 +1,4 @@
-/**
+/*
  * Copyright (C) 2008 Google Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -13,8 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
-package retrofit.http;
+package retrofit;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.GenericArrayType;
diff --git a/retrofit/src/main/java/retrofit/http/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
similarity index 68%
rename from retrofit/src/main/java/retrofit/http/Utils.java
rename to retrofit/src/main/java/retrofit/Utils.java
index 12dddb5ec..9d4bab2c5 100644
--- a/retrofit/src/main/java/retrofit/http/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -1,21 +1,30 @@
-// Copyright 2012 Square, Inc.
-// Copyright 2007 The Guava Authors
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ * Copyright (C) 2007 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.concurrent.Executor;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import retrofit.http.client.Response;
-import retrofit.http.mime.TypedByteArray;
-import retrofit.http.mime.TypedInput;
+import retrofit.client.Response;
+import retrofit.mime.TypedByteArray;
+import retrofit.mime.TypedInput;
 
-import static java.util.regex.Pattern.CASE_INSENSITIVE;
-
-public final class Utils {
-  private static final Pattern CHARSET = Pattern.compile("\\Wcharset=([^\\s;]+)", CASE_INSENSITIVE);
+final class Utils {
   private static final int BUFFER_SIZE = 0x1000;
 
   /**
@@ -57,14 +66,6 @@ static Response replaceResponseBody(Response response, TypedInput body) {
     return new Response(response.getStatus(), response.getReason(), response.getHeaders(), body);
   }
 
-  public static String parseCharset(String mimeType) {
-    Matcher match = CHARSET.matcher(mimeType);
-    if (match.find()) {
-      return match.group(1).replaceAll("[\"\\\\]", "");
-    }
-    return "UTF-8";
-  }
-
   static class SynchronousExecutor implements Executor {
     @Override public void execute(Runnable runnable) {
       runnable.run();
diff --git a/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
new file mode 100644
index 000000000..d5ae3dc8a
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.android;
+
+import android.net.http.AndroidHttpClient;
+import retrofit.client.ApacheClient;
+
+/**
+ * Provides a {@link retrofit.client.Client} which uses the Android-specific version of
+ * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}.
+ * <p>
+ * If you need to provide a customized version of the {@link AndroidHttpClient} or a different
+ * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly.
+ */
+public final class AndroidApacheClient extends ApacheClient {
+  public AndroidApacheClient() {
+    super(AndroidHttpClient.newInstance("Retrofit"));
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java b/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java
new file mode 100644
index 000000000..81440d041
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/android/MainThreadExecutor.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.android;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import java.util.concurrent.Executor;
+
+/** Executor that runs tasks on Android's main thread. */
+public final class MainThreadExecutor implements Executor {
+  private final Handler handler = new Handler(Looper.getMainLooper());
+
+  @Override public void execute(Runnable r) {
+    handler.post(r);
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/client/ApacheClient.java b/retrofit/src/main/java/retrofit/client/ApacheClient.java
similarity index 85%
rename from retrofit/src/main/java/retrofit/http/client/ApacheClient.java
rename to retrofit/src/main/java/retrofit/client/ApacheClient.java
index 8c0dcc660..1b75da3d1 100644
--- a/retrofit/src/main/java/retrofit/http/client/ApacheClient.java
+++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java
@@ -1,5 +1,19 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.client;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
@@ -19,9 +33,8 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicHeader;
 import org.apache.http.util.EntityUtils;
-import retrofit.http.Header;
-import retrofit.http.mime.TypedByteArray;
-import retrofit.http.mime.TypedOutput;
+import retrofit.mime.TypedByteArray;
+import retrofit.mime.TypedOutput;
 
 /** A {@link Client} which uses an implementation of Apache's {@link HttpClient}. */
 public class ApacheClient implements Client {
diff --git a/retrofit/src/main/java/retrofit/http/client/Client.java b/retrofit/src/main/java/retrofit/client/Client.java
similarity index 52%
rename from retrofit/src/main/java/retrofit/http/client/Client.java
rename to retrofit/src/main/java/retrofit/client/Client.java
index e601a3edd..5608b5352 100644
--- a/retrofit/src/main/java/retrofit/http/client/Client.java
+++ b/retrofit/src/main/java/retrofit/client/Client.java
@@ -1,4 +1,19 @@
-package retrofit.http.client;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
 
 import java.io.IOException;
 
diff --git a/retrofit/src/main/java/retrofit/client/Header.java b/retrofit/src/main/java/retrofit/client/Header.java
new file mode 100644
index 000000000..41daf5b22
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/client/Header.java
@@ -0,0 +1,57 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
+
+/** Represents an HTTP header name/value pair. */
+public final class Header {
+  private final String name;
+  private final String value;
+
+  public Header(String name, String value) {
+    this.name = name;
+    this.value = value;
+  }
+
+  public String getName() {
+    return name;
+  }
+
+  public String getValue() {
+    return value;
+  }
+
+  @Override public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+
+    Header header = (Header) o;
+
+    if (name != null ? !name.equals(header.name) : header.name != null) return false;
+    if (value != null ? !value.equals(header.value) : header.value != null) return false;
+
+    return true;
+  }
+
+  @Override public int hashCode() {
+    int result = name != null ? name.hashCode() : 0;
+    result = 31 * result + (value != null ? value.hashCode() : 0);
+    return result;
+  }
+
+  @Override public String toString() {
+    return (name != null ? name : "") + ": " + (value != null ? value : "");
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/client/OkClient.java b/retrofit/src/main/java/retrofit/client/OkClient.java
new file mode 100644
index 000000000..122fb55ed
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/client/OkClient.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
+
+import com.squareup.okhttp.OkHttpClient;
+import java.io.IOException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+/** Retrofit client that uses OkHttp for communication. */
+public class OkClient extends UrlConnectionClient {
+  private final OkHttpClient client;
+
+  public OkClient() {
+    this(new OkHttpClient());
+  }
+
+  public OkClient(OkHttpClient client) {
+    this.client = client;
+  }
+
+  @Override protected HttpURLConnection openConnection(Request request) throws IOException {
+    return client.open(new URL(request.getUrl()));
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/client/Request.java b/retrofit/src/main/java/retrofit/client/Request.java
similarity index 61%
rename from retrofit/src/main/java/retrofit/http/client/Request.java
rename to retrofit/src/main/java/retrofit/client/Request.java
index dc1dc02bb..8d2199def 100644
--- a/retrofit/src/main/java/retrofit/http/client/Request.java
+++ b/retrofit/src/main/java/retrofit/client/Request.java
@@ -1,10 +1,24 @@
-package retrofit.http.client;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import retrofit.http.Header;
-import retrofit.http.mime.TypedOutput;
+import retrofit.mime.TypedOutput;
 
 /** Encapsulates all of the information necessary to make an HTTP request. */
 public final class Request {
@@ -42,7 +56,7 @@ public String getUrl() {
     return url;
   }
 
-  /** Returns an unmodifiable list of headers.empty, never {@code null}. */
+  /** Returns an unmodifiable list of headers, never {@code null}. */
   public List<Header> getHeaders() {
     return headers;
   }
diff --git a/retrofit/src/main/java/retrofit/http/client/Response.java b/retrofit/src/main/java/retrofit/client/Response.java
similarity index 64%
rename from retrofit/src/main/java/retrofit/http/client/Response.java
rename to retrofit/src/main/java/retrofit/client/Response.java
index 9498a9b44..44c1406b9 100644
--- a/retrofit/src/main/java/retrofit/http/client/Response.java
+++ b/retrofit/src/main/java/retrofit/client/Response.java
@@ -1,11 +1,24 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.client;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
-import retrofit.http.Header;
-import retrofit.http.mime.TypedInput;
+import retrofit.mime.TypedInput;
 
 /** An HTTP response. */
 public final class Response {
diff --git a/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
similarity index 78%
rename from retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java
rename to retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
index 43f679b8f..fcca8c484 100644
--- a/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java
+++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
@@ -1,5 +1,19 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.client;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.client;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -8,10 +22,10 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
-import retrofit.http.Header;
-import retrofit.http.mime.TypedInput;
-import retrofit.http.mime.TypedOutput;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
 
+/** Retrofit client that uses {@link HttpURLConnection} for communication. */
 public class UrlConnectionClient implements Client {
   @Override public Response execute(Request request) throws IOException {
     HttpURLConnection connection = openConnection(request);
diff --git a/retrofit/src/main/java/retrofit/converter/ConversionException.java b/retrofit/src/main/java/retrofit/converter/ConversionException.java
new file mode 100644
index 000000000..6673efc0b
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/converter/ConversionException.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.converter;
+
+/** Indicate that conversion was unable to complete successfully. */
+@SuppressWarnings("UnusedDeclaration")
+public class ConversionException extends Exception {
+  public ConversionException(String message) {
+    super(message);
+  }
+
+  public ConversionException(String message, Throwable throwable) {
+    super(message, throwable);
+  }
+
+  public ConversionException(Throwable throwable) {
+    super(throwable);
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/converter/Converter.java b/retrofit/src/main/java/retrofit/converter/Converter.java
new file mode 100644
index 000000000..6ac5b6fa8
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/converter/Converter.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.converter;
+
+import java.lang.reflect.Type;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
+
+/**
+ * Arbiter for converting objects to and from their representation in HTTP.
+ *
+ * @author Jake Wharton (jw@squareup.com)
+ */
+public interface Converter {
+  /**
+   * Convert an HTTP response body to a concrete object of the specified type.
+   *
+   * @param body HTTP response body.
+   * @param type Target object type.
+   * @return Instance of {@code type} which will be cast by the caller.
+   * @throws ConversionException if conversion was unable to complete. This will trigger a call to
+   * {@link retrofit.Callback#failure(retrofit.RetrofitError)} or throw a
+   * {@link retrofit.RetrofitError}. The exception message should report all necessary information
+   * about its cause as the response body will be set to {@code null}.
+   */
+  Object fromBody(TypedInput body, Type type) throws ConversionException;
+
+  /**
+   * Convert and object to an appropriate representation for HTTP transport.
+   *
+   * @param object Object instance to convert.
+   * @return Representation of the specified object as bytes.
+   */
+  TypedOutput toBody(Object object);
+}
diff --git a/retrofit/src/main/java/retrofit/http/GsonConverter.java b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
similarity index 67%
rename from retrofit/src/main/java/retrofit/http/GsonConverter.java
rename to retrofit/src/main/java/retrofit/converter/GsonConverter.java
index fcec2b016..9e5df33cd 100644
--- a/retrofit/src/main/java/retrofit/http/GsonConverter.java
+++ b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
@@ -1,5 +1,19 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.converter;
 
 import com.google.gson.Gson;
 import com.google.gson.JsonParseException;
@@ -8,8 +22,9 @@
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Type;
-import retrofit.http.mime.TypedInput;
-import retrofit.http.mime.TypedOutput;
+import retrofit.mime.MimeUtil;
+import retrofit.mime.TypedInput;
+import retrofit.mime.TypedOutput;
 
 /**
  * A {@link Converter} which uses GSON for serialization and deserialization of entities.
@@ -24,7 +39,7 @@ public GsonConverter(Gson gson) {
   }
 
   @Override public Object fromBody(TypedInput body, Type type) throws ConversionException {
-    String charset = Utils.parseCharset(body.mimeType());
+    String charset = MimeUtil.parseCharset(body.mimeType());
     InputStreamReader isr = null;
     try {
       isr = new InputStreamReader(body.in(), charset);
@@ -51,7 +66,7 @@ public GsonConverter(Gson gson) {
     }
   }
 
-  static class JsonTypedOutput implements TypedOutput {
+  private static class JsonTypedOutput implements TypedOutput {
     private final byte[] jsonBytes;
 
     JsonTypedOutput(byte[] jsonBytes) {
diff --git a/retrofit/src/main/java/retrofit/http/SingleEntity.java b/retrofit/src/main/java/retrofit/http/Body.java
similarity index 53%
rename from retrofit/src/main/java/retrofit/http/SingleEntity.java
rename to retrofit/src/main/java/retrofit/http/Body.java
index ff0be889b..2b560989a 100644
--- a/retrofit/src/main/java/retrofit/http/SingleEntity.java
+++ b/retrofit/src/main/java/retrofit/http/Body.java
@@ -1,4 +1,18 @@
-// Copyright 2011 Square, Inc.
+/*
+ * Copyright (C) 2011 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
@@ -16,7 +30,6 @@
  *
  * @author Eric Denman (edenman@squareup.com)
  */
-@Retention(RUNTIME)
-@Target(PARAMETER)
-public @interface SingleEntity {
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Body {
 }
diff --git a/retrofit/src/main/java/retrofit/http/Callback.java b/retrofit/src/main/java/retrofit/http/Callback.java
deleted file mode 100644
index 28a556f22..000000000
--- a/retrofit/src/main/java/retrofit/http/Callback.java
+++ /dev/null
@@ -1,23 +0,0 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
-
-import retrofit.http.client.Response;
-
-/**
- * Communicates responses to server or offline requests. Contains a callback method for each
- * possible outcome. One and only one method will be invoked in response to a given request.
- *
- * @param <T> expected response type
- * @author Bob Lee (bob@squareup.com)
- */
-public interface Callback<T> {
-
-  /** Successful HTTP response. */
-  void success(T t, Response response);
-
-  /**
-   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected
-   * exception.
-   */
-  void failure(RetrofitError error);
-}
diff --git a/retrofit/src/main/java/retrofit/http/ConversionException.java b/retrofit/src/main/java/retrofit/http/ConversionException.java
deleted file mode 100644
index bb0eff949..000000000
--- a/retrofit/src/main/java/retrofit/http/ConversionException.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package retrofit.http;
-
-/** Indicate that conversion was unable to complete successfully. */
-@SuppressWarnings("UnusedDeclaration")
-public class ConversionException extends Exception {
-  public ConversionException(String message) {
-    super(message);
-  }
-
-  public ConversionException(String message, Throwable throwable) {
-    super(message, throwable);
-  }
-
-  public ConversionException(Throwable throwable) {
-    super(throwable);
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/Converter.java b/retrofit/src/main/java/retrofit/http/Converter.java
deleted file mode 100644
index 0a829525a..000000000
--- a/retrofit/src/main/java/retrofit/http/Converter.java
+++ /dev/null
@@ -1,34 +0,0 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
-
-import java.lang.reflect.Type;
-import retrofit.http.mime.TypedInput;
-import retrofit.http.mime.TypedOutput;
-
-/**
- * Arbiter for converting objects to and from their representation in HTTP.
- *
- * @author Jake Wharton (jw@squareup.com)
- */
-public interface Converter {
-  /**
-   * Convert an HTTP response body to a concrete object of the specified type.
-   *
-   * @param body HTTP response body.
-   * @param type Target object type.
-   * @return Instance of {@code type} which will be cast by the caller.
-   * @throws ConversionException if conversion was unable to complete. This will trigger a call to
-   * {@link Callback#failure(RetrofitError)} or throw a {@link retrofit.http.RetrofitError}. The
-   * exception message should report all necessary information about its cause as the response body
-   * will be set to {@code null}.
-   */
-  Object fromBody(TypedInput body, Type type) throws ConversionException;
-
-  /**
-   * Convert and object to an appropriate representation for HTTP transport.
-   *
-   * @param object Object instance to convert.
-   * @return Representation of the specified object as bytes.
-   */
-  TypedOutput toBody(Object object);
-}
diff --git a/retrofit/src/main/java/retrofit/http/DELETE.java b/retrofit/src/main/java/retrofit/http/DELETE.java
index ca0314bcf..02273e6d0 100644
--- a/retrofit/src/main/java/retrofit/http/DELETE.java
+++ b/retrofit/src/main/java/retrofit/http/DELETE.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Field.java b/retrofit/src/main/java/retrofit/http/Field.java
new file mode 100644
index 000000000..4e9bdb126
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Field.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Named pair for a form-encoded request.
+ *
+ * <pre>
+ * &#64;FormUrlEncoded
+ * &#64;POST("/")
+ * void example(@Field("name") String name, @Field("occupation") String occupation, ..);
+ * }
+ * </pre>
+ */
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Field {
+  String value();
+}
diff --git a/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java b/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java
new file mode 100644
index 000000000..83943dca7
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/FormUrlEncoded.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Denotes that the request body will use form URL encoding. Fields should be declared as
+ * parameters and annotated with {@link Field @Field}.
+ * <p>
+ * Requests made with this annotation will have {@code application/x-www-form-urlencoded} MIME
+ * type. Field names and values will be UTF-8 encoded before being URI-encoded in accordance to
+ * <a href="http://tools.ietf.org/html/rfc3986">RFC-3986</a>.
+ */
+@Target(METHOD) @Retention(RUNTIME)
+public @interface FormUrlEncoded {
+}
diff --git a/retrofit/src/main/java/retrofit/http/GET.java b/retrofit/src/main/java/retrofit/http/GET.java
index 6cb78064e..5cd11b5f2 100644
--- a/retrofit/src/main/java/retrofit/http/GET.java
+++ b/retrofit/src/main/java/retrofit/http/GET.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/HEAD.java b/retrofit/src/main/java/retrofit/http/HEAD.java
index 103477016..14db77338 100644
--- a/retrofit/src/main/java/retrofit/http/HEAD.java
+++ b/retrofit/src/main/java/retrofit/http/HEAD.java
@@ -1,4 +1,18 @@
-// Copyright 2013 Square, Inc.
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Header.java b/retrofit/src/main/java/retrofit/http/Header.java
index 6d8ca9d02..05979fd5f 100644
--- a/retrofit/src/main/java/retrofit/http/Header.java
+++ b/retrofit/src/main/java/retrofit/http/Header.java
@@ -1,43 +1,41 @@
-// Copyright 2012 Square, Inc.
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
-/** Represents an HTTP header name/value pair. */
-public final class Header {
-  private final String name;
-  private final String value;
-
-  public Header(String name, String value) {
-    this.name = name;
-    this.value = value;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public String getValue() {
-    return value;
-  }
-
-  @Override public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-
-    Header header = (Header) o;
-
-    if (name != null ? !name.equals(header.name) : header.name != null) return false;
-    if (value != null ? !value.equals(header.value) : header.value != null) return false;
-
-    return true;
-  }
-
-  @Override public int hashCode() {
-    int result = name != null ? name.hashCode() : 0;
-    result = 31 * result + (value != null ? value.hashCode() : 0);
-    return result;
-  }
-
-  @Override public String toString() {
-    return (name != null ? name : "") + ": " + (value != null ? value : "");
-  }
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Replaces the header with the the value of its target. If the target is null,
+ * the header is removed.
+ * <p>
+ * <pre>
+ * &#64;GET("/")
+ * void foo(@Header("Accept-Language") String lang, Callback&lt;Response> cb);
+ * </pre>
+ * <p>
+ * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
+ * be included in the request.
+ *
+ * @author Adrian Cole (adrianc@netflix.com)
+ */
+@Retention(RUNTIME) @Target(PARAMETER)
+public @interface Header {
+  String value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/Headers.java b/retrofit/src/main/java/retrofit/http/Headers.java
index 2220d588c..580834c6f 100644
--- a/retrofit/src/main/java/retrofit/http/Headers.java
+++ b/retrofit/src/main/java/retrofit/http/Headers.java
@@ -1,21 +1,48 @@
-// Copyright 2013 Square, Inc.
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
-import java.util.Collections;
-import java.util.List;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
 
-/** Manages headers for each request. */
-public interface Headers {
-  /**
-   * Get a list of headers for a request. This method will be called once for each request allowing
-   * you to change the list as the state of your application changes.
-   */
-  List<Header> get();
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
-  /** Empty header list. */
-  Headers NONE = new Headers() {
-    @Override public List<Header> get() {
-      return Collections.emptyList();
-    }
-  };
+/**
+ * Adds headers literally supplied in the {@code value}.
+ * <p>
+ * <pre>
+ * &#64;Headers("Cache-Control: max-age=640000")
+ * &#64;GET("/")
+ * ...
+ *
+ * &#64;Headers({
+ *   "X-Foo: Bar",
+ *   "X-Ping: Pong"
+ * })
+ * &#64;GET("/")
+ * ...
+ * </pre>
+ * <p>
+ * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
+ * be included in the request.
+ *
+ * @author Adrian Cole (adrianc@netflix.com)
+ */
+@Target(METHOD) @Retention(RUNTIME)
+public @interface Headers {
+  String[] value();
 }
diff --git a/retrofit/src/main/java/retrofit/http/Multipart.java b/retrofit/src/main/java/retrofit/http/Multipart.java
index 513f6554f..8e0f2aeeb 100644
--- a/retrofit/src/main/java/retrofit/http/Multipart.java
+++ b/retrofit/src/main/java/retrofit/http/Multipart.java
@@ -1,4 +1,18 @@
-// Copyright 2013 Square, Inc.
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
@@ -7,6 +21,10 @@
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
+/**
+ * Denotes that the request body is multi-part. Parts should be declared as parameters and
+ * annotated with {@link Part @Part}.
+ */
 @Target(METHOD) @Retention(RUNTIME)
 public @interface Multipart {
 }
diff --git a/retrofit/src/main/java/retrofit/http/Name.java b/retrofit/src/main/java/retrofit/http/Name.java
deleted file mode 100644
index b872502cd..000000000
--- a/retrofit/src/main/java/retrofit/http/Name.java
+++ /dev/null
@@ -1,13 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.PARAMETER;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-@Retention(RUNTIME) @Target(PARAMETER)
-public @interface Name {
-  String value();
-}
diff --git a/retrofit/src/main/java/retrofit/http/POST.java b/retrofit/src/main/java/retrofit/http/POST.java
index 3fc31d5ee..37b971c54 100644
--- a/retrofit/src/main/java/retrofit/http/POST.java
+++ b/retrofit/src/main/java/retrofit/http/POST.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/PUT.java b/retrofit/src/main/java/retrofit/http/PUT.java
index f0e59b264..982df96d5 100644
--- a/retrofit/src/main/java/retrofit/http/PUT.java
+++ b/retrofit/src/main/java/retrofit/http/PUT.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/Parameter.java b/retrofit/src/main/java/retrofit/http/Parameter.java
deleted file mode 100644
index 7812e7591..000000000
--- a/retrofit/src/main/java/retrofit/http/Parameter.java
+++ /dev/null
@@ -1,65 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http;
-
-import java.lang.reflect.Type;
-
-/**
- * Represents a named parameter and its value.
- * <p>
- * This is used in one of three places in a request:
- * <ul>
- * <li>Named replacement in the relative URL path.
- * <li>As a URL query parameter.
- * <li>As a POST/PUT body.
- * </ul>
- */
-public final class Parameter {
-  private final String name;
-  private final Type type;
-  private final Object value;
-
-  public Parameter(String name, Object value, Type valueType) {
-    if (name == null) {
-      throw new NullPointerException("name == null");
-    }
-
-    this.name = name;
-    this.type = valueType;
-    this.value = value;
-  }
-
-  public String getName() {
-    return name;
-  }
-
-  public Object getValue() {
-    return value;
-  }
-
-  /** The instance type of {@link #getValue()}. */
-  public Type getValueType() {
-    return type;
-  }
-
-  @Override public String toString() {
-    return name + "=" + value;
-  }
-
-  @Override public boolean equals(Object o) {
-    if (this == o) return true;
-    if (o == null || getClass() != o.getClass()) return false;
-
-    Parameter parameter = (Parameter) o;
-
-    if (!name.equals(parameter.name)) return false;
-    if (value != null ? !value.equals(parameter.value) : parameter.value != null) return false;
-
-    return true;
-  }
-
-  @Override public int hashCode() {
-    int result = name.hashCode();
-    result = 31 * result + (value != null ? value.hashCode() : 0);
-    return result;
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/Part.java b/retrofit/src/main/java/retrofit/http/Part.java
new file mode 100644
index 000000000..be78a14ee
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Part.java
@@ -0,0 +1,47 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Denotes a single part of a mutli-part request.
+ * <p>
+ * The parameter type on which this annotation exists will be processed in one of two ways:
+ * <ul>
+ * <li>If the type implements {@link retrofit.mime.TypedOutput TypedOutput} the headers and
+ * body will be used directly.</li>
+ * <li>Other object types will be converted to an appropriate representation by calling {@link
+ * retrofit.converter.Converter#toBody(Object)}.</li>
+ * </ul>
+ * <p>
+ * <pre>
+ * &#64;Multipart
+ * &#64;POST("/")
+ * void example(&#64;Part("description") TypedString description,
+ *              &#64;Part("image") TypedFile image,
+ *              ...
+ * );
+ * </pre>
+ */
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Part {
+  String value();
+}
diff --git a/retrofit/src/main/java/retrofit/http/Path.java b/retrofit/src/main/java/retrofit/http/Path.java
new file mode 100644
index 000000000..479279e88
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Path.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Named replacement in the URL path. Values are converted to string using
+ * {@link String#valueOf(Object)}.
+ * <p>
+ * <pre>
+ * &#64;GET("/image/{id}")
+ * void example(@Path("id") int id, ..);
+ * </pre>
+ */
+@Retention(RUNTIME) @Target(PARAMETER)
+public @interface Path {
+  String value();
+}
diff --git a/retrofit/src/main/java/retrofit/http/Query.java b/retrofit/src/main/java/retrofit/http/Query.java
new file mode 100644
index 000000000..3ae1a3918
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Query.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Query parameter appended to the URL. Values are converted to strings using
+ * {@link String#valueOf(Object)}.
+ * <p>
+ * <pre>
+ * &#64;GET("/list")
+ * void example(@Query("page") int page, ..);
+ * </pre>
+ */
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Query {
+  String value();
+}
diff --git a/retrofit/src/main/java/retrofit/http/QueryParam.java b/retrofit/src/main/java/retrofit/http/QueryParam.java
deleted file mode 100644
index fced456ae..000000000
--- a/retrofit/src/main/java/retrofit/http/QueryParam.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package retrofit.http;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-/**
- * Specifies a query parameter.
- *
- * @author Patrick Forhan (patrick@squareup.com)
- */
-@Target(METHOD) @Retention(RUNTIME)
-public @interface QueryParam {
-  String name();
-  String value();
-}
diff --git a/retrofit/src/main/java/retrofit/http/QueryParams.java b/retrofit/src/main/java/retrofit/http/QueryParams.java
deleted file mode 100644
index b0467c214..000000000
--- a/retrofit/src/main/java/retrofit/http/QueryParams.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package retrofit.http;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-
-/**
- * Specifies a query parameter.
- *
- * @author Patrick Forhan (patrick@squareup.com)
- */
-@Target(METHOD) @Retention(RUNTIME)
-public @interface QueryParams {
-  QueryParam[] value();
-}
diff --git a/retrofit/src/main/java/retrofit/http/RequestBuilder.java b/retrofit/src/main/java/retrofit/http/RequestBuilder.java
deleted file mode 100644
index a7b849569..000000000
--- a/retrofit/src/main/java/retrofit/http/RequestBuilder.java
+++ /dev/null
@@ -1,163 +0,0 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http;
-
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.LinkedHashSet;
-import java.util.List;
-import java.util.Set;
-import retrofit.http.client.Request;
-import retrofit.http.mime.TypedOutput;
-import retrofit.http.mime.TypedString;
-
-import static retrofit.http.RestMethodInfo.NO_SINGLE_ENTITY;
-
-/**
- * Builds HTTP requests from Java method invocations.  Handles "path parameters" in the
- * {@code apiUrl} in the form of "path/to/url/{id}/action" where a parameter annotated with
- * {@code @Name("id")} is inserted into the url.  Note that this replacement can be recursive if:
- * <ol>
- * <li>Multiple sets of brackets are nested ("path/to/{{key}a}.</li>
- * <li>The order of {@link Name @Name} values go from innermost to outermost.</li>
- * <li>The values replaced correspond to {@link Name @Name} parameters.</li>
- * </ol>
- */
-final class RequestBuilder {
-  private final Converter converter;
-
-  private RestMethodInfo methodInfo;
-  private Object[] args;
-  private String apiUrl;
-  private List<Header> headers;
-
-  RequestBuilder(Converter converter) {
-    this.converter = converter;
-  }
-
-  RequestBuilder setMethodInfo(RestMethodInfo methodDetails) {
-    this.methodInfo = methodDetails;
-    return this;
-  }
-
-  RequestBuilder setApiUrl(String apiUrl) {
-    this.apiUrl = apiUrl;
-    return this;
-  }
-
-  RequestBuilder setArgs(Object[] args) {
-    this.args = args;
-    return this;
-  }
-
-  RequestBuilder setHeaders(List<Header> headers) {
-    this.headers = headers;
-    return this;
-  }
-
-  /** List of all URL parameters. Return value will be mutated. */
-  private List<Parameter> createParamList() {
-    List<Parameter> params = new ArrayList<Parameter>();
-
-    // Add arguments as parameters.
-    String[] pathNamedParams = methodInfo.namedParams;
-    int singleEntityArgumentIndex = methodInfo.singleEntityArgumentIndex;
-    for (int i = 0; i < pathNamedParams.length; i++) {
-      Object arg = args[i];
-      if (arg == null) continue;
-      if (i != singleEntityArgumentIndex) {
-        params.add(new Parameter(pathNamedParams[i], arg, arg.getClass()));
-      }
-    }
-
-    return params;
-  }
-
-  Request build() {
-    // Alter parameter list if path parameters are present.
-    Set<String> pathParams = new LinkedHashSet<String>(methodInfo.pathParams);
-    List<Parameter> paramList = createParamList();
-    String replacedPath = methodInfo.path;
-    for (String pathParam : pathParams) {
-      Parameter found = null;
-      for (Parameter param : paramList) {
-        if (param.getName().equals(pathParam)) {
-          found = param;
-          break;
-        }
-      }
-      if (found != null) {
-        String value = getUrlEncodedValue(found);
-        replacedPath = replacedPath.replace("{" + found.getName() + "}", value);
-        paramList.remove(found);
-      } else {
-        throw new IllegalArgumentException(
-            "URL param " + pathParam + " has no matching method @Name param.");
-      }
-    }
-
-    if (methodInfo.singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
-      // We're passing a JSON object as the entity: paramList should only contain path param values.
-      if (!paramList.isEmpty()) {
-        throw new IllegalStateException(
-            "Found @Name param on single-entity request that was not used for path substitution.");
-      }
-    }
-
-    StringBuilder url = new StringBuilder(apiUrl);
-    if (apiUrl.endsWith("/")) {
-      // We enforce relative paths to start with '/'. Prevent a double-slash.
-      url.deleteCharAt(url.length() - 1);
-    }
-    url.append(replacedPath);
-
-    // Add query parameter(s), if specified.
-    for (QueryParam annotation : methodInfo.pathQueryParams) {
-      paramList.add(new Parameter(annotation.name(), annotation.value(), String.class));
-    }
-
-    TypedOutput body = null;
-    if (!methodInfo.restMethod.hasBody()) {
-      for (int i = 0, count = paramList.size(); i < count; i++) {
-        url.append((i == 0) ? '?' : '&');
-        Parameter nonPathParam = paramList.get(i);
-        String value = getUrlEncodedValue(nonPathParam);
-        url.append(nonPathParam.getName()).append("=").append(value);
-      }
-    } else if (!paramList.isEmpty()) {
-      if (methodInfo.isMultipart) {
-        MultipartTypedOutput multipartBody = new MultipartTypedOutput();
-        for (Parameter parameter : paramList) {
-          Object value = parameter.getValue();
-          TypedOutput typedOutput;
-          if (value instanceof TypedOutput) {
-            typedOutput = (TypedOutput) value;
-          } else {
-            typedOutput = new TypedString(value.toString());
-          }
-          multipartBody.addPart(parameter.getName(), typedOutput);
-        }
-        body = multipartBody;
-      } else {
-        body = converter.toBody(paramList);
-      }
-    } else if (methodInfo.singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
-      Object singleEntity = args[methodInfo.singleEntityArgumentIndex];
-      if (singleEntity instanceof TypedOutput) {
-        body = (TypedOutput) singleEntity;
-      } else {
-        body = converter.toBody(singleEntity);
-      }
-    }
-
-    return new Request(methodInfo.restMethod.value(), url.toString(), headers, body);
-  }
-
-  private static String getUrlEncodedValue(Parameter found) {
-    try {
-      return URLEncoder.encode(String.valueOf(found.getValue()), "UTF-8");
-    } catch (UnsupportedEncodingException e) {
-      throw new AssertionError(e);
-    }
-  }
-}
\ No newline at end of file
diff --git a/retrofit/src/main/java/retrofit/http/ResponseWrapper.java b/retrofit/src/main/java/retrofit/http/ResponseWrapper.java
deleted file mode 100644
index 4be0b7822..000000000
--- a/retrofit/src/main/java/retrofit/http/ResponseWrapper.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package retrofit.http;
-
-import retrofit.http.client.Response;
-
-/**
- * A wrapper that holds the {@link Response} and {@link Converter} response to be used by the
- * {@link CallbackRunnable} for success method calls on {@link Callback}.
- *
- * @author JJ Ford (jj.n.ford@gmail.com)
- */
-final class ResponseWrapper {
-
-  final Response response;
-  final Object responseBody;
-
-  public ResponseWrapper(Response response, Object responseBody) {
-    this.response = response;
-    this.responseBody = responseBody;
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/RestMethod.java b/retrofit/src/main/java/retrofit/http/RestMethod.java
index bdc9bed8c..363d7604c 100644
--- a/retrofit/src/main/java/retrofit/http/RestMethod.java
+++ b/retrofit/src/main/java/retrofit/http/RestMethod.java
@@ -1,4 +1,18 @@
-// Copyright 2013 Square, Inc.
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package retrofit.http;
 
 import java.lang.annotation.Retention;
diff --git a/retrofit/src/main/java/retrofit/http/RestMethodInfo.java b/retrofit/src/main/java/retrofit/http/RestMethodInfo.java
deleted file mode 100644
index e7ac42b56..000000000
--- a/retrofit/src/main/java/retrofit/http/RestMethodInfo.java
+++ /dev/null
@@ -1,245 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http;
-
-import java.lang.annotation.Annotation;
-import java.lang.reflect.Method;
-import java.lang.reflect.ParameterizedType;
-import java.lang.reflect.Type;
-import java.lang.reflect.WildcardType;
-import java.util.LinkedHashSet;
-import java.util.Set;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-import retrofit.http.mime.TypedOutput;
-
-/** Cached details about an interface method. */
-final class RestMethodInfo {
-  static final int NO_SINGLE_ENTITY = -1;
-  private static final Pattern PATH_PARAMETERS = Pattern.compile("\\{([a-z_-]+)\\}");
-
-  final Method method;
-  final boolean isSynchronous;
-
-  boolean loaded = false;
-
-  Type type;
-  RestMethod restMethod;
-  String path;
-  Set<String> pathParams;
-  QueryParam[] pathQueryParams;
-  String[] namedParams;
-  int singleEntityArgumentIndex = NO_SINGLE_ENTITY;
-  boolean isMultipart = false;
-
-  RestMethodInfo(Method method) {
-    this.method = method;
-    isSynchronous = parseResponseType();
-  }
-
-  synchronized void init() {
-    if (loaded) return;
-
-    parseMethodAnnotations();
-    parseParameters();
-
-    loaded = true;
-  }
-
-  /**
-   * Loads {@link #restMethod}, {@link #path}, {@link #pathParams}, {@link #pathQueryParams}, and
-   * {@link #isMultipart}.
-   */
-  private void parseMethodAnnotations() {
-    for (Annotation methodAnnotation : method.getAnnotations()) {
-      Class<? extends Annotation> annotationType = methodAnnotation.annotationType();
-      RestMethod methodInfo = null;
-      for (Annotation innerAnnotation : annotationType.getAnnotations()) {
-        if (RestMethod.class == innerAnnotation.annotationType()) {
-          methodInfo = (RestMethod) innerAnnotation;
-          break;
-        }
-      }
-      if (methodInfo != null) {
-        if (restMethod != null) {
-          throw new IllegalArgumentException("Method contains multiple HTTP annotations.");
-        }
-        try {
-          path = (String) annotationType.getMethod("value").invoke(methodAnnotation);
-        } catch (Exception e) {
-          throw new RuntimeException("Failed to extract URI path.", e);
-        }
-        if (!path.startsWith("/")) {
-          throw new IllegalArgumentException("URL path must be prefixed with '/'.");
-        }
-        pathParams = parsePathParameters(path);
-        restMethod = methodInfo;
-      } else if (annotationType == QueryParams.class) {
-        if (pathQueryParams != null) {
-          throw new IllegalStateException(
-              "QueryParam and QueryParams annotations are mutually exclusive.");
-        }
-        pathQueryParams = ((QueryParams) methodAnnotation).value();
-        if (pathQueryParams.length == 0) {
-          throw new IllegalStateException("QueryParams annotation was empty.");
-        }
-      } else if (annotationType == QueryParam.class) {
-        if (pathQueryParams != null) {
-          throw new IllegalStateException(
-              "QueryParam and QueryParams annotations are mutually exclusive.");
-        }
-        pathQueryParams = new QueryParam[] { (QueryParam) methodAnnotation };
-      } else if (annotationType == Multipart.class) {
-        isMultipart = true;
-      }
-    }
-
-    if (restMethod == null) {
-      throw new IllegalStateException(
-          "Method " + method + " not annotated with request type (e.g., GET, POST).");
-    }
-    if (!restMethod.hasBody() && isMultipart) {
-      throw new IllegalStateException(
-          "Multipart can only be specific on HTTP methods with request body (e.g., POST).");
-    }
-    if (pathQueryParams == null) {
-      pathQueryParams = new QueryParam[0];
-    } else {
-      for (QueryParam pathQueryParam : pathQueryParams) {
-        if (pathParams.contains(pathQueryParam.name())) {
-          throw new IllegalStateException("Query parameters cannot be present in URL.");
-        }
-      }
-    }
-  }
-
-  /** Loads {@link #type}. Returns true if the method is synchronous. */
-  private boolean parseResponseType() {
-    // Synchronous methods have a non-void return type.
-    Type returnType = method.getGenericReturnType();
-
-    // Asynchronous methods should have a Callback type as the last argument.
-    Type lastArgType = null;
-    Class<?> lastArgClass = null;
-    Type[] parameterTypes = method.getGenericParameterTypes();
-    if (parameterTypes.length > 0) {
-      Type typeToCheck = parameterTypes[parameterTypes.length - 1];
-      lastArgType = typeToCheck;
-      if (typeToCheck instanceof ParameterizedType) {
-        typeToCheck = ((ParameterizedType) typeToCheck).getRawType();
-      }
-      if (typeToCheck instanceof Class) {
-        lastArgClass = (Class<?>) typeToCheck;
-      }
-    }
-
-    boolean hasReturnType = returnType != void.class;
-    boolean hasCallback = lastArgClass != null && Callback.class.isAssignableFrom(lastArgClass);
-
-    // Check for invalid configurations.
-    if (hasReturnType && hasCallback) {
-      throw new IllegalArgumentException(
-          "Method may only have return type or Callback as last argument, not both.");
-    }
-    if (!hasReturnType && !hasCallback) {
-      throw new IllegalArgumentException(
-          "Method must have either a return type or Callback as last argument.");
-    }
-
-    if (hasReturnType) {
-      type = returnType;
-      return true;
-    }
-
-    lastArgType = Types.getSupertype(lastArgType, Types.getRawType(lastArgType), Callback.class);
-    if (lastArgType instanceof ParameterizedType) {
-      Type[] types = ((ParameterizedType) lastArgType).getActualTypeArguments();
-      for (int i = 0; i < types.length; i++) {
-        Type type = types[i];
-        if (type instanceof WildcardType) {
-          types[i] = ((WildcardType) type).getUpperBounds()[0];
-        }
-      }
-      type = types[0];
-      return false;
-    }
-    throw new IllegalArgumentException(
-        String.format("Last parameter of %s must be of type Callback<X> or Callback<? super X>.",
-            method));
-  }
-
-  /**
-   * Loads {@link #namedParams}, {@link #singleEntityArgumentIndex}. Must be called after
-   * {@link #parseMethodAnnotations()}}.
-   */
-  private void parseParameters() {
-    Class<?>[] parameterTypes = method.getParameterTypes();
-    Annotation[][] parameterAnnotationArrays = method.getParameterAnnotations();
-    int count = parameterAnnotationArrays.length;
-    if (!isSynchronous) {
-      count -= 1; // Callback is last argument when not a synchronous method.
-    }
-
-    String[] namedParams = new String[count];
-    for (int i = 0; i < count; i++) {
-      Class<?> parameterType = parameterTypes[i];
-      Annotation[] parameterAnnotations = parameterAnnotationArrays[i];
-      if (parameterAnnotations == null || parameterAnnotations.length == 0) {
-        throw new IllegalStateException("Argument " + i + " lacks annotation.");
-      }
-      for (Annotation parameterAnnotation : parameterAnnotations) {
-        Class<? extends Annotation> annotationType = parameterAnnotation.annotationType();
-        if (annotationType == Name.class) {
-          String name = ((Name) parameterAnnotation).value();
-          namedParams[i] = name;
-          boolean isPathParam = pathParams.contains(name);
-          if (parameterType == TypedOutput.class && (isPathParam || !restMethod.hasBody())) {
-            throw new IllegalStateException("TypedOutput cannot be used as URL parameter.");
-          }
-          if (!isPathParam && !isMultipart && restMethod.hasBody()) {
-            throw new IllegalStateException(
-                "Non-path params can only be used in multipart request.");
-          }
-        } else if (annotationType == SingleEntity.class) {
-          if (isMultipart) {
-            throw new IllegalStateException("SingleEntity cannot be used with multipart request.");
-          }
-          if (singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
-            throw new IllegalStateException(
-                "Method annotated with multiple SingleEntity method annotations: " + method);
-          }
-          singleEntityArgumentIndex = i;
-        } else {
-          throw new IllegalStateException(
-              "Argument " + i + " has invalid annotation " + annotationType + ": " + method);
-        }
-      }
-    }
-    // Check for single entity + non-path parameters.
-    if (singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
-      for (String namedParam : namedParams) {
-        if (namedParam != null && !pathParams.contains(namedParam)) {
-          throw new IllegalStateException(
-              "Single entity and non-path parameters cannot both be present.");
-        }
-      }
-    }
-    if (!restMethod.hasBody() && (isMultipart || singleEntityArgumentIndex != NO_SINGLE_ENTITY)) {
-      throw new IllegalStateException(
-          "Non-body HTTP method cannot contain @SingleEntity or @TypedOutput.");
-    }
-    this.namedParams = namedParams;
-  }
-
-  /**
-   * Gets the set of unique path parameters used in the given URI. If a parameter is used twice
-   * in the URI, it will only show up once in the set.
-   */
-  static Set<String> parsePathParameters(String path) {
-    Matcher m = PATH_PARAMETERS.matcher(path);
-    Set<String> patterns = new LinkedHashSet<String>();
-    while (m.find()) {
-      patterns.add(m.group(1));
-    }
-    return patterns;
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/android/AndroidApacheClient.java b/retrofit/src/main/java/retrofit/http/android/AndroidApacheClient.java
deleted file mode 100644
index d19e4710a..000000000
--- a/retrofit/src/main/java/retrofit/http/android/AndroidApacheClient.java
+++ /dev/null
@@ -1,18 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.android;
-
-import android.net.http.AndroidHttpClient;
-import retrofit.http.client.ApacheClient;
-
-/**
- * Provides a {@link retrofit.http.client.Client} which uses the Android-specific version of
- * {@link org.apache.http.client.HttpClient}, {@link AndroidHttpClient}.
- * <p>
- * If you need to provide a customized version of the {@link AndroidHttpClient} or a different
- * {@link org.apache.http.client.HttpClient} on Android use {@link ApacheClient} directly.
- */
-public final class AndroidApacheClient extends ApacheClient {
-  public AndroidApacheClient() {
-    super(AndroidHttpClient.newInstance("Retrofit"));
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/android/MainThreadExecutor.java b/retrofit/src/main/java/retrofit/http/android/MainThreadExecutor.java
deleted file mode 100644
index 85bc92c53..000000000
--- a/retrofit/src/main/java/retrofit/http/android/MainThreadExecutor.java
+++ /dev/null
@@ -1,16 +0,0 @@
-// Copyright 2012 Square, Inc.
-package retrofit.http.android;
-
-import android.os.Handler;
-import android.os.Looper;
-
-import java.util.concurrent.Executor;
-
-/** Executor that runs tasks on Android's main thread. */
-public final class MainThreadExecutor implements Executor {
-  private final Handler handler = new Handler(Looper.getMainLooper());
-
-  @Override public void execute(Runnable r) {
-    handler.post(r);
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/http/mime/TypedInput.java b/retrofit/src/main/java/retrofit/http/mime/TypedInput.java
deleted file mode 100644
index 3fbb22535..000000000
--- a/retrofit/src/main/java/retrofit/http/mime/TypedInput.java
+++ /dev/null
@@ -1,25 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.mime;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-/**
- * Binary data with an associated mime type.
- *
- * @author Jake Wharton (jw@squareup.com)
- */
-public interface TypedInput {
-
-  /** Returns the mime type. */
-  String mimeType();
-
-  /** Length in bytes. Returns {@code -1} if length is unknown. */
-  long length();
-
-  /**
-   * Read bytes as stream. Unless otherwise specified, this method may only be called once. It is
-   * the responsibility of the caller to close the stream.
-   */
-  InputStream in() throws IOException;
-}
diff --git a/retrofit/src/main/java/retrofit/http/mime/TypedOutput.java b/retrofit/src/main/java/retrofit/http/mime/TypedOutput.java
deleted file mode 100644
index 3ad49c974..000000000
--- a/retrofit/src/main/java/retrofit/http/mime/TypedOutput.java
+++ /dev/null
@@ -1,26 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.mime;
-
-import java.io.IOException;
-import java.io.OutputStream;
-
-/**
- * Binary data with an associated mime type.
- *
- * @author Bob Lee (bob@squareup.com)
- */
-public interface TypedOutput {
-  /** Original filename.
-   *
-   * Used only for multipart requests, may be null. */
-  String fileName();
-
-  /** Returns the mime type. */
-  String mimeType();
-
-  /** Length in bytes. */
-  long length();
-
-  /** Writes these bytes to the given output stream. */
-  void writeTo(OutputStream out) throws IOException;
-}
diff --git a/retrofit/src/main/java/retrofit/http/mime/TypedString.java b/retrofit/src/main/java/retrofit/http/mime/TypedString.java
deleted file mode 100644
index ab8792e76..000000000
--- a/retrofit/src/main/java/retrofit/http/mime/TypedString.java
+++ /dev/null
@@ -1,18 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http.mime;
-
-import java.io.UnsupportedEncodingException;
-
-public class TypedString extends TypedByteArray {
-  public TypedString(String string) {
-    super("text/plain; charset=UTF-8", convertToBytes(string));
-  }
-
-  private static byte[] convertToBytes(String string) {
-    try {
-      return string.getBytes("UTF-8");
-    } catch (UnsupportedEncodingException e) {
-      throw new RuntimeException(e);
-    }
-  }
-}
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
new file mode 100644
index 000000000..d807195a2
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.net.URLEncoder;
+
+public final class FormUrlEncodedTypedOutput implements TypedOutput {
+  final ByteArrayOutputStream content = new ByteArrayOutputStream();
+
+  public void addField(String name, String value) {
+    if (name == null) {
+      throw new NullPointerException("name");
+    }
+    if (value == null) {
+      throw new NullPointerException("value");
+    }
+    if (content.size() > 0) {
+      content.write('&');
+    }
+    try {
+      name = URLEncoder.encode(name, "UTF-8");
+      value = URLEncoder.encode(value, "UTF-8");
+
+      content.write(name.getBytes("UTF-8"));
+      content.write('=');
+      content.write(value.getBytes("UTF-8"));
+    } catch (IOException e) {
+      throw new RuntimeException(e);
+    }
+  }
+
+  @Override public String fileName() {
+    return null;
+  }
+
+  @Override public String mimeType() {
+    return "application/x-www-form-urlencoded; charset=UTF-8";
+  }
+
+  @Override public long length() {
+    return content.size();
+  }
+
+  @Override public void writeTo(OutputStream out) throws IOException {
+    out.write(content.toByteArray());
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/mime/MimeUtil.java b/retrofit/src/main/java/retrofit/mime/MimeUtil.java
new file mode 100644
index 000000000..7307703d5
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/mime/MimeUtil.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import static java.util.regex.Pattern.CASE_INSENSITIVE;
+
+public final class MimeUtil {
+  private static final Pattern CHARSET = Pattern.compile("\\Wcharset=([^\\s;]+)", CASE_INSENSITIVE);
+
+  /** Parse the MIME type from a {@code Content-Type} header value. */
+  public static String parseCharset(String mimeType) {
+    Matcher match = CHARSET.matcher(mimeType);
+    if (match.find()) {
+      return match.group(1).replaceAll("[\"\\\\]", "");
+    }
+    return "UTF-8";
+  }
+
+  private MimeUtil() {
+    // No instances.
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
similarity index 73%
rename from retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java
rename to retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
index e1a32e508..62fd0abd8 100644
--- a/retrofit/src/main/java/retrofit/http/MultipartTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/MultipartTypedOutput.java
@@ -1,5 +1,19 @@
-// Copyright 2013 Square, Inc.
-package retrofit.http;
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -7,21 +21,24 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
-import retrofit.http.mime.TypedOutput;
 
-final class MultipartTypedOutput implements TypedOutput {
+public final class MultipartTypedOutput implements TypedOutput {
   final List<byte[]> parts = new ArrayList<byte[]>();
   private final byte[] footer;
   private final String boundary;
   private long length;
 
-  MultipartTypedOutput() {
-    boundary = UUID.randomUUID().toString();
+  public MultipartTypedOutput() {
+    this(UUID.randomUUID().toString());
+  }
+
+  MultipartTypedOutput(String boundary) {
+    this.boundary = boundary;
     footer = buildBoundary(boundary, false, true);
     length = footer.length;
   }
 
-  void addPart(String name, TypedOutput body) {
+  public void addPart(String name, TypedOutput body) {
     if (name == null) {
       throw new NullPointerException("Part name must not be null.");
     }
@@ -103,6 +120,9 @@ void addPart(String name, TypedOutput body) {
       }
       headers.append("\"\r\nContent-Type: ");
       headers.append(value.mimeType());
+      if (value.length() != -1) {
+        headers.append("\r\nContent-Length: ").append(value.length());
+      }
       headers.append("\r\nContent-Transfer-Encoding: binary\r\n\r\n");
       return headers.toString().getBytes("UTF-8");
     } catch (IOException ex) {
diff --git a/retrofit/src/main/java/retrofit/http/mime/TypedByteArray.java b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
similarity index 72%
rename from retrofit/src/main/java/retrofit/http/mime/TypedByteArray.java
rename to retrofit/src/main/java/retrofit/mime/TypedByteArray.java
index dddd23f52..5f05def04 100644
--- a/retrofit/src/main/java/retrofit/http/mime/TypedByteArray.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedByteArray.java
@@ -1,5 +1,19 @@
-// Copyright 2010 Square, Inc.
-package retrofit.http.mime;
+/*
+ * Copyright (C) 2010 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
diff --git a/retrofit/src/main/java/retrofit/http/mime/TypedFile.java b/retrofit/src/main/java/retrofit/mime/TypedFile.java
similarity index 78%
rename from retrofit/src/main/java/retrofit/http/mime/TypedFile.java
rename to retrofit/src/main/java/retrofit/mime/TypedFile.java
index 2a26e64f3..43fcd3a07 100644
--- a/retrofit/src/main/java/retrofit/http/mime/TypedFile.java
+++ b/retrofit/src/main/java/retrofit/mime/TypedFile.java
@@ -1,5 +1,19 @@
-// Copyright 2010 Square, Inc.
-package retrofit.http.mime;
+/*
+ * Copyright (C) 2010 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
 
 import java.io.File;
 import java.io.FileInputStream;
diff --git a/retrofit/src/main/java/retrofit/mime/TypedInput.java b/retrofit/src/main/java/retrofit/mime/TypedInput.java
new file mode 100644
index 000000000..f05afb84d
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/mime/TypedInput.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * Binary data with an associated mime type.
+ *
+ * @author Jake Wharton (jw@squareup.com)
+ */
+public interface TypedInput {
+
+  /** Returns the mime type. */
+  String mimeType();
+
+  /** Length in bytes. Returns {@code -1} if length is unknown. */
+  long length();
+
+  /**
+   * Read bytes as stream. Unless otherwise specified, this method may only be called once. It is
+   * the responsibility of the caller to close the stream.
+   */
+  InputStream in() throws IOException;
+}
diff --git a/retrofit/src/main/java/retrofit/mime/TypedOutput.java b/retrofit/src/main/java/retrofit/mime/TypedOutput.java
new file mode 100644
index 000000000..f15055f8f
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/mime/TypedOutput.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
+
+import java.io.IOException;
+import java.io.OutputStream;
+
+/**
+ * Binary data with an associated mime type.
+ *
+ * @author Bob Lee (bob@squareup.com)
+ */
+public interface TypedOutput {
+  /** Original filename.
+   *
+   * Used only for multipart requests, may be null. */
+  String fileName();
+
+  /** Returns the mime type. */
+  String mimeType();
+
+  /** Length in bytes or -1 if unknown. */
+  long length();
+
+  /** Writes these bytes to the given output stream. */
+  void writeTo(OutputStream out) throws IOException;
+}
diff --git a/retrofit/src/main/java/retrofit/mime/TypedString.java b/retrofit/src/main/java/retrofit/mime/TypedString.java
new file mode 100644
index 000000000..9c83230ff
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/mime/TypedString.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.mime;
+
+import java.io.UnsupportedEncodingException;
+
+public class TypedString extends TypedByteArray {
+  public TypedString(String string) {
+    super("text/plain; charset=UTF-8", convertToBytes(string));
+  }
+
+  private static byte[] convertToBytes(String string) {
+    try {
+      return string.getBytes("UTF-8");
+    } catch (UnsupportedEncodingException e) {
+      throw new RuntimeException(e);
+    }
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java b/retrofit/src/test/java/retrofit/CallbackRunnableTest.java
similarity index 88%
rename from retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java
rename to retrofit/src/test/java/retrofit/CallbackRunnableTest.java
index 225fed34e..6d6617d22 100644
--- a/retrofit/src/test/java/retrofit/http/CallbackRunnableTest.java
+++ b/retrofit/src/test/java/retrofit/CallbackRunnableTest.java
@@ -1,9 +1,13 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http;
+package retrofit;
 
 import java.util.concurrent.Executor;
 import org.junit.Before;
 import org.junit.Test;
+import retrofit.Callback;
+import retrofit.CallbackRunnable;
+import retrofit.ResponseWrapper;
+import retrofit.RetrofitError;
 
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.same;
@@ -11,7 +15,7 @@
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static retrofit.http.Utils.SynchronousExecutor;
+import static retrofit.Utils.SynchronousExecutor;
 
 public class CallbackRunnableTest {
   private Executor executor = spy(new SynchronousExecutor());
diff --git a/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
similarity index 63%
rename from retrofit/src/test/java/retrofit/http/RequestBuilderTest.java
rename to retrofit/src/test/java/retrofit/RequestBuilderTest.java
index fcb1d30d2..7ed4ede5e 100644
--- a/retrofit/src/test/java/retrofit/http/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1,26 +1,27 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http;
+package retrofit;
 
 import com.google.gson.Gson;
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.lang.reflect.Method;
-import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.junit.Test;
-import retrofit.http.client.Request;
-import retrofit.http.mime.TypedOutput;
-import retrofit.http.mime.TypedString;
+import retrofit.converter.Converter;
+import retrofit.converter.GsonConverter;
+import retrofit.client.Header;
+import retrofit.client.Request;
+import retrofit.mime.MimeHelper;
+import retrofit.mime.MultipartTypedOutput;
+import retrofit.mime.TypedOutput;
+import retrofit.mime.TypedString;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-import static retrofit.http.RestMethodInfo.NO_SINGLE_ENTITY;
+import static retrofit.RestMethodInfo.NO_BODY;
+import static retrofit.RestMethodInfo.RequestType;
 
 public class RequestBuilderTest {
   @Test public void normalGet() throws Exception {
@@ -40,7 +41,7 @@
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong") //
+        .addPathParam("ping", "pong") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
@@ -61,75 +62,74 @@
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void getWithPathAndQueryParam() throws Exception {
+  @Test public void getWithQueryUrlAndParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong") //
-        .addNamedParam("kit", "kat") //
-        .addNamedParam("riff", "raff") //
+        .setPath("/foo/bar/") //
+        .setQuery("?hi=mom") //
+        .addQueryParam("ping", "pong") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom&ping=pong");
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void getWithPathAndQueryQuestionMarkParam() throws Exception {
+  @Test public void getWithPathAndQueryParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong?") //
-        .addNamedParam("kit", "kat?") //
+        .addPathParam("ping", "pong") //
+        .addQueryParam("kit", "kat") //
+        .addQueryParam("riff", "raff") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void getWithPathAndQueryAmpersandParam() throws Exception {
+  @Test public void getWithPathAndQueryQuestionMarkParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong&") //
-        .addNamedParam("kit", "kat&") //
+        .addPathParam("ping", "pong?") //
+        .addQueryParam("kit", "kat?") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void getWithPathAndQueryHashParam() throws Exception {
+  @Test public void getWithPathAndQueryAmpersandParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong#") //
-        .addNamedParam("kit", "kat#") //
+        .addPathParam("ping", "pong&") //
+        .addQueryParam("kit", "kat&") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void getWithPathAndQueryParamAsync() throws Exception {
+  @Test public void getWithPathAndQueryHashParam() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong") //
-        .addNamedParam("kit", "kat") //
-        .setAsynchronous() //
+        .addPathParam("ping", "pong#") //
+        .addQueryParam("kit", "kat#") //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat");
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
     assertThat(request.getBody()).isNull();
   }
 
@@ -152,7 +152,7 @@
         .setHasBody() //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/") //
-        .addNamedParam("ping", "pong") //
+        .addPathParam("ping", "pong") //
         .build();
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
@@ -166,7 +166,7 @@
         .setHasBody() //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/") //
-        .addSingleEntityParam(Arrays.asList("quick", "brown", "fox")) //
+        .setBody(Arrays.asList("quick", "brown", "fox")) //
         .build();
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
@@ -180,26 +180,9 @@
         .setHasBody() //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/{ping}/{kit}/") //
-        .addNamedParam("ping", "pong") //
-        .addSingleEntityParam(Arrays.asList("quick", "brown", "fox")) //
-        .addNamedParam("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");
-    assertTypedBytes(request.getBody(), "[\"quick\",\"brown\",\"fox\"]");
-  }
-
-  @Test public void singleEntityWithPathParamsAsync() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/{kit}/") //
-        .addNamedParam("ping", "pong") //
-        .addSingleEntityParam(Arrays.asList("quick", "brown", "fox")) //
-        .addNamedParam("kit", "kat") //
-        .setAsynchronous() //
+        .addPathParam("ping", "pong") //
+        .setBody(Arrays.asList("quick", "brown", "fox")) //
+        .addPathParam("kit", "kat") //
         .build();
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
@@ -213,18 +196,19 @@
         .setHasBody() //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/") //
-        .addNamedParam("ping", "pong") //
-        .addNamedParam("kit", new TypedString("kat")) //
         .setMultipart() //
+        .addPart("ping", "pong") //
+        .addPart("kit", new TypedString("kat")) //
         .build();
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
 
     MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
-    assertThat(body.parts).hasSize(2);
+    List<byte[]> bodyParts = MimeHelper.getParts(body);
+    assertThat(bodyParts).hasSize(2);
 
-    Iterator<byte[]> iterator = body.parts.iterator();
+    Iterator<byte[]> iterator = bodyParts.iterator();
 
     String one = new String(iterator.next(), "UTF-8");
     assertThat(one).contains("ping").contains("pong");
@@ -233,6 +217,19 @@
     assertThat(two).contains("kit").contains("kat");
   }
 
+  @Test public void simpleFormEncoded() throws Exception {
+    Request request = new Helper() //
+        .setMethod("POST") //
+        .setHasBody() //
+        .setUrl("http://example.com") //
+        .setPath("/foo") //
+        .setFormEncoded() //
+        .addField("foo", "bar") //
+        .addField("ping", "pong") //
+        .build();
+    assertTypedBytes(request.getBody(), "foo=bar&ping=pong");
+  }
+
   @Test public void simpleHeaders() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
@@ -248,6 +245,36 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void methodHeader() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addHeader("ping", "pong") //
+        .addHeaderParam("kit", "kat") //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
+  @Test public void headerParam() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addHeader("ping", "pong") //
+        .addHeaderParam("kit", "kat") //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void noDuplicateSlashes() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
@@ -267,24 +294,22 @@ private static void assertTypedBytes(TypedOutput bytes, String expected) throws
   private static class Helper {
     private static final Converter GSON = new GsonConverter(new Gson());
 
-    private boolean isSynchronous = true;
-    private boolean isMultipart = false;
+    private RequestType requestType = RequestType.SIMPLE;
     private String method;
     private boolean hasBody = false;
+    private boolean hasQueryParams = false;
     private String path;
-    private Set<String> pathParams;
-    private final List<QueryParam> queryParams = new ArrayList<QueryParam>();
-    private final List<String> namedParams = new ArrayList<String>();
+    private String query;
+    private final List<String> pathParams = new ArrayList<String>();
+    private final List<String> queryParams = new ArrayList<String>();
+    private final List<String> fieldParams = new ArrayList<String>();
+    private final List<String> partParams = new ArrayList<String>();
+    private final List<String> headerParams = new ArrayList<String>();
     private final List<Object> args = new ArrayList<Object>();
     private final List<Header> headers = new ArrayList<Header>();
-    private int singleEntityArgumentIndex = NO_SINGLE_ENTITY;
+    private int bodyIndex = NO_BODY;
     private String url;
 
-    Helper setAsynchronous() {
-      isSynchronous = false;
-      return this;
-    }
-
     Helper setMethod(String method) {
       this.method = method;
       return this;
@@ -295,37 +320,61 @@ Helper setHasBody() {
       return this;
     }
 
+    Helper setUrl(String url) {
+      this.url = url;
+      return this;
+    }
+
     Helper setPath(String path) {
       this.path = path;
-      pathParams = RestMethodInfo.parsePathParameters(path);
       return this;
     }
 
-    Helper addQueryParam(String name, String value) {
-      QueryParam queryParam = mock(QueryParam.class);
-      when(queryParam.name()).thenReturn(name);
-      when(queryParam.value()).thenReturn(value);
-      queryParams.add(queryParam);
+    Helper setQuery(String query) {
+      this.query = query;
+      hasQueryParams = true;
       return this;
     }
 
-    Helper addNamedParam(String name, Object value) {
-      if (name == null) {
-        throw new IllegalArgumentException("Name can not be null.");
-      }
-      namedParams.add(name);
+    private void addParam(String path, String query, String field, String part, String header,
+        Object value) {
+      pathParams.add(path);
+      queryParams.add(query);
+      fieldParams.add(field);
+      partParams.add(part);
+      headerParams.add(header);
       args.add(value);
+    }
+
+    Helper addPathParam(String name, Object value) {
+      addParam(name, null, null, null, null, value);
       return this;
     }
 
-    Helper addSingleEntityParam(Object value) {
-      if (singleEntityArgumentIndex != NO_SINGLE_ENTITY) {
-        throw new IllegalStateException("Single entity param already added.");
-      }
-      // Relying on the fact that this is already less one.
-      singleEntityArgumentIndex = namedParams.size();
-      namedParams.add(null);
-      args.add(value);
+    Helper addQueryParam(String name, String value) {
+      addParam(null, name, null, null, null, value);
+      hasQueryParams = true;
+      return this;
+    }
+
+    Helper addField(String name, String value) {
+      addParam(null, null, name, null, null, value);
+      return this;
+    }
+
+    Helper addPart(String name, Object value) {
+      addParam(null, null, null, name, null, value);
+      return this;
+    }
+
+    Helper setBody(Object value) {
+      addParam(null, null, null, null, null, value);
+      bodyIndex = args.size() - 1;
+      return this;
+    }
+
+    Helper addHeaderParam(String name, Object value) {
+      addParam(null, null, null, null, name, value);
       return this;
     }
 
@@ -335,16 +384,16 @@ Helper addHeader(String name, String value) {
     }
 
     Helper setMultipart() {
-      isMultipart = true;
+      requestType = RequestType.MULTIPART;
       return this;
     }
 
-    Helper setUrl(String url) {
-      this.url = url;
+    Helper setFormEncoded() {
+      requestType = RequestType.FORM_URL_ENCODED;
       return this;
     }
 
-    Request build() throws NoSuchMethodException, URISyntaxException {
+    Request build() throws Exception {
       if (method == null) {
         throw new IllegalStateException("Method must be set.");
       }
@@ -352,34 +401,29 @@ Request build() throws NoSuchMethodException, URISyntaxException {
         throw new IllegalStateException("Path must be set.");
       }
 
-      final Method method;
-      if (isSynchronous) {
-        method = getClass().getDeclaredMethod("dummySync");
-      } else {
-        method = getClass().getDeclaredMethod("dummyAsync", Callback.class);
-        args.add(mock(Callback.class));
-      }
-
-      // Create a fake rest method annotation based on set values.
-      RestMethod restMethod = mock(RestMethod.class);
-      when(restMethod.hasBody()).thenReturn(hasBody);
-      when(restMethod.value()).thenReturn(this.method);
+      Method method = getClass().getDeclaredMethod("dummySync");
 
       RestMethodInfo methodInfo = new RestMethodInfo(method);
-      methodInfo.restMethod = restMethod;
-      methodInfo.path = path;
-      methodInfo.pathParams = pathParams;
-      methodInfo.pathQueryParams = queryParams.toArray(new QueryParam[queryParams.size()]);
-      methodInfo.namedParams = namedParams.toArray(new String[namedParams.size()]);
-      methodInfo.singleEntityArgumentIndex = singleEntityArgumentIndex;
-      methodInfo.isMultipart = isMultipart;
+      methodInfo.requestMethod = this.method;
+      methodInfo.requestHasBody = hasBody;
+      methodInfo.requestType = requestType;
+      methodInfo.requestUrl = path;
+      methodInfo.requestUrlParamNames = RestMethodInfo.parsePathParameters(path);
+      methodInfo.requestQuery = query;
+      methodInfo.hasQueryParams = hasQueryParams;
+      methodInfo.requestUrlParam = pathParams.toArray(new String[pathParams.size()]);
+      methodInfo.requestQueryName = queryParams.toArray(new String[queryParams.size()]);
+      methodInfo.requestFormFields = fieldParams.toArray(new String[fieldParams.size()]);
+      methodInfo.requestMultipartPart = partParams.toArray(new String[partParams.size()]);
+      methodInfo.requestParamHeader = headerParams.toArray(new String[headerParams.size()]);
+      methodInfo.bodyIndex = bodyIndex;
       methodInfo.loaded = true;
 
       return new RequestBuilder(GSON) //
-          .setApiUrl(url)
-          .setHeaders(headers)
-          .setArgs(args.toArray(new Object[args.size()]))
-          .setMethodInfo(methodInfo)
+          .apiUrl(url)
+          .headers(headers)
+          .args(args.toArray(new Object[args.size()]))
+          .methodInfo(methodInfo)
           .build();
     }
 
@@ -387,9 +431,5 @@ Request build() throws NoSuchMethodException, URISyntaxException {
     private Object dummySync() {
       return null;
     }
-
-    @SuppressWarnings("UnusedDeclaration") // Accessed via reflection.
-    private void dummyAsync(Callback<Object> cb) {
-    }
   }
 }
diff --git a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
similarity index 94%
rename from retrofit/src/test/java/retrofit/http/RestAdapterTest.java
rename to retrofit/src/test/java/retrofit/RestAdapterTest.java
index de15b6bd4..282fff5ea 100644
--- a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http;
+package retrofit;
 
 import java.io.IOException;
 import java.util.Collections;
@@ -7,10 +7,13 @@
 import java.util.concurrent.Executor;
 import org.junit.Before;
 import org.junit.Test;
-import retrofit.http.client.Client;
-import retrofit.http.client.Request;
-import retrofit.http.client.Response;
-import retrofit.http.mime.TypedString;
+import retrofit.converter.ConversionException;
+import retrofit.http.GET;
+import retrofit.client.Client;
+import retrofit.client.Header;
+import retrofit.client.Request;
+import retrofit.client.Response;
+import retrofit.mime.TypedString;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
@@ -24,8 +27,8 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
-import static retrofit.http.Profiler.RequestInformation;
-import static retrofit.http.Utils.SynchronousExecutor;
+import static retrofit.Profiler.RequestInformation;
+import static retrofit.Utils.SynchronousExecutor;
 
 public class RestAdapterTest {
   private static List<Header> NO_HEADERS = Collections.emptyList();
diff --git a/retrofit/src/test/java/retrofit/http/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
similarity index 64%
rename from retrofit/src/test/java/retrofit/http/RestMethodInfoTest.java
rename to retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index 80255d253..624684062 100644
--- a/retrofit/src/test/java/retrofit/http/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -1,21 +1,39 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http;
+package retrofit;
 
 import com.google.gson.reflect.TypeToken;
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.lang.reflect.Method;
 import java.lang.reflect.Type;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import org.junit.Test;
-import retrofit.http.mime.TypedOutput;
+import retrofit.http.Body;
+import retrofit.http.DELETE;
+import retrofit.http.Field;
+import retrofit.http.FormUrlEncoded;
+import retrofit.http.GET;
+import retrofit.http.HEAD;
+import retrofit.http.Header;
+import retrofit.http.Headers;
+import retrofit.http.Multipart;
+import retrofit.http.POST;
+import retrofit.http.PUT;
+import retrofit.http.Part;
+import retrofit.http.Path;
+import retrofit.http.Query;
+import retrofit.http.RestMethod;
+import retrofit.mime.TypedOutput;
 
 import static java.lang.annotation.ElementType.METHOD;
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static retrofit.http.RestMethodInfo.NO_SINGLE_ENTITY;
+import static retrofit.RestMethodInfo.NO_BODY;
+import static retrofit.RestMethodInfo.RequestType.MULTIPART;
+import static retrofit.RestMethodInfo.RequestType.SIMPLE;
 
 public class RestMethodInfoTest {
   @Test public void pathParameterParsing() throws Exception {
@@ -31,6 +49,8 @@
     expectParams("foo/bar/{taco}/or/{taco}", "taco");
     expectParams("foo/bar/{taco-shell}", "taco-shell");
     expectParams("foo/bar/{taco_shell}", "taco_shell");
+    expectParams("foo/bar/{sha256}", "sha256");
+    expectParams("foo/bar/{1}"); // Invalid parameter, name cannot start with digit.
   }
 
   private static void expectParams(String path, String... expected) {
@@ -63,19 +83,19 @@ public void pathMustBePrefixedWithSlash() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void concreteCallbackTypesWithParams() {
     class Example {
-      @GET("/foo") void a(@Name("id") String id, ResponseCallback cb) {
+      @GET("/foo") void a(@Path("id") String id, ResponseCallback cb) {
       }
     }
 
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void genericCallbackTypes() {
@@ -87,19 +107,19 @@ public void pathMustBePrefixedWithSlash() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void genericCallbackTypesWithParams() {
     class Example {
-      @GET("/foo") void a(@Name("id") String id, Callback<Response> c) {
+      @GET("/foo") void a(@Path("id") String id, Callback<Response> c) {
       }
     }
 
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void wildcardGenericCallbackTypes() {
@@ -111,7 +131,7 @@ public void pathMustBePrefixedWithSlash() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void genericCallbackWithGenericType() {
@@ -125,7 +145,7 @@ public void pathMustBePrefixedWithSlash() {
     assertThat(methodInfo.isSynchronous).isFalse();
 
     Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.type).isEqualTo(expected);
+    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
   }
 
   // RestMethodInfo reconstructs this type from MultimapCallback<String, Set<Long>>. It contains
@@ -141,7 +161,7 @@ public void pathMustBePrefixedWithSlash() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.type).isEqualTo(
+    assertThat(methodInfo.responseObjectType).isEqualTo(
         RestMethodInfoTest.class.getDeclaredField("extendingGenericCallbackType").getGenericType());
   }
 
@@ -155,7 +175,7 @@ public void pathMustBePrefixedWithSlash() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     assertThat(methodInfo.isSynchronous).isTrue();
-    assertThat(methodInfo.type).isEqualTo(Response.class);
+    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
   }
 
   @Test public void synchronousGenericResponse() {
@@ -170,13 +190,13 @@ public void pathMustBePrefixedWithSlash() {
     assertThat(methodInfo.isSynchronous).isTrue();
 
     Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.type).isEqualTo(expected);
+    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
   }
 
   @Test(expected = IllegalArgumentException.class)
   public void missingCallbackTypes() {
     class Example {
-      @GET("/foo") void a(@Name("id") String id) {
+      @GET("/foo") void a(@Path("id") String id) {
       }
     }
 
@@ -220,9 +240,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("DELETE");
-    assertThat(methodInfo.restMethod.hasBody()).isFalse();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("DELETE");
+    assertThat(methodInfo.requestHasBody).isFalse();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @Test public void getMethod() {
@@ -236,9 +256,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("GET");
-    assertThat(methodInfo.restMethod.hasBody()).isFalse();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("GET");
+    assertThat(methodInfo.requestHasBody).isFalse();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @Test public void headMethod() {
@@ -252,9 +272,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("HEAD");
-    assertThat(methodInfo.restMethod.hasBody()).isFalse();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("HEAD");
+    assertThat(methodInfo.requestHasBody).isFalse();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @Test public void postMethod() {
@@ -268,9 +288,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("POST");
-    assertThat(methodInfo.restMethod.hasBody()).isTrue();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("POST");
+    assertThat(methodInfo.requestHasBody).isTrue();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @Test public void putMethod() {
@@ -284,9 +304,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("PUT");
-    assertThat(methodInfo.restMethod.hasBody()).isTrue();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("PUT");
+    assertThat(methodInfo.requestHasBody).isTrue();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @RestMethod("CUSTOM1")
@@ -306,9 +326,9 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("CUSTOM1");
-    assertThat(methodInfo.restMethod.hasBody()).isFalse();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("CUSTOM1");
+    assertThat(methodInfo.requestHasBody).isFalse();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @RestMethod(value = "CUSTOM2", hasBody = true)
@@ -328,15 +348,14 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.restMethod.value()).isEqualTo("CUSTOM2");
-    assertThat(methodInfo.restMethod.hasBody()).isTrue();
-    assertThat(methodInfo.path).isEqualTo("/foo");
+    assertThat(methodInfo.requestMethod).isEqualTo("CUSTOM2");
+    assertThat(methodInfo.requestHasBody).isTrue();
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
   }
 
   @Test public void singleQueryParam() {
     class Example {
-      @GET("/foo")
-      @QueryParam(name = "a", value = "b")
+      @GET("/foo?a=b")
       Response a() {
         return null;
       }
@@ -346,20 +365,13 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.pathQueryParams).hasSize(1);
-    QueryParam param = methodInfo.pathQueryParams[0];
-    assertThat(param.name()).isEqualTo("a");
-    assertThat(param.value()).isEqualTo("b");
+    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
+    assertThat(methodInfo.requestQuery).isEqualTo("a=b");
   }
 
-  @Test public void multipleQueryParam() {
+  @Test public void emptyParams() {
     class Example {
-      @GET("/foo")
-      @QueryParams({
-          @QueryParam(name = "a", value = "b"),
-          @QueryParam(name = "c", value = "d")
-      })
-      Response a() {
+      @GET("/") Response a() {
         return null;
       }
     }
@@ -368,25 +380,17 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.pathQueryParams).hasSize(2);
-    QueryParam param1 = methodInfo.pathQueryParams[0];
-    assertThat(param1.name()).isEqualTo("a");
-    assertThat(param1.value()).isEqualTo("b");
-    QueryParam param2 = methodInfo.pathQueryParams[1];
-    assertThat(param2.name()).isEqualTo("c");
-    assertThat(param2.value()).isEqualTo("d");
+    assertThat(methodInfo.requestUrlParam).isEmpty();
+    assertThat(methodInfo.requestQueryName).isEmpty();
+    assertThat(methodInfo.requestFormFields).isEmpty();
+    assertThat(methodInfo.requestMultipartPart).isEmpty();
+    assertThat(methodInfo.bodyIndex).isEqualTo(NO_BODY);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test(expected = IllegalStateException.class)
-  public void bothQueryParamAnnotations() {
-    class Example {
-      @GET("/foo")
-      @QueryParam(name = "a", value = "b")
-      @QueryParams({
-          @QueryParam(name = "a", value = "b"),
-          @QueryParam(name = "c", value = "d")
-      })
-      Response a() {
+  @Test public void singleParam() {
+    class Example {
+      @GET("/") Response a(@Query("a") String a) {
         return null;
       }
     }
@@ -394,25 +398,15 @@ Response a() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-  }
 
-  @Test(expected = IllegalStateException.class)
-  public void emptyQueryParams() {
-    class Example {
-      @GET("/foo")
-      @QueryParams({})
-      Response a() {
-        return null;
-      }
-    }
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
+    assertThat(methodInfo.requestQueryName).hasSize(1).containsSequence("a");
+    assertThat(methodInfo.bodyIndex).isEqualTo(NO_BODY);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test public void noQueryParamsNonNull() {
+  @Test public void multipleParams() {
     class Example {
-      @GET("/") Response a() {
+      @GET("/") Response a(@Query("a") String a, @Query("b") String b, @Query("c") String c) {
         return null;
       }
     }
@@ -421,16 +415,14 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.pathQueryParams).isEmpty();
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestQueryName).hasSize(3).containsSequence("a", "b", "c");
+    assertThat(methodInfo.bodyIndex).isEqualTo(NO_BODY);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test(expected = IllegalStateException.class)
-  public void noQueryParamsInUrl() {
+  @Test public void bodyObject() {
     class Example {
-      @GET("/foo/{bar}/")
-      @QueryParam(name = "bar", value = "baz")
-      Response a() {
+      @PUT("/") Response a(@Body Object o) {
         return null;
       }
     }
@@ -438,11 +430,18 @@ Response a() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
+
+    assertThat(methodInfo.requestUrlParam).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestQueryName).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestFormFields).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestMultipartPart).containsOnly(new String[] { null });
+    assertThat(methodInfo.bodyIndex).isEqualTo(0);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test public void emptyParams() {
+  @Test public void bodyTypedBytes() {
     class Example {
-      @GET("/") Response a() {
+      @PUT("/") Response a(@Body TypedOutput o) {
         return null;
       }
     }
@@ -451,14 +450,18 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.namedParams).isEmpty();
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestUrlParam).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestQueryName).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestFormFields).containsOnly(new String[] { null });
+    assertThat(methodInfo.requestMultipartPart).containsOnly(new String[] { null });
+    assertThat(methodInfo.bodyIndex).isEqualTo(0);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test public void singleParam() {
+  @Test(expected = IllegalStateException.class)
+  public void twoBodies() {
     class Example {
-      @GET("/") Response a(@Name("a") String a) {
+      @PUT("/") Response a(@Body int o1, @Body int o2) {
         return null;
       }
     }
@@ -466,76 +469,56 @@ Response a() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(1).containsSequence("a");
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
   }
 
-  @Test public void multipleParams() {
+  @Test public void bodyWithOtherParams() {
     class Example {
-      @GET("/") Response a(@Name("a") String a, @Name("b") String b, @Name("c") String c) {
+      @PUT("/{a}/{c}") Response a(@Path("a") int a, @Body int b, @Path("c") int c) {
         return null;
       }
     }
-
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.namedParams).hasSize(3).containsSequence("a", "b", "c");
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestUrlParam).containsExactly("a", null, "c");
+    assertThat(methodInfo.requestQueryName).containsExactly(null, null, null);
+    assertThat(methodInfo.requestFormFields).containsExactly(null, null, null);
+    assertThat(methodInfo.requestMultipartPart).containsExactly(null, null, null);
+    assertThat(methodInfo.bodyIndex).isEqualTo(1);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
-  @Test public void emptyParamsWithCallback() {
+  @Test(expected = IllegalStateException.class)
+  public void pathParamNonPathParamAndTypedBytes() {
     class Example {
-      @GET("/") void a(ResponseCallback cb) {
+      @PUT("/{a}") Response a(@Path("a") int a, @Path("b") int b, @Body int c) {
+        return null;
       }
     }
 
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.namedParams).isEmpty();
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
   }
 
-  @Test public void singleParamWithCallback() {
+  @Test(expected = IllegalStateException.class)
+  public void parameterWithoutAnnotation() {
     class Example {
-      @GET("/") void a(@Name("a") String a, ResponseCallback cb) {
+      @GET("/") Response a(String a) {
+        return null;
       }
     }
 
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(1).containsSequence("a");
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
   }
 
-  @Test public void multipleParamsWithCallback() {
-    class Example {
-      @GET("/") void a(@Name("a") String a, @Name("b") String b, ResponseCallback cb) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(2).containsSequence("a", "b");
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(NO_SINGLE_ENTITY);
-    assertThat(methodInfo.isMultipart).isFalse();
-  }
-
-  @Test public void singleEntity() {
+  @Test(expected = IllegalStateException.class)
+  public void nonBodyHttpMethodWithSingleEntity() {
     class Example {
-      @PUT("/") Response a(@SingleEntity Object o) {
+      @GET("/") Response a(@Body Object o) {
         return null;
       }
     }
@@ -543,16 +526,12 @@ Response a() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(1);
-    assertThat(methodInfo.namedParams[0]).isNull();
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(0);
-    assertThat(methodInfo.isMultipart).isFalse();
   }
 
-  @Test public void singleEntityTypedBytes() {
+  @Test(expected = IllegalStateException.class)
+  public void nonBodyHttpMethodWithTypedBytes() {
     class Example {
-      @PUT("/") Response a(@SingleEntity TypedOutput o) {
+      @GET("/") Response a(@Path("a") TypedOutput a) {
         return null;
       }
     }
@@ -560,16 +539,13 @@ Response a() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(1);
-    assertThat(methodInfo.namedParams[0]).isNull();
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(0);
-    assertThat(methodInfo.isMultipart).isFalse();
   }
 
-  @Test public void singleEntityWithCallback() {
+  @Test public void simpleMultipart() {
     class Example {
-      @PUT("/") void a(@SingleEntity Object o, ResponseCallback cb) {
+      @Multipart @PUT("/")
+      Response a(@Part("a") TypedOutput a) {
+        return null;
       }
     }
 
@@ -577,16 +553,13 @@ Response a() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.namedParams).hasSize(1);
-    assertThat(methodInfo.namedParams[0]).isNull();
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(0);
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
   }
 
-  @Test(expected = IllegalStateException.class)
-  public void twoSingleEntities() {
+  @Test public void twoTypedBytesMultipart() {
     class Example {
-      @PUT("/") Response a(@SingleEntity int o1, @SingleEntity int o2) {
+      @Multipart @PUT("/")
+      Response a(@Part("a") TypedOutput a, @Part("b") TypedOutput b) {
         return null;
       }
     }
@@ -594,26 +567,15 @@ public void twoSingleEntities() {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-  }
 
-  @Test public void singleEntityWithNamed() {
-    class Example {
-      @PUT("/{a}/{c}") Response a(@Name("a") int a, @SingleEntity int b, @Name("c") int c) {
-        return null;
-      }
-    }
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.namedParams).hasSize(3).containsSequence("a", null, "c");
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(1);
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
   }
 
-  @Test public void singleEntityWithNamedAndCallback() {
+  @Test public void twoTypesMultipart() {
     class Example {
-      @PUT("/{a}") void a(@Name("a") int a, @SingleEntity int b, ResponseCallback cb) {
+      @Multipart @PUT("/")
+      Response a(@Part("a") TypedOutput a, @Part("b") int b) {
+        return null;
       }
     }
 
@@ -621,15 +583,13 @@ public void twoSingleEntities() {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.namedParams).hasSize(2).containsSequence("a", null);
-    assertThat(methodInfo.singleEntityArgumentIndex).isEqualTo(1);
-    assertThat(methodInfo.isMultipart).isFalse();
+    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
   }
 
   @Test(expected = IllegalStateException.class)
-  public void nonPathParamAndSingleEntity() {
+  public void implicitMultipartForbidden() {
     class Example {
-      @PUT("/") Response a(@Name("a") int a, @SingleEntity int b) {
+      @POST("/") Response a(@Part("a") int a) {
         return null;
       }
     }
@@ -640,9 +600,9 @@ public void nonPathParamAndSingleEntity() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void typedBytesUrlParam() {
+  public void multipartFailsOnNonBodyMethod() {
     class Example {
-      @GET("/{a}") Response a(@Name("a") TypedOutput m) {
+      @Multipart @GET("/") Response a() {
         return null;
       }
     }
@@ -653,9 +613,9 @@ public void typedBytesUrlParam() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void pathParamNonPathParamAndTypedBytes() {
+  public void multipartFailsWithNoParts() {
     class Example {
-      @PUT("/{a}") Response a(@Name("a") int a, @Name("b") int b, @SingleEntity int c) {
+      @Multipart @POST("/") Response a() {
         return null;
       }
     }
@@ -666,9 +626,9 @@ public void pathParamNonPathParamAndTypedBytes() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void parameterWithoutAnnotation() {
+  public void implicitFormEncodingForbidden() {
     class Example {
-      @GET("/") Response a(String a) {
+      @POST("/") Response a(@Field("a") int a) {
         return null;
       }
     }
@@ -679,9 +639,9 @@ public void parameterWithoutAnnotation() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void nonBodyHttpMethodWithSingleEntity() {
+  public void formEncodingFailsOnNonBodyMethod() {
     class Example {
-      @GET("/") Response a(@SingleEntity Object o) {
+      @FormUrlEncoded @GET("/") Response a() {
         return null;
       }
     }
@@ -692,9 +652,9 @@ public void nonBodyHttpMethodWithSingleEntity() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void nonBodyHttpMethodWithTypedBytes() {
+  public void formEncodingFailsWithNoParts() {
     class Example {
-      @GET("/") Response a(@Name("a") TypedOutput a) {
+      @FormUrlEncoded @POST("/") Response a() {
         return null;
       }
     }
@@ -704,10 +664,10 @@ public void nonBodyHttpMethodWithTypedBytes() {
     methodInfo.init();
   }
 
-  @Test public void simpleMultipart() {
+  @Test(expected = IllegalStateException.class)
+  public void headersFailWhenEmptyOnMethod() {
     class Example {
-      @Multipart @PUT("/")
-      Response a(@Name("a") TypedOutput a) {
+      @GET("/") @Headers({}) Response a() {
         return null;
       }
     }
@@ -715,14 +675,15 @@ Response a(@Name("a") TypedOutput a) {
     Method method = TestingUtils.getMethod(Example.class, "a");
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
-
-    assertThat(methodInfo.isMultipart).isTrue();
   }
 
-  @Test public void twoTypedBytesMultipart() {
+  @Test public void twoMethodHeaders() {
+
     class Example {
-      @Multipart @PUT("/")
-      Response a(@Name("a") TypedOutput a, @Name("b") TypedOutput b) {
+      @GET("/") @Headers({
+        "X-Foo: Bar",
+        "X-Ping: Pong"
+      }) Response a() {
         return null;
       }
     }
@@ -731,13 +692,15 @@ Response a(@Name("a") TypedOutput a, @Name("b") TypedOutput b) {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.isMultipart).isTrue();
+    assertThat(methodInfo.headers).isEqualTo(
+        Arrays.asList(new retrofit.client.Header("X-Foo", "Bar"),
+            new retrofit.client.Header("X-Ping", "Pong")));
   }
 
-  @Test public void twoTypesMultipart() {
+  @Test public void twoHeaderParams() {
     class Example {
-      @Multipart @PUT("/")
-      Response a(@Name("a") TypedOutput a, @Name("b") int b) {
+      @GET("/")
+      Response a(@Header("a") String a, @Header("b") String b) {
         return null;
       }
     }
@@ -746,13 +709,15 @@ Response a(@Name("a") TypedOutput a, @Name("b") int b) {
     RestMethodInfo methodInfo = new RestMethodInfo(method);
     methodInfo.init();
 
-    assertThat(methodInfo.isMultipart).isTrue();
+    assertThat(Arrays.asList(methodInfo.requestParamHeader))
+      .isEqualTo(Arrays.asList("a", "b"));
   }
 
   @Test(expected = IllegalStateException.class)
-  public void implicitMultipartForbidden() {
+  public void headerParamMustBeString() {
     class Example {
-      @POST("/") Response a(@Name("a") int a) {
+      @GET("/")
+      Response a(@Header("a") TypedOutput a, @Header("b") int b) {
         return null;
       }
     }
@@ -763,9 +728,12 @@ public void implicitMultipartForbidden() {
   }
 
   @Test(expected = IllegalStateException.class)
-  public void multipartFailsOnNonBodyMethod() {
+  public void onlyOneEncodingIsAllowed() {
     class Example {
-      @Multipart @GET("/") Response a() {
+      @Multipart
+      @FormUrlEncoded
+      @POST("/")
+      Response a() {
         return null;
       }
     }
diff --git a/retrofit/src/test/java/retrofit/http/TestingUtils.java b/retrofit/src/test/java/retrofit/TestingUtils.java
similarity index 91%
rename from retrofit/src/test/java/retrofit/http/TestingUtils.java
rename to retrofit/src/test/java/retrofit/TestingUtils.java
index 91940816b..709b1bcb5 100644
--- a/retrofit/src/test/java/retrofit/http/TestingUtils.java
+++ b/retrofit/src/test/java/retrofit/TestingUtils.java
@@ -1,9 +1,10 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http;
+package retrofit;
 
 import java.lang.reflect.Method;
 import java.util.Map;
-import retrofit.http.mime.TypedOutput;
+import retrofit.mime.MultipartTypedOutput;
+import retrofit.mime.TypedOutput;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
diff --git a/retrofit/src/test/java/retrofit/http/client/ApacheClientTest.java b/retrofit/src/test/java/retrofit/client/ApacheClientTest.java
similarity index 93%
rename from retrofit/src/test/java/retrofit/http/client/ApacheClientTest.java
rename to retrofit/src/test/java/retrofit/client/ApacheClientTest.java
index d2f745b98..82e51fb96 100644
--- a/retrofit/src/test/java/retrofit/http/client/ApacheClientTest.java
+++ b/retrofit/src/test/java/retrofit/client/ApacheClientTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http.client;
+package retrofit.client;
 
 import com.google.common.io.ByteStreams;
 import java.util.ArrayList;
@@ -15,15 +15,14 @@
 import org.apache.http.message.BasicHttpResponse;
 import org.apache.http.message.BasicStatusLine;
 import org.junit.Test;
-import retrofit.http.Header;
-import retrofit.http.TestingUtils;
-import retrofit.http.mime.TypedOutput;
-import retrofit.http.mime.TypedString;
+import retrofit.TestingUtils;
+import retrofit.mime.TypedOutput;
+import retrofit.mime.TypedString;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static retrofit.http.TestingUtils.assertBytes;
-import static retrofit.http.TestingUtils.assertMultipart;
-import static retrofit.http.client.ApacheClient.TypedOutputEntity;
+import static retrofit.TestingUtils.assertBytes;
+import static retrofit.TestingUtils.assertMultipart;
+import static retrofit.client.ApacheClient.TypedOutputEntity;
 
 public class ApacheClientTest {
   private static final String HOST = "http://example.com";
diff --git a/retrofit/src/test/java/retrofit/http/client/DummyHttpUrlConnection.java b/retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/http/client/DummyHttpUrlConnection.java
rename to retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java
index f2f94e263..926e4b042 100644
--- a/retrofit/src/test/java/retrofit/http/client/DummyHttpUrlConnection.java
+++ b/retrofit/src/test/java/retrofit/client/DummyHttpUrlConnection.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http.client;
+package retrofit.client;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -13,7 +13,7 @@
 import java.util.Map;
 
 /**
- * Provides POJO behavior for all of the APIs {@link retrofit.http.client.UrlConnectionClient}
+ * Provides POJO behavior for all of the APIs {@link retrofit.client.UrlConnectionClient}
  * interacts with.
  */
 public class DummyHttpUrlConnection extends HttpURLConnection {
diff --git a/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java b/retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
similarity index 96%
rename from retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java
rename to retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
index ce2be4250..68fef779d 100644
--- a/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java
+++ b/retrofit/src/test/java/retrofit/client/UrlConnectionClientTest.java
@@ -1,5 +1,5 @@
 // Copyright 2013 Square, Inc.
-package retrofit.http.client;
+package retrofit.client;
 
 import com.google.common.io.ByteStreams;
 import java.io.ByteArrayInputStream;
@@ -10,13 +10,12 @@
 import java.util.List;
 import java.util.Map;
 import org.junit.Test;
-import retrofit.http.Header;
-import retrofit.http.TestingUtils;
-import retrofit.http.mime.TypedOutput;
-import retrofit.http.mime.TypedString;
+import retrofit.TestingUtils;
+import retrofit.mime.TypedOutput;
+import retrofit.mime.TypedString;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static retrofit.http.TestingUtils.assertBytes;
+import static retrofit.TestingUtils.assertBytes;
 
 public class UrlConnectionClientTest {
   private static final String HOST = "http://example.com";
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
new file mode 100644
index 000000000..a7a3914f9
--- /dev/null
+++ b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -0,0 +1,48 @@
+// Copyright 2013 Square, Inc.
+package retrofit.mime;
+
+import java.io.ByteArrayOutputStream;
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class FormUrlEncodingTypedOutputTest {
+  @Test public void urlEncoding() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("a&b", "c=d");
+    fe.addField("space, the", "final frontier");
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    fe.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo("a%26b=c%3Dd&space%2C+the=final+frontier");
+  }
+
+  @Test public void utf8encoding() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("ooɟ", "ɹɐq");
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    fe.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo("oo%C9%9F=%C9%B9%C9%90q");
+  }
+
+  @Test public void encodedPairs() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("sim", "ple");
+
+    ByteArrayOutputStream out1 = new ByteArrayOutputStream();
+    fe.writeTo(out1);
+    String actual1 = new String(out1.toByteArray(), "UTF-8");
+    assertThat(actual1).isEqualTo("sim=ple");
+
+    fe.addField("hey", "there");
+    fe.addField("help", "me");
+
+    ByteArrayOutputStream out2 = new ByteArrayOutputStream();
+    fe.writeTo(out2);
+    String actual2 = new String(out2.toByteArray(), "UTF-8");
+    assertThat(actual2).isEqualTo("sim=ple&hey=there&help=me");
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/mime/MimeHelper.java b/retrofit/src/test/java/retrofit/mime/MimeHelper.java
new file mode 100644
index 000000000..6b75aff5e
--- /dev/null
+++ b/retrofit/src/test/java/retrofit/mime/MimeHelper.java
@@ -0,0 +1,10 @@
+// Copyright 2013 Square, Inc.
+package retrofit.mime;
+
+import java.util.List;
+
+public class MimeHelper {
+  public static List<byte[]> getParts(MultipartTypedOutput output) {
+    return output.parts;
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/http/UtilsTest.java b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
similarity index 92%
rename from retrofit/src/test/java/retrofit/http/UtilsTest.java
rename to retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
index 5176f0230..03bce7fc9 100644
--- a/retrofit/src/test/java/retrofit/http/UtilsTest.java
+++ b/retrofit/src/test/java/retrofit/mime/MimeUtilTest.java
@@ -1,12 +1,12 @@
 // Copyright 2012 Square, Inc.
-package retrofit.http;
+package retrofit.mime;
 
 import org.junit.Test;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static retrofit.http.Utils.parseCharset;
+import static retrofit.mime.MimeUtil.parseCharset;
 
-public class UtilsTest {
+public class MimeUtilTest {
   @Test public void charsetParsing() {
     assertThat(parseCharset("text/plain;charset=utf-8")).isEqualToIgnoringCase("UTF-8");
     assertThat(parseCharset("text/plain; charset=utf-8")).isEqualToIgnoringCase("UTF-8");
diff --git a/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
new file mode 100644
index 000000000..11820ec4d
--- /dev/null
+++ b/retrofit/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
@@ -0,0 +1,67 @@
+// Copyright 2013 Square, Inc.
+package retrofit.mime;
+
+import java.io.ByteArrayOutputStream;
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class MultipartTypedOutputTest {
+  @Test public void singlePart() throws Exception {
+    String expected = "" //
+        + "--123\r\n"
+        + "Content-Disposition: form-data; name=\"greet\"\r\n"
+        + "Content-Type: text/plain; charset=UTF-8\r\n"
+        + "Content-Length: 13\r\n"
+        + "Content-Transfer-Encoding: binary\r\n" //
+        + "\r\n" //
+        + "Hello, World!\r\n" //
+        + "--123--";
+
+    MultipartTypedOutput mto = new MultipartTypedOutput("123");
+    mto.addPart("greet", new TypedString("Hello, World!"));
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    mto.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo(expected);
+    assertThat(mto.mimeType()).isEqualTo("multipart/form-data; boundary=123");
+  }
+
+  @Test public void threeParts() throws Exception {
+    String expected = ""
+        + "--123\r\n"
+        + "Content-Disposition: form-data; name=\"quick\"\r\n"
+        + "Content-Type: text/plain; charset=UTF-8\r\n"
+        + "Content-Length: 5\r\n"
+        + "Content-Transfer-Encoding: binary\r\n"
+        + "\r\n"
+        + "brown\r\n"
+        + "--123\r\n"
+        + "Content-Disposition: form-data; name=\"fox\"\r\n"
+        + "Content-Type: text/plain; charset=UTF-8\r\n"
+        + "Content-Length: 5\r\n"
+        + "Content-Transfer-Encoding: binary\r\n"
+        + "\r\n"
+        + "jumps\r\n"
+        + "--123\r\n"
+        + "Content-Disposition: form-data; name=\"lazy\"\r\n"
+        + "Content-Type: text/plain; charset=UTF-8\r\n"
+        + "Content-Length: 3\r\n"
+        + "Content-Transfer-Encoding: binary\r\n"
+        + "\r\n"
+        + "dog\r\n"
+        + "--123--";
+
+    MultipartTypedOutput mto = new MultipartTypedOutput("123");
+    mto.addPart("quick", new TypedString("brown"));
+    mto.addPart("fox", new TypedString("jumps"));
+    mto.addPart("lazy", new TypedString("dog"));
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    mto.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo(expected);
+    assertThat(mto.mimeType()).isEqualTo("multipart/form-data; boundary=123");
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/http/mime/TypedByteArrayTest.java b/retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
similarity index 95%
rename from retrofit/src/test/java/retrofit/http/mime/TypedByteArrayTest.java
rename to retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
index ab095261d..c6145e6b9 100644
--- a/retrofit/src/test/java/retrofit/http/mime/TypedByteArrayTest.java
+++ b/retrofit/src/test/java/retrofit/mime/TypedByteArrayTest.java
@@ -1,5 +1,5 @@
 // Copyright 2010 Square, Inc.
-package retrofit.http.mime;
+package retrofit.mime;
 
 import org.junit.Test;
 
diff --git a/retrofit/src/test/java/retrofit/http/mime/TypedFileTest.java b/retrofit/src/test/java/retrofit/mime/TypedFileTest.java
similarity index 98%
rename from retrofit/src/test/java/retrofit/http/mime/TypedFileTest.java
rename to retrofit/src/test/java/retrofit/mime/TypedFileTest.java
index cf0d9f66b..d9d114317 100644
--- a/retrofit/src/test/java/retrofit/http/mime/TypedFileTest.java
+++ b/retrofit/src/test/java/retrofit/mime/TypedFileTest.java
@@ -1,5 +1,5 @@
 // Copyright 2010 Square, Inc.
-package retrofit.http.mime;
+package retrofit.mime;
 
 import java.io.File;
 import java.io.FileOutputStream;
diff --git a/samples/github-client/pom.xml b/samples/github-client/pom.xml
index 9f75f6303..4f23c9caf 100644
--- a/samples/github-client/pom.xml
+++ b/samples/github-client/pom.xml
@@ -1,14 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.squareup.retrofit</groupId>
     <artifactId>samples</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
similarity index 52%
rename from samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java
rename to samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
index aa1fdd4e9..21085dfb4 100644
--- a/samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java
+++ b/samples/github-client/src/main/java/com/example/retrofit/GitHubClient.java
@@ -1,15 +1,29 @@
-// Copyright 2012 Square, Inc.
-package com.squareup.retrofit.sample.github;
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.retrofit;
 
 import java.util.List;
 import retrofit.http.GET;
-import retrofit.http.Name;
-import retrofit.http.RestAdapter;
+import retrofit.http.Path;
+import retrofit.RestAdapter;
 
-public class Client {
+public class GitHubClient {
   private static final String API_URL = "https://api.github.com";
 
-  class Contributor {
+  static class Contributor {
     String login;
     int contributions;
   }
@@ -17,8 +31,8 @@
   interface GitHub {
     @GET("/repos/{owner}/{repo}/contributors")
     List<Contributor> contributors(
-        @Name("owner") String owner,
-        @Name("repo") String repo
+        @Path("owner") String owner,
+        @Path("repo") String repo
     );
   }
 
diff --git a/samples/pom.xml b/samples/pom.xml
index 660a096d2..e599fea08 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -1,14 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>
 
   <parent>
     <groupId>com.squareup.retrofit</groupId>
     <artifactId>parent</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
+    <version>1.0.1</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/website/index.html b/website/index.html
new file mode 100644
index 000000000..2b46e883f
--- /dev/null
+++ b/website/index.html
@@ -0,0 +1,227 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="utf-8">
+    <title>Retrofit</title>
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <meta name="description" content="A type-safe REST client for Android and Java">
+    <link href="static/bootstrap-combined.min.css" rel="stylesheet">
+    <link href="static/app.css" rel="stylesheet">
+    <link href="static/app-theme.css" rel="stylesheet">
+    <link href="http://fonts.googleapis.com/css?family=Roboto:400,300italic,100,100italic,300" rel="stylesheet" type="text/css">
+    <!--[if lt IE 9]><script src="static/html5shiv.min.js"></script><![endif]-->
+  </head>
+  <body data-target=".content-nav">
+    <header>
+      <div class="container">
+        <div class="row">
+          <div class="span5">
+            <h1>Retrofit</h1>
+          </div>
+          <div class="span7">
+            <menu>
+              <ul>
+                <li><a href="#download" class="menu download">Download <span class="version-tag">Latest</span></a></li>
+                <li><a href="http://github.com/square/retrofit" data-title="View GitHub Project" class="menu github"><img src="static/icon-github.png" alt="GitHub"/></a></li>
+                <li><a href="http://square.github.io/" data-title="Square Open Source Portal" class="menu square"><img src="static/icon-square.png" alt="Square"/></a></li>
+              </ul>
+            </menu>
+          </div>
+      </div>
+    </header>
+    <section id="subtitle">
+      <div class="container">
+        <div class="row">
+          <div class="span12">
+            <h2>A type-safe <strong>REST client</strong> for Android and Java</h2>
+          </div>
+        </div>
+      </div>
+    </section>
+    <section id="body">
+      <div class="container">
+        <div class="row">
+          <div class="span9">
+            <h3 id="introduction">Introduction</h3>
+            <p>Retrofit turns your REST API into a Java interface.</p>
+            <pre class="prettyprint">public interface GitHubService {
+  @GET("/users/{user}/repos")
+  List&lt;Repo> listRepos(@Path("user") String user);
+}</pre>
+            <p>The <code>RestAdapter</code> class generates an implementation of the <code>GitHubService</code> interface.</p>
+            <pre class="prettyprint">GitHubService service = restAdapter.create(GitHubService.class);</pre>
+            <p>Each call on the generated <code>GitHubService</code> makes an HTTP request to the remote webserver.</p>
+            <pre class="prettyprint">List&lt;Repo> repos = service.listRepos("octocat");</pre>
+            <p>Use annotations to describe the HTTP request:</p>
+            <ul>
+              <li>URL paramater replacement and query parameter support</li>
+              <li>Object conversion to request body (e.g., JSON, protocol buffers)</li>
+              <li>Multipart request body and file upload</li>
+            </ul>
+
+            <h3 id="api-declaration">API Declaration</h3>
+            <p>Annotations on the interface methods and its parameters indicate how a request will be handled.</p>
+
+            <h4>Request Method</h4>
+            <p>Every method must have an HTTP annotation that provides the request method and relative URL. There are five built-in annotations: <code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>, and <code>HEAD</code>. The relative URL of the resource is specified in the annotation.</p>
+            <pre class="prettyprint">@GET("/users/list")</pre>
+            <p>You can also specify query parameters in the URL.</p>
+            <pre class="prettyprint">@GET("/users/list?sort=desc")</pre>
+            </pre>
+
+            <h4>URL Manipulation</h4>
+            <p>A request URL can be updated dynamically using replacement blocks and parameters on the method. A replacement block is an alphanumeric string surrounded by <code>{</code> and <code>}</code>. A corresponding parameter must be annotated with <code>@Path</code> using the same string.</p>
+            <pre class="prettyprint">@GET("/group/{id}/users")
+List&lt;User> groupList(@Path("id") int groupId);</pre>
+            <p>Query parameters can also be added.</p>
+            <pre class="prettyprint">@GET("/group/{id}/users")
+List&lt;User> groupList(@Path("id") int groupId, @Query("sort") String sort);</pre>
+
+            <h4>Request Body</h4>
+            <p>An object can be specified for use as an HTTP request body with the <code>@Body</code> annotation.</p>
+            <pre class="prettyprint">@POST("/users/new")
+void createUser(@Body User user, Callback&lt;User> cb);</pre>
+            <p>The object will also be converted using the <code>RestAdapter</code>'s converter.</p>
+
+            <h4>Form Encoded and Multipart</h4>
+            <p>Methods can also be declared to send form-encoded and multipart data.</p>
+            <p>Form-encoded data is sent when <code>@FormUrlEncoded</code> is present on the method. Each key-value pair is annotated with <code>@Field</code> containing the name and the object providing the value.</p>
+            <pre class="prettyprint">@FormUrlEncoded
+@POST("/user/edit")
+User updateUser(@Field("first_name") String first, @Field("last_name") String last);</pre>
+            <p>Multipart requests are used when <code>@Multipart</code> is present on the method. Parts are declared using the <code>@Part</code> annotation.</p>
+            <pre class="prettyprint">@Multipart
+@PUT("/user/photo")
+User updateUser(@Part("photo") TypedFile photo, @Part("description") TypedString description);</pre>
+            <p>Multipart parts use the <code>RestAdapter</code>'s converter or they can implement <code>TypedOutput</code> to handle their own serialization.</p>
+
+            <h4>Synchronous vs. Asynchronous</h4>
+            <p>Methods can be declared for either synchronous or asynchronous execution.</p>
+            <p>A method with a return type will be executed sychronously.</p>
+            <pre class="prettyprint">@GET("/user/{id}/photo")
+Photo listUsers(@Path("id") int id);</pre>
+            <p>Asynchronous execution requires the last parameter of the method be a <code>Callback</code>.</p>
+            <pre class="prettyprint">@GET("/user/{id}/photo")
+void listUsers(@Path("id") int id, Callback&lt;Photo> cb);</pre>
+            <p>On Android, the callbacks will be executed on the main thread. For desktop applications the callbacks will happen on the same thread that executed the HTTP request.</p>
+            
+            <h4>Response Object Type</h4>
+            <p>HTTP responses are automatically converted to a specified type using the <code>RestAdapter</code>'s converter which defaults to JSON. The desired type is declared as the method return type or using the <code>Callback</code>.
+            <pre class="prettyprint">@GET("/users/list")
+List&lt;User> userList();
+
+@GET("/users/list")
+void userList(Callback&lt;List&lt;User>> cb);</pre>
+            <p>For access to the raw HTTP response use the <code>Response</code> type.</p>
+            <pre class="prettyprint">@GET("/users/list")
+Response userList();
+
+@GET("/users/list")
+void userList(Callback&lt;Response> cb);</pre>
+
+            <!--<h3 id="restadapter-configuration">RestAdapter Configuration</h3>
+            <p><code>RestAdapter</code> is the class through which your API interfaces are turned into callable objects. By default, Retrofit will give you sane defaults for your platform but it allows for customization.</p>
+
+            <h4>Converter</h4>
+            <p>The converter is responsible for serializing and deserializing objects in HTTP. -->
+
+            <h3 id="download">Download</h3>
+            <p><a href="http://repository.sonatype.org/service/local/artifact/maven/redirect?r=central-proxy&g=com.squareup.retrofit&a=retrofit&v=LATEST" class="dl version-href">&darr; <span class="version-tag">Latest</span> JAR</a></p>
+            <p>The source code to the Retrofit, its samples, and this website is <a href="http://github.com/square/retrofit">available on GitHub</a>.</p>
+
+            <h4>Maven</h4>
+            <pre class="prettyprint">&lt;dependency>
+  &lt;groupId>com.squareup.retrofit&lt;/groupId>
+  &lt;artifactId>retrofit&lt;/artifactId>
+  &lt;version><span class="version pln"><em>(insert latest version)</em></span>&lt;/version>
+&lt;/dependency></pre>
+
+            <h3 id="contributing">Contributing</h3>
+            <p>If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request.</p>
+            <p>When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code compiles by running <code>mvn clean verify</code>.</p>
+            <p>Before your code can be accepted into the project you must also sign the <a href="http://squ.re/sign-the-cla">Individual Contributor License Agreement (CLA)</a>.</p>
+
+            <h3 id="license">License</h3>
+            <pre>Copyright 2013 Square, Inc.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.</pre>
+          </div>
+          <div class="span3">
+            <div class="content-nav" data-spy="affix" data-offset-top="80">
+              <ul class="nav nav-tabs nav-stacked primary">
+                <li><a href="#introduction">Introduction</a></li>
+                <li><a href="#api-declaration">API Declaration</a></li>
+                <!--<li><a href="#restadapter-configuration">RestAdapter Configuration</a></li>-->
+                <li><a href="#download">Download</a></li>
+                <li><a href="#contributing">Contributing</a></li>
+                <li><a href="#license">License</a></li>
+              </ul>
+              <ul class="nav nav-pills nav-stacked secondary">
+                <li><a href="javadoc/index.html">Javadoc</a></li>
+                <li><a href="https://plus.google.com/communities/109244258569782858265/stream/63e22a6d-b165-489a-92ab-d35f942beb5b">Google+ Community</a></li>
+              </ul>
+            </div>
+          </div>
+        </div>
+        <div class="row">
+          <div class="span12 logo">
+            <a href="https://squareup.com"><img src="static/logo-square.png" alt="Square, Inc."/></a>
+          </div>
+        </div>
+      </div>
+    </section>
+    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
+    <script src="static/bootstrap.min.js"></script>
+    <script src="static/jquery.smooth-scroll.min.js"></script>
+    <script src="static/jquery-maven-artifact.min.js"></script>
+    <script src="static/prettify.js"></script>
+    <script type="text/javascript">
+      $(function() {
+        // Syntax highlight code blocks.
+        prettyPrint();
+
+        // Spy on scroll position for real-time updating of current section.
+        $('body').scrollspy();
+        
+        // Use smooth-scroll for internal links.
+        $('a').smoothScroll();
+
+        // Enable tooltips on the header nav image items.
+        $('.menu').tooltip({
+          placement: 'bottom',
+          trigger: 'hover',
+          container: 'body',
+          delay: {
+            show: 500,
+            hide: 0
+          }
+        });
+
+        // Look up the latest version of the library.
+        $.fn.artifactVersion('com.squareup.retrofit', 'retrofit', function(version, url) {
+          $('.version').text(version);
+          $('.version-tag').text('v' + version);
+          $('.version-href').attr('href', url);
+        });
+      });
+
+      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
+      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
+      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
+      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
+
+      ga('create', 'UA-40704740-4', 'github.io');
+      ga('send', 'pageview');
+    </script>
+  </body>
+</html>
diff --git a/website/static/app-theme.css b/website/static/app-theme.css
new file mode 100644
index 000000000..dd6303559
--- /dev/null
+++ b/website/static/app-theme.css
@@ -0,0 +1,51 @@
+/* http://www.colorhexa.com/48b982 */
+
+/*** Primary ***/
+
+header,
+#subtitle,
+a.dl {
+  background-color: #48b983;
+}
+
+.content-nav li.active a,
+.content-nav li.active a:hover {
+  border-left-color: #48b983;
+}
+
+/*** One step left on the monochromatic scale ***/
+
+header menu li a:hover,
+a.dl:hover {
+  background-color: #40a776;
+}
+a {
+  color: #40a776;
+}
+
+/*** Three steps left on the monochromatic scale ***/
+
+a:hover {
+  color: #32835c;
+}
+
+
+/****************************************************************\
+ **** Syntax highlighting styles ********************************
+\****************************************************************/
+
+.pln { color: #000; }
+.str { color: #32835b; }
+.kwd { color: #666; }
+.com { color: #800; }
+.typ { color: #222; }
+.lit { color: #666; }
+.pun { color: #888; }
+.opn { color: #888; }
+.clo { color: #888; }
+.tag { color: #32835b; }
+.atn { color: #606; }
+.atv { color: #080; }
+.dec { color: #606; }
+.var { color: #606; }
+.fun { color: #f00; }
diff --git a/website/static/app.css b/website/static/app.css
new file mode 100644
index 000000000..e3574b739
--- /dev/null
+++ b/website/static/app.css
@@ -0,0 +1,188 @@
+html, body {
+  font-family: 'Roboto', sans-serif;
+  font-size: 15px;
+}
+body {
+  background-color: #f6f6f6;
+  padding-bottom: 50px;
+  padding-top: 80px;
+}
+
+header {
+  min-height: 80px;
+  color: #f6f6f6;
+  position: fixed;
+  top: 0;
+  left: 0;
+  width: 100%;
+  z-index: 99;
+}
+header h1 {
+  margin: 10px 0;
+  font-size: 50px;
+  line-height: 60px;
+  font-weight: 100;
+  text-rendering: auto;
+}
+header menu {
+  margin: 20px 0 0;
+  padding: 0;
+  height: 40px;
+}
+header menu ul {
+  margin: 0;
+  padding: 0;
+  float: right;
+}
+header menu li {
+  list-style: none;
+  float: left;
+  margin: 0;
+  padding: 0;
+}
+header menu li a {
+  display: inline-block;
+  height: 40px;
+  font-size: 17px;
+  line-height: 40px;
+  padding: 0 20px;
+  color: #f6f6f6;
+}
+header menu li a:hover {
+  color: #f6f6f6;
+  text-decoration: none;
+}
+header menu li a img {
+  margin: 0;
+  padding: 5px 0;
+  vertical-align: bottom;
+  width: 30px;
+  height: 30px;
+}
+
+#subtitle {
+  position: absolute;
+  top: 80px;
+  left: 0;
+  width: 100%;
+}
+h2 {
+  font-weight: 200;
+  font-size: 26px;
+  line-height: 30px;
+  padding: 15px 0;
+  margin: 0;
+  color: #eee;
+}
+h2 strong {
+  font-weight: 300;
+}
+
+a.dl {
+  font-weight: 300;
+  font-size: 30px;
+  line-height: 40px;
+  padding: 3px 10px;
+  display: inline-block;
+  border-radius: 6px;
+  color: #f0f0f0;
+  margin: 5px 0;
+}
+a.dl:hover {
+  color: #f0f0f0;
+  text-decoration: none;
+}
+
+.content-nav {
+  margin-top: 130px;
+  width: 220px;
+}
+.content-nav.affix {
+  top: 0;
+}
+.content-nav li.active a, .content-nav li.active a:hover {
+  background-color: transparent;
+  color: #555;
+  border-left-width: 2px;
+}
+.content-nav .secondary a {
+  color: #aaa;
+}
+.content-nav .secondary a:hover {
+  color: #888;
+}
+
+h3 {
+  font-weight: 300;
+  font-style: italic;
+  color: #888;
+  font-size: 20px;
+  padding-top: 115px;
+  margin-top: 0;
+}
+
+h4 {
+  font-weight: 400;
+  text-transform: uppercase;
+  color: #888;
+  font-size: 15px;
+  padding-top: 20px;
+}
+
+p.license {
+  font-family: fixed-width;
+}
+
+.row .logo {
+  text-align: center;
+  margin-top: 150px;
+}
+.row .logo img {
+  height: 30px;
+}
+
+pre, code {
+  color: #666;
+}
+code {
+  border: 0;
+  background-color: transparent;
+}
+
+/* Widescreen desktop. */
+@media (min-width: 1200px) {
+  .content-nav {
+    width: 270px;
+  }
+}
+
+/* Smaller width browser, tablets. */
+@media (max-width: 979px) {
+  .content-nav {
+    width: 166px;
+  }
+}
+
+/* One-column mobile display. */
+@media (max-width: 767px) {
+  header {
+    position: absolute;
+    top: 0;
+    left: 0;
+    width: 100%;
+    padding-left: 20px;
+  }
+  header menu {
+    display: none;
+  }
+  #subtitle {
+    position: absolute;
+    top: 80px;
+    left: 0;
+    width: 100%;
+    padding-left: 20px;
+  }
+  .content-nav {
+    display: none;
+  }
+}
\ No newline at end of file
diff --git a/website/static/bootstrap-combined.min.css b/website/static/bootstrap-combined.min.css
new file mode 100644
index 000000000..1334dfa69
--- /dev/null
+++ b/website/static/bootstrap-combined.min.css
@@ -0,0 +1,18 @@
+/*!
+ * Bootstrap v2.3.1
+ *
+ * Copyright 2012 Twitter, Inc
+ * Licensed under the Apache License v2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Designed and built with all the love in the world @twitter by @mdo and @fat.
+ */.clearfix{*zoom:1}.clearfix:before,.clearfix:after{display:table;line-height:0;content:""}.clearfix:after{clear:both}.hide-text{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.input-block-level{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}a:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}a:hover,a:active{outline:0}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{width:auto\9;height:auto;max-width:100%;vertical-align:middle;border:0;-ms-interpolation-mode:bicubic}#map_canvas img,.google-maps img{max-width:none}button,input,select,textarea{margin:0;font-size:100%;vertical-align:middle}button,input{*overflow:visible;line-height:normal}button::-moz-focus-inner,input::-moz-focus-inner{padding:0;border:0}button,html input[type="button"],input[type="reset"],input[type="submit"]{cursor:pointer;-webkit-appearance:button}label,select,button,input[type="button"],input[type="reset"],input[type="submit"],input[type="radio"],input[type="checkbox"]{cursor:pointer}input[type="search"]{-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;-webkit-appearance:textfield}input[type="search"]::-webkit-search-decoration,input[type="search"]::-webkit-search-cancel-button{-webkit-appearance:none}textarea{overflow:auto;vertical-align:top}@media print{*{color:#000!important;text-shadow:none!important;background:transparent!important;box-shadow:none!important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}.ir a:after,a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100%!important}@page{margin:.5cm}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}}body{margin:0;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:20px;color:#333;background-color:#fff}a{color:#08c;text-decoration:none}a:hover,a:focus{color:#005580;text-decoration:underline}.img-rounded{-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.img-polaroid{padding:4px;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.1);-moz-box-shadow:0 1px 3px rgba(0,0,0,0.1);box-shadow:0 1px 3px rgba(0,0,0,0.1)}.img-circle{-webkit-border-radius:500px;-moz-border-radius:500px;border-radius:500px}.row{margin-left:-20px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:20px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:940px}.span12{width:940px}.span11{width:860px}.span10{width:780px}.span9{width:700px}.span8{width:620px}.span7{width:540px}.span6{width:460px}.span5{width:380px}.span4{width:300px}.span3{width:220px}.span2{width:140px}.span1{width:60px}.offset12{margin-left:980px}.offset11{margin-left:900px}.offset10{margin-left:820px}.offset9{margin-left:740px}.offset8{margin-left:660px}.offset7{margin-left:580px}.offset6{margin-left:500px}.offset5{margin-left:420px}.offset4{margin-left:340px}.offset3{margin-left:260px}.offset2{margin-left:180px}.offset1{margin-left:100px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.127659574468085%;*margin-left:2.074468085106383%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .controls-row [class*="span"]+[class*="span"]{margin-left:2.127659574468085%}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.48936170212765%;*width:91.43617021276594%}.row-fluid .span10{width:82.97872340425532%;*width:82.92553191489361%}.row-fluid .span9{width:74.46808510638297%;*width:74.41489361702126%}.row-fluid .span8{width:65.95744680851064%;*width:65.90425531914893%}.row-fluid .span7{width:57.44680851063829%;*width:57.39361702127659%}.row-fluid .span6{width:48.93617021276595%;*width:48.88297872340425%}.row-fluid .span5{width:40.42553191489362%;*width:40.37234042553192%}.row-fluid .span4{width:31.914893617021278%;*width:31.861702127659576%}.row-fluid .span3{width:23.404255319148934%;*width:23.351063829787233%}.row-fluid .span2{width:14.893617021276595%;*width:14.840425531914894%}.row-fluid .span1{width:6.382978723404255%;*width:6.329787234042553%}.row-fluid .offset12{margin-left:104.25531914893617%;*margin-left:104.14893617021275%}.row-fluid .offset12:first-child{margin-left:102.12765957446808%;*margin-left:102.02127659574467%}.row-fluid .offset11{margin-left:95.74468085106382%;*margin-left:95.6382978723404%}.row-fluid .offset11:first-child{margin-left:93.61702127659574%;*margin-left:93.51063829787232%}.row-fluid .offset10{margin-left:87.23404255319149%;*margin-left:87.12765957446807%}.row-fluid .offset10:first-child{margin-left:85.1063829787234%;*margin-left:84.99999999999999%}.row-fluid .offset9{margin-left:78.72340425531914%;*margin-left:78.61702127659572%}.row-fluid .offset9:first-child{margin-left:76.59574468085106%;*margin-left:76.48936170212764%}.row-fluid .offset8{margin-left:70.2127659574468%;*margin-left:70.10638297872339%}.row-fluid .offset8:first-child{margin-left:68.08510638297872%;*margin-left:67.9787234042553%}.row-fluid .offset7{margin-left:61.70212765957446%;*margin-left:61.59574468085106%}.row-fluid .offset7:first-child{margin-left:59.574468085106375%;*margin-left:59.46808510638297%}.row-fluid .offset6{margin-left:53.191489361702125%;*margin-left:53.085106382978715%}.row-fluid .offset6:first-child{margin-left:51.063829787234035%;*margin-left:50.95744680851063%}.row-fluid .offset5{margin-left:44.68085106382979%;*margin-left:44.57446808510638%}.row-fluid .offset5:first-child{margin-left:42.5531914893617%;*margin-left:42.4468085106383%}.row-fluid .offset4{margin-left:36.170212765957444%;*margin-left:36.06382978723405%}.row-fluid .offset4:first-child{margin-left:34.04255319148936%;*margin-left:33.93617021276596%}.row-fluid .offset3{margin-left:27.659574468085104%;*margin-left:27.5531914893617%}.row-fluid .offset3:first-child{margin-left:25.53191489361702%;*margin-left:25.425531914893618%}.row-fluid .offset2{margin-left:19.148936170212764%;*margin-left:19.04255319148936%}.row-fluid .offset2:first-child{margin-left:17.02127659574468%;*margin-left:16.914893617021278%}.row-fluid .offset1{margin-left:10.638297872340425%;*margin-left:10.53191489361702%}.row-fluid .offset1:first-child{margin-left:8.51063829787234%;*margin-left:8.404255319148938%}[class*="span"].hide,.row-fluid [class*="span"].hide{display:none}[class*="span"].pull-right,.row-fluid [class*="span"].pull-right{float:right}.container{margin-right:auto;margin-left:auto;*zoom:1}.container:before,.container:after{display:table;line-height:0;content:""}.container:after{clear:both}.container-fluid{padding-right:20px;padding-left:20px;*zoom:1}.container-fluid:before,.container-fluid:after{display:table;line-height:0;content:""}.container-fluid:after{clear:both}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:21px;font-weight:200;line-height:30px}small{font-size:85%}strong{font-weight:bold}em{font-style:italic}cite{font-style:normal}.muted{color:#999}a.muted:hover,a.muted:focus{color:#808080}.text-warning{color:#c09853}a.text-warning:hover,a.text-warning:focus{color:#a47e3c}.text-error{color:#b94a48}a.text-error:hover,a.text-error:focus{color:#953b39}.text-info{color:#3a87ad}a.text-info:hover,a.text-info:focus{color:#2d6987}.text-success{color:#468847}a.text-success:hover,a.text-success:focus{color:#356635}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}h1,h2,h3,h4,h5,h6{margin:10px 0;font-family:inherit;font-weight:bold;line-height:20px;color:inherit;text-rendering:optimizelegibility}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small{font-weight:normal;line-height:1;color:#999}h1,h2,h3{line-height:40px}h1{font-size:38.5px}h2{font-size:31.5px}h3{font-size:24.5px}h4{font-size:17.5px}h5{font-size:14px}h6{font-size:11.9px}h1 small{font-size:24.5px}h2 small{font-size:17.5px}h3 small{font-size:14px}h4 small{font-size:14px}.page-header{padding-bottom:9px;margin:20px 0 30px;border-bottom:1px solid #eee}ul,ol{padding:0;margin:0 0 10px 25px}ul ul,ul ol,ol ol,ol ul{margin-bottom:0}li{line-height:20px}ul.unstyled,ol.unstyled{margin-left:0;list-style:none}ul.inline,ol.inline{margin-left:0;list-style:none}ul.inline>li,ol.inline>li{display:inline-block;*display:inline;padding-right:5px;padding-left:5px;*zoom:1}dl{margin-bottom:20px}dt,dd{line-height:20px}dt{font-weight:bold}dd{margin-left:10px}.dl-horizontal{*zoom:1}.dl-horizontal:before,.dl-horizontal:after{display:table;line-height:0;content:""}.dl-horizontal:after{clear:both}.dl-horizontal dt{float:left;width:160px;overflow:hidden;clear:left;text-align:right;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}hr{margin:20px 0;border:0;border-top:1px solid #eee;border-bottom:1px solid #fff}abbr[title],abbr[data-original-title]{cursor:help;border-bottom:1px dotted #999}abbr.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:0 0 0 15px;margin:0 0 20px;border-left:5px solid #eee}blockquote p{margin-bottom:0;font-size:17.5px;font-weight:300;line-height:1.25}blockquote small{display:block;line-height:20px;color:#999}blockquote small:before{content:'\2014 \00A0'}blockquote.pull-right{float:right;padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0}blockquote.pull-right p,blockquote.pull-right small{text-align:right}blockquote.pull-right small:before{content:''}blockquote.pull-right small:after{content:'\00A0 \2014'}q:before,q:after,blockquote:before,blockquote:after{content:""}address{display:block;margin-bottom:20px;font-style:normal;line-height:20px}code,pre{padding:0 3px 2px;font-family:Monaco,Menlo,Consolas,"Courier New",monospace;font-size:12px;color:#333;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}code{padding:2px 4px;color:#d14;white-space:nowrap;background-color:#f7f7f9;border:1px solid #e1e1e8}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:20px;word-break:break-all;word-wrap:break-word;white-space:pre;white-space:pre-wrap;background-color:#f5f5f5;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}pre.prettyprint{margin-bottom:20px}pre code{padding:0;color:inherit;white-space:pre;white-space:pre-wrap;background-color:transparent;border:0}.pre-scrollable{max-height:340px;overflow-y:scroll}form{margin:0 0 20px}fieldset{padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:40px;color:#333;border:0;border-bottom:1px solid #e5e5e5}legend small{font-size:15px;color:#999}label,input,button,select,textarea{font-size:14px;font-weight:normal;line-height:20px}input,button,select,textarea{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif}label{display:block;margin-bottom:5px}select,textarea,input[type="text"],input[type="password"],input[type="datetime"],input[type="datetime-local"],input[type="date"],input[type="month"],input[type="time"],input[type="week"],input[type="number"],input[type="email"],input[type="url"],input[type="search"],input[type="tel"],input[type="color"],.uneditable-input{display:inline-block;height:20px;padding:4px 6px;margin-bottom:10px;font-size:14px;line-height:20px;color:#555;vertical-align:middle;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}input,textarea,.uneditable-input{width:206px}textarea{height:auto}textarea,input[type="text"],input[type="password"],input[type="datetime"],input[type="datetime-local"],input[type="date"],input[type="month"],input[type="time"],input[type="week"],input[type="number"],input[type="email"],input[type="url"],input[type="search"],input[type="tel"],input[type="color"],.uneditable-input{background-color:#fff;border:1px solid #ccc;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border linear .2s,box-shadow linear .2s;-moz-transition:border linear .2s,box-shadow linear .2s;-o-transition:border linear .2s,box-shadow linear .2s;transition:border linear .2s,box-shadow linear .2s}textarea:focus,input[type="text"]:focus,input[type="password"]:focus,input[type="datetime"]:focus,input[type="datetime-local"]:focus,input[type="date"]:focus,input[type="month"]:focus,input[type="time"]:focus,input[type="week"]:focus,input[type="number"]:focus,input[type="email"]:focus,input[type="url"]:focus,input[type="search"]:focus,input[type="tel"]:focus,input[type="color"]:focus,.uneditable-input:focus{border-color:rgba(82,168,236,0.8);outline:0;outline:thin dotted \9;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 8px rgba(82,168,236,0.6)}input[type="radio"],input[type="checkbox"]{margin:4px 0 0;margin-top:1px \9;*margin-top:0;line-height:normal}input[type="file"],input[type="image"],input[type="submit"],input[type="reset"],input[type="button"],input[type="radio"],input[type="checkbox"]{width:auto}select,input[type="file"]{height:30px;*margin-top:4px;line-height:30px}select{width:220px;background-color:#fff;border:1px solid #ccc}select[multiple],select[size]{height:auto}select:focus,input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.uneditable-input,.uneditable-textarea{color:#999;cursor:not-allowed;background-color:#fcfcfc;border-color:#ccc;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.025);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.025);box-shadow:inset 0 1px 2px rgba(0,0,0,0.025)}.uneditable-input{overflow:hidden;white-space:nowrap}.uneditable-textarea{width:auto;height:auto}input:-moz-placeholder,textarea:-moz-placeholder{color:#999}input:-ms-input-placeholder,textarea:-ms-input-placeholder{color:#999}input::-webkit-input-placeholder,textarea::-webkit-input-placeholder{color:#999}.radio,.checkbox{min-height:20px;padding-left:20px}.radio input[type="radio"],.checkbox input[type="checkbox"]{float:left;margin-left:-20px}.controls>.radio:first-child,.controls>.checkbox:first-child{padding-top:5px}.radio.inline,.checkbox.inline{display:inline-block;padding-top:5px;margin-bottom:0;vertical-align:middle}.radio.inline+.radio.inline,.checkbox.inline+.checkbox.inline{margin-left:10px}.input-mini{width:60px}.input-small{width:90px}.input-medium{width:150px}.input-large{width:210px}.input-xlarge{width:270px}.input-xxlarge{width:530px}input[class*="span"],select[class*="span"],textarea[class*="span"],.uneditable-input[class*="span"],.row-fluid input[class*="span"],.row-fluid select[class*="span"],.row-fluid textarea[class*="span"],.row-fluid .uneditable-input[class*="span"]{float:none;margin-left:0}.input-append input[class*="span"],.input-append .uneditable-input[class*="span"],.input-prepend input[class*="span"],.input-prepend .uneditable-input[class*="span"],.row-fluid input[class*="span"],.row-fluid select[class*="span"],.row-fluid textarea[class*="span"],.row-fluid .uneditable-input[class*="span"],.row-fluid .input-prepend [class*="span"],.row-fluid .input-append [class*="span"]{display:inline-block}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:20px}input.span12,textarea.span12,.uneditable-input.span12{width:926px}input.span11,textarea.span11,.uneditable-input.span11{width:846px}input.span10,textarea.span10,.uneditable-input.span10{width:766px}input.span9,textarea.span9,.uneditable-input.span9{width:686px}input.span8,textarea.span8,.uneditable-input.span8{width:606px}input.span7,textarea.span7,.uneditable-input.span7{width:526px}input.span6,textarea.span6,.uneditable-input.span6{width:446px}input.span5,textarea.span5,.uneditable-input.span5{width:366px}input.span4,textarea.span4,.uneditable-input.span4{width:286px}input.span3,textarea.span3,.uneditable-input.span3{width:206px}input.span2,textarea.span2,.uneditable-input.span2{width:126px}input.span1,textarea.span1,.uneditable-input.span1{width:46px}.controls-row{*zoom:1}.controls-row:before,.controls-row:after{display:table;line-height:0;content:""}.controls-row:after{clear:both}.controls-row [class*="span"],.row-fluid .controls-row [class*="span"]{float:left}.controls-row .checkbox[class*="span"],.controls-row .radio[class*="span"]{padding-top:5px}input[disabled],select[disabled],textarea[disabled],input[readonly],select[readonly],textarea[readonly]{cursor:not-allowed;background-color:#eee}input[type="radio"][disabled],input[type="checkbox"][disabled],input[type="radio"][readonly],input[type="checkbox"][readonly]{background-color:transparent}.control-group.warning .control-label,.control-group.warning .help-block,.control-group.warning .help-inline{color:#c09853}.control-group.warning .checkbox,.control-group.warning .radio,.control-group.warning input,.control-group.warning select,.control-group.warning textarea{color:#c09853}.control-group.warning input,.control-group.warning select,.control-group.warning textarea{border-color:#c09853;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.warning input:focus,.control-group.warning select:focus,.control-group.warning textarea:focus{border-color:#a47e3c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #dbc59e}.control-group.warning .input-prepend .add-on,.control-group.warning .input-append .add-on{color:#c09853;background-color:#fcf8e3;border-color:#c09853}.control-group.error .control-label,.control-group.error .help-block,.control-group.error .help-inline{color:#b94a48}.control-group.error .checkbox,.control-group.error .radio,.control-group.error input,.control-group.error select,.control-group.error textarea{color:#b94a48}.control-group.error input,.control-group.error select,.control-group.error textarea{border-color:#b94a48;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.error input:focus,.control-group.error select:focus,.control-group.error textarea:focus{border-color:#953b39;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #d59392}.control-group.error .input-prepend .add-on,.control-group.error .input-append .add-on{color:#b94a48;background-color:#f2dede;border-color:#b94a48}.control-group.success .control-label,.control-group.success .help-block,.control-group.success .help-inline{color:#468847}.control-group.success .checkbox,.control-group.success .radio,.control-group.success input,.control-group.success select,.control-group.success textarea{color:#468847}.control-group.success input,.control-group.success select,.control-group.success textarea{border-color:#468847;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.success input:focus,.control-group.success select:focus,.control-group.success textarea:focus{border-color:#356635;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7aba7b}.control-group.success .input-prepend .add-on,.control-group.success .input-append .add-on{color:#468847;background-color:#dff0d8;border-color:#468847}.control-group.info .control-label,.control-group.info .help-block,.control-group.info .help-inline{color:#3a87ad}.control-group.info .checkbox,.control-group.info .radio,.control-group.info input,.control-group.info select,.control-group.info textarea{color:#3a87ad}.control-group.info input,.control-group.info select,.control-group.info textarea{border-color:#3a87ad;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.control-group.info input:focus,.control-group.info select:focus,.control-group.info textarea:focus{border-color:#2d6987;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3;-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #7ab5d3}.control-group.info .input-prepend .add-on,.control-group.info .input-append .add-on{color:#3a87ad;background-color:#d9edf7;border-color:#3a87ad}input:focus:invalid,textarea:focus:invalid,select:focus:invalid{color:#b94a48;border-color:#ee5f5b}input:focus:invalid:focus,textarea:focus:invalid:focus,select:focus:invalid:focus{border-color:#e9322d;-webkit-box-shadow:0 0 6px #f8b9b7;-moz-box-shadow:0 0 6px #f8b9b7;box-shadow:0 0 6px #f8b9b7}.form-actions{padding:19px 20px 20px;margin-top:20px;margin-bottom:20px;background-color:#f5f5f5;border-top:1px solid #e5e5e5;*zoom:1}.form-actions:before,.form-actions:after{display:table;line-height:0;content:""}.form-actions:after{clear:both}.help-block,.help-inline{color:#595959}.help-block{display:block;margin-bottom:10px}.help-inline{display:inline-block;*display:inline;padding-left:5px;vertical-align:middle;*zoom:1}.input-append,.input-prepend{display:inline-block;margin-bottom:10px;font-size:0;white-space:nowrap;vertical-align:middle}.input-append input,.input-prepend input,.input-append select,.input-prepend select,.input-append .uneditable-input,.input-prepend .uneditable-input,.input-append .dropdown-menu,.input-prepend .dropdown-menu,.input-append .popover,.input-prepend .popover{font-size:14px}.input-append input,.input-prepend input,.input-append select,.input-prepend select,.input-append .uneditable-input,.input-prepend .uneditable-input{position:relative;margin-bottom:0;*margin-left:0;vertical-align:top;-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.input-append input:focus,.input-prepend input:focus,.input-append select:focus,.input-prepend select:focus,.input-append .uneditable-input:focus,.input-prepend .uneditable-input:focus{z-index:2}.input-append .add-on,.input-prepend .add-on{display:inline-block;width:auto;height:20px;min-width:16px;padding:4px 5px;font-size:14px;font-weight:normal;line-height:20px;text-align:center;text-shadow:0 1px 0 #fff;background-color:#eee;border:1px solid #ccc}.input-append .add-on,.input-prepend .add-on,.input-append .btn,.input-prepend .btn,.input-append .btn-group>.dropdown-toggle,.input-prepend .btn-group>.dropdown-toggle{vertical-align:top;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.input-append .active,.input-prepend .active{background-color:#a9dba9;border-color:#46a546}.input-prepend .add-on,.input-prepend .btn{margin-right:-1px}.input-prepend .add-on:first-child,.input-prepend .btn:first-child{-webkit-border-radius:4px 0 0 4px;-moz-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px}.input-append input,.input-append select,.input-append .uneditable-input{-webkit-border-radius:4px 0 0 4px;-moz-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px}.input-append input+.btn-group .btn:last-child,.input-append select+.btn-group .btn:last-child,.input-append .uneditable-input+.btn-group .btn:last-child{-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.input-append .add-on,.input-append .btn,.input-append .btn-group{margin-left:-1px}.input-append .add-on:last-child,.input-append .btn:last-child,.input-append .btn-group:last-child>.dropdown-toggle{-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.input-prepend.input-append input,.input-prepend.input-append select,.input-prepend.input-append .uneditable-input{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.input-prepend.input-append input+.btn-group .btn,.input-prepend.input-append select+.btn-group .btn,.input-prepend.input-append .uneditable-input+.btn-group .btn{-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.input-prepend.input-append .add-on:first-child,.input-prepend.input-append .btn:first-child{margin-right:-1px;-webkit-border-radius:4px 0 0 4px;-moz-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px}.input-prepend.input-append .add-on:last-child,.input-prepend.input-append .btn:last-child{margin-left:-1px;-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.input-prepend.input-append .btn-group:first-child{margin-left:0}input.search-query{padding-right:14px;padding-right:4px \9;padding-left:14px;padding-left:4px \9;margin-bottom:0;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.form-search .input-append .search-query,.form-search .input-prepend .search-query{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.form-search .input-append .search-query{-webkit-border-radius:14px 0 0 14px;-moz-border-radius:14px 0 0 14px;border-radius:14px 0 0 14px}.form-search .input-append .btn{-webkit-border-radius:0 14px 14px 0;-moz-border-radius:0 14px 14px 0;border-radius:0 14px 14px 0}.form-search .input-prepend .search-query{-webkit-border-radius:0 14px 14px 0;-moz-border-radius:0 14px 14px 0;border-radius:0 14px 14px 0}.form-search .input-prepend .btn{-webkit-border-radius:14px 0 0 14px;-moz-border-radius:14px 0 0 14px;border-radius:14px 0 0 14px}.form-search input,.form-inline input,.form-horizontal input,.form-search textarea,.form-inline textarea,.form-horizontal textarea,.form-search select,.form-inline select,.form-horizontal select,.form-search .help-inline,.form-inline .help-inline,.form-horizontal .help-inline,.form-search .uneditable-input,.form-inline .uneditable-input,.form-horizontal .uneditable-input,.form-search .input-prepend,.form-inline .input-prepend,.form-horizontal .input-prepend,.form-search .input-append,.form-inline .input-append,.form-horizontal .input-append{display:inline-block;*display:inline;margin-bottom:0;vertical-align:middle;*zoom:1}.form-search .hide,.form-inline .hide,.form-horizontal .hide{display:none}.form-search label,.form-inline label,.form-search .btn-group,.form-inline .btn-group{display:inline-block}.form-search .input-append,.form-inline .input-append,.form-search .input-prepend,.form-inline .input-prepend{margin-bottom:0}.form-search .radio,.form-search .checkbox,.form-inline .radio,.form-inline .checkbox{padding-left:0;margin-bottom:0;vertical-align:middle}.form-search .radio input[type="radio"],.form-search .checkbox input[type="checkbox"],.form-inline .radio input[type="radio"],.form-inline .checkbox input[type="checkbox"]{float:left;margin-right:3px;margin-left:0}.control-group{margin-bottom:10px}legend+.control-group{margin-top:20px;-webkit-margin-top-collapse:separate}.form-horizontal .control-group{margin-bottom:20px;*zoom:1}.form-horizontal .control-group:before,.form-horizontal .control-group:after{display:table;line-height:0;content:""}.form-horizontal .control-group:after{clear:both}.form-horizontal .control-label{float:left;width:160px;padding-top:5px;text-align:right}.form-horizontal .controls{*display:inline-block;*padding-left:20px;margin-left:180px;*margin-left:0}.form-horizontal .controls:first-child{*padding-left:180px}.form-horizontal .help-block{margin-bottom:0}.form-horizontal input+.help-block,.form-horizontal select+.help-block,.form-horizontal textarea+.help-block,.form-horizontal .uneditable-input+.help-block,.form-horizontal .input-prepend+.help-block,.form-horizontal .input-append+.help-block{margin-top:10px}.form-horizontal .form-actions{padding-left:180px}table{max-width:100%;background-color:transparent;border-collapse:collapse;border-spacing:0}.table{width:100%;margin-bottom:20px}.table th,.table td{padding:8px;line-height:20px;text-align:left;vertical-align:top;border-top:1px solid #ddd}.table th{font-weight:bold}.table thead th{vertical-align:bottom}.table caption+thead tr:first-child th,.table caption+thead tr:first-child td,.table colgroup+thead tr:first-child th,.table colgroup+thead tr:first-child td,.table thead:first-child tr:first-child th,.table thead:first-child tr:first-child td{border-top:0}.table tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed th,.table-condensed td{padding:4px 5px}.table-bordered{border:1px solid #ddd;border-collapse:separate;*border-collapse:collapse;border-left:0;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.table-bordered th,.table-bordered td{border-left:1px solid #ddd}.table-bordered caption+thead tr:first-child th,.table-bordered caption+tbody tr:first-child th,.table-bordered caption+tbody tr:first-child td,.table-bordered colgroup+thead tr:first-child th,.table-bordered colgroup+tbody tr:first-child th,.table-bordered colgroup+tbody tr:first-child td,.table-bordered thead:first-child tr:first-child th,.table-bordered tbody:first-child tr:first-child th,.table-bordered tbody:first-child tr:first-child td{border-top:0}.table-bordered thead:first-child tr:first-child>th:first-child,.table-bordered tbody:first-child tr:first-child>td:first-child,.table-bordered tbody:first-child tr:first-child>th:first-child{-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topleft:4px}.table-bordered thead:first-child tr:first-child>th:last-child,.table-bordered tbody:first-child tr:first-child>td:last-child,.table-bordered tbody:first-child tr:first-child>th:last-child{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-moz-border-radius-topright:4px}.table-bordered thead:last-child tr:last-child>th:first-child,.table-bordered tbody:last-child tr:last-child>td:first-child,.table-bordered tbody:last-child tr:last-child>th:first-child,.table-bordered tfoot:last-child tr:last-child>td:first-child,.table-bordered tfoot:last-child tr:last-child>th:first-child{-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-moz-border-radius-bottomleft:4px}.table-bordered thead:last-child tr:last-child>th:last-child,.table-bordered tbody:last-child tr:last-child>td:last-child,.table-bordered tbody:last-child tr:last-child>th:last-child,.table-bordered tfoot:last-child tr:last-child>td:last-child,.table-bordered tfoot:last-child tr:last-child>th:last-child{-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-moz-border-radius-bottomright:4px}.table-bordered tfoot+tbody:last-child tr:last-child td:first-child{-webkit-border-bottom-left-radius:0;border-bottom-left-radius:0;-moz-border-radius-bottomleft:0}.table-bordered tfoot+tbody:last-child tr:last-child td:last-child{-webkit-border-bottom-right-radius:0;border-bottom-right-radius:0;-moz-border-radius-bottomright:0}.table-bordered caption+thead tr:first-child th:first-child,.table-bordered caption+tbody tr:first-child td:first-child,.table-bordered colgroup+thead tr:first-child th:first-child,.table-bordered colgroup+tbody tr:first-child td:first-child{-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topleft:4px}.table-bordered caption+thead tr:first-child th:last-child,.table-bordered caption+tbody tr:first-child td:last-child,.table-bordered colgroup+thead tr:first-child th:last-child,.table-bordered colgroup+tbody tr:first-child td:last-child{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-moz-border-radius-topright:4px}.table-striped tbody>tr:nth-child(odd)>td,.table-striped tbody>tr:nth-child(odd)>th{background-color:#f9f9f9}.table-hover tbody tr:hover>td,.table-hover tbody tr:hover>th{background-color:#f5f5f5}table td[class*="span"],table th[class*="span"],.row-fluid table td[class*="span"],.row-fluid table th[class*="span"]{display:table-cell;float:none;margin-left:0}.table td.span1,.table th.span1{float:none;width:44px;margin-left:0}.table td.span2,.table th.span2{float:none;width:124px;margin-left:0}.table td.span3,.table th.span3{float:none;width:204px;margin-left:0}.table td.span4,.table th.span4{float:none;width:284px;margin-left:0}.table td.span5,.table th.span5{float:none;width:364px;margin-left:0}.table td.span6,.table th.span6{float:none;width:444px;margin-left:0}.table td.span7,.table th.span7{float:none;width:524px;margin-left:0}.table td.span8,.table th.span8{float:none;width:604px;margin-left:0}.table td.span9,.table th.span9{float:none;width:684px;margin-left:0}.table td.span10,.table th.span10{float:none;width:764px;margin-left:0}.table td.span11,.table th.span11{float:none;width:844px;margin-left:0}.table td.span12,.table th.span12{float:none;width:924px;margin-left:0}.table tbody tr.success>td{background-color:#dff0d8}.table tbody tr.error>td{background-color:#f2dede}.table tbody tr.warning>td{background-color:#fcf8e3}.table tbody tr.info>td{background-color:#d9edf7}.table-hover tbody tr.success:hover>td{background-color:#d0e9c6}.table-hover tbody tr.error:hover>td{background-color:#ebcccc}.table-hover tbody tr.warning:hover>td{background-color:#faf2cc}.table-hover tbody tr.info:hover>td{background-color:#c4e3f3}[class^="icon-"],[class*=" icon-"]{display:inline-block;width:14px;height:14px;margin-top:1px;*margin-right:.3em;line-height:14px;vertical-align:text-top;background-image:url("../img/glyphicons-halflings.png");background-position:14px 14px;background-repeat:no-repeat}.icon-white,.nav-pills>.active>a>[class^="icon-"],.nav-pills>.active>a>[class*=" icon-"],.nav-list>.active>a>[class^="icon-"],.nav-list>.active>a>[class*=" icon-"],.navbar-inverse .nav>.active>a>[class^="icon-"],.navbar-inverse .nav>.active>a>[class*=" icon-"],.dropdown-menu>li>a:hover>[class^="icon-"],.dropdown-menu>li>a:focus>[class^="icon-"],.dropdown-menu>li>a:hover>[class*=" icon-"],.dropdown-menu>li>a:focus>[class*=" icon-"],.dropdown-menu>.active>a>[class^="icon-"],.dropdown-menu>.active>a>[class*=" icon-"],.dropdown-submenu:hover>a>[class^="icon-"],.dropdown-submenu:focus>a>[class^="icon-"],.dropdown-submenu:hover>a>[class*=" icon-"],.dropdown-submenu:focus>a>[class*=" icon-"]{background-image:url("../img/glyphicons-halflings-white.png")}.icon-glass{background-position:0 0}.icon-music{background-position:-24px 0}.icon-search{background-position:-48px 0}.icon-envelope{background-position:-72px 0}.icon-heart{background-position:-96px 0}.icon-star{background-position:-120px 0}.icon-star-empty{background-position:-144px 0}.icon-user{background-position:-168px 0}.icon-film{background-position:-192px 0}.icon-th-large{background-position:-216px 0}.icon-th{background-position:-240px 0}.icon-th-list{background-position:-264px 0}.icon-ok{background-position:-288px 0}.icon-remove{background-position:-312px 0}.icon-zoom-in{background-position:-336px 0}.icon-zoom-out{background-position:-360px 0}.icon-off{background-position:-384px 0}.icon-signal{background-position:-408px 0}.icon-cog{background-position:-432px 0}.icon-trash{background-position:-456px 0}.icon-home{background-position:0 -24px}.icon-file{background-position:-24px -24px}.icon-time{background-position:-48px -24px}.icon-road{background-position:-72px -24px}.icon-download-alt{background-position:-96px -24px}.icon-download{background-position:-120px -24px}.icon-upload{background-position:-144px -24px}.icon-inbox{background-position:-168px -24px}.icon-play-circle{background-position:-192px -24px}.icon-repeat{background-position:-216px -24px}.icon-refresh{background-position:-240px -24px}.icon-list-alt{background-position:-264px -24px}.icon-lock{background-position:-287px -24px}.icon-flag{background-position:-312px -24px}.icon-headphones{background-position:-336px -24px}.icon-volume-off{background-position:-360px -24px}.icon-volume-down{background-position:-384px -24px}.icon-volume-up{background-position:-408px -24px}.icon-qrcode{background-position:-432px -24px}.icon-barcode{background-position:-456px -24px}.icon-tag{background-position:0 -48px}.icon-tags{background-position:-25px -48px}.icon-book{background-position:-48px -48px}.icon-bookmark{background-position:-72px -48px}.icon-print{background-position:-96px -48px}.icon-camera{background-position:-120px -48px}.icon-font{background-position:-144px -48px}.icon-bold{background-position:-167px -48px}.icon-italic{background-position:-192px -48px}.icon-text-height{background-position:-216px -48px}.icon-text-width{background-position:-240px -48px}.icon-align-left{background-position:-264px -48px}.icon-align-center{background-position:-288px -48px}.icon-align-right{background-position:-312px -48px}.icon-align-justify{background-position:-336px -48px}.icon-list{background-position:-360px -48px}.icon-indent-left{background-position:-384px -48px}.icon-indent-right{background-position:-408px -48px}.icon-facetime-video{background-position:-432px -48px}.icon-picture{background-position:-456px -48px}.icon-pencil{background-position:0 -72px}.icon-map-marker{background-position:-24px -72px}.icon-adjust{background-position:-48px -72px}.icon-tint{background-position:-72px -72px}.icon-edit{background-position:-96px -72px}.icon-share{background-position:-120px -72px}.icon-check{background-position:-144px -72px}.icon-move{background-position:-168px -72px}.icon-step-backward{background-position:-192px -72px}.icon-fast-backward{background-position:-216px -72px}.icon-backward{background-position:-240px -72px}.icon-play{background-position:-264px -72px}.icon-pause{background-position:-288px -72px}.icon-stop{background-position:-312px -72px}.icon-forward{background-position:-336px -72px}.icon-fast-forward{background-position:-360px -72px}.icon-step-forward{background-position:-384px -72px}.icon-eject{background-position:-408px -72px}.icon-chevron-left{background-position:-432px -72px}.icon-chevron-right{background-position:-456px -72px}.icon-plus-sign{background-position:0 -96px}.icon-minus-sign{background-position:-24px -96px}.icon-remove-sign{background-position:-48px -96px}.icon-ok-sign{background-position:-72px -96px}.icon-question-sign{background-position:-96px -96px}.icon-info-sign{background-position:-120px -96px}.icon-screenshot{background-position:-144px -96px}.icon-remove-circle{background-position:-168px -96px}.icon-ok-circle{background-position:-192px -96px}.icon-ban-circle{background-position:-216px -96px}.icon-arrow-left{background-position:-240px -96px}.icon-arrow-right{background-position:-264px -96px}.icon-arrow-up{background-position:-289px -96px}.icon-arrow-down{background-position:-312px -96px}.icon-share-alt{background-position:-336px -96px}.icon-resize-full{background-position:-360px -96px}.icon-resize-small{background-position:-384px -96px}.icon-plus{background-position:-408px -96px}.icon-minus{background-position:-433px -96px}.icon-asterisk{background-position:-456px -96px}.icon-exclamation-sign{background-position:0 -120px}.icon-gift{background-position:-24px -120px}.icon-leaf{background-position:-48px -120px}.icon-fire{background-position:-72px -120px}.icon-eye-open{background-position:-96px -120px}.icon-eye-close{background-position:-120px -120px}.icon-warning-sign{background-position:-144px -120px}.icon-plane{background-position:-168px -120px}.icon-calendar{background-position:-192px -120px}.icon-random{width:16px;background-position:-216px -120px}.icon-comment{background-position:-240px -120px}.icon-magnet{background-position:-264px -120px}.icon-chevron-up{background-position:-288px -120px}.icon-chevron-down{background-position:-313px -119px}.icon-retweet{background-position:-336px -120px}.icon-shopping-cart{background-position:-360px -120px}.icon-folder-close{width:16px;background-position:-384px -120px}.icon-folder-open{width:16px;background-position:-408px -120px}.icon-resize-vertical{background-position:-432px -119px}.icon-resize-horizontal{background-position:-456px -118px}.icon-hdd{background-position:0 -144px}.icon-bullhorn{background-position:-24px -144px}.icon-bell{background-position:-48px -144px}.icon-certificate{background-position:-72px -144px}.icon-thumbs-up{background-position:-96px -144px}.icon-thumbs-down{background-position:-120px -144px}.icon-hand-right{background-position:-144px -144px}.icon-hand-left{background-position:-168px -144px}.icon-hand-up{background-position:-192px -144px}.icon-hand-down{background-position:-216px -144px}.icon-circle-arrow-right{background-position:-240px -144px}.icon-circle-arrow-left{background-position:-264px -144px}.icon-circle-arrow-up{background-position:-288px -144px}.icon-circle-arrow-down{background-position:-312px -144px}.icon-globe{background-position:-336px -144px}.icon-wrench{background-position:-360px -144px}.icon-tasks{background-position:-384px -144px}.icon-filter{background-position:-408px -144px}.icon-briefcase{background-position:-432px -144px}.icon-fullscreen{background-position:-456px -144px}.dropup,.dropdown{position:relative}.dropdown-toggle{*margin-bottom:-3px}.dropdown-toggle:active,.open .dropdown-toggle{outline:0}.caret{display:inline-block;width:0;height:0;vertical-align:top;border-top:4px solid #000;border-right:4px solid transparent;border-left:4px solid transparent;content:""}.dropdown .caret{margin-top:8px;margin-left:2px}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);*border-right-width:2px;*border-bottom-width:2px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);-moz-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{*width:100%;height:1px;margin:9px 1px;*margin:-5px 0 5px;overflow:hidden;background-color:#e5e5e5;border-bottom:1px solid #fff}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:20px;color:#333;white-space:nowrap}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus,.dropdown-submenu:hover>a,.dropdown-submenu:focus>a{color:#fff;text-decoration:none;background-color:#0081c2;background-image:-moz-linear-gradient(top,#08c,#0077b3);background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#0077b3));background-image:-webkit-linear-gradient(top,#08c,#0077b3);background-image:-o-linear-gradient(top,#08c,#0077b3);background-image:linear-gradient(to bottom,#08c,#0077b3);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0077b3',GradientType=0)}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#fff;text-decoration:none;background-color:#0081c2;background-image:-moz-linear-gradient(top,#08c,#0077b3);background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#0077b3));background-image:-webkit-linear-gradient(top,#08c,#0077b3);background-image:-o-linear-gradient(top,#08c,#0077b3);background-image:linear-gradient(to bottom,#08c,#0077b3);background-repeat:repeat-x;outline:0;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0077b3',GradientType=0)}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#999}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;cursor:default;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.open{*z-index:1000}.open>.dropdown-menu{display:block}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid #000;content:""}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px}.dropdown-submenu{position:relative}.dropdown-submenu>.dropdown-menu{top:0;left:100%;margin-top:-6px;margin-left:-1px;-webkit-border-radius:0 6px 6px 6px;-moz-border-radius:0 6px 6px 6px;border-radius:0 6px 6px 6px}.dropdown-submenu:hover>.dropdown-menu{display:block}.dropup .dropdown-submenu>.dropdown-menu{top:auto;bottom:0;margin-top:0;margin-bottom:-2px;-webkit-border-radius:5px 5px 5px 0;-moz-border-radius:5px 5px 5px 0;border-radius:5px 5px 5px 0}.dropdown-submenu>a:after{display:block;float:right;width:0;height:0;margin-top:5px;margin-right:-10px;border-color:transparent;border-left-color:#ccc;border-style:solid;border-width:5px 0 5px 5px;content:" "}.dropdown-submenu:hover>a:after{border-left-color:#fff}.dropdown-submenu.pull-left{float:none}.dropdown-submenu.pull-left>.dropdown-menu{left:-100%;margin-left:10px;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px}.dropdown .dropdown-menu .nav-header{padding-right:20px;padding-left:20px}.typeahead{z-index:1051;margin-top:2px;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-large{padding:24px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.well-small{padding:9px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.fade{opacity:0;-webkit-transition:opacity .15s linear;-moz-transition:opacity .15s linear;-o-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;-moz-transition:height .35s ease;-o-transition:height .35s ease;transition:height .35s ease}.collapse.in{height:auto}.close{float:right;font-size:20px;font-weight:bold;line-height:20px;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:hover,.close:focus{color:#000;text-decoration:none;cursor:pointer;opacity:.4;filter:alpha(opacity=40)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.btn{display:inline-block;*display:inline;padding:4px 12px;margin-bottom:0;*margin-left:.3em;font-size:14px;line-height:20px;color:#333;text-align:center;text-shadow:0 1px 1px rgba(255,255,255,0.75);vertical-align:middle;cursor:pointer;background-color:#f5f5f5;*background-color:#e6e6e6;background-image:-moz-linear-gradient(top,#fff,#e6e6e6);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#e6e6e6));background-image:-webkit-linear-gradient(top,#fff,#e6e6e6);background-image:-o-linear-gradient(top,#fff,#e6e6e6);background-image:linear-gradient(to bottom,#fff,#e6e6e6);background-repeat:repeat-x;border:1px solid #ccc;*border:0;border-color:#e6e6e6 #e6e6e6 #bfbfbf;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);border-bottom-color:#b3b3b3;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#ffe6e6e6',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);*zoom:1;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05)}.btn:hover,.btn:focus,.btn:active,.btn.active,.btn.disabled,.btn[disabled]{color:#333;background-color:#e6e6e6;*background-color:#d9d9d9}.btn:active,.btn.active{background-color:#ccc \9}.btn:first-child{*margin-left:0}.btn:hover,.btn:focus{color:#333;text-decoration:none;background-position:0 -15px;-webkit-transition:background-position .1s linear;-moz-transition:background-position .1s linear;-o-transition:background-position .1s linear;transition:background-position .1s linear}.btn:focus{outline:thin dotted #333;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn.active,.btn:active{background-image:none;outline:0;-webkit-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05)}.btn.disabled,.btn[disabled]{cursor:default;background-image:none;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.btn-large{padding:11px 19px;font-size:17.5px;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.btn-large [class^="icon-"],.btn-large [class*=" icon-"]{margin-top:4px}.btn-small{padding:2px 10px;font-size:11.9px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.btn-small [class^="icon-"],.btn-small [class*=" icon-"]{margin-top:0}.btn-mini [class^="icon-"],.btn-mini [class*=" icon-"]{margin-top:-1px}.btn-mini{padding:0 6px;font-size:10.5px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.btn-block{display:block;width:100%;padding-right:0;padding-left:0;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.btn-block+.btn-block{margin-top:5px}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block{width:100%}.btn-primary.active,.btn-warning.active,.btn-danger.active,.btn-success.active,.btn-info.active,.btn-inverse.active{color:rgba(255,255,255,0.75)}.btn-primary{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#006dcc;*background-color:#04c;background-image:-moz-linear-gradient(top,#08c,#04c);background-image:-webkit-gradient(linear,0 0,0 100%,from(#08c),to(#04c));background-image:-webkit-linear-gradient(top,#08c,#04c);background-image:-o-linear-gradient(top,#08c,#04c);background-image:linear-gradient(to bottom,#08c,#04c);background-repeat:repeat-x;border-color:#04c #04c #002a80;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc',endColorstr='#ff0044cc',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-primary:hover,.btn-primary:focus,.btn-primary:active,.btn-primary.active,.btn-primary.disabled,.btn-primary[disabled]{color:#fff;background-color:#04c;*background-color:#003bb3}.btn-primary:active,.btn-primary.active{background-color:#039 \9}.btn-warning{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#faa732;*background-color:#f89406;background-image:-moz-linear-gradient(top,#fbb450,#f89406);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fbb450),to(#f89406));background-image:-webkit-linear-gradient(top,#fbb450,#f89406);background-image:-o-linear-gradient(top,#fbb450,#f89406);background-image:linear-gradient(to bottom,#fbb450,#f89406);background-repeat:repeat-x;border-color:#f89406 #f89406 #ad6704;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffbb450',endColorstr='#fff89406',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-warning:hover,.btn-warning:focus,.btn-warning:active,.btn-warning.active,.btn-warning.disabled,.btn-warning[disabled]{color:#fff;background-color:#f89406;*background-color:#df8505}.btn-warning:active,.btn-warning.active{background-color:#c67605 \9}.btn-danger{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#da4f49;*background-color:#bd362f;background-image:-moz-linear-gradient(top,#ee5f5b,#bd362f);background-image:-webkit-gradient(linear,0 0,0 100%,from(#ee5f5b),to(#bd362f));background-image:-webkit-linear-gradient(top,#ee5f5b,#bd362f);background-image:-o-linear-gradient(top,#ee5f5b,#bd362f);background-image:linear-gradient(to bottom,#ee5f5b,#bd362f);background-repeat:repeat-x;border-color:#bd362f #bd362f #802420;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffee5f5b',endColorstr='#ffbd362f',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-danger:hover,.btn-danger:focus,.btn-danger:active,.btn-danger.active,.btn-danger.disabled,.btn-danger[disabled]{color:#fff;background-color:#bd362f;*background-color:#a9302a}.btn-danger:active,.btn-danger.active{background-color:#942a25 \9}.btn-success{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#5bb75b;*background-color:#51a351;background-image:-moz-linear-gradient(top,#62c462,#51a351);background-image:-webkit-gradient(linear,0 0,0 100%,from(#62c462),to(#51a351));background-image:-webkit-linear-gradient(top,#62c462,#51a351);background-image:-o-linear-gradient(top,#62c462,#51a351);background-image:linear-gradient(to bottom,#62c462,#51a351);background-repeat:repeat-x;border-color:#51a351 #51a351 #387038;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff62c462',endColorstr='#ff51a351',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-success:hover,.btn-success:focus,.btn-success:active,.btn-success.active,.btn-success.disabled,.btn-success[disabled]{color:#fff;background-color:#51a351;*background-color:#499249}.btn-success:active,.btn-success.active{background-color:#408140 \9}.btn-info{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#49afcd;*background-color:#2f96b4;background-image:-moz-linear-gradient(top,#5bc0de,#2f96b4);background-image:-webkit-gradient(linear,0 0,0 100%,from(#5bc0de),to(#2f96b4));background-image:-webkit-linear-gradient(top,#5bc0de,#2f96b4);background-image:-o-linear-gradient(top,#5bc0de,#2f96b4);background-image:linear-gradient(to bottom,#5bc0de,#2f96b4);background-repeat:repeat-x;border-color:#2f96b4 #2f96b4 #1f6377;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de',endColorstr='#ff2f96b4',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-info:hover,.btn-info:focus,.btn-info:active,.btn-info.active,.btn-info.disabled,.btn-info[disabled]{color:#fff;background-color:#2f96b4;*background-color:#2a85a0}.btn-info:active,.btn-info.active{background-color:#24748c \9}.btn-inverse{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#363636;*background-color:#222;background-image:-moz-linear-gradient(top,#444,#222);background-image:-webkit-gradient(linear,0 0,0 100%,from(#444),to(#222));background-image:-webkit-linear-gradient(top,#444,#222);background-image:-o-linear-gradient(top,#444,#222);background-image:linear-gradient(to bottom,#444,#222);background-repeat:repeat-x;border-color:#222 #222 #000;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff444444',endColorstr='#ff222222',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.btn-inverse:hover,.btn-inverse:focus,.btn-inverse:active,.btn-inverse.active,.btn-inverse.disabled,.btn-inverse[disabled]{color:#fff;background-color:#222;*background-color:#151515}.btn-inverse:active,.btn-inverse.active{background-color:#080808 \9}button.btn,input[type="submit"].btn{*padding-top:3px;*padding-bottom:3px}button.btn::-moz-focus-inner,input[type="submit"].btn::-moz-focus-inner{padding:0;border:0}button.btn.btn-large,input[type="submit"].btn.btn-large{*padding-top:7px;*padding-bottom:7px}button.btn.btn-small,input[type="submit"].btn.btn-small{*padding-top:3px;*padding-bottom:3px}button.btn.btn-mini,input[type="submit"].btn.btn-mini{*padding-top:1px;*padding-bottom:1px}.btn-link,.btn-link:active,.btn-link[disabled]{background-color:transparent;background-image:none;-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.btn-link{color:#08c;cursor:pointer;border-color:transparent;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-link:hover,.btn-link:focus{color:#005580;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,.btn-link[disabled]:focus{color:#333;text-decoration:none}.btn-group{position:relative;display:inline-block;*display:inline;*margin-left:.3em;font-size:0;white-space:nowrap;vertical-align:middle;*zoom:1}.btn-group:first-child{*margin-left:0}.btn-group+.btn-group{margin-left:5px}.btn-toolbar{margin-top:10px;margin-bottom:10px;font-size:0}.btn-toolbar>.btn+.btn,.btn-toolbar>.btn-group+.btn,.btn-toolbar>.btn+.btn-group{margin-left:5px}.btn-group>.btn{position:relative;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-group>.btn+.btn{margin-left:-1px}.btn-group>.btn,.btn-group>.dropdown-menu,.btn-group>.popover{font-size:14px}.btn-group>.btn-mini{font-size:10.5px}.btn-group>.btn-small{font-size:11.9px}.btn-group>.btn-large{font-size:17.5px}.btn-group>.btn:first-child{margin-left:0;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-bottomleft:4px;-moz-border-radius-topleft:4px}.btn-group>.btn:last-child,.btn-group>.dropdown-toggle{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-bottomright:4px}.btn-group>.btn.large:first-child{margin-left:0;-webkit-border-bottom-left-radius:6px;border-bottom-left-radius:6px;-webkit-border-top-left-radius:6px;border-top-left-radius:6px;-moz-border-radius-bottomleft:6px;-moz-border-radius-topleft:6px}.btn-group>.btn.large:last-child,.btn-group>.large.dropdown-toggle{-webkit-border-top-right-radius:6px;border-top-right-radius:6px;-webkit-border-bottom-right-radius:6px;border-bottom-right-radius:6px;-moz-border-radius-topright:6px;-moz-border-radius-bottomright:6px}.btn-group>.btn:hover,.btn-group>.btn:focus,.btn-group>.btn:active,.btn-group>.btn.active{z-index:2}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group>.btn+.dropdown-toggle{*padding-top:5px;padding-right:8px;*padding-bottom:5px;padding-left:8px;-webkit-box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 1px 0 0 rgba(255,255,255,0.125),inset 0 1px 0 rgba(255,255,255,0.2),0 1px 2px rgba(0,0,0,0.05)}.btn-group>.btn-mini+.dropdown-toggle{*padding-top:2px;padding-right:5px;*padding-bottom:2px;padding-left:5px}.btn-group>.btn-small+.dropdown-toggle{*padding-top:5px;*padding-bottom:4px}.btn-group>.btn-large+.dropdown-toggle{*padding-top:7px;padding-right:12px;*padding-bottom:7px;padding-left:12px}.btn-group.open .dropdown-toggle{background-image:none;-webkit-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05);box-shadow:inset 0 2px 4px rgba(0,0,0,0.15),0 1px 2px rgba(0,0,0,0.05)}.btn-group.open .btn.dropdown-toggle{background-color:#e6e6e6}.btn-group.open .btn-primary.dropdown-toggle{background-color:#04c}.btn-group.open .btn-warning.dropdown-toggle{background-color:#f89406}.btn-group.open .btn-danger.dropdown-toggle{background-color:#bd362f}.btn-group.open .btn-success.dropdown-toggle{background-color:#51a351}.btn-group.open .btn-info.dropdown-toggle{background-color:#2f96b4}.btn-group.open .btn-inverse.dropdown-toggle{background-color:#222}.btn .caret{margin-top:8px;margin-left:0}.btn-large .caret{margin-top:6px}.btn-large .caret{border-top-width:5px;border-right-width:5px;border-left-width:5px}.btn-mini .caret,.btn-small .caret{margin-top:8px}.dropup .btn-large .caret{border-bottom-width:5px}.btn-primary .caret,.btn-warning .caret,.btn-danger .caret,.btn-info .caret,.btn-success .caret,.btn-inverse .caret{border-top-color:#fff;border-bottom-color:#fff}.btn-group-vertical{display:inline-block;*display:inline;*zoom:1}.btn-group-vertical>.btn{display:block;float:none;max-width:100%;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.btn-group-vertical>.btn+.btn{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:first-child{-webkit-border-radius:4px 4px 0 0;-moz-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0}.btn-group-vertical>.btn:last-child{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.btn-group-vertical>.btn-large:first-child{-webkit-border-radius:6px 6px 0 0;-moz-border-radius:6px 6px 0 0;border-radius:6px 6px 0 0}.btn-group-vertical>.btn-large:last-child{-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px}.alert{padding:8px 35px 8px 14px;margin-bottom:20px;text-shadow:0 1px 0 rgba(255,255,255,0.5);background-color:#fcf8e3;border:1px solid #fbeed5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.alert,.alert h4{color:#c09853}.alert h4{margin:0}.alert .close{position:relative;top:-2px;right:-21px;line-height:20px}.alert-success{color:#468847;background-color:#dff0d8;border-color:#d6e9c6}.alert-success h4{color:#468847}.alert-danger,.alert-error{color:#b94a48;background-color:#f2dede;border-color:#eed3d7}.alert-danger h4,.alert-error h4{color:#b94a48}.alert-info{color:#3a87ad;background-color:#d9edf7;border-color:#bce8f1}.alert-info h4{color:#3a87ad}.alert-block{padding-top:14px;padding-bottom:14px}.alert-block>p,.alert-block>ul{margin-bottom:0}.alert-block p+p{margin-top:5px}.nav{margin-bottom:20px;margin-left:0;list-style:none}.nav>li>a{display:block}.nav>li>a:hover,.nav>li>a:focus{text-decoration:none;background-color:#eee}.nav>li>a>img{max-width:none}.nav>.pull-right{float:right}.nav-header{display:block;padding:3px 15px;font-size:11px;font-weight:bold;line-height:20px;color:#999;text-shadow:0 1px 0 rgba(255,255,255,0.5);text-transform:uppercase}.nav li+.nav-header{margin-top:9px}.nav-list{padding-right:15px;padding-left:15px;margin-bottom:0}.nav-list>li>a,.nav-list .nav-header{margin-right:-15px;margin-left:-15px;text-shadow:0 1px 0 rgba(255,255,255,0.5)}.nav-list>li>a{padding:3px 15px}.nav-list>.active>a,.nav-list>.active>a:hover,.nav-list>.active>a:focus{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.2);background-color:#08c}.nav-list [class^="icon-"],.nav-list [class*=" icon-"]{margin-right:2px}.nav-list .divider{*width:100%;height:1px;margin:9px 1px;*margin:-5px 0 5px;overflow:hidden;background-color:#e5e5e5;border-bottom:1px solid #fff}.nav-tabs,.nav-pills{*zoom:1}.nav-tabs:before,.nav-pills:before,.nav-tabs:after,.nav-pills:after{display:table;line-height:0;content:""}.nav-tabs:after,.nav-pills:after{clear:both}.nav-tabs>li,.nav-pills>li{float:left}.nav-tabs>li>a,.nav-pills>li>a{padding-right:12px;padding-left:12px;margin-right:2px;line-height:14px}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{margin-bottom:-1px}.nav-tabs>li>a{padding-top:8px;padding-bottom:8px;line-height:20px;border:1px solid transparent;-webkit-border-radius:4px 4px 0 0;-moz-border-radius:4px 4px 0 0;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover,.nav-tabs>li>a:focus{border-color:#eee #eee #ddd}.nav-tabs>.active>a,.nav-tabs>.active>a:hover,.nav-tabs>.active>a:focus{color:#555;cursor:default;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent}.nav-pills>li>a{padding-top:8px;padding-bottom:8px;margin-top:2px;margin-bottom:2px;-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.nav-pills>.active>a,.nav-pills>.active>a:hover,.nav-pills>.active>a:focus{color:#fff;background-color:#08c}.nav-stacked>li{float:none}.nav-stacked>li>a{margin-right:0}.nav-tabs.nav-stacked{border-bottom:0}.nav-tabs.nav-stacked>li>a{border:1px solid #ddd;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.nav-tabs.nav-stacked>li:first-child>a{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-topleft:4px}.nav-tabs.nav-stacked>li:last-child>a{-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-moz-border-radius-bottomright:4px;-moz-border-radius-bottomleft:4px}.nav-tabs.nav-stacked>li>a:hover,.nav-tabs.nav-stacked>li>a:focus{z-index:2;border-color:#ddd}.nav-pills.nav-stacked>li>a{margin-bottom:3px}.nav-pills.nav-stacked>li:last-child>a{margin-bottom:1px}.nav-tabs .dropdown-menu{-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px}.nav-pills .dropdown-menu{-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.nav .dropdown-toggle .caret{margin-top:6px;border-top-color:#08c;border-bottom-color:#08c}.nav .dropdown-toggle:hover .caret,.nav .dropdown-toggle:focus .caret{border-top-color:#005580;border-bottom-color:#005580}.nav-tabs .dropdown-toggle .caret{margin-top:8px}.nav .active .dropdown-toggle .caret{border-top-color:#fff;border-bottom-color:#fff}.nav-tabs .active .dropdown-toggle .caret{border-top-color:#555;border-bottom-color:#555}.nav>.dropdown.active>a:hover,.nav>.dropdown.active>a:focus{cursor:pointer}.nav-tabs .open .dropdown-toggle,.nav-pills .open .dropdown-toggle,.nav>li.dropdown.open.active>a:hover,.nav>li.dropdown.open.active>a:focus{color:#fff;background-color:#999;border-color:#999}.nav li.dropdown.open .caret,.nav li.dropdown.open.active .caret,.nav li.dropdown.open a:hover .caret,.nav li.dropdown.open a:focus .caret{border-top-color:#fff;border-bottom-color:#fff;opacity:1;filter:alpha(opacity=100)}.tabs-stacked .open>a:hover,.tabs-stacked .open>a:focus{border-color:#999}.tabbable{*zoom:1}.tabbable:before,.tabbable:after{display:table;line-height:0;content:""}.tabbable:after{clear:both}.tab-content{overflow:auto}.tabs-below>.nav-tabs,.tabs-right>.nav-tabs,.tabs-left>.nav-tabs{border-bottom:0}.tab-content>.tab-pane,.pill-content>.pill-pane{display:none}.tab-content>.active,.pill-content>.active{display:block}.tabs-below>.nav-tabs{border-top:1px solid #ddd}.tabs-below>.nav-tabs>li{margin-top:-1px;margin-bottom:0}.tabs-below>.nav-tabs>li>a{-webkit-border-radius:0 0 4px 4px;-moz-border-radius:0 0 4px 4px;border-radius:0 0 4px 4px}.tabs-below>.nav-tabs>li>a:hover,.tabs-below>.nav-tabs>li>a:focus{border-top-color:#ddd;border-bottom-color:transparent}.tabs-below>.nav-tabs>.active>a,.tabs-below>.nav-tabs>.active>a:hover,.tabs-below>.nav-tabs>.active>a:focus{border-color:transparent #ddd #ddd #ddd}.tabs-left>.nav-tabs>li,.tabs-right>.nav-tabs>li{float:none}.tabs-left>.nav-tabs>li>a,.tabs-right>.nav-tabs>li>a{min-width:74px;margin-right:0;margin-bottom:3px}.tabs-left>.nav-tabs{float:left;margin-right:19px;border-right:1px solid #ddd}.tabs-left>.nav-tabs>li>a{margin-right:-1px;-webkit-border-radius:4px 0 0 4px;-moz-border-radius:4px 0 0 4px;border-radius:4px 0 0 4px}.tabs-left>.nav-tabs>li>a:hover,.tabs-left>.nav-tabs>li>a:focus{border-color:#eee #ddd #eee #eee}.tabs-left>.nav-tabs .active>a,.tabs-left>.nav-tabs .active>a:hover,.tabs-left>.nav-tabs .active>a:focus{border-color:#ddd transparent #ddd #ddd;*border-right-color:#fff}.tabs-right>.nav-tabs{float:right;margin-left:19px;border-left:1px solid #ddd}.tabs-right>.nav-tabs>li>a{margin-left:-1px;-webkit-border-radius:0 4px 4px 0;-moz-border-radius:0 4px 4px 0;border-radius:0 4px 4px 0}.tabs-right>.nav-tabs>li>a:hover,.tabs-right>.nav-tabs>li>a:focus{border-color:#eee #eee #eee #ddd}.tabs-right>.nav-tabs .active>a,.tabs-right>.nav-tabs .active>a:hover,.tabs-right>.nav-tabs .active>a:focus{border-color:#ddd #ddd #ddd transparent;*border-left-color:#fff}.nav>.disabled>a{color:#999}.nav>.disabled>a:hover,.nav>.disabled>a:focus{text-decoration:none;cursor:default;background-color:transparent}.navbar{*position:relative;*z-index:2;margin-bottom:20px;overflow:visible}.navbar-inner{min-height:40px;padding-right:20px;padding-left:20px;background-color:#fafafa;background-image:-moz-linear-gradient(top,#fff,#f2f2f2);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fff),to(#f2f2f2));background-image:-webkit-linear-gradient(top,#fff,#f2f2f2);background-image:-o-linear-gradient(top,#fff,#f2f2f2);background-image:linear-gradient(to bottom,#fff,#f2f2f2);background-repeat:repeat-x;border:1px solid #d4d4d4;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffffff',endColorstr='#fff2f2f2',GradientType=0);*zoom:1;-webkit-box-shadow:0 1px 4px rgba(0,0,0,0.065);-moz-box-shadow:0 1px 4px rgba(0,0,0,0.065);box-shadow:0 1px 4px rgba(0,0,0,0.065)}.navbar-inner:before,.navbar-inner:after{display:table;line-height:0;content:""}.navbar-inner:after{clear:both}.navbar .container{width:auto}.nav-collapse.collapse{height:auto;overflow:visible}.navbar .brand{display:block;float:left;padding:10px 20px 10px;margin-left:-20px;font-size:20px;font-weight:200;color:#777;text-shadow:0 1px 0 #fff}.navbar .brand:hover,.navbar .brand:focus{text-decoration:none}.navbar-text{margin-bottom:0;line-height:40px;color:#777}.navbar-link{color:#777}.navbar-link:hover,.navbar-link:focus{color:#333}.navbar .divider-vertical{height:40px;margin:0 9px;border-right:1px solid #fff;border-left:1px solid #f2f2f2}.navbar .btn,.navbar .btn-group{margin-top:5px}.navbar .btn-group .btn,.navbar .input-prepend .btn,.navbar .input-append .btn,.navbar .input-prepend .btn-group,.navbar .input-append .btn-group{margin-top:0}.navbar-form{margin-bottom:0;*zoom:1}.navbar-form:before,.navbar-form:after{display:table;line-height:0;content:""}.navbar-form:after{clear:both}.navbar-form input,.navbar-form select,.navbar-form .radio,.navbar-form .checkbox{margin-top:5px}.navbar-form input,.navbar-form select,.navbar-form .btn{display:inline-block;margin-bottom:0}.navbar-form input[type="image"],.navbar-form input[type="checkbox"],.navbar-form input[type="radio"]{margin-top:3px}.navbar-form .input-append,.navbar-form .input-prepend{margin-top:5px;white-space:nowrap}.navbar-form .input-append input,.navbar-form .input-prepend input{margin-top:0}.navbar-search{position:relative;float:left;margin-top:5px;margin-bottom:0}.navbar-search .search-query{padding:4px 14px;margin-bottom:0;font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:13px;font-weight:normal;line-height:1;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.navbar-static-top{position:static;margin-bottom:0}.navbar-static-top .navbar-inner{-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030;margin-bottom:0}.navbar-fixed-top .navbar-inner,.navbar-static-top .navbar-inner{border-width:0 0 1px}.navbar-fixed-bottom .navbar-inner{border-width:1px 0 0}.navbar-fixed-top .navbar-inner,.navbar-fixed-bottom .navbar-inner{padding-right:0;padding-left:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0}.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:940px}.navbar-fixed-top{top:0}.navbar-fixed-top .navbar-inner,.navbar-static-top .navbar-inner{-webkit-box-shadow:0 1px 10px rgba(0,0,0,0.1);-moz-box-shadow:0 1px 10px rgba(0,0,0,0.1);box-shadow:0 1px 10px rgba(0,0,0,0.1)}.navbar-fixed-bottom{bottom:0}.navbar-fixed-bottom .navbar-inner{-webkit-box-shadow:0 -1px 10px rgba(0,0,0,0.1);-moz-box-shadow:0 -1px 10px rgba(0,0,0,0.1);box-shadow:0 -1px 10px rgba(0,0,0,0.1)}.navbar .nav{position:relative;left:0;display:block;float:left;margin:0 10px 0 0}.navbar .nav.pull-right{float:right;margin-right:0}.navbar .nav>li{float:left}.navbar .nav>li>a{float:none;padding:10px 15px 10px;color:#777;text-decoration:none;text-shadow:0 1px 0 #fff}.navbar .nav .dropdown-toggle .caret{margin-top:8px}.navbar .nav>li>a:focus,.navbar .nav>li>a:hover{color:#333;text-decoration:none;background-color:transparent}.navbar .nav>.active>a,.navbar .nav>.active>a:hover,.navbar .nav>.active>a:focus{color:#555;text-decoration:none;background-color:#e5e5e5;-webkit-box-shadow:inset 0 3px 8px rgba(0,0,0,0.125);-moz-box-shadow:inset 0 3px 8px rgba(0,0,0,0.125);box-shadow:inset 0 3px 8px rgba(0,0,0,0.125)}.navbar .btn-navbar{display:none;float:right;padding:7px 10px;margin-right:5px;margin-left:5px;color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#ededed;*background-color:#e5e5e5;background-image:-moz-linear-gradient(top,#f2f2f2,#e5e5e5);background-image:-webkit-gradient(linear,0 0,0 100%,from(#f2f2f2),to(#e5e5e5));background-image:-webkit-linear-gradient(top,#f2f2f2,#e5e5e5);background-image:-o-linear-gradient(top,#f2f2f2,#e5e5e5);background-image:linear-gradient(to bottom,#f2f2f2,#e5e5e5);background-repeat:repeat-x;border-color:#e5e5e5 #e5e5e5 #bfbfbf;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff2f2f2',endColorstr='#ffe5e5e5',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false);-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.075)}.navbar .btn-navbar:hover,.navbar .btn-navbar:focus,.navbar .btn-navbar:active,.navbar .btn-navbar.active,.navbar .btn-navbar.disabled,.navbar .btn-navbar[disabled]{color:#fff;background-color:#e5e5e5;*background-color:#d9d9d9}.navbar .btn-navbar:active,.navbar .btn-navbar.active{background-color:#ccc \9}.navbar .btn-navbar .icon-bar{display:block;width:18px;height:2px;background-color:#f5f5f5;-webkit-border-radius:1px;-moz-border-radius:1px;border-radius:1px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,0.25);-moz-box-shadow:0 1px 0 rgba(0,0,0,0.25);box-shadow:0 1px 0 rgba(0,0,0,0.25)}.btn-navbar .icon-bar+.icon-bar{margin-top:3px}.navbar .nav>li>.dropdown-menu:before{position:absolute;top:-7px;left:9px;display:inline-block;border-right:7px solid transparent;border-bottom:7px solid #ccc;border-left:7px solid transparent;border-bottom-color:rgba(0,0,0,0.2);content:''}.navbar .nav>li>.dropdown-menu:after{position:absolute;top:-6px;left:10px;display:inline-block;border-right:6px solid transparent;border-bottom:6px solid #fff;border-left:6px solid transparent;content:''}.navbar-fixed-bottom .nav>li>.dropdown-menu:before{top:auto;bottom:-7px;border-top:7px solid #ccc;border-bottom:0;border-top-color:rgba(0,0,0,0.2)}.navbar-fixed-bottom .nav>li>.dropdown-menu:after{top:auto;bottom:-6px;border-top:6px solid #fff;border-bottom:0}.navbar .nav li.dropdown>a:hover .caret,.navbar .nav li.dropdown>a:focus .caret{border-top-color:#333;border-bottom-color:#333}.navbar .nav li.dropdown.open>.dropdown-toggle,.navbar .nav li.dropdown.active>.dropdown-toggle,.navbar .nav li.dropdown.open.active>.dropdown-toggle{color:#555;background-color:#e5e5e5}.navbar .nav li.dropdown>.dropdown-toggle .caret{border-top-color:#777;border-bottom-color:#777}.navbar .nav li.dropdown.open>.dropdown-toggle .caret,.navbar .nav li.dropdown.active>.dropdown-toggle .caret,.navbar .nav li.dropdown.open.active>.dropdown-toggle .caret{border-top-color:#555;border-bottom-color:#555}.navbar .pull-right>li>.dropdown-menu,.navbar .nav>li>.dropdown-menu.pull-right{right:0;left:auto}.navbar .pull-right>li>.dropdown-menu:before,.navbar .nav>li>.dropdown-menu.pull-right:before{right:12px;left:auto}.navbar .pull-right>li>.dropdown-menu:after,.navbar .nav>li>.dropdown-menu.pull-right:after{right:13px;left:auto}.navbar .pull-right>li>.dropdown-menu .dropdown-menu,.navbar .nav>li>.dropdown-menu.pull-right .dropdown-menu{right:100%;left:auto;margin-right:-1px;margin-left:0;-webkit-border-radius:6px 0 6px 6px;-moz-border-radius:6px 0 6px 6px;border-radius:6px 0 6px 6px}.navbar-inverse .navbar-inner{background-color:#1b1b1b;background-image:-moz-linear-gradient(top,#222,#111);background-image:-webkit-gradient(linear,0 0,0 100%,from(#222),to(#111));background-image:-webkit-linear-gradient(top,#222,#111);background-image:-o-linear-gradient(top,#222,#111);background-image:linear-gradient(to bottom,#222,#111);background-repeat:repeat-x;border-color:#252525;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff222222',endColorstr='#ff111111',GradientType=0)}.navbar-inverse .brand,.navbar-inverse .nav>li>a{color:#999;text-shadow:0 -1px 0 rgba(0,0,0,0.25)}.navbar-inverse .brand:hover,.navbar-inverse .nav>li>a:hover,.navbar-inverse .brand:focus,.navbar-inverse .nav>li>a:focus{color:#fff}.navbar-inverse .brand{color:#999}.navbar-inverse .navbar-text{color:#999}.navbar-inverse .nav>li>a:focus,.navbar-inverse .nav>li>a:hover{color:#fff;background-color:transparent}.navbar-inverse .nav .active>a,.navbar-inverse .nav .active>a:hover,.navbar-inverse .nav .active>a:focus{color:#fff;background-color:#111}.navbar-inverse .navbar-link{color:#999}.navbar-inverse .navbar-link:hover,.navbar-inverse .navbar-link:focus{color:#fff}.navbar-inverse .divider-vertical{border-right-color:#222;border-left-color:#111}.navbar-inverse .nav li.dropdown.open>.dropdown-toggle,.navbar-inverse .nav li.dropdown.active>.dropdown-toggle,.navbar-inverse .nav li.dropdown.open.active>.dropdown-toggle{color:#fff;background-color:#111}.navbar-inverse .nav li.dropdown>a:hover .caret,.navbar-inverse .nav li.dropdown>a:focus .caret{border-top-color:#fff;border-bottom-color:#fff}.navbar-inverse .nav li.dropdown>.dropdown-toggle .caret{border-top-color:#999;border-bottom-color:#999}.navbar-inverse .nav li.dropdown.open>.dropdown-toggle .caret,.navbar-inverse .nav li.dropdown.active>.dropdown-toggle .caret,.navbar-inverse .nav li.dropdown.open.active>.dropdown-toggle .caret{border-top-color:#fff;border-bottom-color:#fff}.navbar-inverse .navbar-search .search-query{color:#fff;background-color:#515151;border-color:#111;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1),0 1px 0 rgba(255,255,255,0.15);-webkit-transition:none;-moz-transition:none;-o-transition:none;transition:none}.navbar-inverse .navbar-search .search-query:-moz-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query:-ms-input-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query::-webkit-input-placeholder{color:#ccc}.navbar-inverse .navbar-search .search-query:focus,.navbar-inverse .navbar-search .search-query.focused{padding:5px 15px;color:#333;text-shadow:0 1px 0 #fff;background-color:#fff;border:0;outline:0;-webkit-box-shadow:0 0 3px rgba(0,0,0,0.15);-moz-box-shadow:0 0 3px rgba(0,0,0,0.15);box-shadow:0 0 3px rgba(0,0,0,0.15)}.navbar-inverse .btn-navbar{color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#0e0e0e;*background-color:#040404;background-image:-moz-linear-gradient(top,#151515,#040404);background-image:-webkit-gradient(linear,0 0,0 100%,from(#151515),to(#040404));background-image:-webkit-linear-gradient(top,#151515,#040404);background-image:-o-linear-gradient(top,#151515,#040404);background-image:linear-gradient(to bottom,#151515,#040404);background-repeat:repeat-x;border-color:#040404 #040404 #000;border-color:rgba(0,0,0,0.1) rgba(0,0,0,0.1) rgba(0,0,0,0.25);filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff151515',endColorstr='#ff040404',GradientType=0);filter:progid:DXImageTransform.Microsoft.gradient(enabled=false)}.navbar-inverse .btn-navbar:hover,.navbar-inverse .btn-navbar:focus,.navbar-inverse .btn-navbar:active,.navbar-inverse .btn-navbar.active,.navbar-inverse .btn-navbar.disabled,.navbar-inverse .btn-navbar[disabled]{color:#fff;background-color:#040404;*background-color:#000}.navbar-inverse .btn-navbar:active,.navbar-inverse .btn-navbar.active{background-color:#000 \9}.breadcrumb{padding:8px 15px;margin:0 0 20px;list-style:none;background-color:#f5f5f5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.breadcrumb>li{display:inline-block;*display:inline;text-shadow:0 1px 0 #fff;*zoom:1}.breadcrumb>li>.divider{padding:0 5px;color:#ccc}.breadcrumb>.active{color:#999}.pagination{margin:20px 0}.pagination ul{display:inline-block;*display:inline;margin-bottom:0;margin-left:0;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;*zoom:1;-webkit-box-shadow:0 1px 2px rgba(0,0,0,0.05);-moz-box-shadow:0 1px 2px rgba(0,0,0,0.05);box-shadow:0 1px 2px rgba(0,0,0,0.05)}.pagination ul>li{display:inline}.pagination ul>li>a,.pagination ul>li>span{float:left;padding:4px 12px;line-height:20px;text-decoration:none;background-color:#fff;border:1px solid #ddd;border-left-width:0}.pagination ul>li>a:hover,.pagination ul>li>a:focus,.pagination ul>.active>a,.pagination ul>.active>span{background-color:#f5f5f5}.pagination ul>.active>a,.pagination ul>.active>span{color:#999;cursor:default}.pagination ul>.disabled>span,.pagination ul>.disabled>a,.pagination ul>.disabled>a:hover,.pagination ul>.disabled>a:focus{color:#999;cursor:default;background-color:transparent}.pagination ul>li:first-child>a,.pagination ul>li:first-child>span{border-left-width:1px;-webkit-border-bottom-left-radius:4px;border-bottom-left-radius:4px;-webkit-border-top-left-radius:4px;border-top-left-radius:4px;-moz-border-radius-bottomleft:4px;-moz-border-radius-topleft:4px}.pagination ul>li:last-child>a,.pagination ul>li:last-child>span{-webkit-border-top-right-radius:4px;border-top-right-radius:4px;-webkit-border-bottom-right-radius:4px;border-bottom-right-radius:4px;-moz-border-radius-topright:4px;-moz-border-radius-bottomright:4px}.pagination-centered{text-align:center}.pagination-right{text-align:right}.pagination-large ul>li>a,.pagination-large ul>li>span{padding:11px 19px;font-size:17.5px}.pagination-large ul>li:first-child>a,.pagination-large ul>li:first-child>span{-webkit-border-bottom-left-radius:6px;border-bottom-left-radius:6px;-webkit-border-top-left-radius:6px;border-top-left-radius:6px;-moz-border-radius-bottomleft:6px;-moz-border-radius-topleft:6px}.pagination-large ul>li:last-child>a,.pagination-large ul>li:last-child>span{-webkit-border-top-right-radius:6px;border-top-right-radius:6px;-webkit-border-bottom-right-radius:6px;border-bottom-right-radius:6px;-moz-border-radius-topright:6px;-moz-border-radius-bottomright:6px}.pagination-mini ul>li:first-child>a,.pagination-small ul>li:first-child>a,.pagination-mini ul>li:first-child>span,.pagination-small ul>li:first-child>span{-webkit-border-bottom-left-radius:3px;border-bottom-left-radius:3px;-webkit-border-top-left-radius:3px;border-top-left-radius:3px;-moz-border-radius-bottomleft:3px;-moz-border-radius-topleft:3px}.pagination-mini ul>li:last-child>a,.pagination-small ul>li:last-child>a,.pagination-mini ul>li:last-child>span,.pagination-small ul>li:last-child>span{-webkit-border-top-right-radius:3px;border-top-right-radius:3px;-webkit-border-bottom-right-radius:3px;border-bottom-right-radius:3px;-moz-border-radius-topright:3px;-moz-border-radius-bottomright:3px}.pagination-small ul>li>a,.pagination-small ul>li>span{padding:2px 10px;font-size:11.9px}.pagination-mini ul>li>a,.pagination-mini ul>li>span{padding:0 6px;font-size:10.5px}.pager{margin:20px 0;text-align:center;list-style:none;*zoom:1}.pager:before,.pager:after{display:table;line-height:0;content:""}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.pager li>a:hover,.pager li>a:focus{text-decoration:none;background-color:#f5f5f5}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:hover,.pager .disabled>a:focus,.pager .disabled>span{color:#999;cursor:default;background-color:#fff}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040;background-color:#000}.modal-backdrop.fade{opacity:0}.modal-backdrop,.modal-backdrop.fade.in{opacity:.8;filter:alpha(opacity=80)}.modal{position:fixed;top:10%;left:50%;z-index:1050;width:560px;margin-left:-280px;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,0.3);*border:1px solid #999;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;outline:0;-webkit-box-shadow:0 3px 7px rgba(0,0,0,0.3);-moz-box-shadow:0 3px 7px rgba(0,0,0,0.3);box-shadow:0 3px 7px rgba(0,0,0,0.3);-webkit-background-clip:padding-box;-moz-background-clip:padding-box;background-clip:padding-box}.modal.fade{top:-25%;-webkit-transition:opacity .3s linear,top .3s ease-out;-moz-transition:opacity .3s linear,top .3s ease-out;-o-transition:opacity .3s linear,top .3s ease-out;transition:opacity .3s linear,top .3s ease-out}.modal.fade.in{top:10%}.modal-header{padding:9px 15px;border-bottom:1px solid #eee}.modal-header .close{margin-top:2px}.modal-header h3{margin:0;line-height:30px}.modal-body{position:relative;max-height:400px;padding:15px;overflow-y:auto}.modal-form{margin-bottom:0}.modal-footer{padding:14px 15px 15px;margin-bottom:0;text-align:right;background-color:#f5f5f5;border-top:1px solid #ddd;-webkit-border-radius:0 0 6px 6px;-moz-border-radius:0 0 6px 6px;border-radius:0 0 6px 6px;*zoom:1;-webkit-box-shadow:inset 0 1px 0 #fff;-moz-box-shadow:inset 0 1px 0 #fff;box-shadow:inset 0 1px 0 #fff}.modal-footer:before,.modal-footer:after{display:table;line-height:0;content:""}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-bottom:0;margin-left:5px}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}.tooltip{position:absolute;z-index:1030;display:block;font-size:11px;line-height:1.4;opacity:0;filter:alpha(opacity=0);visibility:visible}.tooltip.in{opacity:.8;filter:alpha(opacity=80)}.tooltip.top{padding:5px 0;margin-top:-3px}.tooltip.right{padding:0 5px;margin-left:3px}.tooltip.bottom{padding:5px 0;margin-top:3px}.tooltip.left{padding:0 5px;margin-left:-3px}.tooltip-inner{max-width:200px;padding:8px;color:#fff;text-align:center;text-decoration:none;background-color:#000;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-top-color:#000;border-width:5px 5px 0}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-right-color:#000;border-width:5px 5px 5px 0}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-left-color:#000;border-width:5px 0 5px 5px}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-bottom-color:#000;border-width:0 5px 5px}.popover{position:absolute;top:0;left:0;z-index:1010;display:none;max-width:276px;padding:1px;text-align:left;white-space:normal;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);-moz-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);-webkit-background-clip:padding-box;-moz-background-clip:padding;background-clip:padding-box}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{padding:8px 14px;margin:0;font-size:14px;font-weight:normal;line-height:18px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;-webkit-border-radius:5px 5px 0 0;-moz-border-radius:5px 5px 0 0;border-radius:5px 5px 0 0}.popover-title:empty{display:none}.popover-content{padding:9px 14px}.popover .arrow,.popover .arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover .arrow{border-width:11px}.popover .arrow:after{border-width:10px;content:""}.popover.top .arrow{bottom:-11px;left:50%;margin-left:-11px;border-top-color:#999;border-top-color:rgba(0,0,0,0.25);border-bottom-width:0}.popover.top .arrow:after{bottom:1px;margin-left:-10px;border-top-color:#fff;border-bottom-width:0}.popover.right .arrow{top:50%;left:-11px;margin-top:-11px;border-right-color:#999;border-right-color:rgba(0,0,0,0.25);border-left-width:0}.popover.right .arrow:after{bottom:-10px;left:1px;border-right-color:#fff;border-left-width:0}.popover.bottom .arrow{top:-11px;left:50%;margin-left:-11px;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,0.25);border-top-width:0}.popover.bottom .arrow:after{top:1px;margin-left:-10px;border-bottom-color:#fff;border-top-width:0}.popover.left .arrow{top:50%;right:-11px;margin-top:-11px;border-left-color:#999;border-left-color:rgba(0,0,0,0.25);border-right-width:0}.popover.left .arrow:after{right:1px;bottom:-10px;border-left-color:#fff;border-right-width:0}.thumbnails{margin-left:-20px;list-style:none;*zoom:1}.thumbnails:before,.thumbnails:after{display:table;line-height:0;content:""}.thumbnails:after{clear:both}.row-fluid .thumbnails{margin-left:0}.thumbnails>li{float:left;margin-bottom:20px;margin-left:20px}.thumbnail{display:block;padding:4px;line-height:20px;border:1px solid #ddd;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,0.055);-moz-box-shadow:0 1px 3px rgba(0,0,0,0.055);box-shadow:0 1px 3px rgba(0,0,0,0.055);-webkit-transition:all .2s ease-in-out;-moz-transition:all .2s ease-in-out;-o-transition:all .2s ease-in-out;transition:all .2s ease-in-out}a.thumbnail:hover,a.thumbnail:focus{border-color:#08c;-webkit-box-shadow:0 1px 4px rgba(0,105,214,0.25);-moz-box-shadow:0 1px 4px rgba(0,105,214,0.25);box-shadow:0 1px 4px rgba(0,105,214,0.25)}.thumbnail>img{display:block;max-width:100%;margin-right:auto;margin-left:auto}.thumbnail .caption{padding:9px;color:#555}.media,.media-body{overflow:hidden;*overflow:visible;zoom:1}.media,.media .media{margin-top:15px}.media:first-child{margin-top:0}.media-object{display:block}.media-heading{margin:0 0 5px}.media>.pull-left{margin-right:10px}.media>.pull-right{margin-left:10px}.media-list{margin-left:0;list-style:none}.label,.badge{display:inline-block;padding:2px 4px;font-size:11.844px;font-weight:bold;line-height:14px;color:#fff;text-shadow:0 -1px 0 rgba(0,0,0,0.25);white-space:nowrap;vertical-align:baseline;background-color:#999}.label{-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.badge{padding-right:9px;padding-left:9px;-webkit-border-radius:9px;-moz-border-radius:9px;border-radius:9px}.label:empty,.badge:empty{display:none}a.label:hover,a.label:focus,a.badge:hover,a.badge:focus{color:#fff;text-decoration:none;cursor:pointer}.label-important,.badge-important{background-color:#b94a48}.label-important[href],.badge-important[href]{background-color:#953b39}.label-warning,.badge-warning{background-color:#f89406}.label-warning[href],.badge-warning[href]{background-color:#c67605}.label-success,.badge-success{background-color:#468847}.label-success[href],.badge-success[href]{background-color:#356635}.label-info,.badge-info{background-color:#3a87ad}.label-info[href],.badge-info[href]{background-color:#2d6987}.label-inverse,.badge-inverse{background-color:#333}.label-inverse[href],.badge-inverse[href]{background-color:#1a1a1a}.btn .label,.btn .badge{position:relative;top:-1px}.btn-mini .label,.btn-mini .badge{top:0}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-moz-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-ms-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@-o-keyframes progress-bar-stripes{from{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{height:20px;margin-bottom:20px;overflow:hidden;background-color:#f7f7f7;background-image:-moz-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:-webkit-gradient(linear,0 0,0 100%,from(#f5f5f5),to(#f9f9f9));background-image:-webkit-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:-o-linear-gradient(top,#f5f5f5,#f9f9f9);background-image:linear-gradient(to bottom,#f5f5f5,#f9f9f9);background-repeat:repeat-x;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fff5f5f5',endColorstr='#fff9f9f9',GradientType=0);-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1)}.progress .bar{float:left;width:0;height:100%;font-size:12px;color:#fff;text-align:center;text-shadow:0 -1px 0 rgba(0,0,0,0.25);background-color:#0e90d2;background-image:-moz-linear-gradient(top,#149bdf,#0480be);background-image:-webkit-gradient(linear,0 0,0 100%,from(#149bdf),to(#0480be));background-image:-webkit-linear-gradient(top,#149bdf,#0480be);background-image:-o-linear-gradient(top,#149bdf,#0480be);background-image:linear-gradient(to bottom,#149bdf,#0480be);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff149bdf',endColorstr='#ff0480be',GradientType=0);-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-transition:width .6s ease;-moz-transition:width .6s ease;-o-transition:width .6s ease;transition:width .6s ease}.progress .bar+.bar{-webkit-box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15);-moz-box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 1px 0 0 rgba(0,0,0,0.15),inset 0 -1px 0 rgba(0,0,0,0.15)}.progress-striped .bar{background-color:#149bdf;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);-webkit-background-size:40px 40px;-moz-background-size:40px 40px;-o-background-size:40px 40px;background-size:40px 40px}.progress.active .bar{-webkit-animation:progress-bar-stripes 2s linear infinite;-moz-animation:progress-bar-stripes 2s linear infinite;-ms-animation:progress-bar-stripes 2s linear infinite;-o-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-danger .bar,.progress .bar-danger{background-color:#dd514c;background-image:-moz-linear-gradient(top,#ee5f5b,#c43c35);background-image:-webkit-gradient(linear,0 0,0 100%,from(#ee5f5b),to(#c43c35));background-image:-webkit-linear-gradient(top,#ee5f5b,#c43c35);background-image:-o-linear-gradient(top,#ee5f5b,#c43c35);background-image:linear-gradient(to bottom,#ee5f5b,#c43c35);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffee5f5b',endColorstr='#ffc43c35',GradientType=0)}.progress-danger.progress-striped .bar,.progress-striped .bar-danger{background-color:#ee5f5b;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-success .bar,.progress .bar-success{background-color:#5eb95e;background-image:-moz-linear-gradient(top,#62c462,#57a957);background-image:-webkit-gradient(linear,0 0,0 100%,from(#62c462),to(#57a957));background-image:-webkit-linear-gradient(top,#62c462,#57a957);background-image:-o-linear-gradient(top,#62c462,#57a957);background-image:linear-gradient(to bottom,#62c462,#57a957);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff62c462',endColorstr='#ff57a957',GradientType=0)}.progress-success.progress-striped .bar,.progress-striped .bar-success{background-color:#62c462;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-info .bar,.progress .bar-info{background-color:#4bb1cf;background-image:-moz-linear-gradient(top,#5bc0de,#339bb9);background-image:-webkit-gradient(linear,0 0,0 100%,from(#5bc0de),to(#339bb9));background-image:-webkit-linear-gradient(top,#5bc0de,#339bb9);background-image:-o-linear-gradient(top,#5bc0de,#339bb9);background-image:linear-gradient(to bottom,#5bc0de,#339bb9);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff5bc0de',endColorstr='#ff339bb9',GradientType=0)}.progress-info.progress-striped .bar,.progress-striped .bar-info{background-color:#5bc0de;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.progress-warning .bar,.progress .bar-warning{background-color:#faa732;background-image:-moz-linear-gradient(top,#fbb450,#f89406);background-image:-webkit-gradient(linear,0 0,0 100%,from(#fbb450),to(#f89406));background-image:-webkit-linear-gradient(top,#fbb450,#f89406);background-image:-o-linear-gradient(top,#fbb450,#f89406);background-image:linear-gradient(to bottom,#fbb450,#f89406);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#fffbb450',endColorstr='#fff89406',GradientType=0)}.progress-warning.progress-striped .bar,.progress-striped .bar-warning{background-color:#fbb450;background-image:-webkit-gradient(linear,0 100%,100% 0,color-stop(0.25,rgba(255,255,255,0.15)),color-stop(0.25,transparent),color-stop(0.5,transparent),color-stop(0.5,rgba(255,255,255,0.15)),color-stop(0.75,rgba(255,255,255,0.15)),color-stop(0.75,transparent),to(transparent));background-image:-webkit-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-moz-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:-o-linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent);background-image:linear-gradient(45deg,rgba(255,255,255,0.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,0.15) 50%,rgba(255,255,255,0.15) 75%,transparent 75%,transparent)}.accordion{margin-bottom:20px}.accordion-group{margin-bottom:2px;border:1px solid #e5e5e5;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.accordion-heading{border-bottom:0}.accordion-heading .accordion-toggle{display:block;padding:8px 15px}.accordion-toggle{cursor:pointer}.accordion-inner{padding:9px 15px;border-top:1px solid #e5e5e5}.carousel{position:relative;margin-bottom:20px;line-height:1}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner>.item{position:relative;display:none;-webkit-transition:.6s ease-in-out left;-moz-transition:.6s ease-in-out left;-o-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>img,.carousel-inner>.item>a>img{display:block;line-height:1}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:40%;left:15px;width:40px;height:40px;margin-top:-20px;font-size:60px;font-weight:100;line-height:30px;color:#fff;text-align:center;background:#222;border:3px solid #fff;-webkit-border-radius:23px;-moz-border-radius:23px;border-radius:23px;opacity:.5;filter:alpha(opacity=50)}.carousel-control.right{right:15px;left:auto}.carousel-control:hover,.carousel-control:focus{color:#fff;text-decoration:none;opacity:.9;filter:alpha(opacity=90)}.carousel-indicators{position:absolute;top:15px;right:15px;z-index:5;margin:0;list-style:none}.carousel-indicators li{display:block;float:left;width:10px;height:10px;margin-left:5px;text-indent:-999px;background-color:#ccc;background-color:rgba(255,255,255,0.25);border-radius:5px}.carousel-indicators .active{background-color:#fff}.carousel-caption{position:absolute;right:0;bottom:0;left:0;padding:15px;background:#333;background:rgba(0,0,0,0.75)}.carousel-caption h4,.carousel-caption p{line-height:20px;color:#fff}.carousel-caption h4{margin:0 0 5px}.carousel-caption p{margin-bottom:0}.hero-unit{padding:60px;margin-bottom:30px;font-size:18px;font-weight:200;line-height:30px;color:inherit;background-color:#eee;-webkit-border-radius:6px;-moz-border-radius:6px;border-radius:6px}.hero-unit h1{margin-bottom:0;font-size:60px;line-height:1;letter-spacing:-1px;color:inherit}.hero-unit li{line-height:30px}.pull-right{float:right}.pull-left{float:left}.hide{display:none}.show{display:block}.invisible{visibility:hidden}.affix{position:fixed}
+/*!
+ * Bootstrap Responsive v2.3.1
+ *
+ * Copyright 2012 Twitter, Inc
+ * Licensed under the Apache License v2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Designed and built with all the love in the world @twitter by @mdo and @fat.
+ */.clearfix{*zoom:1}.clearfix:before,.clearfix:after{display:table;line-height:0;content:""}.clearfix:after{clear:both}.hide-text{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.input-block-level{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}@-ms-viewport{width:device-width}.hidden{display:none;visibility:hidden}.visible-phone{display:none!important}.visible-tablet{display:none!important}.hidden-desktop{display:none!important}.visible-desktop{display:inherit!important}@media(min-width:768px) and (max-width:979px){.hidden-desktop{display:inherit!important}.visible-desktop{display:none!important}.visible-tablet{display:inherit!important}.hidden-tablet{display:none!important}}@media(max-width:767px){.hidden-desktop{display:inherit!important}.visible-desktop{display:none!important}.visible-phone{display:inherit!important}.hidden-phone{display:none!important}}.visible-print{display:none!important}@media print{.visible-print{display:inherit!important}.hidden-print{display:none!important}}@media(min-width:1200px){.row{margin-left:-30px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:30px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:1170px}.span12{width:1170px}.span11{width:1070px}.span10{width:970px}.span9{width:870px}.span8{width:770px}.span7{width:670px}.span6{width:570px}.span5{width:470px}.span4{width:370px}.span3{width:270px}.span2{width:170px}.span1{width:70px}.offset12{margin-left:1230px}.offset11{margin-left:1130px}.offset10{margin-left:1030px}.offset9{margin-left:930px}.offset8{margin-left:830px}.offset7{margin-left:730px}.offset6{margin-left:630px}.offset5{margin-left:530px}.offset4{margin-left:430px}.offset3{margin-left:330px}.offset2{margin-left:230px}.offset1{margin-left:130px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.564102564102564%;*margin-left:2.5109110747408616%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .controls-row [class*="span"]+[class*="span"]{margin-left:2.564102564102564%}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.45299145299145%;*width:91.39979996362975%}.row-fluid .span10{width:82.90598290598291%;*width:82.8527914166212%}.row-fluid .span9{width:74.35897435897436%;*width:74.30578286961266%}.row-fluid .span8{width:65.81196581196582%;*width:65.75877432260411%}.row-fluid .span7{width:57.26495726495726%;*width:57.21176577559556%}.row-fluid .span6{width:48.717948717948715%;*width:48.664757228587014%}.row-fluid .span5{width:40.17094017094017%;*width:40.11774868157847%}.row-fluid .span4{width:31.623931623931625%;*width:31.570740134569924%}.row-fluid .span3{width:23.076923076923077%;*width:23.023731587561375%}.row-fluid .span2{width:14.52991452991453%;*width:14.476723040552828%}.row-fluid .span1{width:5.982905982905983%;*width:5.929714493544281%}.row-fluid .offset12{margin-left:105.12820512820512%;*margin-left:105.02182214948171%}.row-fluid .offset12:first-child{margin-left:102.56410256410257%;*margin-left:102.45771958537915%}.row-fluid .offset11{margin-left:96.58119658119658%;*margin-left:96.47481360247316%}.row-fluid .offset11:first-child{margin-left:94.01709401709402%;*margin-left:93.91071103837061%}.row-fluid .offset10{margin-left:88.03418803418803%;*margin-left:87.92780505546462%}.row-fluid .offset10:first-child{margin-left:85.47008547008548%;*margin-left:85.36370249136206%}.row-fluid .offset9{margin-left:79.48717948717949%;*margin-left:79.38079650845607%}.row-fluid .offset9:first-child{margin-left:76.92307692307693%;*margin-left:76.81669394435352%}.row-fluid .offset8{margin-left:70.94017094017094%;*margin-left:70.83378796144753%}.row-fluid .offset8:first-child{margin-left:68.37606837606839%;*margin-left:68.26968539734497%}.row-fluid .offset7{margin-left:62.393162393162385%;*margin-left:62.28677941443899%}.row-fluid .offset7:first-child{margin-left:59.82905982905982%;*margin-left:59.72267685033642%}.row-fluid .offset6{margin-left:53.84615384615384%;*margin-left:53.739770867430444%}.row-fluid .offset6:first-child{margin-left:51.28205128205128%;*margin-left:51.175668303327875%}.row-fluid .offset5{margin-left:45.299145299145295%;*margin-left:45.1927623204219%}.row-fluid .offset5:first-child{margin-left:42.73504273504273%;*margin-left:42.62865975631933%}.row-fluid .offset4{margin-left:36.75213675213675%;*margin-left:36.645753773413354%}.row-fluid .offset4:first-child{margin-left:34.18803418803419%;*margin-left:34.081651209310785%}.row-fluid .offset3{margin-left:28.205128205128204%;*margin-left:28.0987452264048%}.row-fluid .offset3:first-child{margin-left:25.641025641025642%;*margin-left:25.53464266230224%}.row-fluid .offset2{margin-left:19.65811965811966%;*margin-left:19.551736679396257%}.row-fluid .offset2:first-child{margin-left:17.094017094017094%;*margin-left:16.98763411529369%}.row-fluid .offset1{margin-left:11.11111111111111%;*margin-left:11.004728132387708%}.row-fluid .offset1:first-child{margin-left:8.547008547008547%;*margin-left:8.440625568285142%}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:30px}input.span12,textarea.span12,.uneditable-input.span12{width:1156px}input.span11,textarea.span11,.uneditable-input.span11{width:1056px}input.span10,textarea.span10,.uneditable-input.span10{width:956px}input.span9,textarea.span9,.uneditable-input.span9{width:856px}input.span8,textarea.span8,.uneditable-input.span8{width:756px}input.span7,textarea.span7,.uneditable-input.span7{width:656px}input.span6,textarea.span6,.uneditable-input.span6{width:556px}input.span5,textarea.span5,.uneditable-input.span5{width:456px}input.span4,textarea.span4,.uneditable-input.span4{width:356px}input.span3,textarea.span3,.uneditable-input.span3{width:256px}input.span2,textarea.span2,.uneditable-input.span2{width:156px}input.span1,textarea.span1,.uneditable-input.span1{width:56px}.thumbnails{margin-left:-30px}.thumbnails>li{margin-left:30px}.row-fluid .thumbnails{margin-left:0}}@media(min-width:768px) and (max-width:979px){.row{margin-left:-20px;*zoom:1}.row:before,.row:after{display:table;line-height:0;content:""}.row:after{clear:both}[class*="span"]{float:left;min-height:1px;margin-left:20px}.container,.navbar-static-top .container,.navbar-fixed-top .container,.navbar-fixed-bottom .container{width:724px}.span12{width:724px}.span11{width:662px}.span10{width:600px}.span9{width:538px}.span8{width:476px}.span7{width:414px}.span6{width:352px}.span5{width:290px}.span4{width:228px}.span3{width:166px}.span2{width:104px}.span1{width:42px}.offset12{margin-left:764px}.offset11{margin-left:702px}.offset10{margin-left:640px}.offset9{margin-left:578px}.offset8{margin-left:516px}.offset7{margin-left:454px}.offset6{margin-left:392px}.offset5{margin-left:330px}.offset4{margin-left:268px}.offset3{margin-left:206px}.offset2{margin-left:144px}.offset1{margin-left:82px}.row-fluid{width:100%;*zoom:1}.row-fluid:before,.row-fluid:after{display:table;line-height:0;content:""}.row-fluid:after{clear:both}.row-fluid [class*="span"]{display:block;float:left;width:100%;min-height:30px;margin-left:2.7624309392265194%;*margin-left:2.709239449864817%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="span"]:first-child{margin-left:0}.row-fluid .controls-row [class*="span"]+[class*="span"]{margin-left:2.7624309392265194%}.row-fluid .span12{width:100%;*width:99.94680851063829%}.row-fluid .span11{width:91.43646408839778%;*width:91.38327259903608%}.row-fluid .span10{width:82.87292817679558%;*width:82.81973668743387%}.row-fluid .span9{width:74.30939226519337%;*width:74.25620077583166%}.row-fluid .span8{width:65.74585635359117%;*width:65.69266486422946%}.row-fluid .span7{width:57.18232044198895%;*width:57.12912895262725%}.row-fluid .span6{width:48.61878453038674%;*width:48.56559304102504%}.row-fluid .span5{width:40.05524861878453%;*width:40.00205712942283%}.row-fluid .span4{width:31.491712707182323%;*width:31.43852121782062%}.row-fluid .span3{width:22.92817679558011%;*width:22.87498530621841%}.row-fluid .span2{width:14.3646408839779%;*width:14.311449394616199%}.row-fluid .span1{width:5.801104972375691%;*width:5.747913483013988%}.row-fluid .offset12{margin-left:105.52486187845304%;*margin-left:105.41847889972962%}.row-fluid .offset12:first-child{margin-left:102.76243093922652%;*margin-left:102.6560479605031%}.row-fluid .offset11{margin-left:96.96132596685082%;*margin-left:96.8549429881274%}.row-fluid .offset11:first-child{margin-left:94.1988950276243%;*margin-left:94.09251204890089%}.row-fluid .offset10{margin-left:88.39779005524862%;*margin-left:88.2914070765252%}.row-fluid .offset10:first-child{margin-left:85.6353591160221%;*margin-left:85.52897613729868%}.row-fluid .offset9{margin-left:79.8342541436464%;*margin-left:79.72787116492299%}.row-fluid .offset9:first-child{margin-left:77.07182320441989%;*margin-left:76.96544022569647%}.row-fluid .offset8{margin-left:71.2707182320442%;*margin-left:71.16433525332079%}.row-fluid .offset8:first-child{margin-left:68.50828729281768%;*margin-left:68.40190431409427%}.row-fluid .offset7{margin-left:62.70718232044199%;*margin-left:62.600799341718584%}.row-fluid .offset7:first-child{margin-left:59.94475138121547%;*margin-left:59.838368402492065%}.row-fluid .offset6{margin-left:54.14364640883978%;*margin-left:54.037263430116376%}.row-fluid .offset6:first-child{margin-left:51.38121546961326%;*margin-left:51.27483249088986%}.row-fluid .offset5{margin-left:45.58011049723757%;*margin-left:45.47372751851417%}.row-fluid .offset5:first-child{margin-left:42.81767955801105%;*margin-left:42.71129657928765%}.row-fluid .offset4{margin-left:37.01657458563536%;*margin-left:36.91019160691196%}.row-fluid .offset4:first-child{margin-left:34.25414364640884%;*margin-left:34.14776066768544%}.row-fluid .offset3{margin-left:28.45303867403315%;*margin-left:28.346655695309746%}.row-fluid .offset3:first-child{margin-left:25.69060773480663%;*margin-left:25.584224756083227%}.row-fluid .offset2{margin-left:19.88950276243094%;*margin-left:19.783119783707537%}.row-fluid .offset2:first-child{margin-left:17.12707182320442%;*margin-left:17.02068884448102%}.row-fluid .offset1{margin-left:11.32596685082873%;*margin-left:11.219583872105325%}.row-fluid .offset1:first-child{margin-left:8.56353591160221%;*margin-left:8.457152932878806%}input,textarea,.uneditable-input{margin-left:0}.controls-row [class*="span"]+[class*="span"]{margin-left:20px}input.span12,textarea.span12,.uneditable-input.span12{width:710px}input.span11,textarea.span11,.uneditable-input.span11{width:648px}input.span10,textarea.span10,.uneditable-input.span10{width:586px}input.span9,textarea.span9,.uneditable-input.span9{width:524px}input.span8,textarea.span8,.uneditable-input.span8{width:462px}input.span7,textarea.span7,.uneditable-input.span7{width:400px}input.span6,textarea.span6,.uneditable-input.span6{width:338px}input.span5,textarea.span5,.uneditable-input.span5{width:276px}input.span4,textarea.span4,.uneditable-input.span4{width:214px}input.span3,textarea.span3,.uneditable-input.span3{width:152px}input.span2,textarea.span2,.uneditable-input.span2{width:90px}input.span1,textarea.span1,.uneditable-input.span1{width:28px}}@media(max-width:767px){body{padding-right:20px;padding-left:20px}.navbar-fixed-top,.navbar-fixed-bottom,.navbar-static-top{margin-right:-20px;margin-left:-20px}.container-fluid{padding:0}.dl-horizontal dt{float:none;width:auto;clear:none;text-align:left}.dl-horizontal dd{margin-left:0}.container{width:auto}.row-fluid{width:100%}.row,.thumbnails{margin-left:0}.thumbnails>li{float:none;margin-left:0}[class*="span"],.uneditable-input[class*="span"],.row-fluid [class*="span"]{display:block;float:none;width:100%;margin-left:0;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.span12,.row-fluid .span12{width:100%;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.row-fluid [class*="offset"]:first-child{margin-left:0}.input-large,.input-xlarge,.input-xxlarge,input[class*="span"],select[class*="span"],textarea[class*="span"],.uneditable-input{display:block;width:100%;min-height:30px;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}.input-prepend input,.input-append input,.input-prepend input[class*="span"],.input-append input[class*="span"]{display:inline-block;width:auto}.controls-row [class*="span"]+[class*="span"]{margin-left:0}.modal{position:fixed;top:20px;right:20px;left:20px;width:auto;margin:0}.modal.fade{top:-100px}.modal.fade.in{top:20px}}@media(max-width:480px){.nav-collapse{-webkit-transform:translate3d(0,0,0)}.page-header h1 small{display:block;line-height:20px}input[type="checkbox"],input[type="radio"]{border:1px solid #ccc}.form-horizontal .control-label{float:none;width:auto;padding-top:0;text-align:left}.form-horizontal .controls{margin-left:0}.form-horizontal .control-list{padding-top:0}.form-horizontal .form-actions{padding-right:10px;padding-left:10px}.media .pull-left,.media .pull-right{display:block;float:none;margin-bottom:10px}.media-object{margin-right:0;margin-left:0}.modal{top:10px;right:10px;left:10px}.modal-header .close{padding:10px;margin:-10px}.carousel-caption{position:static}}@media(max-width:979px){body{padding-top:0}.navbar-fixed-top,.navbar-fixed-bottom{position:static}.navbar-fixed-top{margin-bottom:20px}.navbar-fixed-bottom{margin-top:20px}.navbar-fixed-top .navbar-inner,.navbar-fixed-bottom .navbar-inner{padding:5px}.navbar .container{width:auto;padding:0}.navbar .brand{padding-right:10px;padding-left:10px;margin:0 0 0 -5px}.nav-collapse{clear:both}.nav-collapse .nav{float:none;margin:0 0 10px}.nav-collapse .nav>li{float:none}.nav-collapse .nav>li>a{margin-bottom:2px}.nav-collapse .nav>.divider-vertical{display:none}.nav-collapse .nav .nav-header{color:#777;text-shadow:none}.nav-collapse .nav>li>a,.nav-collapse .dropdown-menu a{padding:9px 15px;font-weight:bold;color:#777;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px}.nav-collapse .btn{padding:4px 10px 4px;font-weight:normal;-webkit-border-radius:4px;-moz-border-radius:4px;border-radius:4px}.nav-collapse .dropdown-menu li+li a{margin-bottom:2px}.nav-collapse .nav>li>a:hover,.nav-collapse .nav>li>a:focus,.nav-collapse .dropdown-menu a:hover,.nav-collapse .dropdown-menu a:focus{background-color:#f2f2f2}.navbar-inverse .nav-collapse .nav>li>a,.navbar-inverse .nav-collapse .dropdown-menu a{color:#999}.navbar-inverse .nav-collapse .nav>li>a:hover,.navbar-inverse .nav-collapse .nav>li>a:focus,.navbar-inverse .nav-collapse .dropdown-menu a:hover,.navbar-inverse .nav-collapse .dropdown-menu a:focus{background-color:#111}.nav-collapse.in .btn-group{padding:0;margin-top:5px}.nav-collapse .dropdown-menu{position:static;top:auto;left:auto;display:none;float:none;max-width:none;padding:0;margin:0 15px;background-color:transparent;border:0;-webkit-border-radius:0;-moz-border-radius:0;border-radius:0;-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none}.nav-collapse .open>.dropdown-menu{display:block}.nav-collapse .dropdown-menu:before,.nav-collapse .dropdown-menu:after{display:none}.nav-collapse .dropdown-menu .divider{display:none}.nav-collapse .nav>li>.dropdown-menu:before,.nav-collapse .nav>li>.dropdown-menu:after{display:none}.nav-collapse .navbar-form,.nav-collapse .navbar-search{float:none;padding:10px 15px;margin:10px 0;border-top:1px solid #f2f2f2;border-bottom:1px solid #f2f2f2;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);-moz-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1)}.navbar-inverse .nav-collapse .navbar-form,.navbar-inverse .nav-collapse .navbar-search{border-top-color:#111;border-bottom-color:#111}.navbar .nav-collapse .nav.pull-right{float:none;margin-left:0}.nav-collapse,.nav-collapse.collapse{height:0;overflow:hidden}.navbar .btn-navbar{display:block}.navbar-static .navbar-inner{padding-right:10px;padding-left:10px}}@media(min-width:980px){.nav-collapse.collapse{height:auto!important;overflow:visible!important}}
diff --git a/website/static/bootstrap.min.js b/website/static/bootstrap.min.js
new file mode 100644
index 000000000..95c5ac5ee
--- /dev/null
+++ b/website/static/bootstrap.min.js
@@ -0,0 +1,6 @@
+/*!
+* Bootstrap.js by @fat & @mdo
+* Copyright 2012 Twitter, Inc.
+* http://www.apache.org/licenses/LICENSE-2.0.txt
+*/
+!function(e){"use strict";e(function(){e.support.transition=function(){var e=function(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"},n;for(n in t)if(e.style[n]!==undefined)return t[n]}();return e&&{end:e}}()})}(window.jQuery),!function(e){"use strict";var t='[data-dismiss="alert"]',n=function(n){e(n).on("click",t,this.close)};n.prototype.close=function(t){function s(){i.trigger("closed").remove()}var n=e(this),r=n.attr("data-target"),i;r||(r=n.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,"")),i=e(r),t&&t.preventDefault(),i.length||(i=n.hasClass("alert")?n:n.parent()),i.trigger(t=e.Event("close"));if(t.isDefaultPrevented())return;i.removeClass("in"),e.support.transition&&i.hasClass("fade")?i.on(e.support.transition.end,s):s()};var r=e.fn.alert;e.fn.alert=function(t){return this.each(function(){var r=e(this),i=r.data("alert");i||r.data("alert",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.alert.Constructor=n,e.fn.alert.noConflict=function(){return e.fn.alert=r,this},e(document).on("click.alert.data-api",t,n.prototype.close)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.button.defaults,n)};t.prototype.setState=function(e){var t="disabled",n=this.$element,r=n.data(),i=n.is("input")?"val":"html";e+="Text",r.resetText||n.data("resetText",n[i]()),n[i](r[e]||this.options[e]),setTimeout(function(){e=="loadingText"?n.addClass(t).attr(t,t):n.removeClass(t).removeAttr(t)},0)},t.prototype.toggle=function(){var e=this.$element.closest('[data-toggle="buttons-radio"]');e&&e.find(".active").removeClass("active"),this.$element.toggleClass("active")};var n=e.fn.button;e.fn.button=function(n){return this.each(function(){var r=e(this),i=r.data("button"),s=typeof n=="object"&&n;i||r.data("button",i=new t(this,s)),n=="toggle"?i.toggle():n&&i.setState(n)})},e.fn.button.defaults={loadingText:"loading..."},e.fn.button.Constructor=t,e.fn.button.noConflict=function(){return e.fn.button=n,this},e(document).on("click.button.data-api","[data-toggle^=button]",function(t){var n=e(t.target);n.hasClass("btn")||(n=n.closest(".btn")),n.button("toggle")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.options.pause=="hover"&&this.$element.on("mouseenter",e.proxy(this.pause,this)).on("mouseleave",e.proxy(this.cycle,this))};t.prototype={cycle:function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},getActiveIndex:function(){return this.$active=this.$element.find(".item.active"),this.$items=this.$active.parent().children(),this.$items.index(this.$active)},to:function(t){var n=this.getActiveIndex(),r=this;if(t>this.$items.length-1||t<0)return;return this.sliding?this.$element.one("slid",function(){r.to(t)}):n==t?this.pause().cycle():this.slide(t>n?"next":"prev",e(this.$items[t]))},pause:function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition.end&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),clearInterval(this.interval),this.interval=null,this},next:function(){if(this.sliding)return;return this.slide("next")},prev:function(){if(this.sliding)return;return this.slide("prev")},slide:function(t,n){var r=this.$element.find(".item.active"),i=n||r[t](),s=this.interval,o=t=="next"?"left":"right",u=t=="next"?"first":"last",a=this,f;this.sliding=!0,s&&this.pause(),i=i.length?i:this.$element.find(".item")[u](),f=e.Event("slide",{relatedTarget:i[0],direction:o});if(i.hasClass("active"))return;this.$indicators.length&&(this.$indicators.find(".active").removeClass("active"),this.$element.one("slid",function(){var t=e(a.$indicators.children()[a.getActiveIndex()]);t&&t.addClass("active")}));if(e.support.transition&&this.$element.hasClass("slide")){this.$element.trigger(f);if(f.isDefaultPrevented())return;i.addClass(t),i[0].offsetWidth,r.addClass(o),i.addClass(o),this.$element.one(e.support.transition.end,function(){i.removeClass([t,o].join(" ")).addClass("active"),r.removeClass(["active",o].join(" ")),a.sliding=!1,setTimeout(function(){a.$element.trigger("slid")},0)})}else{this.$element.trigger(f);if(f.isDefaultPrevented())return;r.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger("slid")}return s&&this.cycle(),this}};var n=e.fn.carousel;e.fn.carousel=function(n){return this.each(function(){var r=e(this),i=r.data("carousel"),s=e.extend({},e.fn.carousel.defaults,typeof n=="object"&&n),o=typeof n=="string"?n:s.slide;i||r.data("carousel",i=new t(this,s)),typeof n=="number"?i.to(n):o?i[o]():s.interval&&i.pause().cycle()})},e.fn.carousel.defaults={interval:5e3,pause:"hover"},e.fn.carousel.Constructor=t,e.fn.carousel.noConflict=function(){return e.fn.carousel=n,this},e(document).on("click.carousel.data-api","[data-slide], [data-slide-to]",function(t){var n=e(this),r,i=e(n.attr("data-target")||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,"")),s=e.extend({},i.data(),n.data()),o;i.carousel(s),(o=n.attr("data-slide-to"))&&i.data("carousel").pause().to(o).cycle(),t.preventDefault()})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.collapse.defaults,n),this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};t.prototype={constructor:t,dimension:function(){var e=this.$element.hasClass("width");return e?"width":"height"},show:function(){var t,n,r,i;if(this.transitioning||this.$element.hasClass("in"))return;t=this.dimension(),n=e.camelCase(["scroll",t].join("-")),r=this.$parent&&this.$parent.find("> .accordion-group > .in");if(r&&r.length){i=r.data("collapse");if(i&&i.transitioning)return;r.collapse("hide"),i||r.data("collapse",null)}this.$element[t](0),this.transition("addClass",e.Event("show"),"shown"),e.support.transition&&this.$element[t](this.$element[0][n])},hide:function(){var t;if(this.transitioning||!this.$element.hasClass("in"))return;t=this.dimension(),this.reset(this.$element[t]()),this.transition("removeClass",e.Event("hide"),"hidden"),this.$element[t](0)},reset:function(e){var t=this.dimension();return this.$element.removeClass("collapse")[t](e||"auto")[0].offsetWidth,this.$element[e!==null?"addClass":"removeClass"]("collapse"),this},transition:function(t,n,r){var i=this,s=function(){n.type=="show"&&i.reset(),i.transitioning=0,i.$element.trigger(r)};this.$element.trigger(n);if(n.isDefaultPrevented())return;this.transitioning=1,this.$element[t]("in"),e.support.transition&&this.$element.hasClass("collapse")?this.$element.one(e.support.transition.end,s):s()},toggle:function(){this[this.$element.hasClass("in")?"hide":"show"]()}};var n=e.fn.collapse;e.fn.collapse=function(n){return this.each(function(){var r=e(this),i=r.data("collapse"),s=e.extend({},e.fn.collapse.defaults,r.data(),typeof n=="object"&&n);i||r.data("collapse",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.collapse.defaults={toggle:!0},e.fn.collapse.Constructor=t,e.fn.collapse.noConflict=function(){return e.fn.collapse=n,this},e(document).on("click.collapse.data-api","[data-toggle=collapse]",function(t){var n=e(this),r,i=n.attr("data-target")||t.preventDefault()||(r=n.attr("href"))&&r.replace(/.*(?=#[^\s]+$)/,""),s=e(i).data("collapse")?"toggle":n.data();n[e(i).hasClass("in")?"addClass":"removeClass"]("collapsed"),e(i).collapse(s)})}(window.jQuery),!function(e){"use strict";function r(){e(t).each(function(){i(e(this)).removeClass("open")})}function i(t){var n=t.attr("data-target"),r;n||(n=t.attr("href"),n=n&&/#/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,"")),r=n&&e(n);if(!r||!r.length)r=t.parent();return r}var t="[data-toggle=dropdown]",n=function(t){var n=e(t).on("click.dropdown.data-api",this.toggle);e("html").on("click.dropdown.data-api",function(){n.parent().removeClass("open")})};n.prototype={constructor:n,toggle:function(t){var n=e(this),s,o;if(n.is(".disabled, :disabled"))return;return s=i(n),o=s.hasClass("open"),r(),o||s.toggleClass("open"),n.focus(),!1},keydown:function(n){var r,s,o,u,a,f;if(!/(38|40|27)/.test(n.keyCode))return;r=e(this),n.preventDefault(),n.stopPropagation();if(r.is(".disabled, :disabled"))return;u=i(r),a=u.hasClass("open");if(!a||a&&n.keyCode==27)return n.which==27&&u.find(t).focus(),r.click();s=e("[role=menu] li:not(.divider):visible a",u);if(!s.length)return;f=s.index(s.filter(":focus")),n.keyCode==38&&f>0&&f--,n.keyCode==40&&f<s.length-1&&f++,~f||(f=0),s.eq(f).focus()}};var s=e.fn.dropdown;e.fn.dropdown=function(t){return this.each(function(){var r=e(this),i=r.data("dropdown");i||r.data("dropdown",i=new n(this)),typeof t=="string"&&i[t].call(r)})},e.fn.dropdown.Constructor=n,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.dropdown.data-api",r).on("click.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.dropdown-menu",function(e){e.stopPropagation()}).on("click.dropdown.data-api",t,n.prototype.toggle).on("keydown.dropdown.data-api",t+", [role=menu]",n.prototype.keydown)}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=n,this.$element=e(t).delegate('[data-dismiss="modal"]',"click.dismiss.modal",e.proxy(this.hide,this)),this.options.remote&&this.$element.find(".modal-body").load(this.options.remote)};t.prototype={constructor:t,toggle:function(){return this[this.isShown?"hide":"show"]()},show:function(){var t=this,n=e.Event("show");this.$element.trigger(n);if(this.isShown||n.isDefaultPrevented())return;this.isShown=!0,this.escape(),this.backdrop(function(){var n=e.support.transition&&t.$element.hasClass("fade");t.$element.parent().length||t.$element.appendTo(document.body),t.$element.show(),n&&t.$element[0].offsetWidth,t.$element.addClass("in").attr("aria-hidden",!1),t.enforceFocus(),n?t.$element.one(e.support.transition.end,function(){t.$element.focus().trigger("shown")}):t.$element.focus().trigger("shown")})},hide:function(t){t&&t.preventDefault();var n=this;t=e.Event("hide"),this.$element.trigger(t);if(!this.isShown||t.isDefaultPrevented())return;this.isShown=!1,this.escape(),e(document).off("focusin.modal"),this.$element.removeClass("in").attr("aria-hidden",!0),e.support.transition&&this.$element.hasClass("fade")?this.hideWithTransition():this.hideModal()},enforceFocus:function(){var t=this;e(document).on("focusin.modal",function(e){t.$element[0]!==e.target&&!t.$element.has(e.target).length&&t.$element.focus()})},escape:function(){var e=this;this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.modal",function(t){t.which==27&&e.hide()}):this.isShown||this.$element.off("keyup.dismiss.modal")},hideWithTransition:function(){var t=this,n=setTimeout(function(){t.$element.off(e.support.transition.end),t.hideModal()},500);this.$element.one(e.support.transition.end,function(){clearTimeout(n),t.hideModal()})},hideModal:function(){var e=this;this.$element.hide(),this.backdrop(function(){e.removeBackdrop(),e.$element.trigger("hidden")})},removeBackdrop:function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},backdrop:function(t){var n=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&r;this.$backdrop=e('<div class="modal-backdrop '+r+'" />').appendTo(document.body),this.$backdrop.click(this.options.backdrop=="static"?e.proxy(this.$element[0].focus,this.$element[0]):e.proxy(this.hide,this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in");if(!t)return;i?this.$backdrop.one(e.support.transition.end,t):t()}else!this.isShown&&this.$backdrop?(this.$backdrop.removeClass("in"),e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one(e.support.transition.end,t):t()):t&&t()}};var n=e.fn.modal;e.fn.modal=function(n){return this.each(function(){var r=e(this),i=r.data("modal"),s=e.extend({},e.fn.modal.defaults,r.data(),typeof n=="object"&&n);i||r.data("modal",i=new t(this,s)),typeof n=="string"?i[n]():s.show&&i.show()})},e.fn.modal.defaults={backdrop:!0,keyboard:!0,show:!0},e.fn.modal.Constructor=t,e.fn.modal.noConflict=function(){return e.fn.modal=n,this},e(document).on("click.modal.data-api",'[data-toggle="modal"]',function(t){var n=e(this),r=n.attr("href"),i=e(n.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),s=i.data("modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},i.data(),n.data());t.preventDefault(),i.modal(s).one("hide",function(){n.focus()})})}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("tooltip",e,t)};t.prototype={constructor:t,init:function(t,n,r){var i,s,o,u,a;this.type=t,this.$element=e(n),this.options=this.getOptions(r),this.enabled=!0,o=this.options.trigger.split(" ");for(a=o.length;a--;)u=o[a],u=="click"?this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this)):u!="manual"&&(i=u=="hover"?"mouseenter":"focus",s=u=="hover"?"mouseleave":"blur",this.$element.on(i+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.leave,this)));this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},getOptions:function(t){return t=e.extend({},e.fn[this.type].defaults,this.$element.data(),t),t.delay&&typeof t.delay=="number"&&(t.delay={show:t.delay,hide:t.delay}),t},enter:function(t){var n=e.fn[this.type].defaults,r={},i;this._options&&e.each(this._options,function(e,t){n[e]!=t&&(r[e]=t)},this),i=e(t.currentTarget)[this.type](r).data(this.type);if(!i.options.delay||!i.options.delay.show)return i.show();clearTimeout(this.timeout),i.hoverState="in",this.timeout=setTimeout(function(){i.hoverState=="in"&&i.show()},i.options.delay.show)},leave:function(t){var n=e(t.currentTarget)[this.type](this._options).data(this.type);this.timeout&&clearTimeout(this.timeout);if(!n.options.delay||!n.options.delay.hide)return n.hide();n.hoverState="out",this.timeout=setTimeout(function(){n.hoverState=="out"&&n.hide()},n.options.delay.hide)},show:function(){var t,n,r,i,s,o,u=e.Event("show");if(this.hasContent()&&this.enabled){this.$element.trigger(u);if(u.isDefaultPrevented())return;t=this.tip(),this.setContent(),this.options.animation&&t.addClass("fade"),s=typeof this.options.placement=="function"?this.options.placement.call(this,t[0],this.$element[0]):this.options.placement,t.detach().css({top:0,left:0,display:"block"}),this.options.container?t.appendTo(this.options.container):t.insertAfter(this.$element),n=this.getPosition(),r=t[0].offsetWidth,i=t[0].offsetHeight;switch(s){case"bottom":o={top:n.top+n.height,left:n.left+n.width/2-r/2};break;case"top":o={top:n.top-i,left:n.left+n.width/2-r/2};break;case"left":o={top:n.top+n.height/2-i/2,left:n.left-r};break;case"right":o={top:n.top+n.height/2-i/2,left:n.left+n.width}}this.applyPlacement(o,s),this.$element.trigger("shown")}},applyPlacement:function(e,t){var n=this.tip(),r=n[0].offsetWidth,i=n[0].offsetHeight,s,o,u,a;n.offset(e).addClass(t).addClass("in"),s=n[0].offsetWidth,o=n[0].offsetHeight,t=="top"&&o!=i&&(e.top=e.top+i-o,a=!0),t=="bottom"||t=="top"?(u=0,e.left<0&&(u=e.left*-2,e.left=0,n.offset(e),s=n[0].offsetWidth,o=n[0].offsetHeight),this.replaceArrow(u-r+s,s,"left")):this.replaceArrow(o-i,o,"top"),a&&n.offset(e)},replaceArrow:function(e,t,n){this.arrow().css(n,e?50*(1-e/t)+"%":"")},setContent:function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},hide:function(){function i(){var t=setTimeout(function(){n.off(e.support.transition.end).detach()},500);n.one(e.support.transition.end,function(){clearTimeout(t),n.detach()})}var t=this,n=this.tip(),r=e.Event("hide");this.$element.trigger(r);if(r.isDefaultPrevented())return;return n.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?i():n.detach(),this.$element.trigger("hidden"),this},fixTitle:function(){var e=this.$element;(e.attr("title")||typeof e.attr("data-original-title")!="string")&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},hasContent:function(){return this.getTitle()},getPosition:function(){var t=this.$element[0];return e.extend({},typeof t.getBoundingClientRect=="function"?t.getBoundingClientRect():{width:t.offsetWidth,height:t.offsetHeight},this.$element.offset())},getTitle:function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||(typeof n.title=="function"?n.title.call(t[0]):n.title),e},tip:function(){return this.$tip=this.$tip||e(this.options.template)},arrow:function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},validate:function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},enable:function(){this.enabled=!0},disable:function(){this.enabled=!1},toggleEnabled:function(){this.enabled=!this.enabled},toggle:function(t){var n=t?e(t.currentTarget)[this.type](this._options).data(this.type):this;n.tip().hasClass("in")?n.hide():n.show()},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}};var n=e.fn.tooltip;e.fn.tooltip=function(n){return this.each(function(){var r=e(this),i=r.data("tooltip"),s=typeof n=="object"&&n;i||r.data("tooltip",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.tooltip.Constructor=t,e.fn.tooltip.defaults={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1},e.fn.tooltip.noConflict=function(){return e.fn.tooltip=n,this}}(window.jQuery),!function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype,{constructor:t,setContent:function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content")[this.options.html?"html":"text"](n),e.removeClass("fade top bottom left right in")},hasContent:function(){return this.getTitle()||this.getContent()},getContent:function(){var e,t=this.$element,n=this.options;return e=(typeof n.content=="function"?n.content.call(t[0]):n.content)||t.attr("data-content"),e},tip:function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip},destroy:function(){this.hide().$element.off("."+this.type).removeData(this.type)}});var n=e.fn.popover;e.fn.popover=function(n){return this.each(function(){var r=e(this),i=r.data("popover"),s=typeof n=="object"&&n;i||r.data("popover",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.popover.Constructor=t,e.fn.popover.defaults=e.extend({},e.fn.tooltip.defaults,{placement:"right",trigger:"click",content:"",template:'<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),e.fn.popover.noConflict=function(){return e.fn.popover=n,this}}(window.jQuery),!function(e){"use strict";function t(t,n){var r=e.proxy(this.process,this),i=e(t).is("body")?e(window):e(t),s;this.options=e.extend({},e.fn.scrollspy.defaults,n),this.$scrollElement=i.on("scroll.scroll-spy.data-api",r),this.selector=(this.options.target||(s=e(t).attr("href"))&&s.replace(/.*(?=#[^\s]+$)/,"")||"")+" .nav li > a",this.$body=e("body"),this.refresh(),this.process()}t.prototype={constructor:t,refresh:function(){var t=this,n;this.offsets=e([]),this.targets=e([]),n=this.$body.find(this.selector).map(function(){var n=e(this),r=n.data("target")||n.attr("href"),i=/^#\w/.test(r)&&e(r);return i&&i.length&&[[i.position().top+(!e.isWindow(t.$scrollElement.get(0))&&t.$scrollElement.scrollTop()),r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},process:function(){var e=this.$scrollElement.scrollTop()+this.options.offset,t=this.$scrollElement[0].scrollHeight||this.$body[0].scrollHeight,n=t-this.$scrollElement.height(),r=this.offsets,i=this.targets,s=this.activeTarget,o;if(e>=n)return s!=(o=i.last()[0])&&this.activate(o);for(o=r.length;o--;)s!=i[o]&&e>=r[o]&&(!r[o+1]||e<=r[o+1])&&this.activate(i[o])},activate:function(t){var n,r;this.activeTarget=t,e(this.selector).parent(".active").removeClass("active"),r=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',n=e(r).parent("li").addClass("active"),n.parent(".dropdown-menu").length&&(n=n.closest("li.dropdown").addClass("active")),n.trigger("activate")}};var n=e.fn.scrollspy;e.fn.scrollspy=function(n){return this.each(function(){var r=e(this),i=r.data("scrollspy"),s=typeof n=="object"&&n;i||r.data("scrollspy",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.scrollspy.Constructor=t,e.fn.scrollspy.defaults={offset:10},e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=n,this},e(window).on("load",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);t.scrollspy(t.data())})})}(window.jQuery),!function(e){"use strict";var t=function(t){this.element=e(t)};t.prototype={constructor:t,show:function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),r=t.attr("data-target"),i,s,o;r||(r=t.attr("href"),r=r&&r.replace(/.*(?=#[^\s]*$)/,""));if(t.parent("li").hasClass("active"))return;i=n.find(".active:last a")[0],o=e.Event("show",{relatedTarget:i}),t.trigger(o);if(o.isDefaultPrevented())return;s=e(r),this.activate(t.parent("li"),n),this.activate(s,s.parent(),function(){t.trigger({type:"shown",relatedTarget:i})})},activate:function(t,n,r){function o(){i.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),s?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),r&&r()}var i=n.find("> .active"),s=r&&e.support.transition&&i.hasClass("fade");s?i.one(e.support.transition.end,o):o(),i.removeClass("in")}};var n=e.fn.tab;e.fn.tab=function(n){return this.each(function(){var r=e(this),i=r.data("tab");i||r.data("tab",i=new t(this)),typeof n=="string"&&i[n]()})},e.fn.tab.Constructor=t,e.fn.tab.noConflict=function(){return e.fn.tab=n,this},e(document).on("click.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(t){t.preventDefault(),e(this).tab("show")})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.$element=e(t),this.options=e.extend({},e.fn.typeahead.defaults,n),this.matcher=this.options.matcher||this.matcher,this.sorter=this.options.sorter||this.sorter,this.highlighter=this.options.highlighter||this.highlighter,this.updater=this.options.updater||this.updater,this.source=this.options.source,this.$menu=e(this.options.menu),this.shown=!1,this.listen()};t.prototype={constructor:t,select:function(){var e=this.$menu.find(".active").attr("data-value");return this.$element.val(this.updater(e)).change(),this.hide()},updater:function(e){return e},show:function(){var t=e.extend({},this.$element.position(),{height:this.$element[0].offsetHeight});return this.$menu.insertAfter(this.$element).css({top:t.top+t.height,left:t.left}).show(),this.shown=!0,this},hide:function(){return this.$menu.hide(),this.shown=!1,this},lookup:function(t){var n;return this.query=this.$element.val(),!this.query||this.query.length<this.options.minLength?this.shown?this.hide():this:(n=e.isFunction(this.source)?this.source(this.query,e.proxy(this.process,this)):this.source,n?this.process(n):this)},process:function(t){var n=this;return t=e.grep(t,function(e){return n.matcher(e)}),t=this.sorter(t),t.length?this.render(t.slice(0,this.options.items)).show():this.shown?this.hide():this},matcher:function(e){return~e.toLowerCase().indexOf(this.query.toLowerCase())},sorter:function(e){var t=[],n=[],r=[],i;while(i=e.shift())i.toLowerCase().indexOf(this.query.toLowerCase())?~i.indexOf(this.query)?n.push(i):r.push(i):t.push(i);return t.concat(n,r)},highlighter:function(e){var t=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");return e.replace(new RegExp("("+t+")","ig"),function(e,t){return"<strong>"+t+"</strong>"})},render:function(t){var n=this;return t=e(t).map(function(t,r){return t=e(n.options.item).attr("data-value",r),t.find("a").html(n.highlighter(r)),t[0]}),t.first().addClass("active"),this.$menu.html(t),this},next:function(t){var n=this.$menu.find(".active").removeClass("active"),r=n.next();r.length||(r=e(this.$menu.find("li")[0])),r.addClass("active")},prev:function(e){var t=this.$menu.find(".active").removeClass("active"),n=t.prev();n.length||(n=this.$menu.find("li").last()),n.addClass("active")},listen:function(){this.$element.on("focus",e.proxy(this.focus,this)).on("blur",e.proxy(this.blur,this)).on("keypress",e.proxy(this.keypress,this)).on("keyup",e.proxy(this.keyup,this)),this.eventSupported("keydown")&&this.$element.on("keydown",e.proxy(this.keydown,this)),this.$menu.on("click",e.proxy(this.click,this)).on("mouseenter","li",e.proxy(this.mouseenter,this)).on("mouseleave","li",e.proxy(this.mouseleave,this))},eventSupported:function(e){var t=e in this.$element;return t||(this.$element.setAttribute(e,"return;"),t=typeof this.$element[e]=="function"),t},move:function(e){if(!this.shown)return;switch(e.keyCode){case 9:case 13:case 27:e.preventDefault();break;case 38:e.preventDefault(),this.prev();break;case 40:e.preventDefault(),this.next()}e.stopPropagation()},keydown:function(t){this.suppressKeyPressRepeat=~e.inArray(t.keyCode,[40,38,9,13,27]),this.move(t)},keypress:function(e){if(this.suppressKeyPressRepeat)return;this.move(e)},keyup:function(e){switch(e.keyCode){case 40:case 38:case 16:case 17:case 18:break;case 9:case 13:if(!this.shown)return;this.select();break;case 27:if(!this.shown)return;this.hide();break;default:this.lookup()}e.stopPropagation(),e.preventDefault()},focus:function(e){this.focused=!0},blur:function(e){this.focused=!1,!this.mousedover&&this.shown&&this.hide()},click:function(e){e.stopPropagation(),e.preventDefault(),this.select(),this.$element.focus()},mouseenter:function(t){this.mousedover=!0,this.$menu.find(".active").removeClass("active"),e(t.currentTarget).addClass("active")},mouseleave:function(e){this.mousedover=!1,!this.focused&&this.shown&&this.hide()}};var n=e.fn.typeahead;e.fn.typeahead=function(n){return this.each(function(){var r=e(this),i=r.data("typeahead"),s=typeof n=="object"&&n;i||r.data("typeahead",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.typeahead.defaults={source:[],items:8,menu:'<ul class="typeahead dropdown-menu"></ul>',item:'<li><a href="#"></a></li>',minLength:1},e.fn.typeahead.Constructor=t,e.fn.typeahead.noConflict=function(){return e.fn.typeahead=n,this},e(document).on("focus.typeahead.data-api",'[data-provide="typeahead"]',function(t){var n=e(this);if(n.data("typeahead"))return;n.typeahead(n.data())})}(window.jQuery),!function(e){"use strict";var t=function(t,n){this.options=e.extend({},e.fn.affix.defaults,n),this.$window=e(window).on("scroll.affix.data-api",e.proxy(this.checkPosition,this)).on("click.affix.data-api",e.proxy(function(){setTimeout(e.proxy(this.checkPosition,this),1)},this)),this.$element=e(t),this.checkPosition()};t.prototype.checkPosition=function(){if(!this.$element.is(":visible"))return;var t=e(document).height(),n=this.$window.scrollTop(),r=this.$element.offset(),i=this.options.offset,s=i.bottom,o=i.top,u="affix affix-top affix-bottom",a;typeof i!="object"&&(s=o=i),typeof o=="function"&&(o=i.top()),typeof s=="function"&&(s=i.bottom()),a=this.unpin!=null&&n+this.unpin<=r.top?!1:s!=null&&r.top+this.$element.height()>=t-s?"bottom":o!=null&&n<=o?"top":!1;if(this.affixed===a)return;this.affixed=a,this.unpin=a=="bottom"?r.top-n:null,this.$element.removeClass(u).addClass("affix"+(a?"-"+a:""))};var n=e.fn.affix;e.fn.affix=function(n){return this.each(function(){var r=e(this),i=r.data("affix"),s=typeof n=="object"&&n;i||r.data("affix",i=new t(this,s)),typeof n=="string"&&i[n]()})},e.fn.affix.Constructor=t,e.fn.affix.defaults={offset:0},e.fn.affix.noConflict=function(){return e.fn.affix=n,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this),n=t.data();n.offset=n.offset||{},n.offsetBottom&&(n.offset.bottom=n.offsetBottom),n.offsetTop&&(n.offset.top=n.offsetTop),t.affix(n)})})}(window.jQuery);
\ No newline at end of file
diff --git a/website/static/html5shiv.min.js b/website/static/html5shiv.min.js
new file mode 100644
index 000000000..784f221ca
--- /dev/null
+++ b/website/static/html5shiv.min.js
@@ -0,0 +1,8 @@
+/*
+ HTML5 Shiv v3.6.2pre | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed
+*/
+(function(l,f){function m(){var a=e.elements;return"string"==typeof a?a.split(" "):a}function i(a){var b=n[a[o]];b||(b={},h++,a[o]=h,n[h]=b);return b}function p(a,b,c){b||(b=f);if(g)return b.createElement(a);c||(c=i(b));b=c.cache[a]?c.cache[a].cloneNode():r.test(a)?(c.cache[a]=c.createElem(a)).cloneNode():c.createElem(a);return b.canHaveChildren&&!s.test(a)?c.frag.appendChild(b):b}function t(a,b){if(!b.cache)b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag();
+a.createElement=function(c){return!e.shivMethods?b.createElem(c):p(c,a,b)};a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+m().join().replace(/\w+/g,function(a){b.createElem(a);b.frag.createElement(a);return'c("'+a+'")'})+");return n}")(e,b.frag)}function q(a){a||(a=f);var b=i(a);if(e.shivCSS&&!j&&!b.hasCSS){var c,d=a;c=d.createElement("p");d=d.getElementsByTagName("head")[0]||d.documentElement;c.innerHTML="x<style>article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}</style>";
+c=d.insertBefore(c.lastChild,d.firstChild);b.hasCSS=!!c}g||t(a,b);return a}var k=l.html5||{},s=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,r=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,j,o="_html5shiv",h=0,n={},g;(function(){try{var a=f.createElement("a");a.innerHTML="<xyz></xyz>";j="hidden"in a;var b;if(!(b=1==a.childNodes.length)){f.createElement("a");var c=f.createDocumentFragment();b="undefined"==typeof c.cloneNode||
+"undefined"==typeof c.createDocumentFragment||"undefined"==typeof c.createElement}g=b}catch(d){g=j=!0}})();var e={elements:k.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",version:"3.6.2pre",shivCSS:!1!==k.shivCSS,supportsUnknownElements:g,shivMethods:!1!==k.shivMethods,type:"default",shivDocument:q,createElement:p,createDocumentFragment:function(a,b){a||(a=f);if(g)return a.createDocumentFragment();
+for(var b=b||i(a),c=b.frag.cloneNode(),d=0,e=m(),h=e.length;d<h;d++)c.createElement(e[d]);return c}};l.html5=e;q(f)})(this,document);
diff --git a/website/static/icon-github.png b/website/static/icon-github.png
new file mode 100644
index 000000000..a9c694006
Binary files /dev/null and b/website/static/icon-github.png differ
diff --git a/website/static/icon-square.png b/website/static/icon-square.png
new file mode 100644
index 000000000..bdc98d1c2
Binary files /dev/null and b/website/static/icon-square.png differ
diff --git a/website/static/jquery-maven-artifact.min.js b/website/static/jquery-maven-artifact.min.js
new file mode 100644
index 000000000..08a0304fe
--- /dev/null
+++ b/website/static/jquery-maven-artifact.min.js
@@ -0,0 +1,8 @@
+/**
+ * jQuery Maven Artifact Plugin
+ *
+ * Version: 1.0.1
+ * Author: Jake Wharton
+ * License: Apache 2.0
+ */
+(function($){function downloadUrl(groupId,artifactId,version,type){var groupPath=groupId.replace(/\./g,"/");return"http://repo1.maven.org/maven2/"+groupPath+"/"+artifactId+"/"+version+"/"+artifactId+"-"+version+type}$.fn.artifactVersion=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}var version=versions[0].latestVersion;var versionUrl=downloadUrl(groupId,artifactId,version,".jar");callback(version,versionUrl)})};$.fn.artifactVersions=function(groupId,artifactId,callback){if(typeof groupId!=="string"||typeof artifactId!=="string"){console.log("Error: groupId and artifactId are required.");return}if(typeof callback==="undefined"){console.log("Error: callback function required.");return}var url='http://search.maven.org/solrsearch/select/?q=g:"'+groupId+'"+AND+a:"'+artifactId+'"&wt=json&rows=10&core=gav&json.wrf=?';$.getJSON(url,function(response){var versions=response.response.docs;if(versions.length==0){return}versions.sort(function(o1,o2){return o1.v>o2.v?-1:1});var newVersions=[];for(var i=0;i<versions.length;i++){var version=versions[i].v;newVersions.push({name:version,url:downloadUrl(groupId,artifactId,version,".jar")})}callback(newVersions)})}})(jQuery);
\ No newline at end of file
diff --git a/website/static/jquery.smooth-scroll.min.js b/website/static/jquery.smooth-scroll.min.js
new file mode 100644
index 000000000..2af596ee8
--- /dev/null
+++ b/website/static/jquery.smooth-scroll.min.js
@@ -0,0 +1,7 @@
+/*!
+ * Smooth Scroll - v1.4.10 - 2013-03-02
+ * https://github.com/kswedberg/jquery-smooth-scroll
+ * Copyright (c) 2013 Karl Swedberg
+ * Licensed MIT (https://github.com/kswedberg/jquery-smooth-scroll/blob/master/LICENSE-MIT)
+ */
+(function(l){function t(l){return l.replace(/(:|\.)/g,"\\$1")}var e="1.4.10",o={exclude:[],excludeWithin:[],offset:0,direction:"top",scrollElement:null,scrollTarget:null,beforeScroll:function(){},afterScroll:function(){},easing:"swing",speed:400,autoCoefficent:2},r=function(t){var e=[],o=!1,r=t.dir&&"left"==t.dir?"scrollLeft":"scrollTop";return this.each(function(){if(this!=document&&this!=window){var t=l(this);t[r]()>0?e.push(this):(t[r](1),o=t[r]()>0,o&&e.push(this),t[r](0))}}),e.length||this.each(function(){"BODY"===this.nodeName&&(e=[this])}),"first"===t.el&&e.length>1&&(e=[e[0]]),e};l.fn.extend({scrollable:function(l){var t=r.call(this,{dir:l});return this.pushStack(t)},firstScrollable:function(l){var t=r.call(this,{el:"first",dir:l});return this.pushStack(t)},smoothScroll:function(e){e=e||{};var o=l.extend({},l.fn.smoothScroll.defaults,e),r=l.smoothScroll.filterPath(location.pathname);return this.unbind("click.smoothscroll").bind("click.smoothscroll",function(e){var n=this,s=l(this),c=o.exclude,i=o.excludeWithin,a=0,f=0,h=!0,u={},d=location.hostname===n.hostname||!n.hostname,m=o.scrollTarget||(l.smoothScroll.filterPath(n.pathname)||r)===r,p=t(n.hash);if(o.scrollTarget||d&&m&&p){for(;h&&c.length>a;)s.is(t(c[a++]))&&(h=!1);for(;h&&i.length>f;)s.closest(i[f++]).length&&(h=!1)}else h=!1;h&&(e.preventDefault(),l.extend(u,o,{scrollTarget:o.scrollTarget||p,link:n}),l.smoothScroll(u))}),this}}),l.smoothScroll=function(t,e){var o,r,n,s,c=0,i="offset",a="scrollTop",f={},h={};"number"==typeof t?(o=l.fn.smoothScroll.defaults,n=t):(o=l.extend({},l.fn.smoothScroll.defaults,t||{}),o.scrollElement&&(i="position","static"==o.scrollElement.css("position")&&o.scrollElement.css("position","relative"))),o=l.extend({link:null},o),a="left"==o.direction?"scrollLeft":a,o.scrollElement?(r=o.scrollElement,c=r[a]()):r=l("html, body").firstScrollable(),o.beforeScroll.call(r,o),n="number"==typeof t?t:e||l(o.scrollTarget)[i]()&&l(o.scrollTarget)[i]()[o.direction]||0,f[a]=n+c+o.offset,s=o.speed,"auto"===s&&(s=f[a]||r.scrollTop(),s/=o.autoCoefficent),h={duration:s,easing:o.easing,complete:function(){o.afterScroll.call(o.link,o)}},o.step&&(h.step=o.step),r.length?r.stop().animate(f,h):o.afterScroll.call(o.link,o)},l.smoothScroll.version=e,l.smoothScroll.filterPath=function(l){return l.replace(/^\//,"").replace(/(index|default).[a-zA-Z]{3,4}$/,"").replace(/\/$/,"")},l.fn.smoothScroll.defaults=o})(jQuery);
\ No newline at end of file
diff --git a/website/static/logo-square.png b/website/static/logo-square.png
new file mode 100644
index 000000000..788b301ad
Binary files /dev/null and b/website/static/logo-square.png differ
diff --git a/website/static/prettify.js b/website/static/prettify.js
new file mode 100644
index 000000000..7b990496d
--- /dev/null
+++ b/website/static/prettify.js
@@ -0,0 +1,30 @@
+!function(){var q=null;window.PR_SHOULD_USE_CONTINUATION=!0;
+(function(){function S(a){function d(e){var b=e.charCodeAt(0);if(b!==92)return b;var a=e.charAt(1);return(b=r[a])?b:"0"<=a&&a<="7"?parseInt(e.substring(1),8):a==="u"||a==="x"?parseInt(e.substring(2),16):e.charCodeAt(1)}function g(e){if(e<32)return(e<16?"\\x0":"\\x")+e.toString(16);e=String.fromCharCode(e);return e==="\\"||e==="-"||e==="]"||e==="^"?"\\"+e:e}function b(e){var b=e.substring(1,e.length-1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),e=[],a=
+b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,f=b.length;a<f;++a){var h=b[a];if(/\\[bdsw]/i.test(h))c.push(h);else{var h=d(h),l;a+2<f&&"-"===b[a+1]?(l=d(b[a+2]),a+=2):l=h;e.push([h,l]);l<65||h>122||(l<65||h>90||e.push([Math.max(65,h)|32,Math.min(l,90)|32]),l<97||h>122||e.push([Math.max(97,h)&-33,Math.min(l,122)&-33]))}}e.sort(function(e,a){return e[0]-a[0]||a[1]-e[1]});b=[];f=[];for(a=0;a<e.length;++a)h=e[a],h[0]<=f[1]+1?f[1]=Math.max(f[1],h[1]):b.push(f=h);for(a=0;a<b.length;++a)h=b[a],c.push(g(h[0])),
+h[1]>h[0]&&(h[1]+1>h[0]&&c.push("-"),c.push(g(h[1])));c.push("]");return c.join("")}function s(e){for(var a=e.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g),c=a.length,d=[],f=0,h=0;f<c;++f){var l=a[f];l==="("?++h:"\\"===l.charAt(0)&&(l=+l.substring(1))&&(l<=h?d[l]=-1:a[f]=g(l))}for(f=1;f<d.length;++f)-1===d[f]&&(d[f]=++x);for(h=f=0;f<c;++f)l=a[f],l==="("?(++h,d[h]||(a[f]="(?:")):"\\"===l.charAt(0)&&(l=+l.substring(1))&&l<=h&&
+(a[f]="\\"+d[l]);for(f=0;f<c;++f)"^"===a[f]&&"^"!==a[f+1]&&(a[f]="");if(e.ignoreCase&&m)for(f=0;f<c;++f)l=a[f],e=l.charAt(0),l.length>=2&&e==="["?a[f]=b(l):e!=="\\"&&(a[f]=l.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var x=0,m=!1,j=!1,k=0,c=a.length;k<c;++k){var i=a[k];if(i.ignoreCase)j=!0;else if(/[a-z]/i.test(i.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi,""))){m=!0;j=!1;break}}for(var r={b:8,t:9,n:10,v:11,
+f:12,r:13},n=[],k=0,c=a.length;k<c;++k){i=a[k];if(i.global||i.multiline)throw Error(""+i);n.push("(?:"+s(i)+")")}return RegExp(n.join("|"),j?"gi":"g")}function T(a,d){function g(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)g(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)s[j]="\n",m[j<<1]=x++,m[j++<<1|1]=a}}else if(c==3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\r\n?/g,"\n"):c.replace(/[\t\n\r ]+/g," "),s[j]=c,m[j<<1]=x,x+=c.length,m[j++<<1|1]=
+a)}var b=/(?:^|\s)nocode(?:\s|$)/,s=[],x=0,m=[],j=0;g(a);return{a:s.join("").replace(/\n$/,""),d:m}}function H(a,d,g,b){d&&(a={a:d,e:a},g(a),b.push.apply(b,a.g))}function U(a){for(var d=void 0,g=a.firstChild;g;g=g.nextSibling)var b=g.nodeType,d=b===1?d?a:g:b===3?V.test(g.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function g(a){for(var j=a.e,k=[j,"pln"],c=0,i=a.a.match(s)||[],r={},n=0,e=i.length;n<e;++n){var z=i[n],w=r[z],t=void 0,f;if(typeof w==="string")f=!1;else{var h=b[z.charAt(0)];
+if(h)t=z.match(h[1]),w=h[0];else{for(f=0;f<x;++f)if(h=d[f],t=z.match(h[1])){w=h[0];break}t||(w="pln")}if((f=w.length>=5&&"lang-"===w.substring(0,5))&&!(t&&typeof t[1]==="string"))f=!1,w="src";f||(r[z]=w)}h=c;c+=z.length;if(f){f=t[1];var l=z.indexOf(f),B=l+f.length;t[2]&&(B=z.length-t[2].length,l=B-f.length);w=w.substring(5);H(j+h,z.substring(0,l),g,k);H(j+h+l,f,I(w,f),k);H(j+h+B,z.substring(B),g,k)}else k.push(j+h,w)}a.g=k}var b={},s;(function(){for(var g=a.concat(d),j=[],k={},c=0,i=g.length;c<i;++c){var r=
+g[c],n=r[3];if(n)for(var e=n.length;--e>=0;)b[n.charAt(e)]=r;r=r[1];n=""+r;k.hasOwnProperty(n)||(j.push(r),k[n]=q)}j.push(/[\S\s]/);s=S(j)})();var x=d.length;return g}function v(a){var d=[],g=[];a.tripleQuotedStrings?d.push(["str",/^(?:'''(?:[^'\\]|\\[\S\s]|''?(?=[^']))*(?:'''|$)|"""(?:[^"\\]|\\[\S\s]|""?(?=[^"]))*(?:"""|$)|'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$))/,q,"'\""]):a.multiLineStrings?d.push(["str",/^(?:'(?:[^'\\]|\\[\S\s])*(?:'|$)|"(?:[^"\\]|\\[\S\s])*(?:"|$)|`(?:[^\\`]|\\[\S\s])*(?:`|$))/,
+q,"'\"`"]):d.push(["str",/^(?:'(?:[^\n\r'\\]|\\.)*(?:'|$)|"(?:[^\n\r"\\]|\\.)*(?:"|$))/,q,"\"'"]);a.verbatimStrings&&g.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,q]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,q,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\b|[^\n\r]*)/,q,"#"]),g.push(["str",/^<(?:(?:(?:\.\.\/)*|\/?)(?:[\w-]+(?:\/[\w-]+)+)?[\w-]+\.h(?:h|pp|\+\+)?|[a-z]\w*)>/,q])):d.push(["com",
+/^#[^\n\r]*/,q,"#"]));a.cStyleComments&&(g.push(["com",/^\/\/[^\n\r]*/,q]),g.push(["com",/^\/\*[\S\s]*?(?:\*\/|$)/,q]));if(b=a.regexLiterals){var s=(b=b>1?"":"\n\r")?".":"[\\S\\s]";g.push(["lang-regex",RegExp("^(?:^^\\.?|[+-]|[!=]=?=?|\\#|%=?|&&?=?|\\(|\\*=?|[+\\-]=|->|\\/=?|::?|<<?=?|>>?>?=?|,|;|\\?|@|\\[|~|{|\\^\\^?=?|\\|\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\s*("+("/(?=[^/*"+b+"])(?:[^/\\x5B\\x5C"+b+"]|\\x5C"+s+"|\\x5B(?:[^\\x5C\\x5D"+b+"]|\\x5C"+
+s+")*(?:\\x5D|$))+/")+")")])}(b=a.types)&&g.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&g.push(["kwd",RegExp("^(?:"+b.replace(/[\s,]+/g,"|")+")\\b"),q]);d.push(["pln",/^\s+/,q," \r\n\t\u00a0"]);b="^.[^\\s\\w.$@'\"`/\\\\]*";a.regexLiterals&&(b+="(?!s*/)");g.push(["lit",/^@[$_a-z][\w$@]*/i,q],["typ",/^(?:[@_]?[A-Z]+[a-z][\w$@]*|\w+_t\b)/,q],["pln",/^[$_a-z][\w$@]*/i,q],["lit",/^(?:0x[\da-f]+|(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d\+)(?:e[+-]?\d+)?)[a-z]*/i,q,"0123456789"],["pln",/^\\[\S\s]?/,
+q],["pun",RegExp(b),q]);return C(d,g)}function J(a,d,g){function b(a){var c=a.nodeType;if(c==1&&!x.test(a.className))if("br"===a.nodeName)s(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&g){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(j.createTextNode(d),a.nextSibling),s(a),c||a.parentNode.removeChild(a)}}function s(a){function b(a,c){var d=
+c?a.cloneNode(!1):a,e=a.parentNode;if(e){var e=b(e,1),g=a.nextSibling;e.appendChild(d);for(var i=g;i;i=g)g=i.nextSibling,e.appendChild(i)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var x=/(?:^|\s)nocode(?:\s|$)/,m=/\r\n?|\n/,j=a.ownerDocument,k=j.createElement("li");a.firstChild;)k.appendChild(a.firstChild);for(var c=[k],i=0;i<c.length;++i)b(c[i]);d===(d|0)&&c[0].setAttribute("value",d);var r=j.createElement("ol");
+r.className="linenums";for(var d=Math.max(0,d-1|0)||0,i=0,n=c.length;i<n;++i)k=c[i],k.className="L"+(i+d)%10,k.firstChild||k.appendChild(j.createTextNode("\u00a0")),r.appendChild(k);a.appendChild(r)}function p(a,d){for(var g=d.length;--g>=0;){var b=d[g];F.hasOwnProperty(b)?D.console&&console.warn("cannot override language handler %s",b):F[b]=a}}function I(a,d){if(!a||!F.hasOwnProperty(a))a=/^\s*</.test(d)?"default-markup":"default-code";return F[a]}function K(a){var d=a.h;try{var g=T(a.c,a.i),b=g.a;
+a.a=b;a.d=g.d;a.e=0;I(d,b)(a);var s=/\bMSIE\s(\d+)/.exec(navigator.userAgent),s=s&&+s[1]<=8,d=/\n/g,x=a.a,m=x.length,g=0,j=a.d,k=j.length,b=0,c=a.g,i=c.length,r=0;c[i]=m;var n,e;for(e=n=0;e<i;)c[e]!==c[e+2]?(c[n++]=c[e++],c[n++]=c[e++]):e+=2;i=n;for(e=n=0;e<i;){for(var p=c[e],w=c[e+1],t=e+2;t+2<=i&&c[t+1]===w;)t+=2;c[n++]=p;c[n++]=w;e=t}c.length=n;var f=a.c,h;if(f)h=f.style.display,f.style.display="none";try{for(;b<k;){var l=j[b+2]||m,B=c[r+2]||m,t=Math.min(l,B),A=j[b+1],G;if(A.nodeType!==1&&(G=x.substring(g,
+t))){s&&(G=G.replace(d,"\r"));A.nodeValue=G;var L=A.ownerDocument,o=L.createElement("span");o.className=c[r+1];var v=A.parentNode;v.replaceChild(o,A);o.appendChild(A);g<l&&(j[b+1]=A=L.createTextNode(x.substring(t,l)),v.insertBefore(A,o.nextSibling))}g=t;g>=l&&(b+=2);g>=B&&(r+=2)}}finally{if(f)f.style.display=h}}catch(u){D.console&&console.log(u&&u.stack||u)}}var D=window,y=["break,continue,do,else,for,if,return,while"],E=[[y,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],
+"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],M=[E,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],N=[E,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],
+O=[N,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],E=[E,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],P=[y,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],
+Q=[y,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],W=[y,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],y=[y,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],R=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\d*)\b/,
+V=/\S/,X=v({keywords:[M,O,E,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",P,Q,y],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),F={};p(X,["default-code"]);p(C([],[["pln",/^[^<?]+/],["dec",/^<!\w[^>]*(?:>|$)/],["com",/^<\!--[\S\s]*?(?:--\>|$)/],["lang-",/^<\?([\S\s]+?)(?:\?>|$)/],["lang-",/^<%([\S\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",
+/^<xmp\b[^>]*>([\S\s]+?)<\/xmp\b[^>]*>/i],["lang-js",/^<script\b[^>]*>([\S\s]*?)(<\/script\b[^>]*>)/i],["lang-css",/^<style\b[^>]*>([\S\s]*?)(<\/style\b[^>]*>)/i],["lang-in.tag",/^(<\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);p(C([["pln",/^\s+/,q," \t\r\n"],["atv",/^(?:"[^"]*"?|'[^']*'?)/,q,"\"'"]],[["tag",/^^<\/?[a-z](?:[\w-.:]*\w)?|\/?>$/i],["atn",/^(?!style[\s=]|on)[a-z](?:[\w:-]*\w)?/i],["lang-uq.val",/^=\s*([^\s"'>]*(?:[^\s"'/>]|\/(?=\s)))/],["pun",/^[/<->]+/],
+["lang-js",/^on\w+\s*=\s*"([^"]+)"/i],["lang-js",/^on\w+\s*=\s*'([^']+)'/i],["lang-js",/^on\w+\s*=\s*([^\s"'>]+)/i],["lang-css",/^style\s*=\s*"([^"]+)"/i],["lang-css",/^style\s*=\s*'([^']+)'/i],["lang-css",/^style\s*=\s*([^\s"'>]+)/i]]),["in.tag"]);p(C([],[["atv",/^[\S\s]+/]]),["uq.val"]);p(v({keywords:M,hashComments:!0,cStyleComments:!0,types:R}),["c","cc","cpp","cxx","cyc","m"]);p(v({keywords:"null,true,false"}),["json"]);p(v({keywords:O,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:R}),
+["cs"]);p(v({keywords:N,cStyleComments:!0}),["java"]);p(v({keywords:y,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);p(v({keywords:P,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);p(v({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);p(v({keywords:Q,
+hashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);p(v({keywords:E,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);p(v({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);p(v({keywords:W,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);
+p(C([],[["str",/^[\S\s]+/]]),["regex"]);var Y=D.PR={createSimpleLexer:C,registerLangHandler:p,sourceDecorator:v,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:D.prettyPrintOne=function(a,d,g){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;g&&J(b,g,!0);K({h:d,j:g,c:b,i:1});
+return b.innerHTML},prettyPrint:D.prettyPrint=function(a,d){function g(){for(var b=D.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;i<p.length&&c.now()<b;i++){for(var d=p[i],j=h,k=d;k=k.previousSibling;){var m=k.nodeType,o=(m===7||m===8)&&k.nodeValue;if(o?!/^\??prettify\b/.test(o):m!==3||/\S/.test(k.nodeValue))break;if(o){j={};o.replace(/\b(\w+)=([\w%+\-.:]+)/g,function(a,b,c){j[b]=c});break}}k=d.className;if((j!==h||e.test(k))&&!v.test(k)){m=!1;for(o=d.parentNode;o;o=o.parentNode)if(f.test(o.tagName)&&
+o.className&&e.test(o.className)){m=!0;break}if(!m){d.className+=" prettyprinted";m=j.lang;if(!m){var m=k.match(n),y;if(!m&&(y=U(d))&&t.test(y.tagName))m=y.className.match(n);m&&(m=m[1])}if(w.test(d.tagName))o=1;else var o=d.currentStyle,u=s.defaultView,o=(o=o?o.whiteSpace:u&&u.getComputedStyle?u.getComputedStyle(d,q).getPropertyValue("white-space"):0)&&"pre"===o.substring(0,3);u=j.linenums;if(!(u=u==="true"||+u))u=(u=k.match(/\blinenums\b(?::(\d+))?/))?u[1]&&u[1].length?+u[1]:!0:!1;u&&J(d,u,o);r=
+{h:m,c:d,j:u,i:o};K(r)}}}i<p.length?setTimeout(g,250):"function"===typeof a&&a()}for(var b=d||document.body,s=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],p=[],m=0;m<b.length;++m)for(var j=0,k=b[m].length;j<k;++j)p.push(b[m][j]);var b=q,c=Date;c.now||(c={now:function(){return+new Date}});var i=0,r,n=/\blang(?:uage)?-([\w.]+)(?!\S)/,e=/\bprettyprint\b/,v=/\bprettyprinted\b/,w=/pre|xmp/i,t=/^code$/i,f=/^(?:pre|code|xmp)$/i,
+h={};g()}};typeof define==="function"&&define.amd&&define("google-code-prettify",[],function(){return Y})})();}()
