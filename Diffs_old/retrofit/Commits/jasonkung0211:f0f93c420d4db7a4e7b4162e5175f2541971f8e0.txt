diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 3d2bf785d..1e7cb76a7 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -78,7 +78,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     retrofit.converter.Converter converter;
     retrofit.RestAdapter.LogLevel logLevel;
     retrofit.RequestInterceptor requestInterceptor = retrofit.RequestInterceptor.NONE;
-    retrofit.ErrorHandler errorHandler = retrofit.ErrorHandler.DEFAULT;
+    retrofit.ErrorHandler errorHandler;
     retrofit.http.Retrofit.RequestAuthenticator requestAuthenticator;
     // FIXME context is tricky
     Object context;
@@ -164,10 +164,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
 #end
 
-        if (this.errorHandler == null) {
-            this.errorHandler = retrofit.ErrorHandler.DEFAULT;
-        }
-
 #if ($authenticator != "")
 
         if (this.requestAuthenticator == null) {
@@ -511,8 +507,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
             }
         }).doOnNext(new Action1<com.squareup.okhttp.Response>() {
             @Override public void call(com.squareup.okhttp.Response response) {
+                if (response.isSuccessful()) return;
+
                 retrofit.client.Response retrofitResponse = parseResponse(response);
-                if (!response.isSuccessful()) throw retrofit.RetrofitError.httpError(response.request().urlString(), retrofitResponse, null, null);
+                RetrofitError retrofitError = retrofit.RetrofitError.httpError(response.request().urlString(), retrofitResponse, null, null);
+                if (errorHandler == null) throw new RequestException(response.request(), retrofitError);
+
+                Throwable handledError = errorHandler.handleError(retrofitError);
             }
 
     #if (!$retryHeaders.isEmpty())
@@ -567,9 +568,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     System.out.println("retrofit: OnSubscribeResponse.onError(): not IOException/RequestException: " + e);
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                Throwable handledError = errorHandler.handleError(retrofitError);
-                if (handledError != null) return Observable.empty();
-                else return Observable.error(handledError);
+                if (errorHandler == null) {
+                    return Observable.error(e);
+                } else {
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                    else return Observable.empty();
+                }
             }
         })
         .cache();
@@ -592,7 +597,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
         obs = responseCachedObs.map(new Func1<com.squareup.okhttp.Response, String>() {
             @Override public String call(com.squareup.okhttp.Response response) {
                 try {
-                    return response.body().string();
+                    String s = response.body().string();
+                    System.out.println("retrofit: response.body().string(): " + s);
+                    return s;
                 } catch (Exception e) {
                     //throw new RuntimeException(e);
                     throw retrofit.RetrofitError.unexpectedError(_finalUrl, e);
@@ -657,9 +664,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     if (retrofitError.getKind() == RetrofitError.Kind.NETWORK) {
                         return Observable.error(retrofitError);
                     }
-                    Throwable handledError = errorHandler.handleError(retrofitError);
-                    if (handledError != null) return Observable.empty();
-                    else return Observable.error(handledError);
+                    if (errorHandler == null) {
+                        return Observable.error(e);
+                    } else {
+                        Throwable handledError = errorHandler.handleError(retrofitError);
+                        if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                        else return Observable.empty();
+                    }
                 }
             })
 
@@ -677,9 +688,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     } else {
                         retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                     }
-                    Throwable handledError = errorHandler.handleError(retrofitError);
-                    if (handledError != null) return Observable.empty();
-                    else return Observable.error(handledError);
+                    if (errorHandler == null) {
+                        return Observable.error(e);
+                    } else {
+                        Throwable handledError = errorHandler.handleError(retrofitError);
+                        if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                        else return Observable.empty();
+                    }
                 }
             })
 
@@ -699,9 +714,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     } else {
                         retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                     }
-                    Throwable handledError = errorHandler.handleError(retrofitError);
-                    if (handledError != null) return Observable.empty();
-                    else return Observable.error(handledError);
+                    if (errorHandler == null) {
+                        return Observable.error(e);
+                    } else {
+                        Throwable handledError = errorHandler.handleError(retrofitError);
+                        if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                        else return Observable.empty();
+                    }
                 }
             })
 
@@ -732,9 +751,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 } else {
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                Throwable handledError = errorHandler.handleError(retrofitError);
-                if (handledError != null) return Observable.empty();
-                else return Observable.error(handledError);
+                if (errorHandler == null) {
+                    return Observable.error(e);
+                } else {
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                    else return Observable.empty();
+                }
             }
         })
 
@@ -765,9 +788,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 } else {
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                Throwable handledError = errorHandler.handleError(retrofitError);
-                if (handledError != null) return Observable.empty();
-                else return Observable.error(handledError);
+                if (errorHandler == null) {
+                    return Observable.error(e);
+                } else {
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty(); // return Observable.error(handledError);
+                    else return Observable.empty();
+                }
             }
         })
 
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
index 60e4551a2..95a88f043 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
@@ -23,7 +23,6 @@
 
 public class MockErrorHandler implements ErrorHandler {
     public static int errorCode;
-    public static String responseBody;
 
     @Override public Throwable handleError(RetrofitError cause) {
         System.out.println("MockErrorHandler: " + cause);
@@ -31,11 +30,6 @@
         System.out.println("MockErrorHandler: Response: " + r);
         if (r != null) {
             errorCode = r.getStatus();
-            try {
-                responseBody = readString(r.getBody().in(), "UTF-8");
-            } catch(IOException e) {
-                return e;
-            }
 
             System.out.println("MockErrorHandler: status: " + r.getStatus());
             if (r.getStatus() == 401) {
@@ -44,22 +38,4 @@
         }
         return cause;
     }
-
-
-    public static String readString(InputStream inputStream, String encoding)
-            throws IOException {
-        return new String(readByteArray(inputStream), encoding);
-    }
-
-    private static byte[] readByteArray(InputStream inputStream)
-            throws IOException {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        byte[] buffer = new byte[1024];
-        int length = 0;
-        while ((length = inputStream.read(buffer)) != -1) {
-            baos.write(buffer, 0, length);
-        }
-        return baos.toByteArray();
-    }
 }
-
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index 3f5e149cb..4ea4197c3 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -41,8 +41,6 @@
 import static org.junit.Assert.assertTrue;
 
 public class MainTest {
-    private String responseBody;
-    private Integer responseBode;
 
     @Test
     public void testGetWithBaseUrl() {
@@ -253,8 +251,7 @@ public void success(List<Contributor> list, Response response) {
                 boolean contains = false;
                 for (Contributor c : list) {
                     System.out.println(c.login);
-                    if(!c.login.equals("yongjhih"))
-                        continue;
+                    if (!c.login.equals("yongjhih")) continue;
                     contains = true;
                 }
                 assertTrue(contains);
@@ -387,9 +384,9 @@ public void testErrorHandler() { // SocketTimeoutException
     }
 
     @Test
-    public void testHttpErrorHandler() {
+    public void testHasHttpErrorHandlerResponseCode() {
         MockWebServer server = new MockWebServer();
-        server.enqueue(new MockResponse().setBody("{ \"error\": \"failure msg\"").setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
+        server.enqueue(new MockResponse().setBody("{ \"error\": \"failure msg\" }").setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
         try {
             server.start();
         } catch (Throwable e) {
@@ -431,14 +428,6 @@ public void testBuilderHttpErrorHandlerReturnsBodyAndErrorCode() throws IOExcept
                     @Override public Throwable handleError(RetrofitError cause) {
 
                         Response r = cause.getResponse();
-                        String bodyString = null;
-                        try {
-                            bodyString = MockErrorHandler.readString(r.getBody().in(), "UTF-8");
-                        } catch(IOException e) {
-                            e.printStackTrace();
-                            fail();
-                        }
-                        assertEquals("Body didn't match when there was an error response", "SomeBody", bodyString);
                         assertEquals(r.getStatus(), HttpURLConnection.HTTP_UNAUTHORIZED);
 
                         return cause;
@@ -461,14 +450,13 @@ public void testCreatorHttpErrorHandlerReturnsBodyAndErrorCode() throws IOExcept
 
         // init errorhandler static vars
         MockErrorHandler.errorCode = -1;
-        MockErrorHandler.responseBody = null;
 
         MockService service = MockService.create();
         String s = service.get(server.url("/").toString());
+        System.out.println("get: " + s);
 
         // verify that the errorhandler was called
         assertEquals("ErrorHandler didn't get error code", MockErrorHandler.errorCode, HttpURLConnection.HTTP_UNAUTHORIZED);
-        assertEquals("Body wasn't received by ErrorHandler", MockErrorHandler.responseBody, "SomeBody");
 
         assertNotNull(s);
         assertEquals("Body wasn't as expected: ", s, "SomeBody");
@@ -482,13 +470,26 @@ public void testHttpErrorHandlerSocketTimeout() throws IOException {
         server.enqueue(new MockResponse().setBody("SomeBody").setResponseCode(HttpURLConnection.HTTP_OK).setBodyDelay(60, TimeUnit.SECONDS));
         server.start();
 
-        final AtomicInteger status = new AtomicInteger(-1);
+        final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
         MockService service = MockService.builder()
                 .errorHandler(new ErrorHandler() {
                     @Override public Throwable handleError(RetrofitError cause) {
+                        hasErrorHandled.set(true);
+
+                        // cause: retrofit.RetrofitError: timeout
+                        System.out.println("ErrorHandler: cause: " + cause);
+                        // cause.getCause(): java.net.SocketTimeoutException: timeout
+                        System.out.println("ErrorHandler: cause.getCause(): " + cause.getCause());
+                        // cause.getCause().getCause(): java.net.SocketException: Socket closed
+                        System.out.println("ErrorHandler: cause.getCause().getCause(): " + cause.getCause().getCause());
+                        assertTrue(cause.getCause() instanceof SocketTimeoutException);
 
-                        assertTrue(cause.getCause().getCause() instanceof SocketTimeoutException);
-                        status.set(0);
+                        Response r = cause.getResponse();
+
+                        System.out.println("ErrorHandler: Response: " + r);
+                        if (r != null) {
+                            System.out.println("ErrorHandler: status: " + r.getStatus());
+                        }
 
                         return cause;
                     }
@@ -496,7 +497,9 @@ public void testHttpErrorHandlerSocketTimeout() throws IOException {
                 .build();
 
         String s = service.get(server.url("/").toString());
-        assertEquals("Error handler wasn't called", status.get(), 0);
+        System.out.println("get: " + s);
+
+        assertTrue("Error handler wasn't called", hasErrorHandled.get());
         assertEquals("Body should be null because of timeout", s, null);
 
         try {
