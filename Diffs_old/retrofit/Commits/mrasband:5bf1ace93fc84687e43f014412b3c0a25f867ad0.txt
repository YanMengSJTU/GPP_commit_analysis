diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 92101ca6b..332f4430e 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -15,22 +15,12 @@
  */
 package retrofit;
 
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.lang.reflect.Type;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.concurrent.Executor;
-import java.util.concurrent.TimeUnit;
 import retrofit.Profiler.RequestInformation;
 import retrofit.client.Client;
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.client.Response;
+import retrofit.client.RestResponse;
 import retrofit.converter.ConversionException;
 import retrofit.converter.Converter;
 import retrofit.mime.MimeUtil;
@@ -38,6 +28,19 @@
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
 
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Proxy;
+import java.lang.reflect.Type;
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.concurrent.Executor;
+import java.util.concurrent.TimeUnit;
+
 /**
  * Adapts a Java interface to a REST API.
  * <p>
@@ -361,7 +364,31 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
 
           ExceptionCatchingTypedInput wrapped = new ExceptionCatchingTypedInput(body);
           try {
-            Object convert = converter.fromBody(wrapped, type);
+            Object convert;
+
+            if (type instanceof ParameterizedType
+                    && ((ParameterizedType) type).getRawType() == RestResponse.class) {
+              Type[] paramTypes = ((ParameterizedType) type).getActualTypeArguments();
+              boolean isResponseType = false;
+              for (Type t : paramTypes) {
+                if (((Class) t).getCanonicalName().equals(Response.class.getCanonicalName())) {
+                  isResponseType = true;
+                }
+              }
+
+              if (isResponseType) {
+                convert = response;
+              } else {
+                Type deserType = ((ParameterizedType) type).getActualTypeArguments()[0];
+                convert = converter.fromBody(wrapped, deserType);
+              }
+
+              return new RestResponse<Object>(response.getUrl(),
+                  response.getStatus(), response.getReason(),
+                  response.getHeaders(), convert);
+            }
+
+            convert = converter.fromBody(wrapped, type);
             logResponseBody(body, convert);
             if (methodInfo.isSynchronous) {
               return convert;
diff --git a/retrofit/src/main/java/retrofit/client/AbstractResponse.java b/retrofit/src/main/java/retrofit/client/AbstractResponse.java
new file mode 100644
index 000000000..931b4d960
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/client/AbstractResponse.java
@@ -0,0 +1,62 @@
+package retrofit.client;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+/**
+ * An HTTP Response
+ */
+abstract class AbstractResponse<T> {
+    protected final String url;
+    protected final int status;
+    protected final String reason;
+    protected final List<Header> headers;
+    protected final T body;
+
+    public AbstractResponse(String url, int status, String reason, List<Header> headers, T body) {
+        if (url == null) {
+            throw new IllegalArgumentException("url == null");
+        }
+        if (status < 200) {
+            throw new IllegalArgumentException("Invalid status code: " + status);
+        }
+        if (reason == null) {
+            throw new IllegalArgumentException("reason == null");
+        }
+        if (headers == null) {
+            throw new IllegalArgumentException("headers == null");
+        }
+
+        this.url = url;
+        this.status = status;
+        this.reason = reason;
+        this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
+        this.body = body;
+    }
+
+    /** Request URL. */
+    public String getUrl() {
+        return url;
+    }
+
+    /** Status line code. */
+    public int getStatus() {
+        return status;
+    }
+
+    /** Status line reason phrase. */
+    public String getReason() {
+        return reason;
+    }
+
+    /** An unmodifiable collection of headers. */
+    public List<Header> getHeaders() {
+        return headers;
+    }
+
+    /** Response body.  May be {@code null}. */
+    public T getBody() {
+        return body;
+    }
+}
diff --git a/retrofit/src/main/java/retrofit/client/Response.java b/retrofit/src/main/java/retrofit/client/Response.java
index 64dd88bf9..ccb66d122 100644
--- a/retrofit/src/main/java/retrofit/client/Response.java
+++ b/retrofit/src/main/java/retrofit/client/Response.java
@@ -15,11 +15,10 @@
  */
 package retrofit.client;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import retrofit.mime.TypedInput;
 
+import java.util.List;
+
 /**
  * An HTTP response.
  * <p>
@@ -27,56 +26,8 @@
  * {@code byte[]}. Annotate the method with {@link retrofit.http.Streaming @Streaming} for an
  * unbuffered stream from the network.
  */
-public final class Response {
-  private final String url;
-  private final int status;
-  private final String reason;
-  private final List<Header> headers;
-  private final TypedInput body;
-
+public final class Response extends AbstractResponse<TypedInput> {
   public Response(String url, int status, String reason, List<Header> headers, TypedInput body) {
-    if (url == null) {
-      throw new IllegalArgumentException("url == null");
-    }
-    if (status < 200) {
-      throw new IllegalArgumentException("Invalid status code: " + status);
-    }
-    if (reason == null) {
-      throw new IllegalArgumentException("reason == null");
-    }
-    if (headers == null) {
-      throw new IllegalArgumentException("headers == null");
-    }
-
-    this.url = url;
-    this.status = status;
-    this.reason = reason;
-    this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
-    this.body = body;
-  }
-
-  /** Request URL. */
-  public String getUrl() {
-    return url;
-  }
-
-  /** Status line code. */
-  public int getStatus() {
-    return status;
-  }
-
-  /** Status line reason phrase. */
-  public String getReason() {
-    return reason;
-  }
-
-  /** An unmodifiable collection of headers. */
-  public List<Header> getHeaders() {
-    return headers;
-  }
-
-  /** Response body. May be {@code null}. */
-  public TypedInput getBody() {
-    return body;
+    super(url, status, reason, headers, body);
   }
 }
diff --git a/retrofit/src/main/java/retrofit/client/RestResponse.java b/retrofit/src/main/java/retrofit/client/RestResponse.java
new file mode 100644
index 000000000..c25671f6a
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/client/RestResponse.java
@@ -0,0 +1,14 @@
+package retrofit.client;
+
+import java.util.List;
+
+/**
+ * A deserialized HTTP response.  Don't use with {@link retrofit.http.Streaming @Streaming}
+ *
+ * @author mattrasband on 8/14/14.
+ */
+public class RestResponse<T> extends AbstractResponse<T> {
+    public RestResponse(String url, int status, String reason, List<Header> headers, T body) {
+        super(url, status, reason, headers, body);
+    }
+}
diff --git a/retrofit/src/test/java/retrofit/RestAdapterTest.java b/retrofit/src/test/java/retrofit/RestAdapterTest.java
index f56b3d20a..f87a11ae3 100644
--- a/retrofit/src/test/java/retrofit/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/RestAdapterTest.java
@@ -1,14 +1,6 @@
 // Copyright 2013 Square, Inc.
 package retrofit;
 
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.Executor;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.ArgumentCaptor;
@@ -18,6 +10,7 @@
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.client.Response;
+import retrofit.client.RestResponse;
 import retrofit.converter.ConversionException;
 import retrofit.http.Body;
 import retrofit.http.GET;
@@ -31,6 +24,15 @@
 import rx.Observable;
 import rx.functions.Action1;
 
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.Executor;
+
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
 import static org.mockito.Matchers.any;
@@ -83,10 +85,25 @@
     @GET("/") @Streaming Response streaming();
     @POST("/") Observable<String> observable(@Body String body);
     @POST("/{x}/{y}") Observable<Response> observable(@Path("x") String x, @Path("y") String y);
+    @GET("/") RestResponse<ExampleType> restResponseType();
+    @GET("/") RestResponse<Response> restResponseResponseType();
   }
   private interface InvalidExample extends Example {
   }
 
+  @SuppressWarnings("unused") // setter
+  private class ExampleType {
+    private String name;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+  }
+
   private Client mockClient;
   private Executor mockRequestExecutor;
   private Executor mockCallbackExecutor;
@@ -545,6 +562,30 @@
     assertThat(logMessages.get(6)).isEqualTo("<--- END HTTP (0-byte body)");
   }
 
+  @Test public void restResponseReturnsDeserializedType() throws Exception {
+    when(mockClient.execute(any(Request.class))) //
+        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS,
+                new TypedString("{\"name\" : \"foo\"}")));
+
+    RestResponse<ExampleType> response = example.restResponseType();
+    assertThat(response.getStatus()).isEqualTo(200);
+    assertThat(response.getBody()).isNotEqualTo(null);
+    assertThat(response.getBody().getClass()).isEqualTo(ExampleType.class);
+    assertThat(response.getBody().getName()).isEqualTo("foo");
+  }
+
+  @Test public void restResponseOfTypeResponseRetainsType() throws Exception {
+    when(mockClient.execute(any(Request.class)))
+        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS,
+            new TypedString("{\"name\" : \"foo\"}")));
+
+    RestResponse<Response> response = example.restResponseResponseType();
+    assertThat(response.getStatus()).isEqualTo(200);
+    assertThat(response.getBody()).isNotEqualTo(null);
+    assertThat(response.getClass()).isEqualTo(RestResponse.class);
+    assertThat(response.getBody().getClass()).isEqualTo(Response.class);
+  }
+
   @Test public void clientExceptionThrowsNetworkError() throws Exception {
     IOException exception = new IOException("I'm broken!");
     when(mockClient.execute(any(Request.class))).thenThrow(exception);
