diff --git a/retrofit-processor/build.gradle b/retrofit-processor/build.gradle
index e79193fb7..d4d6e838a 100644
--- a/retrofit-processor/build.gradle
+++ b/retrofit-processor/build.gradle
@@ -19,6 +19,7 @@ dependencies {
   compile 'com.squareup.retrofit:retrofit:1.9.0'
   compile 'io.reactivex:rxjava:1.0.9'
   compile 'com.squareup.okhttp:okhttp:2.4.0'
+  compile 'javax.inject:javax.inject:1'
 
   testCompile files(System.getenv("JAVA_HOME") + "/lib/tools.jar")
   testCompile 'com.google.guava:guava-testlib:17.0'
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
index f79cd4b6b..919a150c4 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -261,6 +261,7 @@ public boolean isTypedByteArray() {
     private final TypeSimplifier typeSimplifier;
     private final List<String> permissions;
     private final boolean isAuthenticated;
+    private final boolean isSingletonRequestInterceptor;
     private final Map<String, String> headers;
     private final Map<String, String> fields;
     private final Map<String, Part> parts;
@@ -269,6 +270,7 @@ public boolean isTypedByteArray() {
     public String gsonConverter = "";
     public final String errorHandler;
     public final String logLevel;
+    public final String requestInterceptor;
 
     Property(
         String name,
@@ -322,6 +324,24 @@ public boolean isTypedByteArray() {
       this.converter = buildConverter(method);
       this.errorHandler = buildErrorHandler(method);
       this.logLevel = buildLogLevel(method);
+      this.requestInterceptor = buildRequestInterceptor(method);
+      this.isSingletonRequestInterceptor = buildIsSingletonRequestInterceptor(method);
+    }
+
+    private String buildRequestInterceptor(ExecutableElement method) {
+      String name = "";
+      Retrofit.RequestInterceptor requestInterceptorAnnotation = method.getAnnotation(Retrofit.RequestInterceptor.class);
+      if (requestInterceptorAnnotation != null) {
+        TypeMirror requestInterceptor = null;
+        try {
+          requestInterceptor = getTypeMirror(processingEnv, requestInterceptorAnnotation.value());
+        } catch (MirroredTypeException mte) {
+          // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+          requestInterceptor = mte.getTypeMirror();
+        }
+        name = typeSimplifier.simplify(requestInterceptor);
+      }
+      return name;
     }
 
     private String buildConverter(ExecutableElement method) {
@@ -499,6 +519,22 @@ public boolean buildIsAuthenticated(ExecutableElement method) {
       return method.getAnnotation(Retrofit.Authenticated.class) != null;
     }
 
+    public boolean buildIsSingletonRequestInterceptor(ExecutableElement method) {
+      javax.inject.Singleton singleton = null;
+      Retrofit.RequestInterceptor requestInterceptorAnnotation = method.getAnnotation(Retrofit.RequestInterceptor.class);
+      if (requestInterceptorAnnotation != null) {
+        TypeMirror requestInterceptor = null;
+        try {
+          requestInterceptor = getTypeMirror(processingEnv, requestInterceptorAnnotation.value());
+        } catch (MirroredTypeException mte) {
+          // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+          requestInterceptor = mte.getTypeMirror();
+        }
+        singleton = ((DeclaredType) requestInterceptor).getAnnotation(javax.inject.Singleton.class);
+      }
+      return singleton != null;
+    }
+
     public String buildBody(ExecutableElement method) {
       String body = "";
 
@@ -888,6 +924,10 @@ public String getErrorHandler() {
       return errorHandler;
     }
 
+    public String getRequestInterceptor() {
+      return requestInterceptor;
+    }
+
     public String getLogLevel() {
       return logLevel;
     }
@@ -920,6 +960,10 @@ public boolean isAuthenticated() {
       return isAuthenticated;
     }
 
+    public boolean isSingletonRequestInterceptor() {
+      return isSingletonRequestInterceptor;
+    }
+
     public List<String> getAnnotations() {
       return annotations;
     }
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 0640494ad..d2d416bd7 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -55,6 +55,8 @@ import retrofit.client.Header;
 import retrofit.RestAdapter.LogLevel;
 import com.squareup.okhttp.HttpUrl;
 import retrofit.RequestInterceptor;
+import java.util.Map;
+import java.util.HashMap;
 
 import rx.schedulers.*;
 
@@ -72,9 +74,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     retrofit.RestAdapter.LogLevel logLevel;
     retrofit.RequestInterceptor requestInterceptor = retrofit.RequestInterceptor.NONE;
     retrofit.ErrorHandler errorHandler = retrofit.ErrorHandler.DEFAULT;
-
     retrofit.http.Retrofit.RequestAuthenticator requestAuthenticator;
     Object context;
+    Map<Class<? extends retrofit.RequestInterceptor>, retrofit.RequestInterceptor> requestInterceptors = new HashMap<>();
 
 ## Constructor
 
@@ -309,6 +311,36 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
     #end
 
+    #if ($p.requestInterceptor != "")
+        #if (!$p.singletonRequestInterceptor)
+
+        retrofit.RequestInterceptor myRequestInterceptor = getRequestInterceptor(${p.requestInterceptor}.class);
+        if (myRequestInterceptor == null) {
+            myRequestInterceptor = putRequestInterceptor(${p.requestInterceptor}.class, new ${p.requestInterceptor}());
+        }
+
+        #else
+
+        retrofit.RequestInterceptor myRequestInterceptor = new ${p.requestInterceptor}();
+
+        #end
+
+        final retrofit.RequestInterceptor finalRequestInterceptor = myRequestInterceptor;
+        requestObs = requestObs.map(new Func1<Request, Request>() {
+            @Override public Request call(Request request) {
+                System.out.println("retrofit: myRequestInterceptor");
+                SimpleRequestFacade requestFacade = new SimpleRequestFacade(request);
+                if (finalRequestInterceptor instanceof retrofit.http.Retrofit.SimpleRequestInterceptor) {
+                    ((retrofit.http.Retrofit.SimpleRequestInterceptor) finalRequestInterceptor).intercept(context, requestFacade);
+                } else {
+                    finalRequestInterceptor.intercept(requestFacade);
+                }
+                return requestFacade.request();
+            }
+        });
+
+    #end
+
     #if ($authenticator != "" && ($p.authenticated || $authenticated))
 
         requestObs = requestObs.map(new Func1<Request, Request>() {
@@ -872,4 +904,12 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     log.log("---- END ERROR");
   }
   */
+
+  private synchronized retrofit.RequestInterceptor putRequestInterceptor(Class<? extends retrofit.RequestInterceptor> clazz, retrofit.RequestInterceptor interceptor) {
+      return requestInterceptors.put(clazz, interceptor);
+  }
+
+  private synchronized retrofit.RequestInterceptor getRequestInterceptor(Class<? extends retrofit.RequestInterceptor> clazz) {
+      return requestInterceptors.get(clazz);
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/http/Retrofit.java b/retrofit/src/main/java/retrofit/http/Retrofit.java
index e0a012443..493f2a0ea 100644
--- a/retrofit/src/main/java/retrofit/http/Retrofit.java
+++ b/retrofit/src/main/java/retrofit/http/Retrofit.java
@@ -111,6 +111,7 @@
   @Retention(RUNTIME)
   @Target({TYPE, METHOD})
   public @interface RequestInterceptor {
+      //Class<? extends retrofit.RequestInterceptor>[] value() default retrofit.RequestInterceptor.class;
       Class<? extends retrofit.RequestInterceptor> value() default retrofit.RequestInterceptor.class;
   }
 
@@ -650,16 +651,26 @@
   @Retention(RUNTIME)
   @Target({METHOD, TYPE})
   public @interface Authenticated {
+    //Class<? extends RequestAuthenticator>[] value() default RequestAuthenticator.class;
     Class<? extends RequestAuthenticator> value() default RequestAuthenticator.class;
   }
 
   @Retention(RUNTIME)
   @Target({METHOD, TYPE})
   public @interface Authenticator {
+    //Class<? extends RequestAuthenticator>[] value() default RequestAuthenticator.class;
     Class<? extends RequestAuthenticator> value() default RequestAuthenticator.class;
   }
 
   public interface RequestAuthenticator extends retrofit.RequestInterceptor {
-      String authorize(Object context, Collection<String> permissions);
+    String authorize(Object context, Collection<String> permissions);
+  }
+
+  public class SimpleRequestInterceptor implements retrofit.RequestInterceptor {
+    @Override public void intercept(retrofit.RequestInterceptor.RequestFacade request) {
+    }
+    public void intercept(Object context, retrofit.RequestInterceptor.RequestFacade request) {
+      intercept(request);
+    }
   }
 }
diff --git a/retrofit2-github/build.gradle b/retrofit2-github/build.gradle
index 1d8c5c222..79b53a8de 100644
--- a/retrofit2-github/build.gradle
+++ b/retrofit2-github/build.gradle
@@ -29,7 +29,7 @@ dependencies {
     compile project(':retrofit')
     apt project(':retrofit-processor')
     compile 'io.reactivex:rxjava:1.0.9'
-    compile 'io.reactivex:rxandroid:0.24.0'
+    //compile 'io.reactivex:rxandroid:0.24.0'
     compile 'com.squareup.okhttp:okhttp:2.4.0'
     //compile 'com.infstory:logansquare:1.1.1'
     //apt 'com.infstory:logansquare-compiler:1.1.1'
@@ -42,6 +42,9 @@ dependencies {
     compile 'com.squareup.retrofit:converter-jackson:1.9.0'
     compile 'com.squareup.retrofit:retrofit:1.9.0'
     compile 'com.google.code.gson:gson:2.3'
+    //compile 'javax.annotation:jsr250-api:1.0'
+    compile 'javax.inject:javax.inject:1'
+    //compile 'javax.annotation:javax.annotation-api:1.2'
 
     // testing
     testCompile 'junit:junit-dep:4.10'
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
index 9d6b45d79..ca7ffdfc0 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
@@ -50,11 +50,10 @@
 @LogLevel(retrofit.RestAdapter.LogLevel.FULL) // optional
 @RequestInterceptor(GitHubRequestInterceptor.class) // optional
 @ErrorHandler(GitHubErrorHandler.class) // optional
-@Authenticator(GitHubAuthenticator.class) // optional
 public abstract class GitHub {
-    //@Retrofit.GET(value = "/repos/{owner}/{repo}/contributors", permissions = "public_repo")
     @GET("/repos/{owner}/{repo}/contributors")
-    @Authenticated
+    //@Authenticator(GitHubAuthenticator.class)
+    @RequestInterceptor(GitHubAuthInterceptor.class)
     public abstract Observable<List<Contributor>> contributorList(
             @Path("owner") String owner,
             @Path("repo") String repo);
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java
new file mode 100644
index 000000000..5f6c998e7
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthInterceptor.java
@@ -0,0 +1,96 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.RequestInterceptor;
+import retrofit.http.Retrofit.RequestAuthenticator;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.ArrayList;
+import android.content.Context;
+import android.text.TextUtils;
+import retrofit.RequestInterceptor.RequestFacade;
+import android.accounts.AccountManager;
+import android.accounts.Account;
+import android.accounts.AccountManagerFuture;
+import android.app.Activity;
+import android.os.Bundle;
+import rx.Observable;
+import rx.functions.*;
+import javax.inject.Singleton;
+
+@Singleton
+public class GitHubAuthInterceptor extends retrofit.http.Retrofit.SimpleRequestInterceptor {
+    // TODO persistents
+    String token;
+
+    @Override
+    public void intercept(Object context, RequestFacade request) {
+        if (token == null) {
+            token = getAuthToken((Activity) context, Collections.<String>emptyList());
+        }
+        if (token != null) request.addHeader("Authorization", "Bearer " + token);
+    }
+
+    public String getAuthToken(Activity activity, Collection<String> permissions) {
+        System.out.println("retrogithub: getAuthToken");
+        AccountManager accountManager = AccountManager.get(activity);
+        String accountType = "com.github";
+        //String authTokenType = TextUtils.join(",", permissions);
+        String authTokenType = accountType;
+        Account account = getAccount(accountManager, accountType);
+        System.out.println("retrogithub: account: " + account);
+        AccountManagerFuture<Bundle> bundleTask = null;
+        if (account == null) {
+            System.out.println("retrogithub: addAccount");
+            //bundleTask = accountManager.addAccount(accountType, authTokenType, permissions.toArray(new String[permissions.size()]), null, activity, null, null);
+            bundleTask = accountManager.addAccount(accountType, authTokenType, null, null, activity, null, null);
+        } else {
+            System.out.println("retrogithub: getAuthToken");
+            bundleTask = accountManager.getAuthToken(account, authTokenType, null, activity, null, null);
+        }
+
+        if (bundleTask == null) {
+            System.out.println("retrogithub: bundleTask: " + bundleTask);
+            return null;
+        }
+
+        final AccountManagerFuture<Bundle> finalBundleTask = bundleTask;
+        Bundle tokenBundle = null;
+        try {
+            System.out.println("retrogithub: tokenBundle");
+            tokenBundle = finalBundleTask.getResult();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+        System.out.println("retrogithub: tokenBundle: " + tokenBundle);
+        if (tokenBundle == null) return null;
+
+        System.out.println("retrogithub: AccountManager.KEY_AUTHTOKEN");
+        return tokenBundle.getString(AccountManager.KEY_AUTHTOKEN);
+    }
+
+    public Account getAccount(AccountManager accountManager, String accountType) {
+        System.out.println("retrogithub: getAccount");
+        Account[] accounts = accountManager.getAccountsByType(accountType);
+        if (accounts.length > 0) return accounts[0];
+        return null; // not found
+    }
+
+    public String getToken() {
+        return token;
+    }
+}
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthenticator.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthenticator.java
index 6d2e2417c..61a5e8bce 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthenticator.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubAuthenticator.java
@@ -26,10 +26,11 @@
 import android.accounts.AccountManagerFuture;
 import android.app.Activity;
 import android.os.Bundle;
-import rx.android.schedulers.AndroidSchedulers;
 import rx.Observable;
 import rx.functions.*;
+import javax.inject.Singleton;
 
+@Singleton
 public class GitHubAuthenticator implements RequestAuthenticator {
     // TODO persistents
     String token;
