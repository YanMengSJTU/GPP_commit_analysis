diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 04360db4e..bb374d8bc 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -272,11 +272,26 @@ void setArguments(Object[] args) {
       } else if (annotationType == retrofit.http.Header.class) {
         if (value != null) { // Skip null values.
           String name = ((retrofit.http.Header) annotation).value();
-          addHeader(name, value.toString());
+          if (value instanceof Iterable) {
+            for (Object iterableValue : (Iterable<?>) value) {
+              if (iterableValue != null) { // Skip null values.
+                addHeader(name, iterableValue.toString());
+              }
+            }
+          } else if (value.getClass().isArray()) {
+            for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
+              Object arrayValue = Array.get(value, x);
+              if (arrayValue != null) { // Skip null values.
+                addHeader(name, arrayValue.toString());
+              }
+            }
+          } else {
+            addHeader(name, value.toString());
+          }
         }
       } else if (annotationType == Field.class) {
-        String name = ((Field) annotation).value();
         if (value != null) { // Skip null values.
+          String name = ((Field) annotation).value();
           if (value instanceof Iterable) {
             for (Object iterableValue : (Iterable<?>) value) {
               if (iterableValue != null) { // Skip null values.
@@ -309,8 +324,8 @@ void setArguments(Object[] args) {
           }
         }
       } else if (annotationType == Part.class) {
-        String name = ((Part) annotation).value();
         if (value != null) { // Skip null values.
+          String name = ((Part) annotation).value();
           String transferEncoding = ((Part) annotation).encoding();
           if (value instanceof TypedOutput) {
             multipartBody.addPart(name, transferEncoding, (TypedOutput) value);
diff --git a/retrofit/src/main/java/retrofit/http/Header.java b/retrofit/src/main/java/retrofit/http/Header.java
index 501b40b81..4ce2cf166 100644
--- a/retrofit/src/main/java/retrofit/http/Header.java
+++ b/retrofit/src/main/java/retrofit/http/Header.java
@@ -30,7 +30,8 @@
  * void foo(@Header("Accept-Language") String lang, Callback&lt;Response&gt; cb);
  * </pre>
  * <p>
- * Header parameters may be {@code null} which will omit them from the request.
+ * Header parameters may be {@code null} which will omit them from the request. Passing a
+ * {@link java.util.List List} or array will result in a header for each non-{@code null} item.
  * <p>
  * <strong>Note:</strong> Headers do not overwrite each other. All headers with the same name will
  * be included in the request.
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 768504eb2..971a3a8e9 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1747,6 +1747,36 @@ Response method(@retrofit.http.Header("kit") String kit) {
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void headerParamList() {
+    class Example {
+      @GET("/foo/bar/") //
+      Response method(@retrofit.http.Header("foo") List<String> kit) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
+  @Test public void headerParamArray() {
+    class Example {
+      @GET("/foo/bar/") //
+      Response method(@retrofit.http.Header("foo") String[] kit) {
+        return null;
+      }
+    }
+    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()) //
+        .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void contentTypeAnnotationHeaderOverrides() {
     class Example {
       @POST("/") //
