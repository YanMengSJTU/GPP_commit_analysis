diff --git a/retrofit/src/main/java/retrofit2/FieldGenerator.java b/retrofit/src/main/java/retrofit2/FieldGenerator.java
new file mode 100644
index 000000000..a4a05a36d
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/FieldGenerator.java
@@ -0,0 +1,12 @@
+package retrofit2;
+
+import java.lang.reflect.Method;
+import java.util.Map;
+
+/**
+ * Created by benny on 4/30/16.
+ */
+public interface FieldGenerator {
+
+    public String generate(Method method, Map<String, String> extendFields, Object ... args);
+}
diff --git a/retrofit/src/main/java/retrofit2/FieldMapGenerator.java b/retrofit/src/main/java/retrofit2/FieldMapGenerator.java
new file mode 100644
index 000000000..d36301b27
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/FieldMapGenerator.java
@@ -0,0 +1,11 @@
+package retrofit2;
+
+import java.lang.reflect.Method;
+import java.util.Map;
+
+/**
+ * Created by benny on 4/30/16.
+ */
+public interface FieldMapGenerator {
+    Map<String, String> generate(Method method, Map<String, String> extendFields, Object... args);
+}
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index b194d4ed5..49427343d 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -15,6 +15,12 @@
  */
 package retrofit2;
 
+import okhttp3.HttpUrl;
+import okhttp3.OkHttpClient;
+import okhttp3.RequestBody;
+import okhttp3.ResponseBody;
+import retrofit2.http.*;
+
 import java.lang.annotation.Annotation;
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
@@ -25,14 +31,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
-import okhttp3.HttpUrl;
-import okhttp3.OkHttpClient;
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import retrofit2.http.GET;
-import retrofit2.http.HTTP;
-import retrofit2.http.Header;
-import retrofit2.http.Url;
 
 import static java.util.Collections.unmodifiableList;
 import static retrofit2.Utils.checkNotNull;
@@ -58,12 +56,14 @@
  */
 public final class Retrofit {
   private final Map<Method, ServiceMethod> serviceMethodCache = new LinkedHashMap<>();
+  private final Map<String, FieldGenerator> fieldGeneratorMap = new LinkedHashMap<>();
 
   private final okhttp3.Call.Factory callFactory;
   private final HttpUrl baseUrl;
   private final List<Converter.Factory> converterFactories;
   private final List<CallAdapter.Factory> adapterFactories;
   private final Executor callbackExecutor;
+
   private final boolean validateEagerly;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
@@ -143,12 +143,15 @@
               return platform.invokeDefaultMethod(method, service, proxy, args);
             }
             ServiceMethod serviceMethod = loadServiceMethod(method);
+            args = serviceMethod.rebuildArgs(method, args);
             OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);
             return serviceMethod.callAdapter.adapt(okHttpCall);
           }
         });
   }
 
+
+
   private void eagerlyValidateMethods(Class<?> service) {
     Platform platform = Platform.get();
     for (Method method : service.getDeclaredMethods()) {
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index facede01f..3b5b2cff0 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -15,45 +15,19 @@
  */
 package retrofit2;
 
+import okhttp3.Headers;
+import okhttp3.*;
+import retrofit2.http.*;
+
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Method;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.net.URI;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-import okhttp3.Headers;
-import okhttp3.HttpUrl;
-import okhttp3.MediaType;
-import okhttp3.MultipartBody;
-import okhttp3.Request;
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import retrofit2.http.Body;
-import retrofit2.http.DELETE;
-import retrofit2.http.Field;
-import retrofit2.http.FieldMap;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.HEAD;
-import retrofit2.http.HTTP;
-import retrofit2.http.Header;
-import retrofit2.http.HeaderMap;
-import retrofit2.http.Multipart;
-import retrofit2.http.OPTIONS;
-import retrofit2.http.PATCH;
-import retrofit2.http.POST;
-import retrofit2.http.PUT;
-import retrofit2.http.Part;
-import retrofit2.http.PartMap;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-import retrofit2.http.QueryMap;
-import retrofit2.http.Url;
 
 /** Adapts an invocation of an interface method into an HTTP call. */
 final class ServiceMethod<T> {
@@ -75,6 +49,9 @@
   private final boolean isFormEncoded;
   private final boolean isMultipart;
   private final ParameterHandler<?>[] parameterHandlers;
+  private final Map<String, String> fixedFields;
+  private final Map<String, Class<? extends FieldGenerator>> generatedFields;
+  private final Class<? extends FieldMapGenerator> fieldMapGenerator;
 
   ServiceMethod(Builder<T> builder) {
     this.callFactory = builder.retrofit.callFactory();
@@ -89,6 +66,47 @@
     this.isFormEncoded = builder.isFormEncoded;
     this.isMultipart = builder.isMultipart;
     this.parameterHandlers = builder.parameterHandlers;
+    this.fixedFields = builder.fixedFields;
+    this.generatedFields = builder.generatedFields;
+    this.fieldMapGenerator = builder.fieldMapGenerator;
+  }
+
+  public Object[] rebuildArgs(Method method, Object[] args){
+    List<Object> argsList = new ArrayList<>(Arrays.asList(args));
+    Map<String, String> extendFieldMap = new TreeMap<>();
+    if(!this.fixedFields.isEmpty()){
+      for(Map.Entry<String, String> entry : fixedFields.entrySet()){
+        argsList.add(entry.getValue());
+      }
+    }
+    extendFieldMap.putAll(fixedFields);
+    Map<String, String> generatedFieldMap = null;
+    if(this.fieldMapGenerator != null){
+      try{
+        generatedFieldMap = fieldMapGenerator.newInstance().generate(method, extendFieldMap, args);
+        extendFieldMap.putAll(generatedFieldMap);
+      }catch (Exception e){
+        e.printStackTrace();
+      }
+    }
+    if(!this.generatedFields.isEmpty()){
+      for(Map.Entry<String, Class<? extends FieldGenerator>> entry : generatedFields.entrySet()){
+        try {
+          FieldGenerator generator = entry.getValue().newInstance();
+          String generatedArg = generator.generate(method, extendFieldMap, args);
+          argsList.add(generatedArg);
+          extendFieldMap.put(entry.getKey(), generatedArg);
+        } catch (InstantiationException e) {
+          e.printStackTrace();
+        } catch (IllegalAccessException e) {
+          e.printStackTrace();
+        }
+      }
+    }
+    if(generatedFieldMap != null){
+      argsList.add(generatedFieldMap);
+    }
+    return argsList.toArray();
   }
 
   /** Builds an HTTP request from method arguments. */
@@ -148,6 +166,10 @@ T toResponse(ResponseBody body) throws IOException {
     Converter<ResponseBody, T> responseConverter;
     CallAdapter<?> callAdapter;
 
+    Map<String, String> fixedFields = new HashMap<String, String>();
+    Map<String, Class<? extends FieldGenerator>> generatedFields = new HashMap<String, Class<? extends FieldGenerator>>();
+    Class<? extends FieldMapGenerator> fieldMapGenerator;
+
     public Builder(Retrofit retrofit, Method method) {
       this.retrofit = retrofit;
       this.method = method;
@@ -166,6 +188,11 @@ public ServiceMethod build() {
       }
       responseConverter = createResponseConverter();
 
+      Annotation[] classAnnotations = method.getDeclaringClass().getDeclaredAnnotations();
+      for (Annotation classAnnotation : classAnnotations) {
+        parseClassAnnotation(classAnnotation);
+      }
+
       for (Annotation annotation : methodAnnotations) {
         parseMethodAnnotation(annotation);
       }
@@ -186,7 +213,8 @@ public ServiceMethod build() {
       }
 
       int parameterCount = parameterAnnotationsArray.length;
-      parameterHandlers = new ParameterHandler<?>[parameterCount];
+      int generatedFieldMapCount = fieldMapGenerator == null ? 0 : 1;
+      parameterHandlers = new ParameterHandler<?>[parameterCount + fixedFields.size() + generatedFields.size() + generatedFieldMapCount];
       for (int p = 0; p < parameterCount; p++) {
         Type parameterType = parameterTypes[p];
         if (Utils.hasUnresolvableType(parameterType)) {
@@ -202,6 +230,23 @@ public ServiceMethod build() {
         parameterHandlers[p] = parseParameter(p, parameterType, parameterAnnotations);
       }
 
+      // extend parameter with fixed and generated.
+      int p = parameterCount;
+      Converter<?, String> converter = BuiltInConverters.ToStringConverter.INSTANCE;
+      for(Map.Entry<String, String> entry : fixedFields.entrySet()){
+        parameterHandlers[p++] =new  ParameterHandler.Field(entry.getKey(), converter, false);
+      }
+      for(Map.Entry<String, Class<? extends FieldGenerator>> entry : generatedFields.entrySet()){
+        parameterHandlers[p++] =new  ParameterHandler.Field(entry.getKey(), converter, false);
+      }
+
+      if(fieldMapGenerator != null){
+        if (!isFormEncoded) {
+          throw parameterError(p, "@FieldMap parameters can only be used with form encoding.");
+        }
+        parameterHandlers[p] = new ParameterHandler.FieldMap<>(converter, false);
+      }
+
       if (relativeUrl == null && !gotUrl) {
         throw methodError("Missing either @%s URL or @Url parameter.", httpMethod);
       }
@@ -235,6 +280,28 @@ public ServiceMethod build() {
       }
     }
 
+    private void parseClassAnnotation(Annotation annotation) {
+      if(annotation instanceof FixedField){
+        FixedField fixedField = ((FixedField) annotation);
+        String[] values = fixedField.values();
+        String[] keys = fixedField.keys();
+
+        for (int i = 0; i < keys.length; i++) {
+          fixedFields.put(keys[i], values[i]);
+        }
+      }else if( annotation instanceof GeneratedField){
+        GeneratedField generatedField = (GeneratedField) annotation;
+        String[] keys = generatedField.keys();
+        Class<? extends FieldGenerator>[] classes = generatedField.generators();
+
+        for (int i = 0; i < keys.length; i++) {
+          generatedFields.put(keys[i], classes[i]);
+        }
+      }else if(annotation instanceof GeneratedFieldMap){
+        this.fieldMapGenerator = ((GeneratedFieldMap) annotation).value();
+      }
+    }
+
     private void parseMethodAnnotation(Annotation annotation) {
       if (annotation instanceof DELETE) {
         parseHttpMethodAndPath("DELETE", ((DELETE) annotation).value(), false);
@@ -272,6 +339,24 @@ private void parseMethodAnnotation(Annotation annotation) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
+      }else if(annotation instanceof FixedField){
+        FixedField fixedField = ((FixedField) annotation);
+        String[] values = fixedField.values();
+        String[] keys = fixedField.keys();
+
+        for (int i = 0; i < keys.length; i++) {
+          fixedFields.put(keys[i], values[i]);
+        }
+      }else if( annotation instanceof GeneratedField){
+        GeneratedField generatedField = (GeneratedField) annotation;
+        String[] keys = generatedField.keys();
+        Class<? extends FieldGenerator>[] classes = generatedField.generators();
+
+        for (int i = 0; i < keys.length; i++) {
+          generatedFields.put(keys[i], classes[i]);
+        }
+      }else if(annotation instanceof GeneratedFieldMap){
+        this.fieldMapGenerator = ((GeneratedFieldMap) annotation).value();
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit2/http/FixedField.java b/retrofit/src/main/java/retrofit2/http/FixedField.java
new file mode 100644
index 000000000..16717f448
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/FixedField.java
@@ -0,0 +1,16 @@
+package retrofit2.http;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Created by benny on 4/30/16.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.METHOD, ElementType.TYPE})
+public @interface FixedField {
+    String[] keys();
+    String[] values();
+}
diff --git a/retrofit/src/main/java/retrofit2/http/GeneratedField.java b/retrofit/src/main/java/retrofit2/http/GeneratedField.java
new file mode 100644
index 000000000..ab43177bb
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/GeneratedField.java
@@ -0,0 +1,19 @@
+package retrofit2.http;
+
+import retrofit2.FieldGenerator;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Created by benny on 4/30/16.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.METHOD, ElementType.TYPE})
+public @interface GeneratedField {
+    String[] keys();
+
+    Class<? extends FieldGenerator>[] generators();
+}
diff --git a/retrofit/src/main/java/retrofit2/http/GeneratedFieldMap.java b/retrofit/src/main/java/retrofit2/http/GeneratedFieldMap.java
new file mode 100644
index 000000000..6bae852ae
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/GeneratedFieldMap.java
@@ -0,0 +1,17 @@
+package retrofit2.http;
+
+import retrofit2.FieldMapGenerator;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Created by benny on 4/30/16.
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.METHOD, ElementType.TYPE})
+public @interface GeneratedFieldMap {
+    Class<? extends FieldMapGenerator> value();
+}
