diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 357bc31a7..af2b14e11 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -69,17 +69,21 @@ RequestBuilder headers(List<retrofit.client.Header> headers) {
    * method.
    */
   Request build() throws UnsupportedEncodingException {
-    String apiUrl = this.apiUrl;
+      StringBuilder url;
+    if (methodInfo.expectsEndpoint) {
+      url = new StringBuilder(args[0].toString());
+    } else {
+      String apiUrl = this.apiUrl;
+
+      url = new StringBuilder(apiUrl);
+      if (apiUrl.endsWith("/")) {
+        // We require relative paths to start with '/'. Prevent a double-slash.
+        url.deleteCharAt(url.length() - 1);
+      }
 
-    StringBuilder url = new StringBuilder(apiUrl);
-    if (apiUrl.endsWith("/")) {
-      // We require relative paths to start with '/'. Prevent a double-slash.
-      url.deleteCharAt(url.length() - 1);
+      url.append(buildRelativeUrl());
     }
 
-    // Append the method relative URL.
-    url.append(buildRelativeUrl());
-
     // Append query parameters, if needed.
     if (methodInfo.hasQueryParams) {
       boolean first = true;
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index 0eafca32c..d81832ce6 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -26,7 +26,9 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import retrofit.http.Body;
+import retrofit.http.Endpoint;
 import retrofit.http.Field;
 import retrofit.http.FormUrlEncoded;
 import retrofit.http.Header;
@@ -67,9 +69,11 @@
   String requestUrl;
   Set<String> requestUrlParamNames;
   String requestQuery;
+  boolean expectsEndpoint = false;
   List<retrofit.client.Header> headers;
 
   // Parameter-level details
+  String requestEndpointName;
   String[] requestUrlParam;
   String[] requestQueryName;
   boolean hasQueryParams = false;
@@ -171,7 +175,23 @@ private void parseMethodAnnotations() {
 
   /** Loads {@link #requestUrl}, {@link #requestUrlParamNames}, and {@link #requestQuery}. */
   private void parsePath(String path) {
-    if (path == null || path.length() == 0 || path.charAt(0) != '/') {
+    Annotation[][] paramAnnotations = method.getParameterAnnotations();
+    if (paramAnnotations.length > 0
+        && paramAnnotations[0].length > 0
+        && paramAnnotations[0][0].annotationType() == Endpoint.class) {
+      if (path != null && path.length() > 0) {
+        throw new IllegalArgumentException("Method "
+            + method.getName()
+            + " must have path OR endpoint, not both. ("
+            + method.getName()
+            + ")");
+      } else {
+        expectsEndpoint = true;
+        return;
+      }
+    }
+
+    if (path.length() == 0 || path.charAt(0) != '/') {
       throw new IllegalArgumentException("URL path \""
           + path
           + "\" on method "
@@ -322,11 +342,13 @@ private void parseParameters() {
             }
 
             urlParam[i] = name;
+          } else if (annotationType == Endpoint.class) {
+            hasRetrofitAnnotation = true;
+            expectsEndpoint = true;
           } else if (annotationType == Query.class) {
             hasRetrofitAnnotation = true;
             hasQueryParams = true;
             String name = ((Query) parameterAnnotation).value();
-
             queryName[i] = name;
           } else if (annotationType == Header.class) {
             String name = ((Header) parameterAnnotation).value();
diff --git a/retrofit/src/main/java/retrofit/http/Endpoint.java b/retrofit/src/main/java/retrofit/http/Endpoint.java
new file mode 100644
index 000000000..e0e45fa72
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Endpoint.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Endpoint {
+
+}
diff --git a/retrofit/src/main/java/retrofit/http/GET.java b/retrofit/src/main/java/retrofit/http/GET.java
index 5cd11b5f2..98f6f92d2 100644
--- a/retrofit/src/main/java/retrofit/http/GET.java
+++ b/retrofit/src/main/java/retrofit/http/GET.java
@@ -26,5 +26,5 @@
 @Retention(RUNTIME)
 @RestMethod("GET")
 public @interface GET {
-  String value();
+  String value() default "";
 }
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 7ed4ede5e..5ec5a32ba 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -245,6 +245,17 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void explicitEndpoint() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com/") //
+        .setPath("/foo/bar/") //
+        .setEndpoint("https://example.net/baz/")
+        .addQueryParam("ping", "pong")
+        .build();
+    assertThat(request.getUrl()).isEqualTo("https://example.net/baz/?ping=pong");
+  }
+
   @Test public void methodHeader() throws Exception {
     Request request = new Helper() //
         .setMethod("GET") //
@@ -298,6 +309,7 @@ private static void assertTypedBytes(TypedOutput bytes, String expected) throws
     private String method;
     private boolean hasBody = false;
     private boolean hasQueryParams = false;
+    private boolean expectsEndpoint = false;
     private String path;
     private String query;
     private final List<String> pathParams = new ArrayList<String>();
@@ -393,6 +405,15 @@ Helper setFormEncoded() {
       return this;
     }
 
+    Helper setEndpoint(String endpoint) {
+      this.expectsEndpoint = true;
+      if(args.size() > 0) {
+        throw new IllegalStateException("Endpoint must be set before args");
+      }
+      addParam(null, null, null, null, null, endpoint);
+      return this;
+    }
+
     Request build() throws Exception {
       if (method == null) {
         throw new IllegalStateException("Method must be set.");
@@ -411,6 +432,7 @@ Request build() throws Exception {
       methodInfo.requestUrlParamNames = RestMethodInfo.parsePathParameters(path);
       methodInfo.requestQuery = query;
       methodInfo.hasQueryParams = hasQueryParams;
+      methodInfo.expectsEndpoint = expectsEndpoint;
       methodInfo.requestUrlParam = pathParams.toArray(new String[pathParams.size()]);
       methodInfo.requestQueryName = queryParams.toArray(new String[queryParams.size()]);
       methodInfo.requestFormFields = fieldParams.toArray(new String[fieldParams.size()]);
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index 624684062..90667ee56 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -11,21 +11,7 @@
 import java.util.Map;
 import java.util.Set;
 import org.junit.Test;
-import retrofit.http.Body;
-import retrofit.http.DELETE;
-import retrofit.http.Field;
-import retrofit.http.FormUrlEncoded;
-import retrofit.http.GET;
-import retrofit.http.HEAD;
-import retrofit.http.Header;
-import retrofit.http.Headers;
-import retrofit.http.Multipart;
-import retrofit.http.POST;
-import retrofit.http.PUT;
-import retrofit.http.Part;
-import retrofit.http.Path;
-import retrofit.http.Query;
-import retrofit.http.RestMethod;
+import retrofit.http.*;
 import retrofit.mime.TypedOutput;
 
 import static java.lang.annotation.ElementType.METHOD;
@@ -420,6 +406,38 @@ Response a() {
     assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
+  @Test public void explicitEndpoint() {
+    class Example {
+      @GET() Response a(@Endpoint String endpoint) {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, "a");
+    RestMethodInfo methodInfo = new RestMethodInfo(method);
+    methodInfo.init();
+
+    assertThat(methodInfo.expectsEndpoint).isEqualTo(true);
+    assertThat(methodInfo.bodyIndex).isEqualTo(NO_BODY);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
+  }
+
+  @Test public void explicitEndpointWithQuery() {
+    class Example {
+      @GET() Response a(@Endpoint String endpoint, @Query("a") String a) {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, "a");
+    RestMethodInfo methodInfo = new RestMethodInfo(method);
+    methodInfo.init();
+
+    assertThat(methodInfo.expectsEndpoint).isEqualTo(true);
+    assertThat(methodInfo.bodyIndex).isEqualTo(NO_BODY);
+    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
+  }
+
   @Test public void bodyObject() {
     class Example {
       @PUT("/") Response a(@Body Object o) {
@@ -693,8 +711,8 @@ public void headersFailWhenEmptyOnMethod() {
     methodInfo.init();
 
     assertThat(methodInfo.headers).isEqualTo(
-        Arrays.asList(new retrofit.client.Header("X-Foo", "Bar"),
-            new retrofit.client.Header("X-Ping", "Pong")));
+            Arrays.asList(new retrofit.client.Header("X-Foo", "Bar"),
+                    new retrofit.client.Header("X-Ping", "Pong")));
   }
 
   @Test public void twoHeaderParams() {
@@ -743,6 +761,19 @@ Response a() {
     methodInfo.init();
   }
 
+  @Test(expected = IllegalArgumentException.class)
+  public void endpointComesFirst() {
+    class Example {
+      @GET() Response a(@Query("a") String a, @Endpoint String endpoint) {
+        return null;
+      }
+    }
+
+    Method method = TestingUtils.getMethod(Example.class, "a");
+    RestMethodInfo methodInfo = new RestMethodInfo(method);
+    methodInfo.init();
+  }
+
   private static class Response {
   }
 
