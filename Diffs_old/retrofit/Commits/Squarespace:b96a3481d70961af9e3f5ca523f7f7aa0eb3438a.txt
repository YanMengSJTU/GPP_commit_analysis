diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 19e05298d..db1853d6d 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -29,6 +29,7 @@
 import retrofit.Profiler.RequestInformation;
 import retrofit.client.Client;
 import retrofit.client.Header;
+import retrofit.client.GoutputStream;
 import retrofit.client.Request;
 import retrofit.client.Response;
 import retrofit.converter.ConversionException;
@@ -157,11 +158,14 @@ public boolean log() {
   private final Profiler profiler;
   private RxSupport rxSupport;
 
+  private final GoutputStream.ProgressListener progressListener;
+
   volatile LogLevel logLevel;
 
   private RestAdapter(Endpoint server, Client.Provider clientProvider, Executor httpExecutor,
       Executor callbackExecutor, RequestInterceptor requestInterceptor, Converter converter,
-      Profiler profiler, ErrorHandler errorHandler, Log log, LogLevel logLevel) {
+      Profiler profiler, ErrorHandler errorHandler, Log log, LogLevel logLevel,
+      GoutputStream.ProgressListener progressListener) {
     this.server = server;
     this.clientProvider = clientProvider;
     this.httpExecutor = httpExecutor;
@@ -172,6 +176,7 @@ private RestAdapter(Endpoint server, Client.Provider clientProvider, Executor ht
     this.errorHandler = errorHandler;
     this.log = log;
     this.logLevel = logLevel;
+    this.progressListener = progressListener;
   }
 
   /** Change the level of logging. */
@@ -318,7 +323,9 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
         }
 
         long start = System.nanoTime();
-        Response response = clientProvider.get().execute(request);
+        Client client = clientProvider.get();
+        client.setProgressListener(progressListener);
+        Response response = client.execute(request);
         long elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
 
         int statusCode = response.getStatus();
@@ -536,6 +543,7 @@ void logException(Throwable t, String url) {
     private ErrorHandler errorHandler;
     private Log log;
     private LogLevel logLevel = LogLevel.NONE;
+    private GoutputStream.ProgressListener progressListener;
 
     /** API endpoint URL. */
     public Builder setEndpoint(String endpoint) {
@@ -653,6 +661,11 @@ public Builder setLogLevel(LogLevel logLevel) {
       return this;
     }
 
+    public Builder setProgressListener(GoutputStream.ProgressListener listener) {
+      progressListener = listener;
+      return this;
+    }
+
     /** Create the {@link RestAdapter} instances. */
     public RestAdapter build() {
       if (endpoint == null) {
@@ -660,7 +673,7 @@ public RestAdapter build() {
       }
       ensureSaneDefaults();
       return new RestAdapter(endpoint, clientProvider, httpExecutor, callbackExecutor,
-          requestInterceptor, converter, profiler, errorHandler, log, logLevel);
+          requestInterceptor, converter, profiler, errorHandler, log, logLevel, progressListener);
     }
 
     private void ensureSaneDefaults() {
diff --git a/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
index d5ae3dc8a..198548438 100644
--- a/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
+++ b/retrofit/src/main/java/retrofit/android/AndroidApacheClient.java
@@ -17,6 +17,7 @@
 
 import android.net.http.AndroidHttpClient;
 import retrofit.client.ApacheClient;
+import retrofit.client.GoutputStream;
 
 /**
  * Provides a {@link retrofit.client.Client} which uses the Android-specific version of
@@ -29,4 +30,9 @@
   public AndroidApacheClient() {
     super(AndroidHttpClient.newInstance("Retrofit"));
   }
+
+  @Override
+  public void setProgressListener(GoutputStream.ProgressListener progressListener) {
+
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
index 5bc229861..9a0b23d3b 100644
--- a/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
+++ b/retrofit/src/main/java/retrofit/appengine/UrlFetchClient.java
@@ -1,18 +1,21 @@
 package retrofit.appengine;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
 import com.google.appengine.api.urlfetch.HTTPHeader;
 import com.google.appengine.api.urlfetch.HTTPMethod;
 import com.google.appengine.api.urlfetch.HTTPRequest;
 import com.google.appengine.api.urlfetch.HTTPResponse;
 import com.google.appengine.api.urlfetch.URLFetchService;
 import com.google.appengine.api.urlfetch.URLFetchServiceFactory;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
+
 import retrofit.client.Client;
 import retrofit.client.Header;
+import retrofit.client.GoutputStream;
 import retrofit.client.Request;
 import retrofit.client.Response;
 import retrofit.mime.TypedByteArray;
@@ -54,6 +57,11 @@ public UrlFetchClient(URLFetchService urlFetchService) {
     return parseResponse(fetchResponse);
   }
 
+  @Override
+  public void setProgressListener(GoutputStream.ProgressListener progressListener) {
+
+  }
+
   /** Execute the specified {@code request} using the provided {@code urlFetchService}. */
   protected HTTPResponse execute(URLFetchService urlFetchService, HTTPRequest request)
       throws IOException {
diff --git a/retrofit/src/main/java/retrofit/client/ApacheClient.java b/retrofit/src/main/java/retrofit/client/ApacheClient.java
index ac85d7838..0a48566a0 100644
--- a/retrofit/src/main/java/retrofit/client/ApacheClient.java
+++ b/retrofit/src/main/java/retrofit/client/ApacheClient.java
@@ -66,6 +66,11 @@ public ApacheClient(HttpClient client) {
     return parseResponse(request.getUrl(), apacheResponse);
   }
 
+  @Override
+  public void setProgressListener(GoutputStream.ProgressListener progressListener) {
+
+  }
+
   /** Execute the specified {@code request} using the provided {@code client}. */
   protected HttpResponse execute(HttpClient client, HttpUriRequest request) throws IOException {
     return client.execute(request);
diff --git a/retrofit/src/main/java/retrofit/client/Client.java b/retrofit/src/main/java/retrofit/client/Client.java
index 53a75b2eb..2d2c95a88 100644
--- a/retrofit/src/main/java/retrofit/client/Client.java
+++ b/retrofit/src/main/java/retrofit/client/Client.java
@@ -32,6 +32,9 @@
    */
   Response execute(Request request) throws IOException;
 
+  // HA ha! Fuck your API!
+  void setProgressListener(GoutputStream.ProgressListener progressListener);
+
   /**
    * Deferred means of obtaining a {@link Client}. For asynchronous requests this will always be
    * called on a background thread.
diff --git a/retrofit/src/main/java/retrofit/client/GoutputStream.java b/retrofit/src/main/java/retrofit/client/GoutputStream.java
new file mode 100644
index 000000000..76ff87ba0
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/client/GoutputStream.java
@@ -0,0 +1,46 @@
+package retrofit.client;
+
+import java.io.IOException;
+import java.io.OutputStream;
+
+public class GoutputStream extends OutputStream {
+  private final OutputStream out;
+  private final ProgressListener listener;
+
+  private int length;
+  private int bytesTransferred;
+  private int nextMileStone;
+
+  public GoutputStream(OutputStream out, ProgressListener listener) {
+    this.out = out;
+    this.listener = listener;
+  }
+
+  @Override
+  public void write(int b) throws IOException {
+    bytesTransferred++;
+
+    if(nextMileStone == 0) {
+      nextMileStone = length / listener.updateCount();
+    }
+
+    if(bytesTransferred > nextMileStone) {
+      nextMileStone += length / listener.updateCount();
+      double progress = (double) bytesTransferred / length;
+      listener.update(progress);
+    }
+    out.write(b);
+  }
+
+  @Override
+  public void write(byte[] b, int off, int len) throws IOException {
+    length = len;
+    super.write(b, off, len);
+  }
+
+  public static interface ProgressListener {
+    int length();
+    int updateCount();
+    void update(double percent);
+  }
+}
\ No newline at end of file
diff --git a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
index cd7872e67..535992055 100644
--- a/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
+++ b/retrofit/src/main/java/retrofit/client/UrlConnectionClient.java
@@ -17,11 +17,14 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.OutputStream;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
+
+import android.util.Log;
 import retrofit.mime.TypedInput;
 import retrofit.mime.TypedOutput;
 
@@ -29,6 +32,8 @@
 public class UrlConnectionClient implements Client {
   private static final int CHUNK_SIZE = 4096;
 
+  private GoutputStream.ProgressListener progressListener;
+
   public UrlConnectionClient() {
   }
 
@@ -38,6 +43,12 @@ public UrlConnectionClient() {
     return readResponse(connection);
   }
 
+  @Override
+  public void setProgressListener(GoutputStream.ProgressListener progressListener) {
+    Log.e("#####", "Listener: " + progressListener);
+    this.progressListener = progressListener;
+  }
+
   protected HttpURLConnection openConnection(Request request) throws IOException {
     HttpURLConnection connection =
         (HttpURLConnection) new URL(request.getUrl()).openConnection();
@@ -65,7 +76,15 @@ void prepareRequest(HttpURLConnection connection, Request request) throws IOExce
       } else {
         connection.setChunkedStreamingMode(CHUNK_SIZE);
       }
-      body.writeTo(connection.getOutputStream());
+
+      OutputStream out;
+      if(progressListener != null) {
+        out = new GoutputStream(connection.getOutputStream(), progressListener);
+      } else {
+        out = connection.getOutputStream();
+      }
+
+      body.writeTo(out);
     }
   }
 
