diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 75017297c..1e43c97e9 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -159,14 +159,14 @@ void addQueryParam(String name, Object value, boolean urlEncodeValue) {
 
   void addQueryParamArray(String name, Object arrayValues, boolean urlEncodeValue) {
     final int length = Array.getLength(arrayValues);
-    for (int i = 0; i < length ; i++) {
+    for (int i = 0; i < length; i++) {
       Object value = Array.get(arrayValues, i);
       addQueryParam(name, value, urlEncodeValue);
     }
   }
 
   void addQueryParamIterable(String name, Iterable values, boolean urlEncodeValue) {
-    for (Object value: values) {
+    for (Object value : values) {
       addQueryParam(name, value, urlEncodeValue);
     }
   }
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptor.java b/retrofit/src/main/java/retrofit/RequestInterceptor.java
index dead93a83..d3f71a575 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptor.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java
@@ -21,12 +21,24 @@
      */
     void addEncodedPathParam(String name, String value);
 
-    /** Add an additional query parameter. This will not replace any existing query parameters. */
+    /**
+     * Add an additional query parameter. This will not replace any existing query parameters.
+     *
+     * @param name The name of the query parameter
+     * @param value The value of the query parameter. If the value is an array or an
+     *              {@link Iterable} the parameter will be added multiple times, one per each
+     *              value
+     */
     void addQueryParam(String name, Object value);
 
     /**
      * Add an additional query parameter without first URI encoding. This will not replace any
      * existing query parameters.
+     *
+     * @param name The name of the query parameter
+     * @param value The value of the query parameter. If the value is an array or an
+     *              {@link Iterable} the parameter will be added multiple times, one per each
+     *              value
      */
     void addEncodedQueryParam(String name, Object value);
   }
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
index 73632ef3e..36af54fbb 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -29,7 +29,7 @@ private void addFieldString(String name, String value) throws IOException {
     value = URLEncoder.encode(value, "UTF-8");
 
     if (content.size() > 0) {
-        content.write('&');
+      content.write('&');
     }
     content.write(name.getBytes("UTF-8"));
     content.write('=');
@@ -38,16 +38,16 @@ private void addFieldString(String name, String value) throws IOException {
 
   private void addFieldArray(String name, Object arrayValues) {
     final int length = Array.getLength(arrayValues);
-    for (int i = 0; i < length ; i++) {
+    for (int i = 0; i < length; i++) {
       Object value = Array.get(arrayValues, i);
       addField(name, value);
     }
   }
 
   private void addFieldIterable(String name, Iterable values) throws IOException {
-     for (Object value: values) {
-         addFieldString(name, value.toString());
-     }
+    for (Object value : values) {
+      addFieldString(name, value.toString());
+    }
   }
 
   public void addField(String name, Object value) {
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index b7ff0b7d6..14d994410 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -200,11 +200,11 @@
 
   @Test public void getWithQueryParamArrayPrimitive() throws Exception {
     Request request = new Helper() //
-            .setMethod("GET") //
-            .setUrl("http://example.com") //
-            .setPath("/foo/bar/") //
-            .addQueryParam("ping", new int[]{1, 2}) //
-            .build();
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParam("ping", new int[]{1, 2}) //
+        .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=1&ping=2");
@@ -216,7 +216,7 @@
         .setMethod("GET") //
         .setUrl("http://example.com") //
         .setPath("/foo/bar/") //
-        .addQueryParam("ping", Arrays.asList(new String[]{"pong", "pong-too"})) //
+        .addQueryParam("ping", Arrays.asList("pong", "pong-too")) //
         .build();
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
index 526d60a54..c8740cfd7 100644
--- a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -1,6 +1,7 @@
 // Copyright 2013 Square, Inc.
 package retrofit.mime;
 
+import java.io.ByteArrayOutputStream;
 import org.junit.Test;
 
 import java.io.ByteArrayOutputStream;
@@ -70,7 +71,7 @@
 
   @Test public void arrayIterable() throws Exception {
     FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
-    fe.addField("ping", Arrays.asList(new String[]{"pong", "pong-too"}));
+    fe.addField("ping", Arrays.asList("pong", "pong-too"));
 
     ByteArrayOutputStream out = new ByteArrayOutputStream();
     fe.writeTo(out);
