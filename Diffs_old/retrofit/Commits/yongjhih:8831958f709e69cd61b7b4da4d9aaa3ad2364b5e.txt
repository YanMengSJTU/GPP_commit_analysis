diff --git a/README.md b/README.md
index 4f44a0b80..a06336d6a 100644
--- a/README.md
+++ b/README.md
@@ -573,6 +573,21 @@ abstract Observable<Repo> repos();
 abstract Observable<Repo> repos();
 ```
 
+## @OkHttpClient
+
+```java
+@OkHttpClient(AllTrustedOkHttpClienter.class)
+abstract class GitHub {
+  // ...
+}
+
+AllTrustedOkHttpClienter extends OkHttpClienter {
+  @Override OkHttpClient get() {
+    // ...
+    return okHttpClient;
+  }
+}
+```
 ## Installation
 
 via jcenter:
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
index e416c3c39..21abffac8 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -1223,6 +1223,17 @@ private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
       vars.retryHeaders = retryHeaderMap;
     }
 
+    Retrofit.OkHttpClient okHttpClienterAnnotation = type.getAnnotation(Retrofit.OkHttpClient.class);
+    if (okHttpClienterAnnotation != null) {
+      TypeMirror okHttpClienter = null;
+      try {
+        okHttpClienter = getTypeMirror(okHttpClienterAnnotation.value());
+      } catch (MirroredTypeException mte) {
+        // http://blog.retep.org/2009/02/13/getting-class-values-from-annotations-in-an-annotationprocessor/
+        okHttpClienter = mte.getTypeMirror();
+      }
+      vars.okHttpClient = typeSimplifier.simplify(okHttpClienter);
+    }
     Retrofit.Converter converterAnnotation = type.getAnnotation(Retrofit.Converter.class);
     if (converterAnnotation != null) {
       TypeMirror converter = null;
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
index 62d873b27..0bf209f34 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
@@ -147,6 +147,7 @@
   retrofit.RestAdapter.LogLevel logLevel = retrofit.RestAdapter.LogLevel.NONE;
 
   String requestInterceptor = "";
+  String okHttpClient = "";
 
   String authenticator = "";
   Boolean authenticated = false;
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 479edd68c..99153d278 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -172,10 +172,18 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
 #end
 
+#if ($okHttpClient != "")
+
+        this.okHttpClient = new $okHttpClient().get();
+
+#else
+
         if (okHttpClient == null) {
             okHttpClient = new OkHttpClient();
         }
 
+#end
+
         okHttpClient.setConnectTimeout(15, TimeUnit.SECONDS);
         okHttpClient.setReadTimeout(20, TimeUnit.SECONDS);
 
diff --git a/retrofit/src/main/java/retrofit/http/Retrofit.java b/retrofit/src/main/java/retrofit/http/Retrofit.java
index e2df19645..0135769f6 100644
--- a/retrofit/src/main/java/retrofit/http/Retrofit.java
+++ b/retrofit/src/main/java/retrofit/http/Retrofit.java
@@ -662,6 +662,17 @@
     Class<? extends RequestAuthenticator> value() default RequestAuthenticator.class;
   }
 
+  @Retention(RUNTIME)
+  @Target(TYPE)
+  public @interface OkHttpClient {
+    //Class<? extends RequestAuthenticator>[] value() default RequestAuthenticator.class;
+    Class<? extends OkHttpClienter> value() default OkHttpClienter.class;
+  }
+
+  public interface OkHttpClienter {
+    com.squareup.okhttp.OkHttpClient get();
+  }
+
   public interface RequestAuthenticator extends retrofit.RequestInterceptor {
     String authorize(Object context, Collection<String> permissions);
   }
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
index 8601b4d5d..973553034 100644
--- a/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHub.java
@@ -50,6 +50,7 @@
 @LogLevel(retrofit.RestAdapter.LogLevel.FULL) // optional
 @RequestInterceptor(GitHubRequestInterceptor.class) // optional
 @ErrorHandler(GitHubErrorHandler.class) // optional
+@Retrofit.OkHttpClient(GitHubOkHttpClienter.class) // optional
 public abstract class GitHub {
     @GET("/repos/{owner}/{repo}/contributors")
     //@Authenticator(GitHubAuthenticator.class)
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/GitHubOkHttpClienter.java b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubOkHttpClienter.java
new file mode 100644
index 000000000..7774a6bd5
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/GitHubOkHttpClienter.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.RequestInterceptor;
+import retrofit.http.Retrofit.RequestAuthenticator;
+import java.util.Collection;
+import java.util.List;
+import java.util.ArrayList;
+import android.content.Context;
+import android.text.TextUtils;
+import retrofit.RequestInterceptor.RequestFacade;
+import android.accounts.AccountManager;
+import android.accounts.Account;
+import android.accounts.AccountManagerFuture;
+import android.app.Activity;
+import android.os.Bundle;
+import rx.Observable;
+import rx.functions.*;
+import com.squareup.okhttp.OkHttpClient;
+import retrofit.http.Retrofit.*;
+
+public class GitHubOkHttpClienter implements OkHttpClienter {
+    @Override public OkHttpClient get() {
+        return new OkHttpClient();
+    }
+}
