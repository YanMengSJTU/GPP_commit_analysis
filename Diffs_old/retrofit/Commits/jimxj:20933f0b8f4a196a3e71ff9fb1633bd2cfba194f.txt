diff --git a/pom.xml b/pom.xml
index 23d8c82e3..00281b168 100644
--- a/pom.xml
+++ b/pom.xml
@@ -50,7 +50,7 @@
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
     <android.platform>16</android.platform>
-    <okhttp.version>2.5.0-SNAPSHOT</okhttp.version>
+    <okhttp.version>2.6.0</okhttp.version>
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
     <!-- Adapter Dependencies -->
diff --git a/retrofit/src/main/java/retrofit/RequestBuilderAction.java b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
index 0bcc510ca..6d6afd782 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilderAction.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
@@ -60,6 +60,29 @@
     }
   }
 
+  //JIM
+  static final class HeaderMap extends RequestBuilderAction {
+
+    HeaderMap() {
+    }
+
+    @Override void perform(RequestBuilder builder, Object value) {
+      if (value == null) return; // Skip null values.
+
+      Map<?, ?> map = (Map<?, ?>) value;
+      for (Map.Entry<?, ?> entry : map.entrySet()) {
+        Object entryKey = entry.getKey();
+        if (entryKey == null) {
+          throw new IllegalArgumentException("Header map contained null key.");
+        }
+        Object entryValue = entry.getValue();
+        if (entryValue != null) { // Skip null values.
+          builder.addHeader(entryKey.toString(), entryValue.toString());
+        }
+      }
+    }
+  }
+
   static final class Path extends RequestBuilderAction {
     private final String name;
     private final boolean encoded;
diff --git a/retrofit/src/main/java/retrofit/RequestFactoryParser.java b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
index 78ac91b24..51f7346c0 100644
--- a/retrofit/src/main/java/retrofit/RequestFactoryParser.java
+++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
@@ -35,6 +35,7 @@
 import retrofit.http.HEAD;
 import retrofit.http.HTTP;
 import retrofit.http.Header;
+import retrofit.http.HeaderMap;
 import retrofit.http.Headers;
 import retrofit.http.Multipart;
 import retrofit.http.PATCH;
@@ -278,6 +279,10 @@ private void parseParameters(List<Converter.Factory> converterFactories) {
             Header header = (Header) methodParameterAnnotation;
             action = new RequestBuilderAction.Header(header.value());
 
+          } else if (methodParameterAnnotation instanceof HeaderMap) { //JIM
+            HeaderMap headerMap = (HeaderMap) methodParameterAnnotation;
+            action = new RequestBuilderAction.HeaderMap();
+
           } else if (methodParameterAnnotation instanceof Field) {
             if (!isFormEncoded) {
               throw parameterError(i, "@Field parameters can only be used with form encoding.");
diff --git a/retrofit/src/main/java/retrofit/http/HeaderMap.java b/retrofit/src/main/java/retrofit/http/HeaderMap.java
new file mode 100644
index 000000000..546387c1a
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/HeaderMap.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (C) 2014 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+//JIM
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Header parameter keys and values added to the request.
+ * <p>
+ * Both keys and values are converted to strings using {@link String#valueOf(Object)}.
+ * {@code null} will not include. {@code null} keys
+ * are not allowed.
+ * <p>
+ * Simple Example:
+ * <pre>
+ * &#64;GET("/search")
+ * void list(@HeaderMap Map&lt;String, String&gt; filters);
+ * </pre>
+ * @see Header
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface HeaderMap {
+}
