diff --git a/retrofit-processors/pom.xml b/retrofit-processors/pom.xml
index 11b7ddffb..8a7e54330 100644
--- a/retrofit-processors/pom.xml
+++ b/retrofit-processors/pom.xml
@@ -33,6 +33,11 @@
       <artifactId>auto-service</artifactId>
       <version>1.0-rc1</version>
     </dependency>
+    <dependency>
+      <groupId>com.google.auto</groupId>
+      <artifactId>auto-common</artifactId>
+      <version>1.0-SNAPSHOT</version> <!-- or use a known release version -->
+    </dependency>
     <dependency>
       <groupId>${project.groupId}</groupId>
       <artifactId>retrofit</artifactId>
diff --git a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
index 858c04aec..2cbef0b78 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
@@ -1,11 +1,23 @@
 package retrofit2
 
+import com.google.auto.common.MoreElements
 import com.google.auto.service.AutoService
 import com.squareup.javapoet.ArrayTypeName
 import com.squareup.javapoet.ParameterizedTypeName
 import com.squareup.javapoet.TypeName
 import com.squareup.javapoet.TypeVariableName
 import com.squareup.javapoet.WildcardTypeName
+import retrofit2.http.DELETE
+import retrofit2.http.FormUrlEncoded
+import retrofit2.http.GET
+import retrofit2.http.HEAD
+import retrofit2.http.HTTP
+import retrofit2.http.Headers
+import retrofit2.http.Multipart
+import retrofit2.http.OPTIONS
+import retrofit2.http.PATCH
+import retrofit2.http.POST
+import retrofit2.http.PUT
 import retrofit2.processors.ErrorMessage
 import retrofit2.processors.RetrofitService
 import retrofit2.processors.error
@@ -15,6 +27,7 @@ import javax.annotation.processing.ProcessingEnvironment
 import javax.annotation.processing.Processor
 import javax.annotation.processing.RoundEnvironment
 import javax.lang.model.SourceVersion
+import javax.lang.model.element.AnnotationMirror
 import javax.lang.model.element.ElementKind
 import javax.lang.model.element.ExecutableElement
 import javax.lang.model.element.TypeElement
@@ -71,6 +84,37 @@ class RetrofitCheckProcessor : AbstractProcessor() {
     val returnType = element.returnType
     val returnTypeName = TypeName.get(returnType)
     validReturnType(returnTypeName, element)
+    validateMethodAnnotations(element)
+  }
+
+  private fun validateMethodAnnotations(element: ExecutableElement) {
+    val annotations = element.annotationMirrors
+    annotations.forEach {
+      val typeName = TypeName.get(it.annotationType)
+      when (typeName) {
+        TypeName.get(DELETE::class.java),
+        TypeName.get(GET::class.java),
+        TypeName.get(HEAD::class.java),
+        TypeName.get(PATCH::class.java),
+        TypeName.get(POST::class.java),
+        TypeName.get(PUT::class.java),
+        TypeName.get(OPTIONS::class.java) -> {
+
+        }
+        TypeName.get(HTTP::class.java) -> {
+
+        }
+        TypeName.get(Headers::class.java) -> {
+
+        }
+        TypeName.get(Multipart::class.java) -> {
+
+        }
+        TypeName.get(FormUrlEncoded::class.java) -> {
+
+        }
+      }
+    }
   }
 
   private fun validReturnType(returnTypeName: TypeName, element: ExecutableElement) {
@@ -93,5 +137,6 @@ class RetrofitCheckProcessor : AbstractProcessor() {
         returnTypeName.typeArguments.forEach { validReturnType(it, element) }
       }
     }
+    // TODO: use retrofit instance to check return types with call adapters and converters
   }
 }
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
index 401e8ed05..e1136df85 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -13,7 +13,7 @@ class BaseTest {
         compiler()
             .compile(JavaFileObjects.forSourceLines(
                 "retrofit2.processors.SampleService",
-          """
+                """
                 package retrofit2.processors;
 
                 import retrofit2.Call;
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
index c7ab6571f..ab948de51 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
@@ -26,7 +26,8 @@ class ReturnTypeTest {
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
-    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
   }
 
   @Test
@@ -50,7 +51,8 @@ class ReturnTypeTest {
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
-    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
   }
 
   @Test
@@ -73,7 +75,8 @@ class ReturnTypeTest {
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
-    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED, compilation.errors().firstOrNull()?.getMessage())
+    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED,
+        compilation.errors().firstOrNull()?.getMessage())
   }
 
   @Test
@@ -97,7 +100,8 @@ class ReturnTypeTest {
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
-    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED, compilation.errors().firstOrNull()?.getMessage())
+    assertEquals(ErrorMessage.METHOD_RETURN_UNRESOLVED,
+        compilation.errors().firstOrNull()?.getMessage())
   }
 
   @Test
@@ -123,6 +127,7 @@ class ReturnTypeTest {
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
-    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T", compilation.errors().firstOrNull()?.getMessage())
+    assertEquals("${ErrorMessage.METHOD_RETURN_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
   }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
index 08e78070e..571dad7a4 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
@@ -6,7 +6,6 @@ import org.junit.Test
 import java.util.Locale
 import javax.tools.JavaFileObject
 import kotlin.test.assertEquals
-import kotlin.test.assertTrue
 
 class TargetTypeTest {
 
@@ -70,4 +69,4 @@ class TargetTypeTest {
     val onlyWarning = compilation.errors().firstOrNull()
     assertEquals(ErrorMessage.INVALID_TYPE, onlyWarning?.getMessage(Locale.getDefault()))
   }
-}
\ No newline at end of file
+}
