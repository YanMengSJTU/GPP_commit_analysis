diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index a4960a634..07d71be13 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -19,6 +19,8 @@
 import java.net.URLEncoder;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
+
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.converter.Converter;
@@ -195,6 +197,14 @@ void setArguments(Object[] args) {
             addEncodedQueryParam(name, value.toString());
           }
           break;
+        case QUERY_PARAMS:
+          if (value != null) { // Skip null values.
+            Map<String, ?> queryParams = (Map<String, ?>) value;
+            for(Map.Entry<String, ?> queryParam : queryParams.entrySet()) {
+            	addQueryParam(queryParam.getKey(), queryParam.getValue().toString());
+            }
+          }
+          break;
         case HEADER:
           if (value != null) { // Skip null values.
             addHeader(name, value.toString());
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index b2784992c..5778eebb7 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -26,6 +26,7 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
 import retrofit.http.Body;
 import retrofit.http.EncodedPath;
 import retrofit.http.EncodedQuery;
@@ -37,6 +38,7 @@
 import retrofit.http.Part;
 import retrofit.http.Path;
 import retrofit.http.Query;
+import retrofit.http.QueryParams;
 import retrofit.http.RestMethod;
 
 /** Request metadata about a service interface declaration. */
@@ -330,6 +332,9 @@ private void parseParameters() {
 
             paramNames[i] = name;
             paramUsage[i] = ParamUsage.ENCODED_QUERY;
+          } else if (annotationType == QueryParams.class) {
+              paramNames[i] = "REQUEST_PARAMS_PLACEHOLDER";
+              paramUsage[i] = ParamUsage.QUERY_PARAMS;
           } else if (annotationType == Header.class) {
             String name = ((Header) parameterAnnotation).value();
             if (parameterType != String.class) {
diff --git a/retrofit/src/main/java/retrofit/http/QueryParams.java b/retrofit/src/main/java/retrofit/http/QueryParams.java
index fee7093e1..2ee6ae13a 100644
--- a/retrofit/src/main/java/retrofit/http/QueryParams.java
+++ b/retrofit/src/main/java/retrofit/http/QueryParams.java
@@ -37,5 +37,5 @@
 @Target(PARAMETER)
 @Retention(RUNTIME)
 public @interface QueryParams {
-  String value();
+
 }
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 877661e56..2294e7781 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1,17 +1,33 @@
 // Copyright 2013 Square, Inc.
 package retrofit;
 
-import com.google.gson.Gson;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+import static retrofit.RestMethodInfo.ParamUsage.BODY;
+import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
+import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.FIELD;
+import static retrofit.RestMethodInfo.ParamUsage.HEADER;
+import static retrofit.RestMethodInfo.ParamUsage.PART;
+import static retrofit.RestMethodInfo.ParamUsage.PATH;
+import static retrofit.RestMethodInfo.ParamUsage.QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.QUERY_PARAMS;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
 import org.junit.Test;
+
+import retrofit.RestMethodInfo.ParamUsage;
+import retrofit.RestMethodInfo.RequestType;
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.converter.Converter;
@@ -21,18 +37,7 @@
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
-import static retrofit.RestMethodInfo.ParamUsage;
-import static retrofit.RestMethodInfo.ParamUsage.BODY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD;
-import static retrofit.RestMethodInfo.ParamUsage.HEADER;
-import static retrofit.RestMethodInfo.ParamUsage.PART;
-import static retrofit.RestMethodInfo.ParamUsage.PATH;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
-import static retrofit.RestMethodInfo.RequestType;
+import com.google.gson.Gson;
 
 public class RequestBuilderTest {
   @Test public void normalGet() throws Exception {
@@ -300,6 +305,24 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void getWithQueryParams() throws Exception {
+	Map<String, String> queryParams = new HashMap<String, String>();
+	queryParams.put("hi", "mom");
+	queryParams.put("bye", "moms_boyfriend");
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParams(queryParams) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).startsWith("http://example.com/foo/bar/?");
+    assertThat(request.getUrl()).containsOnlyOnce("hi=mom");
+    assertThat(request.getUrl()).containsOnlyOnce("bye=moms_boyfriend");
+    assertThat(request.getBody()).isNull();
+  }
+  
   @Test public void normalPost() throws Exception {
     Request request = new Helper() //
         .setMethod("POST") //
@@ -595,7 +618,7 @@ Helper setMethod(String method) {
       return this;
     }
 
-    Helper setHasBody() {
+	Helper setHasBody() {
       hasBody = true;
       return this;
     }
@@ -643,6 +666,13 @@ Helper addEncodedQueryParam(String name, String value) {
       return this;
     }
 
+    Helper addQueryParams(Map<String, ?> queryParams) {
+        paramNames.add("REQUEST_PARAMS_PLACEHOLDER");
+        paramUsages.add(QUERY_PARAMS);
+        args.add(queryParams);
+        return this;
+      }
+    
     Helper addField(String name, String value) {
       paramNames.add(name);
       paramUsages.add(FIELD);
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index cfd7f84b3..0ef439393 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -1,7 +1,20 @@
 // Copyright 2013 Square, Inc.
 package retrofit;
 
-import com.google.gson.reflect.TypeToken;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+import static retrofit.RestMethodInfo.ParamUsage.BODY;
+import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
+import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.HEADER;
+import static retrofit.RestMethodInfo.ParamUsage.PATH;
+import static retrofit.RestMethodInfo.ParamUsage.QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.QUERY_PARAMS;
+import static retrofit.RestMethodInfo.RequestType.MULTIPART;
+import static retrofit.RestMethodInfo.RequestType.SIMPLE;
+
 import java.lang.annotation.Retention;
 import java.lang.annotation.Target;
 import java.lang.reflect.Method;
@@ -10,7 +23,9 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import org.junit.Test;
+
 import retrofit.http.Body;
 import retrofit.http.DELETE;
 import retrofit.http.EncodedPath;
@@ -28,22 +43,11 @@
 import retrofit.http.Part;
 import retrofit.http.Path;
 import retrofit.http.Query;
+import retrofit.http.QueryParams;
 import retrofit.http.RestMethod;
 import retrofit.mime.TypedOutput;
 
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-import static retrofit.RestMethodInfo.ParamUsage.BODY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.HEADER;
-import static retrofit.RestMethodInfo.ParamUsage.PATH;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY_PARAMS;
-import static retrofit.RestMethodInfo.RequestType.MULTIPART;
-import static retrofit.RestMethodInfo.RequestType.SIMPLE;
+import com.google.gson.reflect.TypeToken;
 
 public class RestMethodInfoTest {
   @Test public void pathParameterParsing() throws Exception {
