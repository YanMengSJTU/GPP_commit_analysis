diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index 010c6ae02..b2784992c 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -47,7 +47,7 @@
   private static final Pattern PARAM_URL_REGEX = Pattern.compile("\\{(" + PARAM + ")\\}");
 
   enum ParamUsage {
-    PATH, ENCODED_PATH, QUERY, ENCODED_QUERY, FIELD, PART, BODY, HEADER
+    PATH, ENCODED_PATH, QUERY, ENCODED_QUERY, QUERY_PARAMS, FIELD, PART, BODY, HEADER
   }
 
   enum RequestType {
diff --git a/retrofit/src/main/java/retrofit/http/QueryParams.java b/retrofit/src/main/java/retrofit/http/QueryParams.java
new file mode 100644
index 000000000..fee7093e1
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/QueryParams.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Query parameter appended to the URL. Values are converted to strings using
+ * {@link String#valueOf(Object)}. Parameter values will be URL encoded.
+ * <p>
+ * <pre>
+ * &#64;GET("/list")
+ * void example(@Query("page") int page, ..);
+ * </pre>
+ * <p>
+ * Query parameters may be {@code null} which will omit them from the URL.
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface QueryParams {
+  String value();
+}
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index e77b8a0d0..cfd7f84b3 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -41,6 +41,7 @@
 import static retrofit.RestMethodInfo.ParamUsage.HEADER;
 import static retrofit.RestMethodInfo.ParamUsage.PATH;
 import static retrofit.RestMethodInfo.ParamUsage.QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.QUERY_PARAMS;
 import static retrofit.RestMethodInfo.RequestType.MULTIPART;
 import static retrofit.RestMethodInfo.RequestType.SIMPLE;
 
@@ -476,6 +477,22 @@ Response a() {
     assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
   }
 
+    @Test public void queryParams() {
+        class Example {
+            @GET("/") Response a(@QueryParams Map<String, ?> queryParams) {
+                return null;
+            }
+        }
+
+        Method method = TestingUtils.getMethod(Example.class, "a");
+        RestMethodInfo methodInfo = new RestMethodInfo(method);
+        methodInfo.init();
+
+        assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly("REQUEST_PARAMS_PLACEHOLDER");
+        assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(QUERY_PARAMS);
+        assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
+    }
+
   @Test public void multipleQueryParams() {
     class Example {
       @GET("/") Response a(@Query("a") String a, @Query("b") String b, @Query("c") String c) {
