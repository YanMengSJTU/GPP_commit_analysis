diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index a4960a634..cccb1609d 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -15,10 +15,6 @@
  */
 package retrofit;
 
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.List;
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.converter.Converter;
@@ -26,6 +22,11 @@
 import retrofit.mime.MultipartTypedOutput;
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
 final class RequestBuilder implements RequestInterceptor.RequestFacade {
   private final Converter converter;
@@ -130,21 +131,39 @@ void addPathParam(String name, String value, boolean urlEncodeValue) {
     }
   }
 
-  @Override public void addQueryParam(String name, String value) {
+  @Override public void addQueryParam(String name, Object value) {
     addQueryParam(name, value, true);
   }
 
-  @Override public void addEncodedQueryParam(String name, String value) {
+  @Override public void addEncodedQueryParam(String name, Object value) {
     addQueryParam(name, value, false);
   }
 
-  void addQueryParam(String name, String value, boolean urlEncodeValue) {
+  void addQueryParam(String name, Object value, boolean urlEncodeValue) {
     if (name == null) {
       throw new IllegalArgumentException("Query param name must not be null.");
     }
     if (value == null) {
       throw new IllegalArgumentException("Query param \"" + name + "\" value must not be null.");
     }
+
+    if (value instanceof Iterable) {
+        addQueryParamIterable(name, (Iterable) value, urlEncodeValue);
+    } else if (value.getClass().isArray()) {
+        Iterable arrayAsList = Arrays.asList((Object[]) value);
+        addQueryParamIterable(name, arrayAsList, urlEncodeValue);
+    } else {
+        addQueryParamString(name, value.toString(), urlEncodeValue);
+    }
+  }
+
+  void addQueryParamIterable(String name, Iterable values, boolean urlEncodeValue) {
+    for (Object value: values) {
+        addQueryParamString(name, value.toString(), urlEncodeValue);
+    }
+  }
+
+  void addQueryParamString(String name, String value, boolean urlEncodeValue) {
     try {
       if (urlEncodeValue) {
         value = URLEncoder.encode(String.valueOf(value), "UTF-8");
@@ -187,12 +206,12 @@ void setArguments(Object[] args) {
           break;
         case QUERY:
           if (value != null) { // Skip null values.
-            addQueryParam(name, value.toString());
+            addQueryParam(name, value);
           }
           break;
         case ENCODED_QUERY:
           if (value != null) { // Skip null values.
-            addEncodedQueryParam(name, value.toString());
+            addEncodedQueryParam(name, value);
           }
           break;
         case HEADER:
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptor.java b/retrofit/src/main/java/retrofit/RequestInterceptor.java
index 5fa484b35..dead93a83 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptor.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java
@@ -22,13 +22,13 @@
     void addEncodedPathParam(String name, String value);
 
     /** Add an additional query parameter. This will not replace any existing query parameters. */
-    void addQueryParam(String name, String value);
+    void addQueryParam(String name, Object value);
 
     /**
      * Add an additional query parameter without first URI encoding. This will not replace any
      * existing query parameters.
      */
-    void addEncodedQueryParam(String name, String value);
+    void addEncodedQueryParam(String name, Object value);
   }
 
   /** A {@link RequestInterceptor} which does no modification of requests. */
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java b/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
index d53d8f4ff..21604ae72 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
@@ -23,11 +23,11 @@
     tape.add(new CommandWithParams(Command.ADD_ENCODED_PATH_PARAM, name, value));
   }
 
-  @Override public void addQueryParam(String name, String value) {
+  @Override public void addQueryParam(String name, Object value) {
     tape.add(new CommandWithParams(Command.ADD_QUERY_PARAM, name, value));
   }
 
-  @Override public void addEncodedQueryParam(String name, String value) {
+  @Override public void addEncodedQueryParam(String name, Object value) {
     tape.add(new CommandWithParams(Command.ADD_ENCODED_QUERY_PARAM, name, value));
   }
 
@@ -40,44 +40,44 @@
   private enum Command {
     ADD_HEADER {
       @Override
-      public void intercept(RequestFacade facade, String name, String value) {
-        facade.addHeader(name, value);
+      public void intercept(RequestFacade facade, String name, Object value) {
+        facade.addHeader(name, value.toString());
       }
     },
     ADD_PATH_PARAM {
       @Override
-      public void intercept(RequestFacade facade, String name, String value) {
-        facade.addPathParam(name, value);
+      public void intercept(RequestFacade facade, String name, Object value) {
+        facade.addPathParam(name, value.toString());
       }
     },
     ADD_ENCODED_PATH_PARAM {
       @Override
-      public void intercept(RequestFacade facade, String name, String value) {
-        facade.addEncodedPathParam(name, value);
+      public void intercept(RequestFacade facade, String name, Object value) {
+        facade.addEncodedPathParam(name, value.toString());
       }
     },
     ADD_QUERY_PARAM {
       @Override
-      public void intercept(RequestFacade facade, String name, String value) {
+      public void intercept(RequestFacade facade, String name, Object value) {
         facade.addQueryParam(name, value);
       }
     },
     ADD_ENCODED_QUERY_PARAM {
       @Override
-      public void intercept(RequestFacade facade, String name, String value) {
+      public void intercept(RequestFacade facade, String name, Object value) {
         facade.addEncodedQueryParam(name, value);
       }
     };
 
-    abstract void intercept(RequestFacade facade, String name, String value);
+    abstract void intercept(RequestFacade facade, String name, Object value);
   }
 
   private static final class CommandWithParams {
     final Command command;
     final String name;
-    final String value;
+    final Object value;
 
-    CommandWithParams(Command command, String name, String value) {
+    CommandWithParams(Command command, String name, Object value) {
       this.command = command;
       this.name = name;
       this.value = value;
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 877661e56..f32274fdb 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -2,15 +2,6 @@
 package retrofit;
 
 import com.google.gson.Gson;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
 import org.junit.Test;
 import retrofit.client.Header;
 import retrofit.client.Request;
@@ -21,17 +12,15 @@
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
 
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.util.*;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 import static retrofit.RestMethodInfo.ParamUsage;
-import static retrofit.RestMethodInfo.ParamUsage.BODY;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_PATH;
-import static retrofit.RestMethodInfo.ParamUsage.ENCODED_QUERY;
-import static retrofit.RestMethodInfo.ParamUsage.FIELD;
-import static retrofit.RestMethodInfo.ParamUsage.HEADER;
-import static retrofit.RestMethodInfo.ParamUsage.PART;
-import static retrofit.RestMethodInfo.ParamUsage.PATH;
-import static retrofit.RestMethodInfo.ParamUsage.QUERY;
+import static retrofit.RestMethodInfo.ParamUsage.*;
 import static retrofit.RestMethodInfo.RequestType;
 
 public class RequestBuilderTest {
@@ -196,7 +185,34 @@
     assertThat(request.getBody()).isNull();
   }
 
-  @Test public void queryParamOptional() throws Exception {
+  @Test public void getWithQueryParamArray() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParam("ping", new String[]{"pong", "pong-too"}) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong&ping=pong-too");
+    assertThat(request.getBody()).isNull();
+  }
+
+  @Test public void getWithQueryParamIterable() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParam("ping", Arrays.asList(new String[]{"pong", "pong-too"})) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong&ping=pong-too");
+    assertThat(request.getBody()).isNull();
+  }
+
+
+    @Test public void queryParamOptional() throws Exception {
     Request request1 = new Helper() //
         .setMethod("GET") //
         .setUrl("http://example.com") //
@@ -629,14 +645,14 @@ Helper addEncodedPathParam(String name, String value) {
       return this;
     }
 
-    Helper addQueryParam(String name, String value) {
+    Helper addQueryParam(String name, Object value) {
       paramNames.add(name);
       paramUsages.add(QUERY);
       args.add(value);
       return this;
     }
 
-    Helper addEncodedQueryParam(String name, String value) {
+    Helper addEncodedQueryParam(String name, Object value) {
       paramNames.add(name);
       paramUsages.add(ENCODED_QUERY);
       args.add(value);
