diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index e665b66e2..9b48ae76a 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -66,6 +66,11 @@
       <artifactId>robolectric</artifactId>
       <scope>test</scope>
     </dependency>
+    <dependency>
+      <groupId>com.alibaba</groupId>
+      <artifactId>fastjson</artifactId>
+      <version>1.2.47</version>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index 3c3307b70..dc2b82bce 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -23,7 +23,6 @@
 import java.lang.reflect.Method;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 class Platform {
   private static final Platform PLATFORM = findPlatform();
@@ -68,7 +67,6 @@ boolean isDefaultMethod(Method method) {
     throw new UnsupportedOperationException();
   }
 
-  @IgnoreJRERequirement // Only classloaded and used on Java 8.
   static class Java8 extends Platform {
     @Override boolean isDefaultMethod(Method method) {
       return method.isDefault();
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index f27db26ee..4d428174f 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -16,7 +16,10 @@
 package retrofit2;
 
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 import javax.annotation.Nullable;
+
 import okhttp3.FormBody;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
@@ -45,16 +48,18 @@
   private @Nullable MultipartBody.Builder multipartBuilder;
   private @Nullable FormBody.Builder formBuilder;
   private @Nullable RequestBody body;
-
+  private final boolean isAop;
+  private Map<String,String> formFieldCache =new HashMap<>();
   RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
-      boolean isFormEncoded, boolean isMultipart) {
+      boolean isFormEncoded, boolean isMultipart,boolean isAop) {
     this.method = method;
     this.baseUrl = baseUrl;
     this.relativeUrl = relativeUrl;
     this.requestBuilder = new Request.Builder();
     this.contentType = contentType;
     this.hasBody = hasBody;
+    this.isAop = isAop;
 
     if (headers != null) {
       requestBuilder.headers(headers);
@@ -165,11 +170,32 @@ void addQueryParam(String name, @Nullable String value, boolean encoded) {
 
   @SuppressWarnings("ConstantConditions") // Only called when isFormEncoded was true.
   void addFormField(String name, String value, boolean encoded) {
+    if(isAop){
+      formFieldCache.put(name,value);
+      return;
+    }
     if (encoded) {
       formBuilder.addEncoded(name, value);
     } else {
       formBuilder.add(name, value);
     }
+
+  }
+
+  public Map<String, String> getFormFieldCache() {
+    return formFieldCache;
+  }
+
+  public void setFormFieldCache(Map<String, String> formFieldCache) {
+    this.formFieldCache = formFieldCache;
+  }
+
+  void handleFormFieldCache(){
+    if(isAop && formFieldCache!=null && formBuilder!=null){
+      for (Map.Entry<String, String> entry:formFieldCache.entrySet()){
+        formBuilder.add(entry.getKey(),entry.getValue());
+      }
+    }
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isMultipart was true.
@@ -187,6 +213,7 @@ void setBody(RequestBody body) {
   }
 
   Request build() {
+
     HttpUrl url;
     HttpUrl.Builder urlBuilder = this.urlBuilder;
     if (urlBuilder != null) {
@@ -205,6 +232,7 @@ Request build() {
     if (body == null) {
       // Try to pull from one of the builders.
       if (formBuilder != null) {
+        handleFormFieldCache();
         body = formBuilder.build();
       } else if (multipartBuilder != null) {
         body = multipartBuilder.build();
diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index fe1a1cc39..65845e2b7 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -25,12 +25,15 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+
+import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.JSONObject;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.MultipartBody;
 import okhttp3.RequestBody;
-import retrofit2.gen.*;
+import retrofit2.gener.*;
 import retrofit2.http.Body;
 import retrofit2.http.DELETE;
 import retrofit2.http.Field;
@@ -71,7 +74,7 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
   private Map<String, String> fixedFields = new HashMap<>();
   private Map<String, Class<? extends Generator>> generatedFields = new HashMap<>();
   private Class<? extends MapGenerator> fieldMapGenerator;
-
+  Class<? extends Wrapper> converter;
   RequestFactory(Builder builder) {
     baseUrl = builder.retrofit.baseUrl;
     httpMethod = builder.httpMethod;
@@ -85,11 +88,12 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
     fixedFields = builder.fixedFields;
     generatedFields = builder.generatedFields;
     fieldMapGenerator = builder.fieldMapGenerator;
+    converter = builder.converter;
   }
 
   okhttp3.Request create(@Nullable Object[] args) throws IOException {
     RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-        contentType, hasBody, isFormEncoded, isMultipart);
+        contentType, hasBody, isFormEncoded, isMultipart,converter!=null);
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -99,11 +103,18 @@ static RequestFactory parseAnnotations(Retrofit retrofit, Method method) {
       throw new IllegalArgumentException("Argument count (" + argumentCount
           + ") doesn't match expected count (" + handlers.length + ")");
     }
-
     for (int p = 0; p < argumentCount; p++) {
       handlers[p].apply(requestBuilder, args[p]);
     }
     addGenerateFields(requestBuilder);
+    if(converter!=null){
+      try {
+        Map<String,String> map = converter.newInstance().map(requestBuilder.getFormFieldCache());
+        requestBuilder.setFormFieldCache(map);
+      } catch (Exception e) {
+        e.printStackTrace();
+      }
+    }
     return requestBuilder.build();
   }
 
@@ -116,9 +127,7 @@ private void addGenerateFields(RequestBuilder requestBuilder){
         Generator generator = entry.getValue().newInstance();
         String generatedArg = generator.generate(extendFieldMap);
         extendFieldMap.put(entry.getKey(),generatedArg);
-      } catch (InstantiationException e) {
-        e.printStackTrace();
-      } catch (IllegalAccessException e) {
+      } catch (Exception e) {
         e.printStackTrace();
       }
     }
@@ -173,6 +182,7 @@ private void addGenerateFields(RequestBuilder requestBuilder){
     Map<String, String> fixedFields = new HashMap<>();
     Map<String, Class<? extends Generator>> generatedFields = new HashMap<>();
     Class<? extends MapGenerator> fieldMapGenerator;
+    Class<? extends Wrapper>converter;
     Builder(Retrofit retrofit, Method method) {
       this.retrofit = retrofit;
       this.method = method;
@@ -184,7 +194,7 @@ private void addGenerateFields(RequestBuilder requestBuilder){
     RequestFactory build() {
       Annotation[] classAnnotations = method.getDeclaringClass().getDeclaredAnnotations();
       for (Annotation classAnnotation : classAnnotations) {
-        parseClassAnnotation(classAnnotation);
+        parseFieldAnnotation(classAnnotation);
       }
 
       for (Annotation annotation : methodAnnotations) {
@@ -240,7 +250,7 @@ RequestFactory build() {
       return new RequestFactory(this);
     }
 
-    private void parseClassAnnotation(Annotation annotation) {
+    private void parseFieldAnnotation(Annotation annotation) {
       if(annotation instanceof FixedField){
         gotField = true;
         FixedField fixedField = ((FixedField) annotation);
@@ -264,6 +274,9 @@ private void parseClassAnnotation(Annotation annotation) {
         this.fieldMapGenerator = ((GeneratedFieldMap) annotation).value();
       }else if(annotation instanceof FormUrlEncoded){
         isFormEncoded = true;
+      }else if(annotation instanceof Aop){
+        Aop aop = (Aop) annotation;
+        this.converter = aop.value();
       }
     }
 
@@ -302,7 +315,7 @@ private void parseMethodAnnotation(Annotation annotation) {
         }
         isFormEncoded = true;
       }else {
-        parseClassAnnotation(annotation);
+        parseFieldAnnotation(annotation);
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit2/gener/Aop.java b/retrofit/src/main/java/retrofit2/gener/Aop.java
index 2cd7ba60a..848a5d7b4 100644
--- a/retrofit/src/main/java/retrofit2/gener/Aop.java
+++ b/retrofit/src/main/java/retrofit2/gener/Aop.java
@@ -1,14 +1,14 @@
 package retrofit2.gener;
 
+
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
-
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})
 public @interface Aop {
-    String[] keys();
-    String[] values();
-}
\ No newline at end of file
+    Class<? extends Wrapper> value();
+}
diff --git a/retrofit/src/main/java/retrofit2/gener/Wrapper.java b/retrofit/src/main/java/retrofit2/gener/Wrapper.java
index c88d55ca5..386654f73 100644
--- a/retrofit/src/main/java/retrofit2/gener/Wrapper.java
+++ b/retrofit/src/main/java/retrofit2/gener/Wrapper.java
@@ -1,14 +1,10 @@
 package retrofit2.gener;
 
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
+import java.util.Map;
 
-
-@Retention(RetentionPolicy.RUNTIME)
-@Target({ElementType.METHOD, ElementType.TYPE})
-public @interface Wrapper {
-    String[] keys();
-    String[] values();
-}
\ No newline at end of file
+/**
+ * Created by Administrator on 2018/6/28.
+ */
+public interface Wrapper {
+    Map<String,String> map(Map<String,String> map);
+}
