diff --git a/retrofit/src/main/java/retrofit/client/AbstractResponse.java b/retrofit/src/main/java/retrofit/client/AbstractResponse.java
index 931b4d960..8f9553137 100644
--- a/retrofit/src/main/java/retrofit/client/AbstractResponse.java
+++ b/retrofit/src/main/java/retrofit/client/AbstractResponse.java
@@ -8,55 +8,55 @@
  * An HTTP Response
  */
 abstract class AbstractResponse<T> {
-    protected final String url;
-    protected final int status;
-    protected final String reason;
-    protected final List<Header> headers;
-    protected final T body;
-
-    public AbstractResponse(String url, int status, String reason, List<Header> headers, T body) {
-        if (url == null) {
-            throw new IllegalArgumentException("url == null");
-        }
-        if (status < 200) {
-            throw new IllegalArgumentException("Invalid status code: " + status);
-        }
-        if (reason == null) {
-            throw new IllegalArgumentException("reason == null");
-        }
-        if (headers == null) {
-            throw new IllegalArgumentException("headers == null");
-        }
-
-        this.url = url;
-        this.status = status;
-        this.reason = reason;
-        this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
-        this.body = body;
+  protected final String url;
+  protected final int status;
+  protected final String reason;
+  protected final List<Header> headers;
+  protected final T body;
+
+  public AbstractResponse(String url, int status, String reason, List<Header> headers, T body) {
+    if (url == null) {
+      throw new IllegalArgumentException("url == null");
     }
-
-    /** Request URL. */
-    public String getUrl() {
-        return url;
-    }
-
-    /** Status line code. */
-    public int getStatus() {
-        return status;
+    if (status < 200) {
+      throw new IllegalArgumentException("Invalid status code: " + status);
     }
-
-    /** Status line reason phrase. */
-    public String getReason() {
-        return reason;
+    if (reason == null) {
+      throw new IllegalArgumentException("reason == null");
     }
-
-    /** An unmodifiable collection of headers. */
-    public List<Header> getHeaders() {
-        return headers;
+    if (headers == null) {
+      throw new IllegalArgumentException("headers == null");
     }
 
-    /** Response body.  May be {@code null}. */
-    public T getBody() {
-        return body;
-    }
+    this.url = url;
+    this.status = status;
+    this.reason = reason;
+    this.headers = Collections.unmodifiableList(new ArrayList<Header>(headers));
+    this.body = body;
+  }
+
+  /** Request URL. */
+  public String getUrl() {
+    return url;
+  }
+
+  /** Status line code. */
+  public int getStatus() {
+    return status;
+  }
+
+  /** Status line reason phrase. */
+  public String getReason() {
+    return reason;
+  }
+
+  /** An unmodifiable collection of headers. */
+  public List<Header> getHeaders() {
+    return headers;
+  }
+
+  /** Response body.  May be {@code null}. */
+  public T getBody() {
+    return body;
+  }
 }
diff --git a/retrofit/src/main/java/retrofit/client/RestResponse.java b/retrofit/src/main/java/retrofit/client/RestResponse.java
index c25671f6a..604151740 100644
--- a/retrofit/src/main/java/retrofit/client/RestResponse.java
+++ b/retrofit/src/main/java/retrofit/client/RestResponse.java
@@ -4,11 +4,9 @@
 
 /**
  * A deserialized HTTP response.  Don't use with {@link retrofit.http.Streaming @Streaming}
- *
- * @author mattrasband on 8/14/14.
  */
 public class RestResponse<T> extends AbstractResponse<T> {
-    public RestResponse(String url, int status, String reason, List<Header> headers, T body) {
-        super(url, status, reason, headers, body);
-    }
+  public RestResponse(String url, int status, String reason, List<Header> headers, T body) {
+    super(url, status, reason, headers, body);
+  }
 }
