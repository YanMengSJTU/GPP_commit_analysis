diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 617570d6c..e5b6d2ac0 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -25,7 +25,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
-
 import okhttp3.HttpUrl;
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
@@ -69,8 +68,8 @@
   private final boolean validateEagerly;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl, HttpUrl baseHttpsUrl,
-           List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
-           Executor callbackExecutor, boolean validateEagerly) {
+     List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
+     Executor callbackExecutor, boolean validateEagerly) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
     this.baseHttpsUrl = baseHttpsUrl;
@@ -182,9 +181,7 @@ ServiceMethod loadServiceMethod(Method method) {
     return callFactory;
   }
 
-  /**
-   * The API base URL.
-   */
+  /** The API base URL. */
   public HttpUrl baseUrl() {
     return baseUrl;
   }
@@ -221,7 +218,7 @@ public HttpUrl baseHttpsUrl() {
    * @throws IllegalArgumentException if no call adapter available for {@code type}.
    */
   public CallAdapter<?> nextCallAdapter(CallAdapter.Factory skipPast, Type returnType,
-                                        Annotation[] annotations) {
+      Annotation[] annotations) {
     checkNotNull(returnType, "returnType == null");
     checkNotNull(annotations, "annotations == null");
 
@@ -267,7 +264,7 @@ public HttpUrl baseHttpsUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> requestBodyConverter(Type type,
-                                                            Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
+      Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
     return nextRequestBodyConverter(null, type, parameterAnnotations, methodAnnotations);
   }
 
@@ -278,7 +275,7 @@ public HttpUrl baseHttpsUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<T, RequestBody> nextRequestBodyConverter(Converter.Factory skipPast,
-                                                                Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
+      Type type, Annotation[] parameterAnnotations, Annotation[] methodAnnotations) {
     checkNotNull(type, "type == null");
     checkNotNull(parameterAnnotations, "parameterAnnotations == null");
     checkNotNull(methodAnnotations, "methodAnnotations == null");
@@ -328,7 +325,7 @@ public HttpUrl baseHttpsUrl() {
    * @throws IllegalArgumentException if no converter available for {@code type}.
    */
   public <T> Converter<ResponseBody, T> nextResponseBodyConverter(Converter.Factory skipPast,
-                                                                  Type type, Annotation[] annotations) {
+      Type type, Annotation[] annotations) {
     checkNotNull(type, "type == null");
     checkNotNull(annotations, "annotations == null");
 
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index db440c439..9a8466029 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -26,7 +26,6 @@
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
@@ -34,11 +33,30 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
-import retrofit2.http.*;
-
-/**
- * Adapts an invocation of an interface method into an HTTP call.
- */
+import retrofit2.http.Body;
+import retrofit2.http.DELETE;
+import retrofit2.http.Field;
+import retrofit2.http.FieldMap;
+import retrofit2.http.FormUrlEncoded;
+import retrofit2.http.GET;
+import retrofit2.http.HEAD;
+import retrofit2.http.HTTP;
+import retrofit2.http.Header;
+import retrofit2.http.HeaderMap;
+import retrofit2.http.Multipart;
+import retrofit2.http.OPTIONS;
+import retrofit2.http.PATCH;
+import retrofit2.http.POST;
+import retrofit2.http.PUT;
+import retrofit2.http.Part;
+import retrofit2.http.PartMap;
+import retrofit2.http.Path;
+import retrofit2.http.Query;
+import retrofit2.http.QueryMap;
+import retrofit2.http.Url;
+import retrofit2.http.TYPE;
+
+/** Adapts an invocation of an interface method into an HTTP call. */
 final class ServiceMethod<T> {
   // Upper and lower characters, digits, underscores, and hyphens, starting with a character.
   static final String PARAM = "[a-zA-Z][a-zA-Z0-9_-]*";
@@ -78,9 +96,7 @@
     this.parameterHandlers = builder.parameterHandlers;
   }
 
-  /**
-   * Builds an HTTP ot Https request from method arguments.
-   */
+  /** Builds an HTTP request from method arguments. */
   Request toRequest(Object... args) throws IOException {
     RequestBuilder requestBuilder;
     if (!isHttps) {
@@ -92,7 +108,7 @@ Request toRequest(Object... args) throws IOException {
     }
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
-        ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
+    ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
 
     int argumentCount = args != null ? args.length : 0;
     if (argumentCount != handlers.length) {
