diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index d81832ce6..60c221997 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -73,7 +73,6 @@
   List<retrofit.client.Header> headers;
 
   // Parameter-level details
-  String requestEndpointName;
   String[] requestUrlParam;
   String[] requestQueryName;
   boolean hasQueryParams = false;
@@ -175,23 +174,12 @@ private void parseMethodAnnotations() {
 
   /** Loads {@link #requestUrl}, {@link #requestUrlParamNames}, and {@link #requestQuery}. */
   private void parsePath(String path) {
-    Annotation[][] paramAnnotations = method.getParameterAnnotations();
-    if (paramAnnotations.length > 0
-        && paramAnnotations[0].length > 0
-        && paramAnnotations[0][0].annotationType() == Endpoint.class) {
-      if (path != null && path.length() > 0) {
-        throw new IllegalArgumentException("Method "
-            + method.getName()
-            + " must have path OR endpoint, not both. ("
-            + method.getName()
-            + ")");
-      } else {
-        expectsEndpoint = true;
-        return;
-      }
+    if (path == null || path.length() == 0) {
+      expectsEndpoint = true;
+      return;
     }
 
-    if (path.length() == 0 || path.charAt(0) != '/') {
+    if (path.charAt(0) != '/') {
       throw new IllegalArgumentException("URL path \""
           + path
           + "\" on method "
@@ -343,8 +331,14 @@ private void parseParameters() {
 
             urlParam[i] = name;
           } else if (annotationType == Endpoint.class) {
+            if (!expectsEndpoint) {
+              throw new IllegalStateException(
+                  "@Endpoint parameter cannot be used when path provided.");
+            }
+            if (i != 0) {
+              throw new IllegalStateException("@Endpoint parameter must be first.");
+            }
             hasRetrofitAnnotation = true;
-            expectsEndpoint = true;
           } else if (annotationType == Query.class) {
             hasRetrofitAnnotation = true;
             hasQueryParams = true;
diff --git a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
index 90667ee56..92ac6ad93 100644
--- a/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
+++ b/retrofit/src/test/java/retrofit/RestMethodInfoTest.java
@@ -408,7 +408,7 @@ Response a() {
 
   @Test public void explicitEndpoint() {
     class Example {
-      @GET() Response a(@Endpoint String endpoint) {
+      @GET Response a(@Endpoint String endpoint) {
         return null;
       }
     }
@@ -424,7 +424,7 @@ Response a() {
 
   @Test public void explicitEndpointWithQuery() {
     class Example {
-      @GET() Response a(@Endpoint String endpoint, @Query("a") String a) {
+      @GET Response a(@Endpoint String endpoint, @Query("a") String a) {
         return null;
       }
     }
@@ -761,10 +761,10 @@ Response a() {
     methodInfo.init();
   }
 
-  @Test(expected = IllegalArgumentException.class)
+  @Test(expected = IllegalStateException.class)
   public void endpointComesFirst() {
     class Example {
-      @GET() Response a(@Query("a") String a, @Endpoint String endpoint) {
+      @GET Response a(@Query("a") String a, @Endpoint String endpoint) {
         return null;
       }
     }
