diff --git a/retrofit/src/main/java/retrofit/Call.java b/retrofit/src/main/java/retrofit/Call.java
index feca6922d..66e1fcd0d 100644
--- a/retrofit/src/main/java/retrofit/Call.java
+++ b/retrofit/src/main/java/retrofit/Call.java
@@ -15,6 +15,8 @@
  */
 package retrofit;
 
+import com.squareup.okhttp.CacheControl;
+
 import java.io.IOException;
 
 /**
@@ -38,16 +40,24 @@
 
   Response<T> execute(RequestFactory.CachePloy cachePloy) throws IOException;
 
+  Response<T> execute(CacheControl controlPloy) throws IOException;
+
   Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException;
 
+  Response<T> execute(String dynamicBaseUrl, CacheControl controlPloy) throws IOException;
+
   void enqueue(Callback<T> callback);
 
   void enqueue(Callback<T> callback, String dynamicBaseUrl);
 
   void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy);
 
+  void enqueue(Callback<T> callback, CacheControl controlPloy);
+
   void enqueue(Callback<T> callback, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy);
 
+  void enqueue(Callback<T> callback, String dynamicBaseUrl, CacheControl controlPloy);
+
   void cancel();
 
   Call<T> clone();
diff --git a/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
index 23ffbc13b..da4ee5c0f 100644
--- a/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit/ExecutorCallAdapterFactory.java
@@ -15,6 +15,8 @@
  */
 package retrofit;
 
+import com.squareup.okhttp.CacheControl;
+
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
@@ -68,11 +70,21 @@ public void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy) {
       delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), cachePloy);
     }
 
+    @Override
+    public void enqueue(Callback<T> callback, CacheControl cacheControl) {
+      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), cacheControl);
+    }
+
     @Override
     public void enqueue(Callback<T> callback, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
       delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), dynamicBaseUrl, cachePloy);
     }
 
+    @Override
+    public void enqueue(Callback<T> callback, String dynamicBaseUrl, CacheControl cacheControl) {
+      delegate.enqueue(new ExecutorCallback<>(callbackExecutor, callback), dynamicBaseUrl, cacheControl);
+    }
+
     @Override
     public Response<T> execute() throws IOException {
       return delegate.execute();
@@ -88,11 +100,21 @@ public void enqueue(Callback<T> callback, String dynamicBaseUrl, RequestFactory.
       return delegate.execute(cachePloy);
     }
 
+    @Override
+    public Response<T> execute(CacheControl cacheControl) throws IOException {
+      return delegate.execute(cacheControl);
+    }
+
     @Override
     public Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException {
       return delegate.execute(dynamicBaseUrl, cachePloy);
     }
 
+    @Override
+    public Response<T> execute(String dynamicBaseUrl, CacheControl cacheControl) throws IOException {
+      return delegate.execute(dynamicBaseUrl, cacheControl);
+    }
+
     @Override public void cancel() {
       delegate.cancel();
     }
diff --git a/retrofit/src/main/java/retrofit/OkHttpCall.java b/retrofit/src/main/java/retrofit/OkHttpCall.java
index bb82727c2..a6f36215b 100644
--- a/retrofit/src/main/java/retrofit/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit/OkHttpCall.java
@@ -15,10 +15,14 @@
  */
 package retrofit;
 
+import com.squareup.okhttp.CacheControl;
 import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.Request;
 import com.squareup.okhttp.ResponseBody;
+
 import java.io.IOException;
+import java.util.concurrent.TimeUnit;
+
 import okio.Buffer;
 import okio.BufferedSource;
 import okio.ForwardingSource;
@@ -37,82 +41,47 @@
   private volatile boolean canceled;
 
   OkHttpCall(Retrofit retrofit, RequestFactory requestFactory,
-      Converter<ResponseBody, T> responseConverter, Object[] args) {
+             Converter<ResponseBody, T> responseConverter, Object[] args) {
     this.retrofit = retrofit;
     this.requestFactory = requestFactory;
     this.responseConverter = responseConverter;
     this.args = args;
   }
 
-  @SuppressWarnings("CloneDoesntCallSuperClone") // We are a final type & this saves clearing state.
-  @Override public OkHttpCall<T> clone() {
+  @SuppressWarnings("CloneDoesntCallSuperClone")
+  // We are a final type & this saves clearing state.
+  @Override
+  public OkHttpCall<T> clone() {
     return new OkHttpCall<>(retrofit, requestFactory, responseConverter, args);
   }
 
-  @Override public void enqueue(final Callback<T> callback) {
-    synchronized (this) {
-      if (executed) throw new IllegalStateException("Already executed");
-      executed = true;
-    }
-
-    com.squareup.okhttp.Call rawCall;
-    try {
-      rawCall = createRawCall();
-    } catch (Throwable t) {
-      callback.onFailure(t);
-      return;
-    }
-    if (canceled) {
-      rawCall.cancel();
-    }
-    this.rawCall = rawCall;
-
-    rawCall.enqueue(new com.squareup.okhttp.Callback() {
-      private void callFailure(Throwable e) {
-        try {
-          callback.onFailure(e);
-        } catch (Throwable t) {
-          t.printStackTrace();
-        }
-      }
-
-      private void callSuccess(Response<T> response) {
-        try {
-          callback.onResponse(response, retrofit);
-        } catch (Throwable t) {
-          t.printStackTrace();
-        }
-      }
-
-      @Override public void onFailure(Request request, IOException e) {
-        callFailure(e);
-      }
-
-      @Override public void onResponse(com.squareup.okhttp.Response rawResponse) {
-        Response<T> response;
-        try {
-          response = parseResponse(rawResponse);
-        } catch (Throwable e) {
-          callFailure(e);
-          return;
-        }
-        callSuccess(response);
-      }
-    });
+  @Override
+  public void enqueue(final Callback<T> callback) {
+    enqueue(callback, null, RequestFactory.CachePloy.FORCE_NETWORK);
   }
 
   @Override
   public void enqueue(Callback<T> callback, String dynamicBaseUrl) {
-    enqueue(callback,dynamicBaseUrl, RequestFactory.CachePloy.FORCE_NETWORK);
+    enqueue(callback, dynamicBaseUrl, RequestFactory.CachePloy.FORCE_NETWORK);
   }
 
   @Override
   public void enqueue(Callback<T> callback, RequestFactory.CachePloy cachePloy) {
-    enqueue(callback,null, cachePloy);
+    enqueue(callback, null, cachePloy);
+  }
+
+  @Override
+  public void enqueue(Callback<T> callback, CacheControl controlPloy) {
+    enqueue(callback, null, controlPloy);
   }
 
   @Override
   public void enqueue(final Callback<T> callBack, String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
+    enqueue(callBack, dynamicBaseUrl, convertCache(cachePloy));
+  }
+
+  @Override
+  public void enqueue(final Callback<T> cBack, String dynamicBaseUrl, CacheControl cacheControl) {
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already executed");
       executed = true;
@@ -120,9 +89,9 @@ public void enqueue(final Callback<T> callBack, String dynamicBaseUrl, RequestFa
 
     com.squareup.okhttp.Call rawCall;
     try {
-      rawCall = createRawCall(dynamicBaseUrl,cachePloy);
+      rawCall = createRawCall(dynamicBaseUrl, cacheControl);
     } catch (Throwable t) {
-      callBack.onFailure(t);
+      cBack.onFailure(t);
       return;
     }
     if (canceled) {
@@ -133,7 +102,7 @@ public void enqueue(final Callback<T> callBack, String dynamicBaseUrl, RequestFa
     rawCall.enqueue(new com.squareup.okhttp.Callback() {
       private void callFailure(Throwable e) {
         try {
-          callBack.onFailure(e);
+          cBack.onFailure(e);
         } catch (Throwable t) {
           t.printStackTrace();
         }
@@ -141,7 +110,7 @@ private void callFailure(Throwable e) {
 
       private void callSuccess(Response<T> response) {
         try {
-          callBack.onResponse(response, retrofit);
+          cBack.onResponse(response, retrofit);
         } catch (Throwable t) {
           t.printStackTrace();
         }
@@ -167,18 +136,7 @@ public void onResponse(com.squareup.okhttp.Response rawResponse) {
   }
 
   public Response<T> execute() throws IOException {
-    synchronized (this) {
-      if (executed) throw new IllegalStateException("Already executed");
-      executed = true;
-    }
-
-    com.squareup.okhttp.Call rawCall = createRawCall();
-    if (canceled) {
-      rawCall.cancel();
-    }
-    this.rawCall = rawCall;
-
-    return parseResponse(rawCall.execute());
+    return execute(null, RequestFactory.CachePloy.FORCE_NETWORK);
   }
 
   @Override
@@ -191,15 +149,25 @@ public void onResponse(com.squareup.okhttp.Response rawResponse) {
     return execute(null, cachePloy);
   }
 
+  @Override
+  public Response<T> execute(CacheControl cacheControl) throws IOException {
+    return execute(null, cacheControl);
+  }
+
 
   @Override
   public Response<T> execute(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) throws IOException {
+    return execute(dynamicBaseUrl, convertCache(cachePloy));
+  }
+
+  @Override
+  public Response<T> execute(String dynamicBaseUrl, CacheControl cacheControl) throws IOException {
     synchronized (this) {
       if (executed) throw new IllegalStateException("Already executed");
       executed = true;
     }
 
-    com.squareup.okhttp.Call rawCall = createRawCall(dynamicBaseUrl,cachePloy);
+    com.squareup.okhttp.Call rawCall = createRawCall(dynamicBaseUrl, cacheControl);
     if (canceled) {
       rawCall.cancel();
     }
@@ -208,12 +176,8 @@ public void onResponse(com.squareup.okhttp.Response rawResponse) {
     return parseResponse(rawCall.execute());
   }
 
-  private com.squareup.okhttp.Call createRawCall() {
-    return retrofit.client().newCall(requestFactory.create(args));
-  }
-
-  private com.squareup.okhttp.Call createRawCall(String dynamicBaseUrl, RequestFactory.CachePloy cachePloy) {
-    return retrofit.client().newCall(requestFactory.create(dynamicBaseUrl, cachePloy, args));
+  private com.squareup.okhttp.Call createRawCall(String dynamicBaseUrl, CacheControl controlPloy) {
+    return retrofit.client().newCall(requestFactory.create(dynamicBaseUrl, controlPloy, args));
   }
 
   private Response<T> parseResponse(com.squareup.okhttp.Response rawResponse) throws IOException {
@@ -221,8 +185,8 @@ public void onResponse(com.squareup.okhttp.Response rawResponse) {
 
     // Remove the body's source (the only stateful object) so we can pass the response along.
     rawResponse = rawResponse.newBuilder()
-        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))
-        .build();
+            .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))
+            .build();
 
     int code = rawResponse.code();
     if (code < 200 || code >= 300) {
@@ -268,15 +232,18 @@ public void cancel() {
       this.contentLength = contentLength;
     }
 
-    @Override public MediaType contentType() {
+    @Override
+    public MediaType contentType() {
       return contentType;
     }
 
-    @Override public long contentLength() throws IOException {
+    @Override
+    public long contentLength() throws IOException {
       return contentLength;
     }
 
-    @Override public BufferedSource source() throws IOException {
+    @Override
+    public BufferedSource source() throws IOException {
       throw new IllegalStateException("Cannot read raw response body of a converted body.");
     }
   }
@@ -289,11 +256,13 @@ public void cancel() {
       this.delegate = delegate;
     }
 
-    @Override public MediaType contentType() {
+    @Override
+    public MediaType contentType() {
       return delegate.contentType();
     }
 
-    @Override public long contentLength() throws IOException {
+    @Override
+    public long contentLength() throws IOException {
       try {
         return delegate.contentLength();
       } catch (IOException e) {
@@ -302,7 +271,8 @@ public void cancel() {
       }
     }
 
-    @Override public BufferedSource source() throws IOException {
+    @Override
+    public BufferedSource source() throws IOException {
       BufferedSource delegateSource;
       try {
         delegateSource = delegate.source();
@@ -311,7 +281,8 @@ public void cancel() {
         throw e;
       }
       return Okio.buffer(new ForwardingSource(delegateSource) {
-        @Override public long read(Buffer sink, long byteCount) throws IOException {
+        @Override
+        public long read(Buffer sink, long byteCount) throws IOException {
           try {
             return super.read(sink, byteCount);
           } catch (IOException e) {
@@ -322,7 +293,8 @@ public void cancel() {
       });
     }
 
-    @Override public void close() throws IOException {
+    @Override
+    public void close() throws IOException {
       delegate.close();
     }
 
@@ -333,4 +305,27 @@ void throwIfCaught() throws IOException {
     }
   }
 
+  private CacheControl convertCache(RequestFactory.CachePloy cachePloy) {
+    CacheControl cacheControl = CacheControl.FORCE_NETWORK;
+    switch (cachePloy) {
+      case FORCE_CACHE:
+        cacheControl = CacheControl.FORCE_CACHE;
+        break;
+      case FORCE_NETWORK:
+        cacheControl = CacheControl.FORCE_NETWORK;
+        break;
+      case MAX_AGE_0:
+        cacheControl = new CacheControl.Builder()
+                .maxAge(0, TimeUnit.SECONDS)
+                .build();
+        break;
+      case MAX_STALE:
+        cacheControl = new CacheControl.Builder()
+                .maxStale(60, TimeUnit.MINUTES)
+                .build();
+        break;
+    }
+    return cacheControl;
+  }
+
 }
diff --git a/retrofit/src/main/java/retrofit/RequestFactory.java b/retrofit/src/main/java/retrofit/RequestFactory.java
index bbbac7c72..f7d0ebe7a 100644
--- a/retrofit/src/main/java/retrofit/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit/RequestFactory.java
@@ -23,127 +23,49 @@
 import com.squareup.okhttp.MediaType;
 import com.squareup.okhttp.Request;
 
-import java.util.concurrent.TimeUnit;
-
 public final class RequestFactory {
-  private final String method;
-  private final BaseUrl baseUrl;
-  private final String relativeUrl;
-  private final Headers headers;
-  private final MediaType contentType;
-  private final boolean hasBody;
-  private final boolean isFormEncoded;
-  private final boolean isMultipart;
-  private final RequestBuilderAction[] requestBuilderActions;
+    private final String method;
+    private final BaseUrl baseUrl;
+    private final String relativeUrl;
+    private final Headers headers;
+    private final MediaType contentType;
+    private final boolean hasBody;
+    private final boolean isFormEncoded;
+    private final boolean isMultipart;
+    private final RequestBuilderAction[] requestBuilderActions;
 
     public enum CachePloy {
         MAX_AGE_0, MAX_STALE, FORCE_NETWORK, FORCE_CACHE
     }
 
-  RequestFactory(String method, BaseUrl baseUrl, String relativeUrl, Headers headers,
-      MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,
-      RequestBuilderAction[] requestBuilderActions) {
-    this.method = method;
-    this.baseUrl = baseUrl;
-    this.relativeUrl = relativeUrl;
-    this.headers = headers;
-    this.contentType = contentType;
-    this.hasBody = hasBody;
-    this.isFormEncoded = isFormEncoded;
-    this.isMultipart = isMultipart;
-    this.requestBuilderActions = requestBuilderActions;
-  }
-
-  Request create(Object... args) {
-    RequestBuilder requestBuilder =
-        new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,
-            isFormEncoded, isMultipart);
-
-    if (args != null) {
-      RequestBuilderAction[] actions = requestBuilderActions;
-      if (actions.length != args.length) {
-        throw new IllegalArgumentException("Argument count ("
-            + args.length
-            + ") doesn't match action count ("
-            + actions.length
-            + ")");
-      }
-      for (int i = 0, count = args.length; i < count; i++) {
-        actions[i].perform(requestBuilder, args[i]);
-      }
-    }
-
-    return requestBuilder.build();
-  }
-
-    /**
-     * 增加动态传入接口缓存策略
-     * @add by FanLei
-     */
-    Request create(CachePloy cachePloy, Object... args) {
-        Request.Builder reqBuilder = null;
-
-        if (cachePloy == CachePloy.FORCE_NETWORK) {// 强制网络
-            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_NETWORK);
-        } else if (cachePloy == CachePloy.FORCE_CACHE) {// 强制缓存（onIfCached+maxStale=MAX.VALUE）
-            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_CACHE);
-        } else if (cachePloy == CachePloy.MAX_AGE_0) {// 优先网络
-            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
-                    .maxAge(0, TimeUnit.SECONDS)
-                    .build());
-        } else if (cachePloy == CachePloy.MAX_STALE) {// 优先缓存(未过期缓存，默认30天)
-            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
-                    .maxStale(30, TimeUnit.DAYS)
-                    .build());
-        }
-
-        RequestBuilder requestBuilder =
-                new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,
-                        isFormEncoded, isMultipart, reqBuilder);
-
-        if (args != null) {
-            RequestBuilderAction[] actions = requestBuilderActions;
-            if (actions.length != args.length) {
-                throw new IllegalArgumentException("Argument count ("
-                        + args.length
-                        + ") doesn't match action count ("
-                        + actions.length
-                        + ")");
-            }
-            for (int i = 0, count = args.length; i < count; i++) {
-                actions[i].perform(requestBuilder, args[i]);
-            }
-        }
-
-        return requestBuilder.build();
+    RequestFactory(String method, BaseUrl baseUrl, String relativeUrl, Headers headers,
+                   MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart,
+                   RequestBuilderAction[] requestBuilderActions) {
+        this.method = method;
+        this.baseUrl = baseUrl;
+        this.relativeUrl = relativeUrl;
+        this.headers = headers;
+        this.contentType = contentType;
+        this.hasBody = hasBody;
+        this.isFormEncoded = isFormEncoded;
+        this.isMultipart = isMultipart;
+        this.requestBuilderActions = requestBuilderActions;
     }
 
     /**
      * 增加动态传入baseURL和接口缓存策略
+     *
      * @add by FanLei
      */
-    Request create(String dymicBaseUrl, CachePloy cachePloy, Object... args) {
-        Request.Builder reqBuilder = null;
-
-        if (cachePloy == CachePloy.FORCE_NETWORK) {// 强制网络
-            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_NETWORK);
-        } else if (cachePloy == CachePloy.FORCE_CACHE) {// 强制缓存（onIfCached+maxStale=MAX.VALUE）
-            reqBuilder = new Request.Builder().cacheControl(CacheControl.FORCE_CACHE);
-        } else if (cachePloy == CachePloy.MAX_AGE_0) {// 优先网络
-            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
-                    .maxAge(0, TimeUnit.SECONDS)
-                    .build());
-        } else if (cachePloy == CachePloy.MAX_STALE) {// 优先缓存(未过期缓存，默认30天)
-            reqBuilder = new Request.Builder().cacheControl(new CacheControl.Builder()
-                    .maxStale(30, TimeUnit.DAYS)
-                    .build());
-        }
-
+    Request create(String dynamicBaseUrl, CacheControl controlPloy, Object... args) {
         HttpUrl baseHttpUrl = baseUrl.url();
-        if (!TextUtils.isEmpty(dymicBaseUrl)) {
-            baseHttpUrl = HttpUrl.parse(dymicBaseUrl);
+        if (!TextUtils.isEmpty(dynamicBaseUrl)) {
+            baseHttpUrl = HttpUrl.parse(dynamicBaseUrl);
         }
 
+        Request.Builder reqBuilder = reqBuilder = new Request.Builder().cacheControl(controlPloy);
+        ;
+
         RequestBuilder requestBuilder =
                 new RequestBuilder(method, baseHttpUrl, relativeUrl, headers, contentType, hasBody,
                         isFormEncoded, isMultipart, reqBuilder);
