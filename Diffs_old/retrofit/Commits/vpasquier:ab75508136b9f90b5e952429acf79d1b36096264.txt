diff --git a/retrofit/src/main/java/retrofit2/Call.java b/retrofit/src/main/java/retrofit2/Call.java
index 873bb0c6f..f06177fff 100644
--- a/retrofit/src/main/java/retrofit2/Call.java
+++ b/retrofit/src/main/java/retrofit2/Call.java
@@ -61,6 +61,11 @@
   /** True if {@link #cancel()} was called. */
   boolean isCanceled();
 
+  /**
+   * Add header dynamically to the embedded request.
+   */
+  Call<T> header(String key, String value);
+
   /**
    * Create a new, identical call to this one which can be enqueued or executed even if this call
    * has already been.
diff --git a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
index ccdf9843f..b85fd0bf3 100644
--- a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
@@ -94,6 +94,11 @@
       return delegate.isCanceled();
     }
 
+    @Override
+    public Call<T> header(String key, String value) {
+      throw new UnsupportedOperationException();
+    }
+
     @SuppressWarnings("CloneDoesntCallSuperClone") // Performing deep clone.
     @Override public Call<T> clone() {
       return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 3c89963cd..336cc099a 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -173,6 +173,12 @@ public void cancel() {
     return canceled;
   }
 
+  @Override
+  public Call<T> header(String key, String value) {
+    requestFactory.header(key, value);
+    return this;
+  }
+
   static final class NoContentResponseBody extends ResponseBody {
     private final MediaType contentType;
     private final long contentLength;
diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index 7df67b639..2ff90f4d2 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -24,7 +24,7 @@
   private final String method;
   private final BaseUrl baseUrl;
   private final String relativeUrl;
-  private final Headers headers;
+  private Headers headers;
   private final MediaType contentType;
   private final boolean hasBody;
   private final boolean isFormEncoded;
@@ -45,6 +45,10 @@
     this.requestActions = requestActions;
   }
 
+  public void header(String key, String value){
+    this.headers.newBuilder().add(key, value);
+  }
+
   Request create(Object... args) throws IOException {
     RequestBuilder requestBuilder =
         new RequestBuilder(method, baseUrl.url(), relativeUrl, headers, contentType, hasBody,
diff --git a/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java b/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
index d471d2722..00217be1e 100644
--- a/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
@@ -156,6 +156,11 @@
       return false;
     }
 
+    @Override
+    public Call<String> header(String key, String value) {
+      throw new UnsupportedOperationException();
+    }
+
     @Override public Call<String> clone() {
       throw new UnsupportedOperationException();
     }
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 57d3517f9..d791a6ab4 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -1779,6 +1779,21 @@
     assertThat(request.body().contentType().toString()).isEqualTo("text/not-plain");
   }
 
+  @Test public void canUseDynamicHeaders() throws IOException {
+    class Example {
+      @POST("/") //
+      Call<ResponseBody> method(@Header("Content-Type") String contentType, @Body RequestBody body) {
+        return null;
+      }
+    }
+    RequestBody body = RequestBody.create(MediaType.parse("text/plain"),
+            "Plain");
+    Method method = TestingUtils.onlyMethod(Example.class);
+    MethodHandler handler = retrofit.loadMethodHandler(method);
+    Call<?> invoke = (Call<?>) handler.invoke(args);
+    invoke.header("hello", "test").header("a draft", "!").execute();
+  }
+
   private static void assertBody(RequestBody body, String expected) {
     assertThat(body).isNotNull();
     Buffer buffer = new Buffer();
