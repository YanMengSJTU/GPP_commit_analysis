diff --git a/retrofit/src/main/java/retrofit/http/AbstractExecutableModule.java b/retrofit/src/main/java/retrofit/http/AbstractExecutableModule.java
new file mode 100644
index 000000000..eba8d1b0c
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/AbstractExecutableModule.java
@@ -0,0 +1,25 @@
+package retrofit.http;
+
+import org.apache.http.client.methods.HttpUriRequest;
+
+/**
+ * The abstract executable module delegates its execution 
+ * to the canExecute method that triggers the actual module only
+ * if the method returns a true value
+ * @author mfiandesio
+ *
+ */
+public abstract class AbstractExecutableModule  implements Module {
+	
+	
+	public abstract void handler(HttpUriRequest request);
+	
+	public void preHandle(HttpUriRequest request) {
+		if(canExecute(request)){
+			handler(request);
+		}
+	};
+	
+	public abstract boolean canExecute(HttpUriRequest request);
+	
+}
diff --git a/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java
index e7ba367bb..3537b4dfa 100644
--- a/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/http/HttpRequestBuilder.java
@@ -41,6 +41,7 @@
   private List<NameValuePair> nonPathParams;
   private RequestLine requestLine;
   private TypedBytes singleEntity;
+  private List<Module> modules;
 
   HttpRequestBuilder(Converter converter) {
     this.converter = converter;
@@ -76,6 +77,10 @@ HttpRequestBuilder setArgs(Object[] args) {
     return this;
   }
 
+  HttpRequestBuilder setModules(List<Module> modules) {
+	    this.modules = modules;
+	    return this;
+	  }
   Object[] getArgs() {
     return args;
   }
@@ -217,7 +222,11 @@ HttpUriRequest build() throws URISyntaxException {
       }
     }
 
-    return requestLine.getHttpMethod().createFrom(this);
+    HttpUriRequest req =  requestLine.getHttpMethod().createFrom(this);
+    for (Module m :this.modules) {
+		m.preHandle(req);
+	}
+    return req;
   }
 
   private String doReplace(String replacedPath, String paramName, String newVal) {
diff --git a/retrofit/src/main/java/retrofit/http/Module.java b/retrofit/src/main/java/retrofit/http/Module.java
new file mode 100644
index 000000000..62df58021
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/Module.java
@@ -0,0 +1,17 @@
+package retrofit.http;
+
+import org.apache.http.client.methods.HttpUriRequest;
+
+/**
+ * An interface class used to interact 
+ * with httprequest creation and its actual execution.
+ * 
+ * Example: a module for oauth that add an authorization header
+ * @author mfiandesio
+ *
+ */
+public interface Module {
+	
+	public void preHandle(HttpUriRequest request);
+	
+}
diff --git a/retrofit/src/main/java/retrofit/http/RestAdapter.java b/retrofit/src/main/java/retrofit/http/RestAdapter.java
index e0412d573..8280727b9 100644
--- a/retrofit/src/main/java/retrofit/http/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java
@@ -1,5 +1,8 @@
 package retrofit.http;
 
+import static java.util.logging.Level.WARNING;
+import static org.apache.http.HttpStatus.SC_UNAUTHORIZED;
+
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.InvocationHandler;
@@ -8,13 +11,17 @@
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
 import java.lang.reflect.WildcardType;
+import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
 import javax.inject.Provider;
+
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -23,6 +30,7 @@
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.util.EntityUtils;
+
 import retrofit.http.Callback.ServerError;
 import retrofit.http.HttpProfiler.RequestInformation;
 import retrofit.http.RestException.ClientHttpException;
@@ -32,9 +40,6 @@
 import retrofit.http.RestException.UnauthorizedHttpException;
 import retrofit.http.RestException.UnexpectedException;
 
-import static java.util.logging.Level.WARNING;
-import static org.apache.http.HttpStatus.SC_UNAUTHORIZED;
-
 /**
  * Converts Java method calls to Rest calls.
  *
@@ -53,9 +58,9 @@
   private final Headers headers;
   private final Converter converter;
   private final HttpProfiler profiler;
-
+  private final List<Module> modules;
   private RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Executor httpExecutor,
-      Executor callbackExecutor, Headers headers, Converter converter, HttpProfiler profiler) {
+      Executor callbackExecutor, Headers headers, Converter converter, HttpProfiler profiler,List<Module> modules) {
     this.server = server;
     this.httpClientProvider = httpClientProvider;
     this.httpExecutor = httpExecutor;
@@ -63,6 +68,7 @@ private RestAdapter(Server server, Provider<HttpClient> httpClientProvider, Exec
     this.headers = headers;
     this.converter = converter;
     this.profiler = profiler;
+    this.modules = modules;
   }
 
   /**
@@ -322,7 +328,9 @@ static Type getResponseObjectType(Method method, boolean isSynchronousInvocation
     private Headers headers;
     private Converter converter;
     private HttpProfiler profiler;
-
+    
+    private List<Module> modules = new ArrayList<Module>();
+    
     public Builder setServer(String endpoint) {
       if (endpoint == null) throw new NullPointerException("endpoint");
       return setServer(new Server(endpoint));
@@ -349,6 +357,12 @@ public Builder setClient(Provider<HttpClient> clientProvider) {
       return this;
     }
 
+    public Builder addModule(Module m){
+    	if(this.modules.contains(m)) throw new IllegalArgumentException("same module already exists in the module chain");
+    	this.modules.add(m);
+    	return this;
+    }
+    
     /**
      * Executors used for asynchronous HTTP client downloads and callbacks.
      *
@@ -387,7 +401,7 @@ public RestAdapter build() {
         throw new IllegalArgumentException("Server may not be null.");
       }
       ensureSaneDefaults();
-      return new RestAdapter(server, clientProvider, httpExecutor, callbackExecutor, headers, converter, profiler);
+      return new RestAdapter(server, clientProvider, httpExecutor, callbackExecutor, headers, converter, profiler,modules);
     }
 
     private void ensureSaneDefaults() {
diff --git a/retrofit/src/test/java/retrofit/http/HttpRequestBuilderTest.java b/retrofit/src/test/java/retrofit/http/HttpRequestBuilderTest.java
index f220df8da..1e8314d1c 100644
--- a/retrofit/src/test/java/retrofit/http/HttpRequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/http/HttpRequestBuilderTest.java
@@ -1,28 +1,55 @@
 // Copyright 2011 Square, Inc.
 package retrofit.http;
 
-import com.google.gson.Gson;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.client.methods.HttpPut;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.junit.Test;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Fail.fail;
 
-import javax.inject.Named;
 import java.io.ByteArrayOutputStream;
 import java.lang.reflect.Method;
 import java.net.URISyntaxException;
 import java.net.URLEncoder;
+import java.util.ArrayList;
 import java.util.Set;
 import java.util.UUID;
 
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.fail;
+import javax.inject.Named;
+
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.params.HttpParams;
+import org.junit.Test;
+
+import com.google.gson.Gson;
 
 /** @author Eric Denman (edenman@squareup.com) */
 public class HttpRequestBuilderTest {
   private static final Gson GSON = new Gson();
   private static final String API_URL = "http://taqueria.com/lengua/taco";
 
+  private static final Module SIMPLE_MODULE = new Module(){
+		 @Override
+		public void preHandle(HttpUriRequest request) {
+			HttpParams params = request.getParams();
+			params.setParameter("byModule", "Yeah B*ch,I'm added by module");
+		}
+	 };
+	 
+	 private static final Module ONLY_PUT_MODULE = new AbstractExecutableModule() {
+		
+		@Override
+		public void handler(HttpUriRequest request) {
+			HttpParams params = request.getParams();
+			params.setParameter("onlyPutModule", "You should see me");
+			
+		}
+		
+		@Override
+		public boolean canExecute(HttpUriRequest request) {
+			return request.getMethod().equals("PUT");
+		}
+	};
+  
   @Test public void testRegex() throws Exception {
     expectParams("");
     expectParams("foo");
@@ -43,6 +70,8 @@ private void expectParams(String path, String... expected) {
     }
   }
 
+  
+  
   @Test public void testNormalGet() throws Exception {
     Method method =
         MyService.class.getMethod("normalGet", String.class, Callback.class);
@@ -112,6 +141,38 @@ private void expectParams(String path, String... expected) {
     assertThat(requestBody).isEqualTo("{\"bodyText\":\"" + bodyText + "\"}");
   }
 
+  @Test public void testSimpleModuleHasBeenAdded() throws Exception {
+	  Method method =
+		        MyService.class.getMethod("normalPut", String.class, String.class, Callback.class);
+		    String expectedId = UUID.randomUUID().toString();
+		    String bodyText = UUID.randomUUID().toString();
+		    Object[] args = new Object[] {expectedId, bodyText, new MyCallback()};
+		    HttpUriRequest request = build(method, args);
+		    assertThat(request.getParams().getParameter("byModule")).isEqualTo("Yeah B*ch,I'm added by module");
+	  
+  }
+  
+  @Test public void testConditionalModuleHasBeenAddedOnlyToPut() throws Exception {
+	  Method method =
+		        MyService.class.getMethod("normalPut", String.class, String.class, Callback.class);
+		    String expectedId = UUID.randomUUID().toString();
+		    String bodyText = UUID.randomUUID().toString();
+		    Object[] args = new Object[] {expectedId, bodyText, new MyCallback()};
+		    HttpUriRequest request = build(method, args);
+		    assertThat(request.getParams().getParameter("onlyPutModule")).isEqualTo("You should see me");
+	  
+  }
+  @Test public void testConditionalModuleHasNotBeenAddedOnlyToPut() throws Exception {
+	  Method method =
+		        MyService.class.getMethod("getWithPathParam", String.class, String.class, Callback.class);
+		    String expectedId = UUID.randomUUID().toString();
+		    String bodyText = UUID.randomUUID().toString();
+		    Object[] args = new Object[] {expectedId, bodyText, new MyCallback()};
+		    HttpUriRequest request = build(method, args);
+		    assertThat(request.getParams().getParameter("onlyPutModule")).isNull();
+	  
+  }
+  
   @Test public void testNormalPutWithPathParams() throws Exception {
     Method method =
         MyService.class.getMethod("normalPut", String.class, String.class, Callback.class);
@@ -160,6 +221,8 @@ private void expectParams(String path, String... expected) {
     }
   }
 
+  
+  
   @Test public void testRegularWithNoPathParam() throws Exception {
     Method method = MyService.class.getMethod("regularNoPathParam", String.class, Callback.class);
     String otherParam = UUID.randomUUID().toString();
@@ -200,6 +263,7 @@ private HttpUriRequest build(Method method, Object[] args) throws URISyntaxExcep
         .setMethod(method, false)
         .setArgs(args)
         .setApiUrl(API_URL)
+        .setModules(new ArrayList<Module>(){{add(SIMPLE_MODULE);add(ONLY_PUT_MODULE);}})
         .build();
   }
 
diff --git a/retrofit/src/test/java/retrofit/http/ModulesTest.java b/retrofit/src/test/java/retrofit/http/ModulesTest.java
new file mode 100644
index 000000000..1b55d14f8
--- /dev/null
+++ b/retrofit/src/test/java/retrofit/http/ModulesTest.java
@@ -0,0 +1,30 @@
+package retrofit.http;
+
+import org.apache.http.client.methods.HttpUriRequest;
+import org.apache.http.params.HttpParams;
+import org.junit.Test;
+
+import com.google.gson.Gson;
+
+public class ModulesTest {
+	 private static final Gson GSON = new Gson();
+	 private static final String API_URL = "http://taqueria.com/lengua/taco";
+	 
+	 private static final Module SIMPLE_MODULE = new Module(){
+		 @Override
+		public void preHandle(HttpUriRequest request) {
+			HttpParams params = request.getParams();
+			params.setParameter("byModule", "Yeah B*ch,I'm added by module");
+		}
+	 };
+	 
+	 @Test
+	 public void testSimpleModule() throws Exception {
+		 RestAdapter ra = new RestAdapter.Builder()
+		 				  .setClient(new DummyHttpClient())
+		 				  .setServer(new Server(API_URL))
+		 				  .addModule(SIMPLE_MODULE).build();
+		 
+		 
+	 }
+}
