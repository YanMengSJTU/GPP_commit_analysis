diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index cccb1609d..a6e788468 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -221,7 +221,7 @@ void setArguments(Object[] args) {
           break;
         case FIELD:
           if (value != null) { // Skip null values.
-            formBody.addField(name, value.toString());
+            formBody.addField(name, value);
           }
           break;
         case PART:
diff --git a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
index d807195a2..cd6030d08 100644
--- a/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
+++ b/retrofit/src/main/java/retrofit/mime/FormUrlEncodedTypedOutput.java
@@ -19,27 +19,46 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.URLEncoder;
+import java.util.Arrays;
 
 public final class FormUrlEncodedTypedOutput implements TypedOutput {
   final ByteArrayOutputStream content = new ByteArrayOutputStream();
 
-  public void addField(String name, String value) {
+  private void addFieldString(String name, String value) throws IOException {
+    name = URLEncoder.encode(name, "UTF-8");
+    value = URLEncoder.encode(value, "UTF-8");
+
+    if (content.size() > 0) {
+        content.write('&');
+    }
+    content.write(name.getBytes("UTF-8"));
+    content.write('=');
+    content.write(value.getBytes("UTF-8"));
+  }
+
+  private void addFieldIterable(String name, Iterable values) throws IOException {
+     for (Object value: values) {
+         addFieldString(name, value.toString());
+     }
+  }
+
+  public void addField(String name, Object value) {
     if (name == null) {
       throw new NullPointerException("name");
     }
     if (value == null) {
       throw new NullPointerException("value");
     }
-    if (content.size() > 0) {
-      content.write('&');
-    }
-    try {
-      name = URLEncoder.encode(name, "UTF-8");
-      value = URLEncoder.encode(value, "UTF-8");
 
-      content.write(name.getBytes("UTF-8"));
-      content.write('=');
-      content.write(value.getBytes("UTF-8"));
+    try {
+      if (value instanceof Iterable) {
+        addFieldIterable(name, (Iterable) value);
+      } else if (value.getClass().isArray()) {
+        Iterable arrayAsList = Arrays.asList((Object[]) value);
+        addFieldIterable(name, arrayAsList);
+      } else {
+        addFieldString(name, value.toString());
+      }
     } catch (IOException e) {
       throw new RuntimeException(e);
     }
diff --git a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
index a7a3914f9..74b428c0f 100644
--- a/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ b/retrofit/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
@@ -1,9 +1,11 @@
 // Copyright 2013 Square, Inc.
 package retrofit.mime;
 
-import java.io.ByteArrayOutputStream;
 import org.junit.Test;
 
+import java.io.ByteArrayOutputStream;
+import java.util.Arrays;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 
 public class FormUrlEncodingTypedOutputTest {
@@ -45,4 +47,24 @@
     String actual2 = new String(out2.toByteArray(), "UTF-8");
     assertThat(actual2).isEqualTo("sim=ple&hey=there&help=me");
   }
+
+  @Test public void arrayParameter() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("ping", new String[]{"pong", "pong-too"});
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    fe.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo("ping=pong&ping=pong-too");
+  }
+
+  @Test public void arrayIterable() throws Exception {
+    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
+    fe.addField("ping", Arrays.asList(new String[]{"pong", "pong-too"}));
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    fe.writeTo(out);
+    String actual = new String(out.toByteArray(), "UTF-8");
+    assertThat(actual).isEqualTo("ping=pong&ping=pong-too");
+  }
 }
