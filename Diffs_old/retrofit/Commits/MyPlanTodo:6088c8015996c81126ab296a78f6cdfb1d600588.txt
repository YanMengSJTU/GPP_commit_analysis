diff --git a/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java b/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java
index e5867a32d..85809d218 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/BuilderSpec.java
@@ -155,6 +155,10 @@
       this.validateMethod = validateMethod;
     }
 
+    public ImmutableList<ExecutableElement> getSetters() {
+        return this.setters;
+    }
+
     ExecutableElement buildMethod() {
       return buildMethod;
     }
@@ -191,18 +195,11 @@ ExecutableElement buildMethod() {
           type = getterMap.get(name);
           map = prefixMap;
         }
-        if (type == null) {
-          errorReporter.reportError(
-              "Method does not correspond to a property of " + autoValueClass, setter);
-          ok = false;
-        } else {
+        if (type != null) {
           VariableElement parameter = Iterables.getOnlyElement(setter.getParameters());
           if (TYPE_EQUIVALENCE.equivalent(type, parameter.asType())) {
             getterMap.remove(name);
             map.put(name, setter);
-          } else {
-            errorReporter.reportError("Parameter type should be " + type, parameter);
-            ok = false;
           }
         }
       }
@@ -218,22 +215,6 @@ ExecutableElement buildMethod() {
         return null;
       }
 
-      // If there are any properties left in the map then we didn't see setters for them. Report
-      // an error for each one separately.
-      if (!getterMap.isEmpty()) {
-        for (Map.Entry<String, TypeMirror> entry : getterMap.entrySet()) {
-          String setterName = prefixing ? prefixWithSet(entry.getKey()) : entry.getKey();
-          String error = String.format(
-              "Expected a method with this signature: %s%s %s(%s)",
-              builderTypeElement,
-              TypeSimplifier.actualTypeParametersString(builderTypeElement),
-              setterName,
-              entry.getValue());
-          errorReporter.reportError(error, builderTypeElement);
-        }
-        return null;
-      }
-
       return noPrefixMap.isEmpty() ? prefixMap : noPrefixMap;
     }
 
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
index ddf37a9a1..e416c3c39 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitProcessor.java
@@ -666,6 +666,7 @@ public String buildBody(ExecutableElement method) {
     // "/" + userIdA + "/friends/" + userIdB + ""
     public String buildPath(ExecutableElement method) {
       String fullPath = buildRawPath(method);
+      if (fullPath == null) return null;
 
       List<? extends VariableElement> parameters = method.getParameters();
       for (VariableElement parameter : parameters) {
@@ -716,6 +717,8 @@ public String buildRawPath(ExecutableElement method) {
       Map<String, String> map = new HashMap<String, String>();
 
       String fullPath = buildRawPath(method);
+      if (fullPath == null) return map;
+
       if (fullPath.indexOf("?") != -1) {
         fullPath = fullPath.replaceAll("^.*\\?", "");
         String[] queries = fullPath.split("&");
@@ -1117,7 +1120,7 @@ private void processType(TypeElement type) {
       errorReporter.abortWithError(
           "@" + Retrofit.class.getName() + " only applies to classes", type);
     }
-    if (ancestorIsRetrofit(type)) {
+    if (false && ancestorIsRetrofit(type)) {
       errorReporter.abortWithError("One @Retrofit class may not extend another", type);
     }
     if (implementsAnnotation(type)) {
@@ -1158,14 +1161,18 @@ private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
     BuilderSpec builderSpec = new BuilderSpec(type, processingEnv, errorReporter);
     Optional<BuilderSpec.Builder> builder = builderSpec.getBuilder();
     ImmutableSet<ExecutableElement> toBuilderMethods;
+    ImmutableList<ExecutableElement> builderSetters;
     if (builder.isPresent()) {
       types.add(getTypeMirror(BitSet.class));
       toBuilderMethods = builder.get().toBuilderMethods(typeUtils, methodsToImplement);
+      builderSetters = builder.get().getSetters();
     } else {
       toBuilderMethods = ImmutableSet.of();
+      builderSetters = ImmutableList.of();
     }
     vars.toBuilderMethods =
         FluentIterable.from(toBuilderMethods).transform(SimpleNameFunction.INSTANCE).toList();
+
     Set<ExecutableElement> propertyMethods = Sets.difference(methodsToImplement, toBuilderMethods);
     String pkg = TypeSimplifier.packageNameOf(type);
     TypeSimplifier typeSimplifier = new TypeSimplifier(typeUtils, pkg, types, type.asType());
@@ -1281,6 +1288,16 @@ private void defineVarsForType(TypeElement type, RetrofitTemplateVars vars) {
       vars.authenticated = authenticated != null && !"".equals(authenticated);
     }
 
+    List<Property> builderProps = new ArrayList<Property>();
+    for (ExecutableElement method : builderSetters) {
+      List<? extends VariableElement> parameters = method.getParameters();
+      String propertyType = typeSimplifier.simplify(parameters.get(0).asType());
+      String propertyName = method.getSimpleName().toString();
+      String identifier = method.getSimpleName().toString();
+      builderProps.add(new Property(propertyName, identifier, method, propertyType, typeSimplifier, processingEnv));
+    }
+    vars.builderProps = builderProps;
+
     TypeElement parcelable = processingEnv.getElementUtils().getTypeElement("android.os.Parcelable");
     vars.parcelable = parcelable != null
       && processingEnv.getTypeUtils().isAssignable(type.asType(), parcelable.asType());
diff --git a/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
index fa39402d8..62d873b27 100644
--- a/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
+++ b/retrofit-processor/src/main/java/retrofit/processor/RetrofitTemplateVars.java
@@ -134,6 +134,8 @@
    */
   List<String> toBuilderMethods;
 
+  List<RetrofitProcessor.Property> builderProps;
+
   String baseUrl = "";
 
   Map<String, String> headers = Collections.emptyMap();
diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 9a258e243..479edd68c 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -55,8 +55,12 @@ import retrofit.client.Header;
 import retrofit.RestAdapter.LogLevel;
 import com.squareup.okhttp.HttpUrl;
 import retrofit.RequestInterceptor;
+//import retrofit.converter.Converter;
+//import retrofit.ErrorHandler;
 import java.util.Map;
 import java.util.HashMap;
+import java.util.concurrent.TimeUnit;
+import com.squareup.okhttp.Cache;
 
 import rx.schedulers.*;
 
@@ -66,11 +70,12 @@ import rx.schedulers.*;
 ${gwtCompatibleAnnotation}
 public final class $subclass$formalTypes extends $origClass$actualTypes {
 
-    final OkHttpClient client;
     public static final String _MIME_APP_JSON = "applications/json";
     public static final String _CHARSET_UTF8 = "charset=utf-8";
     public static final String _MIME_APP_JSON_CHARSET_UTF8 = _MIME_APP_JSON + "; " + _CHARSET_UTF8;
-    Converter converter;
+
+    OkHttpClient okHttpClient;
+    retrofit.converter.Converter converter;
     retrofit.RestAdapter.LogLevel logLevel;
     retrofit.RequestInterceptor requestInterceptor = retrofit.RequestInterceptor.NONE;
     retrofit.ErrorHandler errorHandler = retrofit.ErrorHandler.DEFAULT;
@@ -78,66 +83,106 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     // FIXME context is tricky
     Object context;
     Map<Class<? extends retrofit.RequestInterceptor>, retrofit.RequestInterceptor> requestInterceptors = new HashMap<>();
+    String[] retryHeaders;
+    String[] headers;
+    Cache cache;
+    String baseUrl;
 
 ## Constructor
 
+#if ($builderTypeName != "")
     public $subclass() {
-        this(null);
+      this(
+#foreach ($p in $builderProps)
+
+      null #if ($foreach.hasNext) , #end
+#end );
     }
+#end
 
-    public $subclass(Object object) {
-        // FIXME context is tricky
-        this.context = object;
-        client = new OkHttpClient();
+    public ##
+    $subclass(
+#foreach ($p in $builderProps)
 
-        try {
+        $p.type $p #if ($foreach.hasNext) , #end
+#end ) {
+#foreach ($p in $builderProps)
+
+        this.$p = $p;
+
+#end
+
+        if (this.converter == null) {
+
+            try {
 
 #if ($converter != "")
     #if ($gsonConverter != "")
 
-            this.converter = new ${converter}(new com.google.gson.Gson());
+                this.converter = new ${converter}(new com.google.gson.Gson());
 
     #else
 
-            this.converter = new ${converter}();
+                this.converter = new ${converter}();
 
     #end
 #else
 
-            /**
-             * Parse JsonArray
-             * gson.fromJson(jsonString, Wrapper[].class);
-             * mapper.readValue(jsonString, typeFactory.constructCollectionType(List.class, SomeClass.class));
-             */
+                /**
+                 * Parse JsonArray
+                 * gson.fromJson(jsonString, Wrapper[].class);
+                 * mapper.readValue(jsonString, typeFactory.constructCollectionType(List.class, SomeClass.class));
+                 */
 
-            this.converter = new retrofit.converter.LoganSquareConverter();
+                this.converter = new retrofit.converter.LoganSquareConverter();
 
 #end
 
-        } catch (Exception e) {
-            throw new RuntimeException(e);
+            } catch (Exception e) {
+                throw new RuntimeException(e);
+            }
         }
 
-        this.logLevel = retrofit.RestAdapter.LogLevel.$logLevel;
+
+        if (this.logLevel == null) {
+            this.logLevel = retrofit.RestAdapter.LogLevel.$logLevel;
+        }
 
 #if ($requestInterceptor != "")
 
-        this.requestInterceptor = new $requestInterceptor();
+        if (this.requestInterceptor == null) {
+            this.requestInterceptor = new $requestInterceptor();
+        }
 
 #end
 
 #if ($errorHandler != "")
 
-        this.errorHandler = new $errorHandler();
+        if (this.errorHandler == null) {
+            this.errorHandler = new $errorHandler();
+        }
 
 #end
 
 #if ($authenticator != "")
 
-        this.requestAuthenticator = new $authenticator();
+        if (this.requestAuthenticator == null) {
+            this.requestAuthenticator = new $authenticator();
+        }
 
 #end
 
+        if (okHttpClient == null) {
+            okHttpClient = new OkHttpClient();
+        }
+
+        okHttpClient.setConnectTimeout(15, TimeUnit.SECONDS);
+        okHttpClient.setReadTimeout(20, TimeUnit.SECONDS);
+
+        if (cache != null) {
+            okHttpClient.setCache(cache);
+        }
+
     }
 
 ## Property getters
@@ -177,10 +222,13 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
         }
 
         HttpUrl.Builder httpUrlBuilder = HttpUrl.parse(_url).newBuilder();
+        String value;
 
     #foreach ($query in $p.queries.entrySet())
 
-        httpUrlBuilder.addQueryParameter("${query.key}", $query.value);
+        value = String.valueOf($query.value);
+        if (value != null && !"null".equals(value)) httpUrlBuilder.addQueryParameter("${query.key}", value);
+        value = null;
 
     #end
 
@@ -300,19 +348,20 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
         System.out.println("retrofit: ${p.getter}");
 
-    #if ($requestInterceptor != "")
-
         requestObs = requestObs.map(new Func1<Request, Request>() {
             @Override public Request call(Request request) {
                 System.out.println("retrofit: requestInterceptor");
                 SimpleRequestFacade requestFacade = new SimpleRequestFacade(request);
-                requestInterceptor.intercept(requestFacade);
+                if (requestInterceptor instanceof retrofit.http.Retrofit.SimpleRequestInterceptor) {
+                    // FIXME context is tricky
+                    ((retrofit.http.Retrofit.SimpleRequestInterceptor) requestInterceptor).intercept(context, requestFacade);
+                } else {
+                    requestInterceptor.intercept(requestFacade);
+                }
                 return requestFacade.request();
             }
         });
 
-    #end
-
     #if ($p.requestInterceptor != "")
         #if (!$p.singletonRequestInterceptor)
 
@@ -389,14 +438,16 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
             @Override public Observable<com.squareup.okhttp.Response> call(Request request) {
                 System.out.println("retrofit: responseCachedObs");
 
-                return Observable.create(new OnSubscribeResponse(client, request));
+                return Observable.create(new OnSubscribeResponse(okHttpClient, request));
             }
 
     #if (!$retryHeaders.isEmpty())
 
         }).onErrorResumeNext(new Func1<Throwable, Observable<com.squareup.okhttp.Response>>() {
             @Override public Observable<com.squareup.okhttp.Response> call(Throwable e) {
+                System.out.println("retrofit: exception: " + e);
                 if (e instanceof RequestException) {
+                    System.out.println("retrofit: RequestException: " + e);
                     RequestException requestException = (RequestException) e;
                     Request.Builder reqBuilder = requestException.request().newBuilder();
 
@@ -406,8 +457,20 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
         #end
 
-                    return Observable.create(new OnSubscribeResponse(client, reqBuilder.build()));
+                    Request request = reqBuilder.build();
+                    System.out.println("retrofit: retry: log");
+                    if (logLevel.log()) {
+                        // Log the request data.
+                        try {
+                            request = logAndReplaceRequest("HTTP", request, finalBodyString);
+                        } catch (IOException e2) {
+                            throw retrofit.RetrofitError.unexpectedError(request.urlString(), e2);
+                        }
+                    }
+
+                    return Observable.create(new OnSubscribeResponse(okHttpClient, request));
                 }
+                System.out.println("retrofit: !RequestException: " + e);
                 return Observable.error(e);
             }
 
@@ -646,18 +709,20 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
     // TODO onUnSubscribe to call.cancel();
     public static class OnSubscribeResponse implements Observable.OnSubscribe<com.squareup.okhttp.Response> {
         final Request request;
-        final OkHttpClient client;
+        final OkHttpClient okHttpClient;
 
-        public OnSubscribeResponse(OkHttpClient client, Request request) {
+        public OnSubscribeResponse(OkHttpClient okHttpClient, Request request) {
             this.request = request;
-            this.client = client;
+            this.okHttpClient = okHttpClient;
         }
 
         @Override
         public void call(final Subscriber<? super com.squareup.okhttp.Response> sub) {
             try {
-                client.newCall(request).enqueue(new com.squareup.okhttp.Callback() {
+                okHttpClient.newCall(request).enqueue(new com.squareup.okhttp.Callback() {
                     @Override public void onFailure(Request r, IOException e) {
+                        System.out.println("retrofit: Request: " + r);
+                        System.out.println("retrofit: IOException: " + e);
                         sub.onError(new RequestException(r, e));
                     }
                     @Override public void onResponse(com.squareup.okhttp.Response response) {
@@ -916,4 +981,80 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
   private synchronized retrofit.RequestInterceptor getRequestInterceptor(Class<? extends retrofit.RequestInterceptor> clazz) {
       return requestInterceptors.get(clazz);
   }
+
+
+#if ($builderTypeName != "")
+
+  #foreach ($m in $toBuilderMethods)
+
+  @Override
+  public ${builderTypeName}${builderActualTypes} ${m}() {
+    return new Builder${builderActualTypes}(this);
+  }
+
+  #end
+
+  static final class Builder${builderFormalTypes} ##
+  #if ($builderIsInterface) implements #else extends #end
+      ${builderTypeName}${builderActualTypes} {
+
+    private final $bitSet set$ = new ${bitSet}();
+
+    #foreach ($p in $builderProps)
+
+    private $p.type $p;
+
+    #end
+
+    Builder() {
+    }
+
+##    Builder(${origClass}${actualTypes} source) {
+##
+##      #foreach ($p in $builderProps)
+##
+##      ${p.name}(source.${p.getter}());
+##
+##      #end
+##
+##    }
+
+#foreach ($p in $builderProps)
+
+    @Override
+    public ${builderTypeName}${builderActualTypes} ${p.name}($p.type $p) {
+      #if ($p.kind == "ARRAY")
+
+      this.$p = ($p == null) ? null : ${p}.clone();
+
+      #else
+
+      this.$p = $p;
+
+      #end
+
+      return this;
+    }
+
+    #end
+
+    @Override
+    public ${origClass}${actualTypes} ${buildMethodName}() {
+      ${origClass}${actualTypes} result = new ${subclass}${actualTypes}(
+    #foreach ($p in $builderProps)
+
+          this.$p #if ($foreach.hasNext) , #end
+    #end );
+
+    #foreach ($v in $validators)
+
+      result.${v}();
+
+    #end
+
+      return result;
+    }
+  }
+#end
+
 }
