diff --git a/rapidrest/build.gradle b/rapidrest/build.gradle
index d4001f4d4..60dcbff5b 100644
--- a/rapidrest/build.gradle
+++ b/rapidrest/build.gradle
@@ -23,6 +23,12 @@ dependencies {
     provided 'com.squareup.okhttp:okhttp:2.0.0'
     provided 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
     provided 'com.google.code.gson:gson:2.2.4'
-    provided 'org.simpleframework:simple-xml:2.7.1'
+    provided('org.simpleframework:simple-xml:2.7.1'){
+        exclude module: 'stax'
+        exclude module: 'stax-api'
+        exclude module: 'xpp3'
+    }
     compile fileTree(dir: 'libs', include: ['*.jar'])
-}
+
+    androidTestCompile 'com.google.code.gson:gson:2.2.4'
+}
\ No newline at end of file
diff --git a/rapidrest/src/androidTest/java/rapid/rest/RestTest.java b/rapidrest/src/androidTest/java/rapid/rest/RestTest.java
new file mode 100644
index 000000000..2a6e8d6d5
--- /dev/null
+++ b/rapidrest/src/androidTest/java/rapid/rest/RestTest.java
@@ -0,0 +1,65 @@
+package rapid.rest;
+
+import android.test.ActivityInstrumentationTestCase2;
+import android.test.AndroidTestCase;
+
+import java.util.concurrent.CountDownLatch;
+
+import rapid.rest.client.Response;
+import rapid.rest.http.GET;
+import rapid.rest.http.Path;
+
+/**
+ * Created by suckga on 2014-06-22.
+ */
+public class RestTest extends AndroidTestCase {
+    private static final String GITHUB_ID = "nirvanfallacy";
+
+    interface GitHub {
+        @GET("/users/{id}")
+        User getUser(@Path("id") String id);
+
+        @GET("/users/{id}")
+        void getUser(@Path("id") String id, Callback<User> callback);
+    }
+
+    static class User {
+        public String login;
+    }
+
+    private GitHub mGitHub;
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+
+        RestAdapter adapter = new RestAdapter.Builder()
+                .setEndpoint("https://api.github.com")
+                .build();
+        mGitHub = adapter.create(GitHub.class);
+    }
+
+    public void testSyncRest() {
+        final String userId = GITHUB_ID.toLowerCase();
+        assertEquals(userId, mGitHub.getUser(userId).login.toLowerCase());
+    }
+
+    public void testAsyncRest() {
+        final String userId = GITHUB_ID.toLowerCase();
+
+        final CountDownLatch signal = new CountDownLatch(1);
+        mGitHub.getUser(userId, new Callback<User>() {
+            @Override
+            public void success(User user, Response response) {
+                assertEquals(userId, user.login.toLowerCase());
+                signal.countDown();
+            }
+
+            @Override
+            public void failure(RetrofitError error) {
+                throw error;
+            }
+        });
+        try { signal.await(); } catch (InterruptedException e) {}
+    }
+}
diff --git a/rapidrest/src/test/java/retrofit/CallbackRunnableTest.java b/rapidrest/src/test/java/retrofit/CallbackRunnableTest.java
deleted file mode 100644
index fabdebe02..000000000
--- a/rapidrest/src/test/java/retrofit/CallbackRunnableTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import java.util.concurrent.Executor;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.same;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-import static rapid.rest.Utils.SynchronousExecutor;
-
-public class CallbackRunnableTest {
-  private Executor executor = spy(new SynchronousExecutor());
-  private CallbackRunnable<Object> callbackRunnable;
-  private Callback<Object> callback;
-  private ErrorHandler errorHandler = ErrorHandler.DEFAULT;
-
-  @Before public void setUp() {
-    callback = mock(Callback.class);
-    callbackRunnable = spy(new CallbackRunnable<Object>(callback, executor, errorHandler) {
-      @Override public ResponseWrapper obtainResponse() {
-        return null; // Must be mocked.
-      }
-    });
-  }
-
-  @Test public void responsePassedToSuccess() {
-    ResponseWrapper wrapper = new ResponseWrapper(null, new Object());
-    when(callbackRunnable.obtainResponse()).thenReturn(wrapper);
-
-    callbackRunnable.run();
-
-    verify(executor).execute(any(Runnable.class));
-    verify(callback).success(same(wrapper.responseBody), same(wrapper.response));
-  }
-
-  @Test public void errorPassedToFailure() {
-    RetrofitError exception = RetrofitError.unexpectedError("", new RuntimeException());
-    when(callbackRunnable.obtainResponse()).thenThrow(exception);
-
-    callbackRunnable.run();
-
-    verify(executor).execute(any(Runnable.class));
-    verify(callback).failure(same(exception));
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/EndpointsTest.java b/rapidrest/src/test/java/retrofit/EndpointsTest.java
deleted file mode 100644
index 79069e84d..000000000
--- a/rapidrest/src/test/java/retrofit/EndpointsTest.java
+++ /dev/null
@@ -1,19 +0,0 @@
-// Copyright 2014 Square, Inc.
-package retrofit;
-
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class EndpointsTest {
-  @Test public void endpointOnly() {
-    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com");
-    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");
-  }
-
-  @Test public void endpointAndName() {
-    Endpoint endpoint = Endpoints.newFixedEndpoint("http://example.com", "production");
-    assertThat(endpoint.getUrl()).isEqualTo("http://example.com");
-    assertThat(endpoint.getName()).isEqualTo("production");
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/ErrorHandlerTest.java b/rapidrest/src/test/java/retrofit/ErrorHandlerTest.java
deleted file mode 100644
index cda2554ba..000000000
--- a/rapidrest/src/test/java/retrofit/ErrorHandlerTest.java
+++ /dev/null
@@ -1,118 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import java.io.IOException;
-import java.util.Collections;
-import org.junit.Before;
-import org.junit.Test;
-import rapid.rest.client.Client;
-import rapid.rest.client.Header;
-import rapid.rest.client.Request;
-import rapid.rest.client.Response;
-import rapid.rest.http.GET;
-import rx.Observable;
-import rx.Observer;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;
-import static org.junit.Assert.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-
-public class ErrorHandlerTest {
-
-  interface ExampleClient {
-    @GET("/")
-    Response throwsCustomException() throws TestException;
-
-    @GET("/")
-    void onErrorWrappedCustomException(Callback<Response> callback);
-
-    @GET("/")
-    Observable<Response> onErrorCustomException();
-  }
-
-  static class TestException extends Exception {
-  }
-
-  /* An HTTP client which always returns a 400 response */
-  static class MockInvalidResponseClient implements Client {
-    @Override public Response execute(Request request) throws IOException {
-      return new Response("", 400, "invalid request", Collections.<Header>emptyList(), null);
-    }
-  }
-
-  ExampleClient client;
-  ErrorHandler errorHandler;
-
-  @Before public void setup() {
-    errorHandler = mock(ErrorHandler.class);
-
-    client = new RestAdapter.Builder() //
-        .setEndpoint("http://example.com")
-        .setClient(new MockInvalidResponseClient())
-        .setErrorHandler(errorHandler)
-        .setExecutors(new Utils.SynchronousExecutor(), new Utils.SynchronousExecutor())
-        .build()
-        .create(ExampleClient.class);
-  }
-
-  @Test public void customizedExceptionUsed() throws Throwable {
-    TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    try {
-      client.throwsCustomException();
-      failBecauseExceptionWasNotThrown(TestException.class);
-    } catch (TestException e) {
-      assertThat(e).isSameAs(exception);
-    }
-  }
-
-  @Test public void onErrorWrappedCustomException() throws Throwable {
-    final TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    client.onErrorWrappedCustomException(new Callback<Response>() {
-
-      @Override public void success(Response response, Response response2) {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-
-      @Override public void failure(RetrofitError error) {
-        assertThat(error.getCause()).isSameAs(exception);
-      }
-    });
-  }
-
-  @Test public void onErrorCustomException() throws Throwable {
-    final TestException exception = new TestException();
-    doReturn(exception).when(errorHandler).handleError(any(RetrofitError.class));
-
-    client.onErrorCustomException().subscribe(new Observer<Response>() {
-      @Override public void onCompleted() {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-
-      @Override public void onError(Throwable e) {
-        assertThat(e).isSameAs(exception);
-      }
-
-      @Override public void onNext(Response response) {
-        failBecauseExceptionWasNotThrown(TestException.class);
-      }
-    });
-  }
-
-  @Test public void returningNullThrowsException() throws Exception {
-    doReturn(null).when(errorHandler).handleError(any(RetrofitError.class));
-
-    try {
-      client.throwsCustomException();
-      fail();
-    } catch (IllegalStateException e) {
-      assertThat(e.getMessage()).isEqualTo("Error handler returned null for wrapped exception.");
-    }
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/RequestBuilderTest.java b/rapidrest/src/test/java/retrofit/RequestBuilderTest.java
deleted file mode 100644
index 0b0cd36e9..000000000
--- a/rapidrest/src/test/java/retrofit/RequestBuilderTest.java
+++ /dev/null
@@ -1,976 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.google.gson.Gson;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import org.junit.Test;
-import rapid.rest.client.Header;
-import rapid.rest.client.Request;
-import rapid.rest.converter.Converter;
-import rapid.rest.converter.GsonConverter;
-import rapid.rest.mime.MimeHelper;
-import rapid.rest.mime.MultipartTypedOutput;
-import rapid.rest.mime.TypedOutput;
-import rapid.rest.mime.TypedString;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
-import static rapid.restMethodInfo.ParamUsage;
-import static rapid.restMethodInfo.ParamUsage.BODY;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_PATH;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
-import static rapid.restMethodInfo.ParamUsage.FIELD;
-import static rapid.restMethodInfo.ParamUsage.FIELD_MAP;
-import static rapid.restMethodInfo.ParamUsage.HEADER;
-import static rapid.restMethodInfo.ParamUsage.PART;
-import static rapid.restMethodInfo.ParamUsage.PART_MAP;
-import static rapid.restMethodInfo.ParamUsage.PATH;
-import static rapid.restMethodInfo.ParamUsage.QUERY;
-import static rapid.restMethodInfo.ParamUsage.QUERY_MAP;
-import static rapid.restMethodInfo.RequestType;
-
-public class RequestBuilderTest {
-  @Test public void normalGet() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithEncodedPathParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addEncodedPathParam("ping", "po%20ng") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithInterceptorPathParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addInterceptorPathParam("ping", "pong") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorPathParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/{kit}/") //
-        .addPathParam("ping", "pong") //
-        .addInterceptorPathParam("kit", "kat")
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithInterceptorQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addInterceptorQueryParam("butter", "finger") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?butter=finger");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong") //
-        .addInterceptorQueryParam("butter", "finger")
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?butter=finger");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithInterceptorPathParamAndInterceptorQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addInterceptorPathParam("ping", "pong") //
-        .addInterceptorQueryParam("butter", "finger") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?butter=finger");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathParamAndInterceptorPathParamAndInterceptorQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/{kit}/") //
-        .addPathParam("ping", "pong") //
-        .addInterceptorPathParam("kit", "kat")
-        .addInterceptorQueryParam("butter", "finger")
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/?butter=finger");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void pathParamRequired() throws Exception {
-    try {
-      new Helper() //
-          .setMethod("GET") //
-          .setUrl("http://example.com") //
-          .setPath("/foo/bar/{ping}/") //
-          .addPathParam("ping", null) //
-          .build();
-      fail("Null path parameters not allowed.");
-    } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).isEqualTo("Path parameter \"ping\" value must not be null.");
-    }
-  }
-
-  @Test public void getWithQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("ping", "pong") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithEncodedQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addEncodedQueryParam("ping", "p+o+n+g") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=p+o+n+g");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void queryParamOptional() throws Exception {
-    Request request1 = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("ping", null) //
-        .build();
-    assertThat(request1.getUrl()).isEqualTo("http://example.com/foo/bar/");
-
-    Request request2 = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("foo", "bar") //
-        .addQueryParam("ping", null) //
-        .addQueryParam("kit", "kat") //
-        .build();
-    assertThat(request2.getUrl()).isEqualTo("http://example.com/foo/bar/?foo=bar&kit=kat");
-  }
-
-  @Test public void getWithQueryUrlAndParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setQuery("hi=mom") //
-        .addQueryParam("ping", "pong") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom&ping=pong");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithQuery() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setQuery("hi=mom") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong") //
-        .addQueryParam("kit", "kat") //
-        .addQueryParam("riff", "raff") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryQuestionMarkParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong?") //
-        .addQueryParam("kit", "kat?") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryAmpersandParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong&") //
-        .addQueryParam("kit", "kat&") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithPathAndQueryHashParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong#") //
-        .addQueryParam("kit", "kat#") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithQueryParamList() throws Exception {
-    List<Object> values = Arrays.<Object>asList(1, 2, null, "three");
-
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("key", values) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithQueryParamArray() throws Exception {
-    Object[] values = { 1, 2, null, "three" };
-
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("key", values) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithQueryParamPrimitiveArray() throws Exception {
-    int[] values = { 1, 2, 3 };
-
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryParam("key", values) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=3");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithQueryParamMap() throws Exception {
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("kit", "kat");
-    params.put("foo", null);
-    params.put("ping", "pong");
-
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addQueryMapParams("options", params) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?kit=kat&ping=pong");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void getWithEncodedQueryParamMap() throws Exception {
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("kit", "k%20t");
-    params.put("foo", null);
-    params.put("ping", "p%20g");
-
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addEncodedQueryMapParams("options", params) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?kit=k%20t&ping=p%20g");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void normalPost() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void normalPostWithPathParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/") //
-        .addPathParam("ping", "pong") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void body() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setBody(Arrays.asList("quick", "brown", "fox")) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertTypedBytes(request.getBody(), "[\"quick\",\"brown\",\"fox\"]");
-  }
-
-  @Test public void bodyRequired() throws Exception {
-    try {
-      new Helper() //
-          .setMethod("POST") //
-          .setHasBody() //
-          .setUrl("http://example.com") //
-          .setPath("/foo/bar/") //
-          .setBody(null) //
-          .build();
-      fail("Null body not allowed.");
-    } catch (IllegalArgumentException e) {
-      assertThat(e.getMessage()).isEqualTo("Body parameter value must not be null.");
-    }
-  }
-
-  @Test public void bodyWithPathParams() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/{ping}/{kit}/") //
-        .addPathParam("ping", "pong") //
-        .setBody(Arrays.asList("quick", "brown", "fox")) //
-        .addPathParam("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");
-    assertTypedBytes(request.getBody(), "[\"quick\",\"brown\",\"fox\"]");
-  }
-
-  @Test public void simpleMultipart() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setMultipart() //
-        .addPart("ping", "pong") //
-        .addPart("kit", new TypedString("kat")) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-
-    MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
-    List<byte[]> bodyParts = MimeHelper.getParts(body);
-    assertThat(bodyParts).hasSize(2);
-
-    Iterator<byte[]> iterator = bodyParts.iterator();
-
-    String one = new String(iterator.next(), "UTF-8");
-    assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
-
-    String two = new String(iterator.next(), "UTF-8");
-    assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
-  }
-
-  @Test public void multipartPartMap() throws Exception {
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("ping", "pong");
-    params.put("kit", new TypedString("kat"));
-
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setMultipart() //
-        .addPartMap("params", params) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-
-    MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
-    List<byte[]> bodyParts = MimeHelper.getParts(body);
-    assertThat(bodyParts).hasSize(2);
-
-    Iterator<byte[]> iterator = bodyParts.iterator();
-
-    String one = new String(iterator.next(), "UTF-8");
-    assertThat(one).contains("name=\"ping\"\r\n").endsWith("\r\npong");
-
-    String two = new String(iterator.next(), "UTF-8");
-    assertThat(two).contains("name=\"kit\"").endsWith("\r\nkat");
-  }
-
-  @Test public void multipartNullRemovesPart() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .setMultipart() //
-        .addPart("ping", "pong") //
-        .addPart("fizz", null) //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("POST");
-    assertThat(request.getHeaders()).isEmpty();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-
-    MultipartTypedOutput body = (MultipartTypedOutput) request.getBody();
-    List<byte[]> bodyParts = MimeHelper.getParts(body);
-    assertThat(bodyParts).hasSize(1);
-
-    Iterator<byte[]> iterator = bodyParts.iterator();
-
-    String one = new String(iterator.next(), "UTF-8");
-    assertThat(one).contains("name=\"ping\"").endsWith("\r\npong");
-  }
-
-  @Test public void multipartPartOptional() throws Exception {
-    try {
-      new Helper() //
-          .setMethod("POST") //
-          .setHasBody() //
-          .setUrl("http://example.com") //
-          .setPath("/foo/bar/") //
-          .setMultipart() //
-          .addPart("ping", null) //
-          .build();
-      fail("Empty multipart request is not allowed.");
-    } catch (IllegalStateException e) {
-      assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");
-    }
-  }
-
-  @Test public void simpleFormEncoded() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addField("foo", "bar") //
-        .addField("ping", "pong") //
-        .build();
-    assertTypedBytes(request.getBody(), "foo=bar&ping=pong");
-  }
-
-  @Test public void formEncodedFieldOptional() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addField("foo", "bar") //
-        .addField("ping", null) //
-        .addField("kit", "kat") //
-        .build();
-    assertTypedBytes(request.getBody(), "foo=bar&kit=kat");
-  }
-
-  @Test public void formEncodedFieldList() throws Exception {
-    List<Object> values = Arrays.<Object>asList("foo", "bar", null, 3);
-
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addField("foo", values) //
-        .addField("kit", "kat") //
-        .build();
-    assertTypedBytes(request.getBody(), "foo=foo&foo=bar&foo=3&kit=kat");
-  }
-
-  @Test public void formEncodedFieldArray() throws Exception {
-    Object[] values = { 1, 2, null, "three" };
-
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addField("foo", values) //
-        .addField("kit", "kat") //
-        .build();
-    assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=three&kit=kat");
-  }
-
-  @Test public void formEncodedFieldPrimitiveArray() throws Exception {
-    int[] values = { 1, 2, 3 };
-
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addField("foo", values) //
-        .addField("kit", "kat") //
-        .build();
-    assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=3&kit=kat");
-  }
-
-  @Test public void formEncodedFieldMap() throws Exception {
-    Map<String, Object> params = new LinkedHashMap<String, Object>();
-    params.put("kit", "kat");
-    params.put("foo", null);
-    params.put("ping", "pong");
-
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setHasBody() //
-        .setUrl("http://example.com") //
-        .setPath("/foo") //
-        .setFormEncoded() //
-        .addFieldMap("options", params) //
-        .build();
-    assertTypedBytes(request.getBody(), "kit=kat&ping=pong");
-  }
-
-  @Test public void simpleHeaders() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addHeaders("ping: pong", "kit: kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()) //
-        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void simpleInterceptorHeaders() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addInterceptorHeader("ping", "pong") //
-        .addInterceptorHeader("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()) //
-        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void headersAndInterceptorHeaders() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addHeaders("ping: pong") //
-        .addInterceptorHeader("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()) //
-        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void allThreeHeaderTypes() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addHeaders("ping: pong") //
-        .addInterceptorHeader("kit", "kat") //
-        .addHeaderParam("fizz", "buzz") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()).containsExactly(new Header("ping", "pong"),
-        new Header("kit", "kat"), new Header("fizz", "buzz"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void methodHeader() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addHeaders("ping: pong") //
-        .addHeaderParam("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()) //
-        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void headerParam() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com") //
-        .setPath("/foo/bar/") //
-        .addHeaders("ping: pong") //
-        .addHeaderParam("kit", "kat") //
-        .build();
-    assertThat(request.getMethod()).isEqualTo("GET");
-    assertThat(request.getHeaders()) //
-        .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-    assertThat(request.getBody()).isNull();
-  }
-
-  @Test public void noDuplicateSlashes() throws Exception {
-    Request request = new Helper() //
-        .setMethod("GET") //
-        .setUrl("http://example.com/") //
-        .setPath("/foo/bar/") //
-        .build();
-    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
-  }
-
-  @Test public void contentTypeAnnotationHeaderOverrides() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setUrl("http://example.com") //
-        .setPath("/") //
-        .addHeaders("Content-Type: text/not-plain") //
-        .setBody(new TypedString("Plain")) //
-        .build();
-    assertThat(request.getBody().mimeType()).isEqualTo("text/not-plain");
-  }
-
-  @Test public void contentTypeParameterHeaderOverrides() throws Exception {
-    Request request = new Helper() //
-        .setMethod("POST") //
-        .setUrl("http://example.com") //
-        .setPath("/") //
-        .addHeaderParam("Content-Type", "text/not-plain") //
-        .setBody(new TypedString("Plain")) //
-        .build();
-    assertThat(request.getBody().mimeType()).isEqualTo("text/not-plain");
-  }
-
-  private static void assertTypedBytes(TypedOutput bytes, String expected) throws IOException {
-    assertThat(bytes).isNotNull();
-    ByteArrayOutputStream baos = new ByteArrayOutputStream();
-    bytes.writeTo(baos);
-    assertThat(new String(baos.toByteArray(), "UTF-8")).isEqualTo(expected);
-  }
-
-  private static class Helper {
-    private static final Converter GSON = new GsonConverter(new Gson());
-
-    private RequestType requestType = RequestType.SIMPLE;
-    private String method;
-    private boolean hasBody = false;
-    private String path;
-    private String query;
-    private final List<String> paramNames = new ArrayList<String>();
-    private final List<ParamUsage> paramUsages = new ArrayList<ParamUsage>();
-    private final List<Object> args = new ArrayList<Object>();
-    private final List<String> headers = new ArrayList<String>();
-    private final List<Header> interceptorHeaders = new ArrayList<Header>();
-    private final Map<String, String> interceptorPathParams = new LinkedHashMap<String, String>();
-    private final Map<String, String> interceptorQueryParams = new LinkedHashMap<String, String>();
-    private String url;
-
-    Helper setMethod(String method) {
-      this.method = method;
-      return this;
-    }
-
-    Helper setHasBody() {
-      hasBody = true;
-      return this;
-    }
-
-    Helper setUrl(String url) {
-      this.url = url;
-      return this;
-    }
-
-    Helper setPath(String path) {
-      this.path = path;
-      return this;
-    }
-
-    Helper setQuery(String query) {
-      this.query = query;
-      return this;
-    }
-
-    Helper addPathParam(String name, Object value) {
-      paramNames.add(name);
-      paramUsages.add(PATH);
-      args.add(value);
-      return this;
-    }
-
-    Helper addEncodedPathParam(String name, String value) {
-      paramNames.add(name);
-      paramUsages.add(ENCODED_PATH);
-      args.add(value);
-      return this;
-    }
-
-    Helper addQueryParam(String name, Object value) {
-      paramNames.add(name);
-      paramUsages.add(QUERY);
-      args.add(value);
-      return this;
-    }
-
-    Helper addEncodedQueryParam(String name, String value) {
-      paramNames.add(name);
-      paramUsages.add(ENCODED_QUERY);
-      args.add(value);
-      return this;
-    }
-
-    Helper addQueryMapParams(String name, Map<String, Object> values) {
-      paramNames.add(name);
-      paramUsages.add(QUERY_MAP);
-      args.add(values);
-      return this;
-    }
-
-    Helper addEncodedQueryMapParams(String name, Map<String, Object> values) {
-      paramNames.add(name);
-      paramUsages.add(ENCODED_QUERY_MAP);
-      args.add(values);
-      return this;
-    }
-
-    Helper addField(String name, Object value) {
-      paramNames.add(name);
-      paramUsages.add(FIELD);
-      args.add(value);
-      return this;
-    }
-
-    Helper addFieldMap(String name, Map<String, Object> values) {
-      paramNames.add(name);
-      paramUsages.add(FIELD_MAP);
-      args.add(values);
-      return this;
-    }
-
-    Helper addPart(String name, Object value) {
-      paramNames.add(name);
-      paramUsages.add(PART);
-      args.add(value);
-      return this;
-    }
-
-    Helper addPartMap(String name, Map<String, Object> values) {
-      paramNames.add(name);
-      paramUsages.add(PART_MAP);
-      args.add(values);
-      return this;
-    }
-
-    Helper setBody(Object value) {
-      paramNames.add(null);
-      paramUsages.add(BODY);
-      args.add(value);
-      return this;
-    }
-
-    Helper addHeaderParam(String name, Object value) {
-      paramNames.add(name);
-      paramUsages.add(HEADER);
-      args.add(value);
-      return this;
-    }
-
-    Helper addHeaders(String... headers) {
-      Collections.addAll(this.headers, headers);
-      return this;
-    }
-
-    Helper addInterceptorHeader(String name, String value) {
-      interceptorHeaders.add(new Header(name, value));
-      return this;
-    }
-
-    Helper addInterceptorPathParam(String name, String value) {
-      interceptorPathParams.put(name, value);
-      return this;
-    }
-
-    Helper addInterceptorQueryParam(String name, String value) {
-      interceptorQueryParams.put(name, value);
-      return this;
-    }
-
-    Helper setMultipart() {
-      requestType = RequestType.MULTIPART;
-      return this;
-    }
-
-    Helper setFormEncoded() {
-      requestType = RequestType.FORM_URL_ENCODED;
-      return this;
-    }
-
-    Request build() throws Exception {
-      if (method == null) {
-        throw new IllegalStateException("Method must be set.");
-      }
-      if (path == null) {
-        throw new IllegalStateException("Path must be set.");
-      }
-
-      Method method = getClass().getDeclaredMethod("dummySync");
-
-      RestMethodInfo methodInfo = new RestMethodInfo(method);
-      methodInfo.requestMethod = this.method;
-      methodInfo.requestHasBody = hasBody;
-      methodInfo.requestType = requestType;
-      methodInfo.requestUrl = path;
-      methodInfo.requestUrlParamNames = RestMethodInfo.parsePathParameters(path);
-      methodInfo.requestQuery = query;
-      methodInfo.requestParamNames = paramNames.toArray(new String[paramNames.size()]);
-      methodInfo.requestParamUsage = paramUsages.toArray(new ParamUsage[paramUsages.size()]);
-      methodInfo.headers = methodInfo.parseHeaders(headers.toArray(new String[headers.size()]));
-      methodInfo.loaded = true;
-
-      RequestBuilder requestBuilder = new RequestBuilder(url, methodInfo, GSON);
-
-      // Simulate request interceptor invocation.
-      for (Header header : interceptorHeaders) {
-        requestBuilder.addHeader(header.getName(), header.getValue());
-      }
-      for (Map.Entry<String, String> entry : interceptorPathParams.entrySet()) {
-        requestBuilder.addPathParam(entry.getKey(), entry.getValue());
-      }
-      for (Map.Entry<String, String> entry : interceptorQueryParams.entrySet()) {
-        requestBuilder.addQueryParam(entry.getKey(), entry.getValue());
-      }
-
-      requestBuilder.setArguments(args.toArray(new Object[args.size()]));
-
-      return requestBuilder.build();
-    }
-
-    @SuppressWarnings("UnusedDeclaration") // Accessed via reflection.
-    private Object dummySync() {
-      return null;
-    }
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/RestAdapterTest.java b/rapidrest/src/test/java/retrofit/RestAdapterTest.java
deleted file mode 100644
index 464427255..000000000
--- a/rapidrest/src/test/java/retrofit/RestAdapterTest.java
+++ /dev/null
@@ -1,633 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.Executor;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.ArgumentCaptor;
-import org.mockito.invocation.InvocationOnMock;
-import org.mockito.stubbing.Answer;
-import rapid.rest.client.Client;
-import rapid.rest.client.Header;
-import rapid.rest.client.Request;
-import rapid.rest.client.Response;
-import rapid.rest.converter.ConversionException;
-import rapid.rest.http.Body;
-import rapid.rest.http.GET;
-import rapid.rest.http.Headers;
-import rapid.rest.http.POST;
-import rapid.rest.http.Path;
-import rapid.rest.http.Streaming;
-import rapid.rest.mime.TypedInput;
-import rapid.rest.mime.TypedOutput;
-import rapid.rest.mime.TypedString;
-import rx.Observable;
-import rx.functions.Action1;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyInt;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.same;
-import static org.mockito.Mockito.atLeastOnce;
-import static org.mockito.Mockito.doReturn;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
-import static org.mockito.Mockito.when;
-import static rapid.rest.Profiler.RequestInformation;
-import static rapid.restAdapter.LogLevel.BASIC;
-import static rapid.restAdapter.LogLevel.FULL;
-import static rapid.restAdapter.LogLevel.HEADERS;
-import static rapid.rest.Utils.SynchronousExecutor;
-
-public class RestAdapterTest {
-  private static final List<Header> NO_HEADERS = Collections.emptyList();
-  private static final List<Header> TWO_HEADERS =
-      Arrays.asList(new Header("Content-Type", "application/json"),
-          new Header("Content-Length", "42"));
-
-  /** Not all servers play nice and add content-type headers to responses. */
-  private static final TypedInput NO_MIME_BODY = new TypedInput() {
-    @Override public String mimeType() {
-      return null;
-    }
-
-    @Override public long length() {
-      return 2;
-    }
-
-    @Override public InputStream in() throws IOException {
-      return new ByteArrayInputStream("Hi".getBytes("UTF-8"));
-    }
-  };
-
-  private interface Example {
-    @Headers("Foo: Bar")
-    @GET("/") String something();
-    @Headers("Foo: Bar")
-    @POST("/") Object something(@Body TypedOutput body);
-    @GET("/") void something(Callback<String> callback);
-    @GET("/") Response direct();
-    @GET("/") void direct(Callback<Response> callback);
-    @GET("/") @Streaming Response streaming();
-    @POST("/") Observable<String> observable(@Body String body);
-    @POST("/{x}/{y}") Observable<Response> observable(@Path("x") String x, @Path("y") String y);
-  }
-  private interface InvalidExample extends Example {
-  }
-
-  private Client mockClient;
-  private Executor mockRequestExecutor;
-  private Executor mockCallbackExecutor;
-  private Profiler<Object> mockProfiler;
-  private Example example;
-
-  @SuppressWarnings("unchecked") // Mock profiler type erasure.
-  @Before public void setUp() throws Exception{
-    mockClient = mock(Client.class);
-    mockRequestExecutor = spy(new SynchronousExecutor());
-    mockCallbackExecutor = spy(new SynchronousExecutor());
-    mockProfiler = mock(Profiler.class);
-
-    example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .build()
-        .create(Example.class);
-  }
-
-  @Test public void objectMethodsStillWork() {
-    assertThat(example.hashCode()).isNotZero();
-    assertThat(example.equals(this)).isFalse();
-    assertThat(example.toString()).isNotEmpty();
-  }
-
-  @Test public void interfaceWithExtendIsNotSupported() {
-    try {
-      new RestAdapter.Builder().setEndpoint("http://foo/").build().create(InvalidExample.class);
-      fail("Interface inheritance should not be supported.");
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Interface definitions must not extend other interfaces.");
-    }
-  }
-
-  @Test public void profilerObjectPassThrough() throws Exception {
-    Object data = new Object();
-    when(mockProfiler.beforeCall()).thenReturn(data);
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("Hey")));
-
-    example.something();
-
-    verify(mockProfiler).beforeCall();
-    verify(mockClient).execute(any(Request.class));
-    verify(mockProfiler).afterCall(any(RequestInformation.class), anyInt(), eq(200), same(data));
-  }
-
-  @Test public void logRequestResponseBasic() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(BASIC)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("Hi")));
-
-    example.something();
-    assertThat(logMessages).hasSize(2);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");
-  }
-
-  @Test public void logRequestResponseHeaders() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(HEADERS)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("Hi")));
-
-    example.something();
-    assertThat(logMessages).hasSize(7);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("---> END HTTP (no body)");
-    assertThat(logMessages.get(3)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(4)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(5)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(6)).isEqualTo("<--- END HTTP (2-byte body)");
-  }
-
-  @Test public void logSuccessfulRequestResponseFullWhenResponseBodyPresent() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, new TypedString("{}")));
-
-    example.something(new TypedString("Hi"));
-    assertThat(logMessages).hasSize(13);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP POST http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("Content-Type: text/plain; charset=UTF-8");
-    assertThat(logMessages.get(3)).isEqualTo("Content-Length: 2");
-    assertThat(logMessages.get(4)).isEqualTo("");
-    assertThat(logMessages.get(5)).isEqualTo("Hi");
-    assertThat(logMessages.get(6)).isEqualTo("---> END HTTP (2-byte body)");
-    assertThat(logMessages.get(7)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(8)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(9)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(10)).isEqualTo("");
-    assertThat(logMessages.get(11)).isEqualTo("{}");
-    assertThat(logMessages.get(12)).isEqualTo("<--- END HTTP (2-byte body)");
-  }
-
-  @Test public void logSuccessfulRequestResponseFullWhenResponseBodyAbsent() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, null));
-
-    example.something();
-    assertThat(logMessages).hasSize(7);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("---> END HTTP (no body)");
-    assertThat(logMessages.get(3)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(4)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(5)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(6)).isEqualTo("<--- END HTTP (0-byte body)");
-  }
-
-  @Test public void successfulRequestResponseWhenMimeTypeMissing() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, NO_MIME_BODY));
-
-    example.something();
-  }
-
-  @Test public void logSuccessfulRequestResponseFullWhenMimeTypeMissing() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", TWO_HEADERS, NO_MIME_BODY));
-
-    example.something();
-    assertThat(logMessages).hasSize(9);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("---> END HTTP (no body)");
-    assertThat(logMessages.get(3)).matches("<--- HTTP 200 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(4)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(5)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(6)).isEqualTo("");
-    assertThat(logMessages.get(7)).isEqualTo("Hi");
-    assertThat(logMessages.get(8)).isEqualTo("<--- END HTTP (2-byte body)");
-  }
-
-  @Test public void synchronousDoesNotUseExecutors() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("Hi")));
-
-    example.something();
-
-    verifyZeroInteractions(mockRequestExecutor);
-    verifyZeroInteractions(mockCallbackExecutor);
-  }
-
-  @Test public void asynchronousUsesExecutors() throws Exception {
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("Hey"));
-    when(mockClient.execute(any(Request.class))).thenReturn(response);
-    Callback<String> callback = mock(Callback.class);
-
-    example.something(callback);
-
-    verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
-    verify(mockCallbackExecutor).execute(any(Runnable.class));
-    verify(callback).success(eq("Hey"), same(response));
-  }
-
-  @Test public void malformedResponseThrowsConversionException() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("{")));
-
-    try {
-      example.something();
-      fail("RetrofitError expected on malformed response body.");
-    } catch (RetrofitError e) {
-      assertThat(e.getResponse().getStatus()).isEqualTo(200);
-      assertThat(e.getCause()).isInstanceOf(ConversionException.class);
-      assertThat(e.getResponse().getBody()).isNull();
-    }
-  }
-
-  @Test public void errorResponseThrowsHttpError() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 500, "Internal Server Error", NO_HEADERS, null));
-
-    try {
-      example.something();
-      fail("RetrofitError expected on non-2XX response code.");
-    } catch (RetrofitError e) {
-      assertThat(e.getResponse().getStatus()).isEqualTo(500);
-      assertThat(e.getSuccessType()).isEqualTo(String.class);
-    }
-  }
-
-  @Test public void logErrorRequestResponseFullWhenMimeTypeMissing() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    Response responseMissingMimeType = //
-        new Response("http://example.com/", 403, "Forbidden", TWO_HEADERS, NO_MIME_BODY);
-
-    when(mockClient.execute(any(Request.class))).thenReturn(responseMissingMimeType);
-
-    try {
-      example.something();
-      fail("RetrofitError expected on non-2XX response code.");
-    } catch (RetrofitError e) {
-      assertThat(e.getResponse().getStatus()).isEqualTo(403);
-    }
-
-    assertThat(logMessages).hasSize(9);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("---> END HTTP (no body)");
-    assertThat(logMessages.get(3)).matches("<--- HTTP 403 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(4)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(5)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(6)).isEqualTo("");
-    assertThat(logMessages.get(7)).isEqualTo("Hi");
-    assertThat(logMessages.get(8)).isEqualTo("<--- END HTTP (2-byte body)");
-  }
-
-  @Test public void logErrorRequestResponseFullWhenResponseBodyAbsent() throws Exception {
-    final List<String> logMessages = new ArrayList<String>();
-    RestAdapter.Log log = new RestAdapter.Log() {
-      public void log(String message) {
-        logMessages.add(message);
-      }
-    };
-
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(log)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 500, "Internal Server Error", TWO_HEADERS, null));
-
-    try {
-      example.something();
-      fail("RetrofitError expected on non-2XX response code.");
-    } catch (RetrofitError e) {
-      assertThat(e.getResponse().getStatus()).isEqualTo(500);
-    }
-
-    assertThat(logMessages).hasSize(7);
-    assertThat(logMessages.get(0)).isEqualTo("---> HTTP GET http://example.com/");
-    assertThat(logMessages.get(1)).isEqualTo("Foo: Bar");
-    assertThat(logMessages.get(2)).isEqualTo("---> END HTTP (no body)");
-    assertThat(logMessages.get(3)).matches("<--- HTTP 500 http://example.com/ \\([0-9]+ms\\)");
-    assertThat(logMessages.get(4)).isEqualTo("Content-Type: application/json");
-    assertThat(logMessages.get(5)).isEqualTo("Content-Length: 42");
-    assertThat(logMessages.get(6)).isEqualTo("<--- END HTTP (0-byte body)");
-  }
-
-  @Test public void clientExceptionThrowsNetworkError() throws Exception {
-    IOException exception = new IOException("I'm broken!");
-    when(mockClient.execute(any(Request.class))).thenThrow(exception);
-
-    try {
-      example.something();
-      fail("RetrofitError expected when client throws exception.");
-    } catch (RetrofitError e) {
-      assertThat(e.getCause()).isSameAs(exception);
-    }
-  }
-
-  @Test public void bodyTypedInputExceptionThrowsNetworkError() throws Exception {
-    TypedInput body = spy(new TypedString("{}"));
-    InputStream bodyStream = mock(InputStream.class, new Answer() {
-      @Override public Object answer(InvocationOnMock invocation) throws Throwable {
-        throw new IOException("I'm broken!");
-      }
-    });
-    doReturn(bodyStream).when(body).in();
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, body));
-
-    try {
-      example.something();
-      fail("RetrofitError expected on malformed response body.");
-    } catch (RetrofitError e) {
-      assertThat(e.isNetworkError());
-      assertThat(e.getCause()).isInstanceOf(IOException.class);
-      assertThat(e.getCause()).hasMessage("I'm broken!");
-    }
-  }
-
-  @Test public void unexpectedExceptionThrows() {
-    RuntimeException exception = new RuntimeException("More breakage.");
-    when(mockProfiler.beforeCall()).thenThrow(exception);
-
-    try {
-      example.something();
-      fail("RetrofitError expected when unexpected exception thrown.");
-    } catch (RetrofitError e) {
-      assertThat(e.getCause()).isSameAs(exception);
-    }
-  }
-
-  @Test public void getResponseDirectly() throws Exception {
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, null);
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(response);
-    assertThat(example.direct()).isSameAs(response);
-  }
-
-  @Test public void streamingResponse() throws Exception {
-    final InputStream is = new ByteArrayInputStream("Hey".getBytes("UTF-8"));
-    TypedInput in = new TypedInput() {
-      @Override public String mimeType() {
-        return "text/string";
-      }
-
-      @Override public long length() {
-        return 3;
-      }
-
-      @Override public InputStream in() throws IOException {
-        return is;
-      }
-    };
-
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, in));
-
-    Response response = example.streaming();
-    assertThat(response.getBody().in()).isSameAs(is);
-  }
-
-  @Test public void closeInputStream() throws IOException {
-    // Set logger and profiler on example to make sure we exercise all the code paths.
-    Example example = new RestAdapter.Builder() //
-        .setClient(mockClient)
-        .setExecutors(mockRequestExecutor, mockCallbackExecutor)
-        .setEndpoint("http://example.com")
-        .setProfiler(mockProfiler)
-        .setLog(RestAdapter.Log.NONE)
-        .setLogLevel(FULL)
-        .build()
-        .create(Example.class);
-
-    ByteArrayInputStream is = spy(new ByteArrayInputStream("hello".getBytes()));
-    TypedInput typedInput = mock(TypedInput.class);
-    when(typedInput.in()).thenReturn(is);
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, typedInput);
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(response);
-    example.something();
-    verify(is).close();
-  }
-
-  @Test public void getResponseDirectlyAsync() throws Exception {
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("Hey"));
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(response);
-    Callback<Response> callback = mock(Callback.class);
-
-    example.direct(callback);
-
-    verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
-    verify(mockCallbackExecutor).execute(any(Runnable.class));
-    verify(callback).success(eq(response), same(response));
-  }
-
-  @Test public void getAsync() throws Exception {
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("Hey"));
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(response);
-    Callback<String> callback = mock(Callback.class);
-
-    example.something(callback);
-
-    verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
-    verify(mockCallbackExecutor).execute(any(Runnable.class));
-
-    ArgumentCaptor<String> responseCaptor = ArgumentCaptor.forClass(String.class);
-    verify(callback).success(responseCaptor.capture(), same(response));
-    assertThat(responseCaptor.getValue()).isEqualTo("Hey");
-  }
-
-
-  @Test public void errorAsync() throws Exception {
-    Response response = new Response("http://example.com/", 500, "Broken!", NO_HEADERS, new TypedString("Hey"));
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(response);
-    Callback<String> callback = mock(Callback.class);
-
-    example.something(callback);
-
-    verify(mockRequestExecutor).execute(any(CallbackRunnable.class));
-    verify(mockCallbackExecutor).execute(any(Runnable.class));
-
-    ArgumentCaptor<RetrofitError> errorCaptor = ArgumentCaptor.forClass(RetrofitError.class);
-    verify(callback).failure(errorCaptor.capture());
-    RetrofitError error = errorCaptor.getValue();
-    assertThat(error.getResponse().getStatus()).isEqualTo(500);
-    assertThat(error.getResponse().getReason()).isEqualTo("Broken!");
-    assertThat(error.getSuccessType()).isEqualTo(String.class);
-    assertThat(error.getBody()).isEqualTo("Hey");
-  }
-
-  @Test public void observableCallsOnNext() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("hello")));
-    Action1<String> action = mock(Action1.class);
-    example.observable("Howdy").subscribe(action);
-    verify(action).call(eq("hello"));
-  }
-
-  @Test public void observableCallsOnError() throws Exception {
-    when(mockClient.execute(any(Request.class))) //
-        .thenReturn(new Response("http://example.com/", 300, "FAIL", NO_HEADERS, new TypedString("bummer")));
-    Action1<String> onSuccess = mock(Action1.class);
-    Action1<Throwable> onError = mock(Action1.class);
-    example.observable("Howdy").subscribe(onSuccess, onError);
-    verifyZeroInteractions(onSuccess);
-
-    ArgumentCaptor<RetrofitError> errorCaptor = ArgumentCaptor.forClass(RetrofitError.class);
-    verify(onError).call(errorCaptor.capture());
-    RetrofitError value = errorCaptor.getValue();
-    assertThat(value.getSuccessType()).isEqualTo(String.class);
-  }
-
-  @Test public void observableHandlesParams() throws Exception {
-    ArgumentCaptor<Request> requestCaptor = ArgumentCaptor.forClass(Request.class);
-    when(mockClient.execute(requestCaptor.capture())) //
-        .thenReturn(new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("hello")));
-    ArgumentCaptor<Response> responseCaptor = ArgumentCaptor.forClass(Response.class);
-    Action1<Response> action = mock(Action1.class);
-    example.observable("X", "Y").subscribe(action);
-
-    Request request = requestCaptor.getValue();
-    assertThat(request.getUrl()).contains("/X/Y");
-
-    verify(action).call(responseCaptor.capture());
-    Response response = responseCaptor.getValue();
-    assertThat(response.getStatus()).isEqualTo(200);
-  }
-
-  @Test public void observableUsesHttpExecutor() throws IOException {
-    Response response = new Response("http://example.com/", 200, "OK", NO_HEADERS, new TypedString("hello"));
-    when(mockClient.execute(any(Request.class))).thenReturn(response);
-
-    example.observable("Howdy").subscribe(mock(Action1.class));
-
-    verify(mockRequestExecutor, atLeastOnce()).execute(any(Runnable.class));
-    verifyZeroInteractions(mockCallbackExecutor);
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/RestMethodInfoTest.java b/rapidrest/src/test/java/retrofit/RestMethodInfoTest.java
deleted file mode 100644
index 661484af6..000000000
--- a/rapidrest/src/test/java/retrofit/RestMethodInfoTest.java
+++ /dev/null
@@ -1,1322 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import com.google.gson.reflect.TypeToken;
-import java.lang.annotation.Retention;
-import java.lang.annotation.Target;
-import java.lang.reflect.Method;
-import java.lang.reflect.Type;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import org.junit.Test;
-import rapid.rest.client.Response;
-import rapid.rest.http.Body;
-import rapid.rest.http.DELETE;
-import rapid.rest.http.EncodedPath;
-import rapid.rest.http.EncodedQuery;
-import rapid.rest.http.EncodedQueryMap;
-import rapid.rest.http.Field;
-import rapid.rest.http.FieldMap;
-import rapid.rest.http.FormUrlEncoded;
-import rapid.rest.http.GET;
-import rapid.rest.http.HEAD;
-import rapid.rest.http.Header;
-import rapid.rest.http.Headers;
-import rapid.rest.http.Multipart;
-import rapid.rest.http.PATCH;
-import rapid.rest.http.POST;
-import rapid.rest.http.PUT;
-import rapid.rest.http.Part;
-import rapid.rest.http.PartMap;
-import rapid.rest.http.Path;
-import rapid.rest.http.Query;
-import rapid.rest.http.QueryMap;
-import rapid.rest.http.RestMethod;
-import rapid.rest.http.Streaming;
-import rapid.rest.mime.TypedOutput;
-import rx.Observable;
-
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-import static rapid.restMethodInfo.ParamUsage.BODY;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_PATH;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY;
-import static rapid.restMethodInfo.ParamUsage.ENCODED_QUERY_MAP;
-import static rapid.restMethodInfo.ParamUsage.FIELD;
-import static rapid.restMethodInfo.ParamUsage.FIELD_MAP;
-import static rapid.restMethodInfo.ParamUsage.HEADER;
-import static rapid.restMethodInfo.ParamUsage.PATH;
-import static rapid.restMethodInfo.ParamUsage.QUERY;
-import static rapid.restMethodInfo.ParamUsage.QUERY_MAP;
-import static rapid.restMethodInfo.RequestType.FORM_URL_ENCODED;
-import static rapid.restMethodInfo.RequestType.MULTIPART;
-import static rapid.restMethodInfo.RequestType.SIMPLE;
-
-@SuppressWarnings("unused") // Lots of unused parameters for example code.
-public class RestMethodInfoTest {
-  @Test public void pathParameterParsing() throws Exception {
-    expectParams("/");
-    expectParams("/foo");
-    expectParams("/foo/bar");
-    expectParams("/foo/bar/{}");
-    expectParams("/foo/bar/{taco}", "taco");
-    expectParams("/foo/bar/{t}", "t");
-    expectParams("/foo/bar/{!!!}/"); // Invalid parameter.
-    expectParams("/foo/bar/{}/{taco}", "taco");
-    expectParams("/foo/bar/{taco}/or/{burrito}", "taco", "burrito");
-    expectParams("/foo/bar/{taco}/or/{taco}", "taco");
-    expectParams("/foo/bar/{taco-shell}", "taco-shell");
-    expectParams("/foo/bar/{taco_shell}", "taco_shell");
-    expectParams("/foo/bar/{sha256}", "sha256");
-    expectParams("/foo/bar/{TACO}", "TACO");
-    expectParams("/foo/bar/{taco}/{tAco}/{taCo}", "taco", "tAco", "taCo");
-    expectParams("/foo/bar/{1}"); // Invalid parameter, name cannot start with digit.
-  }
-
-  private static void expectParams(String path, String... expected) {
-    Set<String> calculated = RestMethodInfo.parsePathParameters(path);
-    assertThat(calculated).hasSize(expected.length);
-    if (expected.length > 0) {
-      assertThat(calculated).containsExactly(expected);
-    }
-  }
-
-  @Test public void pathMustBePrefixedWithSlash() {
-    class Example {
-      @GET("foo/bar") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: URL path \"foo/bar\" must start with '/'.");
-    }
-  }
-
-  @Test public void concreteCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(ResponseCallback cb) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void concreteCallbackTypesWithParams() {
-    class Example {
-      @GET("/foo") void a(@Query("id") String id, ResponseCallback cb) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void genericCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(Callback<Response> cb) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void genericCallbackTypesWithParams() {
-    class Example {
-      @GET("/foo") void a(@Query("id") String id, Callback<Response> c) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void wildcardGenericCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(Callback<? extends Response> c) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void genericCallbackWithGenericType() {
-    class Example {
-      @GET("/foo") void a(Callback<List<String>> c) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  // RestMethodInfo reconstructs this type from MultimapCallback<String, Set<Long>>. It contains
-  // a little of everything: a parameterized type, a generic array, and a wildcard.
-  private static Map<? extends String, Set<Long>[]> extendingGenericCallbackType;
-
-  @Test public void extendingGenericCallback() throws Exception {
-    class Example {
-      @GET("/foo") void a(MultimapCallback<String, Set<Long>> callback) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.responseObjectType).isEqualTo(
-        RestMethodInfoTest.class.getDeclaredField("extendingGenericCallbackType").getGenericType());
-  }
-
-  @Test public void synchronousResponse() {
-    class Example {
-      @GET("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isTrue();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void synchronousGenericResponse() {
-    class Example {
-      @GET("/foo") List<String> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isTrue();
-
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  @Test public void streamingResponse() {
-    class Example {
-      @GET("/foo") @Streaming Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.isStreaming).isTrue();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void streamingResponseWithCallback() {
-    class Example {
-      @GET("/foo") @Streaming void a(Callback<Response> callback) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.isStreaming).isTrue();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void streamingResponseNotAllowed() {
-    class Example {
-      @GET("/foo") @Streaming String a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Only methods having Response as data type are allowed to have @Streaming annotation.");
-    }
-  }
-
-  @Test public void streamingResponseWithCallbackNotAllowed() {
-    class Example {
-      @GET("/foo") @Streaming void a(Callback<String> callback) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Only methods having Response as data type are allowed to have @Streaming annotation.");
-    }
-  }
-
-  @Test public void observableResponse() {
-    class Example {
-      @GET("/foo") Observable<Response> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.isObservable).isTrue();
-    assertThat(methodInfo.responseObjectType).isEqualTo(Response.class);
-  }
-
-  @Test public void observableGenericResponse() {
-    class Example {
-      @GET("/foo") Observable<List<String>> a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    assertThat(methodInfo.isSynchronous).isFalse();
-    assertThat(methodInfo.isObservable).isTrue();
-    Type expected = new TypeToken<List<String>>() {}.getType();
-    assertThat(methodInfo.responseObjectType).isEqualTo(expected);
-  }
-
-  @Test public void observableWithCallback() {
-    class Example {
-      @GET("/foo") Observable<Response> a(Callback<Response> callback) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    try {
-      new RestMethodInfo(method);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Must have return type or Callback as last argument, not both.");
-    }
-  }
-
-  @Test public void missingCallbackTypes() {
-    class Example {
-      @GET("/foo") void a(@Query("id") String id) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    try {
-      new RestMethodInfo(method);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Must have either a return type or Callback as last argument.");
-    }
-  }
-
-  @Test public void nonParameterizedCallbackFails() {
-    class Example {
-      @GET("/foo") void a(Callback cb) {
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    try {
-      new RestMethodInfo(method);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Last parameter must be of type Callback<X> or Callback<? super X>.");
-    }
-  }
-
-  @Test public void synchronousWithAsyncCallback() {
-    class Example {
-      @GET("/foo") Response a(Callback<Response> callback) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    try {
-      new RestMethodInfo(method);
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Must have return type or Callback as last argument, not both.");
-    }
-  }
-
-  @Test
-  public void lackingMethod() {
-    class Example {
-      Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: HTTP method annotation is required (e.g., @GET, @POST, etc.).");
-    }
-  }
-
-  @Test public void deleteMethod() {
-    class Example {
-      @DELETE("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("DELETE");
-    assertThat(methodInfo.requestHasBody).isFalse();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void getMethod() {
-    class Example {
-      @GET("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("GET");
-    assertThat(methodInfo.requestHasBody).isFalse();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void headMethod() {
-    class Example {
-      @HEAD("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("HEAD");
-    assertThat(methodInfo.requestHasBody).isFalse();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void postMethod() {
-    class Example {
-      @POST("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("POST");
-    assertThat(methodInfo.requestHasBody).isTrue();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void putMethod() {
-    class Example {
-      @PUT("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("PUT");
-    assertThat(methodInfo.requestHasBody).isTrue();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void patchMethod() {
-    class Example {
-      @PATCH("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("PATCH");
-    assertThat(methodInfo.requestHasBody).isTrue();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void twoMethodsFail() {
-    class Example {
-      @PATCH("/foo") @POST("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Only one HTTP method is allowed. Found: PATCH and POST.");
-    }
-  }
-
-  @RestMethod("BAD")
-  @Target(METHOD) @Retention(RUNTIME)
-  private @interface BAD_CUSTOM {
-    int value();
-  }
-
-  @Test public void customWithoutRestMethod() {
-    class Example {
-      @BAD_CUSTOM(12) Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Failed to extract String 'value' from @BAD_CUSTOM annotation.");
-    }
-  }
-
-  @RestMethod("CUSTOM1")
-  @Target(METHOD) @Retention(RUNTIME)
-  private @interface CUSTOM1 {
-    String value();
-  }
-
-  @Test public void custom1Method() {
-    class Example {
-      @CUSTOM1("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("CUSTOM1");
-    assertThat(methodInfo.requestHasBody).isFalse();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @RestMethod(value = "CUSTOM2", hasBody = true)
-  @Target(METHOD) @Retention(RUNTIME)
-  private @interface CUSTOM2 {
-    String value();
-  }
-
-  @Test public void custom2Method() {
-    class Example {
-      @CUSTOM2("/foo") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestMethod).isEqualTo("CUSTOM2");
-    assertThat(methodInfo.requestHasBody).isTrue();
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-  }
-
-  @Test public void singlePathQueryParam() {
-    class Example {
-      @GET("/foo?a=b")
-      Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestUrl).isEqualTo("/foo");
-    assertThat(methodInfo.requestQuery).isEqualTo("a=b");
-  }
-
-  @Test public void emptyParams() {
-    class Example {
-      @GET("/") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).isEmpty();
-    assertThat(methodInfo.requestParamUsage).isEmpty();
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void singlePathParam() {
-    class Example {
-      @GET("/{a}") Response a(@Path("a") String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly("a");
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(PATH);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void singleEncodedPathParam() {
-    class Example {
-      @GET("/{a}") Response a(@EncodedPath("a") String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly("a");
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(ENCODED_PATH);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void singleQueryParam() {
-    class Example {
-      @GET("/") Response a(@Query("a") String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly("a");
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(QUERY);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void singleEncodedQueryParam() {
-    class Example {
-      @GET("/") Response a(@EncodedQuery("a") String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly("a");
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(ENCODED_QUERY);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void multipleQueryParams() {
-    class Example {
-      @GET("/") Response a(@Query("a") String a, @Query("b") String b, @Query("c") String c) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(3).containsExactly("a", "b", "c");
-    assertThat(methodInfo.requestParamUsage).hasSize(3).containsExactly(QUERY, QUERY, QUERY);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void queryMap() {
-    class Example {
-      @GET("/") Response a(@QueryMap Map<String, String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(QUERY_MAP);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void queryMapMustBeAMap() {
-    class Example {
-      @GET("/") Response a(@QueryMap List<String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: @QueryMap parameter type must be Map. (parameter #1)");
-    }
-  }
-
-  @Test public void encodedQueryMap() {
-    class Example {
-      @GET("/") Response a(@EncodedQueryMap Map<String, String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(ENCODED_QUERY_MAP);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void encodedQueryMapMustBeAMap() {
-    class Example {
-      @GET("/") Response a(@EncodedQueryMap List<String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @EncodedQueryMap parameter type must be Map. (parameter #1)");
-    }
-  }
-
-  @Test public void fieldMap() {
-    class Example {
-      @FormUrlEncoded @POST("/") Response a(@FieldMap Map<String, String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsNull();
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(FIELD_MAP);
-    assertThat(methodInfo.requestType).isEqualTo(FORM_URL_ENCODED);
-  }
-
-  @Test public void fieldMapMustBeAMap() {
-    class Example {
-      @FormUrlEncoded @POST("/") Response a(@FieldMap List<String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: @FieldMap parameter type must be Map. (parameter #1)");
-    }
-  }
-
-  @Test public void bodyObject() {
-    class Example {
-      @PUT("/") Response a(@Body Object o) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly(new String[] { null });
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(BODY);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void bodyTypedBytes() {
-    class Example {
-      @PUT("/") Response a(@Body TypedOutput o) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).hasSize(1).containsExactly(new String[] { null });
-    assertThat(methodInfo.requestParamUsage).hasSize(1).containsExactly(BODY);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void twoBodies() {
-    class Example {
-      @PUT("/") Response a(@Body int o1, @Body int o2) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: Multiple @Body method annotations found.");
-    }
-  }
-
-  @Test public void bodyInNonBodyRequest() {
-    class Example {
-      @Multipart
-      @PUT("/") Response a(@Part("one") int o1, @Body int o2) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Body parameters cannot be used with form or multi-part encoding. (parameter #2)");
-    }
-  }
-
-  @Test public void bodyWithOtherParams() {
-    class Example {
-      @PUT("/{a}/{c}") Response a(@Path("a") int a, @Body int b, @Path("c") int c) {
-        return null;
-      }
-    }
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).containsExactly("a", null, "c");
-    assertThat(methodInfo.requestParamUsage).containsExactly(PATH, BODY, PATH);
-    assertThat(methodInfo.requestType).isEqualTo(SIMPLE);
-  }
-
-  @Test public void pathParamNonPathParamAndTypedBytes() {
-    class Example {
-      @PUT("/{a}") Response a(@Path("a") int a, @Path("b") int b, @Body int c) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: URL \"/{a}\" does not contain \"{b}\". (parameter #2)");
-    }
-  }
-
-  @Test public void parameterWithoutAnnotation() {
-    class Example {
-      @GET("/") Response a(String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: No Retrofit annotation found. (parameter #1)");
-    }
-  }
-
-  @Test public void nonBodyHttpMethodWithSingleEntity() {
-    class Example {
-      @GET("/") Response a(@Body Object o) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Non-body HTTP method cannot contain @Body or @TypedOutput.");
-    }
-  }
-
-  @Test public void simpleMultipart() {
-    class Example {
-      @Multipart @PUT("/")
-      Response a(@Part("a") TypedOutput a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
-  }
-
-  @Test public void twoTypedBytesMultipart() {
-    class Example {
-      @Multipart @PUT("/")
-      Response a(@Part("a") TypedOutput a, @Part("b") TypedOutput b) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
-  }
-
-  @Test public void twoTypesMultipart() {
-    class Example {
-      @Multipart @PUT("/")
-      Response a(@Part("a") TypedOutput a, @Part("b") int b) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
-  }
-
-  @Test public void partMapMultipart() {
-    class Example {
-      @Multipart @PUT("/")
-      Response a(@Part("a") TypedOutput a, @PartMap Map<String, String> b) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestType).isEqualTo(MULTIPART);
-  }
-
-  @Test public void implicitMultipartForbidden() {
-    class Example {
-      @POST("/") Response a(@Part("a") int a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Part parameters can only be used with multipart encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void implicitMultipartWithPartMapForbidden() {
-    class Example {
-      @POST("/") Response a(@PartMap Map<String, String> params) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @PartMap parameters can only be used with multipart encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void multipartFailsOnNonBodyMethod() {
-    class Example {
-      @Multipart @GET("/") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: Multipart can only be specified on HTTP methods with request body (e.g., @POST).");
-    }
-  }
-
-  @Test public void multipartFailsWithNoParts() {
-    class Example {
-      @Multipart @POST("/") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: Multipart method must contain at least one @Part.");
-    }
-  }
-
-  @Test public void implicitFormEncodingByFieldForbidden() {
-    class Example {
-      @POST("/") Response a(@Field("a") int a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Field parameters can only be used with form encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void implicitFormEncodingByFieldMapForbidden() {
-    class Example {
-      @POST("/") Response a(@FieldMap Map<String, String> a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @FieldMap parameters can only be used with form encoding. (parameter #1)");
-    }
-  }
-
-  @Test public void formEncodingFailsOnNonBodyMethod() {
-    class Example {
-      @FormUrlEncoded @GET("/") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: FormUrlEncoded can only be specified on HTTP methods with request body (e.g., @POST).");
-    }
-  }
-
-  @Test public void formEncodingFailsWithNoParts() {
-    class Example {
-      @FormUrlEncoded @POST("/") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: Form-encoded method must contain at least one @Field.");
-    }
-  }
-
-  @Test public void simpleFormEncoding() {
-    class Example {
-      @FormUrlEncoded @PUT("/")
-      Response a(@Field("a") String a) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestType).isEqualTo(FORM_URL_ENCODED);
-    assertThat(methodInfo.requestParamUsage).containsExactly(FIELD);
-  }
-
-  @Test public void headersFailWhenEmptyOnMethod() {
-    class Example {
-      @GET("/") @Headers({}) Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: @Headers annotation is empty.");
-    }
-  }
-
-  @Test public void headersFailWhenMalformed() {
-    class Example {
-      @GET("/") @Headers("Malformed") Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Headers value must be in the form \"Name: Value\". Found: \"Malformed\"");
-    }
-  }
-
-  @Test public void twoMethodHeaders() {
-
-    class Example {
-      @GET("/") @Headers({
-        "X-Foo: Bar",
-        "X-Ping: Pong"
-      }) Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.headers).isEqualTo(
-        Arrays.asList(new rapid.rest.client.Header("X-Foo", "Bar"),
-            new rapid.rest.client.Header("X-Ping", "Pong")));
-  }
-
-  @Test public void twoHeaderParams() {
-    class Example {
-      @GET("/")
-      Response a(@Header("a") String a, @Header("b") String b) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    methodInfo.init();
-
-    assertThat(methodInfo.requestParamNames).containsExactly("a", "b");
-    assertThat(methodInfo.requestParamUsage).containsExactly(HEADER, HEADER);
-  }
-
-  @Test public void headerParamMustBeString() {
-    class Example {
-      @GET("/")
-      Response a(@Header("a") TypedOutput a, @Header("b") int b) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Header parameter type must be String. Found: TypedOutput. (parameter #1)");
-    }
-  }
-
-  @Test public void onlyOneEncodingIsAllowedMultipartFirst() {
-    class Example {
-      @Multipart
-      @FormUrlEncoded
-      @POST("/")
-      Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: Only one encoding annotation is allowed.");
-    }
-  }
-
-  @Test public void onlyOneEncodingIsAllowedFormEncodingFirst() {
-    class Example {
-      @FormUrlEncoded
-      @Multipart
-      @POST("/")
-      Response a() {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage("Example.a: Only one encoding annotation is allowed.");
-    }
-  }
-
-  @Test public void invalidPathParam() throws Exception {
-    class Example {
-      @GET("/") Response a(@Path("hey!") String thing) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: @Path parameter name must match \\{([a-zA-Z][a-zA-Z0-9_-]*)\\}. Found: hey! (parameter #1)");
-    }
-  }
-
-  @Test public void pathParamNotAllowedInQuery() throws Exception {
-    class Example {
-      @GET("/foo?bar={bar}") Response a(@Path("bar") String thing) {
-        return null;
-      }
-    }
-
-    Method method = TestingUtils.getMethod(Example.class, "a");
-    RestMethodInfo methodInfo = new RestMethodInfo(method);
-    try {
-      methodInfo.init();
-      fail();
-    } catch (IllegalArgumentException e) {
-      assertThat(e).hasMessage(
-          "Example.a: URL query string \"bar={bar}\" must not have replace block.");
-    }
-  }
-
-  private static interface ResponseCallback extends Callback<Response> {
-  }
-
-  private static interface MultimapCallback<K, V> extends Callback<Map<? extends K, V[]>> {
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/RxSupportTest.java b/rapidrest/src/test/java/retrofit/RxSupportTest.java
deleted file mode 100644
index c3ac34b50..000000000
--- a/rapidrest/src/test/java/retrofit/RxSupportTest.java
+++ /dev/null
@@ -1,192 +0,0 @@
-package retrofit;
-
-import java.util.ArrayDeque;
-import java.util.Collections;
-import java.util.Deque;
-import java.util.Iterator;
-import java.util.concurrent.Executor;
-import java.util.concurrent.TimeUnit;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import rapid.rest.client.Header;
-import rapid.rest.client.Response;
-import rapid.rest.mime.TypedInput;
-import rx.Observer;
-import rx.Subscription;
-import rx.schedulers.Schedulers;
-import rx.schedulers.TestScheduler;
-
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static rapid.rest.RequestInterceptor.RequestFacade;
-import static rapid.rest.RxSupport.Invoker;
-
-public class RxSupportTest {
-
-  private Object response;
-  private ResponseWrapper responseWrapper;
-  private Invoker invoker = spy(new Invoker() {
-    @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {
-      return responseWrapper;
-    }
-  });
-  private RequestInterceptor requestInterceptor = spy(new RequestInterceptor() {
-    @Override public void intercept(RequestFacade request) {
-    }
-  });
-
-  private QueuedSynchronousExecutor executor;
-  private RxSupport rxSupport;
-
-  @Mock Observer<Object> subscriber;
-
-  @Before public void setUp() {
-    MockitoAnnotations.initMocks(this);
-    response = new Object();
-    responseWrapper = new ResponseWrapper(
-            new Response(
-                    "http://example.com", 200, "Success",
-                    Collections.<Header>emptyList(), mock(TypedInput.class)
-            ), response
-    );
-    executor = spy(new QueuedSynchronousExecutor());
-    rxSupport = new RxSupport(executor, ErrorHandler.DEFAULT, requestInterceptor);
-  }
-
-  @Test public void observableCallsOnNextOnHttpExecutor() {
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
-  }
-
-  @Test public void observableCallsOnNextOnHttpExecutorWithSubscriber() {
-    TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker).subscribeOn(test).subscribe(subscriber);
-    // Subscription is handled via the Scheduler.
-    test.triggerActions();
-    // This will only execute up to the executor in OnSubscribe.
-    verify(subscriber, never()).onNext(any());
-    // Upon continuing the executor we then run the retrofit request.
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
-  }
-
-  @Test public void observableUnSubscribesDoesNotExecuteCallable() throws Exception {
-    Subscription subscription = rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    verify(subscriber, never()).onNext(any());
-
-    // UnSubscribe here should cancel the queued runnable.
-    subscription.unsubscribe();
-
-    executor.executeNextInQueue();
-    verify(invoker, never()).invoke(any(RequestInterceptor.class));
-    verify(subscriber, never()).onNext(response);
-  }
-
-  @Test public void observableCallsOperatorsOffHttpExecutor() {
-    TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
-            .delaySubscription(1000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
-
-    verify(subscriber, never()).onNext(any());
-    test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
-    // Upon continuing the executor we then run the retrofit request.
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
-  }
-
-  @Test public void observableDoesNotLockExecutor() {
-    TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
-            .delay(1000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
-
-    rxSupport.createRequestObservable(invoker)
-            .delay(2000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
-
-    // Nothing fired yet
-    verify(subscriber, never()).onNext(any());
-    // Subscriptions should of been queued up and executed even tho we delayed on the Subscriber.
-    executor.executeNextInQueue();
-    executor.executeNextInQueue();
-
-    verify(subscriber, never()).onNext(response);
-
-    test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
-    verify(subscriber, times(1)).onNext(response);
-
-    test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
-    verify(subscriber, times(2)).onNext(response);
-  }
-
-  @Test public void observableRespectsObserveOn() throws Exception {
-    TestScheduler observe = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
-            .observeOn(observe)
-            .subscribe(subscriber);
-
-    verify(subscriber, never()).onNext(any());
-    executor.executeNextInQueue();
-
-    // Should have no response yet, but callback should of been executed.
-    verify(subscriber, never()).onNext(any());
-    verify(invoker, times(1)).invoke(any(RequestInterceptor.class));
-
-    // Forward the Observable Scheduler
-    observe.triggerActions();
-    verify(subscriber, times(1)).onNext(response);
-  }
-
-  @Test public void observableCallsInterceptorForEverySubscription() throws Exception {
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-
-    // The interceptor should have been called for each request upon subscription.
-    verify(requestInterceptor, times(2)).intercept(any(RequestFacade.class));
-
-    // Background execution of the requests should not touch the interceptor.
-    executor.executeAll();
-    verifyNoMoreInteractions(requestInterceptor);
-  }
-
-  /**
-   * Test Executor to iterate through Executions to aid in checking
-   * that the Observable implementation is correct.
-   */
-  static class QueuedSynchronousExecutor implements Executor {
-    Deque<Runnable> runnableQueue = new ArrayDeque<Runnable>();
-
-    @Override public void execute(Runnable runnable) {
-      runnableQueue.add(runnable);
-    }
-
-    /**
-     * Will throw exception if you are expecting something to be added to the Executor
-     * and it hasn't.
-     */
-    void executeNextInQueue() {
-      runnableQueue.removeFirst().run();
-    }
-
-    /**
-     * Executes any queued executions on the executor.
-     */
-    void executeAll() {
-      Iterator<Runnable> iterator = runnableQueue.iterator();
-      while (iterator.hasNext()) {
-        Runnable next = iterator.next();
-        next.run();
-        iterator.remove();
-      }
-    }
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/TestingUtils.java b/rapidrest/src/test/java/retrofit/TestingUtils.java
deleted file mode 100644
index de15b6689..000000000
--- a/rapidrest/src/test/java/retrofit/TestingUtils.java
+++ /dev/null
@@ -1,33 +0,0 @@
-// Copyright 2013 Square, Inc.
-package retrofit;
-
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.util.Map;
-import rapid.rest.mime.MultipartTypedOutput;
-import rapid.rest.mime.TypedOutput;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public abstract class TestingUtils {
-  public static Method getMethod(Class c, String name) {
-    for (Method method : c.getDeclaredMethods()) {
-      if (method.getName().equals(name)) {
-        return method;
-      }
-    }
-    throw new IllegalArgumentException("Unknown method '" + name + "' on " + c);
-  }
-
-  public static TypedOutput createMultipart(Map<String, TypedOutput> parts) {
-    MultipartTypedOutput typedOutput = new MultipartTypedOutput();
-    for (Map.Entry<String, TypedOutput> part : parts.entrySet()) {
-      typedOutput.addPart(part.getKey(), part.getValue());
-    }
-    return typedOutput;
-  }
-
-  public static void assertBytes(byte[] bytes, String expected) throws IOException {
-    assertThat(new String(bytes, "UTF-8")).isEqualTo(expected);
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/client/ApacheClientTest.java b/rapidrest/src/test/java/retrofit/client/ApacheClientTest.java
deleted file mode 100644
index 3bfed0d6f..000000000
--- a/rapidrest/src/test/java/retrofit/client/ApacheClientTest.java
+++ /dev/null
@@ -1,128 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.client;
-
-import com.google.common.io.ByteStreams;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpEntityEnclosingRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.HttpVersion;
-import org.apache.http.StatusLine;
-import org.apache.http.client.methods.HttpUriRequest;
-import org.apache.http.message.BasicHttpResponse;
-import org.apache.http.message.BasicStatusLine;
-import org.junit.Test;
-import rapid.rest.TestingUtils;
-import rapid.rest.mime.MultipartTypedOutput;
-import rapid.rest.mime.TypedOutput;
-import rapid.rest.mime.TypedString;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static rapid.rest.TestingUtils.assertBytes;
-import static rapid.rest.client.ApacheClient.TypedOutputEntity;
-
-public class ApacheClientTest {
-  private static final String HOST = "http://example.com";
-
-  @Test public void get() {
-    Request request = new Request("GET", HOST + "/foo/bar/?kit=kat", null, null);
-    HttpUriRequest apacheRequest = ApacheClient.createRequest(request);
-
-    assertThat(apacheRequest.getMethod()).isEqualTo("GET");
-    assertThat(apacheRequest.getURI().toString()).isEqualTo(HOST + "/foo/bar/?kit=kat");
-    assertThat(apacheRequest.getAllHeaders()).isEmpty();
-
-    if (apacheRequest instanceof HttpEntityEnclosingRequest) {
-      HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) apacheRequest;
-      assertThat(entityRequest.getEntity()).isNull();
-    }
-  }
-
-  @Test public void post() throws IOException {
-    TypedString body = new TypedString("hi");
-    Request request = new Request("POST", HOST + "/foo/bar/", null, body);
-    HttpUriRequest apacheRequest = ApacheClient.createRequest(request);
-
-    assertThat(apacheRequest.getMethod()).isEqualTo("POST");
-    assertThat(apacheRequest.getURI().toString()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(apacheRequest.getAllHeaders()).isEmpty();
-
-    assertThat(apacheRequest).isInstanceOf(HttpEntityEnclosingRequest.class);
-    HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) apacheRequest;
-    HttpEntity entity = entityRequest.getEntity();
-    assertThat(entity).isNotNull();
-    assertBytes(ByteStreams.toByteArray(entity.getContent()), "hi");
-  }
-
-  @Test public void multipart() {
-    Map<String, TypedOutput> bodyParams = new LinkedHashMap<String, TypedOutput>();
-    bodyParams.put("foo", new TypedString("bar"));
-    bodyParams.put("ping", new TypedString("pong"));
-    TypedOutput body = TestingUtils.createMultipart(bodyParams);
-    Request request = new Request("POST", HOST + "/that/", null, body);
-    HttpUriRequest apacheRequest = ApacheClient.createRequest(request);
-
-    assertThat(apacheRequest.getMethod()).isEqualTo("POST");
-    assertThat(apacheRequest.getURI().toString()).isEqualTo(HOST + "/that/");
-    assertThat(apacheRequest.getAllHeaders()).isEmpty();
-
-    assertThat(apacheRequest).isInstanceOf(HttpEntityEnclosingRequest.class);
-    HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) apacheRequest;
-    TypedOutputEntity entity = (TypedOutputEntity) entityRequest.getEntity();
-    assertThat(entity.typedOutput).isInstanceOf(MultipartTypedOutput.class);
-    // TODO test more?
-  }
-
-  @Test public void headers() {
-    List<Header> headers = new ArrayList<Header>();
-    headers.add(new Header("kit", "kat"));
-    headers.add(new Header("foo", "bar"));
-    Request request = new Request("GET", HOST + "/this/", headers, null);
-    HttpUriRequest apacheRequest = ApacheClient.createRequest(request);
-
-    assertThat(apacheRequest.getAllHeaders()).hasSize(2);
-    org.apache.http.Header kit = apacheRequest.getFirstHeader("kit");
-    assertThat(kit).isNotNull();
-    assertThat(kit.getValue()).isEqualTo("kat");
-    org.apache.http.Header foo = apacheRequest.getFirstHeader("foo");
-    assertThat(foo).isNotNull();
-    assertThat(foo.getValue()).isEqualTo("bar");
-  }
-
-  @Test public void response() throws IOException {
-    StatusLine statusLine = new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK");
-    HttpResponse apacheResponse = new BasicHttpResponse(statusLine);
-    apacheResponse.setEntity(new TypedOutputEntity(new TypedString("hello")));
-    apacheResponse.addHeader("Content-Type", "text/plain");
-    apacheResponse.addHeader("foo", "bar");
-    apacheResponse.addHeader("kit", "kat");
-    Response response = ApacheClient.parseResponse(HOST + "/foo/bar/", apacheResponse);
-
-    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("OK");
-    assertThat(response.getHeaders()).hasSize(3) //
-        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),
-            new Header("Content-Type", "text/plain"));
-    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
-  }
-
-  @Test public void emptyResponse() throws IOException {
-    StatusLine statusLine = new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK");
-    HttpResponse apacheResponse = new BasicHttpResponse(statusLine);
-    apacheResponse.addHeader("foo", "bar");
-    apacheResponse.addHeader("kit", "kat");
-    Response response = ApacheClient.parseResponse(HOST + "/foo/bar/", apacheResponse);
-
-    assertThat(response.getUrl()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("OK");
-    assertThat(response.getHeaders()).hasSize(2) //
-        .containsExactly(new Header("foo", "bar"), new Header("kit", "kat"));
-    assertThat(response.getBody()).isNull();
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java b/rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java
deleted file mode 100644
index 329c81c87..000000000
--- a/rapidrest/src/test/java/retrofit/client/ClientIntegrationTest.java
+++ /dev/null
@@ -1,84 +0,0 @@
-//// Copyright 2014 Square, Inc.
-//package rapid.rest.client;
-//
-//import com.squareup.okhttp.mockwebserver.MockResponse;
-//import com.squareup.okhttp.mockwebserver.MockWebServer;
-//import com.squareup.okhttp.mockwebserver.RecordedRequest;
-//import java.io.IOException;
-//import java.util.Arrays;
-//import java.util.List;
-//import org.junit.After;
-//import org.junit.Before;
-//import org.junit.Test;
-//import org.junit.runner.RunWith;
-//import org.junit.runners.Parameterized;
-//import rapid.restAdapter;
-//import rapid.rest.http.Body;
-//import rapid.rest.http.GET;
-//import rapid.rest.http.POST;
-//
-//import static org.assertj.core.api.Assertions.assertThat;
-//
-//@RunWith(Parameterized.class)
-//public class ClientIntegrationTest {
-//  @Parameterized.Parameters
-//  public static List<Object[]> clients() {
-//    return Arrays.asList(new Object[][] {
-//        { new OkClient() },
-//        { new UrlConnectionClient() },
-//        { new ApacheClient() }
-//    });
-//  }
-//
-//  private final Client client;
-//
-//  private MockWebServer server;
-//  private Service service;
-//
-//  public ClientIntegrationTest(Client client) {
-//    this.client = client;
-//  }
-//
-//  @Before public void setUp() throws Exception {
-//    server = new MockWebServer();
-//    server.play();
-//
-//    RestAdapter restAdapter = new RestAdapter.Builder()
-//        .setEndpoint("http://" + server.getHostName() + ":" + server.getPort())
-//        .setClient(client)
-//        .build();
-//    service = restAdapter.create(Service.class);
-//  }
-//
-//  @After public void tearDown() throws IOException {
-//    server.shutdown();
-//  }
-//
-//  private interface Service {
-//    @GET("/get")
-//    Response get();
-//
-//    @POST("/post")
-//    Response post(@Body List<String> body);
-//  }
-//
-//  @Test public void get() throws InterruptedException {
-//    server.enqueue(new MockResponse().setBody("{}"));
-//    service.get();
-//
-//    RecordedRequest request = server.takeRequest();
-//    assertThat(request.getPath()).isEqualTo("/get");
-//    assertThat(request.getBody()).isEmpty();
-//  }
-//
-//  @Test public void post() throws InterruptedException {
-//    server.enqueue(new MockResponse().setBody("{}"));
-//    service.post(Arrays.asList("Hello", "World!"));
-//
-//    RecordedRequest request = server.takeRequest();
-//    assertThat(request.getPath()).isEqualTo("/post");
-//    assertThat(request.getHeader("Content-Type")).isEqualTo("application/json; charset=UTF-8");
-//    assertThat(request.getHeader("Content-Length")).isEqualTo("18");
-//    assertThat(request.getUtf8Body()).isEqualTo("[\"Hello\",\"World!\"]");
-//  }
-//}
diff --git a/rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java b/rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java
deleted file mode 100644
index 098df9b02..000000000
--- a/rapidrest/src/test/java/retrofit/client/DummyHttpUrlConnection.java
+++ /dev/null
@@ -1,115 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.client;
-
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Provides POJO behavior for all of the APIs {@link rapid.rest.client.UrlConnectionClient}
- * interacts with.
- */
-public class DummyHttpUrlConnection extends HttpURLConnection {
-  private final Map<String, List<String>> responseHeaders =
-      new LinkedHashMap<String, List<String>>();
-  private final Map<String, List<String>> requestHeaders =
-      new LinkedHashMap<String, List<String>>();
-  private final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
-  private int responseCode;
-  private String responseMessage;
-  private InputStream inputStream;
-  private InputStream errorStream;
-
-  protected DummyHttpUrlConnection(String url) throws MalformedURLException {
-    super(new URL(url));
-  }
-
-  public void setResponseCode(int responseCode) {
-    this.responseCode = responseCode;
-  }
-
-  @Override public int getResponseCode() throws IOException {
-    return responseCode;
-  }
-
-  public void setResponseMessage(String responseMessage) {
-    this.responseMessage = responseMessage;
-  }
-
-  @Override public String getResponseMessage() throws IOException {
-    return responseMessage;
-  }
-
-  @Override public ByteArrayOutputStream getOutputStream() throws IOException {
-    return outputStream;
-  }
-
-  public void setInputStream(InputStream inputStream) {
-    this.inputStream = inputStream;
-  }
-
-  @Override public InputStream getInputStream() throws IOException {
-    return inputStream;
-  }
-
-  public void setErrorStream(InputStream errorStream) {
-    this.errorStream = errorStream;
-  }
-
-  @Override public InputStream getErrorStream() {
-    return errorStream;
-  }
-
-  public void addResponseHeader(String name, String value) {
-    List<String> values = responseHeaders.get(name);
-    if (values == null) {
-      values = new ArrayList<String>();
-      responseHeaders.put(name, values);
-    }
-    values.add(value);
-  }
-
-  @Override public Map<String, List<String>> getHeaderFields() {
-    return responseHeaders;
-  }
-
-  @Override public void addRequestProperty(String name, String value) {
-    List<String> values = requestHeaders.get(name);
-    if (values == null) {
-      values = new ArrayList<String>();
-      requestHeaders.put(name, values);
-    }
-    values.add(value);
-  }
-
-  @Override public Map<String, List<String>> getRequestProperties() {
-    return requestHeaders;
-  }
-
-  @Override public String getRequestProperty(String name) {
-    List<String> values = requestHeaders.get(name);
-    if (values == null || values.isEmpty()) {
-      return null;
-    }
-    return values.get(0);
-  }
-
-  @Override public void disconnect() {
-    throw new AssertionError("Not implemented.");
-  }
-
-  @Override public boolean usingProxy() {
-    return false;
-  }
-
-  @Override public void connect() throws IOException {
-    throw new AssertionError("Not implemented.");
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java b/rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java
deleted file mode 100644
index e8d1523dc..000000000
--- a/rapidrest/src/test/java/retrofit/client/UrlConnectionClientTest.java
+++ /dev/null
@@ -1,165 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.client;
-
-import com.google.common.io.ByteStreams;
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.net.HttpURLConnection;
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import org.junit.Test;
-import rapid.rest.TestingUtils;
-import rapid.rest.mime.TypedOutput;
-import rapid.rest.mime.TypedString;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static rapid.rest.TestingUtils.assertBytes;
-
-public class UrlConnectionClientTest {
-  private static final String HOST = "http://example.com";
-
-  private UrlConnectionClient client = new UrlConnectionClient() {
-    @Override protected HttpURLConnection openConnection(Request request) throws IOException {
-      return new DummyHttpUrlConnection(request.getUrl());
-    }
-  };
-
-  @Test public void get() throws Exception {
-    Request request = new Request("GET", HOST + "/foo/bar/?kit=kat", null, null);
-
-    HttpURLConnection connection = client.openConnection(request);
-    client.prepareRequest(connection, request);
-
-    assertThat(connection.getRequestMethod()).isEqualTo("GET");
-    assertThat(connection.getURL().toString()).isEqualTo(HOST + "/foo/bar/?kit=kat");
-    assertThat(connection.getHeaderFields()).isEmpty();
-  }
-
-  @Test public void post() throws Exception {
-    TypedString body = new TypedString("hi");
-    Request request = new Request("POST", HOST + "/foo/bar/", null, body);
-
-    DummyHttpUrlConnection connection = (DummyHttpUrlConnection) client.openConnection(request);
-    client.prepareRequest(connection, request);
-
-    assertThat(connection.getRequestMethod()).isEqualTo("POST");
-    assertThat(connection.getURL().toString()).isEqualTo(HOST + "/foo/bar/");
-    assertThat(connection.getRequestProperties()).hasSize(2);
-    assertThat(connection.getRequestProperty("Content-Type")) //
-        .isEqualTo("text/plain; charset=UTF-8");
-    assertThat(connection.getRequestProperty("Content-Length")).isEqualTo("2");
-    assertBytes(connection.getOutputStream().toByteArray(), "hi");
-  }
-
-  @Test public void multipart() throws Exception {
-    Map<String, TypedOutput> bodyParams = new LinkedHashMap<String, TypedOutput>();
-    bodyParams.put("foo", new TypedString("bar"));
-    bodyParams.put("ping", new TypedString("pong"));
-    TypedOutput body = TestingUtils.createMultipart(bodyParams);
-    Request request = new Request("POST", HOST + "/that/", null, body);
-
-    DummyHttpUrlConnection connection = (DummyHttpUrlConnection) client.openConnection(request);
-    client.prepareRequest(connection, request);
-
-    byte[] output = connection.getOutputStream().toByteArray();
-
-    assertThat(connection.getRequestMethod()).isEqualTo("POST");
-    assertThat(connection.getURL().toString()).isEqualTo(HOST + "/that/");
-    assertThat(connection.getRequestProperties()).hasSize(2);
-    assertThat(connection.getRequestProperty("Content-Type")).startsWith("multipart/form-data;");
-    assertThat(connection.getRequestProperty("Content-Length")).isEqualTo(String.valueOf(output.length));
-    assertThat(output.length).isGreaterThan(0);
-  }
-
-  @Test public void headers() throws Exception {
-    List<Header> headers = new ArrayList<Header>();
-    headers.add(new Header("kit", "kat"));
-    headers.add(new Header("foo", "bar"));
-    Request request = new Request("GET", HOST + "/this/", headers, null);
-
-    HttpURLConnection connection = client.openConnection(request);
-    client.prepareRequest(connection, request);
-
-    assertThat(connection.getRequestProperties()).hasSize(2);
-    assertThat(connection.getRequestProperty("kit")).isEqualTo("kat");
-    assertThat(connection.getRequestProperty("foo")).isEqualTo("bar");
-  }
-
-  @Test public void response() throws Exception {
-    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
-    connection.setResponseCode(200);
-    connection.setResponseMessage("OK");
-    connection.addResponseHeader("Content-Type", "text/plain");
-    connection.addResponseHeader("foo", "bar");
-    connection.addResponseHeader("kit", "kat");
-    connection.setInputStream(new ByteArrayInputStream("hello".getBytes("UTF-8")));
-    Response response = client.readResponse(connection);
-
-    assertThat(response.getUrl()).isEqualTo(HOST);
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("OK");
-    assertThat(response.getHeaders()).hasSize(3) //
-        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),
-            new Header("Content-Type", "text/plain"));
-    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
-  }
-
-  @Test public void createdResponse() throws Exception {
-    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
-    connection.setResponseCode(201);
-    connection.setResponseMessage("OK");
-    connection.addResponseHeader("Content-Type", "text/plain");
-    connection.addResponseHeader("foo", "bar");
-    connection.addResponseHeader("kit", "kat");
-    connection.setInputStream(new ByteArrayInputStream("hello".getBytes("UTF-8")));
-    Response response = client.readResponse(connection);
-
-    assertThat(response.getUrl()).isEqualTo(HOST);
-    assertThat(response.getStatus()).isEqualTo(201);
-    assertThat(response.getReason()).isEqualTo("OK");
-    assertThat(response.getHeaders()).hasSize(3) //
-        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),
-            new Header("Content-Type", "text/plain"));
-    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
-  }
-
-  @Test public void errorResponse() throws Exception {
-    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
-    connection.setResponseCode(401);
-    connection.setResponseMessage("Not Authorized");
-    connection.addResponseHeader("Content-Type", "text/plain");
-    connection.setInputStream(new ByteArrayInputStream("input".getBytes("UTF-8")));
-    connection.setErrorStream(new ByteArrayInputStream("error".getBytes("UTF-8")));
-    Response response = client.readResponse(connection);
-
-    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "error");
-  }
-
-  @Test public void emptyResponse() throws Exception {
-    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
-    connection.setResponseCode(200);
-    connection.setResponseMessage("OK");
-    connection.addResponseHeader("foo", "bar");
-    connection.addResponseHeader("kit", "kat");
-    Response response = client.readResponse(connection);
-
-    assertThat(response.getUrl()).isEqualTo(HOST);
-    assertThat(response.getStatus()).isEqualTo(200);
-    assertThat(response.getReason()).isEqualTo("OK");
-    assertThat(response.getHeaders()).hasSize(2) //
-        .containsExactly(new Header("foo", "bar"), new Header("kit", "kat"));
-  }
-
-  @Test public void noReasonMessage() throws Exception {
-    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
-    connection.setResponseCode(504);
-    connection.setResponseMessage(null);
-    Response response = client.readResponse(connection);
-
-    assertThat(response.getUrl()).isEqualTo(HOST);
-    assertThat(response.getStatus()).isEqualTo(504);
-    assertThat(response.getReason()).isEmpty();
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java b/rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
deleted file mode 100644
index 212da813f..000000000
--- a/rapidrest/src/test/java/retrofit/mime/FormUrlEncodingTypedOutputTest.java
+++ /dev/null
@@ -1,48 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.mime;
-
-import java.io.ByteArrayOutputStream;
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class FormUrlEncodingTypedOutputTest {
-  @Test public void urlEncoding() throws Exception {
-    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
-    fe.addField("a&b", "c=d");
-    fe.addField("space, the", "final frontier");
-
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    fe.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
-    assertThat(actual).isEqualTo("a%26b=c%3Dd&space%2C+the=final+frontier");
-  }
-
-  @Test public void utf8encoding() throws Exception {
-    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
-    fe.addField("ooɟ", "ɹɐq");
-
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    fe.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
-    assertThat(actual).isEqualTo("oo%C9%9F=%C9%B9%C9%90q");
-  }
-
-  @Test public void encodedPairs() throws Exception {
-    FormUrlEncodedTypedOutput fe = new FormUrlEncodedTypedOutput();
-    fe.addField("sim", "ple");
-
-    ByteArrayOutputStream out1 = new ByteArrayOutputStream();
-    fe.writeTo(out1);
-    String actual1 = new String(out1.toByteArray(), "UTF-8");
-    assertThat(actual1).isEqualTo("sim=ple");
-
-    fe.addField("hey", "there");
-    fe.addField("help", "me");
-
-    ByteArrayOutputStream out2 = new ByteArrayOutputStream();
-    fe.writeTo(out2);
-    String actual2 = new String(out2.toByteArray(), "UTF-8");
-    assertThat(actual2).isEqualTo("sim=ple&hey=there&help=me");
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/MimeHelper.java b/rapidrest/src/test/java/retrofit/mime/MimeHelper.java
deleted file mode 100644
index 4f788bde2..000000000
--- a/rapidrest/src/test/java/retrofit/mime/MimeHelper.java
+++ /dev/null
@@ -1,14 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.mime;
-
-import java.util.List;
-
-public class MimeHelper {
-  public static List<byte[]> getParts(MultipartTypedOutput output) {
-    try {
-      return output.getParts();
-    } catch (Exception e) {
-      throw new RuntimeException(e);
-    }
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java b/rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java
deleted file mode 100644
index f6e2b0e72..000000000
--- a/rapidrest/src/test/java/retrofit/mime/MimeUtilTest.java
+++ /dev/null
@@ -1,23 +0,0 @@
-// Copyright 2012 Square, Inc.
-package rapid.rest.mime;
-
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static rapid.rest.mime.MimeUtil.parseCharset;
-
-public class MimeUtilTest {
-  @Test public void charsetParsing() {
-    assertThat(parseCharset("text/plain;charset=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; charset=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain;  charset=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; \tcharset=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; \r\n\tcharset=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; CHARSET=utf-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; charset=UTF-8")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; charset=\"\\u\\tf-\\8\"")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; charset=\"utf-8\"")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain;charset=utf-8;other=thing")).isEqualToIgnoringCase("UTF-8");
-    assertThat(parseCharset("text/plain; notthecharset=utf-16;")).isEqualToIgnoringCase("UTF-8");
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java b/rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
deleted file mode 100644
index 02ed3d943..000000000
--- a/rapidrest/src/test/java/retrofit/mime/MultipartTypedOutputTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-// Copyright 2013 Square, Inc.
-package rapid.rest.mime;
-
-import java.io.ByteArrayOutputStream;
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class MultipartTypedOutputTest {
-  @Test public void singlePart() throws Exception {
-    String expected = "" //
-        + "--123\r\n"
-        + "Content-Disposition: form-data; name=\"greet\"\r\n"
-        + "Content-Type: text/plain; charset=UTF-8\r\n"
-        + "Content-Length: 13\r\n"
-        + "Content-Transfer-Encoding: binary\r\n" //
-        + "\r\n" //
-        + "Hello, World!\r\n" //
-        + "--123--";
-
-    MultipartTypedOutput mto = new MultipartTypedOutput("123");
-    mto.addPart("greet", new TypedString("Hello, World!"));
-
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    mto.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
-    assertThat(actual).isEqualTo(expected);
-    assertThat(mto.mimeType()).isEqualTo("multipart/form-data; boundary=123");
-  }
-
-  @Test public void threeParts() throws Exception {
-    String expected = ""
-        + "--123\r\n"
-        + "Content-Disposition: form-data; name=\"quick\"\r\n"
-        + "Content-Type: text/plain; charset=UTF-8\r\n"
-        + "Content-Length: 5\r\n"
-        + "Content-Transfer-Encoding: binary\r\n"
-        + "\r\n"
-        + "brown\r\n"
-        + "--123\r\n"
-        + "Content-Disposition: form-data; name=\"fox\"\r\n"
-        + "Content-Type: text/plain; charset=UTF-8\r\n"
-        + "Content-Length: 5\r\n"
-        + "Content-Transfer-Encoding: binary\r\n"
-        + "\r\n"
-        + "jumps\r\n"
-        + "--123\r\n"
-        + "Content-Disposition: form-data; name=\"lazy\"\r\n"
-        + "Content-Type: text/plain; charset=UTF-8\r\n"
-        + "Content-Length: 3\r\n"
-        + "Content-Transfer-Encoding: binary\r\n"
-        + "\r\n"
-        + "dog\r\n"
-        + "--123--";
-
-    MultipartTypedOutput mto = new MultipartTypedOutput("123");
-    mto.addPart("quick", new TypedString("brown"));
-    mto.addPart("fox", new TypedString("jumps"));
-    mto.addPart("lazy", new TypedString("dog"));
-
-    ByteArrayOutputStream out = new ByteArrayOutputStream();
-    mto.writeTo(out);
-    String actual = new String(out.toByteArray(), "UTF-8");
-    assertThat(actual).isEqualTo(expected);
-    assertThat(mto.mimeType()).isEqualTo("multipart/form-data; boundary=123");
-  }
-
-  @Test public void withPartOfUnknownLength() throws Exception {
-    MultipartTypedOutput mto = new MultipartTypedOutput("123");
-
-    mto.addPart("first", new TypedString("value"));
-    mto.addPart("second", new TypedString("unknown size") {
-      @Override public long length() {
-        return -1;
-      }
-    });
-
-    assertThat(mto.length()).isEqualTo(-1);
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java b/rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java
deleted file mode 100644
index 53f25fb18..000000000
--- a/rapidrest/src/test/java/retrofit/mime/TypedByteArrayTest.java
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright 2010 Square, Inc.
-package rapid.rest.mime;
-
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class TypedByteArrayTest {
-  private static final String GIF = "image/gif";
-
-  @Test public void objectEquals() {
-    TypedByteArray a1 = new TypedByteArray(GIF, new byte[] { 10, 20 });
-    TypedByteArray a2 = new TypedByteArray(GIF, new byte[] { 10, 20 });
-    TypedByteArray b = new TypedByteArray(GIF, new byte[] { 8, 12 });
-
-    assertThat(a1).isEqualTo(a2);
-    assertThat(a1.hashCode()).isEqualTo(a2.hashCode());
-    assertThat(a1).isNotEqualTo(b);
-    assertThat(a1.hashCode()).isNotEqualTo(b.hashCode());
-  }
-}
diff --git a/rapidrest/src/test/java/retrofit/mime/TypedFileTest.java b/rapidrest/src/test/java/retrofit/mime/TypedFileTest.java
deleted file mode 100644
index b73d50b54..000000000
--- a/rapidrest/src/test/java/retrofit/mime/TypedFileTest.java
+++ /dev/null
@@ -1,55 +0,0 @@
-// Copyright 2010 Square, Inc.
-package rapid.rest.mime;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-public class TypedFileTest {
-  private static final String PNG = "image/png";
-
-  @Test public void objectEquals() {
-    TypedFile a1 = new TypedFile(PNG, new File("a.png"));
-    TypedFile a2 = new TypedFile(PNG, new File("a.png"));
-    TypedFile b = new TypedFile(PNG, new File("b.png"));
-
-    assertThat(a1).isNotEqualTo(b);
-    assertThat(a1.hashCode()).isNotEqualTo(b.hashCode());
-    assertThat(a1).isEqualTo(a2);
-    assertThat(a1.hashCode()).isEqualTo(a2.hashCode());
-  }
-
-  @Test public void objectToString() {
-    File file = new File("/path/to/file.png");
-
-    assertThat(new TypedFile(PNG, file).toString()) //
-        .isEqualTo(file.getAbsolutePath() + " (image/png)");
-  }
-
-  @Test public void length() throws IOException {
-    File tempFile = File.createTempFile("foo", ".tmp");
-    try {
-      TypedFile typedFile = new TypedFile(PNG, tempFile);
-      assertThat(typedFile.length()).isZero();
-
-      writeToFile(tempFile, new byte[] { 0, 1, 2, 3, 4 });
-
-      assertThat(tempFile.length()).isEqualTo(5);
-      assertThat(typedFile.length()).isEqualTo(5);
-    } finally {
-      tempFile.delete();
-    }
-  }
-
-  private static void writeToFile(File file, byte[] data) throws IOException {
-    FileOutputStream fos = new FileOutputStream(file);
-    try {
-      fos.write(data);
-    } finally {
-      fos.close();
-    }
-  }
-}
