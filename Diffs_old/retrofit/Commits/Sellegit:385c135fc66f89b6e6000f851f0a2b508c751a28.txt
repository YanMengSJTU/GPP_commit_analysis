diff --git a/retrofit/src/main/java/retrofit/RxSupport.java b/retrofit/src/main/java/retrofit/RxSupport.java
deleted file mode 100644
index 494e8efa3..000000000
--- a/retrofit/src/main/java/retrofit/RxSupport.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package retrofit;
-
-//import rx.Observable;
-//import rx.Subscriber;
-
-/**
- * Utilities for supporting RxJava Observables.
- * <p>
- * RxJava might not be on the available to use. Check {@link Platform#HAS_RX_JAVA} before calling.
- */
-//final class RxSupport {
-//  interface Invoker {
-//    void invoke(Callback callback);
-//
-//    interface Callback {
-//      void next(Object o);
-//      void error(Throwable t);
-//    }
-//  }
-//
-//  RxSupport() {
-//  }
-//
-//  Observable createRequestObservable(final Invoker invoker) {
-//    return Observable.create(new Observable.OnSubscribe<Object>() {
-//      @Override public void call(final Subscriber<? super Object> subscriber) {
-//        invoker.invoke(new Invoker.Callback() {
-//          @Override public void next(Object o) {
-//            if (!subscriber.isUnsubscribed()) {
-//              subscriber.onNext(o);
-//              subscriber.onCompleted();
-//            }
-//          }
-//
-//          @Override public void error(Throwable t) {
-//            if (!subscriber.isUnsubscribed()) {
-//              subscriber.onError(t);
-//            }
-//          }
-//        });
-//      }
-//    });
-//  }
-//}
diff --git a/retrofit/src/main/java/retrofit/converter/GsonConverter.java b/retrofit/src/main/java/retrofit/converter/GsonConverter.java
deleted file mode 100644
index 643b7b24e..000000000
--- a/retrofit/src/main/java/retrofit/converter/GsonConverter.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * Copyright (C) 2012 Square, Inc.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package retrofit.converter;
-
-//import com.google.gson.Gson;
-//import com.squareup.okhttp.MediaType;
-//import com.squareup.okhttp.RequestBody;
-//import com.squareup.okhttp.ResponseBody;
-//import java.io.IOException;
-//import java.io.InputStream;
-//import java.io.InputStreamReader;
-//import java.lang.reflect.Type;
-//import java.nio.charset.Charset;
-//
-///**
-// * A {@link Converter} which uses GSON for serialization and deserialization of entities.
-// */
-//public class GsonConverter implements Converter {
-//  private final Gson gson;
-//  private final Charset charset;
-//  private final MediaType mediaType;
-//
-//  /**
-//   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and
-//   * decoding from JSON (when no charset is specified by a header) will use UTF-8.
-//   */
-//  public GsonConverter() {
-//    this(new Gson());
-//  }
-//
-//  /**
-//   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
-//   * decoding from JSON (when no charset is specified by a header) will use UTF-8.
-//   */
-//  public GsonConverter(Gson gson) {
-//    this(gson, Charset.forName("UTF-8"));
-//  }
-//
-//  /**
-//   * Create an instance using the supplied {@link Gson} object for conversion. Encoding to JSON and
-//   * decoding from JSON (when no charset is specified by a header) will use the specified charset.
-//   */
-//  public GsonConverter(Gson gson, Charset charset) {
-//    if (gson == null) throw new NullPointerException("gson == null");
-//    if (charset == null) throw new NullPointerException("charset == null");
-//    this.gson = gson;
-//    this.charset = charset;
-//    this.mediaType = MediaType.parse("application/json; charset=" + charset.name());
-//  }
-//
-//  @Override public Object fromBody(ResponseBody body, Type type) throws IOException {
-//    Charset charset = this.charset;
-//    if (body.contentType() != null) {
-//      charset = body.contentType().charset(charset);
-//    }
-//
-//    InputStream is = body.byteStream();
-//    try {
-//      return gson.fromJson(new InputStreamReader(is, charset), type);
-//    } finally {
-//      try {
-//        is.close();
-//      } catch (IOException ignored) {
-//      }
-//    }
-//  }
-//
-//  @Override public RequestBody toBody(Object object, Type type) {
-//    String json = gson.toJson(object, type);
-//    return RequestBody.create(mediaType, json);
-//  }
-//}
