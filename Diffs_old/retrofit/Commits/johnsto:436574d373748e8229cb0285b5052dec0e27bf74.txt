diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 431adbc00..2060ad804 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -25,6 +25,7 @@
 import retrofit.mime.FormUrlEncodedTypedOutput;
 import retrofit.mime.MultipartTypedOutput;
 import retrofit.mime.TypedOutput;
+import retrofit.serializer.Serializer;
 
 /** Builds HTTP requests from Java method invocations. */
 final class RequestBuilder {
@@ -96,10 +97,19 @@ Request build() throws UnsupportedEncodingException {
       String[] requestQueryName = methodInfo.requestQueryName;
       for (int i = 0; i < requestQueryName.length; i++) {
         String query = requestQueryName[i];
-        if (query != null && args[i] != null) {
-          String value = URLEncoder.encode(String.valueOf(args[i]), "UTF-8");
-          url.append(first ? '?' : '&').append(query).append('=').append(value);
-          first = false;
+        if (query != null) {
+          Object arg = args[i];
+          if (arg != null) {
+            Serializer serializer = methodInfo.requestSerializers[i];
+            if (serializer == null) {
+              serializer = methodInfo.defaultSerializer;
+            }
+            for (String value: serializer.serialize(arg)) {
+              value = URLEncoder.encode(value, "UTF-8");
+              url.append(first ? '?' : '&').append(query).append('=').append(value);
+              first = false;
+            }
+          }
         }
       }
     }
@@ -120,7 +130,13 @@ Request build() throws UnsupportedEncodingException {
         if (name == null) continue;
         Object arg = args[i];
         if (arg != null) {
-          headers.add(new retrofit.client.Header(name, String.valueOf(arg)));
+          Serializer serializer = methodInfo.requestSerializers[i];
+          if (serializer == null) {
+            serializer = methodInfo.defaultSerializer;
+          }
+          for (String value: serializer.serialize(arg)) {
+            headers.add(new retrofit.client.Header(name, value));
+          }
         }
       }
     }
@@ -164,7 +180,9 @@ private TypedOutput buildBody() {
         for (int i = 0; i < requestFormFields.length; i++) {
           String name = requestFormFields[i];
           if (name != null) {
-            body.addField(name, String.valueOf(args[i]));
+            Object arg = args[i];
+            String value = String.valueOf(arg);
+            body.addField(name, value);
           }
         }
         return body;
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index 60c221997..9f32cd1e9 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -38,6 +38,8 @@
 import retrofit.http.Path;
 import retrofit.http.Query;
 import retrofit.http.RestMethod;
+import retrofit.serializer.Serialize;
+import retrofit.serializer.Serializer;
 
 /** Request metadata about a service interface declaration. */
 final class RestMethodInfo {
@@ -71,10 +73,12 @@
   String requestQuery;
   boolean expectsEndpoint = false;
   List<retrofit.client.Header> headers;
+  Serializer defaultSerializer = new Serializer();
 
   // Parameter-level details
   String[] requestUrlParam;
   String[] requestQueryName;
+  Serializer[] requestSerializers;
   boolean hasQueryParams = false;
   String[] requestFormFields;
   String[] requestMultipartPart;
@@ -137,6 +141,15 @@ private void parseMethodAnnotations() {
           throw new IllegalStateException("Headers annotation was empty.");
         }
         headers = parseHeaders(headersToParse);
+      } else if (annotationType == Serialize.class) {
+        Class<Serializer> serializerClass = ((Serialize) methodAnnotation).value();
+        try {
+          defaultSerializer = serializerClass.newInstance();
+        } catch (InstantiationException e) {
+          throw new IllegalStateException("Couldn't instantiate serializer.", e);
+        } catch (IllegalAccessException e) {
+          throw new IllegalStateException("Couldn't instantiate serializer.", e);
+        }
       } else if (annotationType == Multipart.class) {
         if (requestType != RequestType.SIMPLE) {
           throw new IllegalStateException(
@@ -304,6 +317,7 @@ private void parseParameters() {
 
     String[] urlParam = new String[count];
     String[] queryName = new String[count];
+    Serializer[] serializers = new Serializer[count];
     String[] formValue = new String[count];
     String[] multipartPart = new String[count];
     String[] paramHeader = new String[count];
@@ -344,6 +358,16 @@ private void parseParameters() {
             hasQueryParams = true;
             String name = ((Query) parameterAnnotation).value();
             queryName[i] = name;
+          } else if (annotationType == Serialize.class) {
+            hasRetrofitAnnotation = true;
+            Class<Serializer> ser = ((Serialize) parameterAnnotation).value();
+            try {
+              serializers[i] = ser.newInstance();
+            } catch (InstantiationException e) {
+              throw new RuntimeException("Could not instantiate serializer", e);
+            } catch (IllegalAccessException e) {
+              throw new RuntimeException("Could not instantiate serializer", e);
+            }
           } else if (annotationType == Header.class) {
             String name = ((Header) parameterAnnotation).value();
             if (parameterType != String.class) {
@@ -408,6 +432,7 @@ private void parseParameters() {
 
     requestUrlParam = urlParam;
     requestQueryName = queryName;
+    requestSerializers = serializers;
     requestFormFields = formValue;
     requestMultipartPart = multipartPart;
     requestParamHeader = paramHeader;
diff --git a/retrofit/src/main/java/retrofit/http/Query.java b/retrofit/src/main/java/retrofit/http/Query.java
index 3ae1a3918..8c331e1fc 100644
--- a/retrofit/src/main/java/retrofit/http/Query.java
+++ b/retrofit/src/main/java/retrofit/http/Query.java
@@ -23,7 +23,7 @@
 
 /**
  * Query parameter appended to the URL. Values are converted to strings using
- * {@link String#valueOf(Object)}.
+ * {@link String#valueOf(Object)} or the provided {@link retrofit.serializer.Serialize}.
  * <p>
  * <pre>
  * &#64;GET("/list")
diff --git a/retrofit/src/main/java/retrofit/serializer/ArrayAwareSerializer.java b/retrofit/src/main/java/retrofit/serializer/ArrayAwareSerializer.java
new file mode 100644
index 000000000..a167309bd
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/serializer/ArrayAwareSerializer.java
@@ -0,0 +1,20 @@
+package retrofit.serializer;
+
+/**
+ * Serializer that recognizes arrays and emits a separate value for each element.
+ */
+public class ArrayAwareSerializer extends Serializer {
+  @Override
+  public String[] serialize(Object obj) {
+    if (obj instanceof Object[]) {
+      Object[] objs = (Object[]) obj;
+      String[] rv = new String[objs.length];
+      for (int i = 0; i < objs.length; i++) {
+        rv[i] = super.serialize(objs[i])[0];
+      }
+      return rv;
+    } else {
+      return super.serialize(obj);
+    }
+  }
+}
diff --git a/retrofit/src/main/java/retrofit/serializer/Serialize.java b/retrofit/src/main/java/retrofit/serializer/Serialize.java
new file mode 100644
index 000000000..d092e20f3
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/serializer/Serialize.java
@@ -0,0 +1,16 @@
+package retrofit.serializer;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Defines a serializer function to use when constructing the request.
+ */
+@Target(PARAMETER) @Retention(RUNTIME)
+public @interface Serialize {
+  Class<Serializer> value();
+}
+
diff --git a/retrofit/src/main/java/retrofit/serializer/Serializer.java b/retrofit/src/main/java/retrofit/serializer/Serializer.java
new file mode 100644
index 000000000..125130930
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/serializer/Serializer.java
@@ -0,0 +1,7 @@
+package retrofit.serializer;
+
+public class Serializer {
+  public String[] serialize(Object obj) {
+    return new String[] { String.valueOf(obj) };
+  }
+}
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index a2f9231fe..13837181c 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -18,6 +18,8 @@
 import retrofit.mime.MultipartTypedOutput;
 import retrofit.mime.TypedOutput;
 import retrofit.mime.TypedString;
+import retrofit.serializer.ArrayAwareSerializer;
+import retrofit.serializer.Serializer;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static retrofit.RestMethodInfo.NO_BODY;
@@ -146,6 +148,39 @@
     assertThat(request.getBody()).isNull();
   }
 
+  @Test public void getWithSerializedQueryParam() throws Exception {
+    Serializer serializer = new Serializer() {
+      @Override
+      public String[] serialize(Object obj) {
+        char[] chars = (char[]) obj;
+        return new String[] { new String(chars) };
+      }
+    };
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParam("ping", new char[] { 'p', 'o', 'n', 'g' }, serializer) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong");
+    assertThat(request.getBody()).isNull();
+  }
+
+  @Test public void getWithSerializedArrayQueryParam() throws Exception {
+    Request request = new Helper() //
+        .setMethod("GET") //
+        .setUrl("http://example.com") //
+        .setPath("/foo/bar/") //
+        .addQueryParam("ping", new String[] { "pong", "pang" }, new ArrayAwareSerializer()) //
+        .build();
+    assertThat(request.getMethod()).isEqualTo("GET");
+    assertThat(request.getHeaders()).isEmpty();
+    assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong&ping=pang");
+    assertThat(request.getBody()).isNull();
+  }
+
   @Test public void normalPost() throws Exception {
     Request request = new Helper() //
         .setMethod("POST") //
@@ -339,6 +374,7 @@ private static void assertTypedBytes(TypedOutput bytes, String expected) throws
     private final List<String> fieldParams = new ArrayList<String>();
     private final List<String> partParams = new ArrayList<String>();
     private final List<String> headerParams = new ArrayList<String>();
+    private final List<Serializer> serializers = new ArrayList<Serializer>();
     private final List<Object> args = new ArrayList<Object>();
     private final List<Header> headers = new ArrayList<Header>();
     private int bodyIndex = NO_BODY;
@@ -371,44 +407,54 @@ Helper setQuery(String query) {
     }
 
     private void addParam(String path, String query, String field, String part, String header,
-        Object value) {
+                          Object value, Serializer serializer) {
       pathParams.add(path);
       queryParams.add(query);
       fieldParams.add(field);
       partParams.add(part);
       headerParams.add(header);
+      serializers.add(serializer);
       args.add(value);
     }
 
     Helper addPathParam(String name, Object value) {
-      addParam(name, null, null, null, null, value);
+      addParam(name, null, null, null, null, value, null);
+      return this;
+    }
+
+    Helper addPathParam(String name, Object value, Serializer serializer) {
+      addParam(name, null, null, null, null, value, serializer);
       return this;
     }
 
-    Helper addQueryParam(String name, String value) {
-      addParam(null, name, null, null, null, value);
+    Helper addQueryParam(String name, Object value) {
+      return addQueryParam(name, value, null);
+    }
+
+    Helper addQueryParam(String name, Object value, Serializer serializer) {
+      addParam(null, name, null, null, null, value, serializer);
       hasQueryParams = true;
       return this;
     }
 
     Helper addField(String name, String value) {
-      addParam(null, null, name, null, null, value);
+      addParam(null, null, name, null, null, value, null);
       return this;
     }
 
     Helper addPart(String name, Object value) {
-      addParam(null, null, null, name, null, value);
+      addParam(null, null, null, name, null, value, null);
       return this;
     }
 
     Helper setBody(Object value) {
-      addParam(null, null, null, null, null, value);
+      addParam(null, null, null, null, null, value, null);
       bodyIndex = args.size() - 1;
       return this;
     }
 
     Helper addHeaderParam(String name, Object value) {
-      addParam(null, null, null, null, name, value);
+      addParam(null, null, null, null, name, value, null);
       return this;
     }
 
@@ -432,7 +478,7 @@ Helper setEndpoint(String endpoint) {
       if(args.size() > 0) {
         throw new IllegalStateException("Endpoint must be set before args");
       }
-      addParam(null, null, null, null, null, endpoint);
+      addParam(null, null, null, null, null, endpoint, null);
       return this;
     }
 
@@ -460,6 +506,7 @@ Request build() throws Exception {
       methodInfo.requestFormFields = fieldParams.toArray(new String[fieldParams.size()]);
       methodInfo.requestMultipartPart = partParams.toArray(new String[partParams.size()]);
       methodInfo.requestParamHeader = headerParams.toArray(new String[headerParams.size()]);
+      methodInfo.requestSerializers = serializers.toArray(new Serializer[serializers.size()]);
       methodInfo.bodyIndex = bodyIndex;
       methodInfo.loaded = true;
 
