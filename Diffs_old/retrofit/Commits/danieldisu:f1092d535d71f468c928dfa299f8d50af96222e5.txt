diff --git a/retrofit/src/main/java/retrofit/ResponseInterceptor.java b/retrofit/src/main/java/retrofit/ResponseInterceptor.java
index d135baf4b..ebb01dce2 100644
--- a/retrofit/src/main/java/retrofit/ResponseInterceptor.java
+++ b/retrofit/src/main/java/retrofit/ResponseInterceptor.java
@@ -2,6 +2,7 @@
 
 import org.apache.commons.io.IOUtils;
 import retrofit.client.Header;
+import retrofit.client.Request;
 import retrofit.client.Response;
 import retrofit.http.Body;
 import retrofit.mime.TypedByteArray;
@@ -19,17 +20,19 @@
 public interface ResponseInterceptor {
   ResponseFacade intercept(ResponseFacade responseFacade);
 
-  boolean shouldRepeatRequestAfterIntercept();
-
   public class ResponseFacade {
 
     private final Response originalResponse;
+    private Request request;
     private Response newResponse;
     private TypedByteArray originalResponseBody = null;
+    private boolean shouldReRunRequestAfterIntercept = false;
 
-    ResponseFacade(Response originalResponse) {
-      this.originalResponse = originalResponse;
-      this.newResponse = new Response(originalResponse.getUrl(), originalResponse.getStatus(), originalResponse.getReason(), originalResponse.getHeaders(), getOriginalResponseBody());
+    ResponseFacade(Response originalResponse, Request request) {
+      final Response originalResponseCopy = new Response(originalResponse.getUrl(), originalResponse.getStatus(), originalResponse.getReason(), originalResponse.getHeaders(), getOriginalResponseBody(originalResponse));
+      this.originalResponse = originalResponseCopy;
+      this.request = request;
+      this.newResponse = originalResponseCopy;
     }
 
     private void changeResponseBody(String newBody) {
@@ -49,11 +52,7 @@ public void addHeader(Header header) {
       this.newResponse = new Response(newResponse.getUrl(), newResponse.getStatus(), newResponse.getReason(), newResponse.getHeaders(), newResponse.getBody());
     }
 
-    public TypedByteArray getOriginalResponseBody() {
-      if(originalResponseBody != null){
-        return originalResponseBody;
-      }
-
+    public TypedByteArray getOriginalResponseBody(Response originalResponse) {
       TypedByteArray newBody = null;
       InputStream is = null;
       try {
@@ -74,6 +73,22 @@ public int getOriginalResponseStatus() {
     protected Response getNewResponse() {
       return this.newResponse;
     }
+
+    public boolean shouldReRunRequestAfter() {
+      return shouldReRunRequestAfterIntercept;
+    }
+
+    public void setShouldReRunRequestAfterIntercept(boolean shouldReRunRequestAfterIntercept) {
+      this.shouldReRunRequestAfterIntercept = shouldReRunRequestAfterIntercept;
+    }
+
+    public Response getOriginalResponse() {
+      return originalResponse;
+    }
+
+    public Request getRequest() {
+      return request;
+    }
   }
 
   /**
@@ -84,9 +99,5 @@ protected Response getNewResponse() {
     public ResponseFacade intercept(ResponseFacade responseFacade) {
       return responseFacade;
     }
-
-    @Override public boolean shouldRepeatRequestAfterIntercept() {
-      return false;
-    }
   };
 }
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index bfc4b251c..31919d7f9 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -395,10 +395,11 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, ResponseInte
           response = logAndReplaceResponse(url, response, elapsedTime);
         }
 
-        if (responseInterceptor != null) {
-          final ResponseInterceptor.ResponseFacade responseFacade = new ResponseInterceptor.ResponseFacade(response);
+        if (!responseInterceptor.equals(ResponseInterceptor.NONE)) {
+          final ResponseInterceptor.ResponseFacade responseFacade = new ResponseInterceptor.ResponseFacade(response, request);
           response = responseInterceptor.intercept(responseFacade).getNewResponse();
-          if (response.getStatus() == 401) {
+          if (responseFacade.shouldReRunRequestAfter()) {
+            // Rebuild request and execute it
             requestInterceptor.intercept(requestBuilder);
             Request newRequest = requestBuilder.build();
             response = clientProvider.get().execute(newRequest);
