diff --git a/retrofit-adapters/guava/src/main/java/retrofit2/adapter/AdapterException.java b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/AdapterException.java
new file mode 100644
index 000000000..2dafd261a
--- /dev/null
+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/AdapterException.java
@@ -0,0 +1,18 @@
+package retrofit2.adapter;
+
+import retrofit2.Response;
+
+public interface AdapterException {
+
+	/** HTTP status code. */
+	int code();
+
+	/** HTTP status message. */
+	String message();
+
+	/**
+	   * The full HTTP response. This may be null if the exception was serialized.
+	   */
+	Response<?> response();
+
+}
\ No newline at end of file
diff --git a/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java
index 301c91254..61575f150 100644
--- a/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java
+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/GuavaCallAdapterFactory.java
@@ -20,6 +20,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Callback;
diff --git a/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java
index f18a81955..14641b851 100644
--- a/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java
+++ b/retrofit-adapters/guava/src/main/java/retrofit2/adapter/guava/HttpException.java
@@ -16,9 +16,10 @@
 package retrofit2.adapter.guava;
 
 import retrofit2.Response;
+import retrofit2.adapter.AdapterException;
 
 /** Exception for an unexpected, non-2xx HTTP response. */
-public final class HttpException extends Exception {
+public final class HttpException extends Exception implements AdapterException {
   private final int code;
   private final String message;
   private final transient Response<?> response;
@@ -30,20 +31,27 @@ public HttpException(Response<?> response) {
     this.response = response;
   }
 
-  /** HTTP status code. */
-  public int code() {
+  /* (non-Javadoc)
+ * @see retrofit2.adapter.guava.ExceptionInfo#code()
+ */
+  @Override
+public int code() {
     return code;
   }
 
-  /** HTTP status message. */
-  public String message() {
+  /* (non-Javadoc)
+ * @see retrofit2.adapter.guava.ExceptionInfo#message()
+ */
+  @Override
+public String message() {
     return message;
   }
 
-  /**
-   * The full HTTP response. This may be null if the exception was serialized.
-   */
-  public Response<?> response() {
+  /* (non-Javadoc)
+ * @see retrofit2.adapter.guava.ExceptionInfo#response()
+ */
+  @Override
+public Response<?> response() {
     return response;
   }
 }
diff --git a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java
index 62d449eb9..c043b809f 100644
--- a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java
+++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/GuavaCallAdapterFactoryTest.java
@@ -24,6 +24,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.CallAdapter;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java
index 022fa9848..240768980 100644
--- a/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java
+++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/HttpException.java
@@ -31,7 +31,7 @@ public HttpException(Response<?> response) {
   }
 
   /** HTTP status code. */
-  public int code() {
+  public int getCode() {
     return code;
   }
 
@@ -43,7 +43,7 @@ public String message() {
   /**
    * The full HTTP response. This may be null if the exception was serialized.
    */
-  public Response<?> response() {
+  public Response<?> getResponse() {
     return response;
   }
 }
diff --git a/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java
index d8a87c73c..dd66ee8bc 100644
--- a/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java
+++ b/retrofit-adapters/java8/src/main/java/retrofit2/adapter/java8/Java8CallAdapterFactory.java
@@ -19,6 +19,7 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.concurrent.CompletableFuture;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Callback;
diff --git a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java
index 89d2b9537..28d188a73 100644
--- a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java
+++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/Java8CallAdapterFactoryTest.java
@@ -24,6 +24,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.CallAdapter;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java
index 78b668905..e011902f9 100644
--- a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java
+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/CompletableHelper.java
@@ -16,6 +16,7 @@
 package retrofit2.adapter.rxjava;
 
 import java.lang.reflect.Type;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Response;
diff --git a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RequestResult.java
similarity index 84%
rename from retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java
rename to retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RequestResult.java
index 8d68e9e7f..57c36c806 100644
--- a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/Result.java
+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RequestResult.java
@@ -19,21 +19,21 @@
 import retrofit2.Response;
 
 /** The result of executing an HTTP request. */
-public final class Result<T> {
-  public static <T> Result<T> error(Throwable error) {
+public final class RequestResult<T> {
+  public static <T> RequestResult<T> error(Throwable error) {
     if (error == null) throw new NullPointerException("error == null");
-    return new Result<>(null, error);
+    return new RequestResult<>(null, error);
   }
 
-  public static <T> Result<T> response(Response<T> response) {
+  public static <T> RequestResult<T> response(Response<T> response) {
     if (response == null) throw new NullPointerException("response == null");
-    return new Result<>(response, null);
+    return new RequestResult<>(response, null);
   }
 
   private final Response<T> response;
   private final Throwable error;
 
-  private Result(Response<T> response, Throwable error) {
+  private RequestResult(Response<T> response, Throwable error) {
     this.response = response;
     this.error = error;
   }
diff --git a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java
index aa135e6c4..069b71407 100644
--- a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java
+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactory.java
@@ -18,6 +18,7 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Response;
@@ -110,7 +111,7 @@ private RxJavaCallAdapterFactory(Scheduler scheduler) {
       return new ResponseCallAdapter(responseType, scheduler);
     }
 
-    if (rawObservableType == Result.class) {
+    if (rawObservableType == RequestResult.class) {
       if (!(observableType instanceof ParameterizedType)) {
         throw new IllegalStateException("Result must be parameterized"
             + " as Result<Foo> or Result<? extends Foo>");
@@ -224,15 +225,15 @@ private RxJavaCallAdapterFactory(Scheduler scheduler) {
       return responseType;
     }
 
-    @Override public <R> Observable<Result<R>> adapt(Call<R> call) {
-      Observable<Result<R>> observable = Observable.create(new CallOnSubscribe<>(call)) //
-          .map(new Func1<Response<R>, Result<R>>() {
-            @Override public Result<R> call(Response<R> response) {
-              return Result.response(response);
+    @Override public <R> Observable<RequestResult<R>> adapt(Call<R> call) {
+      Observable<RequestResult<R>> observable = Observable.create(new CallOnSubscribe<>(call)) //
+          .map(new Func1<Response<R>, RequestResult<R>>() {
+            @Override public RequestResult<R> call(Response<R> response) {
+              return RequestResult.response(response);
             }
-          }).onErrorReturn(new Func1<Throwable, Result<R>>() {
-            @Override public Result<R> call(Throwable throwable) {
-              return Result.error(throwable);
+          }).onErrorReturn(new Func1<Throwable, RequestResult<R>>() {
+            @Override public RequestResult<R> call(Throwable throwable) {
+              return RequestResult.error(throwable);
             }
           });
       if (scheduler != null) {
diff --git a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/SingleHelper.java b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/SingleHelper.java
index e0073cfae..0d8786c33 100644
--- a/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/SingleHelper.java
+++ b/retrofit-adapters/rxjava/src/main/java/retrofit2/adapter/rxjava/SingleHelper.java
@@ -16,6 +16,7 @@
 package retrofit2.adapter.rxjava;
 
 import java.lang.reflect.Type;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import rx.Observable;
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableSchedulerTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableSchedulerTest.java
index e0a1c2d41..d645e55b2 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableSchedulerTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableSchedulerTest.java
@@ -33,7 +33,7 @@
   interface Service {
     @GET("/") Observable<String> body();
     @GET("/") Observable<Response<String>> response();
-    @GET("/") Observable<Result<String>> result();
+    @GET("/") Observable<RequestResult<String>> result();
   }
 
   private final TestScheduler scheduler = new TestScheduler();
@@ -77,7 +77,7 @@
   @Test public void resultUsesScheduler() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    TestSubscriber<Result<String>> subscriber = new TestSubscriber<>();
+    TestSubscriber<RequestResult<String>> subscriber = new TestSubscriber<>();
     service.result().subscribe(subscriber);
     subscriber.assertNoValues();
     subscriber.assertNoTerminalEvent();
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
index a854f63bd..c6cae82ca 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
@@ -37,7 +37,7 @@
   interface Service {
     @GET("/") Observable<String> body();
     @GET("/") Observable<Response<String>> response();
-    @GET("/") Observable<Result<String>> result();
+    @GET("/") Observable<RequestResult<String>> result();
   }
 
   private Service service;
@@ -116,8 +116,8 @@
   @Test public void resultSuccess200() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    BlockingObservable<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.first();
+    BlockingObservable<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.first();
     assertThat(result.isError()).isFalse();
     Response<String> response = result.response();
     assertThat(response.isSuccessful()).isTrue();
@@ -127,8 +127,8 @@
   @Test public void resultSuccess404() throws IOException {
     server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));
 
-    BlockingObservable<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.first();
+    BlockingObservable<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.first();
     assertThat(result.isError()).isFalse();
     Response<String> response = result.response();
     assertThat(response.isSuccessful()).isFalse();
@@ -138,8 +138,8 @@
   @Test public void resultFailure() {
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
-    BlockingObservable<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.first();
+    BlockingObservable<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.first();
     assertThat(result.isError()).isTrue();
     assertThat(result.error()).isInstanceOf(IOException.class);
   }
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ResultTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ResultTest.java
index 7c62c14ad..1c5eac202 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ResultTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ResultTest.java
@@ -18,7 +18,7 @@
 import java.io.IOException;
 import org.junit.Test;
 import retrofit2.Response;
-import retrofit2.adapter.rxjava.Result;
+import retrofit2.adapter.rxjava.RequestResult;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
@@ -26,7 +26,7 @@
 public final class ResultTest {
   @Test public void response() {
     Response<String> response = Response.success("Hi");
-    Result<String> result = Result.response(response);
+    RequestResult<String> result = RequestResult.response(response);
     assertThat(result.isError()).isFalse();
     assertThat(result.error()).isNull();
     assertThat(result.response()).isSameAs(response);
@@ -34,7 +34,7 @@
 
   @Test public void nullResponseThrows() {
     try {
-      Result.response(null);
+      RequestResult.response(null);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage("response == null");
@@ -43,7 +43,7 @@
 
   @Test public void error() {
     Throwable error = new IOException();
-    Result<Object> result = Result.error(error);
+    RequestResult<Object> result = RequestResult.error(error);
     assertThat(result.isError()).isTrue();
     assertThat(result.error()).isSameAs(error);
     assertThat(result.response()).isNull();
@@ -51,7 +51,7 @@
 
   @Test public void nullErrorThrows() {
     try {
-      Result.error(null);
+      RequestResult.error(null);
       fail();
     } catch (NullPointerException e) {
       assertThat(e).hasMessage("error == null");
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactoryTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactoryTest.java
index 3c2e435ad..a2963d9bc 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactoryTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/RxJavaCallAdapterFactoryTest.java
@@ -21,6 +21,7 @@
 import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
+
 import retrofit2.CallAdapter;
 import retrofit2.Response;
 import retrofit2.Retrofit;
@@ -94,17 +95,17 @@
     assertThat(factory.get(sResponseWildcard, NO_ANNOTATIONS, retrofit).responseType())
         .isEqualTo(String.class);
 
-    Type oResultClass = new TypeToken<Observable<Result<String>>>() {}.getType();
+    Type oResultClass = new TypeToken<Observable<RequestResult<String>>>() {}.getType();
     assertThat(factory.get(oResultClass, NO_ANNOTATIONS, retrofit).responseType())
         .isEqualTo(String.class);
-    Type sResultClass = new TypeToken<Single<Result<String>>>() {}.getType();
+    Type sResultClass = new TypeToken<Single<RequestResult<String>>>() {}.getType();
     assertThat(factory.get(sResultClass, NO_ANNOTATIONS, retrofit).responseType())
         .isEqualTo(String.class);
 
-    Type oResultWildcard = new TypeToken<Observable<Result<? extends String>>>() {}.getType();
+    Type oResultWildcard = new TypeToken<Observable<RequestResult<? extends String>>>() {}.getType();
     assertThat(factory.get(oResultWildcard, NO_ANNOTATIONS, retrofit).responseType())
         .isEqualTo(String.class);
-    Type sResultWildcard = new TypeToken<Single<Result<? extends String>>>() {}.getType();
+    Type sResultWildcard = new TypeToken<Single<RequestResult<? extends String>>>() {}.getType();
     assertThat(factory.get(sResultWildcard, NO_ANNOTATIONS, retrofit).responseType())
         .isEqualTo(String.class);
   }
@@ -150,7 +151,7 @@
   }
 
   @Test public void rawResultTypeThrows() {
-    Type observableType = new TypeToken<Observable<Result>>() {}.getType();
+    Type observableType = new TypeToken<Observable<RequestResult>>() {}.getType();
     try {
       factory.get(observableType, NO_ANNOTATIONS, retrofit);
       fail();
@@ -159,7 +160,7 @@
           "Result must be parameterized as Result<Foo> or Result<? extends Foo>");
     }
 
-    Type singleType = new TypeToken<Single<Result>>() {}.getType();
+    Type singleType = new TypeToken<Single<RequestResult>>() {}.getType();
     try {
       factory.get(singleType, NO_ANNOTATIONS, retrofit);
       fail();
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleSchedulerTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleSchedulerTest.java
index 671370e02..c0f024c60 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleSchedulerTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleSchedulerTest.java
@@ -33,7 +33,7 @@
   interface Service {
     @GET("/") Single<String> body();
     @GET("/") Single<Response<String>> response();
-    @GET("/") Single<Result<String>> result();
+    @GET("/") Single<RequestResult<String>> result();
   }
 
   private final TestScheduler scheduler = new TestScheduler();
@@ -75,7 +75,7 @@
   @Test public void resultUsesScheduler() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    TestSubscriber<Result<String>> subscriber = new TestSubscriber<>();
+    TestSubscriber<RequestResult<String>> subscriber = new TestSubscriber<>();
     service.result().subscribe(subscriber);
     subscriber.assertNoValues();
     subscriber.assertNoTerminalEvent();
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java
index 67c5a3d22..995f17c10 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/SingleTest.java
@@ -37,7 +37,7 @@
   interface Service {
     @GET("/") Single<String> body();
     @GET("/") Single<Response<String>> response();
-    @GET("/") Single<Result<String>> result();
+    @GET("/") Single<RequestResult<String>> result();
   }
 
   private Service service;
@@ -116,8 +116,8 @@
   @Test public void resultSuccess200() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    BlockingSingle<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.value();
+    BlockingSingle<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.value();
     assertThat(result.isError()).isFalse();
     Response<String> response = result.response();
     assertThat(response.isSuccessful()).isTrue();
@@ -127,8 +127,8 @@
   @Test public void resultSuccess404() throws IOException {
     server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));
 
-    BlockingSingle<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.value();
+    BlockingSingle<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.value();
     assertThat(result.isError()).isFalse();
     Response<String> response = result.response();
     assertThat(response.isSuccessful()).isFalse();
@@ -138,8 +138,8 @@
   @Test public void resultFailure() {
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
-    BlockingSingle<Result<String>> o = service.result().toBlocking();
-    Result<String> result = o.value();
+    BlockingSingle<RequestResult<String>> o = service.result().toBlocking();
+    RequestResult<String> result = o.value();
     assertThat(result.isError()).isTrue();
     assertThat(result.error()).isInstanceOf(IOException.class);
   }
diff --git a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java
index e6c702705..4b238ab5c 100644
--- a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java
+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonConverterFactory.java
@@ -20,6 +20,9 @@
 import com.google.gson.reflect.TypeToken;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+import java.nio.charset.Charset;
+
+import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
@@ -51,6 +54,8 @@ public static GsonConverterFactory create(Gson gson) {
   }
 
   private final Gson gson;
+static final Charset UTF_8 = Charset.forName("UTF-8");
+static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
 
   private GsonConverterFactory(Gson gson) {
     if (gson == null) throw new NullPointerException("gson == null");
diff --git a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
index 2e30a4478..1a4952e6b 100644
--- a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
@@ -21,16 +21,12 @@
 import java.io.IOException;
 import java.io.OutputStreamWriter;
 import java.io.Writer;
-import java.nio.charset.Charset;
-import okhttp3.MediaType;
+
 import okhttp3.RequestBody;
 import okio.Buffer;
 import retrofit2.Converter;
 
 final class GsonRequestBodyConverter<T> implements Converter<T, RequestBody> {
-  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
-  private static final Charset UTF_8 = Charset.forName("UTF-8");
-
   private final Gson gson;
   private final TypeAdapter<T> adapter;
 
@@ -41,10 +37,10 @@
 
   @Override public RequestBody convert(T value) throws IOException {
     Buffer buffer = new Buffer();
-    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);
+    Writer writer = new OutputStreamWriter(buffer.outputStream(), GsonConverterFactory.UTF_8);
     JsonWriter jsonWriter = gson.newJsonWriter(writer);
     adapter.write(jsonWriter, value);
     jsonWriter.close();
-    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
+    return RequestBody.create(GsonConverterFactory.MEDIA_TYPE, buffer.readByteString());
   }
 }
diff --git a/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java
index 5f584ec85..e70e744d1 100644
--- a/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java
+++ b/retrofit-converters/gson/src/test/java/retrofit2/converter/gson/GsonConverterFactoryTest.java
@@ -28,6 +28,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
index f6db311be..15bcf7685 100644
--- a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
@@ -21,6 +21,8 @@
 import com.fasterxml.jackson.databind.ObjectWriter;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+
+import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
@@ -46,6 +48,7 @@ public static JacksonConverterFactory create(ObjectMapper mapper) {
   }
 
   private final ObjectMapper mapper;
+static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
 
   private JacksonConverterFactory(ObjectMapper mapper) {
     if (mapper == null) throw new NullPointerException("mapper == null");
@@ -57,7 +60,7 @@ private JacksonConverterFactory(ObjectMapper mapper) {
       Retrofit retrofit) {
     JavaType javaType = mapper.getTypeFactory().constructType(type);
     ObjectReader reader = mapper.reader(javaType);
-    return new JacksonResponseBodyConverter<>(reader);
+    return new JacksonResponseConverter<>(reader);
   }
 
   @Override
@@ -65,6 +68,6 @@ private JacksonConverterFactory(ObjectMapper mapper) {
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
     JavaType javaType = mapper.getTypeFactory().constructType(type);
     ObjectWriter writer = mapper.writerWithType(javaType);
-    return new JacksonRequestBodyConverter<>(writer);
+    return new JacksonRequestConverter<>(writer);
   }
 }
diff --git a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestBodyConverter.java b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestConverter.java
similarity index 75%
rename from retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestBodyConverter.java
rename to retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestConverter.java
index bd20a0ae0..8c5dc67bd 100644
--- a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestBodyConverter.java
+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonRequestConverter.java
@@ -17,21 +17,19 @@
 
 import com.fasterxml.jackson.databind.ObjectWriter;
 import java.io.IOException;
-import okhttp3.MediaType;
+
 import okhttp3.RequestBody;
 import retrofit2.Converter;
 
-final class JacksonRequestBodyConverter<T> implements Converter<T, RequestBody> {
-  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
-
+final class JacksonRequestConverter<T> implements Converter<T, RequestBody> {
   private final ObjectWriter adapter;
 
-  JacksonRequestBodyConverter(ObjectWriter adapter) {
+  JacksonRequestConverter(ObjectWriter adapter) {
     this.adapter = adapter;
   }
 
   @Override public RequestBody convert(T value) throws IOException {
     byte[] bytes = adapter.writeValueAsBytes(value);
-    return RequestBody.create(MEDIA_TYPE, bytes);
+    return RequestBody.create(JacksonConverterFactory.MEDIA_TYPE, bytes);
   }
 }
diff --git a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseBodyConverter.java b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseConverter.java
similarity index 88%
rename from retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseBodyConverter.java
rename to retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseConverter.java
index f51fde7df..793624bf8 100644
--- a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseBodyConverter.java
+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonResponseConverter.java
@@ -20,10 +20,10 @@
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
 
-final class JacksonResponseBodyConverter<T> implements Converter<ResponseBody, T> {
+final class JacksonResponseConverter<T> implements Converter<ResponseBody, T> {
   private final ObjectReader adapter;
 
-  JacksonResponseBodyConverter(ObjectReader adapter) {
+  JacksonResponseConverter(ObjectReader adapter) {
     this.adapter = adapter;
   }
 
diff --git a/retrofit-converters/jackson/src/test/java/retrofit2/converter/jackson/JacksonConverterFactoryTest.java b/retrofit-converters/jackson/src/test/java/retrofit2/converter/jackson/JacksonConverterFactoryTest.java
index 19c18538e..74a9c290e 100644
--- a/retrofit-converters/jackson/src/test/java/retrofit2/converter/jackson/JacksonConverterFactoryTest.java
+++ b/retrofit-converters/jackson/src/test/java/retrofit2/converter/jackson/JacksonConverterFactoryTest.java
@@ -33,6 +33,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java
index c4831f937..c38fcb854 100644
--- a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java
+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiConverterFactory.java
@@ -64,7 +64,7 @@ public MoshiConverterFactory asLenient() {
     if (lenient) {
       adapter = adapter.lenient();
     }
-    return new MoshiResponseBodyConverter<>(adapter);
+    return new MoshiResponseConverter<>(adapter);
   }
 
   @Override
@@ -74,6 +74,6 @@ public MoshiConverterFactory asLenient() {
     if (lenient) {
       adapter = adapter.lenient();
     }
-    return new MoshiRequestBodyConverter<>(adapter);
+    return new MoshiRequestConverter<>(adapter);
   }
 }
diff --git a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestBodyConverter.java b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestConverter.java
similarity index 89%
rename from retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestBodyConverter.java
rename to retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestConverter.java
index ac3d095d3..8012705ae 100644
--- a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestBodyConverter.java
+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiRequestConverter.java
@@ -22,12 +22,12 @@
 import okio.Buffer;
 import retrofit2.Converter;
 
-final class MoshiRequestBodyConverter<T> implements Converter<T, RequestBody> {
+final class MoshiRequestConverter<T> implements Converter<T, RequestBody> {
   private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
 
   private final JsonAdapter<T> adapter;
 
-  MoshiRequestBodyConverter(JsonAdapter<T> adapter) {
+  MoshiRequestConverter(JsonAdapter<T> adapter) {
     this.adapter = adapter;
   }
 
diff --git a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseConverter.java
similarity index 88%
rename from retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java
rename to retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseConverter.java
index b45b99c42..46c4acb08 100644
--- a/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseBodyConverter.java
+++ b/retrofit-converters/moshi/src/main/java/retrofit2/converter/moshi/MoshiResponseConverter.java
@@ -20,10 +20,10 @@
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
 
-final class MoshiResponseBodyConverter<T> implements Converter<ResponseBody, T> {
+final class MoshiResponseConverter<T> implements Converter<ResponseBody, T> {
   private final JsonAdapter<T> adapter;
 
-  MoshiResponseBodyConverter(JsonAdapter<T> adapter) {
+  MoshiResponseConverter(JsonAdapter<T> adapter) {
     this.adapter = adapter;
   }
 
diff --git a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
index 3a54a7ebe..016a2e269 100644
--- a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
+++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
@@ -27,6 +27,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoConverterFactory.java
similarity index 98%
rename from retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java
rename to retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoConverterFactory.java
index aa4420c9d..f890c608e 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoConverterFactory.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoConverterFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.protobuf;
+package retrofit2.converter.protobuf.main;
 
 import com.google.protobuf.MessageLite;
 import com.google.protobuf.Parser;
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoRequestBodyConverter.java
similarity index 96%
rename from retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
rename to retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoRequestBodyConverter.java
index 814dc326b..fcbfa2aec 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoRequestBodyConverter.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoRequestBodyConverter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.protobuf;
+package retrofit2.converter.protobuf.main;
 
 import com.google.protobuf.MessageLite;
 import java.io.IOException;
diff --git a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoResponseBodyConverter.java
similarity index 96%
rename from retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java
rename to retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoResponseBodyConverter.java
index f2b78e1de..0b78e275c 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/ProtoResponseBodyConverter.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit2/converter/protobuf/main/ProtoResponseBodyConverter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.protobuf;
+package retrofit2.converter.protobuf.main;
 
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.google.protobuf.MessageLite;
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java
index f2ca958f4..bdd2f9905 100644
--- a/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java
+++ b/retrofit-converters/protobuf/src/test/java/retrofit2/converter/protobuf/ProtoConverterFactoryTest.java
@@ -26,9 +26,11 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
+import retrofit2.converter.protobuf.main.ProtoConverterFactory;
 import retrofit2.http.Body;
 import retrofit2.http.GET;
 import retrofit2.http.POST;
diff --git a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarRequestBodyConverter.java b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarRequestBodyConverter.java
similarity index 96%
rename from retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarRequestBodyConverter.java
rename to retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarRequestBodyConverter.java
index fd65200d4..d193764d0 100644
--- a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarRequestBodyConverter.java
+++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarRequestBodyConverter.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.scalars;
+package retrofit2.converter.scalars.main;
 
 import java.io.IOException;
 import okhttp3.MediaType;
diff --git a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarResponseBodyConverters.java b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarResponseBodyConverters.java
similarity index 98%
rename from retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarResponseBodyConverters.java
rename to retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarResponseBodyConverters.java
index a91d87c82..36aed1e82 100644
--- a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarResponseBodyConverters.java
+++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarResponseBodyConverters.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.scalars;
+package retrofit2.converter.scalars.main;
 
 import java.io.IOException;
 import okhttp3.ResponseBody;
diff --git a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarsConverterFactory.java
similarity index 76%
rename from retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java
rename to retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarsConverterFactory.java
index 5bf838fe9..13e04e54b 100644
--- a/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/ScalarsConverterFactory.java
+++ b/retrofit-converters/scalars/src/main/java/retrofit2/converter/scalars/main/ScalarsConverterFactory.java
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package retrofit2.converter.scalars;
+package retrofit2.converter.scalars.main;
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
@@ -21,15 +21,15 @@
 import okhttp3.ResponseBody;
 import retrofit2.Converter;
 import retrofit2.Retrofit;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.BooleanResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.ByteResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.CharacterResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.DoubleResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.FloatResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.IntegerResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.LongResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.ShortResponseBodyConverter;
-import retrofit2.converter.scalars.ScalarResponseBodyConverters.StringResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.BooleanResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.ByteResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.CharacterResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.DoubleResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.FloatResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.IntegerResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.LongResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.ShortResponseBodyConverter;
+import retrofit2.converter.scalars.main.ScalarResponseBodyConverters.StringResponseBodyConverter;
 
 /**
  * A {@linkplain Converter.Factory converter} for strings and both primitives and their boxed types
diff --git a/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterFactoryTest.java b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterFactoryTest.java
index cc19d4fbc..6c9b20e92 100644
--- a/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterFactoryTest.java
+++ b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterFactoryTest.java
@@ -23,10 +23,11 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
-import retrofit2.converter.scalars.ScalarsConverterFactory;
+import retrofit2.converter.scalars.main.ScalarsConverterFactory;
 import retrofit2.http.Body;
 import retrofit2.http.GET;
 import retrofit2.http.POST;
diff --git a/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java
index 3bbd190bb..a4e621b11 100644
--- a/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java
+++ b/retrofit-converters/scalars/src/test/java/retrofit2/converter/scalars/ScalarsConverterPrimitivesFactoryTest.java
@@ -23,9 +23,11 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Retrofit;
+import retrofit2.converter.scalars.main.ScalarsConverterFactory;
 import retrofit2.http.GET;
 
 import static org.assertj.core.api.Assertions.assertThat;
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java
index b7563455e..ef844bee7 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlConverterFactory.java
@@ -17,6 +17,8 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+
+import okhttp3.MediaType;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import org.simpleframework.xml.Serializer;
@@ -53,6 +55,8 @@ public static SimpleXmlConverterFactory createNonStrict(Serializer serializer) {
 
   private final Serializer serializer;
   private final boolean strict;
+static final MediaType MEDIA_TYPE = MediaType.parse("application/xml; charset=UTF-8");
+static final String CHARSET = "UTF-8";
 
   private SimpleXmlConverterFactory(Serializer serializer, boolean strict) {
     if (serializer == null) throw new NullPointerException("serializer == null");
diff --git a/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java
index 06aeee1e6..526b62d14 100644
--- a/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java
+++ b/retrofit-converters/simplexml/src/main/java/retrofit2/converter/simplexml/SimpleXmlRequestBodyConverter.java
@@ -17,16 +17,13 @@
 
 import java.io.IOException;
 import java.io.OutputStreamWriter;
-import okhttp3.MediaType;
+
 import okhttp3.RequestBody;
 import okio.Buffer;
 import org.simpleframework.xml.Serializer;
 import retrofit2.Converter;
 
 final class SimpleXmlRequestBodyConverter<T> implements Converter<T, RequestBody> {
-  private static final MediaType MEDIA_TYPE = MediaType.parse("application/xml; charset=UTF-8");
-  private static final String CHARSET = "UTF-8";
-
   private final Serializer serializer;
 
   SimpleXmlRequestBodyConverter(Serializer serializer) {
@@ -36,12 +33,12 @@
   @Override public RequestBody convert(T value) throws IOException {
     Buffer buffer = new Buffer();
     try {
-      OutputStreamWriter osw = new OutputStreamWriter(buffer.outputStream(), CHARSET);
+      OutputStreamWriter osw = new OutputStreamWriter(buffer.outputStream(), SimpleXmlConverterFactory.CHARSET);
       serializer.write(value, osw);
       osw.flush();
     } catch (Exception e) {
       throw new RuntimeException(e);
     }
-    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
+    return RequestBody.create(SimpleXmlConverterFactory.MEDIA_TYPE, buffer.readByteString());
   }
 }
diff --git a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java
index 8a74a8055..5fa3276ad 100644
--- a/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java
+++ b/retrofit-converters/simplexml/src/test/java/retrofit2/converter/simplexml/SimpleXmlConverterFactoryTest.java
@@ -27,6 +27,7 @@
 import org.simpleframework.xml.stream.Format;
 import org.simpleframework.xml.stream.HyphenStyle;
 import org.simpleframework.xml.stream.Verbosity;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-converters/wire/src/test/java/retrofit2/converter/wire/WireConverterFactoryTest.java b/retrofit-converters/wire/src/test/java/retrofit2/converter/wire/WireConverterFactoryTest.java
index e972d5287..bc44fd878 100644
--- a/retrofit-converters/wire/src/test/java/retrofit2/converter/wire/WireConverterFactoryTest.java
+++ b/retrofit-converters/wire/src/test/java/retrofit2/converter/wire/WireConverterFactoryTest.java
@@ -26,6 +26,7 @@
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Response;
 import retrofit2.Retrofit;
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
index 7c9361f65..d5be74048 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
@@ -21,6 +21,7 @@
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
 import java.util.concurrent.ExecutorService;
+
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Retrofit;
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
index 7199da059..cfa2600bb 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
@@ -24,6 +24,7 @@
 import java.util.concurrent.atomic.AtomicReference;
 import org.junit.Before;
 import org.junit.Test;
+
 import retrofit2.Call;
 import retrofit2.Callback;
 import retrofit2.Response;
diff --git a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
index dd6e79244..02e857915 100644
--- a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
@@ -16,6 +16,7 @@
 package retrofit2;
 
 import java.lang.annotation.Annotation;
+import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 
 /**
@@ -31,8 +32,12 @@
     if (getRawType(returnType) != Call.class) {
       return null;
     }
+	if (!(returnType instanceof ParameterizedType)) {
+	  throw new IllegalArgumentException(
+	      "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
+	}
 
-    final Type responseType = Utils.getCallResponseType(returnType);
+    final Type responseType = Utils.getParameterUpperBound(0, (ParameterizedType) returnType);
     return new CallAdapter<Call<?>>() {
       @Override public Type responseType() {
         return responseType;
diff --git a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
index 95ecbf4b7..62235af2a 100644
--- a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
@@ -17,6 +17,7 @@
 
 import java.io.IOException;
 import java.lang.annotation.Annotation;
+import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.concurrent.Executor;
 import okhttp3.Request;
@@ -33,7 +34,11 @@
     if (getRawType(returnType) != Call.class) {
       return null;
     }
-    final Type responseType = Utils.getCallResponseType(returnType);
+	if (!(returnType instanceof ParameterizedType)) {
+	  throw new IllegalArgumentException(
+	      "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
+	}
+    final Type responseType = Utils.getParameterUpperBound(0, (ParameterizedType) returnType);
     return new CallAdapter<Call<?>>() {
       @Override public Type responseType() {
         return responseType;
diff --git a/retrofit/src/main/java/retrofit2/IndexSearch.java b/retrofit/src/main/java/retrofit2/IndexSearch.java
new file mode 100644
index 000000000..6e603d660
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/IndexSearch.java
@@ -0,0 +1,14 @@
+package retrofit2;
+
+import java.util.NoSuchElementException;
+
+public class IndexSearch {
+
+	static int indexOf(Object[] array, Object toFind) {
+	    for (int i = 0; i < array.length; i++) {
+	      if (toFind.equals(array[i])) return i;
+	    }
+	    throw new NoSuchElementException();
+	  }
+
+}
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 5aa102db2..31e7c11e1 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -25,8 +25,8 @@
 import okio.Okio;
 
 final class OkHttpCall<T> implements Call<T> {
-  private final ServiceMethod<T> serviceMethod;
-  private final Object[] args;
+  final ServiceMethod<T> serviceMethod;
+  final Object[] args;
 
   private volatile boolean canceled;
 
@@ -58,7 +58,7 @@
       }
     }
     try {
-      return (rawCall = createRawCall()).request();
+      return (rawCall = serviceMethod.createRawCall(this)).request();
     } catch (RuntimeException e) {
       creationFailure = e;
       throw e;
@@ -82,7 +82,7 @@
       failure = creationFailure;
       if (call == null && failure == null) {
         try {
-          call = rawCall = createRawCall();
+          call = rawCall = serviceMethod.createRawCall(this);
         } catch (Throwable t) {
           failure = creationFailure = t;
         }
@@ -159,7 +159,7 @@ private void callSuccess(Response<T> response) {
       call = rawCall;
       if (call == null) {
         try {
-          call = rawCall = createRawCall();
+          call = rawCall = serviceMethod.createRawCall(this);
         } catch (IOException | RuntimeException e) {
           creationFailure = e;
           throw e;
@@ -174,15 +174,6 @@ private void callSuccess(Response<T> response) {
     return parseResponse(call.execute());
   }
 
-  private okhttp3.Call createRawCall() throws IOException {
-    Request request = serviceMethod.toRequest(args);
-    okhttp3.Call call = serviceMethod.callFactory.newCall(request);
-    if (call == null) {
-      throw new NullPointerException("Call.Factory returned null.");
-    }
-    return call;
-  }
-
   Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {
     ResponseBody rawBody = rawResponse.body();
 
diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 38e21e559..e52a9a90f 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -25,7 +25,11 @@
 import static retrofit2.Utils.checkNotNull;
 
 abstract class ParameterHandler<T> {
-  abstract void apply(RequestBuilder builder, T value) throws IOException;
+  protected String name;
+protected Headers headers;
+protected String transferEncoding;
+
+abstract void apply(RequestBuilder builder, T value) throws IOException;
 
   final ParameterHandler<Iterable<T>> iterable() {
     return new ParameterHandler<Iterable<T>>() {
@@ -59,27 +63,25 @@
   }
 
   static final class Header<T> extends ParameterHandler<T> {
-    private final String name;
     private final Converter<T, String> valueConverter;
 
     Header(String name, Converter<T, String> valueConverter) {
-      this.name = checkNotNull(name, "name == null");
+      name = checkNotNull(name, "name == null");
       this.valueConverter = valueConverter;
     }
 
     @Override void apply(RequestBuilder builder, T value) throws IOException {
       if (value == null) return; // Skip null values.
-      builder.addHeader(name, valueConverter.convert(value));
+      builder.addHeaderToRequestBuilder(name, valueConverter.convert(value));
     }
   }
 
   static final class Path<T> extends ParameterHandler<T> {
-    private final String name;
     private final Converter<T, String> valueConverter;
     private final boolean encoded;
 
     Path(String name, Converter<T, String> valueConverter, boolean encoded) {
-      this.name = checkNotNull(name, "name == null");
+      name = checkNotNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
@@ -89,24 +91,23 @@
         throw new IllegalArgumentException(
             "Path parameter \"" + name + "\" value must not be null.");
       }
-      builder.addPathParam(name, valueConverter.convert(value), encoded);
+      builder.addPathParamNameAndValue(name, valueConverter.convert(value), encoded);
     }
   }
 
   static final class Query<T> extends ParameterHandler<T> {
-    private final String name;
     private final Converter<T, String> valueConverter;
     private final boolean encoded;
 
     Query(String name, Converter<T, String> valueConverter, boolean encoded) {
-      this.name = checkNotNull(name, "name == null");
+      name = checkNotNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
 
     @Override void apply(RequestBuilder builder, T value) throws IOException {
       if (value == null) return; // Skip null values.
-      builder.addQueryParam(name, valueConverter.convert(value), encoded);
+      builder.addQueryParamNameAndValue(name, valueConverter.convert(value), encoded);
     }
   }
 
@@ -134,18 +135,17 @@
           throw new IllegalArgumentException(
               "Query map contained null value for key '" + entryKey + "'.");
         }
-        builder.addQueryParam(entryKey, valueConverter.convert(entryValue), encoded);
+        builder.addQueryParamNameAndValue(entryKey, valueConverter.convert(entryValue), encoded);
       }
     }
   }
 
   static final class Field<T> extends ParameterHandler<T> {
-    private final String name;
     private final Converter<T, String> valueConverter;
     private final boolean encoded;
 
     Field(String name, Converter<T, String> valueConverter, boolean encoded) {
-      this.name = checkNotNull(name, "name == null");
+      name = checkNotNull(name, "name == null");
       this.valueConverter = valueConverter;
       this.encoded = encoded;
     }
@@ -186,25 +186,28 @@
   }
 
   static final class Part<T> extends ParameterHandler<T> {
-    private final Headers headers;
     private final Converter<T, RequestBody> converter;
 
     Part(Headers headers, Converter<T, RequestBody> converter) {
-      this.headers = headers;
+      super.headers = headers;
       this.converter = converter;
     }
 
     @Override void apply(RequestBuilder builder, T value) {
       if (value == null) return; // Skip null values.
 
-      RequestBody body;
-      try {
-        body = converter.convert(value);
-      } catch (IOException e) {
-        throw new RuntimeException("Unable to convert " + value + " to RequestBody", e);
-      }
-      builder.addPart(headers, body);
+      createBody(builder, value);
     }
+
+	private void createBody(RequestBuilder builder, T value) {
+		RequestBody body;
+		  try {
+		    body = converter.convert(value);
+		  } catch (IOException e) {
+		    throw new RuntimeException("Unable to convert " + value + " to RequestBody", e);
+		  }
+		  builder.addPart(headers, body);
+	}
   }
 
   static final class RawPart extends ParameterHandler<MultipartBody.Part> {
@@ -222,11 +225,9 @@ private RawPart() {
 
   static final class PartMap<T> extends ParameterHandler<Map<String, T>> {
     private final Converter<T, RequestBody> valueConverter;
-    private final String transferEncoding;
-
     PartMap(Converter<T, RequestBody> valueConverter, String transferEncoding) {
       this.valueConverter = valueConverter;
-      this.transferEncoding = transferEncoding;
+      super.transferEncoding = transferEncoding;
     }
 
     @Override void apply(RequestBuilder builder, Map<String, T> value) throws IOException {
@@ -265,13 +266,17 @@ private RawPart() {
       if (value == null) {
         throw new IllegalArgumentException("Body parameter value must not be null.");
       }
-      RequestBody body;
-      try {
-        body = converter.convert(value);
-      } catch (IOException e) {
-        throw new RuntimeException("Unable to convert " + value + " to RequestBody", e);
-      }
-      builder.setBody(body);
+      createBody(builder, value);
     }
+
+	private void createBody(RequestBuilder builder, T value) {
+		RequestBody body;
+		  try {
+		    body = converter.convert(value);
+		  } catch (IOException e) {
+		    throw new RuntimeException("Unable to convert " + value + " to RequestBody", e);
+		  }
+		  builder.setBody(body);
+	}
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index e67159bff..f97847242 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -18,6 +18,9 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+import okhttp3.OkHttpClient;
+import retrofit2.Retrofit.Builder;
+
 import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -26,10 +29,10 @@
 import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 class Platform {
-  private static final Platform PLATFORM = findPlatform();
+  
 
   static Platform get() {
-    return PLATFORM;
+    return findPlatform();
   }
 
   private static Platform findPlatform() {
@@ -73,8 +76,26 @@ Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object
     throw new UnsupportedOperationException();
   }
 
-  @IgnoreJRERequirement // Only classloaded and used on Java 8.
+  Executor createCallBackExecutor(Builder builder) {
+	Executor callbackExecutor = builder.callbackExecutor;
+	  if (callbackExecutor == null) {
+	    callbackExecutor = defaultCallbackExecutor();
+	  }
+	return callbackExecutor;
+}
+
+okhttp3.Call.Factory createCallFactory(Builder builder) {
+	okhttp3.Call.Factory callFactory = builder.callFactory;
+	  if (callFactory == null) {
+	    callFactory = new OkHttpClient();
+	  }
+	return callFactory;
+}
+
+@IgnoreJRERequirement // Only classloaded and used on Java 8.
   static class Java8 extends Platform {
+	private static final Platform PLATFORM = findPlatform();
+	
     @Override boolean isDefaultMethod(Method method) {
       return method.isDefault();
     }
@@ -93,6 +114,7 @@ Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object
   }
 
   static class Android extends Platform {
+	  private static final Platform PLATFORM = findPlatform();
     @Override public Executor defaultCallbackExecutor() {
       return new MainThreadExecutor();
     }
@@ -111,6 +133,7 @@ Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object
   }
 
   static class IOS extends Platform {
+	  private static final Platform PLATFORM = findPlatform();
     @Override public Executor defaultCallbackExecutor() {
       return new MainThreadExecutor();
     }
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index 1303418d3..42899321a 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -73,7 +73,7 @@ void setRelativeUrl(Object relativeUrl) {
     this.relativeUrl = relativeUrl.toString();
   }
 
-  void addHeader(String name, String value) {
+  void addHeaderToRequestBuilder(String name, String value) {
     if ("Content-Type".equalsIgnoreCase(name)) {
       contentType = MediaType.parse(value);
     } else {
@@ -81,7 +81,7 @@ void addHeader(String name, String value) {
     }
   }
 
-  void addPathParam(String name, String value, boolean encoded) {
+  void addPathParamNameAndValue(String name, String value, boolean encoded) {
     if (relativeUrl == null) {
       // The relative URL is cleared when the first query parameter is set.
       throw new AssertionError();
@@ -138,7 +138,7 @@ private static void canonicalizeForPath(Buffer out, String input, int pos, int l
     }
   }
 
-  void addQueryParam(String name, String value, boolean encoded) {
+  void addQueryParamNameAndValue(String name, String value, boolean encoded) {
     if (relativeUrl != null) {
       // Do a one-time combination of the built relative URL and the base URL.
       urlBuilder = baseUrl.newBuilder(relativeUrl);
@@ -183,11 +183,7 @@ Request build() {
       url = urlBuilder.build();
     } else {
       // No query parameters triggered builder creation, just combine the relative URL and base URL.
-      url = baseUrl.resolve(relativeUrl);
-      if (url == null) {
-        throw new IllegalArgumentException(
-            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);
-      }
+      url = createURL();
     }
 
     RequestBody body = this.body;
@@ -218,6 +214,16 @@ Request build() {
         .build();
   }
 
+private HttpUrl createURL() {
+	HttpUrl url;
+	url = baseUrl.resolve(relativeUrl);
+      if (url == null) {
+        throw new IllegalArgumentException(
+            "Malformed URL. Base: " + baseUrl + ", Relative: " + relativeUrl);
+      }
+	return url;
+}
+
   private static class ContentTypeOverridingRequestBody extends RequestBody {
     private final RequestBody delegate;
     private final MediaType contentType;
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index e612069de..176e0e692 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -29,6 +29,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
+import retrofit2.Retrofit.Builder;
 import retrofit2.http.GET;
 import retrofit2.http.HTTP;
 import retrofit2.http.Header;
@@ -125,7 +126,15 @@
    */
   @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety.
   public <T> T create(final Class<T> service) {
-    Utils.validateServiceInterface(service);
+    if (!service.isInterface()) {
+	  throw new IllegalArgumentException("API declarations must be interfaces.");
+	}
+	// Prevent API interfaces from extending other interfaces. This not only avoids a bug in
+	// Android (http://b.android.com/58753) but it forces composition of API declarations which is
+	// the recommended pattern.
+	if (service.getInterfaces().length > 0) {
+	  throw new IllegalArgumentException("API interfaces must not extend other interfaces.");
+	}
     if (validateEagerly) {
       eagerlyValidateMethods(service);
     }
@@ -376,7 +385,24 @@ public Executor callbackExecutor() {
     return callbackExecutor;
   }
 
-  /**
+  CallAdapter<?> createCallAdapter(retrofit2.ServiceMethod.Builder builder) {
+  Type returnType = builder.method.getGenericReturnType();
+  if (Utils.hasUnresolvableType(returnType)) {
+    throw builder.methodError(
+        "Method return type must not include a type variable or wildcard: %s", returnType);
+  }
+  if (returnType == void.class) {
+    throw builder.methodError("Service methods cannot return void.");
+  }
+  Annotation[] annotations = builder.method.getAnnotations();
+  try {
+    return builder.retrofit.callAdapter(returnType, annotations);
+  } catch (RuntimeException e) { // Wide exception range because factories are user code.
+    throw builder.methodError(e, "Unable to create call adapter for %s", returnType);
+  }
+}
+
+/**
    * Build a new {@link Retrofit}.
    * <p>
    * Calling {@link #baseUrl} is required before calling {@link #build()}. All other methods
@@ -384,11 +410,11 @@ public Executor callbackExecutor() {
    */
   public static final class Builder {
     private Platform platform;
-    private okhttp3.Call.Factory callFactory;
+    okhttp3.Call.Factory callFactory;
     private HttpUrl baseUrl;
     private List<Converter.Factory> converterFactories = new ArrayList<>();
     private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
-    private Executor callbackExecutor;
+    Executor callbackExecutor;
     private boolean validateEagerly;
 
     Builder(Platform platform) {
@@ -546,15 +572,9 @@ public Retrofit build() {
         throw new IllegalStateException("Base URL required.");
       }
 
-      okhttp3.Call.Factory callFactory = this.callFactory;
-      if (callFactory == null) {
-        callFactory = new OkHttpClient();
-      }
+      okhttp3.Call.Factory callFactory = platform.createCallFactory(this);
 
-      Executor callbackExecutor = this.callbackExecutor;
-      if (callbackExecutor == null) {
-        callbackExecutor = platform.defaultCallbackExecutor();
-      }
+      Executor callbackExecutor = platform.createCallBackExecutor(Builder.this);
 
       // Make a defensive copy of the adapters and add the default Call adapter.
       List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 3733d97c8..c9b0f96da 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -116,7 +116,16 @@ T toResponse(ResponseBody body) throws IOException {
     return responseConverter.convert(body);
   }
 
-  /**
+  okhttp3.Call createRawCall(OkHttpCall okHttpCall) throws IOException {
+    Request request = okHttpCall.serviceMethod.toRequest(okHttpCall.args);
+    okhttp3.Call call = okHttpCall.serviceMethod.callFactory.newCall(request);
+    if (call == null) {
+      throw new NullPointerException("Call.Factory returned null.");
+    }
+    return call;
+  }
+
+/**
    * Inspects the annotations on an interface method to construct a reusable service method. This
    * requires potentially-expensive reflection so it is best to build each service method only once
    * and reuse it. Builders cannot be reused.
@@ -156,7 +165,7 @@ public Builder(Retrofit retrofit, Method method) {
     }
 
     public ServiceMethod build() {
-      callAdapter = createCallAdapter();
+      callAdapter = retrofit.createCallAdapter(this);
       responseType = callAdapter.responseType();
       if (responseType == Response.class || responseType == okhttp3.Response.class) {
         throw methodError("'"
@@ -217,23 +226,6 @@ public ServiceMethod build() {
       return new ServiceMethod<>(this);
     }
 
-    private CallAdapter<?> createCallAdapter() {
-      Type returnType = method.getGenericReturnType();
-      if (Utils.hasUnresolvableType(returnType)) {
-        throw methodError(
-            "Method return type must not include a type variable or wildcard: %s", returnType);
-      }
-      if (returnType == void.class) {
-        throw methodError("Service methods cannot return void.");
-      }
-      Annotation[] annotations = method.getAnnotations();
-      try {
-        return retrofit.callAdapter(returnType, annotations);
-      } catch (RuntimeException e) { // Wide exception range because factories are user code.
-        throw methodError(e, "Unable to create call adapter for %s", returnType);
-      }
-    }
-
     private void parseMethodAnnotation(Annotation annotation) {
       if (annotation instanceof DELETE) {
         parseHttpMethodAndPath("DELETE", ((DELETE) annotation).value(), false);
@@ -653,11 +645,11 @@ private void validatePathName(int p, String name) {
       }
     }
 
-    private RuntimeException methodError(String message, Object... args) {
+    RuntimeException methodError(String message, Object... args) {
       return methodError(null, message, args);
     }
 
-    private RuntimeException methodError(Throwable cause, String message, Object... args) {
+    RuntimeException methodError(Throwable cause, String message, Object... args) {
       message = String.format(message, args);
       return new IllegalArgumentException(message
           + "\n    for method "
diff --git a/retrofit/src/main/java/retrofit2/SuperUtils.java b/retrofit/src/main/java/retrofit2/SuperUtils.java
new file mode 100644
index 000000000..ed5f7bd6f
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/SuperUtils.java
@@ -0,0 +1,65 @@
+package retrofit2;
+
+import java.lang.reflect.GenericArrayType;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.lang.reflect.TypeVariable;
+import java.lang.reflect.WildcardType;
+import java.util.Arrays;
+
+public class SuperUtils {
+
+	public static String typeToString(Type type) {
+	    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
+	  }
+
+	/** Returns true if {@code a} and {@code b} are equal. */
+	public static boolean equals(Type a, Type b) {
+	    if (a == b) {
+	      return true; // Also handles (a == null && b == null).
+	
+	    } else if (a instanceof Class) {
+	      return a.equals(b); // Class already specifies equals().
+	
+	    } else if (a instanceof ParameterizedType) {
+	      if (!(b instanceof ParameterizedType)) return false;
+	      ParameterizedType pa = (ParameterizedType) a;
+	      ParameterizedType pb = (ParameterizedType) b;
+	      return equal(pa.getOwnerType(), pb.getOwnerType())
+	          && pa.getRawType().equals(pb.getRawType())
+	          && Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());
+	
+	    } else if (a instanceof GenericArrayType) {
+	      if (!(b instanceof GenericArrayType)) return false;
+	      GenericArrayType ga = (GenericArrayType) a;
+	      GenericArrayType gb = (GenericArrayType) b;
+	      return equals(ga.getGenericComponentType(), gb.getGenericComponentType());
+	
+	    } else if (a instanceof WildcardType) {
+	      if (!(b instanceof WildcardType)) return false;
+	      WildcardType wa = (WildcardType) a;
+	      WildcardType wb = (WildcardType) b;
+	      return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())
+	          && Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());
+	
+	    } else if (a instanceof TypeVariable) {
+	      if (!(b instanceof TypeVariable)) return false;
+	      TypeVariable<?> va = (TypeVariable<?>) a;
+	      TypeVariable<?> vb = (TypeVariable<?>) b;
+	      return va.getGenericDeclaration() == vb.getGenericDeclaration()
+	          && va.getName().equals(vb.getName());
+	
+	    } else {
+	      return false; // This isn't a type we support!
+	    }
+	  }
+
+	private static boolean equal(Object a, Object b) {
+	    return a == b || (a != null && a.equals(b));
+	  }
+
+	public SuperUtils() {
+		super();
+	}
+
+}
\ No newline at end of file
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index f3fa87571..2c84c25d0 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -25,11 +25,11 @@
 import java.lang.reflect.TypeVariable;
 import java.lang.reflect.WildcardType;
 import java.util.Arrays;
-import java.util.NoSuchElementException;
+
 import okhttp3.ResponseBody;
 import okio.Buffer;
 
-final class Utils {
+final class Utils extends SuperUtils {
   static final Type[] EMPTY_TYPE_ARRAY = new Type[0];
 
   private Utils() {
@@ -69,47 +69,6 @@ private Utils() {
     }
   }
 
-  /** Returns true if {@code a} and {@code b} are equal. */
-  public static boolean equals(Type a, Type b) {
-    if (a == b) {
-      return true; // Also handles (a == null && b == null).
-
-    } else if (a instanceof Class) {
-      return a.equals(b); // Class already specifies equals().
-
-    } else if (a instanceof ParameterizedType) {
-      if (!(b instanceof ParameterizedType)) return false;
-      ParameterizedType pa = (ParameterizedType) a;
-      ParameterizedType pb = (ParameterizedType) b;
-      return equal(pa.getOwnerType(), pb.getOwnerType())
-          && pa.getRawType().equals(pb.getRawType())
-          && Arrays.equals(pa.getActualTypeArguments(), pb.getActualTypeArguments());
-
-    } else if (a instanceof GenericArrayType) {
-      if (!(b instanceof GenericArrayType)) return false;
-      GenericArrayType ga = (GenericArrayType) a;
-      GenericArrayType gb = (GenericArrayType) b;
-      return equals(ga.getGenericComponentType(), gb.getGenericComponentType());
-
-    } else if (a instanceof WildcardType) {
-      if (!(b instanceof WildcardType)) return false;
-      WildcardType wa = (WildcardType) a;
-      WildcardType wb = (WildcardType) b;
-      return Arrays.equals(wa.getUpperBounds(), wb.getUpperBounds())
-          && Arrays.equals(wa.getLowerBounds(), wb.getLowerBounds());
-
-    } else if (a instanceof TypeVariable) {
-      if (!(b instanceof TypeVariable)) return false;
-      TypeVariable<?> va = (TypeVariable<?>) a;
-      TypeVariable<?> vb = (TypeVariable<?>) b;
-      return va.getGenericDeclaration() == vb.getGenericDeclaration()
-          && va.getName().equals(vb.getName());
-
-    } else {
-      return false; // This isn't a type we support!
-    }
-  }
-
   /**
    * Returns the generic supertype for {@code supertype}. For example, given a class {@code
    * IntegerSet}, the result for when supertype is {@code Set.class} is {@code Set<Integer>} and the
@@ -147,25 +106,6 @@ static Type getGenericSupertype(Type context, Class<?> rawType, Class<?> toResol
     return toResolve;
   }
 
-  private static int indexOf(Object[] array, Object toFind) {
-    for (int i = 0; i < array.length; i++) {
-      if (toFind.equals(array[i])) return i;
-    }
-    throw new NoSuchElementException();
-  }
-
-  private static boolean equal(Object a, Object b) {
-    return a == b || (a != null && a.equals(b));
-  }
-
-  static int hashCodeOrZero(Object o) {
-    return o != null ? o.hashCode() : 0;
-  }
-
-  public static String typeToString(Type type) {
-    return type instanceof Class ? ((Class<?>) type).getName() : type.toString();
-  }
-
   /**
    * Returns the generic form of {@code supertype}. For example, if this is {@code
    * ArrayList<String>}, this returns {@code Iterable<String>} given the input {@code
@@ -251,35 +191,21 @@ public static Type resolve(Type context, Class<?> contextRawType, Type toResolve
 
   private static Type resolveTypeVariable(
       Type context, Class<?> contextRawType, TypeVariable<?> unknown) {
-    Class<?> declaredByRaw = declaringClassOf(unknown);
+    GenericDeclaration genericDeclaration = unknown.getGenericDeclaration();
+	Class<?> declaredByRaw = genericDeclaration instanceof Class ? (Class<?>) genericDeclaration : null;
 
     // We can't reduce this further.
     if (declaredByRaw == null) return unknown;
 
     Type declaredBy = getGenericSupertype(context, contextRawType, declaredByRaw);
     if (declaredBy instanceof ParameterizedType) {
-      int index = indexOf(declaredByRaw.getTypeParameters(), unknown);
+      int index = IndexSearch.indexOf(declaredByRaw.getTypeParameters(), unknown);
       return ((ParameterizedType) declaredBy).getActualTypeArguments()[index];
     }
 
     return unknown;
   }
 
-  /**
-   * Returns the declaring class of {@code typeVariable}, or {@code null} if it was not declared by
-   * a class.
-   */
-  private static Class<?> declaringClassOf(TypeVariable<?> typeVariable) {
-    GenericDeclaration genericDeclaration = typeVariable.getGenericDeclaration();
-    return genericDeclaration instanceof Class ? (Class<?>) genericDeclaration : null;
-  }
-
-  static void checkNotPrimitive(Type type) {
-    if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
-      throw new IllegalArgumentException();
-    }
-  }
-
   static <T> T checkNotNull(T object, String message) {
     if (object == null) {
       throw new NullPointerException(message);
@@ -304,18 +230,6 @@ static ResponseBody buffer(final ResponseBody body) throws IOException {
     return ResponseBody.create(body.contentType(), body.contentLength(), buffer);
   }
 
-  static <T> void validateServiceInterface(Class<T> service) {
-    if (!service.isInterface()) {
-      throw new IllegalArgumentException("API declarations must be interfaces.");
-    }
-    // Prevent API interfaces from extending other interfaces. This not only avoids a bug in
-    // Android (http://b.android.com/58753) but it forces composition of API declarations which is
-    // the recommended pattern.
-    if (service.getInterfaces().length > 0) {
-      throw new IllegalArgumentException("API interfaces must not extend other interfaces.");
-    }
-  }
-
   static Type getParameterUpperBound(int index, ParameterizedType type) {
     Type[] types = type.getActualTypeArguments();
     if (types.length <= index) {
@@ -356,14 +270,6 @@ static boolean hasUnresolvableType(Type type) {
         + "GenericArrayType, but <" + type + "> is of type " + className);
   }
 
-  static Type getCallResponseType(Type returnType) {
-    if (!(returnType instanceof ParameterizedType)) {
-      throw new IllegalArgumentException(
-          "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>");
-    }
-    return getParameterUpperBound(0, (ParameterizedType) returnType);
-  }
-
   private static final class ParameterizedTypeImpl implements ParameterizedType {
     private final Type ownerType;
     private final Type rawType;
@@ -382,7 +288,9 @@ public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments
 
       for (Type typeArgument : this.typeArguments) {
         if (typeArgument == null) throw new NullPointerException();
-        checkNotPrimitive(typeArgument);
+        if (typeArgument instanceof Class<?> && ((Class<?>) typeArgument).isPrimitive()) {
+		  throw new IllegalArgumentException();
+		}
       }
     }
 
@@ -403,7 +311,7 @@ public ParameterizedTypeImpl(Type ownerType, Type rawType, Type... typeArguments
     }
 
     @Override public int hashCode() {
-      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ hashCodeOrZero(ownerType);
+      return Arrays.hashCode(typeArguments) ^ rawType.hashCode() ^ (ownerType != null ? ownerType.hashCode() : 0);
     }
 
     @Override public String toString() {
@@ -458,13 +366,19 @@ public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {
 
       if (lowerBounds.length == 1) {
         if (lowerBounds[0] == null) throw new NullPointerException();
-        checkNotPrimitive(lowerBounds[0]);
+		Type type = lowerBounds[0];
+        if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
+		  throw new IllegalArgumentException();
+		}
         if (upperBounds[0] != Object.class) throw new IllegalArgumentException();
         this.lowerBound = lowerBounds[0];
         this.upperBound = Object.class;
       } else {
         if (upperBounds[0] == null) throw new NullPointerException();
-        checkNotPrimitive(upperBounds[0]);
+		Type type = upperBounds[0];
+        if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {
+		  throw new IllegalArgumentException();
+		}
         this.lowerBound = null;
         this.upperBound = upperBounds[0];
       }
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index 5f5a68a9f..5c9ddac46 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -34,6 +34,7 @@
 import okio.Okio;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.helpers.ToStringConverterFactory;
 import retrofit2.http.Body;
 import retrofit2.http.GET;
diff --git a/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java b/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
index ba45b5fe6..d2131f76b 100644
--- a/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/ExecutorCallAdapterFactoryTest.java
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.concurrent.Executor;
 import okhttp3.Request;
+
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderAndroidTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderAndroidTest.java
index 63fa57b6c..04f6818d3 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderAndroidTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderAndroidTest.java
@@ -21,6 +21,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
+
 import retrofit2.http.GET;
 import retrofit2.http.Url;
 
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 907316e2f..439335de2 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -35,6 +35,7 @@
 import okio.Buffer;
 import org.junit.Ignore;
 import org.junit.Test;
+
 import retrofit2.helpers.ToStringConverterFactory;
 import retrofit2.http.Body;
 import retrofit2.http.DELETE;
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 9c17cab42..a54abac0f 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -41,6 +41,7 @@
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Rule;
 import org.junit.Test;
+
 import retrofit2.helpers.DelegatingCallAdapterFactory;
 import retrofit2.helpers.NonMatchingCallAdapterFactory;
 import retrofit2.helpers.NonMatchingConverterFactory;
diff --git a/retrofit/src/test/java/retrofit2/helpers/DelegatingCallAdapterFactory.java b/retrofit/src/test/java/retrofit2/helpers/DelegatingCallAdapterFactory.java
index 918b0ea0f..f120ef114 100644
--- a/retrofit/src/test/java/retrofit2/helpers/DelegatingCallAdapterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/DelegatingCallAdapterFactory.java
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+
 import retrofit2.CallAdapter;
 import retrofit2.Retrofit;
 
diff --git a/retrofit/src/test/java/retrofit2/helpers/NonMatchingCallAdapterFactory.java b/retrofit/src/test/java/retrofit2/helpers/NonMatchingCallAdapterFactory.java
index 2b4954813..c672dbaa0 100644
--- a/retrofit/src/test/java/retrofit2/helpers/NonMatchingCallAdapterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/NonMatchingCallAdapterFactory.java
@@ -17,6 +17,7 @@
 
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
+
 import retrofit2.CallAdapter;
 import retrofit2.Retrofit;
 
diff --git a/samples/src/main/java/com/example/retrofit/Crawler.java b/samples/src/main/java/com/example/retrofit/Crawler.java
index 97c739e39..51b8688aa 100644
--- a/samples/src/main/java/com/example/retrofit/Crawler.java
+++ b/samples/src/main/java/com/example/retrofit/Crawler.java
@@ -35,6 +35,7 @@
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
+
 import retrofit2.Call;
 import retrofit2.Callback;
 import retrofit2.Converter;
diff --git a/samples/src/main/java/com/example/retrofit/ErrorHandlingCallAdapter.java b/samples/src/main/java/com/example/retrofit/ErrorHandlingCallAdapter.java
index 0189da92b..330a374fc 100644
--- a/samples/src/main/java/com/example/retrofit/ErrorHandlingCallAdapter.java
+++ b/samples/src/main/java/com/example/retrofit/ErrorHandlingCallAdapter.java
@@ -20,10 +20,11 @@
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
 import java.util.concurrent.Executor;
+
+import retrofit2.converter.gson.GsonConverterFactory;
 import retrofit2.Call;
 import retrofit2.CallAdapter;
 import retrofit2.Callback;
-import retrofit2.converter.gson.GsonConverterFactory;
 import retrofit2.Response;
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
diff --git a/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java b/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java
index 2163f3dec..d9a8dbcf0 100644
--- a/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java
+++ b/samples/src/main/java/com/example/retrofit/JsonAndXmlConverters.java
@@ -26,6 +26,7 @@
 import org.simpleframework.xml.Attribute;
 import org.simpleframework.xml.Default;
 import org.simpleframework.xml.DefaultType;
+
 import retrofit2.Call;
 import retrofit2.Converter;
 import retrofit2.Retrofit;
diff --git a/samples/src/main/java/com/example/retrofit/SimpleMockService.java b/samples/src/main/java/com/example/retrofit/SimpleMockService.java
index 347c911af..a53056d37 100644
--- a/samples/src/main/java/com/example/retrofit/SimpleMockService.java
+++ b/samples/src/main/java/com/example/retrofit/SimpleMockService.java
@@ -10,6 +10,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
+
 import retrofit2.Call;
 import retrofit2.Retrofit;
 import retrofit2.mock.BehaviorDelegate;
diff --git a/samples/src/main/java/com/example/retrofit/SimpleService.java b/samples/src/main/java/com/example/retrofit/SimpleService.java
index ef5a3060e..1792d2235 100644
--- a/samples/src/main/java/com/example/retrofit/SimpleService.java
+++ b/samples/src/main/java/com/example/retrofit/SimpleService.java
@@ -17,8 +17,9 @@
 
 import java.io.IOException;
 import java.util.List;
-import retrofit2.Call;
+
 import retrofit2.converter.gson.GsonConverterFactory;
+import retrofit2.Call;
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
 import retrofit2.http.Path;
