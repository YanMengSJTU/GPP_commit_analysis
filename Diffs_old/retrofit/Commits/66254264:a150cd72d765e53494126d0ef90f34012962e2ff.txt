diff --git a/README.md b/README.md
index 3c00bbc90..d2b96a057 100644
--- a/README.md
+++ b/README.md
@@ -13,7 +13,7 @@ Download [the latest JAR][2] or grab from Maven central at the coordinates `com.
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
 
-Retrofit requires at minimum Java 7 or Android 2.3.
+Retrofit requires at minimum Java 8+ or Android API 21+.
 
 
 R8 / ProGuard
diff --git a/pom.xml b/pom.xml
index 381d939e0..780fc7b6e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,7 @@
 
   <groupId>com.squareup.retrofit2</groupId>
   <artifactId>parent</artifactId>
-  <version>2.6.1-SNAPSHOT</version>
+  <version>2.7.0-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Retrofit (Parent)</name>
@@ -45,12 +45,12 @@
     <project.reporting.sourceEncoding>UTF-8</project.reporting.sourceEncoding>
 
     <!-- Compilation -->
-    <java.version>1.7</java.version>
+    <java.version>1.8</java.version>
     <kotlin.version>1.3.10</kotlin.version>
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
-    <okhttp.version>3.12.0</okhttp.version>
+    <okhttp.version>3.14.0</okhttp.version>
     <kotlinx.coroutines.version>1.1.0</kotlinx.coroutines.version>
     <animal.sniffer.version>1.14</animal.sniffer.version>
 
@@ -319,8 +319,8 @@
         <configuration>
           <signature>
             <groupId>org.codehaus.mojo.signature</groupId>
-            <artifactId>java16</artifactId>
-            <version>1.1</version>
+            <artifactId>java18</artifactId>
+            <version>1.0</version>
           </signature>
         </configuration>
       </plugin>
diff --git a/retrofit-adapters/guava/pom.xml b/retrofit-adapters/guava/pom.xml
index 6e755ca8e..bea80fe97 100644
--- a/retrofit-adapters/guava/pom.xml
+++ b/retrofit-adapters/guava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
index f56fcf63a..a6dc4c48b 100644
--- a/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
+++ b/retrofit-adapters/guava/src/test/java/retrofit2/adapter/guava/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.guava;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/java8/pom.xml b/retrofit-adapters/java8/pom.xml
index 54f4a25b9..62e5b0a60 100644
--- a/retrofit-adapters/java8/pom.xml
+++ b/retrofit-adapters/java8/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -53,18 +53,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>animal-sniffer-maven-plugin</artifactId>
-        <version>${animal.sniffer.version}</version>
-        <configuration>
-          <signature>
-            <groupId>org.kaazing.mojo.signature</groupId>
-            <artifactId>java18</artifactId>
-            <version>1.0</version>
-          </signature>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
index 81c6ec90b..992ac261e 100644
--- a/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
+++ b/retrofit-adapters/java8/src/test/java/retrofit2/adapter/java8/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.java8;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/pom.xml b/retrofit-adapters/pom.xml
index 3717be71b..f0bdd6e68 100644
--- a/retrofit-adapters/pom.xml
+++ b/retrofit-adapters/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava/pom.xml b/retrofit-adapters/rxjava/pom.xml
index a22b3c2a8..098560b14 100644
--- a/retrofit-adapters/rxjava/pom.xml
+++ b/retrofit-adapters/rxjava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
index 07b56dc36..6483e50d9 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/ObservableTest.java
@@ -26,7 +26,6 @@
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
 import rx.Observable;
-import rx.functions.Action1;
 
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static org.assertj.core.api.Assertions.assertThat;
@@ -139,12 +138,7 @@
 
     final RecordingSubscriber<Response<String>> subscriber = subscriberRule.create();
     service.response()
-        .doOnNext(new Action1<Response<String>>() {
-          @Override
-          public void call(Response<String> response) {
-            subscriber.unsubscribe();
-          }
-        })
+        .doOnNext(response -> subscriber.unsubscribe())
         .subscribe(subscriber);
 
     assertThat(subscriber.takeValue().body()).isEqualTo("Hi");
diff --git a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
index 49de8bf19..103c17a13 100644
--- a/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
+++ b/retrofit-adapters/rxjava/src/test/java/retrofit2/adapter/rxjava/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.rxjava;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/rxjava2/pom.xml b/retrofit-adapters/rxjava2/pom.xml
index a3577d403..64db06c98 100644
--- a/retrofit-adapters/rxjava2/pom.xml
+++ b/retrofit-adapters/rxjava2/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
index d020b3a6a..d6fe3066e 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
@@ -18,7 +18,6 @@
 import io.reactivex.Completable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.observers.TestObserver;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.io.IOException;
@@ -27,7 +26,6 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
-import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.Dispatcher;
 import okhttp3.OkHttpClient;
@@ -60,16 +58,10 @@
   private List<Throwable> uncaughtExceptions = new ArrayList<>();
 
   @Before public void setUp() {
-    ExecutorService executorService = Executors.newCachedThreadPool(new ThreadFactory() {
-      @Override public Thread newThread(Runnable r) {
-        Thread thread = new Thread(r);
-        thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
-          @Override public void uncaughtException(Thread t, Throwable e) {
-            uncaughtExceptions.add(e);
-          }
-        });
-        return thread;
-      }
+    ExecutorService executorService = Executors.newCachedThreadPool(r -> {
+      Thread thread = new Thread(r);
+      thread.setUncaughtExceptionHandler((t, e) -> uncaughtExceptions.add(e));
+      return thread;
     });
 
     OkHttpClient client = new OkHttpClient.Builder()
@@ -113,13 +105,11 @@
 
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicReference<Throwable> errorRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!errorRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
-        latch.countDown();
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!errorRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
+      latch.countDown();
     });
 
     TestObserver<Void> observer = new TestObserver<>();
@@ -139,13 +129,11 @@
 
     final CountDownLatch latch = new CountDownLatch(1);
     final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!pluginRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
-        latch.countDown();
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!pluginRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
+      latch.countDown();
     });
 
     TestObserver<Void> observer = new TestObserver<>();
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
index 6c558b029..9dda24a27 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -58,11 +57,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> errorRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!errorRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!errorRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
     });
 
@@ -81,11 +78,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> pluginRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!pluginRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!pluginRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable); // Don't swallow secondary errors!
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
index 34afbbeef..b4be4ffe3 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
@@ -18,7 +18,6 @@
 import io.reactivex.Flowable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -76,11 +75,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -101,11 +98,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -144,11 +139,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +161,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -211,11 +202,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -235,11 +224,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
index d5f83e1bd..44b643e8c 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
@@ -20,8 +20,8 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
+import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import org.junit.Before;
@@ -33,8 +33,6 @@
 import retrofit2.Retrofit;
 import retrofit2.http.GET;
 
-import java.util.concurrent.atomic.AtomicReference;
-
 import static okhttp3.mockwebserver.SocketPolicy.DISCONNECT_AFTER_REQUEST;
 import static org.assertj.core.api.Assertions.assertThat;
 
@@ -64,11 +62,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -87,11 +83,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -116,11 +110,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -139,11 +131,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +158,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -192,11 +180,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
index 1afe1eaa3..82ed41824 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableTest.java
@@ -16,7 +16,6 @@
 package retrofit2.adapter.rxjava2;
 
 import io.reactivex.Observable;
-import io.reactivex.functions.Function;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.io.IOException;
 import okhttp3.mockwebserver.MockResponse;
@@ -139,11 +138,7 @@
   @Test public void observableAssembly() {
     try {
       final Observable<String> justMe = Observable.just("me");
-      RxJavaPlugins.setOnObservableAssembly(new Function<Observable, Observable>() {
-        @Override public Observable apply(Observable f) {
-          return justMe;
-        }
-      });
+      RxJavaPlugins.setOnObservableAssembly(f -> justMe);
       assertThat(service.body()).isEqualTo(justMe);
     } finally {
       RxJavaPlugins.reset();
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
index 05c1d4f8f..be4899ebc 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -76,11 +75,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -101,11 +98,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -144,11 +139,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -168,11 +161,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -211,11 +202,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -235,11 +224,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
index 294722783..612d2e02d 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
@@ -20,7 +20,6 @@
 import io.reactivex.disposables.Disposable;
 import io.reactivex.exceptions.CompositeException;
 import io.reactivex.exceptions.Exceptions;
-import io.reactivex.functions.Consumer;
 import io.reactivex.plugins.RxJavaPlugins;
 import java.util.concurrent.atomic.AtomicReference;
 import okhttp3.mockwebserver.MockResponse;
@@ -63,11 +62,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -86,11 +83,9 @@
     server.enqueue(new MockResponse().setResponseCode(404));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -115,11 +110,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -138,11 +131,9 @@
     server.enqueue(new MockResponse().setSocketPolicy(DISCONNECT_AFTER_REQUEST));
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -167,11 +158,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
@@ -191,11 +180,9 @@
     server.enqueue(new MockResponse());
 
     final AtomicReference<Throwable> throwableRef = new AtomicReference<>();
-    RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
-      @Override public void accept(Throwable throwable) throws Exception {
-        if (!throwableRef.compareAndSet(null, throwable)) {
-          throw Exceptions.propagate(throwable);
-        }
+    RxJavaPlugins.setErrorHandler(throwable -> {
+      if (!throwableRef.compareAndSet(null, throwable)) {
+        throw Exceptions.propagate(throwable);
       }
     });
 
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
index c975258cb..6bb111d71 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.rxjava2;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-adapters/scala/pom.xml b/retrofit-adapters/scala/pom.xml
index 0b47b87d9..47a8089e0 100644
--- a/retrofit-adapters/scala/pom.xml
+++ b/retrofit-adapters/scala/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-adapters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
index a46c087d3..874ded15f 100644
--- a/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
+++ b/retrofit-adapters/scala/src/test/java/retrofit2/adapter/scala/StringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.adapter.scala;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import okhttp3.MediaType;
@@ -26,21 +25,13 @@
 
 final class StringConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, String> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) throws IOException {
-        return value.string();
-      }
-    };
+    return ResponseBody::string;
   }
 
-  @Override public Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
-    return new Converter<String, RequestBody>() {
-      @Override public RequestBody convert(String value) throws IOException {
-        return RequestBody.create(MediaType.get("text/plain"), value);
-      }
-    };
+    return value -> RequestBody.create(MediaType.get("text/plain"), value);
   }
 }
diff --git a/retrofit-converters/gson/pom.xml b/retrofit-converters/gson/pom.xml
index cf4d73965..dfba1c12c 100644
--- a/retrofit-converters/gson/pom.xml
+++ b/retrofit-converters/gson/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/guava/pom.xml b/retrofit-converters/guava/pom.xml
index 4d4bd5c77..01cb40a91 100644
--- a/retrofit-converters/guava/pom.xml
+++ b/retrofit-converters/guava/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
index 5ef6abfaa..a1f9b576f 100644
--- a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/AlwaysNullConverterFactory.java
@@ -23,12 +23,8 @@
 
 final class AlwaysNullConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, Object> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return null;
-      }
-    };
+    return value -> null;
   }
 }
diff --git a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
index 24426222a..f85e16b63 100644
--- a/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
+++ b/retrofit-converters/guava/src/test/java/retrofit/converter/guava/GuavaOptionalConverterFactoryTest.java
@@ -72,16 +72,12 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new Converter.Factory() {
-          @Nullable @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          @Nullable @Override public Converter<ResponseBody, Object> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             if (getRawType(type) != Object.class) {
               return null;
             }
-            return new Converter<ResponseBody, Object>() {
-              @Override public Object convert(ResponseBody value) {
-                return object;
-              }
-            };
+            return value -> object;
           }
         })
         .addConverterFactory(GuavaOptionalConverterFactory.create())
diff --git a/retrofit-converters/jackson/pom.xml b/retrofit-converters/jackson/pom.xml
index 9614d6e76..cd1b631e3 100644
--- a/retrofit-converters/jackson/pom.xml
+++ b/retrofit-converters/jackson/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/java8/pom.xml b/retrofit-converters/java8/pom.xml
index 1300ea512..db657b724 100644
--- a/retrofit-converters/java8/pom.xml
+++ b/retrofit-converters/java8/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
@@ -48,18 +48,6 @@
 
   <build>
     <plugins>
-      <plugin>
-        <groupId>org.codehaus.mojo</groupId>
-        <artifactId>animal-sniffer-maven-plugin</artifactId>
-        <version>${animal.sniffer.version}</version>
-        <configuration>
-          <signature>
-            <groupId>org.kaazing.mojo.signature</groupId>
-            <artifactId>java18</artifactId>
-            <version>1.0</version>
-          </signature>
-        </configuration>
-      </plugin>
       <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-jar-plugin</artifactId>
diff --git a/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
index b94d5fd78..161daa081 100644
--- a/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
+++ b/retrofit-converters/java8/src/test/java/retrofit/converter/java8/AlwaysNullConverterFactory.java
@@ -23,12 +23,8 @@
 
 final class AlwaysNullConverterFactory extends Converter.Factory {
   @Override
-  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
+  public Converter<ResponseBody, Object> responseBodyConverter(Type type, Annotation[] annotations,
       Retrofit retrofit) {
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return null;
-      }
-    };
+    return value -> null;
   }
 }
diff --git a/retrofit-converters/jaxb/pom.xml b/retrofit-converters/jaxb/pom.xml
index a21e5b132..f98310228 100644
--- a/retrofit-converters/jaxb/pom.xml
+++ b/retrofit-converters/jaxb/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/moshi/pom.xml b/retrofit-converters/moshi/pom.xml
index 3bc1ea664..b59d2df1b 100644
--- a/retrofit-converters/moshi/pom.xml
+++ b/retrofit-converters/moshi/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
index 3eb6ceebc..c92bf0bb7 100644
--- a/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
+++ b/retrofit-converters/moshi/src/test/java/retrofit2/converter/moshi/MoshiConverterFactoryTest.java
@@ -16,7 +16,6 @@
 package retrofit2.converter.moshi;
 
 import com.squareup.moshi.FromJson;
-import com.squareup.moshi.JsonAdapter;
 import com.squareup.moshi.JsonDataException;
 import com.squareup.moshi.JsonQualifier;
 import com.squareup.moshi.JsonReader;
@@ -26,9 +25,7 @@
 import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.annotation.Retention;
-import java.lang.reflect.Type;
 import java.nio.charset.Charset;
-import java.util.Set;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
 import okhttp3.mockwebserver.RecordedRequest;
@@ -142,16 +139,13 @@
 
   @Before public void setUp() {
     Moshi moshi = new Moshi.Builder()
-        .add(new JsonAdapter.Factory() {
-          @Override public JsonAdapter<?> create(Type type, Set<? extends Annotation> annotations,
-              Moshi moshi) {
-            for (Annotation annotation : annotations) {
-              if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {
-                throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);
-              }
+        .add((type, annotations, moshi1) -> {
+          for (Annotation annotation : annotations) {
+            if (!annotation.annotationType().isAnnotationPresent(JsonQualifier.class)) {
+              throw new AssertionError("Non-@JsonQualifier annotation: " + annotation);
             }
-            return null;
           }
+          return null;
         })
         .add(new Adapters())
         .build();
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index b912a6b70..ea5f43707 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/protobuf/pom.xml b/retrofit-converters/protobuf/pom.xml
index 3bfe60806..9fd86d556 100644
--- a/retrofit-converters/protobuf/pom.xml
+++ b/retrofit-converters/protobuf/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/scalars/pom.xml b/retrofit-converters/scalars/pom.xml
index d1490ed06..8ebfc00bf 100644
--- a/retrofit-converters/scalars/pom.xml
+++ b/retrofit-converters/scalars/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/simplexml/pom.xml b/retrofit-converters/simplexml/pom.xml
index 26958fa35..c5cc09d46 100644
--- a/retrofit-converters/simplexml/pom.xml
+++ b/retrofit-converters/simplexml/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-converters/wire/pom.xml b/retrofit-converters/wire/pom.xml
index fc689c027..d658aae41 100644
--- a/retrofit-converters/wire/pom.xml
+++ b/retrofit-converters/wire/pom.xml
@@ -10,7 +10,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>retrofit-converters</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-mock/pom.xml b/retrofit-mock/pom.xml
index 3297afacd..5ef237983 100644
--- a/retrofit-mock/pom.xml
+++ b/retrofit-mock/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
index b525696fb..c1adf9cfa 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/BehaviorDelegate.java
@@ -16,8 +16,6 @@
 package retrofit2.mock;
 
 import java.lang.annotation.Annotation;
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.lang.reflect.Type;
 import java.util.concurrent.ExecutorService;
@@ -55,15 +53,12 @@ public T returningResponse(@Nullable Object response) {
   public <R> T returning(Call<R> call) {
     final Call<R> behaviorCall = new BehaviorCall<>(behavior, executor, call);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class[] { service },
-        new InvocationHandler() {
-          @Override
-          public T invoke(Object proxy, Method method, Object[] args) throws Throwable {
-            Type returnType = method.getGenericReturnType();
-            Annotation[] methodAnnotations = method.getAnnotations();
-            CallAdapter<R, T> callAdapter =
-                (CallAdapter<R, T>) retrofit.callAdapter(returnType, methodAnnotations);
-            return callAdapter.adapt(behaviorCall);
-          }
+        (proxy, method, args) -> {
+          Type returnType = method.getGenericReturnType();
+          Annotation[] methodAnnotations = method.getAnnotations();
+          CallAdapter<R, T> callAdapter =
+              (CallAdapter<R, T>) retrofit.callAdapter(returnType, methodAnnotations);
+          return callAdapter.adapt(behaviorCall);
         });
   }
 }
diff --git a/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
index 263808dd4..8069a071f 100644
--- a/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
+++ b/retrofit-mock/src/main/java/retrofit2/mock/NetworkBehavior.java
@@ -67,11 +67,8 @@ public static NetworkBehavior create(Random random) {
   private volatile int failurePercent = DEFAULT_FAILURE_PERCENT;
   private volatile Throwable failureException;
   private volatile int errorPercent = DEFAULT_ERROR_PERCENT;
-  private volatile Callable<Response<?>> errorFactory = new Callable<Response<?>>() {
-    @Override public Response<?> call() {
-      return Response.error(500, ResponseBody.create(null, new byte[0]));
-    }
-  };
+  private volatile Callable<Response<?>> errorFactory =
+      () -> Response.error(500, ResponseBody.create(null, new byte[0]));
 
   private NetworkBehavior(Random random) {
     this.random = random;
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
index 7199da059..a3cd05c77 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/BehaviorDelegateTest.java
@@ -209,13 +209,11 @@
 
     final Call<String> call = service.response();
 
-    new Thread(new Runnable() {
-      @Override public void run() {
-        try {
-          Thread.sleep(100);
-          call.cancel();
-        } catch (InterruptedException ignored) {
-        }
+    new Thread(() -> {
+      try {
+        Thread.sleep(100);
+        call.cancel();
+      } catch (InterruptedException ignored) {
       }
     }).start();
 
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
index 8b044175a..6571fda4f 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/CallsTest.java
@@ -242,10 +242,8 @@
 
   @Test public void deferredThrowExecute() throws IOException {
     final IOException failure = new IOException("Hey");
-    Call<Object> failing = Calls.defer(new Callable<Call<Object>>() {
-      @Override public Call<Object> call() throws Exception {
-        throw failure;
-      }
+    Call<Object> failing = Calls.defer(() -> {
+      throw failure;
     });
     try {
       failing.execute();
@@ -257,10 +255,8 @@
 
   @Test public void deferredThrowEnqueue() {
     final IOException failure = new IOException("Hey");
-    Call<Object> failing = Calls.defer(new Callable<Call<Object>>() {
-      @Override public Call<Object> call() throws Exception {
-        throw failure;
-      }
+    Call<Object> failing = Calls.defer(() -> {
+      throw failure;
     });
     final AtomicReference<Throwable> failureRef = new AtomicReference<>();
     failing.enqueue(new Callback<Object>() {
diff --git a/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
index 73de57911..3224226c7 100644
--- a/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
+++ b/retrofit-mock/src/test/java/retrofit2/mock/NetworkBehaviorTest.java
@@ -111,11 +111,7 @@
   }
 
   @Test public void errorFactoryCannotReturnNull() {
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        return null;
-      }
-    });
+    behavior.setErrorFactory(() -> null);
     try {
       behavior.createErrorResponse();
       fail();
@@ -126,10 +122,8 @@
 
   @Test public void errorFactoryCannotThrow() {
     final RuntimeException broken = new RuntimeException("Broken");
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        throw broken;
-      }
+    behavior.setErrorFactory(() -> {
+      throw broken;
     });
     try {
       behavior.createErrorResponse();
@@ -141,11 +135,7 @@
   }
 
   @Test public void errorFactoryCannotReturnSuccess() {
-    behavior.setErrorFactory(new Callable<Response<?>>() {
-      @Override public Response<?> call() throws Exception {
-        return Response.success("Taco");
-      }
-    });
+    behavior.setErrorFactory(() -> Response.success("Taco"));
     try {
       behavior.createErrorResponse();
       fail();
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 5d7dfb52c..05c350a28 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
index a16aef4b2..8c7134565 100644
--- a/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/DefaultCallAdapterFactory.java
@@ -74,24 +74,18 @@
 
       delegate.enqueue(new Callback<T>() {
         @Override public void onResponse(Call<T> call, final Response<T> response) {
-          callbackExecutor.execute(new Runnable() {
-            @Override public void run() {
-              if (delegate.isCanceled()) {
-                // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.
-                callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
-              } else {
-                callback.onResponse(ExecutorCallbackCall.this, response);
-              }
+          callbackExecutor.execute(() -> {
+            if (delegate.isCanceled()) {
+              // Emulate OkHttp's behavior of throwing/delivering an IOException on cancellation.
+              callback.onFailure(ExecutorCallbackCall.this, new IOException("Canceled"));
+            } else {
+              callback.onResponse(ExecutorCallbackCall.this, response);
             }
           });
         }
 
         @Override public void onFailure(Call<T> call, final Throwable t) {
-          callbackExecutor.execute(new Runnable() {
-            @Override public void run() {
-              callback.onFailure(ExecutorCallbackCall.this, t);
-            }
-          });
+          callbackExecutor.execute(() -> callback.onFailure(ExecutorCallbackCall.this, t));
         }
       });
     }
diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index f24d4817a..f6853af8d 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -21,17 +21,13 @@
 import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
-import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.concurrent.Executor;
 import javax.annotation.Nullable;
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 import static java.util.Arrays.asList;
 import static java.util.Collections.emptyList;
 import static java.util.Collections.singletonList;
-import static java.util.Collections.unmodifiableList;
 
 class Platform {
   private static final Platform PLATFORM = findPlatform();
@@ -48,12 +44,13 @@ private static Platform findPlatform() {
       }
     } catch (ClassNotFoundException ignored) {
     }
-    try {
-      Class.forName("java.util.Optional");
-      return new Java8();
-    } catch (ClassNotFoundException ignored) {
-    }
-    return new Platform();
+    return new Platform(true);
+  }
+
+  private final boolean hasJava8Types;
+
+  Platform(boolean hasJava8Types) {
+    this.hasJava8Types = hasJava8Types;
   }
 
   @Nullable Executor defaultCallbackExecutor() {
@@ -62,105 +59,51 @@ private static Platform findPlatform() {
 
   List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
       @Nullable Executor callbackExecutor) {
-    return singletonList(new DefaultCallAdapterFactory(callbackExecutor));
+    DefaultCallAdapterFactory executorFactory = new DefaultCallAdapterFactory(callbackExecutor);
+    return hasJava8Types
+        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)
+        : singletonList(executorFactory);
   }
 
   int defaultCallAdapterFactoriesSize() {
-    return 1;
+    return hasJava8Types ? 2 : 1;
   }
 
   List<? extends Converter.Factory> defaultConverterFactories() {
-    return emptyList();
+    return hasJava8Types
+        ? singletonList(OptionalConverterFactory.INSTANCE)
+        : emptyList();
   }
 
   int defaultConverterFactoriesSize() {
-    return 0;
+    return hasJava8Types ? 1 : 0;
   }
 
   boolean isDefaultMethod(Method method) {
-    return false;
+    return hasJava8Types && method.isDefault();
   }
 
   @Nullable Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object,
       @Nullable Object... args) throws Throwable {
-    throw new UnsupportedOperationException();
-  }
-
-  @IgnoreJRERequirement // Only classloaded and used on Java 8.
-  static class Java8 extends Platform {
-    @Override boolean isDefaultMethod(Method method) {
-      return method.isDefault();
-    }
-
-    @Override Object invokeDefaultMethod(Method method, Class<?> declaringClass, Object object,
-        @Nullable Object... args) throws Throwable {
-      // Because the service interface might not be public, we need to use a MethodHandle lookup
-      // that ignores the visibility of the declaringClass.
-      Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);
-      constructor.setAccessible(true);
-      return constructor.newInstance(declaringClass, -1 /* trusted */)
-          .unreflectSpecial(method, declaringClass)
-          .bindTo(object)
-          .invokeWithArguments(args);
-    }
-
-    @Override List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
-        @Nullable Executor callbackExecutor) {
-      List<CallAdapter.Factory> factories = new ArrayList<>(2);
-      factories.add(CompletableFutureCallAdapterFactory.INSTANCE);
-      factories.add(new DefaultCallAdapterFactory(callbackExecutor));
-      return unmodifiableList(factories);
-    }
-
-    @Override int defaultCallAdapterFactoriesSize() {
-      return 2;
-    }
-
-    @Override List<? extends Converter.Factory> defaultConverterFactories() {
-      return singletonList(OptionalConverterFactory.INSTANCE);
-    }
-
-    @Override int defaultConverterFactoriesSize() {
-      return 1;
-    }
+    // Because the service interface might not be public, we need to use a MethodHandle lookup
+    // that ignores the visibility of the declaringClass.
+    Constructor<Lookup> constructor = Lookup.class.getDeclaredConstructor(Class.class, int.class);
+    constructor.setAccessible(true);
+    return constructor.newInstance(declaringClass, -1 /* trusted */)
+        .unreflectSpecial(method, declaringClass)
+        .bindTo(object)
+        .invokeWithArguments(args);
   }
 
-  static class Android extends Platform {
-    @IgnoreJRERequirement // Guarded by API check.
-    @Override boolean isDefaultMethod(Method method) {
-      if (Build.VERSION.SDK_INT < 24) {
-        return false;
-      }
-      return method.isDefault();
+  static final class Android extends Platform {
+    Android() {
+      super(Build.VERSION.SDK_INT >= 24);
     }
 
     @Override public Executor defaultCallbackExecutor() {
       return new MainThreadExecutor();
     }
 
-    @Override List<? extends CallAdapter.Factory> defaultCallAdapterFactories(
-        @Nullable Executor callbackExecutor) {
-      if (callbackExecutor == null) throw new AssertionError();
-      DefaultCallAdapterFactory executorFactory = new DefaultCallAdapterFactory(callbackExecutor);
-      return Build.VERSION.SDK_INT >= 24
-        ? asList(CompletableFutureCallAdapterFactory.INSTANCE, executorFactory)
-        : singletonList(executorFactory);
-    }
-
-    @Override int defaultCallAdapterFactoriesSize() {
-      return Build.VERSION.SDK_INT >= 24 ? 2 : 1;
-    }
-
-    @Override List<? extends Converter.Factory> defaultConverterFactories() {
-      return Build.VERSION.SDK_INT >= 24
-          ? singletonList(OptionalConverterFactory.INSTANCE)
-          : Collections.<Converter.Factory>emptyList();
-    }
-
-    @Override int defaultConverterFactoriesSize() {
-      return Build.VERSION.SDK_INT >= 24 ? 1 : 0;
-    }
-
     static class MainThreadExecutor implements Executor {
       private final Handler handler = new Handler(Looper.getMainLooper());
 
diff --git a/retrofit/src/main/java/retrofit2/Response.java b/retrofit/src/main/java/retrofit2/Response.java
index 1db6eb479..598bcf02b 100644
--- a/retrofit/src/main/java/retrofit2/Response.java
+++ b/retrofit/src/main/java/retrofit2/Response.java
@@ -83,8 +83,10 @@
    * as the error body.
    */
   public static <T> Response<T> error(int code, ResponseBody body) {
+    checkNotNull(body, "body == null");
     if (code < 400) throw new IllegalArgumentException("code < 400: " + code);
     return error(body, new okhttp3.Response.Builder() //
+        .body(new OkHttpCall.NoContentResponseBody(body.contentType(), body.contentLength()))
         .code(code)
         .message("Response.error()")
         .protocol(Protocol.HTTP_1_1)
diff --git a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
index 67a4d45f2..66b2b0963 100644
--- a/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
+++ b/retrofit/src/main/resources/META-INF/proguard/retrofit2.pro
@@ -21,6 +21,7 @@
 
 # Top-level functions that can only be used by Kotlin.
 -dontwarn retrofit2.KotlinExtensions
+-dontwarn retrofit2.KotlinExtensions$*
 
 # With R8 full mode, it sees no subtypes of Retrofit interfaces since they are created with a Proxy
 # and replaces all potential values with null. Explicitly keeping the interfaces prevents this.
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index a99bf3646..f347189ef 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -22,7 +22,6 @@
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
-import okhttp3.Interceptor;
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
@@ -195,13 +194,11 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<?, RequestBody> requestBodyConverter(Type type,
+          public Converter<String, RequestBody> requestBodyConverter(Type type,
               Annotation[] parameterAnnotations, Annotation[] methodAnnotations,
               Retrofit retrofit) {
-            return new Converter<String, RequestBody>() {
-              @Override public RequestBody convert(String value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -222,13 +219,11 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<?, RequestBody> requestBodyConverter(Type type,
+          public Converter<String, RequestBody> requestBodyConverter(Type type,
               Annotation[] parameterAnnotations, Annotation[] methodAnnotations,
               Retrofit retrofit) {
-            return new Converter<String, RequestBody>() {
-              @Override public RequestBody convert(String value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -258,12 +253,10 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -284,18 +277,16 @@
   @Test public void conversionProblemIncomingMaskedByConverterIsUnwrapped() throws IOException {
     // MWS has no way to trigger IOExceptions during the response body so use an interceptor.
     OkHttpClient client = new OkHttpClient.Builder() //
-        .addInterceptor(new Interceptor() {
-          @Override public okhttp3.Response intercept(Chain chain) throws IOException {
-            okhttp3.Response response = chain.proceed(chain.request());
-            ResponseBody body = response.body();
-            BufferedSource source = Okio.buffer(new ForwardingSource(body.source()) {
-              @Override public long read(Buffer sink, long byteCount) throws IOException {
-                throw new IOException("cause");
-              }
-            });
-            body = ResponseBody.create(body.contentType(), body.contentLength(), source);
-            return response.newBuilder().body(body).build();
-          }
+        .addInterceptor(chain -> {
+          okhttp3.Response response = chain.proceed(chain.request());
+          ResponseBody body = response.body();
+          BufferedSource source = Okio.buffer(new ForwardingSource(body.source()) {
+            @Override public long read(Buffer sink, long byteCount) throws IOException {
+              throw new IOException("cause");
+            }
+          });
+          body = ResponseBody.create(body.contentType(), body.contentLength(), source);
+          return response.newBuilder().body(body).build();
         }).build();
 
     Retrofit retrofit = new Retrofit.Builder()
@@ -303,16 +294,14 @@
         .client(client)
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                try {
-                  return value.string();
-                } catch (IOException e) {
-                  // Some serialization libraries mask transport problems in runtime exceptions. Bad!
-                  throw new RuntimeException("wrapper", e);
-                }
+            return value -> {
+              try {
+                return value.string();
+              } catch (IOException e) {
+                // Some serialization libraries mask transport problems in runtime exceptions. Bad!
+                throw new RuntimeException("wrapper", e);
               }
             };
           }
@@ -336,12 +325,10 @@
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                throw new UnsupportedOperationException("I am broken!");
-              }
+            return value -> {
+              throw new UnsupportedOperationException("I am broken!");
             };
           }
         })
@@ -369,16 +356,14 @@
   }
 
   @Test public void http204SkipsConverter() throws IOException {
-    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) {
-        throw new AssertionError();
-      }
+    final Converter<ResponseBody, String> converter = value -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             return converter;
           }
@@ -394,16 +379,14 @@
   }
 
   @Test public void http205SkipsConverter() throws IOException {
-    final Converter<ResponseBody, String> converter = new Converter<ResponseBody, String>() {
-      @Override public String convert(ResponseBody value) {
-        throw new AssertionError();
-      }
+    final Converter<ResponseBody, String> converter = value -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new ToStringConverterFactory() {
           @Override
-          public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
             return converter;
           }
@@ -422,15 +405,13 @@
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .addConverterFactory(new Converter.Factory() {
-          @Override public Converter<ResponseBody, ?> responseBodyConverter(Type type,
+          @Override public Converter<ResponseBody, String> responseBodyConverter(Type type,
               Annotation[] annotations, Retrofit retrofit) {
-            return new Converter<ResponseBody, String>() {
-              @Override public String convert(ResponseBody value) throws IOException {
-                String prefix = value.source().readUtf8(2);
-                value.source().skip(20_000 - 4);
-                String suffix = value.source().readUtf8();
-                return prefix + suffix;
-              }
+            return value -> {
+              String prefix = value.source().readUtf8(2);
+              value.source().skip(20_000 - 4);
+              String suffix = value.source().readUtf8();
+              return prefix + suffix;
             };
           }
         })
diff --git a/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
index e23a5d3c1..85182a469 100644
--- a/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/DefaultCallAdapterFactoryTest.java
@@ -20,10 +20,8 @@
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import java.util.List;
-import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicBoolean;
 import okhttp3.Request;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -37,11 +35,7 @@
   private final Retrofit retrofit = new Retrofit.Builder()
       .baseUrl("http://localhost:1")
       .build();
-  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(new Executor() {
-    @Override public void execute(@NotNull Runnable command) {
-      command.run();
-    }
-  });
+  private final CallAdapter.Factory factory = new DefaultCallAdapterFactory(Runnable::run);
 
   @Test public void rawTypeThrows() {
     try {
diff --git a/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
index 501c909e4..fe101cae4 100644
--- a/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
+++ b/retrofit/src/test/java/retrofit2/Java8DefaultMethodsTest.java
@@ -15,31 +15,41 @@
  */
 package retrofit2;
 
-// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features.
+import java.io.IOException;
+import okhttp3.mockwebserver.MockResponse;
+import okhttp3.mockwebserver.MockWebServer;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
+
+import static org.assertj.core.api.Assertions.assertThat;
+
 public final class Java8DefaultMethodsTest {
-  //@Rule public final MockWebServer server = new MockWebServer();
-  //
-  //interface Example {
-  //  @GET("/") Call<String> user(@Query("name") String name);
-  //
-  //  default Call<String> user() {
-  //    return user("hey");
-  //  }
-  //}
-  //
-  //@Test public void test() throws IOException {
-  //  server.enqueue(new MockResponse().setBody("Hi"));
-  //  server.enqueue(new MockResponse().setBody("Hi"));
-  //
-  //  Retrofit retrofit = new Retrofit.Builder()
-  //      .baseUrl(server.url("/"))
-  //      .addConverterFactory(new ToStringConverterFactory())
-  //      .build();
-  //  Example example = retrofit.create(Example.class);
-  //
-  //  Response<String> response = example.user().execute();
-  //  assertThat(response.body()).isEqualTo("Hi");
-  //  Response<String> response2 = example.user("Hi").execute();
-  //  assertThat(response2.body()).isEqualTo("Hi");
-  //}
+  @Rule public final MockWebServer server = new MockWebServer();
+
+  interface Example {
+    @GET("/") Call<String> user(@Query("name") String name);
+
+    default Call<String> user() {
+      return user("hey");
+    }
+  }
+
+  @Test public void test() throws IOException {
+    server.enqueue(new MockResponse().setBody("Hi"));
+    server.enqueue(new MockResponse().setBody("Hi"));
+
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .addConverterFactory(new ToStringConverterFactory())
+        .build();
+    Example example = retrofit.create(Example.class);
+
+    Response<String> response = example.user().execute();
+    assertThat(response.body()).isEqualTo("Hi");
+    Response<String> response2 = example.user("Hi").execute();
+    assertThat(response2.body()).isEqualTo("Hi");
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
index bc2521d5a..807a21015 100644
--- a/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
+++ b/retrofit/src/test/java/retrofit2/Java8DefaultStaticMethodsInValidationTest.java
@@ -15,28 +15,36 @@
  */
 package retrofit2;
 
-// TODO this test doesn't play nice in the IDE because it relies on Java 8 language features.
+import okhttp3.mockwebserver.MockWebServer;
+import org.junit.Rule;
+import org.junit.Test;
+import retrofit2.helpers.ToStringConverterFactory;
+import retrofit2.http.GET;
+import retrofit2.http.Query;
+
+import static org.junit.Assert.assertNotNull;
+
 public final class Java8DefaultStaticMethodsInValidationTest {
-  //@Rule public final MockWebServer server = new MockWebServer();
-  //
-  //interface Example {
-  //  @GET("/") Call<String> user(@Query("name") String name);
-  //
-  //  default Call<String> user() {
-  //    return user("hey");
-  //  }
-  //
-  //  static String staticMethod() {
-  //    return "Hi";
-  //  }
-  //}
-  //
-  //@Test public void test() throws IOException {
-  //  Retrofit retrofit = new Retrofit.Builder()
-  //      .baseUrl(server.url("/"))
-  //      .addConverterFactory(new ToStringConverterFactory())
-  //      .validateEagerly(true)
-  //      .build();
-  //  Example example = retrofit.create(Example.class);
-  //}
+  @Rule public final MockWebServer server = new MockWebServer();
+
+  interface Example {
+    @GET("/") Call<String> user(@Query("name") String name);
+
+    default Call<String> user() {
+      return user("hey");
+    }
+
+    static String staticMethod() {
+      return "Hi";
+    }
+  }
+
+  @Test public void test() {
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(server.url("/"))
+        .addConverterFactory(new ToStringConverterFactory())
+        .validateEagerly(true)
+        .build();
+    assertNotNull(retrofit.create(Example.class));
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
index dd7f3a675..057e8d3d4 100644
--- a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
@@ -3013,10 +3013,8 @@ private static void assertBody(RequestBody body, String expected) {
   }
 
   static <T> Request buildRequest(Class<T> cls, Retrofit.Builder builder, Object... args) {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new UnsupportedOperationException("Not implemented");
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new UnsupportedOperationException("Not implemented");
     };
 
     Retrofit retrofit = builder.callFactory(callFactory).build();
diff --git a/retrofit/src/test/java/retrofit2/ResponseTest.java b/retrofit/src/test/java/retrofit2/ResponseTest.java
index 02ab96677..2acf7a0f9 100644
--- a/retrofit/src/test/java/retrofit2/ResponseTest.java
+++ b/retrofit/src/test/java/retrofit2/ResponseTest.java
@@ -16,6 +16,7 @@
 package retrofit2;
 
 import okhttp3.Headers;
+import okhttp3.MediaType;
 import okhttp3.Protocol;
 import okhttp3.ResponseBody;
 import org.junit.Test;
@@ -119,9 +120,17 @@
   }
 
   @Test public void error() {
-    ResponseBody errorBody = ResponseBody.create(null, "Broken!");
+    MediaType plainText = MediaType.get("text/plain; charset=utf-8");
+    ResponseBody errorBody = ResponseBody.create(plainText, "Broken!");
     Response<?> response = Response.error(400, errorBody);
     assertThat(response.raw()).isNotNull();
+    assertThat(response.raw().body().contentType()).isEqualTo(plainText);
+    assertThat(response.raw().body().contentLength()).isEqualTo(7);
+    try {
+      response.raw().body().source();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
     assertThat(response.code()).isEqualTo(400);
     assertThat(response.message()).isEqualTo("Response.error()");
     assertThat(response.headers().size()).isZero();
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 65735f419..2310a74ce 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -37,12 +37,10 @@
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.OkHttpClient;
-import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
 import okhttp3.mockwebserver.MockResponse;
 import okhttp3.mockwebserver.MockWebServer;
-import org.jetbrains.annotations.NotNull;
 import org.junit.Rule;
 import org.junit.Test;
 import retrofit2.helpers.DelegatingCallAdapterFactory;
@@ -152,15 +150,9 @@
     };
     Converter.Factory converter = new Converter.Factory() {};
     HttpUrl baseUrl = server.url("/");
-    Executor executor = new Executor() {
-      @Override public void execute(@NotNull Runnable command) {
-        command.run();
-      }
-    };
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new AssertionError();
-      }
+    Executor executor = Runnable::run;
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new AssertionError();
     };
 
     Retrofit one = new Retrofit.Builder()
@@ -441,11 +433,7 @@
           Retrofit retrofit) {
         annotationsRef.set(annotations);
 
-        return new Converter<Object, String>() {
-          @Override public String convert(Object value) throws IOException {
-            return String.valueOf(value);
-          }
-        };
+        return (Converter<Object, String>) String::valueOf;
       }
     }
     Retrofit retrofit = new Retrofit.Builder()
@@ -776,10 +764,8 @@
   }
 
   @Test public void callFactoryPropagated() {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw new AssertionError();
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -799,11 +785,9 @@
 
   @Test public void callFactoryUsed() throws IOException {
     final AtomicBoolean called = new AtomicBoolean();
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        called.set(true);
-        return new OkHttpClient().newCall(request);
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      called.set(true);
+      return new OkHttpClient().newCall(request);
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -818,11 +802,7 @@
   }
 
   @Test public void callFactoryReturningNullThrows() throws IOException {
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        return null;
-      }
-    };
+    okhttp3.Call.Factory callFactory = request -> null;
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
         .callFactory(callFactory)
@@ -842,10 +822,8 @@
 
   @Test public void callFactoryThrowingPropagates() {
     final RuntimeException cause = new RuntimeException("Broken!");
-    okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
-      @Override public okhttp3.Call newCall(Request request) {
-        throw cause;
-      }
+    okhttp3.Call.Factory callFactory = request -> {
+      throw cause;
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -1328,7 +1306,7 @@
 
   @Test public void callbackExecutorPropagatesDefaultAndroid() {
     final Executor executor = Executors.newSingleThreadExecutor();
-    Platform platform = new Platform() {
+    Platform platform = new Platform(true) {
       @Override Executor defaultCallbackExecutor() {
         return executor;
       }
@@ -1340,10 +1318,8 @@
   }
 
   @Test public void callbackExecutorPropagated() {
-    Executor executor = new Executor() {
-      @Override public void execute(@NotNull Runnable command) {
-        throw new AssertionError();
-      }
+    Executor executor = command -> {
+      throw new AssertionError();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl("http://example.com/")
@@ -1355,11 +1331,9 @@
   @Test public void callbackExecutorUsedForSuccess() throws InterruptedException {
     final CountDownLatch runnableLatch = new CountDownLatch(1);
     final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        runnableRef.set(command);
-        runnableLatch.countDown();
-      }
+    Executor executor = command -> {
+      runnableRef.set(command);
+      runnableLatch.countDown();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -1391,11 +1365,9 @@
   @Test public void callbackExecutorUsedForFailure() throws InterruptedException {
     final CountDownLatch runnableLatch = new CountDownLatch(1);
     final AtomicReference<Runnable> runnableRef = new AtomicReference<>();
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        runnableRef.set(command);
-        runnableLatch.countDown();
-      }
+    Executor executor = command -> {
+      runnableRef.set(command);
+      runnableLatch.countDown();
     };
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
@@ -1425,11 +1397,7 @@
   }
 
   @Test public void skippedCallbackExecutorNotUsedForSuccess() throws InterruptedException {
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        fail();
-      }
-    };
+    Executor executor = command -> fail();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .callbackExecutor(executor)
@@ -1453,11 +1421,7 @@
   }
 
   @Test public void skippedCallbackExecutorNotUsedForFailure() throws InterruptedException {
-    Executor executor = new Executor() {
-      @Override public void execute(Runnable command) {
-        fail();
-      }
-    };
+    Executor executor = command -> fail();
     Retrofit retrofit = new Retrofit.Builder()
         .baseUrl(server.url("/"))
         .callbackExecutor(executor)
diff --git a/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java b/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
index bf3134696..74cc79864 100644
--- a/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/ObjectInstanceConverterFactory.java
@@ -25,15 +25,11 @@
 public final class ObjectInstanceConverterFactory extends Converter.Factory {
   public static final Object VALUE = new Object();
 
-  @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(
+  @Override public @Nullable Converter<ResponseBody, Object> responseBodyConverter(
       Type type, Annotation[] annotations, Retrofit retrofit) {
     if (type != Object.class) {
       return null;
     }
-    return new Converter<ResponseBody, Object>() {
-      @Override public Object convert(ResponseBody value) {
-        return VALUE;
-      }
-    };
+    return value -> VALUE;
   }
 }
diff --git a/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java b/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
index c267d3356..32af21a76 100644
--- a/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
+++ b/retrofit/src/test/java/retrofit2/helpers/ToStringConverterFactory.java
@@ -15,7 +15,6 @@
  */
 package retrofit2.helpers;
 
-import java.io.IOException;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
 import javax.annotation.Nullable;
@@ -28,26 +27,18 @@
 public class ToStringConverterFactory extends Converter.Factory {
   static final MediaType MEDIA_TYPE = MediaType.get("text/plain");
 
-  @Override public @Nullable Converter<ResponseBody, ?> responseBodyConverter(
+  @Override public @Nullable Converter<ResponseBody, String> responseBodyConverter(
       Type type, Annotation[] annotations, Retrofit retrofit) {
     if (String.class.equals(type)) {
-      return new Converter<ResponseBody, String>() {
-        @Override public String convert(ResponseBody value) throws IOException {
-          return value.string();
-        }
-      };
+      return ResponseBody::string;
     }
     return null;
   }
 
-  @Override public @Nullable Converter<?, RequestBody> requestBodyConverter(Type type,
+  @Override public @Nullable Converter<String, RequestBody> requestBodyConverter(Type type,
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
     if (String.class.equals(type)) {
-      return new Converter<String, RequestBody>() {
-        @Override public RequestBody convert(String value) throws IOException {
-          return RequestBody.create(MEDIA_TYPE, value);
-        }
-      };
+      return value -> RequestBody.create(MEDIA_TYPE, value);
     }
     return null;
   }
diff --git a/samples/pom.xml b/samples/pom.xml
index da6534366..a37e5450e 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -6,7 +6,7 @@
   <parent>
     <groupId>com.squareup.retrofit2</groupId>
     <artifactId>parent</artifactId>
-    <version>2.6.1-SNAPSHOT</version>
+    <version>2.7.0-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/samples/src/main/java/com/example/retrofit/ChunkingConverter.java b/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
index 1a2bde63a..7877b80c8 100644
--- a/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
+++ b/samples/src/main/java/com/example/retrofit/ChunkingConverter.java
@@ -49,7 +49,7 @@
    * present on {@code @Body} params.
    */
   static class ChunkingConverterFactory extends Converter.Factory {
-    @Override public @Nullable Converter<?, RequestBody> requestBodyConverter(Type type,
+    @Override public @Nullable Converter<Object, RequestBody> requestBodyConverter(Type type,
         Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
       boolean isBody = false;
       boolean isChunked = false;
@@ -65,19 +65,17 @@
       final Converter<Object, RequestBody> delegate =
           retrofit.nextRequestBodyConverter(this, type, parameterAnnotations, methodAnnotations);
       // Wrap it in a Converter which removes the content length from the delegate's body.
-      return new Converter<Object, RequestBody>() {
-        @Override public RequestBody convert(Object value) throws IOException {
-          final RequestBody realBody = delegate.convert(value);
-          return new RequestBody() {
-            @Override public MediaType contentType() {
-              return realBody.contentType();
-            }
+      return value -> {
+        final RequestBody realBody = delegate.convert(value);
+        return new RequestBody() {
+          @Override public MediaType contentType() {
+            return realBody.contentType();
+          }
 
-            @Override public void writeTo(BufferedSink sink) throws IOException {
-              realBody.writeTo(sink);
-            }
-          };
-        }
+          @Override public void writeTo(BufferedSink sink) throws IOException {
+            realBody.writeTo(sink);
+          }
+        };
       };
     }
   }
