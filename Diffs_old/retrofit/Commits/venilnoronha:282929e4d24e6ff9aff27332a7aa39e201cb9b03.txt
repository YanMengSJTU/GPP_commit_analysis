diff --git a/retrofit/src/main/java/retrofit/RequestBuilderAction.java b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
index eea1b0520..d3e84639a 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilderAction.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilderAction.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2015 Square, Inc.
+ * Copyright (C) 2015-2016 Square, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,22 +42,42 @@
 
     @Override void perform(RequestBuilder builder, Object value) {
       if (value == null) return; // Skip null values.
+      addHeader(builder, name, value);
+    }
+  }
 
-      if (value instanceof Iterable) {
-        for (Object iterableValue : (Iterable<?>) value) {
-          if (iterableValue != null) { // Skip null values.
-            builder.addHeader(name, iterableValue.toString());
-          }
+  private static void addHeader(RequestBuilder builder, String name, Object value) {
+    if (value instanceof Iterable) {
+      for (Object iterableValue : (Iterable<?>) value) {
+        if (iterableValue != null) { // Skip null values.
+          builder.addHeader(name, iterableValue.toString());
         }
-      } else if (value.getClass().isArray()) {
-        for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
-          Object arrayValue = Array.get(value, x);
-          if (arrayValue != null) { // Skip null values.
-            builder.addHeader(name, arrayValue.toString());
-          }
+      }
+    } else if (value.getClass().isArray()) {
+      for (int x = 0, arrayLength = Array.getLength(value); x < arrayLength; x++) {
+        Object arrayValue = Array.get(value, x);
+        if (arrayValue != null) { // Skip null values.
+          builder.addHeader(name, arrayValue.toString());
+        }
+      }
+    } else {
+      builder.addHeader(name, value.toString());
+    }
+  }
+
+  static final class HeaderMap extends RequestBuilderAction {
+    @Override void perform(RequestBuilder builder, Object value) {
+      if (value == null) return; // Skip null values.
+      Map<?, ?> map = (Map<?, ?>) value;
+      for (Map.Entry<?, ?> entry : map.entrySet()) {
+        Object entryKey = entry.getKey();
+        if (entryKey == null) {
+          throw new IllegalArgumentException("Header map contained null key.");
+        }
+        Object entryValue = entry.getValue();
+        if (entryValue != null) { // Skip null values.
+          addHeader(builder, entryKey.toString(), entryValue);
         }
-      } else {
-        builder.addHeader(name, value.toString());
       }
     }
   }
diff --git a/retrofit/src/main/java/retrofit/RequestFactoryParser.java b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
index 4d807ded0..82fc9b959 100644
--- a/retrofit/src/main/java/retrofit/RequestFactoryParser.java
+++ b/retrofit/src/main/java/retrofit/RequestFactoryParser.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (C) 2013 Square, Inc.
+ * Copyright (C) 2013-2016 Square, Inc.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -34,6 +34,7 @@
 import retrofit.http.HEAD;
 import retrofit.http.HTTP;
 import retrofit.http.Header;
+import retrofit.http.HeaderMap;
 import retrofit.http.Headers;
 import retrofit.http.Multipart;
 import retrofit.http.PATCH;
@@ -266,6 +267,12 @@ private void parseParameters(Retrofit retrofit) {
             Header header = (Header) methodParameterAnnotation;
             action = new RequestBuilderAction.Header(header.value());
 
+          } else if (methodParameterAnnotation instanceof HeaderMap) {
+            if (!Map.class.isAssignableFrom(Utils.getRawType(methodParameterType))) {
+              throw parameterError(i, "@HeaderMap parameter type must be Map.");
+            }
+            action = new RequestBuilderAction.HeaderMap();
+
           } else if (methodParameterAnnotation instanceof Field) {
             if (!isFormEncoded) {
               throw parameterError(i, "@Field parameters can only be used with form encoding.");
diff --git a/retrofit/src/main/java/retrofit/http/Header.java b/retrofit/src/main/java/retrofit/http/Header.java
index 4ce2cf166..b4ad61439 100644
--- a/retrofit/src/main/java/retrofit/http/Header.java
+++ b/retrofit/src/main/java/retrofit/http/Header.java
@@ -23,7 +23,7 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 /**
- * Replaces the header with the the value of its target.
+ * Replaces the header with the value of its target.
  * <p>
  * <pre>
  * &#64;GET("/")
@@ -37,6 +37,8 @@
  * be included in the request.
  *
  * @author Adrian Cole (adrianc@netflix.com)
+ * @see Headers
+ * @see HeaderMap
  */
 @Documented
 @Retention(RUNTIME)
diff --git a/retrofit/src/main/java/retrofit/http/HeaderMap.java b/retrofit/src/main/java/retrofit/http/HeaderMap.java
new file mode 100644
index 000000000..749e7e980
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/HeaderMap.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (C) 2016 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+/**
+ * Adds headers specified in the {@link java.util.Map Map}.
+ * <p>
+ * Both keys and values are converted to strings using {@link String#valueOf(Object)}.
+ * <p>
+ * Simple Example:
+ * <pre>
+ * &#64;GET("/search")
+ * void list(@HeaderMap Map&lt;String, String&gt; headers);
+ * </pre>
+ * Calling with
+ * {@code foo.list(ImmutableMap.of("Accept-Charset", "utf-8", "Accept", "text/plain"))}
+ * yields {@code /search} with headers {@code Accept-Charset: utf-8} and
+ * {@code Accept: text/plain}.
+ * <p>
+ * Header values may be {@code null} which will omit them from the request. Passing a
+ * {@link java.util.List List} or array will result in a header for each non-{@code null}
+ * item.
+ * 
+ * @author Venil Noronha
+ * @see Header
+ * @see Headers
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface HeaderMap {
+
+}
diff --git a/retrofit/src/main/java/retrofit/http/Headers.java b/retrofit/src/main/java/retrofit/http/Headers.java
index 36b9ff438..5e7157310 100644
--- a/retrofit/src/main/java/retrofit/http/Headers.java
+++ b/retrofit/src/main/java/retrofit/http/Headers.java
@@ -42,6 +42,8 @@
  * be included in the request.
  *
  * @author Adrian Cole (adrianc@netflix.com)
+ * @see Header
+ * @see HeaderMap
  */
 @Documented
 @Target(METHOD)
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 0d56c016e..f0020cf4b 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1,4 +1,4 @@
-// Copyright 2013 Square, Inc.
+// Copyright 2013-2016 Square, Inc.
 package retrofit;
 
 import com.squareup.okhttp.Interceptor;
@@ -29,6 +29,7 @@
 import retrofit.http.HEAD;
 import retrofit.http.HTTP;
 import retrofit.http.Header;
+import retrofit.http.HeaderMap;
 import retrofit.http.Headers;
 import retrofit.http.Multipart;
 import retrofit.http.PATCH;
@@ -440,6 +441,22 @@
     }
   }
 
+  @Test public void headerMapMustBeAMap() {
+    class Example {
+      @GET("/")
+      Call<ResponseBody> method(@HeaderMap List<String> a) {
+        return null;
+      }
+    }
+    try {
+      buildRequest(Example.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+      "@HeaderMap parameter type must be Map. (parameter #1)\n    for method Example.method");
+    }
+  }
+
   @Test public void queryMapRejectsNullKeys() {
     class Example {
       @GET("/") //
@@ -460,6 +477,26 @@
     }
   }
 
+  @Test public void headerMapRejectsNullKeys() {
+    class Example {
+      @GET("/")
+      Call<ResponseBody> method(@HeaderMap Map<String, String> a) {
+        return null;
+      }
+    }
+
+    Map<String, String> headers = new LinkedHashMap<>();
+    headers.put("Accept", "text/plain");
+    headers.put(null, "utf8");
+
+    try {
+      buildRequest(Example.class, headers);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage("Header map contained null key.");
+    }
+  }
+
   @Test public void twoBodies() {
     class Example {
       @PUT("/") //
@@ -897,6 +934,30 @@
     assertThat(request.body()).isNull();
   }
 
+  @Test public void getWithHeaderMap() {
+    class Example {
+      @GET("/search")
+      Call<ResponseBody> method(@HeaderMap Map<String, Object> headers) {
+        return null;
+      }
+    }
+
+    Map<String, Object> headers = new LinkedHashMap<>();
+    headers.put("Accept", Arrays.asList("text/plain", null));
+    headers.put("Accept-Charset", "utf-8");
+    headers.put("Accept-Encoding", Arrays.asList("gzip", "deflate"));
+    headers.put("Connection", null);
+
+    Request request = buildRequest(Example.class, headers);
+    assertThat(request.method()).isEqualTo("GET");
+    assertThat(request.headers().size()).isEqualTo(4);
+    assertThat(request.header("Accept")).isEqualTo("text/plain");
+    assertThat(request.header("Accept-Charset")).isEqualTo("utf-8");
+    assertThat(request.headers("Accept-Encoding")).contains("gzip", "deflate");
+    assertThat(request.urlString()).isEqualTo("http://example.com/search");
+    assertThat(request.body()).isNull();
+  }
+
   @Test public void getWithUrl() {
     class Example {
       @GET
