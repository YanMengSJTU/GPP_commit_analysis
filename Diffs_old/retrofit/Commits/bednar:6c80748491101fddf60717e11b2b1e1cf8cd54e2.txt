diff --git a/pom.xml b/pom.xml
index a389b655c..6461542f5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -54,7 +54,7 @@
 
     <!-- Adapter Dependencies -->
     <rxjava.version>1.3.0</rxjava.version>
-    <rxjava2.version>2.0.0</rxjava2.version>
+    <rxjava2.version>2.1.14</rxjava2.version>
     <guava.version>19.0</guava.version>
     <scala.version>2.12.4</scala.version>
 
@@ -72,7 +72,7 @@
 
     <!-- Test Dependencies -->
     <junit.version>4.12</junit.version>
-    <assertj.version>1.7.0</assertj.version>
+    <assertj.version>2.9.1</assertj.version>
     <mockito.version>1.9.5</mockito.version>
     <robolectric.version>3.0</robolectric.version>
   </properties>
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
index d008a5e70..a5eb3c0fe 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/AsyncTest.java
@@ -98,7 +98,7 @@
     });
 
     latch.await(1, SECONDS);
-    assertThat(errorRef.get()).isSameAs(e);
+    assertThat(errorRef.get()).hasCause(e);
   }
 
   @Test public void bodyThrowingInOnErrorDeliveredToPlugin() throws InterruptedException {
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
index 6c558b029..cbab398be 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/CompletableThrowingTest.java
@@ -74,7 +74,7 @@
       }
     });
 
-    assertThat(errorRef.get()).isSameAs(e);
+    assertThat(errorRef.get()).hasCause(e);
   }
 
   @Test public void bodyThrowingInOnErrorDeliveredToPlugin() {
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableTest.java
index 22efcee2b..f36df8d9d 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableTest.java
@@ -78,15 +78,15 @@
   @Test public void bodyRespectsBackpressure() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    RecordingSubscriber<String> subscriber = subscriberRule.createWithInitialRequest(0);
+	// Since 2.0.7 non-positive request() will not stop the current stream but signal
+	// an error via RxJavaPlugins.onError.
+    RecordingSubscriber<String> subscriber = subscriberRule.createWithInitialRequest(1);
     Flowable<String> o = service.body();
 
     o.subscribe(subscriber);
     assertThat(server.getRequestCount()).isEqualTo(1);
-    subscriber.assertNoEvents();
 
-    subscriber.request(1);
-    subscriber.assertAnyValue().assertComplete();
+	subscriber.assertAnyValue().assertComplete();
 
     subscriber.request(Long.MAX_VALUE); // Subsequent requests do not trigger HTTP or notifications.
     assertThat(server.getRequestCount()).isEqualTo(1);
@@ -121,14 +121,14 @@
   @Test public void responseRespectsBackpressure() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    RecordingSubscriber<Response<String>> subscriber = subscriberRule.createWithInitialRequest(0);
+	// Since 2.0.7 non-positive request() will not stop the current stream but signal
+	// an error via RxJavaPlugins.onError.
+    RecordingSubscriber<Response<String>> subscriber = subscriberRule.createWithInitialRequest(1);
     Flowable<Response<String>> o = service.response();
 
     o.subscribe(subscriber);
     assertThat(server.getRequestCount()).isEqualTo(1);
-    subscriber.assertNoEvents();
 
-    subscriber.request(1);
     subscriber.assertAnyValue().assertComplete();
 
     subscriber.request(Long.MAX_VALUE); // Subsequent requests do not trigger HTTP or notifications.
@@ -171,14 +171,14 @@
   @Test public void resultRespectsBackpressure() {
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    RecordingSubscriber<Result<String>> subscriber = subscriberRule.createWithInitialRequest(0);
+	// Since 2.0.7 non-positive request() will not stop the current stream but signal
+	// an error via RxJavaPlugins.onError.
+    RecordingSubscriber<Result<String>> subscriber = subscriberRule.createWithInitialRequest(1);
     Flowable<Result<String>> o = service.result();
 
     o.subscribe(subscriber);
     assertThat(server.getRequestCount()).isEqualTo(1);
-    subscriber.assertNoEvents();
 
-    subscriber.request(1);
     subscriber.assertAnyValue().assertComplete();
 
     subscriber.request(Long.MAX_VALUE); // Subsequent requests do not trigger HTTP or notifications.
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
index 34afbbeef..e9c3c4e9e 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/FlowableThrowingTest.java
@@ -93,7 +93,7 @@
     });
 
     subscriber.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
 
   }
 
@@ -161,7 +161,7 @@
     });
 
     subscriber.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void responseThrowingInOnErrorDeliveredToPlugin() {
@@ -228,7 +228,7 @@
     });
 
     subscriber.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void resultThrowingInOnErrorDeliveredToPlugin() {
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
index d5f83e1bd..a2d49641b 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/MaybeThrowingTest.java
@@ -80,7 +80,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void bodyThrowingInOnErrorDeliveredToPlugin() {
@@ -132,7 +132,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void responseThrowingInOnErrorDeliveredToPlugin() {
@@ -184,7 +184,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Ignore("Single's contract is onNext|onError so we have no way of triggering this case")
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
index 05c1d4f8f..f71cc71a2 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/ObservableThrowingTest.java
@@ -93,7 +93,7 @@
     });
 
     observer.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
 
   }
 
@@ -161,7 +161,7 @@
     });
 
     observer.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void responseThrowingInOnErrorDeliveredToPlugin() {
@@ -228,7 +228,7 @@
     });
 
     observer.assertAnyValue();
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void resultThrowingInOnErrorDeliveredToPlugin() {
diff --git a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
index 294722783..33d1e0415 100644
--- a/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
+++ b/retrofit-adapters/rxjava2/src/test/java/retrofit2/adapter/rxjava2/SingleThrowingTest.java
@@ -79,7 +79,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void bodyThrowingInOnErrorDeliveredToPlugin() {
@@ -131,7 +131,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Test public void responseThrowingInOnErrorDeliveredToPlugin() {
@@ -183,7 +183,7 @@
       }
     });
 
-    assertThat(throwableRef.get()).isSameAs(e);
+    assertThat(throwableRef.get()).hasCause(e);
   }
 
   @Ignore("Single's contract is onNext|onError so we have no way of triggering this case")
