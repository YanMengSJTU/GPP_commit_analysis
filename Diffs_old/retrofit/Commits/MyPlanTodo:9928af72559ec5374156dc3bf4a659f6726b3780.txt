diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index c917065ca..c0cc780c6 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -540,7 +540,10 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
         }).onErrorResumeNext(new Func1<Throwable, Observable<com.squareup.okhttp.Response>>() {
             @Override public Observable<com.squareup.okhttp.Response> call(Throwable e) {
                 if (e instanceof IOException) {
-                    return Observable.error(errorHandler.handleError(retrofit.RetrofitError.networkError(_finalUrl, (IOException) e)));
+                    RetrofitError retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) e);
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty();
+                    else return Observable.error(handledError);
                 }
                 return Observable.error(e);
             }
@@ -635,7 +638,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     if (retrofitError.getKind() == RetrofitError.Kind.NETWORK) {
                         return Observable.error(retrofitError);
                     }
-                    return Observable.error(errorHandler.handleError(retrofitError));
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.just(null); // returns null if blocking
+                    else return Observable.error(handledError);
                 }
             })
 
@@ -657,7 +662,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     } else {
                         retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                     }
-                    return Observable.error(errorHandler.handleError(retrofitError));
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty();
+                    else return Observable.error(handledError);
                 }
             })
 
@@ -681,7 +688,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                     } else {
                         retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                     }
-                    return Observable.error(errorHandler.handleError(retrofitError));
+                    Throwable handledError = errorHandler.handleError(retrofitError);
+                    if (handledError != null) return Observable.empty();
+                    else return Observable.error(handledError);
                 }
             })
 
@@ -716,7 +725,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 } else {
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                return Observable.error(errorHandler.handleError(retrofitError));
+                Throwable handledError = errorHandler.handleError(retrofitError);
+                if (handledError != null) return Observable.empty();
+                else return Observable.error(handledError);
             }
         })
 
@@ -751,7 +762,9 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 } else {
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                return Observable.error(errorHandler.handleError(retrofitError));
+                Throwable handledError = errorHandler.handleError(retrofitError);
+                if (handledError != null) return Observable.empty();
+                else return Observable.error(handledError);
             }
         })
 
