diff --git a/RetrofitTestExample/app/build.gradle b/RetrofitTestExample/app/build.gradle
new file mode 100644
index 000000000..446fa55a4
--- /dev/null
+++ b/RetrofitTestExample/app/build.gradle
@@ -0,0 +1,42 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "23.0.1"
+
+    defaultConfig {
+        applicationId "retrofittest-kp.retrofittestexample"
+        minSdkVersion 15
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0"
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+    packagingOptions {
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/NOTICE'
+    }
+
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    testCompile 'junit:junit:4.12'
+    compile 'com.android.support:appcompat-v7:23.0.1'
+    compile 'com.squareup.retrofit2:retrofit:2.0.0'
+    compile 'com.squareup.retrofit2:converter-jackson:2.0.0'
+    compile 'com.squareup.okhttp:okhttp:2.7.0'
+    androidTestCompile 'com.squareup.retrofit2:retrofit-mock:2.0.0'
+    androidTestCompile ('com.squareup.okhttp:mockwebserver:2.7.0')
+    androidTestCompile 'com.android.support.test:runner:0.4'
+    androidTestCompile 'com.android.support.test:rules:0.4'
+    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
+    androidTestCompile 'com.squareup.spoon:spoon-client:1.2.0'
+}
diff --git a/RetrofitTestExample/app/proguard-rules.pro b/RetrofitTestExample/app/proguard-rules.pro
new file mode 100644
index 000000000..b80ad7977
--- /dev/null
+++ b/RetrofitTestExample/app/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/rebeccafranks/Library/Android/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/RetrofitTestExample/app/src/androidTest/assets/quote_200_ok_response.json b/RetrofitTestExample/app/src/androidTest/assets/quote_200_ok_response.json
new file mode 100644
index 000000000..7226d434c
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/assets/quote_200_ok_response.json
@@ -0,0 +1,20 @@
+{
+  "success": {
+    "total": 1
+  },
+  "contents": {
+    "quotes": [
+      {
+        "quote": "I came from a real tough neighborhood. Once a guy pulled a knife on me. I knew he wasn't a professional, the knife had butter on it.",
+        "length": "132",
+        "author": "Rodney Dangerfield",
+        "tags": [
+          "funny",
+          "humor"
+        ],
+        "category": "funny",
+        "id": "3e_ZsKxPKu5SuuAa6Pa_0AeF"
+      }
+    ]
+  }
+}
\ No newline at end of file
diff --git a/RetrofitTestExample/app/src/androidTest/assets/quote_404_not_found.json b/RetrofitTestExample/app/src/androidTest/assets/quote_404_not_found.json
new file mode 100644
index 000000000..fe1bc1bf3
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/assets/quote_404_not_found.json
@@ -0,0 +1,6 @@
+{
+  "error": {
+    "code": 404,
+    "message": "Quote Not found"
+  }
+}
\ No newline at end of file
diff --git a/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MainActivityTest.java b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MainActivityTest.java
new file mode 100644
index 000000000..616af7b5e
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MainActivityTest.java
@@ -0,0 +1,81 @@
+package za.co.riggaroo.retrofittestexample;
+
+import android.content.Intent;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.espresso.matcher.ViewMatchers;
+import android.support.test.rule.ActivityTestRule;
+import android.support.test.runner.AndroidJUnit4;
+import android.test.InstrumentationTestCase;
+import com.squareup.okhttp.mockwebserver.MockResponse;
+import com.squareup.okhttp.mockwebserver.MockWebServer;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static android.support.test.espresso.Espresso.onView;
+import static android.support.test.espresso.assertion.ViewAssertions.*;
+import static android.support.test.espresso.matcher.ViewMatchers.*;
+import static android.support.test.espresso.matcher.ViewMatchers.withId;
+import static android.support.test.espresso.matcher.ViewMatchers.withText;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/25.
+ */
+@RunWith(AndroidJUnit4.class)
+public class MainActivityTest extends InstrumentationTestCase {
+
+
+    @Rule
+    public ActivityTestRule<MainActivity> mActivityRule =
+            new ActivityTestRule<>(MainActivity.class, true, false);
+    private MockWebServer server;
+
+    @Before
+    public void setUp() throws Exception {
+        super.setUp();
+        server = new MockWebServer();
+        server.start();
+        injectInstrumentation(InstrumentationRegistry.getInstrumentation());
+        QuoteOfTheDayConstants.BASE_URL = server.url("/").toString();
+    }
+
+    @Test
+    public void testQuoteIsShown() throws Exception {
+        String fileName = "quote_200_ok_response.json";
+        server.enqueue(new MockResponse()
+                .setResponseCode(200)
+                .setBody(RestServiceTestHelper.getStringFromFile(getInstrumentation().getContext(), fileName)));
+
+        Intent intent = new Intent();
+        mActivityRule.launchActivity(intent);
+
+        onView(withId(R.id.button_retry)).check(matches(withEffectiveVisibility(ViewMatchers.Visibility.GONE)));
+        onView(withText("I came from a real tough neighborhood. Once a guy pulled a knife on me. I knew he wasn't a professional, the knife had butter on it.")).check(matches(isDisplayed()));
+    }
+
+
+    @Test
+    public void testRetryButtonShowsWhenError() throws Exception {
+        String fileName = "quote_404_not_found.json";
+
+        server.enqueue(new MockResponse()
+                .setResponseCode(404)
+                .setBody(RestServiceTestHelper.getStringFromFile(getInstrumentation().getContext(), fileName)));
+
+        Intent intent = new Intent();
+        mActivityRule.launchActivity(intent);
+
+        onView(withId(R.id.button_retry)).check(matches(isDisplayed()));
+        onView(withText("Quote Not found")).check(matches(isDisplayed()));
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        server.shutdown();
+    }
+
+}
diff --git a/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockFailedQODService.java b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockFailedQODService.java
new file mode 100644
index 000000000..e1476f51a
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockFailedQODService.java
@@ -0,0 +1,56 @@
+package za.co.riggaroo.retrofittestexample;
+
+import android.util.Log;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.ObjectWriter;
+
+import java.io.IOException;
+
+import okhttp3.MediaType;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.Retrofit;
+import retrofit2.mock.Calls;
+import za.co.riggaroo.retrofittestexample.pojo.Error;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayErrorResponse;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayResponse;
+
+import retrofit2.mock.BehaviorDelegate;
+/**
+ * @author rebeccafranks
+ * @since 15/10/25.
+ */
+public class MockFailedQODService implements QuoteOfTheDayRestService {
+    private static final String TAG = "MockFailedQOD";
+    private final BehaviorDelegate<QuoteOfTheDayRestService> delegate;
+
+    public MockFailedQODService(BehaviorDelegate<QuoteOfTheDayRestService> restServiceBehaviorDelegate) {
+        this.delegate = restServiceBehaviorDelegate;
+
+    }
+
+    @Override
+    public Call<QuoteOfTheDayResponse> getQuoteOfTheDay() {
+        za.co.riggaroo.retrofittestexample.pojo.Error error = new Error();
+        error.setCode(404);
+        error.setMessage("Quote Not Found");
+        QuoteOfTheDayErrorResponse quoteOfTheDayErrorResponse = new QuoteOfTheDayErrorResponse();
+        quoteOfTheDayErrorResponse.setError(error);
+
+        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
+        String json = "";
+        try {
+            json = ow.writeValueAsString(quoteOfTheDayErrorResponse);
+            Response response = Response.error(404, ResponseBody.create(MediaType.parse("application/json") ,json));
+            return delegate.returning(Calls.response(response)).getQuoteOfTheDay();
+           // return delegate.returningResponse(response).getQuoteOfTheDay();
+        } catch (JsonProcessingException e) {
+            Log.e(TAG, "JSON Processing exception:",e);
+            return Calls.failure(e);
+        }
+
+    }
+}
diff --git a/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockQuoteOfTheDayService.java b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockQuoteOfTheDayService.java
new file mode 100644
index 000000000..d0bc0885c
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/MockQuoteOfTheDayService.java
@@ -0,0 +1,36 @@
+package za.co.riggaroo.retrofittestexample;
+
+import java.util.ArrayList;
+
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.mock.BehaviorDelegate;
+import za.co.riggaroo.retrofittestexample.pojo.Contents;
+import za.co.riggaroo.retrofittestexample.pojo.Quote;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayResponse;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/24.
+ */
+public class MockQuoteOfTheDayService implements QuoteOfTheDayRestService {
+
+    private final BehaviorDelegate<QuoteOfTheDayRestService> delegate;
+
+    public MockQuoteOfTheDayService(BehaviorDelegate<QuoteOfTheDayRestService> service) {
+        this.delegate = service;
+    }
+
+    @Override
+    public Call<QuoteOfTheDayResponse> getQuoteOfTheDay() {
+        QuoteOfTheDayResponse quoteOfTheDayResponse = new QuoteOfTheDayResponse();
+        Contents contents = new Contents();
+        Quote quote = new Quote();
+        quote.setQuote("Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.");
+        ArrayList<Quote> quotes = new ArrayList<>();
+        quotes.add(quote);
+        contents.setQuotes(quotes);
+        quoteOfTheDayResponse.setContents(contents);
+        return delegate.returningResponse(quoteOfTheDayResponse).getQuoteOfTheDay();
+    }
+}
diff --git a/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/QuoteOfTheDayMockAdapterTest.java b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/QuoteOfTheDayMockAdapterTest.java
new file mode 100644
index 000000000..358b79381
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/QuoteOfTheDayMockAdapterTest.java
@@ -0,0 +1,81 @@
+package za.co.riggaroo.retrofittestexample;
+
+import android.test.InstrumentationTestCase;
+import android.test.suitebuilder.annotation.SmallTest;
+
+
+import junit.framework.Assert;
+
+import java.lang.annotation.Annotation;
+import okhttp3.OkHttpClient;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Converter;
+import retrofit2.Response;
+import retrofit2.Retrofit;
+import retrofit2.converter.jackson.JacksonConverterFactory;
+import retrofit2.mock.BehaviorDelegate;
+import retrofit2.mock.MockRetrofit;
+import retrofit2.mock.NetworkBehavior;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayErrorResponse;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayResponse;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+public class QuoteOfTheDayMockAdapterTest extends InstrumentationTestCase {
+    private MockRetrofit mockRetrofit;
+    private Retrofit retrofit;
+
+    @Override
+    public void setUp() throws Exception {
+        super.setUp();
+        retrofit = new Retrofit.Builder().baseUrl("http://test.com")
+                .client(new OkHttpClient())
+                .addConverterFactory(JacksonConverterFactory.create())
+                .build();
+
+        NetworkBehavior behavior = NetworkBehavior.create();
+
+        mockRetrofit = new MockRetrofit.Builder(retrofit)
+                .networkBehavior(behavior)
+                .build();
+    }
+
+
+    @SmallTest
+    public void testRandomQuoteRetrieval() throws Exception {
+        BehaviorDelegate<QuoteOfTheDayRestService> delegate = mockRetrofit.create(QuoteOfTheDayRestService.class);
+        QuoteOfTheDayRestService mockQodService = new MockQuoteOfTheDayService(delegate);
+
+
+        //Actual Test
+        Call<QuoteOfTheDayResponse> quote = mockQodService.getQuoteOfTheDay();
+        Response<QuoteOfTheDayResponse> quoteOfTheDayResponse = quote.execute();
+
+        //Asserting response
+        Assert.assertTrue(quoteOfTheDayResponse.isSuccessful());
+        Assert.assertEquals("Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.", quoteOfTheDayResponse.body().getContents().getQuotes().get(0).getQuote());
+
+    }
+
+    @SmallTest
+    public void testFailedQuoteRetrieval() throws Exception {
+        BehaviorDelegate<QuoteOfTheDayRestService> delegate = mockRetrofit.create(QuoteOfTheDayRestService.class);
+        MockFailedQODService mockQodService = new MockFailedQODService(delegate);
+
+        //Actual Test
+        Call<QuoteOfTheDayResponse> quote = mockQodService.getQuoteOfTheDay();
+        Response<QuoteOfTheDayResponse> quoteOfTheDayResponse = quote.execute();
+        Assert.assertFalse(quoteOfTheDayResponse.isSuccessful());
+
+        Converter<ResponseBody, QuoteOfTheDayErrorResponse> errorConverter = retrofit.responseBodyConverter(QuoteOfTheDayErrorResponse.class, new Annotation[0]);
+        QuoteOfTheDayErrorResponse error = errorConverter.convert(quoteOfTheDayResponse.errorBody());
+
+        //Asserting response
+        Assert.assertEquals(404, quoteOfTheDayResponse.code());
+        Assert.assertEquals("Quote Not Found", error.getError().getMessage());
+
+    }
+}
\ No newline at end of file
diff --git a/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/RestServiceTestHelper.java b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/RestServiceTestHelper.java
new file mode 100644
index 000000000..e8a0bc18c
--- /dev/null
+++ b/RetrofitTestExample/app/src/androidTest/java/za/co/riggaroo/retrofittestexample/RestServiceTestHelper.java
@@ -0,0 +1,35 @@
+package za.co.riggaroo.retrofittestexample;
+
+import android.content.Context;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/24.
+ */
+public class RestServiceTestHelper {
+
+    public static String convertStreamToString(InputStream is) throws Exception {
+        BufferedReader reader = new BufferedReader(new InputStreamReader(is));
+        StringBuilder sb = new StringBuilder();
+        String line;
+        while ((line = reader.readLine()) != null) {
+            sb.append(line).append("\n");
+        }
+        reader.close();
+        return sb.toString();
+    }
+
+    public static String getStringFromFile(Context context, String filePath) throws Exception {
+        final InputStream stream = context.getResources().getAssets().open(filePath);
+
+        String ret = convertStreamToString(stream);
+        //Make sure you close all streams.
+        stream.close();
+        return ret;
+    }
+}
+
diff --git a/RetrofitTestExample/app/src/main/AndroidManifest.xml b/RetrofitTestExample/app/src/main/AndroidManifest.xml
new file mode 100644
index 000000000..b20b3ce02
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/AndroidManifest.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="retrofittest-kp.retrofittestexample" >
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <application
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/AppTheme" >
+        <activity android:name=".MainActivity" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+    </application>
+
+</manifest>
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/MainActivity.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/MainActivity.java
new file mode 100644
index 000000000..fbe310ae9
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/MainActivity.java
@@ -0,0 +1,99 @@
+package retrofittest-kp.retrofittestexample;
+
+import android.os.Bundle;
+import android.support.v7.app.AppCompatActivity;
+import android.util.Log;
+import android.view.View;
+import android.widget.Button;
+import android.widget.TextView;
+
+
+import java.io.IOException;
+import java.lang.annotation.Annotation;
+
+import okhttp3.OkHttpClient;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Converter;
+import retrofit2.Response;
+import retrofit2.Retrofit;
+import retrofit2.converter.jackson.JacksonConverterFactory;
+import za.co.riggaroo.retrofittestexample.interceptor.LoggingInterceptor;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayErrorResponse;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayResponse;
+
+public class MainActivity extends AppCompatActivity {
+
+    private TextView textViewQuoteOfTheDay;
+    private Button buttonRetry;
+
+    private static final String TAG = "MainActivity";
+    private QuoteOfTheDayRestService service;
+    private Retrofit retrofit;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        textViewQuoteOfTheDay = (TextView) findViewById(R.id.text_view_quote);
+        buttonRetry = (Button) findViewById(R.id.button_retry);
+        buttonRetry.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                getQuoteOfTheDay();
+            }
+        });
+
+        OkHttpClient client = new OkHttpClient();
+        // client.interceptors().add(new LoggingInterceptor());
+        retrofit = new Retrofit.Builder()
+                .baseUrl(QuoteOfTheDayConstants.BASE_URL)
+                .addConverterFactory(JacksonConverterFactory.create())
+                .client(client)
+                .build();
+        service = retrofit.create(QuoteOfTheDayRestService.class);
+        getQuoteOfTheDay();
+
+    }
+
+
+    private void getQuoteOfTheDay() {
+        Call<QuoteOfTheDayResponse> call =
+                service.getQuoteOfTheDay();
+
+        call.enqueue(new Callback<QuoteOfTheDayResponse>() {
+
+            @Override
+            public void onResponse(Call<QuoteOfTheDayResponse> call, Response<QuoteOfTheDayResponse> response) {
+                if (response.isSuccessful()) {
+                    textViewQuoteOfTheDay.setText(response.body().getContents().getQuotes().get(0).getQuote());
+                } else {
+                    try {
+                        Converter<ResponseBody, QuoteOfTheDayErrorResponse> errorConverter = retrofit.responseBodyConverter(QuoteOfTheDayErrorResponse.class, new Annotation[0]);
+                        QuoteOfTheDayErrorResponse error = errorConverter.convert(response.errorBody());
+                        showRetry(error.getError().getMessage());
+
+                    } catch (IOException e) {
+                        Log.e(TAG, "IOException parsing error:", e);
+                    }
+
+                }
+            }
+
+            @Override
+            public void onFailure(Call<QuoteOfTheDayResponse> call, Throwable t) {
+                //Transport level errors such as no internet etc.
+            }
+        });
+
+
+    }
+
+    private void showRetry(String error) {
+        textViewQuoteOfTheDay.setText(error);
+        buttonRetry.setVisibility(View.VISIBLE);
+
+    }
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayConstants.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayConstants.java
new file mode 100644
index 000000000..672e0fea6
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayConstants.java
@@ -0,0 +1,14 @@
+package retrofittest-kp.retrofittestexample;
+
+import android.app.Application;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/25.
+ */
+public class QuoteOfTheDayConstants  {
+
+    public static String BASE_URL = "http://api.theysaidso.com";
+
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayRestService.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayRestService.java
new file mode 100644
index 000000000..6b6a19d4f
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/QuoteOfTheDayRestService.java
@@ -0,0 +1,17 @@
+package retrofittest-kp.retrofittestexample;
+
+import retrofit2.Call;
+import retrofit2.Response;
+import retrofit2.http.GET;
+import za.co.riggaroo.retrofittestexample.pojo.QuoteOfTheDayResponse;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+public interface QuoteOfTheDayRestService {
+
+    @GET("/qod.json")
+    Call<QuoteOfTheDayResponse> getQuoteOfTheDay();
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/interceptor/LoggingInterceptor.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/interceptor/LoggingInterceptor.java
new file mode 100644
index 000000000..7b07cce7c
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/interceptor/LoggingInterceptor.java
@@ -0,0 +1,33 @@
+package retrofittest-kp.retrofittestexample.interceptor;
+
+import android.util.Log;
+
+import com.squareup.okhttp.Interceptor;
+import com.squareup.okhttp.Request;
+import com.squareup.okhttp.Response;
+
+import java.io.IOException;
+
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+public class LoggingInterceptor implements Interceptor {
+    @Override
+    public Response intercept(Interceptor.Chain chain) throws IOException {
+        Request request = chain.request();
+
+        long t1 = System.nanoTime();
+        Log.d("Retrofit",String.format("Sending request %s on %s%n%s",
+                request.url(), chain.connection(), request.headers()));
+
+        Response response = chain.proceed(request);
+
+        long t2 = System.nanoTime();
+        Log.d("Retrofit", String.format("Received response for %s in %.1fms%n%s",
+                 response.request().url(), (t2 - t1) / 1e6d, response.headers()));
+
+        return response;
+    }
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Contents.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Contents.java
new file mode 100644
index 000000000..0a3687c28
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Contents.java
@@ -0,0 +1,59 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "quotes"
+})
+public class Contents {
+
+    @JsonProperty("quotes")
+    private List<Quote> quotes = new ArrayList<>();
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The quotes
+     */
+    @JsonProperty("quotes")
+    public List<Quote> getQuotes() {
+        return quotes;
+    }
+
+    /**
+     *
+     * @param quotes
+     * The quotes
+     */
+    @JsonProperty("quotes")
+    public void setQuotes(List<Quote> quotes) {
+        this.quotes = quotes;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Error.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Error.java
new file mode 100644
index 000000000..72371d492
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Error.java
@@ -0,0 +1,81 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "code",
+        "message"
+})
+public class Error {
+
+    @JsonProperty("code")
+    private Integer code;
+    @JsonProperty("message")
+    private String message;
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<String, Object>();
+
+    /**
+     *
+     * @return
+     * The code
+     */
+    @JsonProperty("code")
+    public Integer getCode() {
+        return code;
+    }
+
+    /**
+     *
+     * @param code
+     * The code
+     */
+    @JsonProperty("code")
+    public void setCode(Integer code) {
+        this.code = code;
+    }
+
+    /**
+     *
+     * @return
+     * The message
+     */
+    @JsonProperty("message")
+    public String getMessage() {
+        return message;
+    }
+
+    /**
+     *
+     * @param message
+     * The message
+     */
+    @JsonProperty("message")
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Quote.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Quote.java
new file mode 100644
index 000000000..3ebeead77
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Quote.java
@@ -0,0 +1,174 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "quote",
+        "length",
+        "author",
+        "tags",
+        "category",
+        "id"
+})
+public class Quote {
+
+    @JsonProperty("quote")
+    private String quote;
+    @JsonProperty("length")
+    private String length;
+    @JsonProperty("author")
+    private String author;
+    @JsonProperty("tags")
+    private List<String> tags = new ArrayList<>();
+    @JsonProperty("category")
+    private String category;
+    @JsonProperty("id")
+    private String id;
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The quote
+     */
+    @JsonProperty("quote")
+    public String getQuote() {
+        return quote;
+    }
+
+    /**
+     *
+     * @param quote
+     * The quote
+     */
+    @JsonProperty("quote")
+    public void setQuote(String quote) {
+        this.quote = quote;
+    }
+
+    /**
+     *
+     * @return
+     * The length
+     */
+    @JsonProperty("length")
+    public String getLength() {
+        return length;
+    }
+
+    /**
+     *
+     * @param length
+     * The length
+     */
+    @JsonProperty("length")
+    public void setLength(String length) {
+        this.length = length;
+    }
+
+    /**
+     *
+     * @return
+     * The author
+     */
+    @JsonProperty("author")
+    public String getAuthor() {
+        return author;
+    }
+
+    /**
+     *
+     * @param author
+     * The author
+     */
+    @JsonProperty("author")
+    public void setAuthor(String author) {
+        this.author = author;
+    }
+
+    /**
+     *
+     * @return
+     * The tags
+     */
+    @JsonProperty("tags")
+    public List<String> getTags() {
+        return tags;
+    }
+
+    /**
+     *
+     * @param tags
+     * The tags
+     */
+    @JsonProperty("tags")
+    public void setTags(List<String> tags) {
+        this.tags = tags;
+    }
+
+    /**
+     *
+     * @return
+     * The category
+     */
+    @JsonProperty("category")
+    public String getCategory() {
+        return category;
+    }
+
+    /**
+     *
+     * @param category
+     * The category
+     */
+    @JsonProperty("category")
+    public void setCategory(String category) {
+        this.category = category;
+    }
+
+    /**
+     *
+     * @return
+     * The id
+     */
+    @JsonProperty("id")
+    public String getId() {
+        return id;
+    }
+
+    /**
+     *
+     * @param id
+     * The id
+     */
+    @JsonProperty("id")
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayErrorResponse.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayErrorResponse.java
new file mode 100644
index 000000000..9fa3ee453
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayErrorResponse.java
@@ -0,0 +1,57 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+import java.util.HashMap;
+import java.util.Map;
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "error"
+})
+public class QuoteOfTheDayErrorResponse {
+
+    @JsonProperty("error")
+    private Error error;
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The error
+     */
+    @JsonProperty("error")
+    public Error getError() {
+        return error;
+    }
+
+    /**
+     *
+     * @param error
+     * The error
+     */
+    @JsonProperty("error")
+    public void setError(Error error) {
+        this.error = error;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
\ No newline at end of file
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayResponse.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayResponse.java
new file mode 100644
index 000000000..b322d96ed
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/QuoteOfTheDayResponse.java
@@ -0,0 +1,75 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+
+
+import java.util.HashMap;
+import java.util.Map;
+
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "success",
+        "contents"
+})
+public class QuoteOfTheDayResponse {
+
+    @JsonProperty("success")
+    private Success success;
+    @JsonProperty("contents")
+    private Contents contents;
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     * @return The success
+     */
+    @JsonProperty("success")
+    public Success getSuccess() {
+        return success;
+    }
+
+    /**
+     * @param success The success
+     */
+    @JsonProperty("success")
+    public void setSuccess(Success success) {
+        this.success = success;
+    }
+
+    /**
+     * @return The contents
+     */
+    @JsonProperty("contents")
+    public Contents getContents() {
+        return contents;
+    }
+
+    /**
+     * @param contents The contents
+     */
+    @JsonProperty("contents")
+    public void setContents(Contents contents) {
+        this.contents = contents;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
diff --git a/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Success.java b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Success.java
new file mode 100644
index 000000000..4901a8b9e
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/java/retrofittest-kp/retrofittestexample/pojo/Success.java
@@ -0,0 +1,58 @@
+package retrofittest-kp.retrofittestexample.pojo;
+
+/**
+ * @author rebeccafranks
+ * @since 15/10/23.
+ */
+import java.util.HashMap;
+import java.util.Map;
+import com.fasterxml.jackson.annotation.JsonAnyGetter;
+import com.fasterxml.jackson.annotation.JsonAnySetter;
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.annotation.JsonProperty;
+import com.fasterxml.jackson.annotation.JsonPropertyOrder;
+
+@JsonInclude(JsonInclude.Include.NON_NULL)
+@JsonPropertyOrder({
+        "total"
+})
+public class Success {
+
+    @JsonProperty("total")
+    private Integer total;
+    @JsonIgnore
+    private Map<String, Object> additionalProperties = new HashMap<>();
+
+    /**
+     *
+     * @return
+     * The total
+     */
+    @JsonProperty("total")
+    public Integer getTotal() {
+        return total;
+    }
+
+    /**
+     *
+     * @param total
+     * The total
+     */
+    @JsonProperty("total")
+    public void setTotal(Integer total) {
+        this.total = total;
+    }
+
+    @JsonAnyGetter
+    public Map<String, Object> getAdditionalProperties() {
+        return this.additionalProperties;
+    }
+
+    @JsonAnySetter
+    public void setAdditionalProperty(String name, Object value) {
+        this.additionalProperties.put(name, value);
+    }
+
+}
+
diff --git a/RetrofitTestExample/app/src/main/res/layout/activity_main.xml b/RetrofitTestExample/app/src/main/res/layout/activity_main.xml
new file mode 100644
index 000000000..9dae8c5fa
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/layout/activity_main.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context=".MainActivity">
+
+    <TextView
+        android:id="@+id/text_view_quote"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"/>
+
+    <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/retry"
+        android:id="@+id/button_retry"
+        android:visibility="gone"
+        tools:visibility="visible"
+        android:layout_below="@+id/text_view_quote"
+        android:layout_centerHorizontal="true" />
+</RelativeLayout>
diff --git a/RetrofitTestExample/app/src/main/res/mipmap-hdpi/ic_launcher.png b/RetrofitTestExample/app/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 000000000..cde69bccc
Binary files /dev/null and b/RetrofitTestExample/app/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/RetrofitTestExample/app/src/main/res/mipmap-mdpi/ic_launcher.png b/RetrofitTestExample/app/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 000000000..c133a0cbd
Binary files /dev/null and b/RetrofitTestExample/app/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/RetrofitTestExample/app/src/main/res/mipmap-xhdpi/ic_launcher.png b/RetrofitTestExample/app/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 000000000..bfa42f0e7
Binary files /dev/null and b/RetrofitTestExample/app/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/RetrofitTestExample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png b/RetrofitTestExample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 000000000..324e72cdd
Binary files /dev/null and b/RetrofitTestExample/app/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/RetrofitTestExample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/RetrofitTestExample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 000000000..aee44e138
Binary files /dev/null and b/RetrofitTestExample/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/RetrofitTestExample/app/src/main/res/values-w820dp/dimens.xml b/RetrofitTestExample/app/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 000000000..63fc81644
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/RetrofitTestExample/app/src/main/res/values/colors.xml b/RetrofitTestExample/app/src/main/res/values/colors.xml
new file mode 100644
index 000000000..3ab3e9cbc
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="colorPrimary">#3F51B5</color>
+    <color name="colorPrimaryDark">#303F9F</color>
+    <color name="colorAccent">#FF4081</color>
+</resources>
diff --git a/RetrofitTestExample/app/src/main/res/values/dimens.xml b/RetrofitTestExample/app/src/main/res/values/dimens.xml
new file mode 100644
index 000000000..47c822467
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/RetrofitTestExample/app/src/main/res/values/strings.xml b/RetrofitTestExample/app/src/main/res/values/strings.xml
new file mode 100644
index 000000000..0a19fd98a
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/values/strings.xml
@@ -0,0 +1,5 @@
+<resources>
+    <string name="app_name">Retrofit Test Example</string>
+    <string name="retry">RETRY</string>
+    <string name="failed_to_load_quote">Failed to load quote</string>
+</resources>
diff --git a/RetrofitTestExample/app/src/main/res/values/styles.xml b/RetrofitTestExample/app/src/main/res/values/styles.xml
new file mode 100644
index 000000000..5885930df
--- /dev/null
+++ b/RetrofitTestExample/app/src/main/res/values/styles.xml
@@ -0,0 +1,11 @@
+<resources>
+
+    <!-- Base application theme. -->
+    <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
+        <!-- Customize your theme here. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
+        <item name="colorAccent">@color/colorAccent</item>
+    </style>
+
+</resources>
diff --git a/RetrofitTestExample/app/src/test/java/retrofittest-kp/retrofittestexample/ExampleUnitTest.java b/RetrofitTestExample/app/src/test/java/retrofittest-kp/retrofittestexample/ExampleUnitTest.java
new file mode 100644
index 000000000..a864db81c
--- /dev/null
+++ b/RetrofitTestExample/app/src/test/java/retrofittest-kp/retrofittestexample/ExampleUnitTest.java
@@ -0,0 +1,15 @@
+package retrofittest-kp.retrofittestexample;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * To work on unit tests, switch the Test Artifact in the Build Variants view.
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(10, 5 + 5);
+    }
+}
\ No newline at end of file
diff --git a/RetrofitTestExample/build.gradle b/RetrofitTestExample/build.gradle
new file mode 100644
index 000000000..be515a81f
--- /dev/null
+++ b/RetrofitTestExample/build.gradle
@@ -0,0 +1,23 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+buildscript {
+    repositories {
+        jcenter()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:1.3.0'
+
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
+    }
+}
+
+allprojects {
+    repositories {
+        jcenter()
+    }
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
diff --git a/RetrofitTestExample/gradle.properties b/RetrofitTestExample/gradle.properties
new file mode 100644
index 000000000..1d3591c8a
--- /dev/null
+++ b/RetrofitTestExample/gradle.properties
@@ -0,0 +1,18 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
\ No newline at end of file
diff --git a/RetrofitTestExample/gradle/wrapper/gradle-wrapper.jar b/RetrofitTestExample/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 000000000..8c0fb64a8
Binary files /dev/null and b/RetrofitTestExample/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/RetrofitTestExample/gradle/wrapper/gradle-wrapper.properties b/RetrofitTestExample/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 000000000..b9fbfaba0
--- /dev/null
+++ b/RetrofitTestExample/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
diff --git a/RetrofitTestExample/gradlew b/RetrofitTestExample/gradlew
new file mode 100644
index 000000000..91a7e269e
--- /dev/null
+++ b/RetrofitTestExample/gradlew
@@ -0,0 +1,164 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# For Cygwin, ensure paths are in UNIX format before anything is touched.
+if $cygwin ; then
+    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
+fi
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >&-
+APP_HOME="`pwd -P`"
+cd "$SAVED" >&-
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/RetrofitTestExample/gradlew.bat b/RetrofitTestExample/gradlew.bat
new file mode 100644
index 000000000..aec99730b
--- /dev/null
+++ b/RetrofitTestExample/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/RetrofitTestExample/settings.gradle b/RetrofitTestExample/settings.gradle
new file mode 100644
index 000000000..e7b4def49
--- /dev/null
+++ b/RetrofitTestExample/settings.gradle
@@ -0,0 +1 @@
+include ':app'
