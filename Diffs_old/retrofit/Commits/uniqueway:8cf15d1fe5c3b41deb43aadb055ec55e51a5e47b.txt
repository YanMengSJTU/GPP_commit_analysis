diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 5aa102db2..218a24c29 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -27,6 +27,7 @@
 final class OkHttpCall<T> implements Call<T> {
   private final ServiceMethod<T> serviceMethod;
   private final Object[] args;
+  private final boolean hasRawResponseBody;
 
   private volatile boolean canceled;
 
@@ -35,14 +36,15 @@
   private Throwable creationFailure; // Either a RuntimeException or IOException.
   private boolean executed;
 
-  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args) {
+  OkHttpCall(ServiceMethod<T> serviceMethod, Object[] args, boolean hasRawResponseBody) {
     this.serviceMethod = serviceMethod;
     this.args = args;
+    this.hasRawResponseBody = hasRawResponseBody;
   }
 
   @SuppressWarnings("CloneDoesntCallSuperClone") // We are a final type & this saves clearing state.
   @Override public OkHttpCall<T> clone() {
-    return new OkHttpCall<>(serviceMethod, args);
+    return new OkHttpCall<>(serviceMethod, args, hasRawResponseBody);
   }
 
   @Override public synchronized Request request() {
@@ -186,10 +188,14 @@ private void callSuccess(Response<T> response) {
   Response<T> parseResponse(okhttp3.Response rawResponse) throws IOException {
     ResponseBody rawBody = rawResponse.body();
 
-    // Remove the body's source (the only stateful object) so we can pass the response along.
-    rawResponse = rawResponse.newBuilder()
-        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))
-        .build();
+    okhttp3.Response.Builder builder = rawResponse.newBuilder();
+    if(this.hasRawResponseBody) {
+      Buffer code = rawBody.source().buffer().clone();
+      builder.body(ResponseBody.create(rawBody.contentType(), code.size(), code));
+    } else {
+      builder.body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()));
+    }
+    rawResponse = builder.build();
 
     int code = rawResponse.code();
     if (code < 200 || code >= 300) {
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index b194d4ed5..a08015525 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -65,16 +65,18 @@
   private final List<CallAdapter.Factory> adapterFactories;
   private final Executor callbackExecutor;
   private final boolean validateEagerly;
+  private final boolean hasRawResponseBody;
 
   Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
       List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
-      Executor callbackExecutor, boolean validateEagerly) {
+      Executor callbackExecutor, boolean validateEagerly, boolean hasRawResponseBody) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
     this.converterFactories = unmodifiableList(converterFactories); // Defensive copy at call site.
     this.adapterFactories = unmodifiableList(adapterFactories); // Defensive copy at call site.
     this.callbackExecutor = callbackExecutor;
     this.validateEagerly = validateEagerly;
+    this.hasRawResponseBody = hasRawResponseBody;
   }
 
   /**
@@ -143,7 +145,7 @@
               return platform.invokeDefaultMethod(method, service, proxy, args);
             }
             ServiceMethod serviceMethod = loadServiceMethod(method);
-            OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args);
+            OkHttpCall okHttpCall = new OkHttpCall<>(serviceMethod, args, hasRawResponseBody);
             return serviceMethod.callAdapter.adapt(okHttpCall);
           }
         });
@@ -376,6 +378,10 @@ public Executor callbackExecutor() {
     return callbackExecutor;
   }
 
+  public boolean isHasRawResponseBody() {
+    return this.hasRawResponseBody;
+  }
+
   /**
    * Build a new {@link Retrofit}.
    * <p>
@@ -390,6 +396,7 @@ public Executor callbackExecutor() {
     private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
     private Executor callbackExecutor;
     private boolean validateEagerly;
+    private boolean hasRawResponseBody;
 
     Builder(Platform platform) {
       this.platform = platform;
@@ -535,6 +542,11 @@ public Builder validateEagerly(boolean validateEagerly) {
       return this;
     }
 
+    public Builder hasRawResponseBody(boolean hasRawResponseBody) {
+      this.hasRawResponseBody = hasRawResponseBody;
+      return this;
+    }
+
     /**
      * Create the {@link Retrofit} instance using the configured values.
      * <p>
@@ -564,7 +576,7 @@ public Retrofit build() {
       List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);
 
       return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,
-          callbackExecutor, validateEagerly);
+          callbackExecutor, validateEagerly, hasRawResponseBody);
     }
   }
 }
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 59b69f432..976068ae3 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -2514,7 +2514,7 @@ static Request buildRequest(Class<?> cls, Object... args) {
 
     Method method = TestingUtils.onlyMethod(cls);
     ServiceMethod<?> serviceMethod = retrofit.loadServiceMethod(method);
-    OkHttpCall<?> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+    OkHttpCall<?> okHttpCall = new OkHttpCall<>(serviceMethod, args, retrofit.isHasRawResponseBody());
     Call<?> call = (Call<?>) serviceMethod.callAdapter.adapt(okHttpCall);
     try {
       call.execute();
