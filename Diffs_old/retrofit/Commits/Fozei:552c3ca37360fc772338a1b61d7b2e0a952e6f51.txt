diff --git a/retrofit/src/main/java/retrofit2/RequestFactory.java b/retrofit/src/main/java/retrofit2/RequestFactory.java
index e9575acd9..5de4d1b75 100644
--- a/retrofit/src/main/java/retrofit2/RequestFactory.java
+++ b/retrofit/src/main/java/retrofit2/RequestFactory.java
@@ -276,13 +276,13 @@ private void parseHttpMethodAndPath(String httpMethod, String value, boolean has
         private Headers parseHeaders(String[] headers) {
             Headers.Builder builder = new Headers.Builder();
             for (String header : headers) {
-                int colon = header.indexOf(':');
-                if (colon == -1 || colon == 0 || colon == header.length() - 1) {
+                int colonIndex = header.indexOf(':');
+                if (colonIndex == -1 || colonIndex == 0 || colonIndex == header.length() - 1) {
                     throw methodError(method,
                             "@Headers value must be in the form \"Name: Value\". Found: \"%s\"", header);
                 }
-                String headerName = header.substring(0, colon);
-                String headerValue = header.substring(colon + 1).trim();
+                String headerName = header.substring(0, colonIndex);
+                String headerValue = header.substring(colonIndex + 1).trim();
                 if ("Content-Type".equalsIgnoreCase(headerName)) {
                     try {
                         contentType = MediaType.get(headerValue);
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 519728631..96394aaa4 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -63,6 +63,9 @@
 public final class Retrofit {
     private final Map<Method, ServiceMethod<?>> serviceMethodCache = new ConcurrentHashMap<>();
 
+    /**
+     * Retrofit中Builder执行build方法时,创建的OKHTTPClient
+     */
     final okhttp3.Call.Factory callFactory;
     final HttpUrl baseUrl;
     final List<Converter.Factory> converterFactories;
diff --git a/samples/src/main/java/com/example/IRequestApi.java b/samples/src/main/java/com/example/IRequestApi.java
index 1f0be3894..b7c277d9b 100644
--- a/samples/src/main/java/com/example/IRequestApi.java
+++ b/samples/src/main/java/com/example/IRequestApi.java
@@ -4,7 +4,9 @@
 import retrofit2.http.GET;
 import retrofit2.http.Query;
 
-public interface IRequestApi {
+import java.util.Map;
+
+public interface IRequestApi<P> {
     @GET("hello")
     Call<String> get(@Query("param") String url);
 
@@ -13,4 +15,13 @@
 
     @GET("hello")
     Call<String> get3(@Query("param") String url);
+
+    @GET("hello4")
+    Call<Map<String, String>> get4(@Query("param") String url);
+
+    @GET("hello5")
+    Call<Integer> get5(@Query("param") String url, @Query("param2") int index);
+
+    @GET("hello5")
+    Call<Integer> get6(@Query("param") String url, @Query("param2") P index);
 }
diff --git a/samples/src/main/java/com/example/MethodTest.java b/samples/src/main/java/com/example/MethodTest.java
new file mode 100644
index 000000000..2ec1b06e4
--- /dev/null
+++ b/samples/src/main/java/com/example/MethodTest.java
@@ -0,0 +1,28 @@
+package com.example;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+import java.lang.reflect.Type;
+import java.util.Arrays;
+import java.util.Collections;
+
+public class MethodTest {
+    public static void main(String[] args) {
+        Class clazz = IRequestApi.class;
+        Method[] declaredMethods = clazz.getDeclaredMethods();
+        for (Method method : declaredMethods) {
+            Annotation[] annotations = method.getAnnotations();
+            System.out.println(Arrays.asList(annotations));
+            System.out.println("----------");
+            Type[] genericParameterTypes = method.getGenericParameterTypes();
+            System.out.println(Arrays.asList(genericParameterTypes));
+            System.out.println(genericParameterTypes.length);
+            System.out.println("----------");
+            Annotation[][] parameterAnnotations = method.getParameterAnnotations();
+            for (Annotation[] parameterAnnotation : parameterAnnotations) {
+                System.out.println(Arrays.asList(parameterAnnotation));
+            }
+            System.out.println("=======================");
+        }
+    }
+}
