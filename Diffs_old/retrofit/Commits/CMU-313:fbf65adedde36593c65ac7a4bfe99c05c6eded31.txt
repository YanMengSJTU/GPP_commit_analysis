diff --git a/retrofit/src/main/java/retrofit/Call.java b/retrofit/src/main/java/retrofit/Call.java
index b46dbcee0..e1e9fe017 100644
--- a/retrofit/src/main/java/retrofit/Call.java
+++ b/retrofit/src/main/java/retrofit/Call.java
@@ -1,8 +1,11 @@
+// Copyright 2013 Square, Inc.
 package retrofit;
 
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executor;
+
 /**
- * 
- * @param <T>
+ * API 2.0 future request invocation/call object.
  */
 public class Call<T> {
 
@@ -19,15 +22,19 @@
 	// Object[] to call invokeRequest() with
 	private Object[] args;
 
+	// Executor for HTTP requests
+	private Executor httpExecutor;
+
 	/**
 	 * Constructor
 	 */
 	public Call(RestAdapter.RestHandler handler, RequestInterceptor interceptor,
-		RestMethodInfo methodInfo, Object[] args)
+		RestMethodInfo methodInfo, Object[] args, Executor httpExecutor)
 	{
 		this.handler = handler;
 		this.interceptor = interceptor;
 		this.methodInfo = methodInfo;
+		this.httpExecutor = httpExecutor;
 	}
 
 	/**
@@ -37,7 +44,28 @@ public T execute() {
 		return (T)handler.invokeRequest(interceptor, methodInfo, args);
 	}
 
-	public int getthing() {
-		return 10;
+	/**
+	 * Execute with a (API 2.0) callback
+	 */
+	public void execute(final Callback2<T> callback) {
+		// Not handling the interceptor or observable for now. The synchronous
+		// version of RestHandler.invoke() does not handle this either.
+
+		httpExecutor.execute(new Runnable() {
+			@Override
+			public void run() {
+				T response;
+
+				try {
+					response = (T)handler.invokeRequest(interceptor, methodInfo, args);
+				}
+				catch (RetrofitError err) {
+					callback.failure(err);
+					return;
+				}
+
+				callback.success(response);
+			}
+		});
 	}
 }
diff --git a/retrofit/src/main/java/retrofit/Callback2.java b/retrofit/src/main/java/retrofit/Callback2.java
new file mode 100644
index 000000000..ff8e3b9ca
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/Callback2.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit;
+
+/**
+ * Callback according to API 2.0 spec. Currently does not implement error handling methods
+ */
+public interface Callback2<T> {
+
+  /** Successful HTTP response. */
+  void success(T t);
+
+  /**
+   * Unsuccessful HTTP response due to network failure, non-2XX status code, or unexpected
+   * exception. Under API 2.0 this is broken into several methods.
+   */
+  void failure(RetrofitError error);
+}
\ No newline at end of file
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 0cc8a1b85..6543aa154 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -291,8 +291,8 @@ Observable createRequestObservable(final Callable<ResponseWrapper> request) {
 
           // Instantiate the Call<T> with its constructor
           Constructor<Call> cons = Call.class.getDeclaredConstructor(RestAdapter.RestHandler.class,
-            RequestInterceptor.class, RestMethodInfo.class, Object[].class);
-          return cons.newInstance(this, requestInterceptor, methodInfo, args);
+            RequestInterceptor.class, RestMethodInfo.class, Object[].class, Executor.class);
+          return cons.newInstance(this, requestInterceptor, methodInfo, args, httpExecutor);
         }
       }
 
diff --git a/retrofit/src/test/java/retrofit/CallTest.java b/retrofit/src/test/java/retrofit/CallTest.java
index 12983e179..5f1661e19 100644
--- a/retrofit/src/test/java/retrofit/CallTest.java
+++ b/retrofit/src/test/java/retrofit/CallTest.java
@@ -1,3 +1,4 @@
+// Copyright 2013 Square, Inc.
 package retrofit;
 
 import java.io.ByteArrayInputStream;
@@ -100,15 +101,26 @@
 			.create(Api.class);
 	}
 
-	@Test public void test() throws Exception {
+	@Test public void synchronousTest() throws Exception {
 		when(mockClient.execute(any(Request.class))) //
         	.thenReturn(new Response(200, "OK", NO_HEADERS, new TypedString("Hello")));
 
 		Call<String> c = api.something();
 
 		String result = c.execute();
-
 		assertEquals(result, "Hello");
 	}
 
+	@Test public void asyncTest() throws Exception {
+		when(mockClient.execute(any(Request.class))) //
+        	.thenReturn(new Response(200, "OK", NO_HEADERS, new TypedString("Hello")));
+
+		Call<String> c = api.something();
+
+		Callback2<String> callback = mock(Callback2.class);
+		c.execute(callback);
+
+		verify(callback).success(eq("Hello"));
+	}
+
 }
