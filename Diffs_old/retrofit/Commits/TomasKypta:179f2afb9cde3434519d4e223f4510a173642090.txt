diff --git a/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java
index b9270c44e..267ed9899 100644
--- a/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java
+++ b/retrofit-converters/protobuf/src/main/java/retrofit/converter/ProtoConverter.java
@@ -13,7 +13,26 @@
 
 /** A {@link Converter} that reads and writes protocol buffers. */
 public class ProtoConverter implements Converter {
-  private static final MediaType MEDIA_TYPE = MediaType.parse("application/x-protobuf");
+
+  private final MediaType mediaType;
+
+  /**
+   * Default constructor for converter with default Content-Type - application/x-protobuf
+   */
+  public ProtoConverter() {
+    mediaType = MediaType.parse("application/x-protobuf");
+  }
+
+  /**
+   * Constructor allowing usage of custom Content-Type - e.g. application/octet-stream,
+   * application/x-google-protobuf
+   *
+   * @param contentType Custom Content-Type
+   */
+  public ProtoConverter(String contentType) {
+    mediaType = MediaType.parse(contentType);
+  }
+
 
   @Override public Object fromBody(ResponseBody body, Type type) throws IOException {
     if (!(type instanceof Class<?>)) {
@@ -49,6 +68,6 @@
               : "null"));
     }
     byte[] bytes = ((AbstractMessageLite) object).toByteArray();
-    return RequestBody.create(MEDIA_TYPE, bytes);
+    return RequestBody.create(mediaType, bytes);
   }
 }
diff --git a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
index 99bcc58f5..130cfa161 100644
--- a/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
+++ b/retrofit-converters/protobuf/src/test/java/retrofit/converter/ProtoConverterTest.java
@@ -21,6 +21,8 @@
   private static final String ENCODED_PROTO = "Cg4oNTE5KSA4NjctNTMwOQ==";
 
   private final ProtoConverter converter = new ProtoConverter();
+  private final ProtoConverter converterOctetStream = new ProtoConverter
+      ("application/octet-stream");
 
   @Test public void serialize() throws Exception {
     RequestBody body = converter.toBody(PROTO, Phone.class);
@@ -28,6 +30,12 @@
     assertBody(body).isEqualTo(ENCODED_PROTO);
   }
 
+  @Test public void serializeCustomContentType() throws Exception {
+    RequestBody body = converterOctetStream.toBody(PROTO, Phone.class);
+    assertThat(body.contentType().toString()).isEqualTo("application/octet-stream");
+    assertBody(body).isEqualTo(ENCODED_PROTO);
+  }
+
   @Test public void deserialize() throws Exception {
     Object proto = converter.fromBody(protoResponse(ENCODED_PROTO), Phone.class);
     assertThat(proto).isEqualTo(PROTO);
