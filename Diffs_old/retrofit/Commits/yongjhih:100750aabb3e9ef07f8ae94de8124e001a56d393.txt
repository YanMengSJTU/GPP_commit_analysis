diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index 7b8fe8492..7d0f545a8 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -41,6 +41,7 @@
 import retrofit.RetrofitError;
 import retrofit.client.Response;
 import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
 import com.squareup.okhttp.HttpUrl;
@@ -356,7 +357,6 @@ public void testRequestInterceptorOnMethod() {
     @Test
     public void testErrorHandler() { // SocketTimeoutException
         MockWebServer server = new MockWebServer();
-        //server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
         try {
             server.start();
         } catch (Throwable e) {
@@ -398,12 +398,11 @@ public void testHttpErrorHandler() {
         } catch (Throwable e) {
             System.out.println("server start() error: " + e);
         }
-        final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
+        final AtomicInteger status = new AtomicInteger(-1);
         //MockService service = MockService.create();
         MockService service = MockService.builder()
             .errorHandler(new ErrorHandler() {
                 @Override public Throwable handleError(RetrofitError cause) {
-                    hasErrorHandled.set(true);
 
                     System.out.println("ErrorHandler: " + cause);
 
@@ -412,9 +411,8 @@ public void testHttpErrorHandler() {
                     System.out.println("ErrorHandler: Response: " + r);
                     if (r != null) {
                         System.out.println("ErrorHandler: status: " + r.getStatus());
-                        if (r.getStatus() == 401) {
-                            return new RuntimeException("401", cause);
-                        }
+
+                        status.set(r.getStatus());
                     }
 
                     return cause;
@@ -422,7 +420,7 @@ public void testHttpErrorHandler() {
             })
         .build();
         String s = service.get(server.url("/").toString());
-        assertTrue(hasErrorHandled.get());
+        assertEquals(status.get(), HttpURLConnection.HTTP_NOT_FOUND);
     }
 
     @Test
