diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index 343f223de..85e55cc5a 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -194,6 +194,7 @@ public synchronized boolean isExecuted() {
         return parseResponse(call.execute());
     }
 
+    //创建原始请求
     private okhttp3.Call createRawCall() throws IOException {
         Request request = serviceMethod.toRequest(args);
         okhttp3.Call call = serviceMethod.callFactory.newCall(request);
diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index e67159bff..912312625 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -18,12 +18,13 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
+
 import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.concurrent.Executor;
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 class Platform {
   private static final Platform PLATFORM = findPlatform();
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index b92caf7e0..9177ebbd9 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -134,7 +134,7 @@
         if (validateEagerly) {
             eagerlyValidateMethods(service);
         }
-        //动态代理
+        //动态代理,类加载器,
         return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[]{service},
                 new InvocationHandler() {
                     private final Platform platform = Platform.get();
@@ -393,9 +393,13 @@ public Executor callbackExecutor() {
      * are optional.
      */
     public static final class Builder {
+        //平台
         private Platform platform;
+        //发起请求客户端工厂
         private okhttp3.Call.Factory callFactory;
+        //服务器地址
         private HttpUrl baseUrl;
+        //解析工厂
         private List<Converter.Factory> converterFactories = new ArrayList<>();
         private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
         private Executor callbackExecutor;
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 6048947b5..94dde7996 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -139,7 +139,9 @@ public Builder(Retrofit retrofit, Method method) {
             this.method = method;
             //获取方法上面的注解
             this.methodAnnotations = method.getAnnotations();
+            //获取参数类型
             this.parameterTypes = method.getGenericParameterTypes();
+            //获取参数中的注解
             this.parameterAnnotationsArray = method.getParameterAnnotations();
         }
 
@@ -155,7 +157,7 @@ public ServiceMethod build() {
             //创建响应解析器
             responseConverter = createResponseConverter();
 
-            //解析方法上面的注解
+            //解析方法上面的注解 get,post,delete eg..
             for (Annotation annotation : methodAnnotations) {
                 parseMethodAnnotation(annotation);
             }
@@ -211,6 +213,7 @@ public ServiceMethod build() {
         }
 
         private CallAdapter<?> createCallAdapter() {
+            //获取返回值类型
             Type returnType = method.getGenericReturnType();
             if (Utils.hasUnresolvableType(returnType)) {
                 throw methodError(
