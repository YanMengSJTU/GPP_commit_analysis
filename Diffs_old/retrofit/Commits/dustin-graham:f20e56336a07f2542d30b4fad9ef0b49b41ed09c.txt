diff --git a/README.md b/README.md
index 3aaa36d6b..81607e1d0 100644
--- a/README.md
+++ b/README.md
@@ -16,19 +16,19 @@ example interface:
 public interface DummyServiceAsync {
   // Produces a url like "foo/bar?id=idValue".
   @GET("foo/bar")
-  void normalGet(@Name("id") String id, Callback<SimpleResponse> callback);
+  void normalGet(@Name("id") String id, Callback<MyJsonObj> callback);
 
   // Produces a url like "foo/idValue/bar?category=categoryValue".
   @GET("foo/{id}/bar")
-  void getWithPathParam(@Name("id") String id, @Name("category") String category, Callback<SimpleResponse> callback);
+  void getWithPathParam(@Name("id") String id, @Name("category") String category, Callback<MyJsonObj> callback);
 
   // Produces a url like "foo/bar/idValue" and body like "id=idValue&body=bodyValue".
   @POST("foo/bar/{id}")
-  void normalPost(@Name("id") String id, @Name("body") String body, Callback<SimpleResponse> callback);
+  void normalPost(@Name("id") String id, @Name("body") String body, Callback<MyJsonObj> callback);
 
   // Produces a url like "foo/bar/idValue" and body generated by MyJsonObj.
   @POST("foo/bar/{id}")
-  void singleEntityPost(@SingleEntity MyJsonObj card, @Name("id") String id, Callback<SimpleResponse> callback);
+  void singleEntityPost(@SingleEntity MyJsonObj card, @Name("id") String id, Callback<MyJsonObj> callback);
 }
 ```
 
@@ -44,7 +44,7 @@ For synchronous execution, omit the `Callback` parameter and specify the respons
 ```java
 public interface DummyServiceSync {
   @GET("foo/bar")
-  SimpleResponse normalGet(@Name("id") String id);
+  MyJsonObj normalGet(@Name("id") String id);
 }
 ```
 
diff --git a/retrofit/src/main/java/retrofit/http/RestAdapter.java b/retrofit/src/main/java/retrofit/http/RestAdapter.java
index 5679631b7..4bff10d1e 100644
--- a/retrofit/src/main/java/retrofit/http/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/http/RestAdapter.java
@@ -190,7 +190,7 @@ private Object invokeRequest(RestMethodInfo methodDetails, Object[] args) {
             return new ResponseWrapper(response, response);
           }
           if (body == null) {
-            return null;
+            return new ResponseWrapper(response, null);
           }
           try {
             Object convert = converter.fromBody(body, type);
@@ -367,4 +367,4 @@ private void ensureSaneDefaults() {
       }
     }
   }
-}
\ No newline at end of file
+}
diff --git a/retrofit/src/main/java/retrofit/http/RetrofitError.java b/retrofit/src/main/java/retrofit/http/RetrofitError.java
index 969e21c1c..cd1476864 100644
--- a/retrofit/src/main/java/retrofit/http/RetrofitError.java
+++ b/retrofit/src/main/java/retrofit/http/RetrofitError.java
@@ -30,16 +30,15 @@ static RetrofitError unexpectedError(String url, Throwable exception) {
   private final Converter converter;
   private final Type successType;
   private final boolean networkError;
-  private final Throwable exception;
 
   private RetrofitError(String url, Response response, Converter converter, Type successType,
       boolean networkError, Throwable exception) {
+    super(exception);
     this.url = url;
     this.response = response;
     this.converter = converter;
     this.successType = successType;
     this.networkError = networkError;
-    this.exception = exception;
   }
 
   /** The request URL which produced the error. */
@@ -85,9 +84,4 @@ public Object getBodyAs(Type type) {
       throw new RuntimeException(e);
     }
   }
-
-  /** The exception which caused this error, if any. */
-  public Throwable getException() {
-    return exception;
-  }
-}
\ No newline at end of file
+}
diff --git a/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java b/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java
index db40131a5..43f679b8f 100644
--- a/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java
+++ b/retrofit/src/main/java/retrofit/http/client/UrlConnectionClient.java
@@ -58,10 +58,10 @@ Response readResponse(HttpURLConnection connection) throws IOException {
     String mimeType = connection.getContentType();
     int length = connection.getContentLength();
     InputStream stream;
-    if (status == 200) {
-      stream = connection.getInputStream();
-    } else {
+    if (status >= 400) {
       stream = connection.getErrorStream();
+    } else {
+      stream = connection.getInputStream();
     }
     TypedInput responseBody = new TypedInputStream(mimeType, length, stream);
     return new Response(status, reason, headers, responseBody);
diff --git a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
index 089288aaf..683055a17 100644
--- a/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
+++ b/retrofit/src/test/java/retrofit/http/RestAdapterTest.java
@@ -110,7 +110,7 @@
       fail("RetrofitError expected on malformed response body.");
     } catch (RetrofitError e) {
       assertThat(e.getResponse().getStatus()).isEqualTo(200);
-      assertThat(e.getException()).isInstanceOf(ConversionException.class);
+      assertThat(e.getCause()).isInstanceOf(ConversionException.class);
       assertThat(e.getResponse().getBody()).isEqualTo(new TypedString("{"));
     }
   }
@@ -135,7 +135,7 @@
       example.something();
       fail("RetrofitError expected when client throws exception.");
     } catch (RetrofitError e) {
-      assertThat(e.getException()).isSameAs(exception);
+      assertThat(e.getCause()).isSameAs(exception);
     }
   }
 
@@ -147,7 +147,7 @@
       example.something();
       fail("RetrofitError expected when unexpected exception thrown.");
     } catch (RetrofitError e) {
-      assertThat(e.getException()).isSameAs(exception);
+      assertThat(e.getCause()).isSameAs(exception);
     }
   }
 
diff --git a/retrofit/src/test/java/retrofit/http/TestingUtils.java b/retrofit/src/test/java/retrofit/http/TestingUtils.java
index 99ff53dcf..d7e3e02ce 100644
--- a/retrofit/src/test/java/retrofit/http/TestingUtils.java
+++ b/retrofit/src/test/java/retrofit/http/TestingUtils.java
@@ -10,7 +10,7 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
-public class TestingUtils {
+public abstract class TestingUtils {
   public static Method getMethod(Class c, String name) {
     for (Method method : c.getDeclaredMethods()) {
       if (method.getName().equals(name)) {
diff --git a/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java b/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java
index 6a61d29a1..11f76b060 100644
--- a/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java
+++ b/retrofit/src/test/java/retrofit/http/client/UrlConnectionClientTest.java
@@ -104,6 +104,24 @@
     assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
   }
 
+  @Test public void createdResponse() throws Exception {
+    DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
+    connection.setResponseCode(201);
+    connection.setResponseMessage("OK");
+    connection.addResponseHeader("Content-Type", "text/plain");
+    connection.addResponseHeader("foo", "bar");
+    connection.addResponseHeader("kit", "kat");
+    connection.setInputStream(new ByteArrayInputStream("hello".getBytes("UTF-8")));
+    Response response = client.readResponse(connection);
+
+    assertThat(response.getStatus()).isEqualTo(201);
+    assertThat(response.getReason()).isEqualTo("OK");
+    assertThat(response.getHeaders()).hasSize(3) //
+        .containsOnly(new Header("foo", "bar"), new Header("kit", "kat"),
+            new Header("Content-Type", "text/plain"));
+    assertBytes(ByteStreams.toByteArray(response.getBody().in()), "hello");
+  }
+
   @Test public void errorResponse() throws Exception {
     DummyHttpUrlConnection connection = new DummyHttpUrlConnection(HOST);
     connection.setResponseCode(401);
diff --git a/samples/twitter-client/pom.xml b/samples/github-client/pom.xml
similarity index 88%
rename from samples/twitter-client/pom.xml
rename to samples/github-client/pom.xml
index b6f13d879..9f75f6303 100644
--- a/samples/twitter-client/pom.xml
+++ b/samples/github-client/pom.xml
@@ -12,8 +12,8 @@
     <relativePath>../pom.xml</relativePath>
   </parent>
 
-  <artifactId>sample-twitter-client</artifactId>
-  <name>Sample: Twitter Client</name>
+  <artifactId>sample-github-client</artifactId>
+  <name>Sample: GitHub Client</name>
 
   <dependencies>
     <dependency>
diff --git a/samples/twitter-client/src/main/java/com/squareup/retrofit/sample/twitter/Client.java b/samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java
similarity index 96%
rename from samples/twitter-client/src/main/java/com/squareup/retrofit/sample/twitter/Client.java
rename to samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java
index 1e3825c26..aa1fdd4e9 100644
--- a/samples/twitter-client/src/main/java/com/squareup/retrofit/sample/twitter/Client.java
+++ b/samples/github-client/src/main/java/com/squareup/retrofit/sample/github/Client.java
@@ -1,5 +1,5 @@
 // Copyright 2012 Square, Inc.
-package com.squareup.retrofit.sample.twitter;
+package com.squareup.retrofit.sample.github;
 
 import java.util.List;
 import retrofit.http.GET;
diff --git a/samples/pom.xml b/samples/pom.xml
index 73ec51129..660a096d2 100644
--- a/samples/pom.xml
+++ b/samples/pom.xml
@@ -17,6 +17,6 @@
   <packaging>pom</packaging>
 
   <modules>
-    <module>twitter-client</module>
+    <module>github-client</module>
   </modules>
 </project>
