diff --git a/pom.xml b/pom.xml
index 6450ad503..13b7826bd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -34,10 +34,12 @@
 
   <modules>
     <module>retrofit</module>
-    <module>retrofit-adapters</module>
+    <!--
     <module>retrofit-converters</module>
+    <module>retrofit-adapters</module>
     <module>retrofit-mock</module>
     <module>samples</module>
+    -->
   </modules>
 
   <properties>
@@ -45,7 +47,7 @@
     <project.reporting.sourceEncoding>UTF-8</project.reporting.sourceEncoding>
 
     <!-- Compilation -->
-    <java.version>1.7</java.version>
+    <java.version>1.6</java.version>
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
@@ -60,7 +62,6 @@
     <!-- Converter Dependencies -->
     <gson.version>2.8.2</gson.version>
     <protobuf.version>3.0.0</protobuf.version>
-    <jackson.version>2.7.2</jackson.version>
     <wire.version>2.2.0</wire.version>
     <simplexml.version>2.7.1</simplexml.version>
     <moshi.version>1.5.0</moshi.version>
@@ -101,6 +102,7 @@
 
   <dependencyManagement>
     <dependencies>
+
       <dependency>
         <groupId>com.google.android</groupId>
         <artifactId>android</artifactId>
@@ -115,6 +117,7 @@
         <groupId>com.squareup.okhttp3</groupId>
         <artifactId>okhttp</artifactId>
         <version>${okhttp.version}</version>
+	<scope>compile</scope>
       </dependency>
       <dependency>
         <groupId>com.google.code.gson</groupId>
@@ -136,11 +139,6 @@
         <artifactId>protobuf-java</artifactId>
         <version>${protobuf.version}</version>
       </dependency>
-      <dependency>
-        <groupId>com.fasterxml.jackson.core</groupId>
-        <artifactId>jackson-databind</artifactId>
-        <version>${jackson.version}</version>
-     </dependency>
       <dependency>
         <groupId>com.squareup.wire</groupId>
         <artifactId>wire-runtime</artifactId>
diff --git a/retrofit-converters/jackson/pom.xml b/retrofit-converters/jackson/pom.xml
index f03526863..97375bf3e 100644
--- a/retrofit-converters/jackson/pom.xml
+++ b/retrofit-converters/jackson/pom.xml
@@ -18,6 +18,7 @@
       <groupId>${project.groupId}</groupId>
       <artifactId>retrofit</artifactId>
       <version>${project.version}</version>
+      <scope>compile</scope>
     </dependency>
     <dependency>
       <groupId>com.fasterxml.jackson.core</groupId>
diff --git a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
index 5e5106c45..417f664ee 100644
--- a/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
+++ b/retrofit-converters/jackson/src/main/java/retrofit2/converter/jackson/JacksonConverterFactory.java
@@ -58,7 +58,7 @@ private JacksonConverterFactory(ObjectMapper mapper) {
       Retrofit retrofit) {
     JavaType javaType = mapper.getTypeFactory().constructType(type);
     ObjectReader reader = mapper.readerFor(javaType);
-    return new JacksonResponseBodyConverter<>(reader);
+    return new JacksonResponseBodyConverter<Object>(reader);
   }
 
   @Override
@@ -66,6 +66,6 @@ private JacksonConverterFactory(ObjectMapper mapper) {
       Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {
     JavaType javaType = mapper.getTypeFactory().constructType(type);
     ObjectWriter writer = mapper.writerFor(javaType);
-    return new JacksonRequestBodyConverter<>(writer);
+    return new JacksonRequestBodyConverter<Object>(writer);
   }
 }
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index c6258b38c..de9446764 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -15,14 +15,16 @@
   <packaging>pom</packaging>
 
   <modules>
-    <module>gson</module>
+    <module>jackson</module>
+<!--
     <module>guava</module>
+    <module>gson</module>
     <module>protobuf</module>
-    <module>jackson</module>
     <module>java8</module>
     <module>wire</module>
     <module>simplexml</module>
     <module>scalars</module>
     <module>moshi</module>
+-->
   </modules>
 </project>
diff --git a/retrofit/pom.xml b/retrofit/pom.xml
index 6a2cea74b..de3be9f76 100644
--- a/retrofit/pom.xml
+++ b/retrofit/pom.xml
@@ -17,6 +17,12 @@
     <dependency>
       <groupId>com.squareup.okhttp3</groupId>
       <artifactId>okhttp</artifactId>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>com.fasterxml.jackson.core</groupId>
+      <artifactId>jackson-databind</artifactId>
+      <version>2.9.1</version>
     </dependency>
 
     <dependency>
diff --git a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
index f819c7863..ee0d6d9c3 100644
--- a/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
+++ b/retrofit/src/main/java/retrofit2/ExecutorCallAdapterFactory.java
@@ -42,7 +42,7 @@
       }
 
       @Override public Call<Object> adapt(Call<Object> call) {
-        return new ExecutorCallbackCall<>(callbackExecutor, call);
+        return new ExecutorCallbackCall<Object>(callbackExecutor, call);
       }
     };
   }
@@ -101,7 +101,7 @@
 
     @SuppressWarnings("CloneDoesntCallSuperClone") // Performing deep clone.
     @Override public Call<T> clone() {
-      return new ExecutorCallbackCall<>(callbackExecutor, delegate.clone());
+      return new ExecutorCallbackCall<T>(callbackExecutor, delegate.clone());
     }
 
     @Override public Request request() {
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index c547caf6b..19d4dee85 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -48,7 +48,7 @@
 
   @SuppressWarnings("CloneDoesntCallSuperClone") // We are a final type & this saves clearing state.
   @Override public OkHttpCall<T> clone() {
-    return new OkHttpCall<>(serviceMethod, args);
+    return new OkHttpCall<T>(serviceMethod, args);
   }
 
   @Override public synchronized Request request() {
@@ -162,7 +162,10 @@ private void callSuccess(Response<T> response) {
       if (call == null) {
         try {
           call = rawCall = createRawCall();
-        } catch (IOException | RuntimeException e) {
+        } catch (IOException e) {
+          creationFailure = e;
+          throw e;
+        } catch (RuntimeException e) {
           creationFailure = e;
           throw e;
         }
diff --git a/retrofit/src/main/java/retrofit2/Response.java b/retrofit/src/main/java/retrofit2/Response.java
index 0f23bd4da..2ecd0cd51 100644
--- a/retrofit/src/main/java/retrofit2/Response.java
+++ b/retrofit/src/main/java/retrofit2/Response.java
@@ -59,7 +59,7 @@
     if (!rawResponse.isSuccessful()) {
       throw new IllegalArgumentException("rawResponse must be successful response");
     }
-    return new Response<>(rawResponse, body, null);
+    return new Response<T>(rawResponse, body, null);
   }
 
   /**
@@ -83,7 +83,7 @@
     if (rawResponse.isSuccessful()) {
       throw new IllegalArgumentException("rawResponse should not be successful response");
     }
-    return new Response<>(rawResponse, null, body);
+    return new Response<T>(rawResponse, null, body);
   }
 
   private final okhttp3.Response rawResponse;
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 0c7de96a8..faab5186b 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -30,6 +30,7 @@
 import okhttp3.OkHttpClient;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
+import retrofit2.Converter.Factory;
 import retrofit2.http.GET;
 import retrofit2.http.HTTP;
 import retrofit2.http.Header;
@@ -58,7 +59,7 @@
  * @author Jake Wharton (jw@squareup.com)
  */
 public final class Retrofit {
-  private final Map<Method, ServiceMethod<?, ?>> serviceMethodCache = new ConcurrentHashMap<>();
+  private final Map<Method, ServiceMethod<?, ?>> serviceMethodCache = new ConcurrentHashMap<Method, ServiceMethod<?, ?>>();
 
   final okhttp3.Call.Factory callFactory;
   final HttpUrl baseUrl;
@@ -145,7 +146,7 @@
             }
             ServiceMethod<Object, Object> serviceMethod =
                 (ServiceMethod<Object, Object>) loadServiceMethod(method);
-            OkHttpCall<Object> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+            OkHttpCall<Object> okHttpCall = new OkHttpCall<Object>(serviceMethod, args);
             return serviceMethod.callAdapter.adapt(okHttpCall);
           }
         });
@@ -167,7 +168,7 @@ private void eagerlyValidateMethods(Class<?> service) {
     synchronized (serviceMethodCache) {
       result = serviceMethodCache.get(method);
       if (result == null) {
-        result = new ServiceMethod.Builder<>(this, method).build();
+        result = new ServiceMethod.Builder<Object, Object>(this, method).build();
         serviceMethodCache.put(method, result);
       }
     }
@@ -395,8 +396,8 @@ public Builder newBuilder() {
     private final Platform platform;
     private @Nullable okhttp3.Call.Factory callFactory;
     private HttpUrl baseUrl;
-    private final List<Converter.Factory> converterFactories = new ArrayList<>();
-    private final List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
+    private final List<Converter.Factory> converterFactories = new ArrayList<Factory>();
+    private final List<CallAdapter.Factory> adapterFactories = new ArrayList<retrofit2.CallAdapter.Factory>();
     private @Nullable Executor callbackExecutor;
     private boolean validateEagerly;
 
@@ -583,12 +584,12 @@ public Retrofit build() {
       }
 
       // Make a defensive copy of the adapters and add the default Call adapter.
-      List<CallAdapter.Factory> adapterFactories = new ArrayList<>(this.adapterFactories);
+      List<CallAdapter.Factory> adapterFactories = new ArrayList<retrofit2.CallAdapter.Factory>(this.adapterFactories);
       adapterFactories.add(platform.defaultCallAdapterFactory(callbackExecutor));
 
       // Make a defensive copy of the converters.
       List<Converter.Factory> converterFactories =
-          new ArrayList<>(1 + this.converterFactories.size());
+          new ArrayList<Factory>(1 + this.converterFactories.size());
 
       // Add the built-in converter factory first. This prevents overriding its behavior but also
       // ensures correct behavior when using converters that consume all types.
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index d0a19384c..99382a7ba 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -217,7 +217,7 @@ public ServiceMethod build() {
         throw methodError("Multipart method must contain at least one @Part.");
       }
 
-      return new ServiceMethod<>(this);
+      return new ServiceMethod<T, R>(this);
     }
 
     private CallAdapter<T, R> createCallAdapter() {
@@ -399,7 +399,7 @@ private Headers parseHeaders(String[] headers) {
         validatePathName(p, name);
 
         Converter<?, String> converter = retrofit.stringConverter(type, annotations);
-        return new ParameterHandler.Path<>(name, converter, path.encoded());
+        return new ParameterHandler.Path(name, converter, path.encoded());
 
       } else if (annotation instanceof Query) {
         Query query = (Query) annotation;
@@ -419,16 +419,16 @@ private Headers parseHeaders(String[] headers) {
           Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
           Converter<?, String> converter =
               retrofit.stringConverter(iterableType, annotations);
-          return new ParameterHandler.Query<>(name, converter, encoded).iterable();
+          return new ParameterHandler.Query(name, converter, encoded).iterable();
         } else if (rawParameterType.isArray()) {
           Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
           Converter<?, String> converter =
               retrofit.stringConverter(arrayComponentType, annotations);
-          return new ParameterHandler.Query<>(name, converter, encoded).array();
+          return new ParameterHandler.Query(name, converter, encoded).array();
         } else {
           Converter<?, String> converter =
               retrofit.stringConverter(type, annotations);
-          return new ParameterHandler.Query<>(name, converter, encoded);
+          return new ParameterHandler.Query(name, converter, encoded);
         }
 
       } else if (annotation instanceof QueryName) {
@@ -448,16 +448,16 @@ private Headers parseHeaders(String[] headers) {
           Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
           Converter<?, String> converter =
               retrofit.stringConverter(iterableType, annotations);
-          return new ParameterHandler.QueryName<>(converter, encoded).iterable();
+          return new ParameterHandler.QueryName(converter, encoded).iterable();
         } else if (rawParameterType.isArray()) {
           Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
           Converter<?, String> converter =
               retrofit.stringConverter(arrayComponentType, annotations);
-          return new ParameterHandler.QueryName<>(converter, encoded).array();
+          return new ParameterHandler.QueryName(converter, encoded).array();
         } else {
           Converter<?, String> converter =
               retrofit.stringConverter(type, annotations);
-          return new ParameterHandler.QueryName<>(converter, encoded);
+          return new ParameterHandler.QueryName(converter, encoded);
         }
 
       } else if (annotation instanceof QueryMap) {
@@ -478,7 +478,7 @@ private Headers parseHeaders(String[] headers) {
         Converter<?, String> valueConverter =
             retrofit.stringConverter(valueType, annotations);
 
-        return new ParameterHandler.QueryMap<>(valueConverter, ((QueryMap) annotation).encoded());
+        return new ParameterHandler.QueryMap(valueConverter, ((QueryMap) annotation).encoded());
 
       } else if (annotation instanceof Header) {
         Header header = (Header) annotation;
@@ -496,16 +496,16 @@ private Headers parseHeaders(String[] headers) {
           Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
           Converter<?, String> converter =
               retrofit.stringConverter(iterableType, annotations);
-          return new ParameterHandler.Header<>(name, converter).iterable();
+          return new ParameterHandler.Header(name, converter).iterable();
         } else if (rawParameterType.isArray()) {
           Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
           Converter<?, String> converter =
               retrofit.stringConverter(arrayComponentType, annotations);
-          return new ParameterHandler.Header<>(name, converter).array();
+          return new ParameterHandler.Header(name, converter).array();
         } else {
           Converter<?, String> converter =
               retrofit.stringConverter(type, annotations);
-          return new ParameterHandler.Header<>(name, converter);
+          return new ParameterHandler.Header(name, converter);
         }
 
       } else if (annotation instanceof HeaderMap) {
@@ -526,7 +526,7 @@ private Headers parseHeaders(String[] headers) {
         Converter<?, String> valueConverter =
             retrofit.stringConverter(valueType, annotations);
 
-        return new ParameterHandler.HeaderMap<>(valueConverter);
+        return new ParameterHandler.HeaderMap(valueConverter);
 
       } else if (annotation instanceof Field) {
         if (!isFormEncoded) {
@@ -550,16 +550,16 @@ private Headers parseHeaders(String[] headers) {
           Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
           Converter<?, String> converter =
               retrofit.stringConverter(iterableType, annotations);
-          return new ParameterHandler.Field<>(name, converter, encoded).iterable();
+          return new ParameterHandler.Field(name, converter, encoded).iterable();
         } else if (rawParameterType.isArray()) {
           Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
           Converter<?, String> converter =
               retrofit.stringConverter(arrayComponentType, annotations);
-          return new ParameterHandler.Field<>(name, converter, encoded).array();
+          return new ParameterHandler.Field(name, converter, encoded).array();
         } else {
           Converter<?, String> converter =
               retrofit.stringConverter(type, annotations);
-          return new ParameterHandler.Field<>(name, converter, encoded);
+          return new ParameterHandler.Field(name, converter, encoded);
         }
 
       } else if (annotation instanceof FieldMap) {
@@ -585,7 +585,7 @@ private Headers parseHeaders(String[] headers) {
             retrofit.stringConverter(valueType, annotations);
 
         gotField = true;
-        return new ParameterHandler.FieldMap<>(valueConverter, ((FieldMap) annotation).encoded());
+        return new ParameterHandler.FieldMap(valueConverter, ((FieldMap) annotation).encoded());
 
       } else if (annotation instanceof Part) {
         if (!isMultipart) {
@@ -644,7 +644,7 @@ private Headers parseHeaders(String[] headers) {
             }
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(iterableType, annotations, methodAnnotations);
-            return new ParameterHandler.Part<>(headers, converter).iterable();
+            return new ParameterHandler.Part(headers, converter).iterable();
           } else if (rawParameterType.isArray()) {
             Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
             if (MultipartBody.Part.class.isAssignableFrom(arrayComponentType)) {
@@ -653,14 +653,14 @@ private Headers parseHeaders(String[] headers) {
             }
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(arrayComponentType, annotations, methodAnnotations);
-            return new ParameterHandler.Part<>(headers, converter).array();
+            return new ParameterHandler.Part(headers, converter).array();
           } else if (MultipartBody.Part.class.isAssignableFrom(rawParameterType)) {
             throw parameterError(p, "@Part parameters using the MultipartBody.Part must not "
                 + "include a part name in the annotation.");
           } else {
             Converter<?, RequestBody> converter =
                 retrofit.requestBodyConverter(type, annotations, methodAnnotations);
-            return new ParameterHandler.Part<>(headers, converter);
+            return new ParameterHandler.Part(headers, converter);
           }
         }
 
@@ -694,7 +694,7 @@ private Headers parseHeaders(String[] headers) {
             retrofit.requestBodyConverter(valueType, annotations, methodAnnotations);
 
         PartMap partMap = (PartMap) annotation;
-        return new ParameterHandler.PartMap<>(valueConverter, partMap.encoding());
+        return new ParameterHandler.PartMap(valueConverter, partMap.encoding());
 
       } else if (annotation instanceof Body) {
         if (isFormEncoded || isMultipart) {
@@ -713,7 +713,7 @@ private Headers parseHeaders(String[] headers) {
           throw parameterError(e, p, "Unable to create @Body converter for %s", type);
         }
         gotBody = true;
-        return new ParameterHandler.Body<>(converter);
+        return new ParameterHandler.Body(converter);
       }
 
       return null; // Not a Retrofit annotation.
@@ -768,7 +768,7 @@ private RuntimeException parameterError(int p, String message, Object... args) {
    */
   static Set<String> parsePathParameters(String path) {
     Matcher m = PARAM_URL_REGEX.matcher(path);
-    Set<String> patterns = new LinkedHashSet<>();
+    Set<String> patterns = new LinkedHashSet<String>();
     while (m.find()) {
       patterns.add(m.group(1));
     }
diff --git a/retrofit/src/test/java/retrofit2/CallTest.java b/retrofit/src/test/java/retrofit2/CallTest.java
index fffd43c1f..99c82e029 100644
--- a/retrofit/src/test/java/retrofit2/CallTest.java
+++ b/retrofit/src/test/java/retrofit2/CallTest.java
@@ -83,7 +83,7 @@
 
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    final AtomicReference<Response<String>> responseRef = new AtomicReference<>();
+    final AtomicReference<Response<String>> responseRef = new AtomicReference<Response<String>>();
     final CountDownLatch latch = new CountDownLatch(1);
     example.getString().enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -126,7 +126,7 @@
 
     server.enqueue(new MockResponse().setResponseCode(404).setBody("Hi"));
 
-    final AtomicReference<Response<String>> responseRef = new AtomicReference<>();
+    final AtomicReference<Response<String>> responseRef = new AtomicReference<Response<String>>();
     final CountDownLatch latch = new CountDownLatch(1);
     example.getString().enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -172,7 +172,7 @@
 
     server.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     example.getString().enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -235,7 +235,7 @@
         .build();
     Service example = retrofit.create(Service.class);
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     example.postString("Hi").enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -350,7 +350,7 @@
 
     server.enqueue(new MockResponse().setBody("Hi"));
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     example.postString("Hi").enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -610,7 +610,7 @@
     call.cancel();
     assertThat(call.isCanceled()).isTrue();
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     call.enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -654,7 +654,7 @@
 
     Call<String> call = service.getString();
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     call.enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
@@ -687,7 +687,7 @@
 
     Call<String> call = service.getString();
 
-    final AtomicReference<Throwable> failureRef = new AtomicReference<>();
+    final AtomicReference<Throwable> failureRef = new AtomicReference<Throwable>();
     final CountDownLatch latch = new CountDownLatch(1);
     call.enqueue(new Callback<String>() {
       @Override public void onResponse(Call<String> call, Response<String> response) {
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 66be17b17..caeceff5c 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -503,7 +503,7 @@
       }
     }
 
-    Map<String, String> queryParams = new LinkedHashMap<>();
+    Map<String, String> queryParams = new LinkedHashMap<String, String>();
     queryParams.put("ping", "pong");
     queryParams.put(null, "kat");
 
@@ -523,7 +523,7 @@
       }
     }
 
-    Map<String, String> queryParams = new LinkedHashMap<>();
+    Map<String, String> queryParams = new LinkedHashMap<String, String>();
     queryParams.put("ping", "pong");
     queryParams.put("kit", null);
 
@@ -543,7 +543,7 @@
       }
     }
 
-    Map<String, Object> headers = new LinkedHashMap<>();
+    Map<String, Object> headers = new LinkedHashMap<String, Object>();
     headers.put("Accept", "text/plain");
     headers.put("Accept-Charset", "utf-8");
 
@@ -616,7 +616,7 @@
       }
     }
 
-    Map<String, String> headers = new LinkedHashMap<>();
+    Map<String, String> headers = new LinkedHashMap<String, String>();
     headers.put("Accept", "text/plain");
     headers.put(null, "utf-8");
 
@@ -636,7 +636,7 @@
       }
     }
 
-    Map<String, String> headers = new LinkedHashMap<>();
+    Map<String, String> headers = new LinkedHashMap<String, String>();
     headers.put("Accept", "text/plain");
     headers.put("Accept-Charset", null);
 
@@ -1196,7 +1196,7 @@
       }
     }
 
-    Map<String, Object> params = new LinkedHashMap<>();
+    Map<String, Object> params = new LinkedHashMap<String, Object>();
     params.put("kit", "kat");
     params.put("ping", "pong");
 
@@ -1215,7 +1215,7 @@
       }
     }
 
-    Map<String, Object> params = new LinkedHashMap<>();
+    Map<String, Object> params = new LinkedHashMap<String, Object>();
     params.put("kit", "k%20t");
     params.put("pi%20ng", "p%20g");
 
@@ -1921,7 +1921,7 @@
       }
     }
 
-    Map<String, RequestBody> params = new LinkedHashMap<>();
+    Map<String, RequestBody> params = new LinkedHashMap<String, RequestBody>();
     params.put("ping", RequestBody.create(null, "pong"));
     params.put("kit", RequestBody.create(null, "kat"));
 
@@ -1955,7 +1955,7 @@
       }
     }
 
-    Map<String, RequestBody> params = new LinkedHashMap<>();
+    Map<String, RequestBody> params = new LinkedHashMap<String, RequestBody>();
     params.put("ping", RequestBody.create(null, "pong"));
     params.put("kit", RequestBody.create(null, "kat"));
 
@@ -2046,7 +2046,7 @@
       }
     }
 
-    Map<String, RequestBody> params = new LinkedHashMap<>();
+    Map<String, RequestBody> params = new LinkedHashMap<String, RequestBody>();
     params.put("ping", RequestBody.create(null, "pong"));
     params.put(null, RequestBody.create(null, "kat"));
 
@@ -2067,7 +2067,7 @@
       }
     }
 
-    Map<String, RequestBody> params = new LinkedHashMap<>();
+    Map<String, RequestBody> params = new LinkedHashMap<String, RequestBody>();
     params.put("ping", RequestBody.create(null, "pong"));
     params.put("kit", null);
 
@@ -2248,7 +2248,7 @@
       }
     }
 
-    Map<String, Object> fieldMap = new LinkedHashMap<>();
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
     fieldMap.put("k%20it", "k%20at");
     fieldMap.put("pin%20g", "po%20ng");
 
@@ -2265,7 +2265,7 @@
       }
     }
 
-    Map<String, Object> fieldMap = new LinkedHashMap<>();
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
     fieldMap.put("kit", "kat");
     fieldMap.put("ping", "pong");
 
@@ -2299,7 +2299,7 @@
       }
     }
 
-    Map<String, Object> fieldMap = new LinkedHashMap<>();
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
     fieldMap.put("kit", "kat");
     fieldMap.put(null, "pong");
 
@@ -2320,7 +2320,7 @@
       }
     }
 
-    Map<String, Object> fieldMap = new LinkedHashMap<>();
+    Map<String, Object> fieldMap = new LinkedHashMap<String, Object>();
     fieldMap.put("kit", "kat");
     fieldMap.put("foo", null);
 
@@ -2669,7 +2669,7 @@ private static void assertBody(RequestBody body, String expected) {
   }
 
   static <T> Request buildRequest(Class<T> cls, Retrofit.Builder builder, Object... args) {
-    final AtomicReference<Request> requestRef = new AtomicReference<>();
+    final AtomicReference<Request> requestRef = new AtomicReference<Request>();
     okhttp3.Call.Factory callFactory = new okhttp3.Call.Factory() {
       @Override public okhttp3.Call newCall(Request request) {
         requestRef.set(request);
@@ -2683,7 +2683,7 @@ private static void assertBody(RequestBody body, String expected) {
     //noinspection unchecked
     ServiceMethod<T, Call<T>> serviceMethod =
         (ServiceMethod<T, Call<T>>) retrofit.loadServiceMethod(method);
-    Call<T> okHttpCall = new OkHttpCall<>(serviceMethod, args);
+    Call<T> okHttpCall = new OkHttpCall<T>(serviceMethod, args);
     Call<T> call = serviceMethod.callAdapter.adapt(okHttpCall);
     try {
       call.execute();
diff --git a/retrofit/src/test/java/retrofit2/RetrofitTest.java b/retrofit/src/test/java/retrofit2/RetrofitTest.java
index 4b9cd8adb..6c256216f 100644
--- a/retrofit/src/test/java/retrofit2/RetrofitTest.java
+++ b/retrofit/src/test/java/retrofit2/RetrofitTest.java
@@ -329,7 +329,7 @@
   }
 
   @Test public void methodAnnotationsPassedToCallAdapter() {
-    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<>();
+    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<Annotation[]>();
     class MyCallAdapterFactory extends CallAdapter.Factory {
       @Override public CallAdapter<?, ?> get(Type returnType, Annotation[] annotations,
           Retrofit retrofit) {
@@ -369,7 +369,7 @@
   }
 
   @Test public void methodAnnotationsPassedToResponseBodyConverter() {
-    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<>();
+    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<Annotation[]>();
     class MyConverterFactory extends Converter.Factory {
       @Override
       public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,
@@ -390,8 +390,8 @@
   }
 
   @Test public void methodAndParameterAnnotationsPassedToRequestBodyConverter() {
-    final AtomicReference<Annotation[]> parameterAnnotationsRef = new AtomicReference<>();
-    final AtomicReference<Annotation[]> methodAnnotationsRef = new AtomicReference<>();
+    final AtomicReference<Annotation[]> parameterAnnotationsRef = new AtomicReference<Annotation[]>();
+    final AtomicReference<Annotation[]> methodAnnotationsRef = new AtomicReference<Annotation[]>();
 
     class MyConverterFactory extends Converter.Factory {
       @Override
@@ -415,7 +415,7 @@
   }
 
   @Test public void parameterAnnotationsPassedToStringConverter() {
-    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<>();
+    final AtomicReference<Annotation[]> annotationsRef = new AtomicReference<Annotation[]>();
     class MyConverterFactory extends Converter.Factory {
       @Override public Converter<?, String> stringConverter(Type type, Annotation[] annotations,
           Retrofit retrofit) {
