diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index b194d4ed5..c83a1bc4e 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -61,16 +61,18 @@
 
   private final okhttp3.Call.Factory callFactory;
   private final HttpUrl baseUrl;
+  private final HttpUrl baseHttpsUrl;
   private final List<Converter.Factory> converterFactories;
   private final List<CallAdapter.Factory> adapterFactories;
   private final Executor callbackExecutor;
   private final boolean validateEagerly;
 
-  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl,
+  Retrofit(okhttp3.Call.Factory callFactory, HttpUrl baseUrl, HttpUrl baseHttpsUrl,
       List<Converter.Factory> converterFactories, List<CallAdapter.Factory> adapterFactories,
       Executor callbackExecutor, boolean validateEagerly) {
     this.callFactory = callFactory;
     this.baseUrl = baseUrl;
+    this.baseHttpsUrl = baseHttpsUrl;
     this.converterFactories = unmodifiableList(converterFactories); // Defensive copy at call site.
     this.adapterFactories = unmodifiableList(adapterFactories); // Defensive copy at call site.
     this.callbackExecutor = callbackExecutor;
@@ -183,6 +185,11 @@ public HttpUrl baseUrl() {
     return baseUrl;
   }
 
+  /** The API base Https URL. */
+  public HttpUrl baseHttpsUrl(){
+        return baseHttpsUrl;
+  }
+
   /**
    * Returns a list of the factories tried when creating a
    * {@linkplain #callAdapter(Type, Annotation[])} call adapter}.
@@ -386,6 +393,7 @@ public Executor callbackExecutor() {
     private Platform platform;
     private okhttp3.Call.Factory callFactory;
     private HttpUrl baseUrl;
+    private HttpUrl baseHttpsUrl;
     private List<Converter.Factory> converterFactories = new ArrayList<>();
     private List<CallAdapter.Factory> adapterFactories = new ArrayList<>();
     private Executor callbackExecutor;
@@ -499,6 +507,34 @@ public Builder baseUrl(HttpUrl baseUrl) {
       return this;
     }
 
+    /**
+     * Set the API base Https URL.
+     *
+     * @see #baseHttpsUrl(HttpUrl)
+     */
+    public Builder baseHttpsUrl(String baseHttpsUrl){
+      checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
+      HttpUrl httpsUrl = HttpUrl.parse(baseHttpsUrl);
+      if (httpsUrl == null) {
+        throw new IllegalArgumentException("Illegal URL: " + baseHttpsUrl);
+      }
+      return baseHttpsUrl(httpsUrl);
+    }
+
+    /**
+     * This api is for https request.
+     *
+     */
+    public Builder baseHttpsUrl(HttpUrl baseHttpsUrl) {
+      checkNotNull(baseHttpsUrl, "baseHttpsUrl == null");
+      List<String> pathSegments = baseHttpsUrl.pathSegments();
+      if (!"".equals(pathSegments.get(pathSegments.size() - 1))) {
+        throw new IllegalArgumentException("baseHttpsUrl must end in /: " + baseHttpsUrl);
+      }
+      this.baseHttpsUrl = baseHttpsUrl;
+      return this;
+    }
+
     /** Add converter factory for serialization and deserialization of objects. */
     public Builder addConverterFactory(Converter.Factory factory) {
       converterFactories.add(checkNotNull(factory, "factory == null"));
@@ -563,7 +599,7 @@ public Retrofit build() {
       // Make a defensive copy of the converters.
       List<Converter.Factory> converterFactories = new ArrayList<>(this.converterFactories);
 
-      return new Retrofit(callFactory, baseUrl, converterFactories, adapterFactories,
+      return new Retrofit(callFactory, baseUrl, baseHttpsUrl, converterFactories, adapterFactories,
           callbackExecutor, validateEagerly);
     }
   }
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 26706453a..e761e01a6 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -33,27 +33,7 @@
 import okhttp3.Request;
 import okhttp3.RequestBody;
 import okhttp3.ResponseBody;
-import retrofit2.http.Body;
-import retrofit2.http.DELETE;
-import retrofit2.http.Field;
-import retrofit2.http.FieldMap;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.HEAD;
-import retrofit2.http.HTTP;
-import retrofit2.http.Header;
-import retrofit2.http.HeaderMap;
-import retrofit2.http.Multipart;
-import retrofit2.http.OPTIONS;
-import retrofit2.http.PATCH;
-import retrofit2.http.POST;
-import retrofit2.http.PUT;
-import retrofit2.http.Part;
-import retrofit2.http.PartMap;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-import retrofit2.http.QueryMap;
-import retrofit2.http.Url;
+import retrofit2.http.*;
 
 /** Adapts an invocation of an interface method into an HTTP call. */
 final class ServiceMethod<T> {
@@ -66,6 +46,7 @@
   final CallAdapter<?> callAdapter;
 
   private final HttpUrl baseUrl;
+  private final HttpUrl baseHttpsUrl;
   private final Converter<ResponseBody, T> responseConverter;
   private final String httpMethod;
   private final String relativeUrl;
@@ -74,12 +55,14 @@
   private final boolean hasBody;
   private final boolean isFormEncoded;
   private final boolean isMultipart;
+  private final boolean isHttps;
   private final ParameterHandler<?>[] parameterHandlers;
 
   ServiceMethod(Builder<T> builder) {
     this.callFactory = builder.retrofit.callFactory();
     this.callAdapter = builder.callAdapter;
     this.baseUrl = builder.retrofit.baseUrl();
+    this.baseHttpsUrl = builder.retrofit.baseHttpsUrl();
     this.responseConverter = builder.responseConverter;
     this.httpMethod = builder.httpMethod;
     this.relativeUrl = builder.relativeUrl;
@@ -88,13 +71,20 @@
     this.hasBody = builder.hasBody;
     this.isFormEncoded = builder.isFormEncoded;
     this.isMultipart = builder.isMultipart;
+    this.isHttps = builder.isHttps;
     this.parameterHandlers = builder.parameterHandlers;
   }
 
-  /** Builds an HTTP request from method arguments. */
+  /** Builds an HTTP ot Https request from method arguments. */
   Request toRequest(Object... args) throws IOException {
-    RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-        contentType, hasBody, isFormEncoded, isMultipart);
+    RequestBuilder requestBuilder;
+    if(!isHttps){
+        requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
+                contentType, hasBody, isFormEncoded, isMultipart);
+    }else {
+        requestBuilder = new RequestBuilder(httpMethod, baseHttpsUrl, relativeUrl, headers,
+              contentType, hasBody, isFormEncoded, isMultipart);
+    }
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -140,6 +130,7 @@ T toResponse(ResponseBody body) throws IOException {
     boolean hasBody;
     boolean isFormEncoded;
     boolean isMultipart;
+    boolean isHttps;
     String relativeUrl;
     Headers headers;
     MediaType contentType;
@@ -272,6 +263,9 @@ private void parseMethodAnnotation(Annotation annotation) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
+      } else if (annotation instanceof TYPE) {
+        int type = ((TYPE) annotation).value();
+        isHttps = type == TYPE.TYPE_HTTPS ? true : false;
       }
     }
 
diff --git a/retrofit/src/main/java/retrofit2/http/TYPE.java b/retrofit/src/main/java/retrofit2/http/TYPE.java
new file mode 100644
index 000000000..9d2aa7818
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/TYPE.java
@@ -0,0 +1,22 @@
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Request type(http or https)
+ */
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface TYPE {
+
+    int TYPE_HTTP = 0;
+    int TYPE_HTTPS = 1;
+
+    int value() default TYPE_HTTP;
+}
