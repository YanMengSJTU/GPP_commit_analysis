diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 2ce5ef8e5..3a0d0ad8e 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -124,8 +124,8 @@
    * </pre>
    */
   @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety.
-  public <T> T create(final Class<T> service) {
-    Utils.validateServiceInterface(service);
+  public <T> T create(final Class<T> service, boolean allowExtendInerface) {
+    Utils.validateServiceInterface(service, allowExtendInerface);
     if (validateEagerly) {
       eagerlyValidateMethods(service);
     }
@@ -146,6 +146,11 @@
           }
         });
   }
+  
+  @SuppressWarnings("unchecked") // Single-interface proxy creation guarded by parameter safety.
+  public <T> T create(final Class<T> service) {
+    return create(service, false);    
+  }
 
   private void eagerlyValidateMethods(Class<?> service) {
     Platform platform = Platform.get();
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 3c2bbf3b8..de924d176 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -54,14 +54,15 @@ static ResponseBody buffer(final ResponseBody body) throws IOException {
     return ResponseBody.create(body.contentType(), body.contentLength(), buffer);
   }
 
-  static <T> void validateServiceInterface(Class<T> service) {
+  static <T> void validateServiceInterface(Class<T> service, boolean allowExtendInerface) {
     if (!service.isInterface()) {
       throw new IllegalArgumentException("API declarations must be interfaces.");
     }
     // Prevent API interfaces from extending other interfaces. This not only avoids a bug in
     // Android (http://b.android.com/58753) but it forces composition of API declarations which is
     // the recommended pattern.
-    if (service.getInterfaces().length > 0) {
+    
+    if (!allowExtendInerface && service.getInterfaces().length > 0) {
       throw new IllegalArgumentException("API interfaces must not extend other interfaces.");
     }
   }
