diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index c0cc780c6..abf5ec5a8 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -158,11 +158,14 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
 #if ($errorHandler != "")
 
+        this.errorHandler = new $errorHandler();
+
+#end
+
         if (this.errorHandler == null) {
-            this.errorHandler = new $errorHandler();
+            this.errorHandler = retrofit.ErrorHandler.DEFAULT;
         }
 
-#end
 
 #if ($authenticator != "")
 
@@ -535,21 +538,20 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
     #end
 
-        #if ($errorHandler != "")
-
         }).onErrorResumeNext(new Func1<Throwable, Observable<com.squareup.okhttp.Response>>() {
             @Override public Observable<com.squareup.okhttp.Response> call(Throwable e) {
+                System.out.println("retrofit: OnSubscribeResponse.onError(): " + e);
+
+                RetrofitError retrofitError = null;
                 if (e instanceof IOException) {
-                    RetrofitError retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) e);
-                    Throwable handledError = errorHandler.handleError(retrofitError);
-                    if (handledError != null) return Observable.empty();
-                    else return Observable.error(handledError);
+                    retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) e);
+                } else {
+                    retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
                 }
-                return Observable.error(e);
+                Throwable handledError = errorHandler.handleError(retrofitError);
+                if (handledError != null) return Observable.empty();
+                else return Observable.error(handledError);
             }
-
-        #end
-
         })
         .cache();
 
@@ -624,8 +626,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
         return retrofitResponseObs
 
-        #if ($errorHandler != "")
-
             .onErrorResumeNext(new Func1<Throwable, Observable<retrofit.client.Response>>() {
                 @Override public Observable<retrofit.client.Response> call(Throwable e) {
                     retrofit.RetrofitError retrofitError = null;
@@ -644,16 +644,12 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 }
             })
 
-        #end
-
             .subscribeOn(Schedulers.io()).toBlocking().single();
 
         #else
 
         return obs
 
-        #if ($errorHandler != "")
-
             .onErrorResumeNext(new Func1<Throwable, Observable<$p.type>>() {
                 @Override public Observable<$p.type> call(Throwable e) {
                     retrofit.RetrofitError retrofitError = null;
@@ -668,8 +664,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 }
             })
 
-        #end
-
             .subscribeOn(Schedulers.io()).toBlocking().single();
 
         #end
@@ -678,8 +672,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
         retrofitResponseObs
 
-        #if ($errorHandler != "")
-
             .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
                 @Override public Observable<$p.typeArgs> call(Throwable e) {
                     retrofit.RetrofitError retrofitError = null;
@@ -694,8 +686,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 }
             })
 
-        #end
-
             .subscribeOn(Schedulers.io()).subscribe(new Action1<$p.typeArgs>() {
             @Override public void call($p.typeArgs object) {
                 ${p.callbackName}.success(object, object);
@@ -715,8 +705,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
             }
         })
 
-        #if ($errorHandler != "")
-
         .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
             @Override public Observable<$p.typeArgs> call(Throwable e) {
                 retrofit.RetrofitError retrofitError = null;
@@ -731,8 +719,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
             }
         })
 
-        #end
-
         .subscribeOn(Schedulers.io()).subscribe(new Action1<$p.typeArgs>() {
             @Override public void call($p.typeArgs object) {
             }
@@ -752,8 +738,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
         return obs
 
-        #if ($errorHandler != "")
-
         .onErrorResumeNext(new Func1<Throwable, Observable<$p.typeArgs>>() {
             @Override public Observable<$p.typeArgs> call(Throwable e) {
                 retrofit.RetrofitError retrofitError = null;
@@ -768,8 +752,6 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
             }
         })
 
-        #end
-
             ;
 
         #end
diff --git a/retrofit2-github/build.gradle b/retrofit2-github/build.gradle
index bf480c18d..d6b95aa5c 100644
--- a/retrofit2-github/build.gradle
+++ b/retrofit2-github/build.gradle
@@ -63,6 +63,7 @@ dependencies {
     testCompile('org.robolectric:robolectric:2.3') {
       exclude group: 'com.android.support'
     }
+    testCompile 'com.squareup.okhttp:mockwebserver:+'
 }
 
 tasks.withType(Test) {
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
new file mode 100644
index 000000000..e37e66d6b
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockErrorHandler.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.ErrorHandler;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+
+public class MockErrorHandler implements ErrorHandler {
+    @Override public Throwable handleError(RetrofitError cause) {
+        Response r = cause.getResponse();
+        if (r != null && r.getStatus() == 401) {
+            return new RuntimeException("401", cause);
+        }
+        return cause;
+    }
+}
+
diff --git a/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java b/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java
new file mode 100644
index 000000000..ab0f53775
--- /dev/null
+++ b/retrofit2-github/src/main/java/com/github/retrofit2/MockService.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (C) 2015 8tory, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
+ * in compliance with the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License
+ * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
+ * or implied. See the License for the specific language governing permissions and limitations under
+ * the License.
+ */
+package com.github.retrofit2;
+
+import retrofit.http.Retrofit.*;
+import retrofit.http.Retrofit;
+
+import rx.Observable;
+import java.io.File;
+
+import retrofit.converter.*;
+import java.util.List;
+import rx.functions.*;
+import retrofit.mime.TypedFile;
+import retrofit.mime.TypedString;
+import com.github.mobile.model.*;
+import retrofit.client.Response;
+import retrofit.Callback;
+import android.app.Activity;
+
+@Retrofit("https://api.github.com")
+@retrofit.http.Retrofit.Headers({ // optional
+    "Accept: application/vnd.github.v3.full+json",
+    "User-Agent: Retrofit2"
+})
+//@RetryHeaders( // optional
+    //value = "Cache-Control: max-age=640000",
+    //exceptions = retrofit.http.RequestException.class
+//)
+@Retrofit.Converter(GsonConverter.class) // optional
+//@Retrofit.Converter(LoganSquareConverter.class) // default
+@LogLevel(retrofit.RestAdapter.LogLevel.FULL) // optional
+//@RequestInterceptor(MockServiceRequestInterceptor.class) // optional
+//@ErrorHandler(MockErrorHandler.class) // optional
+// @Retrofit.OkHttpClient(MockServiceOkHttpClienter.class) // optional
+public abstract class MockService {
+    @GET("{url}")
+    public abstract String get(@Path("url") String url);
+
+    public static MockService create() {
+        return new Retrofit_MockService();
+    }
+
+    public static MockService create(Activity activity) {
+        return builder().context(activity).build();
+    }
+
+    @Retrofit.Builder
+    public abstract static class Builder {
+        public abstract Builder baseUrl(String baseUrl);
+        public abstract Builder converter(retrofit.converter.Converter converter);
+        public abstract Builder requestInterceptor(retrofit.RequestInterceptor requestInterceptor);
+        public abstract Builder errorHandler(retrofit.ErrorHandler errorHandler);
+        public abstract Builder headers(String... headers);
+        public abstract Builder retryHeaders(String... headers);
+        public abstract Builder logLevel(retrofit.RestAdapter.LogLevel logLevel);
+        public abstract Builder context(Object context);
+        //public abstract Builder cache(Cache cache);
+        //public abstract Builder okHttpClient(OkHttpClient client);
+        public abstract MockService build();
+    }
+
+    public static Builder builder() {
+        return new Retrofit_MockService.Builder();
+    }
+}
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index dd32c9b26..dd6e05d18 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -37,6 +37,13 @@
 import retrofit.RetrofitError;
 import java.io.*;
 import java.util.concurrent.CountDownLatch;
+import retrofit.ErrorHandler;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+import java.util.concurrent.atomic.AtomicBoolean;
+import com.squareup.okhttp.mockwebserver.MockResponse;
+import com.squareup.okhttp.mockwebserver.MockWebServer;
+import com.squareup.okhttp.HttpUrl;
 
 public class MainTest {
     @Test
@@ -347,7 +354,31 @@ public void testRequestInterceptorOnMethod() {
     }
     @Test
     public void testErrorHandler() {
+        MockWebServer server = new MockWebServer();
+        try {
+            server.start();
+        } catch (Throwable e) {}
+        final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
+        MockService service = MockService.builder()
+            .errorHandler(new ErrorHandler() {
+                @Override public Throwable handleError(RetrofitError cause) {
+                    System.out.println("handled!!");
+                    hasErrorHandled.set(true);
+                    Response r = cause.getResponse();
+                    if (r != null && r.getStatus() == 401) {
+                        return new RuntimeException("401", cause);
+                    }
+                    return cause;
+                }
+            })
+        .build();
+        try {
+            String s = service.get(server.url("/").toString());
+        } catch (Throwable e) {
+        }
+        assertTrue(hasErrorHandled.get());
     }
+
     @Test
     public void testErrorHandlerOnMethod() {
     }
@@ -357,4 +388,5 @@ public void testLogLevel() {
     @Test
     public void testConverterOnMethod() {
     }
+
 }
