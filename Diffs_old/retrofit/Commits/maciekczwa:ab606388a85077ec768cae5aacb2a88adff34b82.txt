diff --git a/retrofit/src/main/java/retrofit/RequestBuilder.java b/retrofit/src/main/java/retrofit/RequestBuilder.java
index 5fa5127b3..be227f4a6 100644
--- a/retrofit/src/main/java/retrofit/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit/RequestBuilder.java
@@ -21,6 +21,7 @@
 import java.lang.reflect.Array;
 import java.net.URLEncoder;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import retrofit.client.Header;
@@ -93,6 +94,15 @@
       default:
         throw new IllegalArgumentException("Unknown request type: " + methodInfo.requestType);
     }
+    if(methodInfo.finalFields!=null)
+    {
+        Iterator<Map.Entry<String, String>> iterator = methodInfo.finalFields.entrySet().iterator();
+        while(iterator.hasNext())
+        {
+            Map.Entry<String, String> entry = iterator.next();
+            formBody.addField(entry.getKey(), entry.getValue());
+        }
+    }
   }
 
   @Override public void addHeader(String name, String value) {
diff --git a/retrofit/src/main/java/retrofit/RestMethodInfo.java b/retrofit/src/main/java/retrofit/RestMethodInfo.java
index cf73f9491..579fa1601 100644
--- a/retrofit/src/main/java/retrofit/RestMethodInfo.java
+++ b/retrofit/src/main/java/retrofit/RestMethodInfo.java
@@ -21,6 +21,7 @@
 import java.lang.reflect.Type;
 import java.lang.reflect.WildcardType;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
@@ -34,6 +35,8 @@
 import retrofit.http.EncodedQueryMap;
 import retrofit.http.Field;
 import retrofit.http.FieldMap;
+import retrofit.http.FinalField;
+import retrofit.http.FinalFields;
 import retrofit.http.FormUrlEncoded;
 import retrofit.http.Header;
 import retrofit.http.Headers;
@@ -73,7 +76,8 @@
     PART,
     PART_MAP,
     BODY,
-    HEADER
+    HEADER,
+    FINAL_FIELD
   }
 
   enum RequestType {
@@ -101,6 +105,7 @@
   Set<String> requestUrlParamNames;
   String requestQuery;
   List<retrofit.client.Header> headers;
+  Map<String,String> finalFields;
   String contentTypeHeader;
   boolean isStreaming;
 
@@ -188,6 +193,17 @@ private void parseMethodAnnotations() {
               Response.class.getSimpleName(), Streaming.class.getSimpleName());
         }
         isStreaming = true;
+      } else if (annotationType == FinalFields.class) {
+          FinalFields finalField = ((FinalFields) methodAnnotation);
+          if(finalFields == null)
+              finalFields = new HashMap<String, String>();
+          String[] names=finalField.names();
+          String[] values=finalField.values();
+          if(names.length!=values.length)
+          throw methodError(
+                  "Final fields annotation should have exactly same names and values");
+          for(int i=0;i<names.length;i++)
+              finalFields.put(names[i],values[i]);
       }
     }
 
@@ -454,7 +470,7 @@ private void parseParameters() {
     if (requestType == RequestType.SIMPLE && !requestHasBody && gotBody) {
       throw methodError("Non-body HTTP method cannot contain @Body or @TypedOutput.");
     }
-    if (requestType == RequestType.FORM_URL_ENCODED && !gotField) {
+    if (requestType == RequestType.FORM_URL_ENCODED && !gotField && finalFields == null) {
       throw methodError("Form-encoded method must contain at least one @Field.");
     }
     if (requestType == RequestType.MULTIPART && !gotPart) {
diff --git a/retrofit/src/main/java/retrofit/http/FinalFields.java b/retrofit/src/main/java/retrofit/http/FinalFields.java
new file mode 100644
index 000000000..30c284e8c
--- /dev/null
+++ b/retrofit/src/main/java/retrofit/http/FinalFields.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Adds field with constant value.
+ *
+ * Example use:
+ * @FinalFields(names = {"action","apikey"}, values = {"get_data","some_key"})
+ *
+ * @author Maciej Czerniak (maciekczwa@gmail.com)
+ */
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface FinalFields {
+  String[] names();
+  String[] values();
+}
