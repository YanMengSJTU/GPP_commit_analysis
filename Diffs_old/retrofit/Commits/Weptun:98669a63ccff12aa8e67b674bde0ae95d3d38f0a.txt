diff --git a/retrofit/src/main/java/retrofit/RequestInterceptor.java b/retrofit/src/main/java/retrofit/RequestInterceptor.java
index 5fa484b35..e38fa6636 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptor.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptor.java
@@ -2,8 +2,9 @@
 
 /** Intercept every request before it is executed in order to add additional data. */
 public interface RequestInterceptor {
-  /** Called for every request. Add data using methods on the supplied {@link RequestFacade}. */
-  void intercept(RequestFacade request);
+  /** Called for every request. Add data using methods on the supplied {@link RequestFacade}. 
+ * @param methodInfo */
+  void intercept(RequestFacade request, RestMethodInfo methodInfo);
 
   interface RequestFacade {
     /** Add a header to the request. This will not replace any existing headers. */
@@ -33,7 +34,7 @@
 
   /** A {@link RequestInterceptor} which does no modification of requests. */
   RequestInterceptor NONE = new RequestInterceptor() {
-    @Override public void intercept(RequestFacade request) {
+    @Override public void intercept(RequestFacade request,  RestMethodInfo methodInfo) {
       // Do nothing.
     }
   };
diff --git a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java b/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
index d53d8f4ff..f3412cecd 100644
--- a/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
+++ b/retrofit/src/main/java/retrofit/RequestInterceptorTape.java
@@ -12,27 +12,27 @@
   private final List<CommandWithParams> tape = new ArrayList<CommandWithParams>();
 
   @Override public void addHeader(String name, String value) {
-    tape.add(new CommandWithParams(Command.ADD_HEADER, name, value));
+    this.tape.add(new CommandWithParams(Command.ADD_HEADER, name, value));
   }
 
   @Override public void addPathParam(String name, String value) {
-    tape.add(new CommandWithParams(Command.ADD_PATH_PARAM, name, value));
+    this.tape.add(new CommandWithParams(Command.ADD_PATH_PARAM, name, value));
   }
 
   @Override public void addEncodedPathParam(String name, String value) {
-    tape.add(new CommandWithParams(Command.ADD_ENCODED_PATH_PARAM, name, value));
+    this.tape.add(new CommandWithParams(Command.ADD_ENCODED_PATH_PARAM, name, value));
   }
 
   @Override public void addQueryParam(String name, String value) {
-    tape.add(new CommandWithParams(Command.ADD_QUERY_PARAM, name, value));
+    this.tape.add(new CommandWithParams(Command.ADD_QUERY_PARAM, name, value));
   }
 
   @Override public void addEncodedQueryParam(String name, String value) {
-    tape.add(new CommandWithParams(Command.ADD_ENCODED_QUERY_PARAM, name, value));
+    this.tape.add(new CommandWithParams(Command.ADD_ENCODED_QUERY_PARAM, name, value));
   }
 
-  @Override public void intercept(RequestFacade request) {
-    for (CommandWithParams cwp : tape) {
+  @Override public void intercept(RequestFacade request,  RestMethodInfo methodInfo) {
+    for (CommandWithParams cwp : this.tape) {
       cwp.command.intercept(request, cwp.name, cwp.value);
     }
   }
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index a5486249e..d5183d9f2 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -26,6 +26,7 @@
 import java.util.Map;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
+
 import retrofit.client.Client;
 import retrofit.client.Header;
 import retrofit.client.Request;
@@ -173,7 +174,7 @@ private RestAdapter(Endpoint server, Client client, Executor httpExecutor,
 
   /** Change the level of logging. */
   public void setLogLevel(LogLevel loglevel) {
-    if (logLevel == null) {
+    if (this.logLevel == null) {
       throw new NullPointerException("Log level may not be null.");
     }
     this.logLevel = loglevel;
@@ -181,7 +182,7 @@ public void setLogLevel(LogLevel loglevel) {
 
   /** The current logging level. */
   public LogLevel getLogLevel() {
-    return logLevel;
+    return this.logLevel;
   }
 
   /** Create an implementation of the API defined by the specified {@code service} interface. */
@@ -189,15 +190,15 @@ public LogLevel getLogLevel() {
   public <T> T create(Class<T> service) {
     Utils.validateServiceClass(service);
     return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class<?>[] { service },
-        new RestHandler(getMethodInfoCache(service)));
+        new RestHandler(this.getMethodInfoCache(service)));
   }
 
   Map<Method, RestMethodInfo> getMethodInfoCache(Class<?> service) {
-    synchronized (serviceMethodInfoCache) {
-      Map<Method, RestMethodInfo> methodInfoCache = serviceMethodInfoCache.get(service);
+    synchronized (this.serviceMethodInfoCache) {
+      Map<Method, RestMethodInfo> methodInfoCache = this.serviceMethodInfoCache.get(service);
       if (methodInfoCache == null) {
         methodInfoCache = new LinkedHashMap<Method, RestMethodInfo>();
-        serviceMethodInfoCache.put(service, methodInfoCache);
+        this.serviceMethodInfoCache.put(service, methodInfoCache);
       }
       return methodInfoCache;
     }
@@ -230,13 +231,13 @@ static RestMethodInfo getMethodInfo(Map<Method, RestMethodInfo> cache, Method me
       }
 
       // Load or create the details cache for the current method.
-      final RestMethodInfo methodInfo = getMethodInfo(methodDetailsCache, method);
+      final RestMethodInfo methodInfo = getMethodInfo(this.methodDetailsCache, method);
 
       if (methodInfo.isSynchronous) {
         try {
-          return invokeRequest(requestInterceptor, methodInfo, args);
+          return this.invokeRequest(RestAdapter.this.requestInterceptor, methodInfo, args);
         } catch (RetrofitError error) {
-          Throwable newError = errorHandler.handleError(error);
+          Throwable newError = RestAdapter.this.errorHandler.handleError(error);
           if (newError == null) {
             throw new IllegalStateException("Error handler returned null for wrapped exception.",
                 error);
@@ -245,34 +246,34 @@ static RestMethodInfo getMethodInfo(Map<Method, RestMethodInfo> cache, Method me
         }
       }
 
-      if (httpExecutor == null || callbackExecutor == null) {
+      if (RestAdapter.this.httpExecutor == null || RestAdapter.this.callbackExecutor == null) {
         throw new IllegalStateException("Asynchronous invocation requires calling setExecutors.");
       }
 
       if (methodInfo.isObservable) {
-        if (rxSupport == null) {
+        if (RestAdapter.this.rxSupport == null) {
           if (Platform.HAS_RX_JAVA) {
-            rxSupport = new RxSupport(httpExecutor, errorHandler, requestInterceptor);
+            RestAdapter.this.rxSupport = new RxSupport(RestAdapter.this.httpExecutor, RestAdapter.this.errorHandler, RestAdapter.this.requestInterceptor);
           } else {
             throw new IllegalStateException("Observable method found but no RxJava on classpath.");
           }
         }
-        return rxSupport.createRequestObservable(new RxSupport.Invoker() {
+        return RestAdapter.this.rxSupport.createRequestObservable(new RxSupport.Invoker() {
           @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {
-            return (ResponseWrapper) invokeRequest(requestInterceptor, methodInfo, args);
+            return (ResponseWrapper) RestHandler.this.invokeRequest(requestInterceptor, methodInfo, args);
           }
         });
       }
 
       // Apply the interceptor synchronously, recording the interception so we can replay it later.
       // This way we still defer argument serialization to the background thread.
-      final RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
-      requestInterceptor.intercept(interceptorTape);
+      //final RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
+      //requestInterceptor.intercept(interceptorTape);
 
       Callback<?> callback = (Callback<?>) args[args.length - 1];
-      httpExecutor.execute(new CallbackRunnable(callback, callbackExecutor, errorHandler) {
+      RestAdapter.this.httpExecutor.execute(new CallbackRunnable(callback, RestAdapter.this.callbackExecutor, RestAdapter.this.errorHandler) {
         @Override public ResponseWrapper obtainResponse() {
-          return (ResponseWrapper) invokeRequest(interceptorTape, methodInfo, args);
+          return (ResponseWrapper) RestHandler.this.invokeRequest(RestAdapter.this.requestInterceptor, methodInfo, args);
         }
       });
       return null; // Asynchronous methods should have return type of void.
@@ -290,11 +291,11 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
       try {
         methodInfo.init(); // Ensure all relevant method information has been loaded.
 
-        String serverUrl = server.getUrl();
-        RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, converter);
+        String serverUrl = RestAdapter.this.server.getUrl();
+        RequestBuilder requestBuilder = new RequestBuilder(serverUrl, methodInfo, RestAdapter.this.converter);
         requestBuilder.setArguments(args);
 
-        requestInterceptor.intercept(requestBuilder);
+        requestInterceptor.intercept(requestBuilder, methodInfo);
 
         Request request = requestBuilder.build();
         url = request.getUrl();
@@ -304,18 +305,18 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
           Thread.currentThread().setName(THREAD_PREFIX + url.substring(serverUrl.length()));
         }
 
-        if (logLevel.log()) {
+        if (RestAdapter.this.logLevel.log()) {
           // Log the request data.
-          request = logAndReplaceRequest("HTTP", request, args);
+          request = RestAdapter.this.logAndReplaceRequest("HTTP", request, args);
         }
 
         long start = System.nanoTime();
-        Response response = client.execute(request);
+        Response response = RestAdapter.this.client.execute(request);
         long elapsedTime = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start);
 
-        if (logLevel.log()) {
+        if (RestAdapter.this.logLevel.log()) {
           // Log the response data.
-          response = logAndReplaceResponse(url, response, elapsedTime);
+          response = RestAdapter.this.logAndReplaceResponse(url, response, elapsedTime);
         }
 
         Type type = methodInfo.responseObjectType;
@@ -345,8 +346,8 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
 
           ExceptionCatchingTypedInput wrapped = new ExceptionCatchingTypedInput(body);
           try {
-            Object convert = converter.fromBody(wrapped, type);
-            logResponseBody(body, convert);
+            Object convert = RestAdapter.this.converter.fromBody(wrapped, type);
+            RestAdapter.this.logResponseBody(body, convert);
             if (methodInfo.isSynchronous) {
               return convert;
             }
@@ -361,22 +362,22 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
             // The response body was partially read by the converter. Replace it with null.
             response = Utils.replaceResponseBody(response, null);
 
-            throw RetrofitError.conversionError(url, response, converter, type, e);
+            throw RetrofitError.conversionError(url, response, RestAdapter.this.converter, type, e);
           }
         }
 
         response = Utils.readBodyToBytesIfNecessary(response);
-        throw RetrofitError.httpError(url, response, converter, type);
+        throw RetrofitError.httpError(url, response, RestAdapter.this.converter, type);
       } catch (RetrofitError e) {
         throw e; // Pass through our own errors.
       } catch (IOException e) {
-        if (logLevel.log()) {
-          logException(e, url);
+        if (RestAdapter.this.logLevel.log()) {
+          RestAdapter.this.logException(e, url);
         }
         throw RetrofitError.networkError(url, e);
       } catch (Throwable t) {
-        if (logLevel.log()) {
-          logException(t, url);
+        if (RestAdapter.this.logLevel.log()) {
+          RestAdapter.this.logException(t, url);
         }
         throw RetrofitError.unexpectedError(url, t);
       } finally {
@@ -389,11 +390,11 @@ private Object invokeRequest(RequestInterceptor requestInterceptor, RestMethodIn
 
   /** Log request headers and body. Consumes request body and returns identical replacement. */
   Request logAndReplaceRequest(String name, Request request, Object[] args) throws IOException {
-    log.log(String.format("---> %s %s %s", name, request.getMethod(), request.getUrl()));
+    this.log.log(String.format("---> %s %s %s", name, request.getMethod(), request.getUrl()));
 
-    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
+    if (this.logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
       for (Header header : request.getHeaders()) {
-        log.log(header.toString());
+        this.log.log(header.toString());
       }
 
       String bodySize = "no";
@@ -401,18 +402,18 @@ Request logAndReplaceRequest(String name, Request request, Object[] args) throws
       if (body != null) {
         String bodyMime = body.mimeType();
         if (bodyMime != null) {
-          log.log("Content-Type: " + bodyMime);
+          this.log.log("Content-Type: " + bodyMime);
         }
 
         long bodyLength = body.length();
         bodySize = bodyLength + "-byte";
         if (bodyLength != -1) {
-          log.log("Content-Length: " + bodyLength);
+          this.log.log("Content-Length: " + bodyLength);
         }
 
-        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
+        if (this.logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
           if (!request.getHeaders().isEmpty()) {
-            log.log("");
+            this.log.log("");
           }
           if (!(body instanceof TypedByteArray)) {
             // Read the entire response body to we can log it and replace the original response
@@ -422,18 +423,18 @@ Request logAndReplaceRequest(String name, Request request, Object[] args) throws
 
           byte[] bodyBytes = ((TypedByteArray) body).getBytes();
           String bodyCharset = MimeUtil.parseCharset(body.mimeType(), "UTF-8");
-          log.log(new String(bodyBytes, bodyCharset));
-        } else if (logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {
+          this.log.log(new String(bodyBytes, bodyCharset));
+        } else if (this.logLevel.ordinal() >= LogLevel.HEADERS_AND_ARGS.ordinal()) {
           if (!request.getHeaders().isEmpty()) {
-            log.log("---> REQUEST:");
+            this.log.log("---> REQUEST:");
           }
           for (int i = 0; i < args.length; i++) {
-            log.log("#" + i + ": " + args[i]);
+            this.log.log("#" + i + ": " + args[i]);
           }
         }
       }
 
-      log.log(String.format("---> END %s (%s body)", name, bodySize));
+      this.log.log(String.format("---> END %s (%s body)", name, bodySize));
     }
 
     return request;
@@ -442,11 +443,11 @@ Request logAndReplaceRequest(String name, Request request, Object[] args) throws
   /** Log response headers and body. Consumes response body and returns identical replacement. */
   private Response logAndReplaceResponse(String url, Response response, long elapsedTime)
       throws IOException {
-    log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));
+    this.log.log(String.format("<--- HTTP %s %s (%sms)", response.getStatus(), url, elapsedTime));
 
-    if (logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
+    if (this.logLevel.ordinal() >= LogLevel.HEADERS.ordinal()) {
       for (Header header : response.getHeaders()) {
-        log.log(header.toString());
+        this.log.log(header.toString());
       }
 
       long bodySize = 0;
@@ -454,9 +455,9 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
       if (body != null) {
         bodySize = body.length();
 
-        if (logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
+        if (this.logLevel.ordinal() >= LogLevel.FULL.ordinal()) {
           if (!response.getHeaders().isEmpty()) {
-            log.log("");
+            this.log.log("");
           }
 
           if (!(body instanceof TypedByteArray)) {
@@ -469,30 +470,30 @@ private Response logAndReplaceResponse(String url, Response response, long elaps
           bodySize = bodyBytes.length;
           String bodyMime = body.mimeType();
           String bodyCharset = MimeUtil.parseCharset(bodyMime, "UTF-8");
-          log.log(new String(bodyBytes, bodyCharset));
+          this.log.log(new String(bodyBytes, bodyCharset));
         }
       }
 
-      log.log(String.format("<--- END HTTP (%s-byte body)", bodySize));
+      this.log.log(String.format("<--- END HTTP (%s-byte body)", bodySize));
     }
 
     return response;
   }
 
   private void logResponseBody(TypedInput body, Object convert) {
-    if (logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {
-      log.log("<--- BODY:");
-      log.log(convert.toString());
+    if (this.logLevel.ordinal() == LogLevel.HEADERS_AND_ARGS.ordinal()) {
+      this.log.log("<--- BODY:");
+      this.log.log(convert.toString());
     }
   }
 
   /** Log an exception that occurred during the processing of a request or response. */
   void logException(Throwable t, String url) {
-    log.log(String.format("---- ERROR %s", url != null ? url : ""));
+    this.log.log(String.format("---- ERROR %s", url != null ? url : ""));
     StringWriter sw = new StringWriter();
     t.printStackTrace(new PrintWriter(sw));
-    log.log(sw.toString());
-    log.log("---- END ERROR");
+    this.log.log(sw.toString());
+    this.log.log("---- END ERROR");
   }
 
   /**
@@ -609,35 +610,35 @@ public Builder setLogLevel(LogLevel logLevel) {
 
     /** Create the {@link RestAdapter} instances. */
     public RestAdapter build() {
-      if (endpoint == null) {
+      if (this.endpoint == null) {
         throw new IllegalArgumentException("Endpoint may not be null.");
       }
-      ensureSaneDefaults();
-      return new RestAdapter(endpoint, client, httpExecutor, callbackExecutor,
-          requestInterceptor, converter, errorHandler, log, logLevel);
+      this.ensureSaneDefaults();
+      return new RestAdapter(this.endpoint, this.client, this.httpExecutor, this.callbackExecutor,
+          this.requestInterceptor, this.converter, this.errorHandler, this.log, this.logLevel);
     }
 
     private void ensureSaneDefaults() {
-      if (converter == null) {
-        converter = Platform.get().defaultConverter();
+      if (this.converter == null) {
+        this.converter = Platform.get().defaultConverter();
       }
-      if (client == null) {
-        client = Platform.get().defaultClient();
+      if (this.client == null) {
+        this.client = Platform.get().defaultClient();
       }
-      if (httpExecutor == null) {
-        httpExecutor = Platform.get().defaultHttpExecutor();
+      if (this.httpExecutor == null) {
+        this.httpExecutor = Platform.get().defaultHttpExecutor();
       }
-      if (callbackExecutor == null) {
-        callbackExecutor = Platform.get().defaultCallbackExecutor();
+      if (this.callbackExecutor == null) {
+        this.callbackExecutor = Platform.get().defaultCallbackExecutor();
       }
-      if (errorHandler == null) {
-        errorHandler = ErrorHandler.DEFAULT;
+      if (this.errorHandler == null) {
+        this.errorHandler = ErrorHandler.DEFAULT;
       }
-      if (log == null) {
-        log = Platform.get().defaultLog();
+      if (this.log == null) {
+        this.log = Platform.get().defaultLog();
       }
-      if (requestInterceptor == null) {
-        requestInterceptor = RequestInterceptor.NONE;
+      if (this.requestInterceptor == null) {
+        this.requestInterceptor = RequestInterceptor.NONE;
       }
     }
   }
diff --git a/retrofit/src/main/java/retrofit/RxSupport.java b/retrofit/src/main/java/retrofit/RxSupport.java
index 9f1c61415..8a166ceb3 100644
--- a/retrofit/src/main/java/retrofit/RxSupport.java
+++ b/retrofit/src/main/java/retrofit/RxSupport.java
@@ -2,6 +2,7 @@
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.FutureTask;
+
 import rx.Observable;
 import rx.Subscriber;
 import rx.subscriptions.Subscriptions;
@@ -32,14 +33,14 @@ Observable createRequestObservable(final Invoker invoker) {
     return Observable.create(new Observable.OnSubscribe<Object>() {
       @Override public void call(Subscriber<? super Object> subscriber) {
         RequestInterceptorTape interceptorTape = new RequestInterceptorTape();
-        requestInterceptor.intercept(interceptorTape);
+        RxSupport.this.requestInterceptor.intercept(interceptorTape, null);
 
-        Runnable runnable = getRunnable(subscriber, invoker, interceptorTape);
+        Runnable runnable = RxSupport.this.getRunnable(subscriber, invoker, interceptorTape);
         FutureTask<Void> task = new FutureTask<Void>(runnable, null);
 
         // Subscribe to the future task of the network call allowing unsubscription.
         subscriber.add(Subscriptions.from(task));
-        executor.execute(task);
+        RxSupport.this.executor.execute(task);
       }
     });
   }
@@ -56,7 +57,7 @@ private Runnable getRunnable(final Subscriber<? super Object> subscriber, final
           subscriber.onNext(wrapper.responseBody);
           subscriber.onCompleted();
         } catch (RetrofitError e) {
-          subscriber.onError(errorHandler.handleError(e));
+          subscriber.onError(RxSupport.this.errorHandler.handleError(e));
         }
       }
     };
diff --git a/retrofit/src/test/java/retrofit/RequestBuilderTest.java b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
index 1b1a22217..c7ff47aa4 100644
--- a/retrofit/src/test/java/retrofit/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit/RequestBuilderTest.java
@@ -1,7 +1,12 @@
 // Copyright 2013 Square, Inc.
 package retrofit;
 
-import com.google.gson.Gson;
+import static com.google.common.base.Charsets.UTF_8;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 import java.io.UnsupportedEncodingException;
@@ -14,7 +19,9 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
 import org.junit.Test;
+
 import retrofit.client.Header;
 import retrofit.client.Request;
 import retrofit.client.Response;
@@ -46,11 +53,7 @@
 import retrofit.mime.TypedString;
 import rx.Observable;
 
-import static com.google.common.base.Charsets.UTF_8;
-import static java.lang.annotation.ElementType.METHOD;
-import static java.lang.annotation.RetentionPolicy.RUNTIME;
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import com.google.gson.Gson;
 
 @SuppressWarnings("UnusedParameters") // Parameters inspected reflectively.
 public class RequestBuilderTest {
@@ -71,7 +74,7 @@ Response method() {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -93,7 +96,7 @@ Response method() {
       }
     }
 
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("CUSTOM1");
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo");
     assertThat(request.getBody()).isNull();
@@ -113,7 +116,7 @@ Response method(@Body TypedInput body) {
       }
     }
 
-    Request request = buildRequest(Example.class, new TypedString("hi"));
+    Request request = this.buildRequest(Example.class, new TypedString("hi"));
     assertThat(request.getMethod()).isEqualTo("CUSTOM2");
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo");
     assertTypedBytes(request.getBody(), "hi");
@@ -129,7 +132,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
@@ -146,7 +149,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: Only one encoding annotation is allowed.");
@@ -162,7 +165,7 @@ Response method(@Path("hey!") String thing) {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -179,7 +182,7 @@ Response method(@Path("bar") String thing) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -196,7 +199,7 @@ Response method(@Body @Query("nope") Object o) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -215,7 +218,7 @@ Response method() {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -232,7 +235,7 @@ Response method() {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: URL path \"foo/bar\" must start with '/'.");
@@ -249,7 +252,7 @@ String method() {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -266,7 +269,7 @@ void method(Callback<String> callback) {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -282,7 +285,7 @@ void method(Callback<String> callback) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -298,7 +301,7 @@ void method(@Query("id") String id) {
     }
 
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -313,7 +316,7 @@ void method(Callback cb) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -329,7 +332,7 @@ Response method(Callback<Response> callback) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -344,7 +347,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -360,7 +363,7 @@ Response method(@Part("a") int a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -376,7 +379,7 @@ Response method(@PartMap Map<String, String> params) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -393,7 +396,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -410,7 +413,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: Multipart method must contain at least one @Part.");
@@ -425,7 +428,7 @@ Response method(@Field("a") int a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -441,7 +444,7 @@ Response method(@FieldMap Map<String, String> a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -458,7 +461,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -475,7 +478,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: Form-encoded method must contain at least one @Field.");
@@ -491,7 +494,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: @Headers annotation is empty.");
@@ -507,7 +510,7 @@ Response method() {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -523,7 +526,7 @@ Response method(@Path("a") int a, @Path("b") int b, @Body int c) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: URL \"/{a}\" does not contain \"{b}\". (parameter #2)");
@@ -538,7 +541,7 @@ Response method(String a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: No Retrofit annotation found. (parameter #1)");
@@ -553,7 +556,7 @@ Response method(@Body Object o) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -569,7 +572,7 @@ Response method(@QueryMap List<String> a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: @QueryMap parameter type must be Map. (parameter #1)");
@@ -589,7 +592,7 @@ Response method(@QueryMap Map<String, String> a) {
     queryParams.put(null, "kat");
 
     try {
-      buildRequest(Example.class, queryParams);
+      this.buildRequest(Example.class, queryParams);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Parameter #1 query map contained null key.");
@@ -604,7 +607,7 @@ Response method(@Body int o1, @Body int o2) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: Multiple @Body method annotations found.");
@@ -620,7 +623,7 @@ Response method(@Part("one") int o1, @Body int o2) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
@@ -635,7 +638,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -649,7 +652,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("DELETE");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -663,7 +666,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("HEAD");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -677,7 +680,7 @@ Response method(@Body TypedInput body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new TypedString("hi"));
+    Request request = this.buildRequest(Example.class, new TypedString("hi"));
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -691,7 +694,7 @@ Response method(@Body TypedInput body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new TypedString("hi"));
+    Request request = this.buildRequest(Example.class, new TypedString("hi"));
     assertThat(request.getMethod()).isEqualTo("PUT");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -705,7 +708,7 @@ Response method(@Body TypedInput body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new TypedString("hi"));
+    Request request = this.buildRequest(Example.class, new TypedString("hi"));
     assertThat(request.getMethod()).isEqualTo("PATCH");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -719,7 +722,7 @@ Response method(@Path("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "po ng");
+    Request request = this.buildRequest(Example.class, "po ng");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");
@@ -733,7 +736,7 @@ Response method(@Path(value = "ping", encode = false) String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "po%20ng");
+    Request request = this.buildRequest(Example.class, "po%20ng");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");
@@ -747,12 +750,12 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addPathParam("ping", "po ng");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");
@@ -766,12 +769,12 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addEncodedPathParam("ping", "po%20ng");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/po%20ng/");
@@ -785,12 +788,12 @@ Response method(@Path("ping") String ping) {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addPathParam("kit", "kat");
       }
     };
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");
@@ -804,12 +807,12 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addQueryParam("ping", "po ng");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=po+ng");
@@ -823,12 +826,12 @@ Response method(@Path("kit") String kit) {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addQueryParam("ping", "pong");
       }
     };
-    Request request = buildRequest(Example.class, "kat");
+    Request request = this.buildRequest(Example.class, "kat");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/kat/?ping=pong");
@@ -842,13 +845,13 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addPathParam("ping", "pong");
         request.addQueryParam("butter", "finger");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?butter=finger");
@@ -862,13 +865,13 @@ Response method(@Path("ping") String ping) {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addPathParam("kit", "kat");
         request.addQueryParam("butter", "finger");
       }
     };
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/?butter=finger");
@@ -883,7 +886,7 @@ Response method(@Path("ping") String ping) {
       }
     }
     try {
-      buildRequest(Example.class, new Object[] { null });
+      this.buildRequest(Example.class, new Object[] { null });
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e.getMessage()).isEqualTo("Path parameter \"ping\" value must not be null.");
@@ -897,7 +900,7 @@ Response method(@Query("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=pong");
@@ -911,7 +914,7 @@ Response method(@Query(value = "ping", encodeValue = false) String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "p+o+n+g");
+    Request request = this.buildRequest(Example.class, "p+o+n+g");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?ping=p+o+n+g");
@@ -925,7 +928,7 @@ Response method(@Query(value = "pi ng", encodeName = true) String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?pi+ng=pong");
@@ -939,7 +942,7 @@ Response method(@Query(value = "pi ng", encodeName = true, encodeValue = false)
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "po+ng");
+    Request request = this.buildRequest(Example.class, "po+ng");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?pi+ng=po+ng");
@@ -953,7 +956,7 @@ Response method(@Query("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new Object[] { null });
+    Request request = this.buildRequest(Example.class, new Object[] { null });
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
   }
 
@@ -965,7 +968,7 @@ Response method(@Query("foo") String foo, @Query("ping") String ping,
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "bar", null, "kat");
+    Request request = this.buildRequest(Example.class, "bar", null, "kat");
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?foo=bar&kit=kat");
   }
 
@@ -976,7 +979,7 @@ Response method(@Query("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom&ping=pong");
@@ -990,7 +993,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?hi=mom");
@@ -1006,7 +1009,7 @@ Response method(@Path("ping") String ping, @Query("kit") String kit,
       }
     }
 
-    Request request = buildRequest(Example.class, "pong", "kat", "raff");
+    Request request = this.buildRequest(Example.class, "pong", "kat", "raff");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/?kit=kat&riff=raff");
@@ -1021,7 +1024,7 @@ Response method(@Path("ping") String ping, @Query("kit") String kit) {
       }
     }
 
-    Request request = buildRequest(Example.class, "pong?", "kat?");
+    Request request = this.buildRequest(Example.class, "pong?", "kat?");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%3F/?kit=kat%3F");
@@ -1036,7 +1039,7 @@ Response method(@Path("ping") String ping, @Query("kit") String kit) {
       }
     }
 
-    Request request = buildRequest(Example.class, "pong&", "kat&");
+    Request request = this.buildRequest(Example.class, "pong&", "kat&");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%26/?kit=kat%26");
@@ -1051,7 +1054,7 @@ Response method(@Path("ping") String ping, @Query("kit") String kit) {
       }
     }
 
-    Request request = buildRequest(Example.class, "pong#", "kat#");
+    Request request = this.buildRequest(Example.class, "pong#", "kat#");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong%23/?kit=kat%23");
@@ -1067,7 +1070,7 @@ Response method(@Query("key") List<Object> keys) {
     }
 
     List<Object> values = Arrays.<Object>asList(1, 2, null, "three");
-    Request request = buildRequest(Example.class, values);
+    Request request = this.buildRequest(Example.class, values);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
@@ -1083,7 +1086,7 @@ Response method(@Query("key") Object[] keys) {
     }
 
     Object[] values = { 1, 2, null, "three" };
-    Request request = buildRequest(Example.class, new Object[] { values });
+    Request request = this.buildRequest(Example.class, new Object[] { values });
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=three");
@@ -1099,7 +1102,7 @@ Response method(@Query("key") int[] keys) {
     }
 
     int[] values = { 1, 2, 3 };
-    Request request = buildRequest(Example.class, new Object[] { values });
+    Request request = this.buildRequest(Example.class, new Object[] { values });
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?key=1&key=2&key=3");
@@ -1119,7 +1122,7 @@ Response method(@QueryMap Map<String, Object> query) {
     params.put("foo", null);
     params.put("ping", "pong");
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?kit=kat&ping=pong");
@@ -1139,7 +1142,7 @@ Response method(@QueryMap(encodeValues = false) Map<String, Object> query) {
     params.put("foo", null);
     params.put("ping", "p%20g");
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?kit=k%20t&ping=p%20g");
@@ -1159,7 +1162,7 @@ Response method(@QueryMap(encodeNames = true) Map<String, Object> query) {
     params.put("fo o", null);
     params.put("pi ng", "p g");
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?k+it=k+t&pi+ng=p+g");
@@ -1180,7 +1183,7 @@ Response method(
     params.put("fo o", null);
     params.put("pi ng", "p%20g");
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/?k+it=k%20t&pi+ng=p%20g");
@@ -1194,7 +1197,7 @@ Response method(@Path("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "pong");
+    Request request = this.buildRequest(Example.class, "pong");
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/");
@@ -1208,7 +1211,7 @@ Response method(@Body Object body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, Arrays.asList("quick", "brown", "fox"));
+    Request request = this.buildRequest(Example.class, Arrays.asList("quick", "brown", "fox"));
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1222,7 +1225,7 @@ Response method(@Body TypedInput body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new TypedString("hi"));
+    Request request = this.buildRequest(Example.class, new TypedString("hi"));
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1237,7 +1240,7 @@ Response method(@Body TypedInput body) {
       }
     }
     try {
-      buildRequest(Example.class, new Object[] { null });
+      this.buildRequest(Example.class, new Object[] { null });
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e.getMessage()).isEqualTo("Body parameter value must not be null.");
@@ -1252,7 +1255,7 @@ Response method(@Path("ping") String ping, @Body Object body, @Path("kit") Strin
       }
     }
     Request request =
-        buildRequest(Example.class, "pong", Arrays.asList("quick", "brown", "fox"), "kat");
+        this.buildRequest(Example.class, "pong", Arrays.asList("quick", "brown", "fox"), "kat");
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/pong/kat/");
@@ -1268,7 +1271,7 @@ Response method(@Part("ping") String ping, @Part("kit") TypedInput kit) {
       }
     }
 
-    Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
+    Request request = this.buildRequest(Example.class, "pong", new TypedString("kat"));
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1296,7 +1299,7 @@ Response method(@Part(value = "ping", encoding = "8-bit") String ping,
       }
     }
 
-    Request request = buildRequest(Example.class, "pong", new TypedString("kat"));
+    Request request = this.buildRequest(Example.class, "pong", new TypedString("kat"));
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1331,7 +1334,7 @@ Response method(@PartMap Map<String, Object> parts) {
     params.put("ping", "pong");
     params.put("kit", new TypedString("kat"));
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1362,7 +1365,7 @@ Response method(@PartMap(encoding = "8-bit") Map<String, Object> parts) {
     params.put("ping", "pong");
     params.put("kit", new TypedString("kat"));
 
-    Request request = buildRequest(Example.class, params);
+    Request request = this.buildRequest(Example.class, params);
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1398,7 +1401,7 @@ Response method(@PartMap Map<String, Object> parts) {
     params.put(null, "kat");
 
     try {
-      buildRequest(Example.class, params);
+      this.buildRequest(Example.class, params);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Parameter #1 part map contained null key.");
@@ -1413,7 +1416,7 @@ Response method(@Part("ping") String ping, @Part("fizz") String fizz) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "pong", null);
+    Request request = this.buildRequest(Example.class, "pong", null);
     assertThat(request.getMethod()).isEqualTo("POST");
     assertThat(request.getHeaders()).isEmpty();
     assertThat(request.getUrl()).isEqualTo("http://example.com/foo/bar/");
@@ -1437,7 +1440,7 @@ Response method(@Part("ping") TypedInput ping) {
       }
     }
     try {
-      buildRequest(Example.class, new Object[] { null });
+      this.buildRequest(Example.class, new Object[] { null });
       fail();
     } catch (IllegalStateException e) {
       assertThat(e.getMessage()).isEqualTo("Multipart requests must contain at least one part.");
@@ -1452,7 +1455,7 @@ Response method(@Field("foo") String foo, @Field("ping") String ping) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "bar", "pong");
+    Request request = this.buildRequest(Example.class, "bar", "pong");
     assertTypedBytes(request.getBody(), "foo=bar&ping=pong");
   }
 
@@ -1464,7 +1467,7 @@ Response method(@Field(value = "na+me", encodeName = false) String foo) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "ba r");
+    Request request = this.buildRequest(Example.class, "ba r");
     assertTypedBytes(request.getBody(), "na+me=ba+r");
   }
 
@@ -1476,7 +1479,7 @@ Response method(@Field(value = "na me", encodeValue = false) String foo) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "ba+r");
+    Request request = this.buildRequest(Example.class, "ba+r");
     assertTypedBytes(request.getBody(), "na+me=ba+r");
   }
 
@@ -1489,7 +1492,7 @@ Response method(@Field("foo") String foo, @Field("ping") String ping,
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "bar", null, "kat");
+    Request request = this.buildRequest(Example.class, "bar", null, "kat");
     assertTypedBytes(request.getBody(), "foo=bar&kit=kat");
   }
 
@@ -1503,7 +1506,7 @@ Response method(@Field("foo") List<Object> fields, @Field("kit") String kit) {
     }
 
     List<Object> values = Arrays.<Object>asList("foo", "bar", null, 3);
-    Request request = buildRequest(Example.class, values, "kat");
+    Request request = this.buildRequest(Example.class, values, "kat");
     assertTypedBytes(request.getBody(), "foo=foo&foo=bar&foo=3&kit=kat");
   }
 
@@ -1517,7 +1520,7 @@ Response method(@Field("foo") Object[] fields, @Field("kit") String kit) {
     }
 
     Object[] values = { 1, 2, null, "three" };
-    Request request = buildRequest(Example.class, values, "kat");
+    Request request = this.buildRequest(Example.class, values, "kat");
     assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=three&kit=kat");
   }
 
@@ -1531,7 +1534,7 @@ Response method(@Field("foo") int[] fields, @Field("kit") String kit) {
     }
 
     int[] values = { 1, 2, 3 };
-    Request request = buildRequest(Example.class, values, "kat");
+    Request request = this.buildRequest(Example.class, values, "kat");
     assertTypedBytes(request.getBody(), "foo=1&foo=2&foo=3&kit=kat");
   }
 
@@ -1548,7 +1551,7 @@ Response method(@FieldMap(encodeNames = false) Map<String, Object> fieldMap) {
     fieldMap.put("k+it", "k at");
     fieldMap.put("pin+g", "po ng");
 
-    Request request = buildRequest(Example.class, fieldMap);
+    Request request = this.buildRequest(Example.class, fieldMap);
     assertTypedBytes(request.getBody(), "k+it=k+at&pin+g=po+ng");
   }
 
@@ -1565,7 +1568,7 @@ Response method(@FieldMap(encodeValues = false) Map<String, Object> fieldMap) {
     fieldMap.put("k it", "k+at");
     fieldMap.put("pin g", "po+ng");
 
-    Request request = buildRequest(Example.class, fieldMap);
+    Request request = this.buildRequest(Example.class, fieldMap);
     assertTypedBytes(request.getBody(), "k+it=k+at&pin+g=po+ng");
   }
 
@@ -1583,7 +1586,7 @@ Response method(@FieldMap Map<String, Object> fieldMap) {
     fieldMap.put("foo", null);
     fieldMap.put("ping", "pong");
 
-    Request request = buildRequest(Example.class, fieldMap);
+    Request request = this.buildRequest(Example.class, fieldMap);
     assertTypedBytes(request.getBody(), "kit=kat&ping=pong");
   }
 
@@ -1602,7 +1605,7 @@ Response method(@FieldMap Map<String, Object> a) {
     fieldMap.put(null, "pong");
 
     try {
-      buildRequest(Example.class, fieldMap);
+      this.buildRequest(Example.class, fieldMap);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Parameter #1 field map contained null key.");
@@ -1618,7 +1621,7 @@ Response method(@FieldMap List<String> a) {
       }
     }
     try {
-      buildRequest(Example.class);
+      this.buildRequest(Example.class);
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage("Example.method: @FieldMap parameter type must be Map. (parameter #1)");
@@ -1636,7 +1639,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
@@ -1651,13 +1654,13 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addHeader("ping", "pong");
         request.addHeader("kit", "kat");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
@@ -1673,12 +1676,12 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addHeader("kit", "kat");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
@@ -1694,12 +1697,12 @@ Response method(@retrofit.http.Header("fizz") String fizz) {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addHeader("kit", "kat");
       }
     };
-    Request request = buildRequest(Example.class, "buzz");
+    Request request = this.buildRequest(Example.class, "buzz");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()).containsExactly(new Header("ping", "pong"),
         new Header("kit", "kat"), new Header("fizz", "buzz"));
@@ -1714,7 +1717,7 @@ Response method(@retrofit.http.Header("kit") BigInteger kit) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new BigInteger("1234"));
+    Request request = this.buildRequest(Example.class, new BigInteger("1234"));
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("kit", "1234"));
@@ -1730,7 +1733,7 @@ Response method(@retrofit.http.Header("kit") String kit) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "kat");
+    Request request = this.buildRequest(Example.class, "kat");
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("ping", "pong"), new Header("kit", "kat"));
@@ -1745,7 +1748,7 @@ Response method(@retrofit.http.Header("foo") List<String> kit) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
+    Request request = this.buildRequest(Example.class, Arrays.asList("bar", null, "baz"));
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
@@ -1760,7 +1763,7 @@ Response method(@retrofit.http.Header("foo") String[] kit) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
+    Request request = this.buildRequest(Example.class, (Object) new String[] { "bar", null, "baz" });
     assertThat(request.getMethod()).isEqualTo("GET");
     assertThat(request.getHeaders()) //
         .containsExactly(new Header("foo", "bar"), new Header("foo", "baz"));
@@ -1776,7 +1779,7 @@ Response method(@Body TypedInput body) {
         return null;
       }
     }
-    Request request = buildRequest(Example.class, new TypedString("Plain"));
+    Request request = this.buildRequest(Example.class, new TypedString("Plain"));
     assertThat(request.getBody().mimeType()).isEqualTo("text/not-plain");
   }
 
@@ -1788,7 +1791,7 @@ Response method() {
         return null;
       }
     }
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getHeaders()).contains(new Header("Content-Type", "text/not-plain"));
   }
 
@@ -1799,12 +1802,12 @@ Response method() {
         return null;
       }
     }
-    interceptor = new RequestInterceptor() {
-      @Override public void intercept(RequestFacade request) {
+    this.interceptor = new RequestInterceptor() {
+      @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
         request.addHeader("Content-Type", "text/not-plain");
       }
     };
-    Request request = buildRequest(Example.class);
+    Request request = this.buildRequest(Example.class);
     assertThat(request.getHeaders()).contains(new Header("Content-Type", "text/not-plain"));
   }
 
@@ -1816,7 +1819,7 @@ Response method(@retrofit.http.Header("Content-Type") String contentType,
         return null;
       }
     }
-    Request request = buildRequest(Example.class, "text/not-plain", new TypedString("Plain"));
+    Request request = this.buildRequest(Example.class, "text/not-plain", new TypedString("Plain"));
     assertThat(request.getBody().mimeType()).isEqualTo("text/not-plain");
   }
 
@@ -1839,8 +1842,8 @@ private Request buildRequest(Class<?> cls, Object... args) {
     methodInfo.init();
 
     RequestBuilder builder = new RequestBuilder("http://example.com/", methodInfo, GSON);
-    if (interceptor != null) {
-      interceptor.intercept(builder);
+    if (this.interceptor != null) {
+      this.interceptor.intercept(builder, methodInfo);
     }
     builder.setArguments(args);
 
diff --git a/retrofit/src/test/java/retrofit/RxSupportTest.java b/retrofit/src/test/java/retrofit/RxSupportTest.java
index 287d7e3fe..6b97d4bb5 100644
--- a/retrofit/src/test/java/retrofit/RxSupportTest.java
+++ b/retrofit/src/test/java/retrofit/RxSupportTest.java
@@ -1,15 +1,27 @@
 package retrofit;
 
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
 import java.util.ArrayDeque;
 import java.util.Collections;
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
+
+import retrofit.RequestInterceptor.RequestFacade;
+import retrofit.RxSupport.Invoker;
 import retrofit.client.Header;
 import retrofit.client.Response;
 import retrofit.mime.TypedInput;
@@ -18,27 +30,17 @@
 import rx.schedulers.Schedulers;
 import rx.schedulers.TestScheduler;
 
-import static org.mockito.Matchers.any;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.spy;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static retrofit.RequestInterceptor.RequestFacade;
-import static retrofit.RxSupport.Invoker;
-
 public class RxSupportTest {
 
   private Object response;
   private ResponseWrapper responseWrapper;
   private Invoker invoker = spy(new Invoker() {
     @Override public ResponseWrapper invoke(RequestInterceptor requestInterceptor) {
-      return responseWrapper;
+      return RxSupportTest.this.responseWrapper;
     }
   });
   private RequestInterceptor requestInterceptor = spy(new RequestInterceptor() {
-    @Override public void intercept(RequestFacade request) {
+    @Override public void intercept(RequestFacade request, RestMethodInfo methodInfo) {
     }
   });
 
@@ -49,113 +51,113 @@
 
   @Before public void setUp() {
     MockitoAnnotations.initMocks(this);
-    response = new Object();
-    responseWrapper = new ResponseWrapper(
+    this.response = new Object();
+    this.responseWrapper = new ResponseWrapper(
             new Response(
                     "http://example.com", 200, "Success",
                     Collections.<Header>emptyList(), mock(TypedInput.class)
-            ), response
+            ), this.response
     );
-    executor = spy(new QueuedSynchronousExecutor());
-    rxSupport = new RxSupport(executor, ErrorHandler.DEFAULT, requestInterceptor);
+    this.executor = spy(new QueuedSynchronousExecutor());
+    this.rxSupport = new RxSupport(this.executor, ErrorHandler.DEFAULT, this.requestInterceptor);
   }
 
   @Test public void observableCallsOnNextOnHttpExecutor() {
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
+    this.rxSupport.createRequestObservable(this.invoker).subscribe(this.subscriber);
+    this.executor.executeNextInQueue();
+    verify(this.subscriber, times(1)).onNext(this.response);
   }
 
   @Test public void observableCallsOnNextOnHttpExecutorWithSubscriber() {
     TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker).subscribeOn(test).subscribe(subscriber);
+    this.rxSupport.createRequestObservable(this.invoker).subscribeOn(test).subscribe(this.subscriber);
     // Subscription is handled via the Scheduler.
     test.triggerActions();
     // This will only execute up to the executor in OnSubscribe.
-    verify(subscriber, never()).onNext(any());
+    verify(this.subscriber, never()).onNext(any());
     // Upon continuing the executor we then run the retrofit request.
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
+    this.executor.executeNextInQueue();
+    verify(this.subscriber, times(1)).onNext(this.response);
   }
 
   @Test public void observableUnSubscribesDoesNotExecuteCallable() throws Exception {
-    Subscription subscription = rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    verify(subscriber, never()).onNext(any());
+    Subscription subscription = this.rxSupport.createRequestObservable(this.invoker).subscribe(this.subscriber);
+    verify(this.subscriber, never()).onNext(any());
 
     // UnSubscribe here should cancel the queued runnable.
     subscription.unsubscribe();
 
-    executor.executeNextInQueue();
-    verify(invoker, never()).invoke(any(RequestInterceptor.class));
-    verify(subscriber, never()).onNext(response);
+    this.executor.executeNextInQueue();
+    verify(this.invoker, never()).invoke(any(RequestInterceptor.class));
+    verify(this.subscriber, never()).onNext(this.response);
   }
 
   @Test public void observableCallsOperatorsOffHttpExecutor() {
     TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
+    this.rxSupport.createRequestObservable(this.invoker)
             .delaySubscription(1000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
+            .subscribe(this.subscriber);
 
-    verify(subscriber, never()).onNext(any());
+    verify(this.subscriber, never()).onNext(any());
     test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
     // Upon continuing the executor we then run the retrofit request.
-    executor.executeNextInQueue();
-    verify(subscriber, times(1)).onNext(response);
+    this.executor.executeNextInQueue();
+    verify(this.subscriber, times(1)).onNext(this.response);
   }
 
   @Test public void observableDoesNotLockExecutor() {
     TestScheduler test = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
+    this.rxSupport.createRequestObservable(this.invoker)
             .delay(1000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
+            .subscribe(this.subscriber);
 
-    rxSupport.createRequestObservable(invoker)
+    this.rxSupport.createRequestObservable(this.invoker)
             .delay(2000, TimeUnit.MILLISECONDS, test)
-            .subscribe(subscriber);
+            .subscribe(this.subscriber);
 
     // Nothing fired yet
-    verify(subscriber, never()).onNext(any());
+    verify(this.subscriber, never()).onNext(any());
     // Subscriptions should of been queued up and executed even tho we delayed on the Subscriber.
-    executor.executeNextInQueue();
-    executor.executeNextInQueue();
+    this.executor.executeNextInQueue();
+    this.executor.executeNextInQueue();
 
-    verify(subscriber, never()).onNext(response);
+    verify(this.subscriber, never()).onNext(this.response);
 
     test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
-    verify(subscriber, times(1)).onNext(response);
+    verify(this.subscriber, times(1)).onNext(this.response);
 
     test.advanceTimeBy(1000, TimeUnit.MILLISECONDS);
-    verify(subscriber, times(2)).onNext(response);
+    verify(this.subscriber, times(2)).onNext(this.response);
   }
 
   @Test public void observableRespectsObserveOn() throws Exception {
     TestScheduler observe = Schedulers.test();
-    rxSupport.createRequestObservable(invoker)
+    this.rxSupport.createRequestObservable(this.invoker)
             .observeOn(observe)
-            .subscribe(subscriber);
+            .subscribe(this.subscriber);
 
-    verify(subscriber, never()).onNext(any());
-    executor.executeNextInQueue();
+    verify(this.subscriber, never()).onNext(any());
+    this.executor.executeNextInQueue();
 
     // Should have no response yet, but callback should of been executed.
-    verify(subscriber, never()).onNext(any());
-    verify(invoker, times(1)).invoke(any(RequestInterceptor.class));
+    verify(this.subscriber, never()).onNext(any());
+    verify(this.invoker, times(1)).invoke(any(RequestInterceptor.class));
 
     // Forward the Observable Scheduler
     observe.triggerActions();
-    verify(subscriber, times(1)).onNext(response);
+    verify(this.subscriber, times(1)).onNext(this.response);
   }
 
   @Test public void observableCallsInterceptorForEverySubscription() throws Exception {
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
-    rxSupport.createRequestObservable(invoker).subscribe(subscriber);
+    this.rxSupport.createRequestObservable(this.invoker).subscribe(this.subscriber);
+    this.rxSupport.createRequestObservable(this.invoker).subscribe(this.subscriber);
 
     // The interceptor should have been called for each request upon subscription.
-    verify(requestInterceptor, times(2)).intercept(any(RequestFacade.class));
+    verify(this.requestInterceptor, times(2)).intercept(any(RequestFacade.class), null);
 
     // Background execution of the requests should not touch the interceptor.
-    executor.executeAll();
-    verifyNoMoreInteractions(requestInterceptor);
+    this.executor.executeAll();
+    verifyNoMoreInteractions(this.requestInterceptor);
   }
 
   /**
@@ -166,7 +168,7 @@
     Deque<Runnable> runnableQueue = new ArrayDeque<Runnable>();
 
     @Override public void execute(Runnable runnable) {
-      runnableQueue.add(runnable);
+      this.runnableQueue.add(runnable);
     }
 
     /**
@@ -174,14 +176,14 @@
      * and it hasn't.
      */
     void executeNextInQueue() {
-      runnableQueue.removeFirst().run();
+      this.runnableQueue.removeFirst().run();
     }
 
     /**
      * Executes any queued executions on the executor.
      */
     void executeAll() {
-      Iterator<Runnable> iterator = runnableQueue.iterator();
+      Iterator<Runnable> iterator = this.runnableQueue.iterator();
       while (iterator.hasNext()) {
         Runnable next = iterator.next();
         next.run();
