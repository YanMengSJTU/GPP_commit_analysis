diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index dbbe1e0e5..6bd94ec7d 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -16,9 +16,9 @@
 package retrofit2;
 
 import java.io.IOException;
+import java.util.HashMap;
 import javax.annotation.Nullable;
 
-import android.util.Log;
 import okhttp3.FormBody;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
@@ -28,8 +28,6 @@
 import okhttp3.RequestBody;
 import okio.Buffer;
 import okio.BufferedSink;
-import org.json.JSONException;
-import org.json.JSONObject;
 
 final class RequestBuilder {
   private static final char[] HEX_DIGITS =
@@ -52,7 +50,7 @@
   private @Nullable MultipartBody.Builder multipartBuilder;
   private @Nullable FormBody.Builder formBuilder;
   private @Nullable RequestBody body;
-  private @Nullable JSONObject jsonObject;
+  private @Nullable HashMap<String, Object> jsonMap;
 
   RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
@@ -77,7 +75,7 @@
       multipartBuilder.setType(MultipartBody.FORM);
     } else if (isSimpleJSON) {
       // Will be set to 'body' in 'build'.
-      jsonObject = new JSONObject();
+      jsonMap = new HashMap<String, Object>();
     }
   }
 
@@ -184,12 +182,8 @@ void addFormField(String name, String value, boolean encoded) {
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isSimpleJSON was true.
-  void addJSONField(String name, String value) {
-    try {
-      jsonObject.put(name, value);
-    } catch (JSONException e) {
-      Log.e(getClass().getSimpleName(), "addJSONField()", e);
-    }
+  void addJSONField(String name, Object value) {
+    jsonMap.put(name, value);
   }
 
   @SuppressWarnings("ConstantConditions") // Only called when isMultipart was true.
@@ -228,9 +222,8 @@ Request build() {
         body = formBuilder.build();
       } else if (multipartBuilder != null) {
         body = multipartBuilder.build();
-      } else if (jsonObject != null) {
-        String json = jsonObject.toString();
-        body = RequestBody.create(CONTENT_TYPE_JSON, json);
+      } else if (jsonMap != null) {
+        body = RequestBody.create(CONTENT_TYPE_JSON, Utils.toJSONString(jsonMap));
       } else if (hasBody) {
         // Body is absent, make an empty body.
         body = RequestBody.create(null, new byte[0]);
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 1b05c65a0..d6be7c63e 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -25,7 +25,9 @@
 import java.lang.reflect.TypeVariable;
 import java.lang.reflect.WildcardType;
 import java.util.Arrays;
+import java.util.Map;
 import java.util.NoSuchElementException;
+import java.util.Set;
 import javax.annotation.Nullable;
 import okhttp3.ResponseBody;
 import okio.Buffer;
@@ -494,4 +496,48 @@ static Type getCallResponseType(Type returnType) {
       return "? extends " + typeToString(upperBound);
     }
   }
+
+  /**
+   * convert Map to JSON string
+   */
+  public static String toJSONString(Map<String, Object> map) {
+    if (null == map || map.isEmpty()) {
+      return "{}";
+    }
+
+    StringBuilder jsonStringBuilder = new StringBuilder("{");
+
+    Set<String> keys = map.keySet();
+
+    for (String key : keys) {
+      if ("".equals(key) || null == key) {
+        continue;
+      }
+
+      Object value = map.get(key);
+      if (null == value) {
+        continue;
+      }
+
+      jsonStringBuilder.append("\"").append(key).append("\":");
+
+      Class clazz = value.getClass();
+      if (clazz == Integer.class
+              || clazz == Float.class
+              || clazz == Double.class
+              || clazz == Long.class
+              || clazz == Short.class
+              || clazz == Boolean.class) {
+        jsonStringBuilder.append(value).append(",");
+      } else {
+        jsonStringBuilder.append("\"").append(value).append("\"").append(",");
+      }
+    }
+    String result = jsonStringBuilder.toString();
+    if (result.endsWith(",")) {
+      result = result.substring(0, result.length() - 1);
+    }
+    result += "}";
+    return result;
+  }
 }
diff --git a/retrofit/src/test/java/retrofit2/UtilsTest.java b/retrofit/src/test/java/retrofit2/UtilsTest.java
new file mode 100644
index 000000000..374820696
--- /dev/null
+++ b/retrofit/src/test/java/retrofit2/UtilsTest.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2;
+
+import org.json.JSONObject;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.HashMap;
+
+public class UtilsTest {
+
+    @Test
+    public void toJSONString1() throws Exception {
+        String json = Utils.toJSONString(null);
+        Assert.assertEquals("{}", json);
+    }
+
+    @Test
+    public void toJSONString2() throws Exception {
+        HashMap<String, Object> map = new HashMap<String, Object>();
+        String json = Utils.toJSONString(map);
+        Assert.assertEquals("{}", json);
+    }
+
+    @Test
+    public void toJSONString3() throws Exception {
+        HashMap<String, Object> map = new HashMap<String, Object>();
+        map.put("1", 1);
+        map.put("2", null);
+        map.put("3", 2.0f);
+        map.put("4", 2L);
+        map.put("5", "5");
+        map.put("5", true);
+
+        String json = Utils.toJSONString(map);
+        Assert.assertEquals("{\"1\":1,\"3\":2.0,\"4\":2,\"5\":true}", json);
+    }
+
+    @Test
+    public void toJSONString4() throws Exception {
+        HashMap<String, Object> map = new HashMap<String, Object>();
+        map.put("1", 1);
+        map.put("2", 2.0);
+        map.put(null, 2.0f);
+        map.put("4", 2L);
+        map.put("5", "5");
+        map.put("5", true);
+
+        String json = Utils.toJSONString(map);
+        Assert.assertEquals("{\"1\":1,\"2\":2.0,\"4\":2,\"5\":true}", json);
+    }
+
+
+    @Test
+    public void toJSONString5() throws Exception {
+        HashMap<String, Object> map = new HashMap<String, Object>();
+        map.put("1", 1);
+        map.put("2", 2.0);
+        map.put("3", 2.0f);
+        map.put("4", 2L);
+        map.put("5", "5");
+        map.put("5", true);
+
+        String json = Utils.toJSONString(map);
+        Assert.assertEquals("{\"1\":1,\"2\":2.0,\"3\":2.0,\"4\":2,\"5\":true}", json);
+    }
+}
