diff --git a/retrofit/build.gradle b/retrofit/build.gradle
index adb794b15..effbef8fb 100644
--- a/retrofit/build.gradle
+++ b/retrofit/build.gradle
@@ -18,7 +18,8 @@ apply plugin: 'java'
 //     maven { url "http://repo.maven.apache.org/maven2" }
 //}
 dependencies {
-    compile project(':okio')
+    compile 'com.squareup.okio:okio:1.3.0'
+//    compile project(':okio')
 //    compile group: 'com.google.code.gson', name: 'gson', version:'2.3.1'
 //    compile group: 'com.google.android', name: 'android', version:'4.1.1.4'
 //    compile group: 'com.squareup.okhttp', name: 'okhttp', version:'2.2.0'
diff --git a/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java
index bfbc875b8..78214468e 100644
--- a/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java
+++ b/retrofit/src/main/java/retrofit/ExceptionCatchingRequestBody.java
@@ -3,6 +3,7 @@
 import java.io.IOException;
 
 import okio.Buffer;
+import okio.BufferedSource;
 import okio.ForwardingSource;
 import okio.Okio;
 import okio.Source;
@@ -21,11 +22,11 @@
     return delegate.contentType();
   }
 
-  @Override public long contentLength() {
+  @Override public long contentLength() throws IOException {
     return delegate.contentLength();
   }
 
-  @Override public Source source() {
+  @Override public BufferedSource source() throws IOException {
     return Okio.buffer(new ForwardingSource(delegate.source()) {
         @Override
         public long read(Buffer sink, long byteCount) throws IOException {
diff --git a/retrofit/src/main/java/retrofit/Platform.java b/retrofit/src/main/java/retrofit/Platform.java
index 728533d20..5043ccddc 100644
--- a/retrofit/src/main/java/retrofit/Platform.java
+++ b/retrofit/src/main/java/retrofit/Platform.java
@@ -25,42 +25,31 @@
 //import retrofit.converter.GsonConverter;
 import retrofit.sharehttp.ShareHttpClient;
 
-class Platform {
-  private static final Platform PLATFORM = findPlatform();
+public abstract class Platform {
 
-//  static final boolean HAS_RX_JAVA = hasRxJavaOnClasspath();
+    private static Platform sPlatform;
 
-  static Platform get() {
-    return PLATFORM;
-  }
+    public static void setPlatform(Platform platform) {
+        sPlatform = platform;
+    }
 
-  private static Platform findPlatform() {
-//    try {
-//      Class.forName("android.os.Build");
-//      if (Build.VERSION.SDK_INT != 0) {
-//        return new Android();
-//      }
-//    } catch (ClassNotFoundException ignored) {
-//    }
-
-    return new Platform();
-  }
+    public static Platform getPlatform() {
+        return sPlatform;
+    }
 
-  Converter defaultConverter() {
-    return null;//new GsonConverter();
-  }
+    public abstract Converter defaultConverter();
 
-  Executor defaultCallbackExecutor() {
-    return new Utils.SynchronousExecutor();
-  }
+    public Executor defaultCallbackExecutor() {
+        return new Utils.SynchronousExecutor();
+    }
 
-  ShareHttpClient defaultClient() {
-    ShareHttpClient client = ShareHttpClient.newInstance();
-    client.setConnectTimeout(15, TimeUnit.SECONDS);
-    client.setReadTimeout(15, TimeUnit.SECONDS);
-    client.setWriteTimeout(15, TimeUnit.SECONDS);
-    return client;
-  }
+    public ShareHttpClient defaultClient() {
+        ShareHttpClient client = ShareHttpClient.newInstance();
+        client.setConnectTimeout(15, TimeUnit.SECONDS);
+        client.setReadTimeout(15, TimeUnit.SECONDS);
+        client.setWriteTimeout(15, TimeUnit.SECONDS);
+        return client;
+    }
 
   /** Provides sane defaults for operation on Android. */
 //  private static class Android extends Platform {
diff --git a/retrofit/src/main/java/retrofit/RestAdapter.java b/retrofit/src/main/java/retrofit/RestAdapter.java
index 1fded107b..386da939a 100644
--- a/retrofit/src/main/java/retrofit/RestAdapter.java
+++ b/retrofit/src/main/java/retrofit/RestAdapter.java
@@ -443,13 +443,13 @@ public RestAdapter build() {
 
     private void ensureSaneDefaults() {
       if (converter == null) {
-        converter = Platform.get().defaultConverter();
+        converter = Platform.getPlatform().defaultConverter();
       }
       if (client == null) {
-        client = Platform.get().defaultClient();
+        client = Platform.getPlatform().defaultClient();
       }
       if (callbackExecutor == null) {
-        callbackExecutor = Platform.get().defaultCallbackExecutor();
+        callbackExecutor = Platform.getPlatform().defaultCallbackExecutor();
       }
       if (errorHandler == null) {
         errorHandler = ErrorHandler.DEFAULT;
diff --git a/retrofit/src/main/java/retrofit/Utils.java b/retrofit/src/main/java/retrofit/Utils.java
index cafacc97a..1b6139c41 100644
--- a/retrofit/src/main/java/retrofit/Utils.java
+++ b/retrofit/src/main/java/retrofit/Utils.java
@@ -23,6 +23,7 @@
 import java.util.concurrent.Executor;
 
 import okio.Buffer;
+import okio.BufferedSource;
 import okio.Source;
 import retrofit.sharehttp.MediaType;
 import retrofit.sharehttp.Response;
@@ -64,7 +65,7 @@ static Response readBodyToBytesIfNecessary(Response response) throws IOException
             return buffer.size();
           }
 
-          @Override public Source source() {
+          @Override public BufferedSource source() {
             return buffer.clone();
           }
         })
diff --git a/retrofit/src/main/java/retrofit/sharehttp/ResponseBody.java b/retrofit/src/main/java/retrofit/sharehttp/ResponseBody.java
index 35d4ba3d2..2338009f8 100644
--- a/retrofit/src/main/java/retrofit/sharehttp/ResponseBody.java
+++ b/retrofit/src/main/java/retrofit/sharehttp/ResponseBody.java
@@ -1,17 +1,126 @@
 package retrofit.sharehttp;
 
+import java.io.Closeable;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.nio.charset.Charset;
+
+import okio.Buffer;
+import okio.BufferedSource;
 import okio.Source;
 
 /**
  * Created by dementrock on 3/20/15.
  */
-public abstract class ResponseBody {
 
-    public abstract MediaType contentType();
+import static retrofit.sharehttp.Util.UTF_8;
+
+public abstract class ResponseBody implements Closeable {
+  /** Multiple calls to {@link #charStream()} must return the same instance. */
+  private Reader reader;
+
+  public abstract MediaType contentType();
+
+  /**
+   * Returns the number of bytes in that will returned by {@link #bytes}, or
+   * {@link #byteStream}, or -1 if unknown.
+   */
+  public abstract long contentLength() throws IOException;
+
+  public final InputStream byteStream() throws IOException {
+    return source().inputStream();
+  }
+
+  public abstract BufferedSource source() throws IOException;
+
+  public final byte[] bytes() throws IOException {
+    long contentLength = contentLength();
+    if (contentLength > Integer.MAX_VALUE) {
+      throw new IOException("Cannot buffer entire body for content length: " + contentLength);
+    }
+
+    BufferedSource source = source();
+    byte[] bytes;
+    try {
+      bytes = source.readByteArray();
+    } finally {
+      Util.closeQuietly(source);
+    }
+    if (contentLength != -1 && contentLength != bytes.length) {
+      throw new IOException("Content-Length and stream length disagree");
+    }
+    return bytes;
+  }
+
+  /**
+   * Returns the response as a character stream decoded with the charset
+   * of the Content-Type header. If that header is either absent or lacks a
+   * charset, this will attempt to decode the response body as UTF-8.
+   */
+  public final Reader charStream() throws IOException {
+    Reader r = reader;
+    return r != null ? r : (reader = new InputStreamReader(byteStream(), charset()));
+  }
+
+  /**
+   * Returns the response as a string decoded with the charset of the
+   * Content-Type header. If that header is either absent or lacks a charset,
+   * this will attempt to decode the response body as UTF-8.
+   */
+  public final String string() throws IOException {
+    return new String(bytes(), charset().name());
+  }
+
+  private Charset charset() {
+    MediaType contentType = contentType();
+    return contentType != null ? contentType.charset(UTF_8) : UTF_8;
+  }
+
+  @Override public void close() throws IOException {
+    source().close();
+  }
+
+  /**
+   * Returns a new response body that transmits {@code content}. If {@code
+   * contentType} is non-null and lacks a charset, this will use UTF-8.
+   */
+  public static ResponseBody create(MediaType contentType, String content) {
+    Charset charset = Util.UTF_8;
+    if (contentType != null) {
+      charset = contentType.charset();
+      if (charset == null) {
+        charset = Util.UTF_8;
+        contentType = MediaType.parse(contentType + "; charset=utf-8");
+      }
+    }
+    Buffer buffer = new Buffer().writeString(content, charset);
+    return create(contentType, buffer.size(), buffer);
+  }
 
-    public abstract Source source();
+  /** Returns a new response body that transmits {@code content}. */
+  public static ResponseBody create(final MediaType contentType, byte[] content) {
+    Buffer buffer = new Buffer().write(content);
+    return create(contentType, content.length, buffer);
+  }
 
-    public abstract long contentLength();
+  /** Returns a new response body that transmits {@code content}. */
+  public static ResponseBody create(
+      final MediaType contentType, final long contentLength, final BufferedSource content) {
+    if (content == null) throw new NullPointerException("source == null");
+    return new ResponseBody() {
+      @Override public MediaType contentType() {
+        return contentType;
+      }
 
+      @Override public long contentLength() {
+        return contentLength;
+      }
 
+      @Override public BufferedSource source() {
+        return content;
+      }
+    };
+  }
 }
