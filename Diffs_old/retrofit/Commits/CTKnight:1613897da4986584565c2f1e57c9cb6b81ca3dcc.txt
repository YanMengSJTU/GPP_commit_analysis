diff --git a/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt b/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt
index e76ad7f4b..c2c0c077a 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/processors/Constants.kt
@@ -6,6 +6,9 @@ class ErrorMessage {
     const val TOO_MUCH_INTERFACE = "API interfaces must not extend other interfaces."
     const val NOT_TYPE_ELEMENT = "The annotated element is not an instance of TypeElement, skipped."
     const val METHOD_RETURN_VOID = "Service methods cannot return void."
-    const val METHOD_RETURN_UNRESOLVED = "Method return type must not include a type variable or wildcard"
+    const val METHOD_RETURN_UNRESOLVED =
+        "Method's return type must not include a type variable or wildcard"
+    const val METHOD_PARAMETER_UNRESOLVED =
+        "Method's parameter type must not include a type variable or wildcard"
   }
 }
\ No newline at end of file
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java b/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java
deleted file mode 100644
index 4c72e53fe..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/ExtendedInterface.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package retrofit2.processors;
-
-@RetrofitService
-public interface ExtendedInterface extends SampleService {
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java
deleted file mode 100644
index 1fd169c6d..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/SampleAbstractClass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package retrofit2.processors;
-
-@RetrofitService
-public abstract class SampleAbstractClass {
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java
deleted file mode 100644
index 9fd908c3e..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/SampleClass.java
+++ /dev/null
@@ -1,5 +0,0 @@
-package retrofit2.processors;
-
-@RetrofitService
-public class SampleClass {
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java b/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java
deleted file mode 100644
index dd1019627..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/SampleReturn.java
+++ /dev/null
@@ -1,4 +0,0 @@
-package retrofit2.processors;
-
-public interface SampleReturn {
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java b/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java
new file mode 100644
index 000000000..374831e8f
--- /dev/null
+++ b/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java
@@ -0,0 +1,23 @@
+package retrofit2.processors;
+
+import com.sun.javafx.collections.MappingChange;
+import com.sun.tools.javac.util.List;
+import java.util.Set;
+import okhttp3.RequestBody;
+import okhttp3.ResponseBody;
+import retrofit2.Call;
+import retrofit2.http.Body;
+import retrofit2.http.POST;
+
+@RetrofitService
+public interface UnresolvableParameterType {
+  @POST("/") <T> Call<ResponseBody> typeVariable(@Body T body);
+
+  @POST("/") <T extends RequestBody> Call<ResponseBody> typeVariableUpperBound(@Body T body);
+
+  @POST("/") <T> Call<ResponseBody> crazy(@Body List<MappingChange.Map<String, Set<T[]>>> body);
+
+  @POST("/") Call<ResponseBody> wildcard(@Body List<?> body);
+
+  @POST("/") Call<ResponseBody> wildcardUpperBound(@Body List<? extends RequestBody> body);
+}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java
deleted file mode 100644
index c4c238063..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/returntype/NestedTypeVariable.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package retrofit2.processors.returntype;
-
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.processors.RetrofitService;
-
-@RetrofitService
-public interface NestedTypeVariable {
-  @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java
deleted file mode 100644
index b357aced3..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariable.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package retrofit2.processors.returntype;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.processors.RetrofitService;
-
-@RetrofitService
-public interface TypeVariable {
-  @GET("/") <T> Call<T> typeVariable();
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java
deleted file mode 100644
index 23aa32e0c..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/returntype/TypeVariableUpperBound.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package retrofit2.processors.returntype;
-
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.processors.RetrofitService;
-
-@RetrofitService
-public interface TypeVariableUpperBound {
-  @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java
deleted file mode 100644
index 1de54c5b6..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/returntype/Wildcard.java
+++ /dev/null
@@ -1,10 +0,0 @@
-package retrofit2.processors.returntype;
-
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.processors.RetrofitService;
-
-@RetrofitService
-public interface Wildcard {
-  @GET("/") Call<?> wildcard();
-}
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java b/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java
deleted file mode 100644
index 2dca4b996..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/returntype/WildcardUpperBound.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package retrofit2.processors.returntype;
-
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.GET;
-import retrofit2.processors.RetrofitService;
-
-@RetrofitService
-public interface WildcardUpperBound {
-  @GET("/") Call<? extends ResponseBody> wildcardUpperBound();
-}
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
index e1136df85..40b4ca663 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/BaseTest.kt
@@ -2,6 +2,7 @@ package retrofit2.processors
 
 import com.google.testing.compile.Compilation
 import com.google.testing.compile.JavaFileObjects
+import org.intellij.lang.annotations.Language
 import org.junit.Test
 import kotlin.test.assertEquals
 
@@ -9,22 +10,24 @@ class BaseTest {
 
   @Test
   fun sampleTest() {
-    val compilation =
-        compiler()
-            .compile(JavaFileObjects.forSourceLines(
-                "retrofit2.processors.SampleService",
-                """
-                package retrofit2.processors;
+    @Language("JAVA") val TEST_SRC =
+        """
+        package retrofit2.processors.test;
 
-                import retrofit2.Call;
-                import retrofit2.http.GET;
+        import retrofit2.Call;
+        import retrofit2.http.GET;
 
-                @RetrofitService
-                public interface SampleService {
-                  @GET("/") Call<Void> getVoid();
-                }
+        @RetrofitService
+        public interface SampleService {
+          @GET("/") Call<Void> getVoid();
+        }
+        """.trimIndent()
 
-                """))
+    val compilation =
+        compiler()
+            .compile(JavaFileObjects.forSourceLines(
+                "retrofit2.processors.test.SampleService", TEST_SRC
+            ))
 
     assertEquals(compilation.status(), Compilation.Status.SUCCESS)
     assertEquals(compilation.warnings().size, 0)
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt
new file mode 100644
index 000000000..4a3117523
--- /dev/null
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt
@@ -0,0 +1,38 @@
+package retrofit2.processors
+
+import com.google.testing.compile.Compilation
+import com.google.testing.compile.JavaFileObjects
+import org.intellij.lang.annotations.Language
+import org.junit.Test
+import kotlin.test.assertEquals
+
+class ParameterTypeTest {
+  @Test
+  fun typeVariableTest() {
+    @Language("JAVA") val TEST_SRC =
+        """
+        package retrofit2.processors.test.type.parameter;
+
+        import okhttp3.ResponseBody;
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.Call;
+        import retrofit2.http.Body;
+        import retrofit2.http.POST;
+
+        @RetrofitService
+        public interface UnresolvableParameterType {
+          @POST("/") <T> Call<ResponseBody> typeVariable(@Body T body);
+        }
+        """.trimIndent()
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.UnresolvableParameterType",
+        TEST_SRC
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_PARAMETER_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
+  }
+}
\ No newline at end of file
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
index ab948de51..7bc5889e4 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ReturnTypeTest.kt
@@ -2,26 +2,30 @@ package retrofit2.processors
 
 import com.google.testing.compile.Compilation
 import com.google.testing.compile.JavaFileObjects
+import org.intellij.lang.annotations.Language
 import org.junit.Test
 import kotlin.test.assertEquals
 
 class ReturnTypeTest {
   @Test
   fun typeVariableTest() {
-    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.returntype.TypeVariable",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors.returntype;
+        package retrofit2.processors.test.type.response;
 
         import retrofit2.Call;
         import retrofit2.http.GET;
         import retrofit2.processors.RetrofitService;
 
         @RetrofitService
-        public interface TypeVariable {
+        public interface UnresolvableParameterType {
           @GET("/") <T> Call<T> typeVariable();
         }
-        """
+        """.trimIndent()
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.UnresolvableParameterType",
+        TEST_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
@@ -32,10 +36,9 @@ class ReturnTypeTest {
 
   @Test
   fun typeVariableUpperBoundTest() {
-    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.returntype.TypeVariableUpperBound",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors.returntype;
+        package retrofit2.processors.test.type.response;
 
         import okhttp3.ResponseBody;
         import retrofit2.Call;
@@ -46,7 +49,11 @@ class ReturnTypeTest {
         public interface TypeVariableUpperBound {
           @GET("/") <T extends ResponseBody> Call<T> typeVariableUpperBound();
         }
-        """
+        """.trimIndent()
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.TypeVariableUpperBound",
+        TEST_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
@@ -57,10 +64,9 @@ class ReturnTypeTest {
 
   @Test
   fun wildcardTest() {
-    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.returntype.Wildcard",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors.returntype;
+        package retrofit2.processors.test.type.response;
 
         import retrofit2.Call;
         import retrofit2.http.GET;
@@ -70,7 +76,11 @@ class ReturnTypeTest {
         public interface Wildcard {
           @GET("/") Call<?> wildcard();
         }
-        """
+        """.trimIndent()
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.Wildcard",
+        TEST_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
@@ -81,10 +91,9 @@ class ReturnTypeTest {
 
   @Test
   fun wildcardUpperBoundTest() {
-    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.returntype.WildcardUpperBound",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors.returntype;
+        package retrofit2.processors.test.type.response;
 
         import okhttp3.ResponseBody;
         import retrofit2.Call;
@@ -95,7 +104,11 @@ class ReturnTypeTest {
         public interface WildcardUpperBound {
           @GET("/") Call<? extends ResponseBody> wildcardUpperBound();
         }
-        """
+        """.trimIndent()
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.WildcardUpperBound",
+        TEST_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
@@ -106,10 +119,9 @@ class ReturnTypeTest {
 
   @Test
   fun nestedTypeVariableTest() {
-    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.returntype.NestedTypeVariable",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors.returntype;
+        package retrofit2.processors.test.type.response;
 
         import java.util.List;
         import java.util.Map;
@@ -123,6 +135,10 @@ class ReturnTypeTest {
           @GET("/") <T> Call<List<Map<String, Set<T[]>>>> crazy();
         }
         """
+
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.response.NestedTypeVariable",
+        TEST_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
index 571dad7a4..85f2e3a56 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/TargetTypeTest.kt
@@ -2,8 +2,8 @@ package retrofit2.processors
 
 import com.google.testing.compile.Compilation
 import com.google.testing.compile.JavaFileObjects
+import org.intellij.lang.annotations.Language
 import org.junit.Test
-import java.util.Locale
 import javax.tools.JavaFileObject
 import kotlin.test.assertEquals
 
@@ -11,51 +11,64 @@ class TargetTypeTest {
 
   @Test
   fun extendedInterfaceTest() {
-    val javaFileObject = JavaFileObjects.forSourceLines(
-        "retrofit2.processors.ExtendedInterface",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors;
+        package retrofit2.processors.test.type.target;
+
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.processors.SampleService;
 
         @RetrofitService
         public interface ExtendedInterface extends SampleService {
         }
-        """
+        """.trimIndent()
+
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.target.ExtendedInterface",
+        TEST_SRC
     )
     val compilation = compiler().compile(javaFileObject)
 
-
     assertEquals(1, compilation.errors().size)
     val onlyError = compilation.errors().firstOrNull()
     assertEquals(ErrorMessage.TOO_MUCH_INTERFACE,
-        onlyError?.getMessage(Locale.getDefault()))
+        onlyError?.getMessage())
   }
 
   @Test
   fun abstractClassTest() {
-    val javaFileObject = JavaFileObjects.forSourceLines(
-        "retrofit2.processors.SampleAbstractClass",
+    @Language("JAVA") val TEST_SRC =
         """
-            package retrofit2.processors;
+        package retrofit2.processors.test.type.target;
+
+        import retrofit2.processors.RetrofitService;
 
-            @RetrofitService
-            public abstract class SampleAbstractClass {
-            }
-            """
+        @RetrofitService
+        public abstract class SampleAbstractClass {
+        }
+        """.trimIndent()
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.target.SampleAbstractClass",
+        TEST_SRC
     )
     invalidTypeTest(javaFileObject)
   }
 
   @Test
   fun classTest() {
-    val javaFileObject = JavaFileObjects.forSourceLines(
-        "retrofit2.processors.SampleClass",
+    @Language("JAVA") val TEST_SRC =
         """
-        package retrofit2.processors;
+        package retrofit2.processors.test.type.target;
+
+        import retrofit2.processors.RetrofitService;
 
         @RetrofitService
         public class SampleClass {
         }
-        """
+        """.trimIndent()
+    val javaFileObject = JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.target.SampleClass",
+        TEST_SRC
     )
     invalidTypeTest(javaFileObject)
   }
@@ -67,6 +80,6 @@ class TargetTypeTest {
     assertEquals(Compilation.Status.FAILURE, compilation.status())
     assertEquals(1, compilation.errors().size)
     val onlyWarning = compilation.errors().firstOrNull()
-    assertEquals(ErrorMessage.INVALID_TYPE, onlyWarning?.getMessage(Locale.getDefault()))
+    assertEquals(ErrorMessage.INVALID_TYPE, onlyWarning?.getMessage())
   }
 }
