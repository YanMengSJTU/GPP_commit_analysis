diff --git a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
index 2e30a4478..efc87f4f2 100644
--- a/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
+++ b/retrofit-converters/gson/src/main/java/retrofit2/converter/gson/GsonRequestBodyConverter.java
@@ -45,6 +45,6 @@
     JsonWriter jsonWriter = gson.newJsonWriter(writer);
     adapter.write(jsonWriter, value);
     jsonWriter.close();
-    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());
+    return RequestBody.create(null, buffer.readByteString());
   }
 }
diff --git a/retrofit/src/main/java/retrofit2/OkHttpCall.java b/retrofit/src/main/java/retrofit2/OkHttpCall.java
index ccbfe1ab2..4a16c5edc 100644
--- a/retrofit/src/main/java/retrofit2/OkHttpCall.java
+++ b/retrofit/src/main/java/retrofit2/OkHttpCall.java
@@ -188,7 +188,6 @@ private void callSuccess(Response<T> response) {
 
     // Remove the body's source (the only stateful object) so we can pass the response along.
     rawResponse = rawResponse.newBuilder()
-        .body(new NoContentResponseBody(rawBody.contentType(), rawBody.contentLength()))
         .build();
 
     int code = rawResponse.code();
@@ -240,28 +239,6 @@ public void cancel() {
     }
   }
 
-  static final class NoContentResponseBody extends ResponseBody {
-    private final MediaType contentType;
-    private final long contentLength;
-
-    NoContentResponseBody(MediaType contentType, long contentLength) {
-      this.contentType = contentType;
-      this.contentLength = contentLength;
-    }
-
-    @Override public MediaType contentType() {
-      return contentType;
-    }
-
-    @Override public long contentLength() {
-      return contentLength;
-    }
-
-    @Override public BufferedSource source() {
-      throw new IllegalStateException("Cannot read raw response body of a converted body.");
-    }
-  }
-
   static final class ExceptionCatchingRequestBody extends ResponseBody {
     private final ResponseBody delegate;
     IOException thrownException;
@@ -271,11 +248,11 @@ public void cancel() {
     }
 
     @Override public MediaType contentType() {
-      return delegate.contentType();
+      return null;
     }
 
     @Override public long contentLength() {
-      return delegate.contentLength();
+      return null;
     }
 
     @Override public BufferedSource source() {
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index c940866ea..092919de9 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -39,7 +39,7 @@
     private HttpUrl.Builder urlBuilder;
 
     private final Request.Builder requestBuilder;
-    private MediaType contentType;
+//    private MediaType contentType;
 
     private final boolean hasBody;
     private MultipartBody.Builder multipartBuilder;
@@ -47,12 +47,12 @@
     private RequestBody body;
 
     RequestBuilder(String method, HttpUrl baseUrl, String relativeUrl, Headers headers,
-                   MediaType contentType, boolean hasBody, boolean isFormEncoded, boolean isMultipart) {
+                   boolean hasBody, boolean isFormEncoded, boolean isMultipart) {
         this.method = method;
         this.baseUrl = baseUrl;
         this.relativeUrl = relativeUrl;
         this.requestBuilder = new Request.Builder();
-        this.contentType = contentType;
+//        this.contentType = contentType;
         this.hasBody = hasBody;
 
         if (headers != null) {
@@ -223,28 +223,28 @@ Request build() {
                 .build();
     }
 
-    private static class ContentTypeOverridingRequestBody extends RequestBody {
-        private final RequestBody delegate;
-        private final MediaType contentType;
-
-        ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {
-            this.delegate = delegate;
-            this.contentType = contentType;
-        }
-
-        @Override
-        public MediaType contentType() {
-            return contentType;
-        }
-
-        @Override
-        public long contentLength() throws IOException {
-            return delegate.contentLength();
-        }
-
-        @Override
-        public void writeTo(BufferedSink sink) throws IOException {
-            delegate.writeTo(sink);
-        }
-    }
+//    private static class ContentTypeOverridingRequestBody extends RequestBody {
+//        private final RequestBody delegate;
+//        private final MediaType contentType;
+//
+//        ContentTypeOverridingRequestBody(RequestBody delegate, MediaType contentType) {
+//            this.delegate = delegate;
+//            this.contentType = contentType;
+//        }
+//
+//        @Override
+//        public MediaType contentType() {
+//            return contentType;
+//        }
+//
+//        @Override
+//        public long contentLength() throws IOException {
+//            return delegate.contentLength();
+//        }
+//
+//        @Override
+//        public void writeTo(BufferedSink sink) throws IOException {
+//            delegate.writeTo(sink);
+//        }
+//    }
 }
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index 9be86add8..09202ad53 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -88,7 +88,7 @@
         this.httpMethod = builder.httpMethod;
         this.relativeUrl = builder.relativeUrl;
         this.headers = builder.headers;
-        this.contentType = builder.contentType;
+//        this.contentType = builder.contentType;
         this.hasBody = builder.hasBody;
         this.isFormEncoded = builder.isFormEncoded;
         this.isMultipart = builder.isMultipart;
@@ -99,8 +99,7 @@
      * Builds an HTTP request from method arguments.
      */
     Request toRequest(Object... args) throws IOException {
-        RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-                contentType, hasBody, isFormEncoded, isMultipart);
+        RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers, hasBody, isFormEncoded, isMultipart);
 
         @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
                 ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -150,7 +149,6 @@ R toResponse(ResponseBody body) throws IOException {
         boolean isMultipart;
         String relativeUrl;
         Headers headers;
-        MediaType contentType;
         Set<String> relativeUrlParamNames;
         ParameterHandler<?>[] parameterHandlers;
         Converter<ResponseBody, T> responseConverter;
@@ -322,15 +320,15 @@ private Headers parseHeaders(String[] headers) {
                 }
                 String headerName = header.substring(0, colon);
                 String headerValue = header.substring(colon + 1).trim();
-                if ("Content-Type".equalsIgnoreCase(headerName)) {
+                /*if ("Content-Type".equalsIgnoreCase(headerName)) {
                     MediaType type = MediaType.parse(headerValue);
                     if (type == null) {
                         throw methodError("Malformed content type: %s", headerValue);
                     }
                     contentType = type;
-                } else {
+                } else {*/
                     builder.add(headerName, headerValue);
-                }
+//                }
             }
             return builder.build();
         }
