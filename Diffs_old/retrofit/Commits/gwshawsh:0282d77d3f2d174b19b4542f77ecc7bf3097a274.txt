diff --git a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
index db2c4c2e7..322259627 100644
--- a/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestFactoryTest.java
@@ -15,16 +15,22 @@
  */
 package retrofit2;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.lang.reflect.Method;
 import java.math.BigInteger;
 import java.net.URI;
+import java.net.URLDecoder;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+
+import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson.JSONObject;
 import okhttp3.HttpUrl;
 import okhttp3.MediaType;
 import okhttp3.MultipartBody;
@@ -33,6 +39,7 @@
 import okhttp3.ResponseBody;
 import okio.Buffer;
 import org.junit.Test;
+import retrofit2.gener.*;
 import retrofit2.helpers.NullObjectConverterFactory;
 import retrofit2.helpers.ToStringConverterFactory;
 import retrofit2.http.Body;
@@ -59,6 +66,7 @@
 import retrofit2.http.QueryName;
 import retrofit2.http.Url;
 
+import static com.alibaba.fastjson.util.IOUtils.UTF8;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
@@ -66,6 +74,74 @@
 @SuppressWarnings({"UnusedParameters", "unused"}) // Parameters inspected reflectively.
 public final class RequestFactoryTest {
   private static final MediaType TEXT_PLAIN = MediaType.parse("text/plain");
+  public static class  NameGener implements Generator {
+    @Override
+    public String generate(Map<String, String> extendFields) {
+      return "111";
+    }
+  }
+
+  public  static class A{
+    String x ="xx";
+    String y="yy";
+  }
+
+  public static class  WrapGener implements Wrapper {
+    @Override
+    public Map<String, String> map(Map<String, String> map) {
+      Map<String, String> r = new HashMap<>();
+      r.put("a","a");
+      r.put("in",JSON.toJSONString(map));
+      return r;
+    }
+  }
+
+  @Test public void genFiled() throws IOException {
+    @Aop(WrapGener.class)
+    @FixedField(keys = "222",values = {"222"})
+    class Example {
+      @POST("/")
+      @FormUrlEncoded
+      @GeneratedField(keys = {"111"},generators = {NameGener.class})
+      Call<ResponseBody> method(@Field("a") A a) {
+        return null;
+      }
+    }
+
+
+    Request request = buildRequest(Example.class,new A());
+    RequestBody body = request.body();
+    Buffer buffer = new Buffer();
+    body.writeTo(buffer);
+    Charset charset = UTF8;
+    MediaType contentType = body.contentType();
+    if (contentType != null) {
+      charset = contentType.charset(UTF8);
+    }
+      String s = URLDecoder.decode(buffer.readString(charset),"UTF-8");
+    int i = 0;
+    JSON object = new JSONObject();
+
+  }
+  static boolean isPlaintext(Buffer buffer) {
+    try {
+      Buffer prefix = new Buffer();
+      long byteCount = buffer.size() < 64 ? buffer.size() : 64;
+      buffer.copyTo(prefix, 0, byteCount);
+      for (int i = 0; i < 16; i++) {
+        if (prefix.exhausted()) {
+          break;
+        }
+        int codePoint = prefix.readUtf8CodePoint();
+        if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {
+          return false;
+        }
+      }
+      return true;
+    } catch (EOFException e) {
+      return false; // Truncated UTF-8 sequence.
+    }
+  }
 
   @Test public void customMethodNoBody() {
     class Example {
