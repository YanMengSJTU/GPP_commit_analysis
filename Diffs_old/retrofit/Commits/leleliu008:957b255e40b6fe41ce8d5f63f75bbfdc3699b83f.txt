diff --git a/retrofit/src/main/java/retrofit2/ParameterHandler.java b/retrofit/src/main/java/retrofit2/ParameterHandler.java
index 10238b026..7ae0ebbbe 100644
--- a/retrofit/src/main/java/retrofit2/ParameterHandler.java
+++ b/retrofit/src/main/java/retrofit2/ParameterHandler.java
@@ -360,4 +360,23 @@ private RawPart() {
       builder.setBody(body);
     }
   }
+
+  static final class SimpleJSONField<T> extends ParameterHandler<T> {
+    private final String name;
+    private final Converter<T, String> valueConverter;
+
+    SimpleJSONField(String name, Converter<T, String> valueConverter) {
+      this.name = checkNotNull(name, "name == null");
+      this.valueConverter = valueConverter;
+    }
+
+    @Override void apply(RequestBuilder builder, @Nullable T value) throws IOException {
+      if (value == null) return; // Skip null values.
+
+      String strValue = valueConverter.convert(value);
+      if (strValue == null) return; // Skip converted but null values
+
+      builder.addJSONField(name, strValue);
+    }
+  }
 }
diff --git a/retrofit/src/main/java/retrofit2/RequestBuilder.java b/retrofit/src/main/java/retrofit2/RequestBuilder.java
index f27db26ee..dbbe1e0e5 100644
--- a/retrofit/src/main/java/retrofit2/RequestBuilder.java
+++ b/retrofit/src/main/java/retrofit2/RequestBuilder.java
@@ -17,6 +17,8 @@
 
 import java.io.IOException;
 import javax.annotation.Nullable;
+
+import android.util.Log;
 import okhttp3.FormBody;
 import okhttp3.Headers;
 import okhttp3.HttpUrl;
@@ -26,12 +28,17 @@
 import okhttp3.RequestBody;
 import okio.Buffer;
 import okio.BufferedSink;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 final class RequestBuilder {
   private static final char[] HEX_DIGITS =
       { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
   private static final String PATH_SEGMENT_ALWAYS_ENCODE_SET = " \"<>^`{}|\\?#";
 
+  private static final MediaType CONTENT_TYPE_JSON =
+          MediaType.parse("application/json;charset=UTF-8");
+
   private final String method;
 
   private final HttpUrl baseUrl;
@@ -45,10 +52,11 @@
   private @Nullable MultipartBody.Builder multipartBuilder;
   private @Nullable FormBody.Builder formBuilder;
   private @Nullable RequestBody body;
+  private @Nullable JSONObject jsonObject;
 
   RequestBuilder(String method, HttpUrl baseUrl, @Nullable String relativeUrl,
       @Nullable Headers headers, @Nullable MediaType contentType, boolean hasBody,
-      boolean isFormEncoded, boolean isMultipart) {
+      boolean isFormEncoded, boolean isMultipart, boolean isSimpleJSON) {
     this.method = method;
     this.baseUrl = baseUrl;
     this.relativeUrl = relativeUrl;
@@ -67,6 +75,9 @@
       // Will be set to 'body' in 'build'.
       multipartBuilder = new MultipartBody.Builder();
       multipartBuilder.setType(MultipartBody.FORM);
+    } else if (isSimpleJSON) {
+      // Will be set to 'body' in 'build'.
+      jsonObject = new JSONObject();
     }
   }
 
@@ -172,6 +183,15 @@ void addFormField(String name, String value, boolean encoded) {
     }
   }
 
+  @SuppressWarnings("ConstantConditions") // Only called when isSimpleJSON was true.
+  void addJSONField(String name, String value) {
+    try {
+      jsonObject.put(name, value);
+    } catch (JSONException e) {
+      Log.e(getClass().getSimpleName(), "addJSONField()", e);
+    }
+  }
+
   @SuppressWarnings("ConstantConditions") // Only called when isMultipart was true.
   void addPart(Headers headers, RequestBody body) {
     multipartBuilder.addPart(headers, body);
@@ -208,6 +228,9 @@ Request build() {
         body = formBuilder.build();
       } else if (multipartBuilder != null) {
         body = multipartBuilder.build();
+      } else if (jsonObject != null) {
+        String json = jsonObject.toString();
+        body = RequestBody.create(CONTENT_TYPE_JSON, json);
       } else if (hasBody) {
         // Body is absent, make an empty body.
         body = RequestBody.create(null, new byte[0]);
diff --git a/retrofit/src/main/java/retrofit2/ServiceMethod.java b/retrofit/src/main/java/retrofit2/ServiceMethod.java
index d0a19384c..51af85cd2 100644
--- a/retrofit/src/main/java/retrofit2/ServiceMethod.java
+++ b/retrofit/src/main/java/retrofit2/ServiceMethod.java
@@ -56,6 +56,8 @@
 import retrofit2.http.QueryMap;
 import retrofit2.http.QueryName;
 import retrofit2.http.Url;
+import retrofit2.http.SimpleJSON;
+import retrofit2.http.SimpleJSONField;
 
 /** Adapts an invocation of an interface method into an HTTP call. */
 final class ServiceMethod<R, T> {
@@ -76,6 +78,7 @@
   private final boolean hasBody;
   private final boolean isFormEncoded;
   private final boolean isMultipart;
+  private final boolean isSimpleJSON;
   private final ParameterHandler<?>[] parameterHandlers;
 
   ServiceMethod(Builder<R, T> builder) {
@@ -90,13 +93,14 @@
     this.hasBody = builder.hasBody;
     this.isFormEncoded = builder.isFormEncoded;
     this.isMultipart = builder.isMultipart;
+    this.isSimpleJSON = builder.isSimpleJSON;
     this.parameterHandlers = builder.parameterHandlers;
   }
 
   /** Builds an HTTP request from method arguments. */
   Request toRequest(@Nullable Object... args) throws IOException {
     RequestBuilder requestBuilder = new RequestBuilder(httpMethod, baseUrl, relativeUrl, headers,
-        contentType, hasBody, isFormEncoded, isMultipart);
+        contentType, hasBody, isFormEncoded, isMultipart, isSimpleJSON);
 
     @SuppressWarnings("unchecked") // It is an error to invoke a method with the wrong arg types.
     ParameterHandler<Object>[] handlers = (ParameterHandler<Object>[]) parameterHandlers;
@@ -132,6 +136,7 @@ R toResponse(ResponseBody body) throws IOException {
     final Type[] parameterTypes;
 
     Type responseType;
+    boolean gotSimpleJSONField;
     boolean gotField;
     boolean gotPart;
     boolean gotBody;
@@ -140,6 +145,7 @@ R toResponse(ResponseBody body) throws IOException {
     boolean gotUrl;
     String httpMethod;
     boolean hasBody;
+    boolean isSimpleJSON;
     boolean isFormEncoded;
     boolean isMultipart;
     String relativeUrl;
@@ -185,6 +191,10 @@ public ServiceMethod build() {
           throw methodError("FormUrlEncoded can only be specified on HTTP methods with "
               + "request body (e.g., @POST).");
         }
+        if (isSimpleJSON) {
+          throw methodError("SimpleJSON can only be specified on HTTP methods with "
+                  + "request body (e.g., @POST).");
+        }
       }
 
       int parameterCount = parameterAnnotationsArray.length;
@@ -216,6 +226,9 @@ public ServiceMethod build() {
       if (isMultipart && !gotPart) {
         throw methodError("Multipart method must contain at least one @Part.");
       }
+      if (isSimpleJSON && !gotSimpleJSONField) {
+        throw methodError("SimpleJSON method must contain at least one @SimpleJSONField.");
+      }
 
       return new ServiceMethod<>(this);
     }
@@ -266,15 +279,20 @@ private void parseMethodAnnotation(Annotation annotation) {
         }
         headers = parseHeaders(headersToParse);
       } else if (annotation instanceof Multipart) {
-        if (isFormEncoded) {
+        if (isFormEncoded || isSimpleJSON) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isMultipart = true;
       } else if (annotation instanceof FormUrlEncoded) {
-        if (isMultipart) {
+        if (isMultipart || isSimpleJSON) {
           throw methodError("Only one encoding annotation is allowed.");
         }
         isFormEncoded = true;
+      } else if (annotation instanceof SimpleJSON) {
+        if (isMultipart || isFormEncoded) {
+          throw methodError("Only one encoding annotation is allowed.");
+        }
+        isSimpleJSON = true;
       }
     }
 
@@ -697,9 +715,9 @@ private Headers parseHeaders(String[] headers) {
         return new ParameterHandler.PartMap<>(valueConverter, partMap.encoding());
 
       } else if (annotation instanceof Body) {
-        if (isFormEncoded || isMultipart) {
+        if (isFormEncoded || isMultipart || isSimpleJSON) {
           throw parameterError(p,
-              "@Body parameters cannot be used with form or multi-part encoding.");
+              "@Body parameters cannot be used with form or SimpleJSON or multi-part encoding.");
         }
         if (gotBody) {
           throw parameterError(p, "Multiple @Body method annotations found.");
@@ -714,6 +732,39 @@ private Headers parseHeaders(String[] headers) {
         }
         gotBody = true;
         return new ParameterHandler.Body<>(converter);
+      } else if (annotation instanceof SimpleJSONField) {
+        if (!isSimpleJSON) {
+          throw parameterError(p,
+                  "@SimpleJSONField parameters can only be used with SimpleJSON encoding.");
+        }
+        SimpleJSONField simpleJSONField = (SimpleJSONField) annotation;
+        String name = simpleJSONField.value();
+
+        Class<?> rawParameterType = Utils.getRawType(type);
+        gotSimpleJSONField = true;
+        if (Iterable.class.isAssignableFrom(rawParameterType)) {
+          if (!(type instanceof ParameterizedType)) {
+            throw parameterError(p, rawParameterType.getSimpleName()
+                    + " must include generic type (e.g., "
+                    + rawParameterType.getSimpleName()
+                    + "<String>)");
+          }
+          ParameterizedType parameterizedType = (ParameterizedType) type;
+          Type iterableType = Utils.getParameterUpperBound(0, parameterizedType);
+          Converter<?, String> converter =
+                  retrofit.stringConverter(iterableType, annotations);
+          return new ParameterHandler.SimpleJSONField<>(name, converter).iterable();
+        } else if (rawParameterType.isArray()) {
+          Class<?> arrayComponentType = boxIfPrimitive(rawParameterType.getComponentType());
+          Converter<?, String> converter =
+                  retrofit.stringConverter(arrayComponentType, annotations);
+          return new ParameterHandler.SimpleJSONField<>(name, converter).array();
+        } else {
+          Converter<?, String> converter =
+                  retrofit.stringConverter(type, annotations);
+          return new ParameterHandler.SimpleJSONField<>(name, converter);
+        }
+
       }
 
       return null; // Not a Retrofit annotation.
diff --git a/retrofit/src/main/java/retrofit2/http/SimpleJSON.java b/retrofit/src/main/java/retrofit2/http/SimpleJSON.java
new file mode 100644
index 000000000..8ef0ba416
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/SimpleJSON.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Denotes that the request body is SimpleJSON.
+ * SimpleJSON is like {'gender':'M'}、{'username':'github', 'password':'123456'},
+ * only has raw type fields.
+ * Fileds should be declared as parameters and annotated with
+ * {@link SimpleJSONField @SimpleJSONField}.
+ */
+@Documented
+@Target(METHOD)
+@Retention(RUNTIME)
+public @interface SimpleJSON {
+}
diff --git a/retrofit/src/main/java/retrofit2/http/SimpleJSONField.java b/retrofit/src/main/java/retrofit2/http/SimpleJSONField.java
new file mode 100644
index 000000000..75c4194ec
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/http/SimpleJSONField.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (C) 2013 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package retrofit2.http;
+
+import java.lang.annotation.Annotation;
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+import java.lang.reflect.Type;
+import retrofit2.Retrofit;
+
+import static java.lang.annotation.ElementType.PARAMETER;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+/**
+ * Named pair for a SimpleJSON request.
+ * <p>
+ * Values are converted to strings using {@link Retrofit#stringConverter(Type, Annotation[])}
+ * (or {@link Object#toString()}, if no matching string converter is installed)
+ * and then form URL encoded.
+ * {@code null} values are ignored. value's type can only be raw type.
+ * <p>
+ * Simple Example:
+ * <pre><code>
+ * &#64;SimpleJSON
+ * &#64;POST("/login")
+ * Call&lt;ResponseBody&gt; login(
+ *     &#64;SimpleJSONField("username") String username,
+ *     &#64;SimpleJSONField("password") String password);
+ * </code></pre>
+ * Calling with {@code foo.example("Bob Smith", "President")} yields a request body of
+ * {@code {'password':'Bob Smith','password':'President'}}.
+ * <p>
+ *
+ * @see SimpleJSON
+ */
+@Documented
+@Target(PARAMETER)
+@Retention(RUNTIME)
+public @interface SimpleJSONField {
+    /** The SimpleJSON filed name. */
+    String value();
+}
diff --git a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
index 66be17b17..7bd4da39d 100644
--- a/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
+++ b/retrofit/src/test/java/retrofit2/RequestBuilderTest.java
@@ -37,29 +37,7 @@
 import org.junit.Test;
 import retrofit2.helpers.NullObjectConverterFactory;
 import retrofit2.helpers.ToStringConverterFactory;
-import retrofit2.http.Body;
-import retrofit2.http.DELETE;
-import retrofit2.http.Field;
-import retrofit2.http.FieldMap;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.GET;
-import retrofit2.http.HEAD;
-import retrofit2.http.HTTP;
-import retrofit2.http.Header;
-import retrofit2.http.HeaderMap;
-import retrofit2.http.Headers;
-import retrofit2.http.Multipart;
-import retrofit2.http.OPTIONS;
-import retrofit2.http.PATCH;
-import retrofit2.http.POST;
-import retrofit2.http.PUT;
-import retrofit2.http.Part;
-import retrofit2.http.PartMap;
-import retrofit2.http.Path;
-import retrofit2.http.Query;
-import retrofit2.http.QueryMap;
-import retrofit2.http.QueryName;
-import retrofit2.http.Url;
+import retrofit2.http.*;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertNull;
@@ -135,6 +113,24 @@
     }
   }
 
+  @Test public void onlyOneEncodingIsAllowedSimpleJSONFirst() {
+    class Example {
+      @SimpleJSON //
+      @Multipart //
+      @POST("/") //
+      Call<ResponseBody> method() {
+        return null;
+      }
+    }
+    try {
+      buildRequest(Example.class);
+      fail();
+    } catch (IllegalArgumentException e) {
+      assertThat(e).hasMessage(
+              "Only one encoding annotation is allowed.\n    for method Example.method");
+    }
+  }
+
   @Test public void invalidPathParam() throws Exception {
     class Example {
       @GET("/") //
@@ -677,7 +673,7 @@
       fail();
     } catch (IllegalArgumentException e) {
       assertThat(e).hasMessage(
-          "@Body parameters cannot be used with form or multi-part encoding. (parameter #2)\n    for method Example.method");
+          "@Body parameters cannot be used with form or SimpleJSON or multi-part encoding. (parameter #2)\n    for method Example.method");
     }
   }
 
