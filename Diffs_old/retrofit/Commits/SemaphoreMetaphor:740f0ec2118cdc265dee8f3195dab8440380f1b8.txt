diff --git a/pom.xml b/pom.xml
index 08ed33ef0..00377cc1d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -58,6 +58,7 @@
     <jackson.version>2.4.3</jackson.version>
     <wire.version>1.5.2</wire.version>
     <simplexml.version>2.7.1</simplexml.version>
+    <logansquare.version>1.0.6</logansquare.version>
 
     <!-- Test Dependencies -->
     <junit.version>4.11</junit.version>
@@ -113,6 +114,11 @@
         <version>${rxjava.version}</version>
       </dependency>
 
+      <dependency>
+        <groupId>com.bluelinelabs</groupId>
+        <artifactId>logansquare</artifactId>
+        <version>${logansquare.version}</version>
+      </dependency>
       <dependency>
         <groupId>com.google.protobuf</groupId>
         <artifactId>protobuf-java</artifactId>
diff --git a/retrofit-converters/logansquare/pom.xml b/retrofit-converters/logansquare/pom.xml
new file mode 100644
index 000000000..7fb7e97c9
--- /dev/null
+++ b/retrofit-converters/logansquare/pom.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.squareup.retrofit</groupId>
+    <artifactId>retrofit-converters</artifactId>
+    <version>2.0.0-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <artifactId>converter-logansquare</artifactId>
+  <name>Converter: LoganSquare</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.squareup.retrofit</groupId>
+      <artifactId>retrofit</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.bluelinelabs</groupId>
+      <artifactId>logansquare</artifactId>
+      <version>${logansquare.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.bluelinelabs</groupId>
+      <artifactId>logansquare-compiler</artifactId>
+      <version>${logansquare.version}</version>
+    </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>javapoet</artifactId>
+      <version>1.0.0</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.assertj</groupId>
+      <artifactId>assertj-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+</project>
diff --git a/retrofit-converters/logansquare/src/main/java/retrofit/converter/LoganSquareConverter.java b/retrofit-converters/logansquare/src/main/java/retrofit/converter/LoganSquareConverter.java
new file mode 100644
index 000000000..0b205215f
--- /dev/null
+++ b/retrofit-converters/logansquare/src/main/java/retrofit/converter/LoganSquareConverter.java
@@ -0,0 +1,60 @@
+package retrofit.converter;
+
+import com.bluelinelabs.logansquare.LoganSquare;
+import com.squareup.okhttp.MediaType;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.ResponseBody;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.ParameterizedType;
+import java.lang.reflect.Type;
+import java.util.List;
+
+/**
+ * A {@link Converter} which uses LoganSquare for serialization and deserialization of entities.
+ */
+public class LoganSquareConverter implements Converter {
+  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
+
+  @Override
+  public Object fromBody(ResponseBody body, Type type) throws IOException {
+    InputStream is = body.byteStream();
+    try {
+      if (ParameterizedType.class.isAssignableFrom(type.getClass())) {
+        ParameterizedType parameterizedType = (ParameterizedType) type;
+        return LoganSquare.parseList(is, (Class) parameterizedType.getActualTypeArguments()[0]);
+      } else {
+        return LoganSquare.parse(is, (Class) type);
+      }
+    } catch (Exception e) {
+      throw new RuntimeException(e);
+    } finally {
+      try {
+        is.close();
+      } catch (IOException ignored) {
+      }
+    }
+  }
+
+  @Override
+  public RequestBody toBody(Object object, Type type) {
+    try {
+      String json;
+      if (List.class.isAssignableFrom(object.getClass())) {
+        List<Object> list = (List<Object>) object;
+        if (list.isEmpty()) {
+          json = "[]";
+        } else {
+          json = LoganSquare.serialize(list, (Class<Object>) list.get(0).getClass());
+        }
+      } else {
+        json = LoganSquare.serialize(object);
+      }
+      return RequestBody.create(MEDIA_TYPE, json);
+    } catch (Exception e) {
+      e.printStackTrace();
+      throw new AssertionError(e);
+    }
+  }
+}
diff --git a/retrofit-converters/logansquare/src/test/java/retrofit/converter/LoganSquareConverterTest.java b/retrofit-converters/logansquare/src/test/java/retrofit/converter/LoganSquareConverterTest.java
new file mode 100644
index 000000000..879931f66
--- /dev/null
+++ b/retrofit-converters/logansquare/src/test/java/retrofit/converter/LoganSquareConverterTest.java
@@ -0,0 +1,90 @@
+package retrofit.converter;
+
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.squareup.okhttp.MediaType;
+import com.squareup.okhttp.RequestBody;
+import com.squareup.okhttp.ResponseBody;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import okio.Buffer;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+public class LoganSquareConverterTest {
+
+  private static final MediaType MEDIA_TYPE = MediaType.parse("application/json; charset=UTF-8");
+  private LoganSquareConverter converter = new LoganSquareConverter();
+
+  //Simple JSON
+  private static final MyObject OBJECT = new MyObject("hello world", 10);
+  private final String JSON = "{\"message\":\"hello world\",\"count\":10}";
+
+  //JSON for testing List type
+  private final String LIST_JSON = "[{\"fullName\":\"sample\"}]";
+  private List<User> userList = new ArrayList<User>();
+
+  @Before
+  public void setUp() {
+    User user = new User("sample");
+    userList.add(user);
+  }
+
+  @Test
+  public void serialize() throws Exception {
+    RequestBody body = converter.toBody(OBJECT, MyObject.class);
+    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);
+    assertForEquality(body, JSON);
+  }
+
+  @Test
+  public void deserialize() throws Exception {
+    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);
+    MyObject result = (MyObject) converter.fromBody(body, MyObject.class);
+    assertThat(result).isEqualTo(OBJECT);
+  }
+
+  @Test
+  public void serializeList() throws Exception {
+    RequestBody body = converter.toBody(userList, Users.class);
+    assertThat(body.contentType()).isEqualTo(MEDIA_TYPE);
+    assertForEquality(body, LIST_JSON);
+  }
+
+  @Test
+  public void deserializeWrongValue() throws Exception {
+    ResponseBody body = ResponseBody.create(MEDIA_TYPE, "{\"foo\":\"bar\"}");
+    try {
+      converter.fromBody(body, MyObject.class);
+    } catch (Exception ignored) {
+    }
+  }
+
+  @Test
+  public void deserializeWrongClass() throws Exception {
+    ResponseBody body = ResponseBody.create(MEDIA_TYPE, JSON);
+    try {
+      converter.fromBody(body, String.class);
+      fail();
+    } catch (Exception ignored) {
+    }
+  }
+
+  private static void assertForEquality(final RequestBody requestBody, final String json) throws IOException {
+    Buffer buffer = new Buffer();
+    requestBody.writeTo(buffer);
+
+    JsonParser parser = new JsonParser();
+    JsonElement t1 = parser.parse(buffer.readUtf8());
+    JsonElement t2 = parser.parse(json);
+    assertThat(t1).isEqualTo(t2);
+  }
+}
diff --git a/retrofit-converters/logansquare/src/test/java/retrofit/converter/MyObject.java b/retrofit-converters/logansquare/src/test/java/retrofit/converter/MyObject.java
new file mode 100644
index 000000000..c08bc6640
--- /dev/null
+++ b/retrofit-converters/logansquare/src/test/java/retrofit/converter/MyObject.java
@@ -0,0 +1,46 @@
+package retrofit.converter;
+
+import com.bluelinelabs.logansquare.annotation.JsonField;
+import com.bluelinelabs.logansquare.annotation.JsonObject;
+
+@JsonObject
+public class MyObject {
+  @JsonField
+  String message;
+
+  @JsonField
+  int count;
+
+  public MyObject() {
+  }
+
+  public MyObject(String message, int count) {
+    this.message = message;
+    this.count = count;
+  }
+
+  public String getMessage() {
+    return message;
+  }
+
+  public int getCount() {
+    return count;
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+
+    MyObject myObject = (MyObject) o;
+    return count == myObject.count
+        && !(message != null ? !message.equals(myObject.message) : myObject.message != null);
+  }
+
+  @Override
+  public int hashCode() {
+    int result = message != null ? message.hashCode() : 0;
+    result = 31 * result + count;
+    return result;
+  }
+}
diff --git a/retrofit-converters/logansquare/src/test/java/retrofit/converter/User.java b/retrofit-converters/logansquare/src/test/java/retrofit/converter/User.java
new file mode 100644
index 000000000..2a0820305
--- /dev/null
+++ b/retrofit-converters/logansquare/src/test/java/retrofit/converter/User.java
@@ -0,0 +1,21 @@
+package retrofit.converter;
+
+import com.bluelinelabs.logansquare.annotation.JsonField;
+import com.bluelinelabs.logansquare.annotation.JsonObject;
+
+@JsonObject
+public class User {
+  @JsonField
+  String fullName;
+
+  public User() {
+  }
+
+  public User(String name) {
+    fullName = name;
+  }
+
+  public String getFullName() {
+    return fullName;
+  }
+}
diff --git a/retrofit-converters/logansquare/src/test/java/retrofit/converter/Users.java b/retrofit-converters/logansquare/src/test/java/retrofit/converter/Users.java
new file mode 100644
index 000000000..2ef4b7a01
--- /dev/null
+++ b/retrofit-converters/logansquare/src/test/java/retrofit/converter/Users.java
@@ -0,0 +1,30 @@
+package retrofit.converter;
+
+
+import com.bluelinelabs.logansquare.annotation.JsonField;
+import com.bluelinelabs.logansquare.annotation.JsonObject;
+
+import java.util.List;
+
+@JsonObject
+public class Users {
+
+  @JsonField
+  List<User> users;
+
+  public void setUsers(List<User> users) {
+    this.users = users;
+  }
+
+  public List<User> getUsers() {
+    return users;
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) return true;
+    if (o == null || getClass() != o.getClass()) return false;
+    Users userObj = (Users) o;
+    return userObj.getUsers().size() == users.size() && userObj.getUsers().equals(users);
+  }
+}
diff --git a/retrofit-converters/pom.xml b/retrofit-converters/pom.xml
index 9fa974fc9..8788ea4d7 100644
--- a/retrofit-converters/pom.xml
+++ b/retrofit-converters/pom.xml
@@ -19,5 +19,6 @@
     <module>jackson</module>
     <module>wire</module>
     <module>simplexml</module>
+    <module>logansquare</module>
   </modules>
 </project>
