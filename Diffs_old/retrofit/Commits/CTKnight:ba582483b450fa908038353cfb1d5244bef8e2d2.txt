diff --git a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
index dc5ad92d8..c35bc9118 100644
--- a/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
+++ b/retrofit-processors/src/main/kotlin/retrofit2/RetrofitCheckProcessor.kt
@@ -86,7 +86,7 @@ class RetrofitCheckProcessor : AbstractProcessor() {
     val parameterTypes = methodElement.parameters
 
     validateReturnType(methodElement, returnTypeName)
-//    validateParameterTypes(methodElement, parameterTypes)
+    validateParameterTypes(methodElement, parameterTypes)
     validateMethodAnnotations(methodElement, parameterTypes)
   }
 
@@ -94,8 +94,10 @@ class RetrofitCheckProcessor : AbstractProcessor() {
     methodElement: ExecutableElement,
     parameterTypes: List<VariableElement>
   ) {
-    TODO(
-        "not implemented") //To change body of created functions use File | Settings | File Templates.
+    parameterTypes.forEach {
+      val typeName = TypeName.get(it.asType())
+      checkUnresolvedType(it, typeName)
+    }
   }
 
   private fun validateMethodAnnotations(
@@ -137,13 +139,13 @@ class RetrofitCheckProcessor : AbstractProcessor() {
         processingEnvironment.error(element, ErrorMessage.METHOD_RETURN_VOID)
       }
       else -> {
-        containsUnresolvedType(element, typeName)
+        checkUnresolvedType(element, typeName)
       }
     }
     // TODO: use retrofit instance to check return types with call adapters and converters
   }
 
-  private fun containsUnresolvedType(
+  private fun checkUnresolvedType(
     element: Element,
     typeName: TypeName,
     recursiveLevel: Int = 0
@@ -156,17 +158,27 @@ class RetrofitCheckProcessor : AbstractProcessor() {
     when (typeName) {
       is TypeVariableName -> {
         processingEnvironment.error(element,
-            "${ErrorMessage.METHOD_RETURN_UNRESOLVED}: ${typeName.name}")
+            "${
+            if (element is ExecutableElement)
+              ErrorMessage.METHOD_RETURN_UNRESOLVED
+            else
+              ErrorMessage.METHOD_PARAMETER_UNRESOLVED
+            }: ${typeName.name}")
       }
       is WildcardTypeName -> {
         processingEnvironment.error(element,
-            ErrorMessage.METHOD_RETURN_UNRESOLVED)
+            if (element is ExecutableElement)
+              ErrorMessage.METHOD_RETURN_UNRESOLVED
+            else
+              ErrorMessage.METHOD_PARAMETER_UNRESOLVED
+        )
+
       }
       is ArrayTypeName ->
-        containsUnresolvedType(element, typeName.componentType, recursiveLevel + 1)
+        checkUnresolvedType(element, typeName.componentType, recursiveLevel + 1)
       is ParameterizedTypeName ->
         typeName.typeArguments.forEach {
-          containsUnresolvedType(element, it, recursiveLevel + 1)
+          checkUnresolvedType(element, it, recursiveLevel + 1)
         }
     }
   }
diff --git a/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java b/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java
deleted file mode 100644
index 374831e8f..000000000
--- a/retrofit-processors/src/test/java/retrofit2/processors/UnresolvableParameterType.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package retrofit2.processors;
-
-import com.sun.javafx.collections.MappingChange;
-import com.sun.tools.javac.util.List;
-import java.util.Set;
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.Body;
-import retrofit2.http.POST;
-
-@RetrofitService
-public interface UnresolvableParameterType {
-  @POST("/") <T> Call<ResponseBody> typeVariable(@Body T body);
-
-  @POST("/") <T extends RequestBody> Call<ResponseBody> typeVariableUpperBound(@Body T body);
-
-  @POST("/") <T> Call<ResponseBody> crazy(@Body List<MappingChange.Map<String, Set<T[]>>> body);
-
-  @POST("/") Call<ResponseBody> wildcard(@Body List<?> body);
-
-  @POST("/") Call<ResponseBody> wildcardUpperBound(@Body List<? extends RequestBody> body);
-}
diff --git a/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt b/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt
index 4a3117523..441209e41 100644
--- a/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt
+++ b/retrofit-processors/src/test/kotlin/retrofit2/processors/ParameterTypeTest.kt
@@ -2,14 +2,14 @@ package retrofit2.processors
 
 import com.google.testing.compile.Compilation
 import com.google.testing.compile.JavaFileObjects
+
 import org.intellij.lang.annotations.Language
 import org.junit.Test
 import kotlin.test.assertEquals
 
 class ParameterTypeTest {
-  @Test
-  fun typeVariableTest() {
-    @Language("JAVA") val TEST_SRC =
+  companion object {
+    @Language("JAVA") private val TYPE_VARIABLE_SRC =
         """
         package retrofit2.processors.test.type.parameter;
 
@@ -24,10 +24,107 @@ class ParameterTypeTest {
           @POST("/") <T> Call<ResponseBody> typeVariable(@Body T body);
         }
         """.trimIndent()
+    @Language("JAVA") val TYPE_VARIABLE_UPPER_BOUND_SRC =
+        """
+        package retrofit2.processors.test.type.parameter;
+
+        import okhttp3.RequestBody;
+        import okhttp3.ResponseBody;
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.Call;
+        import retrofit2.http.Body;
+        import retrofit2.http.POST;
+
+        @RetrofitService
+        public interface UnresolvableParameterType {
+          @POST("/") <T extends RequestBody> Call<ResponseBody> typeVariableUpperBound(@Body T body);
+        }
+        """.trimIndent()
+    @Language("JAVA") val CRAZY_SRC =
+        """
+        package retrofit2.processors.test.type.parameter;
+
+        import com.sun.javafx.collections.MappingChange;
+        import java.util.List;
+        import java.util.Set;
+        import okhttp3.ResponseBody;
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.Call;
+        import retrofit2.http.Body;
+        import retrofit2.http.POST;
+
+        @RetrofitService
+        public interface UnresolvableParameterType {
+          @POST("/") <T> Call<ResponseBody> crazy(@Body List<MappingChange.Map<String, Set<T[]>>> body);
+        }
+        """.trimIndent()
+    @Language("JAVA") val WILDCARD_SRC =
+        """
+        package retrofit2.processors.test.type.parameter;
+
+        import java.util.List;
+        import okhttp3.RequestBody;
+        import okhttp3.ResponseBody;
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.Call;
+        import retrofit2.http.Body;
+        import retrofit2.http.POST;
+
+        @RetrofitService
+        public interface UnresolvableParameterType {
+          @POST("/") Call<ResponseBody> wildcard(@Body List<?> body);
+        }
+        """.trimIndent()
+    @Language("JAVA") val WILDCARD_UPPER_BOUND_SRC =
+        """
+        package retrofit2.processors.test.type.parameter;
+
+        import java.util.List;
+        import okhttp3.RequestBody;
+        import okhttp3.ResponseBody;
+        import retrofit2.processors.RetrofitService;
+        import retrofit2.Call;
+        import retrofit2.http.Body;
+        import retrofit2.http.POST;
+
+        @RetrofitService
+        public interface UnresolvableParameterType {
+          @POST("/") Call<ResponseBody> wildcardUpperBound(@Body List<? extends RequestBody> body);
+        }
+        """.trimIndent()
+  }
+
+  @Test
+  fun typeVariableTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.parameter.UnresolvableParameterType",
+        TYPE_VARIABLE_SRC
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_PARAMETER_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
+  }
+
+  @Test
+  fun upperBoundTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.parameter.UnresolvableParameterType",
+        TYPE_VARIABLE_UPPER_BOUND_SRC
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals("${ErrorMessage.METHOD_PARAMETER_UNRESOLVED}: T",
+        compilation.errors().firstOrNull()?.getMessage())
+  }
 
+  @Test
+  fun crazyTest() {
     val compilation = compiler().compile(JavaFileObjects.forSourceLines(
-        "retrofit2.processors.test.type.response.UnresolvableParameterType",
-        TEST_SRC
+        "retrofit2.processors.test.type.parameter.UnresolvableParameterType",
+        CRAZY_SRC
     ))
 
     assertEquals(Compilation.Status.FAILURE, compilation.status())
@@ -35,4 +132,30 @@ class ParameterTypeTest {
     assertEquals("${ErrorMessage.METHOD_PARAMETER_UNRESOLVED}: T",
         compilation.errors().firstOrNull()?.getMessage())
   }
+
+  @Test
+  fun wildcardTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.parameter.UnresolvableParameterType",
+        WILDCARD_SRC
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals(ErrorMessage.METHOD_PARAMETER_UNRESOLVED,
+        compilation.errors().firstOrNull()?.getMessage())
+  }
+
+  @Test
+  fun wildcardUpperBoundTest() {
+    val compilation = compiler().compile(JavaFileObjects.forSourceLines(
+        "retrofit2.processors.test.type.parameter.UnresolvableParameterType",
+        WILDCARD_UPPER_BOUND_SRC
+    ))
+
+    assertEquals(Compilation.Status.FAILURE, compilation.status())
+    assertEquals(1, compilation.errors().size)
+    assertEquals(ErrorMessage.METHOD_PARAMETER_UNRESOLVED,
+        compilation.errors().firstOrNull()?.getMessage())
+  }
 }
\ No newline at end of file
