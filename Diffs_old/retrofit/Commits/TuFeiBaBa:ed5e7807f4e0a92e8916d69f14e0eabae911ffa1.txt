diff --git a/retrofit/src/main/java/retrofit2/Platform.java b/retrofit/src/main/java/retrofit2/Platform.java
index 3c3307b70..9744615c9 100644
--- a/retrofit/src/main/java/retrofit2/Platform.java
+++ b/retrofit/src/main/java/retrofit2/Platform.java
@@ -18,12 +18,15 @@
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
+
+import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
+
 import java.lang.invoke.MethodHandles.Lookup;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.util.concurrent.Executor;
+
 import javax.annotation.Nullable;
-import org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement;
 
 class Platform {
   private static final Platform PLATFORM = findPlatform();
@@ -34,6 +37,10 @@ static Platform get() {
 
   private static Platform findPlatform() {
     try {
+      //A call to {@code forName("X")} causes the class named
+      // {@code X} to be initialized.
+      //Class.forName(xxx.xx.xx)的作用就是要求JVM查找并加载指定的类，
+      // 如果在类中有静态初始化器的话，JVM必然会执行该类的静态代码段。
       Class.forName("android.os.Build");
       if (Build.VERSION.SDK_INT != 0) {
         return new Android();
diff --git a/retrofit/src/main/java/retrofit2/Retrofit.java b/retrofit/src/main/java/retrofit2/Retrofit.java
index 0c7de96a8..7c677085e 100644
--- a/retrofit/src/main/java/retrofit2/Retrofit.java
+++ b/retrofit/src/main/java/retrofit2/Retrofit.java
@@ -153,6 +153,7 @@
 
   private void eagerlyValidateMethods(Class<?> service) {
     Platform platform = Platform.get();
+    //遍历service所有方法，缓存service的所有方法
     for (Method method : service.getDeclaredMethods()) {
       if (!platform.isDefaultMethod(method)) {
         loadServiceMethod(method);
@@ -160,6 +161,11 @@ private void eagerlyValidateMethods(Class<?> service) {
     }
   }
 
+  /**
+   * 对service的方法进行缓存
+   * @param method
+   * @return
+   */
   ServiceMethod<?, ?> loadServiceMethod(Method method) {
     ServiceMethod<?, ?> result = serviceMethodCache.get(method);
     if (result != null) return result;
diff --git a/retrofit/src/main/java/retrofit2/Utils.java b/retrofit/src/main/java/retrofit2/Utils.java
index 80dd6cb0f..d042416ad 100644
--- a/retrofit/src/main/java/retrofit2/Utils.java
+++ b/retrofit/src/main/java/retrofit2/Utils.java
@@ -330,6 +330,11 @@ static Type getParameterUpperBound(int index, ParameterizedType type) {
     return paramType;
   }
 
+    /**
+     * 如果返回参数的组成中，有TypeVariable、WildcardType，就返回false
+     * @param type
+     * @return
+     */
   static boolean hasUnresolvableType(Type type) {
     if (type instanceof Class<?>) {
       return false;
@@ -352,6 +357,7 @@ static boolean hasUnresolvableType(Type type) {
     if (type instanceof WildcardType) {
       return true;
     }
+    //现在一共就那五种Type吧？这是因为考虑到以后Java扩充？
     String className = type == null ? "null" : type.getClass().getName();
     throw new IllegalArgumentException("Expected a Class, ParameterizedType, or "
         + "GenericArrayType, but <" + type + "> is of type " + className);
