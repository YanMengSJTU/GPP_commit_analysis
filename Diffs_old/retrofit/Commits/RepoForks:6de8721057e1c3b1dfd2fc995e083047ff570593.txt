diff --git a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
index 615579b0e..d9af0a219 100644
--- a/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
+++ b/retrofit-processor/src/main/resources/retrofit/processor/retrofit.vm
@@ -505,6 +505,11 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
 
                 return Observable.create(new OnSubscribeResponse(okHttpClient, request));
             }
+        }).doOnNext(new Action1<com.squareup.okhttp.Response>() {
+            @Override public void call(com.squareup.okhttp.Response response) {
+                retrofit.client.Response retrofitResponse = parseResponse(response);
+                if (!response.isSuccessful()) throw retrofit.RetrofitError.httpError(response.request().urlString(), retrofitResponse, null, null);
+            }
 
     #if (!$retryHeaders.isEmpty())
 
@@ -552,6 +557,8 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 } else if (e instanceof RequestException) {
                     System.out.println("retrofit: OnSubscribeResponse.onError(): is RequestException: " + e);
                     retrofitError = retrofit.RetrofitError.networkError(_finalUrl, (IOException) ((RequestException) e).getCause());
+                } else if (e instanceof retrofit.RetrofitError) {
+                    retrofitError = (retrofit.RetrofitError) e;
                 } else {
                     System.out.println("retrofit: OnSubscribeResponse.onError(): not IOException/RequestException: " + e);
                     retrofitError = retrofit.RetrofitError.unexpectedError(_finalUrl, e);
@@ -647,12 +654,12 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                         return Observable.error(retrofitError);
                     }
                     Throwable handledError = errorHandler.handleError(retrofitError);
-                    if (handledError != null) return Observable.just(null); // returns null if blocking
+                    if (handledError != null) return Observable.empty();
                     else return Observable.error(handledError);
                 }
             })
 
-            .subscribeOn(Schedulers.io()).toBlocking().single();
+            .subscribeOn(Schedulers.io()).toBlocking().singleOrDefault(null);
 
         #else
 
@@ -672,7 +679,7 @@ public final class $subclass$formalTypes extends $origClass$actualTypes {
                 }
             })
 
-            .subscribeOn(Schedulers.io()).toBlocking().single();
+            .subscribeOn(Schedulers.io()).toBlocking().singleOrDefault(null);
 
         #end
     #elseif ($p.callback)
diff --git a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
index 1936a5553..be9ae0a3c 100644
--- a/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
+++ b/retrofit2-github/src/test/java/com/github/retrofit2/MainTest.java
@@ -44,6 +44,7 @@
 import com.squareup.okhttp.mockwebserver.MockResponse;
 import com.squareup.okhttp.mockwebserver.MockWebServer;
 import com.squareup.okhttp.HttpUrl;
+import java.net.HttpURLConnection;
 
 public class MainTest {
     @Test
@@ -355,27 +356,72 @@ public void testRequestInterceptorOnMethod() {
     @Test
     public void testErrorHandler() { // SocketTimeoutException
         MockWebServer server = new MockWebServer();
+        //server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
         try {
             server.start();
-        } catch (Throwable e) {}
+        } catch (Throwable e) {
+            System.out.println("server start() error: " + e);
+        }
         final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
         //MockService service = MockService.create();
         MockService service = MockService.builder()
             .errorHandler(new ErrorHandler() {
                 @Override public Throwable handleError(RetrofitError cause) {
                     hasErrorHandled.set(true);
+
+                    System.out.println("ErrorHandler: " + cause);
+
                     Response r = cause.getResponse();
-                    if (r != null && r.getStatus() == 401) {
-                        return new RuntimeException("401", cause);
+
+                    System.out.println("ErrorHandler: Response: " + r);
+                    if (r != null) {
+                        System.out.println("ErrorHandler: status: " + r.getStatus());
+                        if (r.getStatus() == 401) {
+                            return new RuntimeException("401", cause);
+                        }
                     }
+
                     return cause;
                 }
             })
         .build();
+        String s = service.get(server.url("/").toString());
+        assertTrue(hasErrorHandled.get());
+    }
+
+    @Test
+    public void testHttpErrorHandler() {
+        MockWebServer server = new MockWebServer();
+        server.enqueue(new MockResponse().setResponseCode(HttpURLConnection.HTTP_NOT_FOUND));
         try {
-            String s = service.get(server.url("/").toString());
+            server.start();
         } catch (Throwable e) {
+            System.out.println("server start() error: " + e);
         }
+        final AtomicBoolean hasErrorHandled = new AtomicBoolean(false);
+        //MockService service = MockService.create();
+        MockService service = MockService.builder()
+            .errorHandler(new ErrorHandler() {
+                @Override public Throwable handleError(RetrofitError cause) {
+                    hasErrorHandled.set(true);
+
+                    System.out.println("ErrorHandler: " + cause);
+
+                    Response r = cause.getResponse();
+
+                    System.out.println("ErrorHandler: Response: " + r);
+                    if (r != null) {
+                        System.out.println("ErrorHandler: status: " + r.getStatus());
+                        if (r.getStatus() == 401) {
+                            return new RuntimeException("401", cause);
+                        }
+                    }
+
+                    return cause;
+                }
+            })
+        .build();
+        String s = service.get(server.url("/").toString());
         assertTrue(hasErrorHandled.get());
     }
 
