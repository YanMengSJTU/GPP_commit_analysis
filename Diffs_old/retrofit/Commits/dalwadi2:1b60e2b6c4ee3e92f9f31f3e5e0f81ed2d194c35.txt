diff --git a/retrofit/src/main/java/retrofit2/CustomCallback.java b/retrofit/src/main/java/retrofit2/CustomCallback.java
new file mode 100644
index 000000000..1f0694f24
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/CustomCallback.java
@@ -0,0 +1,15 @@
+package harsh.dalwadi.retrofitretryhelper;
+
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+
+public interface CustomCallback<T> extends Callback<T> {
+    /**
+     * Invoked when a network fluctuation occurred talking to the server
+     * on processing the response.
+     *
+     * @param errorCode - when after retrying the call still fails with errocode
+     */
+    void onFailResponse(int errorCode, Call<T> call, Response<T> response);
+}
diff --git a/retrofit/src/main/java/retrofit2/RetryCallback.java b/retrofit/src/main/java/retrofit2/RetryCallback.java
new file mode 100644
index 000000000..5747ca7e5
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/RetryCallback.java
@@ -0,0 +1,58 @@
+package harsh.dalwadi.retrofitretryhelper;
+
+import android.util.Log;
+
+import retrofit2.Call;
+import retrofit2.Response;
+
+class RetryCallback<T> implements CustomCallback<T> {
+    private int totalRetries = 0;
+    private static final String TAG = RetryCallback.class.getSimpleName();
+    private final Call<T> call;
+    private int retryCount = 0;
+
+    RetryCallback(Call<T> call, int totalRetries) {
+        this.call = call;
+        this.totalRetries = totalRetries;
+    }
+
+    @Override
+    public void onResponse(Call<T> call, Response<T> response) {
+        if (!RetryHelper.isCallSuccess(response)) {
+            if (retryCount++ < totalRetries) {
+                retry();
+            } else {
+                onFinalFail(response.code(),call,response);
+            }
+        } else {
+            onFinalResponse(call, response);
+        }
+    }
+
+
+    @Override
+    public void onFailure(Call<T> call, Throwable t) {
+        onFinalFailure(call, t);
+    }
+
+    @Override
+    public void onFailResponse(int errorCode, Call<T> call, Response<T> response) {
+        onFinalFail(response.code(), call, response);
+    }
+
+    public void onFinalResponse(Call<T> call, Response<T> response) {
+
+    }
+
+    public void onFinalFailure(Call<T> call, Throwable t) {
+
+    }
+
+    public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
+
+    }
+
+    private void retry() {
+        call.clone().enqueue(this);
+    }
+}
diff --git a/retrofit/src/main/java/retrofit2/RetryHelper.java b/retrofit/src/main/java/retrofit2/RetryHelper.java
new file mode 100644
index 000000000..fef564ea2
--- /dev/null
+++ b/retrofit/src/main/java/retrofit2/RetryHelper.java
@@ -0,0 +1,66 @@
+package harsh.dalwadi.retrofitretryhelper;
+
+import retrofit2.Call;
+import retrofit2.Response;
+
+/**
+ * we can use this class directly to access the network calls when you
+ * are facing problem with different error code then success code and in that
+ * case if you you want to set autometically retry the network call.
+ */
+public class RetryHelper {
+    private static final int DEFAULT_RETRIES = 1;
+    private static int SUCCESS_CODE = 200;
+
+    /**
+     * Method with custom retry counts
+     */
+    public static <T> void enqueueRetry(Call<T> call, final int retryCount, final CustomCallback<T> callback) {
+        call.enqueue(new RetryCallback<T>(call, retryCount) {
+            @Override
+            public void onFinalFail(int errorCode, Call<T> call, Response<T> response) {
+                callback.onFailResponse(errorCode, call, response);
+            }
+
+            @Override
+            public void onFinalResponse(Call<T> call, Response<T> response) {
+                callback.onResponse(call, response);
+            }
+
+            @Override
+            public void onFinalFailure(Call<T> call, Throwable t) {
+                callback.onFailure(call, t);
+            }
+        });
+    }
+
+    /**
+     * if you are go with default retry counts
+     */
+    public static <T> void enqueueRetry(Call<T> call, final CustomCallback<T> callback) {
+        enqueueRetry(call, DEFAULT_RETRIES, callback);
+    }
+
+    static boolean isCallSuccess(Response response) {
+        return response.code() == SUCCESS_CODE;
+    }
+
+    /**
+     * getter method to get the success code
+     *
+     * @return Success code
+     */
+    public static int getSuccessCode() {
+        return SUCCESS_CODE;
+    }
+
+    /**
+     * setter method to set custom success code
+     *
+     * @param successCode
+     */
+    public static void setSuccessCode(int successCode) {
+        RetryHelper.SUCCESS_CODE = successCode;
+    }
+
+}
diff --git a/samples/src/main/java/com/example/retrofit/SimpleRetryService.java b/samples/src/main/java/com/example/retrofit/SimpleRetryService.java
new file mode 100644
index 000000000..563277fec
--- /dev/null
+++ b/samples/src/main/java/com/example/retrofit/SimpleRetryService.java
@@ -0,0 +1,83 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.example.retrofit;
+
+import java.io.IOException;
+import java.util.List;
+import retrofit2.Call;
+import retrofit2.converter.gson.GsonConverterFactory;
+import retrofit2.Retrofit;
+import retrofit2.http.GET;
+import retrofit2.http.Path;
+
+public final class SimpleService {
+  public static final String API_URL = "https://api.github.com";
+
+  public static class Contributor {
+    public final String login;
+    public final int contributions;
+
+    public Contributor(String login, int contributions) {
+      this.login = login;
+      this.contributions = contributions;
+    }
+  }
+
+  public interface GitHub {
+    @GET("/repos/{owner}/{repo}/contributors")
+    Call<List<Contributor>> contributors(
+        @Path("owner") String owner,
+        @Path("repo") String repo);
+  }
+
+  public static void main(String... args) throws IOException {
+    // Create a very simple REST adapter which points the GitHub API.
+    Retrofit retrofit = new Retrofit.Builder()
+        .baseUrl(API_URL)
+        .addConverterFactory(GsonConverterFactory.create())
+        .build();
+
+    // Create an instance of our GitHub API interface.
+    GitHub github = retrofit.create(GitHub.class);
+
+    // Create a call instance for looking up Retrofit contributors.
+    Call<List<Contributor>> call = github.contributors("square", "retrofit");
+
+    // Fetch and print a list of the contributors to the library.
+    RetryHelper.setSuccessCode(200);
+
+    RetryHelper.enqueueRetry(responseCall, 3, new CustomCallback<List<Contributor>>() {
+      @Override
+      public void onFailResponse(int errorCode, Call<List<Contributor>> call, Response<List<Contributor>> response) {
+        Log.e(TAG, "onFailResponse() called with: errorCode = [" + errorCode + "], call = [" + call + "], response = [" + response + "]");
+      }
+
+      @Override
+      public void onResponse(Call<List<Contributor>> call, Response<List<Contributor>> response) {
+        Log.e(TAG, "Success" + response.code());
+        for (Contributor contributor : contributors) {
+          System.out.println(contributor.login + " (" + contributor.contributions + ")");
+        }
+      }
+
+      @Override
+      public void onFailure(Call<List<Contributor>> call, Throwable t) {
+        Log.e(TAG, "onFailure: " + t.getMessage());
+      }
+    });
+
+  }
+}
