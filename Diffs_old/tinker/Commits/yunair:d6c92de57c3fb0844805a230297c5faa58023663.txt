diff --git a/gradle/android-artifacts.gradle b/gradle/android-artifacts.gradle
index 47735f09..1d14ded6 100644
--- a/gradle/android-artifacts.gradle
+++ b/gradle/android-artifacts.gradle
@@ -87,6 +87,8 @@ publishing {
     }
 }
 
-task buildAndPublishLocalMaven(dependsOn: ['build', 'publishTinkerPatchPublicationToMavenLocal']) {}
+task buildAndPublishTinkerToLocalMaven(dependsOn: ['build', 'publishTinkerPatchPublicationToMavenLocal']) {
+    group = 'tinker'
+}
 //depend checkstyle
 project.tasks.getByName("check").dependsOn tasks.getByName("checkstyle")
diff --git a/gradle/java-artifacts.gradle b/gradle/java-artifacts.gradle
index 9b8b6e3b..8f498a2e 100644
--- a/gradle/java-artifacts.gradle
+++ b/gradle/java-artifacts.gradle
@@ -39,7 +39,9 @@ publishing {
     }
 }
 
-task buildAndPublishLocalMaven(dependsOn: ['build', 'publishTinkerPatchPublicationToMavenLocal']) {}
+task buildAndPublishTinkerToLocalMaven(dependsOn: ['build', 'publishTinkerPatchPublicationToMavenLocal']) {
+    group = 'tinker'
+}
 
 //depend checkstyle
 project.tasks.getByName("check").dependsOn tasks.getByName("checkstyle")
\ No newline at end of file
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
index 03ba6974..dddf162f 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
+import android.os.Build;
 import android.os.SystemClock;
 
 import com.tencent.tinker.commons.dexpatcher.DexPatchApplier;
@@ -53,7 +54,6 @@
 
     protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck checker, Context context,
                                                 String patchVersionDirectory, File patchFile, boolean isUpgradePatch) {
-
         if (!manager.isEnabledForDex()) {
             TinkerLog.w(TAG, "patch recover, dex is not enabled");
             return true;
@@ -73,6 +73,8 @@ protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck c
     }
 
     private static boolean patchDexExtractViaDexDiff(Context context, String patchVersionDirectory, String meta, File patchFile, boolean isUpgradePatch) {
+        checkVmArtProperty();
+
         String dir = patchVersionDirectory + "/" + DEX_PATH + "/";
 
         int dexType = ShareTinkerInternals.isVmArt() ? TYPE_DEX_FOR_ART : TYPE_DEX;
@@ -180,6 +182,10 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                 String dexDiffMd5 = info.dexDiffMd5;
                 String oldDexCrc = info.oldDexCrC;
 
+                if (!ShareTinkerInternals.isVmArt() && info.destMd5InDvm.equals("0")) {
+                    TinkerLog.w(TAG, "patch dex %s is only for art, just continue", patchRealPath);
+                    continue;
+                }
                 String extractedFileMd5 = ShareTinkerInternals.isVmArt() ? info.destMd5InArt : info.destMd5InDvm;
 
                 if (!SharePatchFileUtil.checkIfMd5Valid(extractedFileMd5)) {
@@ -240,21 +246,46 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                         return false;
                     }
 
-                    InputStream oldDexIs = null;
+                    final boolean isRawDexFile = SharePatchFileUtil.isRawDexFile(info.rawName);
+                    InputStream oldInputStream = apk.getInputStream(rawApkFileEntry);
+                    //if it is not the dex file or we are using jar mode, we should repack the output dex to jar
                     try {
-                        oldDexIs = apk.getInputStream(rawApkFileEntry);
-                        new DexPatchApplier(oldDexIs, (int) rawApkFileEntry.getSize(), null, smallPatchInfoFile).executeAndSaveTo(extractedFile);
-                    } catch (Throwable e) {
-                        TinkerLog.w(TAG, "Failed to recover dex file " + extractedFile.getPath());
-                        manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);
-                        SharePatchFileUtil.safeDeleteFile(extractedFile);
-                        return false;
+                        if (!isRawDexFile || info.isJarMode) {
+                            FileOutputStream fos = new FileOutputStream(extractedFile);
+                            ZipOutputStream zos = new ZipOutputStream(new
+                                    BufferedOutputStream(fos));
+                            try {
+                                zos.putNextEntry(new ZipEntry(ShareConstants.DEX_IN_JAR));
+                                //it is not a raw dex file, we do not want to any temp files
+                                int oldDexSize;
+                                if (!isRawDexFile) {
+                                    ZipEntry entry;
+                                    ZipInputStream zis = new ZipInputStream(oldInputStream);
+                                    while ((entry = zis.getNextEntry()) != null) {
+                                        if (ShareConstants.DEX_IN_JAR.equals(entry.getName())) break;
+                                    }
+                                    if (entry == null) {
+                                        throw new TinkerRuntimeException("can't recognize zip dex format file:" + extractedFile.getAbsolutePath());
+                                    }
+                                    oldInputStream = zis;
+                                    oldDexSize = (int) entry.getSize();
+                                } else {
+                                    oldDexSize = (int) rawApkFileEntry.getSize();
+                                }
+                                new DexPatchApplier(oldInputStream, oldDexSize, null, smallPatchInfoFile).executeAndSaveTo(zos);
+                                zos.closeEntry();
+                            } finally {
+                                SharePatchFileUtil.closeQuietly(zos);
+                            }
+                        } else {
+                            new DexPatchApplier(oldInputStream, (int) rawApkFileEntry.getSize(), null, smallPatchInfoFile).executeAndSaveTo(extractedFile);
+                        }
                     } finally {
-                        SharePatchFileUtil.closeQuietly(oldDexIs);
+                        SharePatchFileUtil.closeQuietly(oldInputStream);
                     }
 
                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {
-                        TinkerLog.w(TAG, "Failed to recover dex file " + extractedFile.getPath());
+                        TinkerLog.w(TAG, "Failed to recover dex file when verify patched dex: " + extractedFile.getPath());
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);
                         SharePatchFileUtil.safeDeleteFile(extractedFile);
                         return false;
@@ -328,7 +359,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                     }
 
                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {
-                        TinkerLog.w(TAG, "Failed to recover dex file " + extractedFile.getPath());
+                        TinkerLog.w(TAG, "Failed to recover dex file when verify patched dex: " + extractedFile.getPath());
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type, isUpgradePatch);
                         SharePatchFileUtil.safeDeleteFile(extractedFile);
                         return false;
@@ -403,6 +434,16 @@ private static boolean extractDexToJar(ZipFile zipFile, ZipEntry entryFile, File
         return isExtractionSuccessful;
     }
 
+    /**
+     * reject dalvik vm, but sdk version is larger than 21
+     */
+    private static void checkVmArtProperty() {
+        boolean art = ShareTinkerInternals.isVmArt();
+        if (!art && Build.VERSION.SDK_INT >= 21) {
+            throw new TinkerRuntimeException("it is dalvik vm, but sdk version " + Build.VERSION.SDK_INT + " is larger than 21!");
+        }
+    }
+
     private static boolean extractDexFile(ZipFile zipFile, ZipEntry entryFile, File extractTo, ShareDexDiffPatchInfo dexInfo) throws IOException {
         final String fileMd5 = ShareTinkerInternals.isVmArt() ? dexInfo.destMd5InArt : dexInfo.destMd5InDvm;
         final String rawName = dexInfo.rawName;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
index bdbcd9ba..bde1e228 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
@@ -101,7 +101,7 @@ public boolean tryPatch(Context context, String tempPatchPath, PatchResult patch
         //check ok, we can real recover a new patch
         final String patchDirectory = manager.getPatchDirectory().getAbsolutePath();
 
-        TinkerLog.i(TAG, "UpgradePatch tryPatch:dexDiffMd5:%s", patchMd5);
+        TinkerLog.i(TAG, "UpgradePatch tryPatch:patchMd5:%s", patchMd5);
 
         final String patchName = SharePatchFileUtil.getPatchVersionDirectory(patchMd5);
 
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultLoadReporter.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultLoadReporter.java
index 75b3a76c..7fe4c3e1 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultLoadReporter.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultLoadReporter.java
@@ -234,6 +234,7 @@ public void onLoadException(Throwable e, int errorCode) {
                 //exception can be caught, it is no need to disable Tinker with sharedPreference
                 break;
         }
+        TinkerLog.e(TAG, "tinker load exception, welcome to submit issue to us: https://github.com/Tencent/tinker/issues");
         TinkerLog.printErrStackTrace(TAG, e, "tinker load exception");
 
         Tinker.with(context).setTinkerDisable();
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultPatchReporter.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultPatchReporter.java
index 88a9a406..f0e813f3 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultPatchReporter.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/reporter/DefaultPatchReporter.java
@@ -180,6 +180,7 @@ public void onPatchInfoCorrupted(File patchFile, String oldVersion, String newVe
     @Override
     public void onPatchException(File patchFile, Throwable e, boolean isUpgradePatch) {
         TinkerLog.i(TAG, "patchReporter: patch exception path:%s, throwable:%s, isUpgrade:%b", patchFile.getAbsolutePath(), e.getMessage(), isUpgradePatch);
+        TinkerLog.e(TAG, "tinker patch exception, welcome to submit issue to us: https://github.com/Tencent/tinker/issues");
         TinkerLog.printErrStackTrace(TAG, e, "tinker patch exception");
         //don't accept request any more!
         Tinker.with(context).setTinkerDisable();
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index 12281e2c..5afbdf35 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -154,13 +154,17 @@ private void increasingPriority() {
             return;
         }
         TinkerLog.i(TAG, "try to increase patch process priority");
-        Notification notification = new Notification();
-        if (Build.VERSION.SDK_INT < 18) {
-            startForeground(notificationId, notification);
-        } else {
-            startForeground(notificationId, notification);
-            // start InnerService
-            startService(new Intent(this, InnerService.class));
+        try {
+            Notification notification = new Notification();
+            if (Build.VERSION.SDK_INT < 18) {
+                startForeground(notificationId, notification);
+            } else {
+                startForeground(notificationId, notification);
+                // start InnerService
+                startService(new Intent(this, InnerService.class));
+            }
+        } catch (Throwable e) {
+            TinkerLog.i(TAG, "try to increase patch process priority error:" + e);
         }
     }
 
@@ -174,7 +178,7 @@ public void onCreate() {
             super.onCreate();
             try {
                 startForeground(notificationId, new Notification());
-            } catch (NullPointerException e) {
+            } catch (Throwable e) {
                 TinkerLog.e(TAG, "InnerService set service for push exception:%s.", e);
             }
             // kill
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
index 96925995..56f1c0f8 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
@@ -23,6 +23,7 @@
 import android.util.Log;
 
 import com.tencent.tinker.loader.shareutil.ShareConstants;
+import com.tencent.tinker.loader.shareutil.ShareReflectUtil;
 
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Field;
@@ -35,17 +36,19 @@
 import static android.os.Build.VERSION_CODES.KITKAT;
 
 class TinkerResourcePatcher {
-    private static final String TAG = "Tinker.ResourcePatcher";
-    private static final String TEST_STRING_NAME  = "tinker_test_resource";
-    private static final String TEST_STRING_VALUE = "only use for test tinker resource: b";
+    private static final String TAG               = "Tinker.ResourcePatcher";
+    private static final String TEST_ASSETS_VALUE = "only_use_to_test_tinker_resource.txt";
+
     // original value
     private static Collection<WeakReference<Resources>> references;
     private static AssetManager newAssetManager          = null;
     private static Method       addAssetPathMethod       = null;
     private static Method       ensureStringBlocksMethod = null;
     private static Field        assetsFiled              = null;
-    private static Field        resourcesImplFiled      = null;
-    private static Field        resDir      = null;
+    private static Field        resourcesImplFiled       = null;
+    private static Field        resDir                   = null;
+    private static Field        packagesFiled            = null;
+    private static Field        resourcePackagesFiled    = null;
 
     public static void isResourceCanPatch(Context context) throws Throwable {
         //   - Replace mResDir to point to the external resource file instead of the .apk. This is
@@ -54,7 +57,6 @@ public static void isResourceCanPatch(Context context) throws Throwable {
 
         // Find the ActivityThread instance for the current thread
         Class<?> activityThread = Class.forName("android.app.ActivityThread");
-        Object currentActivityThread = getActivityThread(context, activityThread);
         // API version 8 has PackageInfo, 10 has LoadedApk. 9, I don't know.
         Class<?> loadedApkClass;
         try {
@@ -66,7 +68,11 @@ public static void isResourceCanPatch(Context context) throws Throwable {
         mApplication.setAccessible(true);
         resDir = loadedApkClass.getDeclaredField("mResDir");
         resDir.setAccessible(true);
+        packagesFiled = activityThread.getDeclaredField("mPackages");
+        packagesFiled.setAccessible(true);
 
+        resourcePackagesFiled = activityThread.getDeclaredField("mResourcePackages");
+        resourcePackagesFiled.setAccessible(true);
         /*
         (Note: the resource directory is *also* inserted into the loadedApk in
         monkeyPatchApplication)
@@ -100,7 +106,15 @@ public static void isResourceCanPatch(Context context) throws Throwable {
         */
         // Create a new AssetManager instance and point it to the resources installed under
         // /sdcard
-        newAssetManager = AssetManager.class.getConstructor().newInstance();
+        AssetManager assets = context.getAssets();
+        // Baidu os
+        if (assets.getClass().getName().equals("android.content.res.BaiduAssetManager")) {
+            Class baiduAssetManager = Class.forName("android.content.res.BaiduAssetManager");
+            newAssetManager = (AssetManager) baiduAssetManager.getConstructor().newInstance();
+        } else {
+            newAssetManager = AssetManager.class.getConstructor().newInstance();
+        }
+
         addAssetPathMethod = AssetManager.class.getDeclaredMethod("addAssetPath", String.class);
         addAssetPathMethod.setAccessible(true);
 
@@ -133,9 +147,10 @@ public static void isResourceCanPatch(Context context) throws Throwable {
         } else {
             Field fMActiveResources = activityThread.getDeclaredField("mActiveResources");
             fMActiveResources.setAccessible(true);
+            Object thread = getActivityThread(context, activityThread);
             @SuppressWarnings("unchecked")
             HashMap<?, WeakReference<Resources>> map =
-                (HashMap<?, WeakReference<Resources>>) fMActiveResources.get(currentActivityThread);
+                (HashMap<?, WeakReference<Resources>>) fMActiveResources.get(thread);
             references = map.values();
         }
         // check resource
@@ -160,9 +175,7 @@ public static void monkeyPatchExistingResources(Context context, String external
         Class<?> activityThread = Class.forName("android.app.ActivityThread");
         Object currentActivityThread = getActivityThread(context, activityThread);
 
-        for (String fieldName : new String[]{"mPackages", "mResourcePackages"}) {
-            Field field = activityThread.getDeclaredField(fieldName);
-            field.setAccessible(true);
+        for (Field field : new Field[]{packagesFiled, resourcePackagesFiled}) {
             Object value = field.get(currentActivityThread);
 
             for (Map.Entry<String, WeakReference<?>> entry
@@ -172,14 +185,12 @@ public static void monkeyPatchExistingResources(Context context, String external
                     continue;
                 }
                 if (externalResourceFile != null) {
-                   resDir.set(loadedApk, externalResourceFile);
+                    resDir.set(loadedApk, externalResourceFile);
                 }
-
             }
         }
         // Create a new AssetManager instance and point it to the resources installed under
         // /sdcard
-
         if (((Integer) addAssetPathMethod.invoke(newAssetManager, externalResourceFile)) == 0) {
             throw new IllegalStateException("Could not create new AssetManager");
         }
@@ -196,9 +207,10 @@ public static void monkeyPatchExistingResources(Context context, String external
                 try {
                     assetsFiled.set(resources, newAssetManager);
                 } catch (Throwable ignore) {
-                    //N
+                    // N
                     Object resourceImpl = resourcesImplFiled.get(resources);
-                    Field implAssets = resourceImpl.getClass().getDeclaredField("mAssets");
+                    // for Huawei HwResourcesImpl
+                    Field implAssets = ShareReflectUtil.findField(resourceImpl, "mAssets");
                     implAssets.setAccessible(true);
                     implAssets.set(resourceImpl, newAssetManager);
                 }
@@ -213,19 +225,16 @@ public static void monkeyPatchExistingResources(Context context, String external
     }
 
     private static boolean checkResUpdate(Context context) {
-        int testStringID = context.getResources().getIdentifier(TEST_STRING_NAME, "string", context.getPackageName());
-        if (testStringID > 0) {
-            String value = context.getString(testStringID);
-            Log.w(TAG, "checkResUpdate resource value:" + value);
-
-            if (!value.equals(TEST_STRING_VALUE)) {
-                return false;
-            }
-        } else  {
-            Log.e(TAG, "checkResUpdate resource id < 0 " + testStringID);
+        try {
+            Log.e(TAG, "checkResUpdate success, found test resource assets file " + TEST_ASSETS_VALUE);
+            context.getAssets().open(TEST_ASSETS_VALUE);
+        } catch (Throwable e) {
+            Log.e(TAG, "checkResUpdate failed, can't find test resource assets file " + TEST_ASSETS_VALUE + " e:" + e.getMessage());
+            return false;
         }
         return true;
     }
+
     private static Object getActivityThread(Context context,
                                             Class<?> activityThread) {
         try {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
index ddfee922..31d368ad 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
@@ -208,17 +208,25 @@ public static boolean verifyDexFileMd5(File file, String md5) {
             try {
                 dexJar = new ZipFile(file);
                 ZipEntry classesDex = dexJar.getEntry(ShareConstants.DEX_IN_JAR);
-
                 // no code
                 if (null == classesDex) {
+                    Log.e(TAG, "There's no entry named: " + ShareConstants.DEX_IN_JAR + " in " + file.getAbsolutePath());
                     return false;
                 }
                 fileMd5 = getMD5(dexJar.getInputStream(classesDex));
             } catch (IOException e) {
-//                e.printStackTrace();
+                Log.e(TAG, "Bad dex jar file: " + file.getAbsolutePath(), e);
                 return false;
             } finally {
-                SharePatchFileUtil.closeZip(dexJar);
+                // Bugfix: some device redefined ZipFile, which is not implemented closeable.
+                // SharePatchFileUtil.closeZip(dexJar);
+                if (dexJar != null) {
+                    try {
+                        dexJar.close();
+                    } catch (Throwable thr) {
+                        // Ignored.
+                    }
+                }
             }
         }
 
diff --git a/tinker-android/tinker-android-loader/src/main/res/values/strings.xml b/tinker-android/tinker-android-loader/src/main/res/values/strings.xml
deleted file mode 100644
index 4c563702..00000000
--- a/tinker-android/tinker-android-loader/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,3 +0,0 @@
-<resources>
-    <string name="tinker_test_resource">only use for test tinker resource: a</string>
-</resources>
diff --git a/tinker-build/tinker-patch-cli/tool_output/tinker_config.xml b/tinker-build/tinker-patch-cli/tool_output/tinker_config.xml
index f62489f0..de0c6c99 100644
--- a/tinker-build/tinker-patch-cli/tool_output/tinker_config.xml
+++ b/tinker-build/tinker-patch-cli/tool_output/tinker_config.xml
@@ -82,6 +82,12 @@
         <!--or TinkerLoadResult.getPackageConfigByName-->
         <!--you must add TINKER_ID with the old apk manifest's meta TINKER_ID value-->
         <!--other config files (such as patchMessage below)is not necessary-->
+
+        <!--For sample project or any projects that copy SamplePatchListener directory,-->
+        <!--platform config field is necessary, or an error code ERROR_PATCH_CONDITION_NOT_SATISFIED(-10)-->
+        <!--will be thrown.-->
+        <configField name="platform" value="all"/>
+
         <configField name="patchMessage" value="classes.dex"/>
     </issue>
 
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
index 04007409..aeed13c3 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
@@ -51,20 +51,32 @@ class TinkerPatchPlugin implements Plugin<Project> {
 
         def configuration = project.tinkerPatch
 
-        project.android.registerTransform(new AuxiliaryInjectTransform(project))
+        if (!project.plugins.hasPlugin('com.android.application')) {
+            throw new GradleException('generateTinkerApk: Android Application plugin required')
+        }
 
-        project.afterEvaluate {
-            if (!project.plugins.hasPlugin('com.android.application')) {
-                throw new GradleException('generateTinkerApk: Android Application plugin required')
-            }
+        def android = project.extensions.android
+
+        //add the tinker anno resource to the package exclude option
+        project.logger.error("** Tinker Auto Operation: Excluding annotation processor and source template from app packaging.")
+        android.packagingOptions.exclude("META-INF/services/javax.annotation.processing.Processor")
+        android.packagingOptions.exclude("TinkerAnnoApplication.tmpl")
 
-            def android = project.extensions.android
-            //add the tinker anno resource to the package exclude option
-            android.packagingOptions.exclude("META-INF/services/javax.annotation.processing.Processor")
-            android.packagingOptions.exclude("TinkerAnnoApplication.tmpl")
-            //open jumboMode
-            android.dexOptions.jumboMode = true
+        //open jumboMode
+        project.logger.error("** Tinker Auto Operation: Enable dx jumboMode to reduce package size.")
+        android.dexOptions.jumboMode = true
 
+        //close preDexLibraries
+        project.logger.error("** Tinker Auto Operation: Disable preDexLibraries to prevent ClassDefNotFoundException when your app is booting.")
+        try {
+            android.dexOptions.preDexLibraries = false
+        } catch (Throwable e) {
+            //no preDexLibraries field, just continue
+        }
+
+        android.registerTransform(new AuxiliaryInjectTransform(project))
+
+        project.afterEvaluate {
             project.logger.error("----------------------tinker build warning ------------------------------------")
             project.logger.error("tinker will change your build configs:")
             project.logger.error("we will add TINKER_ID=${configuration.buildConfig.tinkerId} in your build output manifest file build/intermediates/manifests/full/*")
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
index a74cfea6..ca82f447 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
@@ -87,9 +87,9 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback
             Map<String, Integer> processedEntryNamesMap = new HashMap<>();
             while ((entryIn = zis.getNextEntry()) != null) {
                 final String entryName = entryIn.getName();
-                ZipEntry entryOut = new ZipEntry(entryIn);
-                entryOut.setCompressedSize(-1);
                 if (!processedEntryNamesMap.containsKey(entryName)) {
+                    ZipEntry entryOut = new ZipEntry(entryIn);
+                    entryOut.setCompressedSize(-1);
                     zos.putNextEntry(entryOut);
                     if (!entryIn.isDirectory()) {
                         if (entryName.endsWith(".class")) {
@@ -104,14 +104,6 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback
                     }
                     zos.closeEntry();
                     processedEntryNamesMap.put(entryName, 1);
-                } else {
-                    int duplicateCount = processedEntryNamesMap.get(entryName);
-                    final String wrapperJarName
-                            = jarOut.getName().substring(0, jarOut.getName().lastIndexOf(".jar"))
-                            + "_dup_ew_" + duplicateCount + ".jar";
-                    File wrapperJarOut = new File(jarOut.getParentFile(), wrapperJarName);
-                    wrapEntryByJar(entryOut, zis, wrapperJarOut);
-                    processedEntryNamesMap.put(entryName, duplicateCount + 1);
                 }
             }
         } finally {
@@ -120,18 +112,6 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback
         }
     }
 
-    private static void wrapEntryByJar(ZipEntry ze, InputStream eData, File jarOut) throws IOException {
-        ZipOutputStream zos = null;
-        try {
-            zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)));
-            zos.putNextEntry(ze);
-            Streams.copy(eData, zos);
-            zos.closeEntry();
-        } finally {
-            closeQuietly(zos);
-        }
-    }
-
     private static void processClass(InputStream classIn, OutputStream classOut) throws IOException {
         ClassReader cr = new ClassReader(classIn);
         ClassWriter cw = new ClassWriter(0);
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java
index a607da74..7b2e0d3e 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/builder/PatchBuilder.java
@@ -98,7 +98,7 @@ private String getSignatureAlgorithm() throws Exception {
             signatureAlgorithm = "SHA1withECDSA";
         } else {
             throw new RuntimeException("private key is not a DSA or "
-                + "RSA key");
+                    + "RSA key");
         }
         return signatureAlgorithm;
     }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
index 0a298879..05072b27 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
@@ -48,6 +48,7 @@
 import org.jf.dexlib2.iface.DexFile;
 import org.jf.dexlib2.iface.Field;
 import org.jf.dexlib2.iface.Method;
+import org.jf.dexlib2.iface.MethodImplementation;
 import org.jf.dexlib2.writer.builder.BuilderField;
 import org.jf.dexlib2.writer.builder.BuilderMethod;
 import org.jf.dexlib2.writer.builder.DexBuilder;
@@ -254,6 +255,12 @@ private void generateStubModePatchDex() throws IOException {
                     }
                     List<BuilderMethod> builderMethods = new ArrayList<>();
                     for (Method parsedMethod : parsedClassDef.getMethods()) {
+                        MethodImplementation methodImpl = null;
+                        if (parsedMethod.getImplementation() != null) {
+                            methodImpl = new BuilderMutableMethodImplementation(
+                                    dexBuilder, parsedMethod.getImplementation()
+                            );
+                        }
                         BuilderMethod builderMethod = dexBuilder.internMethod(
                                 parsedMethod.getDefiningClass(),
                                 parsedMethod.getName(),
@@ -261,9 +268,7 @@ private void generateStubModePatchDex() throws IOException {
                                 parsedMethod.getReturnType(),
                                 parsedMethod.getAccessFlags(),
                                 parsedMethod.getAnnotations(),
-                                new BuilderMutableMethodImplementation(
-                                        dexBuilder, parsedMethod.getImplementation()
-                                )
+                                methodImpl
                         );
                         builderMethods.add(builderMethod);
                     }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
index 01d3ce8c..9ec77664 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
@@ -42,6 +42,8 @@
  * Created by zhangshaowen on 16/8/8.
  */
 public class ResDiffDecoder extends BaseDecoder {
+    private static final String TEST_RESOURCE_NAME        = "only_use_to_test_tinker_resource.txt";
+    private static final String TEST_RESOURCE_ASSETS_PATH = "assets/" + TEST_RESOURCE_NAME;
 
     private static final String TEMP_RES_ZIP  = "temp_res.zip";
     private static final String TEMP_RES_7ZIP = "temp_res_7ZIP.zip";
@@ -53,11 +55,6 @@
     private       HashMap<String, LargeModeInfo> largeModifiedMap;
     private ArrayList<String> deletedSet;
 
-    private boolean arscChanged;
-    private File oldArscFile;
-    private File newArscFile;
-
-
     public ResDiffDecoder(Configuration config, String metaPath, String logPath) throws IOException {
         super(config);
 
@@ -96,10 +93,7 @@ private boolean checkLargeModFile(File file) {
     @Override
     public boolean patch(File oldFile, File newFile) throws IOException, TinkerPatchException {
         String name = getRelativeString(newFile);
-        if (name.equals(TypedValue.RES_ARSC)) {
-            oldArscFile = oldFile;
-            newArscFile = newFile;
-        }
+
         //actually, it won't go below
         if (newFile == null || !newFile.exists()) {
             String relativeStringByOldDir = getRelativeStringByOldDir(oldFile);
@@ -149,9 +143,6 @@ public boolean patch(File oldFile, File newFile) throws IOException, TinkerPatch
                 Logger.d("found modify resource: " + name + ", but it is logically the same as original new resources.arsc, just ignore!");
                 return false;
             }
-            //deal with resources.arsc later
-            arscChanged = true;
-            return true;
         }
         dealWithModeFile(name, newMd5, oldFile, newFile, outputFile);
         return true;
@@ -220,18 +211,20 @@ public void onAllPatchesStart() throws IOException, TinkerPatchException {
 
     }
 
-    private void modArscFileForTestResource() throws IOException {
-        File tempArscFile = new File(config.mOutFolder + File.separator + "edited_resources.arsc");
-        //there is resource changed, edit test resource string
-        AndroidParser.editResourceTableString(TypedValue.TEST_STRING_VALUE_A, TypedValue.TEST_STRING_VALUE_B, newArscFile, tempArscFile);
-        dealWithModeFile(TypedValue.RES_ARSC, MD5.getMD5(tempArscFile), oldArscFile, tempArscFile, getOutputPath(newArscFile).toFile());
-        Logger.d("Edit resources.arsc file for test resource change, final path: " + tempArscFile.getAbsolutePath());
+    private void addAssetsFileForTestResource() throws IOException {
+        File dest = new File(config.mTempResultDir + "/" + TEST_RESOURCE_ASSETS_PATH);
+        FileOperation.copyResourceUsingStream(TEST_RESOURCE_NAME, dest);
+        addedSet.add(TEST_RESOURCE_ASSETS_PATH);
+        Logger.d("Add Test resource file: " + TEST_RESOURCE_ASSETS_PATH);
+        String log = "add test resource: " + TEST_RESOURCE_ASSETS_PATH + ", oldSize=" + 0 + ", newSize="
+            + FileOperation.getFileSizes(dest);
+        logWriter.writeLineToInfoFile(log);
     }
 
     @Override
     public void onAllPatchesEnd() throws IOException, TinkerPatchException {
         //only there is only deleted set, we just ignore
-        if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty() && !arscChanged) {
+        if (addedSet.isEmpty() && modifiedSet.isEmpty() && largeModifiedSet.isEmpty()) {
             return;
         }
 
@@ -242,12 +235,14 @@ public void onAllPatchesEnd() throws IOException, TinkerPatchException {
             throw new TinkerPatchException("resource must contain AndroidManifest.xml pattern");
         }
 
-        modArscFileForTestResource();
+        addAssetsFileForTestResource();
 
         //check gradle build
         if (config.mUsingGradle) {
             final boolean ignoreWarning = config.mIgnoreWarning;
-            if (arscChanged && !config.mUseApplyResource) {
+            final boolean resourceArscChanged = modifiedSet.contains(TypedValue.RES_ARSC)
+                || largeModifiedSet.contains(TypedValue.RES_ARSC);
+            if (resourceArscChanged && !config.mUseApplyResource) {
                 if (ignoreWarning) {
                     //ignoreWarning, just log
                     Logger.e("Warning:ignoreWarning is true, but resources.arsc is changed, you should use applyResourceMapping mode to build the new apk, otherwise, it may be crash at some times");
diff --git a/tinker-build/tinker-patch-lib/src/main/resources/only_use_to_test_tinker_resource.txt b/tinker-build/tinker-patch-lib/src/main/resources/only_use_to_test_tinker_resource.txt
new file mode 100644
index 00000000..dc9c715f
--- /dev/null
+++ b/tinker-build/tinker-patch-lib/src/main/resources/only_use_to_test_tinker_resource.txt
@@ -0,0 +1 @@
+#tinker resource changed
\ No newline at end of file
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index a6317f19..516f6b4e 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -7,7 +7,7 @@ dependencies {
     testCompile 'junit:junit:4.12'
     compile "com.android.support:appcompat-v7:23.1.1"
     compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
-    compile("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
+    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
 
     compile "com.android.support:multidex:1.0.1"
 
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index a6a66d40..eda0fddb 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -17,4 +17,4 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-TINKER_VERSION=1.8.0
+TINKER_VERSION=1.7.3
