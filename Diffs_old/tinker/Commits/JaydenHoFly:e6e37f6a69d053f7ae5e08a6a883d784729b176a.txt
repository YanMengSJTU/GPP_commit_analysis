diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
index cc78c72d..6d3a672b 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
@@ -381,6 +381,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                         return false;
                     }
 
+                    //MARK 合成全量dex
                     patchDexFile(apk, patch, rawApkFileEntry, patchFileEntry, info, extractedFile);
 
                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {
@@ -492,7 +493,7 @@ private static boolean extractDexFile(ZipFile zipFile, ZipEntry entryFile, File
      * @param patchInfo
      *   Parsed patch info from package-meta.txt
      * @param patchedDexFile
-     *   Patched dex file, may be a jar.生成的全量dex文件
+     *   Patched dex file, may be a jar.MARK 生成的全量dex文件
      *
      * <b>Notice: patchFileEntry and smallPatchInfoFile cannot both be null.</b>
      *
@@ -526,6 +527,7 @@ private static void patchDexFile(
                             if (entry == null) {
                                 throw new TinkerRuntimeException("can't recognize zip dex format file:" + patchedDexFile.getAbsolutePath());
                             }
+                            //MARK 生成全量dex
                             new DexPatchApplier(zis, patchFileStream).executeAndSaveTo(zos);
                         } finally {
                             SharePatchFileUtil.closeQuietly(zis);
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
index 5adfe171..7fc5c57d 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
@@ -129,7 +129,7 @@ public boolean tryPatch(Context context, String tempPatchPath, PatchResult patch
         }
 
         //we use destPatchFile instead of patchFile, because patchFile may be deleted during the patch process
-        //将补丁包复制到destPatchFile中，用补丁包路径的md5前8位组合成patchVersionDirectory，尝试合成全量dex
+        //MARK 将补丁包复制到destPatchFile中，用补丁包路径的md5前8位组合成patchVersionDirectory，尝试合成全量dex
         if (!DexDiffPatchInternal.tryRecoverDexFiles(manager, signatureCheck, context, patchVersionDirectory, destPatchFile)) {
             TinkerLog.e(TAG, "UpgradePatch tryPatch:new patch recover, try patch dex failed");
             return false;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index 80ce74d2..08a127bb 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -36,7 +36,7 @@
 
 /**
  * Created by zhangshaowen on 16/3/14.
- * 当app收到服务器下发的补丁后，会触发DefaultPatchListener.onPatchReceived事件，
+ * MARK 当app收到服务器下发的补丁后，会触发DefaultPatchListener.onPatchReceived事件，
  * 调用TinkerPatchService.runPatchService启动patch进程进行补丁patch工作。
  * UpgradePatch.tryPatch()中会首先检查补丁的合法性，签名，以及是否安装过补丁，检查通过后会尝试dex，so以及res文件的patch。
  */
@@ -129,6 +129,7 @@ protected void onHandleIntent(Intent intent) {
             if (upgradePatchProcessor == null) {
                 throw new TinkerRuntimeException("upgradePatchProcessor is null.");
             }
+            //MARK
             result = upgradePatchProcessor.tryPatch(context, path, patchResult);
         } catch (Throwable throwable) {
             e = throwable;
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
index ec3de83d..34714786 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
@@ -55,6 +55,7 @@ public static void installDexes(Application application, PathClassLoader loader,
         throws Throwable {
 
         if (!files.isEmpty()) {
+            //ClassLoader就是加载TinkerDexLoader类的ClassLoader,属于PathClassLoader
             ClassLoader classLoader = loader;
             if (Build.VERSION.SDK_INT >= 24) {
                 classLoader = AndroidNClassLoader.inject(loader, application);
@@ -188,7 +189,7 @@ private static void install(ClassLoader loader, List<File> additionalClassPathEn
             Field pathListField = ShareReflectUtil.findField(loader, "pathList");
             Object dexPathList = pathListField.get(loader);
             ArrayList<IOException> suppressedExceptions = new ArrayList<IOException>();
-            //dexPathList是DexPathList的实例，利用反射调用dexPathList的方法注入Element[]，注入的Element[]包含了合成了补丁dex之后的全部dex文件.
+            //MARK dexPathList是DexPathList的实例，利用反射调用dexPathList的方法注入Element[]，注入的Element[]包含了合成了补丁dex之后的全部dex文件.
             ShareReflectUtil.expandFieldArray(dexPathList, "dexElements", makeDexElements(dexPathList,
                 new ArrayList<File>(additionalClassPathEntries), optimizedDirectory,
                 suppressedExceptions));
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
index 90ebc589..b20c9e85 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
@@ -143,6 +143,7 @@ public void onFailed(File dexFile, File optimizedDir, Throwable thr) {
                 return false;
             }
         }
+        //MARK
         try {
             SystemClassLoaderAdder.installDexes(application, classLoader, optimizeDir, legalFiles);
         } catch (Throwable e) {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
index 2c517745..6cc27734 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
@@ -224,6 +224,7 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, int tinkerFlag, bo
             return;
         }
         //now we can load patch jar
+        //MARK
         if (isEnabledForDex) {
             boolean loadTinkerJars = TinkerDexLoader.loadTinkerJars(app, tinkerLoadVerifyFlag, patchVersionDirectory, resultIntent, isSystemOTA);
             if (!loadTinkerJars) {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourceLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourceLoader.java
index 167231b3..6605bf02 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourceLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourceLoader.java
@@ -61,6 +61,8 @@ public static boolean loadTinkerResources(Context context, boolean tinkerLoadVer
             Log.i(TAG, "verify resource file:" + resourceFile.getPath() + " md5, use time: " + (System.currentTimeMillis() - start));
         }
         try {
+            //MARK 利用AssetManager的addAssetPath方法添加资源路径,由于ResourceManager#mActiveResources持有所有的Resources对象,
+            //所以将AssetManager对象赋给ResourceManager#mActiveResources中所有的Resources对象,全量替换app资源,这样一来,调用Context#getResources方法拿到的Resoources对象就可以访问外部资源了.
             TinkerResourcePatcher.monkeyPatchExistingResources(context, resourceString);
             Log.i(TAG, "monkeyPatchExistingResources resource file:" + resourceString + ", use time: " + (System.currentTimeMillis() - start));
         } catch (Throwable e) {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
index 975c4e17..3aaf9168 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
@@ -143,6 +143,7 @@ public static void isResourceCanPatch(Context context) throws Throwable {
             throw new IllegalStateException("resource references is null");
         }
         try {
+            //MARK 获取Resources中的AssetManager对象
             assetsFiled = Resources.class.getDeclaredField("mAssets");
             assetsFiled.setAccessible(true);
         } catch (Throwable ignore) {
@@ -162,6 +163,7 @@ public static void isResourceCanPatch(Context context) throws Throwable {
     }
 
     /**
+     * 通过AssertManager的addAssetPath函数，加入外部的资源路径，然后将Resources的mAssets的字段设为前面的AssertManager，这样在通过getResources去获取资源的时候就可以获取到外部的资源
      * @param context
      * @param externalResourceFile
      * @throws Throwable
@@ -186,6 +188,7 @@ public static void monkeyPatchExistingResources(Context context, String external
             }
         }
         // Create a new AssetManager instance and point it to the resources installed under
+        //MARK 创建新的AssetManager对象并调用addAssetPath方法添加资源路径
         if (((Integer) addAssetPathMethod.invoke(newAssetManager, externalResourceFile)) == 0) {
             throw new IllegalStateException("Could not create new AssetManager");
         }
@@ -199,6 +202,7 @@ public static void monkeyPatchExistingResources(Context context, String external
             //pre-N
             if (resources != null) {
                 // Set the AssetManager of the Resources instance to our brand new one
+                //MARK 用包含了合并后的资源路径的AssetManager对象替换Resources中的AssetManager,这样一来,ResourcesManager中的所有Resources访问的都是合并后的资源路径,也就能访问补丁包中的资源了.
                 try {
                     assetsFiled.set(resources, newAssetManager);
                 } catch (Throwable ignore) {
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
index c9c39bb6..b6f3209a 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
@@ -173,6 +173,7 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO
                     resDuplicateFiles.add(oldFile);
                 }
 
+                //先分析新旧apk中的文件,然后在onPatchEnds中进行对比生成增量dex文件.
                 try {
                     dexDecoder.patch(oldFile, file.toFile());
                 } catch (Exception e) {
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
index bce9ee10..add3b200 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
@@ -113,7 +113,7 @@ protected String getRelativeDexName(File oldDexFile, File newDexFile) {
     /**
      * 首先检测输入的dex文件中是否有不允许修改的类被修改了，如loader相关的类是不允许被修改的，这种情况下会抛出异常；
      * 如果dex是新增的，直接将该dex拷贝到结果文件；
-     * 如果dex是修改的，收集增加和删除的class。oldAndNewDexFilePairList将新旧dex对应关系保存起来，用于后面的分析。
+     * 如果dex是修改的，收集增加和删除的class. oldAndNewDexFilePairList将新旧dex对应关系保存起来，用于后面的分析。
      */
     @SuppressWarnings("NewApi")
     @Override
@@ -149,6 +149,7 @@ public boolean patch(final File oldFile, final File newFile) throws IOException,
         final String newMd5 = getRawOrWrappedDexMD5(newFile);
 
         //new add file
+        //MARK 如果是新增的dex文件,直接拷贝到输出目录
         if (oldFile == null || !oldFile.exists() || oldFile.length() == 0) {
             hasDexChanged = true;
             copyNewDexAndLogToDexMeta(newFile, newMd5, dexDiffOut);
@@ -283,6 +284,9 @@ private void generatePatchedDexInfoFile() {
         }
     }
 
+    /**
+     * 利用DexPatchGenerator生成增量dex文件,并补全RelatedInfo
+     */
     private void diffDexPairAndFillRelatedInfo(File oldDexFile, File newDexFile, RelatedInfo relatedInfo) {
         File tempFullPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR);
         final String dexName = getRelativeDexName(oldDexFile, newDexFile);
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java
index ce25e7e4..5586cc2d 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/DexPatchGenerator.java
@@ -288,6 +288,9 @@ public void executeAndSaveTo(File file) throws IOException {
         }
     }
 
+    /**
+     * MARK 根据15个dex区域的比较算法对dex的各个区域进行比较，最后生成dex文件的差异，是整个dex diff算法的核心
+     */
     public void executeAndSaveTo(OutputStream out) throws IOException {
         // Firstly, collect information of items we want to remove additionally
         // in new dex and set them to corresponding diff algorithm implementations.
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
index 32224576..97887030 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
@@ -62,7 +62,7 @@ protected void tinkerPatch() {
             //gen patch
             ApkDecoder decoder = new ApkDecoder(config);
             decoder.onAllPatchesStart();
-//            会先对manifest文件进行检测，看其是否有更改，如果发现manifest的组件有新增，则抛出异常，因为目前Tinker暂不支持四大组件的新增。
+//            MARK 会先对manifest文件进行检测，看其是否有更改，如果发现manifest的组件有新增，则抛出异常，因为目前Tinker暂不支持四大组件的新增。
 //            检测通过后解压apk文件，遍历新旧apk，交给ApkFilesVisitor进行处理。
             decoder.patch(config.mOldApkFile, config.mNewApkFile);
             decoder.onAllPatchesEnd();
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
index 46be8c95..05365e5c 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
+++ b/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
@@ -111,6 +111,9 @@ public DexPatchApplier(
         this.oldToPatchedIndexMap = new SparseIndexMap();
     }
 
+    /**
+     * MARK 生成全量dex
+     */
     public void executeAndSaveTo(OutputStream out) throws IOException {
         // Before executing, we should check if this patch can be applied to
         // old dex we passed in.
