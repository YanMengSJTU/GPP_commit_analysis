diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index c0856528..8a8ee6b9 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -4,13 +4,18 @@ dependencies {
     if (is_gradle_3()) {
         implementation fileTree(dir: 'libs', include: ['*.jar'])
         testImplementation 'junit:junit:4.12'
-        implementation "com.android.support:appcompat-v7:23.1.1"
+        implementation "com.android.support:appcompat-v7:28.0.0"
+
         api("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
 
         // Maven local cannot handle transist dependencies.
-        implementation("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
+        implementation("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") {
+            changing = true
+        }
 
-        annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
+        annotationProcessor("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") {
+            changing = true
+        }
         compileOnly("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
 
         implementation "com.android.support:multidex:1.0.1"
@@ -20,7 +25,7 @@ dependencies {
     } else {
         compile fileTree(dir: 'libs', include: ['*.jar'])
         testCompile 'junit:junit:4.12'
-        compile "com.android.support:appcompat-v7:23.1.1"
+        compile "com.android.support:appcompat-v7:28.0.0"
         compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
         provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
 
@@ -34,7 +39,8 @@ dependencies {
 
 def gitSha() {
     try {
-        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
+        // 每次打包的时候版本要一致，官方demo的是git的版本，这里使用versionName
+        String gitRev = "1.0"
         if (gitRev == null) {
             throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
         }
@@ -44,7 +50,7 @@ def gitSha() {
     }
 }
 
-def javaVersion = JavaVersion.VERSION_1_7
+def javaVersion = JavaVersion.VERSION_1_8
 
 android {
     compileSdkVersion 28
@@ -54,7 +60,7 @@ android {
         sourceCompatibility javaVersion
         targetCompatibility javaVersion
     }
-    //recommend
+    //支持大工程模式
     dexOptions {
         jumboMode = true
     }
@@ -78,8 +84,8 @@ android {
 
     defaultConfig {
         applicationId "tinker.sample.android"
-        minSdkVersion 14
-        targetSdkVersion 26
+        minSdkVersion 15
+        targetSdkVersion 28
         versionCode 1
         versionName "1.0.0"
         /**
@@ -118,7 +124,7 @@ android {
 
     buildTypes {
         release {
-            minifyEnabled true
+            minifyEnabled false//这里设为true后，会有异常，还未解决
             signingConfig signingConfigs.release
             proguardFiles getDefaultProguardFile('proguard-android.txt'), project.file('proguard-rules.pro')
         }
@@ -150,15 +156,15 @@ ext {
     //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
     tinkerEnabled = true
 
-    //for normal build
-    //old apk file to build patch apk
-    tinkerOldApkPath = "${bakPath}/app-debug-0424-15-02-56.apk"
-    //proguard mapping file to build patch apk
-    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
-    //resource R.txt to build patch apk, must input if there is resource changed
-    tinkerApplyResourcePath = "${bakPath}/app-debug-0424-15-02-56-R.txt"
+    //每次打包完都需要更改下面的三个路径，如果支持多渠道打包，下面第四个参数也需要修改
+    //old apk 的路径
+    tinkerOldApkPath = "${bakPath}/app-release-0919-10-23-23.apk"
+    //old apk 混淆 mapping 文件的路径
+    tinkerApplyMappingPath = "${bakPath}/app-release-0919-10-23-23-mapping.txt"
+    //old apk R文件的路径
+    tinkerApplyResourcePath = "${bakPath}/app-release-0919-10-23-23-R.txt"
 
-    //only use for build all flavor, if not, just ignore this field
+    //多渠道打包的路径
     tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
 }
 
@@ -199,32 +205,24 @@ if (buildWithTinker()) {
         oldApk = getOldApkPath()
         /**
          * optional，default 'false'
-         * there are some cases we may get some warnings
-         * if ignoreWarning is true, we would just assert the patch process
-         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
-         *         it must be crash when load.
-         * case 2: newly added Android Component in AndroidManifest.xml,
-         *         it must be crash when load.
-         * case 3: loader classes in dex.loader{} are not keep in the main dex,
-         *         it must be let tinker not work.
-         * case 4: loader classes in dex.loader{} changes,
-         *         loader classes is ues to load patch dex. it is useless to change them.
-         *         it won't crash, but these changes can't effect. you may ignore it
-         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
+         * 在产生patch的时候是否忽略tinker的警告，最好不忽略
+         * case 1: minSdkVersion小于14，但是dexMode的值为"raw"
+         * case 2: 新编译的安装包出现新增的四大组件(Activity, BroadcastReceiver...)；
+         * case 3: 定义在dex.loader用于加载补丁的类不在main dex中;
+         * case 4: 定义在dex.loader用于加载补丁的类出现修改；
+         * case 5:  resources.arsc改变，但没有使用applyResourceMapping编译
          */
         ignoreWarning = false
 
         /**
          * optional，default 'true'
-         * whether sign the patch file
-         * if not, you must do yourself. otherwise it can't check success during the patch loading
-         * we will use the sign config with your build type
+         * 是否启用签名，一般强制使用
          */
         useSign = true
 
         /**
          * optional，default 'true'
-         * whether use tinker to build
+         * 是否启用tinker
          */
         tinkerEnable = buildWithTinker()
 
@@ -234,20 +232,21 @@ if (buildWithTinker()) {
         buildConfig {
             /**
              * optional，default 'null'
-             * if we use tinkerPatch to build the patch apk, you'd better to apply the old
-             * apk mapping file if minifyEnabled is enable!
+             * 指定old apk 混淆时的打包文件。
              * Warning:
              * you must be careful that it will affect the normal assemble build!
              */
             applyMapping = getApplyMappingPath()
             /**
              * optional，default 'null'
-             * It is nice to keep the resource id from R.txt file to reduce java changes
+             * 指定old apk 的资源文件
              */
             applyResourceMapping = getApplyResourceMappingPath()
 
             /**
              * necessary，default 'null'
+             * 每个patch文件的唯一标识符.
+             *
              * because we don't want to check the base apk with md5 in the runtime(it is slow)
              * tinkerId is use to identify the unique base apk when the patch is tried to apply.
              * we can use git rev, svn rev or simply versionCode.
@@ -256,13 +255,15 @@ if (buildWithTinker()) {
             tinkerId = getTinkerIdValue()
 
             /**
-             * if keepDexApply is true, class in which dex refer to the old apk.
-             * open this can reduce the dex diff file size.
+             * 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。
+             * 若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
              */
             keepDexApply = false
 
             /**
              * optional, default 'false'
+             * 是否使用加固模式，仅仅将变更的类合成补丁。注意，这种模式仅仅可以用于加固应用中。
+             *
              * Whether tinker should treat the base apk as the one being protected by app
              * protection tools.
              * If this attribute is true, the generated patch package will contain a
@@ -272,6 +273,9 @@ if (buildWithTinker()) {
 
             /**
              * optional, default 'false'
+             *
+             * 是否支持新增非export的Activity
+             *
              * Whether tinker should support component hotplug (add new component dynamically).
              * If this attribute is true, the component added in new apk will be available after
              * patch is successfully loaded. Otherwise an error would be announced when generating patch
@@ -285,28 +289,35 @@ if (buildWithTinker()) {
         dex {
             /**
              * optional，default 'jar'
-             * only can be 'raw' or 'jar'. for raw, we would keep its original format
-             * for jar, we would repack dexes with zip format.
-             * if you want to support below 14, you must use jar
-             * or you want to save rom or check quicker, you can use raw mode also
+             * 只能是'raw'或者'jar'。
+             * 对于'raw'模式，我们将会保持输入dex的格式。
+             * 对于'jar'模式，我们将会把输入dex重新压缩封装到jar。如果你的minSdkVersion小于14，你必须选择‘jar’模式，
+             * 而且它更省存储空间，但是验证md5时比'raw'模式耗时。默认我们并不会去校验md5,一般情况下选择jar模式即可。
+             *
              */
             dexMode = "jar"
 
             /**
              * necessary，default '[]'
-             * what dexes in apk are expected to deal with tinkerPatch
-             * it support * or ? pattern.
+             * 需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如assets/...
              */
             pattern = ["classes*.dex",
                        "assets/secondary-dex-?.jar"]
             /**
              * necessary，default '[]'
-             * Warning, it is very very important, loader classes can't change with patch.
-             * thus, they will be removed from patch dexes.
-             * you must put the following class into main dex.
-             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
-             * own tinkerLoader, and the classes you use in them
              *
+             * 这一项非常重要，它定义了哪些类在加载补丁包的时候会用到。
+             * 这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
+             *
+             * 这里需要定义的类有：
+             * 1. 你自己定义的Application类；
+             * 2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；
+             * 3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
+             * 4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。
+             *      这里需要注意的是，这些类的直接引用类也需要加入到loader中。
+             *      或者你需要将这个类变成非preverify。
+             * 5. 使用1.7.6版本之后的gradle版本，参数1、2会自动填写。
+             *      若使用newApk或者命令行版本编译，1、2依然需要手动填写
              */
             loader = [
                     //use sample, let BaseBuildInfo unchangeable with tinker
@@ -317,10 +328,8 @@ if (buildWithTinker()) {
         lib {
             /**
              * optional，default '[]'
-             * what library in apk are expected to deal with tinkerPatch
-             * it support * or ? pattern.
-             * for library in assets, we would just recover them in the patch directory
-             * you can get them in TinkerLoadResult with Tinker
+             * 需要处理lib路径，支持*、?通配符，必须使用'/'分割。
+             * 与dex.pattern一致, 路径是相对安装包的，例如assets/...
              */
             pattern = ["lib/*/*.so"]
         }
@@ -328,37 +337,31 @@ if (buildWithTinker()) {
         res {
             /**
              * optional，default '[]'
-             * what resource in apk are expected to deal with tinkerPatch
-             * it support * or ? pattern.
-             * you must include all your resources in apk here,
-             * otherwise, they won't repack in the new apk resources.
+             * 需要处理lib路径，支持*、?通配符，必须使用'/'分割。
+             * 与dex.pattern一致, 路径是相对安装包的，例如assets/...
              */
             pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]
 
             /**
              * optional，default '[]'
-             * the resource file exclude patterns, ignore add, delete or modify resource change
-             * it support * or ? pattern.
-             * Warning, we can only use for files no relative with resources.arsc
+             * 若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改
              */
             ignoreChange = ["assets/sample_meta.txt"]
 
             /**
-             * default 100kb
-             * for modify resource, if it is larger than 'largeModSize'
-             * we would like to use bsdiff algorithm to reduce patch file size
+             * 对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。这可以降低补丁包的大小，
+             * 但是会增加合成时的复杂度。默认大小为100kb
              */
             largeModSize = 100
         }
 
+        //用于生成补丁包中的'package_meta.txt'文件
         packageConfig {
             /**
-             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
-             * package meta file gen. path is assets/package_meta.txt in patch file
-             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
-             * or TinkerLoadResult.getPackageConfigByName
-             * we will get the TINKER_ID from the old apk manifest for you automatic,
-             * other config files (such as patchMessage below)is not necessary
+             * configField("key", "value"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,
+             * 并自动写入configField。在这里， 你可以定义其他的信息， 在运行时可以通过
+             * TinkerLoadResult.getPackageConfigByName得到相应的数值。
+             * 但是建议直接通过修改代码来实现，例如BuildConfig。
              */
             configField("patchMessage", "tinker is sample to use")
             /**
@@ -377,12 +380,12 @@ if (buildWithTinker()) {
         //project.tinkerPatch.packageConfig.configField("test2", "sample")
 
         /**
-         * if you don't use zipArtifact or path, we just use 7za to try
+         * 7zip路径配置项，执行前提是useSign为true，电脑上安装的有 7zip
          */
         sevenZip {
             /**
              * optional，default '7za'
-             * the 7zip artifact path, it will use the right 7za with your platform
+             * 将自动根据机器属性获得对应的7za运行文件
              */
             zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
             /**
@@ -397,11 +400,12 @@ if (buildWithTinker()) {
     project.android.productFlavors.each { flavor ->
         flavors.add(flavor.name)
     }
+    //是否配置了多渠道
     boolean hasFlavors = flavors.size() > 0
     def date = new Date().format("MMdd-HH-mm-ss")
 
     /**
-     * bak apk and mapping
+     *  old apk复制到指定目录
      */
     android.applicationVariants.all { variant ->
         /**
@@ -499,7 +503,6 @@ if (buildWithTinker()) {
 }
 
 
-
 task sortPublicTxt() {
     doLast {
         File originalFile = project.file("public.txt")
diff --git a/tinker-sample-android/build.gradle b/tinker-sample-android/build.gradle
index c2e0918e..0a1266e2 100644
--- a/tinker-sample-android/build.gradle
+++ b/tinker-sample-android/build.gradle
@@ -7,7 +7,7 @@ buildscript {
     }
     dependencies {
         if (project.hasProperty('GRADLE_3') && GRADLE_3.equalsIgnoreCase('TRUE')) {
-            classpath 'com.android.tools.build:gradle:3.2.1'
+            classpath 'com.android.tools.build:gradle:3.4.1'
         } else {
             classpath 'com.android.tools.build:gradle:2.3.3'
         }
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index 1868a251..04d8f276 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -20,5 +20,5 @@ org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=1024m -XX:+HeapDumpOnOutOfMemoryErr
 TINKER_VERSION=1.9.14
 GRADLE_3=true
 
-android.enableAapt2=false
+#android.enableAapt2=false
 #tinker.aapt2.public=false
diff --git a/tinker-sample-android/gradle/wrapper/gradle-wrapper.properties b/tinker-sample-android/gradle/wrapper/gradle-wrapper.properties
index 7e69b017..397015fb 100644
--- a/tinker-sample-android/gradle/wrapper/gradle-wrapper.properties
+++ b/tinker-sample-android/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.1.1-all.zip
diff --git "a/tinker-sample-android/\345\246\202\344\275\225\350\277\220\350\241\214\347\232\204blog" "b/tinker-sample-android/\345\246\202\344\275\225\350\277\220\350\241\214\347\232\204blog"
new file mode 100644
index 00000000..f7ece2d0
--- /dev/null
+++ "b/tinker-sample-android/\345\246\202\344\275\225\350\277\220\350\241\214\347\232\204blog"
@@ -0,0 +1,5 @@
+运行debug
+https://www.jianshu.com/p/af20e856f455
+
+运行release
+https://www.jianshu.com/p/66fbb524754b
\ No newline at end of file
