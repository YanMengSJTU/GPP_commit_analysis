diff --git a/gradle.properties b/gradle.properties
index 2691a69d..598b7a1f 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,5 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-VERSION_NAME_PREFIX=1.7.7
+VERSION_NAME_PREFIX=1.7.8
 VERSION_NAME_SUFFIX=
\ No newline at end of file
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
index 975c4e17..65ec611f 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
@@ -127,8 +127,6 @@ public static void isResourceCanPatch(Context context) throws Throwable {
                 // N moved the resources to mResourceReferences
                 Field mResourceReferences = resourcesManagerClass.getDeclaredField("mResourceReferences");
                 mResourceReferences.setAccessible(true);
-//                resourceImpls = (ArrayMap<?, WeakReference<?>>) mResourceReferences.get("mResourceImpls");
-
                 references = (Collection<WeakReference<Resources>>) mResourceReferences.get(resourcesManager);
             }
         } else {
@@ -237,7 +235,6 @@ private static void clearPreloadTypedArrayIssue(Resources resources) {
 //        if (!isMiuiSystem) {
 //            return;
 //        }
-
         Log.w(TAG, "try to clear typedArray cache!");
         // Clear typedArray cache.
         try {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
index 6024ba9c..8ec2f9f7 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
@@ -31,6 +31,7 @@
 import java.io.InputStream;
 import java.io.PrintStream;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Properties;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -293,9 +294,15 @@ public static void killAllOtherProcess(Context context) {
         if (am == null) {
             return;
         }
+        List<ActivityManager.RunningAppProcessInfo> appProcessList = am
+            .getRunningAppProcesses();
+
+        if (appProcessList == null) {
+            return;
+        }
         // NOTE: getRunningAppProcess() ONLY GIVE YOU THE PROCESS OF YOUR OWN PACKAGE IN ANDROID M
         // BUT THAT'S ENOUGH HERE
-        for (ActivityManager.RunningAppProcessInfo ai : am.getRunningAppProcesses()) {
+        for (ActivityManager.RunningAppProcessInfo ai : appProcessList) {
             // KILL OTHER PROCESS OF MINE
             if (ai.uid == android.os.Process.myUid() && ai.pid != android.os.Process.myPid()) {
                 android.os.Process.killProcess(ai.pid);
@@ -331,19 +338,24 @@ private static String getProcessNameInternal(final Context context) {
         ActivityManager activityManager =
             (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
 
-        try {
-            for (ActivityManager.RunningAppProcessInfo process : activityManager.getRunningAppProcesses()) {
-                if (process.pid == myPid) {
-                    myProcess = process;
-                    break;
+        List<ActivityManager.RunningAppProcessInfo> appProcessList = activityManager
+            .getRunningAppProcesses();
+
+        if (appProcessList != null) {
+            try {
+                for (ActivityManager.RunningAppProcessInfo process : appProcessList) {
+                    if (process.pid == myPid) {
+                        myProcess = process;
+                        break;
+                    }
                 }
+            } catch (Exception e) {
+                Log.e(TAG, "getProcessNameInternal exception:" + e.getMessage());
             }
-        } catch (Exception e) {
-            Log.e(TAG, "getProcessNameInternal exception:" + e.getMessage());
-        }
 
-        if (myProcess != null) {
-            return myProcess.processName;
+            if (myProcess != null) {
+                return myProcess.processName;
+            }
         }
 
         byte[] b = new byte[128];
@@ -362,7 +374,7 @@ private static String getProcessNameInternal(final Context context) {
             }
 
         } catch (Exception e) {
-            e.printStackTrace();
+            Log.e(TAG, "getProcessNameInternal exception:" + e.getMessage());
         } finally {
             try {
                 if (in != null) {
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/ImmutableDexTransform.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/ImmutableDexTransform.groovy
index 92a80fcf..f0611a2f 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/ImmutableDexTransform.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/ImmutableDexTransform.groovy
@@ -36,13 +36,14 @@ import com.tencent.tinker.build.immutable.ClassSimDef
 import com.tencent.tinker.build.immutable.DexRefData
 import com.tencent.tinker.build.util.FileOperation
 import com.tencent.tinker.build.util.Utils
+import org.gradle.api.Action
 import org.gradle.api.GradleException
 import org.gradle.api.Project
 import org.gradle.api.Task
 import org.gradle.api.execution.TaskExecutionGraph
 import org.gradle.api.execution.TaskExecutionGraphListener
 import org.gradle.api.logging.Logging
-
+import org.gradle.api.tasks.JavaExec
 
 import java.lang.reflect.Field;
 import java.util.zip.ZipEntry
@@ -332,21 +333,29 @@ public class ImmutableDexTransform extends Transform {
 
 
     private void doDex(String classIndexName, File classZip, def dexOptions) {
-        ArrayList<String> execArgs = new ArrayList()
-        def dex = "${project.android.getSdkDirectory()}/build-tools/${project.android.buildToolsVersion}/dx"
-        execArgs.add(dex.toString())
-        execArgs.add("--dex")
-        if (dexOptions.getJumboMode()) {
-            execArgs.add("--force-jumbo");
-        }
-        if (dexOptions.getIncremental()) {
-            execArgs.add("--incremental");
-            execArgs.add("--no-strict");
-        }
-        execArgs.add("--output=${dxOutDir.absolutePath}/${classIndexName}.dex".toString())
-        execArgs.add(classZip.absolutePath)
-        project.logger.info(execArgs.toString())
-        Utils.exec(execArgs, null)
+
+        def dexJar = "${project.android.getSdkDirectory()}/build-tools/${project.android.buildToolsVersion}/lib/dx.jar"
+        def task = project.tasks.create("dx" + classIndexName + varName, JavaExec.class, new Action<JavaExec>() {
+            @Override
+            void execute(JavaExec javaExec) {
+                ArrayList<String> execArgs = new ArrayList()
+                execArgs.add("--dex")
+                if (dexOptions.getJumboMode()) {
+                    execArgs.add("--force-jumbo");
+                }
+                if (dexOptions.getIncremental()) {
+                    execArgs.add("--incremental");
+                    execArgs.add("--no-strict");
+                }
+                execArgs.add("--output=${dxOutDir.absolutePath}/${classIndexName}.dex".toString())
+                execArgs.add(classZip.absolutePath)
+                project.logger.info(execArgs.toString())
+                javaExec.setClasspath(project.files(dexJar))
+                javaExec.setMain("com.android.dx.command.Main")
+                javaExec.setArgs(execArgs)
+            }
+        })
+        task.execute()
     }
 
     public static void inject(Project project, def variant) {
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
index a4c6c184..90dcd767 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
@@ -65,22 +65,26 @@ public void uncaughtException(Thread thread, Throwable ex) {
      * If it use Xposed, we can just clean patch or mention user to uninstall it.
      */
     private void tinkerPreVerifiedCrashHandler(Throwable ex) {
+        ApplicationLike applicationLike = TinkerManager.getTinkerApplicationLike();
+        if (applicationLike == null || applicationLike.getApplication() == null) {
+            TinkerLog.w(TAG, "applicationlike is null");
+            return;
+        }
+
+        if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {
+            TinkerLog.w(TAG, "tinker is not loaded");
+            return;
+        }
+
         Throwable throwable = ex;
         boolean isXposed = false;
         while (throwable != null) {
             if (!isXposed) {
                 isXposed = Utils.isXposedExists(throwable);
             }
-            if (isXposed) {
-                //method 1
-                ApplicationLike applicationLike = TinkerManager.getTinkerApplicationLike();
-                if (applicationLike == null || applicationLike.getApplication() == null) {
-                    return;
-                }
 
-                if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {
-                    return;
-                }
+            // xposed?
+            if (isXposed) {
                 boolean isCausedByXposed = false;
                 //for art, we can't know the actually crash type
                 //just ignore art
