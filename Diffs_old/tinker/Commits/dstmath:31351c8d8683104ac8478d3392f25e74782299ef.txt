diff --git a/README.md b/README.md
index cea57bd8..53173680 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 ## Tinker
 [![license](http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat)](https://github.com/Tencent/tinker/blob/master/LICENSE)
-[![Release Version](https://img.shields.io/badge/release-1.7.0-red.svg)](https://github.com/Tencent/tinker/releases) 
+[![Release Version](https://img.shields.io/badge/release-1.7.1-red.svg)](https://github.com/Tencent/tinker/releases) 
 [![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](https://github.com/Tencent/tinker/pulls)
 [![WeChat Approved](https://img.shields.io/badge/Wechat_Approved-1.6.2-red.svg)](https://github.com/Tencent/tinker/wiki)
 
@@ -14,7 +14,7 @@ Add tinker-gradle-plugin as a dependency in your main `build.gradle` in the root
 ```gradle
 buildscript {
     dependencies {
-        classpath ('com.tencent.tinker:tinker-patch-gradle-plugin:1.7.0')
+        classpath ('com.tencent.tinker:tinker-patch-gradle-plugin:1.7.1')
     }
 }
 ```
@@ -24,9 +24,9 @@ Then you need to "apply" the plugin and add dependencies by adding the following
 ```gradle
 dependencies {
     //optional, help to generate the final application 
-    compile('com.tencent.tinker:tinker-android-anno:1.7.0')
+    compile('com.tencent.tinker:tinker-android-anno:1.7.1')
     //tinker's main Android lib
-    compile('com.tencent.tinker:tinker-android-lib:1.7.0') 
+    compile('com.tencent.tinker:tinker-android-lib:1.7.1') 
 }
 ...
 ...
diff --git a/gradle.properties b/gradle.properties
index 10b53050..0667ab7c 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,5 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-VERSION_NAME_PREFIX=1.7.0
+VERSION_NAME_PREFIX=1.7.1
 VERSION_NAME_SUFFIX=
\ No newline at end of file
diff --git a/tinker-build/tinker-patch-gradle-plugin/build.gradle b/tinker-build/tinker-patch-gradle-plugin/build.gradle
index c027fdaa..fa4fb4e2 100644
--- a/tinker-build/tinker-patch-gradle-plugin/build.gradle
+++ b/tinker-build/tinker-patch-gradle-plugin/build.gradle
@@ -10,7 +10,7 @@ dependencies {
 //    compile fileTree(dir: 'libs', include: ['*.jar'])
     compile project(':tinker-build:tinker-patch-lib')
     compile 'com.google.gradle:osdetector-gradle-plugin:1.2.1'
-    compile 'com.android.tools.build:gradle-api:2.2.0'
+    compile 'com.android.tools.build:gradle:2.1.0'
 }
 
 repositories {
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
index 7df0a589..04007409 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
@@ -24,6 +24,8 @@ import com.tencent.tinker.build.util.TypedValue
 import org.gradle.api.GradleException
 import org.gradle.api.Plugin
 import org.gradle.api.Project
+import org.gradle.api.UnknownTaskException
+
 /**
  * Registers the plugin's tasks.
  *
@@ -97,6 +99,19 @@ class TinkerPatchPlugin implements Plugin<Project> {
                 def variantOutput = variant.outputs.first()
                 def variantName = variant.name.capitalize()
 
+                try {
+                    def instantRunTask = project.tasks.getByName("transformClassesWithInstantRunFor${variantName}")
+                    if (instantRunTask) {
+                        throw new GradleException(
+                                "Tinker does not support instant run mode, please trigger build"
+                                        + " by assemble${variantName} or disable instant run"
+                                        + " in 'File->Settings...'."
+                        )
+                    }
+                } catch (UnknownTaskException e) {
+                    // Not in instant run mode, continue.
+                }
+
                 TinkerPatchSchemaTask tinkerPatchBuildTask = project.tasks.create("tinkerPatch${variantName}", TinkerPatchSchemaTask)
                 tinkerPatchBuildTask.dependsOn variant.assemble
 
@@ -117,6 +132,14 @@ class TinkerPatchPlugin implements Plugin<Project> {
 
                 variantOutput.processResources.dependsOn manifestTask
 
+                //resource id
+                TinkerResourceIdTask applyResourceTask = project.tasks.create("tinkerProcess${variantName}ResourceId", TinkerResourceIdTask)
+                applyResourceTask.resDir = variantOutput.processResources.resDir
+                //let applyResourceTask run after manifestTask
+                applyResourceTask.mustRunAfter manifestTask
+
+                variantOutput.processResources.dependsOn applyResourceTask
+
                 // Add this proguard settings file to the list
                 boolean proguardEnable = variant.getBuildType().buildType.minifyEnabled
 
@@ -134,14 +157,7 @@ class TinkerPatchPlugin implements Plugin<Project> {
                     multidexConfigTask.applicationVariant = variant
                     variantOutput.packageApplication.dependsOn multidexConfigTask
                 }
-//                if (tempResourceFile != null && tempResourceFile.exists() && tempResourceFile.isFile()) {
-                    TinkerResourceIdTask applyResourceTask = project.tasks.create("tinkerProcess${variantName}ResourceId", TinkerResourceIdTask)
-                    applyResourceTask.resDir = variantOutput.processResources.resDir
-                    variantOutput.processResources.dependsOn applyResourceTask
-//                }
-//                else {
-//                    project.logger.error("apply resource mapping file ${resourceMappingFile} is not exist, just ignore")
-//                }
+
             }
         }
 
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerManifestTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerManifestTask.groovy
index 65e589d7..50af6687 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerManifestTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerManifestTask.groovy
@@ -46,7 +46,7 @@ public class TinkerManifestTask extends DefaultTask {
         project.logger.error("tinker add ${tinkerValue} to your AndroidManifest.xml ${manifestPath}")
 
         def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
-        manifestPath
+
         def xml = new XmlParser().parse(new InputStreamReader(new FileInputStream(manifestPath), "utf-8"))
 
         def application = xml.application[0]
@@ -64,8 +64,7 @@ public class TinkerManifestTask extends DefaultTask {
             application.appendNode('meta-data', [(ns.name): TINKER_ID, (ns.value): tinkerValue])
 
             // Write the manifest file
-            def writer = new FileWriter(manifestPath)
-            def printer = new XmlNodePrinter(new PrintWriter(writer))
+            def printer = new XmlNodePrinter(new PrintWriter(manifestPath, "utf-8"))
             printer.preserveWhitespace = true
             printer.print(xml)
         }
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
index c52447dd..edc22e81 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
@@ -63,16 +63,6 @@ public class TinkerMultidexConfigTask extends DefaultTask {
         fr.write(MULTIDEX_CONFIG_SETTINGS)
         fr.write("\n")
 
-        // Write additional rules to keep auxiliary class in primary dex.
-        if (project.tinkerPatch.dex.usePreGeneratedPatchDex) {
-            final String additionalRules =
-                    "-keep class ${AuxiliaryClassInjector.AUXILIARY_CLASSNAME} {\n" +
-                            '    *;\n' +
-                            '}\n'
-            fr.write(additionalRules)
-            fr.write('\n')
-        }
-
         //unlike proguard, if loader endwith *, we must change to **
         fr.write("#your dex.loader patterns here\n")
         Iterable<String> loader = project.extensions.tinkerPatch.dex.loader
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
index 4283b7b3..6bb132f2 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
@@ -32,6 +32,7 @@ public class TinkerProguardConfigTask extends DefaultTask {
     static final String PROGUARD_CONFIG_SETTINGS =
             "-keepattributes *Annotation* \n" +
                     "-dontwarn com.tencent.tinker.anno.AnnotationProcessor \n" +
+                    "-dontwarn ${AuxiliaryClassInjector.NOT_EXISTS_CLASSNAME} \n" +
                     "-keep @com.tencent.tinker.anno.DefaultLifeCycle public class *\n" +
                     "-keep public class * extends android.app.Application {\n" +
                     "    *;\n" +
@@ -88,16 +89,16 @@ public class TinkerProguardConfigTask extends DefaultTask {
 
         fr.write(PROGUARD_CONFIG_SETTINGS)
 
-        // Write additional rules to keep auxiliary class, <init> and <clinit>
+        // Write additional rules to keep <init> and <clinit>
         if (project.tinkerPatch.dex.usePreGeneratedPatchDex) {
             def additionalKeptRules =
-                    "-dontwarn ${AuxiliaryClassInjector.AUXILIARY_CLASSNAME} \n" +
+                            "-keep class ${AuxiliaryClassInjector.NOT_EXISTS_CLASSNAME} { \n" +
+                            '    *; \n' +
+                            '}\n' +
+                            '\n' +
                             '-keepclassmembers class * { \n' +
                             '    <init>(...); \n' +
                             '    static void <clinit>(...); \n' +
-                            '}\n' +
-                            "-keep class ${AuxiliaryClassInjector.AUXILIARY_CLASSNAME} {\n" +
-                            '    *;\n' +
                             '}\n'
             fr.write(additionalKeptRules)
             fr.write('\n')
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
index 30a12c12..ba6c2c75 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
@@ -23,7 +23,6 @@ import com.tencent.tinker.build.aapt.RDotTxtEntry
 import com.tencent.tinker.build.gradle.TinkerPatchPlugin
 import com.tencent.tinker.build.util.FileOperation
 import org.gradle.api.DefaultTask
-import org.gradle.api.Project
 import org.gradle.api.tasks.TaskAction
 
 /**
@@ -43,25 +42,24 @@ public class TinkerResourceIdTask extends DefaultTask {
 
     @TaskAction
     def applyResourceId() {
+        String resourceMappingFile = project.extensions.tinkerPatch.buildConfig.applyResourceMapping
+
         // Parse the public.xml and ids.xml
+        if (!FileOperation.isLegalFile(resourceMappingFile)) {
+            project.logger.error("apply resource mapping file ${resourceMappingFile} is illegal, just ignore")
+            return
+        }
         String idsXml = resDir + "/values/ids.xml";
         String publicXml = resDir + "/values/public.xml";
         FileOperation.deleteFile(idsXml);
         FileOperation.deleteFile(publicXml);
         List<String> resourceDirectoryList = new ArrayList<String>()
         resourceDirectoryList.add(resDir)
-        Map<RDotTxtEntry.RType, Set<RDotTxtEntry>> rTypeResourceMap = null
 
-        String resourceMappingFile = project.extensions.tinkerPatch.buildConfig.applyResourceMapping
+        project.logger.error("we build ${project.getName()} apk with apply resource mapping file ${resourceMappingFile}")
+        project.extensions.tinkerPatch.buildConfig.usingResourceMapping = true
+        Map<RDotTxtEntry.RType, Set<RDotTxtEntry>> rTypeResourceMap = PatchUtil.readRTxt(resourceMappingFile)
 
-        if (FileOperation.isLegalFile(resourceMappingFile)) {
-            project.logger.error("we build ${project.getName()} apk with apply resource mapping file ${resourceMappingFile}")
-            project.extensions.tinkerPatch.buildConfig.usingResourceMapping = true
-            rTypeResourceMap = PatchUtil.readRTxt(resourceMappingFile);
-        } else {
-            project.logger.error("apply resource mapping file ${resourceMappingFile} is illegal, just ignore")
-            return
-        }
         AaptResourceCollector aaptResourceCollector = AaptUtil.collectResource(resourceDirectoryList, rTypeResourceMap)
         PatchUtil.generatePublicResourceXml(aaptResourceCollector, idsXml, publicXml)
         File publicFile = new File(publicXml)
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/AuxiliaryInjectTransform.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/AuxiliaryInjectTransform.groovy
index 8507e4e1..c1a929b0 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/AuxiliaryInjectTransform.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/transform/AuxiliaryInjectTransform.groovy
@@ -19,21 +19,15 @@ package com.tencent.tinker.build.gradle.transform
 import com.android.build.api.transform.*
 import com.google.common.collect.ImmutableSet
 import com.google.common.io.Files
-import com.tencent.tinker.build.auxiliaryclass.AuxiliaryClassGenerator
 import com.tencent.tinker.build.auxiliaryclass.AuxiliaryClassInjector
 import com.tencent.tinker.build.auxiliaryclass.AuxiliaryClassInjector.ProcessJarCallback
 import com.tencent.tinker.build.util.MD5
-import com.tencent.tinker.commons.ziputil.Streams
 import groovy.io.FileType
+import groovy.xml.Namespace
 import org.gradle.api.Project
 
-import java.lang.reflect.Constructor
-import java.util.zip.ZipEntry
-import java.util.zip.ZipInputStream
-import java.util.zip.ZipOutputStream
-
 /**
- * Transform for calling AuxiliaryClassGenerator and AuxiliaryClassInjector.
+ * Transform for calling AuxiliaryClassInjector.
  *
  * @author tangyinsheng
  */
@@ -41,7 +35,6 @@ public class AuxiliaryInjectTransform extends Transform {
     private static final String TRANSFORM_NAME = 'AuxiliaryInject'
 
     private final Project project
-    private final String auxiliaryClassPathName
 
     private boolean isEnabled = false
 
@@ -50,16 +43,14 @@ public class AuxiliaryInjectTransform extends Transform {
     /* ****** Variant related parameters start ****** */
 
     boolean isInitialized = false
-    def manifestFile
-    def appClassName
-    def appClassPathName
+    def manifestFile = null
+    def appClassName = ''
+    def appClassPathName = ''
 
     /* ******  Variant related parameters end  ****** */
 
     public AuxiliaryInjectTransform(Project project) {
         this.project = project
-        this.auxiliaryClassPathName =
-                AuxiliaryClassInjector.AUXILIARY_CLASSNAME.replace('.', '/') + '.class'
 
         project.afterEvaluate {
             this.isEnabled = project.tinkerPatch.dex.usePreGeneratedPatchDex
@@ -82,8 +73,8 @@ public class AuxiliaryInjectTransform extends Transform {
     Set<QualifiedContent.Scope> getScopes() {
         return ImmutableSet.of(
                 QualifiedContent.Scope.PROJECT,
-                QualifiedContent.Scope.PROJECT_LOCAL_DEPS,
                 QualifiedContent.Scope.SUB_PROJECTS,
+                QualifiedContent.Scope.PROJECT_LOCAL_DEPS,
                 QualifiedContent.Scope.SUB_PROJECTS_LOCAL_DEPS,
                 QualifiedContent.Scope.EXTERNAL_LIBRARIES
         )
@@ -132,11 +123,17 @@ public class AuxiliaryInjectTransform extends Transform {
         }
 
         // Get application classname from manifest file.
-        def parsedManifest = new XmlParser().parse(this.manifestFile)
-        def androidTag = new groovy.xml.Namespace(
-                "http://schemas.android.com/apk/res/android", 'android')
-        this.appClassName = parsedManifest.application[0].attribute(androidTag.name)
-        this.appClassPathName = this.appClassName.replace('.', '/') + '.class'
+        if (this.manifestFile != null) {
+            def parsedManifest = new XmlParser().parse(
+                    new InputStreamReader(new FileInputStream(this.manifestFile), "utf-8"))
+            def androidTag = new Namespace(
+                    'http://schemas.android.com/apk/res/android', 'android')
+            this.appClassName = parsedManifest.application[0].attribute(androidTag.name)
+
+            if (this.appClassName != null && this.appClassName.length() > 0) {
+                this.appClassPathName = this.appClassName.replace('.', '/') + '.class'
+            }
+        }
 
         this.isInitialized = true
     }
@@ -163,9 +160,6 @@ public class AuxiliaryInjectTransform extends Transform {
             printMsgLog("PreGeneratedPatchDex mode is disabled, skip transforming.")
         }
 
-        // Auxiliary class may be exist if user create it manually in his project.
-        boolean isAuxiliaryClassExists = false
-
         if (!dirInputs.isEmpty() || !jarInputs.isEmpty()) {
             File dirOutput = transformInvocation.outputProvider.getContentLocation(
                     "classes", getOutputTypes(), getScopes(), Format.DIRECTORY)
@@ -195,8 +189,8 @@ public class AuxiliaryInjectTransform extends Transform {
                                         return // continue.
                                     }
 
-                                    // If disabled, skip all classes.
-                                    if (!this.isEnabled) {
+                                    // If disabled or not a class file, skip transforming them.
+                                    if (!this.isEnabled || !fileInput.getName().endsWith('.class')) {
                                         Files.copy(fileInput, fileOutput)
                                     } else {
                                         // Skip application class.
@@ -204,11 +198,6 @@ public class AuxiliaryInjectTransform extends Transform {
                                             printWarnLog('Skipping Application class: %s',
                                                     relativeInputClassPath)
                                             Files.copy(fileInput, fileOutput)
-                                        } else
-                                        // Skip and mark auxiliary class.
-                                        if (relativeInputClassPath.equals(this.auxiliaryClassPathName)) {
-                                            isAuxiliaryClassExists = true
-                                            Files.copy(fileInput, fileOutput)
                                         } else {
                                             printMsgLog('Processing %s file %s',
                                                     fileStatus,
@@ -239,7 +228,7 @@ public class AuxiliaryInjectTransform extends Transform {
                             dirOutput.deleteDir()
                         }
 
-                        dirInput.file.traverse(type: FileType.FILES, nameFilter: ~/.*\.class$/) { fileInput ->
+                        dirInput.file.traverse(type: FileType.FILES) { fileInput ->
                             File fileOutput = new File(fileInput.getAbsolutePath().replace(dirInput.file.getAbsolutePath(), dirOutput.getAbsolutePath()))
                             if (!fileOutput.exists()) {
                                 fileOutput.getParentFile().mkdirs()
@@ -248,8 +237,8 @@ public class AuxiliaryInjectTransform extends Transform {
                                     dirInput.file.toPath().relativize(fileInput.toPath())
                                             .toString().replace('\\', '/')
 
-                            // If disabled, skip all classes.
-                            if (!this.isEnabled) {
+                            // If disabled or not a class file, skip transforming them.
+                            if (!this.isEnabled || !fileInput.getName().endsWith('.class')) {
                                 Files.copy(fileInput, fileOutput)
                             } else {
                                 // Skip application class.
@@ -257,11 +246,6 @@ public class AuxiliaryInjectTransform extends Transform {
                                     printWarnLog('Skipping Application class: %s',
                                             relativeInputClassPath)
                                     Files.copy(fileInput, fileOutput)
-                                } else
-                                // Skip and mark auxiliary class.
-                                if (relativeInputClassPath.equals(this.auxiliaryClassPathName)) {
-                                    isAuxiliaryClassExists = true
-                                    Files.copy(fileInput, fileOutput)
                                 } else {
                                     printMsgLog('Processing %s file %s',
                                             Status.ADDED,
@@ -275,26 +259,13 @@ public class AuxiliaryInjectTransform extends Transform {
             }
 
             if (!jarInputs.isEmpty()) {
-                File jarOutput = transformInvocation.outputProvider.getContentLocation(
-                        "combined", getOutputTypes(), getScopes(), Format.JAR
-                )
-                if (!jarOutput.exists()) {
-                    jarOutput.getParentFile().mkdirs()
-                }
-
-                File tempJarOutputDir = new File(transformInvocation.context.temporaryDir, "combined-jars")
-                if (!tempJarOutputDir.exists()) {
-                    tempJarOutputDir.mkdirs()
-                }
-
-                List<File> jarsToMerge = new ArrayList<>()
-
                 jarInputs.each { jarInput ->
-                    File fileInput = jarInput.file
-                    File fileOutput = new File(tempJarOutputDir,
-                            getUniqueHashName(fileInput))
-                    if (!fileOutput.exists()) {
-                        fileOutput.getParentFile().mkdirs()
+                    File jarInputFile = jarInput.file
+                    File jarOutputFile = transformInvocation.outputProvider.getContentLocation(
+                            getUniqueHashName(jarInputFile), getOutputTypes(), getScopes(), Format.JAR
+                    )
+                    if (!jarOutputFile.exists()) {
+                        jarOutputFile.getParentFile().mkdirs()
                     }
 
                     switch (jarInput.status) {
@@ -308,60 +279,39 @@ public class AuxiliaryInjectTransform extends Transform {
                             if (this.isEnabled) {
                                 printMsgLog('Processing %s file %s',
                                         transformInvocation.incremental ? jarInput.status : Status.ADDED,
-                                        tempJarOutputDir.toPath().relativize(fileOutput.toPath()).toString())
+                                        jarInputFile)
                             }
 
-                            AuxiliaryClassInjector.processJar(fileInput, fileOutput, new ProcessJarCallback() {
+                            AuxiliaryClassInjector.processJar(jarInputFile, jarOutputFile, new ProcessJarCallback() {
                                 @Override
                                 boolean onProcessClassEntry(String entryName) {
-                                    // If disabled, skip all classes.
-                                    if (!this.isEnabled) {
+                                    // If disabled or not a class file, skip transforming them.
+                                    if (!this.isEnabled || !entryName.endsWith('.class')) {
                                         return false
                                     } else {
                                         // Skip application class.
                                         if (entryName.equals(AuxiliaryInjectTransform.this.appClassPathName)) {
                                             return false
-                                        } else
-                                        // Skip and mark auxiliary class.
-                                        if (entryName.equals(AuxiliaryInjectTransform.this.auxiliaryClassPathName)) {
-                                            isAuxiliaryClassExists = true
-                                            return false
                                         } else {
                                             return true;
                                         }
                                     }
                                 }
                             })
-                            jarsToMerge.add(fileOutput)
                             break
                         case Status.REMOVED:
                             // Print log if it's enabled only.
                             if (this.isEnabled) {
                                 printMsgLog('Removing %s file %s from result.', fileStatus,
-                                        tempJarOutputDir.toPath().relativize(fileOutput.toPath()).toString())
+                                        jarOutputFile)
                             }
 
-                            if (fileOutput.exists()) {
-                                fileOutput.delete()
+                            if (jarOutputFile.exists()) {
+                                jarOutputFile.delete()
                             }
                             break
                     }
                 }
-
-                mergeJars(jarsToMerge, jarOutput)
-            }
-
-            if (this.isEnabled) {
-                if (!isAuxiliaryClassExists) {
-                    printMsgLog('Generating auxiliary class %s.', this.auxiliaryClassPathName)
-                    AuxiliaryClassGenerator.generateAuxiliaryClass(
-                            dirOutput, AuxiliaryClassInjector.AUXILIARY_CLASSNAME)
-                } else {
-                    printWarnLog(
-                            'Found auxiliary class %s in your source codes, skip generating.',
-                            this.auxiliaryClassPathName
-                    )
-                }
             }
         }
     }
@@ -376,44 +326,7 @@ public class AuxiliaryInjectTransform extends Transform {
         final int extSepPos = fileInputName.lastIndexOf('.')
         final String fileInputNamePrefix =
                 (extSepPos >= 0 ? fileInputName.substring(0, extSepPos) : fileInputName)
-        final String fileInputNameSurfix =
-                (extSepPos >= 0 ? fileInputName.substring(extSepPos) : '')
-        return fileInputNamePrefix + '_' + pathMD5 + fileInputNameSurfix
-    }
-
-    private void mergeJars(Collection<File> jarsToMerge, File jarOutput) {
-        if (jarsToMerge == null || jarsToMerge.size() == 0) {
-            return
-        }
-
-        Set<String> addedEntries = new HashSet<>()
-        ZipOutputStream zos = null
-        try {
-            zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOutput)))
-            jarsToMerge.each { jarInput ->
-                ZipInputStream zis = null
-                try {
-                    zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(jarInput)))
-                    ZipEntry entryIn = null
-                    while ((entryIn = zis.getNextEntry()) != null) {
-                        final String entryName = entryIn.getName()
-                        if (!addedEntries.contains(entryName)) {
-                            addedEntries.add(entryName)
-                            ZipEntry entryOut = new ZipEntry(entryIn.getName())
-                            zos.putNextEntry(entryOut)
-                            if (!entryIn.isDirectory()) {
-                                Streams.copy(zis, zos)
-                            }
-                            zos.closeEntry()
-                        }
-                    }
-                } finally {
-                    closeQuietly(zis)
-                }
-            }
-        } finally {
-            closeQuietly(zos)
-        }
+        return fileInputNamePrefix + '_' + pathMD5
     }
 
     private void printMsgLog(String fmt, Object... vals) {
@@ -427,15 +340,5 @@ public class AuxiliaryInjectTransform extends Transform {
         this.project.logger.warn("[{}] {}", title,
                 (vals == null || vals.length == 0 ? fmt : String.format(fmt, vals)))
     }
-
-    private void closeQuietly(Closeable target) {
-        if (target != null) {
-            try {
-                target.close()
-            } catch (Exception e) {
-                // Ignored.
-            }
-        }
-    }
 }
 
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassGenerator.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassGenerator.java
deleted file mode 100644
index f19c2c69..00000000
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassGenerator.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*
- * Tencent is pleased to support the open source community by making Tinker available.
- *
- * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
- *
- * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- * https://opensource.org/licenses/BSD-3-Clause
- *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is
- * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
- * either express or implied. See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tencent.tinker.build.auxiliaryclass;
-
-import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
-
-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.util.regex.Pattern;
-
-/**
- * Created by tangyinsheng on 2016/10/13.
- */
-
-public final class AuxiliaryClassGenerator {
-    private static final String JAVA_IDENTIFIER_PATTERN_STR =
-            "(?:\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)";
-
-    private static final String JAVA_FULL_CLASSNAME_PATTERN_STR =
-            String.format("(%s(?:\\.%s)*)", JAVA_IDENTIFIER_PATTERN_STR,
-                    JAVA_IDENTIFIER_PATTERN_STR);
-
-    private static final Pattern JAVA_FULL_CLASSNAME_PATTERN =
-            Pattern.compile(JAVA_FULL_CLASSNAME_PATTERN_STR);
-
-    public static void generateAuxiliaryClass(File dirOutput, String dotClassName) throws IOException {
-        if (!JAVA_FULL_CLASSNAME_PATTERN.matcher(dotClassName).matches()) {
-            throw new IllegalArgumentException("Bad dotClassName: " + dotClassName);
-        }
-        if (isPrimitiveClass(dotClassName)) {
-            throw new UnsupportedOperationException("Cannot generate primitive class.");
-        }
-        if (isArrayClass(dotClassName)) {
-            throw new UnsupportedOperationException("Cannot generate array class.");
-        }
-
-        final int lastDotSepPos = dotClassName.lastIndexOf('.');
-        final String classPkgPart =
-                (lastDotSepPos >= 0 ? dotClassName.substring(0, lastDotSepPos) : "");
-        final String classNamePart = dotClassName.substring(lastDotSepPos + 1);
-
-        final File realDirOutput = new File(dirOutput, classPkgPart.replace('.', '/'));
-        if (!realDirOutput.exists()) {
-            realDirOutput.mkdirs();
-        }
-        final File fileOut = new File(realDirOutput, classNamePart + ".class");
-
-        generateClass(dotClassName, fileOut);
-    }
-
-    private static void generateClass(String dotClassName, File fileOut) throws IOException {
-        final String classDesc = dotClassName.replace('.', '/');
-        ClassWriter cw = new ClassWriter(0);
-        cw.visit(
-                Opcodes.V1_7,
-                Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER,
-                classDesc,
-                null,
-                "java/lang/Object",
-                null
-        );
-        cw.visitSource(fileOut.getName(), null);
-        {
-            MethodVisitor mv = cw.visitMethod(
-                    Opcodes.ACC_PUBLIC, "<init>", "()V", null, null
-            );
-            mv.visitVarInsn(Opcodes.ALOAD, 0);
-            mv.visitMethodInsn(Opcodes.INVOKESPECIAL,
-                    "java/lang/Object",
-                    "<init>",
-                    "()V",
-                    false
-            );
-            mv.visitInsn(Opcodes.RETURN);
-            mv.visitMaxs(1, 1);
-            mv.visitEnd();
-        }
-        cw.visitEnd();
-        byte[] classBytes = cw.toByteArray();
-
-        OutputStream os = null;
-        try {
-            os = new BufferedOutputStream(new FileOutputStream(fileOut));
-            os.write(classBytes);
-        } finally {
-            if (os != null) {
-                try {
-                    os.close();
-                } catch (Exception e) {
-                    // Ignored.
-                }
-            }
-        }
-    }
-
-    private static boolean isPrimitiveClass(String className) {
-        try {
-            return Class.forName(className).isPrimitive();
-        } catch (ClassNotFoundException e) {
-            return false;
-        }
-    }
-
-    private static boolean isArrayClass(String className) {
-        try {
-            return Class.forName(className).isArray();
-        } catch (ClassNotFoundException e) {
-            return false;
-        }
-    }
-}
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjectAdapter.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjectAdapter.java
index a840654a..6cd7200d 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjectAdapter.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjectAdapter.java
@@ -18,6 +18,7 @@
 
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.Label;
 import org.objectweb.asm.MethodVisitor;
 import org.objectweb.asm.Opcodes;
 import org.objectweb.asm.Type;
@@ -104,8 +105,12 @@ public void visitEnd() {
         if (!this.isClInitExists && !this.isInitExists) {
             MethodVisitor mv = super.visitMethod(Opcodes.ACC_STATIC, "<clinit>", "()V", null, null);
             mv.visitCode();
-            mv.visitLdcInsn(Type.getType(AuxiliaryClassInjectAdapter.this.auxiliaryClassDesc));
+            mv.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "lineSeparator", "()Ljava/lang/String;", false);
+            Label lblSkipInvalidInsn = new Label();
+            mv.visitJumpInsn(Opcodes.IFNONNULL, lblSkipInvalidInsn);
+            mv.visitLdcInsn(Type.getType(this.auxiliaryClassDesc));
             mv.visitVarInsn(Opcodes.ASTORE, 0);
+            mv.visitLabel(lblSkipInvalidInsn);
             mv.visitInsn(Opcodes.RETURN);
             mv.visitMaxs(1, 1);
             mv.visitEnd();
@@ -121,8 +126,12 @@ public void visitEnd() {
         @Override
         public void visitInsn(int opcode) {
             if (opcode == Opcodes.RETURN) {
+                super.visitMethodInsn(Opcodes.INVOKESTATIC, "java/lang/System", "lineSeparator", "()Ljava/lang/String;", false);
+                Label lblSkipInvalidInsn = new Label();
+                super.visitJumpInsn(Opcodes.IFNONNULL, lblSkipInvalidInsn);
                 super.visitLdcInsn(Type.getType(AuxiliaryClassInjectAdapter.this.auxiliaryClassDesc));
                 super.visitVarInsn(Opcodes.ASTORE, 0);
+                super.visitLabel(lblSkipInvalidInsn);
             }
             super.visitInsn(opcode);
         }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
index 88979366..a74cfea6 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/auxiliaryclass/AuxiliaryClassInjector.java
@@ -31,6 +31,8 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 import java.nio.charset.Charset;
+import java.util.HashMap;
+import java.util.Map;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import java.util.zip.ZipOutputStream;
@@ -40,7 +42,10 @@
  */
 
 public final class AuxiliaryClassInjector {
-    public static final String AUXILIARY_CLASSNAME = "dalvik.system.PathClassLoader";
+    // The descriptor of this class is so strange so that we hope no one
+    // would happen to create a class named the same as it.
+    public static final String NOT_EXISTS_CLASSNAME
+            = "tInKEr.pReVEnT.PrEVErIfIEd.STuBCLaSS";
 
     public interface ProcessJarCallback {
         boolean onProcessClassEntry(String entryName);
@@ -79,22 +84,35 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback
             zis = new ZipInputStream(new BufferedInputStream(new FileInputStream(jarIn)), charsetIn);
             zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)), charsetOut);
             ZipEntry entryIn = null;
+            Map<String, Integer> processedEntryNamesMap = new HashMap<>();
             while ((entryIn = zis.getNextEntry()) != null) {
                 final String entryName = entryIn.getName();
-                ZipEntry entryOut = new ZipEntry(entryName);
-                zos.putNextEntry(entryOut);
-                if (!entryIn.isDirectory()) {
-                    if (entryName.endsWith(".class")) {
-                        if (cb == null || cb.onProcessClassEntry(entryName)) {
-                            processClass(zis, zos);
+                ZipEntry entryOut = new ZipEntry(entryIn);
+                entryOut.setCompressedSize(-1);
+                if (!processedEntryNamesMap.containsKey(entryName)) {
+                    zos.putNextEntry(entryOut);
+                    if (!entryIn.isDirectory()) {
+                        if (entryName.endsWith(".class")) {
+                            if (cb == null || cb.onProcessClassEntry(entryName)) {
+                                processClass(zis, zos);
+                            } else {
+                                Streams.copy(zis, zos);
+                            }
                         } else {
                             Streams.copy(zis, zos);
                         }
-                    } else {
-                        Streams.copy(zis, zos);
                     }
+                    zos.closeEntry();
+                    processedEntryNamesMap.put(entryName, 1);
+                } else {
+                    int duplicateCount = processedEntryNamesMap.get(entryName);
+                    final String wrapperJarName
+                            = jarOut.getName().substring(0, jarOut.getName().lastIndexOf(".jar"))
+                            + "_dup_ew_" + duplicateCount + ".jar";
+                    File wrapperJarOut = new File(jarOut.getParentFile(), wrapperJarName);
+                    wrapEntryByJar(entryOut, zis, wrapperJarOut);
+                    processedEntryNamesMap.put(entryName, duplicateCount + 1);
                 }
-                zos.closeEntry();
             }
         } finally {
             closeQuietly(zos);
@@ -102,10 +120,22 @@ private static void processJarHelper(File jarIn, File jarOut, ProcessJarCallback
         }
     }
 
+    private static void wrapEntryByJar(ZipEntry ze, InputStream eData, File jarOut) throws IOException {
+        ZipOutputStream zos = null;
+        try {
+            zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(jarOut)));
+            zos.putNextEntry(ze);
+            Streams.copy(eData, zos);
+            zos.closeEntry();
+        } finally {
+            closeQuietly(zos);
+        }
+    }
+
     private static void processClass(InputStream classIn, OutputStream classOut) throws IOException {
         ClassReader cr = new ClassReader(classIn);
         ClassWriter cw = new ClassWriter(0);
-        AuxiliaryClassInjectAdapter aia = new AuxiliaryClassInjectAdapter(AUXILIARY_CLASSNAME, cw);
+        AuxiliaryClassInjectAdapter aia = new AuxiliaryClassInjectAdapter(NOT_EXISTS_CLASSNAME, cw);
         cr.accept(aia, 0);
         classOut.write(cw.toByteArray());
         classOut.flush();
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
index 1347e16d..01d3ce8c 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ResDiffDecoder.java
@@ -289,9 +289,9 @@ public void onAllPatchesEnd() throws IOException, TinkerPatchException {
         String resZipMd5 = Utils.genResOutputFile(extractToZip, tempResZip, config,
             addedSet, modifiedSet, deletedSet, largeModifiedSet, largeModifiedMap);
 
-        Logger.e("final normal zip resource: %s, size=%d, md5=%s", extractToZip.getName(), extractToZip.length(), resZipMd5);
+        Logger.e("Final normal zip resource: %s, size=%d, md5=%s", extractToZip.getName(), extractToZip.length(), resZipMd5);
         logWriter.writeLineToInfoFile(
-            String.format("final normal zip resource: %s, size=%d, md5=%s", extractToZip.getName(), extractToZip.length(), resZipMd5)
+            String.format("Final normal zip resource: %s, size=%d, md5=%s", extractToZip.getName(), extractToZip.length(), resZipMd5)
         );
         //delete temp file
         FileOperation.deleteFile(tempResZip);
@@ -309,9 +309,9 @@ public void onAllPatchesEnd() throws IOException, TinkerPatchException {
                     addedSet, modifiedSet, deletedSet, largeModifiedSet, largeModifiedMap);
                 //delete temp file
                 FileOperation.deleteFile(tempRes7Zip);
-                Logger.e("final 7zip resource: %s, size=%d, md5=%s", extractTo7Zip.getName(), extractTo7Zip.length(), res7zipMd5);
+                Logger.e("Final 7zip resource: %s, size=%d, md5=%s", extractTo7Zip.getName(), extractTo7Zip.length(), res7zipMd5);
                 logWriter.writeLineToInfoFile(
-                    String.format("final 7zip resource: %s, size=%d, md5=%s", extractTo7Zip.getName(), extractTo7Zip.length(), res7zipMd5)
+                    String.format("Final 7zip resource: %s, size=%d, md5=%s", extractTo7Zip.getName(), extractTo7Zip.length(), res7zipMd5)
                 );
             }
         }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java b/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java
index 50d89e3e..620e5e43 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/org/jf/dexlib2/builder/BuilderMutableMethodImplementation.java
@@ -213,7 +213,7 @@ public void perform() {
 
             for (ExceptionHandler exceptionHandler : tryBlock.getExceptionHandlers()) {
                 tryBlocks.add(new BuilderTryBlock(startLabel, endLabel,
-                        exceptionHandler.getExceptionTypeReference(),
+                        (TypeReference) convertReference(exceptionHandler.getExceptionTypeReference()),
                         newLabel(codeAddressToIndex, exceptionHandler.getHandlerCodeAddress())));
             }
         }
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index e9b6f2d6..9fdbdf75 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -24,7 +24,7 @@ dependencies {
 
 def gitSha() {
     try {
-        String gitRev = 'git rev-parse --short HEAD'.execute().text.trim()
+        String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
         if (gitRev == null) {
             throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
         }
@@ -140,12 +140,12 @@ ext {
     //old apk file to build patch apk
     tinkerOldApkPath = "${bakPath}/app-debug-1018-17-32-47.apk"
     //proguard mapping file to build patch apk
-    tinkerApplyMappingPath = "${bakPath}/"
+    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
     //resource R.txt to build patch apk, must input if there is resource changed
-    tinkerApplyResourcePath = "${bakPath}/"
+    tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"
 
-    //use for build all flavor, just fill this field
-    tinkerBuildFlavorDirectory = "${bakPath}/app-debug-1018-17-32-47-R.txt"
+    //only use for build all flavor, if not, just ignore this field
+    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
 }
 
 
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index c9e94d4f..beec0488 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -17,4 +17,4 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-TINKER_VERSION=1.7.0
+TINKER_VERSION=1.7.1
