diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
index e36f6d37..3d3d67cf 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
@@ -71,14 +71,14 @@
 
     protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck checker, Context context,
                                                 String patchVersionDirectory, File patchFile) {
-        TinkerLog.e(TAG, "tryRecoverDexFiles begin...");
+        TinkerLog.d(TAG, "dtryRecoverDexFiles begin...");
 
         if (!manager.isEnabledForDex()) {
             TinkerLog.w(TAG, "patch recover, dex is not enabled");
             return true;
         }
         String dexMeta = checker.getMetaContentMap().get(DEX_META_FILE);
-
+        TinkerLog.d(TAG, "dexMeta is " + dexMeta);
         if (dexMeta == null) {
             TinkerLog.w(TAG, "patch recover, dex is not contained");
             return true;
@@ -87,7 +87,7 @@ protected static boolean tryRecoverDexFiles(Tinker manager, ShareSecurityCheck c
         long begin = SystemClock.elapsedRealtime();
         boolean result = patchDexExtractViaDexDiff(context, patchVersionDirectory, dexMeta, patchFile);
         long cost = SystemClock.elapsedRealtime() - begin;
-        TinkerLog.i(TAG, "recover dex result:%b, cost:%d", result, cost);
+        TinkerLog.d(TAG, "recover dex result:%b, cost:%d", result, cost);
         return result;
     }
 
@@ -428,11 +428,17 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
 
             String apkPath = applicationInfo.sourceDir;
             apk = new ZipFile(apkPath);
+            TinkerLog.d(TAG, "apkPath : " + patchList.toString());
             patch = new ZipFile(patchFile);
+            TinkerLog.d(TAG, "patchFilePath : " + patchFile.getAbsolutePath());
+
             if (checkClassNDexFiles(dir)) {
                 TinkerLog.w(TAG, "class n dex file %s is already exist, and md5 match, just continue", ShareConstants.CLASS_N_APK_NAME);
                 return true;
             }
+
+            TinkerLog.d(TAG, "patchList : " + patchList.toString());
+
             for (ShareDexDiffPatchInfo info : patchList) {
                 long start = System.currentTimeMillis();
 
@@ -475,10 +481,16 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                     extractedFile.getParentFile().mkdirs();
                 }
 
+                TinkerLog.d(TAG, "extractedFile path " + extractedFile.getAbsolutePath());
+
                 ZipEntry patchFileEntry = patch.getEntry(patchRealPath);
+                TinkerLog.d(TAG, "patchFileEntry name " + patchFileEntry.getName());
                 ZipEntry rawApkFileEntry = apk.getEntry(patchRealPath);
+                TinkerLog.d(TAG, "rawApkFileEntry name " + rawApkFileEntry.getName());
 
                 if (oldDexCrc.equals("0")) {
+                    TinkerLog.d(TAG, "oldDexCrc.equals(\"0\")");
+
                     if (patchFileEntry == null) {
                         TinkerLog.w(TAG, "patch entry is null. path:" + patchRealPath);
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type);
@@ -492,6 +504,7 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                         return false;
                     }
                 } else if (dexDiffMd5.equals("0")) {
+                    TinkerLog.d(TAG, "dexDiffMd5.equals(\"0\")");
                     // skip process old dex for real dalvik vm
                     if (!isVmArt) {
                         continue;
@@ -522,6 +535,8 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                         return false;
                     }
                 } else {
+                    TinkerLog.d(TAG, "else ...");
+
                     if (patchFileEntry == null) {
                         TinkerLog.w(TAG, "patch entry is null. path:" + patchRealPath);
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, extractedFile, info.rawName, type);
@@ -547,6 +562,13 @@ private static boolean extractDexDiffInternals(Context context, String dir, Stri
                         return false;
                     }
 
+                    TinkerLog.w(TAG, "即将调用patchDexFile，apk : " + apk.getName()
+                            + " , patchApk : " + patch.getName()
+                            + " , rawApkFileEntry : " + rawApkFileEntry.getName()
+                            + " , patchFileEntry : " + patchFileEntry.getName()
+                            + " , info : " + info
+                            + " , extractedFilePath : " + extractedFile.getAbsolutePath());
+
                     patchDexFile(apk, patch, rawApkFileEntry, patchFileEntry, info, extractedFile);
 
                     if (!SharePatchFileUtil.verifyDexFileMd5(extractedFile, extractedFileMd5)) {
@@ -668,6 +690,7 @@ private static void patchDexFile(
             patchFileStream = (patchFileEntry != null ? new BufferedInputStream(patchPkg.getInputStream(patchFileEntry)) : null);
 
             final boolean isRawDexFile = SharePatchFileUtil.isRawDexFile(patchInfo.rawName);
+            TinkerLog.w(TAG, "isRawDexFile : " + isRawDexFile + " , patchInfo.isJarMode : " + patchInfo.isJarMode);
             if (!isRawDexFile || patchInfo.isJarMode) {
                 ZipOutputStream zos = null;
                 try {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
index e2690254..9f25e8ae 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
@@ -45,9 +45,9 @@
 
     private static final String TAG = "Tinker.TinkerDexLoader";
 
-    private static final String DEX_MEAT_FILE               = ShareConstants.DEX_META_FILE;
-    private static final String DEX_PATH                    = ShareConstants.DEX_PATH;
-    private static final String DEFAULT_DEX_OPTIMIZE_PATH   = ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;
+    private static final String DEX_MEAT_FILE = ShareConstants.DEX_META_FILE;
+    private static final String DEX_PATH = ShareConstants.DEX_PATH;
+    private static final String DEFAULT_DEX_OPTIMIZE_PATH = ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;
     private static final String INTERPRET_DEX_OPTIMIZE_PATH = ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH;
 
     private static final ArrayList<ShareDexDiffPatchInfo> loadDexList = new ArrayList<>();
@@ -86,6 +86,8 @@ public static boolean loadTinkerJars(final TinkerApplication application, String
 
         ArrayList<File> legalFiles = new ArrayList<>();
 
+        Log.w(TAG, "loadTinkerJars loadDexList : " + loadDexList.toString());
+
         for (ShareDexDiffPatchInfo info : loadDexList) {
             //for dalvik, ignore art support dex
             if (isJustArtSupportDex(info)) {
@@ -102,7 +104,7 @@ public static boolean loadTinkerJars(final TinkerApplication application, String
                     //it is good to delete the mismatch file
                     ShareIntentUtil.setIntentReturnCode(intentResult, ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);
                     intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,
-                        file.getAbsolutePath());
+                            file.getAbsolutePath());
                     return false;
                 }
                 Log.i(TAG, "verify dex file:" + file.getPath() + " md5, use time: " + (System.currentTimeMillis() - start));
@@ -112,6 +114,8 @@ public static boolean loadTinkerJars(final TinkerApplication application, String
         // verify merge classN.apk
         if (isVmArt && !classNDexInfo.isEmpty()) {
             File classNFile = new File(dexPath + ShareConstants.CLASS_N_APK_NAME);
+            Log.i(TAG, "classNFilePath : " + classNFile.getAbsolutePath());
+
             long start = System.currentTimeMillis();
 
             if (application.isTinkerLoadVerifyFlag()) {
@@ -119,7 +123,7 @@ public static boolean loadTinkerJars(final TinkerApplication application, String
                     if (!SharePatchFileUtil.verifyDexFileMd5(classNFile, info.rawName, info.destMd5InArt)) {
                         ShareIntentUtil.setIntentReturnCode(intentResult, ShareConstants.ERROR_LOAD_PATCH_VERSION_DEX_MD5_MISMATCH);
                         intentResult.putExtra(ShareIntentUtil.INTENT_PATCH_MISMATCH_DEX_PATH,
-                            classNFile.getAbsolutePath());
+                                classNFile.getAbsolutePath());
                         return false;
                     }
                 }
@@ -157,29 +161,29 @@ public static boolean loadTinkerJars(final TinkerApplication application, String
             optimizeDir = new File(directory + "/" + INTERPRET_DEX_OPTIMIZE_PATH);
 
             TinkerDexOptimizer.optimizeAll(
-                legalFiles, optimizeDir, true, targetISA,
-                new TinkerDexOptimizer.ResultCallback() {
-                    long start;
-
-                    @Override
-                    public void onStart(File dexFile, File optimizedDir) {
-                        start = System.currentTimeMillis();
-                        Log.i(TAG, "start to optimize dex:" + dexFile.getPath());
-                    }
-
-                    @Override
-                    public void onSuccess(File dexFile, File optimizedDir, File optimizedFile) {
-                        // Do nothing.
-                        Log.i(TAG, "success to optimize dex " + dexFile.getPath() + ", use time " + (System.currentTimeMillis() - start));
+                    legalFiles, optimizeDir, true, targetISA,
+                    new TinkerDexOptimizer.ResultCallback() {
+                        long start;
+
+                        @Override
+                        public void onStart(File dexFile, File optimizedDir) {
+                            start = System.currentTimeMillis();
+                            Log.i(TAG, "start to optimize dex:" + dexFile.getPath());
+                        }
+
+                        @Override
+                        public void onSuccess(File dexFile, File optimizedDir, File optimizedFile) {
+                            // Do nothing.
+                            Log.i(TAG, "success to optimize dex " + dexFile.getPath() + ", use time " + (System.currentTimeMillis() - start));
+                        }
+
+                        @Override
+                        public void onFailed(File dexFile, File optimizedDir, Throwable thr) {
+                            parallelOTAResult[0] = false;
+                            parallelOTAThrowable[0] = thr;
+                            Log.i(TAG, "fail to optimize dex " + dexFile.getPath() + ", use time " + (System.currentTimeMillis() - start));
+                        }
                     }
-
-                    @Override
-                    public void onFailed(File dexFile, File optimizedDir, Throwable thr) {
-                        parallelOTAResult[0] = false;
-                        parallelOTAThrowable[0] = thr;
-                        Log.i(TAG, "fail to optimize dex " + dexFile.getPath() + ", use time " + (System.currentTimeMillis() - start));
-                    }
-                }
             );
 
 
@@ -191,6 +195,7 @@ public void onFailed(File dexFile, File optimizedDir, Throwable thr) {
             }
         }
         try {
+            Log.e(TAG, "即将installDexes， legalFiles : " + legalFiles.toString());
             SystemClassLoaderAdder.installDexes(application, classLoader, optimizeDir, legalFiles);
         } catch (Throwable e) {
             Log.e(TAG, "install dexes failed");
@@ -250,7 +255,7 @@ public static boolean checkComplete(String directory, ShareSecurityCheck securit
         }
 
         if (isVmArt
-            && (testInfo != null || !classNDexInfo.isEmpty())) {
+                && (testInfo != null || !classNDexInfo.isEmpty())) {
             if (testInfo != null) {
                 classNDexInfo.add(ShareTinkerInternals.changeTestDexToClassN(testInfo, classNDexInfo.size() + 1));
             }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareReflectUtil.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareReflectUtil.java
index 688a4cd0..7ae143b4 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareReflectUtil.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareReflectUtil.java
@@ -184,7 +184,9 @@ public static void expandFieldArray(Object instance, String fieldName, Object[]
 
         // NOTE: changed to copy extraElements first, for patch load first
 
+        //先拷贝extraElements
         System.arraycopy(extraElements, 0, combined, 0, extraElements.length);
+        //再拷贝original
         System.arraycopy(original, 0, combined, extraElements.length, original.length);
 
         jlrField.set(instance, combined);
