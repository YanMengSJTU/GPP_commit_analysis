diff --git a/gradle.properties b/gradle.properties
index 0667ab7c..8842bf2c 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,5 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-VERSION_NAME_PREFIX=1.7.1
+VERSION_NAME_PREFIX=1.8.0
 VERSION_NAME_SUFFIX=
\ No newline at end of file
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
index f0f3055f..b4cf11d0 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
@@ -60,7 +60,7 @@ public int onPatchReceived(String path, boolean isUpgrade) {
 
     protected int patchCheck(String path, boolean isUpgrade) {
         Tinker manager = Tinker.with(context);
-        //check SharePrefenences also
+        //check SharePreferences also
         if (!manager.isTinkerEnabled() || !ShareTinkerInternals.isTinkerEnableWithSharedPreferences(context)) {
             return ShareConstants.ERROR_PATCH_DISABLE;
         }
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index 75f254af..12281e2c 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -149,6 +149,10 @@ protected void onHandleIntent(Intent intent) {
     }
 
     private void increasingPriority() {
+        if (Build.VERSION.SDK_INT > 24) {
+            TinkerLog.i(TAG, "for Android 7.1, we just ignore increasingPriority job");
+            return;
+        }
         TinkerLog.i(TAG, "try to increase patch process priority");
         Notification notification = new Notification();
         if (Build.VERSION.SDK_INT < 18) {
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
index 5c20b80f..6678afa3 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
@@ -70,11 +70,14 @@ public static void installDexes(Application application, PathClassLoader loader,
             } else {
                 V4.install(classLoader, files, dexOptDir);
             }
+            //install done
+            sPatchDexCount = files.size();
 
             if (!checkDexInstall(classLoader)) {
+                //reset patch dex
+                SystemClassLoaderAdder.uninstallPatchDex(classLoader);
                 throw new TinkerRuntimeException(ShareConstants.CHECK_DEX_INSTALL_FAIL);
             }
-            sPatchDexCount = files.size();
         }
     }
 
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
index c21c327e..96925995 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerResourcePatcher.java
@@ -29,6 +29,7 @@
 import java.lang.reflect.Method;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Map;
 
 import static android.os.Build.VERSION.SDK_INT;
 import static android.os.Build.VERSION_CODES.KITKAT;
@@ -44,8 +45,28 @@
     private static Method       ensureStringBlocksMethod = null;
     private static Field        assetsFiled              = null;
     private static Field        resourcesImplFiled      = null;
+    private static Field        resDir      = null;
 
     public static void isResourceCanPatch(Context context) throws Throwable {
+        //   - Replace mResDir to point to the external resource file instead of the .apk. This is
+        //     used as the asset path for new Resources objects.
+        //   - Set Application#mLoadedApk to the found LoadedApk instance
+
+        // Find the ActivityThread instance for the current thread
+        Class<?> activityThread = Class.forName("android.app.ActivityThread");
+        Object currentActivityThread = getActivityThread(context, activityThread);
+        // API version 8 has PackageInfo, 10 has LoadedApk. 9, I don't know.
+        Class<?> loadedApkClass;
+        try {
+            loadedApkClass = Class.forName("android.app.LoadedApk");
+        } catch (ClassNotFoundException e) {
+            loadedApkClass = Class.forName("android.app.ActivityThread$PackageInfo");
+        }
+        Field mApplication = loadedApkClass.getDeclaredField("mApplication");
+        mApplication.setAccessible(true);
+        resDir = loadedApkClass.getDeclaredField("mResDir");
+        resDir.setAccessible(true);
+
         /*
         (Note: the resource directory is *also* inserted into the loadedApk in
         monkeyPatchApplication)
@@ -110,13 +131,11 @@ public static void isResourceCanPatch(Context context) throws Throwable {
                 references = (Collection<WeakReference<Resources>>) mResourceReferences.get(resourcesManager);
             }
         } else {
-            Class<?> activityThread = Class.forName("android.app.ActivityThread");
             Field fMActiveResources = activityThread.getDeclaredField("mActiveResources");
             fMActiveResources.setAccessible(true);
-            Object thread = getActivityThread(context, activityThread);
             @SuppressWarnings("unchecked")
             HashMap<?, WeakReference<Resources>> map =
-                (HashMap<?, WeakReference<Resources>>) fMActiveResources.get(thread);
+                (HashMap<?, WeakReference<Resources>>) fMActiveResources.get(currentActivityThread);
             references = map.values();
         }
         // check resource
@@ -137,7 +156,27 @@ public static void monkeyPatchExistingResources(Context context, String external
         if (externalResourceFile == null) {
             return;
         }
+        // Find the ActivityThread instance for the current thread
+        Class<?> activityThread = Class.forName("android.app.ActivityThread");
+        Object currentActivityThread = getActivityThread(context, activityThread);
+
+        for (String fieldName : new String[]{"mPackages", "mResourcePackages"}) {
+            Field field = activityThread.getDeclaredField(fieldName);
+            field.setAccessible(true);
+            Object value = field.get(currentActivityThread);
+
+            for (Map.Entry<String, WeakReference<?>> entry
+                : ((Map<String, WeakReference<?>>) value).entrySet()) {
+                Object loadedApk = entry.getValue().get();
+                if (loadedApk == null) {
+                    continue;
+                }
+                if (externalResourceFile != null) {
+                   resDir.set(loadedApk, externalResourceFile);
+                }
 
+            }
+        }
         // Create a new AssetManager instance and point it to the resources installed under
         // /sdcard
 
diff --git a/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro b/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
index 23c74455..e4ef8030 100644
--- a/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
+++ b/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
@@ -26,6 +26,6 @@
 }
 
 #your dex.loader pattern here
--keep class com.tencent.tinker.loader.*
+-keep class com.tencent.tinker.loader.**
 -keep class tinker.sample.android.app.SampleApplication
 
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
index 6bb132f2..8528b265 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
@@ -108,6 +108,9 @@ public class TinkerProguardConfigTask extends DefaultTask {
         //they will removed when apply
         Iterable<String> loader = project.extensions.tinkerPatch.dex.loader
         for (String pattern : loader) {
+            if (pattern.endsWith("*") && !pattern.endsWith("**")) {
+                pattern += "*"
+            }
             fr.write("-keep class " + pattern)
             fr.write("\n")
         }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java
index 97bc68c4..2682965c 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptResourceCollector.java
@@ -38,7 +38,7 @@
     private final Map<RType, Set<RDotTxtEntry>>                   rTypeResourceMap;
     private final Map<RType, Set<RDotTxtEntry>>                   rTypeIncreaseResourceMap;
     private final Map<String, Set<String>>                        duplicateResourceMap;
-    private final Map<String, String>                             sanitizeNameMap;
+    private final Map<RType, HashMap<String, String>>             sanitizeTypeMap;
     private final Set<String>                                     ignoreIdSet;
     private       int                                             currentTypeId;
 
@@ -50,7 +50,7 @@ public AaptResourceCollector() {
         this.rTypeResourceMap = new HashMap<RType, Set<RDotTxtEntry>>();
         this.rTypeIncreaseResourceMap = new HashMap<RType, Set<RDotTxtEntry>>();
         this.duplicateResourceMap = new HashMap<String, Set<String>>();
-        this.sanitizeNameMap = new HashMap<String, String>();
+        this.sanitizeTypeMap = new HashMap<RType, HashMap<String, String>>();
         this.originalResourceMap = new HashMap<RDotTxtEntry, RDotTxtEntry>();
         this.ignoreIdSet = new HashSet<String>();
         //attr type must 1
@@ -260,9 +260,16 @@ void addRTypeResourceName(RType rType, String resourceName, String resourceValue
         }
     }
 
-    void putSanitizeName(String sanitizeName, String rawName) {
-        if (!this.sanitizeNameMap.containsKey(sanitizeName)) {
-            this.sanitizeNameMap.put(sanitizeName, rawName);
+    void putSanitizeName(RType rType, String sanitizeName, String rawName) {
+        HashMap<String, String> sanitizeNameMap;
+        if (!sanitizeTypeMap.containsKey(rType)) {
+            sanitizeNameMap = new HashMap<>();
+            sanitizeTypeMap.put(rType, sanitizeNameMap);
+        } else {
+            sanitizeNameMap = sanitizeTypeMap.get(rType);
+        }
+        if (!sanitizeNameMap.containsKey(sanitizeName)) {
+            sanitizeNameMap.put(sanitizeName, rawName);
         }
     }
 
@@ -272,8 +279,11 @@ void putSanitizeName(String sanitizeName, String rawName) {
      * @param sanitizeName
      * @return String
      */
-    public String getRawName(String sanitizeName) {
-        return this.sanitizeNameMap.get(sanitizeName);
+    public String getRawName(RType rType, String sanitizeName) {
+        if (!sanitizeTypeMap.containsKey(rType)) {
+            return null;
+        }
+        return this.sanitizeTypeMap.get(rType).get(sanitizeName);
     }
 
     /**
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
index 9dec2aaa..8e058f76 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
@@ -284,12 +284,12 @@ public static void processXmlFile(String xmlFullFilename, List<RDotTxtEntry> ref
 //if(!resourceCollector.isContainResource(rType, IdType.INT, sanitizeName(resourceCollector, name))){
 //throw new AaptUtilException("Not found reference '" + resourceName + "' in '" + xmlFullFilename + "'");
 //}
-            references.add(new FakeRDotTxtEntry(IdType.INT, rType, sanitizeName(resourceCollector, name)));
+            references.add(new FakeRDotTxtEntry(IdType.INT, rType, sanitizeName(rType, resourceCollector, name)));
         }
     }
 
-    private static void addToResourceCollector(AaptResourceCollector resourceCollector, com.tencent.tinker.build.aapt.ResourceDirectory resourceDirectory, Node node, RType rType, String resourceValue) {
-        String resourceName = sanitizeName(resourceCollector, extractNameAttribute(node));
+    private static void addToResourceCollector(AaptResourceCollector resourceCollector, ResourceDirectory resourceDirectory, Node node, RType rType, String resourceValue) {
+        String resourceName = sanitizeName(rType, resourceCollector, extractNameAttribute(node));
         resourceCollector.addRTypeResourceName(rType, resourceName, resourceValue, resourceDirectory);
         if (rType.equals(RType.STYLEABLE)) {
 
@@ -300,7 +300,7 @@ private static void addToResourceCollector(AaptResourceCollector resourceCollect
                 }
 
                 String rawAttrName = extractNameAttribute(attrNode);
-                String attrName = sanitizeName(resourceCollector, rawAttrName);
+                String attrName = sanitizeName(rType, resourceCollector, rawAttrName);
                 resourceCollector.addResource(RType.STYLEABLE, IdType.INT, String.format("%s_%s", resourceName, attrName), Integer.toString(count++));
 
                 if (!rawAttrName.startsWith("android:")) {
@@ -315,9 +315,9 @@ private static void addToResourceCollector(AaptResourceCollector resourceCollect
         }
     }
 
-    private static String sanitizeName(AaptResourceCollector resourceCollector, String rawName) {
+    private static String sanitizeName(RType rType, AaptResourceCollector resourceCollector, String rawName) {
         String sanitizeName = rawName.replaceAll("[.:]", "_");
-        resourceCollector.putSanitizeName(sanitizeName, rawName);
+        resourceCollector.putSanitizeName(rType, sanitizeName, rawName);
         return sanitizeName;
     }
 
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/PatchUtil.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/PatchUtil.java
index 6f4a0cc1..af195a50 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/PatchUtil.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/PatchUtil.java
@@ -117,7 +117,7 @@ public static void generatePublicResourceXml(AaptResourceCollector aaptResourceC
                     Set<RDotTxtEntry> set = entry.getValue();
                     for (RDotTxtEntry rDotTxtEntry : set) {
 //                        if (rType.equals(RType.STYLE)) {
-                            String rawName = aaptResourceCollector.getRawName(rDotTxtEntry.name);
+                            String rawName = aaptResourceCollector.getRawName(rType, rDotTxtEntry.name);
                             if (StringUtil.isBlank(rawName)) {
 //                                System.err.println("Blank?" + rDotTxtEntry.name);
                                 rawName = rDotTxtEntry.name;
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
index fa32385f..0a298879 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
@@ -308,9 +308,9 @@ private void generateStubModePatchDex() throws IOException {
 
     @SuppressWarnings("NewApi")
     private void generatePatchInfoFile() throws IOException {
-        File tempFullPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + "full");
+        File tempFullPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + "dalvik");
         ensureDirectoryExist(tempFullPatchDexPath);
-        File tempSmallPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + "small");
+        File tempSmallPatchDexPath = new File(config.mOutFolder + File.separator + TypedValue.DEX_TEMP_PATCH_DIR + File.separator + "art");
         ensureDirectoryExist(tempSmallPatchDexPath);
 
         // Generate dex diff out and full patched dex if a pair of dex is different.
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java
index 59e6e400..642b4482 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ManifestDecoder.java
@@ -51,12 +51,12 @@ public boolean patch(File oldFile, File newFile) throws IOException, TinkerPatch
                 if (config.mDexRaw) {
                     if (ignoreWarning) {
                         //ignoreWarning, just log
-                        Logger.e("Warning:ignoreWarning is true, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will be crash at some times", minSdkVersion);
+                        Logger.e("Warning:ignoreWarning is true, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will crash at some time", minSdkVersion);
                     } else {
-                        Logger.e("Warning:ignoreWarning is false, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will be crash at some times", minSdkVersion);
+                        Logger.e("Warning:ignoreWarning is false, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will crash at some time", minSdkVersion);
 
                         throw new TinkerPatchException(
-                            String.format("ignoreWarning is false, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will be crash at some times", minSdkVersion)
+                            String.format("ignoreWarning is false, but your old apk's minSdkVersion %d is below 14, you should set the dexMode to 'jar', otherwise, it will crash at some time", minSdkVersion)
                         );
                     }
                 }
@@ -76,11 +76,11 @@ public boolean patch(File oldFile, File newFile) throws IOException, TinkerPatch
                 }
                 if (!found) {
                     if (ignoreWarning) {
-                        Logger.e("Warning:ignoreWarning is true, but we found a new AndroidComponent %s, it will be crash at some times", newComponentName);
+                        Logger.e("Warning:ignoreWarning is true, but we found a new AndroidComponent %s, it will crash at some time", newComponentName);
                     } else {
-                        Logger.e("Warning:ignoreWarning is false, but we found a new AndroidComponent %s, it will be crash at some times", newComponentName);
+                        Logger.e("Warning:ignoreWarning is false, but we found a new AndroidComponent %s, it will crash at some time", newComponentName);
                         throw new TinkerPatchException(
-                            String.format("ignoreWarning is false, but we found a new AndroidComponent %s, it will be crash at some times", newComponentName)
+                            String.format("ignoreWarning is false, but we found a new AndroidComponent %s, it will crash at some time", newComponentName)
                         );
                     }
                 }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
similarity index 86%
rename from tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java
rename to tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
index 8158746a..af443b81 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
@@ -31,23 +31,23 @@
  * Created by tangyinsheng on 2016/10/8.
  */
 
-public class RefToRefAffectedClassInsnVisitor extends InstructionVisitor {
-    private static final String TAG = "RefToRefAffectedClassInsnVisitor";
+public class ClassReferringInsnVisitor extends InstructionVisitor {
+    private static final String TAG = "ClassReferringInsnVisitor";
 
     private final Dex methodOwner;
     private final ClassData.Method method;
-    private final Collection<String> refAffectedClassDefs;
+    private final Collection<String> classDescsToCheck;
     private final DexPatcherLogger logger;
 
-    public boolean isMethodReferencedToRefAffectedClass;
+    public boolean isMethodReferencedToAnyProvidedClasses;
 
-    RefToRefAffectedClassInsnVisitor(Dex methodOwner, ClassData.Method method, Collection<String> refAffectedClassDefs, DexPatcherLogger logger) {
+    ClassReferringInsnVisitor(Dex methodOwner, ClassData.Method method, Collection<String> classDescsToCheck, DexPatcherLogger logger) {
         super(null);
         this.methodOwner = methodOwner;
         this.method = method;
-        this.refAffectedClassDefs = refAffectedClassDefs;
+        this.classDescsToCheck = classDescsToCheck;
         this.logger = logger;
-        this.isMethodReferencedToRefAffectedClass = false;
+        this.isMethodReferencedToAnyProvidedClasses = false;
     }
 
     @Override
@@ -91,7 +91,7 @@ private void processIndexByType(int index, int indexType) {
         switch (indexType) {
             case InstructionCodec.INDEX_TYPE_TYPE_REF: {
                 typeName = methodOwner.typeNames().get(index);
-                refInfoInLog = "init ref-changed class";
+                refInfoInLog = "init class";
                 break;
             }
             case InstructionCodec.INDEX_TYPE_FIELD_REF: {
@@ -107,17 +107,17 @@ private void processIndexByType(int index, int indexType) {
                 break;
             }
         }
-        if (typeName != null && refAffectedClassDefs.contains(typeName)) {
+        if (typeName != null && classDescsToCheck.contains(typeName)) {
             MethodId methodId = methodOwner.methodIds().get(method.methodIndex);
             logger.i(
                     TAG,
-                    "Method %s in class %s referenced ref-changed class %s by %s",
+                    "Method %s in class %s referenced class %s by %s",
                     getMethodProtoTypeStr(methodId),
                     methodOwner.typeNames().get(methodId.declaringClassIndex),
                     typeName,
                     refInfoInLog
             );
-            isMethodReferencedToRefAffectedClass = true;
+            isMethodReferencedToAnyProvidedClasses = true;
         }
     }
 
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
index f9be6337..3a3a3428 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
@@ -17,6 +17,7 @@
 package com.tencent.tinker.build.dexpatcher.util;
 
 import com.tencent.tinker.android.dex.ClassData;
+import com.tencent.tinker.android.dex.ClassDef;
 import com.tencent.tinker.android.dex.Code;
 import com.tencent.tinker.android.dex.Dex;
 import com.tencent.tinker.android.dx.instruction.InstructionReader;
@@ -62,79 +63,135 @@ public SmallDexClassInfoCollector setLogger(DexPatcherLogger.IDexPatcherLogger l
         return this;
     }
 
+    // Collect target:
+    //  Added classes;
+    //  Changed classes;
+    //  Subclasses of referrer-affected changed classes;
+    //  Classes which refer to changed classes.
     public Set<DexClassInfo> doCollect(DexGroup oldDexGroup, DexGroup newDexGroup) {
+        Set<DexClassInfo> classInfosInSmallDex = new HashSet<>();
+
         DexClassesComparator dexClassesCmp = new DexClassesComparator("*");
-        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_CAUSE_REF_CHANGE_ONLY);
         dexClassesCmp.setIgnoredRemovedClassDescPattern(this.loaderClassPatterns);
+
+        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_CAUSE_REF_CHANGE_ONLY);
         dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
 
-        Set<String> refAffectedClassDescs
+        Set<String> referrerAffectedChangedClassDescs
                 = dexClassesCmp.getChangedClassDescToInfosMap().keySet();
 
+        Set<String> referrerAffectedChangedClassesChainSet = new HashSet<>();
+        referrerAffectedChangedClassesChainSet.addAll(referrerAffectedChangedClassDescs);
+
+        // Add added classes to small patched dex.
+        Collection<DexClassInfo> addedClassInfos = dexClassesCmp.getAddedClassInfos();
+        for (DexClassInfo addClassInfo : addedClassInfos) {
+            logger.i(TAG, "Add class %s to small dex.", addClassInfo.classDesc);
+            classInfosInSmallDex.add(addClassInfo);
+        }
+
+        // Use normal mode to compare again, then we get all changed class infos.
+        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_NORMAL);
+        dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
+
+        Collection<DexClassInfo[]> changedOldNewClassInfos =
+                dexClassesCmp.getChangedClassDescToInfosMap().values();
+
+        // Add changed classes to small patched dex.
+        // changedOldNewClassInfo[1] means changedNewClassInfo
+        for (DexClassInfo[] changedOldNewClassInfo : changedOldNewClassInfos) {
+            logger.i(TAG, "Add class %s to small dex.", changedOldNewClassInfo[1].classDesc);
+            classInfosInSmallDex.add(changedOldNewClassInfo[1]);
+        }
+
         Set<DexClassInfo> classInfosInNewDexGroup
                 = newDexGroup.getClassInfosInDexesWithDuplicateCheck();
 
-        Set<DexClassInfo> classInfosOfSmallDex = new HashSet<>();
+        Set<String> changedClassDescs = dexClassesCmp.getChangedClassDescToInfosMap().keySet();
 
+        // Add subclasses of referrer-affected changed classes to small patched dex.
+        // By the way, collect all subclasses to form referrer-affected changed classes chain.
         for (DexClassInfo patchedClassInfo : classInfosInNewDexGroup) {
-            if (patchedClassInfo.classDef.classDataOffset == 0) {
-                continue;
-            }
+            final String superClassDesc
+                    = patchedClassInfo.classDef.supertypeIndex == ClassDef.NO_INDEX
+                    ? ""
+                    : patchedClassInfo.owner.typeNames().get(patchedClassInfo.classDef.supertypeIndex);
 
-            ClassData patchedClassData
-                    = patchedClassInfo.owner.readClassData(patchedClassInfo.classDef);
+            if (referrerAffectedChangedClassesChainSet.contains(superClassDesc)) {
+                referrerAffectedChangedClassesChainSet.add(patchedClassInfo.classDesc);
+                logger.i(TAG, "Class %s is subclass of referrer-affected changed class %s.",
+                        patchedClassInfo.classDesc, superClassDesc);
 
-            boolean shouldAdd = isClassMethodReferenceToRefAffectedClass(
-                    patchedClassInfo.owner,
-                    patchedClassData.directMethods,
-                    refAffectedClassDescs
-            );
+                logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
 
-            if (!shouldAdd) {
-                shouldAdd = isClassMethodReferenceToRefAffectedClass(
-                        patchedClassInfo.owner,
-                        patchedClassData.virtualMethods,
-                        refAffectedClassDescs
-                );
+                classInfosInSmallDex.add(patchedClassInfo);
             }
+        }
 
-            if (shouldAdd) {
-                logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
-                classInfosOfSmallDex.add(patchedClassInfo);
+        Set<String> classesToCheckReference = new HashSet<>();
+        classesToCheckReference.addAll(changedClassDescs);
+        classesToCheckReference.addAll(referrerAffectedChangedClassesChainSet);
+
+        Set<String> addedClassDescs = new HashSet<>();
+        for (DexClassInfo addedClassInfo : addedClassInfos) {
+            addedClassDescs.add(addedClassInfo.classDesc);
+        }
+
+        // Add classes which refer to changed classes and referrer-affected
+        // changed classes chain to small patched dex.
+        for (DexClassInfo patchedClassInfo : classInfosInNewDexGroup) {
+            if (!addedClassDescs.contains(patchedClassInfo.classDesc)
+             && !changedClassDescs.contains(patchedClassInfo.classDesc)) {
+                processMethodReference(
+                        patchedClassInfo,
+                        classesToCheckReference,
+                        classInfosInSmallDex
+                );
             }
         }
 
-        // So far we get descriptors of classes we need to add additionally,
-        // while we still need to do a fully compare to collect added classes
-        // and replaced classes since they may use items in their owner dex which
-        // is not modified.
-        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_NORMAL);
-        dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
+        return classInfosInSmallDex;
+    }
 
-        Collection<DexClassInfo> addedClassInfos = dexClassesCmp.getAddedClassInfos();
-        for (DexClassInfo addClassInfo : addedClassInfos) {
-            logger.i(TAG, "Add class %s to small dex.", addClassInfo.classDesc);
-            classInfosOfSmallDex.add(addClassInfo);
+    private void processMethodReference(
+            DexClassInfo patchedClassInfo,
+            Set<String> classDescsToCheck,
+            Set<DexClassInfo> result
+    ) {
+        final ClassDef classDef = patchedClassInfo.classDef;
+        if (classDef.classDataOffset == ClassDef.NO_OFFSET) {
+            return;
         }
 
-        Collection<DexClassInfo[]> changedOldPatchedClassInfos =
-                dexClassesCmp.getChangedClassDescToInfosMap().values();
+        ClassData patchedClassData
+                = patchedClassInfo.owner.readClassData(classDef);
+
+        boolean shouldAdd = isClassMethodReferenceToClasses(
+                patchedClassInfo.owner,
+                patchedClassData.directMethods,
+                classDescsToCheck
+        );
 
-        // changedOldPatchedClassInfo[1] means changedPatchedClassInfo
-        for (DexClassInfo[] changedOldPatchedClassInfo : changedOldPatchedClassInfos) {
-            logger.i(TAG, "Add class %s to small dex.", changedOldPatchedClassInfo[1].classDesc);
-            classInfosOfSmallDex.add(changedOldPatchedClassInfo[1]);
+        if (!shouldAdd) {
+            shouldAdd = isClassMethodReferenceToClasses(
+                    patchedClassInfo.owner,
+                    patchedClassData.virtualMethods,
+                    classDescsToCheck
+            );
         }
 
-        return classInfosOfSmallDex;
+        if (shouldAdd) {
+            logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
+            result.add(patchedClassInfo);
+        }
     }
 
-    private boolean isClassMethodReferenceToRefAffectedClass(
+    private boolean isClassMethodReferenceToClasses(
             Dex owner,
             ClassData.Method[] methods,
-            Collection<String> affectedClassDescs
+            Collection<String> referredClassDescs
     ) {
-        if (affectedClassDescs.isEmpty() || methods == null || methods.length == 0) {
+        if (referredClassDescs.isEmpty() || methods == null || methods.length == 0) {
             return false;
         }
 
@@ -143,13 +200,13 @@ private boolean isClassMethodReferenceToRefAffectedClass(
                 continue;
             }
             Code code = owner.readCode(method);
-            RefToRefAffectedClassInsnVisitor refInsnVisitor =
-                    new RefToRefAffectedClassInsnVisitor(owner, method, affectedClassDescs, logger);
+            ClassReferringInsnVisitor refInsnVisitor =
+                    new ClassReferringInsnVisitor(owner, method, referredClassDescs, logger);
             InstructionReader insnReader =
                     new InstructionReader(new ShortArrayCodeInput(code.instructions));
             try {
                 insnReader.accept(refInsnVisitor);
-                if (refInsnVisitor.isMethodReferencedToRefAffectedClass) {
+                if (refInsnVisitor.isMethodReferencedToAnyProvidedClasses) {
                     return true;
                 }
             } catch (EOFException e) {
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index 9fdbdf75..a6317f19 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -8,6 +8,7 @@ dependencies {
     compile "com.android.support:appcompat-v7:23.1.1"
     compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
     compile("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
+
     compile "com.android.support:multidex:1.0.1"
 
     //use to test multiDex
@@ -95,6 +96,11 @@ android {
         buildConfigField "String", "CLIENTVERSION", "\"${getTinkerIdValue()}\""
         buildConfigField "String", "PLATFORM",  "\"all\""
     }
+
+//    aaptOptions{
+//        cruncherEnabled false
+//    }
+
 //    //use to test flavors support
 //    productFlavors {
 //        flavor1 {
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index beec0488..a6a66d40 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -17,4 +17,4 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-TINKER_VERSION=1.7.1
+TINKER_VERSION=1.8.0
