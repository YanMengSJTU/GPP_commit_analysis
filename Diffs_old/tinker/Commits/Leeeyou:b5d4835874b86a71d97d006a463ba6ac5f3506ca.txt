diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/AbstractResultService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/AbstractResultService.java
index f3b0d073..d69413a7 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/AbstractResultService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/AbstractResultService.java
@@ -34,7 +34,7 @@
     private static final String TAG = "Tinker.AbstractResultService";
     private static final int JOB_ID = 0xf3f4f5f6;
 
-    private static final String RESULT_EXTRA = "result_extra";
+    public static final String RESULT_EXTRA = "result_extra";
 
     public static void runResultService(Context context, PatchResult result, String resultServiceClass) {
         if (resultServiceClass == null) {
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index 489ca0d2..c2d3df66 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -101,6 +101,8 @@ public static void setTinkerNotificationId(int id) {
     private static void doApplyPatch(Context context, Intent intent) {
         // Since we may retry with IntentService, we should prevent
         // racing here again.
+        TinkerLog.w(TAG, "doApplyPatch.");
+
         if (!sIsPatchApplying.compareAndSet(false, true)) {
             TinkerLog.w(TAG, "TinkerPatchService doApplyPatch is running by another runner.");
             return;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/util/TinkerJobIntentService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/util/TinkerJobIntentService.java
index a3025343..eeba83b8 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/util/TinkerJobIntentService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/util/TinkerJobIntentService.java
@@ -38,6 +38,8 @@
 import android.support.annotation.RequiresApi;
 import android.util.Log;
 
+import com.tencent.tinker.lib.service.AbstractResultService;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 
@@ -102,7 +104,7 @@
 public abstract class TinkerJobIntentService extends Service {
     static final String TAG = "TinkerJobIntentService";
 
-    static final boolean DEBUG = false;
+    static final boolean DEBUG = true;
 
     CompatJobEngine mJobImpl;
     WorkEnqueuer mCompatWorkEnqueuer;
@@ -178,9 +180,9 @@ public void serviceProcessingFinished() {
                 // a timeout, and the system does not do the right thing if you mix timeout and
                 // non timeout (or even changing the timeout duration) in one wake lock.
                 PowerManager pm = ((PowerManager) context.getSystemService(Context.POWER_SERVICE));
-                mLaunchWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, cn.getClassName() + ":launch");
+                mLaunchWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, cn.getClassName() + ":launch");//保持CPU 运转，屏幕和键盘灯有可能是关闭的
                 mLaunchWakeLock.setReferenceCounted(false);
-                mRunWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, cn.getClassName() + ":run");
+                mRunWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, cn.getClassName() + ":run");//保持CPU 运转，屏幕和键盘灯有可能是关闭的
                 mRunWakeLock.setReferenceCounted(false);
             } else {
                 TinkerLog.w(TAG, "it would be better to grant WAKE_LOCK permission to your app so that tinker can use WakeLock to keep system awake.");
@@ -192,7 +194,7 @@ public void serviceProcessingFinished() {
         void enqueueWork(Intent work) {
             Intent intent = new Intent(work);
             intent.setComponent(mComponentName);
-            if (DEBUG) Log.d(TAG, "Starting service for work: " + work);
+            if (DEBUG) Log.d(TAG, "Starting service for work result_extra:" + work.getSerializableExtra(AbstractResultService.RESULT_EXTRA));
             if (mContext.startService(intent) != null) {
                 synchronized (this) {
                     if (!mLaunchingService) {
@@ -213,6 +215,7 @@ void enqueueWork(Intent work) {
         @Override
         public void serviceStartReceived() {
             synchronized (this) {
+                if (DEBUG) Log.d(TAG, "CompatWorkEnqueuer serviceStartReceived");
                 // Once we have started processing work, we can count whatever last
                 // enqueueWork() that happened as handled.
                 mLaunchingService = false;
@@ -222,6 +225,7 @@ public void serviceStartReceived() {
         @Override
         public void serviceProcessingStarted() {
             synchronized (this) {
+                if (DEBUG) Log.d(TAG, "CompatWorkEnqueuer serviceProcessingStarted");
                 // We hold the wake lock as long as the service is processing commands.
                 if (!mServiceProcessing) {
                     mServiceProcessing = true;
@@ -240,6 +244,7 @@ public void serviceProcessingStarted() {
         @Override
         public void serviceProcessingFinished() {
             synchronized (this) {
+                if (DEBUG) Log.d(TAG, "CompatWorkEnqueuer serviceProcessingFinished");
                 if (mServiceProcessing) {
                     // If we are transitioning back to a wakelock with a timeout, do the same
                     // as if we had enqueued work without the service running.
@@ -466,6 +471,7 @@ public void onCreate() {
      */
     @Override
     public int onStartCommand(@Nullable Intent intent, int flags, int startId) {
+        if (DEBUG) Log.d(TAG, "ONSTARTCOMMAND RESULT_EXTRA: " + intent.getSerializableExtra(AbstractResultService.RESULT_EXTRA));
         if (mCompatQueue != null) {
             mCompatWorkEnqueuer.serviceStartReceived();
             if (DEBUG) Log.d(TAG, "Received compat start command #" + startId + ": " + intent);
diff --git a/tinker-sample/build.gradle b/tinker-sample/build.gradle
index 44bbe92d..43724ed5 100644
--- a/tinker-sample/build.gradle
+++ b/tinker-sample/build.gradle
@@ -131,14 +131,14 @@ ext {
 
     //for normal build
     //old apk file to build patch apk
-    tinkerOldApkPath = "${bakPath}/app-debug-1018-17-32-47.apk"
+    tinkerOldApkPath = "${bakPath}/tinker-sample-debug-0308-17-13-33.apk"
     //proguard mapping file to build patch apk
-    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
+    tinkerApplyMappingPath = "${bakPath}/tinker-sample-debug-0308-17-13-33-mapping.txt"
     //resource R.txt to build patch apk, must input if there is resource changed
-    tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"
+    tinkerApplyResourcePath = "${bakPath}/tinker-sample-debug-0308-17-13-33-R.txt"
 
     //only use for build all flavor, if not, just ignore this field
-    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
+    tinkerBuildFlavorDirectory = "${bakPath}/tinker-sample-debug-0308-17-13-33"
 }
 
 
diff --git a/tinker-sample/src/main/res/values/strings.xml b/tinker-sample/src/main/res/values/strings.xml
index a597680b..2b6930cd 100644
--- a/tinker-sample/src/main/res/values/strings.xml
+++ b/tinker-sample/src/main/res/values/strings.xml
@@ -1,5 +1,5 @@
 <resources>
     <string name="app_name">SourceCodeAnalysisTinker</string>
-    <string name="test_resource">I am in the base apk</string>
+    <string name="test_resource">I am in the patch22 apk</string>
     <!--<string name="test_resource">I am in the patch apk</string>-->
 </resources>
