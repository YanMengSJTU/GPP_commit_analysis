diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
similarity index 93%
rename from tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java
rename to tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
index 8158746a..3122c957 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/RefToRefAffectedClassInsnVisitor.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/ClassReferringInsnVisitor.java
@@ -31,8 +31,8 @@
  * Created by tangyinsheng on 2016/10/8.
  */
 
-public class RefToRefAffectedClassInsnVisitor extends InstructionVisitor {
-    private static final String TAG = "RefToRefAffectedClassInsnVisitor";
+public class ClassReferringInsnVisitor extends InstructionVisitor {
+    private static final String TAG = "ClassReferringInsnVisitor";
 
     private final Dex methodOwner;
     private final ClassData.Method method;
@@ -41,7 +41,7 @@
 
     public boolean isMethodReferencedToRefAffectedClass;
 
-    RefToRefAffectedClassInsnVisitor(Dex methodOwner, ClassData.Method method, Collection<String> refAffectedClassDefs, DexPatcherLogger logger) {
+    ClassReferringInsnVisitor(Dex methodOwner, ClassData.Method method, Collection<String> refAffectedClassDefs, DexPatcherLogger logger) {
         super(null);
         this.methodOwner = methodOwner;
         this.method = method;
@@ -111,7 +111,7 @@ private void processIndexByType(int index, int indexType) {
             MethodId methodId = methodOwner.methodIds().get(method.methodIndex);
             logger.i(
                     TAG,
-                    "Method %s in class %s referenced ref-changed class %s by %s",
+                    "Method %s in class %s referenced class %s by %s",
                     getMethodProtoTypeStr(methodId),
                     methodOwner.typeNames().get(methodId.declaringClassIndex),
                     typeName,
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
index f9be6337..c39d65ad 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/dexpatcher/util/SmallDexClassInfoCollector.java
@@ -17,6 +17,7 @@
 package com.tencent.tinker.build.dexpatcher.util;
 
 import com.tencent.tinker.android.dex.ClassData;
+import com.tencent.tinker.android.dex.ClassDef;
 import com.tencent.tinker.android.dex.Code;
 import com.tencent.tinker.android.dex.Dex;
 import com.tencent.tinker.android.dx.instruction.InstructionReader;
@@ -62,79 +63,135 @@ public SmallDexClassInfoCollector setLogger(DexPatcherLogger.IDexPatcherLogger l
         return this;
     }
 
+    // Collect target:
+    //  Added classes;
+    //  Changed classes;
+    //  Subclasses of referrer-affected changed classes;
+    //  Classes which refer to changed classes.
     public Set<DexClassInfo> doCollect(DexGroup oldDexGroup, DexGroup newDexGroup) {
+        Set<DexClassInfo> classInfosInSmallDex = new HashSet<>();
+
         DexClassesComparator dexClassesCmp = new DexClassesComparator("*");
-        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_CAUSE_REF_CHANGE_ONLY);
         dexClassesCmp.setIgnoredRemovedClassDescPattern(this.loaderClassPatterns);
+
+        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_CAUSE_REF_CHANGE_ONLY);
         dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
 
-        Set<String> refAffectedClassDescs
+        Set<String> referrerAffectedChangedClassDescs
                 = dexClassesCmp.getChangedClassDescToInfosMap().keySet();
 
+        Set<String> referrerAffectedChangedClassesChainSet = new HashSet<>();
+        referrerAffectedChangedClassesChainSet.addAll(referrerAffectedChangedClassDescs);
+
+        // Add added classes to small patched dex.
+        Collection<DexClassInfo> addedClassInfos = dexClassesCmp.getAddedClassInfos();
+        for (DexClassInfo addClassInfo : addedClassInfos) {
+            logger.i(TAG, "Add class %s to small dex.", addClassInfo.classDesc);
+            classInfosInSmallDex.add(addClassInfo);
+        }
+
+        // Use normal mode to compare again, then we get all changed class infos.
+        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_NORMAL);
+        dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
+
+        Collection<DexClassInfo[]> changedOldNewClassInfos =
+                dexClassesCmp.getChangedClassDescToInfosMap().values();
+
+        // Add changed classes to small patched dex.
+        // changedOldNewClassInfo[1] means changedNewClassInfo
+        for (DexClassInfo[] changedOldNewClassInfo : changedOldNewClassInfos) {
+            logger.i(TAG, "Add class %s to small dex.", changedOldNewClassInfo[1].classDesc);
+            classInfosInSmallDex.add(changedOldNewClassInfo[1]);
+        }
+
         Set<DexClassInfo> classInfosInNewDexGroup
                 = newDexGroup.getClassInfosInDexesWithDuplicateCheck();
 
-        Set<DexClassInfo> classInfosOfSmallDex = new HashSet<>();
+        Set<String> changedClassDescs = dexClassesCmp.getChangedClassDescToInfosMap().keySet();
 
+        // Add subclasses of referrer-affected changed classes to small patched dex.
+        // By the way, collect all subclasses to form referrer-affected changed classes chain.
         for (DexClassInfo patchedClassInfo : classInfosInNewDexGroup) {
-            if (patchedClassInfo.classDef.classDataOffset == 0) {
-                continue;
-            }
+            final String superClassDesc
+                    = patchedClassInfo.classDef.supertypeIndex == ClassDef.NO_INDEX
+                    ? ""
+                    : patchedClassInfo.owner.typeNames().get(patchedClassInfo.classDef.supertypeIndex);
 
-            ClassData patchedClassData
-                    = patchedClassInfo.owner.readClassData(patchedClassInfo.classDef);
+            if (referrerAffectedChangedClassesChainSet.contains(superClassDesc)) {
+                referrerAffectedChangedClassesChainSet.add(patchedClassInfo.classDesc);
+                logger.i(TAG, "Class %s is subclass of referrer-affected changed class %s.",
+                        patchedClassInfo.classDesc, superClassDesc);
 
-            boolean shouldAdd = isClassMethodReferenceToRefAffectedClass(
-                    patchedClassInfo.owner,
-                    patchedClassData.directMethods,
-                    refAffectedClassDescs
-            );
+                logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
 
-            if (!shouldAdd) {
-                shouldAdd = isClassMethodReferenceToRefAffectedClass(
-                        patchedClassInfo.owner,
-                        patchedClassData.virtualMethods,
-                        refAffectedClassDescs
-                );
+                classInfosInSmallDex.add(patchedClassInfo);
             }
+        }
 
-            if (shouldAdd) {
-                logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
-                classInfosOfSmallDex.add(patchedClassInfo);
+        Set<String> classesToCheckReference = new HashSet<>();
+        classesToCheckReference.addAll(changedClassDescs);
+        classesToCheckReference.addAll(referrerAffectedChangedClassesChainSet);
+
+        Set<String> addedClassDescs = new HashSet<>();
+        for (DexClassInfo addedClassInfo : addedClassInfos) {
+            addedClassDescs.add(addedClassInfo.classDesc);
+        }
+
+        // Add classes which refer to changed classes and referrer-affected
+        // changed classes chain to small patched dex.
+        for (DexClassInfo patchedClassInfo : classInfosInNewDexGroup) {
+            if (!addedClassDescs.contains(patchedClassInfo.classDesc)
+             && !changedClassDescs.contains(patchedClassInfo.classDesc)) {
+                processMethodReference(
+                        patchedClassInfo,
+                        classesToCheckReference,
+                        classInfosInSmallDex
+                );
             }
         }
 
-        // So far we get descriptors of classes we need to add additionally,
-        // while we still need to do a fully compare to collect added classes
-        // and replaced classes since they may use items in their owner dex which
-        // is not modified.
-        dexClassesCmp.setCompareMode(DexClassesComparator.COMPARE_MODE_NORMAL);
-        dexClassesCmp.startCheck(oldDexGroup, newDexGroup);
+        return classInfosInSmallDex;
+    }
 
-        Collection<DexClassInfo> addedClassInfos = dexClassesCmp.getAddedClassInfos();
-        for (DexClassInfo addClassInfo : addedClassInfos) {
-            logger.i(TAG, "Add class %s to small dex.", addClassInfo.classDesc);
-            classInfosOfSmallDex.add(addClassInfo);
+    private void processMethodReference(
+            DexClassInfo patchedClassInfo,
+            Set<String> classDescsToCheck,
+            Set<DexClassInfo> result
+    ) {
+        final ClassDef classDef = patchedClassInfo.classDef;
+        if (classDef.classDataOffset == ClassDef.NO_OFFSET) {
+            return;
         }
 
-        Collection<DexClassInfo[]> changedOldPatchedClassInfos =
-                dexClassesCmp.getChangedClassDescToInfosMap().values();
+        ClassData patchedClassData
+                = patchedClassInfo.owner.readClassData(classDef);
+
+        boolean shouldAdd = isClassMethodReferenceToClasses(
+                patchedClassInfo.owner,
+                patchedClassData.directMethods,
+                classDescsToCheck
+        );
 
-        // changedOldPatchedClassInfo[1] means changedPatchedClassInfo
-        for (DexClassInfo[] changedOldPatchedClassInfo : changedOldPatchedClassInfos) {
-            logger.i(TAG, "Add class %s to small dex.", changedOldPatchedClassInfo[1].classDesc);
-            classInfosOfSmallDex.add(changedOldPatchedClassInfo[1]);
+        if (!shouldAdd) {
+            shouldAdd = isClassMethodReferenceToClasses(
+                    patchedClassInfo.owner,
+                    patchedClassData.virtualMethods,
+                    classDescsToCheck
+            );
         }
 
-        return classInfosOfSmallDex;
+        if (shouldAdd) {
+            logger.i(TAG, "Add class %s to small dex.", patchedClassInfo.classDesc);
+            result.add(patchedClassInfo);
+        }
     }
 
-    private boolean isClassMethodReferenceToRefAffectedClass(
+    private boolean isClassMethodReferenceToClasses(
             Dex owner,
             ClassData.Method[] methods,
-            Collection<String> affectedClassDescs
+            Collection<String> referredClassDescs
     ) {
-        if (affectedClassDescs.isEmpty() || methods == null || methods.length == 0) {
+        if (referredClassDescs.isEmpty() || methods == null || methods.length == 0) {
             return false;
         }
 
@@ -143,8 +200,8 @@ private boolean isClassMethodReferenceToRefAffectedClass(
                 continue;
             }
             Code code = owner.readCode(method);
-            RefToRefAffectedClassInsnVisitor refInsnVisitor =
-                    new RefToRefAffectedClassInsnVisitor(owner, method, affectedClassDescs, logger);
+            ClassReferringInsnVisitor refInsnVisitor =
+                    new ClassReferringInsnVisitor(owner, method, referredClassDescs, logger);
             InstructionReader insnReader =
                     new InstructionReader(new ShortArrayCodeInput(code.instructions));
             try {
