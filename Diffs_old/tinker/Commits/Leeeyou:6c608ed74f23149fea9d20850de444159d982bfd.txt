diff --git a/tinker-sample/src/main/AndroidManifest.xml b/tinker-sample/src/main/AndroidManifest.xml
index 976fddb3..576b1f12 100644
--- a/tinker-sample/src/main/AndroidManifest.xml
+++ b/tinker-sample/src/main/AndroidManifest.xml
@@ -11,7 +11,7 @@
         android:label="@string/app_name"
         android:theme="@style/AppTheme">
         <service
-            android:name=".service.SampleResultService"
+            android:name=".service.MyResultService"
             android:exported="false"/>
 
         <activity android:name=".app.MainActivity">
diff --git a/tinker-sample/src/main/java/tinker/sample/android/app/SampleApplicationLike.java b/tinker-sample/src/main/java/tinker/sample/android/app/MyApplicationLike.java
similarity index 87%
rename from tinker-sample/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
rename to tinker-sample/src/main/java/tinker/sample/android/app/MyApplicationLike.java
index ba9d01bd..8a72cb3e 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/app/MyApplicationLike.java
@@ -30,8 +30,8 @@
 import com.tencent.tinker.lib.tinker.TinkerInstaller;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 
-import tinker.sample.android.Log.MyLogImp;
-import tinker.sample.android.util.SampleApplicationContext;
+import tinker.sample.android.log.MyLogImp;
+import tinker.sample.android.util.MyApplicationContext;
 import tinker.sample.android.util.TinkerManager;
 
 /**
@@ -59,11 +59,11 @@
 @DefaultLifeCycle(application = "tinker.sample.android.app.SampleApplication",
                   flags = ShareConstants.TINKER_ENABLE_ALL,
                   loadVerifyFlag = false)
-public class SampleApplicationLike extends DefaultApplicationLike {
+public class MyApplicationLike extends DefaultApplicationLike {
     private static final String TAG = "Tinker.SampleApplicationLike";
 
-    public SampleApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,
-                                 long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {
+    public MyApplicationLike(Application application, int tinkerFlags, boolean tinkerLoadVerifyFlag,
+                             long applicationStartElapsedTime, long applicationStartMillisTime, Intent tinkerResultIntent) {
         super(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);
     }
 
@@ -80,8 +80,8 @@ public void onBaseContextAttached(Context base) {
         //you must install multiDex whatever tinker is installed!
         MultiDex.install(base);
 
-        SampleApplicationContext.application = getApplication();
-        SampleApplicationContext.context = getApplication();
+        MyApplicationContext.application = getApplication();
+        MyApplicationContext.context = getApplication();
         TinkerManager.setTinkerApplicationLike(this);
 
         TinkerManager.initFastCrashProtect();
diff --git a/tinker-sample/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java b/tinker-sample/src/main/java/tinker/sample/android/crash/MyUncaughtExceptionHandler.java
similarity index 95%
rename from tinker-sample/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
rename to tinker-sample/src/main/java/tinker/sample/android/crash/MyUncaughtExceptionHandler.java
index 6656c088..4aabe675 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/crash/MyUncaughtExceptionHandler.java
@@ -26,7 +26,7 @@
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;
 
-import tinker.sample.android.reporter.SampleTinkerReport;
+import tinker.sample.android.reporter.MyTinkerReport;
 import tinker.sample.android.util.TinkerManager;
 import tinker.sample.android.util.Utils;
 
@@ -38,7 +38,7 @@
  * tinker's crash is caught by {@code LoadReporter.onLoadException}
  * use {@code TinkerApplicationHelper} api, no need to install tinker!
  */
-public class SampleUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {
+public class MyUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {
     private static final String TAG = "Tinker.SampleUncaughtExHandler";
 
     private final Thread.UncaughtExceptionHandler ueh;
@@ -46,7 +46,7 @@
     public static final  int    MAX_CRASH_COUNT     = 3;
     private static final String DALVIK_XPOSED_CRASH = "Class ref in pre-verified class resolved to unexpected implementation";
 
-    public SampleUncaughtExceptionHandler() {
+    public MyUncaughtExceptionHandler() {
         ueh = Thread.getDefaultUncaughtExceptionHandler();
     }
 
@@ -94,7 +94,7 @@ private void tinkerPreVerifiedCrashHandler(Throwable ex) {
                 }
 
                 if (isCausedByXposed) {
-                    SampleTinkerReport.onXposedCrash();
+                    MyTinkerReport.onXposedCrash();
                     TinkerLog.e(TAG, "have xposed: just clean tinker");
                     //kill all other process to ensure that all process's code is the same.
                     ShareTinkerInternals.killAllOtherProcess(applicationLike.getApplication());
@@ -132,7 +132,7 @@ private boolean tinkerFastCrashProtect() {
             SharedPreferences sp = applicationLike.getApplication().getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);
             int fastCrashCount = sp.getInt(currentVersion, 0) + 1;
             if (fastCrashCount >= MAX_CRASH_COUNT) {
-                SampleTinkerReport.onFastCrashProtect();
+                MyTinkerReport.onFastCrashProtect();
                 TinkerApplicationHelper.cleanPatch(applicationLike);
                 TinkerLog.e(TAG, "tinker has fast crash more than %d, we just clean patch!", fastCrashCount);
                 return true;
diff --git a/tinker-sample/src/main/java/tinker/sample/android/Log/MyLogImp.java b/tinker-sample/src/main/java/tinker/sample/android/log/MyLogImp.java
similarity index 98%
rename from tinker-sample/src/main/java/tinker/sample/android/Log/MyLogImp.java
rename to tinker-sample/src/main/java/tinker/sample/android/log/MyLogImp.java
index 429accb9..91029ac4 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/Log/MyLogImp.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/log/MyLogImp.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package tinker.sample.android.Log;
+package tinker.sample.android.log;
 
 import android.util.Log;
 
diff --git a/tinker-sample/src/main/java/tinker/sample/android/reporter/SampleLoadReporter.java b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyLoadReporter.java
similarity index 84%
rename from tinker-sample/src/main/java/tinker/sample/android/reporter/SampleLoadReporter.java
rename to tinker-sample/src/main/java/tinker/sample/android/reporter/MyLoadReporter.java
index 05dd146e..738e01ad 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/reporter/SampleLoadReporter.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyLoadReporter.java
@@ -31,17 +31,17 @@
  * optional, you can just use DefaultLoadReporter
  * Created by zhangshaowen on 16/4/13.
  */
-public class SampleLoadReporter extends DefaultLoadReporter {
+public class MyLoadReporter extends DefaultLoadReporter {
     private final static String TAG = "Tinker.SampleLoadReporter";
 
-    public SampleLoadReporter(Context context) {
+    public MyLoadReporter(Context context) {
         super(context);
     }
 
     @Override
     public void onLoadPatchListenerReceiveFail(final File patchFile, int errorCode) {
         super.onLoadPatchListenerReceiveFail(patchFile, errorCode);
-        SampleTinkerReport.onTryApplyFail(errorCode);
+        MyTinkerReport.onTryApplyFail(errorCode);
     }
 
     @Override
@@ -49,14 +49,14 @@ public void onLoadResult(File patchDirectory, int loadCode, long cost) {
         super.onLoadResult(patchDirectory, loadCode, cost);
         switch (loadCode) {
             case ShareConstants.ERROR_LOAD_OK:
-                SampleTinkerReport.onLoaded(cost);
+                MyTinkerReport.onLoaded(cost);
                 break;
         }
         Looper.getMainLooper().myQueue().addIdleHandler(new MessageQueue.IdleHandler() {
             @Override
             public boolean queueIdle() {
                 if (UpgradePatchRetry.getInstance(context).onPatchRetryLoad()) {
-                    SampleTinkerReport.onReportRetryPatch();
+                    MyTinkerReport.onReportRetryPatch();
                 }
                 return false;
             }
@@ -66,13 +66,13 @@ public boolean queueIdle() {
     @Override
     public void onLoadException(Throwable e, int errorCode) {
         super.onLoadException(e, errorCode);
-        SampleTinkerReport.onLoadException(e, errorCode);
+        MyTinkerReport.onLoadException(e, errorCode);
     }
 
     @Override
     public void onLoadFileMd5Mismatch(File file, int fileType) {
         super.onLoadFileMd5Mismatch(file, fileType);
-        SampleTinkerReport.onLoadFileMisMatch(fileType);
+        MyTinkerReport.onLoadFileMisMatch(fileType);
     }
 
     /**
@@ -85,25 +85,25 @@ public void onLoadFileMd5Mismatch(File file, int fileType) {
     @Override
     public void onLoadFileNotFound(File file, int fileType, boolean isDirectory) {
         super.onLoadFileNotFound(file, fileType, isDirectory);
-        SampleTinkerReport.onLoadFileNotFound(fileType);
+        MyTinkerReport.onLoadFileNotFound(fileType);
     }
 
     @Override
     public void onLoadPackageCheckFail(File patchFile, int errorCode) {
         super.onLoadPackageCheckFail(patchFile, errorCode);
-        SampleTinkerReport.onLoadPackageCheckFail(errorCode);
+        MyTinkerReport.onLoadPackageCheckFail(errorCode);
     }
 
     @Override
     public void onLoadPatchInfoCorrupted(String oldVersion, String newVersion, File patchInfoFile) {
         super.onLoadPatchInfoCorrupted(oldVersion, newVersion, patchInfoFile);
-        SampleTinkerReport.onLoadInfoCorrupted();
+        MyTinkerReport.onLoadInfoCorrupted();
     }
 
     @Override
     public void onLoadInterpret(int type, Throwable e) {
         super.onLoadInterpret(type, e);
-        SampleTinkerReport.onLoadInterpretReport(type, e);
+        MyTinkerReport.onLoadInterpretReport(type, e);
     }
 
     @Override
diff --git a/tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchListener.java b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchListener.java
similarity index 91%
rename from tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchListener.java
rename to tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchListener.java
index 1407c8a7..9568363e 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchListener.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchListener.java
@@ -30,7 +30,7 @@
 import java.util.Properties;
 
 import tinker.sample.android.app.BuildInfo;
-import tinker.sample.android.crash.SampleUncaughtExceptionHandler;
+import tinker.sample.android.crash.MyUncaughtExceptionHandler;
 import tinker.sample.android.util.Utils;
 
 /**
@@ -39,14 +39,14 @@
  * we can check whatever you want whether we actually send a patch request
  * such as we can check rom space or apk channel
  */
-public class SamplePatchListener extends DefaultPatchListener {
+public class MyPatchListener extends DefaultPatchListener {
     private static final String TAG = "Tinker.SamplePatchListener";
 
     protected static final long NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN = 60 * 1024 * 1024;
 
     private final int maxMemory;
 
-    public SamplePatchListener(Context context) {
+    public MyPatchListener(Context context) {
         super(context);
         maxMemory = ((ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();
         TinkerLog.i(TAG, "application maxMemory:" + maxMemory);
@@ -74,7 +74,7 @@ public int patchCheck(String path, String patchMd5) {
             SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);
             //optional, only disable this patch file with md5
             int fastCrashCount = sp.getInt(patchMd5, 0);
-            if (fastCrashCount >= SampleUncaughtExceptionHandler.MAX_CRASH_COUNT) {
+            if (fastCrashCount >= MyUncaughtExceptionHandler.MAX_CRASH_COUNT) {
                 returnCode = Utils.ERROR_PATCH_CRASH_LIMIT;
             }
         }
@@ -94,7 +94,7 @@ public int patchCheck(String path, String patchMd5) {
             }
         }
 
-        SampleTinkerReport.onTryApply(returnCode == ShareConstants.ERROR_PATCH_OK);
+        MyTinkerReport.onTryApply(returnCode == ShareConstants.ERROR_PATCH_OK);
         return returnCode;
     }
 }
diff --git a/tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchReporter.java b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchReporter.java
similarity index 82%
rename from tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchReporter.java
rename to tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchReporter.java
index 9099bb4c..086ba8e8 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/reporter/SamplePatchReporter.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyPatchReporter.java
@@ -29,57 +29,57 @@
  * optional, you can just use DefaultPatchReporter
  * Created by zhangshaowen on 16/4/8.
  */
-public class SamplePatchReporter extends DefaultPatchReporter {
+public class MyPatchReporter extends DefaultPatchReporter {
     private final static String TAG = "Tinker.SamplePatchReporter";
-    public SamplePatchReporter(Context context) {
+    public MyPatchReporter(Context context) {
         super(context);
     }
 
     @Override
     public void onPatchServiceStart(Intent intent) {
         super.onPatchServiceStart(intent);
-        SampleTinkerReport.onApplyPatchServiceStart();
+        MyTinkerReport.onApplyPatchServiceStart();
     }
 
     @Override
     public void onPatchDexOptFail(File patchFile, List<File> dexFiles, Throwable t) {
         super.onPatchDexOptFail(patchFile, dexFiles, t);
-        SampleTinkerReport.onApplyDexOptFail(t);
+        MyTinkerReport.onApplyDexOptFail(t);
     }
 
     @Override
     public void onPatchException(File patchFile, Throwable e) {
         super.onPatchException(patchFile, e);
-        SampleTinkerReport.onApplyCrash(e);
+        MyTinkerReport.onApplyCrash(e);
     }
 
     @Override
     public void onPatchInfoCorrupted(File patchFile, String oldVersion, String newVersion) {
         super.onPatchInfoCorrupted(patchFile, oldVersion, newVersion);
-        SampleTinkerReport.onApplyInfoCorrupted();
+        MyTinkerReport.onApplyInfoCorrupted();
     }
 
     @Override
     public void onPatchPackageCheckFail(File patchFile, int errorCode) {
         super.onPatchPackageCheckFail(patchFile, errorCode);
-        SampleTinkerReport.onApplyPackageCheckFail(errorCode);
+        MyTinkerReport.onApplyPackageCheckFail(errorCode);
     }
 
     @Override
     public void onPatchResult(File patchFile, boolean success, long cost) {
         super.onPatchResult(patchFile, success, cost);
-        SampleTinkerReport.onApplied(cost, success);
+        MyTinkerReport.onApplied(cost, success);
     }
 
     @Override
     public void onPatchTypeExtractFail(File patchFile, File extractTo, String filename, int fileType) {
         super.onPatchTypeExtractFail(patchFile, extractTo, filename, fileType);
-        SampleTinkerReport.onApplyExtractFail(fileType);
+        MyTinkerReport.onApplyExtractFail(fileType);
     }
 
     @Override
     public void onPatchVersionCheckFail(File patchFile, SharePatchInfo oldPatchInfo, String patchFileVersion) {
         super.onPatchVersionCheckFail(patchFile, oldPatchInfo, patchFileVersion);
-        SampleTinkerReport.onApplyVersionCheckFail();
+        MyTinkerReport.onApplyVersionCheckFail();
     }
 }
diff --git a/tinker-sample/src/main/java/tinker/sample/android/reporter/SampleTinkerReport.java b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyTinkerReport.java
similarity index 99%
rename from tinker-sample/src/main/java/tinker/sample/android/reporter/SampleTinkerReport.java
rename to tinker-sample/src/main/java/tinker/sample/android/reporter/MyTinkerReport.java
index b0fa2309..e7e706dd 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/reporter/SampleTinkerReport.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/reporter/MyTinkerReport.java
@@ -26,7 +26,7 @@
  * a simple tinker data reporter
  * Created by zhangshaowen on 16/9/17.
  */
-public class SampleTinkerReport {
+public class MyTinkerReport {
     private static final String TAG = "Tinker.SampleTinkerReport";
 
     // KEY - PV
diff --git a/tinker-sample/src/main/java/tinker/sample/android/service/SampleResultService.java b/tinker-sample/src/main/java/tinker/sample/android/service/MyResultService.java
similarity index 98%
rename from tinker-sample/src/main/java/tinker/sample/android/service/SampleResultService.java
rename to tinker-sample/src/main/java/tinker/sample/android/service/MyResultService.java
index 34550ba8..e624dcf7 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/service/SampleResultService.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/service/MyResultService.java
@@ -34,7 +34,7 @@
  * we can restart process when we are at background or screen off
  * Created by zhangshaowen on 16/4/13.
  */
-public class SampleResultService extends DefaultTinkerResultService {
+public class MyResultService extends DefaultTinkerResultService {
     private static final String TAG = "Tinker.SampleResultService";
 
 
diff --git a/tinker-sample/src/main/java/tinker/sample/android/util/SampleApplicationContext.java b/tinker-sample/src/main/java/tinker/sample/android/util/MyApplicationContext.java
similarity index 96%
rename from tinker-sample/src/main/java/tinker/sample/android/util/SampleApplicationContext.java
rename to tinker-sample/src/main/java/tinker/sample/android/util/MyApplicationContext.java
index 509924de..64c1c199 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/util/SampleApplicationContext.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/util/MyApplicationContext.java
@@ -22,7 +22,7 @@
 /**
  * Created by zhangshaowen on 16/8/9.
  */
-public class SampleApplicationContext {
+public class MyApplicationContext {
     public static Application application = null;
     public static Context context = null;
 }
diff --git a/tinker-sample/src/main/java/tinker/sample/android/util/TinkerManager.java b/tinker-sample/src/main/java/tinker/sample/android/util/TinkerManager.java
index 42364476..cc0cec45 100644
--- a/tinker-sample/src/main/java/tinker/sample/android/util/TinkerManager.java
+++ b/tinker-sample/src/main/java/tinker/sample/android/util/TinkerManager.java
@@ -26,11 +26,11 @@
 import com.tencent.tinker.lib.util.UpgradePatchRetry;
 import com.tencent.tinker.entry.ApplicationLike;
 
-import tinker.sample.android.crash.SampleUncaughtExceptionHandler;
-import tinker.sample.android.reporter.SampleLoadReporter;
-import tinker.sample.android.reporter.SamplePatchListener;
-import tinker.sample.android.reporter.SamplePatchReporter;
-import tinker.sample.android.service.SampleResultService;
+import tinker.sample.android.crash.MyUncaughtExceptionHandler;
+import tinker.sample.android.reporter.MyLoadReporter;
+import tinker.sample.android.reporter.MyPatchListener;
+import tinker.sample.android.reporter.MyPatchReporter;
+import tinker.sample.android.service.MyResultService;
 
 /**
  * Created by zhangshaowen on 16/7/3.
@@ -39,7 +39,7 @@
     private static final String TAG = "Tinker.TinkerManager";
 
     private static ApplicationLike                applicationLike;
-    private static SampleUncaughtExceptionHandler uncaughtExceptionHandler;
+    private static MyUncaughtExceptionHandler uncaughtExceptionHandler;
     private static boolean isInstalled = false;
 
     public static void setTinkerApplicationLike(ApplicationLike appLike) {
@@ -52,7 +52,7 @@ public static ApplicationLike getTinkerApplicationLike() {
 
     public static void initFastCrashProtect() {
         if (uncaughtExceptionHandler == null) {
-            uncaughtExceptionHandler = new SampleUncaughtExceptionHandler();
+            uncaughtExceptionHandler = new MyUncaughtExceptionHandler();
             Thread.setDefaultUncaughtExceptionHandler(uncaughtExceptionHandler);
         }
     }
@@ -87,17 +87,17 @@ public static void installTinker(ApplicationLike appLike) {
             return;
         }
         //or you can just use DefaultLoadReporter
-        LoadReporter loadReporter = new SampleLoadReporter(appLike.getApplication());
+        LoadReporter loadReporter = new MyLoadReporter(appLike.getApplication());
         //or you can just use DefaultPatchReporter
-        PatchReporter patchReporter = new SamplePatchReporter(appLike.getApplication());
+        PatchReporter patchReporter = new MyPatchReporter(appLike.getApplication());
         //or you can just use DefaultPatchListener
-        PatchListener patchListener = new SamplePatchListener(appLike.getApplication());
+        PatchListener patchListener = new MyPatchListener(appLike.getApplication());
         //you can set your own upgrade patch if you need
         AbstractPatch upgradePatchProcessor = new UpgradePatch();
 
         TinkerInstaller.install(appLike,
             loadReporter, patchReporter, patchListener,
-            SampleResultService.class, upgradePatchProcessor);
+            MyResultService.class, upgradePatchProcessor);
 
         isInstalled = true;
     }
