diff --git a/gradle.properties b/gradle.properties
index 24c09552..48ba6ce3 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,5 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-VERSION_NAME_PREFIX=1.9.8
+VERSION_NAME_PREFIX=1.9.9
 VERSION_NAME_SUFFIX=
\ No newline at end of file
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLifeCycle.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLifeCycle.java
similarity index 97%
rename from tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLifeCycle.java
rename to tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLifeCycle.java
index 3b67094d..3e26f479 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLifeCycle.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLifeCycle.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.tencent.tinker.loader.app;
+package com.tencent.tinker.entry;
 
 /**
  * Created by zhangshaowen on 16/3/8.
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLike.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLike.java
similarity index 97%
rename from tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLike.java
rename to tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLike.java
index 4278e3f1..73cb5c7f 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/ApplicationLike.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/ApplicationLike.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.tencent.tinker.loader.app;
+package com.tencent.tinker.entry;
 
 import android.app.Application;
 import android.content.Context;
@@ -22,10 +22,12 @@
 import android.content.res.AssetManager;
 import android.content.res.Configuration;
 import android.content.res.Resources;
+import android.support.annotation.Keep;
 
 /**
  * Created by zhangshaowen on 16/7/28.
  */
+@Keep
 public abstract class ApplicationLike implements ApplicationLifeCycle {
     private final Application application;
     private final Intent      tinkerResultIntent;
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/DefaultApplicationLike.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/DefaultApplicationLike.java
similarity index 96%
rename from tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/DefaultApplicationLike.java
rename to tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/DefaultApplicationLike.java
index eabf146e..af0f37b7 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/DefaultApplicationLike.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/entry/DefaultApplicationLike.java
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.tencent.tinker.loader.app;
+package com.tencent.tinker.entry;
 
 /**
  * Created by zhangshaowen on 16/3/8.
@@ -24,11 +24,13 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
+import android.support.annotation.Keep;
 import android.util.Log;
 
 /**
  * Empty implementation of {@link ApplicationLike}.
  */
+@Keep
 public class DefaultApplicationLike extends ApplicationLike {
     private static final String TAG = "Tinker.DefaultAppLike";
 
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java
index 029d49be..d2e86620 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/library/TinkerLoadLibrary.java
@@ -19,13 +19,13 @@
 import android.content.Context;
 import android.os.Build;
 
+import com.tencent.tinker.entry.ApplicationLike;
 import com.tencent.tinker.lib.tinker.Tinker;
 import com.tencent.tinker.lib.tinker.TinkerApplicationHelper;
 import com.tencent.tinker.lib.tinker.TinkerInstaller;
 import com.tencent.tinker.lib.tinker.TinkerLoadResult;
 import com.tencent.tinker.lib.util.TinkerLog;
 import com.tencent.tinker.loader.TinkerRuntimeException;
-import com.tencent.tinker.loader.app.ApplicationLike;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;
 import com.tencent.tinker.loader.shareutil.ShareReflectUtil;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index 020a486e..65061809 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -107,7 +107,7 @@ private static void runPatchServiceByIntentService(Context context, String path)
     private static boolean runPatchServiceByJobScheduler(Context context, String path) {
         TinkerLog.i(TAG, "run patch service by job scheduler.");
         final JobInfo.Builder jobInfoBuilder = new JobInfo.Builder(
-                1, new ComponentName(context, JobServiceRunner.class)
+                0xF0F1F2F3, new ComponentName(context, JobServiceRunner.class)
         );
         final PersistableBundle extras = new PersistableBundle();
         extras.putString(PATCH_PATH_EXTRA, path);
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerApplicationHelper.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerApplicationHelper.java
index f00941ef..a8f3c0b9 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerApplicationHelper.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerApplicationHelper.java
@@ -18,9 +18,9 @@
 
 import android.content.Intent;
 
+import com.tencent.tinker.entry.ApplicationLike;
 import com.tencent.tinker.lib.util.TinkerLog;
 import com.tencent.tinker.loader.TinkerRuntimeException;
-import com.tencent.tinker.loader.app.ApplicationLike;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 import com.tencent.tinker.loader.shareutil.ShareIntentUtil;
 import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerInstaller.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerInstaller.java
index 9cb71ac0..34c2bb44 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerInstaller.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/tinker/TinkerInstaller.java
@@ -18,13 +18,13 @@
 
 import android.content.Context;
 
+import com.tencent.tinker.entry.ApplicationLike;
 import com.tencent.tinker.lib.listener.PatchListener;
 import com.tencent.tinker.lib.patch.AbstractPatch;
 import com.tencent.tinker.lib.reporter.LoadReporter;
 import com.tencent.tinker.lib.reporter.PatchReporter;
 import com.tencent.tinker.lib.service.AbstractResultService;
 import com.tencent.tinker.lib.util.TinkerLog;
-import com.tencent.tinker.loader.app.ApplicationLike;
 
 /**
  * Created by zhangshaowen on 16/3/19.
@@ -57,8 +57,8 @@ public static Tinker install(ApplicationLike applicationLike) {
      * @param upgradePatchProcessor
      */
     public static Tinker install(ApplicationLike applicationLike, LoadReporter loadReporter, PatchReporter patchReporter,
-                               PatchListener listener, Class<? extends AbstractResultService> resultServiceClass,
-                               AbstractPatch upgradePatchProcessor) {
+                                 PatchListener listener, Class<? extends AbstractResultService> resultServiceClass,
+                                 AbstractPatch upgradePatchProcessor) {
 
         Tinker tinker = new Tinker.Builder(applicationLike.getApplication())
             .tinkerFlags(applicationLike.getTinkerFlags())
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java
index a283600a..345de12b 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/AndroidNClassLoader.java
@@ -40,6 +40,7 @@
     private static final String TAG = "Tinker.NClassLoader";
 
     private static Object oldDexPathListHolder = null;
+    private static String baseApkFullPath = null;
 
     private final PathClassLoader originClassLoader;
     private String applicationClassName;
@@ -51,6 +52,7 @@ private AndroidNClassLoader(String dexPath, PathClassLoader parent, Application
         if (name != null && !name.equals("android.app.Application")) {
             applicationClassName = name;
         }
+        baseApkFullPath = application.getPackageCodePath();
     }
 
     @SuppressWarnings("unchecked")
@@ -70,7 +72,10 @@ private static Object recreateDexPathList(Object originalDexPathList, ClassLoade
         boolean isFirstItem = true;
         for (Object dexElement : dexElements) {
             final DexFile dexFile = (DexFile) dexFileField.get(dexElement);
-            if (dexFile == null) {
+            if (dexFile == null || dexFile.getName() == null) {
+                continue;
+            }
+            if (!dexFile.getName().equals(baseApkFullPath)) {
                 continue;
             }
             if (isFirstItem) {
@@ -153,25 +158,23 @@ public static AndroidNClassLoader inject(PathClassLoader originClassLoader, Appl
         return classLoader;
     }
 
-//    public static String getLdLibraryPath(ClassLoader loader) throws Exception {
-//        String nativeLibraryPath;
-//
-//        nativeLibraryPath = (String) loader.getClass()
-//            .getMethod("getLdLibraryPath", new Class[0])
-//            .invoke(loader, new Object[0]);
-//
-//        return nativeLibraryPath;
-//    }
-
     public Class<?> findClass(String name) throws ClassNotFoundException {
-        // loader class use default pathClassloader to load
-        if ((name != null
-                && name.startsWith("com.tencent.tinker.loader.")
-                && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS))
-                || (applicationClassName != null && applicationClassName.equals(name))) {
+        // app class use default pathClassloader to load
+        if (applicationClassName != null && applicationClassName.equals(name)) {
+            return originClassLoader.loadClass(name);
+        } else if (name != null && name.startsWith("com.tencent.tinker.loader.")
+                && !name.equals(SystemClassLoaderAdder.CHECK_DEX_CLASS)) {
+            return originClassLoader.loadClass(name);
+        }
+        try {
+            return super.findClass(name);
+        } catch (ClassNotFoundException e) {
+            // Some jars/apks other than base.apk was removed from AndroidNClassloader's dex path list.
+            // So if target class cannot be found in AndroidNClassloader, we should fallback to try
+            // original PathClassLoader for compatibility.
+            // Obviously this behavior violates the Parent Delegate Model, but it doesn't matter.
             return originClassLoader.loadClass(name);
         }
-        return super.findClass(name);
     }
 
     @Override
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
index 47566786..d2a17a0d 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
@@ -119,7 +119,7 @@ private static boolean checkIsProtectedApp(List<File> files) {
                 if (file == null) {
                     continue;
                 }
-                if (file.getName().startsWith(ShareConstants.CHANGED_CLASSES_DEX_NAME)) {
+                if (file.getName().startsWith(ShareConstants.CHANGED_CLASSES_DEX_PREFIX)) {
                     return true;
                 }
             }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
index 5e98084f..89ae0a19 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
@@ -304,18 +304,13 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten
     }
 
     private boolean checkSafeModeCount(TinkerApplication application) {
-        String processName = ShareTinkerInternals.getProcessName(application);
-        String preferName = ShareConstants.TINKER_OWN_PREFERENCE_CONFIG + processName;
-        //each process have its own SharedPreferences file
-        SharedPreferences sp = application.getSharedPreferences(preferName, Context.MODE_PRIVATE);
-        int count = sp.getInt(ShareConstants.TINKER_SAFE_MODE_COUNT, 0) + 1;
-        Log.w(TAG, "tinker safe mode preferName:" + preferName + " count:" + count);
-        if (count >= ShareConstants.TINKER_SAFE_MODE_MAX_COUNT) {
-            sp.edit().putInt(ShareConstants.TINKER_SAFE_MODE_COUNT, 0).commit();
+        int count = ShareTinkerInternals.getSafeModeCount(application);
+        if (count >= ShareConstants.TINKER_SAFE_MODE_MAX_COUNT - 1) {
+            ShareTinkerInternals.setSafeModeCount(application, 0);
             return false;
         }
         application.setUseSafeMode(true);
-        sp.edit().putInt(ShareConstants.TINKER_SAFE_MODE_COUNT, count).commit();
+        ShareTinkerInternals.setSafeModeCount(application, count + 1);
         return true;
     }
 }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerTestDexLoad.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerTestDexLoad.java
index 82b8f1c8..1c2c7ee6 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerTestDexLoad.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerTestDexLoad.java
@@ -16,9 +16,12 @@
 
 package com.tencent.tinker.loader;
 
+import android.support.annotation.Keep;
+
 /**
  * Created by zhangshaowen on 16/9/18.
  */
+@Keep
 public class TinkerTestDexLoad {
     public static boolean isPatch = false;
 }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
index f3f32bae..dd57e5bb 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
@@ -33,6 +33,7 @@
 import com.tencent.tinker.loader.hotplug.UnsupportedEnvironmentException;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 import com.tencent.tinker.loader.shareutil.ShareIntentUtil;
+import com.tencent.tinker.loader.shareutil.ShareReflectUtil;
 import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;
 
 import java.lang.reflect.Constructor;
@@ -73,7 +74,7 @@
     private       boolean useSafeMode;
     private       Intent  tinkerResultIntent;
 
-    private ApplicationLike applicationLike = null;
+    private Object applicationLike = null;
 
     private long applicationStartElapsedTime;
     private long applicationStartMillisTime;
@@ -82,7 +83,7 @@
      * current build.
      */
     protected TinkerApplication(int tinkerFlags) {
-        this(tinkerFlags, "com.tencent.tinker.loader.app.DefaultApplicationLike", TinkerLoader.class.getName(), false);
+        this(tinkerFlags, "com.tencent.tinker.entry.DefaultApplicationLike", TinkerLoader.class.getName(), false);
     }
 
     /**
@@ -101,14 +102,14 @@ protected TinkerApplication(int tinkerFlags, String delegateClassName) {
         this(tinkerFlags, delegateClassName, TinkerLoader.class.getName(), false);
     }
 
-    private ApplicationLike createDelegate() {
+    private Object createDelegate() {
         try {
             // Use reflection to create the delegate so it doesn't need to go into the primary dex.
             // And we can also patch it
             Class<?> delegateClass = Class.forName(delegateClassName, false, getClassLoader());
             Constructor<?> constructor = delegateClass.getConstructor(Application.class, int.class, boolean.class,
                 long.class, long.class, Intent.class);
-            return (ApplicationLike) constructor.newInstance(this, tinkerFlags, tinkerLoadVerifyFlag,
+            return constructor.newInstance(this, tinkerFlags, tinkerLoadVerifyFlag,
                 applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);
         } catch (Throwable e) {
             throw new TinkerRuntimeException("createDelegate failed", e);
@@ -127,17 +128,20 @@ private synchronized void ensureDelegate() {
      * here since {@link android.app.Application#onCreate} will not have yet been called.
      */
     private void onBaseContextAttached(Context base) {
-        applicationStartElapsedTime = SystemClock.elapsedRealtime();
-        applicationStartMillisTime = System.currentTimeMillis();
-        loadTinker();
-        ensureDelegate();
-        applicationLike.onBaseContextAttached(base);
-        //reset save mode
-        if (useSafeMode) {
-            String processName = ShareTinkerInternals.getProcessName(this);
-            String preferName = ShareConstants.TINKER_OWN_PREFERENCE_CONFIG + processName;
-            SharedPreferences sp = getSharedPreferences(preferName, Context.MODE_PRIVATE);
-            sp.edit().putInt(ShareConstants.TINKER_SAFE_MODE_COUNT, 0).commit();
+        try {
+            applicationStartElapsedTime = SystemClock.elapsedRealtime();
+            applicationStartMillisTime = System.currentTimeMillis();
+            loadTinker();
+            ensureDelegate();
+            ShareReflectUtil.findMethod(applicationLike, "onBaseContextAttached", Context.class).invoke(applicationLike, base);
+            //reset save mode
+            if (useSafeMode) {
+                ShareTinkerInternals.setSafeModeCount(this, 0);
+            }
+        } catch (TinkerRuntimeException e) {
+            throw e;
+        } catch (Throwable thr) {
+            throw new TinkerRuntimeException(thr.getMessage(), thr);
         }
     }
 
@@ -166,20 +170,30 @@ private void loadTinker() {
     @Override
     public void onCreate() {
         super.onCreate();
-        ensureDelegate();
         try {
-            ComponentHotplug.ensureComponentHotplugInstalled(this);
-        } catch (UnsupportedEnvironmentException e) {
-            throw new TinkerRuntimeException("failed to make sure that ComponentHotplug logic is fine.", e);
+            ensureDelegate();
+            try {
+                ComponentHotplug.ensureComponentHotplugInstalled(this);
+            } catch (UnsupportedEnvironmentException e) {
+                throw new TinkerRuntimeException("failed to make sure that ComponentHotplug logic is fine.", e);
+            }
+            ShareReflectUtil.findMethod(applicationLike, "onCreate").invoke(applicationLike);
+        } catch (TinkerRuntimeException e) {
+            throw e;
+        } catch (Throwable thr) {
+            throw new TinkerRuntimeException(thr.getMessage(), thr);
         }
-        applicationLike.onCreate();
     }
 
     @Override
     public void onTerminate() {
         super.onTerminate();
         if (applicationLike != null) {
-            applicationLike.onTerminate();
+            try {
+                ShareReflectUtil.findMethod(applicationLike, "onTerminate").invoke(applicationLike);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
     }
 
@@ -187,7 +201,11 @@ public void onTerminate() {
     public void onLowMemory() {
         super.onLowMemory();
         if (applicationLike != null) {
-            applicationLike.onLowMemory();
+            try {
+                ShareReflectUtil.findMethod(applicationLike, "onLowMemory").invoke(applicationLike);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
     }
 
@@ -196,7 +214,11 @@ public void onLowMemory() {
     public void onTrimMemory(int level) {
         super.onTrimMemory(level);
         if (applicationLike != null) {
-            applicationLike.onTrimMemory(level);
+            try {
+                ShareReflectUtil.findMethod(applicationLike, "onTrimMemory", int.class).invoke(applicationLike, level);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
     }
 
@@ -204,7 +226,11 @@ public void onTrimMemory(int level) {
     public void onConfigurationChanged(Configuration newConfig) {
         super.onConfigurationChanged(newConfig);
         if (applicationLike != null) {
-            applicationLike.onConfigurationChanged(newConfig);
+            try {
+                ShareReflectUtil.findMethod(applicationLike, "onConfigurationChanged", Configuration.class).invoke(applicationLike, newConfig);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
     }
 
@@ -212,7 +238,11 @@ public void onConfigurationChanged(Configuration newConfig) {
     public Resources getResources() {
         Resources resources = super.getResources();
         if (applicationLike != null) {
-            return applicationLike.getResources(resources);
+            try {
+                return (Resources) ShareReflectUtil.findMethod(applicationLike, "getResources", Resources.class).invoke(applicationLike, resources);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
         return resources;
     }
@@ -221,7 +251,11 @@ public Resources getResources() {
     public ClassLoader getClassLoader() {
         ClassLoader classLoader = super.getClassLoader();
         if (applicationLike != null) {
-            return applicationLike.getClassLoader(classLoader);
+            try {
+                return (ClassLoader) ShareReflectUtil.findMethod(applicationLike, "getClassLoader", ClassLoader.class).invoke(applicationLike, classLoader);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
         return classLoader;
     }
@@ -230,7 +264,11 @@ public ClassLoader getClassLoader() {
     public AssetManager getAssets() {
         AssetManager assetManager = super.getAssets();
         if (applicationLike != null) {
-            return applicationLike.getAssets(assetManager);
+            try {
+                return (AssetManager) ShareReflectUtil.findMethod(applicationLike, "getAssets", AssetManager.class).invoke(applicationLike, assetManager);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
         return assetManager;
     }
@@ -239,7 +277,11 @@ public AssetManager getAssets() {
     public Object getSystemService(String name) {
         Object service = super.getSystemService(name);
         if (applicationLike != null) {
-            return applicationLike.getSystemService(name, service);
+            try {
+                return ShareReflectUtil.findMethod(applicationLike, "getSystemService", String.class, Object.class).invoke(applicationLike, name, service);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
         return service;
     }
@@ -248,7 +290,11 @@ public Object getSystemService(String name) {
     public Context getBaseContext() {
         Context base = super.getBaseContext();
         if (applicationLike != null) {
-            return applicationLike.getBaseContext(base);
+            try {
+                return (Context) ShareReflectUtil.findMethod(applicationLike, "getBaseContext", Context.class).invoke(applicationLike, base);
+            } catch (Throwable thr) {
+                throw new TinkerRuntimeException(thr.getMessage(), thr);
+            }
         }
         return base;
     }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
index a7d2b324..c123bcbc 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
@@ -62,7 +62,7 @@
     public static final String ODEX_SUFFIX = ".odex";
 
     public static final String TEST_DEX_NAME            = "test.dex";
-    public static final String CHANGED_CLASSES_DEX_NAME = "changed_classes.dex";
+    public static final String CHANGED_CLASSES_DEX_PREFIX = "changed_classes";
     public static final String CLASS_N_APK_NAME         = "tinker_classN.apk";
 
     public static final String CHECK_DEX_INSTALL_FAIL = "checkDexInstall failed";
@@ -105,14 +105,14 @@
      * multi process share
      */
     public static final String TINKER_SHARE_PREFERENCE_CONFIG = "tinker_share_config";
-    public static final String TINKER_ENABLE_CONFIG           = "tinker_enable_";
+    public static final String TINKER_ENABLE_CONFIG_PREFIX    = "tinker_enable_";
 
     /**
      * only for each process
      */
-    public static final String TINKER_OWN_PREFERENCE_CONFIG = "tinker_own_config_";
-    public static final String TINKER_SAFE_MODE_COUNT       = "safe_mode_count";
-    public static final int    TINKER_SAFE_MODE_MAX_COUNT   = 3;
+    public static final String TINKER_OWN_PREFERENCE_CONFIG_PREFIX = "tinker_own_config_";
+    public static final String TINKER_SAFE_MODE_COUNT_PREFIX       = "safe_mode_count_";
+    public static final int    TINKER_SAFE_MODE_MAX_COUNT          = 3;
 
 
     /**
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
index 517c6dab..594e79b0 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareTinkerInternals.java
@@ -296,7 +296,8 @@ public static String getTypeString(int type) {
      */
     public static void setTinkerDisableWithSharedPreferences(Context context) {
         SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);
-        sp.edit().putBoolean(getTinkerSharedPreferencesName(), false).commit();
+        String keyName = ShareConstants.TINKER_ENABLE_CONFIG_PREFIX + ShareConstants.TINKER_VERSION;
+        sp.edit().putBoolean(keyName, false).commit();
     }
 
     /**
@@ -310,11 +311,25 @@ public static boolean isTinkerEnableWithSharedPreferences(Context context) {
             return false;
         }
         SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);
-        return sp.getBoolean(getTinkerSharedPreferencesName(), true);
+        String keyName = ShareConstants.TINKER_ENABLE_CONFIG_PREFIX + ShareConstants.TINKER_VERSION;
+        return sp.getBoolean(keyName, true);
     }
 
-    private static String getTinkerSharedPreferencesName() {
-        return ShareConstants.TINKER_ENABLE_CONFIG + ShareConstants.TINKER_VERSION;
+    public static int getSafeModeCount(Context context) {
+        String processName = ShareTinkerInternals.getProcessName(context);
+        String preferName = ShareConstants.TINKER_OWN_PREFERENCE_CONFIG_PREFIX + processName;
+        SharedPreferences sp = context.getSharedPreferences(preferName, Context.MODE_PRIVATE);
+        int count = sp.getInt(ShareConstants.TINKER_SAFE_MODE_COUNT_PREFIX + ShareConstants.TINKER_VERSION, 0);
+        Log.w(TAG, "getSafeModeCount: preferName:" + preferName + " count:" + count);
+        return count;
+    }
+
+    public static void setSafeModeCount(Context context, int count) {
+        String processName = ShareTinkerInternals.getProcessName(context);
+        String preferName = ShareConstants.TINKER_OWN_PREFERENCE_CONFIG_PREFIX + processName;
+        SharedPreferences sp = context.getSharedPreferences(preferName, Context.MODE_PRIVATE);
+        sp.edit().putInt(ShareConstants.TINKER_SAFE_MODE_COUNT_PREFIX + ShareConstants.TINKER_VERSION, count).commit();
+        Log.w(TAG, "setSafeModeCount: preferName:" + preferName + " count:" + count);
     }
 
     public static boolean isTinkerEnabled(int flag) {
diff --git a/tinker-build/tinker-patch-cli/tool_output/tinker_multidexkeep.pro b/tinker-build/tinker-patch-cli/tool_output/tinker_multidexkeep.pro
index 5c9f4c5b..c394459f 100644
--- a/tinker-build/tinker-patch-cli/tool_output/tinker_multidexkeep.pro
+++ b/tinker-build/tinker-patch-cli/tool_output/tinker_multidexkeep.pro
@@ -1,5 +1,5 @@
 #tinker multidex keep patterns:
--keep public class * implements com.tencent.tinker.loader.app.ApplicationLifeCycle {
+-keep public class * implements com.tencent.tinker.entry.ApplicationLifeCycle {
     <init>();
     void onBaseContextAttached(android.content.Context);
 }
diff --git a/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro b/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
index 85e96b50..4de5fc9a 100644
--- a/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
+++ b/tinker-build/tinker-patch-cli/tool_output/tinker_proguard.pro
@@ -7,10 +7,10 @@
     *;
 }
 
--keep public class com.tencent.tinker.loader.app.ApplicationLifeCycle {
+-keep public class com.tencent.tinker.entry.ApplicationLifeCycle {
     *;
 }
--keep public class * implements com.tencent.tinker.loader.app.ApplicationLifeCycle {
+-keep public class * implements com.tencent.tinker.entry.ApplicationLifeCycle {
     *;
 }
 
diff --git a/tinker-build/tinker-patch-gradle-plugin/build.gradle b/tinker-build/tinker-patch-gradle-plugin/build.gradle
index fa4fb4e2..74814b86 100644
--- a/tinker-build/tinker-patch-gradle-plugin/build.gradle
+++ b/tinker-build/tinker-patch-gradle-plugin/build.gradle
@@ -9,7 +9,7 @@ dependencies {
     compile localGroovy()
 //    compile fileTree(dir: 'libs', include: ['*.jar'])
     compile project(':tinker-build:tinker-patch-lib')
-    compile 'com.google.gradle:osdetector-gradle-plugin:1.2.1'
+    compile 'com.google.gradle:osdetector-gradle-plugin:1.6.0'
     compile 'com.android.tools.build:gradle:2.1.0'
 }
 
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
index 80825350..2c0faaae 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/TinkerPatchPlugin.groovy
@@ -67,9 +67,6 @@ class TinkerPatchPlugin implements Plugin<Project> {
             //open jumboMode
             android.dexOptions.jumboMode = true
 
-            //disable aapt2
-            reflectAapt2Flag()
-
             //disable dex archive mode
             disableArchiveDex()
         } catch (Throwable e) {
@@ -89,7 +86,6 @@ class TinkerPatchPlugin implements Plugin<Project> {
             project.logger.error("excluding annotation processor and source template from app packaging. Enable dx jumboMode to reduce package size.")
             project.logger.error("enable dx jumboMode to reduce package size.")
             project.logger.error("disable preDexLibraries to prevent ClassDefNotFoundException when your app is booting.")
-            project.logger.error("disable aapt2 so far for resource id keeping.")
             project.logger.error("disable archive dex mode so far for keeping dex apply.")
             project.logger.error("")
             project.logger.error("tinker will change your build configs:")
@@ -160,6 +156,8 @@ class TinkerPatchPlugin implements Plugin<Project> {
 
                 //resource id
                 TinkerResourceIdTask applyResourceTask = project.tasks.create("tinkerProcess${variantName}ResourceId", TinkerResourceIdTask)
+                applyResourceTask.applicationId = variantData.getApplicationId()
+                applyResourceTask.variantName = variant.name
 
                 if (variantOutput.processResources.properties['resDir'] != null) {
                     applyResourceTask.resDir = variantOutput.processResources.resDir
@@ -240,24 +238,6 @@ class TinkerPatchPlugin implements Plugin<Project> {
         tinkerPatchBuildTask.outputFolder = outputFolder
     }
 
-    void reflectAapt2Flag() {
-        try {
-            def booleanOptClazz = Class.forName('com.android.build.gradle.options.BooleanOption')
-            def enableAAPT2Field = booleanOptClazz.getDeclaredField('ENABLE_AAPT2')
-            enableAAPT2Field.setAccessible(true)
-            def enableAAPT2EnumObj = enableAAPT2Field.get(null)
-            def defValField = enableAAPT2EnumObj.getClass().getDeclaredField('defaultValue')
-            defValField.setAccessible(true)
-            defValField.set(enableAAPT2EnumObj, false)
-        } catch (Throwable thr) {
-            // To some extends, class not found means we are in lower version of android gradle
-            // plugin, so just ignore that exception.
-            if (!(thr instanceof ClassNotFoundException)) {
-                project.logger.error("reflectAapt2Flag error: ${thr.getMessage()}.")
-            }
-        }
-    }
-
     void disableArchiveDex() {
         try {
             def booleanOptClazz = Class.forName('com.android.build.gradle.options.BooleanOption')
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
index 2b148947..73ef23fe 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerMultidexConfigTask.groovy
@@ -28,11 +28,15 @@ import org.gradle.api.tasks.TaskAction
 public class TinkerMultidexConfigTask extends DefaultTask {
     static final String MULTIDEX_CONFIG_PATH = TinkerPatchPlugin.TINKER_INTERMEDIATES + "tinker_multidexkeep.pro"
     static final String MULTIDEX_CONFIG_SETTINGS =
-            "-keep public class * implements com.tencent.tinker.loader.app.ApplicationLifeCycle {\n" +
+            "-keep public class * implements com.tencent.tinker.entry.ApplicationLifeCycle {\n" +
                     "    <init>(...);\n" +
                     "    void onBaseContextAttached(android.content.Context);\n" +
                     "}\n" +
                     "\n" +
+                    "-keep public class com.tencent.tinker.entry.ApplicationLifeCycle {\n" +
+                    "    *;\n" +
+                    "}\n" +
+                    "\n" +
                     "-keep public class * extends com.tencent.tinker.loader.TinkerLoader {\n" +
                     "    <init>(...);\n" +
                     "}\n" +
@@ -102,9 +106,23 @@ public class TinkerMultidexConfigTask extends DefaultTask {
             multiDexKeepProguard = applicationVariant.getVariantData().getScope().getManifestKeepListProguardFile()
         } catch (Throwable ignore) {
             try {
-                multiDexKeepProguard = applicationVariant.getVariantData().getScope().getManifestKeepListFile()
+                def buildableArtifact = applicationVariant.getVariantData().getScope().getArtifacts().getFinalArtifactFiles(
+                        Class.forName("com.android.build.gradle.internal.scope.InternalArtifactType")
+                                .getDeclaredField("LEGACY_MULTIDEX_AAPT_DERIVED_PROGUARD_RULES")
+                                .get(null)
+                )
+
+                //noinspection GroovyUncheckedAssignmentOfMemberOfRawType,UnnecessaryQualifiedReference
+                multiDexKeepProguard = com.google.common.collect.Iterators.getOnlyElement(buildableArtifact.iterator())
             } catch (Throwable e) {
-                project.logger.error("can't find getManifestKeepListFile method, exception:${e}")
+
+            }
+            if (multiDexKeepProguard == null) {
+                try {
+                    multiDexKeepProguard = applicationVariant.getVariantData().getScope().getManifestKeepListFile()
+                } catch (Throwable e) {
+                    project.logger.error("can't find getManifestKeepListFile method, exception:${e}")
+                }
             }
         }
         if (multiDexKeepProguard == null) {
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
index 23230b52..940a8707 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerProguardConfigTask.groovy
@@ -36,10 +36,10 @@ public class TinkerProguardConfigTask extends DefaultTask {
                     "    *;\n" +
                     "}\n" +
                     "\n" +
-                    "-keep public class com.tencent.tinker.loader.app.ApplicationLifeCycle {\n" +
+                    "-keep public class com.tencent.tinker.entry.ApplicationLifeCycle {\n" +
                     "    *;\n" +
                     "}\n" +
-                    "-keep public class * implements com.tencent.tinker.loader.app.ApplicationLifeCycle {\n" +
+                    "-keep public class * implements com.tencent.tinker.entry.ApplicationLifeCycle {\n" +
                     "    *;\n" +
                     "}\n" +
                     "\n" +
diff --git a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
index ba6c2c75..b119b357 100644
--- a/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
+++ b/tinker-build/tinker-patch-gradle-plugin/src/main/groovy/com/tencent/tinker/build/gradle/task/TinkerResourceIdTask.groovy
@@ -22,8 +22,15 @@ import com.tencent.tinker.build.aapt.PatchUtil
 import com.tencent.tinker.build.aapt.RDotTxtEntry
 import com.tencent.tinker.build.gradle.TinkerPatchPlugin
 import com.tencent.tinker.build.util.FileOperation
+import groovy.io.FileType
 import org.gradle.api.DefaultTask
+import org.gradle.api.GradleException
+import org.gradle.api.Project
 import org.gradle.api.tasks.TaskAction
+import org.gradle.util.GFileUtils
+
+import java.util.regex.Matcher
+import java.util.regex.Pattern
 
 /**
  * The configuration properties.
@@ -33,13 +40,266 @@ import org.gradle.api.tasks.TaskAction
 public class TinkerResourceIdTask extends DefaultTask {
     static final String RESOURCE_PUBLIC_XML = TinkerPatchPlugin.TINKER_INTERMEDIATES + "public.xml"
     static final String RESOURCE_IDX_XML = TinkerPatchPlugin.TINKER_INTERMEDIATES + "idx.xml"
+    static final String RESOURCE_VALUES_BACKUP = TinkerPatchPlugin.TINKER_INTERMEDIATES + "values_backup"
+    static final String RESOURCE_PUBLIC_TXT = TinkerPatchPlugin.TINKER_INTERMEDIATES + "public.txt"
+
+    //it's parent dir must start with values
+    static final String RESOURCE_TO_COMPILE_PUBLIC_XML = TinkerPatchPlugin.TINKER_INTERMEDIATES + "aapt2/res/values/tinker_public.xml"
 
     String resDir
+    String variantName
+    String applicationId
+
+    //if you need add public flag, set tinker.aapt2.public = true in gradle.properties
+    boolean addPublicFlagForAapt2 = false
 
     TinkerResourceIdTask() {
         group = 'tinker'
     }
 
+    /**
+     * get android gradle plugin version by reflect
+     */
+    static String getAndroidGradlePluginVersionCompat() {
+        String version = null
+        try {
+            Class versionModel = Class.forName("com.android.builder.model.Version")
+            def versionFiled = versionModel.getDeclaredField("ANDROID_GRADLE_PLUGIN_VERSION")
+            versionFiled.setAccessible(true)
+            version = versionFiled.get(null)
+        } catch (Exception e) {
+
+        }
+        return version
+    }
+
+    /**
+     * get enum obj by reflect
+     */
+    static <T> T resolveEnumValue(String value, Class<T> type) {
+        for (T constant : type.getEnumConstants()) {
+            if (constant.toString().equalsIgnoreCase(value)) {
+                return constant
+            }
+        }
+        return null
+    }
+
+    /**
+     * get com.android.build.gradle.options.ProjectOptions obj by reflect
+     */
+    static def getProjectOptions(Project project) {
+        try {
+            def basePlugin = project.getPlugins().hasPlugin('com.android.application') ? project.getPlugins().findPlugin('com.android.application') : project.getPlugins().findPlugin('com.android.library')
+            return Class.forName("com.android.build.gradle.BasePlugin").getMetaClass().getProperty(basePlugin, 'projectOptions')
+        } catch (Exception e) {
+        }
+        return null
+    }
+
+    /**
+     * get whether aapt2 is enabled
+     */
+    static boolean isAapt2EnabledCompat(Project project) {
+        if (getAndroidGradlePluginVersionCompat() >= '3.3.0') {
+            //when agp' version >= 3.3.0, use aapt2 default and no way to switch to aapt.
+            return true
+        }
+        boolean aapt2Enabled = false
+        try {
+            def projectOptions = getProjectOptions(project)
+            Object enumValue = resolveEnumValue("ENABLE_AAPT2", Class.forName("com.android.build.gradle.options.BooleanOption"))
+            aapt2Enabled = projectOptions.get(enumValue)
+        } catch (Exception e) {
+            try {
+                //retry for agp <= 2.3.3
+                //when agp <= 2.3.3, the field is store in com.android.build.gradle.AndroidGradleOptions
+                Class classAndroidGradleOptions = Class.forName("com.android.build.gradle.AndroidGradleOptions")
+                def isAapt2Enabled = classAndroidGradleOptions.getDeclaredMethod("isAapt2Enabled", Project.class)
+                isAapt2Enabled.setAccessible(true)
+                aapt2Enabled = isAapt2Enabled.invoke(null, project)
+            } catch (Exception e1) {
+                //if we can't get it, it means aapt2 is not support current.
+                aapt2Enabled = false
+            }
+        }
+        return aapt2Enabled
+    }
+
+    /**
+     * add --stable-ids param to aaptOptions's additionalParameters
+     */
+    List<String> addStableIdsFileToAdditionalParameters(def processAndroidResourceTask) {
+        def aaptOptions = processAndroidResourceTask.getAaptOptions()
+        List<String> additionalParameters = new ArrayList<>()
+        List<String> originalAdditionalParameters = aaptOptions.getAdditionalParameters()
+        if (originalAdditionalParameters != null) {
+            additionalParameters.addAll(originalAdditionalParameters)
+        }
+        aaptOptions.setAdditionalParameters(additionalParameters)
+        additionalParameters.add("--stable-ids")
+        additionalParameters.add(project.file(RESOURCE_PUBLIC_TXT).getAbsolutePath())
+        project.logger.error("tinker add additionalParameters --stable-ids ${project.file(RESOURCE_PUBLIC_TXT).getAbsolutePath()}")
+        return additionalParameters
+    }
+
+    /**
+     * get real name for style type resources in R.txt by values files
+     */
+    Map<String, String> getStyles() {
+        Map<String, String> styles = new HashMap<>()
+        def mergeResourcesTask = project.tasks.findByName("merge${variantName.capitalize()}Resources")
+        List<File> resDirCandidateList = new ArrayList<>()
+        resDirCandidateList.add(mergeResourcesTask.outputDir)
+        resDirCandidateList.add(new File(mergeResourcesTask.getIncrementalFolder(), "merged.dir"))
+        resDirCandidateList.each {
+            it.eachFileRecurse(FileType.FILES) {
+                if (it.getParentFile().getName().startsWith("values") && it.getName().startsWith("values") && it.getName().endsWith(".xml")) {
+                    File destFile = new File(project.file(RESOURCE_VALUES_BACKUP), "${it.getParentFile().getName()}/${it.getName()}")
+                    GFileUtils.deleteQuietly(destFile)
+                    GFileUtils.mkdirs(destFile.getParentFile())
+                    GFileUtils.copyFile(it, destFile)
+                }
+            }
+        }
+        project.file(RESOURCE_VALUES_BACKUP).eachFileRecurse(FileType.FILES) {
+            new XmlParser().parse(it).each {
+                if ("style".equalsIgnoreCase("${it.name()}")) {
+                    String originalStyle = "${it.@name}".toString()
+                    //replace . to _
+                    String sanitizeName = originalStyle.replaceAll("[.:]", "_");
+                    styles.put(sanitizeName, originalStyle)
+                }
+            }
+        }
+        return styles
+    }
+
+    /**
+     * get the sorted stable id lines
+     */
+    ArrayList<String> getSortedStableIds(Map<RDotTxtEntry.RType, Set<RDotTxtEntry>> rTypeResourceMap) {
+        List<String> sortedLines = new ArrayList<>()
+        Map<String, String> styles = getStyles()
+        rTypeResourceMap?.each { key, entries ->
+            entries.each {
+                if (it.type == RDotTxtEntry.RType.STYLEABLE) {
+                    //ignore styleable type, also public.xml ignore it.
+                    return
+                } else if (it.type == RDotTxtEntry.RType.STYLE) {
+                    //the name in R.txt for style type which has replaced . to _
+                    //so we should get the original name for it
+                    sortedLines.add("${applicationId}:${it.type}/${styles.get(it.name)} = ${it.idValue}")
+                } else if (it.type == RDotTxtEntry.RType.DRAWABLE) {
+                    //there is a special resource type for drawable which called nested resource.
+                    //such as avd_hide_password and avd_show_password resource in support design sdk.
+                    //the nested resource is start with $, such as $avd_hide_password__0 and $avd_hide_password__1
+                    //but there is none nested resource in R.txt, so ignore it just now.
+                    sortedLines.add("${applicationId}:${it.type}/${it.name} = ${it.idValue}")
+                } else {
+                    //other resource type which format is packageName:resType/resName = resId
+                    sortedLines.add("${applicationId}:${it.type}/${it.name} = ${it.idValue}")
+                }
+            }
+        }
+        //sort it and see the diff content conveniently
+        Collections.sort(sortedLines)
+        return sortedLines
+    }
+
+    /**
+     * convert public.txt to public.xml
+     */
+    @SuppressWarnings("GrMethodMayBeStatic")
+    void convertPublicTxtToPublicXml(File publicTxtFile, File publicXmlFile, boolean withId) {
+        if (publicTxtFile == null) {
+            return
+        }
+        GFileUtils.deleteQuietly(publicXmlFile)
+        GFileUtils.mkdirs(publicXmlFile.getParentFile())
+        GFileUtils.touch(publicXmlFile)
+
+        publicXmlFile.append("<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->")
+        publicXmlFile.append("\n")
+        publicXmlFile.append("<resources>")
+        publicXmlFile.append("\n")
+        Pattern linePattern = Pattern.compile(".*?:(.*?)/(.*?)\\s+=\\s+(.*?)")
+
+        publicTxtFile?.eachLine { def line ->
+            Matcher matcher = linePattern.matcher(line)
+            if (matcher.matches() && matcher.groupCount() == 3) {
+                String resType = matcher.group(1)
+                String resName = matcher.group(2)
+                if (resName.startsWith('$')) {
+                    project.logger.error("ignore convert to public res ${resName} because it's a nested resource")
+                } else if (resType.equalsIgnoreCase("styleable")) {
+                    project.logger.error("ignore convert to public res ${resName} because it's a styleable resource")
+                } else {
+                    if (withId) {
+                        publicXmlFile.append("\t<public type=\"${resType}\" name=\"${resName}\" id=\"${matcher.group(3)}\" />\n")
+                    } else {
+                        publicXmlFile.append("\t<public type=\"${resType}\" name=\"${resName}\" />\n")
+                    }
+                }
+            }
+        }
+        publicXmlFile.append("</resources>")
+    }
+
+    /**
+     * compile xml file to flat file
+     */
+    void compileXmlForAapt2(File xmlFile) {
+        if (xmlFile == null || !xmlFile.exists()) {
+            return
+        }
+
+        def foundVariant = null
+        project.android.applicationVariants.all { def variant ->
+            if (variant.getName() == variantName) {
+                foundVariant = variant
+            }
+        }
+
+        if (foundVariant == null) {
+            throw new GradleException("variant ${variantName} not found")
+        }
+
+        def variantData = foundVariant.getMetaClass().getProperty(foundVariant, 'variantData')
+        def variantScope = variantData.getScope()
+        def globalScope = variantScope.getGlobalScope()
+        def androidBuilder = globalScope.getAndroidBuilder()
+        def targetInfo = androidBuilder.getTargetInfo()
+        def buildTools = targetInfo.getBuildTools()
+        Map paths = buildTools.getMetaClass().getProperty(buildTools, "mPaths")
+        String aapt2Path = paths.get(resolveEnumValue("AAPT2", Class.forName('com.android.sdklib.BuildToolInfo$PathId')))
+
+        try {
+            //may be from maven, the flat magic number don't match. so we should also use the aapt2 from maven.
+            Class aapt2MavenUtilsClass = Class.forName("com.android.build.gradle.internal.res.Aapt2MavenUtils")
+            def getAapt2FromMavenMethod = aapt2MavenUtilsClass.getDeclaredMethod("getAapt2FromMaven", Class.forName("com.android.build.gradle.internal.scope.GlobalScope"))
+            getAapt2FromMavenMethod.setAccessible(true)
+            def aapt2FromMaven = getAapt2FromMavenMethod.invoke(null, globalScope)
+            //noinspection UnnecessaryQualifiedReference
+            aapt2Path = aapt2FromMaven.singleFile.toPath().resolve(com.android.SdkConstants.FN_AAPT2)
+        } catch (Exception e) {
+            //ignore
+        }
+
+        project.logger.error("tinker get aapt2 path ${aapt2Path}")
+        def mergeResourcesTask = project.tasks.findByName("merge${variantName.capitalize()}Resources")
+        if (xmlFile.exists()) {
+            project.exec { def execSpec ->
+                execSpec.executable "${aapt2Path}"
+                execSpec.args("compile")
+                execSpec.args("--legacy")
+                execSpec.args("-o")
+                execSpec.args("${mergeResourcesTask.outputDir}")
+                execSpec.args("${xmlFile}")
+            }
+        }
+    }
+
     @TaskAction
     def applyResourceId() {
         String resourceMappingFile = project.extensions.tinkerPatch.buildConfig.applyResourceMapping
@@ -49,28 +309,58 @@ public class TinkerResourceIdTask extends DefaultTask {
             project.logger.error("apply resource mapping file ${resourceMappingFile} is illegal, just ignore")
             return
         }
-        String idsXml = resDir + "/values/ids.xml";
-        String publicXml = resDir + "/values/public.xml";
-        FileOperation.deleteFile(idsXml);
-        FileOperation.deleteFile(publicXml);
-        List<String> resourceDirectoryList = new ArrayList<String>()
-        resourceDirectoryList.add(resDir)
-
         project.logger.error("we build ${project.getName()} apk with apply resource mapping file ${resourceMappingFile}")
         project.extensions.tinkerPatch.buildConfig.usingResourceMapping = true
         Map<RDotTxtEntry.RType, Set<RDotTxtEntry>> rTypeResourceMap = PatchUtil.readRTxt(resourceMappingFile)
 
-        AaptResourceCollector aaptResourceCollector = AaptUtil.collectResource(resourceDirectoryList, rTypeResourceMap)
-        PatchUtil.generatePublicResourceXml(aaptResourceCollector, idsXml, publicXml)
-        File publicFile = new File(publicXml)
-        if (publicFile.exists()) {
-            FileOperation.copyFileUsingStream(publicFile, project.file(RESOURCE_PUBLIC_XML))
-            project.logger.error("tinker gen resource public.xml in ${RESOURCE_PUBLIC_XML}")
-        }
-        File idxFile = new File(idsXml)
-        if (idxFile.exists()) {
-            FileOperation.copyFileUsingStream(idxFile, project.file(RESOURCE_IDX_XML))
-            project.logger.error("tinker gen resource idx.xml in ${RESOURCE_IDX_XML}")
+
+        if (!isAapt2EnabledCompat(project)) {
+            String idsXml = resDir + "/values/ids.xml";
+            String publicXml = resDir + "/values/public.xml";
+            FileOperation.deleteFile(idsXml);
+            FileOperation.deleteFile(publicXml);
+            List<String> resourceDirectoryList = new ArrayList<String>()
+            resourceDirectoryList.add(resDir)
+
+            AaptResourceCollector aaptResourceCollector = AaptUtil.collectResource(resourceDirectoryList, rTypeResourceMap)
+            PatchUtil.generatePublicResourceXml(aaptResourceCollector, idsXml, publicXml)
+            File publicFile = new File(publicXml)
+            if (publicFile.exists()) {
+                FileOperation.copyFileUsingStream(publicFile, project.file(RESOURCE_PUBLIC_XML))
+                project.logger.error("tinker gen resource public.xml in ${RESOURCE_PUBLIC_XML}")
+            }
+            File idxFile = new File(idsXml)
+            if (idxFile.exists()) {
+                FileOperation.copyFileUsingStream(idxFile, project.file(RESOURCE_IDX_XML))
+                project.logger.error("tinker gen resource idx.xml in ${RESOURCE_IDX_XML}")
+            }
+        } else {
+            File stableIdsFile = project.file(RESOURCE_PUBLIC_TXT)
+            FileOperation.deleteFile(stableIdsFile);
+            ArrayList<String> sortedLines = getSortedStableIds(rTypeResourceMap)
+
+            sortedLines?.each {
+                stableIdsFile.append("${it}\n")
+            }
+
+            def processResourcesTask = project.tasks.findByName("process${variantName.capitalize()}Resources")
+            processResourcesTask.doFirst {
+                addStableIdsFileToAdditionalParameters(processResourcesTask)
+
+                if (project.hasProperty("tinker.aapt2.public")) {
+                    addPublicFlagForAapt2 = project.ext["tinker.aapt2.public"]?.toString()?.toBoolean()
+                }
+
+                if (addPublicFlagForAapt2) {
+                    //if we need add public flag for resource, we need to compile public.xml to .flat file
+                    //it's parent dir must start with values
+                    File publicXmlFile = project.file(RESOURCE_TO_COMPILE_PUBLIC_XML)
+                    //convert public.txt to public.xml
+                    convertPublicTxtToPublicXml(stableIdsFile, publicXmlFile, false)
+                    //dest file is mergeResourceTask output dir
+                    compileXmlForAapt2(publicXmlFile)
+                }
+            }
         }
     }
 }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
index 56675bcb..20f6b1ac 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java
@@ -277,6 +277,11 @@ public static void processXmlFile(String xmlFullFilename, List<RDotTxtEntry> ref
             if (name.startsWith("android:")) {
                 continue;
             }
+
+            if (rawRType.startsWith("tools:")) {
+                continue;
+            }
+
             if (!RESOURCE_TYPES.containsKey(rawRType)) {
                 throw new AaptUtilException("Invalid reference '" + resourceName + "' in '" + xmlFullFilename + "'");
             }
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
index 712876d6..013a14f5 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
@@ -66,7 +66,7 @@
  */
 public class DexDiffDecoder extends BaseDecoder {
     private static final String TEST_DEX_NAME = "test.dex";
-    private static final String CHANGED_CLASSES_DEX_NAME = "changed_classes.dex";
+    private static final String CHANGED_CLASSES_DEX_NAME_PREFIX = "changed_classes";
 
     private final InfoWriter logWriter;
     private final InfoWriter metaWriter;
@@ -204,9 +204,6 @@ public void onAllPatchesEnd() throws Exception {
     @SuppressWarnings("NewApi")
     private void generateChangedClassesDexFile() throws IOException {
         final String dexMode = config.mDexRaw ? "raw" : "jar";
-        final File dest = new File(config.mTempResultDir + "/" + CHANGED_CLASSES_DEX_NAME);
-
-        Logger.d("\nBuilding changed classes dex: %s, size: %d\n", dest.getAbsolutePath(), dest.length());
 
         List<File> oldDexList = new ArrayList<>();
         List<File> newDexList = new ArrayList<>();
@@ -243,10 +240,22 @@ private void generateChangedClassesDexFile() throws IOException {
             descOfChangedClasses.add(classInfo.classDesc);
         }
 
-        DexBuilder dexBuilder = DexBuilder.makeDexBuilder();
+        StringBuilder metaBuilder = new StringBuilder();
+        int changedDexId = 1;
         for (Dex dex : owners) {
             Set<String> descOfChangedClassesInCurrDex = ownerToDescOfChangedClassesMap.get(dex);
             DexFile dexFile = new DexBackedDexFile(org.jf.dexlib2.Opcodes.forApi(20), dex.getBytes());
+            boolean isCurrentDexHasChangedClass = false;
+            for (org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {
+                if (descOfChangedClassesInCurrDex.contains(classDef.getType())) {
+                    isCurrentDexHasChangedClass = true;
+                    break;
+                }
+            }
+            if (!isCurrentDexHasChangedClass) {
+                continue;
+            }
+            DexBuilder dexBuilder = DexBuilder.makeDexBuilder();
             for (org.jf.dexlib2.iface.ClassDef classDef : dexFile.getClasses()) {
                 if (!descOfChangedClassesInCurrDex.contains(classDef.getType())) {
                     continue;
@@ -295,22 +304,38 @@ private void generateChangedClassesDexFile() throws IOException {
                         builderMethods
                 );
             }
-        }
-
-        // Write constructed changed classes dex to file and record it in meta file.
-        FileDataStore fileDataStore = new FileDataStore(dest);
-        dexBuilder.writeTo(fileDataStore);
-
-        final String md5 = MD5.getMD5(dest);
-
-        String meta = CHANGED_CLASSES_DEX_NAME + "," + "" + "," + md5 + "," + md5 + "," + 0
-                + "," + 0 + "," + 0 + "," + dexMode;
 
-        Logger.d("\nDexDecoder:write changed classes dex meta file data: %s", meta);
+            // Write constructed changed classes dex to file and record it in meta file.
+            final String changedDexName = CHANGED_CLASSES_DEX_NAME_PREFIX + changedDexId + ".dex";
+            final File dest = new File(config.mTempResultDir + "/" + changedDexName);
+            final FileDataStore fileDataStore = new FileDataStore(dest);
+            dexBuilder.writeTo(fileDataStore);
+            final String md5 = MD5.getMD5(dest);
+            appendMetaLine(metaBuilder, changedDexName, "", md5, md5, 0, 0, 0, dexMode);
+            ++changedDexId;
+        }
 
+        final String meta = metaBuilder.toString();
+        Logger.d("\nDexDecoder:write changed classes dex meta file data:\n%s", meta);
         metaWriter.writeLineToInfoFile(meta);
     }
 
+    private void appendMetaLine(StringBuilder sb, Object... vals) {
+        if (vals == null || vals.length == 0) {
+            return;
+        }
+        boolean isFirstItem = true;
+        for (Object val : vals) {
+            if (isFirstItem) {
+                isFirstItem = false;
+            } else {
+                sb.append(',');
+            }
+            sb.append(val);
+        }
+        sb.append('\n');
+    }
+
     @SuppressWarnings("NewApi")
     private void generatePatchInfoFile() throws IOException {
         generatePatchedDexInfoFile();
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index 9b662d29..bcb582de 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -97,6 +97,7 @@ android {
     }
 
 //    aaptOptions{
+//        additionalParameters "--emit-ids", "${project.file('public.txt')}"
 //        cruncherEnabled false
 //    }
 
@@ -471,3 +472,21 @@ if (buildWithTinker()) {
         }
     }
 }
+
+
+
+task sortPublicTxt() {
+    doLast {
+        File originalFile = project.file("public.txt")
+        File sortedFile = project.file("public_sort.txt")
+        List<String> sortedLines = new ArrayList<>()
+        originalFile.eachLine {
+            sortedLines.add(it)
+        }
+        Collections.sort(sortedLines)
+        sortedFile.delete()
+        sortedLines.each {
+            sortedFile.append("${it}\n")
+        }
+    }
+}
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
index 5aef75a3..ba9d01bd 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
@@ -24,15 +24,12 @@
 import android.support.multidex.MultiDex;
 
 import com.tencent.tinker.anno.DefaultLifeCycle;
+import com.tencent.tinker.entry.ApplicationLifeCycle;
+import com.tencent.tinker.entry.DefaultApplicationLike;
 import com.tencent.tinker.lib.tinker.Tinker;
 import com.tencent.tinker.lib.tinker.TinkerInstaller;
-import com.tencent.tinker.lib.util.TinkerLog;
-import com.tencent.tinker.loader.app.ApplicationLifeCycle;
-import com.tencent.tinker.loader.app.DefaultApplicationLike;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 
-import java.util.regex.Pattern;
-
 import tinker.sample.android.Log.MyLogImp;
 import tinker.sample.android.util.SampleApplicationContext;
 import tinker.sample.android.util.TinkerManager;
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
index 90dcd767..6656c088 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/crash/SampleUncaughtExceptionHandler.java
@@ -22,7 +22,7 @@
 
 import com.tencent.tinker.lib.tinker.TinkerApplicationHelper;
 import com.tencent.tinker.lib.util.TinkerLog;
-import com.tencent.tinker.loader.app.ApplicationLike;
+import com.tencent.tinker.entry.ApplicationLike;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;
 
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/util/TinkerManager.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/util/TinkerManager.java
index e3af535f..42364476 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/util/TinkerManager.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/util/TinkerManager.java
@@ -24,7 +24,7 @@
 import com.tencent.tinker.lib.tinker.TinkerInstaller;
 import com.tencent.tinker.lib.util.TinkerLog;
 import com.tencent.tinker.lib.util.UpgradePatchRetry;
-import com.tencent.tinker.loader.app.ApplicationLike;
+import com.tencent.tinker.entry.ApplicationLike;
 
 import tinker.sample.android.crash.SampleUncaughtExceptionHandler;
 import tinker.sample.android.reporter.SampleLoadReporter;
diff --git a/tinker-sample-android/build.gradle b/tinker-sample-android/build.gradle
index ed57cac0..10db9167 100644
--- a/tinker-sample-android/build.gradle
+++ b/tinker-sample-android/build.gradle
@@ -11,7 +11,14 @@ buildscript {
         } else {
             classpath 'com.android.tools.build:gradle:2.3.3'
         }
-        classpath "com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}"
+        classpath("com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}") {
+            changing = TINKER_VERSION?.endsWith("-SNAPSHOT")
+            exclude group: 'com.android.tools.build', module: 'gradle'
+        }
+    }
+    configurations.all {
+        it.resolutionStrategy.cacheDynamicVersionsFor(5, 'minutes')
+        it.resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
     }
 }
 
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index 2a7b1269..33bfcd8c 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -17,5 +17,8 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-TINKER_VERSION=1.9.8
-GRADLE_3=true
\ No newline at end of file
+TINKER_VERSION=1.9.9
+GRADLE_3=true
+
+#android.enableAapt2=false
+#tinker.aapt2.public=false
