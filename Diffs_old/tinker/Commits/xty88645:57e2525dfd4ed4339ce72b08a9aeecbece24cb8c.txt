diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index ef4123a5..e55ca463 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -189,11 +189,11 @@ ext {
     //you should bak the following files
     //old apk file to build patch apk
 //    tinkerOldApkPath=""
-    tinkerOldApkPath = "${bakPath}/resguard/app-release-1010-18-11-02.apk"
+    tinkerOldApkPath = "${bakPath}/app-debug-1011-19-08-52.apk"
     //proguard mapping file to build patch apk
     tinkerApplyMappingPath = "${bakPath}/"
     //resource R.txt to build patch apk, must input if there is resource changed
-    tinkerApplyResourcePath = "${bakPath}/resguard/app-release-1010-18-11-02-R.txt"
+    tinkerApplyResourcePath = "${bakPath}/app-debug-1011-19-08-52-R.txt"
 //    tinkerApplyResourcePath=""
 }
 
diff --git a/tinker-sample-android/app/src/main/AndroidManifest.xml b/tinker-sample-android/app/src/main/AndroidManifest.xml
index 9676eb94..5237d806 100644
--- a/tinker-sample-android/app/src/main/AndroidManifest.xml
+++ b/tinker-sample-android/app/src/main/AndroidManifest.xml
@@ -23,7 +23,7 @@
                 <category android:name="android.intent.category.LAUNCHER"/>
             </intent-filter>
         </activity>
-
+        <activity android:name="tinker.sample.PluginActivity"/>
     </application>
 
 </manifest>
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
index bc55dc62..c0f41b18 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
@@ -17,7 +17,9 @@
 package tinker.sample.android.app;
 
 import android.app.AlertDialog;
+import android.content.ComponentName;
 import android.content.Context;
+import android.content.Intent;
 import android.graphics.Typeface;
 import android.os.Bundle;
 import android.os.Environment;
@@ -96,6 +98,18 @@ public void onClick(View v) {
                 showInfo(MainActivity.this);
             }
         });
+
+        Button startPlugin = (Button) findViewById(R.id.jump);
+        startPlugin.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(MainActivity.this, TinkerTestActivity.class);
+                ComponentName componentName = intent.getComponent();
+                intent.setClassName(componentName.getPackageName(), "tinker.sample.PluginActivity");
+                intent.putExtra("real-activity", componentName.getClassName());
+                startActivity(intent);
+            }
+        });
     }
 
     public boolean showInfo(Context context) {
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
index bf550dbe..b4f74e82 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/SampleApplicationLike.java
@@ -31,6 +31,8 @@
 import com.tencent.tinker.loader.app.DefaultApplicationLike;
 import com.tencent.tinker.loader.shareutil.ShareConstants;
 
+import java.lang.reflect.Field;
+
 import tinker.sample.android.Log.MyLogImp;
 import tinker.sample.android.util.SampleApplicationContext;
 import tinker.sample.android.util.TinkerManager;
@@ -39,27 +41,27 @@
  * because you can not use any other class in your application, we need to
  * move your implement of Application to {@link ApplicationLifeCycle}
  * As Application, all its direct reference class should be in the main dex.
- *
+ * <p>
  * We use tinker-android-anno to make sure all your classes can be patched.
- *
+ * <p>
  * application: if it is start with '.', we will add SampleApplicationLifeCycle's package name
- *
+ * <p>
  * flags:
  * TINKER_ENABLE_ALL: support dex, lib and resource
  * TINKER_DEX_MASK: just support dex
  * TINKER_NATIVE_LIBRARY_MASK: just support lib
  * TINKER_RESOURCE_MASK: just support resource
- *
+ * <p>
  * loaderClass: define the tinker loader class, we can just use the default TinkerLoader
- *
+ * <p>
  * loadVerifyFlag: whether check files' md5 on the load time, defualt it is false.
- *
+ * <p>
  * Created by zhangshaowen on 16/3/17.
  */
 @SuppressWarnings("unused")
 @DefaultLifeCycle(application = "tinker.sample.android.app.SampleApplication",
-                  flags = ShareConstants.TINKER_ENABLE_ALL,
-                  loadVerifyFlag = false)
+        flags = ShareConstants.TINKER_ENABLE_ALL,
+        loadVerifyFlag = false)
 public class SampleApplicationLike extends DefaultApplicationLike {
     private static final String TAG = "Tinker.SampleApplicationLike";
 
@@ -81,9 +83,11 @@ public void onBaseContextAttached(Context base) {
         super.onBaseContextAttached(base);
         //you must install multiDex whatever tinker is installed!
         MultiDex.install(base);
-
         SampleApplicationContext.application = getApplication();
         SampleApplicationContext.context = getApplication();
+
+        initPlugin();
+
         TinkerManager.setTinkerApplicationLike(this);
         TinkerManager.initFastCrashProtect();
         //should set before tinker is installed
@@ -97,6 +101,22 @@ public void onBaseContextAttached(Context base) {
         TinkerManager.installTinker(this);
     }
 
+    private void initPlugin() {
+        Context baseContext = SampleApplicationContext.application.getBaseContext();
+        try {
+            Field mMainThread = baseContext.getClass().getDeclaredField("mMainThread");
+            mMainThread.setAccessible(true);
+            Object mainThreadObj = mMainThread.get(baseContext);
+            Field mInstrumentation = mainThreadObj.getClass().getDeclaredField("mInstrumentation");
+            mInstrumentation.setAccessible(true);
+            mInstrumentation.set(mainThreadObj, new TinkerInstrumentation());
+        } catch (NoSuchFieldException e) {
+            e.printStackTrace();
+        } catch (IllegalAccessException e) {
+            e.printStackTrace();
+        }
+    }
+
     @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
     public void registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks callback) {
         getApplication().registerActivityLifecycleCallbacks(callback);
diff --git a/tinker-sample-android/app/src/main/res/layout/activity_main.xml b/tinker-sample-android/app/src/main/res/layout/activity_main.xml
index e7d4180a..d330d2cb 100644
--- a/tinker-sample-android/app/src/main/res/layout/activity_main.xml
+++ b/tinker-sample-android/app/src/main/res/layout/activity_main.xml
@@ -57,4 +57,15 @@
         android:layout_alignParentStart="true"
         android:layout_below="@+id/killSelf"
         android:text="show info"/>
+
+
+    <Button
+        android:id="@+id/jump"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/killSelf"
+        android:text="start PluginActivity"/>
+
 </RelativeLayout>
diff --git a/tinker-sample-android/build.gradle b/tinker-sample-android/build.gradle
index 57c191be..c08cdf72 100644
--- a/tinker-sample-android/build.gradle
+++ b/tinker-sample-android/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.2.0'
+        classpath 'com.android.tools.build:gradle:2.2.1'
         classpath "com.tencent.tinker:tinker-patch-gradle-plugin:${TINKER_VERSION}"
         classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.1.11'
 
