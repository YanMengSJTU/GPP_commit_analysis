diff --git a/gradle.properties b/gradle.properties
index 2d41e243..7e5c68e7 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -16,5 +16,5 @@
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
-VERSION_NAME_PREFIX=1.8.1
+VERSION_NAME_PREFIX=1.9.0
 VERSION_NAME_SUFFIX=
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
index ed01852c..593ab980 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -7,3 +7,4 @@ include ':tinker-build:tinker-patch-lib'
 include ':tinker-build:tinker-patch-gradle-plugin'
 include ':third-party:aosp-dexutils'
 include ':third-party:bsdiff-util'
+include ':third-party:tinker-ziputils'
diff --git a/third-party/tinker-ziputils/.gitignore b/third-party/tinker-ziputils/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/third-party/tinker-ziputils/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/third-party/tinker-ziputils/NOTICE.txt b/third-party/tinker-ziputils/NOTICE.txt
new file mode 100644
index 00000000..a513af6c
--- /dev/null
+++ b/third-party/tinker-ziputils/NOTICE.txt
@@ -0,0 +1,190 @@
+   Original work Copyright (c) 2005-2008, The Android Open Source Project
+   Modified work Copyright (C) 2016 THL A29 Limited, a Tencent company.
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
diff --git a/third-party/tinker-ziputils/build.gradle b/third-party/tinker-ziputils/build.gradle
new file mode 100644
index 00000000..1844d317
--- /dev/null
+++ b/third-party/tinker-ziputils/build.gradle
@@ -0,0 +1,19 @@
+apply plugin: 'java'
+
+[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
+
+version rootProject.ext.VERSION_NAME
+group rootProject.ext.GROUP
+
+task buildTinkerSdk(type: Copy, dependsOn: [build]) {
+    group = "tinker"
+    from('build/libs') {
+        include '*.jar'
+        exclude '*javadoc.jar'
+        exclude '*-sources.jar'
+    }
+    into(rootProject.file("buildSdk/android"))
+}
+
+apply from: rootProject.file('gradle/java-artifacts.gradle')
+apply from: rootProject.file('gradle/gradle-mvn-push.gradle')
\ No newline at end of file
diff --git a/third-party/tinker-ziputils/gradle.properties b/third-party/tinker-ziputils/gradle.properties
new file mode 100644
index 00000000..d1004141
--- /dev/null
+++ b/third-party/tinker-ziputils/gradle.properties
@@ -0,0 +1,19 @@
+#
+# Tencent is pleased to support the open source community by making Tinker available.
+#
+# Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
+#
+# Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+# compliance with the License. You may obtain a copy of the License at
+#
+# https://opensource.org/licenses/BSD-3-Clause
+#
+# Unless required by applicable law or agreed to in writing, software distributed under the License is
+# distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+# either express or implied. See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+POM_ARTIFACT_ID=tinker-ziputils
+POM_NAME=Tinker Zip Utils
+POM_PACKAGING=jar
\ No newline at end of file
diff --git a/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Arrays.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Arrays.java
new file mode 100644
index 00000000..373c33a6
--- /dev/null
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Arrays.java
@@ -0,0 +1,30 @@
+/*
+ * Tencent is pleased to support the open source community by making Tinker available.
+ *
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
+ *
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.tencent.tinker.ziputils.ziputil;
+
+/**
+ * modify by zhangshaowen on 16/6/7.
+ */
+public class Arrays {
+    public static void checkOffsetAndCount(int arrayLength, int offset, int count) {
+        if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
+//            throw new ArrayIndexOutOfBoundsException(arrayLength, offset,
+//                count);
+            throw new ArrayIndexOutOfBoundsException(offset);
+        }
+    }
+}
diff --git a/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/BufferIterator.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/BufferIterator.java
new file mode 100644
index 00000000..d99291ab
--- /dev/null
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/BufferIterator.java
@@ -0,0 +1,35 @@
+/*
+ * Tencent is pleased to support the open source community by making Tinker available.
+ *
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
+ *
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.tencent.tinker.ziputils.ziputil;
+
+/**
+ * modify by zhangshaowen on 16/6/7.
+ */
+public abstract class BufferIterator {
+    /**
+     * Seeks to the absolute position {@code offset}, measured in bytes from the start.
+     */
+    public abstract void seek(int offset);
+    /**
+     * Skips forwards or backwards {@code byteCount} bytes from the current position.
+     */
+    public abstract void skip(int byteCount);
+
+    public abstract int readInt();
+
+    public abstract short readShort();
+}
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/HeapBufferIterator.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/HeapBufferIterator.java
similarity index 74%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/HeapBufferIterator.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/HeapBufferIterator.java
index d6591ce8..10ed4dd4 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/HeapBufferIterator.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/HeapBufferIterator.java
@@ -1,20 +1,20 @@
 /*
- * Copyright (C) 2010 The Android Open Source Project
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.nio.ByteOrder;
 
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Memory.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Memory.java
similarity index 83%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Memory.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Memory.java
index cf7b75dc..e09095d7 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Memory.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Memory.java
@@ -1,21 +1,20 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.nio.ByteOrder;
 
diff --git a/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/SizeOf.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/SizeOf.java
new file mode 100644
index 00000000..228cb97c
--- /dev/null
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/SizeOf.java
@@ -0,0 +1,31 @@
+/*
+ * Tencent is pleased to support the open source community by making Tinker available.
+ *
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
+ *
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.tencent.tinker.ziputils.ziputil;
+
+/**
+ * modify by zhangshaowen on 16/6/7.
+ */
+public final class SizeOf {
+    public static final int CHAR = 2;
+    public static final int DOUBLE = 8;
+    public static final int FLOAT = 4;
+    public static final int INT = 4;
+    public static final int LONG = 8;
+    public static final int SHORT = 2;
+    private SizeOf() {
+    }
+}
diff --git a/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/StandardCharsets.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/StandardCharsets.java
new file mode 100644
index 00000000..0bdc98e6
--- /dev/null
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/StandardCharsets.java
@@ -0,0 +1,29 @@
+/*
+ * Tencent is pleased to support the open source community by making Tinker available.
+ *
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
+ *
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.tencent.tinker.ziputils.ziputil;
+
+import java.nio.charset.Charset;
+
+/**
+ * modify by zhangshaowen on 16/6/7.
+ */
+public final class StandardCharsets {
+    public static final Charset UTF_8 = Charset.forName("UTF-8");
+
+    private StandardCharsets() {
+    }
+}
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Streams.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Streams.java
similarity index 91%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Streams.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Streams.java
index 4af128a4..38df1bc7 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Streams.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/Streams.java
@@ -1,20 +1,20 @@
 /*
- * Copyright (C) 2010 The Android Open Source Project
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
  *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.io.ByteArrayOutputStream;
 import java.io.EOFException;
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipEntry.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipEntry.java
similarity index 94%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipEntry.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipEntry.java
index 0e5696e8..8e275cf2 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipEntry.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipEntry.java
@@ -1,21 +1,20 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.io.IOException;
 import java.io.InputStream;
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipFile.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipFile.java
similarity index 96%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipFile.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipFile.java
index dbc8f48b..e81d5f88 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipFile.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipFile.java
@@ -1,21 +1,20 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.io.BufferedInputStream;
 import java.io.Closeable;
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipOutputStream.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipOutputStream.java
similarity index 96%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipOutputStream.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipOutputStream.java
index 62aabf47..02bc9a3f 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/TinkerZipOutputStream.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipOutputStream.java
@@ -1,21 +1,20 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 // import libcore.util.CountingOutputStream;
 // import libcore.util.EmptyArray;
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/resutil/ResUtil.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipUtil.java
similarity index 92%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/resutil/ResUtil.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipUtil.java
index 16c55853..24f61d28 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/resutil/ResUtil.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/TinkerZipUtil.java
@@ -14,11 +14,7 @@
  * limitations under the License.
  */
 
-package com.tencent.tinker.commons.resutil;
-
-import com.tencent.tinker.commons.ziputil.TinkerZipEntry;
-import com.tencent.tinker.commons.ziputil.TinkerZipFile;
-import com.tencent.tinker.commons.ziputil.TinkerZipOutputStream;
+package com.tencent.tinker.ziputils.ziputil;
 
 import java.io.BufferedInputStream;
 import java.io.File;
@@ -29,7 +25,7 @@
 /**
  * Created by zhangshaowen on 16/8/10.
  */
-public class ResUtil {
+public class TinkerZipUtil {
     private static final int BUFFER_SIZE = 16384;
 
     public static void extractTinkerEntry(TinkerZipFile apk, TinkerZipEntry zipEntry, TinkerZipOutputStream outputStream) throws IOException {
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/ZipConstants.java b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/ZipConstants.java
similarity index 51%
rename from tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/ZipConstants.java
rename to third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/ZipConstants.java
index 2bb0e394..ca1873a2 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/ZipConstants.java
+++ b/third-party/tinker-ziputils/src/main/java/com/tencent/tinker/ziputils/ziputil/ZipConstants.java
@@ -1,21 +1,20 @@
 /*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Tencent is pleased to support the open source community by making Tinker available.
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Licensed under the BSD 3-Clause License (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ * https://opensource.org/licenses/BSD-3-Clause
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is
+ * distributed on an "AS IS" basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package com.tencent.tinker.commons.ziputil;
+package com.tencent.tinker.ziputils.ziputil;
 
 /**
  * modify by zhangshaowen on 16/6/7.
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
index 52544cb6..df1c0867 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
@@ -22,10 +22,6 @@
 import android.os.SystemClock;
 
 import com.tencent.tinker.commons.dexpatcher.DexPatchApplier;
-import com.tencent.tinker.commons.resutil.ResUtil;
-import com.tencent.tinker.commons.ziputil.TinkerZipEntry;
-import com.tencent.tinker.commons.ziputil.TinkerZipFile;
-import com.tencent.tinker.commons.ziputil.TinkerZipOutputStream;
 import com.tencent.tinker.lib.tinker.Tinker;
 import com.tencent.tinker.lib.util.TinkerLog;
 import com.tencent.tinker.loader.TinkerDexOptimizer;
@@ -36,6 +32,10 @@
 import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;
 import com.tencent.tinker.loader.shareutil.ShareSecurityCheck;
 import com.tencent.tinker.loader.shareutil.ShareTinkerInternals;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipEntry;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipFile;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipOutputStream;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipUtil;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedOutputStream;
@@ -44,7 +44,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Vector;
@@ -176,10 +175,18 @@ private static boolean patchDexExtractViaDexDiff(Context context, String patchVe
 
         File dexFiles = new File(dir);
         File[] files = dexFiles.listFiles();
-        List<File> dexList = files != null ? Arrays.asList(files) : null;
+        List<File> legalFiles = new ArrayList<>();
+        // may have directory in android o
+        if (files != null) {
+            for (File file : files) {
+                if (file.isFile()) {
+                    legalFiles.add(file);
+                }
+            }
+        }
 
         final String optimizeDexDirectory = patchVersionDirectory + "/" + DEX_OPTIMIZE_PATH + "/";
-        return dexOptimizeDexFiles(context, dexList, optimizeDexDirectory, patchFile);
+        return dexOptimizeDexFiles(context, legalFiles, optimizeDexDirectory, patchFile);
 
     }
 
@@ -223,6 +230,12 @@ private static boolean checkClassNDexFiles(final String dexFilePath) {
             result = false;
         }
 
+        if (result) {
+            // delete classN dex if exist
+            for (File dexFile : classNDexInfo.values()) {
+                SharePatchFileUtil.safeDeleteFile(dexFile);
+            }
+        }
 
         return result;
     }
@@ -254,13 +267,13 @@ private static boolean mergeClassNDexFiles(final Context context, final File pat
                     TinkerZipEntry newDexZipEntry = new TinkerZipEntry(rawDexZipEntry, info.rawName);
                     InputStream inputStream = dexZipFile.getInputStream(rawDexZipEntry);
                     try {
-                        ResUtil.extractTinkerEntry(newDexZipEntry, inputStream, out);
+                        TinkerZipUtil.extractTinkerEntry(newDexZipEntry, inputStream, out);
                     } finally {
                         SharePatchFileUtil.closeQuietly(inputStream);
                     }
                 } else {
                     TinkerZipEntry dexZipEntry = new TinkerZipEntry(info.rawName);
-                    ResUtil.extractLargeModifyFile(dexZipEntry, dexFile, Long.parseLong(info.newDexCrC), out);
+                    TinkerZipUtil.extractLargeModifyFile(dexZipEntry, dexFile, Long.parseLong(info.newDexCrC), out);
                 }
 
             }
@@ -320,7 +333,7 @@ private static boolean dexOptimizeDexFiles(Context context, List<File> dexFiles,
 
             // try parallel dex optimizer
             TinkerDexOptimizer.optimizeAll(
-                dexFiles, optimizeDexDirectoryFile,
+                    dexFiles, optimizeDexDirectoryFile,
                 new TinkerDexOptimizer.ResultCallback() {
                     long startTime;
 
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ResDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ResDiffPatchInternal.java
index ce7a5081..5cc0683c 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ResDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/ResDiffPatchInternal.java
@@ -21,10 +21,10 @@
 import android.os.SystemClock;
 
 import com.tencent.tinker.bsdiff.BSPatch;
-import com.tencent.tinker.commons.resutil.ResUtil;
-import com.tencent.tinker.commons.ziputil.TinkerZipEntry;
-import com.tencent.tinker.commons.ziputil.TinkerZipFile;
-import com.tencent.tinker.commons.ziputil.TinkerZipOutputStream;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipUtil;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipEntry;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipFile;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipOutputStream;
 import com.tencent.tinker.lib.tinker.Tinker;
 import com.tencent.tinker.lib.util.TinkerLog;
 import com.tencent.tinker.loader.TinkerRuntimeException;
@@ -146,7 +146,7 @@ private static boolean extractResourceDiffInternals(Context context, String dir,
                             && !resPatchInfo.modRes.contains(name)
                             && !resPatchInfo.largeModRes.contains(name)
                             && !name.equals(ShareConstants.RES_MANIFEST)) {
-                            ResUtil.extractTinkerEntry(oldApk, zipEntry, out);
+                            TinkerZipUtil.extractTinkerEntry(oldApk, zipEntry, out);
                             totalEntryCount++;
                         }
                     }
@@ -159,7 +159,7 @@ private static boolean extractResourceDiffInternals(Context context, String dir,
                     manager.getPatchReporter().onPatchTypeExtractFail(patchFile, resOutput, ShareConstants.RES_MANIFEST, type);
                     return false;
                 }
-                ResUtil.extractTinkerEntry(oldApk, manifestZipEntry, out);
+                TinkerZipUtil.extractTinkerEntry(oldApk, manifestZipEntry, out);
                 totalEntryCount++;
 
                 for (String name : resPatchInfo.largeModRes) {
@@ -170,7 +170,7 @@ private static boolean extractResourceDiffInternals(Context context, String dir,
                         return false;
                     }
                     ShareResPatchInfo.LargeModeInfo largeModeInfo = resPatchInfo.largeModMap.get(name);
-                    ResUtil.extractLargeModifyFile(largeZipEntry, largeModeInfo.file, largeModeInfo.crc, out);
+                    TinkerZipUtil.extractLargeModifyFile(largeZipEntry, largeModeInfo.file, largeModeInfo.crc, out);
                     totalEntryCount++;
                 }
 
@@ -181,7 +181,7 @@ private static boolean extractResourceDiffInternals(Context context, String dir,
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, resOutput, name, type);
                         return false;
                     }
-                    ResUtil.extractTinkerEntry(newApk, addZipEntry, out);
+                    TinkerZipUtil.extractTinkerEntry(newApk, addZipEntry, out);
                     totalEntryCount++;
                 }
 
@@ -192,7 +192,7 @@ private static boolean extractResourceDiffInternals(Context context, String dir,
                         manager.getPatchReporter().onPatchTypeExtractFail(patchFile, resOutput, name, type);
                         return false;
                     }
-                    ResUtil.extractTinkerEntry(newApk, modZipEntry, out);
+                    TinkerZipUtil.extractTinkerEntry(newApk, modZipEntry, out);
                     totalEntryCount++;
                 }
                 // set comment back
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
index 4d9cdad3..6f6a3988 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexLoader.java
@@ -304,7 +304,7 @@ private static void deleteOutOfDateOATFile(String directory) {
         SharePatchFileUtil.deleteDir(optimizeDexDirectory);
         // delete android o
         if (ShareTinkerInternals.isAfterAndroidO()) {
-            String androidODexDirectory = directory + "/" + ShareConstants.ANDROID_O_DEX_OPTIMIZE_PATH + "/";
+            String androidODexDirectory = directory + "/" + DEX_PATH + "/" + ShareConstants.ANDROID_O_DEX_OPTIMIZE_PATH + "/";
             SharePatchFileUtil.deleteDir(androidODexDirectory);
         }
     }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java
index 7ae3f185..bd06f78b 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerDexOptimizer.java
@@ -19,6 +19,7 @@
 import android.os.Build;
 import android.util.Log;
 
+import com.tencent.tinker.loader.shareutil.ShareFileLockHelper;
 import com.tencent.tinker.loader.shareutil.SharePatchFileUtil;
 
 import java.io.File;
@@ -41,6 +42,8 @@
 public final class TinkerDexOptimizer {
     private static final String TAG = "Tinker.ParallelDex";
 
+    private static final String INTERPRET_LOCK_FILE_NAME = "interpret.lock";
+
     /**
      * Optimize (trigger dexopt or dex2oat) dexes.
      *
@@ -54,7 +57,7 @@ public static boolean optimizeAll(Collection<File> dexFiles, File optimizedDir,
     }
 
     public static boolean optimizeAll(Collection<File> dexFiles, File optimizedDir,
-                                                   boolean useInterpretMode, String targetISA, ResultCallback cb) {
+                                      boolean useInterpretMode, String targetISA, ResultCallback cb) {
         ArrayList<File> sortList = new ArrayList<>(dexFiles);
         // sort input dexFiles with its file length
         Collections.sort(sortList, new Comparator<File>() {
@@ -138,42 +141,56 @@ public boolean run() {
         }
 
         private void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {
-
+            // add process lock for interpret mode
             final File oatFile = new File(oatFilePath);
             if (!oatFile.exists()) {
                 oatFile.getParentFile().mkdirs();
             }
 
-            final List<String> commandAndParams = new ArrayList<>();
-            commandAndParams.add("dex2oat");
-            // for 7.1.1, duplicate class fix
-            if (Build.VERSION.SDK_INT >= 24) {
-                commandAndParams.add("--runtime-arg");
-                commandAndParams.add("-classpath");
-                commandAndParams.add("--runtime-arg");
-                commandAndParams.add("&");
-            }
-            commandAndParams.add("--dex-file=" + dexFilePath);
-            commandAndParams.add("--oat-file=" + oatFilePath);
-            commandAndParams.add("--instruction-set=" + targetISA);
-            if (Build.VERSION.SDK_INT > 25) {
-                commandAndParams.add("--compiler-filter=quicken");
-            } else {
-                commandAndParams.add("--compiler-filter=interpret-only");
-            }
-
-            final ProcessBuilder pb = new ProcessBuilder(commandAndParams);
-            pb.redirectErrorStream(true);
-            final Process dex2oatProcess = pb.start();
-            StreamConsumer.consumeInputStream(dex2oatProcess.getInputStream());
-            StreamConsumer.consumeInputStream(dex2oatProcess.getErrorStream());
+            File lockFile = new File(oatFile.getParentFile(), INTERPRET_LOCK_FILE_NAME);
+            ShareFileLockHelper fileLock = null;
             try {
-                final int ret = dex2oatProcess.waitFor();
-                if (ret != 0) {
-                    throw new IOException("dex2oat works unsuccessfully, exit code: " + ret);
+                fileLock = ShareFileLockHelper.getFileLock(lockFile);
+
+                final List<String> commandAndParams = new ArrayList<>();
+                commandAndParams.add("dex2oat");
+                // for 7.1.1, duplicate class fix
+                if (Build.VERSION.SDK_INT >= 24) {
+                    commandAndParams.add("--runtime-arg");
+                    commandAndParams.add("-classpath");
+                    commandAndParams.add("--runtime-arg");
+                    commandAndParams.add("&");
+                }
+                commandAndParams.add("--dex-file=" + dexFilePath);
+                commandAndParams.add("--oat-file=" + oatFilePath);
+                commandAndParams.add("--instruction-set=" + targetISA);
+                if (Build.VERSION.SDK_INT > 25) {
+                    commandAndParams.add("--compiler-filter=quicken");
+                } else {
+                    commandAndParams.add("--compiler-filter=interpret-only");
+                }
+
+                final ProcessBuilder pb = new ProcessBuilder(commandAndParams);
+                pb.redirectErrorStream(true);
+                final Process dex2oatProcess = pb.start();
+                StreamConsumer.consumeInputStream(dex2oatProcess.getInputStream());
+                StreamConsumer.consumeInputStream(dex2oatProcess.getErrorStream());
+                try {
+                    final int ret = dex2oatProcess.waitFor();
+                    if (ret != 0) {
+                        throw new IOException("dex2oat works unsuccessfully, exit code: " + ret);
+                    }
+                } catch (InterruptedException e) {
+                    throw new IOException("dex2oat is interrupted, msg: " + e.getMessage(), e);
+                }
+            } finally {
+                try {
+                    if (fileLock != null) {
+                        fileLock.close();
+                    }
+                } catch (IOException e) {
+                    Log.w(TAG, "release interpret Lock error", e);
                 }
-            } catch (InterruptedException e) {
-                throw new IOException("dex2oat is interrupted, msg: " + e.getMessage(), e);
             }
         }
     }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
index 707c2228..8e2b19de 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/TinkerLoader.java
@@ -219,9 +219,10 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten
             }
         }
         //only work for art platform oat，because of interpret, refuse 4.4 art oat
+        //android o use quicken default, we don't need to use interpret mode
         boolean isSystemOTA = ShareTinkerInternals.isVmArt()
             && ShareTinkerInternals.isSystemOTA(patchInfo.fingerPrint)
-            && Build.VERSION.SDK_INT >= 21;
+            && Build.VERSION.SDK_INT >= 21 && !ShareTinkerInternals.isAfterAndroidO();
 
         resultIntent.putExtra(ShareIntentUtil.INTENT_PATCH_SYSTEM_OTA, isSystemOTA);
 
@@ -239,6 +240,7 @@ private void tryLoadPatchFilesInternal(TinkerApplication app, Intent resultInten
             }
             if (oatModeChanged) {
                 // delete interpret odex
+                // for android o, directory change. Fortunately, we don't need to support android o interpret mode any more
                 Log.i(TAG, "tryLoadPatchFiles:oatModeChanged, try to delete interpret optimize files");
                 SharePatchFileUtil.deleteDir(patchVersionDirectory + "/" + ShareConstants.INTERPRET_DEX_OPTIMIZE_PATH);
             }
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
index 771c8917..fc3ab803 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/ShareConstants.java
@@ -22,7 +22,7 @@
  * Created by zhangshaowen on 16/3/24.
  */
 public class ShareConstants {
-    public static final String TINKER_VERSION = "1.8.1";
+    public static final String TINKER_VERSION = "1.9.0";
 
     public static final int BUFFER_SIZE         = 16384;
     public static final int MD5_LENGTH          = 32;
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
index 14cba2eb..d2d48a7d 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchFileUtil.java
@@ -168,9 +168,9 @@ public static final boolean safeDeleteFile(File file) {
             return true;
         }
 
-        Log.i(TAG, "safeDeleteFile, try to delete path: " + file.getPath());
-
         if (file.exists()) {
+            Log.i(TAG, "safeDeleteFile, try to delete path: " + file.getPath());
+
             boolean deleted = file.delete();
             if (!deleted) {
                 Log.e(TAG, "Failed to delete file, try to delete when exit. path: " + file.getPath());
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java
index be6dc661..98a056f4 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/shareutil/SharePatchInfo.java
@@ -31,13 +31,14 @@
  * Created by zhangshaowen on 16/3/16.
  */
 public class SharePatchInfo {
+    private static final String TAG = "Tinker.PatchInfo";
+
     public static final int    MAX_EXTRACT_ATTEMPTS = ShareConstants.MAX_EXTRACT_ATTEMPTS;
     public static final String OLD_VERSION          = ShareConstants.OLD_VERSION;
     public static final String NEW_VERSION          = ShareConstants.NEW_VERSION;
     public static final String FINGER_PRINT         = "print";
     public static final String OAT_DIR              = "dir";
     public static final String DEFAULT_DIR   = ShareConstants.DEFAULT_DEX_OPTIMIZE_PATH;
-    private static final String TAG = "Tinker.PatchInfo";
     public String oldVersion;
     public String newVersion;
     public String fingerPrint;
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Utils.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Utils.java
index 400bc9b0..93b1055a 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Utils.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/Utils.java
@@ -18,10 +18,10 @@
 
 import com.tencent.tinker.build.decoder.ResDiffDecoder;
 import com.tencent.tinker.build.patch.Configuration;
-import com.tencent.tinker.commons.resutil.ResUtil;
-import com.tencent.tinker.commons.ziputil.TinkerZipEntry;
-import com.tencent.tinker.commons.ziputil.TinkerZipFile;
-import com.tencent.tinker.commons.ziputil.TinkerZipOutputStream;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipUtil;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipEntry;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipFile;
+import com.tencent.tinker.ziputils.ziputil.TinkerZipOutputStream;
 
 import java.io.BufferedOutputStream;
 import java.io.BufferedReader;
@@ -141,7 +141,7 @@ public static String genResOutputFile(File output, File newZipFile, Configuratio
                         && !modifiedSet.contains(name)
                         && !largeModifiedSet.contains(name)
                         && !name.equals(TypedValue.RES_MANIFEST)) {
-                        ResUtil.extractTinkerEntry(oldApk, zipEntry, out);
+                        TinkerZipUtil.extractTinkerEntry(oldApk, zipEntry, out);
                     }
                 }
             }
@@ -152,7 +152,7 @@ public static String genResOutputFile(File output, File newZipFile, Configuratio
                     String.format("can't found resource file %s from old apk file %s", TypedValue.RES_MANIFEST, config.mOldApkFile.getAbsolutePath())
                 );
             }
-            ResUtil.extractTinkerEntry(oldApk, manifestZipEntry, out);
+            TinkerZipUtil.extractTinkerEntry(oldApk, manifestZipEntry, out);
 
             for (String name : largeModifiedSet) {
                 TinkerZipEntry largeZipEntry = oldApk.getEntry(name);
@@ -162,7 +162,7 @@ public static String genResOutputFile(File output, File newZipFile, Configuratio
                     );
                 }
                 ResDiffDecoder.LargeModeInfo largeModeInfo = largeModifiedMap.get(name);
-                ResUtil.extractLargeModifyFile(largeZipEntry, largeModeInfo.path, largeModeInfo.crc, out);
+                TinkerZipUtil.extractLargeModifyFile(largeZipEntry, largeModeInfo.path, largeModeInfo.crc, out);
             }
 
             for (String name : addedSet) {
@@ -172,7 +172,7 @@ public static String genResOutputFile(File output, File newZipFile, Configuratio
                         String.format("can't found add resource file %s from new apk file %s", name, config.mNewApkFile.getAbsolutePath())
                     );
                 }
-                ResUtil.extractTinkerEntry(newApk, addZipEntry, out);
+                TinkerZipUtil.extractTinkerEntry(newApk, addZipEntry, out);
             }
 
             for (String name : modifiedSet) {
@@ -182,7 +182,7 @@ public static String genResOutputFile(File output, File newZipFile, Configuratio
                         String.format("can't found add resource file %s from new apk file %s", name, config.mNewApkFile.getAbsolutePath())
                     );
                 }
-                ResUtil.extractTinkerEntry(newApk, modZipEntry, out);
+                TinkerZipUtil.extractTinkerEntry(newApk, modZipEntry, out);
             }
         } finally {
             out.close();
diff --git a/tinker-commons/build.gradle b/tinker-commons/build.gradle
index b7de68c6..9b52ca65 100644
--- a/tinker-commons/build.gradle
+++ b/tinker-commons/build.gradle
@@ -10,6 +10,7 @@ dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile project(':third-party:aosp-dexutils')
     compile project(':third-party:bsdiff-util')
+    compile project(':third-party:tinker-ziputils')
 }
 
 task buildTinkerSdk(type: Copy, dependsOn: [build]) {
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Arrays.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Arrays.java
deleted file mode 100644
index 8712e839..00000000
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/Arrays.java
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tencent.tinker.commons.ziputil;
-
-/**
- * modify by zhangshaowen on 16/6/7.
- */
-public class Arrays {
-    public static void checkOffsetAndCount(int arrayLength, int offset, int count) {
-        if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
-//            throw new ArrayIndexOutOfBoundsException(arrayLength, offset,
-//                count);
-            throw new ArrayIndexOutOfBoundsException(offset);
-        }
-    }
-}
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/BufferIterator.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/BufferIterator.java
deleted file mode 100644
index 7c175e54..00000000
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/BufferIterator.java
+++ /dev/null
@@ -1,35 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tencent.tinker.commons.ziputil;
-
-/**
- * modify by zhangshaowen on 16/6/7.
- */
-public abstract class BufferIterator {
-    /**
-     * Seeks to the absolute position {@code offset}, measured in bytes from the start.
-     */
-    public abstract void seek(int offset);
-    /**
-     * Skips forwards or backwards {@code byteCount} bytes from the current position.
-     */
-    public abstract void skip(int byteCount);
-
-    public abstract int readInt();
-
-    public abstract short readShort();
-}
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/SizeOf.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/SizeOf.java
deleted file mode 100644
index 03458938..00000000
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/SizeOf.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tencent.tinker.commons.ziputil;
-
-/**
- * modify by zhangshaowen on 16/6/7.
- */
-public final class SizeOf {
-    public static final int CHAR = 2;
-    public static final int DOUBLE = 8;
-    public static final int FLOAT = 4;
-    public static final int INT = 4;
-    public static final int LONG = 8;
-    public static final int SHORT = 2;
-    private SizeOf() {
-    }
-}
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/StandardCharsets.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/StandardCharsets.java
deleted file mode 100644
index caa1fbf4..00000000
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/ziputil/StandardCharsets.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Copyright (C) 2010 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.tencent.tinker.commons.ziputil;
-
-import java.nio.charset.Charset;
-
-/**
- * modify by zhangshaowen on 16/6/7.
- */
-public final class StandardCharsets {
-    public static final Charset UTF_8 = Charset.forName("UTF-8");
-
-    private StandardCharsets() {
-    }
-}
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index 6da2043c..96fab977 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -19,6 +19,7 @@ dependencies {
 //    compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
 //    compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
 //    compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
+//    compile("com.tencent.tinker:tinker-ziputils:${TINKER_VERSION}") { changing = true }
 //    compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
 
 }
diff --git a/tinker-sample-android/gradle.properties b/tinker-sample-android/gradle.properties
index a6a66d40..0a395cfe 100644
--- a/tinker-sample-android/gradle.properties
+++ b/tinker-sample-android/gradle.properties
@@ -17,4 +17,4 @@
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
 # org.gradle.parallel=true
 
-TINKER_VERSION=1.8.0
+TINKER_VERSION=1.9.0
