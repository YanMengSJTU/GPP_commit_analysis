diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
index 52651e30..0b3a61d4 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/listener/DefaultPatchListener.java
@@ -40,7 +40,7 @@ public DefaultPatchListener(Context context) {
     /**
      * when we receive a patch, what would we do?
      * you can overwrite it
-     *
+     * 收到服务器下发的补丁包后的回调
      * @param path
      * @return
      */
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
index fa72d59b..cc78c72d 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/DexDiffPatchInternal.java
@@ -492,7 +492,7 @@ private static boolean extractDexFile(ZipFile zipFile, ZipEntry entryFile, File
      * @param patchInfo
      *   Parsed patch info from package-meta.txt
      * @param patchedDexFile
-     *   Patched dex file, may be a jar.
+     *   Patched dex file, may be a jar.生成的全量dex文件
      *
      * <b>Notice: patchFileEntry and smallPatchInfoFile cannot both be null.</b>
      *
@@ -504,6 +504,7 @@ private static void patchDexFile(
         InputStream oldDexStream = null;
         InputStream patchFileStream = null;
         try {
+            //基准apk的输入流
             oldDexStream = new BufferedInputStream(baseApk.getInputStream(oldDexEntry));
             patchFileStream = (patchFileEntry != null ? new BufferedInputStream(patchPkg.getInputStream(patchFileEntry)) : null);
 
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
index 72257dac..5adfe171 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/patch/UpgradePatch.java
@@ -129,6 +129,7 @@ public boolean tryPatch(Context context, String tempPatchPath, PatchResult patch
         }
 
         //we use destPatchFile instead of patchFile, because patchFile may be deleted during the patch process
+        //将补丁包复制到destPatchFile中，用补丁包路径的md5前8位组合成patchVersionDirectory，尝试合成全量dex
         if (!DexDiffPatchInternal.tryRecoverDexFiles(manager, signatureCheck, context, patchVersionDirectory, destPatchFile)) {
             TinkerLog.e(TAG, "UpgradePatch tryPatch:new patch recover, try patch dex failed");
             return false;
diff --git a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
index db7d4526..80ce74d2 100644
--- a/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
+++ b/tinker-android/tinker-android-lib/src/main/java/com/tencent/tinker/lib/service/TinkerPatchService.java
@@ -36,6 +36,9 @@
 
 /**
  * Created by zhangshaowen on 16/3/14.
+ * 当app收到服务器下发的补丁后，会触发DefaultPatchListener.onPatchReceived事件，
+ * 调用TinkerPatchService.runPatchService启动patch进程进行补丁patch工作。
+ * UpgradePatch.tryPatch()中会首先检查补丁的合法性，签名，以及是否安装过补丁，检查通过后会尝试dex，so以及res文件的patch。
  */
 public class TinkerPatchService extends IntentService {
     private static final String TAG = "Tinker.TinkerPatchService";
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
index 6c8199fa..ec3de83d 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/SystemClassLoaderAdder.java
@@ -188,6 +188,7 @@ private static void install(ClassLoader loader, List<File> additionalClassPathEn
             Field pathListField = ShareReflectUtil.findField(loader, "pathList");
             Object dexPathList = pathListField.get(loader);
             ArrayList<IOException> suppressedExceptions = new ArrayList<IOException>();
+            //dexPathList是DexPathList的实例，利用反射调用dexPathList的方法注入Element[]，注入的Element[]包含了合成了补丁dex之后的全部dex文件.
             ShareReflectUtil.expandFieldArray(dexPathList, "dexElements", makeDexElements(dexPathList,
                 new ArrayList<File>(additionalClassPathEntries), optimizedDirectory,
                 suppressedExceptions));
diff --git a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
index bcdab701..695264a5 100644
--- a/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
+++ b/tinker-android/tinker-android-loader/src/main/java/com/tencent/tinker/loader/app/TinkerApplication.java
@@ -85,6 +85,8 @@ protected TinkerApplication(int tinkerFlags) {
     /**
      * @param delegateClassName The fully-qualified name of the {@link ApplicationLifeCycle} class
      *                          that will act as the delegate for application lifecycle callbacks.
+     * 应用启动时只会应用该类，处理业务的ApplicationLike是通过反射访问的，好处是应用启动时不需要创建ApplicationLike实例，patch完成后再通过反射创建实例，使ApplicationLike也可以被热更；
+     *                          ApplicationLike反而是一个代理类，TinkerApplication就是通过它来处理业务逻辑。
      */
     protected TinkerApplication(int tinkerFlags, String delegateClassName,
                                 String loaderClassName, boolean tinkerLoadVerifyFlag) {
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
index d099a697..c9c39bb6 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/ApkDecoder.java
@@ -110,6 +110,7 @@ public boolean patch(File oldFile, File newFile) throws Exception {
 
         unzipApkFiles(oldFile, newFile);
 
+        //遍历整个新apk文件夹，用Visitor处理每个文件
         Files.walkFileTree(mNewApkDir.toPath(), new ApkFilesVisitor(config, mNewApkDir.toPath(), mOldApkDir.toPath(), dexPatchDecoder, soPatchDecoder, resPatchDecoder));
 
         //get all duplicate resource file
@@ -155,9 +156,9 @@ public void onAllPatchesEnd() throws IOException, TinkerPatchException {
         @Override
         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
 
-            Path relativePath = newApkPath.relativize(file);
+            Path relativePath = newApkPath.relativize(file);//得到新文件夹中每个文件的相对路径
 
-            Path oldPath = oldApkPath.resolve(relativePath);
+            Path oldPath = oldApkPath.resolve(relativePath);//将新文件的相对路径和旧文件的根路径结合,得到该文件在旧文件夹中的绝对路径(如果存在)
 
             File oldFile = null;
             //is a new file?!
@@ -166,7 +167,7 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO
             }
             String patternKey = relativePath.toString().replace("\\", "/");
 
-            if (Utils.checkFileInPattern(config.mDexFilePattern, patternKey)) {
+            if (Utils.checkFileInPattern(config.mDexFilePattern, patternKey)) {//可以在gradle中自定义需要处理的dex文件
                 //also treat duplicate file as unchanged
                 if (Utils.checkFileInPattern(config.mResFilePattern, patternKey) && oldFile != null) {
                     resDuplicateFiles.add(oldFile);
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
index 77d4e980..bce9ee10 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/decoder/DexDiffDecoder.java
@@ -110,6 +110,11 @@ protected String getRelativeDexName(File oldDexFile, File newDexFile) {
         return oldDexFile != null ? getRelativePathStringToOldFile(oldDexFile) : getRelativePathStringToNewFile(newDexFile);
     }
 
+    /**
+     * 首先检测输入的dex文件中是否有不允许修改的类被修改了，如loader相关的类是不允许被修改的，这种情况下会抛出异常；
+     * 如果dex是新增的，直接将该dex拷贝到结果文件；
+     * 如果dex是修改的，收集增加和删除的class。oldAndNewDexFilePairList将新旧dex对应关系保存起来，用于后面的分析。
+     */
     @SuppressWarnings("NewApi")
     @Override
     public boolean patch(final File oldFile, final File newFile) throws IOException, TinkerPatchException {
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java
index e61122ff..feb29112 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Configuration.java
@@ -90,6 +90,7 @@
     public HashSet<Pattern> mSoFilePattern;
     /**
      * dex config
+     * 在Gradle中的dex.pattern中配置，用{@link #addToPatterns(String, HashSet)}方法加载.
      */
     public HashSet<Pattern> mDexFilePattern;
     public HashSet<String>  mDexLoaderPattern;
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
index 78648b06..32224576 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/patch/Runner.java
@@ -62,6 +62,8 @@ protected void tinkerPatch() {
             //gen patch
             ApkDecoder decoder = new ApkDecoder(config);
             decoder.onAllPatchesStart();
+//            会先对manifest文件进行检测，看其是否有更改，如果发现manifest的组件有新增，则抛出异常，因为目前Tinker暂不支持四大组件的新增。
+//            检测通过后解压apk文件，遍历新旧apk，交给ApkFilesVisitor进行处理。
             decoder.patch(config.mOldApkFile, config.mNewApkFile);
             decoder.onAllPatchesEnd();
 
diff --git a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java
index e87132ff..e518c2b0 100644
--- a/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java
+++ b/tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/util/ExcludedClassModifiedChecker.java
@@ -60,6 +60,9 @@ public ExcludedClassModifiedChecker(Configuration config) {
         this.dexCmptor = new DexClassesComparator(config.mDexLoaderPattern);
     }
 
+    /**
+     * 检查和Loader相关的类是不是在新apk的第一个dex中，是否和旧apk中保持一致。
+     */
     public void checkIfExcludedClassWasModifiedInNewDex(File oldFile, File newFile) throws IOException, TinkerPatchException {
         if (oldFile == null && newFile == null) {
             throw new TinkerPatchException("both oldFile and newFile are null.");
diff --git a/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java b/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
index 1d9f7fef..46be8c95 100644
--- a/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
+++ b/tinker-commons/src/main/java/com/tencent/tinker/commons/dexpatcher/DexPatchApplier.java
@@ -64,7 +64,13 @@
  * Created by tangyinsheng on 2016/6/30.
  */
 public class DexPatchApplier {
+    /**
+     * 基准apk包输入流构造的Dex实例
+     */
     private final Dex oldDex;
+    /**
+     * 补丁apk包输入流构造的Dex实例
+     */
     private final Dex patchedDex;
 
     private final DexPatchFile patchFile;
@@ -108,6 +114,7 @@ public DexPatchApplier(
     public void executeAndSaveTo(OutputStream out) throws IOException {
         // Before executing, we should check if this patch can be applied to
         // old dex we passed in.
+        // 首先old apk的签名和patchfile所携带的old apk签名是否一致，不一致则抛出异常
         byte[] oldDexSign = this.oldDex.computeSignature(false);
         if (oldDexSign == null) {
             throw new IOException("failed to compute old dex's signature.");
@@ -128,6 +135,7 @@ public void executeAndSaveTo(OutputStream out) throws IOException {
 
         // Firstly, set sections' offset after patched, sort according to their offset so that
         // the dex lib of aosp can calculate section size.
+        // patchedDex是最终合成的dex，首先设定各个区域的偏移量
         TableOfContents patchedToc = this.patchedDex.getTableOfContents();
 
         patchedToc.header.off = 0;
@@ -176,6 +184,7 @@ public void executeAndSaveTo(OutputStream out) throws IOException {
         patchedToc.computeSizesFromOffsets();
 
         // Secondly, run patch algorithms according to sections' dependencies.
+        // 对每个区域进行patch操作
         this.stringDataSectionPatchAlg = new StringDataSectionPatchAlgorithm(
                 patchFile, oldDex, patchedDex, oldToPatchedIndexMap
         );
@@ -248,6 +257,7 @@ public void executeAndSaveTo(OutputStream out) throws IOException {
         this.patchedDex.writeHashes();
 
         // Finally, write patched dex to file.
+        //合成全量dex文件，下次启动时在TinkerApplication#onBaseContextAttached如果检测到，将会直接加载
         this.patchedDex.writeTo(out);
     }
 
diff --git a/tinker-sample-android/app/build.gradle b/tinker-sample-android/app/build.gradle
index 269372f3..ba8971a4 100644
--- a/tinker-sample-android/app/build.gradle
+++ b/tinker-sample-android/app/build.gradle
@@ -1,26 +1,20 @@
 apply plugin: 'com.android.application'
 
-
-
 dependencies {
-    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile fileTree(include: ['*.jar'], dir: 'libs')
     testCompile 'junit:junit:4.12'
-    compile "com.android.support:appcompat-v7:23.1.1"
+    compile 'com.android.support:appcompat-v7:23.1.1'
     compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
     provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
-
-    compile "com.android.support:multidex:1.0.1"
-
+    compile 'com.android.support:multidex:1.0.1'
     //use to test multiDex
-//    compile group: 'com.google.guava', name: 'guava', version: '19.0'
-//    compile "org.scala-lang:scala-library:2.11.7"
-
+    //    compile group: 'com.google.guava', name: 'guava', version: '19.0'
+    //    compile "org.scala-lang:scala-library:2.11.7"
     //use for local maven test
-//    compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
-//    compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
-//    compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
-//    compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
-
+    //    compile("com.tencent.tinker:tinker-android-loader:${TINKER_VERSION}") { changing = true }
+    //    compile("com.tencent.tinker:aosp-dexutils:${TINKER_VERSION}") { changing = true }
+    //    compile("com.tencent.tinker:bsdiff-util:${TINKER_VERSION}") { changing = true }
+    //    compile("com.tencent.tinker:tinker-commons:${TINKER_VERSION}") { changing = true }
 }
 
 def gitSha() {
@@ -40,7 +34,6 @@ def javaVersion = JavaVersion.VERSION_1_7
 android {
     compileSdkVersion 23
     buildToolsVersion "23.0.2"
-
     compileOptions {
         sourceCompatibility javaVersion
         targetCompatibility javaVersion
@@ -49,7 +42,6 @@ android {
     dexOptions {
         jumboMode = true
     }
-
     signingConfigs {
         release {
             try {
@@ -66,7 +58,6 @@ android {
             storeFile file("./keystore/debug.keystore")
         }
     }
-
     defaultConfig {
         applicationId "tinker.sample.android"
         minSdkVersion 10
@@ -88,13 +79,11 @@ android {
          * so we can get the newly git version easily!
          */
         buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
-        buildConfigField "String", "PLATFORM",  "\"all\""
+        buildConfigField "String", "PLATFORM", "\"all\""
     }
-
 //    aaptOptions{
 //        cruncherEnabled false
 //    }
-
 //    //use to test flavors support
 //    productFlavors {
 //        flavor1 {
@@ -105,7 +94,6 @@ android {
 //            applicationId 'tinker.sample.android.flavor2'
 //        }
 //    }
-
     buildTypes {
         release {
             minifyEnabled true
@@ -123,6 +111,15 @@ android {
             jniLibs.srcDirs = ['libs']
         }
     }
+    productFlavors {
+        qihu {
+            minSdkVersion 10
+            applicationId 'tinker.sample.android'
+            targetSdkVersion 22
+            versionCode 1
+            versionName '1.0.0'
+        }
+    }
 }
 
 def bakPath = file("${buildDir}/bakApk/")
@@ -138,14 +135,14 @@ ext {
 
     //for normal build
     //old apk file to build patch apk
-    tinkerOldApkPath = "${bakPath}/app-debug-1018-17-32-47.apk"
+    tinkerOldApkPath = "${bakPath}/app-debug-0308-17-52-23.apk"
     //proguard mapping file to build patch apk
     tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
     //resource R.txt to build patch apk, must input if there is resource changed
     tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"
 
     //only use for build all flavor, if not, just ignore this field
-    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
+    tinkerBuildFlavorDirectory = "${bakPath}/app-0308-17-52-23"
 }
 
 
@@ -270,7 +267,7 @@ if (buildWithTinker()) {
              * Warning, it is very very important, loader classes can't change with patch.
              * thus, they will be removed from patch dexes.
              * you must put the following class into main dex.
-             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
+             * Simply, you should add your own application {@code tinker.sample.android.SampleApplicationLike}
              * own tinkerLoader, and the classes you use in them
              *
              */
diff --git a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
index 6bc8122b..d854681f 100644
--- a/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
+++ b/tinker-sample-android/app/src/main/java/tinker/sample/android/app/MainActivity.java
@@ -49,7 +49,7 @@ protected void onCreate(Bundle savedInstanceState) {
         Log.e(TAG, "i am on onCreate classloader:" + MainActivity.class.getClassLoader().toString());
         //test resource change
         Log.e(TAG, "i am on onCreate string:" + getResources().getString(R.string.test_resource));
-//        Log.e(TAG, "i am on patch onCreate");
+        Log.e(TAG, "i am on patch onCreate");
 
         Button loadPatchButton = (Button) findViewById(R.id.loadPatch);
 
