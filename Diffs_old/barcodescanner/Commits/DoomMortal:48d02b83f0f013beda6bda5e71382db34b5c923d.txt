diff --git a/CHANGELOG.md b/CHANGELOG.md
index ca9c637..e3c7f40 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,5 +1,29 @@
 # Change Log
 
+## [1.9.8] - August 18, 2017
+* One more attempt to fix Nexus 5x portrait scanning problems
+
+## [1.9.7] - August 2, 2017
+* Fix everything that was broken since 1.9.5 (Relevant issues: #336, #315, #339, #338)
+
+## [1.9.6] - August 1, 2017
+* Revert changes from 1.9.5 as it causes more harm than good (See #336)
+
+## [1.9.5] - July 28, 2017
+* Fix incorrectly rotated data on Nexus 5x devices. Thanks to @rramprasad for the pull request #315
+
+## [1.9.4] - July 15, 2017
+* Add ability to customize aspect ratio tolerance that is used in figuring out the optimal camera preview size. This is just a temporary fix for #249,#287,#293
+
+## [1.9.3] - May 27, 2017
+* Add ability to customize view finder with custom attributes. See #285 for more info. Thanks to @albinpoignot for the pull request
+
+## [1.9.2] - May 13, 2017
+* Add support for AZTEC codes in ZXing: #299, #288.
+
+## [1.9.1] - April 8, 2017
+* Add ability to scan inverted/negative codes with ZXing. Thanks to @manijshrestha for this pull request #265
+
 ## [1.9] - July 25, 2016
 * Scale camera preview when the view size isn't full screen. Thanks to @xolan for this pull request PR #219
 * Fix inverted camera in devices with differently oriented back and forward facing cameras. Thanks to @thadcodes for PR #191
diff --git a/README.md b/README.md
index 8305713..a201eab 100644
--- a/README.md
+++ b/README.md
@@ -25,7 +25,7 @@ Installation
 
 Add the following dependency to your build.gradle file.
 
-`compile 'me.dm7.barcodescanner:zxing:1.9'`
+`compile 'me.dm7.barcodescanner:zxing:1.9.8'`
 
 Simple Usage
 ------------
@@ -75,12 +75,12 @@ public class SimpleScannerActivity extends Activity implements ZXingScannerView.
 
 ```
 
-Please take a look at the [zxing-sample] (https://github.com/dm77/barcodescanner/tree/master/zxing-sample) project for a full working example.
+Please take a look at the [zxing-sample](https://github.com/dm77/barcodescanner/tree/master/zxing-sample) project for a full working example.
 
 Advanced Usage
 --------------
 
-Take a look at the [ScannerActivity.java] (https://github.com/dm77/barcodescanner/blob/master/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScannerActivity.java) or [ScannerFragment.java] (https://github.com/dm77/barcodescanner/blob/master/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScannerFragment.java) classes to get an idea on advanced usage.
+Take a look at the [FullScannerActivity.java](https://github.com/dm77/barcodescanner/blob/master/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerActivity.java) or [FullScannerFragment.java](https://github.com/dm77/barcodescanner/blob/master/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerFragment.java) classes to get an idea on advanced usage.
 
 Interesting methods on the ZXingScannerView include:
 
@@ -100,6 +100,17 @@ void startCamera(int cameraId);
 
 Specify front-facing or rear-facing cameras by using the `void startCamera(int cameraId);` method.
 
+
+For HUAWEI mobile phone like P9, P10, when scanning using the default settings, it won't work due to the
+"preview size",  please adjust the parameter as below:
+
+```java
+mScannerView = (ZXingScannerView) findViewById(R.id.zx_view);
+
+// this paramter will make your HUAWEI phone works great!
+mScannerView.setAspectTolerance(0.5f);
+```
+
 Supported Formats:
 
 ```java
@@ -126,7 +137,7 @@ Installation
 
 Add the following dependency to your build.gradle file.
 
-`compile 'me.dm7.barcodescanner:zbar:1.9'`
+`compile 'me.dm7.barcodescanner:zbar:1.9.8'`
 
 Simple Usage
 ------------
@@ -176,13 +187,13 @@ public class SimpleScannerActivity extends Activity implements ZBarScannerView.R
 
 ```
 
-Please take a look at the [zbar/sample] (https://github.com/dm77/barcodescanner/tree/master/zbar/sample)  project for a full working example.
+Please take a look at the [zbar-sample](https://github.com/dm77/barcodescanner/tree/master/zbar-sample)  project for a full working example.
 
 Advanced Usage
 --------------
 
 
-Take a look at the [ScannerActivity.java] (https://github.com/dm77/barcodescanner/blob/master/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerActivity.java) or [ScannerFragment.java] (https://github.com/dm77/barcodescanner/blob/master/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerFragment.java) classes to get an idea on advanced usage.
+Take a look at the [FullScannerActivity.java](https://github.com/dm77/barcodescanner/blob/master/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/FullScannerActivity.java) or [FullScannerFragment.java](https://github.com/dm77/barcodescanner/blob/master/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/FullScannerFragment.java) classes to get an idea on advanced usage.
 
 Interesting methods on the ZBarScannerView include:
 
@@ -215,7 +226,7 @@ BarcodeFormat.DATABAR_EXP
 BarcodeFormat.CODABAR
 BarcodeFormat.CODE39
 BarcodeFormat.PDF417
-BarcodeFormat.QRCODE
+BarcodeFormat.QR_CODE
 BarcodeFormat.CODE93
 BarcodeFormat.CODE128
 ```
diff --git a/build.gradle b/build.gradle
index 33cd9fe..31235da 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,16 +1,19 @@
+apply from: 'dependencies.gradle'
+
 buildscript {
     repositories {
         mavenCentral()
+        jcenter()
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.3.3'
     }
 }
 
 allprojects {
     group = 'me.dm7.barcodescanner'
-    version = '1.9'
+    version = '1.9.8'
 
     repositories {
         mavenCentral()
@@ -20,7 +23,6 @@ allprojects {
     }
 
     ext {
-        supportLibraryDependency = 'com.android.support:support-v4:23.2.1'
         isLibrary = false
     }
 }
@@ -30,8 +32,8 @@ subprojects {
         ext.pluginContainer = project.getPlugins()
         if(ext.pluginContainer.hasPlugin("com.android.application") || ext.pluginContainer.hasPlugin("com.android.library")) {
             android {
-                compileSdkVersion 23
-                buildToolsVersion '23.0.3'
+                compileSdkVersion versions.compile_sdk
+                buildToolsVersion versions.build_tools
 
                 android {
                     lintOptions {
@@ -40,10 +42,10 @@ subprojects {
                 }
 
                 defaultConfig {
-                    minSdkVersion 9
-                    targetSdkVersion 23
-                    versionCode 184
-                    versionName "1.8.4"
+                    minSdkVersion versions.min_sdk
+                    targetSdkVersion versions.target_sdk
+                    versionCode 198
+                    versionName "1.9.8"
                 }
             }
         }
@@ -53,7 +55,7 @@ subprojects {
                 apply plugin: 'signing'
 
                 signing {
-                    required { has("release") && gradle.taskGraph.hasTask("uploadArchives") }
+                    required { gradle.taskGraph.hasTask("uploadArchives") }
                     sign configurations.archives
                 }
 
@@ -110,5 +112,5 @@ subprojects {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.14'
+    gradleVersion = '3.4.1'
 }
diff --git a/core/build.gradle b/core/build.gradle
index 968a37f..cc4dabe 100644
--- a/core/build.gradle
+++ b/core/build.gradle
@@ -9,5 +9,5 @@ ext {
 }
 
 dependencies {
-    compile supportLibraryDependency
+    compile libraries.support_v4
 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 0b5733f..42863e1 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -1,17 +1,21 @@
 package me.dm7.barcodescanner.core;
 
 import android.content.Context;
+import android.content.res.Configuration;
 import android.content.res.TypedArray;
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.hardware.Camera;
+import android.support.annotation.ColorInt;
 import android.util.AttributeSet;
+import android.util.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
 public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+
     private CameraWrapper mCameraWrapper;
     private CameraPreview mPreview;
     private IViewFinder mViewFinderView;
@@ -21,12 +25,27 @@
     private boolean mAutofocusState = true;
     private boolean mShouldScaleToFill = true;
 
+    private boolean mIsLaserEnabled = true;
+    @ColorInt private int mLaserColor = getResources().getColor(R.color.viewfinder_laser);
+    @ColorInt private int mBorderColor = getResources().getColor(R.color.viewfinder_border);
+    private int mMaskColor = getResources().getColor(R.color.viewfinder_mask);
+    private int mBorderWidth = getResources().getInteger(R.integer.viewfinder_border_width);
+    private int mBorderLength = getResources().getInteger(R.integer.viewfinder_border_length);
+    private boolean mRoundedCorner = false;
+    private int mCornerRadius = 0;
+    private boolean mSquaredFinder = false;
+    private float mBorderAlpha = 1.0f;
+    private int mViewFinderOffset = 0;
+    private float mAspectTolerance = 0.1f;
+
     public BarcodeScannerView(Context context) {
         super(context);
+        init();
     }
 
     public BarcodeScannerView(Context context, AttributeSet attributeSet) {
         super(context, attributeSet);
+
         TypedArray a = context.getTheme().obtainStyledAttributes(
                 attributeSet,
                 R.styleable.BarcodeScannerView,
@@ -34,15 +53,34 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
 
         try {
             setShouldScaleToFill(a.getBoolean(R.styleable.BarcodeScannerView_shouldScaleToFill, true));
+            mIsLaserEnabled = a.getBoolean(R.styleable.BarcodeScannerView_laserEnabled, mIsLaserEnabled);
+            mLaserColor = a.getColor(R.styleable.BarcodeScannerView_laserColor, mLaserColor);
+            mBorderColor = a.getColor(R.styleable.BarcodeScannerView_borderColor, mBorderColor);
+            mMaskColor = a.getColor(R.styleable.BarcodeScannerView_maskColor, mMaskColor);
+            mBorderWidth = a.getDimensionPixelSize(R.styleable.BarcodeScannerView_borderWidth, mBorderWidth);
+            mBorderLength = a.getDimensionPixelSize(R.styleable.BarcodeScannerView_borderLength, mBorderLength);
+
+            mRoundedCorner = a.getBoolean(R.styleable.BarcodeScannerView_roundedCorner, mRoundedCorner);
+            mCornerRadius = a.getDimensionPixelSize(R.styleable.BarcodeScannerView_cornerRadius, mCornerRadius);
+            mSquaredFinder = a.getBoolean(R.styleable.BarcodeScannerView_squaredFinder, mSquaredFinder);
+            mBorderAlpha = a.getFloat(R.styleable.BarcodeScannerView_borderAlpha, mBorderAlpha);
+            mViewFinderOffset = a.getDimensionPixelSize(R.styleable.BarcodeScannerView_finderOffset, mViewFinderOffset);
         } finally {
             a.recycle();
         }
+
+        init();
+    }
+
+    private void init() {
+        mViewFinderView = createViewFinderView(getContext());
     }
 
     public final void setupLayout(CameraWrapper cameraWrapper) {
         removeAllViews();
 
         mPreview = new CameraPreview(getContext(), cameraWrapper, this);
+        mPreview.setAspectTolerance(mAspectTolerance);
         mPreview.setShouldScaleToFill(mShouldScaleToFill);
         if (!mShouldScaleToFill) {
             RelativeLayout relativeLayout = new RelativeLayout(getContext());
@@ -54,7 +92,6 @@ public final void setupLayout(CameraWrapper cameraWrapper) {
             addView(mPreview);
         }
 
-        mViewFinderView = createViewFinderView(getContext());
         if (mViewFinderView instanceof View) {
             addView((View) mViewFinderView);
         } else {
@@ -71,7 +108,70 @@ public final void setupLayout(CameraWrapper cameraWrapper) {
      * @return {@link android.view.View} that implements {@link ViewFinderView}
      */
     protected IViewFinder createViewFinderView(Context context) {
-        return new ViewFinderView(context);
+        ViewFinderView viewFinderView = new ViewFinderView(context);
+        viewFinderView.setBorderColor(mBorderColor);
+        viewFinderView.setLaserColor(mLaserColor);
+        viewFinderView.setLaserEnabled(mIsLaserEnabled);
+        viewFinderView.setBorderStrokeWidth(mBorderWidth);
+        viewFinderView.setBorderLineLength(mBorderLength);
+        viewFinderView.setMaskColor(mMaskColor);
+
+        viewFinderView.setBorderCornerRounded(mRoundedCorner);
+        viewFinderView.setBorderCornerRadius(mCornerRadius);
+        viewFinderView.setSquareViewFinder(mSquaredFinder);
+        viewFinderView.setViewFinderOffset(mViewFinderOffset);
+        return viewFinderView;
+    }
+
+    public void setLaserColor(int laserColor) {
+        mLaserColor = laserColor;
+        mViewFinderView.setLaserColor(mLaserColor);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setMaskColor(int maskColor) {
+        mMaskColor = maskColor;
+        mViewFinderView.setMaskColor(mMaskColor);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setBorderColor(int borderColor) {
+        mBorderColor = borderColor;
+        mViewFinderView.setBorderColor(mBorderColor);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setBorderStrokeWidth(int borderStrokeWidth) {
+        mBorderWidth = borderStrokeWidth;
+        mViewFinderView.setBorderStrokeWidth(mBorderWidth);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setBorderLineLength(int borderLineLength) {
+        mBorderLength = borderLineLength;
+        mViewFinderView.setBorderLineLength(mBorderLength);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setLaserEnabled(boolean isLaserEnabled) {
+        mIsLaserEnabled = isLaserEnabled;
+        mViewFinderView.setLaserEnabled(mIsLaserEnabled);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setIsBorderCornerRounded(boolean isBorderCornerRounded) {
+        mRoundedCorner = isBorderCornerRounded;
+        mViewFinderView.setBorderCornerRounded(mRoundedCorner);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setBorderCornerRadius(int borderCornerRadius) {
+        mCornerRadius = borderCornerRadius;
+        mViewFinderView.setBorderCornerRadius(mCornerRadius);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setSquareViewFinder(boolean isSquareViewFinder) {
+        mSquaredFinder = isSquareViewFinder;
+        mViewFinderView.setSquareViewFinder(mSquaredFinder);
+        mViewFinderView.setupViewFinder();
+    }
+    public void setBorderAlpha(float borderAlpha) {
+        mBorderAlpha = borderAlpha;
+        mViewFinderView.setBorderAlpha(mBorderAlpha);
+        mViewFinderView.setupViewFinder();
     }
 
     public void startCamera(int cameraId) {
@@ -202,4 +302,39 @@ public void setAutoFocus(boolean state) {
     public void setShouldScaleToFill(boolean shouldScaleToFill) {
         mShouldScaleToFill = shouldScaleToFill;
     }
+
+    public void setAspectTolerance(float aspectTolerance) {
+        mAspectTolerance = aspectTolerance;
+    }
+
+    public byte[] getRotatedData(byte[] data, Camera camera) {
+        Camera.Parameters parameters = camera.getParameters();
+        Camera.Size size = parameters.getPreviewSize();
+        int width = size.width;
+        int height = size.height;
+
+        int rotationCount = getRotationCount();
+
+        if(rotationCount == 1 || rotationCount == 3) {
+            for (int i = 0; i < rotationCount; i++) {
+                byte[] rotatedData = new byte[data.length];
+                for (int y = 0; y < height; y++) {
+                    for (int x = 0; x < width; x++)
+                        rotatedData[x * height + height - y - 1] = data[x + y * width];
+                }
+                data = rotatedData;
+                int tmp = width;
+                width = height;
+                height = tmp;
+            }
+        }
+
+        return data;
+    }
+
+    public int getRotationCount() {
+        int displayOrientation = mPreview.getDisplayOrientation();
+        return displayOrientation / 90;
+    }
 }
+
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
index a123733..b066e25 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
@@ -27,6 +27,7 @@
     private boolean mSurfaceCreated = false;
     private boolean mShouldScaleToFill = true;
     private Camera.PreviewCallback mPreviewCallback;
+    private float mAspectTolerance = 0.1f;
 
     public CameraPreview(Context context, CameraWrapper cameraWrapper, Camera.PreviewCallback previewCallback) {
         super(context);
@@ -54,6 +55,10 @@ public void setShouldScaleToFill(boolean scaleToFill) {
         mShouldScaleToFill = scaleToFill;
     }
 
+    public void setAspectTolerance(float aspectTolerance) {
+        mAspectTolerance = aspectTolerance;
+    }
+
     @Override
     public void surfaceCreated(SurfaceHolder surfaceHolder) {
         mSurfaceCreated = true;
@@ -235,7 +240,6 @@ public int getDisplayOrientation() {
             w = portraitWidth;
         }
 
-        final double ASPECT_TOLERANCE = 0.1;
         double targetRatio = (double) w / h;
         if (sizes == null) return null;
 
@@ -247,7 +251,7 @@ public int getDisplayOrientation() {
         // Try to find an size match aspect ratio and size
         for (Camera.Size size : sizes) {
             double ratio = (double) size.width / size.height;
-            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
+            if (Math.abs(ratio - targetRatio) > mAspectTolerance) continue;
             if (Math.abs(size.height - targetHeight) < minDiff) {
                 optimalSize = size;
                 minDiff = Math.abs(size.height - targetHeight);
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
index 78c3ee4..a6caaa4 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
@@ -3,6 +3,19 @@
 import android.graphics.Rect;
 
 public interface IViewFinder {
+
+    void setLaserColor(int laserColor);
+    void setMaskColor(int maskColor);
+    void setBorderColor(int borderColor);
+    void setBorderStrokeWidth(int borderStrokeWidth);
+    void setBorderLineLength(int borderLineLength);
+    void setLaserEnabled(boolean isLaserEnabled);
+
+    void setBorderCornerRounded(boolean isBorderCornersRounded);
+    void setBorderAlpha(float alpha);
+    void setBorderCornerRadius(int borderCornersRadius);
+    void setViewFinderOffset(int offset);
+    void setSquareViewFinder(boolean isSquareViewFinder);
     /**
      * Method that executes when Camera preview is starting.
      * It is recommended to update framing rect here and invalidate view after that. <br/>
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index deb85b1..307a8a4 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -3,7 +3,9 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Canvas;
+import android.graphics.CornerPathEffect;
 import android.graphics.Paint;
+import android.graphics.Path;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.util.AttributeSet;
@@ -21,7 +23,7 @@
     private static final float LANDSCAPE_WIDTH_HEIGHT_RATIO = 1.4f;
     private static final int MIN_DIMENSION_DIFF = 50;
 
-    private static final float SQUARE_DIMENSION_RATIO = 5f/8;
+    private static final float DEFAULT_SQUARE_DIMENSION_RATIO = 5f / 8;
 
     private static final int[] SCANNER_ALPHA = {0, 64, 128, 192, 255, 192, 128, 64};
     private int scannerAlpha;
@@ -39,14 +41,17 @@
     protected Paint mBorderPaint;
     protected int mBorderLineLength;
     protected boolean mSquareViewFinder;
+    private boolean mIsLaserEnabled;
+    private float mBordersAlpha;
+    private int mViewFinderOffset = 0;
 
     public ViewFinderView(Context context) {
         super(context);
         init();
     }
 
-    public ViewFinderView(Context context, AttributeSet attrs) {
-        super(context, attrs);
+    public ViewFinderView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
         init();
     }
 
@@ -65,27 +70,67 @@ private void init() {
         mBorderPaint.setColor(mDefaultBorderColor);
         mBorderPaint.setStyle(Paint.Style.STROKE);
         mBorderPaint.setStrokeWidth(mDefaultBorderStrokeWidth);
+        mBorderPaint.setAntiAlias(true);
 
         mBorderLineLength = mDefaultBorderLineLength;
     }
 
+    @Override
     public void setLaserColor(int laserColor) {
         mLaserPaint.setColor(laserColor);
     }
+
+    @Override
     public void setMaskColor(int maskColor) {
         mFinderMaskPaint.setColor(maskColor);
     }
+
+    @Override
     public void setBorderColor(int borderColor) {
         mBorderPaint.setColor(borderColor);
     }
+
+    @Override
     public void setBorderStrokeWidth(int borderStrokeWidth) {
         mBorderPaint.setStrokeWidth(borderStrokeWidth);
     }
+
+    @Override
     public void setBorderLineLength(int borderLineLength) {
         mBorderLineLength = borderLineLength;
     }
 
+    @Override
+    public void setLaserEnabled(boolean isLaserEnabled) { mIsLaserEnabled = isLaserEnabled; }
+
+    @Override
+    public void setBorderCornerRounded(boolean isBorderCornersRounded) {
+        if (isBorderCornersRounded) {
+            mBorderPaint.setStrokeJoin(Paint.Join.ROUND);
+        } else {
+            mBorderPaint.setStrokeJoin(Paint.Join.BEVEL);
+        }
+    }
+
+    @Override
+    public void setBorderAlpha(float alpha) {
+        int colorAlpha = (int) (255 * alpha);
+        mBordersAlpha = alpha;
+        mBorderPaint.setAlpha(colorAlpha);
+    }
+
+    @Override
+    public void setBorderCornerRadius(int borderCornersRadius) {
+        mBorderPaint.setPathEffect(new CornerPathEffect(borderCornersRadius));
+    }
+
+    @Override
+    public void setViewFinderOffset(int offset) {
+        mViewFinderOffset = offset;
+    }
+
     // TODO: Need a better way to configure this. Revisit when working on 2.0
+    @Override
     public void setSquareViewFinder(boolean set) {
         mSquareViewFinder = set;
     }
@@ -107,7 +152,10 @@ public void onDraw(Canvas canvas) {
 
         drawViewFinderMask(canvas);
         drawViewFinderBorder(canvas);
-        drawLaser(canvas);
+
+        if (mIsLaserEnabled) {
+            drawLaser(canvas);
+        }
     }
 
     public void drawViewFinderMask(Canvas canvas) {
@@ -123,18 +171,31 @@ public void drawViewFinderMask(Canvas canvas) {
 
     public void drawViewFinderBorder(Canvas canvas) {
         Rect framingRect = getFramingRect();
-        
-        canvas.drawLine(framingRect.left - 1, framingRect.top - 1, framingRect.left - 1, framingRect.top - 1 + mBorderLineLength, mBorderPaint);
-        canvas.drawLine(framingRect.left - 1, framingRect.top - 1, framingRect.left - 1 + mBorderLineLength, framingRect.top - 1, mBorderPaint);
-
-        canvas.drawLine(framingRect.left - 1, framingRect.bottom + 1, framingRect.left - 1, framingRect.bottom + 1 - mBorderLineLength, mBorderPaint);
-        canvas.drawLine(framingRect.left - 1, framingRect.bottom + 1, framingRect.left - 1 + mBorderLineLength, framingRect.bottom + 1, mBorderPaint);
 
-        canvas.drawLine(framingRect.right + 1, framingRect.top - 1, framingRect.right + 1, framingRect.top - 1 + mBorderLineLength, mBorderPaint);
-        canvas.drawLine(framingRect.right + 1, framingRect.top - 1, framingRect.right + 1 - mBorderLineLength, framingRect.top - 1, mBorderPaint);
-
-        canvas.drawLine(framingRect.right + 1, framingRect.bottom + 1, framingRect.right + 1, framingRect.bottom + 1 - mBorderLineLength, mBorderPaint);
-        canvas.drawLine(framingRect.right + 1, framingRect.bottom + 1, framingRect.right + 1 - mBorderLineLength, framingRect.bottom + 1, mBorderPaint);
+        // Top-left corner
+        Path path = new Path();
+        path.moveTo(framingRect.left, framingRect.top + mBorderLineLength);
+        path.lineTo(framingRect.left, framingRect.top);
+        path.lineTo(framingRect.left + mBorderLineLength, framingRect.top);
+        canvas.drawPath(path, mBorderPaint);
+
+        // Top-right corner
+        path.moveTo(framingRect.right, framingRect.top + mBorderLineLength);
+        path.lineTo(framingRect.right, framingRect.top);
+        path.lineTo(framingRect.right - mBorderLineLength, framingRect.top);
+        canvas.drawPath(path, mBorderPaint);
+
+        // Bottom-right corner
+        path.moveTo(framingRect.right, framingRect.bottom - mBorderLineLength);
+        path.lineTo(framingRect.right, framingRect.bottom);
+        path.lineTo(framingRect.right - mBorderLineLength, framingRect.bottom);
+        canvas.drawPath(path, mBorderPaint);
+
+        // Bottom-left corner
+        path.moveTo(framingRect.left, framingRect.bottom - mBorderLineLength);
+        path.lineTo(framingRect.left, framingRect.bottom);
+        path.lineTo(framingRect.left + mBorderLineLength, framingRect.bottom);
+        canvas.drawPath(path, mBorderPaint);
     }
 
     public void drawLaser(Canvas canvas) {
@@ -166,10 +227,10 @@ public synchronized void updateFramingRect() {
 
         if(mSquareViewFinder) {
             if(orientation != Configuration.ORIENTATION_PORTRAIT) {
-                height = (int) (getHeight() * SQUARE_DIMENSION_RATIO);
+                height = (int) (getHeight() * DEFAULT_SQUARE_DIMENSION_RATIO);
                 width = height;
             } else {
-                width = (int) (getWidth() * SQUARE_DIMENSION_RATIO);
+                width = (int) (getWidth() * DEFAULT_SQUARE_DIMENSION_RATIO);
                 height = width;
             }
         } else {
@@ -192,6 +253,7 @@ public synchronized void updateFramingRect() {
 
         int leftOffset = (viewResolution.x - width) / 2;
         int topOffset = (viewResolution.y - height) / 2;
-        mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
+        mFramingRect = new Rect(leftOffset + mViewFinderOffset, topOffset + mViewFinderOffset, leftOffset + width - mViewFinderOffset, topOffset + height - mViewFinderOffset);
     }
 }
+
diff --git a/core/src/main/res/values/attrs.xml b/core/src/main/res/values/attrs.xml
index d762e92..8e7485e 100644
--- a/core/src/main/res/values/attrs.xml
+++ b/core/src/main/res/values/attrs.xml
@@ -2,5 +2,16 @@
 <resources>
     <declare-styleable name="BarcodeScannerView">
         <attr name="shouldScaleToFill" format="boolean" />
+        <attr name="laserEnabled" format="boolean" />
+        <attr name="laserColor" format="color" />
+        <attr name="borderColor" format="color" />
+        <attr name="maskColor" format="color" />
+        <attr name="borderWidth" format="dimension" />
+        <attr name="borderLength" format="dimension" />
+        <attr name="roundedCorner" format="boolean" />
+        <attr name="cornerRadius" format="dimension" />
+        <attr name="squaredFinder" format="boolean" />
+        <attr name="borderAlpha" format="float" />
+        <attr name="finderOffset" format="dimension" />
     </declare-styleable>
-</resources>
\ No newline at end of file
+</resources>
diff --git a/dependencies.gradle b/dependencies.gradle
new file mode 100644
index 0000000..075b1dd
--- /dev/null
+++ b/dependencies.gradle
@@ -0,0 +1,19 @@
+ext.versions = [
+        compile_sdk   : 25,
+        min_sdk       : 9,
+        target_sdk    : 25,
+        build_tools   : "25.0.2",
+        support_lib   : "25.3.1",
+        zxing         : "3.3.0",
+        barcodescanner: "1.9.8"
+]
+
+ext.libraries = [
+        support_v4          : "com.android.support:support-v4:$versions.support_lib",
+        appcompat_v7        : "com.android.support:appcompat-v7:$versions.support_lib",
+        design_support      : "com.android.support:design:$versions.support_lib",
+        zxing_core          : "com.google.zxing:core:$versions.zxing",
+        barcodescanner_core : "me.dm7.barcodescanner:core:$versions.barcodescanner",
+        barcodescanner_zbar : "me.dm7.barcodescanner:zbar:$versions.barcodescanner",
+        barcodescanner_zxing: "me.dm7.barcodescanner:zxing:$versions.barcodescanner"
+]
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
index 2322723..62bf09c 100644
Binary files a/gradle/wrapper/gradle-wrapper.jar and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 43cf4ea..cd0aa28 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Dec 30 05:01:23 MST 2015
+#Sat Apr 08 11:44:39 MDT 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.4.1-all.zip
diff --git a/gradlew b/gradlew
index 91a7e26..4453cce 100755
--- a/gradlew
+++ b/gradlew
@@ -1,4 +1,4 @@
-#!/usr/bin/env bash
+#!/usr/bin/env sh
 
 ##############################################################################
 ##
@@ -6,12 +6,30 @@
 ##
 ##############################################################################
 
-# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-DEFAULT_JVM_OPTS=""
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
 
 APP_NAME="Gradle"
 APP_BASE_NAME=`basename "$0"`
 
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
 # Use the maximum available, or set MAX_FD != -1 to use that value.
 MAX_FD="maximum"
 
@@ -30,6 +48,7 @@ die ( ) {
 cygwin=false
 msys=false
 darwin=false
+nonstop=false
 case "`uname`" in
   CYGWIN* )
     cygwin=true
@@ -40,31 +59,11 @@ case "`uname`" in
   MINGW* )
     msys=true
     ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
 esac
 
-# For Cygwin, ensure paths are in UNIX format before anything is touched.
-if $cygwin ; then
-    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
-fi
-
-# Attempt to set APP_HOME
-# Resolve links: $0 may be a link
-PRG="$0"
-# Need this for relative symlinks.
-while [ -h "$PRG" ] ; do
-    ls=`ls -ld "$PRG"`
-    link=`expr "$ls" : '.*-> \(.*\)$'`
-    if expr "$link" : '/.*' > /dev/null; then
-        PRG="$link"
-    else
-        PRG=`dirname "$PRG"`"/$link"
-    fi
-done
-SAVED="`pwd`"
-cd "`dirname \"$PRG\"`/" >&-
-APP_HOME="`pwd -P`"
-cd "$SAVED" >&-
-
 CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
 
 # Determine the Java command to use to start the JVM.
@@ -90,7 +89,7 @@ location of your Java installation."
 fi
 
 # Increase the maximum file descriptors if we can.
-if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
     MAX_FD_LIMIT=`ulimit -H -n`
     if [ $? -eq 0 ] ; then
         if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
@@ -114,6 +113,7 @@ fi
 if $cygwin ; then
     APP_HOME=`cygpath --path --mixed "$APP_HOME"`
     CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
 
     # We build the pattern for arguments to be converted via cygpath
     ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
@@ -154,11 +154,19 @@ if $cygwin ; then
     esac
 fi
 
-# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
-function splitJvmOpts() {
-    JVM_OPTS=("$@")
+# Escape application args
+save ( ) {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
 }
-eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
-JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
 
-exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
index aec9973..e95643d 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -8,14 +8,14 @@
 @rem Set local scope for the variables with windows NT shell
 if "%OS%"=="Windows_NT" setlocal
 
-@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
-set DEFAULT_JVM_OPTS=
-
 set DIRNAME=%~dp0
 if "%DIRNAME%" == "" set DIRNAME=.
 set APP_BASE_NAME=%~n0
 set APP_HOME=%DIRNAME%
 
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
 @rem Find java.exe
 if defined JAVA_HOME goto findJavaFromJavaHome
 
@@ -46,10 +46,9 @@ echo location of your Java installation.
 goto fail
 
 :init
-@rem Get command-line arguments, handling Windowz variants
+@rem Get command-line arguments, handling Windows variants
 
 if not "%OS%" == "Windows_NT" goto win9xME_args
-if "%@eval[2+2]" == "4" goto 4NT_args
 
 :win9xME_args
 @rem Slurp the command line arguments.
@@ -60,11 +59,6 @@ set _SKIP=2
 if "x%~1" == "x" goto execute
 
 set CMD_LINE_ARGS=%*
-goto execute
-
-:4NT_args
-@rem Get arguments from the 4NT Shell from JP Software
-set CMD_LINE_ARGS=%$
 
 :execute
 @rem Setup the command line
diff --git a/zbar-sample/build.gradle b/zbar-sample/build.gradle
index 40d1223..c5e0ed3 100644
--- a/zbar-sample/build.gradle
+++ b/zbar-sample/build.gradle
@@ -2,10 +2,10 @@ apply plugin: 'com.android.application'
 
 dependencies {
     //compile project(":zbar")
-    compile 'me.dm7.barcodescanner:zbar:1.9'
-    compile supportLibraryDependency
-    compile 'com.android.support:appcompat-v7:24.1.1'
-    compile 'com.android.support:design:24.1.1'
+    compile libraries.barcodescanner_zbar
+    compile libraries.support_v4
+    compile libraries.appcompat_v7
+    compile libraries.design_support
 }
 
 android {
diff --git a/zbar/build.gradle b/zbar/build.gradle
index 6026bf2..ee1c61e 100644
--- a/zbar/build.gradle
+++ b/zbar/build.gradle
@@ -10,6 +10,6 @@ ext {
 
 dependencies {
     //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.9'
+    compile libraries.barcodescanner_core
     compile fileTree(dir: 'libs', include: '*.jar')
 }
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
index 60b85c3..439bac6 100644
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.content.res.Configuration;
+import android.graphics.Rect;
 import android.hardware.Camera;
 import android.os.Handler;
 import android.os.Looper;
@@ -86,20 +87,20 @@ public void onPreviewFrame(byte[] data, Camera camera) {
             int width = size.width;
             int height = size.height;
 
-            if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-                byte[] rotatedData = new byte[data.length];
-                for (int y = 0; y < height; y++) {
-                    for (int x = 0; x < width; x++)
-                        rotatedData[x * height + height - y - 1] = data[x + y * width];
+            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+                int rotationCount = getRotationCount();
+                if (rotationCount == 1 || rotationCount == 3) {
+                    int tmp = width;
+                    width = height;
+                    height = tmp;
                 }
-                int tmp = width;
-                width = height;
-                height = tmp;
-                data = rotatedData;
+                data = getRotatedData(data, camera);
             }
 
+            Rect rect = getFramingRectInPreview(width, height);
             Image barcode = new Image(width, height, "Y800");
             barcode.setData(data);
+            barcode.setCrop(rect.left, rect.top, rect.width(), rect.height());
 
             int result = mScanner.scanImage(barcode);
 
diff --git a/zxing-sample/build.gradle b/zxing-sample/build.gradle
index be6345f..fb6b9ff 100644
--- a/zxing-sample/build.gradle
+++ b/zxing-sample/build.gradle
@@ -2,10 +2,10 @@ apply plugin: 'com.android.application'
 
 dependencies {
     //compile project(":zxing")
-    compile 'me.dm7.barcodescanner:zxing:1.9'
-    compile supportLibraryDependency
-    compile 'com.android.support:appcompat-v7:24.1.1'
-    compile 'com.android.support:design:24.1.1'
+    compile libraries.barcodescanner_zxing
+    compile libraries.support_v4
+    compile libraries.appcompat_v7
+    compile libraries.design_support
 }
 
 android {
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScalingScannerActivity.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScalingScannerActivity.java
index abc39f6..75fbcbf 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScalingScannerActivity.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/ScalingScannerActivity.java
@@ -30,6 +30,9 @@ public void onCreate(Bundle state) {
     public void onResume() {
         super.onResume();
         mScannerView.setResultHandler(this);
+        // You can optionally set aspect ratio tolerance level
+        // that is used in calculating the optimal Camera preview size
+        mScannerView.setAspectTolerance(0.2f);
         mScannerView.startCamera();
         mScannerView.setFlash(mFlash);
     }
diff --git a/zxing/build.gradle b/zxing/build.gradle
index f2a61f9..0496a8e 100644
--- a/zxing/build.gradle
+++ b/zxing/build.gradle
@@ -10,6 +10,6 @@ ext {
 
 dependencies {
     //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.9'
-    compile 'com.google.zxing:core:3.2.1'
+    compile libraries.barcodescanner_core
+    compile libraries.zxing_core
 }
diff --git a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
index 767b54a..d1717ba 100644
--- a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
+++ b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
@@ -12,7 +12,9 @@
 import com.google.zxing.BarcodeFormat;
 import com.google.zxing.BinaryBitmap;
 import com.google.zxing.DecodeHintType;
+import com.google.zxing.LuminanceSource;
 import com.google.zxing.MultiFormatReader;
+import com.google.zxing.NotFoundException;
 import com.google.zxing.PlanarYUVLuminanceSource;
 import com.google.zxing.ReaderException;
 import com.google.zxing.Result;
@@ -31,28 +33,32 @@
     private static final String TAG = "ZXingScannerView";
 
     public interface ResultHandler {
-        public void handleResult(Result rawResult);
+        void handleResult(Result rawResult);
     }
 
     private MultiFormatReader mMultiFormatReader;
-    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
+    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<>();
     private List<BarcodeFormat> mFormats;
     private ResultHandler mResultHandler;
 
     static {
-        ALL_FORMATS.add(BarcodeFormat.UPC_A);
-        ALL_FORMATS.add(BarcodeFormat.UPC_E);
-        ALL_FORMATS.add(BarcodeFormat.EAN_13);
-        ALL_FORMATS.add(BarcodeFormat.EAN_8);
-        ALL_FORMATS.add(BarcodeFormat.RSS_14);
+        ALL_FORMATS.add(BarcodeFormat.AZTEC);
+        ALL_FORMATS.add(BarcodeFormat.CODABAR);
         ALL_FORMATS.add(BarcodeFormat.CODE_39);
         ALL_FORMATS.add(BarcodeFormat.CODE_93);
         ALL_FORMATS.add(BarcodeFormat.CODE_128);
-        ALL_FORMATS.add(BarcodeFormat.ITF);
-        ALL_FORMATS.add(BarcodeFormat.CODABAR);
-        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
         ALL_FORMATS.add(BarcodeFormat.DATA_MATRIX);
+        ALL_FORMATS.add(BarcodeFormat.EAN_8);
+        ALL_FORMATS.add(BarcodeFormat.EAN_13);
+        ALL_FORMATS.add(BarcodeFormat.ITF);
+        ALL_FORMATS.add(BarcodeFormat.MAXICODE);
         ALL_FORMATS.add(BarcodeFormat.PDF_417);
+        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
+        ALL_FORMATS.add(BarcodeFormat.RSS_14);
+        ALL_FORMATS.add(BarcodeFormat.RSS_EXPANDED);
+        ALL_FORMATS.add(BarcodeFormat.UPC_A);
+        ALL_FORMATS.add(BarcodeFormat.UPC_E);
+        ALL_FORMATS.add(BarcodeFormat.UPC_EAN_EXTENSION);
     }
 
     public ZXingScannerView(Context context) {
@@ -82,7 +88,7 @@ public void setResultHandler(ResultHandler resultHandler) {
     }
 
     private void initMultiFormatReader() {
-        Map<DecodeHintType,Object> hints = new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
+        Map<DecodeHintType,Object> hints = new EnumMap<>(DecodeHintType.class);
         hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
         mMultiFormatReader = new MultiFormatReader();
         mMultiFormatReader.setHints(hints);
@@ -101,15 +107,13 @@ public void onPreviewFrame(byte[] data, Camera camera) {
             int height = size.height;
 
             if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-                byte[] rotatedData = new byte[data.length];
-                for (int y = 0; y < height; y++) {
-                    for (int x = 0; x < width; x++)
-                        rotatedData[x * height + height - y - 1] = data[x + y * width];
+                int rotationCount = getRotationCount();
+                if (rotationCount == 1 || rotationCount == 3) {
+                    int tmp = width;
+                    width = height;
+                    height = tmp;
                 }
-                int tmp = width;
-                width = height;
-                height = tmp;
-                data = rotatedData;
+                data = getRotatedData(data, camera);
             }
 
             Result rawResult = null;
@@ -128,6 +132,18 @@ public void onPreviewFrame(byte[] data, Camera camera) {
                 } finally {
                     mMultiFormatReader.reset();
                 }
+
+                if (rawResult == null) {
+                    LuminanceSource invertedSource = source.invert();
+                    bitmap = new BinaryBitmap(new HybridBinarizer(invertedSource));
+                    try {
+                        rawResult = mMultiFormatReader.decodeWithState(bitmap);
+                    } catch (NotFoundException e) {
+                        // continue
+                    } finally {
+                        mMultiFormatReader.reset();
+                    }
+                }
             }
 
             final Result finalRawResult = rawResult;
