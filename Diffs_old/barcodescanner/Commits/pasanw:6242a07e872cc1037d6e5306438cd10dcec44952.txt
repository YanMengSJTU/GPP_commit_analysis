diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 25c90a2..6127b04 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -80,27 +80,39 @@ public void startCamera(int cameraId) {
         }
         mCameraHandlerThread.startCamera(cameraId, this);
     }
+    public void startCamera() {
+        startCamera(CameraUtils.getDefaultCameraId());
+    }
+
+    public void stopCamera() {
+        mCameraHandlerThread.stopCamera(this);
+    }
+
+    public void switchCamera(int cameraId) {
+        if (mCameraHandlerThread != null) {
+            mCameraHandlerThread.stopCamera(this);
+        }
+        startCamera(cameraId);
+    }
+
+    public void releaseAndCleanupCamera() {
+        if(mCameraWrapper.mCamera != null) {
+            mCameraWrapper.mCamera.release();
+        }
+    }
 
     public void setupCameraPreview(CameraWrapper cameraWrapper) {
         mCameraWrapper = cameraWrapper;
-        if(mCameraWrapper != null) {
+        if (mCameraWrapper != null) {
             setupLayout(mCameraWrapper);
             mViewFinderView.setupViewFinder();
-            if(mFlashState != null) {
+            if (mFlashState != null) {
                 setFlash(mFlashState);
             }
             setAutoFocus(mAutofocusState);
         }
     }
 
-    public void startCamera() {
-        startCamera(CameraUtils.getDefaultCameraId());
-    }
-
-    public void stopCamera() {
-        mCameraHandlerThread.stopCamera(this);
-    }
-
     public void stopAndCleanupCameraPreview() {
         if(mPreview != null) {
             mPreview.stopCameraPreview();
@@ -108,12 +120,6 @@ public void stopAndCleanupCameraPreview() {
         }
     }
 
-    public void releaseAndCleanupCamera() {
-        if(mCameraWrapper.mCamera != null) {
-            mCameraWrapper.mCamera.release();
-        }
-    }
-
     public void stopCameraPreview() {
         if(mPreview != null) {
             mPreview.stopCameraPreview();
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
index 599bd5f..6c10c8f 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
@@ -5,6 +5,11 @@
 import java.util.List;
 
 public class CameraUtils {
+    public enum CameraFacing {
+        BACK,
+        FRONT
+    }
+
     /** A safe way to get an instance of the Camera object. */
     public static Camera getCameraInstance() {
         return getCameraInstance(getDefaultCameraId());
@@ -12,13 +17,17 @@ public static Camera getCameraInstance() {
 
     /** Favor back-facing camera by default. If none exists, fallback to whatever camera is available **/
     public static int getDefaultCameraId() {
+        return getCameraId(CameraFacing.BACK);
+    }
+
+    public static int getCameraId(CameraFacing facing) {
         int numberOfCameras = Camera.getNumberOfCameras();
         Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
         int defaultCameraId = -1;
         for (int i = 0; i < numberOfCameras; i++) {
             defaultCameraId = i;
             Camera.getCameraInfo(i, cameraInfo);
-            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
+            if (cameraInfo.facing == facing.ordinal()) {
                 return i;
             }
         }
