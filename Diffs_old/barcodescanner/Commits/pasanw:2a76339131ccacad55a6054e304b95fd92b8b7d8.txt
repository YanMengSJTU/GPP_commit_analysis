diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 902be43..5ec9250 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -11,12 +11,12 @@
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback {
+    private static CameraHandlerThread mCameraHandlerThread;
     private CameraWrapper mCameraWrapper;
     private CameraPreview mPreview;
     private IViewFinder mViewFinderView;
     private Rect mFramingRectInPreview;
-    private CameraHandlerThread mCameraHandlerThread;
     private Boolean mFlashState;
     private boolean mAutofocusState = true;
     private boolean mShouldScaleToFill = true;
@@ -80,6 +80,7 @@ public void startCamera(int cameraId) {
         }
         mCameraHandlerThread.startCamera(cameraId, this);
     }
+
     public void startCamera() {
         startCamera(CameraUtils.getDefaultCameraId());
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
index a37116b..4c3802a 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
@@ -1,32 +1,42 @@
 package me.dm7.barcodescanner.core;
 
-import android.hardware.Camera;
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
+import android.util.Log;
 
 // This code is mostly based on the top answer here: http://stackoverflow.com/questions/18149964/best-use-of-handlerthread-over-other-similar-classes
 public class CameraHandlerThread extends HandlerThread {
+    private static final NonReentrantLock lock = new NonReentrantLock();
+    private static CameraWrapper cameraWrapper;
     private final Handler localHandler;
+    private final Handler mainHandler;
 
     public CameraHandlerThread() {
         super("CameraHandlerThread");
         start();
         localHandler = new Handler(getLooper());
+        mainHandler = new Handler(Looper.getMainLooper());
     }
 
     public void startCamera(final int cameraId, final BarcodeScannerView mScannerView) {
         localHandler.post(new Runnable() {
             @Override
             public void run() {
-                final Camera camera = CameraUtils.getCameraInstance(cameraId);
-                Handler mainHandler = new Handler(Looper.getMainLooper());
-                mainHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mScannerView.setupCameraPreview(CameraWrapper.getWrapper(camera, cameraId));
-                    }
-                });
+                try {
+                    lock.lock();
+                    Log.e("CMDBG: "+Thread.currentThread().getId(), "startCamera: Lock acquired");
+                    cameraWrapper = CameraWrapper.getWrapper(CameraUtils.getCameraInstance(cameraId), cameraId);
+
+                    mainHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            mScannerView.setupCameraPreview(cameraWrapper);
+                        }
+                    });
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt();
+                }
             }
         });
     }
@@ -35,8 +45,19 @@ public void stopCamera(final BarcodeScannerView mScannerView) {
         localHandler.post(new Runnable() {
             @Override
             public void run() {
-                mScannerView.stopAndCleanupCameraPreview();
-                mScannerView.releaseAndCleanupCamera();
+                if (cameraWrapper != null && cameraWrapper.mCamera != null) {
+                    cameraWrapper.mCamera.release();
+                }
+
+                mainHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        mScannerView.stopAndCleanupCameraPreview();
+                    }
+                });
+
+                lock.unlock();
+                Log.e("CMDBG: "+Thread.currentThread().getId(), "stopCamera: Lock released");
             }
         });
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
index 92fdc5d..4314a99 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
@@ -1,6 +1,7 @@
 package me.dm7.barcodescanner.core;
 
 import android.hardware.Camera;
+import android.util.Log;
 
 import java.util.List;
 
@@ -37,29 +38,21 @@ public static int getCameraId(CameraFacing facing) {
     /** A safe way to get an instance of the Camera object. */
     public static Camera getCameraInstance(int cameraId) {
         Camera c = null;
-        /** Since we close the camera on a background thread, we retry to allow some time for the camera
-            to be released so that cases like rotation do not result in a failed camera retrieval **/
-        for (int numAttempts = 0; numAttempts < 15; numAttempts++) {
-            try {
-                if (cameraId == -1) {
-                    c = Camera.open(); // attempt to get a Camera instance
-                } else {
-                    c = Camera.open(cameraId); // attempt to get a Camera instance
-                }
-
-                if (c != null) {
-                    return c;
-                }
-            } catch (Exception e) {
-                // Camera is not available (in use or does not exist)
-            }
-
-            try {
-                Thread.sleep(100);
-            } catch (InterruptedException e) {
-                Thread.currentThread().interrupt();
+        try {
+            if(cameraId == -1) {
+                c = Camera.open(); // attempt to get a Camera instance
+            } else {
+                c = Camera.open(cameraId); // attempt to get a Camera instance
             }
         }
+        catch (Exception e) {
+            // Camera is not available (in use or does not exist)
+        }
+        if (c == null) {
+            Log.e("CMDBG: "+Thread.currentThread().getId(), "camera instance failed");
+        } else {
+            Log.e("CMDBG: "+Thread.currentThread().getId(), "camera instance succeeded");
+        }
         return c; // returns null if camera is unavailable
     }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/NonReentrantLock.java b/core/src/main/java/me/dm7/barcodescanner/core/NonReentrantLock.java
new file mode 100644
index 0000000..94164f3
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/NonReentrantLock.java
@@ -0,0 +1,17 @@
+package me.dm7.barcodescanner.core;
+
+public class NonReentrantLock {
+    private boolean isLocked = false;
+
+    public synchronized void lock() throws InterruptedException {
+        while (isLocked) {
+            wait();
+        }
+        isLocked = true;
+    }
+
+    public synchronized void unlock(){
+        isLocked = false;
+        notifyAll();
+    }
+}
\ No newline at end of file
