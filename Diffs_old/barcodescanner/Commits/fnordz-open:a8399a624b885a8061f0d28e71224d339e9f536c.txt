diff --git a/core/build.gradle b/core/build.gradle
index e9897ae..00b5680 100644
--- a/core/build.gradle
+++ b/core/build.gradle
@@ -10,6 +10,10 @@ ext {
 
 dependencies {
     compile supportLibraryDependency
+    compile 'com.android.support:appcompat-v7:23.0.0'
+
+    compile 'com.google.zxing:core:3.2.0'
+
 }
 
 android {
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index bb7f2e5..1903aed 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -132,7 +132,7 @@ public void drawViewFinderMask(Canvas canvas) {
         int width = canvas.getWidth();
         int height = canvas.getHeight();
 
-        if (optimalSize == null) {
+        if (optimalSize != null && false) {
 
             int leftOfSet = (width - optimalSize.width);
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
new file mode 100644
index 0000000..2bd3ee3
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
@@ -0,0 +1,199 @@
+package me.dm7.barcodescanner.core.activity;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.graphics.Color;
+import android.hardware.Camera;
+import android.net.Uri;
+import android.opengl.Visibility;
+import android.os.Bundle;
+import android.os.PersistableBundle;
+import android.support.v7.app.AppCompatActivity;
+import android.text.InputType;
+import android.view.Gravity;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+import android.support.v7.widget.Toolbar;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.Result;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import me.dm7.barcodescanner.core.BarcodeScannerView;
+import me.dm7.barcodescanner.core.R;
+import zxing.ZXingScannerView;
+
+/**
+ * Created by marcoscardoso on 28/09/15.
+ */
+public class QRCodeScannerActivity extends AppCompatActivity implements ZXingScannerView.ResultHandler {
+
+    public static final String MESSAGE_INFO = "messageinfo";
+    public static final String SKIP_TITLE = "skiptitle";
+    public static final String MESSAGE = "message";
+
+    ZXingScannerView mScannerView;
+    TextView messageInfo;
+
+    private static final String FLASH_STATE = "FLASH_STATE";
+    private static final String AUTO_FOCUS_STATE = "AUTO_FOCUS_STATE";
+    private static final String SELECTED_FORMATS = "SELECTED_FORMATS";
+    private static final String CAMERA_ID = "CAMERA_ID";
+    private boolean mFlash;
+    private boolean mAutoFocus;
+    private ArrayList<Integer> mSelectedIndices;
+    private int mCameraId = -1;
+
+
+    public static final int GET_MESSAGE = 1;
+    public static final int SKIP_QRCODE = 2;
+    public static final int BACK_PRESSED = 3;
+
+
+    String message;
+    String skip_title = "";
+
+    Toolbar toolbar;
+
+    @Override
+    protected void onCreate(Bundle state) {
+        super.onCreate(state);
+        setContentView(R.layout.activity_qrcode_preview);
+
+        toolbar = (Toolbar) findViewById(R.id.toolbar);
+        toolbar.getBackground().setAlpha(0);
+
+        setSupportActionBar(toolbar);
+        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
+        getSupportActionBar().setDisplayShowHomeEnabled(true);
+
+
+        if (state != null) {
+            mFlash = state.getBoolean(FLASH_STATE, false);
+            mAutoFocus = state.getBoolean(AUTO_FOCUS_STATE, true);
+            mSelectedIndices = state.getIntegerArrayList(SELECTED_FORMATS);
+            mCameraId = state.getInt(CAMERA_ID, -1);
+        } else {
+            mFlash = false;
+            mAutoFocus = true;
+            mSelectedIndices = null;
+            mCameraId = -1;
+        }
+
+
+        mScannerView = (ZXingScannerView) findViewById(R.id.scanner_view);
+        setupFormats();
+
+        messageInfo = (TextView) findViewById(R.id.message_info);
+
+
+        if (getIntent().getExtras().containsKey(MESSAGE_INFO)) {
+
+            message = getIntent().getExtras().getString(MESSAGE_INFO);
+            messageInfo.setText(message);
+
+        } else {
+            messageInfo.setVisibility(View.GONE);
+        }
+
+        if (getIntent().getExtras().containsKey(SKIP_TITLE)) {
+
+            skip_title = getIntent().getExtras().getString(SKIP_TITLE);
+
+        }
+
+
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        getMenuInflater().inflate(R.menu.menu_open_and_start_class, menu);
+
+
+        if ("".equals(skip_title)) {
+            menu.getItem(R.id.fora_de_sala).setVisible(false);
+        } else {
+            menu.getItem(0).setTitle(skip_title);
+        }
+        return true;
+
+    }
+
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle presses on the action bar items
+
+
+        if (item.getItemId() == R.id.fora_de_sala) {
+            setResult(SKIP_QRCODE);
+            finish();
+            return true;
+        } else if (item.getItemId() == android.R.id.home) {
+            onBackPressed();
+            return true;
+        }
+
+
+        return super.onOptionsItemSelected(item);
+
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        mScannerView.startCamera(-1);
+        mScannerView.setAutoFocus(mAutoFocus);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setResultHandler(this);
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+
+        Intent i = new Intent();
+        i.setData(Uri.parse(rawResult.getText()));
+
+        setResult(GET_MESSAGE, i);
+
+        finish();
+
+    }
+
+    public void setupFormats() {
+        List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
+        if (mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+            mSelectedIndices = new ArrayList<Integer>();
+            for (int i = 0; i < ZXingScannerView.ALL_FORMATS.size(); i++) {
+                mSelectedIndices.add(i);
+            }
+        }
+
+        for (int index : mSelectedIndices) {
+            formats.add(ZXingScannerView.ALL_FORMATS.get(index));
+        }
+        if (mScannerView != null) {
+            mScannerView.setFormats(formats);
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        mScannerView.stopCamera();
+    }
+
+    @Override
+    public void onBackPressed() {
+        setResult(BACK_PRESSED);
+        finish();
+    }
+}
diff --git a/core/src/main/java/zxing/ZXingScannerView.java b/core/src/main/java/zxing/ZXingScannerView.java
new file mode 100644
index 0000000..c0da36d
--- /dev/null
+++ b/core/src/main/java/zxing/ZXingScannerView.java
@@ -0,0 +1,150 @@
+package zxing;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Rect;
+import android.hardware.Camera;
+import android.util.AttributeSet;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.BinaryBitmap;
+import com.google.zxing.DecodeHintType;
+import com.google.zxing.MultiFormatReader;
+import com.google.zxing.PlanarYUVLuminanceSource;
+import com.google.zxing.ReaderException;
+import com.google.zxing.Result;
+import com.google.zxing.common.HybridBinarizer;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Map;
+
+import me.dm7.barcodescanner.core.BarcodeScannerView;
+import me.dm7.barcodescanner.core.DisplayUtils;
+
+
+public class ZXingScannerView extends BarcodeScannerView {
+    public interface ResultHandler {
+        public void handleResult(Result rawResult);
+    }
+
+    private MultiFormatReader mMultiFormatReader;
+    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
+    private List<BarcodeFormat> mFormats;
+    private ResultHandler mResultHandler;
+
+    static {
+        ALL_FORMATS.add(BarcodeFormat.UPC_A);
+        ALL_FORMATS.add(BarcodeFormat.UPC_E);
+        ALL_FORMATS.add(BarcodeFormat.EAN_13);
+        ALL_FORMATS.add(BarcodeFormat.EAN_8);
+        ALL_FORMATS.add(BarcodeFormat.RSS_14);
+        ALL_FORMATS.add(BarcodeFormat.CODE_39);
+        ALL_FORMATS.add(BarcodeFormat.CODE_93);
+        ALL_FORMATS.add(BarcodeFormat.CODE_128);
+        ALL_FORMATS.add(BarcodeFormat.ITF);
+        ALL_FORMATS.add(BarcodeFormat.CODABAR);
+        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
+        ALL_FORMATS.add(BarcodeFormat.DATA_MATRIX);
+        ALL_FORMATS.add(BarcodeFormat.PDF_417);
+    }
+
+    public ZXingScannerView(Context context) {
+        super(context);
+        initMultiFormatReader();
+    }
+
+    public ZXingScannerView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        initMultiFormatReader();
+    }
+
+    public void setFormats(List<BarcodeFormat> formats) {
+        mFormats = formats;
+        initMultiFormatReader();
+    }
+
+    public void setResultHandler(ResultHandler resultHandler) {
+        mResultHandler = resultHandler;
+    }
+
+    public Collection<BarcodeFormat> getFormats() {
+        if(mFormats == null) {
+            return ALL_FORMATS;
+        }
+        return mFormats;
+    }
+
+    private void initMultiFormatReader() {
+        Map<DecodeHintType,Object> hints = new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
+        hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
+        mMultiFormatReader = new MultiFormatReader();
+        mMultiFormatReader.setHints(hints);
+    }
+
+    @Override
+    public void onPreviewFrame(byte[] data, Camera camera) {
+        Camera.Parameters parameters = camera.getParameters();
+        Camera.Size size = parameters.getPreviewSize();
+        int width = size.width;
+        int height = size.height;
+
+        if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+            byte[] rotatedData = new byte[data.length];
+            for (int y = 0; y < height; y++) {
+                for (int x = 0; x < width; x++)
+                    rotatedData[x * height + height - y - 1] = data[x + y * width];
+            }
+            int tmp = width;
+            width = height;
+            height = tmp;
+            data = rotatedData;
+        }
+
+        Result rawResult = null;
+        PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
+
+        if(source != null) {
+            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
+            try {
+                rawResult = mMultiFormatReader.decodeWithState(bitmap);
+            } catch (ReaderException re) {
+                // continue
+            } catch (NullPointerException npe) {
+                // This is terrible
+            } catch (ArrayIndexOutOfBoundsException aoe) {
+
+            } finally {
+                mMultiFormatReader.reset();
+            }
+        }
+
+        if (rawResult != null) {
+            stopCamera();
+            if(mResultHandler != null) {
+                mResultHandler.handleResult(rawResult);
+            }
+        } else {
+            camera.setOneShotPreviewCallback(this);
+        }
+    }
+
+    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {
+        Rect rect = getFramingRectInPreview(width, height);
+        if (rect == null) {
+            return null;
+        }
+        // Go ahead and assume it's YUV rather than die.
+        PlanarYUVLuminanceSource source = null;
+
+        try {
+            source = new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
+                    rect.width(), rect.height(), false);
+        } catch(Exception e) {
+        }
+
+        return source;
+    }
+}
\ No newline at end of file
