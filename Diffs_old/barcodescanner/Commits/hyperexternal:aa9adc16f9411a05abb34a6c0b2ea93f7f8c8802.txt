diff --git a/dependencies.gradle b/dependencies.gradle
index 169640c..944b9cf 100644
--- a/dependencies.gradle
+++ b/dependencies.gradle
@@ -1,9 +1,10 @@
 ext.versions = [
         compile_sdk   : 25,
-        min_sdk       : 9,
+        min_sdk       : 14,//Google Play Services Require Mini Api 14
         target_sdk    : 25,
         build_tools   : "25.0.2",
         support_lib   : "25.3.1",
+        play_services : "11.0.4",
         zxing         : "3.3.0",
         barcodescanner: "1.9.7"
 ]
@@ -13,6 +14,7 @@ ext.libraries = [
         appcompat_v7        : "com.android.support:appcompat-v7:$versions.support_lib",
         design_support      : "com.android.support:design:$versions.support_lib",
         zxing_core          : "com.google.zxing:core:$versions.zxing",
+        vision_core         : "com.google.android.gms:play-services-vision:$versions.play_services",
         barcodescanner_core : "me.dm7.barcodescanner:core:$versions.barcodescanner",
         barcodescanner_zbar : "me.dm7.barcodescanner:zbar:$versions.barcodescanner",
         barcodescanner_zxing: "me.dm7.barcodescanner:zxing:$versions.barcodescanner"
diff --git a/settings.gradle b/settings.gradle
index 8b363d8..59abc84 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,3 @@
+include ':vision'
+include "vision-sample"
 include "core", "zxing", "zxing-sample", "zbar", "zbar-sample"
diff --git a/vision/.gitignore b/vision/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/vision/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/vision/build.gradle b/vision/build.gradle
new file mode 100644
index 0000000..c290b43
--- /dev/null
+++ b/vision/build.gradle
@@ -0,0 +1,14 @@
+apply plugin: 'com.android.library'
+
+ext {
+    isLibrary = true
+    pomPackaging = "aar"
+    pomArtifactId = "vision"
+    pomName = "Google Mobile Vision Scanner View"
+    pomDescription = 'An android library project which contains the Google mobile vision barcode scanner view'
+}
+
+dependencies {
+    compile libraries.barcodescanner_core
+    compile libraries.vision_core
+}
diff --git a/vision/src/main/AndroidManifest.xml b/vision/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..03c4747
--- /dev/null
+++ b/vision/src/main/AndroidManifest.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="me.dm7.barcodescanner.vision">
+
+    <uses-permission android:name="android.permission.CAMERA"/>
+    <application/>
+</manifest>
diff --git a/vision/src/main/java/me/dm7/barcodescanner/vision/BarcodeFormat.java b/vision/src/main/java/me/dm7/barcodescanner/vision/BarcodeFormat.java
new file mode 100644
index 0000000..18bfb33
--- /dev/null
+++ b/vision/src/main/java/me/dm7/barcodescanner/vision/BarcodeFormat.java
@@ -0,0 +1,65 @@
+package me.dm7.barcodescanner.vision;
+
+
+import com.google.android.gms.vision.barcode.Barcode;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class BarcodeFormat {
+    public static final BarcodeFormat CODE_128 = new BarcodeFormat(Barcode.CODE_128, "CODE_128");
+    public static final BarcodeFormat CODE_39 = new BarcodeFormat(Barcode.CODE_39, "CODE_39");
+    public static final BarcodeFormat CODE_93 = new BarcodeFormat(Barcode.CODE_93, "CODE_93");
+    public static final BarcodeFormat CODABAR = new BarcodeFormat(Barcode.CODABAR, "CODABAR");
+    public static final BarcodeFormat DATA_MATRIX = new BarcodeFormat(Barcode.DATA_MATRIX, "DATA_MATRIX");
+    public static final BarcodeFormat EAN_13 = new BarcodeFormat(Barcode.EAN_13, "EAN_13");
+    public static final BarcodeFormat EAN_8 = new BarcodeFormat(Barcode.EAN_8, "EAN_8");
+    public static final BarcodeFormat ITF = new BarcodeFormat(Barcode.ITF, "ITF");
+    public static final BarcodeFormat QR_CODE = new BarcodeFormat(Barcode.QR_CODE, "QR_CODE");
+    public static final BarcodeFormat UPC_A = new BarcodeFormat(Barcode.UPC_A, "UPC_A");
+    public static final BarcodeFormat UPC_E = new BarcodeFormat(Barcode.UPC_E, "UPC_E");
+    public static final BarcodeFormat PDF417 = new BarcodeFormat(Barcode.PDF417, "PDF417");
+    public static final BarcodeFormat AZTEC = new BarcodeFormat(Barcode.AZTEC, "AZTEC");
+    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
+
+    static {
+        ALL_FORMATS.add(BarcodeFormat.CODE_128);
+        ALL_FORMATS.add(BarcodeFormat.CODE_39);
+        ALL_FORMATS.add(BarcodeFormat.CODE_93);
+        ALL_FORMATS.add(BarcodeFormat.CODABAR);
+        ALL_FORMATS.add(BarcodeFormat.DATA_MATRIX);
+        ALL_FORMATS.add(BarcodeFormat.EAN_13);
+        ALL_FORMATS.add(BarcodeFormat.EAN_8);
+        ALL_FORMATS.add(BarcodeFormat.ITF);
+        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
+        ALL_FORMATS.add(BarcodeFormat.UPC_A);
+        ALL_FORMATS.add(BarcodeFormat.UPC_E);
+        ALL_FORMATS.add(BarcodeFormat.PDF417);
+        ALL_FORMATS.add(BarcodeFormat.AZTEC);
+    }
+
+    private int mId;
+    private String mName;
+
+    public BarcodeFormat(int id, String name) {
+        mId = id;
+        mName = name;
+    }
+
+    public static BarcodeFormat getFormatById(int id) {
+        for (BarcodeFormat format : ALL_FORMATS) {
+            if (format.getId() == id) {
+                return format;
+            }
+        }
+        throw new IllegalArgumentException("Invalid Barcode Format id : " + id);
+    }
+
+    public int getId() {
+        return mId;
+    }
+
+    public String getName() {
+        return mName;
+    }
+}
\ No newline at end of file
diff --git a/vision/src/main/java/me/dm7/barcodescanner/vision/Result.java b/vision/src/main/java/me/dm7/barcodescanner/vision/Result.java
new file mode 100644
index 0000000..6de8741
--- /dev/null
+++ b/vision/src/main/java/me/dm7/barcodescanner/vision/Result.java
@@ -0,0 +1,35 @@
+package me.dm7.barcodescanner.vision;
+
+import com.google.android.gms.vision.barcode.Barcode;
+
+public class Result {
+    private Barcode barcode;
+
+    private Result(Builder builder) {
+        this.barcode = builder.barcode;
+    }
+
+    public static Builder newBuilder() {
+        return new Builder();
+    }
+
+    public Barcode getBarcode() {
+        return barcode;
+    }
+
+    public static final class Builder {
+        private Barcode barcode;
+
+        private Builder() {
+        }
+
+        public Builder withBarcode(Barcode val) {
+            barcode = val;
+            return this;
+        }
+
+        public Result build() {
+            return new Result(this);
+        }
+    }
+}
\ No newline at end of file
diff --git a/vision/src/main/java/me/dm7/barcodescanner/vision/VisionScannerView.java b/vision/src/main/java/me/dm7/barcodescanner/vision/VisionScannerView.java
new file mode 100644
index 0000000..1cb81a5
--- /dev/null
+++ b/vision/src/main/java/me/dm7/barcodescanner/vision/VisionScannerView.java
@@ -0,0 +1,175 @@
+package me.dm7.barcodescanner.vision;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.ImageFormat;
+import android.hardware.Camera;
+import android.os.Handler;
+import android.os.Looper;
+import android.util.AttributeSet;
+import android.util.Log;
+import android.util.SparseArray;
+
+import com.google.android.gms.vision.Detector;
+import com.google.android.gms.vision.Frame;
+import com.google.android.gms.vision.barcode.Barcode;
+import com.google.android.gms.vision.barcode.BarcodeDetector;
+
+import java.nio.ByteBuffer;
+import java.util.List;
+
+import me.dm7.barcodescanner.core.BarcodeScannerView;
+import me.dm7.barcodescanner.core.DisplayUtils;
+
+public class VisionScannerView extends BarcodeScannerView {
+    private static final String TAG = "VisionScannerView";
+
+    private List<BarcodeFormat> mFormats;
+    private ResultHandler mResultHandler;
+    private BarcodeDetector barcodeDetector;
+
+    public VisionScannerView(Context context) {
+        super(context);
+        setupScanner();
+    }
+
+    public VisionScannerView(Context context, AttributeSet attributeSet) {
+        super(context, attributeSet);
+        setupScanner();
+    }
+
+    public void setResultHandler(ResultHandler resultHandler) {
+        mResultHandler = resultHandler;
+    }
+
+    public List<BarcodeFormat> getFormats() {
+        if (mFormats == null) {
+            return BarcodeFormat.ALL_FORMATS;
+        }
+        return mFormats;
+    }
+
+    public void setFormats(List<BarcodeFormat> formats) {
+        mFormats = formats;
+        setupScanner();
+    }
+
+    public void setupScanner() {
+
+
+        barcodeDetector = new BarcodeDetector.Builder(getContext())
+                .setBarcodeFormats(getSupportedFormatBitmapMask()).build();
+        barcodeDetector.setProcessor(new Detector.Processor<Barcode>() {
+            @Override
+            public void release() {
+                // Handled via public method
+            }
+
+            @Override
+            public void receiveDetections(Detector.Detections<Barcode> detections) {
+                final SparseArray<Barcode> barcodes = detections.getDetectedItems();
+                if (barcodes.size() != 0) {
+                    // TODO: 3/22/17
+//                    onItemDetected(barcodes.valueAt(0));
+                }
+            }
+        });
+
+
+    }
+
+    @Override
+    public void onPreviewFrame(byte[] data, Camera camera) {
+        if (mResultHandler == null) {
+            return;
+        }
+
+        try {
+            Camera.Parameters parameters = camera.getParameters();
+            Camera.Size size = parameters.getPreviewSize();
+            int width = size.width;
+            int height = size.height;
+
+            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+                byte[] rotatedData = new byte[data.length];
+                for (int y = 0; y < height; y++) {
+                    for (int x = 0; x < width; x++)
+                        rotatedData[x * height + height - y - 1] = data[x + y * width];
+                }
+                int tmp = width;
+                width = height;
+                height = tmp;
+                data = rotatedData;
+            }
+
+            SparseArray<Barcode> barcodeSparseArray = barcodeDetector.detect(constructFrame(width, height, data));
+
+            if (barcodeSparseArray.size() != 0) {
+                final Result rawResult = Result.newBuilder().withBarcode(barcodeSparseArray.valueAt(0)).build();
+                Handler handler = new Handler(Looper.getMainLooper());
+                handler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        // Stopping the preview can take a little long.
+                        // So we want to set result handler to null to discard subsequent calls to
+                        // onPreviewFrame.
+                        ResultHandler tmpResultHandler = mResultHandler;
+                        mResultHandler = null;
+
+                        stopCameraPreview();
+                        if (tmpResultHandler != null) {
+                            tmpResultHandler.handleResult(rawResult);
+                        }
+                    }
+                });
+            } else {
+                camera.setOneShotPreviewCallback(this);
+            }
+        } catch (RuntimeException e) {
+            // TODO: Terrible hack. It is possible that this method is invoked after camera is released.
+            Log.e(TAG, e.toString(), e);
+        }
+    }
+
+    private Frame constructFrame(int width, int height, byte[] data) {
+
+
+        ByteBuffer pendingFrameData = ByteBuffer.wrap(data);
+
+        return new Frame.Builder()
+                .setImageData(pendingFrameData, width,
+                        height, ImageFormat.NV21)
+                .build();
+
+    }
+
+    public void resumeCameraPreview(ResultHandler resultHandler) {
+        mResultHandler = resultHandler;
+        super.resumeCameraPreview();
+    }
+
+    private int getSupportedFormatBitmapMask() {
+        final List<BarcodeFormat> formats = getFormats();
+
+
+        if (formats == null || formats.size() == 0) {
+            return Barcode.ALL_FORMATS;
+        } else if (formats.size() == 1) {
+            return formats.get(0).getId();
+        } else {
+            int bitmapMask = formats.get(0).getId();
+
+            for (int i = 1; i < formats.size(); i++) {
+                bitmapMask |= formats.get(i).getId();
+            }
+
+            return bitmapMask;
+        }
+
+
+    }
+
+    public interface ResultHandler {
+        void handleResult(Result rawResult);
+    }
+}
