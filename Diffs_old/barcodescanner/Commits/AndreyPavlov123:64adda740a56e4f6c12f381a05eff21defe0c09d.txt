diff --git a/core/src/main/java/me/dm7/barcodescanner/core/AfterScannedMode.java b/core/src/main/java/me/dm7/barcodescanner/core/AfterScannedMode.java
new file mode 100644
index 0000000..47cba28
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/AfterScannedMode.java
@@ -0,0 +1,7 @@
+package me.dm7.barcodescanner.core;
+
+public class AfterScannedMode {
+    public static final int NONE = 0;
+    public static final int STOP_ANALYSIS = 1;
+    public static final int STOP_CAMERA_PREVIEW = 2;
+}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 0b5733f..edd3fb8 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -20,6 +20,8 @@
     private Boolean mFlashState;
     private boolean mAutofocusState = true;
     private boolean mShouldScaleToFill = true;
+    private boolean mAnalysisPaused;
+    private int mAfterScannedMode = AfterScannedMode.STOP_CAMERA_PREVIEW;
 
     public BarcodeScannerView(Context context) {
         super(context);
@@ -39,6 +41,12 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
         }
     }
 
+    public int getAfterScannedMode() {return mAfterScannedMode;}
+
+    public void setAfterScannedMode(int afterScannedMode) {
+        mAfterScannedMode = afterScannedMode;
+    }
+
     public final void setupLayout(CameraWrapper cameraWrapper) {
         removeAllViews();
 
@@ -116,12 +124,25 @@ public void stopCameraPreview() {
         }
     }
 
-    protected void resumeCameraPreview() {
+    public void resumeCameraPreview() {
         if(mPreview != null) {
             mPreview.showCameraPreview();
         }
     }
 
+    public void stopAnalysis() {
+        mAnalysisPaused = true;
+    }
+
+    public void resumeAnalysis() {
+        mAnalysisPaused = false;
+        mCameraWrapper.mCamera.setOneShotPreviewCallback(this);
+    }
+
+    public boolean isAnalysisPaused() {
+        return mAnalysisPaused;
+    }
+
     public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHeight) {
         if (mFramingRectInPreview == null) {
             Rect framingRect = mViewFinderView.getFramingRect();
diff --git a/zbar/build.gradle b/zbar/build.gradle
index 6026bf2..5db9c02 100644
--- a/zbar/build.gradle
+++ b/zbar/build.gradle
@@ -9,7 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.9'
+    compile project(":core")
+    //compile 'me.dm7.barcodescanner:core:1.9'
     compile fileTree(dir: 'libs', include: '*.jar')
 }
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
index 60b85c3..2088a9b 100644
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
@@ -19,6 +19,7 @@
 import java.util.Collection;
 import java.util.List;
 
+import me.dm7.barcodescanner.core.AfterScannedMode;
 import me.dm7.barcodescanner.core.BarcodeScannerView;
 import me.dm7.barcodescanner.core.DisplayUtils;
 
@@ -76,7 +77,7 @@ public void setupScanner() {
 
     @Override
     public void onPreviewFrame(byte[] data, Camera camera) {
-        if(mResultHandler == null) {
+        if(mResultHandler == null || isAnalysisPaused()) {
             return;
         }
 
@@ -132,9 +133,18 @@ public void run() {
                         // So we want to set result handler to null to discard subsequent calls to
                         // onPreviewFrame.
                         ResultHandler tmpResultHandler = mResultHandler;
-                        mResultHandler = null;
-                        
-                        stopCameraPreview();
+
+                        switch (getAfterScannedMode()) {
+
+                            case AfterScannedMode.NONE:
+                                break;
+                            case AfterScannedMode.STOP_ANALYSIS:
+                                stopAnalysis();
+                                break;
+                            case AfterScannedMode.STOP_CAMERA_PREVIEW:
+                                stopCameraPreview();
+                                break;
+                        }
                         if (tmpResultHandler != null) {
                             tmpResultHandler.handleResult(rawResult);
                         }
@@ -153,4 +163,10 @@ public void resumeCameraPreview(ResultHandler resultHandler) {
         mResultHandler = resultHandler;
         super.resumeCameraPreview();
     }
+
+    @Override
+    public void stopCameraPreview() {
+        mResultHandler = null;
+        super.stopCameraPreview();
+    }
 }
diff --git a/zxing/build.gradle b/zxing/build.gradle
index f2a61f9..f47938a 100644
--- a/zxing/build.gradle
+++ b/zxing/build.gradle
@@ -9,7 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.9'
+    compile project(":core")
+    //compile 'me.dm7.barcodescanner:core:1.9'
     compile 'com.google.zxing:core:3.2.1'
 }
diff --git a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
index 767b54a..a26b34c 100644
--- a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
+++ b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Map;
 
+import me.dm7.barcodescanner.core.AfterScannedMode;
 import me.dm7.barcodescanner.core.BarcodeScannerView;
 import me.dm7.barcodescanner.core.DisplayUtils;
 
@@ -90,7 +91,7 @@ private void initMultiFormatReader() {
 
     @Override
     public void onPreviewFrame(byte[] data, Camera camera) {
-        if(mResultHandler == null) {
+        if(mResultHandler == null || isAnalysisPaused()) {
             return;
         }
         
@@ -141,9 +142,18 @@ public void run() {
                         // So we want to set result handler to null to discard subsequent calls to
                         // onPreviewFrame.
                         ResultHandler tmpResultHandler = mResultHandler;
-                        mResultHandler = null;
 
-                        stopCameraPreview();
+                        switch (getAfterScannedMode()) {
+
+                            case AfterScannedMode.NONE:
+                                break;
+                            case AfterScannedMode.STOP_ANALYSIS:
+                                stopAnalysis();
+                                break;
+                            case AfterScannedMode.STOP_CAMERA_PREVIEW:
+                                stopCameraPreview();
+                                break;
+                        }
                         if (tmpResultHandler != null) {
                             tmpResultHandler.handleResult(finalRawResult);
                         }
@@ -158,6 +168,12 @@ public void run() {
         }
     }
 
+    @Override
+    public void stopCameraPreview() {
+        mResultHandler = null;
+        super.stopCameraPreview();
+    }
+
     public void resumeCameraPreview(ResultHandler resultHandler) {
         mResultHandler = resultHandler;
         super.resumeCameraPreview();
