diff --git a/build.gradle b/build.gradle
index 1eb929a..03afaa0 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.1.0'
+        classpath 'com.android.tools.build:gradle:1.1.3'
     }
 }
 
@@ -30,8 +30,8 @@ subprojects {
         ext.pluginContainer = project.getPlugins()
         if(ext.pluginContainer.hasPlugin("com.android.application") || ext.pluginContainer.hasPlugin("com.android.library")) {
             android {
-                compileSdkVersion 21
-                buildToolsVersion '21.1.2'
+                compileSdkVersion 22
+                buildToolsVersion '22.0.1'
 
                 android {
                     lintOptions {
@@ -41,7 +41,7 @@ subprojects {
 
                 defaultConfig {
                     minSdkVersion 9
-                    targetSdkVersion 21
+                    targetSdkVersion 22
                     versionCode 163
                     versionName "1.6.3"
                 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index 9b44f81..68fff5f 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -4,7 +4,9 @@
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.graphics.Canvas;
+import android.graphics.CornerPathEffect;
 import android.graphics.Paint;
+import android.graphics.Path;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.util.AttributeSet;
@@ -56,9 +58,7 @@ public void onDraw(Canvas canvas) {
             return;
         }
 
-        drawViewFinderMask(canvas);
         drawViewFinderBorder(canvas);
-        drawLaser(canvas);
     }
 
     public void drawViewFinderMask(Canvas canvas) {
@@ -76,24 +76,44 @@ public void drawViewFinderMask(Canvas canvas) {
     }
 
     public void drawViewFinderBorder(Canvas canvas) {
-        Paint paint = new Paint();
         Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_border));
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(resources.getInteger(R.integer.viewfinder_border_width));
-        int lineLength = resources.getInteger(R.integer.viewfinder_border_length);
+        Paint paint = preparePaint(resources);
+        int lineLength = resources.getDimensionPixelSize(R.dimen.lineLength);
+
+        Path path = new Path();
+
+        path.moveTo(mFramingRect.left + lineLength, mFramingRect.top);
+        path.lineTo(mFramingRect.left , mFramingRect.top );
+        path.lineTo(mFramingRect.left, mFramingRect.top + lineLength);
+
+        path.moveTo(mFramingRect.right - lineLength, mFramingRect.top);
+        path.lineTo(mFramingRect.right , mFramingRect.top );
+        path.lineTo(mFramingRect.right, mFramingRect.top + lineLength);
 
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint);
+        path.moveTo(mFramingRect.left + lineLength, mFramingRect.bottom);
+        path.lineTo(mFramingRect.left , mFramingRect.bottom );
+        path.lineTo(mFramingRect.left, mFramingRect.bottom - lineLength);
 
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint);
 
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint);
+        path.moveTo(mFramingRect.right - lineLength, mFramingRect.bottom);
+        path.lineTo(mFramingRect.right , mFramingRect.bottom );
+        path.lineTo(mFramingRect.right, mFramingRect.bottom - lineLength);
 
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint);
+        canvas.drawPath(path, paint);
+    }
+
+    private Paint preparePaint(Resources resources) {
+        Paint paint = new Paint();
+        paint.setColor(resources.getColor(R.color.bg_blue));
+        paint.setStyle(Paint.Style.STROKE);
+        paint.setAntiAlias(true);
+        paint.setStrokeWidth(resources.getDimensionPixelSize(R.dimen.rectangleWidth));
+        paint.setPathEffect(new CornerPathEffect(resources.getDimensionPixelSize(R.dimen.rectangleWidth)) );
+        paint.setDither(true);                    // set the dither to true
+        paint.setStyle(Paint.Style.STROKE);       // set to STOKE
+        paint.setStrokeJoin(Paint.Join.ROUND);    // set the join to round you want
+        paint.setStrokeCap(Paint.Cap.ROUND);
+        return paint;
     }
 
     public void drawLaser(Canvas canvas) {
@@ -133,7 +153,7 @@ public synchronized void updateFramingRect() {
             height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
         } else {
             width = findDesiredDimensionInRange(PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT);
+            height = width;//findDesiredDimensionInRange(PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT);
         }
 
         int leftOffset = (viewResolution.x - width) / 2;
diff --git a/core/src/main/res/values/colors.xml b/core/src/main/res/values/colors.xml
index 58c019a..6434c8b 100644
--- a/core/src/main/res/values/colors.xml
+++ b/core/src/main/res/values/colors.xml
@@ -3,4 +3,5 @@
     <color name="viewfinder_mask">#60000000</color>
     <color name="viewfinder_laser">#ffcc0000</color>
     <color name="viewfinder_border">#ffafed44</color>
+    <color name="bg_blue">#378bb0</color>
 </resources>
\ No newline at end of file
diff --git a/core/src/main/res/values/dimens.xml b/core/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..87c6dc4
--- /dev/null
+++ b/core/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="rectangleWidth">5dp</dimen>
+    <dimen name="lineLength">50dp</dimen>
+</resources>
\ No newline at end of file
diff --git a/zxing/sample/build.gradle b/zxing/sample/build.gradle
index 9f78c6b..a144fbc 100644
--- a/zxing/sample/build.gradle
+++ b/zxing/sample/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    //compile project(":zxing:zxing")
-    compile 'me.dm7.barcodescanner:zxing:1.6.3'
+    compile project(":zxing:zxing")
+//    compile 'me.dm7.barcodescanner:zxing:1.6.3'
     compile supportLibraryDependency
     compile 'com.android.support:appcompat-v7:21.0.3'
 }
diff --git a/zxing/zxing/build.gradle b/zxing/zxing/build.gradle
index b0ec247..128021e 100644
--- a/zxing/zxing/build.gradle
+++ b/zxing/zxing/build.gradle
@@ -9,13 +9,13 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.6.3'
+    compile project(":core")
+//    compile 'me.dm7.barcodescanner:core:1.6.3'
     compile 'com.google.zxing:core:3.2.0'
 }
 
 android {
     defaultConfig {
-        //applicationId "${project.group}.zxing"
+//        applicationId "${project.group}.zxing"
     }
 }
