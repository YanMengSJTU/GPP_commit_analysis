diff --git a/zxing/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java b/zxing/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
index fc1933d..160e010 100644
--- a/zxing/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
+++ b/zxing/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
@@ -33,6 +33,7 @@
     public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
     private List<BarcodeFormat> mFormats;
     private ResultHandler mResultHandler;
+    private boolean pause = true;
 
     static {
         ALL_FORMATS.add(BarcodeFormat.UPC_A);
@@ -83,51 +84,59 @@ private void initMultiFormatReader() {
         mMultiFormatReader.setHints(hints);
     }
 
+    public void pause() {
+        pause = true;
+    }
+
+    public void unpause() {
+        pause = false;
+    }
+
     @Override
     public void onPreviewFrame(byte[] data, Camera camera) {
-        Camera.Parameters parameters = camera.getParameters();
-        Camera.Size size = parameters.getPreviewSize();
-        int width = size.width;
-        int height = size.height;
-
-        if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-            byte[] rotatedData = new byte[data.length];
-            for (int y = 0; y < height; y++) {
-                for (int x = 0; x < width; x++)
-                    rotatedData[x * height + height - y - 1] = data[x + y * width];
+        if (!pause) {
+            Camera.Parameters parameters = camera.getParameters();
+            Camera.Size size = parameters.getPreviewSize();
+            int width = size.width;
+            int height = size.height;
+
+            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+                byte[] rotatedData = new byte[data.length];
+                for (int y = 0; y < height; y++) {
+                    for (int x = 0; x < width; x++)
+                        rotatedData[x * height + height - y - 1] = data[x + y * width];
+                }
+                int tmp = width;
+                width = height;
+                height = tmp;
+                data = rotatedData;
             }
-            int tmp = width;
-            width = height;
-            height = tmp;
-            data = rotatedData;
-        }
 
-        Result rawResult = null;
-        PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
-
-        if(source != null) {
-            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
-            try {
-                rawResult = mMultiFormatReader.decodeWithState(bitmap);
-            } catch (ReaderException re) {
-                // continue
-            } catch (NullPointerException npe) {
-                // This is terrible
-            } catch (ArrayIndexOutOfBoundsException aoe) {
-
-            } finally {
-                mMultiFormatReader.reset();
+            Result rawResult = null;
+            PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
+
+            if (source != null) {
+                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
+                try {
+                    rawResult = mMultiFormatReader.decodeWithState(bitmap);
+                } catch (ReaderException re) {
+                    // continue
+                } catch (NullPointerException npe) {
+                    // This is terrible
+                } catch (ArrayIndexOutOfBoundsException aoe) {
+
+                } finally {
+                    mMultiFormatReader.reset();
+                }
             }
-        }
 
-        if (rawResult != null) {
-            stopCamera();
-            if(mResultHandler != null) {
-                mResultHandler.handleResult(rawResult);
+            if (rawResult != null) {
+                if (mResultHandler != null) {
+                    mResultHandler.handleResult(rawResult);
+                }
             }
-        } else {
-            camera.setOneShotPreviewCallback(this);
         }
+        camera.setOneShotPreviewCallback(this);
     }
 
     public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {
