diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 7fdc1c0..86929ac 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -30,17 +30,20 @@ public final void setupLayout() {
         mPreview = new CameraPreview(getContext());
         RelativeLayout relativeLayout = new RelativeLayout(getContext());
         relativeLayout.setGravity(Gravity.CENTER);
-        relativeLayout.setBackgroundColor(Color.BLACK);
+        relativeLayout.setBackgroundColor(Color.TRANSPARENT);
         relativeLayout.addView(mPreview);
         addView(relativeLayout);
 
-        mViewFinderView = createViewFinderView(getContext());
+
+        mViewFinderView = createViewFinderView(getContext(),mPreview.getOptimalPreviewSize());
+
         if (mViewFinderView instanceof View) {
             addView((View) mViewFinderView);
         } else {
             throw new IllegalArgumentException("IViewFinder object returned by " +
                     "'createViewFinderView()' should be instance of android.view.View");
         }
+
     }
 
     /**
@@ -50,10 +53,14 @@ public final void setupLayout() {
      * @param context {@link Context}
      * @return {@link android.view.View} that implements {@link ViewFinderView}
      */
-    protected IViewFinder createViewFinderView(Context context) {
+    protected ViewFinderView createViewFinderView(Context context) {
         return new ViewFinderView(context);
     }
 
+    protected ViewFinderView createViewFinderView(Context context,Camera.Size optimalSize) {
+        return new ViewFinderView(context,optimalSize);
+    }
+
     public void startCamera(int cameraId) {
         startCamera(CameraUtils.getCameraInstance(cameraId));
     }
@@ -64,6 +71,9 @@ public void startCamera(Camera camera) {
             mViewFinderView.setupViewFinder();
             mPreview.setCamera(mCamera, this);
             mPreview.initCameraPreview();
+
+            ((ViewFinderView)mViewFinderView).setOptimalSize(mPreview.getOptimalPreviewSize());
+
         }
     }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
index 5f42fe0..47fc2c8 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
@@ -21,10 +21,12 @@
 
     private Camera mCamera;
     private Handler mAutoFocusHandler;
-    private boolean mPreviewing = true;
-    private boolean mAutoFocus = true;
+    private boolean mPreviewing = false;
+    private boolean mAutoFocus = false;
     private boolean mSurfaceCreated = false;
     private Camera.PreviewCallback mPreviewCallback;
+    private ViewFinderView viewFinderView;
+
 
     public CameraPreview(Context context) {
         super(context);
@@ -38,14 +40,15 @@ public void setCamera(Camera camera, Camera.PreviewCallback previewCallback) {
         mCamera = camera;
         mPreviewCallback = previewCallback;
         mAutoFocusHandler = new Handler();
+
     }
 
     public void initCameraPreview() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             getHolder().addCallback(this);
-            getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
-            if(mPreviewing) {
+            if (!mPreviewing) {
                 requestLayout();
+
             } else {
                 showCameraPreview();
             }
@@ -59,7 +62,7 @@ public void surfaceCreated(SurfaceHolder surfaceHolder) {
 
     @Override
     public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
-        if(surfaceHolder.getSurface() == null) {
+        if (surfaceHolder.getSurface() == null) {
             return;
         }
         stopCameraPreview();
@@ -73,7 +76,7 @@ public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
     }
 
     public void showCameraPreview() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             try {
                 mPreviewing = true;
                 setupCameraParameters();
@@ -81,7 +84,7 @@ public void showCameraPreview() {
                 mCamera.setDisplayOrientation(getDisplayOrientation());
                 mCamera.setOneShotPreviewCallback(mPreviewCallback);
                 mCamera.startPreview();
-                if(mAutoFocus) {
+                if (mAutoFocus) {
                     if (mSurfaceCreated) { // check if surface created before using autofocus
                         safeAutoFocus();
                     } else {
@@ -105,13 +108,13 @@ public void safeAutoFocus() {
     }
 
     public void stopCameraPreview() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             try {
                 mPreviewing = false;
                 mCamera.cancelAutoFocus();
                 mCamera.setOneShotPreviewCallback(null);
                 mCamera.stopPreview();
-            } catch(Exception e) {
+            } catch (Exception e) {
                 Log.e(TAG, e.toString(), e);
             }
         }
@@ -130,6 +133,9 @@ private void adjustViewSize(Camera.Size cameraSize) {
         float cameraRatio = ((float) cameraSize.width) / cameraSize.height;
         float screenRatio = ((float) previewSize.x) / previewSize.y;
 
+
+        setViewSize(cameraSize.width, cameraSize.height);
+
         if (screenRatio > cameraRatio) {
             setViewSize((int) (previewSize.y * cameraRatio), previewSize.y);
         } else {
@@ -166,10 +172,18 @@ public int getDisplayOrientation() {
         int rotation = display.getRotation();
         int degrees = 0;
         switch (rotation) {
-            case Surface.ROTATION_0: degrees = 0; break;
-            case Surface.ROTATION_90: degrees = 90; break;
-            case Surface.ROTATION_180: degrees = 180; break;
-            case Surface.ROTATION_270: degrees = 270; break;
+            case Surface.ROTATION_0:
+                degrees = 0;
+                break;
+            case Surface.ROTATION_90:
+                degrees = 90;
+                break;
+            case Surface.ROTATION_180:
+                degrees = 180;
+                break;
+            case Surface.ROTATION_270:
+                degrees = 270;
+                break;
         }
 
         int result;
@@ -182,8 +196,9 @@ public int getDisplayOrientation() {
         return result;
     }
 
-    private Camera.Size getOptimalPreviewSize() {
-        if(mCamera == null) {
+    public Camera.Size getOptimalPreviewSize() {
+
+        if (mCamera == null) {
             return null;
         }
 
@@ -196,22 +211,34 @@ public int getDisplayOrientation() {
             w = portraitWidth;
         }
 
+        Camera.Size optimalSize = null;
+
         final double ASPECT_TOLERANCE = 0.1;
         double targetRatio = (double) w / h;
         if (sizes == null) return null;
 
-        Camera.Size optimalSize = null;
         double minDiff = Double.MAX_VALUE;
 
         int targetHeight = h;
 
         // Try to find an size match aspect ratio and size
         for (Camera.Size size : sizes) {
-            double ratio = (double) size.width / size.height;
+
+            int wi = size.width;
+            int he = size.height;
+
+            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+                int temp = wi;
+                wi = he;
+                he = temp;
+            }
+
+            double ratio = (double) he / (double) wi;
+
             if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
-            if (Math.abs(size.height - targetHeight) < minDiff) {
+            if (Math.abs(he - targetHeight) < minDiff) {
                 optimalSize = size;
-                minDiff = Math.abs(size.height - targetHeight);
+                minDiff = Math.abs(he - targetHeight);
             }
         }
 
@@ -225,16 +252,20 @@ public int getDisplayOrientation() {
                 }
             }
         }
+
+        if (viewFinderView != null)
+            viewFinderView.setOptimalSize(optimalSize);
+
         return optimalSize;
     }
 
     public void setAutoFocus(boolean state) {
-        if(mCamera != null && mPreviewing) {
-            if(state == mAutoFocus) {
+        if (mCamera != null && mPreviewing) {
+            if (state == mAutoFocus) {
                 return;
             }
             mAutoFocus = state;
-            if(mAutoFocus) {
+            if (mAutoFocus) {
                 if (mSurfaceCreated) { // check if surface created before using autofocus
                     Log.v(TAG, "Starting autofocus");
                     safeAutoFocus();
@@ -250,7 +281,7 @@ public void setAutoFocus(boolean state) {
 
     private Runnable doAutoFocus = new Runnable() {
         public void run() {
-            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
+            if (mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                 safeAutoFocus();
             }
         }
@@ -263,6 +294,11 @@ public void onAutoFocus(boolean success, Camera camera) {
         }
     };
 
+
+    public void setViewFinderView(ViewFinderView view) {
+        viewFinderView = view;
+    }
+
     private void scheduleAutoFocus() {
         mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index 743ecbc..bb7f2e5 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -6,9 +6,12 @@
 import android.graphics.Paint;
 import android.graphics.Point;
 import android.graphics.Rect;
+import android.hardware.Camera;
 import android.util.AttributeSet;
 import android.view.View;
 
+import java.util.List;
+
 public class ViewFinderView extends View implements IViewFinder {
     private static final String TAG = "ViewFinderView";
 
@@ -17,13 +20,13 @@
     private static final int MIN_FRAME_WIDTH = 240;
     private static final int MIN_FRAME_HEIGHT = 240;
 
-    private static final float LANDSCAPE_WIDTH_RATIO = 5f/8;
-    private static final float LANDSCAPE_HEIGHT_RATIO = 5f/8;
+    private static final float LANDSCAPE_WIDTH_RATIO = 5f / 8;
+    private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
     private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) (1920 * LANDSCAPE_WIDTH_RATIO); // = 5/8 * 1920
     private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) (1080 * LANDSCAPE_HEIGHT_RATIO); // = 5/8 * 1080
 
-    private static final float PORTRAIT_WIDTH_RATIO = 7f/8;
-    private static final float PORTRAIT_HEIGHT_RATIO = 3f/8;
+    private static final float PORTRAIT_WIDTH_RATIO = 7f / 8;
+    private static final float PORTRAIT_HEIGHT_RATIO = 3f / 8;
     private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 7/8 * 1080
     private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) (1920 * PORTRAIT_HEIGHT_RATIO); // = 3/8 * 1920
 
@@ -43,6 +46,9 @@
     protected Paint mBorderPaint;
     protected int mBorderLineLength;
 
+    private Camera.Size optimalSize;
+    private static Canvas currentCanvas;
+
     public ViewFinderView(Context context) {
         super(context);
         init();
@@ -53,6 +59,12 @@ public ViewFinderView(Context context, AttributeSet attrs) {
         init();
     }
 
+    public ViewFinderView(Context context, Camera.Size size) {
+        super(context);
+        optimalSize = size;
+        init();
+    }
+
     private void init() {
         //set up laser paint
         mLaserPaint = new Paint();
@@ -70,20 +82,25 @@ private void init() {
         mBorderPaint.setStrokeWidth(mDefaultBorderStrokeWidth);
 
         mBorderLineLength = mDefaultBorderLineLength;
+
     }
 
     public void setLaserColor(int laserColor) {
         mLaserPaint.setColor(laserColor);
     }
+
     public void setMaskColor(int maskColor) {
         mFinderMaskPaint.setColor(maskColor);
     }
+
     public void setBorderColor(int borderColor) {
         mBorderPaint.setColor(borderColor);
     }
+
     public void setBorderStrokeWidth(int borderStrokeWidth) {
         mBorderPaint.setStrokeWidth(borderStrokeWidth);
     }
+
     public void setBorderLineLength(int borderLineLength) {
         mBorderLineLength = borderLineLength;
     }
@@ -99,25 +116,42 @@ public Rect getFramingRect() {
 
     @Override
     public void onDraw(Canvas canvas) {
-        if(mFramingRect == null) {
+        if (mFramingRect == null) {
             return;
         }
 
+
         drawViewFinderMask(canvas);
         drawViewFinderBorder(canvas);
-        drawLaser(canvas);
+   //     drawLaser(canvas);
+
+        currentCanvas = canvas;
     }
 
     public void drawViewFinderMask(Canvas canvas) {
         int width = canvas.getWidth();
         int height = canvas.getHeight();
 
-        canvas.drawRect(0, 0, width, mFramingRect.top, mFinderMaskPaint);
-        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, mFinderMaskPaint);
-        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, mFinderMaskPaint);
-        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, mFinderMaskPaint);
+        if (optimalSize == null) {
+
+            int leftOfSet = (width - optimalSize.width);
+
+            canvas.drawRect(leftOfSet, 0, width - leftOfSet, mFramingRect.top, mFinderMaskPaint);
+            canvas.drawRect(leftOfSet, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, mFinderMaskPaint);
+            canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width - leftOfSet, mFramingRect.bottom + 1, mFinderMaskPaint);
+            canvas.drawRect(leftOfSet, mFramingRect.bottom + 1, width - leftOfSet, height , mFinderMaskPaint);
+
+        }else{
+
+            canvas.drawRect(0, 0, width, mFramingRect.top, mFinderMaskPaint);
+            canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, mFinderMaskPaint);
+            canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, mFinderMaskPaint);
+            canvas.drawRect(0, mFramingRect.bottom + 1, width, height , mFinderMaskPaint);
+        }
+
     }
 
+
     public void drawViewFinderBorder(Canvas canvas) {
         canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + mBorderLineLength, mBorderPaint);
         canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + mBorderLineLength, mFramingRect.top - 1, mBorderPaint);
@@ -157,12 +191,12 @@ public synchronized void updateFramingRect() {
         int height;
         int orientation = DisplayUtils.getScreenOrientation(getContext());
 
-        if(orientation != Configuration.ORIENTATION_PORTRAIT) {
-            width = findDesiredDimensionInRange(LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
+        if (orientation != Configuration.ORIENTATION_PORTRAIT) {
+            height = findDesiredDimensionInRange(0.95f, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
+            width = height;
         } else {
-            width = findDesiredDimensionInRange(PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT);
+            width = findDesiredDimensionInRange(0.95f, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
+            height = width;
         }
 
         int leftOffset = (viewResolution.x - width) / 2;
@@ -180,4 +214,9 @@ private static int findDesiredDimensionInRange(float ratio, int resolution, int
         }
         return dim;
     }
+
+    public void setOptimalSize(Camera.Size optimalSize) {
+        this.optimalSize = optimalSize;
+    }
+
 }
diff --git a/core/src/main/res/layout/merge_camera_preview_view_finder.xml b/core/src/main/res/layout/merge_camera_preview_view_finder.xml
index 8584c43..a91ad94 100644
--- a/core/src/main/res/layout/merge_camera_preview_view_finder.xml
+++ b/core/src/main/res/layout/merge_camera_preview_view_finder.xml
@@ -2,10 +2,10 @@
 <merge xmlns:android="http://schemas.android.com/apk/res/android">
     <me.dm7.barcodescannerview.CameraPreview
          android:id="@+id/camera_preview"
-         android:layout_width="fill_parent"
-         android:layout_height="fill_parent"/>
+         android:layout_width="wrap_content"
+         android:layout_height="wrap_content"/>
     <me.dm7.barcodescannerview.ViewFinderView
         android:id="@+id/view_finder_view"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content" />
 </merge>
