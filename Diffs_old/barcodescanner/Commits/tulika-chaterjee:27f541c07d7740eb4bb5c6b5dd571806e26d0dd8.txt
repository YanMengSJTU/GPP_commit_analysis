diff --git a/core/build.gradle b/core/build.gradle
deleted file mode 100644
index 3414884..0000000
--- a/core/build.gradle
+++ /dev/null
@@ -1,19 +0,0 @@
-apply plugin: 'android-library'
-
-ext {
-    isLibrary = true
-    pomPackaging = "aar"
-    pomArtifactId = "core"
-    pomName = "Barcode Scanner View"
-    pomDescription = 'An android library project which contains the core barcode scanner view'
-}
-
-dependencies {
-    compile supportLibraryDependency
-}
-
-android {
-    defaultConfig {
-        //applicationId "${project.group}.core"
-    }
-}
diff --git a/core/src/main/res/layout/merge_camera_preview_view_finder.xml b/core/src/main/res/layout/merge_camera_preview_view_finder.xml
deleted file mode 100644
index 8584c43..0000000
--- a/core/src/main/res/layout/merge_camera_preview_view_finder.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<merge xmlns:android="http://schemas.android.com/apk/res/android">
-    <me.dm7.barcodescannerview.CameraPreview
-         android:id="@+id/camera_preview"
-         android:layout_width="fill_parent"
-         android:layout_height="fill_parent"/>
-    <me.dm7.barcodescannerview.ViewFinderView
-        android:id="@+id/view_finder_view"
-        android:layout_width="fill_parent"
-        android:layout_height="fill_parent" />
-</merge>
diff --git a/core/src/main/res/values-hdpi/strings.xml b/core/src/main/res/values-hdpi/strings.xml
deleted file mode 100644
index d5979ca..0000000
--- a/core/src/main/res/values-hdpi/strings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <integer name="viewfinder_border_width">4</integer>
-    <integer name="viewfinder_border_length">60</integer>
-</resources>
\ No newline at end of file
diff --git a/core/src/main/res/values-xhdpi/strings.xml b/core/src/main/res/values-xhdpi/strings.xml
deleted file mode 100644
index 7f57b00..0000000
--- a/core/src/main/res/values-xhdpi/strings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <integer name="viewfinder_border_width">5</integer>
-    <integer name="viewfinder_border_length">80</integer>
-</resources>
\ No newline at end of file
diff --git a/core/src/main/res/values-xxhdpi/strings.xml b/core/src/main/res/values-xxhdpi/strings.xml
deleted file mode 100644
index d69e2a8..0000000
--- a/core/src/main/res/values-xxhdpi/strings.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <integer name="viewfinder_border_width">6</integer>
-    <integer name="viewfinder_border_length">100</integer>
-</resources>
\ No newline at end of file
diff --git a/core/src/main/res/values/colors.xml b/core/src/main/res/values/colors.xml
deleted file mode 100644
index 58c019a..0000000
--- a/core/src/main/res/values/colors.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<resources>
-    <color name="viewfinder_mask">#60000000</color>
-    <color name="viewfinder_laser">#ffcc0000</color>
-    <color name="viewfinder_border">#ffafed44</color>
-</resources>
\ No newline at end of file
diff --git a/core/src/main/res/values/strings.xml b/core/src/main/res/values/strings.xml
deleted file mode 100644
index 9cfbb9e..0000000
--- a/core/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,4 +0,0 @@
-<resources>    
-    <integer name="viewfinder_border_width">4</integer>
-    <integer name="viewfinder_border_length">60</integer>
-</resources>
diff --git a/project/Build.scala b/project/Build.scala
index 0fb6ac0..d73eb1f 100644
--- a/project/Build.scala
+++ b/project/Build.scala
@@ -10,11 +10,9 @@ extends	android.AutoBuild
 	lazy val main = Project( "barcode-scanner", file( "." ) )
 		.settings( androidBuildAar: _* )
 		.settings(
-			libraryDependencies ++= Seq(
-				"com.google.zxing" % "core" % "3.1.0"
-			),
-			name := "Toolbelt",
-			organization := "com.taig.android.barcode.scanner",
+			libraryDependencies += "com.google.zxing" % "core" % "3.1.0",
+			name := "Barcode Scanner",
+			organization := "com.taig.android",
 			publishArtifact in ( Compile, packageDoc ) := false,
 			publishArtifact in ( Compile, packageSrc ) := true,
 			scalaVersion := "2.11.5",
diff --git a/src/main/com/taig/android/barcode/scanner/widget/Crosshair.scala b/src/main/com/taig/android/barcode/scanner/widget/Crosshair.scala
new file mode 100644
index 0000000..1e4aae6
--- /dev/null
+++ b/src/main/com/taig/android/barcode/scanner/widget/Crosshair.scala
@@ -0,0 +1,26 @@
+package com.taig.android.barcode.scanner.widget
+
+import android.content.Context
+import android.util.AttributeSet
+import android.view.View
+import android.view.View.MeasureSpec
+
+class	Crosshair( attributes: AttributeSet = null, style: Int = 0 )( implicit context: Context )
+extends	View( context, attributes, style )
+{
+	def this( context: Context ) = this()( context )
+
+	def this( context: Context, attributes: AttributeSet ) = this( attributes )( context )
+
+	def this( context: Context, attributes: AttributeSet, style: Int ) = this( attributes, style )( context )
+
+	override def onMeasure( width: Int, height: Int ) =
+	{
+		val size = math.min( MeasureSpec.getSize( width ), MeasureSpec.getSize( height ) )
+
+		super.onMeasure(
+			MeasureSpec.makeMeasureSpec( size, MeasureSpec.EXACTLY ),
+			MeasureSpec.makeMeasureSpec( size, MeasureSpec.EXACTLY )
+		)
+	}
+}
\ No newline at end of file
diff --git a/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java b/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
index facfb6d..aa53367 100644
--- a/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
+++ b/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
@@ -1,45 +1,110 @@
 package com.taig.android.barcode.scanner;
 
 import android.content.Context;
-import android.graphics.Point;
+import android.content.res.Configuration;
+import android.content.res.TypedArray;
 import android.graphics.Rect;
 import android.hardware.Camera;
 import android.util.AttributeSet;
+import android.view.LayoutInflater;
+import android.view.View;
 import android.widget.FrameLayout;
+import com.google.zxing.*;
+import com.google.zxing.common.HybridBinarizer;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback
+import java.util.*;
+
+public class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback
 {
+	public interface ResultHandler
+	{
+		public void handleResult( Result rawResult );
+	}
+
+	public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
+
+	static
+	{
+		ALL_FORMATS.add( BarcodeFormat.UPC_A );
+		ALL_FORMATS.add( BarcodeFormat.UPC_E );
+		ALL_FORMATS.add( BarcodeFormat.EAN_13 );
+		ALL_FORMATS.add( BarcodeFormat.EAN_8 );
+		ALL_FORMATS.add( BarcodeFormat.RSS_14 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_39 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_93 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_128 );
+		ALL_FORMATS.add( BarcodeFormat.ITF );
+		ALL_FORMATS.add( BarcodeFormat.CODABAR );
+		ALL_FORMATS.add( BarcodeFormat.QR_CODE );
+		ALL_FORMATS.add( BarcodeFormat.DATA_MATRIX );
+		ALL_FORMATS.add( BarcodeFormat.PDF_417 );
+	}
+
 	private Camera mCamera;
+
 	private CameraPreview mPreview;
-	private Hud mHud;
-	private Rect mFramingRectInPreview;
+
+	private View mHud;
+
+	private View mCrosshair;
+
+	private int[] mCrosshairPosition = new int[2];
+
+	private Rect mCrosshairArea = new Rect();
+
+	private MultiFormatReader mMultiFormatReader;
+
+	private List<BarcodeFormat> mFormats;
+
+	private ResultHandler mResultHandler;
 
 	public BarcodeScannerView( Context context )
 	{
-		super( context );
-		setupLayout();
+		this( context, null );
 	}
 
-	public BarcodeScannerView( Context context, AttributeSet attributeSet )
+	public BarcodeScannerView( Context context, AttributeSet attributes )
 	{
-		super( context, attributeSet );
-		setupLayout();
-	}
+		super( context, attributes );
+
+		TypedArray array = getContext()
+			.getTheme()
+			.obtainStyledAttributes( attributes, R.styleable.Hud, 0, 0 );
+
+		try
+		{
+			mHud = LayoutInflater
+				.from( getContext() )
+				.inflate( array.getResourceId( R.styleable.Hud_hud, R.layout.hud ), this, false );
+		}
+		finally
+		{
+			array.recycle();
+		}
 
-	public void setupLayout()
-	{
 		mPreview = new CameraPreview( getContext() );
-		mHud = new Hud( getContext() );
+		mCrosshair = mHud.findViewById( R.id.crosshair );
+
 		addView( mPreview );
 		addView( mHud );
+
+		initMultiFormatReader();
+	}
+
+	private void initMultiFormatReader()
+	{
+		Map<DecodeHintType, Object> hints = new EnumMap<DecodeHintType, Object>( DecodeHintType.class );
+		hints.put( DecodeHintType.POSSIBLE_FORMATS, getFormats() );
+		mMultiFormatReader = new MultiFormatReader();
+		mMultiFormatReader.setHints( hints );
 	}
 
 	public void startCamera()
 	{
 		mCamera = CameraUtils.getCameraInstance();
+
 		if( mCamera != null )
 		{
-			mHud.setupViewFinder();
 			mPreview.setCamera( mCamera, this );
 			mPreview.initCameraPreview();
 		}
@@ -56,46 +121,19 @@ public void stopCamera()
 		}
 	}
 
-	public synchronized Rect getFramingRectInPreview( int width, int height )
-	{
-		if( mFramingRectInPreview == null )
-		{
-			Rect framingRect = mHud.getFramingRect();
-			if( framingRect == null )
-			{
-				return null;
-			}
-			Rect rect = new Rect( framingRect );
-			Point screenResolution = DisplayUtils.getScreenResolution( getContext() );
-			Point cameraResolution = new Point( width, height );
-
-			if( cameraResolution == null || screenResolution == null )
-			{
-				// Called early, before init even finished
-				return null;
-			}
-
-			rect.left = rect.left * cameraResolution.x / screenResolution.x;
-			rect.right = rect.right * cameraResolution.x / screenResolution.x;
-			rect.top = rect.top * cameraResolution.y / screenResolution.y;
-			rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;
-
-			mFramingRectInPreview = rect;
-		}
-		return mFramingRectInPreview;
-	}
-
 	public void setFlash( boolean flag )
 	{
 		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
 		{
 			Camera.Parameters parameters = mCamera.getParameters();
+
 			if( flag )
 			{
 				if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
 				{
 					return;
 				}
+
 				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_TORCH );
 			}
 			else
@@ -104,8 +142,10 @@ public void setFlash( boolean flag )
 				{
 					return;
 				}
+
 				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_OFF );
 			}
+
 			mCamera.setParameters( parameters );
 		}
 	}
@@ -114,16 +154,12 @@ public boolean getFlash()
 	{
 		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
 		{
-			Camera.Parameters parameters = mCamera.getParameters();
-			if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
-			{
-				return true;
-			}
-			else
-			{
-				return false;
-			}
+			return mCamera
+				.getParameters()
+				.getFlashMode()
+				.equals( Camera.Parameters.FLASH_MODE_TORCH );
 		}
+
 		return false;
 	}
 
@@ -132,6 +168,7 @@ public void toggleFlash()
 		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
 		{
 			Camera.Parameters parameters = mCamera.getParameters();
+
 			if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
 			{
 				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_OFF );
@@ -140,6 +177,7 @@ public void toggleFlash()
 			{
 				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_TORCH );
 			}
+
 			mCamera.setParameters( parameters );
 		}
 	}
@@ -151,4 +189,137 @@ public void setAutoFocus( boolean state )
 			mPreview.setAutoFocus( state );
 		}
 	}
+
+	public void setFormats( List<BarcodeFormat> formats )
+	{
+		mFormats = formats;
+		initMultiFormatReader();
+	}
+
+	public void setResultHandler( ResultHandler resultHandler )
+	{
+		mResultHandler = resultHandler;
+	}
+
+	public Collection<BarcodeFormat> getFormats()
+	{
+		if( mFormats == null )
+		{
+			return ALL_FORMATS;
+		}
+
+		return mFormats;
+	}
+
+	@Override
+	public void onPreviewFrame( byte[] data, Camera camera )
+	{
+		Camera.Parameters parameters = camera.getParameters();
+		Camera.Size size = parameters.getPreviewSize();
+		int width = size.width;
+		int height = size.height;
+
+		if( DisplayUtils.getScreenOrientation( getContext() ) == Configuration.ORIENTATION_PORTRAIT )
+		{
+			byte[] rotatedData = new byte[data.length];
+
+			for( int y = 0; y < height; y++ )
+			{
+				for( int x = 0; x < width; x++ )
+				{
+					rotatedData[x * height + height - y - 1] = data[x + y * width];
+				}
+			}
+
+			int tmp = width;
+			width = height;
+			height = tmp;
+			data = rotatedData;
+		}
+
+		Result rawResult = null;
+		PlanarYUVLuminanceSource source = buildLuminanceSource( data, width, height );
+
+		if( source != null )
+		{
+			BinaryBitmap bitmap = new BinaryBitmap( new HybridBinarizer( source ) );
+
+			try
+			{
+				rawResult = mMultiFormatReader.decodeWithState( bitmap );
+			}
+			catch( Exception exception )
+			{
+				// I've got no idea
+			}
+			finally
+			{
+				mMultiFormatReader.reset();
+			}
+		}
+
+		if( rawResult != null )
+		{
+			stopCamera();
+
+			if( mResultHandler != null )
+			{
+				mResultHandler.handleResult( rawResult );
+			}
+		}
+		else
+		{
+			camera.setOneShotPreviewCallback( this );
+		}
+	}
+
+	public PlanarYUVLuminanceSource buildLuminanceSource( byte[] data, int width, int height )
+	{
+		if( mCrosshair == null )
+		{
+			mCrosshairArea.set( 0, 0, width, height );
+		}
+		else
+		{
+			mCrosshair.getLocationOnScreen( mCrosshairPosition );
+
+			// TODO scale up camera preview while maintain proportions
+			// TODO migrate to new camera api
+			// TODO make this more efficient
+			int displayWidth = mPreview.getWidth();
+			int displayHeight = mPreview.getHeight();
+			float scaleX = width / (float) displayWidth;
+			float scaleY = height / (float) displayHeight;
+
+			mCrosshairArea.set(
+				(int) ( mCrosshairPosition[0] * scaleX ),
+				(int) ( mCrosshairPosition[1] * scaleY ),
+				(int) ( ( mCrosshairPosition[0] + mCrosshair.getWidth() ) * scaleX ),
+				(int) ( ( mCrosshairPosition[1] + mCrosshair.getHeight() ) * scaleY )
+			);
+		}
+
+		// Go ahead and assume it's YUV rather than die.
+		PlanarYUVLuminanceSource source = null;
+
+		try
+		{
+			source = new PlanarYUVLuminanceSource(
+				data,
+				width,
+				height,
+				mCrosshairArea.left,
+				mCrosshairArea.top,
+				mCrosshairArea.width(),
+				mCrosshairArea.height(),
+				false
+			);
+		}
+		catch( Exception e )
+		{
+			// I've got no idea
+		}
+
+		return source;
+	}
 }
diff --git a/src/main/java/com/taig/android/barcode/scanner/Hud.java b/src/main/java/com/taig/android/barcode/scanner/Hud.java
deleted file mode 100644
index 8fe1243..0000000
--- a/src/main/java/com/taig/android/barcode/scanner/Hud.java
+++ /dev/null
@@ -1,173 +0,0 @@
-package com.taig.android.barcode.scanner;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.util.AttributeSet;
-import android.view.View;
-
-public class Hud extends View
-{
-	private static final String TAG = "ViewFinderView";
-
-	private Rect mFramingRect;
-
-	private static final int MIN_FRAME_WIDTH = 240;
-	private static final int MIN_FRAME_HEIGHT = 240;
-
-	private static final float LANDSCAPE_WIDTH_RATIO = 5f / 8;
-	private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
-	private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) ( 1920 * LANDSCAPE_WIDTH_RATIO ); // = 5/8 * 1920
-	private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) ( 1080 * LANDSCAPE_HEIGHT_RATIO ); // = 5/8 * 1080
-
-	private static final float PORTRAIT_WIDTH_RATIO = 7f / 8;
-	private static final float PORTRAIT_HEIGHT_RATIO = 3f / 8;
-	private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) ( 1080 * PORTRAIT_WIDTH_RATIO ); // = 7/8 * 1080
-	private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) ( 1920 * PORTRAIT_HEIGHT_RATIO ); // = 3/8 * 1920
-
-	private static final int[] SCANNER_ALPHA = { 0, 64, 128, 192, 255, 192, 128, 64 };
-	private int scannerAlpha;
-	private static final int POINT_SIZE = 10;
-	private static final long ANIMATION_DELAY = 80l;
-
-	public Hud( Context context )
-	{
-		super( context );
-	}
-
-	public Hud( Context context, AttributeSet attrs )
-	{
-		super( context, attrs );
-	}
-
-	public void setupViewFinder()
-	{
-		updateFramingRect();
-		invalidate();
-	}
-
-	public Rect getFramingRect()
-	{
-		return mFramingRect;
-	}
-
-	@Override
-	public void onDraw( Canvas canvas )
-	{
-		if( mFramingRect == null )
-		{
-			return;
-		}
-
-		drawViewFinderMask( canvas );
-		drawViewFinderBorder( canvas );
-		drawLaser( canvas );
-	}
-
-	public void drawViewFinderMask( Canvas canvas )
-	{
-		Paint paint = new Paint();
-		Resources resources = getResources();
-		paint.setColor( resources.getColor( R.color.viewfinder_mask ) );
-
-		int width = canvas.getWidth();
-		int height = canvas.getHeight();
-
-		canvas.drawRect( 0, 0, width, mFramingRect.top, paint );
-		canvas.drawRect( 0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint );
-		canvas.drawRect( mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint );
-		canvas.drawRect( 0, mFramingRect.bottom + 1, width, height, paint );
-	}
-
-	public void drawViewFinderBorder( Canvas canvas )
-	{
-		Paint paint = new Paint();
-		Resources resources = getResources();
-		paint.setColor( resources.getColor( R.color.viewfinder_border ) );
-		paint.setStyle( Paint.Style.STROKE );
-		paint.setStrokeWidth( resources.getInteger( R.integer.viewfinder_border_width ) );
-		int lineLength = resources.getInteger( R.integer.viewfinder_border_length );
-
-		canvas.drawLine( mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint );
-		canvas.drawLine( mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint );
-
-		canvas.drawLine( mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint );
-		canvas.drawLine( mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint );
-
-		canvas.drawLine( mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint );
-		canvas.drawLine( mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint );
-
-		canvas.drawLine( mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint );
-		canvas.drawLine( mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint );
-	}
-
-	public void drawLaser( Canvas canvas )
-	{
-		Paint paint = new Paint();
-		Resources resources = getResources();
-		// Draw a red "laser scanner" line through the middle to show decoding is active
-		paint.setColor( resources.getColor( R.color.viewfinder_laser ) );
-		paint.setAlpha( SCANNER_ALPHA[scannerAlpha] );
-		paint.setStyle( Paint.Style.FILL );
-		scannerAlpha = ( scannerAlpha + 1 ) % SCANNER_ALPHA.length;
-		int middle = mFramingRect.height() / 2 + mFramingRect.top;
-		canvas.drawRect( mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, paint );
-
-		postInvalidateDelayed( ANIMATION_DELAY,
-			mFramingRect.left - POINT_SIZE,
-			mFramingRect.top - POINT_SIZE,
-			mFramingRect.right + POINT_SIZE,
-			mFramingRect.bottom + POINT_SIZE );
-	}
-
-	@Override
-	protected void onSizeChanged( int xNew, int yNew, int xOld, int yOld )
-	{
-		updateFramingRect();
-	}
-
-	public synchronized void updateFramingRect()
-	{
-		Point viewResolution = new Point( getWidth(), getHeight() );
-		if( viewResolution == null )
-		{
-			return;
-		}
-		int width;
-		int height;
-		int orientation = DisplayUtils.getScreenOrientation( getContext() );
-
-		if( orientation != Configuration.ORIENTATION_PORTRAIT )
-		{
-			width = findDesiredDimensionInRange( LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH );
-			height = findDesiredDimensionInRange( LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT );
-		}
-		else
-		{
-			width = findDesiredDimensionInRange( PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH );
-			height = findDesiredDimensionInRange( PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT );
-		}
-
-		int leftOffset = ( viewResolution.x - width ) / 2;
-		int topOffset = ( viewResolution.y - height ) / 2;
-		mFramingRect = new Rect( leftOffset, topOffset, leftOffset + width, topOffset + height );
-	}
-
-	private static int findDesiredDimensionInRange( float ratio, int resolution, int hardMin, int hardMax )
-	{
-		int dim = (int) ( ratio * resolution );
-		if( dim < hardMin )
-		{
-			return hardMin;
-		}
-		if( dim > hardMax )
-		{
-			return hardMax;
-		}
-		return dim;
-	}
-}
diff --git a/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java b/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java
deleted file mode 100644
index d588fd1..0000000
--- a/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java
+++ /dev/null
@@ -1,167 +0,0 @@
-package com.taig.android.barcode.scanner;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Rect;
-import android.hardware.Camera;
-import android.util.AttributeSet;
-import com.google.zxing.*;
-import com.google.zxing.common.HybridBinarizer;
-
-import java.util.*;
-
-public class ZXingScannerView extends BarcodeScannerView
-{
-	public interface ResultHandler
-	{
-		public void handleResult( Result rawResult );
-	}
-
-	private MultiFormatReader mMultiFormatReader;
-	public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
-	private List<BarcodeFormat> mFormats;
-	private ResultHandler mResultHandler;
-
-	static
-	{
-		ALL_FORMATS.add( BarcodeFormat.UPC_A );
-		ALL_FORMATS.add( BarcodeFormat.UPC_E );
-		ALL_FORMATS.add( BarcodeFormat.EAN_13 );
-		ALL_FORMATS.add( BarcodeFormat.EAN_8 );
-		ALL_FORMATS.add( BarcodeFormat.RSS_14 );
-		ALL_FORMATS.add( BarcodeFormat.CODE_39 );
-		ALL_FORMATS.add( BarcodeFormat.CODE_93 );
-		ALL_FORMATS.add( BarcodeFormat.CODE_128 );
-		ALL_FORMATS.add( BarcodeFormat.ITF );
-		ALL_FORMATS.add( BarcodeFormat.CODABAR );
-		ALL_FORMATS.add( BarcodeFormat.QR_CODE );
-		ALL_FORMATS.add( BarcodeFormat.DATA_MATRIX );
-		ALL_FORMATS.add( BarcodeFormat.PDF_417 );
-	}
-
-	public ZXingScannerView( Context context )
-	{
-		super( context );
-		initMultiFormatReader();
-	}
-
-	public ZXingScannerView( Context context, AttributeSet attributeSet )
-	{
-		super( context, attributeSet );
-		initMultiFormatReader();
-	}
-
-	public void setFormats( List<BarcodeFormat> formats )
-	{
-		mFormats = formats;
-		initMultiFormatReader();
-	}
-
-	public void setResultHandler( ResultHandler resultHandler )
-	{
-		mResultHandler = resultHandler;
-	}
-
-	public Collection<BarcodeFormat> getFormats()
-	{
-		if( mFormats == null )
-		{
-			return ALL_FORMATS;
-		}
-		return mFormats;
-	}
-
-	private void initMultiFormatReader()
-	{
-		Map<DecodeHintType, Object> hints = new EnumMap<DecodeHintType, Object>( DecodeHintType.class );
-		hints.put( DecodeHintType.POSSIBLE_FORMATS, getFormats() );
-		mMultiFormatReader = new MultiFormatReader();
-		mMultiFormatReader.setHints( hints );
-	}
-
-	@Override
-	public void onPreviewFrame( byte[] data, Camera camera )
-	{
-		Camera.Parameters parameters = camera.getParameters();
-		Camera.Size size = parameters.getPreviewSize();
-		int width = size.width;
-		int height = size.height;
-
-		if( DisplayUtils.getScreenOrientation( getContext() ) == Configuration.ORIENTATION_PORTRAIT )
-		{
-			byte[] rotatedData = new byte[data.length];
-			for( int y = 0; y < height; y++ )
-			{
-				for( int x = 0; x < width; x++ )
-					rotatedData[x * height + height - y - 1] = data[x + y * width];
-			}
-			int tmp = width;
-			width = height;
-			height = tmp;
-			data = rotatedData;
-		}
-
-		Result rawResult = null;
-		PlanarYUVLuminanceSource source = buildLuminanceSource( data, width, height );
-
-		if( source != null )
-		{
-			BinaryBitmap bitmap = new BinaryBitmap( new HybridBinarizer( source ) );
-			try
-			{
-				rawResult = mMultiFormatReader.decodeWithState( bitmap );
-			}
-			catch( ReaderException re )
-			{
-				// continue
-			}
-			catch( NullPointerException npe )
-			{
-				// This is terrible
-			}
-			catch( ArrayIndexOutOfBoundsException aoe )
-			{
-
-			}
-			finally
-			{
-				mMultiFormatReader.reset();
-			}
-		}
-
-		if( rawResult != null )
-		{
-			stopCamera();
-			if( mResultHandler != null )
-			{
-				mResultHandler.handleResult( rawResult );
-			}
-		}
-		else
-		{
-			camera.setOneShotPreviewCallback( this );
-		}
-	}
-
-	public PlanarYUVLuminanceSource buildLuminanceSource( byte[] data, int width, int height )
-	{
-		Rect rect = getFramingRectInPreview( width, height );
-		if( rect == null )
-		{
-			return null;
-		}
-		// Go ahead and assume it's YUV rather than die.
-		PlanarYUVLuminanceSource source = null;
-
-		try
-		{
-			source = new PlanarYUVLuminanceSource( data, width, height, rect.left, rect.top,
-				rect.width(), rect.height(), false );
-		}
-		catch( Exception e )
-		{
-		}
-
-		return source;
-	}
-}
\ No newline at end of file
diff --git a/src/main/res/drawable/dashed.xml b/src/main/res/drawable/dashed.xml
new file mode 100644
index 0000000..5dcd9bd
--- /dev/null
+++ b/src/main/res/drawable/dashed.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+
+	<item android:top="2dp"
+		  android:left="2dp">
+
+		<shape android:shape="oval">
+
+			<stroke
+				android:color="#3f000000"
+				android:width="6dp"
+				android:dashWidth="25dp"
+				android:dashGap="25dp" />
+
+		</shape>
+
+	</item>
+
+	<item android:bottom="2dp"
+		  android:right="2dp">
+
+		<shape android:shape="oval">
+
+			<stroke
+				android:color="@android:color/white"
+				android:width="6dp"
+				android:dashWidth="25dp"
+				android:dashGap="25dp" />
+
+		</shape>
+
+	</item>
+
+</layer-list>
\ No newline at end of file
diff --git a/src/main/res/layout-land/hud.xml b/src/main/res/layout-land/hud.xml
new file mode 100644
index 0000000..12d17bd
--- /dev/null
+++ b/src/main/res/layout-land/hud.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+			  android:layout_width="match_parent"
+			  android:layout_height="match_parent"
+			  android:gravity="center"
+			  android:orientation="vertical"
+			  android:weightSum="1">
+
+	<com.taig.android.barcode.scanner.widget.Crosshair
+		android:layout_width="wrap_content"
+		android:layout_height="0dp"
+		android:layout_weight="0.6"
+		android:background="@drawable/dashed"
+		android:layerType="software" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/src/main/res/layout/hud.xml b/src/main/res/layout/hud.xml
new file mode 100644
index 0000000..7463e41
--- /dev/null
+++ b/src/main/res/layout/hud.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+			  android:layout_width="match_parent"
+			  android:layout_height="match_parent"
+			  android:gravity="center"
+			  android:orientation="horizontal"
+			  android:weightSum="1">
+
+	<com.taig.android.barcode.scanner.widget.Crosshair
+		android:layout_width="0dp"
+		android:layout_height="wrap_content"
+		android:layout_weight="0.6"
+		android:background="@drawable/dashed"
+		android:layerType="software" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/src/main/res/values/attrs.xml b/src/main/res/values/attrs.xml
new file mode 100644
index 0000000..95113be
--- /dev/null
+++ b/src/main/res/values/attrs.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+	<declare-styleable name="Hud">
+
+		<attr name="hud"
+			  format="reference" />
+
+	</declare-styleable>
+
+</resources>
\ No newline at end of file
diff --git a/src/main/res/values/ids.xml b/src/main/res/values/ids.xml
new file mode 100644
index 0000000..fd0fe14
--- /dev/null
+++ b/src/main/res/values/ids.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<resources>
+
+	<item name="crosshair"
+		  type="id" />
+
+</resources>
\ No newline at end of file
