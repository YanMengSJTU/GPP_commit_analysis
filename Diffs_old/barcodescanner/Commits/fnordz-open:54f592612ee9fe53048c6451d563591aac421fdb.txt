diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 86929ac..d77925d 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -90,6 +90,10 @@ public void stopCamera() {
         }
     }
 
+    public boolean isCameraReleased() {
+        return mCamera == null;
+    }
+
     public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHeight) {
         if (mFramingRectInPreview == null) {
             Rect framingRect = mViewFinderView.getFramingRect();
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
index 8b66caf..328cc68 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
@@ -30,6 +30,8 @@
 
     private static final int REQUEST_CAMERA_PERMISSION = 123;
 
+    public static final String EXTRA_RAW_TEXT = "extra_raw_text";
+
     public static final String MESSAGE_INFO = "messageinfo";
     public static final String SKIP_TITLE = "skiptitle";
     public static final String MESSAGE = "message";
@@ -164,6 +166,15 @@ private void initViews(Bundle state) {
         }
     }
 
+    @Override
+    protected void onSaveInstanceState(Bundle outState) {
+        outState.putBoolean(FLASH_STATE, mFlash);
+        outState.putBoolean(AUTO_FOCUS_STATE, mAutoFocus);
+        outState.putIntegerArrayList(SELECTED_FORMATS, mSelectedIndices);
+        outState.putInt(CAMERA_ID, mCameraId);
+        super.onSaveInstanceState(outState);
+    }
+
     private void initCamera() {
         mScannerView.startCamera(-1);
         mScannerView.setAutoFocus(mAutoFocus);
@@ -172,15 +183,16 @@ private void initCamera() {
     }
 
     @Override
-    public void handleResult(Result rawResult) {
+    public boolean handleResult(Result rawResult) {
 
         Intent i = new Intent();
         i.setData(Uri.parse(rawResult.getText()));
-
+        i.putExtra(EXTRA_RAW_TEXT, rawResult.getText());
         setResult(RESULT_GET_MESSAGE, i);
 
         finish();
 
+        return true;
     }
 
     public void setupFormats() {
diff --git a/core/src/main/java/zxing/ZXingScannerView.java b/core/src/main/java/zxing/ZXingScannerView.java
index c0da36d..51c0c0a 100644
--- a/core/src/main/java/zxing/ZXingScannerView.java
+++ b/core/src/main/java/zxing/ZXingScannerView.java
@@ -4,6 +4,7 @@
 import android.content.res.Configuration;
 import android.graphics.Rect;
 import android.hardware.Camera;
+import android.os.Handler;
 import android.util.AttributeSet;
 
 import com.google.zxing.BarcodeFormat;
@@ -27,7 +28,7 @@
 
 public class ZXingScannerView extends BarcodeScannerView {
     public interface ResultHandler {
-        public void handleResult(Result rawResult);
+        boolean handleResult(Result rawResult);
     }
 
     private MultiFormatReader mMultiFormatReader;
@@ -71,27 +72,27 @@ public void setResultHandler(ResultHandler resultHandler) {
     }
 
     public Collection<BarcodeFormat> getFormats() {
-        if(mFormats == null) {
+        if (mFormats == null) {
             return ALL_FORMATS;
         }
         return mFormats;
     }
 
     private void initMultiFormatReader() {
-        Map<DecodeHintType,Object> hints = new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
+        Map<DecodeHintType, Object> hints = new EnumMap<DecodeHintType, Object>(DecodeHintType.class);
         hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
         mMultiFormatReader = new MultiFormatReader();
         mMultiFormatReader.setHints(hints);
     }
 
     @Override
-    public void onPreviewFrame(byte[] data, Camera camera) {
+    public void onPreviewFrame(byte[] data, final Camera camera) {
         Camera.Parameters parameters = camera.getParameters();
         Camera.Size size = parameters.getPreviewSize();
         int width = size.width;
         int height = size.height;
 
-        if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+        if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
             byte[] rotatedData = new byte[data.length];
             for (int y = 0; y < height; y++) {
                 for (int x = 0; x < width; x++)
@@ -106,7 +107,7 @@ public void onPreviewFrame(byte[] data, Camera camera) {
         Result rawResult = null;
         PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
 
-        if(source != null) {
+        if (source != null) {
             BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
             try {
                 rawResult = mMultiFormatReader.decodeWithState(bitmap);
@@ -122,9 +123,25 @@ public void onPreviewFrame(byte[] data, Camera camera) {
         }
 
         if (rawResult != null) {
-            stopCamera();
-            if(mResultHandler != null) {
-                mResultHandler.handleResult(rawResult);
+            if (mResultHandler != null) {
+                if (mResultHandler.handleResult(rawResult)) {
+                    //No need to automatically stop the camera as it will (SHOULD!) be done on the onPause() events of activities or fragments using this view
+                    stopCamera();
+                } else {
+                    new Handler().postDelayed(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (mMultiFormatReader != null
+                                    && camera != null
+                                    && getContext() != null
+                                    && !isCameraReleased()) {
+                                initMultiFormatReader();
+                                camera.setOneShotPreviewCallback(ZXingScannerView.this);
+                            }
+                        }
+                    }, 2000);
+
+                }
             }
         } else {
             camera.setOneShotPreviewCallback(this);
@@ -142,7 +159,7 @@ public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int
         try {
             source = new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
                     rect.width(), rect.height(), false);
-        } catch(Exception e) {
+        } catch (Exception e) {
         }
 
         return source;
