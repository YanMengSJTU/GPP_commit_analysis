diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 3d302ef..9d86afb 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -4,13 +4,21 @@
 import android.graphics.Color;
 import android.graphics.Rect;
 import android.hardware.Camera;
+import android.os.Build;
 import android.util.AttributeSet;
 import android.view.Gravity;
 import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewTreeObserver;
+import android.view.animation.Animation;
+import android.view.animation.LinearInterpolator;
+import android.view.animation.TranslateAnimation;
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback {
+
+    private static final int SCANNER_LINE_HEIGHT = 9;
     private Camera mCamera;
     private CameraPreview mPreview;
     private IViewFinder mViewFinderView;
@@ -18,6 +26,7 @@
     private CameraHandlerThread mCameraHandlerThread;
     private Boolean mFlashState;
     private boolean mAutofocusState = true;
+    private boolean showScannerLine = false;
 
     public BarcodeScannerView(Context context) {
         super(context);
@@ -40,10 +49,53 @@ public final void setupLayout(Camera camera) {
         mViewFinderView = createViewFinderView(getContext());
         if (mViewFinderView instanceof View) {
             addView((View) mViewFinderView);
+
+            if (showScannerLine) {
+                getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
+                    @Override
+                    public void onGlobalLayout() {
+                        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
+                            getViewTreeObserver().removeGlobalOnLayoutListener(this);
+                        } else {
+                            getViewTreeObserver().removeOnGlobalLayoutListener(this);
+                        }
+                        setScannerLine();
+                    }
+                });
+            }
+
         } else {
             throw new IllegalArgumentException("IViewFinder object returned by " +
                     "'createViewFinderView()' should be instance of android.view.View");
         }
+
+    }
+
+    private void setScannerLine() {
+        Rect rect = mViewFinderView.getFramingRect();
+        int padding = MyViewFinderView.BORDER_STROKE_WIDTH;
+        FrameLayout frameLayout = new FrameLayout(getContext());
+        LayoutParams layoutParams = new LayoutParams(rect.width() - padding * 2, rect.height() - padding * 2);
+        layoutParams.gravity = Gravity.CENTER;
+        frameLayout.setLayoutParams(layoutParams);
+
+        final View scannerLine = new View(getContext());
+        scannerLine.setBackgroundColor(Color.parseColor("#FE863D"));
+        scannerLine.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, SCANNER_LINE_HEIGHT));
+        frameLayout.addView(scannerLine);
+
+        addView(frameLayout);
+
+        final Animation mAnimation = new TranslateAnimation(
+                TranslateAnimation.ABSOLUTE, 0f,
+                TranslateAnimation.ABSOLUTE, 0f,
+                TranslateAnimation.RELATIVE_TO_PARENT, 0f,
+                TranslateAnimation.RELATIVE_TO_PARENT, 1.0f);
+        mAnimation.setDuration(3000);
+        mAnimation.setRepeatCount(Animation.INFINITE);
+        mAnimation.setRepeatMode(Animation.REVERSE);
+        mAnimation.setInterpolator(new LinearInterpolator());
+        scannerLine.setAnimation(mAnimation);
     }
 
     /**
@@ -54,11 +106,15 @@ public final void setupLayout(Camera camera) {
      * @return {@link android.view.View} that implements {@link ViewFinderView}
      */
     protected IViewFinder createViewFinderView(Context context) {
-        return new ViewFinderView(context);
+        return new MyViewFinderView(context);
+    }
+
+    public void showScannerLine(boolean isSet) {
+        this.showScannerLine = isSet;
     }
 
     public void startCamera(int cameraId) {
-        if(mCameraHandlerThread == null) {
+        if (mCameraHandlerThread == null) {
             mCameraHandlerThread = new CameraHandlerThread(this);
         }
         mCameraHandlerThread.startCamera(cameraId);
@@ -66,10 +122,10 @@ public void startCamera(int cameraId) {
 
     public void setupCameraPreview(Camera camera) {
         mCamera = camera;
-        if(mCamera != null) {
+        if (mCamera != null) {
             setupLayout(mCamera);
             mViewFinderView.setupViewFinder();
-            if(mFlashState != null) {
+            if (mFlashState != null) {
                 setFlash(mFlashState);
             }
             setAutoFocus(mAutofocusState);
@@ -81,26 +137,26 @@ public void startCamera() {
     }
 
     public void stopCamera() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             mPreview.stopCameraPreview();
             mPreview.setCamera(null, null);
             mCamera.release();
             mCamera = null;
         }
-        if(mCameraHandlerThread != null) {
+        if (mCameraHandlerThread != null) {
             mCameraHandlerThread.quit();
             mCameraHandlerThread = null;
         }
     }
 
     public void stopCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.stopCameraPreview();
         }
     }
 
     protected void resumeCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.showCameraPreview();
         }
     }
@@ -127,16 +183,16 @@ public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHe
 
     public void setFlash(boolean flag) {
         mFlashState = flag;
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
 
             Camera.Parameters parameters = mCamera.getParameters();
-            if(flag) {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (flag) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
             } else {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
@@ -146,9 +202,9 @@ public void setFlash(boolean flag) {
     }
 
     public boolean getFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 return true;
             } else {
                 return false;
@@ -158,9 +214,9 @@ public boolean getFlash() {
     }
 
     public void toggleFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
             } else {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
@@ -171,7 +227,7 @@ public void toggleFlash() {
 
     public void setAutoFocus(boolean state) {
         mAutofocusState = state;
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.setAutoFocus(state);
         }
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/MyViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/MyViewFinderView.java
new file mode 100644
index 0000000..0b1e721
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/MyViewFinderView.java
@@ -0,0 +1,169 @@
+package me.dm7.barcodescanner.core;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.View;
+
+public class MyViewFinderView extends View implements IViewFinder {
+    public static final int BORDER_STROKE_WIDTH = 12;
+
+    private static final String TAG = "MyViewFinderView";
+
+    private Rect mFramingRect;
+
+    private static final int MIN_FRAME_WIDTH = 240;
+    private static final int MIN_FRAME_HEIGHT = 240;
+
+    private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
+    private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) (1080 * LANDSCAPE_HEIGHT_RATIO); // = 5/8 * 1080
+
+    private static final float PORTRAIT_WIDTH_RATIO = 5.5f / 8;
+    private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 7/8 * 1080
+
+    private final int mDefaultLaserColor = getResources().getColor(R.color.viewfinder_laser);
+    private final int mDefaultMaskColor = getResources().getColor(R.color.viewfinder_mask);
+    private final int mDefaultBorderColor = getResources().getColor(R.color.viewfinder_border);
+    private final int mDefaultBorderStrokeWidth = getResources().getInteger(R.integer.viewfinder_border_width);
+    private final int mDefaultBorderLineLength = 60;
+
+    protected Paint mLaserPaint;
+    protected Paint mFinderMaskPaint;
+    protected Paint mBorderPaint;
+    protected int mBorderLineLength;
+
+    public MyViewFinderView(Context context) {
+        super(context);
+        init();
+    }
+
+    public MyViewFinderView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+        init();
+    }
+
+    private void init() {
+        //set up laser paint
+        mLaserPaint = new Paint();
+        mLaserPaint.setColor(mDefaultLaserColor);
+        mLaserPaint.setStyle(Paint.Style.FILL);
+
+        //finder mask paint
+        mFinderMaskPaint = new Paint();
+        mFinderMaskPaint.setColor(mDefaultMaskColor);
+
+        //border paint
+        mBorderPaint = new Paint();
+        mBorderPaint.setStyle(Paint.Style.STROKE);
+        mBorderPaint.setStrokeWidth(mDefaultBorderStrokeWidth);
+
+        mBorderLineLength = mDefaultBorderLineLength;
+    }
+
+    public void setLaserColor(int laserColor) {
+        mLaserPaint.setColor(laserColor);
+    }
+
+    public void setMaskColor(int maskColor) {
+        mFinderMaskPaint.setColor(maskColor);
+    }
+
+    public void setBorderColor(int borderColor) {
+        mBorderPaint.setColor(borderColor);
+    }
+
+    public void setBorderLineLength(int borderLineLength) {
+        mBorderLineLength = borderLineLength;
+    }
+
+    public void setupViewFinder() {
+        updateFramingRect();
+        invalidate();
+    }
+
+    public Rect getFramingRect() {
+        return mFramingRect;
+    }
+
+    @Override
+    public void onDraw(Canvas canvas) {
+        if (mFramingRect == null) {
+            return;
+        }
+
+        drawViewFinderMask(canvas);
+        drawViewFinderBorder(canvas);
+    }
+
+    public void drawViewFinderMask(Canvas canvas) {
+        int width = canvas.getWidth();
+        int height = canvas.getHeight();
+
+        canvas.drawRect(0, 0, width, mFramingRect.top, mFinderMaskPaint);
+        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, mFinderMaskPaint);
+        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, mFinderMaskPaint);
+        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, mFinderMaskPaint);
+    }
+
+    public void drawViewFinderBorder(Canvas canvas) {
+        mBorderPaint.setColor(Color.parseColor("#50ffffff"));
+        mBorderPaint.setStrokeWidth(1);
+        canvas.drawRect(mFramingRect.left, mFramingRect.top, mFramingRect.right, mFramingRect.bottom, mBorderPaint);
+
+        mBorderPaint.setColor(mDefaultBorderColor);
+        mBorderPaint.setStrokeWidth(BORDER_STROKE_WIDTH);
+        int padding = BORDER_STROKE_WIDTH / 2;
+        int halfPadding = padding / 2 - 1;
+        canvas.drawLine(mFramingRect.left + padding, mFramingRect.top + halfPadding, mFramingRect.left + padding, mFramingRect.top + halfPadding + mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.left + halfPadding, mFramingRect.top + padding, mFramingRect.left + halfPadding + mBorderLineLength, mFramingRect.top + padding, mBorderPaint);
+
+        canvas.drawLine(mFramingRect.left + padding, mFramingRect.bottom - halfPadding, mFramingRect.left + padding, mFramingRect.bottom - halfPadding - mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.left + halfPadding, mFramingRect.bottom - padding, mFramingRect.left + halfPadding + mBorderLineLength, mFramingRect.bottom - padding, mBorderPaint);
+
+        canvas.drawLine(mFramingRect.right - padding, mFramingRect.top + halfPadding, mFramingRect.right - padding, mFramingRect.top + halfPadding + mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.right - halfPadding, mFramingRect.top + padding, mFramingRect.right - halfPadding - mBorderLineLength, mFramingRect.top + padding, mBorderPaint);
+
+        canvas.drawLine(mFramingRect.right - padding, mFramingRect.bottom - halfPadding, mFramingRect.right - padding, mFramingRect.bottom - halfPadding - mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.right - halfPadding, mFramingRect.bottom - padding, mFramingRect.right - halfPadding - mBorderLineLength, mFramingRect.bottom - padding, mBorderPaint);
+    }
+
+    @Override
+    protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
+        updateFramingRect();
+    }
+
+    public synchronized void updateFramingRect() {
+        Point viewResolution = new Point(getWidth(), getHeight());
+        int width;
+        int height;
+        int orientation = DisplayUtils.getScreenOrientation(getContext());
+
+        if (orientation != Configuration.ORIENTATION_PORTRAIT) {
+            height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
+            width = height;
+        } else {
+            width = findDesiredDimensionInRange(PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
+            height = width;
+        }
+
+        int leftOffset = (viewResolution.x - width) / 2;
+        int topOffset = (viewResolution.y - height) / 2;
+        mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
+    }
+
+    private static int findDesiredDimensionInRange(float ratio, int resolution, int hardMin, int hardMax) {
+        int dim = (int) (ratio * resolution);
+        if (dim < hardMin) {
+            return hardMin;
+        }
+        if (dim > hardMax) {
+            return hardMax;
+        }
+        return dim;
+    }
+}
diff --git a/zxing-sample/build.gradle b/zxing-sample/build.gradle
index 238e1ae..3d213b1 100644
--- a/zxing-sample/build.gradle
+++ b/zxing-sample/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    //compile project(":zxing")
-    compile 'me.dm7.barcodescanner:zxing:1.8.4'
+    compile project(":zxing")
+   // compile 'me.dm7.barcodescanner:zxing:1.8.4'
     compile supportLibraryDependency
     compile 'com.android.support:appcompat-v7:23.1.1'
     compile 'com.android.support:design:23.1.1'
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
index a34b779..f0865a2 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
@@ -7,21 +7,15 @@
 import android.graphics.Rect;
 import android.os.Bundle;
 import android.os.Handler;
-import android.support.v4.app.NavUtils;
-import android.support.v7.app.ActionBar;
-import android.support.v7.app.AppCompatActivity;
-import android.support.v7.widget.Toolbar;
 import android.util.AttributeSet;
 import android.util.TypedValue;
-import android.view.MenuItem;
-import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Toast;
 
 import com.google.zxing.Result;
 
 import me.dm7.barcodescanner.core.IViewFinder;
-import me.dm7.barcodescanner.core.ViewFinderView;
+import me.dm7.barcodescanner.core.MyViewFinderView;
 import me.dm7.barcodescanner.zxing.ZXingScannerView;
 
 public class SimpleScannerActivity extends BaseScannerActivity implements ZXingScannerView.ResultHandler {
@@ -40,6 +34,7 @@ protected IViewFinder createViewFinderView(Context context) {
                 return new CustomViewFinderView(context);
             }
         };
+        mScannerView.showScannerLine(true);
         contentFrame.addView(mScannerView);
     }
 
@@ -74,7 +69,7 @@ public void run() {
         }, 2000);
     }
 
-    private static class CustomViewFinderView extends ViewFinderView {
+    private static class CustomViewFinderView extends MyViewFinderView {
         public static final String TRADE_MARK_TEXT = "ZXing";
         public static final int TRADE_MARK_TEXT_SIZE_SP = 40;
         public final Paint PAINT = new Paint();
diff --git a/zxing/build.gradle b/zxing/build.gradle
index 8c84e7c..45e2395 100644
--- a/zxing/build.gradle
+++ b/zxing/build.gradle
@@ -9,7 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.8.4'
+    compile project(":core")
+  //  compile 'me.dm7.barcodescanner:core:1.8.4'
     compile 'com.google.zxing:core:3.2.1'
 }
