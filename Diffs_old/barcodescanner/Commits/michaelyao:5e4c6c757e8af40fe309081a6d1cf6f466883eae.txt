diff --git a/lib/json-simple-1.1.jar b/lib/json-simple-1.1.jar
new file mode 100755
index 0000000..f395f41
Binary files /dev/null and b/lib/json-simple-1.1.jar differ
diff --git a/zxing-sample/build.gradle b/zxing-sample/build.gradle
index f279205..5b593b4 100644
--- a/zxing-sample/build.gradle
+++ b/zxing-sample/build.gradle
@@ -8,6 +8,7 @@ dependencies {
     compile libraries.design_support
     implementation files('/Users/myao/dev/git/bookfinder/lib/commons-codec-1.11/commons-codec-1.11.jar')
     implementation files('/Users/myao/dev/git/bookfinder/lib/sax.jar')
+    implementation files('/Users/myao/dev/git/bookfinder/lib/json-simple-1.1.jar')
 }
 
 android {
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookInfo.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookInfo.java
index ea8f646..4c6a738 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookInfo.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookInfo.java
@@ -1,11 +1,19 @@
 package me.dm7.barcodescanner.zxing.sample;
 
+import org.json.simple.JSONObject;
+
 public class BookInfo {
 
     public String bookId;
     public String codeType;
 
     public String title;
+    public String imageUrl;
+    public String ASIN;
+    public String pageUrl;
+    public String author;
+    public String binding;
+    public String errorMessage;
 
     public BookInfo(String bookId, String codeType){
         this.bookId = bookId;
@@ -13,6 +21,48 @@ public BookInfo(String bookId, String codeType){
     }
 
     public String toString(){
-        return "ID = [" + bookId + "] Type = [" + codeType + "] Title=[" + title + "]";
+        String szText = "ID = [" + bookId + "] Type = [" + codeType + "]";
+        if(title != null && title.length() > 0 ){
+            szText += " Title=[" + title + "]";
+        }
+        if(ASIN != null && ASIN.length() > 0 ){
+            szText += " ASIN=[" + ASIN + "]";
+        }
+        if(author != null && author.length() > 0 ){
+            szText += " Author=[" + title + "]";
+        }
+        if(errorMessage != null && errorMessage.length() > 0 ){
+            szText += " error=[" + errorMessage + "]";
+        }
+
+        return szText ;
+    }
+
+    public String toJSONString(){
+
+        JSONObject obj=new JSONObject();
+        obj.put("ID",bookId);
+        obj.put("codeType",codeType);
+
+        if(title != null && title.length() > 0 ){
+            obj.put("title",title);
+        }
+        if(ASIN != null && ASIN.length() > 0 ){
+            obj.put("ASIN",ASIN);
+        }
+        if(author != null && author.length() > 0 ){
+            obj.put("author", author);
+        }
+        if(imageUrl != null && imageUrl.length() > 0 ){
+            obj.put("imageUrl",imageUrl);
+        }
+        if(pageUrl != null && pageUrl.length() > 0 ){
+            obj.put("pageUrl",pageUrl);
+        }
+        if(errorMessage != null && errorMessage.length() > 0 ){
+            obj.put("errorMessage",errorMessage);
+        }
+        String json = obj.toString();
+        return json ;
     }
 }
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookSearcher.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookSearcher.java
index 13ccb26..e944deb 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookSearcher.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/BookSearcher.java
@@ -6,6 +6,7 @@
 import java.util.Map;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
 import java.net.HttpURLConnection;
 import java.net.URL;
 
@@ -43,19 +44,24 @@
     private static final String ENDPOINT = "webservices.amazon.com";
 
 
+    private static final String restAPIUrl = "http://littlescanner.herokuapp.com";
+    //private static final String restAPIUrl = "http://172.16.0.32:3000"; //debug local server.
 
-    public static String Send(String sId, String sIdType) {
+    public static BookInfo Send(String sId, String sIdType) {
 
         /*
          * Set up the signed requests helper.
          */
         SignedRequestsHelper  helper;
+        BookInfo book = new BookInfo(sId, sIdType);
 
         try {
             helper = SignedRequestsHelper.getInstance(ENDPOINT, ACCESS_KEY_ID, SECRET_KEY);
         } catch (Exception e) {
             e.printStackTrace();
-            return "error when call signed request";
+            book.errorMessage = "error when call signed request";
+
+            return book;
         }
 
         String requestUrl = null;
@@ -83,6 +89,7 @@ public static String Send(String sId, String sIdType) {
 
         System.out.println("Signed URL: \"" + requestUrl + "\"");
 
+
         String resp = null;
         try {
             resp = sendGet(requestUrl);
@@ -97,13 +104,79 @@ public static String Send(String sId, String sIdType) {
         if(nodes == null || nodes.getLength()== 0){
             String errormsg = "Error happens in retrieving book info";
             System.out.println(errormsg);
-            return errormsg;
+            book.errorMessage = errormsg;
+            return book;
         }
         Element line = (Element) nodes.item(0);
-        System.out.println(": " + line.getFirstChild().getTextContent());
-        return line.getFirstChild().getTextContent();
+        //System.out.println(": " + line.getFirstChild().getTextContent());
+
+
+        book.title = line.getFirstChild().getTextContent();
+
+        NodeList imageNodes = doc.getElementsByTagName("MediumImage");
+        if(imageNodes != null && imageNodes.getLength() > 0){
+            Element temp = (Element) imageNodes.item(0);
+            NodeList urlNodes = temp.getElementsByTagName("URL");
+            if(urlNodes != null && urlNodes.getLength()>0){
+                Element urlEl = (Element) urlNodes.item(0);
+                book.imageUrl = urlEl.getFirstChild().getTextContent();
+            }
+        }
+
+
+        book.pageUrl = getNodeText(doc, "DetailPageURL");
+        book.ASIN = getNodeText(doc, "ASIN");
+        book.author = getNodeText(doc, "author");
+        book.binding = getNodeText(doc, "binding");
+
+        String jsonPayload = book.toJSONString();
+        System.out.println("payload is " + jsonPayload);
+        sendPostRequest(restAPIUrl+"/api/book", jsonPayload);
+
+        System.out.println(book);
+        return book;
     };
 
+    public static String sendPostRequest(String requestUrl, String payload) {
+        StringBuffer jsonString = new StringBuffer();
+        System.out.println(payload);
+        System.out.println(requestUrl);
+        try {
+            URL url = new URL(requestUrl);
+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+
+            connection.setDoInput(true);
+            connection.setDoOutput(true);
+            connection.setRequestMethod("POST");
+            connection.setRequestProperty("Accept", "application/json");
+            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
+            OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream(), "UTF-8");
+            writer.write(payload);
+            writer.close();
+            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+
+            String line;
+            while ((line = br.readLine()) != null) {
+                jsonString.append(line);
+            }
+            br.close();
+            connection.disconnect();
+        } catch (Exception e) {
+            System.out.println("We got err sending post " + e.getMessage());
+            throw new RuntimeException(e.getMessage());
+        }
+        return jsonString.toString();
+    }
+
+    public static String  getNodeText(Document doc, String tagName){
+        NodeList nodes = doc.getElementsByTagName(tagName);
+        if(nodes != null && nodes.getLength() > 0){
+            Element temp = (Element) nodes.item(0);
+            return temp.getFirstChild().getTextContent();
+        }
+        return "";
+    }
+
     public  static String sendGet(String url) throws Exception {
 
         //String url = "http://www.google.com/search?q=mkyong";
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
index cbb0ad1..b47a6d6 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
@@ -75,9 +75,9 @@ public BookSearchTask (Activity context){
         protected BookInfo doInBackground(BookInfo... books) {
             try {
                 BookInfo book = books[0];
-                book.title  = BookSearcher.Send(book.bookId, book.codeType );
+                BookInfo bookUodated  = BookSearcher.Send(book.bookId, book.codeType );
 
-                return book;
+                return bookUodated;
             } catch (Exception e) {
                 this.exception = e;
 
