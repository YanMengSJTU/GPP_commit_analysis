diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.java
deleted file mode 100644
index bba2798..0000000
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.java
+++ /dev/null
@@ -1,72 +0,0 @@
-package me.dm7.barcodescanner.zbar;
-
-import net.sourceforge.zbar.Symbol;
-
-import java.util.List;
-import java.util.ArrayList;
-
-public class BarcodeFormat {
-    private int mId;
-    private String mName;
-
-    public static final BarcodeFormat NONE = new BarcodeFormat(Symbol.NONE, "NONE");
-    public static final BarcodeFormat PARTIAL = new BarcodeFormat(Symbol.PARTIAL, "PARTIAL");
-    public static final BarcodeFormat EAN8 = new BarcodeFormat(Symbol.EAN8, "EAN8");
-    public static final BarcodeFormat UPCE = new BarcodeFormat(Symbol.UPCE, "UPCE");
-    public static final BarcodeFormat ISBN10 = new BarcodeFormat(Symbol.ISBN10, "ISBN10");
-    public static final BarcodeFormat UPCA = new BarcodeFormat(Symbol.UPCA, "UPCA");
-    public static final BarcodeFormat EAN13 = new BarcodeFormat(Symbol.EAN13, "EAN13");
-    public static final BarcodeFormat ISBN13 = new BarcodeFormat(Symbol.ISBN13, "ISBN13");
-    public static final BarcodeFormat I25 = new BarcodeFormat(Symbol.I25, "I25");
-    public static final BarcodeFormat DATABAR = new BarcodeFormat(Symbol.DATABAR, "DATABAR");
-    public static final BarcodeFormat DATABAR_EXP = new BarcodeFormat(Symbol.DATABAR_EXP, "DATABAR_EXP");
-    public static final BarcodeFormat CODABAR = new BarcodeFormat(Symbol.CODABAR, "CODABAR");
-    public static final BarcodeFormat CODE39 = new BarcodeFormat(Symbol.CODE39, "CODE39");
-    public static final BarcodeFormat PDF417 = new BarcodeFormat(Symbol.PDF417, "PDF417");
-    public static final BarcodeFormat QRCODE = new BarcodeFormat(Symbol.QRCODE, "QRCODE");
-    public static final BarcodeFormat CODE93 = new BarcodeFormat(Symbol.CODE93, "CODE93");
-    public static final BarcodeFormat CODE128 = new BarcodeFormat(Symbol.CODE128, "CODE128");
-
-    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
-
-    static {
-        ALL_FORMATS.add(BarcodeFormat.PARTIAL);
-        ALL_FORMATS.add(BarcodeFormat.EAN8);
-        ALL_FORMATS.add(BarcodeFormat.UPCE);
-        ALL_FORMATS.add(BarcodeFormat.ISBN10);
-        ALL_FORMATS.add(BarcodeFormat.UPCA);
-        ALL_FORMATS.add(BarcodeFormat.EAN13);
-        ALL_FORMATS.add(BarcodeFormat.ISBN13);
-        ALL_FORMATS.add(BarcodeFormat.I25);
-        ALL_FORMATS.add(BarcodeFormat.DATABAR);
-        ALL_FORMATS.add(BarcodeFormat.DATABAR_EXP);
-        ALL_FORMATS.add(BarcodeFormat.CODABAR);
-        ALL_FORMATS.add(BarcodeFormat.CODE39);
-        ALL_FORMATS.add(BarcodeFormat.PDF417);
-        ALL_FORMATS.add(BarcodeFormat.QRCODE);
-        ALL_FORMATS.add(BarcodeFormat.CODE93);
-        ALL_FORMATS.add(BarcodeFormat.CODE128);
-    }
-
-    public BarcodeFormat(int id, String name) {
-        mId = id;
-        mName = name;
-    }
-
-    public int getId() {
-        return mId;
-    }
-
-    public String getName() {
-        return mName;
-    }
-
-    public static BarcodeFormat getFormatById(int id) {
-        for(BarcodeFormat format : ALL_FORMATS) {
-            if(format.getId() == id) {
-                return format;
-            }
-        }
-        return BarcodeFormat.NONE;
-    }
-}
\ No newline at end of file
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.kt b/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.kt
new file mode 100644
index 0000000..eee00fb
--- /dev/null
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/BarcodeFormat.kt
@@ -0,0 +1,53 @@
+package me.dm7.barcodescanner.zbar
+
+import net.sourceforge.zbar.Symbol
+
+class BarcodeFormat constructor(var id: Int, var name: String) {
+
+    companion object {
+        val NONE: BarcodeFormat = BarcodeFormat(Symbol.NONE, "NONE")
+        val PARTIAL: BarcodeFormat = BarcodeFormat(Symbol.PARTIAL, "PARTIAL")
+        val EAN8: BarcodeFormat = BarcodeFormat(Symbol.EAN8, "EAN8")
+        val UPCE: BarcodeFormat = BarcodeFormat(Symbol.UPCE, "UPCE")
+        val ISBN10: BarcodeFormat = BarcodeFormat(Symbol.ISBN10, "ISBN10")
+        val UPCA: BarcodeFormat = BarcodeFormat(Symbol.UPCA, "UPCA")
+        val EAN13: BarcodeFormat = BarcodeFormat(Symbol.EAN13, "EAN13")
+        val ISBN13: BarcodeFormat = BarcodeFormat(Symbol.ISBN13, "ISBN13")
+        val I25: BarcodeFormat = BarcodeFormat(Symbol.I25, "I25")
+        val DATABAR: BarcodeFormat = BarcodeFormat(Symbol.DATABAR, "DATABAR")
+        val DATABAR_EXP: BarcodeFormat = BarcodeFormat(Symbol.DATABAR_EXP, "DATABAR_EXP")
+        val CODABAR: BarcodeFormat = BarcodeFormat(Symbol.CODABAR, "CODABAR")
+        val CODE39: BarcodeFormat = BarcodeFormat(Symbol.CODE39, "CODE39")
+        val PDF417: BarcodeFormat = BarcodeFormat(Symbol.PDF417, "PDF417")
+        val QRCODE: BarcodeFormat = BarcodeFormat(Symbol.QRCODE, "QRCODE")
+        val CODE93: BarcodeFormat = BarcodeFormat(Symbol.CODE93, "CODE93")
+        val CODE128: BarcodeFormat = BarcodeFormat(Symbol.CODE128, "CODE128")
+
+        val ALL_FORMATS = mutableListOf<BarcodeFormat>(
+                PARTIAL,
+                EAN8,
+                UPCE,
+                ISBN10,
+                UPCA,
+                ISBN13,
+                I25,
+                DATABAR,
+                DATABAR_EXP,
+                CODABAR,
+                CODE39,
+                PDF417,
+                QRCODE,
+                CODE93,
+                CODE128
+        )
+
+        fun getFormatById(id: Int): BarcodeFormat {
+            for (format in ALL_FORMATS) {
+                if (format.id == id) {
+                    return format
+                }
+            }
+            return NONE
+        }
+    }
+}
\ No newline at end of file
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.java
deleted file mode 100644
index 6e5fda7..0000000
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.java
+++ /dev/null
@@ -1,22 +0,0 @@
-package me.dm7.barcodescanner.zbar;
-
-public class Result {
-    private String mContents;
-    private BarcodeFormat mBarcodeFormat;
-
-    public void setContents(String contents) {
-        mContents = contents;
-    }
-
-    public void setBarcodeFormat(BarcodeFormat format) {
-        mBarcodeFormat = format;
-    }
-
-    public BarcodeFormat getBarcodeFormat() {
-        return mBarcodeFormat;
-    }
-
-    public String getContents() {
-        return mContents;
-    }
-}
\ No newline at end of file
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.kt b/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.kt
new file mode 100644
index 0000000..bea775f
--- /dev/null
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/Result.kt
@@ -0,0 +1,6 @@
+package me.dm7.barcodescanner.zbar
+
+class Result {
+    var mContents : String? = ""
+    var mBarcodeFormat : BarcodeFormat? = null
+}
\ No newline at end of file
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
deleted file mode 100644
index 439bac6..0000000
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package me.dm7.barcodescanner.zbar;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Rect;
-import android.hardware.Camera;
-import android.os.Handler;
-import android.os.Looper;
-import android.text.TextUtils;
-import android.util.AttributeSet;
-import android.util.Log;
-
-import net.sourceforge.zbar.Config;
-import net.sourceforge.zbar.Image;
-import net.sourceforge.zbar.ImageScanner;
-import net.sourceforge.zbar.Symbol;
-import net.sourceforge.zbar.SymbolSet;
-
-import java.nio.charset.StandardCharsets;
-import java.util.Collection;
-import java.util.List;
-
-import me.dm7.barcodescanner.core.BarcodeScannerView;
-import me.dm7.barcodescanner.core.DisplayUtils;
-
-public class ZBarScannerView extends BarcodeScannerView {
-    private static final String TAG = "ZBarScannerView";
-
-    public interface ResultHandler {
-        public void handleResult(Result rawResult);
-    }
-
-    static {
-        System.loadLibrary("iconv");
-    }
-
-    private ImageScanner mScanner;
-    private List<BarcodeFormat> mFormats;
-    private ResultHandler mResultHandler;
-
-    public ZBarScannerView(Context context) {
-        super(context);
-        setupScanner();
-    }
-
-    public ZBarScannerView(Context context, AttributeSet attributeSet) {
-        super(context, attributeSet);
-        setupScanner();
-    }
-
-    public void setFormats(List<BarcodeFormat> formats) {
-        mFormats = formats;
-        setupScanner();
-    }
-
-    public void setResultHandler(ResultHandler resultHandler) {
-        mResultHandler = resultHandler;
-    }
-
-    public Collection<BarcodeFormat> getFormats() {
-        if(mFormats == null) {
-            return BarcodeFormat.ALL_FORMATS;
-        }
-        return mFormats;
-    }
-
-    public void setupScanner() {
-        mScanner = new ImageScanner();
-        mScanner.setConfig(0, Config.X_DENSITY, 3);
-        mScanner.setConfig(0, Config.Y_DENSITY, 3);
-
-        mScanner.setConfig(Symbol.NONE, Config.ENABLE, 0);
-        for(BarcodeFormat format : getFormats()) {
-            mScanner.setConfig(format.getId(), Config.ENABLE, 1);
-        }
-    }
-
-    @Override
-    public void onPreviewFrame(byte[] data, Camera camera) {
-        if(mResultHandler == null) {
-            return;
-        }
-
-        try {
-            Camera.Parameters parameters = camera.getParameters();
-            Camera.Size size = parameters.getPreviewSize();
-            int width = size.width;
-            int height = size.height;
-
-            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-                int rotationCount = getRotationCount();
-                if (rotationCount == 1 || rotationCount == 3) {
-                    int tmp = width;
-                    width = height;
-                    height = tmp;
-                }
-                data = getRotatedData(data, camera);
-            }
-
-            Rect rect = getFramingRectInPreview(width, height);
-            Image barcode = new Image(width, height, "Y800");
-            barcode.setData(data);
-            barcode.setCrop(rect.left, rect.top, rect.width(), rect.height());
-
-            int result = mScanner.scanImage(barcode);
-
-            if (result != 0) {
-                SymbolSet syms = mScanner.getResults();
-                final Result rawResult = new Result();
-                for (Symbol sym : syms) {
-                    // In order to retreive QR codes containing null bytes we need to
-                    // use getDataBytes() rather than getData() which uses C strings.
-                    // Weirdly ZBar transforms all data to UTF-8, even the data returned
-                    // by getDataBytes() so we have to decode it as UTF-8.
-                    String symData;
-                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
-                        symData = new String(sym.getDataBytes(), StandardCharsets.UTF_8);
-                    } else {
-                        symData = sym.getData();
-                    }
-                    if (!TextUtils.isEmpty(symData)) {
-                        rawResult.setContents(symData);
-                        rawResult.setBarcodeFormat(BarcodeFormat.getFormatById(sym.getType()));
-                        break;
-                    }
-                }
-
-                Handler handler = new Handler(Looper.getMainLooper());
-                handler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Stopping the preview can take a little long.
-                        // So we want to set result handler to null to discard subsequent calls to
-                        // onPreviewFrame.
-                        ResultHandler tmpResultHandler = mResultHandler;
-                        mResultHandler = null;
-                        
-                        stopCameraPreview();
-                        if (tmpResultHandler != null) {
-                            tmpResultHandler.handleResult(rawResult);
-                        }
-                    }
-                });
-            } else {
-                camera.setOneShotPreviewCallback(this);
-            }
-        } catch(RuntimeException e) {
-            // TODO: Terrible hack. It is possible that this method is invoked after camera is released.
-            Log.e(TAG, e.toString(), e);
-        }
-    }
-
-    public void resumeCameraPreview(ResultHandler resultHandler) {
-        mResultHandler = resultHandler;
-        super.resumeCameraPreview();
-    }
-}
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.kt b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.kt
new file mode 100644
index 0000000..89ddae0
--- /dev/null
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.kt
@@ -0,0 +1,153 @@
+package me.dm7.barcodescanner.zbar
+
+import android.content.Context
+import android.content.res.Configuration
+import android.hardware.Camera
+import android.os.Handler
+import android.os.Looper
+import android.text.TextUtils
+import android.util.AttributeSet
+import android.util.Log
+
+import net.sourceforge.zbar.Config
+import net.sourceforge.zbar.Image
+import net.sourceforge.zbar.ImageScanner
+import net.sourceforge.zbar.Symbol
+
+import me.dm7.barcodescanner.core.BarcodeScannerView
+import me.dm7.barcodescanner.core.DisplayUtils
+import java.nio.charset.StandardCharsets
+
+class ZBarScannerView : BarcodeScannerView {
+
+    companion object {
+        private const val TAG = "ZBarScannerView"
+    }
+
+    init {
+        System.loadLibrary("iconv")
+    }
+
+    interface ResultHandler {
+        fun handleResult(rawResult: Result)
+    }
+
+    constructor(context: Context) : super(context) {
+        setupScanner()
+    }
+
+    constructor(context: Context, attributeSet: AttributeSet) : super(context, attributeSet) {
+        setupScanner()
+    }
+
+    private var mScanner: ImageScanner? = null
+    private var mFormats: MutableList<BarcodeFormat>? = null
+    private var mResultHandler: ResultHandler? = null
+
+
+    fun setFormats(formats: MutableList<BarcodeFormat>) {
+        mFormats = formats
+        setupScanner()
+    }
+
+    fun setResultHandler(resultHandler: ResultHandler) {
+        mResultHandler = resultHandler
+    }
+
+    fun getFormats(): MutableList<BarcodeFormat> {
+        mFormats?.let {
+            return it
+        } ?: return BarcodeFormat.ALL_FORMATS
+    }
+
+    fun setupScanner() {
+        mScanner = ImageScanner()
+        mScanner?.setConfig(0, Config.X_DENSITY, 3)
+        mScanner?.setConfig(0, Config.Y_DENSITY, 3)
+
+        mScanner?.setConfig(Symbol.NONE, Config.ENABLE, 0)
+        for (format: BarcodeFormat in getFormats()) {
+            mScanner?.setConfig(format.id, Config.ENABLE, 1)
+        }
+    }
+
+    override fun onPreviewFrame(dataByteArray: ByteArray, camera: Camera) {
+        var data: ByteArray? = dataByteArray
+        if (mResultHandler == null) {
+            return
+        }
+
+        try {
+            val parameters = camera.parameters
+            val size = parameters.previewSize
+            var width = size.width
+            var height = size.height
+
+            if (DisplayUtils.getScreenOrientation(context) == Configuration.ORIENTATION_PORTRAIT) {
+                val rotationCount = getRotationCount()
+                if (rotationCount == 1 || rotationCount == 3) {
+                    val tmp = width
+                    width = height
+                    height = tmp
+                }
+                data = getRotatedData(data, camera)
+            }
+
+            val rect = getFramingRectInPreview(width, height)
+            val barcode = Image(width, height, "Y800")
+            barcode.data = data
+            rect?.let {
+                barcode.setCrop(it.left, it.top, it.width(), it.height())
+            }
+
+            val result = mScanner?.scanImage(barcode)
+
+            if (result != 0) {
+                val syms = mScanner?.results
+                val rawResult = Result()
+                syms?.let {
+                    for (sym in it) {
+                        // In order to retreive QR codes containing null bytes we need to
+                        // use getDataBytes() rather than getData() which uses C strings.
+                        // Weirdly ZBar transforms all data to UTF-8, even the data returned
+                        // by getDataBytes() so we have to decode it as UTF-8.
+                        val symData: String
+                        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
+                            symData = String(sym.dataBytes, StandardCharsets.UTF_8)
+                        } else {
+                            symData = sym.data
+                        }
+                        if (!TextUtils.isEmpty(symData)) {
+                            rawResult.mContents = symData
+                            rawResult.mBarcodeFormat = BarcodeFormat.getFormatById(sym.type)
+                            break
+                        }
+                    }
+                }
+
+                val handler = Handler(Looper.getMainLooper())
+                handler.post {
+                    // Stopping the preview can take a little long.
+                    // So we want to set result handler to null to discard subsequent calls to
+                    // onPreviewFrame.
+                    val tmpResultHandler = mResultHandler
+                    mResultHandler = null
+
+                    stopCameraPreview()
+                    tmpResultHandler?.handleResult(rawResult)
+
+                }
+            } else {
+                camera.setOneShotPreviewCallback(this)
+            }
+        } catch (e: RuntimeException) {
+            // TODO: Terrible hack. It is possible that this method is invoked after camera is released.
+            Log.e(TAG, e.toString(), e);
+        }
+    }
+
+    fun resumeCameraPreview(resultHandler: ResultHandler) {
+        mResultHandler = resultHandler
+        super.resumeCameraPreview()
+    }
+}
\ No newline at end of file
