diff --git a/build.gradle b/build.gradle
index 50af576..695bd8a 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,7 +40,7 @@ subprojects {
                 }
 
                 defaultConfig {
-                    minSdkVersion 8
+                    minSdkVersion 14
                     targetSdkVersion 19
                     versionCode 12
                     versionName "1.2"
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 6126540..77f9851 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -1,17 +1,17 @@
 package me.dm7.barcodescanner.core;
 
 import android.content.Context;
+import android.content.res.ColorStateList;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.hardware.Camera;
-import android.os.AsyncTask;
 import android.util.AttributeSet;
 import android.widget.FrameLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback {
     private Camera mCamera;
     private CameraPreview mPreview;
-    private ViewFinderView mViewFinderView;
+    private ViewFinderViewGroup mViewFinderView;
     private Rect mFramingRectInPreview;
 
     public BarcodeScannerView(Context context) {
@@ -26,22 +26,21 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
 
     public void setupLayout() {
         mPreview = new CameraPreview(getContext());
-        mViewFinderView = new ViewFinderView(getContext());
+        mViewFinderView = new ViewFinderViewGroup(getContext());
         addView(mPreview);
         addView(mViewFinderView);
     }
 
     public void startCamera() {
         mCamera = CameraUtils.getCameraInstance();
-        if(mCamera != null) {
-            mViewFinderView.setupViewFinder();
+        if (mCamera != null) {
             mPreview.setCamera(mCamera, this);
             mPreview.initCameraPreview();
         }
     }
 
     public void stopCamera() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             mPreview.stopCameraPreview();
             mPreview.setCamera(null, null);
             mCamera.release();
@@ -75,15 +74,15 @@ public synchronized Rect getFramingRectInPreview(int width, int height) {
     }
 
     public void setFlash(boolean flag) {
-        if(CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
+        if (CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(flag) {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (flag) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
             } else {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
@@ -93,9 +92,9 @@ public void setFlash(boolean flag) {
     }
 
     public boolean getFlash() {
-        if(CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
+        if (CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 return true;
             } else {
                 return false;
@@ -105,9 +104,9 @@ public boolean getFlash() {
     }
 
     public void toggleFlash() {
-        if(CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
+        if (CameraUtils.isFlashSupported(getContext()) && mCamera != null) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
             } else {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
@@ -117,8 +116,40 @@ public void toggleFlash() {
     }
 
     public void setAutoFocus(boolean state) {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.setAutoFocus(state);
         }
     }
+
+    public void setDescriptionText(CharSequence text) {
+        mViewFinderView.setDescriptionText(text);
+    }
+
+    public void setDescriptionText(int textRes) {
+        mViewFinderView.setDescriptionText(textRes);
+    }
+
+    public void setDescriptionTextSize(int textSizeInSp) {
+        mViewFinderView.setDescriptionTextSize(textSizeInSp);
+    }
+
+    public void setDescriptionTextColor(ColorStateList textColor) {
+        mViewFinderView.setDescriptionTextColor(textColor);
+    }
+
+    public void setResultText(CharSequence text) {
+        mViewFinderView.setResultText(text);
+    }
+
+    public void setResultText(int textRes) {
+        mViewFinderView.setResultText(textRes);
+    }
+
+    public void setResultTextSize(int textSizeInSp) {
+        mViewFinderView.setResultTextSize(textSizeInSp);
+    }
+
+    public void setResultTextColor(ColorStateList textColor) {
+        mViewFinderView.setResultTextColor(textColor);
+    }
 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CaptureView.java b/core/src/main/java/me/dm7/barcodescanner/core/CaptureView.java
new file mode 100644
index 0000000..c299c9d
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CaptureView.java
@@ -0,0 +1,115 @@
+package me.dm7.barcodescanner.core;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Canvas;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.util.AttributeSet;
+import android.view.View;
+
+/**
+ * Created by Ivan_Gusev1 on 8/27/2014.
+ */
+public class CaptureView extends View {
+
+    private Rect mFramingRect;
+
+    public CaptureView(Context context) {
+        this(context, null);
+    }
+
+    public CaptureView(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    public CaptureView(Context context, AttributeSet attrs, int defStyleAttr) {
+        super(context, attrs, defStyleAttr);
+    }
+
+    @Override
+    public void onDraw(Canvas canvas) {
+        if (mFramingRect == null) {
+            return;
+        }
+
+        drawViewFinderMask(canvas);
+        drawViewFinderBorder(canvas);
+    }
+
+    public void drawViewFinderMask(Canvas canvas) {
+        Paint paint = new Paint();
+        Resources resources = getResources();
+        paint.setColor(resources.getColor(R.color.viewfinder_mask));
+
+        int width = canvas.getWidth();
+        int height = canvas.getHeight();
+
+        canvas.drawRect(0, 0, width, mFramingRect.top, paint);
+        /*canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint);
+        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint);*/
+        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, paint);
+    }
+
+    public void drawViewFinderBorder(Canvas canvas) {
+        Paint paint = new Paint();
+        Resources resources = getResources();
+        paint.setColor(resources.getColor(R.color.viewfinder_border));
+        paint.setStyle(Paint.Style.STROKE);
+        float lineWidth = resources.getDimension(R.dimen.viewfinder_border_width);
+        float halfLineWidth = lineWidth / 2;
+        paint.setStrokeWidth(lineWidth);
+
+        float padding = resources.getDimension(R.dimen.viewfinder_border_padding);
+        float halfPadding = padding / 2;
+
+        float leftX = mFramingRect.left;
+        float rightX = mFramingRect.right;
+        float topStartY = mFramingRect.top;
+        float topEndY = mFramingRect.top - halfPadding;
+
+        // Line 1
+        canvas.drawLine(leftX, topStartY, leftX, topEndY, paint);
+        float leftXOffsetNegativeByLineWidth = leftX - halfLineWidth;
+        float rightXOffsetPositiveByLineWidth = rightX + halfLineWidth;
+        float topEndYOffsetNegativeByLineWidth = topEndY - halfLineWidth;
+        // Line 2
+        canvas.drawLine(leftXOffsetNegativeByLineWidth, topEndYOffsetNegativeByLineWidth, rightXOffsetPositiveByLineWidth, topEndYOffsetNegativeByLineWidth, paint);
+        // Line 3
+        canvas.drawLine(rightX, topStartY, rightX, topEndY, paint);
+
+        float bottomStartY = mFramingRect.bottom + 1;
+        float bottomEndY = mFramingRect.bottom + halfPadding;
+        // Line 4
+        canvas.drawLine(leftX, bottomStartY, leftX, bottomEndY, paint);
+        float bottomEndYOffsetPositiveByLineWidth = bottomEndY + halfLineWidth;
+        // Line 5
+        canvas.drawLine(leftXOffsetNegativeByLineWidth, bottomEndYOffsetPositiveByLineWidth, rightXOffsetPositiveByLineWidth, bottomEndYOffsetPositiveByLineWidth, paint);
+        // Line 6
+        canvas.drawLine(rightX, bottomStartY, rightX, bottomEndY, paint);
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        super.onSizeChanged(w, h, oldw, oldh);
+        updateFramingRect();
+    }
+
+    private void updateFramingRect() {
+        Point viewResolution = new Point(getWidth(), getHeight());
+
+        int width = getWidth();
+        int height = getHeight();
+
+        int leftOffset = (viewResolution.x - width) / 2;
+        int topOffset = (viewResolution.y - height) / 2;
+
+        int offset = getResources().getDimensionPixelSize(R.dimen.viewfinder_border_padding);
+        mFramingRect = new Rect(leftOffset + offset, topOffset + offset, leftOffset + width - offset, topOffset + height - offset);
+    }
+
+    public Rect getFramingRect() {
+        return mFramingRect;
+    }
+}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
deleted file mode 100644
index 30666e0..0000000
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ /dev/null
@@ -1,152 +0,0 @@
-package me.dm7.barcodescanner.core;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.content.res.Resources;
-import android.graphics.Canvas;
-import android.graphics.Paint;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.util.AttributeSet;
-import android.view.View;
-
-public class ViewFinderView extends View {
-    private static final String TAG = "ViewFinderView";
-
-    private Rect mFramingRect;
-    private Rect mOffsetFramingRect;
-
-    private static final int MIN_FRAME_WIDTH = 240;
-    private static final int MIN_FRAME_HEIGHT = 240;
-
-    private static final float LANDSCAPE_WIDTH_RATIO = 5f / 8;
-    private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
-    private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) (1920 * LANDSCAPE_WIDTH_RATIO); // = 5/8 * 1920
-    private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) (1080 * LANDSCAPE_HEIGHT_RATIO); // = 5/8 * 1080
-
-    private static final float PORTRAIT_WIDTH_RATIO = 8f / 8;
-    private static final float PORTRAIT_HEIGHT_RATIO = 3f / 8;
-    private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 8/8 * 1080
-    private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) (1920 * PORTRAIT_HEIGHT_RATIO); // = 3/8 * 1920
-
-    public ViewFinderView(Context context) {
-        super(context);
-    }
-
-    public ViewFinderView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public void setupViewFinder() {
-        updateFramingRect();
-        invalidate();
-    }
-
-    public Rect getFramingRect() {
-        return mOffsetFramingRect;
-    }
-
-    @Override
-    public void onDraw(Canvas canvas) {
-        if (mFramingRect == null) {
-            return;
-        }
-
-        drawViewFinderMask(canvas);
-        drawViewFinderBorder(canvas);
-    }
-
-    public void drawViewFinderMask(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_mask_test));
-
-        int width = canvas.getWidth();
-        int height = canvas.getHeight();
-
-        canvas.drawRect(0, 0, width, mFramingRect.top, paint);
-        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, paint);
-    }
-
-    public void drawViewFinderBorder(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_border));
-        paint.setStyle(Paint.Style.STROKE);
-        int lineWidth = resources.getInteger(R.integer.viewfinder_border_width);
-        float halfLineWidth = (float) lineWidth / 2;
-        paint.setStrokeWidth(lineWidth);
-
-        float padding = resources.getDimension(R.dimen.viewfinder_border_padding);
-        float halfPadding = padding / 2;
-
-        float leftX = mFramingRect.left + padding;
-        float rightX = mFramingRect.right - padding;
-        float topStartY = mFramingRect.top;
-        float topEndY = mFramingRect.top - halfPadding;
-
-        // Line 1
-        canvas.drawLine(leftX, topStartY, leftX, topEndY, paint);
-        float leftXOffsetNegativeByLineWidth = leftX - halfLineWidth;
-        float rightXOffsetPositiveByLineWidth = rightX + halfLineWidth;
-        float topEndYOffsetNegativeByLineWidth = topEndY - halfLineWidth;
-        // Line 2
-        canvas.drawLine(leftXOffsetNegativeByLineWidth, topEndYOffsetNegativeByLineWidth, rightXOffsetPositiveByLineWidth, topEndYOffsetNegativeByLineWidth, paint);
-        // Line 3
-        canvas.drawLine(rightX, topStartY, rightX, topEndY, paint);
-
-        float bottomStartY = mFramingRect.bottom + 1;
-        float bottomEndY = mFramingRect.bottom + halfPadding;
-        // Line 4
-        canvas.drawLine(leftX, bottomStartY, leftX, bottomEndY, paint);
-        float bottomEndYOffsetPositiveByLineWidth = bottomEndY + halfLineWidth;
-        // Line 5
-        canvas.drawLine(leftXOffsetNegativeByLineWidth, bottomEndYOffsetPositiveByLineWidth, rightXOffsetPositiveByLineWidth, bottomEndYOffsetPositiveByLineWidth, paint);
-        // Line 6
-        canvas.drawLine(rightX, bottomStartY, rightX, bottomEndY, paint);
-    }
-
-    @Override
-    protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
-        updateFramingRect();
-    }
-
-    public synchronized void updateFramingRect() {
-        Point viewResolution = new Point(getWidth(), getHeight());
-        if (viewResolution == null) {
-            return;
-        }
-        int width;
-        int height;
-        int orientation = DisplayUtils.getScreenOrientation(getContext());
-
-        if (orientation != Configuration.ORIENTATION_PORTRAIT) {
-            width = findDesiredDimensionInRange(LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
-        } else {
-            width = findDesiredDimensionInRange(PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT);
-        }
-
-        int leftOffset = (viewResolution.x - width) / 2;
-        int topOffset = (viewResolution.y - height) / 2;
-        mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
-
-        int offset = getResources().getDimensionPixelSize(R.dimen.viewfinder_border_padding);
-        mOffsetFramingRect = new Rect(mFramingRect.left + offset, mFramingRect.top, mFramingRect.right - offset, mFramingRect.bottom);
-    }
-
-    private static int findDesiredDimensionInRange(float ratio, int resolution, int hardMin, int hardMax) {
-        int dim = (int) (ratio * resolution);
-        if (dim < hardMin) {
-            return hardMin;
-        }
-        if (dim > hardMax) {
-            return hardMax;
-        }
-        return dim;
-    }
-
-}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderViewGroup.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderViewGroup.java
new file mode 100644
index 0000000..87ce21e
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderViewGroup.java
@@ -0,0 +1,77 @@
+package me.dm7.barcodescanner.core;
+
+import android.annotation.TargetApi;
+import android.content.Context;
+import android.content.res.ColorStateList;
+import android.graphics.Rect;
+import android.os.Build;
+import android.util.AttributeSet;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+public class ViewFinderViewGroup extends LinearLayout {
+
+    private static final String TAG = "ViewFinderView";
+
+    private TextView mDescriptionTextView, mResultTextView;
+    private CaptureView mCaptureView;
+
+    public ViewFinderViewGroup(Context context) {
+        this(context, null);
+    }
+
+    public ViewFinderViewGroup(Context context, AttributeSet attrs) {
+        this(context, attrs, 0);
+    }
+
+    @TargetApi(Build.VERSION_CODES.HONEYCOMB)
+    public ViewFinderViewGroup(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+        setOrientation(VERTICAL);
+        initViews(context);
+    }
+
+    private void initViews(Context context) {
+        inflate(context, R.layout.merge_view_finder_view_group, this);
+
+        mDescriptionTextView = (TextView) findViewById(R.id.description_text_view);
+        mResultTextView = (TextView) findViewById(R.id.result_text_view);
+        mCaptureView = (CaptureView) findViewById(R.id.capture_view);
+    }
+
+    public Rect getFramingRect() {
+        return mCaptureView.getFramingRect();
+    }
+
+    public void setDescriptionText(CharSequence text) {
+        mDescriptionTextView.setText(text);
+    }
+
+    public void setDescriptionText(int textRes) {
+        mDescriptionTextView.setText(textRes);
+    }
+
+    public void setDescriptionTextSize(int textSizeInSp) {
+        mDescriptionTextView.setTextSize(textSizeInSp);
+    }
+
+    public void setDescriptionTextColor(ColorStateList textColor) {
+        mDescriptionTextView.setTextColor(textColor);
+    }
+
+    public void setResultText(CharSequence text) {
+        mResultTextView.setText(text);
+    }
+
+    public void setResultText(int textRes) {
+        mResultTextView.setText(textRes);
+    }
+
+    public void setResultTextSize(int textSizeInSp) {
+        mResultTextView.setTextSize(textSizeInSp);
+    }
+
+    public void setResultTextColor(ColorStateList textColor) {
+        mResultTextView.setTextColor(textColor);
+    }
+}
diff --git a/core/src/main/res/layout/merge_view_finder_view_group.xml b/core/src/main/res/layout/merge_view_finder_view_group.xml
new file mode 100644
index 0000000..33d7c72
--- /dev/null
+++ b/core/src/main/res/layout/merge_view_finder_view_group.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<merge xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:background="@color/viewfinder_mask"
+        android:padding="@dimen/viewfinder_border_padding"
+        android:gravity="bottom|center_horizontal"
+        android:textColor="@android:color/white"
+        android:id="@+id/description_text_view"/>
+
+    <me.dm7.barcodescanner.core.CaptureView
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1.5"
+        android:id="@+id/capture_view"/>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:background="@color/viewfinder_mask"
+        android:padding="@dimen/viewfinder_border_padding"
+        android:gravity="top|center_horizontal"
+        android:textSize="18sp"
+        android:textColor="@android:color/white"
+        android:id="@+id/result_text_view"/>
+</merge>
\ No newline at end of file
diff --git a/core/src/main/res/values/colors.xml b/core/src/main/res/values/colors.xml
index c5cf081..5ee99bd 100644
--- a/core/src/main/res/values/colors.xml
+++ b/core/src/main/res/values/colors.xml
@@ -1,7 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
     <color name="viewfinder_mask">#CC000000</color>
-    <color name="viewfinder_mask_test">#CCFFFFFF</color>
     <color name="viewfinder_laser">#ffcc0000</color>
     <color name="viewfinder_border">#ffcc0000</color>
     <!--<color name="viewfinder_border">#ffafed44</color>-->
diff --git a/core/src/main/res/values/dimens.xml b/core/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..36cb78e
--- /dev/null
+++ b/core/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="viewfinder_border_padding">16dp</dimen>
+    <dimen name="viewfinder_border_width">2dp</dimen>
+</resources>
\ No newline at end of file
diff --git a/core/src/main/res/values/strings.xml b/core/src/main/res/values/strings.xml
index 5997b66..d64cbcd 100644
--- a/core/src/main/res/values/strings.xml
+++ b/core/src/main/res/values/strings.xml
@@ -2,5 +2,4 @@
     <integer name="viewfinder_border_width">4</integer>
     <integer name="viewfinder_border_length">60</integer>
 
-    <dimen name="viewfinder_border_padding">16dp</dimen>
 </resources>
diff --git a/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java b/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
index 8e1a28c..f9520fd 100644
--- a/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
+++ b/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
@@ -15,6 +15,8 @@
     public void onCreate(Bundle state) {
         super.onCreate(state);
         mScannerView = new ZXingScannerView(this);
+        mScannerView.setDescriptionText(R.string.sample_description_text);
+        mScannerView.setResultText(R.string.sample_result_text);
         setContentView(mScannerView);
     }
 
diff --git a/zxing/sample/src/main/res/values/strings.xml b/zxing/sample/src/main/res/values/strings.xml
index 562117f..6a5c159 100644
--- a/zxing/sample/src/main/res/values/strings.xml
+++ b/zxing/sample/src/main/res/values/strings.xml
@@ -17,4 +17,6 @@
     <string name="choose_formats">Choose Formats</string>
     <string name="ok_button">OK</string>
     <string name="cancel_button">Cancel</string>
+    <string name="sample_description_text">Наведите камеру на штрих-код почтового идентификатора так, чтобы он полностью поместился в красную рамку:</string>
+    <string name="sample_result_text">Некорректный идентификатор</string>
 </resources>
diff --git a/zxing/sample/src/main/res/values/styles.xml b/zxing/sample/src/main/res/values/styles.xml
index 310d451..11686f5 100644
--- a/zxing/sample/src/main/res/values/styles.xml
+++ b/zxing/sample/src/main/res/values/styles.xml
@@ -5,11 +5,7 @@
     <!-- Base application theme. -->
     <style name="AppOverlayTheme" parent="Theme.AppCompat.Light.DarkActionBar">
         <!-- Customize your theme here. -->
-        <item name="android:windowActionBarOverlay">true</item>
         <item name="android:actionBarStyle">@style/ActionBarStyle.Transparent</item>
-
-        <!-- Support library compatibility -->
-        <item name="windowActionBarOverlay">true</item>
     </style>
 
     <style name="ActionBarStyle.Transparent" parent="@android:Widget.ActionBar">
