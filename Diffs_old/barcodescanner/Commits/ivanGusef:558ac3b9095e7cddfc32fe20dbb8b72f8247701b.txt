diff --git a/core/build.gradle b/core/build.gradle
index dc4f74e..53715b7 100644
--- a/core/build.gradle
+++ b/core/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 
 ext {
     isLibrary = true
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index 9b44f81..30666e0 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -14,25 +14,21 @@
     private static final String TAG = "ViewFinderView";
 
     private Rect mFramingRect;
+    private Rect mOffsetFramingRect;
 
     private static final int MIN_FRAME_WIDTH = 240;
     private static final int MIN_FRAME_HEIGHT = 240;
 
-    private static final float LANDSCAPE_WIDTH_RATIO = 5f/8;
-    private static final float LANDSCAPE_HEIGHT_RATIO = 5f/8;
+    private static final float LANDSCAPE_WIDTH_RATIO = 5f / 8;
+    private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
     private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) (1920 * LANDSCAPE_WIDTH_RATIO); // = 5/8 * 1920
     private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) (1080 * LANDSCAPE_HEIGHT_RATIO); // = 5/8 * 1080
 
-    private static final float PORTRAIT_WIDTH_RATIO = 7f/8;
-    private static final float PORTRAIT_HEIGHT_RATIO = 3f/8;
-    private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 7/8 * 1080
+    private static final float PORTRAIT_WIDTH_RATIO = 8f / 8;
+    private static final float PORTRAIT_HEIGHT_RATIO = 3f / 8;
+    private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 8/8 * 1080
     private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) (1920 * PORTRAIT_HEIGHT_RATIO); // = 3/8 * 1920
 
-    private static final int[] SCANNER_ALPHA = {0, 64, 128, 192, 255, 192, 128, 64};
-    private int scannerAlpha;
-    private static final int POINT_SIZE = 10;
-    private static final long ANIMATION_DELAY = 80l;
-
     public ViewFinderView(Context context) {
         super(context);
     }
@@ -47,24 +43,23 @@ public void setupViewFinder() {
     }
 
     public Rect getFramingRect() {
-        return mFramingRect;
+        return mOffsetFramingRect;
     }
 
     @Override
     public void onDraw(Canvas canvas) {
-        if(mFramingRect == null) {
+        if (mFramingRect == null) {
             return;
         }
 
         drawViewFinderMask(canvas);
         drawViewFinderBorder(canvas);
-        drawLaser(canvas);
     }
 
     public void drawViewFinderMask(Canvas canvas) {
         Paint paint = new Paint();
         Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_mask));
+        paint.setColor(resources.getColor(R.color.viewfinder_mask_test));
 
         int width = canvas.getWidth();
         int height = canvas.getHeight();
@@ -80,38 +75,37 @@ public void drawViewFinderBorder(Canvas canvas) {
         Resources resources = getResources();
         paint.setColor(resources.getColor(R.color.viewfinder_border));
         paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(resources.getInteger(R.integer.viewfinder_border_width));
-        int lineLength = resources.getInteger(R.integer.viewfinder_border_length);
-
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint);
-
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint);
-
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint);
-
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint);
-    }
-
-    public void drawLaser(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        // Draw a red "laser scanner" line through the middle to show decoding is active
-        paint.setColor(resources.getColor(R.color.viewfinder_laser));
-        paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);
-        paint.setStyle(Paint.Style.FILL);
-        scannerAlpha = (scannerAlpha + 1) % SCANNER_ALPHA.length;
-        int middle = mFramingRect.height() / 2 + mFramingRect.top;
-        canvas.drawRect(mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, paint);
-
-        postInvalidateDelayed(ANIMATION_DELAY,
-                mFramingRect.left - POINT_SIZE,
-                mFramingRect.top - POINT_SIZE,
-                mFramingRect.right + POINT_SIZE,
-                mFramingRect.bottom + POINT_SIZE);
+        int lineWidth = resources.getInteger(R.integer.viewfinder_border_width);
+        float halfLineWidth = (float) lineWidth / 2;
+        paint.setStrokeWidth(lineWidth);
+
+        float padding = resources.getDimension(R.dimen.viewfinder_border_padding);
+        float halfPadding = padding / 2;
+
+        float leftX = mFramingRect.left + padding;
+        float rightX = mFramingRect.right - padding;
+        float topStartY = mFramingRect.top;
+        float topEndY = mFramingRect.top - halfPadding;
+
+        // Line 1
+        canvas.drawLine(leftX, topStartY, leftX, topEndY, paint);
+        float leftXOffsetNegativeByLineWidth = leftX - halfLineWidth;
+        float rightXOffsetPositiveByLineWidth = rightX + halfLineWidth;
+        float topEndYOffsetNegativeByLineWidth = topEndY - halfLineWidth;
+        // Line 2
+        canvas.drawLine(leftXOffsetNegativeByLineWidth, topEndYOffsetNegativeByLineWidth, rightXOffsetPositiveByLineWidth, topEndYOffsetNegativeByLineWidth, paint);
+        // Line 3
+        canvas.drawLine(rightX, topStartY, rightX, topEndY, paint);
+
+        float bottomStartY = mFramingRect.bottom + 1;
+        float bottomEndY = mFramingRect.bottom + halfPadding;
+        // Line 4
+        canvas.drawLine(leftX, bottomStartY, leftX, bottomEndY, paint);
+        float bottomEndYOffsetPositiveByLineWidth = bottomEndY + halfLineWidth;
+        // Line 5
+        canvas.drawLine(leftXOffsetNegativeByLineWidth, bottomEndYOffsetPositiveByLineWidth, rightXOffsetPositiveByLineWidth, bottomEndYOffsetPositiveByLineWidth, paint);
+        // Line 6
+        canvas.drawLine(rightX, bottomStartY, rightX, bottomEndY, paint);
     }
 
     @Override
@@ -128,7 +122,7 @@ public synchronized void updateFramingRect() {
         int height;
         int orientation = DisplayUtils.getScreenOrientation(getContext());
 
-        if(orientation != Configuration.ORIENTATION_PORTRAIT) {
+        if (orientation != Configuration.ORIENTATION_PORTRAIT) {
             width = findDesiredDimensionInRange(LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH);
             height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
         } else {
@@ -139,6 +133,9 @@ public synchronized void updateFramingRect() {
         int leftOffset = (viewResolution.x - width) / 2;
         int topOffset = (viewResolution.y - height) / 2;
         mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
+
+        int offset = getResources().getDimensionPixelSize(R.dimen.viewfinder_border_padding);
+        mOffsetFramingRect = new Rect(mFramingRect.left + offset, mFramingRect.top, mFramingRect.right - offset, mFramingRect.bottom);
     }
 
     private static int findDesiredDimensionInRange(float ratio, int resolution, int hardMin, int hardMax) {
diff --git a/core/src/main/res/values/colors.xml b/core/src/main/res/values/colors.xml
index 58c019a..c5cf081 100644
--- a/core/src/main/res/values/colors.xml
+++ b/core/src/main/res/values/colors.xml
@@ -1,6 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <resources>
-    <color name="viewfinder_mask">#60000000</color>
+    <color name="viewfinder_mask">#CC000000</color>
+    <color name="viewfinder_mask_test">#CCFFFFFF</color>
     <color name="viewfinder_laser">#ffcc0000</color>
-    <color name="viewfinder_border">#ffafed44</color>
+    <color name="viewfinder_border">#ffcc0000</color>
+    <!--<color name="viewfinder_border">#ffafed44</color>-->
 </resources>
\ No newline at end of file
diff --git a/core/src/main/res/values/strings.xml b/core/src/main/res/values/strings.xml
index 9cfbb9e..5997b66 100644
--- a/core/src/main/res/values/strings.xml
+++ b/core/src/main/res/values/strings.xml
@@ -1,4 +1,6 @@
-<resources>    
+<resources>
     <integer name="viewfinder_border_width">4</integer>
     <integer name="viewfinder_border_length">60</integer>
+
+    <dimen name="viewfinder_border_padding">16dp</dimen>
 </resources>
diff --git a/zbar/sample/build.gradle b/zbar/sample/build.gradle
index f78f976..2875b56 100644
--- a/zbar/sample/build.gradle
+++ b/zbar/sample/build.gradle
@@ -1,8 +1,7 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
-    //compile project(":zbar:zbar")
-    compile 'me.dm7.barcodescanner:zbar:1.5'
+    compile project(":zbar:zbar")
     compile supportLibraryDependency
     compile 'com.android.support:appcompat-v7:20.0.0'
 }
diff --git a/zbar/zbar/build.gradle b/zbar/zbar/build.gradle
index 7fcf208..92d64b3 100644
--- a/zbar/zbar/build.gradle
+++ b/zbar/zbar/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 
 ext {
     isLibrary = true
@@ -9,8 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.5'
+    compile project(":core")
     compile fileTree(dir: 'libs', include: '*.jar')
 }
 
diff --git a/zxing/sample/build.gradle b/zxing/sample/build.gradle
index 43260b6..b67e3ac 100644
--- a/zxing/sample/build.gradle
+++ b/zxing/sample/build.gradle
@@ -1,8 +1,7 @@
-apply plugin: 'android'
+apply plugin: 'com.android.application'
 
 dependencies {
-    //compile project(":zxing:zxing")
-    compile 'me.dm7.barcodescanner:zxing:1.5'
+    compile project(":zxing:zxing")
     compile supportLibraryDependency
     compile 'com.android.support:appcompat-v7:20.0.0'
 }
diff --git a/zxing/zxing/build.gradle b/zxing/zxing/build.gradle
index eef194f..c2d5635 100644
--- a/zxing/zxing/build.gradle
+++ b/zxing/zxing/build.gradle
@@ -1,4 +1,4 @@
-apply plugin: 'android-library'
+apply plugin: 'com.android.library'
 
 ext {
     isLibrary = true
@@ -9,8 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.5'
+    compile project(":core")
     compile 'com.google.zxing:core:3.1.0'
 }
 
