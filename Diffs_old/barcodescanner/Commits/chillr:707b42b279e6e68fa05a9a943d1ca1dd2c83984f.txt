diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 36b7085..7fdc1c0 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -6,13 +6,14 @@
 import android.hardware.Camera;
 import android.util.AttributeSet;
 import android.view.Gravity;
+import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
 public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
     private Camera mCamera;
     private CameraPreview mPreview;
-    private ViewFinderView mViewFinderView;
+    private IViewFinder mViewFinderView;
     private Rect mFramingRectInPreview;
 
     public BarcodeScannerView(Context context) {
@@ -25,17 +26,32 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
         setupLayout();
     }
 
-    public void setupLayout() {
+    public final void setupLayout() {
         mPreview = new CameraPreview(getContext());
-        mViewFinderView = new ViewFinderView(getContext());
-
         RelativeLayout relativeLayout = new RelativeLayout(getContext());
         relativeLayout.setGravity(Gravity.CENTER);
         relativeLayout.setBackgroundColor(Color.BLACK);
         relativeLayout.addView(mPreview);
         addView(relativeLayout);
 
-        addView(mViewFinderView);
+        mViewFinderView = createViewFinderView(getContext());
+        if (mViewFinderView instanceof View) {
+            addView((View) mViewFinderView);
+        } else {
+            throw new IllegalArgumentException("IViewFinder object returned by " +
+                    "'createViewFinderView()' should be instance of android.view.View");
+        }
+    }
+
+    /**
+     * <p>Method that creates view that represents visual appearance of a barcode scanner</p>
+     * <p>Override it to provide your own view for visual appearance of a barcode scanner</p>
+     *
+     * @param context {@link Context}
+     * @return {@link android.view.View} that implements {@link ViewFinderView}
+     */
+    protected IViewFinder createViewFinderView(Context context) {
+        return new ViewFinderView(context);
     }
 
     public void startCamera(int cameraId) {
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
new file mode 100644
index 0000000..78c3ee4
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
@@ -0,0 +1,40 @@
+package me.dm7.barcodescanner.core;
+
+import android.graphics.Rect;
+
+public interface IViewFinder {
+    /**
+     * Method that executes when Camera preview is starting.
+     * It is recommended to update framing rect here and invalidate view after that. <br/>
+     * For example see: {@link ViewFinderView#setupViewFinder()}
+     */
+    void setupViewFinder();
+
+    /**
+     * Provides {@link Rect} that identifies area where barcode scanner can detect visual codes
+     * <p>Note: This rect is a area representation in absolute pixel values. <br/>
+     * For example: <br/>
+     * If View's size is 1024x800 so framing rect might be 500x400</p>
+     *
+     * @return {@link Rect} that identifies barcode scanner area
+     */
+    Rect getFramingRect();
+
+    /**
+     * Width of a {@link android.view.View} that implements this interface
+     * <p>Note: this is already implemented in {@link android.view.View},
+     * so you don't need to override method and provide your implementation</p>
+     *
+     * @return width of a view
+     */
+    int getWidth();
+
+    /**
+     * Height of a {@link android.view.View} that implements this interface
+     * <p>Note: this is already implemented in {@link android.view.View},
+     * so you don't need to override method and provide your implementation</p>
+     *
+     * @return height of a view
+     */
+    int getHeight();
+}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index 9b44f81..743ecbc 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.content.res.Configuration;
-import android.content.res.Resources;
 import android.graphics.Canvas;
 import android.graphics.Paint;
 import android.graphics.Point;
@@ -10,7 +9,7 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-public class ViewFinderView extends View {
+public class ViewFinderView extends View implements IViewFinder {
     private static final String TAG = "ViewFinderView";
 
     private Rect mFramingRect;
@@ -33,12 +32,60 @@
     private static final int POINT_SIZE = 10;
     private static final long ANIMATION_DELAY = 80l;
 
+    private final int mDefaultLaserColor = getResources().getColor(R.color.viewfinder_laser);
+    private final int mDefaultMaskColor = getResources().getColor(R.color.viewfinder_mask);
+    private final int mDefaultBorderColor = getResources().getColor(R.color.viewfinder_border);
+    private final int mDefaultBorderStrokeWidth = getResources().getInteger(R.integer.viewfinder_border_width);
+    private final int mDefaultBorderLineLength = getResources().getInteger(R.integer.viewfinder_border_length);
+
+    protected Paint mLaserPaint;
+    protected Paint mFinderMaskPaint;
+    protected Paint mBorderPaint;
+    protected int mBorderLineLength;
+
     public ViewFinderView(Context context) {
         super(context);
+        init();
     }
 
     public ViewFinderView(Context context, AttributeSet attrs) {
         super(context, attrs);
+        init();
+    }
+
+    private void init() {
+        //set up laser paint
+        mLaserPaint = new Paint();
+        mLaserPaint.setColor(mDefaultLaserColor);
+        mLaserPaint.setStyle(Paint.Style.FILL);
+
+        //finder mask paint
+        mFinderMaskPaint = new Paint();
+        mFinderMaskPaint.setColor(mDefaultMaskColor);
+
+        //border paint
+        mBorderPaint = new Paint();
+        mBorderPaint.setColor(mDefaultBorderColor);
+        mBorderPaint.setStyle(Paint.Style.STROKE);
+        mBorderPaint.setStrokeWidth(mDefaultBorderStrokeWidth);
+
+        mBorderLineLength = mDefaultBorderLineLength;
+    }
+
+    public void setLaserColor(int laserColor) {
+        mLaserPaint.setColor(laserColor);
+    }
+    public void setMaskColor(int maskColor) {
+        mFinderMaskPaint.setColor(maskColor);
+    }
+    public void setBorderColor(int borderColor) {
+        mBorderPaint.setColor(borderColor);
+    }
+    public void setBorderStrokeWidth(int borderStrokeWidth) {
+        mBorderPaint.setStrokeWidth(borderStrokeWidth);
+    }
+    public void setBorderLineLength(int borderLineLength) {
+        mBorderLineLength = borderLineLength;
     }
 
     public void setupViewFinder() {
@@ -62,50 +109,35 @@ public void onDraw(Canvas canvas) {
     }
 
     public void drawViewFinderMask(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_mask));
-
         int width = canvas.getWidth();
         int height = canvas.getHeight();
 
-        canvas.drawRect(0, 0, width, mFramingRect.top, paint);
-        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, paint);
+        canvas.drawRect(0, 0, width, mFramingRect.top, mFinderMaskPaint);
+        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, mFinderMaskPaint);
+        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, mFinderMaskPaint);
+        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, mFinderMaskPaint);
     }
 
     public void drawViewFinderBorder(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_border));
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(resources.getInteger(R.integer.viewfinder_border_width));
-        int lineLength = resources.getInteger(R.integer.viewfinder_border_length);
+        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + mBorderLineLength, mFramingRect.top - 1, mBorderPaint);
 
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint);
+        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + mBorderLineLength, mFramingRect.bottom + 1, mBorderPaint);
 
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint);
+        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - mBorderLineLength, mFramingRect.top - 1, mBorderPaint);
 
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint);
-
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint);
+        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - mBorderLineLength, mBorderPaint);
+        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - mBorderLineLength, mFramingRect.bottom + 1, mBorderPaint);
     }
 
     public void drawLaser(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
         // Draw a red "laser scanner" line through the middle to show decoding is active
-        paint.setColor(resources.getColor(R.color.viewfinder_laser));
-        paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);
-        paint.setStyle(Paint.Style.FILL);
+        mLaserPaint.setAlpha(SCANNER_ALPHA[scannerAlpha]);
         scannerAlpha = (scannerAlpha + 1) % SCANNER_ALPHA.length;
         int middle = mFramingRect.height() / 2 + mFramingRect.top;
-        canvas.drawRect(mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, paint);
+        canvas.drawRect(mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, mLaserPaint);
 
         postInvalidateDelayed(ANIMATION_DELAY,
                 mFramingRect.left - POINT_SIZE,
@@ -121,9 +153,6 @@ protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
 
     public synchronized void updateFramingRect() {
         Point viewResolution = new Point(getWidth(), getHeight());
-        if (viewResolution == null) {
-            return;
-        }
         int width;
         int height;
         int orientation = DisplayUtils.getScreenOrientation(getContext());
@@ -151,5 +180,4 @@ private static int findDesiredDimensionInRange(float ratio, int resolution, int
         }
         return dim;
     }
-
 }
diff --git a/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java b/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
index 8e1a28c..079898e 100644
--- a/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
+++ b/zxing/sample/src/main/java/me/dm7/barcodescanner/zxing/sample/SimpleScannerActivity.java
@@ -1,11 +1,20 @@
 package me.dm7.barcodescanner.zxing.sample;
 
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Rect;
 import android.os.Bundle;
 import android.support.v7.app.ActionBarActivity;
+import android.util.AttributeSet;
+import android.util.TypedValue;
 import android.widget.Toast;
 
 import com.google.zxing.Result;
 
+import me.dm7.barcodescanner.core.IViewFinder;
+import me.dm7.barcodescanner.core.ViewFinderView;
 import me.dm7.barcodescanner.zxing.ZXingScannerView;
 
 public class SimpleScannerActivity extends ActionBarActivity implements ZXingScannerView.ResultHandler {
@@ -14,7 +23,12 @@
     @Override
     public void onCreate(Bundle state) {
         super.onCreate(state);
-        mScannerView = new ZXingScannerView(this);
+        mScannerView = new ZXingScannerView(this) {
+            @Override
+            protected IViewFinder createViewFinderView(Context context) {
+                return new CustomViewFinderView(context);
+            }
+        };
         setContentView(mScannerView);
     }
 
@@ -37,4 +51,48 @@ public void handleResult(Result rawResult) {
                 ", Format = " + rawResult.getBarcodeFormat().toString(), Toast.LENGTH_SHORT).show();
         mScannerView.startCamera();
     }
+
+    private static class CustomViewFinderView extends ViewFinderView {
+        public static final String TRADE_MARK_TEXT = "ZXing";
+        public static final int TRADE_MARK_TEXT_SIZE_SP = 40;
+        public final Paint PAINT = new Paint();
+
+        public CustomViewFinderView(Context context) {
+            super(context);
+            init();
+        }
+
+        public CustomViewFinderView(Context context, AttributeSet attrs) {
+            super(context, attrs);
+            init();
+        }
+
+        private void init() {
+            PAINT.setColor(Color.WHITE);
+            PAINT.setAntiAlias(true);
+            float textPixelSize = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,
+                    TRADE_MARK_TEXT_SIZE_SP, getResources().getDisplayMetrics());
+            PAINT.setTextSize(textPixelSize);
+        }
+
+        @Override
+        public void onDraw(Canvas canvas) {
+            super.onDraw(canvas);
+            drawTradeMark(canvas);
+        }
+
+        private void drawTradeMark(Canvas canvas) {
+            Rect framingRect = getFramingRect();
+            float tradeMarkTop;
+            float tradeMarkLeft;
+            if (framingRect != null) {
+                tradeMarkTop = framingRect.bottom + PAINT.getTextSize() + 10;
+                tradeMarkLeft = framingRect.left;
+            } else {
+                tradeMarkTop = 10;
+                tradeMarkLeft = canvas.getHeight() - PAINT.getTextSize() - 10;
+            }
+            canvas.drawText(TRADE_MARK_TEXT, tradeMarkLeft, tradeMarkTop, PAINT);
+        }
+    }
 }
