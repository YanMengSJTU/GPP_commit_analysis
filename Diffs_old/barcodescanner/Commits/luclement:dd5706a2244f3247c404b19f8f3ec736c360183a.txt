diff --git a/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerActivity.java b/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerActivity.java
index 1386a55..b7614f3 100644
--- a/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerActivity.java
+++ b/zbar/sample/src/main/java/me/dm7/barcodescanner/zbar/sample/ScannerActivity.java
@@ -1,6 +1,7 @@
 package me.dm7.barcodescanner.zbar.sample;
 
 import android.app.AlertDialog;
+import android.app.ProgressDialog;
 import android.content.DialogInterface;
 import android.content.Intent;
 import android.media.Ringtone;
@@ -12,23 +13,23 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v4.view.MenuItemCompat;
 import android.support.v7.app.ActionBarActivity;
-import android.util.Log;
 import android.util.Patterns;
 import android.view.Menu;
 import android.view.MenuItem;
 
+import org.json.JSONObject;
+
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.UnsupportedEncodingException;
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.net.URLEncoder;
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
-import java.util.concurrent.ExecutionException;
 
 import me.dm7.barcodescanner.zbar.BarcodeFormat;
 import me.dm7.barcodescanner.zbar.Result;
@@ -46,6 +47,9 @@
     private boolean mAutoFocus;
     private ArrayList<Integer> mSelectedIndices;
     private int mCameraId = -1;
+    private ProgressDialog mLoadingDialog;
+    private String mGoogleMessage;
+    private String mWOTMessage;
 
     @Override
     public void onCreate(Bundle state) {
@@ -151,33 +155,124 @@ public boolean onOptionsItemSelected(MenuItem item) {
 
     @Override
     public void handleResult(Result rawResult) {
+        mLoadingDialog = new ProgressDialog(this);
+        mLoadingDialog.isIndeterminate();
+        mLoadingDialog.setTitle("Checking blacklists...");
+        mLoadingDialog.setCancelable(false);
+        mLoadingDialog.setCanceledOnTouchOutside(false);
+        mLoadingDialog.show();
+
         try {
             Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
             Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
             r.play();
-        } catch (Exception e) {
-        }
+        } catch (Exception e) {}
         //showMessageDialog("Contents = " + rawResult.getContents() + ", Format = " + rawResult.getBarcodeFormat().getName());
         List<String> blocked = new ArrayList<>();
         Intent i = new Intent(Intent.ACTION_VIEW);
-        String res = "";
+        String res = "",resWOT="";
+
         if (Patterns.WEB_URL.matcher(rawResult.getContents()).matches()) {
             try {
                 res = new sendRequest().execute(rawResult.getContents()).get();
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            } catch (ExecutionException e) {
+                resWOT = new sendRequestWOT().execute(rawResult.getContents()).get();
+            } catch (Exception e) {
                 e.printStackTrace();
             }
         } else{
+            mLoadingDialog.dismiss();
             showMessageDialog("Not a Valid URL");
         }
-        if(res.equals("204")){
-            i.setData(Uri.parse(rawResult.getContents()));
-            startActivity(i);
-        } else {
-            showDialog("Launch" + rawResult.getContents() + "?", i, rawResult.getContents(), blocked);
+
+        String message="";
+        switch (res){
+            case "204":
+//              i.setData(Uri.parse(rawResult.getContents()));
+//              startActivity(i);
+                message = "Google okay'd this URL.";
+                break;
+            case "200":
+                message ="Google blocks this URL. Response message: \"" + mGoogleMessage +"\"";
+                break;
+            default:
+                message ="Failed to check Google's Blacklist.";
         }
+
+        switch (resWOT){
+            case "200":
+                try {
+                    JSONObject m = new JSONObject(mWOTMessage);
+                    JSONObject o= m.getJSONObject(rawResult.getContents());
+                    message+="\n\nWOT's response message:\nTrustworthiness: "+o.getJSONArray("0").getInt(0)+"%\nChild safety: "+o.getJSONArray("4").getInt(0)+"%";
+
+                    if(o.has("categories")) {
+                        Iterator<String> c = o.getJSONObject("categories").keys();
+                        message += "\n\nCategories:\n";
+                        while (c.hasNext()) switch (c.next()) {
+                            case "501":
+                                message += "Good site\n";
+                                break;
+                            case "101":
+                                message += "Malware or viruses\n";
+                                break;
+                            case "102":
+                                message += "Poor customer experience\n";
+                                break;
+                            case "103":
+                                message += "Phishing\n";
+                                break;
+                            case "104":
+                                message += "Scam\n";
+                                break;
+                            case "105":
+                                message += "Potentially illegal\n";
+                                break;
+                            case "201":
+                                message += "Misleading claims or unethical\n";
+                                break;
+                            case "202":
+                                message += "Privacy risks\n";
+                                break;
+                            case "203":
+                                message += "Suspicious\n";
+                                break;
+                            case "204":
+                                message += "Hate, discrimination\n";
+                                break;
+                            case "205":
+                                message += "Spam\n";
+                                break;
+                            case "206":
+                                message += "Potentially unwanted programs\n";
+                                break;
+                            case "207":
+                                message += "Ads/pop-ups\n";
+                                break;
+                            case "301":
+                                message += "Online tracking\n";
+                                break;
+                            case "302":
+                                message += "Alternative or controversial medicine\n";
+                                break;
+                            case "303":
+                                message += "Opinions, religion, politics\n";
+                                break;
+                            case "304":
+                                message += "Other\n";
+                                break;
+                            default:
+                        }
+                    }
+
+                }catch(Exception e){
+                    message +="\n\nFailed to check WOT's Blacklist.\n\n";
+                }
+                break;
+            default:
+                message +="Failed to check WOT's Blacklist.\n\n";
+        }
+
+        showDialog("Launch " + rawResult.getContents() + "?", i, rawResult.getContents(), blocked, message);
     }
 
     public void onLaunchBrowser(Intent i, String url, List<String> blocked) {
@@ -185,7 +280,7 @@ public void onLaunchBrowser(Intent i, String url, List<String> blocked) {
             i.setData(Uri.parse(url));
             startActivity(i);
         } else {
-            showMessageDialog("Not a Valid URL or Is blocked");
+            showMessageDialog("Not a Valid URL or is blocked");
         }
 
     }
@@ -208,9 +303,42 @@ protected String doInBackground(String... arg){
                 URL url = new URL(baseURL + "?" + arguments);
                 HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                 sb.append(connection.getResponseCode());
-            } catch(IOException e){
-
+                mGoogleMessage = connection.getResponseMessage();
+            } catch(IOException e){}
+            result = sb.toString();
+            if (is != null) {
+                try {
+                    is.close();
+                } catch (IOException e) {
+                    //Log.i(TAG, "Error closing InputStream");
+                }
             }
+
+            return result;
+        }
+    }
+
+    private class sendRequestWOT extends AsyncTask<String, String, String> {
+        protected String doInBackground(String... arg){
+            String result;
+            StringBuffer sb = new StringBuffer();
+            InputStream is = null;
+            String baseURL = "http://api.mywot.com/0.4/public_link_json2";
+
+            String arguments = "";
+            try {
+                arguments += URLEncoder.encode("hosts", "UTF-8") + "=" + URLEncoder.encode(arg[0]+"/", "UTF-8") + "&";
+                arguments += URLEncoder.encode("key", "UTF-8") + "=" + URLEncoder.encode("b667210b38604f57ff657406d23679889aa2f9dc", "UTF-8");
+
+                // Construct the url object representing cgi script
+                URL url = new URL(baseURL + "?" + arguments);
+                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+                sb.append(connection.getResponseCode());
+
+                is = new BufferedInputStream(connection.getInputStream());
+                BufferedReader br = new BufferedReader(new InputStreamReader(is));
+                mWOTMessage = br.readLine();
+            } catch(IOException e){}
             result = sb.toString();
             if (is != null) {
                 try {
@@ -220,26 +348,27 @@ protected String doInBackground(String... arg){
                 }
             }
 
+            mLoadingDialog.dismiss();
             return result;
         }
     }
 
-    public void showDialog(String title, final Intent i, final String url, final List<String> blocked) {
+    public void showDialog(String title, final Intent i, final String url, final List<String> blocked, String message) {
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
-        builder.setMessage(title)
+        builder.setTitle(title)
                 .setCancelable(false)
-                .setPositiveButton("Launch Browser", new DialogInterface.OnClickListener() {
+                .setPositiveButton("Launch in browser", new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int id) {
                         onLaunchBrowser(i, url, blocked);
-
                     }
                 })
-                .setNegativeButton("Block url", new DialogInterface.OnClickListener() {
+                .setNegativeButton("Block this site", new DialogInterface.OnClickListener() {
                     public void onClick(DialogInterface dialog, int id) {
-                        onBlock(blocked,url);
                         dialog.cancel();
+                        onBlock(blocked,url);
                     }
-                });
+                })
+                .setMessage(message);
         AlertDialog alert = builder.create();
         alert.show();
     }
@@ -249,7 +378,6 @@ public void onBlock(List<String> blocked, String url) {
         {
             blocked.add(url);
         }
-
     }
 
     public void showMessageDialog(String message) {
@@ -298,7 +426,7 @@ public void onCameraSelected(int cameraId) {
 
     public void setupFormats() {
         List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
-        if(mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+        if (mSelectedIndices == null || mSelectedIndices.isEmpty()) {
             mSelectedIndices = new ArrayList<Integer>();
 //            for(int i = 0; i < BarcodeFormat.ALL_FORMATS.size(); i++) {
 //                mSelectedIndices.add(i);
@@ -313,9 +441,43 @@ public void setupFormats() {
 
         formats.add(BarcodeFormat.QRCODE);
 
-        if(mScannerView != null) {
+        if (mScannerView != null) {
             mScannerView.setFormats(formats);
         }
+
+        InputStream is = null;
+        // Only display the first 500 characters of the retrieved
+        // web page content.
+        int len = 500;
+
+        try {
+            URL url = new URL("http://api.mywot.com/0.4/public_link_json2?hosts=goooogle.com/&key=b667210b38604f57ff657406d23679889aa2f9dc");
+            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+            conn.setReadTimeout(10000 /* milliseconds */);
+            conn.setConnectTimeout(15000 /* milliseconds */);
+            conn.setRequestMethod("GET");
+            conn.setDoInput(true);
+            // Starts the query
+            conn.connect();
+            int response = conn.getResponseCode();
+            is = conn.getInputStream();
+
+            // Convert the InputStream into a string
+            //String contentAsString = readIt(is, len);
+
+            // Makes sure that the InputStream is closed after the app is
+            // finished using it.
+        } catch (Exception ee) {
+            int i = 0;
+        } finally {
+            if (is != null) {
+                try {
+                    is.close();
+                } catch (Exception e) {
+
+                }
+            }
+        }
     }
 
     @Override
diff --git a/zbar/sample/src/main/res/values/strings.xml b/zbar/sample/src/main/res/values/strings.xml
index e7baf6e..98c9314 100644
--- a/zbar/sample/src/main/res/values/strings.xml
+++ b/zbar/sample/src/main/res/values/strings.xml
@@ -18,4 +18,5 @@
     <string name="select_camera">Select a Camera</string>
     <string name="ok_button">OK</string>
     <string name="cancel_button">Cancel</string>
+    <string name="WOT_API_KEY">b667210b38604f57ff657406d23679889aa2f9dc</string>
 </resources>
