diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FormatSelectorDialogFragment.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FormatSelectorDialogFragment.java
index fbc12cc..58f747a 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FormatSelectorDialogFragment.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FormatSelectorDialogFragment.java
@@ -42,10 +42,10 @@ public Dialog onCreateDialog(Bundle savedInstanceState) {
             return null;
         }
 
-        String[] formats = new String[ZXingScannerView.ALL_FORMATS.size()];
-        boolean[] checkedIndices = new boolean[ZXingScannerView.ALL_FORMATS.size()];
+        String[] formats = new String[ZXingScannerView.Companion.ALL_FORMATS().size()];
+        boolean[] checkedIndices = new boolean[ZXingScannerView.Companion.ALL_FORMATS().size()];
         int i = 0;
-        for(BarcodeFormat format : ZXingScannerView.ALL_FORMATS) {
+        for(BarcodeFormat format : ZXingScannerView.Companion.ALL_FORMATS()) {
             formats[i] = format.toString();
             if(mSelectedIndices.contains(i)) {
                 checkedIndices[i] = true;
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerActivity.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerActivity.java
index ec15b78..18fce0f 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerActivity.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerActivity.java
@@ -193,13 +193,13 @@ public void setupFormats() {
         List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
         if(mSelectedIndices == null || mSelectedIndices.isEmpty()) {
             mSelectedIndices = new ArrayList<Integer>();
-            for(int i = 0; i < ZXingScannerView.ALL_FORMATS.size(); i++) {
+            for(int i = 0; i < ZXingScannerView.Companion.ALL_FORMATS().size(); i++) {
                 mSelectedIndices.add(i);
             }
         }
 
         for(int index : mSelectedIndices) {
-            formats.add(ZXingScannerView.ALL_FORMATS.get(index));
+            formats.add(ZXingScannerView.Companion.ALL_FORMATS().get(index));
         }
         if(mScannerView != null) {
             mScannerView.setFormats(formats);
diff --git a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerFragment.java b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerFragment.java
index fc22686..7099f4b 100644
--- a/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerFragment.java
+++ b/zxing-sample/src/main/java/me/dm7/barcodescanner/zxing/sample/FullScannerFragment.java
@@ -196,13 +196,13 @@ public void setupFormats() {
         List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
         if(mSelectedIndices == null || mSelectedIndices.isEmpty()) {
             mSelectedIndices = new ArrayList<Integer>();
-            for(int i = 0; i < ZXingScannerView.ALL_FORMATS.size(); i++) {
+            for(int i = 0; i < ZXingScannerView.Companion.ALL_FORMATS().size(); i++) {
                 mSelectedIndices.add(i);
             }
         }
 
         for(int index : mSelectedIndices) {
-            formats.add(ZXingScannerView.ALL_FORMATS.get(index));
+            formats.add(ZXingScannerView.Companion.ALL_FORMATS().get(index));
         }
         if(mScannerView != null) {
             mScannerView.setFormats(formats);
diff --git a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
deleted file mode 100644
index a8d205a..0000000
--- a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
+++ /dev/null
@@ -1,198 +0,0 @@
-package me.dm7.barcodescanner.zxing;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.graphics.Rect;
-import android.hardware.Camera;
-import android.os.Handler;
-import android.os.Looper;
-import android.util.AttributeSet;
-import android.util.Log;
-
-import com.google.zxing.BarcodeFormat;
-import com.google.zxing.BinaryBitmap;
-import com.google.zxing.DecodeHintType;
-import com.google.zxing.LuminanceSource;
-import com.google.zxing.MultiFormatReader;
-import com.google.zxing.NotFoundException;
-import com.google.zxing.PlanarYUVLuminanceSource;
-import com.google.zxing.ReaderException;
-import com.google.zxing.Result;
-import com.google.zxing.common.HybridBinarizer;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Map;
-
-import me.dm7.barcodescanner.core.BarcodeScannerView;
-import me.dm7.barcodescanner.core.DisplayUtils;
-
-public class ZXingScannerView extends BarcodeScannerView {
-    private static final String TAG = "ZXingScannerView";
-
-    public interface ResultHandler {
-        void handleResult(Result rawResult);
-    }
-
-    private MultiFormatReader mMultiFormatReader;
-    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<>();
-    private List<BarcodeFormat> mFormats;
-    private ResultHandler mResultHandler;
-
-    static {
-        ALL_FORMATS.add(BarcodeFormat.AZTEC);
-        ALL_FORMATS.add(BarcodeFormat.CODABAR);
-        ALL_FORMATS.add(BarcodeFormat.CODE_39);
-        ALL_FORMATS.add(BarcodeFormat.CODE_93);
-        ALL_FORMATS.add(BarcodeFormat.CODE_128);
-        ALL_FORMATS.add(BarcodeFormat.DATA_MATRIX);
-        ALL_FORMATS.add(BarcodeFormat.EAN_8);
-        ALL_FORMATS.add(BarcodeFormat.EAN_13);
-        ALL_FORMATS.add(BarcodeFormat.ITF);
-        ALL_FORMATS.add(BarcodeFormat.MAXICODE);
-        ALL_FORMATS.add(BarcodeFormat.PDF_417);
-        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
-        ALL_FORMATS.add(BarcodeFormat.RSS_14);
-        ALL_FORMATS.add(BarcodeFormat.RSS_EXPANDED);
-        ALL_FORMATS.add(BarcodeFormat.UPC_A);
-        ALL_FORMATS.add(BarcodeFormat.UPC_E);
-        ALL_FORMATS.add(BarcodeFormat.UPC_EAN_EXTENSION);
-    }
-
-    public ZXingScannerView(Context context) {
-        super(context);
-        initMultiFormatReader();
-    }
-
-    public ZXingScannerView(Context context, AttributeSet attributeSet) {
-        super(context, attributeSet);
-        initMultiFormatReader();
-    }
-
-    public void setFormats(List<BarcodeFormat> formats) {
-        mFormats = formats;
-        initMultiFormatReader();
-    }
-
-    public void setResultHandler(ResultHandler resultHandler) {
-        mResultHandler = resultHandler;
-    }
-
-    public Collection<BarcodeFormat> getFormats() {
-        if(mFormats == null) {
-            return ALL_FORMATS;
-        }
-        return mFormats;
-    }
-
-    private void initMultiFormatReader() {
-        Map<DecodeHintType,Object> hints = new EnumMap<>(DecodeHintType.class);
-        hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
-        mMultiFormatReader = new MultiFormatReader();
-        mMultiFormatReader.setHints(hints);
-    }
-
-    @Override
-    public void onPreviewFrame(byte[] data, Camera camera) {
-        if(mResultHandler == null) {
-            return;
-        }
-        
-        try {
-            Camera.Parameters parameters = camera.getParameters();
-            Camera.Size size = parameters.getPreviewSize();
-            int width = size.width;
-            int height = size.height;
-
-            if (DisplayUtils.INSTANCE.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-                int rotationCount = getRotationCount();
-                if (rotationCount == 1 || rotationCount == 3) {
-                    int tmp = width;
-                    width = height;
-                    height = tmp;
-                }
-                data = getRotatedData(data, camera);
-            }
-
-            Result rawResult = null;
-            PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
-
-            if (source != null) {
-                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
-                try {
-                    rawResult = mMultiFormatReader.decodeWithState(bitmap);
-                } catch (ReaderException re) {
-                    // continue
-                } catch (NullPointerException npe) {
-                    // This is terrible
-                } catch (ArrayIndexOutOfBoundsException aoe) {
-
-                } finally {
-                    mMultiFormatReader.reset();
-                }
-
-                if (rawResult == null) {
-                    LuminanceSource invertedSource = source.invert();
-                    bitmap = new BinaryBitmap(new HybridBinarizer(invertedSource));
-                    try {
-                        rawResult = mMultiFormatReader.decodeWithState(bitmap);
-                    } catch (NotFoundException e) {
-                        // continue
-                    } finally {
-                        mMultiFormatReader.reset();
-                    }
-                }
-            }
-
-            final Result finalRawResult = rawResult;
-
-            if (finalRawResult != null) {
-                Handler handler = new Handler(Looper.getMainLooper());
-                handler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Stopping the preview can take a little long.
-                        // So we want to set result handler to null to discard subsequent calls to
-                        // onPreviewFrame.
-                        ResultHandler tmpResultHandler = mResultHandler;
-                        mResultHandler = null;
-
-                        stopCameraPreview();
-                        if (tmpResultHandler != null) {
-                            tmpResultHandler.handleResult(finalRawResult);
-                        }
-                    }
-                });
-            } else {
-                camera.setOneShotPreviewCallback(this);
-            }
-        } catch(RuntimeException e) {
-            // TODO: Terrible hack. It is possible that this method is invoked after camera is released.
-            Log.e(TAG, e.toString(), e);
-        }
-    }
-
-    public void resumeCameraPreview(ResultHandler resultHandler) {
-        mResultHandler = resultHandler;
-        super.resumeCameraPreview();
-    }
-
-    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {
-        Rect rect = getFramingRectInPreview(width, height);
-        if (rect == null) {
-            return null;
-        }
-        // Go ahead and assume it's YUV rather than die.
-        PlanarYUVLuminanceSource source = null;
-
-        try {
-            source = new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
-                    rect.width(), rect.height(), false);
-        } catch(Exception e) {
-        }
-
-        return source;
-    }
-}
diff --git a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.kt b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.kt
new file mode 100644
index 0000000..87bff83
--- /dev/null
+++ b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.kt
@@ -0,0 +1,186 @@
+package me.dm7.barcodescanner.zxing
+
+import android.content.Context
+import android.content.res.Configuration
+import android.hardware.Camera
+import android.os.Handler
+import android.os.Looper
+import android.util.AttributeSet
+import android.util.Log
+import com.google.zxing.BarcodeFormat
+import com.google.zxing.BinaryBitmap
+import com.google.zxing.DecodeHintType
+import com.google.zxing.MultiFormatReader
+import com.google.zxing.ReaderException
+import com.google.zxing.Result
+import com.google.zxing.NotFoundException
+import com.google.zxing.PlanarYUVLuminanceSource
+import com.google.zxing.common.HybridBinarizer
+
+import java.util.EnumMap
+
+import me.dm7.barcodescanner.core.BarcodeScannerView
+import me.dm7.barcodescanner.core.DisplayUtils
+
+open class ZXingScannerView : BarcodeScannerView {
+
+    companion object {
+        private const val TAG = "ZXingScannerView"
+
+        fun ALL_FORMATS(): MutableList<BarcodeFormat> = mutableListOf(
+                BarcodeFormat.AZTEC,
+                BarcodeFormat.CODABAR,
+                BarcodeFormat.CODE_39,
+                BarcodeFormat.CODE_93,
+                BarcodeFormat.CODE_128,
+                BarcodeFormat.DATA_MATRIX,
+                BarcodeFormat.EAN_8,
+                BarcodeFormat.EAN_13,
+                BarcodeFormat.ITF,
+                BarcodeFormat.MAXICODE,
+                BarcodeFormat.PDF_417,
+                BarcodeFormat.QR_CODE,
+                BarcodeFormat.RSS_14,
+                BarcodeFormat.RSS_EXPANDED,
+                BarcodeFormat.UPC_A,
+                BarcodeFormat.UPC_E,
+                BarcodeFormat.UPC_EAN_EXTENSION
+        )
+    }
+
+    interface ResultHandler {
+        fun handleResult(rawResult: Result)
+    }
+
+    private var mMultiFormatReader: MultiFormatReader? = null
+
+    private var mFormats: MutableList<BarcodeFormat>? = null
+    private var mResultHandler: ResultHandler? = null
+
+    constructor(context: Context) : super(context)
+
+    constructor(context: Context, attributeSet: AttributeSet) : super(context, attributeSet)
+
+    init {
+        initMultiFormatReader()
+    }
+
+    fun setFormats(formats: MutableList<BarcodeFormat>) {
+        mFormats = formats
+        initMultiFormatReader()
+    }
+
+    fun setResultHandler(resultHandler: ResultHandler) {
+        mResultHandler = resultHandler
+    }
+
+    fun getFormats(): MutableList<BarcodeFormat> {
+        mFormats?.let {
+            return it
+        }
+        return ALL_FORMATS()
+
+    }
+
+    fun initMultiFormatReader() {
+        val hints = EnumMap<DecodeHintType, MutableList<*>>(DecodeHintType::class.java)
+        hints[DecodeHintType.POSSIBLE_FORMATS] = getFormats()
+        mMultiFormatReader = MultiFormatReader().apply {
+            setHints(hints)
+        }
+    }
+
+    override fun onPreviewFrame(byteArray: ByteArray?, camera: Camera?) {
+        if (mResultHandler == null) {
+            return
+        }
+
+        try {
+            var data = byteArray
+            val parameters = camera?.parameters
+            val size = parameters?.previewSize
+            var width = size?.width
+            var height = size?.height
+
+            if (DisplayUtils.getScreenOrientation(context) == Configuration.ORIENTATION_PORTRAIT) {
+                val rotationCount = getRotationCount()
+                if (rotationCount == 1 || rotationCount == 3) {
+                    val tmp = width
+                    width = height
+                    height = tmp
+                }
+                data = getRotatedData(data, camera)
+            }
+
+            var rawResult: Result? = null
+            val source = buildLuminanceSource(data, width, height)
+
+            if (source != null) {
+                var bitmap = BinaryBitmap(HybridBinarizer(source))
+                try {
+                    rawResult = mMultiFormatReader?.decodeWithState(bitmap)
+                } catch (re: ReaderException) {
+                    Log.e(TAG, re.toString(), re)
+                } catch (npe: NullPointerException) {
+                    Log.e(TAG, npe.toString(), npe)
+                } catch (aoe: ArrayIndexOutOfBoundsException) {
+                    Log.e(TAG, aoe.toString(), aoe)
+                } finally {
+                    mMultiFormatReader?.reset()
+                }
+
+                if (rawResult == null) {
+                    val invertedSource = source.invert()
+                    bitmap = BinaryBitmap(HybridBinarizer(invertedSource))
+                    try {
+                        rawResult = mMultiFormatReader?.decodeWithState(bitmap)
+                    } catch (e: NotFoundException) {
+                        Log.e(TAG, e.toString(), e)
+                    } finally {
+                        mMultiFormatReader?.reset()
+                    }
+                }
+            }
+
+            val finalRawResult = rawResult
+
+            if (finalRawResult != null) {
+                val handler = Handler(Looper.getMainLooper())
+                handler.post {
+                    // Stopping the preview can take a little long.
+                    // So we want to set result handler to null to discard subsequent calls to
+                    // onPreviewFrame.
+                    val tmpResultHandler = mResultHandler
+                    mResultHandler = null
+
+                    stopCameraPreview()
+
+                    tmpResultHandler?.handleResult(finalRawResult)
+                }
+            } else {
+                camera?.setOneShotPreviewCallback(this)
+            }
+        } catch (e: RuntimeException) {
+            Log.e(TAG, e.toString(), e)
+        }
+    }
+
+    fun resumeCameraPreview(resultHandler: ResultHandler) {
+        mResultHandler = resultHandler
+        super.resumeCameraPreview()
+    }
+
+    fun buildLuminanceSource(data: ByteArray?, width: Int?, height: Int?): PlanarYUVLuminanceSource? {
+        val rect = getFramingRectInPreview(width ?: 0, height ?: 0) ?: return null
+        // Go ahead and assume it's YUV rather than die.
+        var source: PlanarYUVLuminanceSource? = null
+
+        try {
+            source = PlanarYUVLuminanceSource(data, width ?: 0, height ?: 0, rect.left, rect.top,
+                    rect.width(), rect.height(), false)
+        } catch (e: Exception) {
+            Log.e(TAG, e.toString(), e)
+        }
+        return source
+    }
+}
\ No newline at end of file
