diff --git a/build.gradle b/build.gradle
index 196adea..aba7e9b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -40,7 +40,7 @@ subprojects {
                 }
 
                 defaultConfig {
-                    minSdkVersion 9
+                    minSdkVersion 14
                     targetSdkVersion 23
                     versionCode 184
                     versionName "1.8.4"
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 3d302ef..3442585 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -10,7 +10,7 @@
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback {
     private Camera mCamera;
     private CameraPreview mPreview;
     private IViewFinder mViewFinderView;
@@ -18,6 +18,11 @@
     private CameraHandlerThread mCameraHandlerThread;
     private Boolean mFlashState;
     private boolean mAutofocusState = true;
+    private boolean isCamRelease = true;
+
+    public boolean isCamRelease() {
+        return isCamRelease;
+    }
 
     public BarcodeScannerView(Context context) {
         super(context);
@@ -58,7 +63,7 @@ protected IViewFinder createViewFinderView(Context context) {
     }
 
     public void startCamera(int cameraId) {
-        if(mCameraHandlerThread == null) {
+        if (mCameraHandlerThread == null) {
             mCameraHandlerThread = new CameraHandlerThread(this);
         }
         mCameraHandlerThread.startCamera(cameraId);
@@ -66,10 +71,11 @@ public void startCamera(int cameraId) {
 
     public void setupCameraPreview(Camera camera) {
         mCamera = camera;
-        if(mCamera != null) {
+        isCamRelease = false;
+        if (mCamera != null) {
             setupLayout(mCamera);
             mViewFinderView.setupViewFinder();
-            if(mFlashState != null) {
+            if (mFlashState != null) {
                 setFlash(mFlashState);
             }
             setAutoFocus(mAutofocusState);
@@ -81,26 +87,27 @@ public void startCamera() {
     }
 
     public void stopCamera() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             mPreview.stopCameraPreview();
-            mPreview.setCamera(null, null);
             mCamera.release();
+            isCamRelease = true;
+            mPreview.setCamera(null, null);
             mCamera = null;
         }
-        if(mCameraHandlerThread != null) {
+        if (mCameraHandlerThread != null) {
             mCameraHandlerThread.quit();
             mCameraHandlerThread = null;
         }
     }
 
     public void stopCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.stopCameraPreview();
         }
     }
 
     protected void resumeCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.showCameraPreview();
         }
     }
@@ -127,16 +134,16 @@ public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHe
 
     public void setFlash(boolean flag) {
         mFlashState = flag;
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
 
             Camera.Parameters parameters = mCamera.getParameters();
-            if(flag) {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (flag) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
             } else {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
@@ -146,9 +153,9 @@ public void setFlash(boolean flag) {
     }
 
     public boolean getFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 return true;
             } else {
                 return false;
@@ -158,9 +165,9 @@ public boolean getFlash() {
     }
 
     public void toggleFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
+        if (mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
             Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
             } else {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
@@ -171,7 +178,7 @@ public void toggleFlash() {
 
     public void setAutoFocus(boolean state) {
         mAutofocusState = state;
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.setAutoFocus(state);
         }
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
index 9eb1bf3..b49ce04 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.graphics.Point;
+import android.graphics.SurfaceTexture;
 import android.hardware.Camera;
 import android.os.Handler;
 import android.util.AttributeSet;
@@ -11,12 +12,13 @@
 import android.view.Surface;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
+import android.view.TextureView;
 import android.view.ViewGroup;
 import android.view.WindowManager;
 
 import java.util.List;
 
-public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
+public class CameraPreview extends TextureView implements TextureView.SurfaceTextureListener {
     private static final String TAG = "CameraPreview";
 
     private Camera mCamera;
@@ -26,6 +28,7 @@
     private boolean mSurfaceCreated = false;
     private Camera.PreviewCallback mPreviewCallback;
 
+
     public CameraPreview(Context context, Camera camera, Camera.PreviewCallback previewCallback) {
         super(context);
         init(camera, previewCallback);
@@ -39,8 +42,7 @@ public CameraPreview(Context context, AttributeSet attrs, Camera camera, Camera.
     public void init(Camera camera, Camera.PreviewCallback previewCallback) {
         setCamera(camera, previewCallback);
         mAutoFocusHandler = new Handler();
-        getHolder().addCallback(this);
-        getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+        this.setSurfaceTextureListener(this);
     }
 
     public void setCamera(Camera camera, Camera.PreviewCallback previewCallback) {
@@ -48,37 +50,16 @@ public void setCamera(Camera camera, Camera.PreviewCallback previewCallback) {
         mPreviewCallback = previewCallback;
     }
 
-    @Override
-    public void surfaceCreated(SurfaceHolder surfaceHolder) {
-        mSurfaceCreated = true;
-    }
-
-    @Override
-    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
-        if(surfaceHolder.getSurface() == null) {
-            return;
-        }
-        stopCameraPreview();
-        showCameraPreview();
-    }
-
-    @Override
-    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
-        mSurfaceCreated = false;
-        stopCameraPreview();
-    }
-
     public void showCameraPreview() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             try {
-                getHolder().addCallback(this);
                 mPreviewing = true;
                 setupCameraParameters();
-                mCamera.setPreviewDisplay(getHolder());
+                mCamera.setPreviewTexture(this.getSurfaceTexture());
                 mCamera.setDisplayOrientation(getDisplayOrientation());
                 mCamera.setOneShotPreviewCallback(mPreviewCallback);
                 mCamera.startPreview();
-                if(mAutoFocus) {
+                if (mAutoFocus) {
                     if (mSurfaceCreated) { // check if surface created before using autofocus
                         safeAutoFocus();
                     } else {
@@ -102,14 +83,13 @@ public void safeAutoFocus() {
     }
 
     public void stopCameraPreview() {
-        if(mCamera != null) {
+        if (mCamera != null) {
             try {
                 mPreviewing = false;
-                getHolder().removeCallback(this);
                 mCamera.cancelAutoFocus();
-                mCamera.setOneShotPreviewCallback(null);
                 mCamera.stopPreview();
-            } catch(Exception e) {
+                mCamera.setOneShotPreviewCallback(null);
+            } catch (Exception e) {
                 Log.e(TAG, e.toString(), e);
             }
         }
@@ -164,10 +144,18 @@ public int getDisplayOrientation() {
         int rotation = display.getRotation();
         int degrees = 0;
         switch (rotation) {
-            case Surface.ROTATION_0: degrees = 0; break;
-            case Surface.ROTATION_90: degrees = 90; break;
-            case Surface.ROTATION_180: degrees = 180; break;
-            case Surface.ROTATION_270: degrees = 270; break;
+            case Surface.ROTATION_0:
+                degrees = 0;
+                break;
+            case Surface.ROTATION_90:
+                degrees = 90;
+                break;
+            case Surface.ROTATION_180:
+                degrees = 180;
+                break;
+            case Surface.ROTATION_270:
+                degrees = 270;
+                break;
         }
 
         int result;
@@ -181,7 +169,7 @@ public int getDisplayOrientation() {
     }
 
     private Camera.Size getOptimalPreviewSize() {
-        if(mCamera == null) {
+        if (mCamera == null) {
             return null;
         }
 
@@ -227,12 +215,12 @@ public int getDisplayOrientation() {
     }
 
     public void setAutoFocus(boolean state) {
-        if(mCamera != null && mPreviewing) {
-            if(state == mAutoFocus) {
+        if (mCamera != null && mPreviewing) {
+            if (state == mAutoFocus) {
                 return;
             }
             mAutoFocus = state;
-            if(mAutoFocus) {
+            if (mAutoFocus) {
                 if (mSurfaceCreated) { // check if surface created before using autofocus
                     Log.v(TAG, "Starting autofocus");
                     safeAutoFocus();
@@ -248,7 +236,7 @@ public void setAutoFocus(boolean state) {
 
     private Runnable doAutoFocus = new Runnable() {
         public void run() {
-            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
+            if (mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                 safeAutoFocus();
             }
         }
@@ -264,4 +252,27 @@ public void onAutoFocus(boolean success, Camera camera) {
     private void scheduleAutoFocus() {
         mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
     }
+
+    @Override
+    public void onSurfaceTextureAvailable(SurfaceTexture surfaceTexture, int i, int i1) {
+        mSurfaceCreated = true;
+        showCameraPreview();
+    }
+
+    @Override
+    public void onSurfaceTextureSizeChanged(SurfaceTexture surfaceTexture, int i, int i1) {
+    }
+
+    @Override
+    public boolean onSurfaceTextureDestroyed(SurfaceTexture surfaceTexture) {
+        mSurfaceCreated = true;
+        stopCameraPreview();
+        return false;
+    }
+
+    @Override
+    public void onSurfaceTextureUpdated(SurfaceTexture surfaceTexture) {
+//        stopCameraPreview();
+//        showCameraPreview();
+    }
 }
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index beb5ebc..dd157a5 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Dec 30 05:01:23 MST 2015
+#Fri Jun 17 11:38:16 WEST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
diff --git a/zbar-sample/build.gradle b/zbar-sample/build.gradle
index 84911bb..4d8a8ad 100644
--- a/zbar-sample/build.gradle
+++ b/zbar-sample/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 dependencies {
-    //compile project(":zbar")
-    compile 'me.dm7.barcodescanner:zbar:1.8.4'
+    compile project(":zbar")
+//    compile 'me.dm7.barcodescanner:zbar:1.8.4'
     compile supportLibraryDependency
     compile 'com.android.support:appcompat-v7:23.1.1'
     compile 'com.android.support:design:23.1.1'
diff --git a/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/SimpleScannerActivity.java b/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/SimpleScannerActivity.java
index fb40235..249620e 100644
--- a/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/SimpleScannerActivity.java
+++ b/zbar-sample/src/main/java/me/dm7/barcodescanner/zbar/sample/SimpleScannerActivity.java
@@ -38,6 +38,11 @@ public void onPause() {
     public void handleResult(Result rawResult) {
         Toast.makeText(this, "Contents = " + rawResult.getContents() +
                 ", Format = " + rawResult.getBarcodeFormat().getName(), Toast.LENGTH_SHORT).show();
+
+
+        // BarcodeScannerView is now animatable!
+//        mScannerView.animate().alpha(0).setDuration(1000);
+
         // Note:
         // * Wait 2 seconds to resume the preview.
         // * On older devices continuously stopping and resuming camera preview can result in freezing the app.
diff --git a/zbar/build.gradle b/zbar/build.gradle
index efbef07..209874e 100644
--- a/zbar/build.gradle
+++ b/zbar/build.gradle
@@ -9,7 +9,7 @@ ext {
 }
 
 dependencies {
-    //compile project(":core")
-    compile 'me.dm7.barcodescanner:core:1.8.4'
+    compile project(":core")
+//    compile 'me.dm7.barcodescanner:core:1.8.4'
     compile fileTree(dir: 'libs', include: '*.jar')
 }
diff --git a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
index 85971a3..b9d0268 100644
--- a/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
+++ b/zbar/src/main/java/me/dm7/barcodescanner/zbar/ZBarScannerView.java
@@ -56,7 +56,7 @@ public void setResultHandler(ResultHandler resultHandler) {
     }
 
     public Collection<BarcodeFormat> getFormats() {
-        if(mFormats == null) {
+        if (mFormats == null) {
             return BarcodeFormat.ALL_FORMATS;
         }
         return mFormats;
@@ -68,14 +68,14 @@ public void setupScanner() {
         mScanner.setConfig(0, Config.Y_DENSITY, 3);
 
         mScanner.setConfig(Symbol.NONE, Config.ENABLE, 0);
-        for(BarcodeFormat format : getFormats()) {
+        for (BarcodeFormat format : getFormats()) {
             mScanner.setConfig(format.getId(), Config.ENABLE, 1);
         }
     }
 
     @Override
     public void onPreviewFrame(byte[] data, Camera camera) {
-        if(mResultHandler == null) {
+        if (mResultHandler == null) {
             return;
         }
 
@@ -85,7 +85,7 @@ public void onPreviewFrame(byte[] data, Camera camera) {
             int width = size.width;
             int height = size.height;
 
-            if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
+            if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
                 byte[] rotatedData = new byte[data.length];
                 for (int y = 0; y < height; y++) {
                     for (int x = 0; x < width; x++)
@@ -123,7 +123,7 @@ public void run() {
                         // onPreviewFrame.
                         ResultHandler tmpResultHandler = mResultHandler;
                         mResultHandler = null;
-                        
+
                         stopCameraPreview();
                         if (tmpResultHandler != null) {
                             tmpResultHandler.handleResult(rawResult);
@@ -131,9 +131,10 @@ public void run() {
                     }
                 });
             } else {
-                camera.setOneShotPreviewCallback(this);
+                if (!this.isCamRelease())
+                    camera.setOneShotPreviewCallback(this);
             }
-        } catch(RuntimeException e) {
+        } catch (RuntimeException e) {
             // TODO: Terrible hack. It is possible that this method is invoked after camera is released.
             Log.e(TAG, e.toString(), e);
         }
