diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index b14749c..d6763c1 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -12,7 +12,7 @@
 import android.widget.FrameLayout;
 import android.widget.RelativeLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback {
 
     private CameraWrapper mCameraWrapper;
     private CameraPreview mPreview;
@@ -24,8 +24,10 @@
     private boolean mShouldScaleToFill = true;
 
     private boolean mIsLaserEnabled = true;
-    @ColorInt private int mLaserColor = getResources().getColor(R.color.viewfinder_laser);
-    @ColorInt private int mBorderColor = getResources().getColor(R.color.viewfinder_border);
+    @ColorInt
+    private int mLaserColor = getResources().getColor(R.color.viewfinder_laser);
+    @ColorInt
+    private int mBorderColor = getResources().getColor(R.color.viewfinder_border);
     private int mMaskColor = getResources().getColor(R.color.viewfinder_mask);
     private int mBorderWidth = getResources().getInteger(R.integer.viewfinder_border_width);
     private int mBorderLength = getResources().getInteger(R.integer.viewfinder_border_length);
@@ -35,9 +37,11 @@
     private float mBorderAlpha = 1.0f;
     private int mViewFinderOffset = 0;
     private float mAspectTolerance = 0.1f;
+    private CameraPreviewReadyCallback cameraPreviewReadyCallback = null;
 
     public BarcodeScannerView(Context context) {
         super(context);
+
         init();
     }
 
@@ -72,12 +76,16 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
 
     private void init() {
         mViewFinderView = createViewFinderView(getContext());
+
     }
 
     public final void setupLayout(CameraWrapper cameraWrapper) {
         removeAllViews();
 
         mPreview = new CameraPreview(getContext(), cameraWrapper, this);
+        if (cameraPreviewReadyCallback != null) {
+            cameraPreviewReadyCallback.onCameraPreviewReady();
+        }
         mPreview.setAspectTolerance(mAspectTolerance);
         mPreview.setShouldScaleToFill(mShouldScaleToFill);
         if (!mShouldScaleToFill) {
@@ -126,46 +134,55 @@ public void setLaserColor(int laserColor) {
         mViewFinderView.setLaserColor(mLaserColor);
         mViewFinderView.setupViewFinder();
     }
+
     public void setMaskColor(int maskColor) {
         mMaskColor = maskColor;
         mViewFinderView.setMaskColor(mMaskColor);
         mViewFinderView.setupViewFinder();
     }
+
     public void setBorderColor(int borderColor) {
         mBorderColor = borderColor;
         mViewFinderView.setBorderColor(mBorderColor);
         mViewFinderView.setupViewFinder();
     }
+
     public void setBorderStrokeWidth(int borderStrokeWidth) {
         mBorderWidth = borderStrokeWidth;
         mViewFinderView.setBorderStrokeWidth(mBorderWidth);
         mViewFinderView.setupViewFinder();
     }
+
     public void setBorderLineLength(int borderLineLength) {
         mBorderLength = borderLineLength;
         mViewFinderView.setBorderLineLength(mBorderLength);
         mViewFinderView.setupViewFinder();
     }
+
     public void setLaserEnabled(boolean isLaserEnabled) {
         mIsLaserEnabled = isLaserEnabled;
         mViewFinderView.setLaserEnabled(mIsLaserEnabled);
         mViewFinderView.setupViewFinder();
     }
+
     public void setIsBorderCornerRounded(boolean isBorderCornerRounded) {
         mRoundedCorner = isBorderCornerRounded;
         mViewFinderView.setBorderCornerRounded(mRoundedCorner);
         mViewFinderView.setupViewFinder();
     }
+
     public void setBorderCornerRadius(int borderCornerRadius) {
         mCornerRadius = borderCornerRadius;
         mViewFinderView.setBorderCornerRadius(mCornerRadius);
         mViewFinderView.setupViewFinder();
     }
+
     public void setSquareViewFinder(boolean isSquareViewFinder) {
         mSquaredFinder = isSquareViewFinder;
         mViewFinderView.setSquareViewFinder(mSquaredFinder);
         mViewFinderView.setupViewFinder();
     }
+
     public void setBorderAlpha(float borderAlpha) {
         mBorderAlpha = borderAlpha;
         mViewFinderView.setBorderAlpha(mBorderAlpha);
@@ -173,7 +190,7 @@ public void setBorderAlpha(float borderAlpha) {
     }
 
     public void startCamera(int cameraId) {
-        if(mCameraHandlerThread == null) {
+        if (mCameraHandlerThread == null) {
             mCameraHandlerThread = new CameraHandlerThread(this);
         }
         mCameraHandlerThread.startCamera(cameraId);
@@ -181,10 +198,10 @@ public void startCamera(int cameraId) {
 
     public void setupCameraPreview(CameraWrapper cameraWrapper) {
         mCameraWrapper = cameraWrapper;
-        if(mCameraWrapper != null) {
+        if (mCameraWrapper != null) {
             setupLayout(mCameraWrapper);
             mViewFinderView.setupViewFinder();
-            if(mFlashState != null) {
+            if (mFlashState != null) {
                 setFlash(mFlashState);
             }
             setAutoFocus(mAutofocusState);
@@ -196,26 +213,26 @@ public void startCamera() {
     }
 
     public void stopCamera() {
-        if(mCameraWrapper != null) {
+        if (mCameraWrapper != null) {
             mPreview.stopCameraPreview();
             mPreview.setCamera(null, null);
             mCameraWrapper.mCamera.release();
             mCameraWrapper = null;
         }
-        if(mCameraHandlerThread != null) {
+        if (mCameraHandlerThread != null) {
             mCameraHandlerThread.quit();
             mCameraHandlerThread = null;
         }
     }
 
     public void stopCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.stopCameraPreview();
         }
     }
 
     protected void resumeCameraPreview() {
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.showCameraPreview();
         }
     }
@@ -231,12 +248,12 @@ public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHe
 
             Rect rect = new Rect(framingRect);
 
-            if(previewWidth < viewFinderViewWidth) {
+            if (previewWidth < viewFinderViewWidth) {
                 rect.left = rect.left * previewWidth / viewFinderViewWidth;
                 rect.right = rect.right * previewWidth / viewFinderViewWidth;
             }
 
-            if(previewHeight < viewFinderViewHeight) {
+            if (previewHeight < viewFinderViewHeight) {
                 rect.top = rect.top * previewHeight / viewFinderViewHeight;
                 rect.bottom = rect.bottom * previewHeight / viewFinderViewHeight;
             }
@@ -248,16 +265,16 @@ public synchronized Rect getFramingRectInPreview(int previewWidth, int previewHe
 
     public void setFlash(boolean flag) {
         mFlashState = flag;
-        if(mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
+        if (mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
 
             Camera.Parameters parameters = mCameraWrapper.mCamera.getParameters();
-            if(flag) {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (flag) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
             } else {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
+                if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
                     return;
                 }
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
@@ -267,9 +284,9 @@ public void setFlash(boolean flag) {
     }
 
     public boolean getFlash() {
-        if(mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
+        if (mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
             Camera.Parameters parameters = mCameraWrapper.mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 return true;
             } else {
                 return false;
@@ -279,9 +296,9 @@ public boolean getFlash() {
     }
 
     public void toggleFlash() {
-        if(mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
+        if (mCameraWrapper != null && CameraUtils.isFlashSupported(mCameraWrapper.mCamera)) {
             Camera.Parameters parameters = mCameraWrapper.mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
+            if (parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
             } else {
                 parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
@@ -292,7 +309,7 @@ public void toggleFlash() {
 
     public void setAutoFocus(boolean state) {
         mAutofocusState = state;
-        if(mPreview != null) {
+        if (mPreview != null) {
             mPreview.setAutoFocus(state);
         }
     }
@@ -313,7 +330,7 @@ public void setAspectTolerance(float aspectTolerance) {
 
         int rotationCount = getRotationCount();
 
-        if(rotationCount == 1 || rotationCount == 3) {
+        if (rotationCount == 1 || rotationCount == 3) {
             for (int i = 0; i < rotationCount; i++) {
                 byte[] rotatedData = new byte[data.length];
                 for (int y = 0; y < height; y++) {
@@ -334,5 +351,28 @@ public int getRotationCount() {
         int displayOrientation = mPreview.getDisplayOrientation();
         return displayOrientation / 90;
     }
+
+    public void setCameraPreviewRotation(int degrees) {
+        if (mPreview != null) {
+            mPreview.setCameraPreviewRotation(degrees);
+        }
+
+    }
+
+    public int getCameraPreviewRotation() {
+        return mPreview.getCameraPreviewRotation();
+    }
+
+    public void setCameraPreviewReadyCallback(CameraPreviewReadyCallback cameraPreviewReadyCallback) {
+        this.cameraPreviewReadyCallback = cameraPreviewReadyCallback;
+    }
+
+    public CameraPreviewReadyCallback getCameraPreviewReadyCallback() {
+        return cameraPreviewReadyCallback;
+    }
+
+    public interface CameraPreviewReadyCallback {
+        void onCameraPreviewReady();
+    }
 }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
index b066e25..c4c92b1 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
@@ -28,6 +28,7 @@
     private boolean mShouldScaleToFill = true;
     private Camera.PreviewCallback mPreviewCallback;
     private float mAspectTolerance = 0.1f;
+    private int cameraPreviewRotation;
 
     public CameraPreview(Context context, CameraWrapper cameraWrapper, Camera.PreviewCallback previewCallback) {
         super(context);
@@ -66,7 +67,7 @@ public void surfaceCreated(SurfaceHolder surfaceHolder) {
 
     @Override
     public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
-        if(surfaceHolder.getSurface() == null) {
+        if (surfaceHolder.getSurface() == null) {
             return;
         }
         stopCameraPreview();
@@ -80,7 +81,7 @@ public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
     }
 
     public void showCameraPreview() {
-        if(mCameraWrapper != null) {
+        if (mCameraWrapper != null) {
             try {
                 getHolder().addCallback(this);
                 mPreviewing = true;
@@ -89,7 +90,7 @@ public void showCameraPreview() {
                 mCameraWrapper.mCamera.setDisplayOrientation(getDisplayOrientation());
                 mCameraWrapper.mCamera.setOneShotPreviewCallback(mPreviewCallback);
                 mCameraWrapper.mCamera.startPreview();
-                if(mAutoFocus) {
+                if (mAutoFocus) {
                     if (mSurfaceCreated) { // check if surface created before using autofocus
                         safeAutoFocus();
                     } else {
@@ -113,14 +114,14 @@ public void safeAutoFocus() {
     }
 
     public void stopCameraPreview() {
-        if(mCameraWrapper != null) {
+        if (mCameraWrapper != null) {
             try {
                 mPreviewing = false;
                 getHolder().removeCallback(this);
                 mCameraWrapper.mCamera.cancelAutoFocus();
                 mCameraWrapper.mCamera.setOneShotPreviewCallback(null);
                 mCameraWrapper.mCamera.stopPreview();
-            } catch(Exception e) {
+            } catch (Exception e) {
                 Log.e(TAG, e.toString(), e);
             }
         }
@@ -198,7 +199,7 @@ public int getDisplayOrientation() {
         }
 
         Camera.CameraInfo info = new Camera.CameraInfo();
-        if(mCameraWrapper.mCameraId == -1) {
+        if (mCameraWrapper.mCameraId == -1) {
             Camera.getCameraInfo(Camera.CameraInfo.CAMERA_FACING_BACK, info);
         } else {
             Camera.getCameraInfo(mCameraWrapper.mCameraId, info);
@@ -208,14 +209,25 @@ public int getDisplayOrientation() {
         Display display = wm.getDefaultDisplay();
 
         int rotation = display.getRotation();
-        int degrees = 0;
-        switch (rotation) {
-            case Surface.ROTATION_0: degrees = 0; break;
-            case Surface.ROTATION_90: degrees = 90; break;
-            case Surface.ROTATION_180: degrees = 180; break;
-            case Surface.ROTATION_270: degrees = 270; break;
+        int degrees = getCameraPreviewRotation();
+        if (degrees == 0){
+            switch (rotation) {
+                case Surface.ROTATION_0:
+                    degrees = 0;
+                    break;
+                case Surface.ROTATION_90:
+                    degrees = 90;
+                    break;
+                case Surface.ROTATION_180:
+                    degrees = 180;
+                    break;
+                case Surface.ROTATION_270:
+                    degrees = 270;
+                    break;
+            }
         }
 
+
         int result;
         if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
             result = (info.orientation + degrees) % 360;
@@ -226,8 +238,16 @@ public int getDisplayOrientation() {
         return result;
     }
 
+    public void setCameraPreviewRotation(int cameraRotation) {
+        this.cameraPreviewRotation = cameraRotation;
+    }
+
+    public int getCameraPreviewRotation() {
+        return this.cameraPreviewRotation;
+    }
+
     private Camera.Size getOptimalPreviewSize() {
-        if(mCameraWrapper == null) {
+        if (mCameraWrapper == null) {
             return null;
         }
 
@@ -272,12 +292,12 @@ public int getDisplayOrientation() {
     }
 
     public void setAutoFocus(boolean state) {
-        if(mCameraWrapper != null && mPreviewing) {
-            if(state == mAutoFocus) {
+        if (mCameraWrapper != null && mPreviewing) {
+            if (state == mAutoFocus) {
                 return;
             }
             mAutoFocus = state;
-            if(mAutoFocus) {
+            if (mAutoFocus) {
                 if (mSurfaceCreated) { // check if surface created before using autofocus
                     Log.v(TAG, "Starting autofocus");
                     safeAutoFocus();
@@ -293,7 +313,7 @@ public void setAutoFocus(boolean state) {
 
     private Runnable doAutoFocus = new Runnable() {
         public void run() {
-            if(mCameraWrapper != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
+            if (mCameraWrapper != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
                 safeAutoFocus();
             }
         }
