diff --git a/timeattendance/build.gradle b/timeattendance/build.gradle
index b552c80..83b5ab9 100644
--- a/timeattendance/build.gradle
+++ b/timeattendance/build.gradle
@@ -19,6 +19,12 @@ android {
     }
 }
 
+repositories {
+    maven {
+        url "https://repo.commonsware.com.s3.amazonaws.com"
+    }
+}
+
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile 'com.android.support:appcompat-v7:22.0.0'
@@ -27,4 +33,5 @@ dependencies {
     compile 'com.google.code.gson:gson:2.2.4'
     compile 'com.squareup.okhttp:okhttp:2.0.0'
     compile 'com.loopj.android:android-async-http:1.4.6'
+    compile 'com.commonsware.cwac:camera:0.6.+'
 }
diff --git a/timeattendance/src/main/AndroidManifest.xml b/timeattendance/src/main/AndroidManifest.xml
index e71ff20..a55721a 100644
--- a/timeattendance/src/main/AndroidManifest.xml
+++ b/timeattendance/src/main/AndroidManifest.xml
@@ -26,6 +26,7 @@
         <activity android:name=".SettingActivity" android:screenOrientation="portrait" android:label="@string/app_name"/>
         <activity android:name=".SimpleScannerActivity" android:screenOrientation="portrait" android:label="@string/app_name" />
         <activity android:name=".CaptureActivity" android:screenOrientation="portrait" android:label="@string/app_name" />
+        <activity android:name=".CamTestActivity"  android:label="@string/app_name" />
     </application>
 
 </manifest>
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/CamTestActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/CamTestActivity.java
new file mode 100644
index 0000000..80fb800
--- /dev/null
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/CamTestActivity.java
@@ -0,0 +1,200 @@
+package com.coresolutions.timeattendance;
+
+/**
+ * Created by Panupong on 24/3/2558.
+ */
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.hardware.Camera;
+import android.hardware.Camera.PictureCallback;
+import android.hardware.Camera.ShutterCallback;
+import android.net.Uri;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.os.CountDownTimer;
+import android.os.Environment;
+import android.util.Log;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.view.View.OnLongClickListener;
+import android.view.ViewGroup.LayoutParams;
+import android.view.Window;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.FrameLayout;
+import android.widget.Toast;
+
+public class CamTestActivity extends Activity {
+    private static final String TAG = "CamTestActivity";
+    Preview preview;
+    Button buttonClick;
+    Camera camera;
+    Activity act;
+    Context ctx;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        ctx = this;
+        act = this;
+        requestWindowFeature(Window.FEATURE_NO_TITLE);
+        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
+
+        setContentView(R.layout.cam);
+
+        preview = new Preview(this, (SurfaceView)findViewById(R.id.surfaceView));
+        preview.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));
+        ((FrameLayout) findViewById(R.id.layout)).addView(preview);
+        preview.setKeepScreenOn(true);
+
+        preview.setOnClickListener(new OnClickListener() {
+
+            @Override
+            public void onClick(View arg0) {
+                //camera.takePicture(shutterCallback, rawCallback, jpegCallback);
+            }
+        });
+
+        Toast.makeText(ctx, "Touch anywhere on screen to take picture", Toast.LENGTH_LONG).show();
+
+        		buttonClick = (Button) findViewById(R.id.btnCapture);
+
+        		buttonClick.setOnClickListener(new OnClickListener() {
+        			public void onClick(View v) {
+                        new CountDownTimer(5000,1000){
+
+                            @Override
+                            public void onFinish() {
+                                camera.takePicture(shutterCallback, rawCallback, jpegCallback);
+                                SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+                                SharedPreferences.Editor editor;
+
+                                editor = settings.edit();
+                                editor.putString("state", "capture");
+                                editor.commit();
+                                act.finish();
+                            }
+
+                            @Override
+                            public void onTick(long millisUntilFinished) {
+
+                            }
+
+                        }.start();
+        			}
+        		});
+
+        		buttonClick.setOnLongClickListener(new OnLongClickListener(){
+        			@Override
+        			public boolean onLongClick(View arg0) {
+        				camera.autoFocus(new Camera.AutoFocusCallback(){
+        					@Override
+        					public void onAutoFocus(boolean arg0, Camera arg1) {
+
+        					}
+        				});
+        				return true;
+        			}
+        		});
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        int numCams = Camera.getNumberOfCameras();
+        if(numCams > 0){
+            try{
+                camera = Camera.open(0);
+                camera.startPreview();
+                preview.setCamera(camera);
+            } catch (RuntimeException ex){
+                Toast.makeText(ctx,"No camera harware found", Toast.LENGTH_LONG).show();
+            }
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        if(camera != null) {
+            camera.stopPreview();
+            preview.setCamera(null);
+            camera.release();
+            camera = null;
+        }
+        super.onPause();
+    }
+
+    private void resetCam() {
+        camera.startPreview();
+        preview.setCamera(camera);
+    }
+
+    private void refreshGallery(File file) {
+        Intent mediaScanIntent = new Intent( Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
+        mediaScanIntent.setData(Uri.fromFile(file));
+        sendBroadcast(mediaScanIntent);
+    }
+
+    ShutterCallback shutterCallback = new ShutterCallback() {
+        public void onShutter() {
+            //			 Log.d(TAG, "onShutter'd");
+        }
+    };
+
+    PictureCallback rawCallback = new PictureCallback() {
+        public void onPictureTaken(byte[] data, Camera camera) {
+            //			 Log.d(TAG, "onPictureTaken - raw");
+        }
+    };
+
+    PictureCallback jpegCallback = new PictureCallback() {
+        public void onPictureTaken(byte[] data, Camera camera) {
+            new SaveImageTask().execute(data);
+            resetCam();
+            Log.d(TAG, "onPictureTaken - jpeg");
+        }
+    };
+
+    private class SaveImageTask extends AsyncTask<byte[], Void, Void> {
+
+        @Override
+        protected Void doInBackground(byte[]... data) {
+            FileOutputStream outStream = null;
+
+            // Write to SD Card
+            try {
+                File sdCard = Environment.getExternalStorageDirectory();
+                File dir = new File (sdCard.getAbsolutePath() + "/camtest");
+                dir.mkdirs();
+
+                String fileName = String.format("%d.jpg", System.currentTimeMillis());
+                File outFile = new File(dir, fileName);
+
+                outStream = new FileOutputStream(outFile);
+                outStream.write(data[0]);
+                outStream.flush();
+                outStream.close();
+
+                Log.d(TAG, "onPictureTaken - wrote bytes: " + data.length + " to " + outFile.getAbsolutePath());
+
+                refreshGallery(outFile);
+            } catch (FileNotFoundException e) {
+                e.printStackTrace();
+            } catch (IOException e) {
+                e.printStackTrace();
+            } finally {
+            }
+            return null;
+        }
+
+    }
+}
+
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
index e4d250e..09fb1a2 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
@@ -1,53 +1,154 @@
 package com.coresolutions.timeattendance;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.util.List;
 
-import android.content.Intent;
-import android.content.SharedPreferences;
+import android.app.Activity;
+import android.content.ContentValues;
+import android.graphics.PixelFormat;
+import android.hardware.Camera;
+import android.net.Uri;
 import android.os.Bundle;
-import android.support.v7.app.ActionBarActivity;
-import android.util.Log;
+import android.provider.MediaStore;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.widget.Button;
+import android.widget.Toast;
 
-/**
- * Created by Panupong on 18/3/2558.
- */
-public class CaptureActivity extends ActionBarActivity {
+public class CaptureActivity extends Activity implements SurfaceHolder.Callback,Camera.ShutterCallback,Camera.PictureCallback{
 
+    Camera camera;
+    SurfaceView surfaceView;
+    SurfaceHolder surfaceHolder;
+    boolean previewing = false;
+
+
+    /** Called when the activity is first created. */
     @Override
-    public void onCreate(Bundle state) {
-        super.onCreate(state);
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.camera);
+
+        Button buttonStartCameraPreview = (Button)findViewById(R.id.startcamerapreview);
+        Button buttonStopCameraPreview = (Button)findViewById(R.id.stopcamerapreview);
+
+        getWindow().setFormat(PixelFormat.UNKNOWN);
+        surfaceView = (SurfaceView)findViewById(R.id.surfaceview);
+        surfaceHolder = surfaceView.getHolder();
+        surfaceHolder.addCallback(this);
+        surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+        camera = Camera.open();
+
+        surfaceView.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View arg0) {
+                camera.takePicture(CaptureActivity.this, null, null, CaptureActivity.this);
+            }
+        });
+
+
+        buttonStartCameraPreview.setOnClickListener(new Button.OnClickListener(){
 
-        SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
-        SharedPreferences.Editor editor;
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                if(!previewing){
+                    camera = Camera.open();
+                    if (camera != null){
+                        try {
+                            camera.setPreviewDisplay(surfaceHolder);
+                            camera.setDisplayOrientation(90);
+                            camera.startPreview();
+                            previewing = true;
+                        } catch (IOException e) {
+                            // TODO Auto-generated catch block
+                            e.printStackTrace();
+                        }
+                    }
+                }
+            }});
+
+        buttonStopCameraPreview.setOnClickListener(new Button.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                // TODO Auto-generated method stub
+                if (camera != null && previewing) {
+                    camera.stopPreview();
+                    camera.release();
+                    camera = null;
+                    previewing = false;
+                }
+            }
+        });
 
-        editor = settings.edit();
-        editor.putString("state","capture");
-        editor.commit();
-        IntentLauncher launcher = new IntentLauncher();
-        launcher.start();
     }
 
     @Override
-    public void onResume() {
-        super.onResume();
-    }
-
-    private class IntentLauncher extends Thread {
-
-        @Override
-        /**
-         * Sleep for some time and than start new activity.
-         */
-        public void run() {
-            try {
-                // Sleeping
-                Thread.sleep(10*1000);
-            } catch (Exception e) {
-                //Log.e(TAG, e.getMessage());
-            }
+    public void onPause() {
+        super.onPause();
+        camera.stopPreview();
+    }
 
-            // Start main activity
-            Intent intent = new Intent(CaptureActivity.this, MainActivity.class);
-            CaptureActivity.this.startActivity(intent);
-            CaptureActivity.this.finish();
+
+    @Override
+    public void onPictureTaken(byte[] data, Camera camera) {
+        //Here, we chose internal storage
+        //Uri imageFileUri = getContentResolver().insert(
+        //        MediaStore.Images.Media.EXTERNAL_CONTENT_URI, new ContentValues());
+        try {
+            FileOutputStream out = openFileOutput("picture1.jpg", Activity.MODE_PRIVATE);
+            //OutputStream out = getContentResolver().openOutputStream(imageFileUri);
+            out.write(data);
+            out.flush();
+            out.close();
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
         }
+        camera.startPreview();
+    }
+
+    @Override
+    public void surfaceChanged(SurfaceHolder holder, int format, int width,
+                               int height) {
+        Camera.Parameters params = camera.getParameters();
+        List<Camera.Size> sizes = params.getSupportedPreviewSizes();
+        Camera.Size selected = sizes.get(0);
+        params.setPreviewSize(selected.width,selected.height);
+        camera.setParameters(params);
+
+        camera.setDisplayOrientation(90);
+        camera.startPreview();
+
+    }
+
+    @Override
+    public void surfaceCreated(SurfaceHolder holder) {
+        try {
+            camera.setPreviewDisplay(surfaceHolder);
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    @Override
+    public void surfaceDestroyed(SurfaceHolder holder) {
+
+
+    }
+
+    @Override
+    public void onShutter() {
+        Toast.makeText(this, "Click!", Toast.LENGTH_SHORT).show();
+    }
+    public void onCancelClick(View v) {
+        finish();
     }
 }
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
index 49c4f1b..0b58bfa 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
@@ -1,6 +1,7 @@
 package com.coresolutions.timeattendance;
 
 
+import android.app.Activity;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
@@ -53,11 +54,11 @@ protected void onCreate(Bundle savedInstanceState) {
         TextView status = (TextView) findViewById(R.id.txt_status);
         if (checkSetting() == true) {
             if (checkOnline() == true) {
-                intent = new Intent(this, SimpleScannerActivity.class);
+                intent = new Intent(this, CaptureActivity.class);
                 startActivity(intent);
-                status.setText("Online");
+                status.setText(R.string.status_online);
             } else {
-                status.setText("Offline");
+                status.setText(R.string.status_offline);
             }
         } else {
             intent = new Intent(this, SettingActivity.class);
@@ -75,6 +76,8 @@ protected void onCreate(Bundle savedInstanceState) {
         public void onClick(View v) {
             //pb.setVisibility(View.VISIBLE);
             //new MyAsyncTask().execute("http://157.179.24.77/test.php");
+            intent = new Intent(MainActivity.this, SimpleScannerActivity.class);
+            startActivity(intent);
         }
     };
 
@@ -152,15 +155,18 @@ public  void checkLocale(){
         config.locale = locale;
         getBaseContext().getResources().updateConfiguration(config,
                 getBaseContext().getResources().getDisplayMetrics());
+        //Toast.makeText(this, "complete", Toast.LENGTH_SHORT).show();
+        //restartActivity(this);
     }
 
     public  void checkState(){
         SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
         String state = settings.getString("state", "main");
-        if(state=="scanner"){
-            intent = new Intent(this, CaptureActivity.class);
+        Toast.makeText(this, state, Toast.LENGTH_SHORT).show();
+        if(state.equals("scanner")){
+            intent = new Intent(this, CamTestActivity.class);
             startActivity(intent);
-        }else if(state=="capture"){
+        }else if(state.equals("capture")){
             intent = new Intent(this, SimpleScannerActivity.class);
             startActivity(intent);
         }else{
@@ -169,6 +175,15 @@ public  void checkState(){
         }
     }
 
+    public static void restartActivity(Activity act){
+
+        Intent intent=new Intent();
+        intent.setClass(act, act.getClass());
+        act.startActivity(intent);
+        act.finish();
+
+    }
 
 }
 
+
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/Preview.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/Preview.java
new file mode 100644
index 0000000..4e75b5d
--- /dev/null
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/Preview.java
@@ -0,0 +1,163 @@
+package com.coresolutions.timeattendance;
+
+/**
+ * Created by Panupong on 24/3/2558.
+ */
+import java.io.IOException;
+import java.util.List;
+
+import android.content.Context;
+import android.hardware.Camera;
+import android.hardware.Camera.Size;
+import android.util.Log;
+import android.view.SurfaceHolder;
+import android.view.SurfaceView;
+import android.view.View;
+import android.view.ViewGroup;
+
+class Preview extends ViewGroup implements SurfaceHolder.Callback {
+    private final String TAG = "Preview";
+
+    SurfaceView mSurfaceView;
+    SurfaceHolder mHolder;
+    Size mPreviewSize;
+    List<Size> mSupportedPreviewSizes;
+    Camera mCamera;
+
+    Preview(Context context, SurfaceView sv) {
+        super(context);
+
+        mSurfaceView = sv;
+//        addView(mSurfaceView);
+
+        mHolder = mSurfaceView.getHolder();
+        mHolder.addCallback(this);
+        mHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
+    }
+
+    public void setCamera(Camera camera) {
+        mCamera = camera;
+        if (mCamera != null) {
+            mSupportedPreviewSizes = mCamera.getParameters().getSupportedPreviewSizes();
+            requestLayout();
+
+            // get Camera parameters
+            Camera.Parameters params = mCamera.getParameters();
+
+            List<String> focusModes = params.getSupportedFocusModes();
+            if (focusModes.contains(Camera.Parameters.FOCUS_MODE_AUTO)) {
+                // set the focus mode
+                params.setFocusMode(Camera.Parameters.FOCUS_MODE_AUTO);
+                // set Camera parameters
+                mCamera.setParameters(params);
+            }
+        }
+    }
+
+    @Override
+    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
+        // We purposely disregard child measurements because act as a
+        // wrapper to a SurfaceView that centers the camera preview instead
+        // of stretching it.
+        final int width = resolveSize(getSuggestedMinimumWidth(), widthMeasureSpec);
+        final int height = resolveSize(getSuggestedMinimumHeight(), heightMeasureSpec);
+        setMeasuredDimension(width, height);
+
+        if (mSupportedPreviewSizes != null) {
+            mPreviewSize = getOptimalPreviewSize(mSupportedPreviewSizes, width, height);
+        }
+    }
+
+    @Override
+    protected void onLayout(boolean changed, int l, int t, int r, int b) {
+        if (changed && getChildCount() > 0) {
+            final View child = getChildAt(0);
+
+            final int width = r - l;
+            final int height = b - t;
+
+            int previewWidth = width;
+            int previewHeight = height;
+            if (mPreviewSize != null) {
+                previewWidth = mPreviewSize.width;
+                previewHeight = mPreviewSize.height;
+            }
+
+            // Center the child SurfaceView within the parent.
+            if (width * previewHeight > height * previewWidth) {
+                final int scaledChildWidth = previewWidth * height / previewHeight;
+                child.layout((width - scaledChildWidth) / 2, 0,
+                        (width + scaledChildWidth) / 2, height);
+            } else {
+                final int scaledChildHeight = previewHeight * width / previewWidth;
+                child.layout(0, (height - scaledChildHeight) / 2,
+                        width, (height + scaledChildHeight) / 2);
+            }
+        }
+    }
+
+    public void surfaceCreated(SurfaceHolder holder) {
+        // The Surface has been created, acquire the camera and tell it where
+        // to draw.
+        try {
+            if (mCamera != null) {
+                mCamera.setPreviewDisplay(holder);
+            }
+        } catch (IOException exception) {
+            Log.e(TAG, "IOException caused by setPreviewDisplay()", exception);
+        }
+    }
+
+    public void surfaceDestroyed(SurfaceHolder holder) {
+        // Surface will be destroyed when we return, so stop the preview.
+        if (mCamera != null) {
+            mCamera.stopPreview();
+        }
+    }
+
+
+    private Size getOptimalPreviewSize(List<Size> sizes, int w, int h) {
+        final double ASPECT_TOLERANCE = 0.1;
+        double targetRatio = (double) w / h;
+        if (sizes == null) return null;
+
+        Size optimalSize = null;
+        double minDiff = Double.MAX_VALUE;
+
+        int targetHeight = h;
+
+        // Try to find an size match aspect ratio and size
+        for (Size size : sizes) {
+            double ratio = (double) size.width / size.height;
+            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
+            if (Math.abs(size.height - targetHeight) < minDiff) {
+                optimalSize = size;
+                minDiff = Math.abs(size.height - targetHeight);
+            }
+        }
+
+        // Cannot find the one match the aspect ratio, ignore the requirement
+        if (optimalSize == null) {
+            minDiff = Double.MAX_VALUE;
+            for (Size size : sizes) {
+                if (Math.abs(size.height - targetHeight) < minDiff) {
+                    optimalSize = size;
+                    minDiff = Math.abs(size.height - targetHeight);
+                }
+            }
+        }
+        return optimalSize;
+    }
+
+    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
+        if(mCamera != null) {
+            Camera.Parameters parameters = mCamera.getParameters();
+            parameters.setPreviewSize(mPreviewSize.width, mPreviewSize.height);
+            requestLayout();
+
+            mCamera.setParameters(parameters);
+            mCamera.startPreview();
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
index b6f304b..ae56159 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
@@ -24,7 +24,8 @@ public void onCreate(Bundle state) {
     public void onResume() {
         super.onResume();
         mScannerView.setResultHandler(this);
-        mScannerView.startCamera(1);
+        SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+        mScannerView.startCamera( settings.getInt("scanner", 0));
     }
 
     @Override
diff --git a/timeattendance/src/main/res/drawable/round_button.xml b/timeattendance/src/main/res/drawable/round_button.xml
new file mode 100644
index 0000000..deba585
--- /dev/null
+++ b/timeattendance/src/main/res/drawable/round_button.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle" >
+
+    <solid android:color="#eeffffff" />
+
+    <corners android:radius="10dip" />
+
+</shape>
\ No newline at end of file
diff --git a/timeattendance/src/main/res/layout/activity_main.xml b/timeattendance/src/main/res/layout/activity_main.xml
index 51947c6..0413c76 100644
--- a/timeattendance/src/main/res/layout/activity_main.xml
+++ b/timeattendance/src/main/res/layout/activity_main.xml
@@ -16,7 +16,7 @@
     <Button
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="Start"
+        android:text="@string/action_start"
         android:id="@+id/button_start"
         android:layout_alignParentTop="false"
         android:layout_alignWithParentIfMissing="false"
diff --git a/timeattendance/src/main/res/layout/cam.xml b/timeattendance/src/main/res/layout/cam.xml
new file mode 100644
index 0000000..eade026
--- /dev/null
+++ b/timeattendance/src/main/res/layout/cam.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:id="@+id/layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent" >
+
+    <SurfaceView
+        android:id="@+id/surfaceView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+    <Button
+        android:id="@+id/btnCapture"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:background="@drawable/round_button" />
+
+</FrameLayout>
\ No newline at end of file
diff --git a/timeattendance/src/main/res/layout/camera.xml b/timeattendance/src/main/res/layout/camera.xml
new file mode 100644
index 0000000..1a633f4
--- /dev/null
+++ b/timeattendance/src/main/res/layout/camera.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    >
+
+    <SurfaceView
+        android:id="@+id/surfaceview"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:clipChildren="false"
+        android:layout_weight="1" />
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="Hello"
+        />
+
+    <Button
+        android:id="@+id/startcamerapreview"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="- Start Camera Preview -"
+        />
+
+    <Button
+        android:id="@+id/stopcamerapreview"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:text="- Stop Camera Preview -"
+        />
+</LinearLayout>
\ No newline at end of file
diff --git a/timeattendance/src/main/res/values-th/strings.xml b/timeattendance/src/main/res/values-th/strings.xml
index 4ffcfdb..b09c110 100644
--- a/timeattendance/src/main/res/values-th/strings.xml
+++ b/timeattendance/src/main/res/values-th/strings.xml
@@ -4,6 +4,9 @@
     <string name="hello_world">สวัสดี ชาวโลก!</string>
     <string name="action_settings">ตั้งค่า</string>
 
+    <string name="status_online">ออนไลน์</string>
+    <string name="status_offline">ออฟไลน์</string>
+
     <string name="txt_ipaddress">ไอพี แอดเดรส</string>
     <string name="txt_port">พอร์ต</string>
     <string name="txt_language">ภาษา</string>
@@ -11,6 +14,7 @@
     <string name="txt_capture">ถ่ายรูป</string>
 
     <string name="action_save">บันทึก</string>
+    <string name="action_start">เริ่ม</string>
 
     <string-array name="language_array">
         <item value="EN">อังกฤษ</item>
diff --git a/timeattendance/src/main/res/values/strings.xml b/timeattendance/src/main/res/values/strings.xml
index a1690b7..65869e1 100644
--- a/timeattendance/src/main/res/values/strings.xml
+++ b/timeattendance/src/main/res/values/strings.xml
@@ -4,6 +4,9 @@
     <string name="hello_world">Hello world!</string>
     <string name="action_settings">Settings</string>
 
+    <string name="status_online">Online</string>
+    <string name="status_offline">Offline</string>
+
     <string name="txt_ipaddress">IP Address</string>
     <string name="txt_port">Port</string>
     <string name="txt_language">Language</string>
@@ -11,6 +14,7 @@
     <string name="txt_capture">Capture</string>
 
     <string name="action_save">Save</string>
+    <string name="action_start">Start</string>
 
     <string-array name="language_array">
         <item value="EN">English</item>
@@ -20,4 +24,6 @@
         <item value="0">Back Camera</item>
         <item value="1">Front Camera</item>
     </string-array>
+
+
 </resources>
