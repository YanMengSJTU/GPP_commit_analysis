diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
index e7c2222..1e7c0dd 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/CaptureActivity.java
@@ -1,7 +1,11 @@
 package com.coresolutions.timeattendance;
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.FileOutputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.OutputStream;
 import java.util.ArrayList;
 import java.util.List;
@@ -9,13 +13,18 @@
 import android.app.Activity;
 import android.content.ContentValues;
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.Matrix;
 import android.graphics.PixelFormat;
 import android.hardware.Camera;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Bundle;
+import android.os.Environment;
 import android.os.Handler;
 import android.provider.MediaStore;
+import android.util.Base64;
 import android.util.Log;
 import android.view.SurfaceHolder;
 import android.view.SurfaceView;
@@ -47,7 +56,9 @@
     Handler timerUpdateHandler;
     boolean timerRunning = false;
     int currentTime = 4;
-
+    String[] data;
+    String datastring;
+    Bitmap bitmap;
 
     /** Called when the activity is first created. */
     @Override
@@ -133,11 +144,30 @@ public void onPictureTaken(byte[] data, Camera camera) {
         Uri imageFileUri = getContentResolver().insert(
             MediaStore.Images.Media.EXTERNAL_CONTENT_URI, new ContentValues());
         try {
-          OutputStream imageFileOS = getContentResolver().openOutputStream(
-                  imageFileUri);
-          imageFileOS.write(data);
-          imageFileOS.flush();
-          imageFileOS.close();
+            //OutputStream imageFileOS = getContentResolver().openOutputStream(imageFileUri);
+            //imageFileOS.write(data);
+            //imageFileOS.flush();
+            //imageFileOS.close();
+            FileOutputStream outStream = null;
+            File sdCard = Environment.getExternalStorageDirectory();
+            File dir = new File (sdCard.getAbsolutePath() + "/timeattendance");
+            dir.mkdirs();
+
+            File outFile = new File(dir, "tmp.png");
+
+            outStream = new FileOutputStream(outFile);
+            outStream.write(data);
+            outStream.flush();
+            outStream.close();
+
+            String callname = "/sdcard/timeattendance/tmp.png";
+            bitmap = BitmapFactory.decodeFile(callname);
+            bitmap = ResizeBitmap(bitmap);
+            bitmap = RotateBitmap(bitmap,-90);
+            ByteArrayOutputStream baos=new  ByteArrayOutputStream();
+            bitmap.compress(Bitmap.CompressFormat.PNG,100, baos);
+            byte [] b=baos.toByteArray();
+            datastring=Base64.encodeToString(b, Base64.DEFAULT);
 
             Toast.makeText(this, "Saved JPEG!", Toast.LENGTH_SHORT).show();
             final GlobalClass globalVariable = (GlobalClass) getApplicationContext();
@@ -216,7 +246,9 @@ protected Double doInBackground(String... params) {
         protected void onPostExecute(Double result) {
             //pb.setVisibility(View.GONE);
             //Toast.makeText(getApplicationContext(), ""+data[1]+" "+data[3], Toast.LENGTH_LONG).show();
-            CaptureActivity.this.finish();
+            //new uploadImage().execute(data[1]);
+            new UploadTask(data[1]).execute(bitmap);
+            //CaptureActivity.this.finish();
         }
         protected void onProgressUpdate(Integer... progress){
             //pb.setProgress(progress[0]);
@@ -224,20 +256,26 @@ protected void onProgressUpdate(Integer... progress){
 
         public void postData(String valueIWantToSend) {
             // Create a new HttpClient and Post Header
+            SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+            String ipAddress = settings.getString("ipaddress", "");
+            int port = settings.getInt("port", 80);
             HttpClient httpclient = new DefaultHttpClient();
-            HttpPost httppost = new HttpPost("http://157.179.24.77/timeattendance/connect_base.php");
+            HttpPost httppost = new HttpPost("http://"+ipAddress+":"+port+"/timeattendance/connect_base.php");
 
             try {
                 // Add your data
                 List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
                 nameValuePairs.add(new BasicNameValuePair("action", "time_attendance"));
                 nameValuePairs.add(new BasicNameValuePair("emp_id", valueIWantToSend));
+                nameValuePairs.add(new BasicNameValuePair("image", datastring));
                 httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs,"UTF-8"));
 
                 // Execute HTTP Post Request
                 HttpResponse response = httpclient.execute(httppost);
                 String actual = EntityUtils.toString(response.getEntity(), HTTP.UTF_8);
                 Log.v("test", "Your capture data: " + actual); //response data
+                data = actual.split("[|]");
+
             } catch (ClientProtocolException e) {
                 Log.v("test", "Error: " + e.getMessage());
             } catch (IOException e) {
@@ -247,4 +285,107 @@ public void postData(String valueIWantToSend) {
 
     }
 
+    private class UploadTask extends AsyncTask<Bitmap, Void, Void> {
+        String filename;
+        UploadTask(String filename) {
+            this.filename = filename;
+        }
+
+        protected Void doInBackground(Bitmap... bitmaps) {
+            if (bitmaps[0] == null)
+                return null;
+            setProgress(0);
+
+            Bitmap bitmap = bitmaps[0];
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream); // convert Bitmap to ByteArrayOutputStream
+            InputStream in = new ByteArrayInputStream(stream.toByteArray()); // convert ByteArrayOutputStream to ByteArrayInputStream
+            SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+            String ipAddress = settings.getString("ipaddress", "");
+            int port = settings.getInt("port", 80);
+            DefaultHttpClient httpclient = new DefaultHttpClient();
+            try {
+                HttpPost httppost = new HttpPost(
+                        "http://"+ipAddress+":"+port+"/timeattendance/saveimage.php"); // server
+
+                MultipartEntity reqEntity = new MultipartEntity();
+                reqEntity.addPart("myFile",filename+ ".jpg", in);
+                //reqEntity.addPart("emp_id",emp_id,in);
+                httppost.setEntity(reqEntity);
+
+                Log.i("test", "request " + httppost.getRequestLine());
+                HttpResponse response = null;
+                try {
+                    response = httpclient.execute(httppost);
+                } catch (ClientProtocolException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                } catch (IOException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+                try {
+                    if (response != null)
+                        Log.i("test", "response " + response.getStatusLine().toString());
+                } finally {
+
+                }
+            } finally {
+
+            }
+
+            if (in != null) {
+                try {
+                    in.close();
+                } catch (IOException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+            }
+
+            if (stream != null) {
+                try {
+                    stream.close();
+                } catch (IOException e) {
+                    // TODO Auto-generated catch block
+                    e.printStackTrace();
+                }
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onProgressUpdate(Void... values) {
+            // TODO Auto-generated method stub
+            super.onProgressUpdate(values);
+        }
+
+        @Override
+        protected void onPostExecute(Void result) {
+            // TODO Auto-generated method stub
+            super.onPostExecute(result);
+            CaptureActivity.this.finish();
+            //Toast.makeText(MainActivity.this, R.string.uploaded, Toast.LENGTH_LONG).show();
+        }
+    }
+
+
+    public Bitmap ResizeBitmap(Bitmap source)
+    {
+        SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+        int resolution = settings.getInt("resolution", 0);
+        if(resolution==0) {
+            return Bitmap.createScaledBitmap(source, 160, 120, false);
+        }else{
+            return Bitmap.createScaledBitmap(source, 320, 240, false);
+        }
+    }
+    public Bitmap RotateBitmap(Bitmap source, float angle)
+    {
+        Matrix matrix = new Matrix();
+        matrix.postRotate(angle);
+        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(), matrix, true);
+    }
+
 }
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
index 4ae119a..549d509 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/MainActivity.java
@@ -5,6 +5,8 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.res.Configuration;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
 import android.graphics.PorterDuff;
 import android.os.AsyncTask;
 import android.support.v7.app.ActionBarActivity;
@@ -15,6 +17,7 @@
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.Button;
+import android.widget.ImageView;
 import android.widget.ProgressBar;
 import android.widget.TextView;
 import android.widget.Toast;
@@ -181,6 +184,7 @@ public boolean checkSetting() {
             editor.putString("language", "en");
             editor.putInt("scanner", 0);      // 0 = back camera | 1 = front camera
             editor.putInt("capture", 0);  // 0 = back camera | 1 = front camera
+            editor.putInt("resolution", 0);  // 0 = 160x120 | 1 = 320x240
             editor.commit();
             return false;
         } else {
@@ -223,6 +227,7 @@ public  void checkState(){
             intent = new Intent(getApplicationContext(), CaptureActivity.class);
             startActivity(intent);
         }else if(globalVariable.getState().equals("capture")){
+            displayimages();
             globalVariable.setState("main");
         }
     }
@@ -236,7 +241,17 @@ public static void restartActivity(Activity act){
 
     }
 
+    private void displayimages()
+    {
+        // TODO Auto-generated method stub
+        ImageView iv = (ImageView) findViewById(R.id.imagetime);
 
+        String callnameRimage = "/sdcard/timeattendance/tmp.png";
+        Bitmap bitmap1 = BitmapFactory.decodeFile(callnameRimage);
+        iv.setImageBitmap(bitmap1);
+
+
+    }
 }
 
 
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/MultipartEntity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/MultipartEntity.java
new file mode 100644
index 0000000..bca5e3b
--- /dev/null
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/MultipartEntity.java
@@ -0,0 +1,152 @@
+package com.coresolutions.timeattendance;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import org.apache.http.Header;
+import org.apache.http.HttpEntity;
+import org.apache.http.message.BasicHeader;
+
+public class MultipartEntity implements HttpEntity {
+
+    private String boundary = null;
+
+    ByteArrayOutputStream out = new ByteArrayOutputStream();
+    boolean isSetLast = false;
+    boolean isSetFirst = false;
+
+    public MultipartEntity() {
+        this.boundary = System.currentTimeMillis() + "";
+    }
+
+    public void writeFirstBoundaryIfNeeds(){
+        if(!isSetFirst){
+            try {
+                out.write(("--" + boundary + "\r\n").getBytes());
+            } catch (final IOException e) {
+
+            }
+        }
+        isSetFirst = true;
+    }
+
+    public void writeLastBoundaryIfNeeds() {
+        if(isSetLast){
+            return ;
+        }
+        try {
+            out.write(("\r\n--" + boundary + "--\r\n").getBytes());
+        } catch (final IOException e) {
+
+        }
+        isSetLast = true;
+    }
+
+    public void addPart(final String key, final String value) {
+        writeFirstBoundaryIfNeeds();
+        try {
+            out.write(("Content-Disposition: form-data; name=\"" +key+"\"\r\n").getBytes());
+            out.write("Content-Type: text/plain; charset=UTF-8\r\n".getBytes());
+            out.write("Content-Transfer-Encoding: 8bit\r\n\r\n".getBytes());
+            out.write(value.getBytes());
+            out.write(("\r\n--" + boundary + "\r\n").getBytes());
+        } catch (final IOException e) {
+
+        }
+    }
+
+    public void addPart(final String key, final String fileName, final InputStream fin){
+        addPart(key, fileName, fin, "application/octet-stream");
+    }
+
+    public void addPart(final String key, final String fileName, final InputStream fin, String type){
+        writeFirstBoundaryIfNeeds();
+        try {
+            type = "Content-Type: "+type+"\r\n";
+            out.write(("Content-Disposition: form-data; name=\""+ key+"\"; filename=\"" + fileName + "\"\r\n").getBytes());
+            out.write(type.getBytes());
+            out.write("Content-Transfer-Encoding: binary\r\n\r\n".getBytes());
+
+            final byte[] tmp = new byte[4096];
+            int l = 0;
+            while ((l = fin.read(tmp)) != -1) {
+                out.write(tmp, 0, l);
+            }
+            out.flush();
+        } catch (final IOException e) {
+
+        } finally {
+            try {
+                fin.close();
+            } catch (final IOException e) {
+
+            }
+        }
+    }
+
+    public void addPart(final String key, final File value) {
+        try {
+            addPart(key, value.getName(), new FileInputStream(value));
+        } catch (final FileNotFoundException e) {
+
+        }
+    }
+
+    @Override
+    public long getContentLength() {
+        writeLastBoundaryIfNeeds();
+        return out.toByteArray().length;
+    }
+
+    @Override
+    public Header getContentType() {
+        return new BasicHeader("Content-Type", "multipart/form-data; boundary=" + boundary);
+    }
+
+    @Override
+    public boolean isChunked() {
+        return false;
+    }
+
+    @Override
+    public boolean isRepeatable() {
+        return false;
+    }
+
+    @Override
+    public boolean isStreaming() {
+        return false;
+    }
+
+    @Override
+    public void writeTo(final OutputStream outstream) throws IOException {
+        outstream.write(out.toByteArray());
+    }
+
+    @Override
+    public Header getContentEncoding() {
+        return null;
+    }
+
+    @Override
+    public void consumeContent() throws IOException,
+            UnsupportedOperationException {
+        if (isStreaming()) {
+            throw new UnsupportedOperationException(
+                    "Streaming entity does not implement #consumeContent()");
+        }
+    }
+
+    @Override
+    public InputStream getContent() throws IOException,
+            UnsupportedOperationException {
+        return new ByteArrayInputStream(out.toByteArray());
+    }
+
+}
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/SettingActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/SettingActivity.java
index 4223ad0..846dcfd 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/SettingActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/SettingActivity.java
@@ -21,7 +21,7 @@
  */
 public class SettingActivity extends ActionBarActivity {
     EditText ipaddress,port;
-    Spinner language,scanner,capture;
+    Spinner language,scanner,capture,resolution;
     Intent intent;
 
     @Override
@@ -77,6 +77,18 @@ protected void onCreate(Bundle savedInstanceState) {
             spinnerPostion = 0;
         }
 
+        resolution = (Spinner) findViewById(R.id.spn_resolution);
+        ArrayAdapter<CharSequence> adapter3 = ArrayAdapter.createFromResource(this,
+                R.array.resolution_array, android.R.layout.simple_spinner_item);
+        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        resolution.setAdapter(adapter3);
+        String tmp_resolution= getResolutionDesc(settings.getInt("resolution", 0));
+        if (!tmp_resolution.equals(null)) {
+            spinnerPostion = adapter3.getPosition(tmp_resolution);
+            resolution.setSelection(spinnerPostion);
+            spinnerPostion = 0;
+        }
+
     }
 
     @Override
@@ -104,6 +116,7 @@ public boolean onOptionsItemSelected(MenuItem item) {
             //Toast.makeText(this, "scanner = "+getCameraType(scanner.getSelectedItem().toString()), Toast.LENGTH_SHORT).show();
             editor.putInt("scanner", getCameraType(scanner.getSelectedItem().toString()));;      // 0 = back camera | 1 = front camera
             editor.putInt("capture", getCameraType(capture.getSelectedItem().toString()));  // 0 = back camera | 1 = front camera
+            editor.putInt("resolution", getResolutionType(resolution.getSelectedItem().toString()));  // 0 = back camera | 1 = front camera
             editor.commit();
             this.finish();
             return true;
@@ -157,5 +170,26 @@ public String getCameraDesc(int camera){
             return camera_array[0];
         }
     }
+    public int getResolutionType(String resolution){
+        String[] resolution_array = getResources().getStringArray(R.array.resolution_array);
+        if(resolution.equals(resolution_array[0])) {
+            return 0;
+        }else if(resolution.equals(resolution_array[1])) {
+            return 1;
+        }else{
+            return 0;
+        }
 
+    }
+    public String getResolutionDesc(int resolution){
+        String[] resolution_array = getResources().getStringArray(R.array.resolution_array);
+        //Toast.makeText(this, "camera = "+camera+" | "+camera_array[0]+" | "+camera_array[1], Toast.LENGTH_SHORT).show();
+        if(resolution == 0) {
+            return resolution_array[0];
+        }else if(resolution == 1) {
+            return resolution_array[1];
+        }else{
+            return resolution_array[0];
+        }
+    }
 }
diff --git a/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java b/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
index ab56b98..eb0b0bd 100644
--- a/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
+++ b/timeattendance/src/main/java/com/coresolutions/timeattendance/SimpleScannerActivity.java
@@ -101,8 +101,11 @@ protected void onProgressUpdate(Integer... progress){
 
         public void postData(String valueIWantToSend) {
             // Create a new HttpClient and Post Header
+            SharedPreferences settings = getSharedPreferences("ConfigFile", 0);
+            String ipAddress = settings.getString("ipaddress", "");
+            int port = settings.getInt("port", 80);
             HttpClient httpclient = new DefaultHttpClient();
-            HttpPost httppost = new HttpPost("http://157.179.24.77/timeattendance/connect_base.php");
+            HttpPost httppost = new HttpPost("http://"+ipAddress+":"+port+"/timeattendance/connect_base.php");
 
             try {
                 // Add your data
diff --git a/timeattendance/src/main/res/layout/activity_main.xml b/timeattendance/src/main/res/layout/activity_main.xml
index 2299867..dac0a60 100644
--- a/timeattendance/src/main/res/layout/activity_main.xml
+++ b/timeattendance/src/main/res/layout/activity_main.xml
@@ -9,6 +9,12 @@
     android:paddingBottom="@dimen/activity_vertical_margin"
     tools:context=".MainActivity">
 
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/imagetime"
+        android:layout_centerVertical="true"
+        android:layout_centerHorizontal="true" />
 
     <TextView android:text="@string/hello_world"
         android:id="@+id/txt_status"
diff --git a/timeattendance/src/main/res/layout/setting.xml b/timeattendance/src/main/res/layout/setting.xml
index 8cef3a0..e05c657 100644
--- a/timeattendance/src/main/res/layout/setting.xml
+++ b/timeattendance/src/main/res/layout/setting.xml
@@ -43,4 +43,11 @@
         android:layout_width="match_parent"
         android:layout_height="wrap_content" />
 
+    <TextView android:textColor="#000" android:textSize="20dp"
+        android:layout_height="wrap_content" android:id="@+id/lab_resolution"
+        android:text="@string/txt_resolution" android:layout_width="match_parent" />
+    <Spinner android:id="@+id/spn_resolution"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content" />
+
 </LinearLayout>
\ No newline at end of file
diff --git a/timeattendance/src/main/res/values-th/strings.xml b/timeattendance/src/main/res/values-th/strings.xml
index b09c110..834c1bb 100644
--- a/timeattendance/src/main/res/values-th/strings.xml
+++ b/timeattendance/src/main/res/values-th/strings.xml
@@ -12,6 +12,7 @@
     <string name="txt_language">ภาษา</string>
     <string name="txt_scanner">แสกนบัตร</string>
     <string name="txt_capture">ถ่ายรูป</string>
+    <string name="txt_resolution">ขนาดรูป</string>
 
     <string name="action_save">บันทึก</string>
     <string name="action_start">เริ่ม</string>
@@ -24,4 +25,8 @@
         <item value="0">กล้องหลัง</item>
         <item value="1">กล้องหน้า</item>
     </string-array>
+    <string-array name="resolution_array">
+        <item value="0">160x120</item>
+        <item value="1">320x240</item>
+    </string-array>
 </resources>
diff --git a/timeattendance/src/main/res/values/strings.xml b/timeattendance/src/main/res/values/strings.xml
index 65869e1..ba0acf7 100644
--- a/timeattendance/src/main/res/values/strings.xml
+++ b/timeattendance/src/main/res/values/strings.xml
@@ -12,6 +12,8 @@
     <string name="txt_language">Language</string>
     <string name="txt_scanner">Scanner</string>
     <string name="txt_capture">Capture</string>
+    <string name="txt_resolution">Resolution</string>
+
 
     <string name="action_save">Save</string>
     <string name="action_start">Start</string>
@@ -24,6 +26,9 @@
         <item value="0">Back Camera</item>
         <item value="1">Front Camera</item>
     </string-array>
-
+    <string-array name="resolution_array">
+        <item value="0">160x120</item>
+        <item value="1">320x240</item>
+    </string-array>
 
 </resources>
