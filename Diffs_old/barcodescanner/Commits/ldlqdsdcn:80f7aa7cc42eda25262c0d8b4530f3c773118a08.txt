diff --git a/build.gradle b/build.gradle
index 33cd9fe..9dbad92 100644
--- a/build.gradle
+++ b/build.gradle
@@ -4,7 +4,7 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.1.2'
+        classpath 'com.android.tools.build:gradle:2.2.2'
     }
 }
 
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 43cf4ea..a4e3335 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Dec 30 05:01:23 MST 2015
+#Mon Oct 24 08:31:28 CST 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.14-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.14.1-all.zip
diff --git a/settings.gradle b/settings.gradle
index 8b363d8..96d1f34 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1,2 @@
+include ':zxingscanning'
 include "core", "zxing", "zxing-sample", "zbar", "zbar-sample"
diff --git a/zxingscanning/.gitignore b/zxingscanning/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/zxingscanning/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/zxingscanning/build.gradle b/zxingscanning/build.gradle
new file mode 100644
index 0000000..df26336
--- /dev/null
+++ b/zxingscanning/build.gradle
@@ -0,0 +1,34 @@
+apply plugin: 'com.android.application'
+
+android {
+    compileSdkVersion 24
+    buildToolsVersion "24.0.3"
+
+    defaultConfig {
+        applicationId "indi.solomon.zxingscanning"
+        minSdkVersion 23
+        targetSdkVersion 24
+        versionCode 1
+        versionName "1.0"
+
+        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
+
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile 'me.dm7.barcodescanner:zxing:1.9'
+    compile 'com.android.support:design:24.1.1'
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
+        exclude group: 'com.android.support', module: 'support-annotations'
+    })
+    compile 'com.android.support:appcompat-v7:24.2.1'
+    testCompile 'junit:junit:4.12'
+}
diff --git a/zxingscanning/proguard-rules.pro b/zxingscanning/proguard-rules.pro
new file mode 100644
index 0000000..e0951c2
--- /dev/null
+++ b/zxingscanning/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in G:\java\Sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/zxingscanning/src/androidTest/java/indi/solomon/zxingscanning/ExampleInstrumentedTest.java b/zxingscanning/src/androidTest/java/indi/solomon/zxingscanning/ExampleInstrumentedTest.java
new file mode 100644
index 0000000..b655104
--- /dev/null
+++ b/zxingscanning/src/androidTest/java/indi/solomon/zxingscanning/ExampleInstrumentedTest.java
@@ -0,0 +1,26 @@
+package indi.solomon.zxingscanning;
+
+import android.content.Context;
+import android.support.test.InstrumentationRegistry;
+import android.support.test.runner.AndroidJUnit4;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.junit.Assert.*;
+
+/**
+ * Instrumentation test, which will execute on an Android device.
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+@RunWith(AndroidJUnit4.class)
+public class ExampleInstrumentedTest {
+    @Test
+    public void useAppContext() throws Exception {
+        // Context of the app under test.
+        Context appContext = InstrumentationRegistry.getTargetContext();
+
+        assertEquals("indi.solomon.zxingscanning", appContext.getPackageName());
+    }
+}
diff --git a/zxingscanning/src/main/AndroidManifest.xml b/zxingscanning/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..37f5327
--- /dev/null
+++ b/zxingscanning/src/main/AndroidManifest.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="indi.solomon.zxingscanning">
+    <uses-permission android:name="android.permission.CAMERA" />
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <application android:allowBackup="true" android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name" android:supportsRtl="true" android:theme="@style/AppTheme">
+        <activity android:name=".MainActivity">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+        <activity android:name=".ScanningActivity"
+            android:theme="@style/AppOverlayTheme" android:exported="true"
+            android:uiOptions="splitActionBarWhenNarrow"
+            android:label="@string/scanner_activity">
+            <meta-data android:name="android.support.UI_OPTIONS"
+                android:value="splitActionBarWhenNarrow" />
+        </activity>
+    </application>
+
+</manifest>
\ No newline at end of file
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/CameraSelectorDialogFragment.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/CameraSelectorDialogFragment.java
new file mode 100644
index 0000000..3651783
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/CameraSelectorDialogFragment.java
@@ -0,0 +1,87 @@
+package indi.solomon.zxingscanning;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.hardware.Camera;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+public class CameraSelectorDialogFragment extends DialogFragment {
+    public interface CameraSelectorDialogListener {
+        void onCameraSelected(int cameraId);
+    }
+
+    private int mCameraId;
+    private CameraSelectorDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static CameraSelectorDialogFragment newInstance(CameraSelectorDialogListener listener, int cameraId) {
+        CameraSelectorDialogFragment fragment = new CameraSelectorDialogFragment();
+        fragment.mCameraId = cameraId;
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        if(mListener == null) {
+            dismiss();
+            return null;
+        }
+
+        int numberOfCameras = Camera.getNumberOfCameras();
+        String[] cameraNames = new String[numberOfCameras];
+        int checkedIndex = 0;
+
+        for (int i = 0; i < numberOfCameras; i++) {
+            Camera.CameraInfo info = new Camera.CameraInfo();
+            Camera.getCameraInfo(i, info);
+            if(info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
+                cameraNames[i] = "Front Facing";
+            } else if(info.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
+                cameraNames[i] = "Rear Facing";
+            } else {
+                cameraNames[i] = "Camera ID: " + i;
+            }
+            if(i == mCameraId) {
+                checkedIndex = i;
+            }
+        }
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        // Set the dialog title
+        builder.setTitle(R.string.select_camera)
+                // Specify the list array, the items to be selected by default (null for none),
+                // and the listener through which to receive callbacks when items are selected
+                .setSingleChoiceItems(cameraNames, checkedIndex,
+                        new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                mCameraId = which;
+                            }
+                        })
+                        // Set the action buttons
+                .setPositiveButton(R.string.ok_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                        // User clicked OK, so save the mSelectedIndices results somewhere
+                        // or return them to the component that opened the dialog
+                        if (mListener != null) {
+                            mListener.onCameraSelected(mCameraId);
+                        }
+                    }
+                })
+                .setNegativeButton(R.string.cancel_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                    }
+                });
+
+        return builder.create();
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/FormatSelectorDialogFragment.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/FormatSelectorDialogFragment.java
new file mode 100644
index 0000000..9d17184
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/FormatSelectorDialogFragment.java
@@ -0,0 +1,95 @@
+package indi.solomon.zxingscanning;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+import com.google.zxing.BarcodeFormat;
+
+import java.util.ArrayList;
+
+import me.dm7.barcodescanner.zxing.ZXingScannerView;
+
+public class FormatSelectorDialogFragment extends DialogFragment {
+    public interface FormatSelectorDialogListener {
+        public void onFormatsSaved(ArrayList<Integer> selectedIndices);
+    }
+
+    private ArrayList<Integer> mSelectedIndices;
+    private FormatSelectorDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static FormatSelectorDialogFragment newInstance(FormatSelectorDialogListener listener, ArrayList<Integer> selectedIndices) {
+        FormatSelectorDialogFragment fragment = new FormatSelectorDialogFragment();
+        if(selectedIndices == null) {
+            selectedIndices = new ArrayList<Integer>();
+        }
+        fragment.mSelectedIndices = new ArrayList<Integer>(selectedIndices);
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        if(mSelectedIndices == null || mListener == null) {
+            dismiss();
+            return null;
+        }
+
+        String[] formats = new String[ZXingScannerView.ALL_FORMATS.size()];
+        boolean[] checkedIndices = new boolean[ZXingScannerView.ALL_FORMATS.size()];
+        int i = 0;
+        for(BarcodeFormat format : ZXingScannerView.ALL_FORMATS) {
+            formats[i] = format.toString();
+            if(mSelectedIndices.contains(i)) {
+                checkedIndices[i] = true;
+            } else {
+                checkedIndices[i] = false;
+            }
+            i++;
+        }
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        // Set the dialog title
+        builder.setTitle(R.string.choose_formats)
+                // Specify the list array, the items to be selected by default (null for none),
+                // and the listener through which to receive callbacks when items are selected
+                .setMultiChoiceItems(formats, checkedIndices,
+                        new DialogInterface.OnMultiChoiceClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which, boolean isChecked) {
+                                if (isChecked) {
+                                    // If the user checked the item, add it to the selected items
+                                    mSelectedIndices.add(which);
+                                } else if (mSelectedIndices.contains(which)) {
+                                    // Else, if the item is already in the array, remove it
+                                    mSelectedIndices.remove(mSelectedIndices.indexOf(which));
+                                }
+                            }
+                        })
+                        // Set the action buttons
+                .setPositiveButton(R.string.ok_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                        // User clicked OK, so save the mSelectedIndices results somewhere
+                        // or return them to the component that opened the dialog
+                        if (mListener != null) {
+                            mListener.onFormatsSaved(mSelectedIndices);
+                        }
+                    }
+                })
+                .setNegativeButton(R.string.cancel_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                    }
+                });
+
+        return builder.create();
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/MainActivity.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/MainActivity.java
new file mode 100644
index 0000000..cdb84ea
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/MainActivity.java
@@ -0,0 +1,73 @@
+package indi.solomon.zxingscanning;
+
+import android.Manifest;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v4.widget.ListViewAutoScrollHelper;
+import android.support.v7.app.AppCompatActivity;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.ListView;
+
+import java.util.List;
+
+import indi.solomon.zxingscanning.adaper.ScannedResultAdaper;
+import indi.solomon.zxingscanning.dao.ScannedResultDao;
+import indi.solomon.zxingscanning.po.ScannedResult;
+
+public class MainActivity extends AppCompatActivity {
+    private static final int ZXING_CAMERA_PERMISSION = 1;
+    private Class<?> mClss;
+    private ScannedResultDao scannedResultDao;
+    private ListView listItem;
+    private ScannedResultAdaper scannedResultAdaper = null;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+        listItem = (ListView) findViewById(R.id.list_item);
+        findViewById(R.id.btn_scanning).setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View view) {
+                launchActivity(ScanningActivity.class);
+            }
+        });
+        scannedResultDao = new ScannedResultDao(this);
+
+    }
+
+    @Override
+    protected void onResume() {
+        init();
+        super.onResume();
+    }
+
+    public void launchActivity(Class<?> clss) {
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
+                != PackageManager.PERMISSION_GRANTED) {
+            mClss = clss;
+            ActivityCompat.requestPermissions(this,
+                    new String[]{Manifest.permission.CAMERA}, ZXING_CAMERA_PERMISSION);
+        } else {
+            Intent intent = new Intent(this, clss);
+            startActivity(intent);
+        }
+    }
+
+    private void init() {
+        List<ScannedResult> scannedResultList = scannedResultDao.list();
+        Log.d("ZX_MAIN","-------------------scannedResultList.size="+scannedResultList.size());
+        if (scannedResultAdaper != null) {
+            scannedResultAdaper.updateList(scannedResultList);
+            scannedResultAdaper.notifyDataSetInvalidated();
+        } else {
+            ScannedResultAdaper scannedResultAdaper = new ScannedResultAdaper(this, scannedResultList);
+            this.listItem.setAdapter(scannedResultAdaper);
+        }
+
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/MessageDialogFragment.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/MessageDialogFragment.java
new file mode 100644
index 0000000..ddd112e
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/MessageDialogFragment.java
@@ -0,0 +1,47 @@
+package indi.solomon.zxingscanning;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+public class MessageDialogFragment extends DialogFragment {
+    public interface MessageDialogListener {
+        public void onDialogPositiveClick(DialogFragment dialog);
+    }
+
+    private String mTitle;
+    private String mMessage;
+    private MessageDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static MessageDialogFragment newInstance(String title, String message, MessageDialogListener listener) {
+        MessageDialogFragment fragment = new MessageDialogFragment();
+        fragment.mTitle = title;
+        fragment.mMessage = message;
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        builder.setMessage(mMessage)
+                .setTitle(mTitle);
+
+        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int id) {
+                if(mListener != null) {
+                    mListener.onDialogPositiveClick(MessageDialogFragment.this);
+                }
+            }
+        });
+
+        return builder.create();
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/ScanningActivity.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/ScanningActivity.java
new file mode 100644
index 0000000..1f6136d
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/ScanningActivity.java
@@ -0,0 +1,241 @@
+package indi.solomon.zxingscanning;
+
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.MenuItemCompat;
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.ViewGroup;
+
+import com.google.zxing.BarcodeFormat;
+import com.google.zxing.Result;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import indi.solomon.zxingscanning.dao.ScannedResultDao;
+import indi.solomon.zxingscanning.po.ScannedResult;
+import me.dm7.barcodescanner.zxing.ZXingScannerView;
+
+public class ScanningActivity extends AppCompatActivity implements MessageDialogFragment.MessageDialogListener,
+        ZXingScannerView.ResultHandler, FormatSelectorDialogFragment.FormatSelectorDialogListener,
+        CameraSelectorDialogFragment.CameraSelectorDialogListener {
+    private static final String FLASH_STATE = "FLASH_STATE";
+    private static final String AUTO_FOCUS_STATE = "AUTO_FOCUS_STATE";
+    private static final String SELECTED_FORMATS = "SELECTED_FORMATS";
+    private static final String CAMERA_ID = "CAMERA_ID";
+    private ZXingScannerView mScannerView;
+    private boolean mFlash;
+    private boolean mAutoFocus;
+    private ArrayList<Integer> mSelectedIndices;
+    private int mCameraId = -1;
+    private ScannedResultDao scannedResultDao;
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        if(state != null) {
+            mFlash = state.getBoolean(FLASH_STATE, false);
+            mAutoFocus = state.getBoolean(AUTO_FOCUS_STATE, true);
+            mSelectedIndices = state.getIntegerArrayList(SELECTED_FORMATS);
+            mCameraId = state.getInt(CAMERA_ID, -1);
+        } else {
+            mFlash = false;
+            mAutoFocus = true;
+            mSelectedIndices = null;
+            mCameraId = -1;
+        }
+
+        setContentView(R.layout.activity_scanning);
+        setupToolbar();
+
+        ViewGroup contentFrame = (ViewGroup) findViewById(R.id.content_frame);
+        mScannerView = new ZXingScannerView(this);
+        setupFormats();
+        contentFrame.addView(mScannerView);
+        scannedResultDao=new ScannedResultDao(this);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mScannerView.setResultHandler(this);
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(FLASH_STATE, mFlash);
+        outState.putBoolean(AUTO_FOCUS_STATE, mAutoFocus);
+        outState.putIntegerArrayList(SELECTED_FORMATS, mSelectedIndices);
+        outState.putInt(CAMERA_ID, mCameraId);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuItem menuItem;
+
+        if(mFlash) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+
+        if(mAutoFocus) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_formats, 0, R.string.formats);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_camera_selector, 0, R.string.select_camera);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle presses on the action bar items
+        switch (item.getItemId()) {
+            case R.id.menu_flash:
+                mFlash = !mFlash;
+                if(mFlash) {
+                    item.setTitle(R.string.flash_on);
+                } else {
+                    item.setTitle(R.string.flash_off);
+                }
+                mScannerView.setFlash(mFlash);
+                return true;
+            case R.id.menu_auto_focus:
+                mAutoFocus = !mAutoFocus;
+                if(mAutoFocus) {
+                    item.setTitle(R.string.auto_focus_on);
+                } else {
+                    item.setTitle(R.string.auto_focus_off);
+                }
+                mScannerView.setAutoFocus(mAutoFocus);
+                return true;
+            case R.id.menu_formats:
+                DialogFragment fragment = FormatSelectorDialogFragment.newInstance(this, mSelectedIndices);
+                fragment.show(getSupportFragmentManager(), "format_selector");
+                return true;
+            case R.id.menu_camera_selector:
+                mScannerView.stopCamera();
+                DialogFragment cFragment = CameraSelectorDialogFragment.newInstance(this, mCameraId);
+                cFragment.show(getSupportFragmentManager(), "camera_selector");
+                return true;
+                // Respond to the action bar's Up/Home button
+                case android.R.id.home:
+                    finish();
+                    return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+        try {
+            Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
+            Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
+            r.play();
+        } catch (Exception e) {}
+        showMessageDialog("Contents = " + rawResult.getText() + ", Format = " + rawResult.getBarcodeFormat().toString());
+        ScannedResult scannedResult=new ScannedResult();
+        scannedResult.setFormat(rawResult.getBarcodeFormat().toString());
+        scannedResult.setResultText(rawResult.getText());
+        scannedResult.setInDate(System.currentTimeMillis());
+        scannedResultDao.insertScannedResult(scannedResult);
+    }
+
+    public void showMessageDialog(String message) {
+        DialogFragment fragment = MessageDialogFragment.newInstance("Scan Results", message, this);
+        fragment.show(getSupportFragmentManager(), "scan_results");
+    }
+
+    public void closeMessageDialog() {
+        closeDialog("scan_results");
+    }
+
+    public void closeFormatsDialog() {
+        closeDialog("format_selector");
+    }
+
+    public void closeDialog(String dialogName) {
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        DialogFragment fragment = (DialogFragment) fragmentManager.findFragmentByTag(dialogName);
+        if(fragment != null) {
+            fragment.dismiss();
+        }
+    }
+
+    @Override
+    public void onDialogPositiveClick(DialogFragment dialog) {
+        // Resume the camera
+        mScannerView.resumeCameraPreview(this);
+    }
+
+
+    public void onFormatsSaved(ArrayList<Integer> selectedIndices) {
+        mSelectedIndices = selectedIndices;
+        setupFormats();
+    }
+
+
+    public void onCameraSelected(int cameraId) {
+        mCameraId = cameraId;
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+    public void setupFormats() {
+        List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
+        if(mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+            mSelectedIndices = new ArrayList<Integer>();
+            for(int i = 0; i < ZXingScannerView.ALL_FORMATS.size(); i++) {
+                mSelectedIndices.add(i);
+            }
+        }
+
+        for(int index : mSelectedIndices) {
+            formats.add(ZXingScannerView.ALL_FORMATS.get(index));
+        }
+        if(mScannerView != null) {
+            mScannerView.setFormats(formats);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mScannerView.stopCamera();
+        closeMessageDialog();
+        closeFormatsDialog();
+    }
+
+    public void setupToolbar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+        final ActionBar ab = getSupportActionBar();
+        if(ab != null) {
+            ab.setDisplayHomeAsUpEnabled(true);
+        }
+    }
+
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/adaper/ScannedResultAdaper.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/adaper/ScannedResultAdaper.java
new file mode 100644
index 0000000..a0c7054
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/adaper/ScannedResultAdaper.java
@@ -0,0 +1,63 @@
+package indi.solomon.zxingscanning.adaper;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+
+import indi.solomon.zxingscanning.R;
+import indi.solomon.zxingscanning.po.ScannedResult;
+
+/**
+ * Created by admin on 2016/10/24.
+ */
+
+public class ScannedResultAdaper extends BaseAdapter {
+    private LayoutInflater mInflater = null;
+    private List<ScannedResult> list;
+    private static final DateFormat yyyyMMddHHmmss = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+
+    public ScannedResultAdaper(Context context, List<ScannedResult> list) {
+        this.list = list;
+        mInflater = LayoutInflater.from(context);
+    }
+
+    public void updateList(List<ScannedResult> list) {
+        this.list = list;
+    }
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public Object getItem(int i) {
+        return list.get(i);
+    }
+
+    @Override
+    public long getItemId(int i) {
+        return list.get(i).getId();
+    }
+
+    @Override
+    public View getView(int i, View view, ViewGroup viewGroup) {
+        View item = mInflater.inflate(R.layout.adaper_scanned_result, null);
+        TextView inDate = (TextView) item.findViewById(R.id.in_date);
+        ScannedResult scannedResult = list.get(i);
+        inDate.setText(yyyyMMddHHmmss.format(new Date(scannedResult.getInDate())));
+        TextView scannedText = (TextView) item.findViewById(R.id.scanned_text);
+        scannedText.setText(scannedResult.getResultText());
+        TextView format = (TextView) item.findViewById(R.id.format);
+        format.setText(scannedResult.getFormat());
+        return item;
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseConsts.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseConsts.java
new file mode 100644
index 0000000..09c27b2
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseConsts.java
@@ -0,0 +1,31 @@
+package indi.solomon.zxingscanning.dao;
+
+import android.provider.SyncStateContract;
+
+/**
+ * Created by admin on 2016/10/24.
+ */
+
+public class DatabaseConsts {
+    public static final class  SANNED_RESULT_TABLE
+    {
+        public static final String TABLE_NAME="scanned_result";
+        public static final String COLUMN_NAME_ID= "id" ;
+        public static final String COLUMN_NAME_SCANNED_RESULT="scanned_text";
+        public static final String COLUMN_NAME_FORMAT="scan_format";
+        public static final String COLUMN_NAME_IN_DATE="in_date";
+        public static final String COLUMN_TYPE_ID="INTEGER";
+        public static final String COLUMN_TYPE_SCANNED_RESULT="TEXT";
+        public static final String COLUMN_TYPE_FORMAT="TEXT";
+        public static final String COLUMN_IN_DATE="INTEGER";
+
+        public static final String CREATE_TABLE = "Create  TABLE scanned_result(\n" +
+                "[id] integer PRIMARY KEY AUTOINCREMENT\n" +
+                ",[in_date] integer\n" +
+                ",[scan_format] text\n" +
+                ",[scanned_text] text\n" +
+                "   \n" +
+                ")";
+
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseHelper.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseHelper.java
new file mode 100644
index 0000000..2c36239
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/DatabaseHelper.java
@@ -0,0 +1,40 @@
+package indi.solomon.zxingscanning.dao;
+
+import android.content.Context;
+import android.database.sqlite.SQLiteDatabase;
+import android.database.sqlite.SQLiteOpenHelper;
+import android.util.Log;
+
+/**
+ * Created by admin on 2016/10/24.
+ */
+
+public class DatabaseHelper extends SQLiteOpenHelper {
+
+    private static DatabaseHelper databaseHelper;
+    private static final String DATABASE_NAME = "zxing_scanning.db";
+    private static final int  DATABASE_VERSION= 1;
+    private DatabaseHelper(Context context) {
+        super(context, DATABASE_NAME, null, DATABASE_VERSION);
+    }
+    @Override
+    public void onCreate(SQLiteDatabase db) {
+        Log.d("DatabaseHelper",DatabaseConsts.SANNED_RESULT_TABLE.CREATE_TABLE);
+        db.execSQL(DatabaseConsts.SANNED_RESULT_TABLE.CREATE_TABLE);
+    }
+
+    @Override
+    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
+
+    }
+    public static synchronized DatabaseHelper getDatabaseHelper(Context context)
+    {
+
+        if(databaseHelper==null)
+        {
+            databaseHelper=new DatabaseHelper(context);
+        }
+        return databaseHelper;
+    }
+
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/ScannedResultDao.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/ScannedResultDao.java
new file mode 100644
index 0000000..ad45096
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/dao/ScannedResultDao.java
@@ -0,0 +1,66 @@
+package indi.solomon.zxingscanning.dao;
+
+import android.app.DownloadManager;
+import android.content.Context;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.util.Log;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Queue;
+
+import indi.solomon.zxingscanning.po.ScannedResult;
+
+/**
+ * Created by admin on 2016/10/24.
+ */
+
+public class ScannedResultDao {
+    DatabaseHelper databaseHelper;
+    public ScannedResultDao(Context context)
+    {
+        databaseHelper=DatabaseHelper.getDatabaseHelper(context);
+    }
+
+
+    public void insertScannedResult(ScannedResult scannedResult)
+    {
+        Log.d("ScannedResultDao","insert to table bgn");
+        SQLiteDatabase sqLiteDatabase= databaseHelper.getWritableDatabase();
+        long id=sqLiteDatabase.insert(DatabaseConsts.SANNED_RESULT_TABLE.TABLE_NAME,null,scannedResult.toInsertValues());
+
+        Log.d("ScannedResultDao","insert to table end id="+id);
+
+    }
+
+    public void deleteScannedResult(Integer id)
+    {
+        SQLiteDatabase sqLiteDatabase= databaseHelper.getWritableDatabase();
+        String[] whereARgs=new String[]{String.valueOf(id)};
+        sqLiteDatabase.delete(DatabaseConsts.SANNED_RESULT_TABLE.TABLE_NAME,"  id=?",whereARgs);
+    }
+    public List<ScannedResult> list()
+    {
+        List<ScannedResult> result=new ArrayList();
+        SQLiteDatabase sqLiteDatabase= databaseHelper.getWritableDatabase();
+        Cursor cursor =sqLiteDatabase.query(DatabaseConsts.SANNED_RESULT_TABLE.TABLE_NAME,new String[]{DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_ID,DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_IN_DATE,DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_SCANNED_RESULT
+                        ,DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_FORMAT},
+                null,null,null,null," id desc");
+        while (cursor.moveToNext())
+        {
+            int id=cursor.getInt(cursor.getColumnIndex(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_ID));
+            long inDate=cursor.getLong(cursor.getColumnIndex(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_IN_DATE));
+            String resultText=cursor.getString(cursor.getColumnIndex(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_SCANNED_RESULT));
+            String format=cursor.getString(cursor.getColumnIndex(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_FORMAT));
+            ScannedResult sr=new ScannedResult();
+            sr.setId(id);
+            sr.setInDate(inDate);
+            sr.setResultText(resultText);
+            sr.setFormat(format);
+            result.add(sr);
+        }
+        cursor.close();
+        return result;
+    }
+}
diff --git a/zxingscanning/src/main/java/indi/solomon/zxingscanning/po/ScannedResult.java b/zxingscanning/src/main/java/indi/solomon/zxingscanning/po/ScannedResult.java
new file mode 100644
index 0000000..8b9c7fe
--- /dev/null
+++ b/zxingscanning/src/main/java/indi/solomon/zxingscanning/po/ScannedResult.java
@@ -0,0 +1,56 @@
+package indi.solomon.zxingscanning.po;
+
+import android.content.ContentValues;
+
+import indi.solomon.zxingscanning.dao.DatabaseConsts;
+
+/**
+ * Created by admin on 2016/10/24.
+ */
+
+public class ScannedResult {
+    private Integer id;
+    private String resultText;
+    private Long inDate;
+    private String format;
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getResultText() {
+        return resultText;
+    }
+
+    public void setResultText(String resultText) {
+        this.resultText = resultText;
+    }
+
+    public Long getInDate() {
+        return inDate;
+    }
+
+    public void setInDate(Long inDate) {
+        this.inDate = inDate;
+    }
+
+    public String getFormat() {
+        return format;
+    }
+
+    public void setFormat(String format) {
+        this.format = format;
+    }
+
+    public ContentValues toInsertValues()
+    {
+        ContentValues contentValues=new ContentValues();
+        contentValues.put(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_SCANNED_RESULT,resultText);
+        contentValues.put(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_FORMAT,format);
+        contentValues.put(DatabaseConsts.SANNED_RESULT_TABLE.COLUMN_NAME_IN_DATE,inDate);
+        return contentValues;
+    }
+}
diff --git a/zxingscanning/src/main/res/layout/activity_main.xml b/zxingscanning/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000..299502b
--- /dev/null
+++ b/zxingscanning/src/main/res/layout/activity_main.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:id="@+id/activity_main"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    tools:context="indi.solomon.zxingscanning.MainActivity">
+    <ListView
+        android:id="@+id/list_item"
+        android:layout_width="match_parent"
+        android:layout_height="400dp"
+        android:layout_alignParentTop="true"
+        android:layout_above="@+id/btn_scanning" />
+
+    <Button
+        android:text="扫描"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/btn_scanning"
+        android:layout_alignParentBottom="true"
+        android:layout_centerHorizontal="true" />
+</RelativeLayout>
diff --git a/zxingscanning/src/main/res/layout/activity_scanning.xml b/zxingscanning/src/main/res/layout/activity_scanning.xml
new file mode 100644
index 0000000..9a67b2a
--- /dev/null
+++ b/zxingscanning/src/main/res/layout/activity_scanning.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <FrameLayout
+        android:id="@+id/content_frame"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_gravity="top"
+        android:minHeight="?attr/actionBarSize"
+        android:background="@color/actionbar_opacity"
+        app:theme="@style/TransparentToolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"/>
+</RelativeLayout>
\ No newline at end of file
diff --git a/zxingscanning/src/main/res/layout/adaper_scanned_result.xml b/zxingscanning/src/main/res/layout/adaper_scanned_result.xml
new file mode 100644
index 0000000..fc6b66e
--- /dev/null
+++ b/zxingscanning/src/main/res/layout/adaper_scanned_result.xml
@@ -0,0 +1,40 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+        <TextView
+            android:text="时间："
+            android:layout_width="70dp"
+            android:layout_height="wrap_content"
+            android:id="@+id/time_lbl"
+            android:gravity="left" android:textSize="16dp" />
+        <TextView android:id="@+id/in_date"
+            android:layout_width="wrap_content"  android:gravity="left"
+            android:layout_height="wrap_content" android:textSize="16dp"/>
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
+        <TextView
+            android:text="格式:"
+            android:layout_width="70dp"
+            android:layout_height="wrap_content"
+            android:id="@+id/format_lbl"
+            android:gravity="left" android:textSize="16dp"/>
+        <TextView android:id="@+id/format"
+            android:layout_width="wrap_content"  android:gravity="left"
+            android:layout_height="wrap_content" android:textSize="16dp"/>
+    </LinearLayout>
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:gravity="left"
+        android:paddingLeft="10dp"
+        android:id="@+id/scanned_text" android:textSize="14dp"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/zxingscanning/src/main/res/mipmap-hdpi/ic_launcher.png b/zxingscanning/src/main/res/mipmap-hdpi/ic_launcher.png
new file mode 100644
index 0000000..cde69bc
Binary files /dev/null and b/zxingscanning/src/main/res/mipmap-hdpi/ic_launcher.png differ
diff --git a/zxingscanning/src/main/res/mipmap-mdpi/ic_launcher.png b/zxingscanning/src/main/res/mipmap-mdpi/ic_launcher.png
new file mode 100644
index 0000000..c133a0c
Binary files /dev/null and b/zxingscanning/src/main/res/mipmap-mdpi/ic_launcher.png differ
diff --git a/zxingscanning/src/main/res/mipmap-xhdpi/ic_launcher.png b/zxingscanning/src/main/res/mipmap-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..bfa42f0
Binary files /dev/null and b/zxingscanning/src/main/res/mipmap-xhdpi/ic_launcher.png differ
diff --git a/zxingscanning/src/main/res/mipmap-xxhdpi/ic_launcher.png b/zxingscanning/src/main/res/mipmap-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..324e72c
Binary files /dev/null and b/zxingscanning/src/main/res/mipmap-xxhdpi/ic_launcher.png differ
diff --git a/zxingscanning/src/main/res/mipmap-xxxhdpi/ic_launcher.png b/zxingscanning/src/main/res/mipmap-xxxhdpi/ic_launcher.png
new file mode 100644
index 0000000..aee44e1
Binary files /dev/null and b/zxingscanning/src/main/res/mipmap-xxxhdpi/ic_launcher.png differ
diff --git a/zxingscanning/src/main/res/values-w820dp/dimens.xml b/zxingscanning/src/main/res/values-w820dp/dimens.xml
new file mode 100644
index 0000000..63fc816
--- /dev/null
+++ b/zxingscanning/src/main/res/values-w820dp/dimens.xml
@@ -0,0 +1,6 @@
+<resources>
+    <!-- Example customization of dimensions originally defined in res/values/dimens.xml
+         (such as screen margins) for screens with more than 820dp of available width. This
+         would include 7" and 10" devices in landscape (~960dp and ~1280dp respectively). -->
+    <dimen name="activity_horizontal_margin">64dp</dimen>
+</resources>
diff --git a/zxingscanning/src/main/res/values/colors.xml b/zxingscanning/src/main/res/values/colors.xml
new file mode 100644
index 0000000..1a64799
--- /dev/null
+++ b/zxingscanning/src/main/res/values/colors.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="actionbar_opacity">#33000000</color>
+    <color name="primary">#3F51B5</color>
+    <color name="primary_dark">#303F9F</color>
+    <color name="primary_light">#C5CAE9</color>
+    <color name="accent">#E040FB</color>
+    <color name="primary_text">#212121</color>
+    <color name="secondary_text">#727272</color>
+    <color name="icons">#FFFFFF</color>
+    <color name="divider">#B6B6B6</color>
+</resources>
\ No newline at end of file
diff --git a/zxingscanning/src/main/res/values/dimens.xml b/zxingscanning/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..47c8224
--- /dev/null
+++ b/zxingscanning/src/main/res/values/dimens.xml
@@ -0,0 +1,5 @@
+<resources>
+    <!-- Default screen margins, per the Android Design guidelines. -->
+    <dimen name="activity_horizontal_margin">16dp</dimen>
+    <dimen name="activity_vertical_margin">16dp</dimen>
+</resources>
diff --git a/zxingscanning/src/main/res/values/ids.xml b/zxingscanning/src/main/res/values/ids.xml
new file mode 100644
index 0000000..1b582b6
--- /dev/null
+++ b/zxingscanning/src/main/res/values/ids.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item type="id" name="menu_flash" />
+    <item type="id" name="menu_auto_focus" />
+    <item type="id" name="menu_formats" />
+    <item type="id" name="menu_camera_selector" />
+</resources>
\ No newline at end of file
diff --git a/zxingscanning/src/main/res/values/strings.xml b/zxingscanning/src/main/res/values/strings.xml
new file mode 100644
index 0000000..a6155ea
--- /dev/null
+++ b/zxingscanning/src/main/res/values/strings.xml
@@ -0,0 +1,28 @@
+<resources>
+    <string name="app_name">二维码扫描</string>
+    <string name="scanner_activity">扫描二维码/条形码</string>
+    <string name="scanner_fragment_activity">ZXing Scanner - Full Fragment Activity</string>
+    <string name="simple_scanner_activity">ZXing Scanner - Simple Activity</string>
+    <string name="custom_view_finder_scanner_activity">ZXing Scanner - Custom View Finder Activity</string>
+    <string name="scaling_scanner_activity">ZXing Scanner - Scaling Activity</string>
+    <string name="simple_scanner_fragment_activity">ZXing Scanner - Simple Fragment Activity</string>
+    <string name="full_screen_scanner_fragment_activity">ZXing Scanner - Full Screen Fragment Activity</string>
+    <string name="simple_activity_sample">Simple Activity Sample</string>
+    <string name="simple_fragment_sample">Simple Fragment Sample</string>
+    <string name="activity_sample">Full Activity Sample</string>
+    <string name="fragment_sample">Full Fragment Sample</string>
+    <string name="full_screen_sample">Full Screen Fragment Sample</string>
+    <string name="custom_view_finder_sample">Custom View Finder Sample</string>
+    <string name="scaling_sample">Scaling Sample</string>
+    <string name="toggle_flash">Flash</string>
+    <string name="flash_on">Flash [ON]</string>
+    <string name="flash_off">Flash [OFF]</string>
+    <string name="auto_focus_on">Auto Focus [ON]</string>
+    <string name="auto_focus_off">Auto Focus [OFF]</string>
+    <string name="formats">Formats</string>
+    <string name="choose_formats">Choose Formats</string>
+    <string name="select_camera">Select a Camera</string>
+    <string name="ok_button">OK</string>
+    <string name="cancel_button">Cancel</string>
+    <bool name="cameraPreviewShouldFillView">true</bool>
+</resources>
diff --git a/zxingscanning/src/main/res/values/styles.xml b/zxingscanning/src/main/res/values/styles.xml
new file mode 100644
index 0000000..abab8ed
--- /dev/null
+++ b/zxingscanning/src/main/res/values/styles.xml
@@ -0,0 +1,36 @@
+<resources>
+    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="colorPrimary">@color/primary</item>
+        <!-- darker variant for the status bar and contextual app bars -->
+        <item name="colorPrimaryDark">@color/primary_dark</item>
+        <!--   theme UI controls like checkboxes and text fields e.g. FloatActionButton -->
+        <item name="colorAccent">@color/accent</item>
+        <!-- Title Text Color -->
+        <item name="android:textColorPrimary">@color/primary_text</item>
+        <!-- color of the menu overflow icon (three vertical dots) -->
+        <item name="android:textColorSecondary">@color/secondary_text</item>
+    </style>
+
+    <style name="AppOverlayTheme" parent="@style/Theme.AppCompat.Light">
+        <item name="windowNoTitle">true</item>
+        <item name="windowActionBar">false</item>
+        <item name="android:windowFullscreen">true</item>
+        <item name="android:windowContentOverlay">@null</item>
+
+        <item name="colorPrimary">@color/primary</item>
+        <!-- darker variant for the status bar and contextual app bars -->
+        <item name="colorPrimaryDark">@color/primary_dark</item>
+        <!--   theme UI controls like checkboxes and text fields e.g. FloatActionButton -->
+        <item name="colorAccent">@color/accent</item>
+        <!-- Title Text Color -->
+        <item name="android:textColorPrimary">@color/primary_text</item>
+        <!-- color of the menu overflow icon (three vertical dots) -->
+        <item name="android:textColorSecondary">@color/secondary_text</item>
+    </style>
+
+    <style name="TransparentToolbar" parent="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+        <item name="android:windowActionBarOverlay">true</item>
+        <!-- Support Library compability -->
+        <item name="windowActionBarOverlay">true</item>
+    </style>
+</resources>
diff --git a/zxingscanning/src/test/java/indi/solomon/zxingscanning/ExampleUnitTest.java b/zxingscanning/src/test/java/indi/solomon/zxingscanning/ExampleUnitTest.java
new file mode 100644
index 0000000..b1fb10a
--- /dev/null
+++ b/zxingscanning/src/test/java/indi/solomon/zxingscanning/ExampleUnitTest.java
@@ -0,0 +1,17 @@
+package indi.solomon.zxingscanning;
+
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>
+ */
+public class ExampleUnitTest {
+    @Test
+    public void addition_isCorrect() throws Exception {
+        assertEquals(4, 2 + 2);
+    }
+}
\ No newline at end of file
