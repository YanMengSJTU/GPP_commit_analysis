diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerHolder.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerHolder.java
new file mode 100644
index 0000000..484561d
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerHolder.java
@@ -0,0 +1,175 @@
+package me.dm7.barcodescanner.core;
+
+import android.Manifest;
+import android.app.Activity;
+import android.content.pm.PackageManager;
+import android.hardware.Camera;
+import android.os.Bundle;
+import android.os.Handler;
+import android.support.v4.app.ActivityCompat;
+import android.view.ViewGroup;
+
+import com.google.zxing.BarcodeFormat;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+
+import zxing.ZXingScannerView;
+
+/**
+ * Created by Ricardo on 27/11/2015.
+ */
+public class BarcodeScannerHolder {
+
+    private static final int REQUEST_CAMERA_PERMISSION = 123;
+
+    private static final String FLASH_STATE = "FLASH_STATE";
+    private static final String AUTO_FOCUS_STATE = "AUTO_FOCUS_STATE";
+    private static final String SELECTED_FORMATS = "SELECTED_FORMATS";
+    private static final String CAMERA_ID = "CAMERA_ID";
+    private static final String PERMISSION_REQUESTED = "PERMISSION_REQUESTED";
+
+    private ZXingScannerView mScannerView;
+
+    private boolean mFlash;
+    private boolean mAutoFocus;
+    private ArrayList<Integer> mSelectedIndices;
+    private int mCameraId = -1;
+
+    private int mCameraViewFinderMarginTop = 0;
+
+    private boolean mCameraStarted = false;
+    private boolean mIsPermissionRequested = false;
+
+    private final WeakReference<Activity> mWeakActivity;
+    private ViewGroup mScannerViewContainer;
+    private final ZXingScannerView.ResultHandler mCallback;
+
+    public BarcodeScannerHolder(Activity activity, ZXingScannerView.ResultHandler callback) {
+        mWeakActivity = new WeakReference<>(activity);
+        mCallback = callback;
+    }
+
+    public void onCreate(Bundle savedInstanceState) {
+        if (savedInstanceState != null) {
+            mIsPermissionRequested = savedInstanceState.getBoolean(PERMISSION_REQUESTED, false);
+        }
+    }
+
+    public void onCreateView(ViewGroup scannerViewContainer, Bundle savedInstanceState) {
+        mScannerViewContainer = scannerViewContainer;
+        if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {
+            initCameraView(savedInstanceState);
+        } else if (!mIsPermissionRequested) {
+            mIsPermissionRequested = true;
+            ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
+        }
+    }
+
+    public boolean onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
+        mIsPermissionRequested = false;
+        if (requestCode == REQUEST_CAMERA_PERMISSION
+                && grantResults.length == 1
+                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+            initCameraView(null);
+            return true;
+        } else {
+            mIsPermissionRequested = true;
+            ActivityCompat.requestPermissions(getActivity(), new String[]{Manifest.permission.CAMERA}, REQUEST_CAMERA_PERMISSION);
+            return false;
+        }
+    }
+
+    public void onResume() {
+        if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {
+            initCamera();
+        } else if (!mIsPermissionRequested) {
+            getActivity().recreate();
+        }
+    }
+
+    public void onPause() {
+        if (mScannerView != null) {
+            mScannerView.stopCamera();
+            mCameraStarted = false;
+        }
+    }
+
+    public void onSaveInstanceState(Bundle outState) {
+        outState.putBoolean(FLASH_STATE, mFlash);
+        outState.putBoolean(AUTO_FOCUS_STATE, mAutoFocus);
+        outState.putIntegerArrayList(SELECTED_FORMATS, mSelectedIndices);
+        outState.putInt(CAMERA_ID, mCameraId);
+        outState.putBoolean(PERMISSION_REQUESTED, mIsPermissionRequested);
+    }
+
+    private Activity getActivity() {
+        return mWeakActivity.get();
+    }
+
+    public void setCameraViewFinderMarginTop(int margin) {
+        mCameraViewFinderMarginTop = margin;
+    }
+
+    public void initCameraView(final Bundle savedInstanceState) {
+        new Handler().postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                if (getActivity() != null) {
+                    getActivity().runOnUiThread(new Runnable() {
+                        @Override
+                        public void run() {
+                            mScannerView = new ZXingScannerView(mScannerViewContainer.getContext());
+                            mScannerView.setViewFinderTopOffset(mCameraViewFinderMarginTop);
+                            setupFormats();
+
+                            if (savedInstanceState != null) {
+                                mFlash = savedInstanceState.getBoolean(FLASH_STATE, false);
+                                mAutoFocus = savedInstanceState.getBoolean(AUTO_FOCUS_STATE, true);
+                                mSelectedIndices = savedInstanceState.getIntegerArrayList(SELECTED_FORMATS);
+                                mCameraId = savedInstanceState.getInt(CAMERA_ID, -1);
+                            } else {
+                                mFlash = false;
+                                mAutoFocus = true;
+                                mSelectedIndices = null;
+                                mCameraId = Camera.CameraInfo.CAMERA_FACING_BACK;
+                            }
+
+                            mScannerViewContainer.addView(mScannerView);
+
+                            initCamera();
+                        }
+                    });
+                }
+            }
+        }, 50);
+    }
+
+    public void setupFormats() {
+        List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
+        if (mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+            mSelectedIndices = new ArrayList<Integer>();
+            for (int i = 0; i < ZXingScannerView.ALL_FORMATS.size(); i++) {
+                mSelectedIndices.add(i);
+            }
+        }
+
+        for (int index : mSelectedIndices) {
+            formats.add(ZXingScannerView.ALL_FORMATS.get(index));
+        }
+        if (mScannerView != null) {
+            mScannerView.setFormats(formats);
+        }
+    }
+
+    private void initCamera() {
+        if (mScannerView != null && !mCameraStarted) {
+            mCameraStarted = true;
+            mScannerView.setAutoFocus(mAutoFocus);
+            mScannerView.setFlash(mFlash);
+            mScannerView.setResultHandler(mCallback);
+            mScannerView.startCamera(mCameraId);
+        }
+    }
+}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index d77925d..343f032 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -16,6 +16,8 @@
     private IViewFinder mViewFinderView;
     private Rect mFramingRectInPreview;
 
+    private int mViewFinderTopOffset = 0;
+
     public BarcodeScannerView(Context context) {
         super(context);
         setupLayout();
@@ -26,6 +28,13 @@ public BarcodeScannerView(Context context, AttributeSet attributeSet) {
         setupLayout();
     }
 
+    public final void setViewFinderTopOffset(int topOffset) {
+        mViewFinderTopOffset = topOffset;
+        if (mViewFinderView != null) {
+            mViewFinderView.setTopOffset(mViewFinderTopOffset);
+        }
+    }
+
     public final void setupLayout() {
         mPreview = new CameraPreview(getContext());
         RelativeLayout relativeLayout = new RelativeLayout(getContext());
@@ -53,12 +62,10 @@ public final void setupLayout() {
      * @param context {@link Context}
      * @return {@link android.view.View} that implements {@link ViewFinderView}
      */
-    protected ViewFinderView createViewFinderView(Context context) {
-        return new ViewFinderView(context);
-    }
-
     protected ViewFinderView createViewFinderView(Context context,Camera.Size optimalSize) {
-        return new ViewFinderView(context,optimalSize);
+        ViewFinderView v = new ViewFinderView(context,optimalSize);
+        v.setTopOffset(mViewFinderTopOffset);
+        return v;
     }
 
     public void startCamera(int cameraId) {
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
index 47fc2c8..12c7539 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraPreview.java
@@ -22,7 +22,7 @@
     private Camera mCamera;
     private Handler mAutoFocusHandler;
     private boolean mPreviewing = false;
-    private boolean mAutoFocus = false;
+    private boolean mAutoFocus = true;
     private boolean mSurfaceCreated = false;
     private Camera.PreviewCallback mPreviewCallback;
     private ViewFinderView viewFinderView;
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
index 78c3ee4..e0f11ed 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/IViewFinder.java
@@ -37,4 +37,8 @@
      * @return height of a view
      */
     int getHeight();
+
+    void setTopOffset(int margin);
+
+    int getTopOffset();
 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index 1903aed..ac22736 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -10,13 +10,13 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-import java.util.List;
-
 public class ViewFinderView extends View implements IViewFinder {
     private static final String TAG = "ViewFinderView";
 
     private Rect mFramingRect;
 
+    private int mTopOffset = 0;
+
     private static final int MIN_FRAME_WIDTH = 240;
     private static final int MIN_FRAME_HEIGHT = 240;
 
@@ -114,6 +114,16 @@ public Rect getFramingRect() {
         return mFramingRect;
     }
 
+    @Override
+    public void setTopOffset(int margin) {
+        mTopOffset = margin;
+    }
+
+    @Override
+    public int getTopOffset() {
+        return mTopOffset;
+    }
+
     @Override
     public void onDraw(Canvas canvas) {
         if (mFramingRect == null) {
@@ -186,7 +196,7 @@ protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
     }
 
     public synchronized void updateFramingRect() {
-        Point viewResolution = new Point(getWidth(), getHeight());
+        Point viewResolution = new Point(getWidth(), getHeight() - mTopOffset);
         int width;
         int height;
         int orientation = DisplayUtils.getScreenOrientation(getContext());
@@ -200,7 +210,7 @@ public synchronized void updateFramingRect() {
         }
 
         int leftOffset = (viewResolution.x - width) / 2;
-        int topOffset = (viewResolution.y - height) / 2;
+        int topOffset = mTopOffset + (viewResolution.y - height) / 2;
         mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
     }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
index 328cc68..91f7e72 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/activity/QRCodeScannerActivity.java
@@ -176,10 +176,10 @@ protected void onSaveInstanceState(Bundle outState) {
     }
 
     private void initCamera() {
-        mScannerView.startCamera(-1);
         mScannerView.setAutoFocus(mAutoFocus);
         mScannerView.setFlash(mFlash);
         mScannerView.setResultHandler(this);
+        mScannerView.startCamera();
     }
 
     @Override
diff --git a/core/src/main/java/zxing/ZXingScannerView.java b/core/src/main/java/zxing/ZXingScannerView.java
index 51c0c0a..0736d98 100644
--- a/core/src/main/java/zxing/ZXingScannerView.java
+++ b/core/src/main/java/zxing/ZXingScannerView.java
@@ -6,6 +6,7 @@
 import android.hardware.Camera;
 import android.os.Handler;
 import android.util.AttributeSet;
+import android.util.Log;
 
 import com.google.zxing.BarcodeFormat;
 import com.google.zxing.BinaryBitmap;
@@ -27,6 +28,9 @@
 
 
 public class ZXingScannerView extends BarcodeScannerView {
+
+    public static final String TAG = "ZXingScannerView";
+
     public interface ResultHandler {
         boolean handleResult(Result rawResult);
     }
@@ -79,7 +83,7 @@ public void setResultHandler(ResultHandler resultHandler) {
     }
 
     private void initMultiFormatReader() {
-        Map<DecodeHintType, Object> hints = new EnumMap<DecodeHintType, Object>(DecodeHintType.class);
+        Map<DecodeHintType, Object> hints = new EnumMap<>(DecodeHintType.class);
         hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
         mMultiFormatReader = new MultiFormatReader();
         mMultiFormatReader.setHints(hints);
@@ -135,8 +139,13 @@ public void run() {
                                     && camera != null
                                     && getContext() != null
                                     && !isCameraReleased()) {
-                                initMultiFormatReader();
-                                camera.setOneShotPreviewCallback(ZXingScannerView.this);
+                                try {
+                                    initMultiFormatReader();
+                                } catch (Exception e) {
+                                    Log.e(TAG, e.getMessage(), e);
+                                } finally {
+                                    camera.setOneShotPreviewCallback(ZXingScannerView.this);
+                                }
                             }
                         }
                     }, 2000);
