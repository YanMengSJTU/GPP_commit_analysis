diff --git a/core/build.gradle b/core/build.gradle
index cab10bb..6fbb4f5 100644
--- a/core/build.gradle
+++ b/core/build.gradle
@@ -12,5 +12,5 @@ ext {
 
 dependencies {
     compile supportLibraryDependency
-    compile 'com.google.zxing:android-core:3.2.1'
+    compile 'com.google.zxing:android-core:3.3.0'
 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 5ec9250..bfa5aba 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -74,7 +74,7 @@ protected IViewFinder createViewFinderView(Context context) {
         return new ViewFinderView(context);
     }
 
-    public void startCamera(int cameraId) {
+    public synchronized void startCamera(int cameraId) {
         if(mCameraHandlerThread == null) {
             mCameraHandlerThread = new CameraHandlerThread();
         }
@@ -96,12 +96,6 @@ public void switchCamera(int cameraId) {
         startCamera(cameraId);
     }
 
-    public void releaseAndCleanupCamera() {
-        if (mCameraWrapper != null && mCameraWrapper.mCamera != null) {
-            mCameraWrapper.mCamera.release();
-        }
-    }
-
     public void setupCameraPreview(CameraWrapper cameraWrapper) {
         mCameraWrapper = cameraWrapper;
         if (mCameraWrapper != null) {
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
index 4c3802a..f78b4c0 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
@@ -3,29 +3,27 @@
 import android.os.Handler;
 import android.os.HandlerThread;
 import android.os.Looper;
-import android.util.Log;
 
 // This code is mostly based on the top answer here: http://stackoverflow.com/questions/18149964/best-use-of-handlerthread-over-other-similar-classes
-public class CameraHandlerThread extends HandlerThread {
-    private static final NonReentrantLock lock = new NonReentrantLock();
-    private static CameraWrapper cameraWrapper;
+class CameraHandlerThread extends HandlerThread {
+    private final NonReentrantLock lock = new NonReentrantLock();
+    private CameraWrapper cameraWrapper;
     private final Handler localHandler;
     private final Handler mainHandler;
 
-    public CameraHandlerThread() {
+    CameraHandlerThread() {
         super("CameraHandlerThread");
         start();
         localHandler = new Handler(getLooper());
         mainHandler = new Handler(Looper.getMainLooper());
     }
 
-    public void startCamera(final int cameraId, final BarcodeScannerView mScannerView) {
+    void startCamera(final int cameraId, final BarcodeScannerView mScannerView) {
         localHandler.post(new Runnable() {
             @Override
             public void run() {
                 try {
                     lock.lock();
-                    Log.e("CMDBG: "+Thread.currentThread().getId(), "startCamera: Lock acquired");
                     cameraWrapper = CameraWrapper.getWrapper(CameraUtils.getCameraInstance(cameraId), cameraId);
 
                     mainHandler.post(new Runnable() {
@@ -41,7 +39,7 @@ public void run() {
         });
     }
 
-    public void stopCamera(final BarcodeScannerView mScannerView) {
+    void stopCamera(final BarcodeScannerView mScannerView) {
         localHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -57,7 +55,6 @@ public void run() {
                 });
 
                 lock.unlock();
-                Log.e("CMDBG: "+Thread.currentThread().getId(), "stopCamera: Lock released");
             }
         });
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
index 4314a99..c6e0529 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
@@ -1,7 +1,6 @@
 package me.dm7.barcodescanner.core;
 
 import android.hardware.Camera;
-import android.util.Log;
 
 import java.util.List;
 
@@ -18,21 +17,42 @@ public static Camera getCameraInstance() {
 
     /** Favor back-facing camera by default. If none exists, fallback to whatever camera is available **/
     public static int getDefaultCameraId() {
-        return getCameraId(CameraFacing.BACK);
+        if (getNumberOfCameras() == 0) {
+            return -1;
+        }
+
+        return getCameraId((getNumberOfFacingCameras(CameraFacing.BACK) != 0) ? CameraFacing.BACK : CameraFacing.FRONT);
     }
 
+    /** Returns the first camera for a given direction. If a camera does not exist for that direction, -1 is returned **/
     public static int getCameraId(CameraFacing facing) {
-        int numberOfCameras = Camera.getNumberOfCameras();
+        int numberOfCameras = getNumberOfCameras();
         Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
-        int defaultCameraId = -1;
         for (int i = 0; i < numberOfCameras; i++) {
-            defaultCameraId = i;
             Camera.getCameraInfo(i, cameraInfo);
             if (cameraInfo.facing == facing.ordinal()) {
                 return i;
             }
         }
-        return defaultCameraId;
+        return -1;
+    }
+
+    public static int getNumberOfCameras() {
+        return Camera.getNumberOfCameras();
+    }
+
+    public static int getNumberOfFacingCameras(CameraFacing facing) {
+        int numberOfCameras = getNumberOfCameras();
+        int numberOfFacingCameras = 0;
+        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();
+        for (int i = 0; i < numberOfCameras; i++) {
+            Camera.getCameraInfo(i, cameraInfo);
+            if ((cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_BACK && facing == CameraFacing.BACK)
+                    || (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT && facing == CameraFacing.FRONT)) {
+                numberOfFacingCameras++;
+            }
+        }
+        return numberOfFacingCameras;
     }
 
     /** A safe way to get an instance of the Camera object. */
@@ -48,11 +68,6 @@ public static Camera getCameraInstance(int cameraId) {
         catch (Exception e) {
             // Camera is not available (in use or does not exist)
         }
-        if (c == null) {
-            Log.e("CMDBG: "+Thread.currentThread().getId(), "camera instance failed");
-        } else {
-            Log.e("CMDBG: "+Thread.currentThread().getId(), "camera instance succeeded");
-        }
         return c; // returns null if camera is unavailable
     }
 
