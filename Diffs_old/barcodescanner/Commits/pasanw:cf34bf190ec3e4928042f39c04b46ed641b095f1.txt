diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index 0b5733f..25c90a2 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -76,9 +76,9 @@ protected IViewFinder createViewFinderView(Context context) {
 
     public void startCamera(int cameraId) {
         if(mCameraHandlerThread == null) {
-            mCameraHandlerThread = new CameraHandlerThread(this);
+            mCameraHandlerThread = new CameraHandlerThread();
         }
-        mCameraHandlerThread.startCamera(cameraId);
+        mCameraHandlerThread.startCamera(cameraId, this);
     }
 
     public void setupCameraPreview(CameraWrapper cameraWrapper) {
@@ -98,15 +98,19 @@ public void startCamera() {
     }
 
     public void stopCamera() {
-        if(mCameraWrapper != null) {
+        mCameraHandlerThread.stopCamera(this);
+    }
+
+    public void stopAndCleanupCameraPreview() {
+        if(mPreview != null) {
             mPreview.stopCameraPreview();
             mPreview.setCamera(null, null);
-            mCameraWrapper.mCamera.release();
-            mCameraWrapper = null;
         }
-        if(mCameraHandlerThread != null) {
-            mCameraHandlerThread.quit();
-            mCameraHandlerThread = null;
+    }
+
+    public void releaseAndCleanupCamera() {
+        if(mCameraWrapper.mCamera != null) {
+            mCameraWrapper.mCamera.release();
         }
     }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
index 2d4bcee..a37116b 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
@@ -1,6 +1,5 @@
 package me.dm7.barcodescanner.core;
 
-
 import android.hardware.Camera;
 import android.os.Handler;
 import android.os.HandlerThread;
@@ -8,18 +7,15 @@
 
 // This code is mostly based on the top answer here: http://stackoverflow.com/questions/18149964/best-use-of-handlerthread-over-other-similar-classes
 public class CameraHandlerThread extends HandlerThread {
-    private static final String LOG_TAG = "CameraHandlerThread";
-
-    private BarcodeScannerView mScannerView;
+    private final Handler localHandler;
 
-    public CameraHandlerThread(BarcodeScannerView scannerView) {
+    public CameraHandlerThread() {
         super("CameraHandlerThread");
-        mScannerView = scannerView;
         start();
+        localHandler = new Handler(getLooper());
     }
 
-    public void startCamera(final int cameraId) {
-        Handler localHandler = new Handler(getLooper());
+    public void startCamera(final int cameraId, final BarcodeScannerView mScannerView) {
         localHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -34,4 +30,14 @@ public void run() {
             }
         });
     }
+
+    public void stopCamera(final BarcodeScannerView mScannerView) {
+        localHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mScannerView.stopAndCleanupCameraPreview();
+                mScannerView.releaseAndCleanupCamera();
+            }
+        });
+    }
 }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
index deb85b1..2288e1b 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/ViewFinderView.java
@@ -67,6 +67,9 @@ private void init() {
         mBorderPaint.setStrokeWidth(mDefaultBorderStrokeWidth);
 
         mBorderLineLength = mDefaultBorderLineLength;
+
+        //default to square viewfinder
+        mSquareViewFinder = true;
     }
 
     public void setLaserColor(int laserColor) {
diff --git a/core/src/main/res/layout/merge_camera_preview_view_finder.xml b/core/src/main/res/layout/merge_camera_preview_view_finder.xml
new file mode 100644
index 0000000..0f165f6
--- /dev/null
+++ b/core/src/main/res/layout/merge_camera_preview_view_finder.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<merge xmlns:android="http://schemas.android.com/apk/res/android">
+    <me.dm7.barcodescanner.core.CameraPreview
+         android:id="@+id/camera_preview"
+         android:layout_width="fill_parent"
+         android:layout_height="fill_parent"/>
+    <me.dm7.barcodescanner.core.ViewFinderView
+        android:id="@+id/view_finder_view"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent" />
+</merge>
diff --git a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
index 767b54a..aa300a3 100644
--- a/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
+++ b/zxing/src/main/java/me/dm7/barcodescanner/zxing/ZXingScannerView.java
@@ -28,7 +28,12 @@
 import me.dm7.barcodescanner.core.DisplayUtils;
 
 public class ZXingScannerView extends BarcodeScannerView {
+    public interface CameraStatusCallback {
+        void onCameraReady();
+    }
+
     private static final String TAG = "ZXingScannerView";
+    private boolean cameraReady = false;
 
     public interface ResultHandler {
         public void handleResult(Result rawResult);
@@ -38,6 +43,7 @@
     public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
     private List<BarcodeFormat> mFormats;
     private ResultHandler mResultHandler;
+    private List<CameraStatusCallback> mCameraStatusCallbacks = new ArrayList<>();
 
     static {
         ALL_FORMATS.add(BarcodeFormat.UPC_A);
@@ -93,7 +99,19 @@ public void onPreviewFrame(byte[] data, Camera camera) {
         if(mResultHandler == null) {
             return;
         }
-        
+
+        if (!cameraReady) {
+            new Handler(Looper.getMainLooper()).post(new Runnable() {
+                @Override
+                public void run() {
+                    for (CameraStatusCallback c : mCameraStatusCallbacks) {
+                        c.onCameraReady();
+                    }
+                }
+            });
+            cameraReady = true;
+        }
+
         try {
             Camera.Parameters parameters = camera.getParameters();
             Camera.Size size = parameters.getPreviewSize();
@@ -179,4 +197,20 @@ public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int
 
         return source;
     }
+
+    @Override
+    public void stopCamera() {
+        cameraReady = false;
+        super.stopCamera();
+    }
+
+    public void registerCameraStatusCallback(CameraStatusCallback callback) {
+        if (callback != null)
+            mCameraStatusCallbacks.add(callback);
+    }
+
+    public void unregisterCameraStatusCallback(CameraStatusCallback callback) {
+        if (callback != null)
+            mCameraStatusCallbacks.remove(callback);
+    }
 }
