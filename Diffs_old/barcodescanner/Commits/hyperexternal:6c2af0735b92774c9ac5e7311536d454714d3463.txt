diff --git a/vision-sample/README.md b/vision-sample/README.md
new file mode 100644
index 0000000..cf75f28
--- /dev/null
+++ b/vision-sample/README.md
@@ -0,0 +1,115 @@
+Google Mobile Vision
+=====
+
+Installation
+------------
+
+Add the following dependency to your build.gradle file.
+
+`compile 'me.dm7.barcodescanner:vision:1.9.7'`
+
+Simple Usage
+------------
+
+1.) Add camera permission to your AndroidManifest.xml file:
+
+```xml
+<uses-permission android:name="android.permission.CAMERA" />
+```
+
+2.) A very basic activity would look like this:
+
+```java
+package me.dm7.barcodescanner.vision.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.Toast;
+
+import me.dm7.barcodescanner.vision.BarcodeFormat;
+import me.dm7.barcodescanner.vision.Result;
+import me.dm7.barcodescanner.vision.VisionScannerView;
+
+public class SimpleScannerActivity extends Activity implements VisionScannerView.ResultHandler {
+    private static final String TAG = "SimpleScannerActivity";
+
+    private VisionScannerView mScannerView;
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        mScannerView = new VisionScannerView(this);   // Programmatically initialize the scanner view
+        setContentView(mScannerView);                // Set the scanner view as the content view
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mScannerView.setResultHandler(this); // Register ourselves as a handler for scan results.
+        mScannerView.startCamera();          // Start camera on resume
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mScannerView.stopCamera();           // Stop camera on pause
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+        // Do something with the result here
+        Log.v(TAG, rawResult.getBarcode().displayValue); // Prints scan results
+        Log.v(TAG, BarcodeFormat.getFormatById(rawResult.getBarcode().format).toString()); // Prints the scan format (qrcode, pdf417 etc.)
+
+        // If you would like to resume scanning, call this method below:
+        mScannerView.resumeCameraPreview(this);
+
+        Toast.makeText(SimpleScannerActivity.this, rawResult.getBarcode().displayValue, Toast.LENGTH_SHORT).show();
+    }
+}
+
+```
+
+Please take a look at the [vision-sample] (https://github.com/dm77/barcodescanner/tree/master/vision-sample) project for a full working example.
+
+Advanced Usage
+--------------
+
+Take a look at the [FullScannerActivity.java] (https://github.com/dm77/barcodescanner/blob/master/vision/sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerActivity.java) classes to get an idea on advanced usage.
+
+Interesting methods on the VisionScannerView include:
+
+```java
+// Toggle flash:
+void setFlash(boolean);
+
+// Toogle autofocus:
+void setAutoFocus(boolean);
+
+// Specify interested barcode formats:
+void setFormats(List<BarcodeFormat> formats);
+
+// Specify the cameraId to start with:
+void startCamera(int cameraId);
+```
+
+Specify front-facing or rear-facing cameras by using the `void startCamera(int cameraId);` method.
+
+Supported Formats:
+
+```java
+     BarcodeFormat.CODE_128
+     BarcodeFormat.CODE_39
+     BarcodeFormat.CODE_93
+     BarcodeFormat.CODABAR
+     BarcodeFormat.DATA_MATRIX
+     BarcodeFormat.EAN_13
+     BarcodeFormat.EAN_8
+     BarcodeFormat.ITF
+     BarcodeFormat.QR_CODE
+     BarcodeFormat.UPC_A
+     BarcodeFormat.UPC_E
+     BarcodeFormat.PDF417
+     BarcodeFormat.AZTEC
+```
diff --git a/vision-sample/build.gradle b/vision-sample/build.gradle
new file mode 100644
index 0000000..4222f78
--- /dev/null
+++ b/vision-sample/build.gradle
@@ -0,0 +1,14 @@
+apply plugin: 'com.android.application'
+
+dependencies {
+    compile project(":vision")
+    compile libraries.support_v4
+    compile libraries.appcompat_v7
+    compile libraries.design_support
+}
+
+android {
+    defaultConfig {
+        applicationId "${project.group}.vision.sample"
+    }
+}
\ No newline at end of file
diff --git a/vision-sample/src/main/AndroidManifest.xml b/vision-sample/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..3751752
--- /dev/null
+++ b/vision-sample/src/main/AndroidManifest.xml
@@ -0,0 +1,50 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="me.dm7.barcodescanner.vision.sample">
+
+    <uses-permission android:name="android.permission.CAMERA"/>
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_launcher"
+        android:label="@string/app_name">
+        <activity
+            android:name=".MainActivity"
+            android:label="@string/app_name"
+            android:theme="@style/AppTheme">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+        </activity>
+
+        <activity
+            android:name=".FullScannerActivity"
+            android:label="@string/full_activity_sample"
+            android:theme="@style/AppOverlayTheme"
+            android:uiOptions="splitActionBarWhenNarrow">
+            <meta-data
+                android:name="android.support.UI_OPTIONS"
+                android:value="splitActionBarWhenNarrow"/>
+        </activity>
+
+
+        <activity
+            android:name=".SimpleScannerActivity"
+            android:label="@string/simple_scanner_activity"
+            android:theme="@style/AppOverlayTheme">
+        </activity>
+
+        <activity
+            android:name=".FullScannerFragmentActivity"
+            android:label="@string/full_fragment_sample"
+            android:theme="@style/AppOverlayTheme"
+            android:uiOptions="splitActionBarWhenNarrow">
+            <meta-data
+                android:name="android.support.UI_OPTIONS"
+                android:value="splitActionBarWhenNarrow"/>
+        </activity>
+
+    </application>
+</manifest>
\ No newline at end of file
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/BaseScannerActivity.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/BaseScannerActivity.java
new file mode 100644
index 0000000..af2a37d
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/BaseScannerActivity.java
@@ -0,0 +1,28 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.support.v7.app.ActionBar;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.MenuItem;
+
+public class BaseScannerActivity extends AppCompatActivity {
+    public void setupToolbar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+        final ActionBar ab = getSupportActionBar();
+        if(ab != null) {
+            ab.setDisplayHomeAsUpEnabled(true);
+        }
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        switch (item.getItemId()) {
+            // Respond to the action bar's Up/Home button
+            case android.R.id.home:
+                finish();
+                return true;
+        }
+        return super.onOptionsItemSelected(item);
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/CameraSelectorDialogFragment.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/CameraSelectorDialogFragment.java
new file mode 100644
index 0000000..3c8b4ba
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/CameraSelectorDialogFragment.java
@@ -0,0 +1,87 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.hardware.Camera;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+public class CameraSelectorDialogFragment extends DialogFragment {
+    public interface CameraSelectorDialogListener {
+        public void onCameraSelected(int cameraId);
+    }
+
+    private int mCameraId;
+    private CameraSelectorDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static CameraSelectorDialogFragment newInstance(CameraSelectorDialogListener listener, int cameraId) {
+        CameraSelectorDialogFragment fragment = new CameraSelectorDialogFragment();
+        fragment.mCameraId = cameraId;
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        if(mListener == null) {
+            dismiss();
+            return null;
+        }
+
+        int numberOfCameras = Camera.getNumberOfCameras();
+        String[] cameraNames = new String[numberOfCameras];
+        int checkedIndex = 0;
+
+        for (int i = 0; i < numberOfCameras; i++) {
+            Camera.CameraInfo info = new Camera.CameraInfo();
+            Camera.getCameraInfo(i, info);
+            if(info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
+                cameraNames[i] = "Front Facing";
+            } else if(info.facing == Camera.CameraInfo.CAMERA_FACING_BACK) {
+                cameraNames[i] = "Rear Facing";
+            } else {
+                cameraNames[i] = "Camera ID: " + i;
+            }
+            if(i == mCameraId) {
+                checkedIndex = i;
+            }
+        }
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        // Set the dialog title
+        builder.setTitle(R.string.select_camera)
+                // Specify the list array, the items to be selected by default (null for none),
+                // and the listener through which to receive callbacks when items are selected
+                .setSingleChoiceItems(cameraNames, checkedIndex,
+                        new DialogInterface.OnClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which) {
+                                mCameraId = which;
+                            }
+                        })
+                        // Set the action buttons
+                .setPositiveButton(R.string.ok_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                        // User clicked OK, so save the mSelectedIndices results somewhere
+                        // or return them to the component that opened the dialog
+                        if (mListener != null) {
+                            mListener.onCameraSelected(mCameraId);
+                        }
+                    }
+                })
+                .setNegativeButton(R.string.cancel_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                    }
+                });
+
+        return builder.create();
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FormatSelectorDialogFragment.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FormatSelectorDialogFragment.java
new file mode 100644
index 0000000..ce3c08e
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FormatSelectorDialogFragment.java
@@ -0,0 +1,94 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+import java.util.ArrayList;
+
+import me.dm7.barcodescanner.vision.BarcodeFormat;
+
+
+public class FormatSelectorDialogFragment extends DialogFragment {
+    public interface FormatSelectorDialogListener {
+        public void onFormatsSaved(ArrayList<Integer> selectedIndices);
+    }
+
+    private ArrayList<Integer> mSelectedIndices;
+    private FormatSelectorDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static FormatSelectorDialogFragment newInstance(FormatSelectorDialogListener listener, ArrayList<Integer> selectedIndices) {
+        FormatSelectorDialogFragment fragment = new FormatSelectorDialogFragment();
+        if(selectedIndices == null) {
+            selectedIndices = new ArrayList<Integer>();
+        }
+        fragment.mSelectedIndices = new ArrayList<Integer>(selectedIndices);
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        if(mSelectedIndices == null || mListener == null) {
+            dismiss();
+            return null;
+        }
+
+        String[] formats = new String[BarcodeFormat.ALL_FORMATS.size()];
+        boolean[] checkedIndices = new boolean[BarcodeFormat.ALL_FORMATS.size()];
+        int i = 0;
+        for(BarcodeFormat format : BarcodeFormat.ALL_FORMATS) {
+            formats[i] = format.getName();
+            if(mSelectedIndices.contains(i)) {
+                checkedIndices[i] = true;
+            } else {
+                checkedIndices[i] = false;
+            }
+            i++;
+        }
+
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        // Set the dialog title
+        builder.setTitle(R.string.choose_formats)
+                // Specify the list array, the items to be selected by default (null for none),
+                // and the listener through which to receive callbacks when items are selected
+                .setMultiChoiceItems(formats, checkedIndices,
+                        new DialogInterface.OnMultiChoiceClickListener() {
+                            @Override
+                            public void onClick(DialogInterface dialog, int which, boolean isChecked) {
+                                if (isChecked) {
+                                    // If the user checked the item, add it to the selected items
+                                    mSelectedIndices.add(which);
+                                } else if (mSelectedIndices.contains(which)) {
+                                    // Else, if the item is already in the array, remove it
+                                    mSelectedIndices.remove(mSelectedIndices.indexOf(which));
+                                }
+                            }
+                        })
+                        // Set the action buttons
+                .setPositiveButton(R.string.ok_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                        // User clicked OK, so save the mSelectedIndices results somewhere
+                        // or return them to the component that opened the dialog
+                        if (mListener != null) {
+                            mListener.onFormatsSaved(mSelectedIndices);
+                        }
+                    }
+                })
+                .setNegativeButton(R.string.cancel_button, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialog, int id) {
+                    }
+                });
+
+        return builder.create();
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerActivity.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerActivity.java
new file mode 100644
index 0000000..c61db5d
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerActivity.java
@@ -0,0 +1,217 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.MenuItemCompat;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.ViewGroup;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import me.dm7.barcodescanner.vision.BarcodeFormat;
+import me.dm7.barcodescanner.vision.Result;
+import me.dm7.barcodescanner.vision.VisionScannerView;
+
+
+public class FullScannerActivity extends BaseScannerActivity implements MessageDialogFragment.MessageDialogListener,
+        VisionScannerView.ResultHandler, FormatSelectorDialogFragment.FormatSelectorDialogListener,
+        CameraSelectorDialogFragment.CameraSelectorDialogListener {
+    private static final String FLASH_STATE = "FLASH_STATE";
+    private static final String AUTO_FOCUS_STATE = "AUTO_FOCUS_STATE";
+    private static final String SELECTED_FORMATS = "SELECTED_FORMATS";
+    private static final String CAMERA_ID = "CAMERA_ID";
+    private VisionScannerView mScannerView;
+    private boolean mFlash;
+    private boolean mAutoFocus;
+    private ArrayList<Integer> mSelectedIndices;
+    private int mCameraId = -1;
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        if (state != null) {
+            mFlash = state.getBoolean(FLASH_STATE, false);
+            mAutoFocus = state.getBoolean(AUTO_FOCUS_STATE, true);
+            mSelectedIndices = state.getIntegerArrayList(SELECTED_FORMATS);
+            mCameraId = state.getInt(CAMERA_ID, -1);
+        } else {
+            mFlash = false;
+            mAutoFocus = true;
+            mSelectedIndices = null;
+            mCameraId = -1;
+        }
+
+        setContentView(R.layout.activity_full_scanner);
+        setupToolbar();
+        ViewGroup contentFrame = (ViewGroup) findViewById(R.id.content_frame);
+        mScannerView = new VisionScannerView(this);
+        setupFormats();
+        contentFrame.addView(mScannerView);
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mScannerView.setResultHandler(this);
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(FLASH_STATE, mFlash);
+        outState.putBoolean(AUTO_FOCUS_STATE, mAutoFocus);
+        outState.putIntegerArrayList(SELECTED_FORMATS, mSelectedIndices);
+        outState.putInt(CAMERA_ID, mCameraId);
+    }
+
+    @Override
+    public boolean onCreateOptionsMenu(Menu menu) {
+        MenuItem menuItem;
+
+        if (mFlash) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+
+        if (mAutoFocus) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_formats, 0, R.string.formats);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_camera_selector, 0, R.string.select_camera);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        return super.onCreateOptionsMenu(menu);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle presses on the action bar items
+        switch (item.getItemId()) {
+            case R.id.menu_flash:
+                mFlash = !mFlash;
+                if (mFlash) {
+                    item.setTitle(R.string.flash_on);
+                } else {
+                    item.setTitle(R.string.flash_off);
+                }
+                mScannerView.setFlash(mFlash);
+                return true;
+            case R.id.menu_auto_focus:
+                mAutoFocus = !mAutoFocus;
+                if (mAutoFocus) {
+                    item.setTitle(R.string.auto_focus_on);
+                } else {
+                    item.setTitle(R.string.auto_focus_off);
+                }
+                mScannerView.setAutoFocus(mAutoFocus);
+                return true;
+            case R.id.menu_formats:
+                DialogFragment fragment = FormatSelectorDialogFragment.newInstance(this, mSelectedIndices);
+                fragment.show(getSupportFragmentManager(), "format_selector");
+                return true;
+            case R.id.menu_camera_selector:
+                mScannerView.stopCamera();
+                DialogFragment cFragment = CameraSelectorDialogFragment.newInstance(this, mCameraId);
+                cFragment.show(getSupportFragmentManager(), "camera_selector");
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+        try {
+            Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
+            Ringtone r = RingtoneManager.getRingtone(getApplicationContext(), notification);
+            r.play();
+        } catch (Exception e) {
+        }
+        showMessageDialog("Contents = " + rawResult.getBarcode().rawValue + ", Format = " + BarcodeFormat.getFormatById(rawResult.getBarcode().format).getName());
+    }
+
+    public void showMessageDialog(String message) {
+        DialogFragment fragment = MessageDialogFragment.newInstance("Scan Results", message, this);
+        fragment.show(getSupportFragmentManager(), "scan_results");
+    }
+
+    public void closeMessageDialog() {
+        closeDialog("scan_results");
+    }
+
+    public void closeFormatsDialog() {
+        closeDialog("format_selector");
+    }
+
+    public void closeDialog(String dialogName) {
+        FragmentManager fragmentManager = getSupportFragmentManager();
+        DialogFragment fragment = (DialogFragment) fragmentManager.findFragmentByTag(dialogName);
+        if (fragment != null) {
+            fragment.dismiss();
+        }
+    }
+
+    @Override
+    public void onDialogPositiveClick(DialogFragment dialog) {
+        // Resume the camera
+        mScannerView.resumeCameraPreview(this);
+    }
+
+    @Override
+    public void onFormatsSaved(ArrayList<Integer> selectedIndices) {
+        mSelectedIndices = selectedIndices;
+        setupFormats();
+    }
+
+    @Override
+    public void onCameraSelected(int cameraId) {
+        mCameraId = cameraId;
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+
+    public void setupFormats() {
+        List<BarcodeFormat> formats = new ArrayList<BarcodeFormat>();
+        if (mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+            mSelectedIndices = new ArrayList<Integer>();
+            for (int i = 0; i < BarcodeFormat.ALL_FORMATS.size(); i++) {
+                mSelectedIndices.add(i);
+            }
+        }
+
+        for (int index : mSelectedIndices) {
+            formats.add(BarcodeFormat.ALL_FORMATS.get(index));
+        }
+        if (mScannerView != null) {
+            mScannerView.setFormats(formats);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mScannerView.stopCamera();
+        closeMessageDialog();
+        closeFormatsDialog();
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragment.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragment.java
new file mode 100644
index 0000000..e36475c
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragment.java
@@ -0,0 +1,220 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.view.MenuItemCompat;
+import android.view.LayoutInflater;
+import android.view.Menu;
+import android.view.MenuInflater;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.ViewGroup;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import me.dm7.barcodescanner.vision.BarcodeFormat;
+import me.dm7.barcodescanner.vision.Result;
+import me.dm7.barcodescanner.vision.VisionScannerView;
+
+public class FullScannerFragment extends Fragment implements MessageDialogFragment.MessageDialogListener,
+        VisionScannerView.ResultHandler, FormatSelectorDialogFragment.FormatSelectorDialogListener,
+        CameraSelectorDialogFragment.CameraSelectorDialogListener {
+    private static final String FLASH_STATE = "FLASH_STATE";
+    private static final String AUTO_FOCUS_STATE = "AUTO_FOCUS_STATE";
+    private static final String SELECTED_FORMATS = "SELECTED_FORMATS";
+    private static final String CAMERA_ID = "CAMERA_ID";
+    private VisionScannerView mScannerView;
+    private boolean mFlash;
+    private boolean mAutoFocus;
+    private ArrayList<Integer> mSelectedIndices;
+    private int mCameraId = -1;
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle state) {
+        mScannerView = new VisionScannerView(getActivity());
+        if (state != null) {
+            mFlash = state.getBoolean(FLASH_STATE, false);
+            mAutoFocus = state.getBoolean(AUTO_FOCUS_STATE, true);
+            mSelectedIndices = state.getIntegerArrayList(SELECTED_FORMATS);
+            mCameraId = state.getInt(CAMERA_ID, -1);
+        } else {
+            mFlash = false;
+            mAutoFocus = true;
+            mSelectedIndices = null;
+            mCameraId = -1;
+        }
+        setupFormats();
+        return mScannerView;
+    }
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setHasOptionsMenu(true);
+    }
+
+    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
+        super.onCreateOptionsMenu(menu, inflater);
+
+        MenuItem menuItem;
+
+        if (mFlash) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_flash, 0, R.string.flash_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+
+        if (mAutoFocus) {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_on);
+        } else {
+            menuItem = menu.add(Menu.NONE, R.id.menu_auto_focus, 0, R.string.auto_focus_off);
+        }
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_formats, 0, R.string.formats);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+
+        menuItem = menu.add(Menu.NONE, R.id.menu_camera_selector, 0, R.string.select_camera);
+        MenuItemCompat.setShowAsAction(menuItem, MenuItem.SHOW_AS_ACTION_NEVER);
+    }
+
+    @Override
+    public boolean onOptionsItemSelected(MenuItem item) {
+        // Handle presses on the action bar items
+        switch (item.getItemId()) {
+            case R.id.menu_flash:
+                mFlash = !mFlash;
+                if (mFlash) {
+                    item.setTitle(R.string.flash_on);
+                } else {
+                    item.setTitle(R.string.flash_off);
+                }
+                mScannerView.setFlash(mFlash);
+                return true;
+            case R.id.menu_auto_focus:
+                mAutoFocus = !mAutoFocus;
+                if (mAutoFocus) {
+                    item.setTitle(R.string.auto_focus_on);
+                } else {
+                    item.setTitle(R.string.auto_focus_off);
+                }
+                mScannerView.setAutoFocus(mAutoFocus);
+                return true;
+            case R.id.menu_formats:
+                DialogFragment fragment = FormatSelectorDialogFragment.newInstance(this, mSelectedIndices);
+                fragment.show(getActivity().getSupportFragmentManager(), "format_selector");
+                return true;
+            case R.id.menu_camera_selector:
+                mScannerView.stopCamera();
+                DialogFragment cFragment = CameraSelectorDialogFragment.newInstance(this, mCameraId);
+                cFragment.show(getActivity().getSupportFragmentManager(), "camera_selector");
+                return true;
+            default:
+                return super.onOptionsItemSelected(item);
+        }
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mScannerView.setResultHandler(this);
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+    @Override
+    public void onSaveInstanceState(Bundle outState) {
+        super.onSaveInstanceState(outState);
+        outState.putBoolean(FLASH_STATE, mFlash);
+        outState.putBoolean(AUTO_FOCUS_STATE, mAutoFocus);
+        outState.putIntegerArrayList(SELECTED_FORMATS, mSelectedIndices);
+        outState.putInt(CAMERA_ID, mCameraId);
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+        try {
+            Uri notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);
+            Ringtone r = RingtoneManager.getRingtone(getActivity().getApplicationContext(), notification);
+            r.play();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        showMessageDialog("Contents = " + rawResult.getBarcode().rawValue + ", Format = " + BarcodeFormat.getFormatById(rawResult.getBarcode().format).getName());
+    }
+
+    public void showMessageDialog(String message) {
+        DialogFragment fragment = MessageDialogFragment.newInstance("Scan Results", message, this);
+        fragment.show(getActivity().getSupportFragmentManager(), "scan_results");
+    }
+
+    public void closeMessageDialog() {
+        closeDialog("scan_results");
+    }
+
+    public void closeFormatsDialog() {
+        closeDialog("format_selector");
+    }
+
+    public void closeDialog(String dialogName) {
+        FragmentManager fragmentManager = getActivity().getSupportFragmentManager();
+        DialogFragment fragment = (DialogFragment) fragmentManager.findFragmentByTag(dialogName);
+        if (fragment != null) {
+            fragment.dismiss();
+        }
+    }
+
+    @Override
+    public void onDialogPositiveClick(DialogFragment dialog) {
+        // Resume the camera
+        mScannerView.resumeCameraPreview(this);
+    }
+
+    @Override
+    public void onFormatsSaved(ArrayList<Integer> selectedIndices) {
+        mSelectedIndices = selectedIndices;
+        setupFormats();
+    }
+
+    @Override
+    public void onCameraSelected(int cameraId) {
+        mCameraId = cameraId;
+        mScannerView.startCamera(mCameraId);
+        mScannerView.setFlash(mFlash);
+        mScannerView.setAutoFocus(mAutoFocus);
+    }
+
+    public void setupFormats() {
+        List<BarcodeFormat> formats = new ArrayList<>();
+        if (mSelectedIndices == null || mSelectedIndices.isEmpty()) {
+            mSelectedIndices = new ArrayList<>();
+            for (int i = 0; i < BarcodeFormat.ALL_FORMATS.size(); i++) {
+                mSelectedIndices.add(i);
+            }
+        }
+
+        for (int index : mSelectedIndices) {
+            formats.add(BarcodeFormat.ALL_FORMATS.get(index));
+        }
+        if (mScannerView != null) {
+            mScannerView.setFormats(formats);
+        }
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mScannerView.stopCamera();
+        closeMessageDialog();
+        closeFormatsDialog();
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragmentActivity.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragmentActivity.java
new file mode 100644
index 0000000..be11724
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/FullScannerFragmentActivity.java
@@ -0,0 +1,12 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.os.Bundle;
+
+public class FullScannerFragmentActivity extends BaseScannerActivity {
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setContentView(R.layout.activity_full_scanner_fragment);
+        setupToolbar();
+    }
+}
\ No newline at end of file
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MainActivity.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MainActivity.java
new file mode 100644
index 0000000..c301014
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MainActivity.java
@@ -0,0 +1,71 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.Manifest;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.ActivityCompat;
+import android.support.v4.content.ContextCompat;
+import android.support.v7.app.AppCompatActivity;
+import android.support.v7.widget.Toolbar;
+import android.view.View;
+import android.widget.Toast;
+
+public class MainActivity extends AppCompatActivity {
+    private static final int ZXING_CAMERA_PERMISSION = 1;
+    private Class<?> mClass;
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setContentView(R.layout.activity_main);
+        setupToolbar();
+    }
+
+    public void setupToolbar() {
+        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+    }
+
+    public void launchSimpleActivity(View v) {
+        launchActivity(SimpleScannerActivity.class);
+    }
+
+
+    public void launchFullActivity(View v) {
+        launchActivity(FullScannerActivity.class);
+    }
+
+
+    public void launchActivity(Class<?> clss) {
+        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
+                != PackageManager.PERMISSION_GRANTED) {
+            mClass = clss;
+            ActivityCompat.requestPermissions(this,
+                    new String[]{Manifest.permission.CAMERA}, ZXING_CAMERA_PERMISSION);
+        } else {
+            Intent intent = new Intent(this, clss);
+            startActivity(intent);
+        }
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {
+        switch (requestCode) {
+            case ZXING_CAMERA_PERMISSION:
+                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
+                    if (mClass != null) {
+                        Intent intent = new Intent(this, mClass);
+                        startActivity(intent);
+                    }
+                } else {
+                    Toast.makeText(this, "Please grant camera permission to use the QR Scanner", Toast.LENGTH_SHORT).show();
+                }
+        }
+    }
+
+    public void launchFullFragmentActivity(View view) {
+        launchActivity(FullScannerFragmentActivity.class);
+    }
+}
\ No newline at end of file
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MessageDialogFragment.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MessageDialogFragment.java
new file mode 100644
index 0000000..fdf5f97
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/MessageDialogFragment.java
@@ -0,0 +1,47 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.content.DialogInterface;
+import android.os.Bundle;
+import android.support.v4.app.DialogFragment;
+
+public class MessageDialogFragment extends DialogFragment {
+    public interface MessageDialogListener {
+        public void onDialogPositiveClick(DialogFragment dialog);
+    }
+
+    private String mTitle;
+    private String mMessage;
+    private MessageDialogListener mListener;
+
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        setRetainInstance(true);
+    }
+
+    public static MessageDialogFragment newInstance(String title, String message, MessageDialogListener listener) {
+        MessageDialogFragment fragment = new MessageDialogFragment();
+        fragment.mTitle = title;
+        fragment.mMessage = message;
+        fragment.mListener = listener;
+        return fragment;
+    }
+
+    @Override
+    public Dialog onCreateDialog(Bundle savedInstanceState) {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
+        builder.setMessage(mMessage)
+                .setTitle(mTitle);
+
+        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int id) {
+                if(mListener != null) {
+                    mListener.onDialogPositiveClick(MessageDialogFragment.this);
+                }
+            }
+        });
+
+        return builder.create();
+    }
+}
diff --git a/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/SimpleScannerActivity.java b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/SimpleScannerActivity.java
new file mode 100644
index 0000000..c10365b
--- /dev/null
+++ b/vision-sample/src/main/java/me/dm7/barcodescanner/vision/sample/SimpleScannerActivity.java
@@ -0,0 +1,48 @@
+package me.dm7.barcodescanner.vision.sample;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.Toast;
+
+import me.dm7.barcodescanner.vision.BarcodeFormat;
+import me.dm7.barcodescanner.vision.Result;
+import me.dm7.barcodescanner.vision.VisionScannerView;
+
+public class SimpleScannerActivity extends Activity implements VisionScannerView.ResultHandler {
+    private static final String TAG = "SimpleScannerActivity";
+
+    private VisionScannerView mScannerView;
+
+    @Override
+    public void onCreate(Bundle state) {
+        super.onCreate(state);
+        mScannerView = new VisionScannerView(this);   // Programmatically initialize the scanner view
+        setContentView(mScannerView);                // Set the scanner view as the content view
+    }
+
+    @Override
+    public void onResume() {
+        super.onResume();
+        mScannerView.setResultHandler(this); // Register ourselves as a handler for scan results.
+        mScannerView.startCamera();          // Start camera on resume
+    }
+
+    @Override
+    public void onPause() {
+        super.onPause();
+        mScannerView.stopCamera();           // Stop camera on pause
+    }
+
+    @Override
+    public void handleResult(Result rawResult) {
+        // Do something with the result here
+        Log.v(TAG, rawResult.getBarcode().displayValue); // Prints scan results
+        Log.v(TAG, BarcodeFormat.getFormatById(rawResult.getBarcode().format).toString()); // Prints the scan format (qrcode, pdf417 etc.)
+
+        // If you would like to resume scanning, call this method below:
+        mScannerView.resumeCameraPreview(this);
+
+        Toast.makeText(SimpleScannerActivity.this, rawResult.getBarcode().displayValue, Toast.LENGTH_SHORT).show();
+    }
+}
\ No newline at end of file
diff --git a/vision-sample/src/main/res/drawable-hdpi/ic_launcher.png b/vision-sample/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..96a442e
Binary files /dev/null and b/vision-sample/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/vision-sample/src/main/res/drawable-mdpi/ic_launcher.png b/vision-sample/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..359047d
Binary files /dev/null and b/vision-sample/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/vision-sample/src/main/res/drawable-xhdpi/ic_launcher.png b/vision-sample/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..71c6d76
Binary files /dev/null and b/vision-sample/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/vision-sample/src/main/res/drawable-xxhdpi/ic_launcher.png b/vision-sample/src/main/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..4df1894
Binary files /dev/null and b/vision-sample/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/vision-sample/src/main/res/layout/activity_full_scanner.xml b/vision-sample/src/main/res/layout/activity_full_scanner.xml
new file mode 100644
index 0000000..fae7823
--- /dev/null
+++ b/vision-sample/src/main/res/layout/activity_full_scanner.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<FrameLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <FrameLayout
+        android:id="@+id/content_frame"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+    <android.support.v7.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_gravity="top"
+        android:background="@color/actionbar_opacity"
+        android:minHeight="?attr/actionBarSize"
+        app:theme="@style/TransparentToolbar"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/vision-sample/src/main/res/layout/activity_full_scanner_fragment.xml b/vision-sample/src/main/res/layout/activity_full_scanner_fragment.xml
new file mode 100644
index 0000000..ce19d19
--- /dev/null
+++ b/vision-sample/src/main/res/layout/activity_full_scanner_fragment.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
+             xmlns:tools="http://schemas.android.com/tools"
+             android:layout_width="match_parent"
+             android:layout_height="match_parent"
+             android:orientation="vertical">
+
+    <fragment
+        android:id="@+id/scanner_fragment"
+        android:name="me.dm7.barcodescanner.vision.sample.FullScannerFragment"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+
+    <ImageView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="top"
+        android:src="@drawable/ic_launcher"
+        tools:ignore="ContentDescription"/>
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_gravity="center|bottom"
+        android:text="Place a barcode in the viewfinder rectangle to scan it."
+        android:textColor="#ffffff"
+        tools:ignore="HardcodedText"/>
+</FrameLayout>
\ No newline at end of file
diff --git a/vision-sample/src/main/res/layout/activity_main.xml b/vision-sample/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000..0cfd470
--- /dev/null
+++ b/vision-sample/src/main/res/layout/activity_main.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical">
+
+    <android.support.design.widget.AppBarLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light"
+        app:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+
+        <android.support.v7.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"/>
+    </android.support.design.widget.AppBarLayout>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:orientation="vertical">
+
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="launchSimpleActivity"
+                android:text="@string/simple_activity_sample"/>
+
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="launchFullActivity"
+                android:text="@string/full_activity_sample"/>
+
+            <Button
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:onClick="launchFullFragmentActivity"
+                android:text="@string/full_fragment_sample"/>
+
+        </LinearLayout>
+    </ScrollView>
+</LinearLayout>
\ No newline at end of file
diff --git a/vision-sample/src/main/res/values/colors.xml b/vision-sample/src/main/res/values/colors.xml
new file mode 100644
index 0000000..1a64799
--- /dev/null
+++ b/vision-sample/src/main/res/values/colors.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="actionbar_opacity">#33000000</color>
+    <color name="primary">#3F51B5</color>
+    <color name="primary_dark">#303F9F</color>
+    <color name="primary_light">#C5CAE9</color>
+    <color name="accent">#E040FB</color>
+    <color name="primary_text">#212121</color>
+    <color name="secondary_text">#727272</color>
+    <color name="icons">#FFFFFF</color>
+    <color name="divider">#B6B6B6</color>
+</resources>
\ No newline at end of file
diff --git a/vision-sample/src/main/res/values/ids.xml b/vision-sample/src/main/res/values/ids.xml
new file mode 100644
index 0000000..1b582b6
--- /dev/null
+++ b/vision-sample/src/main/res/values/ids.xml
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item type="id" name="menu_flash" />
+    <item type="id" name="menu_auto_focus" />
+    <item type="id" name="menu_formats" />
+    <item type="id" name="menu_camera_selector" />
+</resources>
\ No newline at end of file
diff --git a/vision-sample/src/main/res/values/strings.xml b/vision-sample/src/main/res/values/strings.xml
new file mode 100644
index 0000000..caa107f
--- /dev/null
+++ b/vision-sample/src/main/res/values/strings.xml
@@ -0,0 +1,19 @@
+<resources>
+    <string name="app_name">Google Mobile Vision Scanner Sample</string>
+    <string name="scanner_activity">Google Mobile Vision Scanner - Full Activity</string>
+    <string name="simple_scanner_activity">Google Mobile Vision Scanner - Simple Activity</string>
+    <string name="simple_activity_sample">Simple Activity Sample</string>
+    <string name="full_activity_sample">Full Activity Sample</string>
+    <string name="full_fragment_sample">Full Fragment Sample</string>
+
+    <string name="toggle_flash">Flash</string>
+    <string name="flash_on">Flash [ON]</string>
+    <string name="flash_off">Flash [OFF]</string>
+    <string name="auto_focus_on">Auto Focus [ON]</string>
+    <string name="auto_focus_off">Auto Focus [OFF]</string>
+    <string name="formats">Formats</string>
+    <string name="choose_formats">Choose Formats</string>
+    <string name="select_camera">Select a Camera</string>
+    <string name="ok_button">OK</string>
+    <string name="cancel_button">Cancel</string>
+</resources>
diff --git a/vision-sample/src/main/res/values/styles.xml b/vision-sample/src/main/res/values/styles.xml
new file mode 100644
index 0000000..abab8ed
--- /dev/null
+++ b/vision-sample/src/main/res/values/styles.xml
@@ -0,0 +1,36 @@
+<resources>
+    <style name="AppTheme" parent="Theme.AppCompat.Light.NoActionBar">
+        <item name="colorPrimary">@color/primary</item>
+        <!-- darker variant for the status bar and contextual app bars -->
+        <item name="colorPrimaryDark">@color/primary_dark</item>
+        <!--   theme UI controls like checkboxes and text fields e.g. FloatActionButton -->
+        <item name="colorAccent">@color/accent</item>
+        <!-- Title Text Color -->
+        <item name="android:textColorPrimary">@color/primary_text</item>
+        <!-- color of the menu overflow icon (three vertical dots) -->
+        <item name="android:textColorSecondary">@color/secondary_text</item>
+    </style>
+
+    <style name="AppOverlayTheme" parent="@style/Theme.AppCompat.Light">
+        <item name="windowNoTitle">true</item>
+        <item name="windowActionBar">false</item>
+        <item name="android:windowFullscreen">true</item>
+        <item name="android:windowContentOverlay">@null</item>
+
+        <item name="colorPrimary">@color/primary</item>
+        <!-- darker variant for the status bar and contextual app bars -->
+        <item name="colorPrimaryDark">@color/primary_dark</item>
+        <!--   theme UI controls like checkboxes and text fields e.g. FloatActionButton -->
+        <item name="colorAccent">@color/accent</item>
+        <!-- Title Text Color -->
+        <item name="android:textColorPrimary">@color/primary_text</item>
+        <!-- color of the menu overflow icon (three vertical dots) -->
+        <item name="android:textColorSecondary">@color/secondary_text</item>
+    </style>
+
+    <style name="TransparentToolbar" parent="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+        <item name="android:windowActionBarOverlay">true</item>
+        <!-- Support Library compability -->
+        <item name="windowActionBarOverlay">true</item>
+    </style>
+</resources>
