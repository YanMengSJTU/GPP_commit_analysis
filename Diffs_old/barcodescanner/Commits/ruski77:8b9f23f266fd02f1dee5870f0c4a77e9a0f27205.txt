diff --git a/README.md b/README.md
index 6d7cea2..d84aa04 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,10 @@
+Instructions for Stampede
+=========================
+
+run this to build all aar files
+./gradlew assemble
+
+
 Introduction
 ============
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
index f73c73a..3a4dd4f 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/BarcodeScannerView.java
@@ -172,7 +172,7 @@ public void setBorderAlpha(float borderAlpha) {
         mViewFinderView.setupViewFinder();
     }
 
-    public void startCamera(int cameraId) {
+    public void startCamera(int cameraId) throws CameraOpenException {
         if(mCameraHandlerThread == null) {
             mCameraHandlerThread = new CameraHandlerThread(this);
         }
@@ -191,7 +191,7 @@ public void setupCameraPreview(CameraWrapper cameraWrapper) {
         }
     }
 
-    public void startCamera() {
+    public void startCamera() throws CameraOpenException {
         startCamera(CameraUtils.getDefaultCameraId());
     }
 
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
index 2d4bcee..b354f79 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraHandlerThread.java
@@ -18,19 +18,23 @@ public CameraHandlerThread(BarcodeScannerView scannerView) {
         start();
     }
 
-    public void startCamera(final int cameraId) {
-        Handler localHandler = new Handler(getLooper());
+    public void startCamera(final int cameraId) throws CameraOpenException {
+        Handler localHandler = new Handler(Looper.getMainLooper());
         localHandler.post(new Runnable() {
             @Override
             public void run() {
-                final Camera camera = CameraUtils.getCameraInstance(cameraId);
-                Handler mainHandler = new Handler(Looper.getMainLooper());
-                mainHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mScannerView.setupCameraPreview(CameraWrapper.getWrapper(camera, cameraId));
-                    }
-                });
+                try {
+                    final Camera camera = CameraUtils.getCameraInstance(cameraId);
+                    Handler mainHandler = new Handler(Looper.getMainLooper());
+                    mainHandler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            mScannerView.setupCameraPreview(CameraWrapper.getWrapper(camera, cameraId));
+                        }
+                    });
+                } catch (CameraOpenException coe) {
+                    coe.printStackTrace();
+                }
             }
         });
     }
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraOpenException.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraOpenException.java
new file mode 100644
index 0000000..bb5a02e
--- /dev/null
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraOpenException.java
@@ -0,0 +1,8 @@
+package me.dm7.barcodescanner.core;
+
+public class CameraOpenException extends Exception {
+
+    public CameraOpenException(String message) {
+        super(message);
+    }
+}
diff --git a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
index 599bd5f..4b724cc 100644
--- a/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
+++ b/core/src/main/java/me/dm7/barcodescanner/core/CameraUtils.java
@@ -6,7 +6,7 @@
 
 public class CameraUtils {
     /** A safe way to get an instance of the Camera object. */
-    public static Camera getCameraInstance() {
+    public static Camera getCameraInstance() throws CameraOpenException {
         return getCameraInstance(getDefaultCameraId());
     }
 
@@ -26,7 +26,8 @@ public static int getDefaultCameraId() {
     }
 
     /** A safe way to get an instance of the Camera object. */
-    public static Camera getCameraInstance(int cameraId) {
+    public static Camera getCameraInstance(int cameraId) throws CameraOpenException {
+        System.out.println("#### in getCameraInstance(), cameraId = "+cameraId);
         Camera c = null;
         try {
             if(cameraId == -1) {
@@ -35,29 +36,39 @@ public static Camera getCameraInstance(int cameraId) {
                 c = Camera.open(cameraId); // attempt to get a Camera instance
             }
         }
-        catch (Exception e) {
+        catch (RuntimeException re) {
             // Camera is not available (in use or does not exist)
+            re.printStackTrace();
+            throw new CameraOpenException("Could not connect to camera");
         }
         return c; // returns null if camera is unavailable
     }
 
     public static boolean isFlashSupported(Camera camera) {
-        /* Credits: Top answer at http://stackoverflow.com/a/19599365/868173 */
+		/* Credits: Top answer at http://stackoverflow.com/a/19599365/868173 */
+
+        boolean retVal = true;
+
         if (camera != null) {
-            Camera.Parameters parameters = camera.getParameters();
+            try {
+                Camera.Parameters parameters = camera.getParameters();
 
-            if (parameters.getFlashMode() == null) {
-                return false;
-            }
+                if (parameters.getFlashMode() == null) {
+                    retVal = false;
+                }
 
-            List<String> supportedFlashModes = parameters.getSupportedFlashModes();
-            if (supportedFlashModes == null || supportedFlashModes.isEmpty() || supportedFlashModes.size() == 1 && supportedFlashModes.get(0).equals(Camera.Parameters.FLASH_MODE_OFF)) {
-                return false;
+                List<String> supportedFlashModes = parameters.getSupportedFlashModes();
+                if (supportedFlashModes == null || supportedFlashModes.isEmpty() || supportedFlashModes.size() == 1 && supportedFlashModes.get(0).equals(Camera.Parameters.FLASH_MODE_OFF)) {
+                    retVal = false;
+                }
+            } catch (RuntimeException e) {
+                // may be: "Fatal Exception: java.lang.RuntimeException: getParameters failed (empty parameters)"
+                retVal = false;
             }
         } else {
-            return false;
+            retVal = false;
         }
 
-        return true;
+        return retVal;
     }
 }
\ No newline at end of file
