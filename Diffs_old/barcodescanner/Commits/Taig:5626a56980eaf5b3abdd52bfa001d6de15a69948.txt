diff --git a/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java b/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
index e764bfb..801c596 100644
--- a/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
+++ b/src/main/java/com/taig/android/barcode/scanner/BarcodeScannerView.java
@@ -7,117 +7,148 @@
 import android.util.AttributeSet;
 import android.widget.FrameLayout;
 
-public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback  {
-    private Camera mCamera;
-    private CameraPreview mPreview;
-    private ViewFinderView mViewFinderView;
-    private Rect mFramingRectInPreview;
+public abstract class BarcodeScannerView extends FrameLayout implements Camera.PreviewCallback
+{
+	private Camera mCamera;
+	private CameraPreview mPreview;
+	private ViewFinderView mViewFinderView;
+	private Rect mFramingRectInPreview;
 
-    public BarcodeScannerView(Context context) {
-        super(context);
-        setupLayout();
-    }
+	public BarcodeScannerView( Context context )
+	{
+		super( context );
+		setupLayout();
+	}
 
-    public BarcodeScannerView(Context context, AttributeSet attributeSet) {
-        super(context, attributeSet);
-        setupLayout();
-    }
+	public BarcodeScannerView( Context context, AttributeSet attributeSet )
+	{
+		super( context, attributeSet );
+		setupLayout();
+	}
 
-    public void setupLayout() {
-        mPreview = new CameraPreview(getContext());
-        mViewFinderView = new ViewFinderView(getContext());
-        addView(mPreview);
-        addView(mViewFinderView);
-    }
+	public void setupLayout()
+	{
+		mPreview = new CameraPreview( getContext() );
+		mViewFinderView = new ViewFinderView( getContext() );
+		addView( mPreview );
+		addView( mViewFinderView );
+	}
 
-    public void startCamera() {
-        mCamera = CameraUtils.getCameraInstance();
-        if(mCamera != null) {
-            mViewFinderView.setupViewFinder();
-            mPreview.setCamera(mCamera, this);
-            mPreview.initCameraPreview();
-        }
-    }
+	public void startCamera()
+	{
+		mCamera = CameraUtils.getCameraInstance();
+		if( mCamera != null )
+		{
+			mViewFinderView.setupViewFinder();
+			mPreview.setCamera( mCamera, this );
+			mPreview.initCameraPreview();
+		}
+	}
 
-    public void stopCamera() {
-        if(mCamera != null) {
-            mPreview.stopCameraPreview();
-            mPreview.setCamera(null, null);
-            mCamera.release();
-            mCamera = null;
-        }
-    }
+	public void stopCamera()
+	{
+		if( mCamera != null )
+		{
+			mPreview.stopCameraPreview();
+			mPreview.setCamera( null, null );
+			mCamera.release();
+			mCamera = null;
+		}
+	}
 
-    public synchronized Rect getFramingRectInPreview(int width, int height) {
-        if (mFramingRectInPreview == null) {
-            Rect framingRect = mViewFinderView.getFramingRect();
-            if (framingRect == null) {
-                return null;
-            }
-            Rect rect = new Rect(framingRect);
-            Point screenResolution = DisplayUtils.getScreenResolution(getContext());
-            Point cameraResolution = new Point(width, height);
+	public synchronized Rect getFramingRectInPreview( int width, int height )
+	{
+		if( mFramingRectInPreview == null )
+		{
+			Rect framingRect = mViewFinderView.getFramingRect();
+			if( framingRect == null )
+			{
+				return null;
+			}
+			Rect rect = new Rect( framingRect );
+			Point screenResolution = DisplayUtils.getScreenResolution( getContext() );
+			Point cameraResolution = new Point( width, height );
 
-            if (cameraResolution == null || screenResolution == null) {
-                // Called early, before init even finished
-                return null;
-            }
+			if( cameraResolution == null || screenResolution == null )
+			{
+				// Called early, before init even finished
+				return null;
+			}
 
-            rect.left = rect.left * cameraResolution.x / screenResolution.x;
-            rect.right = rect.right * cameraResolution.x / screenResolution.x;
-            rect.top = rect.top * cameraResolution.y / screenResolution.y;
-            rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;
+			rect.left = rect.left * cameraResolution.x / screenResolution.x;
+			rect.right = rect.right * cameraResolution.x / screenResolution.x;
+			rect.top = rect.top * cameraResolution.y / screenResolution.y;
+			rect.bottom = rect.bottom * cameraResolution.y / screenResolution.y;
 
-            mFramingRectInPreview = rect;
-        }
-        return mFramingRectInPreview;
-    }
+			mFramingRectInPreview = rect;
+		}
+		return mFramingRectInPreview;
+	}
 
-    public void setFlash(boolean flag) {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
-            Camera.Parameters parameters = mCamera.getParameters();
-            if(flag) {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
-                    return;
-                }
-                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
-            } else {
-                if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_OFF)) {
-                    return;
-                }
-                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
-            }
-            mCamera.setParameters(parameters);
-        }
-    }
+	public void setFlash( boolean flag )
+	{
+		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
+		{
+			Camera.Parameters parameters = mCamera.getParameters();
+			if( flag )
+			{
+				if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
+				{
+					return;
+				}
+				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_TORCH );
+			}
+			else
+			{
+				if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_OFF ) )
+				{
+					return;
+				}
+				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_OFF );
+			}
+			mCamera.setParameters( parameters );
+		}
+	}
 
-    public boolean getFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
-            Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
-                return true;
-            } else {
-                return false;
-            }
-        }
-        return false;
-    }
+	public boolean getFlash()
+	{
+		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
+		{
+			Camera.Parameters parameters = mCamera.getParameters();
+			if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
+			{
+				return true;
+			}
+			else
+			{
+				return false;
+			}
+		}
+		return false;
+	}
 
-    public void toggleFlash() {
-        if(mCamera != null && CameraUtils.isFlashSupported(mCamera)) {
-            Camera.Parameters parameters = mCamera.getParameters();
-            if(parameters.getFlashMode().equals(Camera.Parameters.FLASH_MODE_TORCH)) {
-                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_OFF);
-            } else {
-                parameters.setFlashMode(Camera.Parameters.FLASH_MODE_TORCH);
-            }
-            mCamera.setParameters(parameters);
-        }
-    }
+	public void toggleFlash()
+	{
+		if( mCamera != null && CameraUtils.isFlashSupported( mCamera ) )
+		{
+			Camera.Parameters parameters = mCamera.getParameters();
+			if( parameters.getFlashMode().equals( Camera.Parameters.FLASH_MODE_TORCH ) )
+			{
+				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_OFF );
+			}
+			else
+			{
+				parameters.setFlashMode( Camera.Parameters.FLASH_MODE_TORCH );
+			}
+			mCamera.setParameters( parameters );
+		}
+	}
 
-    public void setAutoFocus(boolean state) {
-        if(mPreview != null) {
-            mPreview.setAutoFocus(state);
-        }
-    }
+	public void setAutoFocus( boolean state )
+	{
+		if( mPreview != null )
+		{
+			mPreview.setAutoFocus( state );
+		}
+	}
 }
diff --git a/src/main/java/com/taig/android/barcode/scanner/CameraPreview.java b/src/main/java/com/taig/android/barcode/scanner/CameraPreview.java
index 341b190..4186c68 100644
--- a/src/main/java/com/taig/android/barcode/scanner/CameraPreview.java
+++ b/src/main/java/com/taig/android/barcode/scanner/CameraPreview.java
@@ -15,200 +15,258 @@
 
 import java.util.List;
 
-public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
-    private static final String TAG = "CameraPreview";
-
-    private Camera mCamera;
-    private Handler mAutoFocusHandler;
-    private boolean mPreviewing = true;
-    private boolean mAutoFocus = true;
-    private boolean mSurfaceCreated = false;
-    private Camera.PreviewCallback mPreviewCallback;
-
-    public CameraPreview(Context context) {
-        super(context);
-    }
-
-    public CameraPreview(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public void setCamera(Camera camera, Camera.PreviewCallback previewCallback) {
-        mCamera = camera;
-        mPreviewCallback = previewCallback;
-        mAutoFocusHandler = new Handler();
-    }
-
-    public void initCameraPreview() {
-        if(mCamera != null) {
-            getHolder().addCallback(this);
-            getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
-            if(mPreviewing) {
-                requestLayout();
-            } else {
-                showCameraPreview();
-            }
-        }
-    }
-
-    @Override
-    public void surfaceCreated(SurfaceHolder surfaceHolder) {
-        mSurfaceCreated = true;
-    }
-
-    @Override
-    public void surfaceChanged(SurfaceHolder surfaceHolder, int i, int i2, int i3) {
-        if(surfaceHolder.getSurface() == null) {
-            return;
-        }
-        stopCameraPreview();
-        showCameraPreview();
-    }
-
-    @Override
-    public void surfaceDestroyed(SurfaceHolder surfaceHolder) {
-        mSurfaceCreated = false;
-        stopCameraPreview();
-    }
-
-    public void showCameraPreview() {
-        if(mCamera != null) {
-            try {
-                mPreviewing = true;
-                setupCameraParameters();
-                mCamera.setPreviewDisplay(getHolder());
-                mCamera.setDisplayOrientation(getDisplayOrientation());
-                mCamera.setOneShotPreviewCallback(mPreviewCallback);
-                mCamera.startPreview();
-                if(mAutoFocus) {
-                    mCamera.autoFocus(autoFocusCB);
-                }
-            } catch (Exception e) {
-                Log.e(TAG, e.toString(), e);
-            }
-        }
-    }
-
-    public void stopCameraPreview() {
-        if(mCamera != null) {
-            try {
-                mPreviewing = false;
-                mCamera.cancelAutoFocus();
-                mCamera.setOneShotPreviewCallback(null);
-                mCamera.stopPreview();
-            } catch(Exception e) {
-                Log.e(TAG, e.toString(), e);
-            }
-        }
-    }
-
-    public void setupCameraParameters() {
-        Camera.Size optimalSize = getOptimalPreviewSize();
-        Camera.Parameters parameters = mCamera.getParameters();
-        parameters.setPreviewSize(optimalSize.width, optimalSize.height);
-        mCamera.setParameters(parameters);
-    }
-
-    public int getDisplayOrientation() {
-        Camera.CameraInfo info = new Camera.CameraInfo();
-        Camera.getCameraInfo(Camera.CameraInfo.CAMERA_FACING_BACK, info);
-        WindowManager wm = (WindowManager) getContext().getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-
-        int rotation = display.getRotation();
-        int degrees = 0;
-        switch (rotation) {
-            case Surface.ROTATION_0: degrees = 0; break;
-            case Surface.ROTATION_90: degrees = 90; break;
-            case Surface.ROTATION_180: degrees = 180; break;
-            case Surface.ROTATION_270: degrees = 270; break;
-        }
-
-        int result;
-        if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
-            result = (info.orientation + degrees) % 360;
-            result = (360 - result) % 360;  // compensate the mirror
-        } else {  // back-facing
-            result = (info.orientation - degrees + 360) % 360;
-        }
-        return result;
-    }
-
-    private Camera.Size getOptimalPreviewSize() {
-        if(mCamera == null) {
-            return null;
-        }
-
-        List<Camera.Size> sizes = mCamera.getParameters().getSupportedPreviewSizes();
-        Point screenResolution = DisplayUtils.getScreenResolution(getContext());
-        int w = screenResolution.x;
-        int h = screenResolution.y;
-        if (DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-            w = screenResolution.y;
-            h = screenResolution.x;
-        }
-
-
-        final double ASPECT_TOLERANCE = 0.1;
-        double targetRatio = (double) w / h;
-        if (sizes == null) return null;
-
-        Camera.Size optimalSize = null;
-        double minDiff = Double.MAX_VALUE;
-
-        int targetHeight = h;
-
-        // Try to find an size match aspect ratio and size
-        for (Camera.Size size : sizes) {
-            double ratio = (double) size.width / size.height;
-            if (Math.abs(ratio - targetRatio) > ASPECT_TOLERANCE) continue;
-            if (Math.abs(size.height - targetHeight) < minDiff) {
-                optimalSize = size;
-                minDiff = Math.abs(size.height - targetHeight);
-            }
-        }
-
-        // Cannot find the one match the aspect ratio, ignore the requirement
-        if (optimalSize == null) {
-            minDiff = Double.MAX_VALUE;
-            for (Camera.Size size : sizes) {
-                if (Math.abs(size.height - targetHeight) < minDiff) {
-                    optimalSize = size;
-                    minDiff = Math.abs(size.height - targetHeight);
-                }
-            }
-        }
-        return optimalSize;
-    }
-
-    public void setAutoFocus(boolean state) {
-        if(mCamera != null && mPreviewing) {
-            if(state == mAutoFocus) {
-                return;
-            }
-            mAutoFocus = state;
-            if(mAutoFocus) {
-                Log.v(TAG, "Starting autofocus");
-                mCamera.autoFocus(autoFocusCB);
-            } else {
-                Log.v(TAG, "Cancelling autofocus");
-                mCamera.cancelAutoFocus();
-            }
-        }
-    }
-
-    private Runnable doAutoFocus = new Runnable() {
-        public void run() {
-            if(mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated) {
-                mCamera.autoFocus(autoFocusCB);
-            }
-        }
-    };
-
-    // Mimic continuous auto-focusing
-    Camera.AutoFocusCallback autoFocusCB = new Camera.AutoFocusCallback() {
-        public void onAutoFocus(boolean success, Camera camera) {
-            mAutoFocusHandler.postDelayed(doAutoFocus, 1000);
-        }
-    };
+public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback
+{
+	private static final String TAG = "CameraPreview";
+
+	private Camera mCamera;
+	private Handler mAutoFocusHandler;
+	private boolean mPreviewing = true;
+	private boolean mAutoFocus = true;
+	private boolean mSurfaceCreated = false;
+	private Camera.PreviewCallback mPreviewCallback;
+
+	public CameraPreview( Context context )
+	{
+		super( context );
+	}
+
+	public CameraPreview( Context context, AttributeSet attrs )
+	{
+		super( context, attrs );
+	}
+
+	public void setCamera( Camera camera, Camera.PreviewCallback previewCallback )
+	{
+		mCamera = camera;
+		mPreviewCallback = previewCallback;
+		mAutoFocusHandler = new Handler();
+	}
+
+	public void initCameraPreview()
+	{
+		if( mCamera != null )
+		{
+			getHolder().addCallback( this );
+			getHolder().setType( SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS );
+			if( mPreviewing )
+			{
+				requestLayout();
+			}
+			else
+			{
+				showCameraPreview();
+			}
+		}
+	}
+
+	@Override
+	public void surfaceCreated( SurfaceHolder surfaceHolder )
+	{
+		mSurfaceCreated = true;
+	}
+
+	@Override
+	public void surfaceChanged( SurfaceHolder surfaceHolder, int i, int i2, int i3 )
+	{
+		if( surfaceHolder.getSurface() == null )
+		{
+			return;
+		}
+		stopCameraPreview();
+		showCameraPreview();
+	}
+
+	@Override
+	public void surfaceDestroyed( SurfaceHolder surfaceHolder )
+	{
+		mSurfaceCreated = false;
+		stopCameraPreview();
+	}
+
+	public void showCameraPreview()
+	{
+		if( mCamera != null )
+		{
+			try
+			{
+				mPreviewing = true;
+				setupCameraParameters();
+				mCamera.setPreviewDisplay( getHolder() );
+				mCamera.setDisplayOrientation( getDisplayOrientation() );
+				mCamera.setOneShotPreviewCallback( mPreviewCallback );
+				mCamera.startPreview();
+				if( mAutoFocus )
+				{
+					mCamera.autoFocus( autoFocusCB );
+				}
+			}
+			catch( Exception e )
+			{
+				Log.e( TAG, e.toString(), e );
+			}
+		}
+	}
+
+	public void stopCameraPreview()
+	{
+		if( mCamera != null )
+		{
+			try
+			{
+				mPreviewing = false;
+				mCamera.cancelAutoFocus();
+				mCamera.setOneShotPreviewCallback( null );
+				mCamera.stopPreview();
+			}
+			catch( Exception e )
+			{
+				Log.e( TAG, e.toString(), e );
+			}
+		}
+	}
+
+	public void setupCameraParameters()
+	{
+		Camera.Size optimalSize = getOptimalPreviewSize();
+		Camera.Parameters parameters = mCamera.getParameters();
+		parameters.setPreviewSize( optimalSize.width, optimalSize.height );
+		mCamera.setParameters( parameters );
+	}
+
+	public int getDisplayOrientation()
+	{
+		Camera.CameraInfo info = new Camera.CameraInfo();
+		Camera.getCameraInfo( Camera.CameraInfo.CAMERA_FACING_BACK, info );
+		WindowManager wm = (WindowManager) getContext().getSystemService( Context.WINDOW_SERVICE );
+		Display display = wm.getDefaultDisplay();
+
+		int rotation = display.getRotation();
+		int degrees = 0;
+		switch( rotation )
+		{
+			case Surface.ROTATION_0:
+				degrees = 0;
+				break;
+			case Surface.ROTATION_90:
+				degrees = 90;
+				break;
+			case Surface.ROTATION_180:
+				degrees = 180;
+				break;
+			case Surface.ROTATION_270:
+				degrees = 270;
+				break;
+		}
+
+		int result;
+		if( info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT )
+		{
+			result = ( info.orientation + degrees ) % 360;
+			result = ( 360 - result ) % 360;  // compensate the mirror
+		}
+		else
+		{  // back-facing
+			result = ( info.orientation - degrees + 360 ) % 360;
+		}
+		return result;
+	}
+
+	private Camera.Size getOptimalPreviewSize()
+	{
+		if( mCamera == null )
+		{
+			return null;
+		}
+
+		List<Camera.Size> sizes = mCamera.getParameters().getSupportedPreviewSizes();
+		Point screenResolution = DisplayUtils.getScreenResolution( getContext() );
+		int w = screenResolution.x;
+		int h = screenResolution.y;
+		if( DisplayUtils.getScreenOrientation( getContext() ) == Configuration.ORIENTATION_PORTRAIT )
+		{
+			w = screenResolution.y;
+			h = screenResolution.x;
+		}
+
+		final double ASPECT_TOLERANCE = 0.1;
+		double targetRatio = (double) w / h;
+		if( sizes == null )
+			return null;
+
+		Camera.Size optimalSize = null;
+		double minDiff = Double.MAX_VALUE;
+
+		int targetHeight = h;
+
+		// Try to find an size match aspect ratio and size
+		for( Camera.Size size : sizes )
+		{
+			double ratio = (double) size.width / size.height;
+			if( Math.abs( ratio - targetRatio ) > ASPECT_TOLERANCE )
+				continue;
+			if( Math.abs( size.height - targetHeight ) < minDiff )
+			{
+				optimalSize = size;
+				minDiff = Math.abs( size.height - targetHeight );
+			}
+		}
+
+		// Cannot find the one match the aspect ratio, ignore the requirement
+		if( optimalSize == null )
+		{
+			minDiff = Double.MAX_VALUE;
+			for( Camera.Size size : sizes )
+			{
+				if( Math.abs( size.height - targetHeight ) < minDiff )
+				{
+					optimalSize = size;
+					minDiff = Math.abs( size.height - targetHeight );
+				}
+			}
+		}
+		return optimalSize;
+	}
+
+	public void setAutoFocus( boolean state )
+	{
+		if( mCamera != null && mPreviewing )
+		{
+			if( state == mAutoFocus )
+			{
+				return;
+			}
+			mAutoFocus = state;
+			if( mAutoFocus )
+			{
+				Log.v( TAG, "Starting autofocus" );
+				mCamera.autoFocus( autoFocusCB );
+			}
+			else
+			{
+				Log.v( TAG, "Cancelling autofocus" );
+				mCamera.cancelAutoFocus();
+			}
+		}
+	}
+
+	private Runnable doAutoFocus = new Runnable()
+	{
+		public void run()
+		{
+			if( mCamera != null && mPreviewing && mAutoFocus && mSurfaceCreated )
+			{
+				mCamera.autoFocus( autoFocusCB );
+			}
+		}
+	};
+
+	// Mimic continuous auto-focusing
+	Camera.AutoFocusCallback autoFocusCB = new Camera.AutoFocusCallback()
+	{
+		public void onAutoFocus( boolean success, Camera camera )
+		{
+			mAutoFocusHandler.postDelayed( doAutoFocus, 1000 );
+		}
+	};
 }
\ No newline at end of file
diff --git a/src/main/java/com/taig/android/barcode/scanner/CameraUtils.java b/src/main/java/com/taig/android/barcode/scanner/CameraUtils.java
index 1c2c289..c767138 100644
--- a/src/main/java/com/taig/android/barcode/scanner/CameraUtils.java
+++ b/src/main/java/com/taig/android/barcode/scanner/CameraUtils.java
@@ -4,36 +4,48 @@
 
 import java.util.List;
 
-public class CameraUtils {
-    /** A safe way to get an instance of the Camera object. */
-    public static Camera getCameraInstance() {
-        Camera c = null;
-        try {
-            c = Camera.open(); // attempt to get a Camera instance
-        }
-        catch (Exception e) {
-            // Camera is not available (in use or does not exist)
-        }
-        return c; // returns null if camera is unavailable
-    }
+public class CameraUtils
+{
+	/**
+	 * A safe way to get an instance of the Camera object.
+	 */
+	public static Camera getCameraInstance()
+	{
+		Camera c = null;
+		try
+		{
+			c = Camera.open(); // attempt to get a Camera instance
+		}
+		catch( Exception e )
+		{
+			// Camera is not available (in use or does not exist)
+		}
+		return c; // returns null if camera is unavailable
+	}
 
-    public static boolean isFlashSupported(Camera camera) {
-        /* Credits: Top answer at http://stackoverflow.com/a/19599365/868173 */
-        if (camera != null) {
-            Camera.Parameters parameters = camera.getParameters();
+	public static boolean isFlashSupported( Camera camera )
+	{
+		/* Credits: Top answer at http://stackoverflow.com/a/19599365/868173 */
+		if( camera != null )
+		{
+			Camera.Parameters parameters = camera.getParameters();
 
-            if (parameters.getFlashMode() == null) {
-                return false;
-            }
+			if( parameters.getFlashMode() == null )
+			{
+				return false;
+			}
 
-            List<String> supportedFlashModes = parameters.getSupportedFlashModes();
-            if (supportedFlashModes == null || supportedFlashModes.isEmpty() || supportedFlashModes.size() == 1 && supportedFlashModes.get(0).equals(Camera.Parameters.FLASH_MODE_OFF)) {
-                return false;
-            }
-        } else {
-            return false;
-        }
+			List<String> supportedFlashModes = parameters.getSupportedFlashModes();
+			if( supportedFlashModes == null || supportedFlashModes.isEmpty() || supportedFlashModes.size() == 1 && supportedFlashModes.get( 0 ).equals( Camera.Parameters.FLASH_MODE_OFF ) )
+			{
+				return false;
+			}
+		}
+		else
+		{
+			return false;
+		}
 
-        return true;
-    }
+		return true;
+	}
 }
diff --git a/src/main/java/com/taig/android/barcode/scanner/DisplayUtils.java b/src/main/java/com/taig/android/barcode/scanner/DisplayUtils.java
index eec74a1..96cfba1 100644
--- a/src/main/java/com/taig/android/barcode/scanner/DisplayUtils.java
+++ b/src/main/java/com/taig/android/barcode/scanner/DisplayUtils.java
@@ -6,36 +6,46 @@
 import android.view.Display;
 import android.view.WindowManager;
 
-public class DisplayUtils {
-    public static Point getScreenResolution(Context context) {
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-        Point screenResolution = new Point();
-        if (android.os.Build.VERSION.SDK_INT >= 13) {
-            display.getSize(screenResolution);
-        } else {
-            screenResolution.set(display.getWidth(), display.getHeight());
-        }
+public class DisplayUtils
+{
+	public static Point getScreenResolution( Context context )
+	{
+		WindowManager wm = (WindowManager) context.getSystemService( Context.WINDOW_SERVICE );
+		Display display = wm.getDefaultDisplay();
+		Point screenResolution = new Point();
+		if( android.os.Build.VERSION.SDK_INT >= 13 )
+		{
+			display.getSize( screenResolution );
+		}
+		else
+		{
+			screenResolution.set( display.getWidth(), display.getHeight() );
+		}
 
-        return screenResolution;
-    }
+		return screenResolution;
+	}
 
-    public static int getScreenOrientation(Context context)
-    {
-        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
-        Display display = wm.getDefaultDisplay();
-
-        int orientation = Configuration.ORIENTATION_UNDEFINED;
-        if(display.getWidth()==display.getHeight()){
-            orientation = Configuration.ORIENTATION_SQUARE;
-        } else{
-            if(display.getWidth() < display.getHeight()){
-                orientation = Configuration.ORIENTATION_PORTRAIT;
-            }else {
-                orientation = Configuration.ORIENTATION_LANDSCAPE;
-            }
-        }
-        return orientation;
-    }
+	public static int getScreenOrientation( Context context )
+	{
+		WindowManager wm = (WindowManager) context.getSystemService( Context.WINDOW_SERVICE );
+		Display display = wm.getDefaultDisplay();
 
+		int orientation = Configuration.ORIENTATION_UNDEFINED;
+		if( display.getWidth() == display.getHeight() )
+		{
+			orientation = Configuration.ORIENTATION_SQUARE;
+		}
+		else
+		{
+			if( display.getWidth() < display.getHeight() )
+			{
+				orientation = Configuration.ORIENTATION_PORTRAIT;
+			}
+			else
+			{
+				orientation = Configuration.ORIENTATION_LANDSCAPE;
+			}
+		}
+		return orientation;
+	}
 }
diff --git a/src/main/java/com/taig/android/barcode/scanner/ViewFinderView.java b/src/main/java/com/taig/android/barcode/scanner/ViewFinderView.java
index 02cba9e..53fb7bb 100644
--- a/src/main/java/com/taig/android/barcode/scanner/ViewFinderView.java
+++ b/src/main/java/com/taig/android/barcode/scanner/ViewFinderView.java
@@ -10,146 +10,164 @@
 import android.util.AttributeSet;
 import android.view.View;
 
-public class ViewFinderView extends View {
-    private static final String TAG = "ViewFinderView";
-
-    private Rect mFramingRect;
-
-    private static final int MIN_FRAME_WIDTH = 240;
-    private static final int MIN_FRAME_HEIGHT = 240;
-
-    private static final float LANDSCAPE_WIDTH_RATIO = 5f/8;
-    private static final float LANDSCAPE_HEIGHT_RATIO = 5f/8;
-    private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) (1920 * LANDSCAPE_WIDTH_RATIO); // = 5/8 * 1920
-    private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) (1080 * LANDSCAPE_HEIGHT_RATIO); // = 5/8 * 1080
-
-    private static final float PORTRAIT_WIDTH_RATIO = 7f/8;
-    private static final float PORTRAIT_HEIGHT_RATIO = 3f/8;
-    private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) (1080 * PORTRAIT_WIDTH_RATIO); // = 7/8 * 1080
-    private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) (1920 * PORTRAIT_HEIGHT_RATIO); // = 3/8 * 1920
-
-    private static final int[] SCANNER_ALPHA = {0, 64, 128, 192, 255, 192, 128, 64};
-    private int scannerAlpha;
-    private static final int POINT_SIZE = 10;
-    private static final long ANIMATION_DELAY = 80l;
-
-    public ViewFinderView(Context context) {
-        super(context);
-    }
-
-    public ViewFinderView(Context context, AttributeSet attrs) {
-        super(context, attrs);
-    }
-
-    public void setupViewFinder() {
-        updateFramingRect();
-        invalidate();
-    }
-
-    public Rect getFramingRect() {
-        return mFramingRect;
-    }
-
-    @Override
-    public void onDraw(Canvas canvas) {
-        if(mFramingRect == null) {
-            return;
-        }
-
-        drawViewFinderMask(canvas);
-        drawViewFinderBorder(canvas);
-        drawLaser(canvas);
-    }
-
-    public void drawViewFinderMask(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_mask));
-
-        int width = canvas.getWidth();
-        int height = canvas.getHeight();
-
-        canvas.drawRect(0, 0, width, mFramingRect.top, paint);
-        canvas.drawRect(0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint);
-        canvas.drawRect(0, mFramingRect.bottom + 1, width, height, paint);
-    }
-
-    public void drawViewFinderBorder(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        paint.setColor(resources.getColor(R.color.viewfinder_border));
-        paint.setStyle(Paint.Style.STROKE);
-        paint.setStrokeWidth(resources.getInteger(R.integer.viewfinder_border_width));
-        int lineLength = resources.getInteger(R.integer.viewfinder_border_length);
-
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint);
-
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint);
-
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint);
-
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint);
-        canvas.drawLine(mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint);
-    }
-
-    public void drawLaser(Canvas canvas) {
-        Paint paint = new Paint();
-        Resources resources = getResources();
-        // Draw a red "laser scanner" line through the middle to show decoding is active
-        paint.setColor(resources.getColor(R.color.viewfinder_laser));
-        paint.setAlpha(SCANNER_ALPHA[scannerAlpha]);
-        paint.setStyle(Paint.Style.FILL);
-        scannerAlpha = (scannerAlpha + 1) % SCANNER_ALPHA.length;
-        int middle = mFramingRect.height() / 2 + mFramingRect.top;
-        canvas.drawRect(mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, paint);
-
-        postInvalidateDelayed(ANIMATION_DELAY,
-                mFramingRect.left - POINT_SIZE,
-                mFramingRect.top - POINT_SIZE,
-                mFramingRect.right + POINT_SIZE,
-                mFramingRect.bottom + POINT_SIZE);
-    }
-
-    @Override
-    protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
-        updateFramingRect();
-    }
-
-    public synchronized void updateFramingRect() {
-        Point viewResolution = new Point(getWidth(), getHeight());
-        if (viewResolution == null) {
-            return;
-        }
-        int width;
-        int height;
-        int orientation = DisplayUtils.getScreenOrientation(getContext());
-
-        if(orientation != Configuration.ORIENTATION_PORTRAIT) {
-            width = findDesiredDimensionInRange(LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT);
-        } else {
-            width = findDesiredDimensionInRange(PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH);
-            height = findDesiredDimensionInRange(PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT);
-        }
-
-        int leftOffset = (viewResolution.x - width) / 2;
-        int topOffset = (viewResolution.y - height) / 2;
-        mFramingRect = new Rect(leftOffset, topOffset, leftOffset + width, topOffset + height);
-    }
-
-    private static int findDesiredDimensionInRange(float ratio, int resolution, int hardMin, int hardMax) {
-        int dim = (int) (ratio * resolution);
-        if (dim < hardMin) {
-            return hardMin;
-        }
-        if (dim > hardMax) {
-            return hardMax;
-        }
-        return dim;
-    }
-
+public class ViewFinderView extends View
+{
+	private static final String TAG = "ViewFinderView";
+
+	private Rect mFramingRect;
+
+	private static final int MIN_FRAME_WIDTH = 240;
+	private static final int MIN_FRAME_HEIGHT = 240;
+
+	private static final float LANDSCAPE_WIDTH_RATIO = 5f / 8;
+	private static final float LANDSCAPE_HEIGHT_RATIO = 5f / 8;
+	private static final int LANDSCAPE_MAX_FRAME_WIDTH = (int) ( 1920 * LANDSCAPE_WIDTH_RATIO ); // = 5/8 * 1920
+	private static final int LANDSCAPE_MAX_FRAME_HEIGHT = (int) ( 1080 * LANDSCAPE_HEIGHT_RATIO ); // = 5/8 * 1080
+
+	private static final float PORTRAIT_WIDTH_RATIO = 7f / 8;
+	private static final float PORTRAIT_HEIGHT_RATIO = 3f / 8;
+	private static final int PORTRAIT_MAX_FRAME_WIDTH = (int) ( 1080 * PORTRAIT_WIDTH_RATIO ); // = 7/8 * 1080
+	private static final int PORTRAIT_MAX_FRAME_HEIGHT = (int) ( 1920 * PORTRAIT_HEIGHT_RATIO ); // = 3/8 * 1920
+
+	private static final int[] SCANNER_ALPHA = { 0, 64, 128, 192, 255, 192, 128, 64 };
+	private int scannerAlpha;
+	private static final int POINT_SIZE = 10;
+	private static final long ANIMATION_DELAY = 80l;
+
+	public ViewFinderView( Context context )
+	{
+		super( context );
+	}
+
+	public ViewFinderView( Context context, AttributeSet attrs )
+	{
+		super( context, attrs );
+	}
+
+	public void setupViewFinder()
+	{
+		updateFramingRect();
+		invalidate();
+	}
+
+	public Rect getFramingRect()
+	{
+		return mFramingRect;
+	}
+
+	@Override
+	public void onDraw( Canvas canvas )
+	{
+		if( mFramingRect == null )
+		{
+			return;
+		}
+
+		drawViewFinderMask( canvas );
+		drawViewFinderBorder( canvas );
+		drawLaser( canvas );
+	}
+
+	public void drawViewFinderMask( Canvas canvas )
+	{
+		Paint paint = new Paint();
+		Resources resources = getResources();
+		paint.setColor( resources.getColor( R.color.viewfinder_mask ) );
+
+		int width = canvas.getWidth();
+		int height = canvas.getHeight();
+
+		canvas.drawRect( 0, 0, width, mFramingRect.top, paint );
+		canvas.drawRect( 0, mFramingRect.top, mFramingRect.left, mFramingRect.bottom + 1, paint );
+		canvas.drawRect( mFramingRect.right + 1, mFramingRect.top, width, mFramingRect.bottom + 1, paint );
+		canvas.drawRect( 0, mFramingRect.bottom + 1, width, height, paint );
+	}
+
+	public void drawViewFinderBorder( Canvas canvas )
+	{
+		Paint paint = new Paint();
+		Resources resources = getResources();
+		paint.setColor( resources.getColor( R.color.viewfinder_border ) );
+		paint.setStyle( Paint.Style.STROKE );
+		paint.setStrokeWidth( resources.getInteger( R.integer.viewfinder_border_width ) );
+		int lineLength = resources.getInteger( R.integer.viewfinder_border_length );
+
+		canvas.drawLine( mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1, mFramingRect.top - 1 + lineLength, paint );
+		canvas.drawLine( mFramingRect.left - 1, mFramingRect.top - 1, mFramingRect.left - 1 + lineLength, mFramingRect.top - 1, paint );
+
+		canvas.drawLine( mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1, mFramingRect.bottom + 1 - lineLength, paint );
+		canvas.drawLine( mFramingRect.left - 1, mFramingRect.bottom + 1, mFramingRect.left - 1 + lineLength, mFramingRect.bottom + 1, paint );
+
+		canvas.drawLine( mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1, mFramingRect.top - 1 + lineLength, paint );
+		canvas.drawLine( mFramingRect.right + 1, mFramingRect.top - 1, mFramingRect.right + 1 - lineLength, mFramingRect.top - 1, paint );
+
+		canvas.drawLine( mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1, mFramingRect.bottom + 1 - lineLength, paint );
+		canvas.drawLine( mFramingRect.right + 1, mFramingRect.bottom + 1, mFramingRect.right + 1 - lineLength, mFramingRect.bottom + 1, paint );
+	}
+
+	public void drawLaser( Canvas canvas )
+	{
+		Paint paint = new Paint();
+		Resources resources = getResources();
+		// Draw a red "laser scanner" line through the middle to show decoding is active
+		paint.setColor( resources.getColor( R.color.viewfinder_laser ) );
+		paint.setAlpha( SCANNER_ALPHA[scannerAlpha] );
+		paint.setStyle( Paint.Style.FILL );
+		scannerAlpha = ( scannerAlpha + 1 ) % SCANNER_ALPHA.length;
+		int middle = mFramingRect.height() / 2 + mFramingRect.top;
+		canvas.drawRect( mFramingRect.left + 2, middle - 1, mFramingRect.right - 1, middle + 2, paint );
+
+		postInvalidateDelayed( ANIMATION_DELAY,
+			mFramingRect.left - POINT_SIZE,
+			mFramingRect.top - POINT_SIZE,
+			mFramingRect.right + POINT_SIZE,
+			mFramingRect.bottom + POINT_SIZE );
+	}
+
+	@Override
+	protected void onSizeChanged( int xNew, int yNew, int xOld, int yOld )
+	{
+		updateFramingRect();
+	}
+
+	public synchronized void updateFramingRect()
+	{
+		Point viewResolution = new Point( getWidth(), getHeight() );
+		if( viewResolution == null )
+		{
+			return;
+		}
+		int width;
+		int height;
+		int orientation = DisplayUtils.getScreenOrientation( getContext() );
+
+		if( orientation != Configuration.ORIENTATION_PORTRAIT )
+		{
+			width = findDesiredDimensionInRange( LANDSCAPE_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, LANDSCAPE_MAX_FRAME_WIDTH );
+			height = findDesiredDimensionInRange( LANDSCAPE_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, LANDSCAPE_MAX_FRAME_HEIGHT );
+		}
+		else
+		{
+			width = findDesiredDimensionInRange( PORTRAIT_WIDTH_RATIO, viewResolution.x, MIN_FRAME_WIDTH, PORTRAIT_MAX_FRAME_WIDTH );
+			height = findDesiredDimensionInRange( PORTRAIT_HEIGHT_RATIO, viewResolution.y, MIN_FRAME_HEIGHT, PORTRAIT_MAX_FRAME_HEIGHT );
+		}
+
+		int leftOffset = ( viewResolution.x - width ) / 2;
+		int topOffset = ( viewResolution.y - height ) / 2;
+		mFramingRect = new Rect( leftOffset, topOffset, leftOffset + width, topOffset + height );
+	}
+
+	private static int findDesiredDimensionInRange( float ratio, int resolution, int hardMin, int hardMax )
+	{
+		int dim = (int) ( ratio * resolution );
+		if( dim < hardMin )
+		{
+			return hardMin;
+		}
+		if( dim > hardMax )
+		{
+			return hardMax;
+		}
+		return dim;
+	}
 }
diff --git a/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java b/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java
index 578e460..d5d4d39 100644
--- a/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java
+++ b/src/main/java/com/taig/android/barcode/scanner/ZXingScannerView.java
@@ -24,126 +24,158 @@
 import me.dm7.barcodescanner.core.BarcodeScannerView;
 import me.dm7.barcodescanner.core.DisplayUtils;
 
-public class ZXingScannerView extends BarcodeScannerView {
-    public interface ResultHandler {
-        public void handleResult(Result rawResult);
-    }
-
-    private MultiFormatReader mMultiFormatReader;
-    public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
-    private List<BarcodeFormat> mFormats;
-    private ResultHandler mResultHandler;
-
-    static {
-        ALL_FORMATS.add(BarcodeFormat.UPC_A);
-        ALL_FORMATS.add(BarcodeFormat.UPC_E);
-        ALL_FORMATS.add(BarcodeFormat.EAN_13);
-        ALL_FORMATS.add(BarcodeFormat.EAN_8);
-        ALL_FORMATS.add(BarcodeFormat.RSS_14);
-        ALL_FORMATS.add(BarcodeFormat.CODE_39);
-        ALL_FORMATS.add(BarcodeFormat.CODE_93);
-        ALL_FORMATS.add(BarcodeFormat.CODE_128);
-        ALL_FORMATS.add(BarcodeFormat.ITF);
-        ALL_FORMATS.add(BarcodeFormat.CODABAR);
-        ALL_FORMATS.add(BarcodeFormat.QR_CODE);
-        ALL_FORMATS.add(BarcodeFormat.DATA_MATRIX);
-        ALL_FORMATS.add(BarcodeFormat.PDF_417);
-    }
-
-    public ZXingScannerView(Context context) {
-        super(context);
-        initMultiFormatReader();
-    }
-
-    public ZXingScannerView(Context context, AttributeSet attributeSet) {
-        super(context, attributeSet);
-        initMultiFormatReader();
-    }
-
-    public void setFormats(List<BarcodeFormat> formats) {
-        mFormats = formats;
-        initMultiFormatReader();
-    }
-
-    public void setResultHandler(ResultHandler resultHandler) {
-        mResultHandler = resultHandler;
-    }
-
-    public Collection<BarcodeFormat> getFormats() {
-        if(mFormats == null) {
-            return ALL_FORMATS;
-        }
-        return mFormats;
-    }
-
-    private void initMultiFormatReader() {
-        Map<DecodeHintType,Object> hints = new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
-        hints.put(DecodeHintType.POSSIBLE_FORMATS, getFormats());
-        mMultiFormatReader = new MultiFormatReader();
-        mMultiFormatReader.setHints(hints);
-    }
-
-    @Override
-    public void onPreviewFrame(byte[] data, Camera camera) {
-        Camera.Parameters parameters = camera.getParameters();
-        Camera.Size size = parameters.getPreviewSize();
-        int width = size.width;
-        int height = size.height;
-
-        if(DisplayUtils.getScreenOrientation(getContext()) == Configuration.ORIENTATION_PORTRAIT) {
-            byte[] rotatedData = new byte[data.length];
-            for (int y = 0; y < height; y++) {
-                for (int x = 0; x < width; x++)
-                    rotatedData[x * height + height - y - 1] = data[x + y * width];
-            }
-            int tmp = width;
-            width = height;
-            height = tmp;
-            data = rotatedData;
-        }
-
-        Result rawResult = null;
-        PlanarYUVLuminanceSource source = buildLuminanceSource(data, width, height);
-
-        if(source != null) {
-            BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
-            try {
-                rawResult = mMultiFormatReader.decodeWithState(bitmap);
-            } catch (ReaderException re) {
-                // continue
-            } catch (NullPointerException npe) {
-                // This is terrible
-            } catch (ArrayIndexOutOfBoundsException aoe) {
-
-            } finally {
-                mMultiFormatReader.reset();
-            }
-        }
-
-        if (rawResult != null) {
-            stopCamera();
-            if(mResultHandler != null) {
-                mResultHandler.handleResult(rawResult);
-            }
-        } else {
-            camera.setOneShotPreviewCallback(this);
-        }
-    }
-
-    public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data, int width, int height) {
-        Rect rect = getFramingRectInPreview(width, height);
-        if (rect == null) {
-            return null;
-        }
-        // Go ahead and assume it's YUV rather than die.
-        PlanarYUVLuminanceSource source = null;
-
-        try {
-            source = new PlanarYUVLuminanceSource(data, width, height, rect.left, rect.top,
-                    rect.width(), rect.height(), false);
-        } catch(Exception e) {
-        }
-
-        return source;
-    }
+public class ZXingScannerView extends BarcodeScannerView
+{
+	public interface ResultHandler
+	{
+		public void handleResult( Result rawResult );
+	}
+
+	private MultiFormatReader mMultiFormatReader;
+	public static final List<BarcodeFormat> ALL_FORMATS = new ArrayList<BarcodeFormat>();
+	private List<BarcodeFormat> mFormats;
+	private ResultHandler mResultHandler;
+
+	static
+	{
+		ALL_FORMATS.add( BarcodeFormat.UPC_A );
+		ALL_FORMATS.add( BarcodeFormat.UPC_E );
+		ALL_FORMATS.add( BarcodeFormat.EAN_13 );
+		ALL_FORMATS.add( BarcodeFormat.EAN_8 );
+		ALL_FORMATS.add( BarcodeFormat.RSS_14 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_39 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_93 );
+		ALL_FORMATS.add( BarcodeFormat.CODE_128 );
+		ALL_FORMATS.add( BarcodeFormat.ITF );
+		ALL_FORMATS.add( BarcodeFormat.CODABAR );
+		ALL_FORMATS.add( BarcodeFormat.QR_CODE );
+		ALL_FORMATS.add( BarcodeFormat.DATA_MATRIX );
+		ALL_FORMATS.add( BarcodeFormat.PDF_417 );
+	}
+
+	public ZXingScannerView( Context context )
+	{
+		super( context );
+		initMultiFormatReader();
+	}
+
+	public ZXingScannerView( Context context, AttributeSet attributeSet )
+	{
+		super( context, attributeSet );
+		initMultiFormatReader();
+	}
+
+	public void setFormats( List<BarcodeFormat> formats )
+	{
+		mFormats = formats;
+		initMultiFormatReader();
+	}
+
+	public void setResultHandler( ResultHandler resultHandler )
+	{
+		mResultHandler = resultHandler;
+	}
+
+	public Collection<BarcodeFormat> getFormats()
+	{
+		if( mFormats == null )
+		{
+			return ALL_FORMATS;
+		}
+		return mFormats;
+	}
+
+	private void initMultiFormatReader()
+	{
+		Map<DecodeHintType, Object> hints = new EnumMap<DecodeHintType, Object>( DecodeHintType.class );
+		hints.put( DecodeHintType.POSSIBLE_FORMATS, getFormats() );
+		mMultiFormatReader = new MultiFormatReader();
+		mMultiFormatReader.setHints( hints );
+	}
+
+	@Override
+	public void onPreviewFrame( byte[] data, Camera camera )
+	{
+		Camera.Parameters parameters = camera.getParameters();
+		Camera.Size size = parameters.getPreviewSize();
+		int width = size.width;
+		int height = size.height;
+
+		if( DisplayUtils.getScreenOrientation( getContext() ) == Configuration.ORIENTATION_PORTRAIT )
+		{
+			byte[] rotatedData = new byte[data.length];
+			for( int y = 0; y < height; y++ )
+			{
+				for( int x = 0; x < width; x++ )
+					rotatedData[x * height + height - y - 1] = data[x + y * width];
+			}
+			int tmp = width;
+			width = height;
+			height = tmp;
+			data = rotatedData;
+		}
+
+		Result rawResult = null;
+		PlanarYUVLuminanceSource source = buildLuminanceSource( data, width, height );
+
+		if( source != null )
+		{
+			BinaryBitmap bitmap = new BinaryBitmap( new HybridBinarizer( source ) );
+			try
+			{
+				rawResult = mMultiFormatReader.decodeWithState( bitmap );
+			}
+			catch( ReaderException re )
+			{
+				// continue
+			}
+			catch( NullPointerException npe )
+			{
+				// This is terrible
+			}
+			catch( ArrayIndexOutOfBoundsException aoe )
+			{
+
+			}
+			finally
+			{
+				mMultiFormatReader.reset();
+			}
+		}
+
+		if( rawResult != null )
+		{
+			stopCamera();
+			if( mResultHandler != null )
+			{
+				mResultHandler.handleResult( rawResult );
+			}
+		}
+		else
+		{
+			camera.setOneShotPreviewCallback( this );
+		}
+	}
+
+	public PlanarYUVLuminanceSource buildLuminanceSource( byte[] data, int width, int height )
+	{
+		Rect rect = getFramingRectInPreview( width, height );
+		if( rect == null )
+		{
+			return null;
+		}
+		// Go ahead and assume it's YUV rather than die.
+		PlanarYUVLuminanceSource source = null;
+
+		try
+		{
+			source = new PlanarYUVLuminanceSource( data, width, height, rect.left, rect.top,
+				rect.width(), rect.height(), false );
+		}
+		catch( Exception e )
+		{
+		}
+
+		return source;
+	}
 }
\ No newline at end of file
