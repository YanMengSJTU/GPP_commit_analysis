diff --git a/library/src/com/evernote/client/android/AsyncLinkedNoteStoreClient.java b/library/src/com/evernote/client/android/AsyncLinkedNoteStoreClient.java
index 3d16058..a764980 100644
--- a/library/src/com/evernote/client/android/AsyncLinkedNoteStoreClient.java
+++ b/library/src/com/evernote/client/android/AsyncLinkedNoteStoreClient.java
@@ -28,6 +28,9 @@
 import com.evernote.edam.error.EDAMNotFoundException;
 import com.evernote.edam.error.EDAMSystemException;
 import com.evernote.edam.error.EDAMUserException;
+import com.evernote.edam.notestore.NoteFilter;
+import com.evernote.edam.notestore.NotesMetadataList;
+import com.evernote.edam.notestore.NotesMetadataResultSpec;
 import com.evernote.edam.type.LinkedNotebook;
 import com.evernote.edam.type.Note;
 import com.evernote.edam.type.Notebook;
@@ -118,7 +121,6 @@ public void createNoteAsync(final Note note, final LinkedNotebook linkedNotebook
    *
    */
   public Note createNote(Note note, LinkedNotebook linkedNotebook) throws EDAMUserException, EDAMSystemException, TException, EDAMNotFoundException {
-
     SharedNotebook sharedNotebook = getAsyncClient().getClient().getSharedNotebookByAuth(getAuthenticationToken());
     note.setNotebookGuid(sharedNotebook.getNotebookGuid());
     return getAsyncClient().getClient().createNote(getAuthenticationToken(), note);
@@ -250,4 +252,33 @@ public boolean isNotebookWritable(LinkedNotebook linkedNotebook) throws EDAMUser
     Notebook notebook = getCorrespondingNotebook(linkedNotebook);
     return !notebook.getRestrictions().isNoCreateNotes();
   }
+
+  /**
+   * Helper method to find notes in a linked notebook asynchronously
+   *
+   * @see {@link com.evernote.edam.notestore.NoteStore.Client#findNotesMetadata(String, com.evernote.edam.notestore.NoteFilter, int, int, com.evernote.edam.notestore.NotesMetadataResultSpec)}
+   *
+   */
+
+  public void findNotesMetadataAsync(NoteFilter filter,
+                                      int offset,
+                                      int maxNotes,
+                                      NotesMetadataResultSpec resultSpec,
+                                      OnClientCallback<NotesMetadataList> callback) {
+    AsyncReflector.execute(this, callback, "findNotesMetadata", filter, offset, maxNotes, resultSpec);
+  }
+
+  /**
+   * Helper method to find notes in a linked notebook
+   *
+   * @see {@link com.evernote.edam.notestore.NoteStore.Client#findNotesMetadata(String, com.evernote.edam.notestore.NoteFilter, int, int, com.evernote.edam.notestore.NotesMetadataResultSpec)}
+   *
+   */
+  public NotesMetadataList findNotesMetadata(NoteFilter filter,
+                                             int offset,
+                                             int maxNotes,
+                                             NotesMetadataResultSpec resultSpec) throws EDAMUserException, EDAMSystemException, EDAMNotFoundException, TException {
+    return getAsyncClient().getClient().findNotesMetadata(getAuthenticationToken(), filter, offset, maxNotes, resultSpec);
+  }
+
 }
diff --git a/library/src/com/evernote/client/android/AuthenticationResult.java b/library/src/com/evernote/client/android/AuthenticationResult.java
index 412cfd3..c40e5ff 100644
--- a/library/src/com/evernote/client/android/AuthenticationResult.java
+++ b/library/src/com/evernote/client/android/AuthenticationResult.java
@@ -37,7 +37,7 @@
  */
 public class AuthenticationResult {
 
-  private static final String LOGTAG = "AuthenticatonResult";
+  private static final String LOGTAG = "AuthenticationResult";
 
   private String mAuthToken;
   private String mNoteStoreUrl;
@@ -45,6 +45,8 @@
   private String mEvernoteHost;
   private int mUserId;
 
+  private boolean mAppLinkedNotebook;
+
   private String mBusinessNoteStoreUrl;
   private String mBusinessAuthToken;
   private long mBusinessAuthTokenExpiration;
@@ -63,15 +65,18 @@ public AuthenticationResult(SharedPreferences pref) {
    * @param webApiUrlPrefix The URL of misc. Evernote web APIs for the authenticated user.
    * @param evernoteHost the Evernote Web URL provided from the bootstrap process
    * @param userId The numeric ID of the Evernote user.
+   * @param appLinkedNotebook whether this account can only access a single notebook which is
+   *                              a linked notebook
    *
    */
 
-  public AuthenticationResult(String authToken, String noteStoreUrl, String webApiUrlPrefix, String evernoteHost, int userId) {
+  public AuthenticationResult(String authToken, String noteStoreUrl, String webApiUrlPrefix, String evernoteHost, int userId, boolean appLinkedNotebook) {
     this.mAuthToken = authToken;
     this.mNoteStoreUrl = noteStoreUrl;
     this.mWebApiUrlPrefix = webApiUrlPrefix;
     this.mEvernoteHost = evernoteHost;
     this.mUserId = userId;
+    this.mAppLinkedNotebook = appLinkedNotebook;
   }
 
   void persist(SharedPreferences pref) {
@@ -83,6 +88,7 @@ void persist(SharedPreferences pref) {
     editor.putString(SessionPreferences.KEY_WEBAPIURLPREFIX, mWebApiUrlPrefix);
     editor.putString(SessionPreferences.KEY_EVERNOTEHOST, mEvernoteHost);
     editor.putInt(SessionPreferences.KEY_USERID, mUserId);
+    editor.putBoolean(SessionPreferences.KEY_APPLINKEDNOTEBOOK, mAppLinkedNotebook);
 
     SessionPreferences.save(editor);
   }
@@ -94,6 +100,7 @@ void restore(SharedPreferences pref) {
     mWebApiUrlPrefix = pref.getString(SessionPreferences.KEY_WEBAPIURLPREFIX, null);
     mEvernoteHost = pref.getString(SessionPreferences.KEY_EVERNOTEHOST, null);
     mUserId = pref.getInt(SessionPreferences.KEY_USERID, -1);
+    mAppLinkedNotebook = pref.getBoolean(SessionPreferences.KEY_APPLINKEDNOTEBOOK, false);
   }
 
   void clear(SharedPreferences pref) {
@@ -105,6 +112,7 @@ void clear(SharedPreferences pref) {
     editor.remove(SessionPreferences.KEY_WEBAPIURLPREFIX);
     editor.remove(SessionPreferences.KEY_EVERNOTEHOST);
     editor.remove(SessionPreferences.KEY_USERID);
+    editor.remove(SessionPreferences.KEY_APPLINKEDNOTEBOOK);
 
     SessionPreferences.save(editor);
   }
@@ -147,6 +155,13 @@ public int getUserId() {
     return mUserId;
   }
 
+  /**
+   * @return Indicates whether this account is limited to accessing a single notebook, and
+   * that notebook is a linked notebook
+   */
+  public boolean isAppLinkedNotebook() { return mAppLinkedNotebook; }
+
+
   /**
    * @return the URL that will be used to access the BusinessNoteStore service.
    */
diff --git a/library/src/com/evernote/client/android/EvernoteOAuthActivity.java b/library/src/com/evernote/client/android/EvernoteOAuthActivity.java
index 1e9f7c2..95ddc80 100644
--- a/library/src/com/evernote/client/android/EvernoteOAuthActivity.java
+++ b/library/src/com/evernote/client/android/EvernoteOAuthActivity.java
@@ -72,6 +72,7 @@
   static final String EXTRA_CONSUMER_SECRET = "CONSUMER_SECRET";
   static final String EXTRA_REQUEST_TOKEN = "REQUEST_TOKEN";
   static final String EXTRA_REQUEST_TOKEN_SECRET = "REQUEST_TOKEN_SECRET";
+  static final String EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS = "SUPPORT_APP_LINKED_NOTEBOOKS";
   static final String EXTRA_BOOTSTRAP_SELECTED_PROFILE_POS = "BOOTSTRAP_SELECTED_PROFILE_POS";
   static final String EXTRA_BOOTSTRAP_SELECTED_PROFILE = "BOOTSTRAP_SELECTED_PROFILE";
   static final String EXTRA_BOOTSTRAP_SELECTED_PROFILES = "BOOTSTRAP_SELECTED_PROFILES";
@@ -86,6 +87,7 @@
   private String mConsumerSecret = null;
   private String mRequestToken = null;
   private String mRequestTokenSecret = null;
+  private boolean mSupportAppLinkedNotebooks = false;
 
   private final int DIALOG_PROGRESS = 101;
 
@@ -148,6 +150,7 @@ public void onCreate(Bundle savedInstanceState) {
       mConsumerSecret = savedInstanceState.getString(EXTRA_CONSUMER_SECRET);
       mRequestToken = savedInstanceState.getString(EXTRA_REQUEST_TOKEN);
       mRequestTokenSecret = savedInstanceState.getString(EXTRA_REQUEST_TOKEN_SECRET);
+      mSupportAppLinkedNotebooks = savedInstanceState.getBoolean(EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS);
       mSelectedBootstrapProfile = (BootstrapProfile) savedInstanceState.getSerializable(EXTRA_BOOTSTRAP_SELECTED_PROFILE);
       mSelectedBootstrapProfilePos = savedInstanceState.getInt(EXTRA_BOOTSTRAP_SELECTED_PROFILE_POS);
       mBootstrapProfiles = (ArrayList<BootstrapProfile>) savedInstanceState.getSerializable(EXTRA_BOOTSTRAP_SELECTED_PROFILES);
@@ -158,6 +161,7 @@ public void onCreate(Bundle savedInstanceState) {
       mEvernoteService = intent.getParcelableExtra(EXTRA_EVERNOTE_SERVICE);
       mConsumerKey = intent.getStringExtra(EXTRA_CONSUMER_KEY);
       mConsumerSecret = intent.getStringExtra(EXTRA_CONSUMER_SECRET);
+      mSupportAppLinkedNotebooks = intent.getBooleanExtra(EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS, false);
     }
   }
 
@@ -185,6 +189,7 @@ protected void onSaveInstanceState(Bundle outState) {
     outState.putParcelable(EXTRA_EVERNOTE_SERVICE, mEvernoteService);
     outState.putString(EXTRA_CONSUMER_KEY, mConsumerKey);
     outState.putString(EXTRA_CONSUMER_SECRET, mConsumerSecret);
+    outState.putBoolean(EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS, mSupportAppLinkedNotebooks);
     outState.putString(EXTRA_REQUEST_TOKEN, mRequestToken);
     outState.putString(EXTRA_REQUEST_TOKEN_SECRET, mRequestTokenSecret);
     outState.putSerializable(EXTRA_BOOTSTRAP_SELECTED_PROFILE, mSelectedBootstrapProfile);
@@ -392,6 +397,9 @@ protected String doInBackground(Void... params) {
 
         Log.i(LOGTAG, "Redirecting user for authorization...");
         url = service.getAuthorizationUrl(reqToken);
+        if(mSupportAppLinkedNotebooks) {
+          url += "&supportLinkedSandbox=true";
+        }
       } catch(BootstrapManager.ClientUnsupportedException cue) {
 
         return null;
@@ -443,6 +451,10 @@ protected EvernoteAuthToken doInBackground(Uri... uris) {
       if (!TextUtils.isEmpty(mRequestToken)) {
         OAuthService service = createService();
         String verifierString = uri.getQueryParameter("oauth_verifier");
+        String appLnbString = uri.getQueryParameter("sandbox_lnb");
+        boolean isAppLinkedNotebook = appLnbString != null &&
+            appLnbString.equalsIgnoreCase("true");
+
         if (TextUtils.isEmpty(verifierString)) {
           Log.i(LOGTAG, "User did not authorize access");
         } else {
@@ -450,7 +462,9 @@ protected EvernoteAuthToken doInBackground(Uri... uris) {
           Log.i(LOGTAG, "Retrieving OAuth access token...");
           try {
             Token reqToken = new Token(mRequestToken, mRequestTokenSecret);
-            authToken = new EvernoteAuthToken(service.getAccessToken(reqToken, verifier));
+            authToken = new EvernoteAuthToken(service.getAccessToken(reqToken, verifier),
+                isAppLinkedNotebook);
+
           } catch (Exception ex) {
             Log.e(LOGTAG, "Failed to obtain OAuth access token", ex);
           }
diff --git a/library/src/com/evernote/client/android/EvernoteSession.java b/library/src/com/evernote/client/android/EvernoteSession.java
index 4980c02..41e724f 100644
--- a/library/src/com/evernote/client/android/EvernoteSession.java
+++ b/library/src/com/evernote/client/android/EvernoteSession.java
@@ -132,6 +132,7 @@ public EvernoteService createFromParcel(final Parcel source) {
   private BootstrapManager mBootstrapManager;
   private ClientFactory mClientFactory;
   private AuthenticationResult mAuthenticationResult;
+  private boolean mSupportAppLinkedNotebooks;
 
   /**
    * Use to acquire a singleton instance of the EvernoteSession for authentication.
@@ -144,6 +145,8 @@ public EvernoteService createFromParcel(final Parcel source) {
    * @param evernoteService The enum of the Evernote service instance that you wish
    * to use. Development and testing is typically performed against {@link EvernoteService#SANDBOX}.
    * The production Evernote service is {@link EvernoteService#HOST_PRODUCTION}.
+   * @param supportAppLinkedNotebooks true if you want to allow linked notebooks for
+   * applications which can only access a single notebook.
    *
    * @return The EvernoteSession singleton instance.
    * @throws IllegalArgumentException
@@ -151,9 +154,10 @@ public EvernoteService createFromParcel(final Parcel source) {
    public static EvernoteSession getInstance(Context ctx,
                                      String consumerKey,
                                      String consumerSecret,
-                                     EvernoteService evernoteService) throws IllegalArgumentException{
+                                     EvernoteService evernoteService,
+                                     boolean supportAppLinkedNotebooks) throws IllegalArgumentException{
     if (sInstance == null) {
-      sInstance = new EvernoteSession(ctx, consumerKey, consumerSecret, evernoteService);
+      sInstance = new EvernoteSession(ctx, consumerKey, consumerSecret, evernoteService, supportAppLinkedNotebooks);
     }
     return sInstance;
   }
@@ -164,7 +168,7 @@ public static EvernoteSession getInstance(Context ctx,
    * Used to access the initialized EvernoteSession singleton instance.
    *
    * @return The previously initialized EvernoteSession instance,
-   * or null if {@link #getInstance(android.content.Context, String, String, com.evernote.client.android.EvernoteSession.EvernoteService)}
+   * or null if {@link #getInstance(android.content.Context, String, String, com.evernote.client.android.EvernoteSession.EvernoteService, boolean)}
    * has not been called yet.
    */
   static EvernoteSession getOpenSession() {
@@ -178,7 +182,8 @@ static EvernoteSession getOpenSession() {
   private EvernoteSession(Context ctx,
                           String consumerKey,
                           String consumerSecret,
-                          EvernoteService evernoteService) throws IllegalArgumentException {
+                          EvernoteService evernoteService,
+                          boolean supportAppLinkedNotebooks) throws IllegalArgumentException {
 
     if( ctx == null ||
         TextUtils.isEmpty(consumerKey) ||
@@ -190,6 +195,7 @@ private EvernoteSession(Context ctx,
     mConsumerKey = consumerKey;
     mConsumerSecret = consumerSecret;
     mEvernoteService = evernoteService;
+    mSupportAppLinkedNotebooks = supportAppLinkedNotebooks;
     synchronized (this) {
       mAuthenticationResult = getAuthenticationResultFromPref(SessionPreferences.getPreferences(ctx));
     }
@@ -300,6 +306,7 @@ public void authenticate(Context ctx) {
     intent.putExtra(EvernoteOAuthActivity.EXTRA_EVERNOTE_SERVICE, (Parcelable) mEvernoteService);
     intent.putExtra(EvernoteOAuthActivity.EXTRA_CONSUMER_KEY, mConsumerKey);
     intent.putExtra(EvernoteOAuthActivity.EXTRA_CONSUMER_SECRET, mConsumerSecret);
+    intent.putExtra(EvernoteOAuthActivity.EXTRA_SUPPORT_APP_LINKED_NOTEBOOKS, mSupportAppLinkedNotebooks);
 
     if (ctx instanceof Activity) {
       //If this is being called from an activity, an activity can register for the result code
@@ -332,7 +339,8 @@ protected boolean persistAuthenticationToken(Context ctx, EvernoteAuthToken auth
               authToken.getNoteStoreUrl(),
               authToken.getWebApiUrlPrefix(),
               evernoteHost,
-              authToken.getUserId());
+              authToken.getUserId(),
+              authToken.isAppLinkedNotebook());
 
       mAuthenticationResult.persist(SessionPreferences.getPreferences(ctx));
     }
@@ -350,6 +358,10 @@ public boolean isLoggedIn() {
     }
   }
 
+  public boolean isAppLinkedNotebook() {
+    return mAuthenticationResult.isAppLinkedNotebook();
+  }
+
   /**
    * Clear all stored authentication information.
    */
diff --git a/library/src/com/evernote/client/android/SessionPreferences.java b/library/src/com/evernote/client/android/SessionPreferences.java
index e84acaf..7fd55e3 100644
--- a/library/src/com/evernote/client/android/SessionPreferences.java
+++ b/library/src/com/evernote/client/android/SessionPreferences.java
@@ -45,6 +45,7 @@
   static final String KEY_USERID = "evernote.userId";
   static final String KEY_EVERNOTEHOST = "evernote.mEvernoteHost";
   static final String KEY_BUSINESSID = "evernote.businessId";
+  static final String KEY_APPLINKEDNOTEBOOK = "evernote.appLinkedNotebook";
 
   static final String PREFERENCE_NAME = "evernote.preferences";
 
diff --git a/library/src/com/evernote/client/oauth/EvernoteAuthToken.java b/library/src/com/evernote/client/oauth/EvernoteAuthToken.java
index 724763c..b8701a8 100644
--- a/library/src/com/evernote/client/oauth/EvernoteAuthToken.java
+++ b/library/src/com/evernote/client/oauth/EvernoteAuthToken.java
@@ -47,14 +47,18 @@ of this software and associated documentation files (the "Software"), to deal
   private String mNoteStoreUrl;
   private String mWebApiUrlPrefix;
   private int mUserId;
+  private boolean mAppLinkedNotebook;
 
-  public EvernoteAuthToken(Token token) {
+
+  public EvernoteAuthToken(Token token, boolean appLinkedNotebook) {
     super(token.getToken(), token.getSecret(), token.getRawResponse());
     this.mNoteStoreUrl = extract(getRawResponse(), NOTESTORE_REGEX);
     this.mWebApiUrlPrefix = extract(getRawResponse(), WEBAPI_REGEX);
     this.mUserId = Integer.parseInt(extract(getRawResponse(), USERID_REGEX));
+    this.mAppLinkedNotebook = appLinkedNotebook;
   }
 
+
   private String extract(String response, Pattern p) {
     Matcher matcher = p.matcher(response);
     if (matcher.find() && matcher.groupCount() >= 1) {
@@ -86,4 +90,10 @@ public int getUserId() {
     return mUserId;
   }
 
+  /**
+   * Indicates whether this account is limited to accessing a single notebook, and
+   * that notebook is a linked notebook
+   */
+  public boolean isAppLinkedNotebook() { return mAppLinkedNotebook; }
+
 }
diff --git a/samples/HelloEDAM/res/values/strings.xml b/samples/HelloEDAM/res/values/strings.xml
index e9a236b..4c93bf5 100644
--- a/samples/HelloEDAM/res/values/strings.xml
+++ b/samples/HelloEDAM/res/values/strings.xml
@@ -33,4 +33,7 @@
     <string name="error_creating_notestore">Error creating notestore</string>
     <string name="error_saving_note">Error saving note</string>
     <string name="error_listing_notes">Error listing note</string>
+    <string name="CANNOT_GET_LINKED_NOTEBOOK">Cannot get linked notebook</string>
+    <string name="CANT_LIST_APP_LNB">Can\'t select notebook: account can only access one linked notebook</string>
+    <string name="ERROR_GETTING_LINKED_NOTEBOOK">Error getting linked notebook</string>
 </resources>
diff --git a/samples/HelloEDAM/src/com/evernote/android/sample/ImagePicker.java b/samples/HelloEDAM/src/com/evernote/android/sample/ImagePicker.java
index e89e5f5..73749ae 100644
--- a/samples/HelloEDAM/src/com/evernote/android/sample/ImagePicker.java
+++ b/samples/HelloEDAM/src/com/evernote/android/sample/ImagePicker.java
@@ -72,6 +72,22 @@
   // Activity result request codes
   private static final int SELECT_IMAGE = 1;
 
+  // Invoked once a note image has been created or it failed
+  private OnClientCallback<Note> mCreateImageCallback = new OnClientCallback<Note>() {
+    @Override
+    public void onSuccess(Note data) {
+      removeDialog(DIALOG_PROGRESS);
+      Toast.makeText(getApplicationContext(), R.string.msg_image_saved, Toast.LENGTH_LONG).show();
+    }
+
+    @Override
+    public void onException(Exception exception) {
+      Log.e(LOGTAG, "Error saving note", exception);
+      Toast.makeText(getApplicationContext(), R.string.error_saving_note, Toast.LENGTH_LONG).show();
+      removeDialog(DIALOG_PROGRESS);
+    }
+  };
+
   // The path to and MIME type of the currently selected image from the gallery
   private class ImageData {
     public Bitmap imageBitmap;
@@ -201,24 +217,15 @@ public void saveImage(View view) {
 
         note.setContent(content);
 
-        // Create the note on the server. The returned Note object
-        // will contain server-generated attributes such as the note's
-        // unique ID (GUID), the Resource's GUID, and the creation and update time.
-
-        mEvernoteSession.getClientFactory().createNoteStoreClient().createNote(note, new OnClientCallback<Note>() {
-          @Override
-          public void onSuccess(Note data) {
-            removeDialog(DIALOG_PROGRESS);
-            Toast.makeText(getApplicationContext(), R.string.msg_image_saved, Toast.LENGTH_LONG).show();
-          }
+        if(!mEvernoteSession.getAuthenticationResult().isAppLinkedNotebook()) {
+          // Create the note on the server. The returned Note object
+          // will contain server-generated attributes such as the note's
+          // unique ID (GUID), the Resource's GUID, and the creation and update time.
 
-          @Override
-          public void onException(Exception exception) {
-            Log.e(LOGTAG, "Error saving note", exception);
-            Toast.makeText(getApplicationContext(), R.string.error_saving_note, Toast.LENGTH_LONG).show();
-            removeDialog(DIALOG_PROGRESS);
-          }
-        });
+          mEvernoteSession.getClientFactory().createNoteStoreClient().createNote(note, mCreateImageCallback);
+        } else {
+          super.createNoteInAppLinkedNotebook(note, mCreateImageCallback);
+        }
       } catch (Exception ex) {
         Log.e(LOGTAG, "Error creating notestore", ex);
         Toast.makeText(getApplicationContext(), R.string.error_creating_notestore, Toast.LENGTH_LONG).show();
diff --git a/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java b/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java
index 3e6680a..a341dff 100644
--- a/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java
+++ b/samples/HelloEDAM/src/com/evernote/android/sample/ParentActivity.java
@@ -29,7 +29,18 @@
 import android.app.Dialog;
 import android.app.ProgressDialog;
 import android.os.Bundle;
+import android.util.Log;
+import android.util.Pair;
+import android.widget.Toast;
+
+import com.evernote.client.android.AsyncLinkedNoteStoreClient;
 import com.evernote.client.android.EvernoteSession;
+import com.evernote.client.android.OnClientCallback;
+import com.evernote.edam.type.LinkedNotebook;
+import com.evernote.edam.type.Note;
+import com.evernote.thrift.transport.TTransportException;
+
+import java.util.List;
 
 /**
  * This is the parent activity that all sample activites extend from. This creates the Evernote Session in onCreate
@@ -39,6 +50,9 @@
  */
 public class ParentActivity extends Activity {
 
+  private static final String LOGTAG = "ParentActivity";
+
+
   /**
    * ************************************************************************
    * You MUST change the following values to run this sample application.    *
@@ -50,12 +64,16 @@
   private static final String CONSUMER_KEY = "You consumer key";
   private static final String CONSUMER_SECRET = "Your consumer secret";
 
-  // Initial development is done on Evernote's testing service, the sandbox.
+    // Initial development is done on Evernote's testing service, the sandbox.
   // Change to HOST_PRODUCTION to use the Evernote production service
   // once your code is complete, or HOST_CHINA to use the Yinxiang Biji
   // (Evernote China) production service.
   private static final EvernoteSession.EvernoteService EVERNOTE_SERVICE = EvernoteSession.EvernoteService.SANDBOX;
 
+  // Set this to true if you want to allow linked notebooks for accounts that can only access a single
+  // notebook.
+  private static final boolean SUPPORT_APP_LINKED_NOTEBOOKS = true;
+
   /**
    * ************************************************************************
    * The following values are simply part of the demo application.           *
@@ -69,7 +87,7 @@ public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
 
     //Set up the Evernote Singleton Session
-    mEvernoteSession = EvernoteSession.getInstance(this, CONSUMER_KEY, CONSUMER_SECRET, EVERNOTE_SERVICE);
+    mEvernoteSession = EvernoteSession.getInstance(this, CONSUMER_KEY, CONSUMER_SECRET, EVERNOTE_SERVICE, SUPPORT_APP_LINKED_NOTEBOOKS);
   }
 
   // using createDialog, could use Fragments instead
@@ -93,4 +111,70 @@ protected void onPrepareDialog(int id, Dialog dialog) {
         ((ProgressDialog) dialog).setMessage(getString(R.string.esdk__loading));
     }
   }
+
+  /**
+   * Helper method for apps that have access to a single notebook, and that notebook is a linked
+   * notebook ... find that notebook, gets access to it, and calls back to the caller.
+   * @param callback invoked on error or with a client to the linked notebook
+   */
+  protected void invokeOnAppLinkedNotebook(final OnClientCallback<Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>> callback) {
+    try {
+      // We need to get the one and only linked notebook
+      mEvernoteSession.getClientFactory().createNoteStoreClient().listLinkedNotebooks(new OnClientCallback<List<LinkedNotebook>>() {
+        @Override
+        public void onSuccess(List<LinkedNotebook> linkedNotebooks) {
+          // We should only have one linked notebook
+          if (linkedNotebooks.size() != 1) {
+            Log.e(LOGTAG, "Error getting linked notebook - more than one linked notebook");
+            callback.onException(new Exception("Not single linked notebook"));
+          } else {
+            final LinkedNotebook linkedNotebook = linkedNotebooks.get(0);
+            mEvernoteSession.getClientFactory().createLinkedNoteStoreClientAsync(linkedNotebook, new OnClientCallback<AsyncLinkedNoteStoreClient>() {
+              @Override
+              public void onSuccess(AsyncLinkedNoteStoreClient asyncLinkedNoteStoreClient) {
+                // Finally create the note in the linked notebook
+                callback.onSuccess(new Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>(asyncLinkedNoteStoreClient, linkedNotebook));
+              }
+
+              @Override
+              public void onException(Exception exception) {
+                callback.onException(exception);
+              }
+            });
+          }
+        }
+
+        @Override
+        public void onException(Exception exception) {
+          callback.onException(exception);
+        }
+      });
+    } catch (TTransportException exception) {
+      callback.onException(exception);
+    }
+  }
+
+  /**
+   * Creates the specified note in an app's linked notebook.  Used when an app only has access to
+   * a single notebook, and that notebook is a linked notebook.
+   * @param note the note to be created
+   * @param createNoteCallback called on success or failure
+   */
+  protected void createNoteInAppLinkedNotebook(final Note note, final OnClientCallback<Note> createNoteCallback) {
+    showDialog(DIALOG_PROGRESS);
+    invokeOnAppLinkedNotebook(new OnClientCallback<Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>>() {
+      @Override
+      public void onSuccess(final Pair<AsyncLinkedNoteStoreClient, LinkedNotebook> pair) {
+        // Rely on the callback to dismiss the dialog
+        pair.first.createNoteAsync(note, pair.second, createNoteCallback);
+      }
+
+      @Override
+      public void onException(Exception exception) {
+        Log.e(LOGTAG, "Error creating linked notestore", exception);
+        Toast.makeText(getApplicationContext(), R.string.error_creating_notestore, Toast.LENGTH_LONG).show();
+        removeDialog(DIALOG_PROGRESS);
+      }
+    });
+  }
 }
diff --git a/samples/HelloEDAM/src/com/evernote/android/sample/SearchNotes.java b/samples/HelloEDAM/src/com/evernote/android/sample/SearchNotes.java
index 72de011..4b3a8f2 100644
--- a/samples/HelloEDAM/src/com/evernote/android/sample/SearchNotes.java
+++ b/samples/HelloEDAM/src/com/evernote/android/sample/SearchNotes.java
@@ -30,14 +30,18 @@
 import android.os.Build;
 import android.os.Bundle;
 import android.util.Log;
+import android.util.Pair;
 import android.view.*;
 import android.view.inputmethod.EditorInfo;
 import android.widget.*;
+
+import com.evernote.client.android.AsyncLinkedNoteStoreClient;
 import com.evernote.client.android.OnClientCallback;
 import com.evernote.edam.notestore.NoteFilter;
 import com.evernote.edam.notestore.NoteMetadata;
 import com.evernote.edam.notestore.NotesMetadataList;
 import com.evernote.edam.notestore.NotesMetadataResultSpec;
+import com.evernote.edam.type.LinkedNotebook;
 import com.evernote.edam.type.NoteSortOrder;
 import com.evernote.thrift.transport.TTransportException;
 import java.util.ArrayList;
@@ -101,32 +105,32 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
     // If User uses Android OS version 3.0 or later, implement a search form by SearchView on ActionBar
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB){
+      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
 
-            MenuInflater inflater = getMenuInflater();
-            inflater.inflate(R.menu.options_menu, menu);
+        MenuInflater inflater = getMenuInflater();
+        inflater.inflate(R.menu.options_menu, menu);
 
-            SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
-            mSearchView = (SearchView) menu.findItem(R.id.action_search).getActionView();
-            mSearchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
+        SearchManager searchManager = (SearchManager) getSystemService(Context.SEARCH_SERVICE);
+        mSearchView = (SearchView) menu.findItem(R.id.action_search).getActionView();
+        mSearchView.setSearchableInfo(searchManager.getSearchableInfo(getComponentName()));
 
-            SearchView.OnQueryTextListener queryTextListener = new SearchView.OnQueryTextListener() {
-                @Override
-                public boolean onQueryTextChange(String newText) {
-                    return true;
-                }
+        SearchView.OnQueryTextListener queryTextListener = new SearchView.OnQueryTextListener() {
+          @Override
+          public boolean onQueryTextChange(String newText) {
+            return true;
+          }
 
-                @Override
-                public boolean onQueryTextSubmit(String query) {
-                    findNotesByQuery(query);
-                    return true;
-                }
-            };
+          @Override
+          public boolean onQueryTextSubmit(String query) {
+            findNotesByQuery(query);
+            return true;
+          }
+        };
 
-            mSearchView.setOnQueryTextListener(queryTextListener);
-        }
+        mSearchView.setOnQueryTextListener(queryTextListener);
+      }
 
-        return true;
+      return true;
     }
 
     /**
@@ -137,38 +141,59 @@ public boolean onQueryTextSubmit(String query) {
      *
      */
     public void findNotesByQuery(String query) {
-        int offset = 0;
-        int pageSize = 10;
+        final int offset = 0;
+        final int pageSize = 10;
 
-        NoteFilter filter = new NoteFilter();
+        final NoteFilter filter = new NoteFilter();
         filter.setOrder(NoteSortOrder.UPDATED.getValue());
         filter.setWords(query);
-        NotesMetadataResultSpec spec = new NotesMetadataResultSpec();
+        final NotesMetadataResultSpec spec = new NotesMetadataResultSpec();
         spec.setIncludeTitle(true);
 
         mAdapter.clear();
 
         showDialog(DIALOG_PROGRESS);
         try{
+          // Callback invoked asynchronously from the notes search.  Factored out here
+          // so that it can be reused for a local or linked notebook search below
+          final OnClientCallback<NotesMetadataList> callback = new OnClientCallback<NotesMetadataList>() {
+            @Override
+            public void onSuccess(NotesMetadataList data) {
+              Toast.makeText(getApplicationContext(), R.string.notes_searched, Toast.LENGTH_LONG).show();
+              removeDialog(DIALOG_PROGRESS);
+
+              for (NoteMetadata note : data.getNotes()) {
+                String title = note.getTitle();
+                notesNames.add(title);
+              }
+              mAdapter.notifyDataSetChanged();
+            }
+
+            @Override
+            public void onException(Exception exception) {
+              onError(exception, "Error listing notes. ", R.string.error_listing_notes);
+            }
+          };
+
+
+          if(!mEvernoteSession.isAppLinkedNotebook()) {
+            // Normal, local notebook search
             mEvernoteSession.getClientFactory().createNoteStoreClient()
-                    .findNotesMetadata(filter, offset, pageSize, spec, new OnClientCallback<NotesMetadataList>() {
-                        @Override
-                        public void onSuccess(NotesMetadataList data) {
-                            Toast.makeText(getApplicationContext(), R.string.notes_searched, Toast.LENGTH_LONG).show();
-                            removeDialog(DIALOG_PROGRESS);
-
-                            for(NoteMetadata note : data.getNotes()) {
-                                String title = note.getTitle();
-                                notesNames.add(title);
-                            }
-                            mAdapter.notifyDataSetChanged();
-                        }
-
-                        @Override
-                        public void onException(Exception exception) {
-                            onError(exception, "Error listing notes. ", R.string.error_listing_notes);
-                        }
-                    });
+                .findNotesMetadata(filter, offset, pageSize, spec, callback);
+          } else {
+            // Linked notebook search
+            super.invokeOnAppLinkedNotebook(new OnClientCallback<Pair<AsyncLinkedNoteStoreClient, LinkedNotebook>>() {
+              @Override
+              public void onSuccess(Pair<AsyncLinkedNoteStoreClient, LinkedNotebook> pair) {
+                pair.first.findNotesMetadataAsync(filter, offset, pageSize, spec, callback);
+              }
+
+              @Override
+              public void onException(Exception exception) {
+                callback.onException(exception);
+              }
+            });
+          }
         } catch (TTransportException exception){
             onError(exception, "Error creating notestore. ", R.string.error_creating_notestore);
         }
diff --git a/samples/HelloEDAM/src/com/evernote/android/sample/SimpleNote.java b/samples/HelloEDAM/src/com/evernote/android/sample/SimpleNote.java
index f7c7897..231df11 100644
--- a/samples/HelloEDAM/src/com/evernote/android/sample/SimpleNote.java
+++ b/samples/HelloEDAM/src/com/evernote/android/sample/SimpleNote.java
@@ -63,6 +63,22 @@
 
   private String mSelectedNotebookGuid;
 
+  // Callback used as a result of creating a note in a normal notebook or a linked notebook
+  private OnClientCallback<Note> mNoteCreateCallback = new OnClientCallback<Note>() {
+    @Override
+    public void onSuccess(Note note) {
+      Toast.makeText(getApplicationContext(), R.string.note_saved, Toast.LENGTH_LONG).show();
+      removeDialog(DIALOG_PROGRESS);
+    }
+
+    @Override
+    public void onException(Exception exception) {
+      Log.e(LOGTAG, "Error saving note", exception);
+      Toast.makeText(getApplicationContext(), R.string.error_saving_note, Toast.LENGTH_LONG).show();
+      removeDialog(DIALOG_PROGRESS);
+    }
+  };
+
   public void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
     setContentView(R.layout.simple_note);
@@ -81,6 +97,7 @@ public void saveNote(View view) {
     String content = mEditTextContent.getText().toString();
     if (TextUtils.isEmpty(title) || TextUtils.isEmpty(content)) {
       Toast.makeText(getApplicationContext(), R.string.empty_content_error, Toast.LENGTH_LONG).show();
+      return;
     }
 
     Note note = new Note();
@@ -89,38 +106,33 @@ public void saveNote(View view) {
     //TODO: line breaks need to be converted to render in ENML
     note.setContent(EvernoteUtil.NOTE_PREFIX + content + EvernoteUtil.NOTE_SUFFIX);
 
-    //If User has selected a notebook guid, assign it now
-    if (!TextUtils.isEmpty(mSelectedNotebookGuid)) {
-      note.setNotebookGuid(mSelectedNotebookGuid);
-    }
-    showDialog(DIALOG_PROGRESS);
-    try {
-      mEvernoteSession.getClientFactory().createNoteStoreClient().createNote(note, new OnClientCallback<Note>() {
-        @Override
-        public void onSuccess(Note data) {
-          Toast.makeText(getApplicationContext(), R.string.note_saved, Toast.LENGTH_LONG).show();
-          removeDialog(DIALOG_PROGRESS);
-        }
-
-        @Override
-        public void onException(Exception exception) {
-          Log.e(LOGTAG, "Error saving note", exception);
-          Toast.makeText(getApplicationContext(), R.string.error_saving_note, Toast.LENGTH_LONG).show();
-          removeDialog(DIALOG_PROGRESS);
-        }
-      });
-    } catch (TTransportException exception) {
-      Log.e(LOGTAG, "Error creating notestore", exception);
-      Toast.makeText(getApplicationContext(), R.string.error_creating_notestore, Toast.LENGTH_LONG).show();
-      removeDialog(DIALOG_PROGRESS);
+    if(!mEvernoteSession.getAuthenticationResult().isAppLinkedNotebook()) {
+      //If User has selected a notebook guid, assign it now
+      if (!TextUtils.isEmpty(mSelectedNotebookGuid)) {
+        note.setNotebookGuid(mSelectedNotebookGuid);
+      }
+      showDialog(DIALOG_PROGRESS);
+      try {
+        mEvernoteSession.getClientFactory().createNoteStoreClient().createNote(note, mNoteCreateCallback);
+      } catch (TTransportException exception) {
+        Log.e(LOGTAG, "Error creating notestore", exception);
+        Toast.makeText(getApplicationContext(), R.string.error_creating_notestore, Toast.LENGTH_LONG).show();
+        removeDialog(DIALOG_PROGRESS);
+      }
+    } else {
+      super.createNoteInAppLinkedNotebook(note, mNoteCreateCallback);
     }
-
   }
 
+
   /**
    * Select notebook, create AlertDialog to pick notebook guid
    */
   public void selectNotebook(View view) {
+    if(mEvernoteSession.isAppLinkedNotebook()) {
+      Toast.makeText(getApplicationContext(), getString(R.string.CANT_LIST_APP_LNB), Toast.LENGTH_LONG).show();
+      return;
+    }
 
     try {
       mEvernoteSession.getClientFactory().createNoteStoreClient().listNotebooks(new OnClientCallback<List<Notebook>>() {
