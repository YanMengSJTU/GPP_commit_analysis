diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..e43b0f9
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+.DS_Store
diff --git a/CHANGES.md b/CHANGES.md
new file mode 100644
index 0000000..e57dade
--- /dev/null
+++ b/CHANGES.md
@@ -0,0 +1,23 @@
+= 0.2.3 / 2012-09-28
+
+* Include YinxiangApi.java in src.
+* Remove use of String.isEmpty() to maintain compatibility with older SDK versions.
+
+= 0.2.2 / 2012-09-19
+
+* Adds support for the Evernote China API (Yinxiang Biji)
+
+= 0.2.1 / 2012-09-08
+
+* Set targetSdkVersion to 9
+* Add known issues to README
+
+= 0.2 / 2012-09-07
+
+* Persist authentication token and related settings in EvernoteSession so that the
+  user does not have to reauthenticate until their OAuth token expires or is 
+  revoked.
+
+= Unversioned
+
+* Initial release.
diff --git a/README.md b/README.md
index c617461..66e6f54 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,8 @@
-Evernote SDK for Android version 1.21
+Evernote SDK for Android version 0.2.3
 =============================================
 
+Evernote API version 1.22
+
 Overview
 --------
 This SDK contains wrapper code used to call the Evernote Cloud API from Android apps and a __beta__ SDK for authenticating to Evernote using OAuth. Note that the OAuth SDK components may change quickly over the next couple of weeks.
@@ -13,6 +15,10 @@ In order to use the code in this SDK, you need to obtain an API key from http://
 
 In order to run the sample code, you need a user account on the sandbox service where you will do your development. Sign up for an account at https://sandbox.evernote.com/Registration.action 
 
+Known Issues
+------------
+The current version of the SDK performs OAuth network requests on the main thread, resulting in a NetworkOnMainThreadException when the targetSDK is set to 11 or higher.
+
 Getting Started - HelloEDAM
 ---------------------------
 The sample application HelloEDAM demonstrates how to use the Evernote SDK for Android to authentication to the Evernote service using OAuth, then access the user's Evernote account. To run the sample project:
diff --git a/lib/evernote-api-1.21.jar b/lib/evernote-api-1.21.jar
deleted file mode 100644
index e31ec7c..0000000
Binary files a/lib/evernote-api-1.21.jar and /dev/null differ
diff --git a/lib/evernote-api-1.22.jar b/lib/evernote-api-1.22.jar
new file mode 100644
index 0000000..57f1fe7
Binary files /dev/null and b/lib/evernote-api-1.22.jar differ
diff --git a/lib/evernote-client-android.jar b/lib/evernote-client-android.jar
index 94f417c..97d2308 100644
Binary files a/lib/evernote-client-android.jar and b/lib/evernote-client-android.jar differ
diff --git a/lib/libthrift.jar b/lib/libthrift.jar
index cc62fa6..47c3cd3 100644
Binary files a/lib/libthrift.jar and b/lib/libthrift.jar differ
diff --git a/lib/scribe-1.3.0.jar b/lib/scribe-1.3.1.jar
similarity index 74%
rename from lib/scribe-1.3.0.jar
rename to lib/scribe-1.3.1.jar
index b15768a..4abc551 100644
Binary files a/lib/scribe-1.3.0.jar and b/lib/scribe-1.3.1.jar differ
diff --git a/sample/HelloEDAM/.classpath b/sample/HelloEDAM/.classpath
index ba01b82..8a3cb1f 100644
--- a/sample/HelloEDAM/.classpath
+++ b/sample/HelloEDAM/.classpath
@@ -4,8 +4,8 @@
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
-	<classpathentry kind="lib" path="libs/scribe-1.3.0.jar"/>
-	<classpathentry kind="lib" path="libs/evernote-api-1.21.jar"/>
+	<classpathentry kind="lib" path="libs/scribe-1.3.1.jar"/>
+	<classpathentry kind="lib" path="libs/evernote-api-1.22.jar"/>
 	<classpathentry kind="lib" path="libs/evernote-client-android.jar"/>
 	<classpathentry kind="lib" path="libs/libthrift.jar"/>
 	<classpathentry kind="output" path="bin/classes"/>
diff --git a/sample/HelloEDAM/.settings/org.eclipse.jdt.core.prefs b/sample/HelloEDAM/.settings/org.eclipse.jdt.core.prefs
index af16ae4..30e7954 100644
--- a/sample/HelloEDAM/.settings/org.eclipse.jdt.core.prefs
+++ b/sample/HelloEDAM/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,4 @@
-#Fri Feb 11 17:08:20 EST 2011
+#Fri Apr 27 11:35:41 PDT 2012
 eclipse.preferences.version=1
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
diff --git a/sample/HelloEDAM/AndroidManifest.xml b/sample/HelloEDAM/AndroidManifest.xml
index 58f56f4..4dbb3fb 100644
--- a/sample/HelloEDAM/AndroidManifest.xml
+++ b/sample/HelloEDAM/AndroidManifest.xml
@@ -18,7 +18,7 @@
           android:configChanges="orientation|keyboard">
           <intent-filter>
             <!-- Change this to be en- followed by your consumer key -->
-            <data android:scheme="en-your key" />
+            <data android:scheme="en-sethhitch-web" />
             <action android:name="android.intent.action.VIEW" />                
             <category android:name="android.intent.category.BROWSABLE"/>
             <category android:name="android.intent.category.DEFAULT" /> 
@@ -27,5 +27,6 @@
     </application>
 
     <uses-permission android:name="android.permission.INTERNET"></uses-permission>
+    <uses-sdk android:minSdkVersion="9" android:targetSdkVersion="9"/>
 
 </manifest> 
diff --git a/sample/HelloEDAM/libs/evernote-api-1.21.jar b/sample/HelloEDAM/libs/evernote-api-1.21.jar
deleted file mode 100644
index e31ec7c..0000000
Binary files a/sample/HelloEDAM/libs/evernote-api-1.21.jar and /dev/null differ
diff --git a/sample/HelloEDAM/libs/evernote-api-1.22.jar b/sample/HelloEDAM/libs/evernote-api-1.22.jar
new file mode 100644
index 0000000..57f1fe7
Binary files /dev/null and b/sample/HelloEDAM/libs/evernote-api-1.22.jar differ
diff --git a/sample/HelloEDAM/libs/evernote-client-android.jar b/sample/HelloEDAM/libs/evernote-client-android.jar
index 94f417c..97d2308 100644
Binary files a/sample/HelloEDAM/libs/evernote-client-android.jar and b/sample/HelloEDAM/libs/evernote-client-android.jar differ
diff --git a/sample/HelloEDAM/libs/scribe-1.3.0.jar b/sample/HelloEDAM/libs/scribe-1.3.1.jar
similarity index 74%
rename from sample/HelloEDAM/libs/scribe-1.3.0.jar
rename to sample/HelloEDAM/libs/scribe-1.3.1.jar
index b15768a..4abc551 100644
Binary files a/sample/HelloEDAM/libs/scribe-1.3.0.jar and b/sample/HelloEDAM/libs/scribe-1.3.1.jar differ
diff --git a/sample/HelloEDAM/project.properties b/sample/HelloEDAM/project.properties
index f049142..d79abae 100644
--- a/sample/HelloEDAM/project.properties
+++ b/sample/HelloEDAM/project.properties
@@ -8,4 +8,4 @@
 # project structure.
 
 # Project target.
-target=android-10
+target=android-11
diff --git a/sample/HelloEDAM/src/com/evernote/android/sample/HelloEDAM.java b/sample/HelloEDAM/src/com/evernote/android/sample/HelloEDAM.java
index f40079f..378d39b 100644
--- a/sample/HelloEDAM/src/com/evernote/android/sample/HelloEDAM.java
+++ b/sample/HelloEDAM/src/com/evernote/android/sample/HelloEDAM.java
@@ -12,12 +12,12 @@
 import com.evernote.client.conn.mobile.FileData;
 
 import com.evernote.client.conn.ApplicationInfo;
-import com.evernote.client.oauth.android.AuthenticationResult;
 import com.evernote.client.oauth.android.EvernoteSession;
 import com.evernote.android.sample.R;
 
 import android.app.Activity;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.database.Cursor;
 import android.net.Uri;
 import android.os.Bundle;
@@ -45,8 +45,8 @@
   
   // Your Evernote API key. See http://dev.evernote.com/documentation/cloud/
   // Please obfuscate your code to help keep these values secret.
-  private static final String CONSUMER_KEY = "";
-  private static final String CONSUMER_SECRET = "";
+  private static final String CONSUMER_KEY = "Your Consumer Key";
+  private static final String CONSUMER_SECRET = "Your Consumer Secret";
 
   /***************************************************************************
    * Change these values as needed to use this code in your own application. *
@@ -116,13 +116,24 @@ public void onResume() {
     super.onResume();
 
     // Complete the Evernote authentication process if necessary
-    if (!session.completeAuthentication()) {
+    if (!session.completeAuthentication(getPreferencesForAuthData())) {
       // We only want to do this when we're resuming after authentication...
       Toast.makeText(this, "Evernote login failed", Toast.LENGTH_LONG).show();
     }
     
     updateUi();
   }
+
+  /**
+   * Evernote authentication data will be stored to this
+   * SharedPreferences if we are resuming as a result of a successful OAuth
+   * authorization. You may wish to pass a different SharedPreferences
+   * so that Evernote settings are stored along with other settings
+   * persisted by your application.
+   */
+  private SharedPreferences getPreferencesForAuthData() {
+    return getPreferences(MODE_PRIVATE);
+  }
   
   /**
    * Setup the EvernoteSession used to access the Evernote API.
@@ -132,14 +143,8 @@ private void setupSession() {
       new ApplicationInfo(CONSUMER_KEY, CONSUMER_SECRET, EVERNOTE_HOST, 
           APP_NAME, APP_VERSION);
 
-    // TODO Retreived the cached Evernote AuthenticationResult if it exists
-//    if (hasCachedEvernoteCredentials) {
-//      AuthenticationResult result = new AuthenticationResult(authToken, noteStoreUrl, webApiUrlPrefix, userId);
-//      session = new EvernoteSession(info, result, getTempDir());
-//    } else {
-      session = new EvernoteSession(info, getTempDir());
-//    }
-
+    // Retrieve persisted authentication information
+    session = new EvernoteSession(info, getPreferencesForAuthData(), getTempDir());
     updateUi();
   }
   
@@ -159,13 +164,13 @@ private void updateUi() {
   }
   
   /**
-   * Called when the user taps the "Select Image" button.
-   * 
-   * Sends the user to the image gallery to choose an image to share.
+   * Called when the user taps the "Log in to Evernote" button.
+   * Initiates the Evernote OAuth process, or logs out if the user is already
+   * logged in.
    */
   public void startAuth(View view) {
     if (session.isLoggedIn()) {
-      session.logOut();
+      session.logOut(getPreferencesForAuthData());
     } else {
       session.authenticate(this);
     }
diff --git a/sample/HelloEvernote/.classpath b/sample/HelloEvernote/.classpath
index 609aa00..6aed2eb 100644
--- a/sample/HelloEvernote/.classpath
+++ b/sample/HelloEvernote/.classpath
@@ -3,5 +3,6 @@
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="gen"/>
 	<classpathentry kind="con" path="com.android.ide.eclipse.adt.ANDROID_FRAMEWORK"/>
-	<classpathentry kind="output" path="bin"/>
+	<classpathentry exported="true" kind="con" path="com.android.ide.eclipse.adt.LIBRARIES"/>
+	<classpathentry kind="output" path="bin/classes"/>
 </classpath>
diff --git a/sample/HelloEvernote/.gitignore b/sample/HelloEvernote/.gitignore
new file mode 100644
index 0000000..e614fbb
--- /dev/null
+++ b/sample/HelloEvernote/.gitignore
@@ -0,0 +1,2 @@
+bin
+gen
diff --git a/sample/HelloEvernote/default.properties b/sample/HelloEvernote/default.properties
deleted file mode 100644
index b74c488..0000000
--- a/sample/HelloEvernote/default.properties
+++ /dev/null
@@ -1,11 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system use,
-# "build.properties", and override values to adapt the script to your
-# project structure.
-
-# Project target.
-target=android-4
diff --git a/sample/HelloEvernote/gen/com/evernote/android/sample/R.java b/sample/HelloEvernote/gen/com/evernote/android/sample/R.java
deleted file mode 100644
index 81ebe39..0000000
--- a/sample/HelloEvernote/gen/com/evernote/android/sample/R.java
+++ /dev/null
@@ -1,34 +0,0 @@
-/* AUTO-GENERATED FILE.  DO NOT MODIFY.
- *
- * This class was automatically generated by the
- * aapt tool from the resource data it found.  It
- * should not be modified by hand.
- */
-
-package com.evernote.android.sample;
-
-public final class R {
-    public static final class attr {
-    }
-    public static final class drawable {
-        public static final int icon=0x7f020000;
-    }
-    public static final class layout {
-        public static final int main=0x7f030000;
-    }
-    public static final class string {
-        public static final int app_name=0x7f040000;
-        public static final int btnlbl_create_note_using_enex=0x7f040006;
-        public static final int btnlbl_new_note=0x7f040004;
-        public static final int btnlbl_new_note_with_content=0x7f040005;
-        public static final int btnlbl_new_note_with_content_and_attachment=0x7f04000c;
-        public static final int btnlbl_search_notes=0x7f040009;
-        public static final int btnlbl_share_image=0x7f040007;
-        public static final int btnlbl_view_note=0x7f040008;
-        public static final int err_activity_not_found=0x7f040001;
-        public static final int err_create_enml_file=0x7f040002;
-        public static final int err_no_storage=0x7f04000a;
-        public static final int label_share_using=0x7f040003;
-        public static final int msg_enex_success=0x7f04000b;
-    }
-}
diff --git a/sample/HelloEvernote/project.properties b/sample/HelloEvernote/project.properties
new file mode 100644
index 0000000..4d07452
--- /dev/null
+++ b/sample/HelloEvernote/project.properties
@@ -0,0 +1,14 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system edit
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+#
+# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
+#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
+
+# Project target.
+target=android-11
diff --git a/src/com/evernote/client/conn/mobile/FileData.java b/src/com/evernote/client/conn/mobile/FileData.java
index 3afa394..a07480f 100644
--- a/src/com/evernote/client/conn/mobile/FileData.java
+++ b/src/com/evernote/client/conn/mobile/FileData.java
@@ -73,6 +73,7 @@ public FileData(byte[] bodyHash, File file) {
     setSize((int) file.length());
   }
 
+  @Override
   public void write(TProtocol oprot) throws TException {
     validate();
     oprot.writeStructBegin(STRUCT_DESC);
diff --git a/src/com/evernote/client/oauth/YinxiangApi.java b/src/com/evernote/client/oauth/YinxiangApi.java
new file mode 100644
index 0000000..c847851
--- /dev/null
+++ b/src/com/evernote/client/oauth/YinxiangApi.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2012 Evernote Corporation
+ * All rights reserved. 
+ * 
+ * Redistribution and use in source and binary forms, with or without modification, 
+ * are permitted provided that the following conditions are met:
+ *  
+ * 1. Redistributions of source code must retain the above copyright notice, this 
+ *    list of conditions and the following disclaimer.
+ *     
+ * 2. Redistributions in binary form must reproduce the above copyright notice, 
+ *    this list of conditions and the following disclaimer in the documentation 
+ *    and/or other materials provided with the distribution.
+ *  
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.evernote.client.oauth;
+
+import org.scribe.builder.api.EvernoteApi;
+import org.scribe.model.Token;
+
+/**
+ * A Scribe Api implementation for the Yinxiang Biji service, app.yinxiang.com. 
+ */
+public class YinxiangApi extends EvernoteApi {
+
+  private static final String YINXIANG_URL = "https://app.yinxiang.com";
+
+  @Override
+  public String getRequestTokenEndpoint()
+  {
+    return YINXIANG_URL + "/oauth";
+  }
+
+  @Override
+  public String getAccessTokenEndpoint()
+  {
+    return YINXIANG_URL + "/oauth";
+  }
+
+  @Override
+  public String getAuthorizationUrl(Token requestToken)
+  {
+    return String.format(YINXIANG_URL + "/OAuth.action?oauth_token=%s", requestToken.getToken());
+  }
+}
diff --git a/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java b/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
index 2bc0e73..4f38470 100644
--- a/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
+++ b/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
@@ -38,6 +38,7 @@
 import org.scribe.oauth.OAuthService;
 
 import com.evernote.client.oauth.EvernoteAuthToken;
+import com.evernote.client.oauth.YinxiangApi;
 
 import android.app.Activity;
 import android.content.Intent;
@@ -122,6 +123,7 @@ protected void onResume() {
     }
 
     if (!startedAuthentication) {
+      receivedCallback = false;
       beginAuthentication();
       startedAuthentication = true;
     } else if (!receivedCallback) {
@@ -142,6 +144,11 @@ public void onNewIntent(Intent intent) {
     }
   }
 
+  public static void reset() {
+    authToken = null;
+    startedAuthentication = false;
+  }
+  
   private String getCallbackScheme() {
     return "en-" + consumerKey;
   }
@@ -151,6 +158,8 @@ private OAuthService createService() {
     Class apiClass = EvernoteApi.class;
     if (evernoteHost.equals("sandbox.evernote.com")) {
       apiClass = EvernoteApi.Sandbox.class;
+    } else if (evernoteHost.equals("app.yinxiang.com")) {
+      apiClass = YinxiangApi.class;
     }
     return new ServiceBuilder()
       .provider(apiClass)
@@ -175,13 +184,13 @@ public Token call() throws Exception {
           return service.getRequestToken();
         }
       });
-      Token requestToken = requestTokenFuture.get();
-      this.requestToken = requestToken.getToken();
-      this.requestTokenSecret = requestToken.getSecret();
+      Token reqToken = service.getRequestToken();
+      this.requestToken = reqToken.getToken();
+      this.requestTokenSecret = reqToken.getSecret();
       
       // Open a browser to allow the user to authorize access to their account
       Log.i(TAG, "Redirecting user for authorization...");
-      String url = service.getAuthorizationUrl(requestToken);
+      String url = service.getAuthorizationUrl(reqToken);
       Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url));
       startActivity(intent);
     } catch (OAuthException oax) {
diff --git a/src/com/evernote/client/oauth/android/EvernoteSession.java b/src/com/evernote/client/oauth/android/EvernoteSession.java
index 18babe4..af5d8bf 100644
--- a/src/com/evernote/client/oauth/android/EvernoteSession.java
+++ b/src/com/evernote/client/oauth/android/EvernoteSession.java
@@ -33,6 +33,8 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.Editor;
 
 import com.evernote.client.conn.ApplicationInfo;
 import com.evernote.client.conn.mobile.TEvernoteHttpClient;
@@ -61,6 +63,12 @@
  */
 public class EvernoteSession {
 
+  // Keys for values persisted in our shared preferences 
+  private static final String KEY_AUTHTOKEN = "evernote.authToken";
+  private static final String KEY_NOTESTOREURL = "evernote.notestoreUrl";
+  private static final String KEY_WEBAPIURLPREFIX = "evernote.webApiUrlPrefix";
+  private static final String KEY_USERID = "evernote.userId";
+
   private ApplicationInfo applicationInfo;
   private AuthenticationResult authenticationResult;
   private File tempDir;
@@ -86,7 +94,36 @@ public EvernoteSession(ApplicationInfo applicationInfo,
     this(applicationInfo, tempDir);
     this.authenticationResult = sessionInfo; 
   }
-  
+
+  /**
+   * Create a new Evernote session, using saved information 
+   * from a previous successful authentication if available. 
+   */
+  public EvernoteSession(ApplicationInfo applicationInfo, 
+      SharedPreferences sessionInfo, File tempDir) {
+    this(applicationInfo, tempDir);
+    this.authenticationResult = getAuthenticationResult(sessionInfo); 
+  }
+
+  /**
+   * Restore an AuthenticationResult from shared preferences.
+   * @return The restored AuthenticationResult, or null if the preferences
+   * did not contain the required information.
+   */
+  private AuthenticationResult getAuthenticationResult(SharedPreferences prefs) {
+    String authToken = prefs.getString(KEY_AUTHTOKEN, "");
+    String notestoreUrl = prefs.getString(KEY_NOTESTOREURL, "");
+    String webApiUrlPrefix = prefs.getString(KEY_WEBAPIURLPREFIX, "");
+    int userId = prefs.getInt(KEY_USERID, -1);
+
+    if (authToken.length() > 0 && notestoreUrl.length() > 0 && 
+        webApiUrlPrefix.length() > 0 && (userId > 0)) {
+      return new AuthenticationResult(authToken, notestoreUrl, webApiUrlPrefix, userId);
+    } else {
+      return null;
+    }
+  }
+
   /**
    * Check whether the session has valid authentication information
    * that will allow successful API calls to be made.
@@ -98,8 +135,16 @@ public boolean isLoggedIn() {
   /**
    * Clear all stored authentication information.
    */
-  public void logOut() {
+  public void logOut(SharedPreferences prefs) {
     authenticationResult = null;
+    
+    // Removed cached authentication information
+    Editor editor = prefs.edit();
+    editor.remove(KEY_AUTHTOKEN);
+    editor.remove(KEY_NOTESTOREURL);
+    editor.remove(KEY_WEBAPIURLPREFIX);
+    editor.remove(KEY_USERID);
+    editor.apply();
   }
 
   /**
@@ -117,6 +162,14 @@ public String getAuthToken() {
     }
   }
   
+  /**
+   * Get the authentication information returned by a successful
+   * OAuth authentication to the Evernote web service.
+   */
+  public AuthenticationResult getAuthenticationResult() {
+    return authenticationResult;
+  }
+  
   /**
    * Get a new NoteStore Client. The returned client can be used for any
    * number of API calls, but is NOT thread safe.
@@ -158,17 +211,31 @@ public void authenticate(Context context) {
    * access to their Evernote account and the Evernote service redirects
    * the user back to the application.
    */
-  public boolean completeAuthentication() {
+  public boolean completeAuthentication(SharedPreferences prefs) {
+    boolean result = false;
+    
     if (EvernoteOAuthActivity.authToken != null) {
       EvernoteAuthToken token = EvernoteOAuthActivity.authToken;
       authenticationResult = 
         new AuthenticationResult(token.getToken(), token.getNoteStoreUrl(), 
             token.getWebApiUrlPrefix(), token.getUserId());
-      return true;
+      
+      // Persist the authentication results so that the user does not
+      // have to authenticate again until their token expires or is revoked.
+      Editor editor = prefs.edit();
+      editor.putString(KEY_AUTHTOKEN, token.getToken());
+      editor.putString(KEY_NOTESTOREURL, token.getNoteStoreUrl());
+      editor.putString(KEY_WEBAPIURLPREFIX, token.getWebApiUrlPrefix());
+      editor.putInt(KEY_USERID, token.getUserId());
+      editor.apply();
+      
+      result = true;
     } else {
       // If there's a pending authentication and we have no auth token, we failed
-      boolean result = !EvernoteOAuthActivity.startedAuthentication;
-      return result;
+      result = !EvernoteOAuthActivity.startedAuthentication;
     }
+    
+    EvernoteOAuthActivity.reset();
+    return result;
   }
 }
diff --git a/src/com/evernote/edam/error/EDAMErrorCode.java b/src/com/evernote/edam/error/EDAMErrorCode.java
index 3515f7a..35242bd 100644
--- a/src/com/evernote/edam/error/EDAMErrorCode.java
+++ b/src/com/evernote/edam/error/EDAMErrorCode.java
@@ -14,7 +14,7 @@
  * Numeric codes indicating the type of error that occurred on the
  * service.
  * <dl>
- *   <dt>UNKNOWN</dt
+ *   <dt>UNKNOWN</dt>
  *     <dd>No information available about the error</dd>
  *   <dt>BAD_DATA_FORMAT</dt>
  *     <dd>The format of the request data was incorrect</dd>
diff --git a/src/com/evernote/edam/limits/Constants.java b/src/com/evernote/edam/limits/Constants.java
index cc7c03f..a04d53b 100644
--- a/src/com/evernote/edam/limits/Constants.java
+++ b/src/com/evernote/edam/limits/Constants.java
@@ -246,4 +246,16 @@
 
   public static final String EDAM_CONTENT_CLASS_FOOD_MEAL = "evernote.food.meal";
 
+  public static final String EDAM_CONTENT_CLASS_SKITCH = "evernote.skitch";
+
+  public static final int EDAM_RELATED_PLAINTEXT_LEN_MIN = 1;
+
+  public static final int EDAM_RELATED_PLAINTEXT_LEN_MAX = 131072;
+
+  public static final int EDAM_RELATED_MAX_NOTES = 25;
+
+  public static final int EDAM_RELATED_MAX_NOTEBOOKS = 1;
+
+  public static final int EDAM_RELATED_MAX_TAGS = 25;
+
 }
diff --git a/src/com/evernote/edam/notestore/NoteStore.java b/src/com/evernote/edam/notestore/NoteStore.java
index 85c6595..d161ea0 100644
--- a/src/com/evernote/edam/notestore/NoteStore.java
+++ b/src/com/evernote/edam/notestore/NoteStore.java
@@ -3491,6 +3491,53 @@ public void send_authenticateToSharedNote(String guid, String noteKey) throws TE
       throw new TApplicationException(TApplicationException.MISSING_RESULT, "authenticateToSharedNote failed: unknown result");
     }
 
+    public RelatedResult findRelated(String authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
+    {
+      send_findRelated(authenticationToken, query, resultSpec);
+      return recv_findRelated();
+    }
+
+    public void send_findRelated(String authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec) throws TException
+    {
+      oprot_.writeMessageBegin(new TMessage("findRelated", TMessageType.CALL, ++seqid_));
+      findRelated_args args = new findRelated_args();
+      args.setAuthenticationToken(authenticationToken);
+      args.setQuery(query);
+      args.setResultSpec(resultSpec);
+      args.write(oprot_);
+      oprot_.writeMessageEnd();
+      oprot_.getTransport().flush();
+    }
+
+    public RelatedResult recv_findRelated() throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException
+    {
+      TMessage msg = iprot_.readMessageBegin();
+      if (msg.type == TMessageType.EXCEPTION) {
+        TApplicationException x = TApplicationException.read(iprot_);
+        iprot_.readMessageEnd();
+        throw x;
+      }
+      if (msg.seqid != seqid_) {
+        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findRelated failed: out of sequence response");
+      }
+      findRelated_result result = new findRelated_result();
+      result.read(iprot_);
+      iprot_.readMessageEnd();
+      if (result.isSetSuccess()) {
+        return result.success;
+      }
+      if (result.userException != null) {
+        throw result.userException;
+      }
+      if (result.systemException != null) {
+        throw result.systemException;
+      }
+      if (result.notFoundException != null) {
+        throw result.notFoundException;
+      }
+      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findRelated failed: unknown result");
+    }
+
   }
   public static class Processor implements TProcessor {
     public Processor(Iface iface)
@@ -3571,6 +3618,7 @@ public Processor(Iface iface)
       processMap_.put("shareNote", new shareNote());
       processMap_.put("stopSharingNote", new stopSharingNote());
       processMap_.put("authenticateToSharedNote", new authenticateToSharedNote());
+      processMap_.put("findRelated", new findRelated());
     }
 
     protected static interface ProcessFunction {
@@ -6664,6 +6712,47 @@ public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TExcepti
 
     }
 
+    private class findRelated implements ProcessFunction {
+      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
+      {
+        findRelated_args args = new findRelated_args();
+        try {
+          args.read(iprot);
+        } catch (TProtocolException e) {
+          iprot.readMessageEnd();
+          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
+          oprot.writeMessageBegin(new TMessage("findRelated", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
+        iprot.readMessageEnd();
+        findRelated_result result = new findRelated_result();
+        try {
+          result.success = iface_.findRelated(args.authenticationToken, args.query, args.resultSpec);
+        } catch (com.evernote.edam.error.EDAMUserException userException) {
+          result.userException = userException;
+        } catch (com.evernote.edam.error.EDAMSystemException systemException) {
+          result.systemException = systemException;
+        } catch (com.evernote.edam.error.EDAMNotFoundException notFoundException) {
+          result.notFoundException = notFoundException;
+        } catch (Throwable th) {
+          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findRelated");
+          oprot.writeMessageBegin(new TMessage("findRelated", TMessageType.EXCEPTION, seqid));
+          x.write(oprot);
+          oprot.writeMessageEnd();
+          oprot.getTransport().flush();
+          return;
+        }
+        oprot.writeMessageBegin(new TMessage("findRelated", TMessageType.REPLY, seqid));
+        result.write(oprot);
+        oprot.writeMessageEnd();
+        oprot.getTransport().flush();
+      }
+
+    }
+
   }
 
   public static class getSyncState_args implements TBase<getSyncState_args, getSyncState_args._Fields>, java.io.Serializable, Cloneable   {
@@ -12827,14 +12916,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list103 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.Notebook>(_list103.size);
-                for (int _i104 = 0; _i104 < _list103.size; ++_i104)
+                TList _list115 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.Notebook>(_list115.size);
+                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                 {
-                  com.evernote.edam.type.Notebook _elem105;
-                  _elem105 = new com.evernote.edam.type.Notebook();
-                  _elem105.read(iprot);
-                  this.success.add(_elem105);
+                  com.evernote.edam.type.Notebook _elem117;
+                  _elem117 = new com.evernote.edam.type.Notebook();
+                  _elem117.read(iprot);
+                  this.success.add(_elem117);
                 }
                 iprot.readListEnd();
               }
@@ -12874,9 +12963,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.Notebook _iter106 : this.success)
+          for (com.evernote.edam.type.Notebook _iter118 : this.success)
           {
-            _iter106.write(oprot);
+            _iter118.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -17791,14 +17880,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list107 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list107.size);
-                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
+                TList _list119 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list119.size);
+                for (int _i120 = 0; _i120 < _list119.size; ++_i120)
                 {
-                  com.evernote.edam.type.Tag _elem109;
-                  _elem109 = new com.evernote.edam.type.Tag();
-                  _elem109.read(iprot);
-                  this.success.add(_elem109);
+                  com.evernote.edam.type.Tag _elem121;
+                  _elem121 = new com.evernote.edam.type.Tag();
+                  _elem121.read(iprot);
+                  this.success.add(_elem121);
                 }
                 iprot.readListEnd();
               }
@@ -17838,9 +17927,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.Tag _iter110 : this.success)
+          for (com.evernote.edam.type.Tag _iter122 : this.success)
           {
-            _iter110.write(oprot);
+            _iter122.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -18702,14 +18791,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list111 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list111.size);
-                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
+                TList _list123 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.Tag>(_list123.size);
+                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
                 {
-                  com.evernote.edam.type.Tag _elem113;
-                  _elem113 = new com.evernote.edam.type.Tag();
-                  _elem113.read(iprot);
-                  this.success.add(_elem113);
+                  com.evernote.edam.type.Tag _elem125;
+                  _elem125 = new com.evernote.edam.type.Tag();
+                  _elem125.read(iprot);
+                  this.success.add(_elem125);
                 }
                 iprot.readListEnd();
               }
@@ -18757,9 +18846,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.Tag _iter114 : this.success)
+          for (com.evernote.edam.type.Tag _iter126 : this.success)
           {
-            _iter114.write(oprot);
+            _iter126.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -23860,14 +23949,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list115 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.SavedSearch>(_list115.size);
-                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
+                TList _list127 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.SavedSearch>(_list127.size);
+                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
                 {
-                  com.evernote.edam.type.SavedSearch _elem117;
-                  _elem117 = new com.evernote.edam.type.SavedSearch();
-                  _elem117.read(iprot);
-                  this.success.add(_elem117);
+                  com.evernote.edam.type.SavedSearch _elem129;
+                  _elem129 = new com.evernote.edam.type.SavedSearch();
+                  _elem129.read(iprot);
+                  this.success.add(_elem129);
                 }
                 iprot.readListEnd();
               }
@@ -23907,9 +23996,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.SavedSearch _iter118 : this.success)
+          for (com.evernote.edam.type.SavedSearch _iter130 : this.success)
           {
-            _iter118.write(oprot);
+            _iter130.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -40415,13 +40504,13 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list119 = iprot.readListBegin();
-                this.success = new ArrayList<String>(_list119.size);
-                for (int _i120 = 0; _i120 < _list119.size; ++_i120)
+                TList _list131 = iprot.readListBegin();
+                this.success = new ArrayList<String>(_list131.size);
+                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
                 {
-                  String _elem121;
-                  _elem121 = iprot.readString();
-                  this.success.add(_elem121);
+                  String _elem133;
+                  _elem133 = iprot.readString();
+                  this.success.add(_elem133);
                 }
                 iprot.readListEnd();
               }
@@ -40469,9 +40558,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
-          for (String _iter122 : this.success)
+          for (String _iter134 : this.success)
           {
-            oprot.writeString(_iter122);
+            oprot.writeString(_iter134);
           }
           oprot.writeListEnd();
         }
@@ -44432,13 +44521,13 @@ public void read(TProtocol iprot) throws TException {
           case 2: // NOTE_GUIDS
             if (field.type == TType.LIST) {
               {
-                TList _list123 = iprot.readListBegin();
-                this.noteGuids = new ArrayList<String>(_list123.size);
-                for (int _i124 = 0; _i124 < _list123.size; ++_i124)
+                TList _list135 = iprot.readListBegin();
+                this.noteGuids = new ArrayList<String>(_list135.size);
+                for (int _i136 = 0; _i136 < _list135.size; ++_i136)
                 {
-                  String _elem125;
-                  _elem125 = iprot.readString();
-                  this.noteGuids.add(_elem125);
+                  String _elem137;
+                  _elem137 = iprot.readString();
+                  this.noteGuids.add(_elem137);
                 }
                 iprot.readListEnd();
               }
@@ -44468,9 +44557,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(NOTE_GUIDS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRING, this.noteGuids.size()));
-          for (String _iter126 : this.noteGuids)
+          for (String _iter138 : this.noteGuids)
           {
-            oprot.writeString(_iter126);
+            oprot.writeString(_iter138);
           }
           oprot.writeListEnd();
         }
@@ -47547,14 +47636,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list127 = iprot.readListBegin();
-                this.success = new ArrayList<NoteVersionId>(_list127.size);
-                for (int _i128 = 0; _i128 < _list127.size; ++_i128)
+                TList _list139 = iprot.readListBegin();
+                this.success = new ArrayList<NoteVersionId>(_list139.size);
+                for (int _i140 = 0; _i140 < _list139.size; ++_i140)
                 {
-                  NoteVersionId _elem129;
-                  _elem129 = new NoteVersionId();
-                  _elem129.read(iprot);
-                  this.success.add(_elem129);
+                  NoteVersionId _elem141;
+                  _elem141 = new NoteVersionId();
+                  _elem141.read(iprot);
+                  this.success.add(_elem141);
                 }
                 iprot.readListEnd();
               }
@@ -47602,9 +47691,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (NoteVersionId _iter130 : this.success)
+          for (NoteVersionId _iter142 : this.success)
           {
-            _iter130.write(oprot);
+            _iter142.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -61196,14 +61285,14 @@ public void read(TProtocol iprot) throws TException {
           case 0: // SUCCESS
             if (field.type == TType.LIST) {
               {
-                TList _list131 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.Ad>(_list131.size);
-                for (int _i132 = 0; _i132 < _list131.size; ++_i132)
+                TList _list143 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.Ad>(_list143.size);
+                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
                 {
-                  com.evernote.edam.type.Ad _elem133;
-                  _elem133 = new com.evernote.edam.type.Ad();
-                  _elem133.read(iprot);
-                  this.success.add(_elem133);
+                  com.evernote.edam.type.Ad _elem145;
+                  _elem145 = new com.evernote.edam.type.Ad();
+                  _elem145.read(iprot);
+                  this.success.add(_elem145);
                 }
                 iprot.readListEnd();
               }
@@ -61243,9 +61332,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
         {
           oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.Ad _iter134 : this.success)
+          for (com.evernote.edam.type.Ad _iter146 : this.success)
           {
-            _iter134.write(oprot);
+            _iter146.write(oprot);
           }
           oprot.writeListEnd();
         }
@@ -63051,26 +63140,1013 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
-    public com.evernote.edam.type.SharedNotebook getSharedNotebook() {
-      return this.sharedNotebook;
+    public com.evernote.edam.type.SharedNotebook getSharedNotebook() {
+      return this.sharedNotebook;
+    }
+
+    public void setSharedNotebook(com.evernote.edam.type.SharedNotebook sharedNotebook) {
+      this.sharedNotebook = sharedNotebook;
+    }
+
+    public void unsetSharedNotebook() {
+      this.sharedNotebook = null;
+    }
+
+    /** Returns true if field sharedNotebook is set (has been asigned a value) and false otherwise */
+    public boolean isSetSharedNotebook() {
+      return this.sharedNotebook != null;
+    }
+
+    public void setSharedNotebookIsSet(boolean value) {
+      if (!value) {
+        this.sharedNotebook = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case AUTHENTICATION_TOKEN:
+        if (value == null) {
+          unsetAuthenticationToken();
+        } else {
+          setAuthenticationToken((String)value);
+        }
+        break;
+
+      case SHARED_NOTEBOOK:
+        if (value == null) {
+          unsetSharedNotebook();
+        } else {
+          setSharedNotebook((com.evernote.edam.type.SharedNotebook)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case AUTHENTICATION_TOKEN:
+        return getAuthenticationToken();
+
+      case SHARED_NOTEBOOK:
+        return getSharedNotebook();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case AUTHENTICATION_TOKEN:
+        return isSetAuthenticationToken();
+      case SHARED_NOTEBOOK:
+        return isSetSharedNotebook();
+      }
+      throw new IllegalStateException();
+    }
+
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof createSharedNotebook_args)
+        return this.equals((createSharedNotebook_args)that);
+      return false;
+    }
+
+    public boolean equals(createSharedNotebook_args that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
+      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
+      if (this_present_authenticationToken || that_present_authenticationToken) {
+        if (!(this_present_authenticationToken && that_present_authenticationToken))
+          return false;
+        if (!this.authenticationToken.equals(that.authenticationToken))
+          return false;
+      }
+
+      boolean this_present_sharedNotebook = true && this.isSetSharedNotebook();
+      boolean that_present_sharedNotebook = true && that.isSetSharedNotebook();
+      if (this_present_sharedNotebook || that_present_sharedNotebook) {
+        if (!(this_present_sharedNotebook && that_present_sharedNotebook))
+          return false;
+        if (!this.sharedNotebook.equals(that.sharedNotebook))
+          return false;
+      }
+
+      return true;
+    }
+
+    public int hashCode() {
+      return 0;
+    }
+
+    public int compareTo(createSharedNotebook_args other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      createSharedNotebook_args typedOther = (createSharedNotebook_args)other;
+
+      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetSharedNotebook()).compareTo(typedOther.isSetSharedNotebook());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSharedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebook, typedOther.sharedNotebook);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(TProtocol iprot) throws TException {
+      TField field;
+      iprot.readStructBegin();
+      while (true)
+      {
+        field = iprot.readFieldBegin();
+        if (field.type == TType.STOP) { 
+          break;
+        }
+        switch (field.id) {
+          case 1: // AUTHENTICATION_TOKEN
+            if (field.type == TType.STRING) {
+              this.authenticationToken = iprot.readString();
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 2: // SHARED_NOTEBOOK
+            if (field.type == TType.STRUCT) {
+              this.sharedNotebook = new com.evernote.edam.type.SharedNotebook();
+              this.sharedNotebook.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      validate();
+    }
+
+    public void write(TProtocol oprot) throws TException {
+      validate();
+
+      oprot.writeStructBegin(STRUCT_DESC);
+      if (this.authenticationToken != null) {
+        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
+        oprot.writeString(this.authenticationToken);
+        oprot.writeFieldEnd();
+      }
+      if (this.sharedNotebook != null) {
+        oprot.writeFieldBegin(SHARED_NOTEBOOK_FIELD_DESC);
+        this.sharedNotebook.write(oprot);
+        oprot.writeFieldEnd();
+      }
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+    public String toString() {
+      StringBuilder sb = new StringBuilder("createSharedNotebook_args(");
+      boolean first = true;
+
+      sb.append("authenticationToken:");
+      if (this.authenticationToken == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.authenticationToken);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("sharedNotebook:");
+      if (this.sharedNotebook == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.sharedNotebook);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws TException {
+      // check for required fields
+    }
+
+  }
+
+  public static class createSharedNotebook_result implements TBase<createSharedNotebook_result, createSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_result");
+
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
+    private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
+    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
+    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
+
+    private com.evernote.edam.type.SharedNotebook success;
+    private com.evernote.edam.error.EDAMUserException userException;
+    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
+    private com.evernote.edam.error.EDAMSystemException systemException;
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements TFieldIdEnum {
+      SUCCESS((short)0, "success"),
+      USER_EXCEPTION((short)1, "userException"),
+      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
+      SYSTEM_EXCEPTION((short)3, "systemException");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
+          case 1: // USER_EXCEPTION
+            return USER_EXCEPTION;
+          case 2: // NOT_FOUND_EXCEPTION
+            return NOT_FOUND_EXCEPTION;
+          case 3: // SYSTEM_EXCEPTION
+            return SYSTEM_EXCEPTION;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+
+    public static final Map<_Fields, FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
+      tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
+      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
+      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      FieldMetaData.addStructMetaDataMap(createSharedNotebook_result.class, metaDataMap);
+    }
+
+    public createSharedNotebook_result() {
+    }
+
+    public createSharedNotebook_result(
+      com.evernote.edam.type.SharedNotebook success,
+      com.evernote.edam.error.EDAMUserException userException,
+      com.evernote.edam.error.EDAMNotFoundException notFoundException,
+      com.evernote.edam.error.EDAMSystemException systemException)
+    {
+      this();
+      this.success = success;
+      this.userException = userException;
+      this.notFoundException = notFoundException;
+      this.systemException = systemException;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public createSharedNotebook_result(createSharedNotebook_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
+      }
+      if (other.isSetUserException()) {
+        this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
+      }
+      if (other.isSetNotFoundException()) {
+        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
+      }
+      if (other.isSetSystemException()) {
+        this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
+      }
+    }
+
+    public createSharedNotebook_result deepCopy() {
+      return new createSharedNotebook_result(this);
+    }
+
+    public void clear() {
+      this.success = null;
+      this.userException = null;
+      this.notFoundException = null;
+      this.systemException = null;
+    }
+
+    public com.evernote.edam.type.SharedNotebook getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been asigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
+    public com.evernote.edam.error.EDAMUserException getUserException() {
+      return this.userException;
+    }
+
+    public void setUserException(com.evernote.edam.error.EDAMUserException userException) {
+      this.userException = userException;
+    }
+
+    public void unsetUserException() {
+      this.userException = null;
+    }
+
+    /** Returns true if field userException is set (has been asigned a value) and false otherwise */
+    public boolean isSetUserException() {
+      return this.userException != null;
+    }
+
+    public void setUserExceptionIsSet(boolean value) {
+      if (!value) {
+        this.userException = null;
+      }
+    }
+
+    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
+      return this.notFoundException;
+    }
+
+    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
+      this.notFoundException = notFoundException;
+    }
+
+    public void unsetNotFoundException() {
+      this.notFoundException = null;
+    }
+
+    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
+    public boolean isSetNotFoundException() {
+      return this.notFoundException != null;
+    }
+
+    public void setNotFoundExceptionIsSet(boolean value) {
+      if (!value) {
+        this.notFoundException = null;
+      }
+    }
+
+    public com.evernote.edam.error.EDAMSystemException getSystemException() {
+      return this.systemException;
+    }
+
+    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
+      this.systemException = systemException;
+    }
+
+    public void unsetSystemException() {
+      this.systemException = null;
+    }
+
+    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
+    public boolean isSetSystemException() {
+      return this.systemException != null;
+    }
+
+    public void setSystemExceptionIsSet(boolean value) {
+      if (!value) {
+        this.systemException = null;
+      }
+    }
+
+    public void setFieldValue(_Fields field, Object value) {
+      switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((com.evernote.edam.type.SharedNotebook)value);
+        }
+        break;
+
+      case USER_EXCEPTION:
+        if (value == null) {
+          unsetUserException();
+        } else {
+          setUserException((com.evernote.edam.error.EDAMUserException)value);
+        }
+        break;
+
+      case NOT_FOUND_EXCEPTION:
+        if (value == null) {
+          unsetNotFoundException();
+        } else {
+          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
+        }
+        break;
+
+      case SYSTEM_EXCEPTION:
+        if (value == null) {
+          unsetSystemException();
+        } else {
+          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
+        }
+        break;
+
+      }
+    }
+
+    public Object getFieldValue(_Fields field) {
+      switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
+      case USER_EXCEPTION:
+        return getUserException();
+
+      case NOT_FOUND_EXCEPTION:
+        return getNotFoundException();
+
+      case SYSTEM_EXCEPTION:
+        return getSystemException();
+
+      }
+      throw new IllegalStateException();
+    }
+
+    /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
+    public boolean isSet(_Fields field) {
+      if (field == null) {
+        throw new IllegalArgumentException();
+      }
+
+      switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
+      case USER_EXCEPTION:
+        return isSetUserException();
+      case NOT_FOUND_EXCEPTION:
+        return isSetNotFoundException();
+      case SYSTEM_EXCEPTION:
+        return isSetSystemException();
+      }
+      throw new IllegalStateException();
+    }
+
+    public boolean equals(Object that) {
+      if (that == null)
+        return false;
+      if (that instanceof createSharedNotebook_result)
+        return this.equals((createSharedNotebook_result)that);
+      return false;
+    }
+
+    public boolean equals(createSharedNotebook_result that) {
+      if (that == null)
+        return false;
+
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
+      boolean this_present_userException = true && this.isSetUserException();
+      boolean that_present_userException = true && that.isSetUserException();
+      if (this_present_userException || that_present_userException) {
+        if (!(this_present_userException && that_present_userException))
+          return false;
+        if (!this.userException.equals(that.userException))
+          return false;
+      }
+
+      boolean this_present_notFoundException = true && this.isSetNotFoundException();
+      boolean that_present_notFoundException = true && that.isSetNotFoundException();
+      if (this_present_notFoundException || that_present_notFoundException) {
+        if (!(this_present_notFoundException && that_present_notFoundException))
+          return false;
+        if (!this.notFoundException.equals(that.notFoundException))
+          return false;
+      }
+
+      boolean this_present_systemException = true && this.isSetSystemException();
+      boolean that_present_systemException = true && that.isSetSystemException();
+      if (this_present_systemException || that_present_systemException) {
+        if (!(this_present_systemException && that_present_systemException))
+          return false;
+        if (!this.systemException.equals(that.systemException))
+          return false;
+      }
+
+      return true;
+    }
+
+    public int hashCode() {
+      return 0;
+    }
+
+    public int compareTo(createSharedNotebook_result other) {
+      if (!getClass().equals(other.getClass())) {
+        return getClass().getName().compareTo(other.getClass().getName());
+      }
+
+      int lastComparison = 0;
+      createSharedNotebook_result typedOther = (createSharedNotebook_result)other;
+
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetUserException()) {        lastComparison = TBaseHelper.compareTo(this.userException, typedOther.userException);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      return 0;
+    }
+
+    public _Fields fieldForId(int fieldId) {
+      return _Fields.findByThriftId(fieldId);
+    }
+
+    public void read(TProtocol iprot) throws TException {
+      TField field;
+      iprot.readStructBegin();
+      while (true)
+      {
+        field = iprot.readFieldBegin();
+        if (field.type == TType.STOP) { 
+          break;
+        }
+        switch (field.id) {
+          case 0: // SUCCESS
+            if (field.type == TType.STRUCT) {
+              this.success = new com.evernote.edam.type.SharedNotebook();
+              this.success.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 1: // USER_EXCEPTION
+            if (field.type == TType.STRUCT) {
+              this.userException = new com.evernote.edam.error.EDAMUserException();
+              this.userException.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 2: // NOT_FOUND_EXCEPTION
+            if (field.type == TType.STRUCT) {
+              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
+              this.notFoundException.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 3: // SYSTEM_EXCEPTION
+            if (field.type == TType.STRUCT) {
+              this.systemException = new com.evernote.edam.error.EDAMSystemException();
+              this.systemException.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          default:
+            TProtocolUtil.skip(iprot, field.type);
+        }
+        iprot.readFieldEnd();
+      }
+      iprot.readStructEnd();
+      validate();
+    }
+
+    public void write(TProtocol oprot) throws TException {
+      oprot.writeStructBegin(STRUCT_DESC);
+
+      if (this.isSetSuccess()) {
+        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+        this.success.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetUserException()) {
+        oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
+        this.userException.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetNotFoundException()) {
+        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
+        this.notFoundException.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetSystemException()) {
+        oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
+        this.systemException.write(oprot);
+        oprot.writeFieldEnd();
+      }
+      oprot.writeFieldStop();
+      oprot.writeStructEnd();
+    }
+
+    public String toString() {
+      StringBuilder sb = new StringBuilder("createSharedNotebook_result(");
+      boolean first = true;
+
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("userException:");
+      if (this.userException == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.userException);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("notFoundException:");
+      if (this.notFoundException == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.notFoundException);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("systemException:");
+      if (this.systemException == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.systemException);
+      }
+      first = false;
+      sb.append(")");
+      return sb.toString();
+    }
+
+    public void validate() throws TException {
+      // check for required fields
+    }
+
+  }
+
+  public static class sendMessageToSharedNotebookMembers_args implements TBase<sendMessageToSharedNotebookMembers_args, sendMessageToSharedNotebookMembers_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_args");
+
+    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
+    private static final TField NOTEBOOK_GUID_FIELD_DESC = new TField("notebookGuid", TType.STRING, (short)2);
+    private static final TField MESSAGE_TEXT_FIELD_DESC = new TField("messageText", TType.STRING, (short)3);
+    private static final TField RECIPIENTS_FIELD_DESC = new TField("recipients", TType.LIST, (short)4);
+
+    private String authenticationToken;
+    private String notebookGuid;
+    private String messageText;
+    private List<String> recipients;
+
+    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+    public enum _Fields implements TFieldIdEnum {
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
+      NOTEBOOK_GUID((short)2, "notebookGuid"),
+      MESSAGE_TEXT((short)3, "messageText"),
+      RECIPIENTS((short)4, "recipients");
+
+      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+      static {
+        for (_Fields field : EnumSet.allOf(_Fields.class)) {
+          byName.put(field.getFieldName(), field);
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, or null if its not found.
+       */
+      public static _Fields findByThriftId(int fieldId) {
+        switch(fieldId) {
+          case 1: // AUTHENTICATION_TOKEN
+            return AUTHENTICATION_TOKEN;
+          case 2: // NOTEBOOK_GUID
+            return NOTEBOOK_GUID;
+          case 3: // MESSAGE_TEXT
+            return MESSAGE_TEXT;
+          case 4: // RECIPIENTS
+            return RECIPIENTS;
+          default:
+            return null;
+        }
+      }
+
+      /**
+       * Find the _Fields constant that matches fieldId, throwing an exception
+       * if it is not found.
+       */
+      public static _Fields findByThriftIdOrThrow(int fieldId) {
+        _Fields fields = findByThriftId(fieldId);
+        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+        return fields;
+      }
+
+      /**
+       * Find the _Fields constant that matches name, or null if its not found.
+       */
+      public static _Fields findByName(String name) {
+        return byName.get(name);
+      }
+
+      private final short _thriftId;
+      private final String _fieldName;
+
+      _Fields(short thriftId, String fieldName) {
+        _thriftId = thriftId;
+        _fieldName = fieldName;
+      }
+
+      public short getThriftFieldId() {
+        return _thriftId;
+      }
+
+      public String getFieldName() {
+        return _fieldName;
+      }
+    }
+
+    // isset id assignments
+
+    public static final Map<_Fields, FieldMetaData> metaDataMap;
+    static {
+      Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.NOTEBOOK_GUID, new FieldMetaData("notebookGuid", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING          , "Guid")));
+      tmpMap.put(_Fields.MESSAGE_TEXT, new FieldMetaData("messageText", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.RECIPIENTS, new FieldMetaData("recipients", TFieldRequirementType.DEFAULT, 
+          new ListMetaData(TType.LIST, 
+              new FieldValueMetaData(TType.STRING))));
+      metaDataMap = Collections.unmodifiableMap(tmpMap);
+      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_args.class, metaDataMap);
+    }
+
+    public sendMessageToSharedNotebookMembers_args() {
+    }
+
+    public sendMessageToSharedNotebookMembers_args(
+      String authenticationToken,
+      String notebookGuid,
+      String messageText,
+      List<String> recipients)
+    {
+      this();
+      this.authenticationToken = authenticationToken;
+      this.notebookGuid = notebookGuid;
+      this.messageText = messageText;
+      this.recipients = recipients;
+    }
+
+    /**
+     * Performs a deep copy on <i>other</i>.
+     */
+    public sendMessageToSharedNotebookMembers_args(sendMessageToSharedNotebookMembers_args other) {
+      if (other.isSetAuthenticationToken()) {
+        this.authenticationToken = other.authenticationToken;
+      }
+      if (other.isSetNotebookGuid()) {
+        this.notebookGuid = other.notebookGuid;
+      }
+      if (other.isSetMessageText()) {
+        this.messageText = other.messageText;
+      }
+      if (other.isSetRecipients()) {
+        List<String> __this__recipients = new ArrayList<String>();
+        for (String other_element : other.recipients) {
+          __this__recipients.add(other_element);
+        }
+        this.recipients = __this__recipients;
+      }
+    }
+
+    public sendMessageToSharedNotebookMembers_args deepCopy() {
+      return new sendMessageToSharedNotebookMembers_args(this);
+    }
+
+    public void clear() {
+      this.authenticationToken = null;
+      this.notebookGuid = null;
+      this.messageText = null;
+      this.recipients = null;
+    }
+
+    public String getAuthenticationToken() {
+      return this.authenticationToken;
+    }
+
+    public void setAuthenticationToken(String authenticationToken) {
+      this.authenticationToken = authenticationToken;
+    }
+
+    public void unsetAuthenticationToken() {
+      this.authenticationToken = null;
+    }
+
+    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
+    public boolean isSetAuthenticationToken() {
+      return this.authenticationToken != null;
+    }
+
+    public void setAuthenticationTokenIsSet(boolean value) {
+      if (!value) {
+        this.authenticationToken = null;
+      }
+    }
+
+    public String getNotebookGuid() {
+      return this.notebookGuid;
     }
 
-    public void setSharedNotebook(com.evernote.edam.type.SharedNotebook sharedNotebook) {
-      this.sharedNotebook = sharedNotebook;
+    public void setNotebookGuid(String notebookGuid) {
+      this.notebookGuid = notebookGuid;
     }
 
-    public void unsetSharedNotebook() {
-      this.sharedNotebook = null;
+    public void unsetNotebookGuid() {
+      this.notebookGuid = null;
     }
 
-    /** Returns true if field sharedNotebook is set (has been asigned a value) and false otherwise */
-    public boolean isSetSharedNotebook() {
-      return this.sharedNotebook != null;
+    /** Returns true if field notebookGuid is set (has been asigned a value) and false otherwise */
+    public boolean isSetNotebookGuid() {
+      return this.notebookGuid != null;
     }
 
-    public void setSharedNotebookIsSet(boolean value) {
+    public void setNotebookGuidIsSet(boolean value) {
       if (!value) {
-        this.sharedNotebook = null;
+        this.notebookGuid = null;
+      }
+    }
+
+    public String getMessageText() {
+      return this.messageText;
+    }
+
+    public void setMessageText(String messageText) {
+      this.messageText = messageText;
+    }
+
+    public void unsetMessageText() {
+      this.messageText = null;
+    }
+
+    /** Returns true if field messageText is set (has been asigned a value) and false otherwise */
+    public boolean isSetMessageText() {
+      return this.messageText != null;
+    }
+
+    public void setMessageTextIsSet(boolean value) {
+      if (!value) {
+        this.messageText = null;
+      }
+    }
+
+    public int getRecipientsSize() {
+      return (this.recipients == null) ? 0 : this.recipients.size();
+    }
+
+    public java.util.Iterator<String> getRecipientsIterator() {
+      return (this.recipients == null) ? null : this.recipients.iterator();
+    }
+
+    public void addToRecipients(String elem) {
+      if (this.recipients == null) {
+        this.recipients = new ArrayList<String>();
+      }
+      this.recipients.add(elem);
+    }
+
+    public List<String> getRecipients() {
+      return this.recipients;
+    }
+
+    public void setRecipients(List<String> recipients) {
+      this.recipients = recipients;
+    }
+
+    public void unsetRecipients() {
+      this.recipients = null;
+    }
+
+    /** Returns true if field recipients is set (has been asigned a value) and false otherwise */
+    public boolean isSetRecipients() {
+      return this.recipients != null;
+    }
+
+    public void setRecipientsIsSet(boolean value) {
+      if (!value) {
+        this.recipients = null;
       }
     }
 
@@ -63084,11 +64160,27 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case SHARED_NOTEBOOK:
+      case NOTEBOOK_GUID:
         if (value == null) {
-          unsetSharedNotebook();
+          unsetNotebookGuid();
         } else {
-          setSharedNotebook((com.evernote.edam.type.SharedNotebook)value);
+          setNotebookGuid((String)value);
+        }
+        break;
+
+      case MESSAGE_TEXT:
+        if (value == null) {
+          unsetMessageText();
+        } else {
+          setMessageText((String)value);
+        }
+        break;
+
+      case RECIPIENTS:
+        if (value == null) {
+          unsetRecipients();
+        } else {
+          setRecipients((List<String>)value);
         }
         break;
 
@@ -63100,8 +64192,14 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case SHARED_NOTEBOOK:
-        return getSharedNotebook();
+      case NOTEBOOK_GUID:
+        return getNotebookGuid();
+
+      case MESSAGE_TEXT:
+        return getMessageText();
+
+      case RECIPIENTS:
+        return getRecipients();
 
       }
       throw new IllegalStateException();
@@ -63116,8 +64214,12 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case SHARED_NOTEBOOK:
-        return isSetSharedNotebook();
+      case NOTEBOOK_GUID:
+        return isSetNotebookGuid();
+      case MESSAGE_TEXT:
+        return isSetMessageText();
+      case RECIPIENTS:
+        return isSetRecipients();
       }
       throw new IllegalStateException();
     }
@@ -63125,12 +64227,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createSharedNotebook_args)
-        return this.equals((createSharedNotebook_args)that);
+      if (that instanceof sendMessageToSharedNotebookMembers_args)
+        return this.equals((sendMessageToSharedNotebookMembers_args)that);
       return false;
     }
 
-    public boolean equals(createSharedNotebook_args that) {
+    public boolean equals(sendMessageToSharedNotebookMembers_args that) {
       if (that == null)
         return false;
 
@@ -63143,12 +64245,30 @@ public boolean equals(createSharedNotebook_args that) {
           return false;
       }
 
-      boolean this_present_sharedNotebook = true && this.isSetSharedNotebook();
-      boolean that_present_sharedNotebook = true && that.isSetSharedNotebook();
-      if (this_present_sharedNotebook || that_present_sharedNotebook) {
-        if (!(this_present_sharedNotebook && that_present_sharedNotebook))
+      boolean this_present_notebookGuid = true && this.isSetNotebookGuid();
+      boolean that_present_notebookGuid = true && that.isSetNotebookGuid();
+      if (this_present_notebookGuid || that_present_notebookGuid) {
+        if (!(this_present_notebookGuid && that_present_notebookGuid))
           return false;
-        if (!this.sharedNotebook.equals(that.sharedNotebook))
+        if (!this.notebookGuid.equals(that.notebookGuid))
+          return false;
+      }
+
+      boolean this_present_messageText = true && this.isSetMessageText();
+      boolean that_present_messageText = true && that.isSetMessageText();
+      if (this_present_messageText || that_present_messageText) {
+        if (!(this_present_messageText && that_present_messageText))
+          return false;
+        if (!this.messageText.equals(that.messageText))
+          return false;
+      }
+
+      boolean this_present_recipients = true && this.isSetRecipients();
+      boolean that_present_recipients = true && that.isSetRecipients();
+      if (this_present_recipients || that_present_recipients) {
+        if (!(this_present_recipients && that_present_recipients))
+          return false;
+        if (!this.recipients.equals(that.recipients))
           return false;
       }
 
@@ -63159,13 +64279,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(createSharedNotebook_args other) {
+    public int compareTo(sendMessageToSharedNotebookMembers_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createSharedNotebook_args typedOther = (createSharedNotebook_args)other;
+      sendMessageToSharedNotebookMembers_args typedOther = (sendMessageToSharedNotebookMembers_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -63176,11 +64296,29 @@ public int compareTo(createSharedNotebook_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetSharedNotebook()).compareTo(typedOther.isSetSharedNotebook());
+      lastComparison = Boolean.valueOf(isSetNotebookGuid()).compareTo(typedOther.isSetNotebookGuid());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetSharedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebook, typedOther.sharedNotebook);
+      if (isSetNotebookGuid()) {        lastComparison = TBaseHelper.compareTo(this.notebookGuid, typedOther.notebookGuid);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetMessageText()).compareTo(typedOther.isSetMessageText());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetMessageText()) {        lastComparison = TBaseHelper.compareTo(this.messageText, typedOther.messageText);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetRecipients()).compareTo(typedOther.isSetRecipients());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetRecipients()) {        lastComparison = TBaseHelper.compareTo(this.recipients, typedOther.recipients);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -63209,10 +64347,33 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // SHARED_NOTEBOOK
-            if (field.type == TType.STRUCT) {
-              this.sharedNotebook = new com.evernote.edam.type.SharedNotebook();
-              this.sharedNotebook.read(iprot);
+          case 2: // NOTEBOOK_GUID
+            if (field.type == TType.STRING) {
+              this.notebookGuid = iprot.readString();
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 3: // MESSAGE_TEXT
+            if (field.type == TType.STRING) {
+              this.messageText = iprot.readString();
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 4: // RECIPIENTS
+            if (field.type == TType.LIST) {
+              {
+                TList _list147 = iprot.readListBegin();
+                this.recipients = new ArrayList<String>(_list147.size);
+                for (int _i148 = 0; _i148 < _list147.size; ++_i148)
+                {
+                  String _elem149;
+                  _elem149 = iprot.readString();
+                  this.recipients.add(_elem149);
+                }
+                iprot.readListEnd();
+              }
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -63235,9 +64396,26 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.sharedNotebook != null) {
-        oprot.writeFieldBegin(SHARED_NOTEBOOK_FIELD_DESC);
-        this.sharedNotebook.write(oprot);
+      if (this.notebookGuid != null) {
+        oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
+        oprot.writeString(this.notebookGuid);
+        oprot.writeFieldEnd();
+      }
+      if (this.messageText != null) {
+        oprot.writeFieldBegin(MESSAGE_TEXT_FIELD_DESC);
+        oprot.writeString(this.messageText);
+        oprot.writeFieldEnd();
+      }
+      if (this.recipients != null) {
+        oprot.writeFieldBegin(RECIPIENTS_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.STRING, this.recipients.size()));
+          for (String _iter150 : this.recipients)
+          {
+            oprot.writeString(_iter150);
+          }
+          oprot.writeListEnd();
+        }
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -63245,7 +64423,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("createSharedNotebook_args(");
+      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -63256,11 +64434,27 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("sharedNotebook:");
-      if (this.sharedNotebook == null) {
+      sb.append("notebookGuid:");
+      if (this.notebookGuid == null) {
         sb.append("null");
       } else {
-        sb.append(this.sharedNotebook);
+        sb.append(this.notebookGuid);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("messageText:");
+      if (this.messageText == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.messageText);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("recipients:");
+      if (this.recipients == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.recipients);
       }
       first = false;
       sb.append(")");
@@ -63273,15 +64467,15 @@ public void validate() throws TException {
 
   }
 
-  public static class createSharedNotebook_result implements TBase<createSharedNotebook_result, createSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("createSharedNotebook_result");
+  public static class sendMessageToSharedNotebookMembers_result implements TBase<sendMessageToSharedNotebookMembers_result, sendMessageToSharedNotebookMembers_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private com.evernote.edam.type.SharedNotebook success;
+    private int success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -63354,12 +64548,14 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
+          new FieldValueMetaData(TType.I32)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -63367,20 +64563,21 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(createSharedNotebook_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_result.class, metaDataMap);
     }
 
-    public createSharedNotebook_result() {
+    public sendMessageToSharedNotebookMembers_result() {
     }
 
-    public createSharedNotebook_result(
-      com.evernote.edam.type.SharedNotebook success,
+    public sendMessageToSharedNotebookMembers_result(
+      int success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
+      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -63389,10 +64586,9 @@ public createSharedNotebook_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public createSharedNotebook_result(createSharedNotebook_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
-      }
+    public sendMessageToSharedNotebookMembers_result(sendMessageToSharedNotebookMembers_result other) {
+      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
+      this.success = other.success;
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -63404,38 +64600,38 @@ public createSharedNotebook_result(createSharedNotebook_result other) {
       }
     }
 
-    public createSharedNotebook_result deepCopy() {
-      return new createSharedNotebook_result(this);
+    public sendMessageToSharedNotebookMembers_result deepCopy() {
+      return new sendMessageToSharedNotebookMembers_result(this);
     }
 
     public void clear() {
-      this.success = null;
+      setSuccessIsSet(false);
+      this.success = 0;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public com.evernote.edam.type.SharedNotebook getSuccess() {
+    public int getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
+    public void setSuccess(int success) {
       this.success = success;
+      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      this.success = null;
+      __isset_vector[__SUCCESS_ISSET_ID] = false;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return this.success != null;
+      return __isset_vector[__SUCCESS_ISSET_ID];
     }
 
     public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+      __isset_vector[__SUCCESS_ISSET_ID] = value;
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -63513,7 +64709,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((com.evernote.edam.type.SharedNotebook)value);
+          setSuccess((Integer)value);
         }
         break;
 
@@ -63547,7 +64743,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return getSuccess();
+        return new Integer(getSuccess());
 
       case USER_EXCEPTION:
         return getUserException();
@@ -63584,21 +64780,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createSharedNotebook_result)
-        return this.equals((createSharedNotebook_result)that);
+      if (that instanceof sendMessageToSharedNotebookMembers_result)
+        return this.equals((sendMessageToSharedNotebookMembers_result)that);
       return false;
     }
 
-    public boolean equals(createSharedNotebook_result that) {
+    public boolean equals(sendMessageToSharedNotebookMembers_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -63636,13 +64832,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(createSharedNotebook_result other) {
+    public int compareTo(sendMessageToSharedNotebookMembers_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createSharedNotebook_result typedOther = (createSharedNotebook_result)other;
+      sendMessageToSharedNotebookMembers_result typedOther = (sendMessageToSharedNotebookMembers_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -63698,9 +64894,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.STRUCT) {
-              this.success = new com.evernote.edam.type.SharedNotebook();
-              this.success.read(iprot);
+            if (field.type == TType.I32) {
+              this.success = iprot.readI32();
+              setSuccessIsSet(true);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -63743,7 +64939,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        this.success.write(oprot);
+        oprot.writeI32(this.success);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -63763,15 +64959,11 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("createSharedNotebook_result(");
+      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
+      sb.append(this.success);
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -63807,25 +64999,16 @@ public void validate() throws TException {
 
   }
 
-  public static class sendMessageToSharedNotebookMembers_args implements TBase<sendMessageToSharedNotebookMembers_args, sendMessageToSharedNotebookMembers_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_args");
+  public static class listSharedNotebooks_args implements TBase<listSharedNotebooks_args, listSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField NOTEBOOK_GUID_FIELD_DESC = new TField("notebookGuid", TType.STRING, (short)2);
-    private static final TField MESSAGE_TEXT_FIELD_DESC = new TField("messageText", TType.STRING, (short)3);
-    private static final TField RECIPIENTS_FIELD_DESC = new TField("recipients", TType.LIST, (short)4);
 
     private String authenticationToken;
-    private String notebookGuid;
-    private String messageText;
-    private List<String> recipients;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      NOTEBOOK_GUID((short)2, "notebookGuid"),
-      MESSAGE_TEXT((short)3, "messageText"),
-      RECIPIENTS((short)4, "recipients");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -63842,12 +65025,6 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
-          case 2: // NOTEBOOK_GUID
-            return NOTEBOOK_GUID;
-          case 3: // MESSAGE_TEXT
-            return MESSAGE_TEXT;
-          case 4: // RECIPIENTS
-            return RECIPIENTS;
           default:
             return null;
         }
@@ -63894,64 +65071,35 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.NOTEBOOK_GUID, new FieldMetaData("notebookGuid", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING          , "Guid")));
-      tmpMap.put(_Fields.MESSAGE_TEXT, new FieldMetaData("messageText", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.RECIPIENTS, new FieldMetaData("recipients", TFieldRequirementType.DEFAULT, 
-          new ListMetaData(TType.LIST, 
-              new FieldValueMetaData(TType.STRING))));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_args.class, metaDataMap);
     }
 
-    public sendMessageToSharedNotebookMembers_args() {
+    public listSharedNotebooks_args() {
     }
 
-    public sendMessageToSharedNotebookMembers_args(
-      String authenticationToken,
-      String notebookGuid,
-      String messageText,
-      List<String> recipients)
+    public listSharedNotebooks_args(
+      String authenticationToken)
     {
       this();
       this.authenticationToken = authenticationToken;
-      this.notebookGuid = notebookGuid;
-      this.messageText = messageText;
-      this.recipients = recipients;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public sendMessageToSharedNotebookMembers_args(sendMessageToSharedNotebookMembers_args other) {
+    public listSharedNotebooks_args(listSharedNotebooks_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetNotebookGuid()) {
-        this.notebookGuid = other.notebookGuid;
-      }
-      if (other.isSetMessageText()) {
-        this.messageText = other.messageText;
-      }
-      if (other.isSetRecipients()) {
-        List<String> __this__recipients = new ArrayList<String>();
-        for (String other_element : other.recipients) {
-          __this__recipients.add(other_element);
-        }
-        this.recipients = __this__recipients;
-      }
     }
 
-    public sendMessageToSharedNotebookMembers_args deepCopy() {
-      return new sendMessageToSharedNotebookMembers_args(this);
+    public listSharedNotebooks_args deepCopy() {
+      return new listSharedNotebooks_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
-      this.notebookGuid = null;
-      this.messageText = null;
-      this.recipients = null;
     }
 
     public String getAuthenticationToken() {
@@ -63977,90 +65125,6 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
-    public String getNotebookGuid() {
-      return this.notebookGuid;
-    }
-
-    public void setNotebookGuid(String notebookGuid) {
-      this.notebookGuid = notebookGuid;
-    }
-
-    public void unsetNotebookGuid() {
-      this.notebookGuid = null;
-    }
-
-    /** Returns true if field notebookGuid is set (has been asigned a value) and false otherwise */
-    public boolean isSetNotebookGuid() {
-      return this.notebookGuid != null;
-    }
-
-    public void setNotebookGuidIsSet(boolean value) {
-      if (!value) {
-        this.notebookGuid = null;
-      }
-    }
-
-    public String getMessageText() {
-      return this.messageText;
-    }
-
-    public void setMessageText(String messageText) {
-      this.messageText = messageText;
-    }
-
-    public void unsetMessageText() {
-      this.messageText = null;
-    }
-
-    /** Returns true if field messageText is set (has been asigned a value) and false otherwise */
-    public boolean isSetMessageText() {
-      return this.messageText != null;
-    }
-
-    public void setMessageTextIsSet(boolean value) {
-      if (!value) {
-        this.messageText = null;
-      }
-    }
-
-    public int getRecipientsSize() {
-      return (this.recipients == null) ? 0 : this.recipients.size();
-    }
-
-    public java.util.Iterator<String> getRecipientsIterator() {
-      return (this.recipients == null) ? null : this.recipients.iterator();
-    }
-
-    public void addToRecipients(String elem) {
-      if (this.recipients == null) {
-        this.recipients = new ArrayList<String>();
-      }
-      this.recipients.add(elem);
-    }
-
-    public List<String> getRecipients() {
-      return this.recipients;
-    }
-
-    public void setRecipients(List<String> recipients) {
-      this.recipients = recipients;
-    }
-
-    public void unsetRecipients() {
-      this.recipients = null;
-    }
-
-    /** Returns true if field recipients is set (has been asigned a value) and false otherwise */
-    public boolean isSetRecipients() {
-      return this.recipients != null;
-    }
-
-    public void setRecipientsIsSet(boolean value) {
-      if (!value) {
-        this.recipients = null;
-      }
-    }
-
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
@@ -64071,30 +65135,6 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case NOTEBOOK_GUID:
-        if (value == null) {
-          unsetNotebookGuid();
-        } else {
-          setNotebookGuid((String)value);
-        }
-        break;
-
-      case MESSAGE_TEXT:
-        if (value == null) {
-          unsetMessageText();
-        } else {
-          setMessageText((String)value);
-        }
-        break;
-
-      case RECIPIENTS:
-        if (value == null) {
-          unsetRecipients();
-        } else {
-          setRecipients((List<String>)value);
-        }
-        break;
-
       }
     }
 
@@ -64103,15 +65143,6 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case NOTEBOOK_GUID:
-        return getNotebookGuid();
-
-      case MESSAGE_TEXT:
-        return getMessageText();
-
-      case RECIPIENTS:
-        return getRecipients();
-
       }
       throw new IllegalStateException();
     }
@@ -64125,12 +65156,6 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case NOTEBOOK_GUID:
-        return isSetNotebookGuid();
-      case MESSAGE_TEXT:
-        return isSetMessageText();
-      case RECIPIENTS:
-        return isSetRecipients();
       }
       throw new IllegalStateException();
     }
@@ -64138,12 +65163,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof sendMessageToSharedNotebookMembers_args)
-        return this.equals((sendMessageToSharedNotebookMembers_args)that);
+      if (that instanceof listSharedNotebooks_args)
+        return this.equals((listSharedNotebooks_args)that);
       return false;
     }
 
-    public boolean equals(sendMessageToSharedNotebookMembers_args that) {
+    public boolean equals(listSharedNotebooks_args that) {
       if (that == null)
         return false;
 
@@ -64156,33 +65181,6 @@ public boolean equals(sendMessageToSharedNotebookMembers_args that) {
           return false;
       }
 
-      boolean this_present_notebookGuid = true && this.isSetNotebookGuid();
-      boolean that_present_notebookGuid = true && that.isSetNotebookGuid();
-      if (this_present_notebookGuid || that_present_notebookGuid) {
-        if (!(this_present_notebookGuid && that_present_notebookGuid))
-          return false;
-        if (!this.notebookGuid.equals(that.notebookGuid))
-          return false;
-      }
-
-      boolean this_present_messageText = true && this.isSetMessageText();
-      boolean that_present_messageText = true && that.isSetMessageText();
-      if (this_present_messageText || that_present_messageText) {
-        if (!(this_present_messageText && that_present_messageText))
-          return false;
-        if (!this.messageText.equals(that.messageText))
-          return false;
-      }
-
-      boolean this_present_recipients = true && this.isSetRecipients();
-      boolean that_present_recipients = true && that.isSetRecipients();
-      if (this_present_recipients || that_present_recipients) {
-        if (!(this_present_recipients && that_present_recipients))
-          return false;
-        if (!this.recipients.equals(that.recipients))
-          return false;
-      }
-
       return true;
     }
 
@@ -64190,13 +65188,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(sendMessageToSharedNotebookMembers_args other) {
+    public int compareTo(listSharedNotebooks_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      sendMessageToSharedNotebookMembers_args typedOther = (sendMessageToSharedNotebookMembers_args)other;
+      listSharedNotebooks_args typedOther = (listSharedNotebooks_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -64207,33 +65205,6 @@ public int compareTo(sendMessageToSharedNotebookMembers_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNotebookGuid()).compareTo(typedOther.isSetNotebookGuid());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetNotebookGuid()) {        lastComparison = TBaseHelper.compareTo(this.notebookGuid, typedOther.notebookGuid);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetMessageText()).compareTo(typedOther.isSetMessageText());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetMessageText()) {        lastComparison = TBaseHelper.compareTo(this.messageText, typedOther.messageText);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
-      lastComparison = Boolean.valueOf(isSetRecipients()).compareTo(typedOther.isSetRecipients());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetRecipients()) {        lastComparison = TBaseHelper.compareTo(this.recipients, typedOther.recipients);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -64258,37 +65229,6 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // NOTEBOOK_GUID
-            if (field.type == TType.STRING) {
-              this.notebookGuid = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 3: // MESSAGE_TEXT
-            if (field.type == TType.STRING) {
-              this.messageText = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 4: // RECIPIENTS
-            if (field.type == TType.LIST) {
-              {
-                TList _list135 = iprot.readListBegin();
-                this.recipients = new ArrayList<String>(_list135.size);
-                for (int _i136 = 0; _i136 < _list135.size; ++_i136)
-                {
-                  String _elem137;
-                  _elem137 = iprot.readString();
-                  this.recipients.add(_elem137);
-                }
-                iprot.readListEnd();
-              }
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
         }
@@ -64307,34 +65247,12 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.notebookGuid != null) {
-        oprot.writeFieldBegin(NOTEBOOK_GUID_FIELD_DESC);
-        oprot.writeString(this.notebookGuid);
-        oprot.writeFieldEnd();
-      }
-      if (this.messageText != null) {
-        oprot.writeFieldBegin(MESSAGE_TEXT_FIELD_DESC);
-        oprot.writeString(this.messageText);
-        oprot.writeFieldEnd();
-      }
-      if (this.recipients != null) {
-        oprot.writeFieldBegin(RECIPIENTS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.STRING, this.recipients.size()));
-          for (String _iter138 : this.recipients)
-          {
-            oprot.writeString(_iter138);
-          }
-          oprot.writeListEnd();
-        }
-        oprot.writeFieldEnd();
-      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_args(");
+      StringBuilder sb = new StringBuilder("listSharedNotebooks_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -64344,30 +65262,6 @@ public String toString() {
         sb.append(this.authenticationToken);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("notebookGuid:");
-      if (this.notebookGuid == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.notebookGuid);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("messageText:");
-      if (this.messageText == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.messageText);
-      }
-      first = false;
-      if (!first) sb.append(", ");
-      sb.append("recipients:");
-      if (this.recipients == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.recipients);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -64378,15 +65272,15 @@ public void validate() throws TException {
 
   }
 
-  public static class sendMessageToSharedNotebookMembers_result implements TBase<sendMessageToSharedNotebookMembers_result, sendMessageToSharedNotebookMembers_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToSharedNotebookMembers_result");
+  public static class listSharedNotebooks_result implements TBase<listSharedNotebooks_result, listSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private int success;
+    private List<com.evernote.edam.type.SharedNotebook> success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -64459,14 +65353,13 @@ public String getFieldName() {
     }
 
     // isset id assignments
-    private static final int __SUCCESS_ISSET_ID = 0;
-    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I32)));
+          new ListMetaData(TType.LIST, 
+              new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class))));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -64474,21 +65367,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(sendMessageToSharedNotebookMembers_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_result.class, metaDataMap);
     }
 
-    public sendMessageToSharedNotebookMembers_result() {
+    public listSharedNotebooks_result() {
     }
 
-    public sendMessageToSharedNotebookMembers_result(
-      int success,
+    public listSharedNotebooks_result(
+      List<com.evernote.edam.type.SharedNotebook> success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
-      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -64497,9 +65389,14 @@ public sendMessageToSharedNotebookMembers_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public sendMessageToSharedNotebookMembers_result(sendMessageToSharedNotebookMembers_result other) {
-      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
-      this.success = other.success;
+    public listSharedNotebooks_result(listSharedNotebooks_result other) {
+      if (other.isSetSuccess()) {
+        List<com.evernote.edam.type.SharedNotebook> __this__success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
+        for (com.evernote.edam.type.SharedNotebook other_element : other.success) {
+          __this__success.add(new com.evernote.edam.type.SharedNotebook(other_element));
+        }
+        this.success = __this__success;
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -64511,38 +65408,53 @@ public sendMessageToSharedNotebookMembers_result(sendMessageToSharedNotebookMemb
       }
     }
 
-    public sendMessageToSharedNotebookMembers_result deepCopy() {
-      return new sendMessageToSharedNotebookMembers_result(this);
+    public listSharedNotebooks_result deepCopy() {
+      return new listSharedNotebooks_result(this);
     }
 
     public void clear() {
-      setSuccessIsSet(false);
-      this.success = 0;
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccess() {
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
+    }
+
+    public java.util.Iterator<com.evernote.edam.type.SharedNotebook> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
+    }
+
+    public void addToSuccess(com.evernote.edam.type.SharedNotebook elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
+      }
+      this.success.add(elem);
+    }
+
+    public List<com.evernote.edam.type.SharedNotebook> getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(int success) {
+    public void setSuccess(List<com.evernote.edam.type.SharedNotebook> success) {
       this.success = success;
-      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      __isset_vector[__SUCCESS_ISSET_ID] = false;
+      this.success = null;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_vector[__SUCCESS_ISSET_ID];
+      return this.success != null;
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_vector[__SUCCESS_ISSET_ID] = value;
+      if (!value) {
+        this.success = null;
+      }
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -64620,7 +65532,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Integer)value);
+          setSuccess((List<com.evernote.edam.type.SharedNotebook>)value);
         }
         break;
 
@@ -64654,7 +65566,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return new Integer(getSuccess());
+        return getSuccess();
 
       case USER_EXCEPTION:
         return getUserException();
@@ -64691,21 +65603,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof sendMessageToSharedNotebookMembers_result)
-        return this.equals((sendMessageToSharedNotebookMembers_result)that);
+      if (that instanceof listSharedNotebooks_result)
+        return this.equals((listSharedNotebooks_result)that);
       return false;
     }
 
-    public boolean equals(sendMessageToSharedNotebookMembers_result that) {
+    public boolean equals(listSharedNotebooks_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (this.success != that.success)
+        if (!this.success.equals(that.success))
           return false;
       }
 
@@ -64743,13 +65655,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(sendMessageToSharedNotebookMembers_result other) {
+    public int compareTo(listSharedNotebooks_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      sendMessageToSharedNotebookMembers_result typedOther = (sendMessageToSharedNotebookMembers_result)other;
+      listSharedNotebooks_result typedOther = (listSharedNotebooks_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -64805,9 +65717,19 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.I32) {
-              this.success = iprot.readI32();
-              setSuccessIsSet(true);
+            if (field.type == TType.LIST) {
+              {
+                TList _list151 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>(_list151.size);
+                for (int _i152 = 0; _i152 < _list151.size; ++_i152)
+                {
+                  com.evernote.edam.type.SharedNotebook _elem153;
+                  _elem153 = new com.evernote.edam.type.SharedNotebook();
+                  _elem153.read(iprot);
+                  this.success.add(_elem153);
+                }
+                iprot.readListEnd();
+              }
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -64850,7 +65772,14 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(this.success);
+        {
+          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
+          for (com.evernote.edam.type.SharedNotebook _iter154 : this.success)
+          {
+            _iter154.write(oprot);
+          }
+          oprot.writeListEnd();
+        }
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -64870,11 +65799,15 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("sendMessageToSharedNotebookMembers_result(");
+      StringBuilder sb = new StringBuilder("listSharedNotebooks_result(");
       boolean first = true;
 
       sb.append("success:");
-      sb.append(this.success);
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -64910,16 +65843,19 @@ public void validate() throws TException {
 
   }
 
-  public static class listSharedNotebooks_args implements TBase<listSharedNotebooks_args, listSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_args");
+  public static class expungeSharedNotebooks_args implements TBase<expungeSharedNotebooks_args, expungeSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
+    private static final TField SHARED_NOTEBOOK_IDS_FIELD_DESC = new TField("sharedNotebookIds", TType.LIST, (short)2);
 
     private String authenticationToken;
+    private List<Long> sharedNotebookIds;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
+      SHARED_NOTEBOOK_IDS((short)2, "sharedNotebookIds");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -64936,6 +65872,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
+          case 2: // SHARED_NOTEBOOK_IDS
+            return SHARED_NOTEBOOK_IDS;
           default:
             return null;
         }
@@ -64982,35 +65920,48 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.SHARED_NOTEBOOK_IDS, new FieldMetaData("sharedNotebookIds", TFieldRequirementType.DEFAULT, 
+          new ListMetaData(TType.LIST, 
+              new FieldValueMetaData(TType.I64))));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_args.class, metaDataMap);
     }
 
-    public listSharedNotebooks_args() {
+    public expungeSharedNotebooks_args() {
     }
 
-    public listSharedNotebooks_args(
-      String authenticationToken)
+    public expungeSharedNotebooks_args(
+      String authenticationToken,
+      List<Long> sharedNotebookIds)
     {
       this();
       this.authenticationToken = authenticationToken;
+      this.sharedNotebookIds = sharedNotebookIds;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public listSharedNotebooks_args(listSharedNotebooks_args other) {
+    public expungeSharedNotebooks_args(expungeSharedNotebooks_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
+      if (other.isSetSharedNotebookIds()) {
+        List<Long> __this__sharedNotebookIds = new ArrayList<Long>();
+        for (Long other_element : other.sharedNotebookIds) {
+          __this__sharedNotebookIds.add(other_element);
+        }
+        this.sharedNotebookIds = __this__sharedNotebookIds;
+      }
     }
 
-    public listSharedNotebooks_args deepCopy() {
-      return new listSharedNotebooks_args(this);
+    public expungeSharedNotebooks_args deepCopy() {
+      return new expungeSharedNotebooks_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
+      this.sharedNotebookIds = null;
     }
 
     public String getAuthenticationToken() {
@@ -65036,6 +65987,44 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
+    public int getSharedNotebookIdsSize() {
+      return (this.sharedNotebookIds == null) ? 0 : this.sharedNotebookIds.size();
+    }
+
+    public java.util.Iterator<Long> getSharedNotebookIdsIterator() {
+      return (this.sharedNotebookIds == null) ? null : this.sharedNotebookIds.iterator();
+    }
+
+    public void addToSharedNotebookIds(long elem) {
+      if (this.sharedNotebookIds == null) {
+        this.sharedNotebookIds = new ArrayList<Long>();
+      }
+      this.sharedNotebookIds.add(elem);
+    }
+
+    public List<Long> getSharedNotebookIds() {
+      return this.sharedNotebookIds;
+    }
+
+    public void setSharedNotebookIds(List<Long> sharedNotebookIds) {
+      this.sharedNotebookIds = sharedNotebookIds;
+    }
+
+    public void unsetSharedNotebookIds() {
+      this.sharedNotebookIds = null;
+    }
+
+    /** Returns true if field sharedNotebookIds is set (has been asigned a value) and false otherwise */
+    public boolean isSetSharedNotebookIds() {
+      return this.sharedNotebookIds != null;
+    }
+
+    public void setSharedNotebookIdsIsSet(boolean value) {
+      if (!value) {
+        this.sharedNotebookIds = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
@@ -65046,6 +66035,14 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
+      case SHARED_NOTEBOOK_IDS:
+        if (value == null) {
+          unsetSharedNotebookIds();
+        } else {
+          setSharedNotebookIds((List<Long>)value);
+        }
+        break;
+
       }
     }
 
@@ -65054,6 +66051,9 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
+      case SHARED_NOTEBOOK_IDS:
+        return getSharedNotebookIds();
+
       }
       throw new IllegalStateException();
     }
@@ -65067,6 +66067,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
+      case SHARED_NOTEBOOK_IDS:
+        return isSetSharedNotebookIds();
       }
       throw new IllegalStateException();
     }
@@ -65074,12 +66076,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof listSharedNotebooks_args)
-        return this.equals((listSharedNotebooks_args)that);
+      if (that instanceof expungeSharedNotebooks_args)
+        return this.equals((expungeSharedNotebooks_args)that);
       return false;
     }
 
-    public boolean equals(listSharedNotebooks_args that) {
+    public boolean equals(expungeSharedNotebooks_args that) {
       if (that == null)
         return false;
 
@@ -65092,6 +66094,15 @@ public boolean equals(listSharedNotebooks_args that) {
           return false;
       }
 
+      boolean this_present_sharedNotebookIds = true && this.isSetSharedNotebookIds();
+      boolean that_present_sharedNotebookIds = true && that.isSetSharedNotebookIds();
+      if (this_present_sharedNotebookIds || that_present_sharedNotebookIds) {
+        if (!(this_present_sharedNotebookIds && that_present_sharedNotebookIds))
+          return false;
+        if (!this.sharedNotebookIds.equals(that.sharedNotebookIds))
+          return false;
+      }
+
       return true;
     }
 
@@ -65099,13 +66110,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(listSharedNotebooks_args other) {
+    public int compareTo(expungeSharedNotebooks_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      listSharedNotebooks_args typedOther = (listSharedNotebooks_args)other;
+      expungeSharedNotebooks_args typedOther = (expungeSharedNotebooks_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -65116,6 +66127,15 @@ public int compareTo(listSharedNotebooks_args other) {
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetSharedNotebookIds()).compareTo(typedOther.isSetSharedNotebookIds());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSharedNotebookIds()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebookIds, typedOther.sharedNotebookIds);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -65140,6 +66160,23 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case 2: // SHARED_NOTEBOOK_IDS
+            if (field.type == TType.LIST) {
+              {
+                TList _list155 = iprot.readListBegin();
+                this.sharedNotebookIds = new ArrayList<Long>(_list155.size);
+                for (int _i156 = 0; _i156 < _list155.size; ++_i156)
+                {
+                  long _elem157;
+                  _elem157 = iprot.readI64();
+                  this.sharedNotebookIds.add(_elem157);
+                }
+                iprot.readListEnd();
+              }
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
         }
@@ -65158,12 +66195,24 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
+      if (this.sharedNotebookIds != null) {
+        oprot.writeFieldBegin(SHARED_NOTEBOOK_IDS_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.I64, this.sharedNotebookIds.size()));
+          for (long _iter158 : this.sharedNotebookIds)
+          {
+            oprot.writeI64(_iter158);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("listSharedNotebooks_args(");
+      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -65173,6 +66222,14 @@ public String toString() {
         sb.append(this.authenticationToken);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("sharedNotebookIds:");
+      if (this.sharedNotebookIds == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.sharedNotebookIds);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -65183,15 +66240,15 @@ public void validate() throws TException {
 
   }
 
-  public static class listSharedNotebooks_result implements TBase<listSharedNotebooks_result, listSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("listSharedNotebooks_result");
+  public static class expungeSharedNotebooks_result implements TBase<expungeSharedNotebooks_result, expungeSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private List<com.evernote.edam.type.SharedNotebook> success;
+    private int success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -65264,13 +66321,14 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new ListMetaData(TType.LIST, 
-              new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class))));
+          new FieldValueMetaData(TType.I32)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -65278,20 +66336,21 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(listSharedNotebooks_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_result.class, metaDataMap);
     }
 
-    public listSharedNotebooks_result() {
+    public expungeSharedNotebooks_result() {
     }
 
-    public listSharedNotebooks_result(
-      List<com.evernote.edam.type.SharedNotebook> success,
+    public expungeSharedNotebooks_result(
+      int success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
+      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -65300,14 +66359,9 @@ public listSharedNotebooks_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public listSharedNotebooks_result(listSharedNotebooks_result other) {
-      if (other.isSetSuccess()) {
-        List<com.evernote.edam.type.SharedNotebook> __this__success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
-        for (com.evernote.edam.type.SharedNotebook other_element : other.success) {
-          __this__success.add(new com.evernote.edam.type.SharedNotebook(other_element));
-        }
-        this.success = __this__success;
-      }
+    public expungeSharedNotebooks_result(expungeSharedNotebooks_result other) {
+      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
+      this.success = other.success;
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -65319,53 +66373,38 @@ public listSharedNotebooks_result(listSharedNotebooks_result other) {
       }
     }
 
-    public listSharedNotebooks_result deepCopy() {
-      return new listSharedNotebooks_result(this);
+    public expungeSharedNotebooks_result deepCopy() {
+      return new expungeSharedNotebooks_result(this);
     }
 
     public void clear() {
-      this.success = null;
+      setSuccessIsSet(false);
+      this.success = 0;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<com.evernote.edam.type.SharedNotebook> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(com.evernote.edam.type.SharedNotebook elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<com.evernote.edam.type.SharedNotebook> getSuccess() {
+    public int getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(List<com.evernote.edam.type.SharedNotebook> success) {
+    public void setSuccess(int success) {
       this.success = success;
+      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      this.success = null;
+      __isset_vector[__SUCCESS_ISSET_ID] = false;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return this.success != null;
+      return __isset_vector[__SUCCESS_ISSET_ID];
     }
 
     public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+      __isset_vector[__SUCCESS_ISSET_ID] = value;
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -65443,7 +66482,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<com.evernote.edam.type.SharedNotebook>)value);
+          setSuccess((Integer)value);
         }
         break;
 
@@ -65477,7 +66516,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return getSuccess();
+        return new Integer(getSuccess());
 
       case USER_EXCEPTION:
         return getUserException();
@@ -65514,21 +66553,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof listSharedNotebooks_result)
-        return this.equals((listSharedNotebooks_result)that);
+      if (that instanceof expungeSharedNotebooks_result)
+        return this.equals((expungeSharedNotebooks_result)that);
       return false;
     }
 
-    public boolean equals(listSharedNotebooks_result that) {
+    public boolean equals(expungeSharedNotebooks_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -65566,13 +66605,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(listSharedNotebooks_result other) {
+    public int compareTo(expungeSharedNotebooks_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      listSharedNotebooks_result typedOther = (listSharedNotebooks_result)other;
+      expungeSharedNotebooks_result typedOther = (expungeSharedNotebooks_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -65628,19 +66667,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.LIST) {
-              {
-                TList _list139 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.SharedNotebook>(_list139.size);
-                for (int _i140 = 0; _i140 < _list139.size; ++_i140)
-                {
-                  com.evernote.edam.type.SharedNotebook _elem141;
-                  _elem141 = new com.evernote.edam.type.SharedNotebook();
-                  _elem141.read(iprot);
-                  this.success.add(_elem141);
-                }
-                iprot.readListEnd();
-              }
+            if (field.type == TType.I32) {
+              this.success = iprot.readI32();
+              setSuccessIsSet(true);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -65683,14 +66712,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.SharedNotebook _iter142 : this.success)
-          {
-            _iter142.write(oprot);
-          }
-          oprot.writeListEnd();
-        }
+        oprot.writeI32(this.success);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -65710,15 +66732,11 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("listSharedNotebooks_result(");
+      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
+      sb.append(this.success);
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -65754,19 +66772,19 @@ public void validate() throws TException {
 
   }
 
-  public static class expungeSharedNotebooks_args implements TBase<expungeSharedNotebooks_args, expungeSharedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_args");
+  public static class createLinkedNotebook_args implements TBase<createLinkedNotebook_args, createLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField SHARED_NOTEBOOK_IDS_FIELD_DESC = new TField("sharedNotebookIds", TType.LIST, (short)2);
+    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);
 
     private String authenticationToken;
-    private List<Long> sharedNotebookIds;
+    private com.evernote.edam.type.LinkedNotebook linkedNotebook;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
       AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      SHARED_NOTEBOOK_IDS((short)2, "sharedNotebookIds");
+      LINKED_NOTEBOOK((short)2, "linkedNotebook");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -65783,8 +66801,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
-          case 2: // SHARED_NOTEBOOK_IDS
-            return SHARED_NOTEBOOK_IDS;
+          case 2: // LINKED_NOTEBOOK
+            return LINKED_NOTEBOOK;
           default:
             return null;
         }
@@ -65831,48 +66849,43 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.SHARED_NOTEBOOK_IDS, new FieldMetaData("sharedNotebookIds", TFieldRequirementType.DEFAULT, 
-          new ListMetaData(TType.LIST, 
-              new FieldValueMetaData(TType.I64))));
+      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_args.class, metaDataMap);
     }
 
-    public expungeSharedNotebooks_args() {
+    public createLinkedNotebook_args() {
     }
 
-    public expungeSharedNotebooks_args(
+    public createLinkedNotebook_args(
       String authenticationToken,
-      List<Long> sharedNotebookIds)
+      com.evernote.edam.type.LinkedNotebook linkedNotebook)
     {
       this();
       this.authenticationToken = authenticationToken;
-      this.sharedNotebookIds = sharedNotebookIds;
+      this.linkedNotebook = linkedNotebook;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public expungeSharedNotebooks_args(expungeSharedNotebooks_args other) {
+    public createLinkedNotebook_args(createLinkedNotebook_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetSharedNotebookIds()) {
-        List<Long> __this__sharedNotebookIds = new ArrayList<Long>();
-        for (Long other_element : other.sharedNotebookIds) {
-          __this__sharedNotebookIds.add(other_element);
-        }
-        this.sharedNotebookIds = __this__sharedNotebookIds;
+      if (other.isSetLinkedNotebook()) {
+        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
       }
     }
 
-    public expungeSharedNotebooks_args deepCopy() {
-      return new expungeSharedNotebooks_args(this);
+    public createLinkedNotebook_args deepCopy() {
+      return new createLinkedNotebook_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
-      this.sharedNotebookIds = null;
+      this.linkedNotebook = null;
     }
 
     public String getAuthenticationToken() {
@@ -65898,41 +66911,26 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
-    public int getSharedNotebookIdsSize() {
-      return (this.sharedNotebookIds == null) ? 0 : this.sharedNotebookIds.size();
-    }
-
-    public java.util.Iterator<Long> getSharedNotebookIdsIterator() {
-      return (this.sharedNotebookIds == null) ? null : this.sharedNotebookIds.iterator();
-    }
-
-    public void addToSharedNotebookIds(long elem) {
-      if (this.sharedNotebookIds == null) {
-        this.sharedNotebookIds = new ArrayList<Long>();
-      }
-      this.sharedNotebookIds.add(elem);
-    }
-
-    public List<Long> getSharedNotebookIds() {
-      return this.sharedNotebookIds;
+    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
+      return this.linkedNotebook;
     }
 
-    public void setSharedNotebookIds(List<Long> sharedNotebookIds) {
-      this.sharedNotebookIds = sharedNotebookIds;
+    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
+      this.linkedNotebook = linkedNotebook;
     }
 
-    public void unsetSharedNotebookIds() {
-      this.sharedNotebookIds = null;
+    public void unsetLinkedNotebook() {
+      this.linkedNotebook = null;
     }
 
-    /** Returns true if field sharedNotebookIds is set (has been asigned a value) and false otherwise */
-    public boolean isSetSharedNotebookIds() {
-      return this.sharedNotebookIds != null;
+    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
+    public boolean isSetLinkedNotebook() {
+      return this.linkedNotebook != null;
     }
 
-    public void setSharedNotebookIdsIsSet(boolean value) {
+    public void setLinkedNotebookIsSet(boolean value) {
       if (!value) {
-        this.sharedNotebookIds = null;
+        this.linkedNotebook = null;
       }
     }
 
@@ -65946,11 +66944,11 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case SHARED_NOTEBOOK_IDS:
+      case LINKED_NOTEBOOK:
         if (value == null) {
-          unsetSharedNotebookIds();
+          unsetLinkedNotebook();
         } else {
-          setSharedNotebookIds((List<Long>)value);
+          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
         }
         break;
 
@@ -65962,8 +66960,8 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case SHARED_NOTEBOOK_IDS:
-        return getSharedNotebookIds();
+      case LINKED_NOTEBOOK:
+        return getLinkedNotebook();
 
       }
       throw new IllegalStateException();
@@ -65978,8 +66976,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case SHARED_NOTEBOOK_IDS:
-        return isSetSharedNotebookIds();
+      case LINKED_NOTEBOOK:
+        return isSetLinkedNotebook();
       }
       throw new IllegalStateException();
     }
@@ -65987,12 +66985,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof expungeSharedNotebooks_args)
-        return this.equals((expungeSharedNotebooks_args)that);
+      if (that instanceof createLinkedNotebook_args)
+        return this.equals((createLinkedNotebook_args)that);
       return false;
     }
 
-    public boolean equals(expungeSharedNotebooks_args that) {
+    public boolean equals(createLinkedNotebook_args that) {
       if (that == null)
         return false;
 
@@ -66005,12 +67003,12 @@ public boolean equals(expungeSharedNotebooks_args that) {
           return false;
       }
 
-      boolean this_present_sharedNotebookIds = true && this.isSetSharedNotebookIds();
-      boolean that_present_sharedNotebookIds = true && that.isSetSharedNotebookIds();
-      if (this_present_sharedNotebookIds || that_present_sharedNotebookIds) {
-        if (!(this_present_sharedNotebookIds && that_present_sharedNotebookIds))
+      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
+      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
+      if (this_present_linkedNotebook || that_present_linkedNotebook) {
+        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
           return false;
-        if (!this.sharedNotebookIds.equals(that.sharedNotebookIds))
+        if (!this.linkedNotebook.equals(that.linkedNotebook))
           return false;
       }
 
@@ -66021,13 +67019,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(expungeSharedNotebooks_args other) {
+    public int compareTo(createLinkedNotebook_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      expungeSharedNotebooks_args typedOther = (expungeSharedNotebooks_args)other;
+      createLinkedNotebook_args typedOther = (createLinkedNotebook_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -66038,11 +67036,11 @@ public int compareTo(expungeSharedNotebooks_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetSharedNotebookIds()).compareTo(typedOther.isSetSharedNotebookIds());
+      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetSharedNotebookIds()) {        lastComparison = TBaseHelper.compareTo(this.sharedNotebookIds, typedOther.sharedNotebookIds);
+      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -66071,19 +67069,10 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // SHARED_NOTEBOOK_IDS
-            if (field.type == TType.LIST) {
-              {
-                TList _list143 = iprot.readListBegin();
-                this.sharedNotebookIds = new ArrayList<Long>(_list143.size);
-                for (int _i144 = 0; _i144 < _list143.size; ++_i144)
-                {
-                  long _elem145;
-                  _elem145 = iprot.readI64();
-                  this.sharedNotebookIds.add(_elem145);
-                }
-                iprot.readListEnd();
-              }
+          case 2: // LINKED_NOTEBOOK
+            if (field.type == TType.STRUCT) {
+              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
+              this.linkedNotebook.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -66106,16 +67095,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.sharedNotebookIds != null) {
-        oprot.writeFieldBegin(SHARED_NOTEBOOK_IDS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.I64, this.sharedNotebookIds.size()));
-          for (long _iter146 : this.sharedNotebookIds)
-          {
-            oprot.writeI64(_iter146);
-          }
-          oprot.writeListEnd();
-        }
+      if (this.linkedNotebook != null) {
+        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
+        this.linkedNotebook.write(oprot);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -66123,7 +67105,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_args(");
+      StringBuilder sb = new StringBuilder("createLinkedNotebook_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -66134,11 +67116,11 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("sharedNotebookIds:");
-      if (this.sharedNotebookIds == null) {
+      sb.append("linkedNotebook:");
+      if (this.linkedNotebook == null) {
         sb.append("null");
       } else {
-        sb.append(this.sharedNotebookIds);
+        sb.append(this.linkedNotebook);
       }
       first = false;
       sb.append(")");
@@ -66151,15 +67133,15 @@ public void validate() throws TException {
 
   }
 
-  public static class expungeSharedNotebooks_result implements TBase<expungeSharedNotebooks_result, expungeSharedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("expungeSharedNotebooks_result");
+  public static class createLinkedNotebook_result implements TBase<createLinkedNotebook_result, createLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private int success;
+    private com.evernote.edam.type.LinkedNotebook success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -66232,14 +67214,12 @@ public String getFieldName() {
     }
 
     // isset id assignments
-    private static final int __SUCCESS_ISSET_ID = 0;
-    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I32)));
+          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -66247,21 +67227,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(expungeSharedNotebooks_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_result.class, metaDataMap);
     }
 
-    public expungeSharedNotebooks_result() {
+    public createLinkedNotebook_result() {
     }
 
-    public expungeSharedNotebooks_result(
-      int success,
+    public createLinkedNotebook_result(
+      com.evernote.edam.type.LinkedNotebook success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
-      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -66270,9 +67249,10 @@ public expungeSharedNotebooks_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public expungeSharedNotebooks_result(expungeSharedNotebooks_result other) {
-      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
-      this.success = other.success;
+    public createLinkedNotebook_result(createLinkedNotebook_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new com.evernote.edam.type.LinkedNotebook(other.success);
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -66284,38 +67264,38 @@ public expungeSharedNotebooks_result(expungeSharedNotebooks_result other) {
       }
     }
 
-    public expungeSharedNotebooks_result deepCopy() {
-      return new expungeSharedNotebooks_result(this);
+    public createLinkedNotebook_result deepCopy() {
+      return new createLinkedNotebook_result(this);
     }
 
     public void clear() {
-      setSuccessIsSet(false);
-      this.success = 0;
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccess() {
+    public com.evernote.edam.type.LinkedNotebook getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(int success) {
+    public void setSuccess(com.evernote.edam.type.LinkedNotebook success) {
       this.success = success;
-      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      __isset_vector[__SUCCESS_ISSET_ID] = false;
+      this.success = null;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_vector[__SUCCESS_ISSET_ID];
+      return this.success != null;
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_vector[__SUCCESS_ISSET_ID] = value;
+      if (!value) {
+        this.success = null;
+      }
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -66393,7 +67373,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Integer)value);
+          setSuccess((com.evernote.edam.type.LinkedNotebook)value);
         }
         break;
 
@@ -66427,7 +67407,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return new Integer(getSuccess());
+        return getSuccess();
 
       case USER_EXCEPTION:
         return getUserException();
@@ -66464,21 +67444,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof expungeSharedNotebooks_result)
-        return this.equals((expungeSharedNotebooks_result)that);
+      if (that instanceof createLinkedNotebook_result)
+        return this.equals((createLinkedNotebook_result)that);
       return false;
     }
 
-    public boolean equals(expungeSharedNotebooks_result that) {
+    public boolean equals(createLinkedNotebook_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (this.success != that.success)
+        if (!this.success.equals(that.success))
           return false;
       }
 
@@ -66516,13 +67496,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(expungeSharedNotebooks_result other) {
+    public int compareTo(createLinkedNotebook_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      expungeSharedNotebooks_result typedOther = (expungeSharedNotebooks_result)other;
+      createLinkedNotebook_result typedOther = (createLinkedNotebook_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -66578,9 +67558,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.I32) {
-              this.success = iprot.readI32();
-              setSuccessIsSet(true);
+            if (field.type == TType.STRUCT) {
+              this.success = new com.evernote.edam.type.LinkedNotebook();
+              this.success.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -66623,7 +67603,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(this.success);
+        this.success.write(oprot);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -66643,11 +67623,15 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("expungeSharedNotebooks_result(");
+      StringBuilder sb = new StringBuilder("createLinkedNotebook_result(");
       boolean first = true;
 
       sb.append("success:");
-      sb.append(this.success);
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -66683,8 +67667,8 @@ public void validate() throws TException {
 
   }
 
-  public static class createLinkedNotebook_args implements TBase<createLinkedNotebook_args, createLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_args");
+  public static class updateLinkedNotebook_args implements TBase<updateLinkedNotebook_args, updateLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
     private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);
@@ -66763,13 +67747,13 @@ public String getFieldName() {
       tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
           new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_args.class, metaDataMap);
     }
 
-    public createLinkedNotebook_args() {
+    public updateLinkedNotebook_args() {
     }
 
-    public createLinkedNotebook_args(
+    public updateLinkedNotebook_args(
       String authenticationToken,
       com.evernote.edam.type.LinkedNotebook linkedNotebook)
     {
@@ -66781,7 +67765,7 @@ public createLinkedNotebook_args(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public createLinkedNotebook_args(createLinkedNotebook_args other) {
+    public updateLinkedNotebook_args(updateLinkedNotebook_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
@@ -66790,8 +67774,8 @@ public createLinkedNotebook_args(createLinkedNotebook_args other) {
       }
     }
 
-    public createLinkedNotebook_args deepCopy() {
-      return new createLinkedNotebook_args(this);
+    public updateLinkedNotebook_args deepCopy() {
+      return new updateLinkedNotebook_args(this);
     }
 
     public void clear() {
@@ -66896,12 +67880,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createLinkedNotebook_args)
-        return this.equals((createLinkedNotebook_args)that);
+      if (that instanceof updateLinkedNotebook_args)
+        return this.equals((updateLinkedNotebook_args)that);
       return false;
     }
 
-    public boolean equals(createLinkedNotebook_args that) {
+    public boolean equals(updateLinkedNotebook_args that) {
       if (that == null)
         return false;
 
@@ -66930,13 +67914,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(createLinkedNotebook_args other) {
+    public int compareTo(updateLinkedNotebook_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createLinkedNotebook_args typedOther = (createLinkedNotebook_args)other;
+      updateLinkedNotebook_args typedOther = (updateLinkedNotebook_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -67016,7 +68000,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("createLinkedNotebook_args(");
+      StringBuilder sb = new StringBuilder("updateLinkedNotebook_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -67044,15 +68028,15 @@ public void validate() throws TException {
 
   }
 
-  public static class createLinkedNotebook_result implements TBase<createLinkedNotebook_result, createLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("createLinkedNotebook_result");
+  public static class updateLinkedNotebook_result implements TBase<updateLinkedNotebook_result, updateLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private com.evernote.edam.type.LinkedNotebook success;
+    private int success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -67125,12 +68109,14 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
+          new FieldValueMetaData(TType.I32)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -67138,20 +68124,21 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(createLinkedNotebook_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_result.class, metaDataMap);
     }
 
-    public createLinkedNotebook_result() {
+    public updateLinkedNotebook_result() {
     }
 
-    public createLinkedNotebook_result(
-      com.evernote.edam.type.LinkedNotebook success,
+    public updateLinkedNotebook_result(
+      int success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
+      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -67160,10 +68147,9 @@ public createLinkedNotebook_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public createLinkedNotebook_result(createLinkedNotebook_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new com.evernote.edam.type.LinkedNotebook(other.success);
-      }
+    public updateLinkedNotebook_result(updateLinkedNotebook_result other) {
+      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
+      this.success = other.success;
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -67175,38 +68161,38 @@ public createLinkedNotebook_result(createLinkedNotebook_result other) {
       }
     }
 
-    public createLinkedNotebook_result deepCopy() {
-      return new createLinkedNotebook_result(this);
+    public updateLinkedNotebook_result deepCopy() {
+      return new updateLinkedNotebook_result(this);
     }
 
     public void clear() {
-      this.success = null;
+      setSuccessIsSet(false);
+      this.success = 0;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public com.evernote.edam.type.LinkedNotebook getSuccess() {
+    public int getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(com.evernote.edam.type.LinkedNotebook success) {
+    public void setSuccess(int success) {
       this.success = success;
+      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      this.success = null;
+      __isset_vector[__SUCCESS_ISSET_ID] = false;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return this.success != null;
+      return __isset_vector[__SUCCESS_ISSET_ID];
     }
 
     public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+      __isset_vector[__SUCCESS_ISSET_ID] = value;
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -67284,7 +68270,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((com.evernote.edam.type.LinkedNotebook)value);
+          setSuccess((Integer)value);
         }
         break;
 
@@ -67318,7 +68304,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return getSuccess();
+        return new Integer(getSuccess());
 
       case USER_EXCEPTION:
         return getUserException();
@@ -67355,21 +68341,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof createLinkedNotebook_result)
-        return this.equals((createLinkedNotebook_result)that);
+      if (that instanceof updateLinkedNotebook_result)
+        return this.equals((updateLinkedNotebook_result)that);
       return false;
     }
 
-    public boolean equals(createLinkedNotebook_result that) {
+    public boolean equals(updateLinkedNotebook_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -67407,13 +68393,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(createLinkedNotebook_result other) {
+    public int compareTo(updateLinkedNotebook_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      createLinkedNotebook_result typedOther = (createLinkedNotebook_result)other;
+      updateLinkedNotebook_result typedOther = (updateLinkedNotebook_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -67469,9 +68455,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.STRUCT) {
-              this.success = new com.evernote.edam.type.LinkedNotebook();
-              this.success.read(iprot);
+            if (field.type == TType.I32) {
+              this.success = iprot.readI32();
+              setSuccessIsSet(true);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -67514,7 +68500,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        this.success.write(oprot);
+        oprot.writeI32(this.success);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -67534,15 +68520,11 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("createLinkedNotebook_result(");
+      StringBuilder sb = new StringBuilder("updateLinkedNotebook_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
+      sb.append(this.success);
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -67578,19 +68560,16 @@ public void validate() throws TException {
 
   }
 
-  public static class updateLinkedNotebook_args implements TBase<updateLinkedNotebook_args, updateLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_args");
+  public static class listLinkedNotebooks_args implements TBase<listLinkedNotebooks_args, listLinkedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField LINKED_NOTEBOOK_FIELD_DESC = new TField("linkedNotebook", TType.STRUCT, (short)2);
 
     private String authenticationToken;
-    private com.evernote.edam.type.LinkedNotebook linkedNotebook;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      LINKED_NOTEBOOK((short)2, "linkedNotebook");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -67607,8 +68586,6 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
-          case 2: // LINKED_NOTEBOOK
-            return LINKED_NOTEBOOK;
           default:
             return null;
         }
@@ -67655,43 +68632,35 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.LINKED_NOTEBOOK, new FieldMetaData("linkedNotebook", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_args.class, metaDataMap);
     }
 
-    public updateLinkedNotebook_args() {
+    public listLinkedNotebooks_args() {
     }
 
-    public updateLinkedNotebook_args(
-      String authenticationToken,
-      com.evernote.edam.type.LinkedNotebook linkedNotebook)
+    public listLinkedNotebooks_args(
+      String authenticationToken)
     {
       this();
       this.authenticationToken = authenticationToken;
-      this.linkedNotebook = linkedNotebook;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateLinkedNotebook_args(updateLinkedNotebook_args other) {
+    public listLinkedNotebooks_args(listLinkedNotebooks_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetLinkedNotebook()) {
-        this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook(other.linkedNotebook);
-      }
     }
 
-    public updateLinkedNotebook_args deepCopy() {
-      return new updateLinkedNotebook_args(this);
+    public listLinkedNotebooks_args deepCopy() {
+      return new listLinkedNotebooks_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
-      this.linkedNotebook = null;
     }
 
     public String getAuthenticationToken() {
@@ -67717,29 +68686,6 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
-    public com.evernote.edam.type.LinkedNotebook getLinkedNotebook() {
-      return this.linkedNotebook;
-    }
-
-    public void setLinkedNotebook(com.evernote.edam.type.LinkedNotebook linkedNotebook) {
-      this.linkedNotebook = linkedNotebook;
-    }
-
-    public void unsetLinkedNotebook() {
-      this.linkedNotebook = null;
-    }
-
-    /** Returns true if field linkedNotebook is set (has been asigned a value) and false otherwise */
-    public boolean isSetLinkedNotebook() {
-      return this.linkedNotebook != null;
-    }
-
-    public void setLinkedNotebookIsSet(boolean value) {
-      if (!value) {
-        this.linkedNotebook = null;
-      }
-    }
-
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
@@ -67750,14 +68696,6 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case LINKED_NOTEBOOK:
-        if (value == null) {
-          unsetLinkedNotebook();
-        } else {
-          setLinkedNotebook((com.evernote.edam.type.LinkedNotebook)value);
-        }
-        break;
-
       }
     }
 
@@ -67766,9 +68704,6 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case LINKED_NOTEBOOK:
-        return getLinkedNotebook();
-
       }
       throw new IllegalStateException();
     }
@@ -67782,8 +68717,6 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case LINKED_NOTEBOOK:
-        return isSetLinkedNotebook();
       }
       throw new IllegalStateException();
     }
@@ -67791,12 +68724,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateLinkedNotebook_args)
-        return this.equals((updateLinkedNotebook_args)that);
+      if (that instanceof listLinkedNotebooks_args)
+        return this.equals((listLinkedNotebooks_args)that);
       return false;
     }
 
-    public boolean equals(updateLinkedNotebook_args that) {
+    public boolean equals(listLinkedNotebooks_args that) {
       if (that == null)
         return false;
 
@@ -67809,15 +68742,6 @@ public boolean equals(updateLinkedNotebook_args that) {
           return false;
       }
 
-      boolean this_present_linkedNotebook = true && this.isSetLinkedNotebook();
-      boolean that_present_linkedNotebook = true && that.isSetLinkedNotebook();
-      if (this_present_linkedNotebook || that_present_linkedNotebook) {
-        if (!(this_present_linkedNotebook && that_present_linkedNotebook))
-          return false;
-        if (!this.linkedNotebook.equals(that.linkedNotebook))
-          return false;
-      }
-
       return true;
     }
 
@@ -67825,13 +68749,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(updateLinkedNotebook_args other) {
+    public int compareTo(listLinkedNotebooks_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      updateLinkedNotebook_args typedOther = (updateLinkedNotebook_args)other;
+      listLinkedNotebooks_args typedOther = (listLinkedNotebooks_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -67842,15 +68766,6 @@ public int compareTo(updateLinkedNotebook_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetLinkedNotebook()).compareTo(typedOther.isSetLinkedNotebook());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetLinkedNotebook()) {        lastComparison = TBaseHelper.compareTo(this.linkedNotebook, typedOther.linkedNotebook);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       return 0;
     }
 
@@ -67875,14 +68790,6 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // LINKED_NOTEBOOK
-            if (field.type == TType.STRUCT) {
-              this.linkedNotebook = new com.evernote.edam.type.LinkedNotebook();
-              this.linkedNotebook.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
         }
@@ -67901,17 +68808,12 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.linkedNotebook != null) {
-        oprot.writeFieldBegin(LINKED_NOTEBOOK_FIELD_DESC);
-        this.linkedNotebook.write(oprot);
-        oprot.writeFieldEnd();
-      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateLinkedNotebook_args(");
+      StringBuilder sb = new StringBuilder("listLinkedNotebooks_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -67921,14 +68823,6 @@ public String toString() {
         sb.append(this.authenticationToken);
       }
       first = false;
-      if (!first) sb.append(", ");
-      sb.append("linkedNotebook:");
-      if (this.linkedNotebook == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.linkedNotebook);
-      }
-      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -67939,15 +68833,15 @@ public void validate() throws TException {
 
   }
 
-  public static class updateLinkedNotebook_result implements TBase<updateLinkedNotebook_result, updateLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("updateLinkedNotebook_result");
+  public static class listLinkedNotebooks_result implements TBase<listLinkedNotebooks_result, listLinkedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private int success;
+    private List<com.evernote.edam.type.LinkedNotebook> success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -68020,14 +68914,13 @@ public String getFieldName() {
     }
 
     // isset id assignments
-    private static final int __SUCCESS_ISSET_ID = 0;
-    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I32)));
+          new ListMetaData(TType.LIST, 
+              new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class))));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -68035,21 +68928,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(updateLinkedNotebook_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_result.class, metaDataMap);
     }
 
-    public updateLinkedNotebook_result() {
+    public listLinkedNotebooks_result() {
     }
 
-    public updateLinkedNotebook_result(
-      int success,
+    public listLinkedNotebooks_result(
+      List<com.evernote.edam.type.LinkedNotebook> success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
-      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -68058,9 +68950,14 @@ public updateLinkedNotebook_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public updateLinkedNotebook_result(updateLinkedNotebook_result other) {
-      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
-      this.success = other.success;
+    public listLinkedNotebooks_result(listLinkedNotebooks_result other) {
+      if (other.isSetSuccess()) {
+        List<com.evernote.edam.type.LinkedNotebook> __this__success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
+        for (com.evernote.edam.type.LinkedNotebook other_element : other.success) {
+          __this__success.add(new com.evernote.edam.type.LinkedNotebook(other_element));
+        }
+        this.success = __this__success;
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -68072,38 +68969,53 @@ public updateLinkedNotebook_result(updateLinkedNotebook_result other) {
       }
     }
 
-    public updateLinkedNotebook_result deepCopy() {
-      return new updateLinkedNotebook_result(this);
+    public listLinkedNotebooks_result deepCopy() {
+      return new listLinkedNotebooks_result(this);
     }
 
     public void clear() {
-      setSuccessIsSet(false);
-      this.success = 0;
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccess() {
+    public int getSuccessSize() {
+      return (this.success == null) ? 0 : this.success.size();
+    }
+
+    public java.util.Iterator<com.evernote.edam.type.LinkedNotebook> getSuccessIterator() {
+      return (this.success == null) ? null : this.success.iterator();
+    }
+
+    public void addToSuccess(com.evernote.edam.type.LinkedNotebook elem) {
+      if (this.success == null) {
+        this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
+      }
+      this.success.add(elem);
+    }
+
+    public List<com.evernote.edam.type.LinkedNotebook> getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(int success) {
+    public void setSuccess(List<com.evernote.edam.type.LinkedNotebook> success) {
       this.success = success;
-      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      __isset_vector[__SUCCESS_ISSET_ID] = false;
+      this.success = null;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_vector[__SUCCESS_ISSET_ID];
+      return this.success != null;
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_vector[__SUCCESS_ISSET_ID] = value;
+      if (!value) {
+        this.success = null;
+      }
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -68181,7 +69093,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Integer)value);
+          setSuccess((List<com.evernote.edam.type.LinkedNotebook>)value);
         }
         break;
 
@@ -68215,7 +69127,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return new Integer(getSuccess());
+        return getSuccess();
 
       case USER_EXCEPTION:
         return getUserException();
@@ -68252,21 +69164,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof updateLinkedNotebook_result)
-        return this.equals((updateLinkedNotebook_result)that);
+      if (that instanceof listLinkedNotebooks_result)
+        return this.equals((listLinkedNotebooks_result)that);
       return false;
     }
 
-    public boolean equals(updateLinkedNotebook_result that) {
+    public boolean equals(listLinkedNotebooks_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (this.success != that.success)
+        if (!this.success.equals(that.success))
           return false;
       }
 
@@ -68304,13 +69216,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(updateLinkedNotebook_result other) {
+    public int compareTo(listLinkedNotebooks_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      updateLinkedNotebook_result typedOther = (updateLinkedNotebook_result)other;
+      listLinkedNotebooks_result typedOther = (listLinkedNotebooks_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -68366,9 +69278,19 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.I32) {
-              this.success = iprot.readI32();
-              setSuccessIsSet(true);
+            if (field.type == TType.LIST) {
+              {
+                TList _list159 = iprot.readListBegin();
+                this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>(_list159.size);
+                for (int _i160 = 0; _i160 < _list159.size; ++_i160)
+                {
+                  com.evernote.edam.type.LinkedNotebook _elem161;
+                  _elem161 = new com.evernote.edam.type.LinkedNotebook();
+                  _elem161.read(iprot);
+                  this.success.add(_elem161);
+                }
+                iprot.readListEnd();
+              }
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -68411,7 +69333,14 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(this.success);
+        {
+          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
+          for (com.evernote.edam.type.LinkedNotebook _iter162 : this.success)
+          {
+            _iter162.write(oprot);
+          }
+          oprot.writeListEnd();
+        }
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -68431,11 +69360,15 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("updateLinkedNotebook_result(");
+      StringBuilder sb = new StringBuilder("listLinkedNotebooks_result(");
       boolean first = true;
 
       sb.append("success:");
-      sb.append(this.success);
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -68471,16 +69404,19 @@ public void validate() throws TException {
 
   }
 
-  public static class listLinkedNotebooks_args implements TBase<listLinkedNotebooks_args, listLinkedNotebooks_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_args");
+  public static class expungeLinkedNotebook_args implements TBase<expungeLinkedNotebook_args, expungeLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
+    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
 
     private String authenticationToken;
+    private String guid;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
+      GUID((short)2, "guid");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -68497,6 +69433,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
+          case 2: // GUID
+            return GUID;
           default:
             return null;
         }
@@ -68543,35 +69481,43 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING          , "Guid")));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_args.class, metaDataMap);
     }
 
-    public listLinkedNotebooks_args() {
+    public expungeLinkedNotebook_args() {
     }
 
-    public listLinkedNotebooks_args(
-      String authenticationToken)
+    public expungeLinkedNotebook_args(
+      String authenticationToken,
+      String guid)
     {
       this();
       this.authenticationToken = authenticationToken;
+      this.guid = guid;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public listLinkedNotebooks_args(listLinkedNotebooks_args other) {
+    public expungeLinkedNotebook_args(expungeLinkedNotebook_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
+      if (other.isSetGuid()) {
+        this.guid = other.guid;
+      }
     }
 
-    public listLinkedNotebooks_args deepCopy() {
-      return new listLinkedNotebooks_args(this);
+    public expungeLinkedNotebook_args deepCopy() {
+      return new expungeLinkedNotebook_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
+      this.guid = null;
     }
 
     public String getAuthenticationToken() {
@@ -68597,6 +69543,29 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
+    public String getGuid() {
+      return this.guid;
+    }
+
+    public void setGuid(String guid) {
+      this.guid = guid;
+    }
+
+    public void unsetGuid() {
+      this.guid = null;
+    }
+
+    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
+    public boolean isSetGuid() {
+      return this.guid != null;
+    }
+
+    public void setGuidIsSet(boolean value) {
+      if (!value) {
+        this.guid = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
@@ -68607,6 +69576,14 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
+      case GUID:
+        if (value == null) {
+          unsetGuid();
+        } else {
+          setGuid((String)value);
+        }
+        break;
+
       }
     }
 
@@ -68615,6 +69592,9 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
+      case GUID:
+        return getGuid();
+
       }
       throw new IllegalStateException();
     }
@@ -68628,6 +69608,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
+      case GUID:
+        return isSetGuid();
       }
       throw new IllegalStateException();
     }
@@ -68635,12 +69617,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof listLinkedNotebooks_args)
-        return this.equals((listLinkedNotebooks_args)that);
+      if (that instanceof expungeLinkedNotebook_args)
+        return this.equals((expungeLinkedNotebook_args)that);
       return false;
     }
 
-    public boolean equals(listLinkedNotebooks_args that) {
+    public boolean equals(expungeLinkedNotebook_args that) {
       if (that == null)
         return false;
 
@@ -68653,6 +69635,15 @@ public boolean equals(listLinkedNotebooks_args that) {
           return false;
       }
 
+      boolean this_present_guid = true && this.isSetGuid();
+      boolean that_present_guid = true && that.isSetGuid();
+      if (this_present_guid || that_present_guid) {
+        if (!(this_present_guid && that_present_guid))
+          return false;
+        if (!this.guid.equals(that.guid))
+          return false;
+      }
+
       return true;
     }
 
@@ -68660,13 +69651,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(listLinkedNotebooks_args other) {
+    public int compareTo(expungeLinkedNotebook_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      listLinkedNotebooks_args typedOther = (listLinkedNotebooks_args)other;
+      expungeLinkedNotebook_args typedOther = (expungeLinkedNotebook_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -68677,6 +69668,15 @@ public int compareTo(listLinkedNotebooks_args other) {
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -68701,6 +69701,13 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case 2: // GUID
+            if (field.type == TType.STRING) {
+              this.guid = iprot.readString();
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
         }
@@ -68719,12 +69726,17 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
+      if (this.guid != null) {
+        oprot.writeFieldBegin(GUID_FIELD_DESC);
+        oprot.writeString(this.guid);
+        oprot.writeFieldEnd();
+      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("listLinkedNotebooks_args(");
+      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -68734,6 +69746,14 @@ public String toString() {
         sb.append(this.authenticationToken);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("guid:");
+      if (this.guid == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.guid);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -68744,15 +69764,15 @@ public void validate() throws TException {
 
   }
 
-  public static class listLinkedNotebooks_result implements TBase<listLinkedNotebooks_result, listLinkedNotebooks_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("listLinkedNotebooks_result");
+  public static class expungeLinkedNotebook_result implements TBase<expungeLinkedNotebook_result, expungeLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private List<com.evernote.edam.type.LinkedNotebook> success;
+    private int success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -68825,13 +69845,14 @@ public String getFieldName() {
     }
 
     // isset id assignments
+    private static final int __SUCCESS_ISSET_ID = 0;
+    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new ListMetaData(TType.LIST, 
-              new StructMetaData(TType.STRUCT, com.evernote.edam.type.LinkedNotebook.class))));
+          new FieldValueMetaData(TType.I32)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -68839,20 +69860,21 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(listLinkedNotebooks_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_result.class, metaDataMap);
     }
 
-    public listLinkedNotebooks_result() {
+    public expungeLinkedNotebook_result() {
     }
 
-    public listLinkedNotebooks_result(
-      List<com.evernote.edam.type.LinkedNotebook> success,
+    public expungeLinkedNotebook_result(
+      int success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
+      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -68861,14 +69883,9 @@ public listLinkedNotebooks_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public listLinkedNotebooks_result(listLinkedNotebooks_result other) {
-      if (other.isSetSuccess()) {
-        List<com.evernote.edam.type.LinkedNotebook> __this__success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
-        for (com.evernote.edam.type.LinkedNotebook other_element : other.success) {
-          __this__success.add(new com.evernote.edam.type.LinkedNotebook(other_element));
-        }
-        this.success = __this__success;
-      }
+    public expungeLinkedNotebook_result(expungeLinkedNotebook_result other) {
+      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
+      this.success = other.success;
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -68880,53 +69897,38 @@ public listLinkedNotebooks_result(listLinkedNotebooks_result other) {
       }
     }
 
-    public listLinkedNotebooks_result deepCopy() {
-      return new listLinkedNotebooks_result(this);
+    public expungeLinkedNotebook_result deepCopy() {
+      return new expungeLinkedNotebook_result(this);
     }
 
     public void clear() {
-      this.success = null;
+      setSuccessIsSet(false);
+      this.success = 0;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccessSize() {
-      return (this.success == null) ? 0 : this.success.size();
-    }
-
-    public java.util.Iterator<com.evernote.edam.type.LinkedNotebook> getSuccessIterator() {
-      return (this.success == null) ? null : this.success.iterator();
-    }
-
-    public void addToSuccess(com.evernote.edam.type.LinkedNotebook elem) {
-      if (this.success == null) {
-        this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>();
-      }
-      this.success.add(elem);
-    }
-
-    public List<com.evernote.edam.type.LinkedNotebook> getSuccess() {
+    public int getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(List<com.evernote.edam.type.LinkedNotebook> success) {
+    public void setSuccess(int success) {
       this.success = success;
+      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      this.success = null;
+      __isset_vector[__SUCCESS_ISSET_ID] = false;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return this.success != null;
+      return __isset_vector[__SUCCESS_ISSET_ID];
     }
 
     public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
+      __isset_vector[__SUCCESS_ISSET_ID] = value;
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -69004,7 +70006,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((List<com.evernote.edam.type.LinkedNotebook>)value);
+          setSuccess((Integer)value);
         }
         break;
 
@@ -69038,7 +70040,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return getSuccess();
+        return new Integer(getSuccess());
 
       case USER_EXCEPTION:
         return getUserException();
@@ -69075,21 +70077,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof listLinkedNotebooks_result)
-        return this.equals((listLinkedNotebooks_result)that);
+      if (that instanceof expungeLinkedNotebook_result)
+        return this.equals((expungeLinkedNotebook_result)that);
       return false;
     }
 
-    public boolean equals(listLinkedNotebooks_result that) {
+    public boolean equals(expungeLinkedNotebook_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
+      boolean this_present_success = true;
+      boolean that_present_success = true;
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (!this.success.equals(that.success))
+        if (this.success != that.success)
           return false;
       }
 
@@ -69127,13 +70129,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(listLinkedNotebooks_result other) {
+    public int compareTo(expungeLinkedNotebook_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      listLinkedNotebooks_result typedOther = (listLinkedNotebooks_result)other;
+      expungeLinkedNotebook_result typedOther = (expungeLinkedNotebook_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -69189,19 +70191,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.LIST) {
-              {
-                TList _list147 = iprot.readListBegin();
-                this.success = new ArrayList<com.evernote.edam.type.LinkedNotebook>(_list147.size);
-                for (int _i148 = 0; _i148 < _list147.size; ++_i148)
-                {
-                  com.evernote.edam.type.LinkedNotebook _elem149;
-                  _elem149 = new com.evernote.edam.type.LinkedNotebook();
-                  _elem149.read(iprot);
-                  this.success.add(_elem149);
-                }
-                iprot.readListEnd();
-              }
+            if (field.type == TType.I32) {
+              this.success = iprot.readI32();
+              setSuccessIsSet(true);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -69244,14 +70236,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        {
-          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
-          for (com.evernote.edam.type.LinkedNotebook _iter150 : this.success)
-          {
-            _iter150.write(oprot);
-          }
-          oprot.writeListEnd();
-        }
+        oprot.writeI32(this.success);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -69271,15 +70256,11 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("listLinkedNotebooks_result(");
+      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_result(");
       boolean first = true;
 
       sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
+      sb.append(this.success);
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -69315,19 +70296,19 @@ public void validate() throws TException {
 
   }
 
-  public static class expungeLinkedNotebook_args implements TBase<expungeLinkedNotebook_args, expungeLinkedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_args");
+  public static class authenticateToSharedNotebook_args implements TBase<authenticateToSharedNotebook_args, authenticateToSharedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_args");
 
-    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
+    private static final TField SHARE_KEY_FIELD_DESC = new TField("shareKey", TType.STRING, (short)1);
+    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)2);
 
+    private String shareKey;
     private String authenticationToken;
-    private String guid;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      GUID((short)2, "guid");
+      SHARE_KEY((short)1, "shareKey"),
+      AUTHENTICATION_TOKEN((short)2, "authenticationToken");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -69342,10 +70323,10 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AUTHENTICATION_TOKEN
+          case 1: // SHARE_KEY
+            return SHARE_KEY;
+          case 2: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
-          case 2: // GUID
-            return GUID;
           default:
             return null;
         }
@@ -69390,108 +70371,108 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SHARE_KEY, new FieldMetaData("shareKey", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING          , "Guid")));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_args.class, metaDataMap);
     }
 
-    public expungeLinkedNotebook_args() {
+    public authenticateToSharedNotebook_args() {
     }
 
-    public expungeLinkedNotebook_args(
-      String authenticationToken,
-      String guid)
+    public authenticateToSharedNotebook_args(
+      String shareKey,
+      String authenticationToken)
     {
       this();
+      this.shareKey = shareKey;
       this.authenticationToken = authenticationToken;
-      this.guid = guid;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public expungeLinkedNotebook_args(expungeLinkedNotebook_args other) {
+    public authenticateToSharedNotebook_args(authenticateToSharedNotebook_args other) {
+      if (other.isSetShareKey()) {
+        this.shareKey = other.shareKey;
+      }
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetGuid()) {
-        this.guid = other.guid;
-      }
     }
 
-    public expungeLinkedNotebook_args deepCopy() {
-      return new expungeLinkedNotebook_args(this);
+    public authenticateToSharedNotebook_args deepCopy() {
+      return new authenticateToSharedNotebook_args(this);
     }
 
     public void clear() {
+      this.shareKey = null;
       this.authenticationToken = null;
-      this.guid = null;
     }
 
-    public String getAuthenticationToken() {
-      return this.authenticationToken;
+    public String getShareKey() {
+      return this.shareKey;
     }
 
-    public void setAuthenticationToken(String authenticationToken) {
-      this.authenticationToken = authenticationToken;
+    public void setShareKey(String shareKey) {
+      this.shareKey = shareKey;
     }
 
-    public void unsetAuthenticationToken() {
-      this.authenticationToken = null;
+    public void unsetShareKey() {
+      this.shareKey = null;
     }
 
-    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
-    public boolean isSetAuthenticationToken() {
-      return this.authenticationToken != null;
+    /** Returns true if field shareKey is set (has been asigned a value) and false otherwise */
+    public boolean isSetShareKey() {
+      return this.shareKey != null;
     }
 
-    public void setAuthenticationTokenIsSet(boolean value) {
+    public void setShareKeyIsSet(boolean value) {
       if (!value) {
-        this.authenticationToken = null;
+        this.shareKey = null;
       }
     }
 
-    public String getGuid() {
-      return this.guid;
+    public String getAuthenticationToken() {
+      return this.authenticationToken;
     }
 
-    public void setGuid(String guid) {
-      this.guid = guid;
+    public void setAuthenticationToken(String authenticationToken) {
+      this.authenticationToken = authenticationToken;
     }
 
-    public void unsetGuid() {
-      this.guid = null;
+    public void unsetAuthenticationToken() {
+      this.authenticationToken = null;
     }
 
-    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
-    public boolean isSetGuid() {
-      return this.guid != null;
+    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
+    public boolean isSetAuthenticationToken() {
+      return this.authenticationToken != null;
     }
 
-    public void setGuidIsSet(boolean value) {
+    public void setAuthenticationTokenIsSet(boolean value) {
       if (!value) {
-        this.guid = null;
+        this.authenticationToken = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AUTHENTICATION_TOKEN:
+      case SHARE_KEY:
         if (value == null) {
-          unsetAuthenticationToken();
+          unsetShareKey();
         } else {
-          setAuthenticationToken((String)value);
+          setShareKey((String)value);
         }
         break;
 
-      case GUID:
+      case AUTHENTICATION_TOKEN:
         if (value == null) {
-          unsetGuid();
+          unsetAuthenticationToken();
         } else {
-          setGuid((String)value);
+          setAuthenticationToken((String)value);
         }
         break;
 
@@ -69500,12 +70481,12 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SHARE_KEY:
+        return getShareKey();
+
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case GUID:
-        return getGuid();
-
       }
       throw new IllegalStateException();
     }
@@ -69517,10 +70498,10 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
+      case SHARE_KEY:
+        return isSetShareKey();
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case GUID:
-        return isSetGuid();
       }
       throw new IllegalStateException();
     }
@@ -69528,15 +70509,24 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof expungeLinkedNotebook_args)
-        return this.equals((expungeLinkedNotebook_args)that);
+      if (that instanceof authenticateToSharedNotebook_args)
+        return this.equals((authenticateToSharedNotebook_args)that);
       return false;
     }
 
-    public boolean equals(expungeLinkedNotebook_args that) {
+    public boolean equals(authenticateToSharedNotebook_args that) {
       if (that == null)
         return false;
 
+      boolean this_present_shareKey = true && this.isSetShareKey();
+      boolean that_present_shareKey = true && that.isSetShareKey();
+      if (this_present_shareKey || that_present_shareKey) {
+        if (!(this_present_shareKey && that_present_shareKey))
+          return false;
+        if (!this.shareKey.equals(that.shareKey))
+          return false;
+      }
+
       boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
       boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
       if (this_present_authenticationToken || that_present_authenticationToken) {
@@ -69546,15 +70536,6 @@ public boolean equals(expungeLinkedNotebook_args that) {
           return false;
       }
 
-      boolean this_present_guid = true && this.isSetGuid();
-      boolean that_present_guid = true && that.isSetGuid();
-      if (this_present_guid || that_present_guid) {
-        if (!(this_present_guid && that_present_guid))
-          return false;
-        if (!this.guid.equals(that.guid))
-          return false;
-      }
-
       return true;
     }
 
@@ -69562,28 +70543,28 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(expungeLinkedNotebook_args other) {
+    public int compareTo(authenticateToSharedNotebook_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      expungeLinkedNotebook_args typedOther = (expungeLinkedNotebook_args)other;
+      authenticateToSharedNotebook_args typedOther = (authenticateToSharedNotebook_args)other;
 
-      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
+      lastComparison = Boolean.valueOf(isSetShareKey()).compareTo(typedOther.isSetShareKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
+      if (isSetShareKey()) {        lastComparison = TBaseHelper.compareTo(this.shareKey, typedOther.shareKey);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
+      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
+      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -69605,16 +70586,16 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // AUTHENTICATION_TOKEN
+          case 1: // SHARE_KEY
             if (field.type == TType.STRING) {
-              this.authenticationToken = iprot.readString();
+              this.shareKey = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // GUID
+          case 2: // AUTHENTICATION_TOKEN
             if (field.type == TType.STRING) {
-              this.guid = iprot.readString();
+              this.authenticationToken = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -69632,37 +70613,37 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
+      if (this.shareKey != null) {
+        oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
+        oprot.writeString(this.shareKey);
+        oprot.writeFieldEnd();
+      }
       if (this.authenticationToken != null) {
         oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.guid != null) {
-        oprot.writeFieldBegin(GUID_FIELD_DESC);
-        oprot.writeString(this.guid);
-        oprot.writeFieldEnd();
-      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_args(");
+      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_args(");
       boolean first = true;
 
-      sb.append("authenticationToken:");
-      if (this.authenticationToken == null) {
+      sb.append("shareKey:");
+      if (this.shareKey == null) {
         sb.append("null");
       } else {
-        sb.append(this.authenticationToken);
+        sb.append(this.shareKey);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("guid:");
-      if (this.guid == null) {
+      sb.append("authenticationToken:");
+      if (this.authenticationToken == null) {
         sb.append("null");
       } else {
-        sb.append(this.guid);
+        sb.append(this.authenticationToken);
       }
       first = false;
       sb.append(")");
@@ -69675,15 +70656,15 @@ public void validate() throws TException {
 
   }
 
-  public static class expungeLinkedNotebook_result implements TBase<expungeLinkedNotebook_result, expungeLinkedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("expungeLinkedNotebook_result");
+  public static class authenticateToSharedNotebook_result implements TBase<authenticateToSharedNotebook_result, authenticateToSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private int success;
+    private com.evernote.edam.userstore.AuthenticationResult success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -69756,14 +70737,12 @@ public String getFieldName() {
     }
 
     // isset id assignments
-    private static final int __SUCCESS_ISSET_ID = 0;
-    private boolean[] __isset_vector = new boolean[1];
 
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.I32)));
+          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -69771,21 +70750,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(expungeLinkedNotebook_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_result.class, metaDataMap);
     }
 
-    public expungeLinkedNotebook_result() {
+    public authenticateToSharedNotebook_result() {
     }
 
-    public expungeLinkedNotebook_result(
-      int success,
+    public authenticateToSharedNotebook_result(
+      com.evernote.edam.userstore.AuthenticationResult success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
       this.success = success;
-      setSuccessIsSet(true);
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -69794,9 +70772,10 @@ public expungeLinkedNotebook_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public expungeLinkedNotebook_result(expungeLinkedNotebook_result other) {
-      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
-      this.success = other.success;
+    public authenticateToSharedNotebook_result(authenticateToSharedNotebook_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -69808,38 +70787,38 @@ public expungeLinkedNotebook_result(expungeLinkedNotebook_result other) {
       }
     }
 
-    public expungeLinkedNotebook_result deepCopy() {
-      return new expungeLinkedNotebook_result(this);
+    public authenticateToSharedNotebook_result deepCopy() {
+      return new authenticateToSharedNotebook_result(this);
     }
 
     public void clear() {
-      setSuccessIsSet(false);
-      this.success = 0;
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public int getSuccess() {
+    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(int success) {
+    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
       this.success = success;
-      setSuccessIsSet(true);
     }
 
     public void unsetSuccess() {
-      __isset_vector[__SUCCESS_ISSET_ID] = false;
+      this.success = null;
     }
 
     /** Returns true if field success is set (has been asigned a value) and false otherwise */
     public boolean isSetSuccess() {
-      return __isset_vector[__SUCCESS_ISSET_ID];
+      return this.success != null;
     }
 
     public void setSuccessIsSet(boolean value) {
-      __isset_vector[__SUCCESS_ISSET_ID] = value;
+      if (!value) {
+        this.success = null;
+      }
     }
 
     public com.evernote.edam.error.EDAMUserException getUserException() {
@@ -69917,7 +70896,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((Integer)value);
+          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
         }
         break;
 
@@ -69951,7 +70930,7 @@ public void setFieldValue(_Fields field, Object value) {
     public Object getFieldValue(_Fields field) {
       switch (field) {
       case SUCCESS:
-        return new Integer(getSuccess());
+        return getSuccess();
 
       case USER_EXCEPTION:
         return getUserException();
@@ -69988,21 +70967,21 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof expungeLinkedNotebook_result)
-        return this.equals((expungeLinkedNotebook_result)that);
+      if (that instanceof authenticateToSharedNotebook_result)
+        return this.equals((authenticateToSharedNotebook_result)that);
       return false;
     }
 
-    public boolean equals(expungeLinkedNotebook_result that) {
+    public boolean equals(authenticateToSharedNotebook_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true;
-      boolean that_present_success = true;
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
       if (this_present_success || that_present_success) {
         if (!(this_present_success && that_present_success))
           return false;
-        if (this.success != that.success)
+        if (!this.success.equals(that.success))
           return false;
       }
 
@@ -70040,13 +71019,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(expungeLinkedNotebook_result other) {
+    public int compareTo(authenticateToSharedNotebook_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      expungeLinkedNotebook_result typedOther = (expungeLinkedNotebook_result)other;
+      authenticateToSharedNotebook_result typedOther = (authenticateToSharedNotebook_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -70102,9 +71081,9 @@ public void read(TProtocol iprot) throws TException {
         }
         switch (field.id) {
           case 0: // SUCCESS
-            if (field.type == TType.I32) {
-              this.success = iprot.readI32();
-              setSuccessIsSet(true);
+            if (field.type == TType.STRUCT) {
+              this.success = new com.evernote.edam.userstore.AuthenticationResult();
+              this.success.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -70147,7 +71126,7 @@ public void write(TProtocol oprot) throws TException {
 
       if (this.isSetSuccess()) {
         oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeI32(this.success);
+        this.success.write(oprot);
         oprot.writeFieldEnd();
       } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
@@ -70167,11 +71146,15 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("expungeLinkedNotebook_result(");
+      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_result(");
       boolean first = true;
 
       sb.append("success:");
-      sb.append(this.success);
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
       first = false;
       if (!first) sb.append(", ");
       sb.append("userException:");
@@ -70207,19 +71190,16 @@ public void validate() throws TException {
 
   }
 
-  public static class authenticateToSharedNotebook_args implements TBase<authenticateToSharedNotebook_args, authenticateToSharedNotebook_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_args");
+  public static class getSharedNotebookByAuth_args implements TBase<getSharedNotebookByAuth_args, getSharedNotebookByAuth_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_args");
 
-    private static final TField SHARE_KEY_FIELD_DESC = new TField("shareKey", TType.STRING, (short)1);
-    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)2);
+    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
 
-    private String shareKey;
     private String authenticationToken;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      SHARE_KEY((short)1, "shareKey"),
-      AUTHENTICATION_TOKEN((short)2, "authenticationToken");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -70234,9 +71214,7 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // SHARE_KEY
-            return SHARE_KEY;
-          case 2: // AUTHENTICATION_TOKEN
+          case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
           default:
             return null;
@@ -70282,70 +71260,39 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SHARE_KEY, new FieldMetaData("shareKey", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_args.class, metaDataMap);
     }
 
-    public authenticateToSharedNotebook_args() {
+    public getSharedNotebookByAuth_args() {
     }
 
-    public authenticateToSharedNotebook_args(
-      String shareKey,
+    public getSharedNotebookByAuth_args(
       String authenticationToken)
     {
       this();
-      this.shareKey = shareKey;
       this.authenticationToken = authenticationToken;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public authenticateToSharedNotebook_args(authenticateToSharedNotebook_args other) {
-      if (other.isSetShareKey()) {
-        this.shareKey = other.shareKey;
-      }
+    public getSharedNotebookByAuth_args(getSharedNotebookByAuth_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
     }
 
-    public authenticateToSharedNotebook_args deepCopy() {
-      return new authenticateToSharedNotebook_args(this);
+    public getSharedNotebookByAuth_args deepCopy() {
+      return new getSharedNotebookByAuth_args(this);
     }
 
     public void clear() {
-      this.shareKey = null;
       this.authenticationToken = null;
     }
 
-    public String getShareKey() {
-      return this.shareKey;
-    }
-
-    public void setShareKey(String shareKey) {
-      this.shareKey = shareKey;
-    }
-
-    public void unsetShareKey() {
-      this.shareKey = null;
-    }
-
-    /** Returns true if field shareKey is set (has been asigned a value) and false otherwise */
-    public boolean isSetShareKey() {
-      return this.shareKey != null;
-    }
-
-    public void setShareKeyIsSet(boolean value) {
-      if (!value) {
-        this.shareKey = null;
-      }
-    }
-
     public String getAuthenticationToken() {
       return this.authenticationToken;
     }
@@ -70371,14 +71318,6 @@ public void setAuthenticationTokenIsSet(boolean value) {
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SHARE_KEY:
-        if (value == null) {
-          unsetShareKey();
-        } else {
-          setShareKey((String)value);
-        }
-        break;
-
       case AUTHENTICATION_TOKEN:
         if (value == null) {
           unsetAuthenticationToken();
@@ -70392,9 +71331,6 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SHARE_KEY:
-        return getShareKey();
-
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
@@ -70409,8 +71345,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case SHARE_KEY:
-        return isSetShareKey();
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
       }
@@ -70420,24 +71354,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof authenticateToSharedNotebook_args)
-        return this.equals((authenticateToSharedNotebook_args)that);
+      if (that instanceof getSharedNotebookByAuth_args)
+        return this.equals((getSharedNotebookByAuth_args)that);
       return false;
     }
 
-    public boolean equals(authenticateToSharedNotebook_args that) {
+    public boolean equals(getSharedNotebookByAuth_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_shareKey = true && this.isSetShareKey();
-      boolean that_present_shareKey = true && that.isSetShareKey();
-      if (this_present_shareKey || that_present_shareKey) {
-        if (!(this_present_shareKey && that_present_shareKey))
-          return false;
-        if (!this.shareKey.equals(that.shareKey))
-          return false;
-      }
-
       boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
       boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
       if (this_present_authenticationToken || that_present_authenticationToken) {
@@ -70454,23 +71379,14 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(authenticateToSharedNotebook_args other) {
+    public int compareTo(getSharedNotebookByAuth_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      authenticateToSharedNotebook_args typedOther = (authenticateToSharedNotebook_args)other;
+      getSharedNotebookByAuth_args typedOther = (getSharedNotebookByAuth_args)other;
 
-      lastComparison = Boolean.valueOf(isSetShareKey()).compareTo(typedOther.isSetShareKey());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetShareKey()) {        lastComparison = TBaseHelper.compareTo(this.shareKey, typedOther.shareKey);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
         return lastComparison;
@@ -70497,14 +71413,7 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // SHARE_KEY
-            if (field.type == TType.STRING) {
-              this.shareKey = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
-          case 2: // AUTHENTICATION_TOKEN
+          case 1: // AUTHENTICATION_TOKEN
             if (field.type == TType.STRING) {
               this.authenticationToken = iprot.readString();
             } else { 
@@ -70524,11 +71433,6 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.shareKey != null) {
-        oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
-        oprot.writeString(this.shareKey);
-        oprot.writeFieldEnd();
-      }
       if (this.authenticationToken != null) {
         oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
         oprot.writeString(this.authenticationToken);
@@ -70539,17 +71443,9 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_args(");
+      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_args(");
       boolean first = true;
 
-      sb.append("shareKey:");
-      if (this.shareKey == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.shareKey);
-      }
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("authenticationToken:");
       if (this.authenticationToken == null) {
         sb.append("null");
@@ -70567,15 +71463,15 @@ public void validate() throws TException {
 
   }
 
-  public static class authenticateToSharedNotebook_result implements TBase<authenticateToSharedNotebook_result, authenticateToSharedNotebook_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNotebook_result");
+  public static class getSharedNotebookByAuth_result implements TBase<getSharedNotebookByAuth_result, getSharedNotebookByAuth_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_result");
 
     private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private com.evernote.edam.userstore.AuthenticationResult success;
+    private com.evernote.edam.type.SharedNotebook success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
@@ -70653,7 +71549,7 @@ public String getFieldName() {
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
+          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -70661,14 +71557,14 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(authenticateToSharedNotebook_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_result.class, metaDataMap);
     }
 
-    public authenticateToSharedNotebook_result() {
+    public getSharedNotebookByAuth_result() {
     }
 
-    public authenticateToSharedNotebook_result(
-      com.evernote.edam.userstore.AuthenticationResult success,
+    public getSharedNotebookByAuth_result(
+      com.evernote.edam.type.SharedNotebook success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
@@ -70683,9 +71579,9 @@ public authenticateToSharedNotebook_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public authenticateToSharedNotebook_result(authenticateToSharedNotebook_result other) {
+    public getSharedNotebookByAuth_result(getSharedNotebookByAuth_result other) {
       if (other.isSetSuccess()) {
-        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
+        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
       }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
@@ -70698,8 +71594,8 @@ public authenticateToSharedNotebook_result(authenticateToSharedNotebook_result o
       }
     }
 
-    public authenticateToSharedNotebook_result deepCopy() {
-      return new authenticateToSharedNotebook_result(this);
+    public getSharedNotebookByAuth_result deepCopy() {
+      return new getSharedNotebookByAuth_result(this);
     }
 
     public void clear() {
@@ -70709,11 +71605,11 @@ public void clear() {
       this.systemException = null;
     }
 
-    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
+    public com.evernote.edam.type.SharedNotebook getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
+    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
       this.success = success;
     }
 
@@ -70807,7 +71703,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
+          setSuccess((com.evernote.edam.type.SharedNotebook)value);
         }
         break;
 
@@ -70878,12 +71774,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof authenticateToSharedNotebook_result)
-        return this.equals((authenticateToSharedNotebook_result)that);
+      if (that instanceof getSharedNotebookByAuth_result)
+        return this.equals((getSharedNotebookByAuth_result)that);
       return false;
     }
 
-    public boolean equals(authenticateToSharedNotebook_result that) {
+    public boolean equals(getSharedNotebookByAuth_result that) {
       if (that == null)
         return false;
 
@@ -70930,13 +71826,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(authenticateToSharedNotebook_result other) {
+    public int compareTo(getSharedNotebookByAuth_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      authenticateToSharedNotebook_result typedOther = (authenticateToSharedNotebook_result)other;
+      getSharedNotebookByAuth_result typedOther = (getSharedNotebookByAuth_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -70993,7 +71889,7 @@ public void read(TProtocol iprot) throws TException {
         switch (field.id) {
           case 0: // SUCCESS
             if (field.type == TType.STRUCT) {
-              this.success = new com.evernote.edam.userstore.AuthenticationResult();
+              this.success = new com.evernote.edam.type.SharedNotebook();
               this.success.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
@@ -71057,7 +71953,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("authenticateToSharedNotebook_result(");
+      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -71101,16 +71997,19 @@ public void validate() throws TException {
 
   }
 
-  public static class getSharedNotebookByAuth_args implements TBase<getSharedNotebookByAuth_args, getSharedNotebookByAuth_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_args");
+  public static class emailNote_args implements TBase<emailNote_args, emailNote_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("emailNote_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
+    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRUCT, (short)2);
 
     private String authenticationToken;
+    private NoteEmailParameters parameters;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
+      PARAMETERS((short)2, "parameters");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -71127,6 +72026,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
+          case 2: // PARAMETERS
+            return PARAMETERS;
           default:
             return null;
         }
@@ -71173,35 +72074,43 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, NoteEmailParameters.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(emailNote_args.class, metaDataMap);
     }
 
-    public getSharedNotebookByAuth_args() {
+    public emailNote_args() {
     }
 
-    public getSharedNotebookByAuth_args(
-      String authenticationToken)
+    public emailNote_args(
+      String authenticationToken,
+      NoteEmailParameters parameters)
     {
       this();
       this.authenticationToken = authenticationToken;
+      this.parameters = parameters;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getSharedNotebookByAuth_args(getSharedNotebookByAuth_args other) {
+    public emailNote_args(emailNote_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
+      if (other.isSetParameters()) {
+        this.parameters = new NoteEmailParameters(other.parameters);
+      }
     }
 
-    public getSharedNotebookByAuth_args deepCopy() {
-      return new getSharedNotebookByAuth_args(this);
+    public emailNote_args deepCopy() {
+      return new emailNote_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
+      this.parameters = null;
     }
 
     public String getAuthenticationToken() {
@@ -71227,6 +72136,29 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
+    public NoteEmailParameters getParameters() {
+      return this.parameters;
+    }
+
+    public void setParameters(NoteEmailParameters parameters) {
+      this.parameters = parameters;
+    }
+
+    public void unsetParameters() {
+      this.parameters = null;
+    }
+
+    /** Returns true if field parameters is set (has been asigned a value) and false otherwise */
+    public boolean isSetParameters() {
+      return this.parameters != null;
+    }
+
+    public void setParametersIsSet(boolean value) {
+      if (!value) {
+        this.parameters = null;
+      }
+    }
+
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
@@ -71237,6 +72169,14 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
+      case PARAMETERS:
+        if (value == null) {
+          unsetParameters();
+        } else {
+          setParameters((NoteEmailParameters)value);
+        }
+        break;
+
       }
     }
 
@@ -71245,6 +72185,9 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
+      case PARAMETERS:
+        return getParameters();
+
       }
       throw new IllegalStateException();
     }
@@ -71258,6 +72201,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
+      case PARAMETERS:
+        return isSetParameters();
       }
       throw new IllegalStateException();
     }
@@ -71265,12 +72210,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getSharedNotebookByAuth_args)
-        return this.equals((getSharedNotebookByAuth_args)that);
+      if (that instanceof emailNote_args)
+        return this.equals((emailNote_args)that);
       return false;
     }
 
-    public boolean equals(getSharedNotebookByAuth_args that) {
+    public boolean equals(emailNote_args that) {
       if (that == null)
         return false;
 
@@ -71283,6 +72228,15 @@ public boolean equals(getSharedNotebookByAuth_args that) {
           return false;
       }
 
+      boolean this_present_parameters = true && this.isSetParameters();
+      boolean that_present_parameters = true && that.isSetParameters();
+      if (this_present_parameters || that_present_parameters) {
+        if (!(this_present_parameters && that_present_parameters))
+          return false;
+        if (!this.parameters.equals(that.parameters))
+          return false;
+      }
+
       return true;
     }
 
@@ -71290,13 +72244,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(getSharedNotebookByAuth_args other) {
+    public int compareTo(emailNote_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getSharedNotebookByAuth_args typedOther = (getSharedNotebookByAuth_args)other;
+      emailNote_args typedOther = (emailNote_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -71307,6 +72261,15 @@ public int compareTo(getSharedNotebookByAuth_args other) {
           return lastComparison;
         }
       }
+      lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetParameters()) {        lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       return 0;
     }
 
@@ -71331,6 +72294,14 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
+          case 2: // PARAMETERS
+            if (field.type == TType.STRUCT) {
+              this.parameters = new NoteEmailParameters();
+              this.parameters.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           default:
             TProtocolUtil.skip(iprot, field.type);
         }
@@ -71349,12 +72320,17 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
+      if (this.parameters != null) {
+        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
+        this.parameters.write(oprot);
+        oprot.writeFieldEnd();
+      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_args(");
+      StringBuilder sb = new StringBuilder("emailNote_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -71364,6 +72340,14 @@ public String toString() {
         sb.append(this.authenticationToken);
       }
       first = false;
+      if (!first) sb.append(", ");
+      sb.append("parameters:");
+      if (this.parameters == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.parameters);
+      }
+      first = false;
       sb.append(")");
       return sb.toString();
     }
@@ -71374,22 +72358,19 @@ public void validate() throws TException {
 
   }
 
-  public static class getSharedNotebookByAuth_result implements TBase<getSharedNotebookByAuth_result, getSharedNotebookByAuth_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("getSharedNotebookByAuth_result");
+  public static class emailNote_result implements TBase<emailNote_result, emailNote_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("emailNote_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private com.evernote.edam.type.SharedNotebook success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      SUCCESS((short)0, "success"),
       USER_EXCEPTION((short)1, "userException"),
       NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
       SYSTEM_EXCEPTION((short)3, "systemException");
@@ -71407,8 +72388,6 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           case 1: // USER_EXCEPTION
             return USER_EXCEPTION;
           case 2: // NOT_FOUND_EXCEPTION
@@ -71459,8 +72438,6 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.type.SharedNotebook.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -71468,20 +72445,18 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(getSharedNotebookByAuth_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(emailNote_result.class, metaDataMap);
     }
 
-    public getSharedNotebookByAuth_result() {
+    public emailNote_result() {
     }
 
-    public getSharedNotebookByAuth_result(
-      com.evernote.edam.type.SharedNotebook success,
+    public emailNote_result(
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
-      this.success = success;
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -71490,10 +72465,7 @@ public getSharedNotebookByAuth_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public getSharedNotebookByAuth_result(getSharedNotebookByAuth_result other) {
-      if (other.isSetSuccess()) {
-        this.success = new com.evernote.edam.type.SharedNotebook(other.success);
-      }
+    public emailNote_result(emailNote_result other) {
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -71505,40 +72477,16 @@ public getSharedNotebookByAuth_result(getSharedNotebookByAuth_result other) {
       }
     }
 
-    public getSharedNotebookByAuth_result deepCopy() {
-      return new getSharedNotebookByAuth_result(this);
+    public emailNote_result deepCopy() {
+      return new emailNote_result(this);
     }
 
     public void clear() {
-      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public com.evernote.edam.type.SharedNotebook getSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(com.evernote.edam.type.SharedNotebook success) {
-      this.success = success;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been asigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
     public com.evernote.edam.error.EDAMUserException getUserException() {
       return this.userException;
     }
@@ -71610,14 +72558,6 @@ public void setSystemExceptionIsSet(boolean value) {
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((com.evernote.edam.type.SharedNotebook)value);
-        }
-        break;
-
       case USER_EXCEPTION:
         if (value == null) {
           unsetUserException();
@@ -71647,9 +72587,6 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       case USER_EXCEPTION:
         return getUserException();
 
@@ -71670,8 +72607,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       case USER_EXCEPTION:
         return isSetUserException();
       case NOT_FOUND_EXCEPTION:
@@ -71685,24 +72620,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof getSharedNotebookByAuth_result)
-        return this.equals((getSharedNotebookByAuth_result)that);
+      if (that instanceof emailNote_result)
+        return this.equals((emailNote_result)that);
       return false;
     }
 
-    public boolean equals(getSharedNotebookByAuth_result that) {
+    public boolean equals(emailNote_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       boolean this_present_userException = true && this.isSetUserException();
       boolean that_present_userException = true && that.isSetUserException();
       if (this_present_userException || that_present_userException) {
@@ -71737,23 +72663,14 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(getSharedNotebookByAuth_result other) {
+    public int compareTo(emailNote_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      getSharedNotebookByAuth_result typedOther = (getSharedNotebookByAuth_result)other;
+      emailNote_result typedOther = (emailNote_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
       if (lastComparison != 0) {
         return lastComparison;
@@ -71798,14 +72715,6 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 0: // SUCCESS
-            if (field.type == TType.STRUCT) {
-              this.success = new com.evernote.edam.type.SharedNotebook();
-              this.success.read(iprot);
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
           case 1: // USER_EXCEPTION
             if (field.type == TType.STRUCT) {
               this.userException = new com.evernote.edam.error.EDAMUserException();
@@ -71842,11 +72751,7 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        this.success.write(oprot);
-        oprot.writeFieldEnd();
-      } else if (this.isSetUserException()) {
+      if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
         this.userException.write(oprot);
         oprot.writeFieldEnd();
@@ -71864,17 +72769,9 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("getSharedNotebookByAuth_result(");
+      StringBuilder sb = new StringBuilder("emailNote_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("userException:");
       if (this.userException == null) {
         sb.append("null");
@@ -71908,19 +72805,19 @@ public void validate() throws TException {
 
   }
 
-  public static class emailNote_args implements TBase<emailNote_args, emailNote_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("emailNote_args");
+  public static class shareNote_args implements TBase<shareNote_args, shareNote_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("shareNote_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField PARAMETERS_FIELD_DESC = new TField("parameters", TType.STRUCT, (short)2);
+    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
 
     private String authenticationToken;
-    private NoteEmailParameters parameters;
+    private String guid;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
       AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      PARAMETERS((short)2, "parameters");
+      GUID((short)2, "guid");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -71937,8 +72834,8 @@ public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
           case 1: // AUTHENTICATION_TOKEN
             return AUTHENTICATION_TOKEN;
-          case 2: // PARAMETERS
-            return PARAMETERS;
+          case 2: // GUID
+            return GUID;
           default:
             return null;
         }
@@ -71985,43 +72882,43 @@ public String getFieldName() {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.PARAMETERS, new FieldMetaData("parameters", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, NoteEmailParameters.class)));
+      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING          , "Guid")));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(emailNote_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(shareNote_args.class, metaDataMap);
     }
 
-    public emailNote_args() {
+    public shareNote_args() {
     }
 
-    public emailNote_args(
+    public shareNote_args(
       String authenticationToken,
-      NoteEmailParameters parameters)
+      String guid)
     {
       this();
       this.authenticationToken = authenticationToken;
-      this.parameters = parameters;
+      this.guid = guid;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public emailNote_args(emailNote_args other) {
+    public shareNote_args(shareNote_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetParameters()) {
-        this.parameters = new NoteEmailParameters(other.parameters);
+      if (other.isSetGuid()) {
+        this.guid = other.guid;
       }
     }
 
-    public emailNote_args deepCopy() {
-      return new emailNote_args(this);
+    public shareNote_args deepCopy() {
+      return new shareNote_args(this);
     }
 
     public void clear() {
       this.authenticationToken = null;
-      this.parameters = null;
+      this.guid = null;
     }
 
     public String getAuthenticationToken() {
@@ -72047,26 +72944,26 @@ public void setAuthenticationTokenIsSet(boolean value) {
       }
     }
 
-    public NoteEmailParameters getParameters() {
-      return this.parameters;
+    public String getGuid() {
+      return this.guid;
     }
 
-    public void setParameters(NoteEmailParameters parameters) {
-      this.parameters = parameters;
+    public void setGuid(String guid) {
+      this.guid = guid;
     }
 
-    public void unsetParameters() {
-      this.parameters = null;
+    public void unsetGuid() {
+      this.guid = null;
     }
 
-    /** Returns true if field parameters is set (has been asigned a value) and false otherwise */
-    public boolean isSetParameters() {
-      return this.parameters != null;
+    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
+    public boolean isSetGuid() {
+      return this.guid != null;
     }
 
-    public void setParametersIsSet(boolean value) {
+    public void setGuidIsSet(boolean value) {
       if (!value) {
-        this.parameters = null;
+        this.guid = null;
       }
     }
 
@@ -72080,11 +72977,11 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case PARAMETERS:
+      case GUID:
         if (value == null) {
-          unsetParameters();
+          unsetGuid();
         } else {
-          setParameters((NoteEmailParameters)value);
+          setGuid((String)value);
         }
         break;
 
@@ -72096,8 +72993,8 @@ public Object getFieldValue(_Fields field) {
       case AUTHENTICATION_TOKEN:
         return getAuthenticationToken();
 
-      case PARAMETERS:
-        return getParameters();
+      case GUID:
+        return getGuid();
 
       }
       throw new IllegalStateException();
@@ -72112,8 +73009,8 @@ public boolean isSet(_Fields field) {
       switch (field) {
       case AUTHENTICATION_TOKEN:
         return isSetAuthenticationToken();
-      case PARAMETERS:
-        return isSetParameters();
+      case GUID:
+        return isSetGuid();
       }
       throw new IllegalStateException();
     }
@@ -72121,12 +73018,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof emailNote_args)
-        return this.equals((emailNote_args)that);
+      if (that instanceof shareNote_args)
+        return this.equals((shareNote_args)that);
       return false;
     }
 
-    public boolean equals(emailNote_args that) {
+    public boolean equals(shareNote_args that) {
       if (that == null)
         return false;
 
@@ -72139,12 +73036,12 @@ public boolean equals(emailNote_args that) {
           return false;
       }
 
-      boolean this_present_parameters = true && this.isSetParameters();
-      boolean that_present_parameters = true && that.isSetParameters();
-      if (this_present_parameters || that_present_parameters) {
-        if (!(this_present_parameters && that_present_parameters))
+      boolean this_present_guid = true && this.isSetGuid();
+      boolean that_present_guid = true && that.isSetGuid();
+      if (this_present_guid || that_present_guid) {
+        if (!(this_present_guid && that_present_guid))
           return false;
-        if (!this.parameters.equals(that.parameters))
+        if (!this.guid.equals(that.guid))
           return false;
       }
 
@@ -72155,13 +73052,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(emailNote_args other) {
+    public int compareTo(shareNote_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      emailNote_args typedOther = (emailNote_args)other;
+      shareNote_args typedOther = (shareNote_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -72172,11 +73069,11 @@ public int compareTo(emailNote_args other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
+      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetParameters()) {        lastComparison = TBaseHelper.compareTo(this.parameters, typedOther.parameters);
+      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -72205,10 +73102,9 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // PARAMETERS
-            if (field.type == TType.STRUCT) {
-              this.parameters = new NoteEmailParameters();
-              this.parameters.read(iprot);
+          case 2: // GUID
+            if (field.type == TType.STRING) {
+              this.guid = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -72231,9 +73127,9 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.parameters != null) {
-        oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
-        this.parameters.write(oprot);
+      if (this.guid != null) {
+        oprot.writeFieldBegin(GUID_FIELD_DESC);
+        oprot.writeString(this.guid);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -72241,7 +73137,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("emailNote_args(");
+      StringBuilder sb = new StringBuilder("shareNote_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -72252,11 +73148,11 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("parameters:");
-      if (this.parameters == null) {
+      sb.append("guid:");
+      if (this.guid == null) {
         sb.append("null");
       } else {
-        sb.append(this.parameters);
+        sb.append(this.guid);
       }
       first = false;
       sb.append(")");
@@ -72269,19 +73165,22 @@ public void validate() throws TException {
 
   }
 
-  public static class emailNote_result implements TBase<emailNote_result, emailNote_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("emailNote_result");
+  public static class shareNote_result implements TBase<shareNote_result, shareNote_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("shareNote_result");
 
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
+    private String success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
+      SUCCESS((short)0, "success"),
       USER_EXCEPTION((short)1, "userException"),
       NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
       SYSTEM_EXCEPTION((short)3, "systemException");
@@ -72299,6 +73198,8 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           case 1: // USER_EXCEPTION
             return USER_EXCEPTION;
           case 2: // NOT_FOUND_EXCEPTION
@@ -72349,6 +73250,8 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -72356,18 +73259,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(emailNote_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(shareNote_result.class, metaDataMap);
     }
 
-    public emailNote_result() {
+    public shareNote_result() {
     }
 
-    public emailNote_result(
+    public shareNote_result(
+      String success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
+      this.success = success;
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -72376,7 +73281,10 @@ public emailNote_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public emailNote_result(emailNote_result other) {
+    public shareNote_result(shareNote_result other) {
+      if (other.isSetSuccess()) {
+        this.success = other.success;
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -72388,16 +73296,40 @@ public emailNote_result(emailNote_result other) {
       }
     }
 
-    public emailNote_result deepCopy() {
-      return new emailNote_result(this);
+    public shareNote_result deepCopy() {
+      return new shareNote_result(this);
     }
 
     public void clear() {
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
+    public String getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(String success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been asigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
     public com.evernote.edam.error.EDAMUserException getUserException() {
       return this.userException;
     }
@@ -72469,6 +73401,14 @@ public void setSystemExceptionIsSet(boolean value) {
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((String)value);
+        }
+        break;
+
       case USER_EXCEPTION:
         if (value == null) {
           unsetUserException();
@@ -72498,6 +73438,9 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
       case USER_EXCEPTION:
         return getUserException();
 
@@ -72518,6 +73461,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
       case USER_EXCEPTION:
         return isSetUserException();
       case NOT_FOUND_EXCEPTION:
@@ -72531,15 +73476,24 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof emailNote_result)
-        return this.equals((emailNote_result)that);
+      if (that instanceof shareNote_result)
+        return this.equals((shareNote_result)that);
       return false;
     }
 
-    public boolean equals(emailNote_result that) {
+    public boolean equals(shareNote_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
       boolean this_present_userException = true && this.isSetUserException();
       boolean that_present_userException = true && that.isSetUserException();
       if (this_present_userException || that_present_userException) {
@@ -72574,14 +73528,23 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(emailNote_result other) {
+    public int compareTo(shareNote_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      emailNote_result typedOther = (emailNote_result)other;
+      shareNote_result typedOther = (shareNote_result)other;
 
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
       if (lastComparison != 0) {
         return lastComparison;
@@ -72626,6 +73589,13 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
+          case 0: // SUCCESS
+            if (field.type == TType.STRING) {
+              this.success = iprot.readString();
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           case 1: // USER_EXCEPTION
             if (field.type == TType.STRUCT) {
               this.userException = new com.evernote.edam.error.EDAMUserException();
@@ -72662,7 +73632,11 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetUserException()) {
+      if (this.isSetSuccess()) {
+        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+        oprot.writeString(this.success);
+        oprot.writeFieldEnd();
+      } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
         this.userException.write(oprot);
         oprot.writeFieldEnd();
@@ -72680,9 +73654,17 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("emailNote_result(");
+      StringBuilder sb = new StringBuilder("shareNote_result(");
       boolean first = true;
 
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("userException:");
       if (this.userException == null) {
         sb.append("null");
@@ -72716,8 +73698,8 @@ public void validate() throws TException {
 
   }
 
-  public static class shareNote_args implements TBase<shareNote_args, shareNote_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("shareNote_args");
+  public static class stopSharingNote_args implements TBase<stopSharingNote_args, stopSharingNote_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_args");
 
     private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
     private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
@@ -72796,13 +73778,13 @@ public String getFieldName() {
       tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING          , "Guid")));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(shareNote_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(stopSharingNote_args.class, metaDataMap);
     }
 
-    public shareNote_args() {
+    public stopSharingNote_args() {
     }
 
-    public shareNote_args(
+    public stopSharingNote_args(
       String authenticationToken,
       String guid)
     {
@@ -72814,7 +73796,7 @@ public shareNote_args(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public shareNote_args(shareNote_args other) {
+    public stopSharingNote_args(stopSharingNote_args other) {
       if (other.isSetAuthenticationToken()) {
         this.authenticationToken = other.authenticationToken;
       }
@@ -72823,8 +73805,8 @@ public shareNote_args(shareNote_args other) {
       }
     }
 
-    public shareNote_args deepCopy() {
-      return new shareNote_args(this);
+    public stopSharingNote_args deepCopy() {
+      return new stopSharingNote_args(this);
     }
 
     public void clear() {
@@ -72929,12 +73911,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof shareNote_args)
-        return this.equals((shareNote_args)that);
+      if (that instanceof stopSharingNote_args)
+        return this.equals((stopSharingNote_args)that);
       return false;
     }
 
-    public boolean equals(shareNote_args that) {
+    public boolean equals(stopSharingNote_args that) {
       if (that == null)
         return false;
 
@@ -72963,13 +73945,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(shareNote_args other) {
+    public int compareTo(stopSharingNote_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      shareNote_args typedOther = (shareNote_args)other;
+      stopSharingNote_args typedOther = (stopSharingNote_args)other;
 
       lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
@@ -73048,7 +74030,7 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("shareNote_args(");
+      StringBuilder sb = new StringBuilder("stopSharingNote_args(");
       boolean first = true;
 
       sb.append("authenticationToken:");
@@ -73076,22 +74058,19 @@ public void validate() throws TException {
 
   }
 
-  public static class shareNote_result implements TBase<shareNote_result, shareNote_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("shareNote_result");
+  public static class stopSharingNote_result implements TBase<stopSharingNote_result, stopSharingNote_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_result");
 
-    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
-    private String success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      SUCCESS((short)0, "success"),
       USER_EXCEPTION((short)1, "userException"),
       NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
       SYSTEM_EXCEPTION((short)3, "systemException");
@@ -73109,8 +74088,6 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 0: // SUCCESS
-            return SUCCESS;
           case 1: // USER_EXCEPTION
             return USER_EXCEPTION;
           case 2: // NOT_FOUND_EXCEPTION
@@ -73161,8 +74138,6 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -73170,20 +74145,18 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(shareNote_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(stopSharingNote_result.class, metaDataMap);
     }
 
-    public shareNote_result() {
+    public stopSharingNote_result() {
     }
 
-    public shareNote_result(
-      String success,
+    public stopSharingNote_result(
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
-      this.success = success;
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -73192,10 +74165,7 @@ public shareNote_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public shareNote_result(shareNote_result other) {
-      if (other.isSetSuccess()) {
-        this.success = other.success;
-      }
+    public stopSharingNote_result(stopSharingNote_result other) {
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -73207,40 +74177,16 @@ public shareNote_result(shareNote_result other) {
       }
     }
 
-    public shareNote_result deepCopy() {
-      return new shareNote_result(this);
+    public stopSharingNote_result deepCopy() {
+      return new stopSharingNote_result(this);
     }
 
     public void clear() {
-      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
-    public String getSuccess() {
-      return this.success;
-    }
-
-    public void setSuccess(String success) {
-      this.success = success;
-    }
-
-    public void unsetSuccess() {
-      this.success = null;
-    }
-
-    /** Returns true if field success is set (has been asigned a value) and false otherwise */
-    public boolean isSetSuccess() {
-      return this.success != null;
-    }
-
-    public void setSuccessIsSet(boolean value) {
-      if (!value) {
-        this.success = null;
-      }
-    }
-
     public com.evernote.edam.error.EDAMUserException getUserException() {
       return this.userException;
     }
@@ -73312,14 +74258,6 @@ public void setSystemExceptionIsSet(boolean value) {
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case SUCCESS:
-        if (value == null) {
-          unsetSuccess();
-        } else {
-          setSuccess((String)value);
-        }
-        break;
-
       case USER_EXCEPTION:
         if (value == null) {
           unsetUserException();
@@ -73349,9 +74287,6 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case SUCCESS:
-        return getSuccess();
-
       case USER_EXCEPTION:
         return getUserException();
 
@@ -73372,8 +74307,6 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case SUCCESS:
-        return isSetSuccess();
       case USER_EXCEPTION:
         return isSetUserException();
       case NOT_FOUND_EXCEPTION:
@@ -73387,24 +74320,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof shareNote_result)
-        return this.equals((shareNote_result)that);
+      if (that instanceof stopSharingNote_result)
+        return this.equals((stopSharingNote_result)that);
       return false;
     }
 
-    public boolean equals(shareNote_result that) {
+    public boolean equals(stopSharingNote_result that) {
       if (that == null)
         return false;
 
-      boolean this_present_success = true && this.isSetSuccess();
-      boolean that_present_success = true && that.isSetSuccess();
-      if (this_present_success || that_present_success) {
-        if (!(this_present_success && that_present_success))
-          return false;
-        if (!this.success.equals(that.success))
-          return false;
-      }
-
       boolean this_present_userException = true && this.isSetUserException();
       boolean that_present_userException = true && that.isSetUserException();
       if (this_present_userException || that_present_userException) {
@@ -73439,23 +74363,14 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(shareNote_result other) {
+    public int compareTo(stopSharingNote_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      shareNote_result typedOther = (shareNote_result)other;
+      stopSharingNote_result typedOther = (stopSharingNote_result)other;
 
-      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
-      if (lastComparison != 0) {
-        return lastComparison;
-      }
-      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
-        if (lastComparison != 0) {
-          return lastComparison;
-        }
-      }
       lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
       if (lastComparison != 0) {
         return lastComparison;
@@ -73500,13 +74415,6 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 0: // SUCCESS
-            if (field.type == TType.STRING) {
-              this.success = iprot.readString();
-            } else { 
-              TProtocolUtil.skip(iprot, field.type);
-            }
-            break;
           case 1: // USER_EXCEPTION
             if (field.type == TType.STRUCT) {
               this.userException = new com.evernote.edam.error.EDAMUserException();
@@ -73543,11 +74451,7 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetSuccess()) {
-        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
-        oprot.writeString(this.success);
-        oprot.writeFieldEnd();
-      } else if (this.isSetUserException()) {
+      if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
         this.userException.write(oprot);
         oprot.writeFieldEnd();
@@ -73565,17 +74469,9 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("shareNote_result(");
+      StringBuilder sb = new StringBuilder("stopSharingNote_result(");
       boolean first = true;
 
-      sb.append("success:");
-      if (this.success == null) {
-        sb.append("null");
-      } else {
-        sb.append(this.success);
-      }
-      first = false;
-      if (!first) sb.append(", ");
       sb.append("userException:");
       if (this.userException == null) {
         sb.append("null");
@@ -73609,19 +74505,19 @@ public void validate() throws TException {
 
   }
 
-  public static class stopSharingNote_args implements TBase<stopSharingNote_args, stopSharingNote_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_args");
+  public static class authenticateToSharedNote_args implements TBase<authenticateToSharedNote_args, authenticateToSharedNote_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_args");
 
-    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
-    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)2);
+    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)1);
+    private static final TField NOTE_KEY_FIELD_DESC = new TField("noteKey", TType.STRING, (short)2);
 
-    private String authenticationToken;
     private String guid;
+    private String noteKey;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
-      GUID((short)2, "guid");
+      GUID((short)1, "guid"),
+      NOTE_KEY((short)2, "noteKey");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -73636,10 +74532,10 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // AUTHENTICATION_TOKEN
-            return AUTHENTICATION_TOKEN;
-          case 2: // GUID
+          case 1: // GUID
             return GUID;
+          case 2: // NOTE_KEY
+            return NOTE_KEY;
           default:
             return null;
         }
@@ -73684,108 +74580,108 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
       tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING          , "Guid")));
+          new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.NOTE_KEY, new FieldMetaData("noteKey", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRING)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(stopSharingNote_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_args.class, metaDataMap);
     }
 
-    public stopSharingNote_args() {
+    public authenticateToSharedNote_args() {
     }
 
-    public stopSharingNote_args(
-      String authenticationToken,
-      String guid)
+    public authenticateToSharedNote_args(
+      String guid,
+      String noteKey)
     {
       this();
-      this.authenticationToken = authenticationToken;
       this.guid = guid;
+      this.noteKey = noteKey;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public stopSharingNote_args(stopSharingNote_args other) {
-      if (other.isSetAuthenticationToken()) {
-        this.authenticationToken = other.authenticationToken;
-      }
+    public authenticateToSharedNote_args(authenticateToSharedNote_args other) {
       if (other.isSetGuid()) {
         this.guid = other.guid;
       }
+      if (other.isSetNoteKey()) {
+        this.noteKey = other.noteKey;
+      }
     }
 
-    public stopSharingNote_args deepCopy() {
-      return new stopSharingNote_args(this);
+    public authenticateToSharedNote_args deepCopy() {
+      return new authenticateToSharedNote_args(this);
     }
 
     public void clear() {
-      this.authenticationToken = null;
       this.guid = null;
+      this.noteKey = null;
     }
 
-    public String getAuthenticationToken() {
-      return this.authenticationToken;
+    public String getGuid() {
+      return this.guid;
     }
 
-    public void setAuthenticationToken(String authenticationToken) {
-      this.authenticationToken = authenticationToken;
+    public void setGuid(String guid) {
+      this.guid = guid;
     }
 
-    public void unsetAuthenticationToken() {
-      this.authenticationToken = null;
+    public void unsetGuid() {
+      this.guid = null;
     }
 
-    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
-    public boolean isSetAuthenticationToken() {
-      return this.authenticationToken != null;
+    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
+    public boolean isSetGuid() {
+      return this.guid != null;
     }
 
-    public void setAuthenticationTokenIsSet(boolean value) {
+    public void setGuidIsSet(boolean value) {
       if (!value) {
-        this.authenticationToken = null;
+        this.guid = null;
       }
     }
 
-    public String getGuid() {
-      return this.guid;
+    public String getNoteKey() {
+      return this.noteKey;
     }
 
-    public void setGuid(String guid) {
-      this.guid = guid;
+    public void setNoteKey(String noteKey) {
+      this.noteKey = noteKey;
     }
 
-    public void unsetGuid() {
-      this.guid = null;
+    public void unsetNoteKey() {
+      this.noteKey = null;
     }
 
-    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
-    public boolean isSetGuid() {
-      return this.guid != null;
+    /** Returns true if field noteKey is set (has been asigned a value) and false otherwise */
+    public boolean isSetNoteKey() {
+      return this.noteKey != null;
     }
 
-    public void setGuidIsSet(boolean value) {
+    public void setNoteKeyIsSet(boolean value) {
       if (!value) {
-        this.guid = null;
+        this.noteKey = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case AUTHENTICATION_TOKEN:
+      case GUID:
         if (value == null) {
-          unsetAuthenticationToken();
+          unsetGuid();
         } else {
-          setAuthenticationToken((String)value);
+          setGuid((String)value);
         }
         break;
 
-      case GUID:
+      case NOTE_KEY:
         if (value == null) {
-          unsetGuid();
+          unsetNoteKey();
         } else {
-          setGuid((String)value);
+          setNoteKey((String)value);
         }
         break;
 
@@ -73794,12 +74690,12 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case AUTHENTICATION_TOKEN:
-        return getAuthenticationToken();
-
       case GUID:
         return getGuid();
 
+      case NOTE_KEY:
+        return getNoteKey();
+
       }
       throw new IllegalStateException();
     }
@@ -73811,10 +74707,10 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case AUTHENTICATION_TOKEN:
-        return isSetAuthenticationToken();
       case GUID:
         return isSetGuid();
+      case NOTE_KEY:
+        return isSetNoteKey();
       }
       throw new IllegalStateException();
     }
@@ -73822,24 +74718,15 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof stopSharingNote_args)
-        return this.equals((stopSharingNote_args)that);
+      if (that instanceof authenticateToSharedNote_args)
+        return this.equals((authenticateToSharedNote_args)that);
       return false;
     }
 
-    public boolean equals(stopSharingNote_args that) {
+    public boolean equals(authenticateToSharedNote_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
-      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
-      if (this_present_authenticationToken || that_present_authenticationToken) {
-        if (!(this_present_authenticationToken && that_present_authenticationToken))
-          return false;
-        if (!this.authenticationToken.equals(that.authenticationToken))
-          return false;
-      }
-
       boolean this_present_guid = true && this.isSetGuid();
       boolean that_present_guid = true && that.isSetGuid();
       if (this_present_guid || that_present_guid) {
@@ -73849,6 +74736,15 @@ public boolean equals(stopSharingNote_args that) {
           return false;
       }
 
+      boolean this_present_noteKey = true && this.isSetNoteKey();
+      boolean that_present_noteKey = true && that.isSetNoteKey();
+      if (this_present_noteKey || that_present_noteKey) {
+        if (!(this_present_noteKey && that_present_noteKey))
+          return false;
+        if (!this.noteKey.equals(that.noteKey))
+          return false;
+      }
+
       return true;
     }
 
@@ -73856,28 +74752,28 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(stopSharingNote_args other) {
+    public int compareTo(authenticateToSharedNote_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      stopSharingNote_args typedOther = (stopSharingNote_args)other;
+      authenticateToSharedNote_args typedOther = (authenticateToSharedNote_args)other;
 
-      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
+      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
+      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
+      lastComparison = Boolean.valueOf(isSetNoteKey()).compareTo(typedOther.isSetNoteKey());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
+      if (isSetNoteKey()) {        lastComparison = TBaseHelper.compareTo(this.noteKey, typedOther.noteKey);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -73899,16 +74795,16 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // AUTHENTICATION_TOKEN
+          case 1: // GUID
             if (field.type == TType.STRING) {
-              this.authenticationToken = iprot.readString();
+              this.guid = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // GUID
+          case 2: // NOTE_KEY
             if (field.type == TType.STRING) {
-              this.guid = iprot.readString();
+              this.noteKey = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -73926,37 +74822,37 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.authenticationToken != null) {
-        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
-        oprot.writeString(this.authenticationToken);
-        oprot.writeFieldEnd();
-      }
       if (this.guid != null) {
         oprot.writeFieldBegin(GUID_FIELD_DESC);
         oprot.writeString(this.guid);
         oprot.writeFieldEnd();
       }
+      if (this.noteKey != null) {
+        oprot.writeFieldBegin(NOTE_KEY_FIELD_DESC);
+        oprot.writeString(this.noteKey);
+        oprot.writeFieldEnd();
+      }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("stopSharingNote_args(");
+      StringBuilder sb = new StringBuilder("authenticateToSharedNote_args(");
       boolean first = true;
 
-      sb.append("authenticationToken:");
-      if (this.authenticationToken == null) {
+      sb.append("guid:");
+      if (this.guid == null) {
         sb.append("null");
       } else {
-        sb.append(this.authenticationToken);
+        sb.append(this.guid);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("guid:");
-      if (this.guid == null) {
+      sb.append("noteKey:");
+      if (this.noteKey == null) {
         sb.append("null");
       } else {
-        sb.append(this.guid);
+        sb.append(this.noteKey);
       }
       first = false;
       sb.append(")");
@@ -73969,19 +74865,22 @@ public void validate() throws TException {
 
   }
 
-  public static class stopSharingNote_result implements TBase<stopSharingNote_result, stopSharingNote_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("stopSharingNote_result");
+  public static class authenticateToSharedNote_result implements TBase<authenticateToSharedNote_result, authenticateToSharedNote_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_result");
 
+    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
     private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
     private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
 
+    private com.evernote.edam.userstore.AuthenticationResult success;
     private com.evernote.edam.error.EDAMUserException userException;
     private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
+      SUCCESS((short)0, "success"),
       USER_EXCEPTION((short)1, "userException"),
       NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
       SYSTEM_EXCEPTION((short)3, "systemException");
@@ -73999,6 +74898,8 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
+          case 0: // SUCCESS
+            return SUCCESS;
           case 1: // USER_EXCEPTION
             return USER_EXCEPTION;
           case 2: // NOT_FOUND_EXCEPTION
@@ -74049,6 +74950,8 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+      tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
@@ -74056,18 +74959,20 @@ public String getFieldName() {
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(stopSharingNote_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_result.class, metaDataMap);
     }
 
-    public stopSharingNote_result() {
+    public authenticateToSharedNote_result() {
     }
 
-    public stopSharingNote_result(
+    public authenticateToSharedNote_result(
+      com.evernote.edam.userstore.AuthenticationResult success,
       com.evernote.edam.error.EDAMUserException userException,
       com.evernote.edam.error.EDAMNotFoundException notFoundException,
       com.evernote.edam.error.EDAMSystemException systemException)
     {
       this();
+      this.success = success;
       this.userException = userException;
       this.notFoundException = notFoundException;
       this.systemException = systemException;
@@ -74076,7 +74981,10 @@ public stopSharingNote_result(
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public stopSharingNote_result(stopSharingNote_result other) {
+    public authenticateToSharedNote_result(authenticateToSharedNote_result other) {
+      if (other.isSetSuccess()) {
+        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
+      }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
@@ -74088,16 +74996,40 @@ public stopSharingNote_result(stopSharingNote_result other) {
       }
     }
 
-    public stopSharingNote_result deepCopy() {
-      return new stopSharingNote_result(this);
+    public authenticateToSharedNote_result deepCopy() {
+      return new authenticateToSharedNote_result(this);
     }
 
     public void clear() {
+      this.success = null;
       this.userException = null;
       this.notFoundException = null;
       this.systemException = null;
     }
 
+    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
+      return this.success;
+    }
+
+    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
+      this.success = success;
+    }
+
+    public void unsetSuccess() {
+      this.success = null;
+    }
+
+    /** Returns true if field success is set (has been asigned a value) and false otherwise */
+    public boolean isSetSuccess() {
+      return this.success != null;
+    }
+
+    public void setSuccessIsSet(boolean value) {
+      if (!value) {
+        this.success = null;
+      }
+    }
+
     public com.evernote.edam.error.EDAMUserException getUserException() {
       return this.userException;
     }
@@ -74169,6 +75101,14 @@ public void setSystemExceptionIsSet(boolean value) {
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
+      case SUCCESS:
+        if (value == null) {
+          unsetSuccess();
+        } else {
+          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
+        }
+        break;
+
       case USER_EXCEPTION:
         if (value == null) {
           unsetUserException();
@@ -74198,6 +75138,9 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
+      case SUCCESS:
+        return getSuccess();
+
       case USER_EXCEPTION:
         return getUserException();
 
@@ -74218,6 +75161,8 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
+      case SUCCESS:
+        return isSetSuccess();
       case USER_EXCEPTION:
         return isSetUserException();
       case NOT_FOUND_EXCEPTION:
@@ -74231,15 +75176,24 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof stopSharingNote_result)
-        return this.equals((stopSharingNote_result)that);
+      if (that instanceof authenticateToSharedNote_result)
+        return this.equals((authenticateToSharedNote_result)that);
       return false;
     }
 
-    public boolean equals(stopSharingNote_result that) {
+    public boolean equals(authenticateToSharedNote_result that) {
       if (that == null)
         return false;
 
+      boolean this_present_success = true && this.isSetSuccess();
+      boolean that_present_success = true && that.isSetSuccess();
+      if (this_present_success || that_present_success) {
+        if (!(this_present_success && that_present_success))
+          return false;
+        if (!this.success.equals(that.success))
+          return false;
+      }
+
       boolean this_present_userException = true && this.isSetUserException();
       boolean that_present_userException = true && that.isSetUserException();
       if (this_present_userException || that_present_userException) {
@@ -74274,14 +75228,23 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(stopSharingNote_result other) {
+    public int compareTo(authenticateToSharedNote_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      stopSharingNote_result typedOther = (stopSharingNote_result)other;
+      authenticateToSharedNote_result typedOther = (authenticateToSharedNote_result)other;
 
+      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetSuccess()) {        lastComparison = TBaseHelper.compareTo(this.success, typedOther.success);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
       lastComparison = Boolean.valueOf(isSetUserException()).compareTo(typedOther.isSetUserException());
       if (lastComparison != 0) {
         return lastComparison;
@@ -74326,6 +75289,14 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
+          case 0: // SUCCESS
+            if (field.type == TType.STRUCT) {
+              this.success = new com.evernote.edam.userstore.AuthenticationResult();
+              this.success.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
           case 1: // USER_EXCEPTION
             if (field.type == TType.STRUCT) {
               this.userException = new com.evernote.edam.error.EDAMUserException();
@@ -74362,7 +75333,11 @@ public void read(TProtocol iprot) throws TException {
     public void write(TProtocol oprot) throws TException {
       oprot.writeStructBegin(STRUCT_DESC);
 
-      if (this.isSetUserException()) {
+      if (this.isSetSuccess()) {
+        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
+        this.success.write(oprot);
+        oprot.writeFieldEnd();
+      } else if (this.isSetUserException()) {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
         this.userException.write(oprot);
         oprot.writeFieldEnd();
@@ -74380,9 +75355,17 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("stopSharingNote_result(");
+      StringBuilder sb = new StringBuilder("authenticateToSharedNote_result(");
       boolean first = true;
 
+      sb.append("success:");
+      if (this.success == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.success);
+      }
+      first = false;
+      if (!first) sb.append(", ");
       sb.append("userException:");
       if (this.userException == null) {
         sb.append("null");
@@ -74416,19 +75399,22 @@ public void validate() throws TException {
 
   }
 
-  public static class authenticateToSharedNote_args implements TBase<authenticateToSharedNote_args, authenticateToSharedNote_args._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_args");
+  public static class findRelated_args implements TBase<findRelated_args, findRelated_args._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("findRelated_args");
 
-    private static final TField GUID_FIELD_DESC = new TField("guid", TType.STRING, (short)1);
-    private static final TField NOTE_KEY_FIELD_DESC = new TField("noteKey", TType.STRING, (short)2);
+    private static final TField AUTHENTICATION_TOKEN_FIELD_DESC = new TField("authenticationToken", TType.STRING, (short)1);
+    private static final TField QUERY_FIELD_DESC = new TField("query", TType.STRUCT, (short)2);
+    private static final TField RESULT_SPEC_FIELD_DESC = new TField("resultSpec", TType.STRUCT, (short)3);
 
-    private String guid;
-    private String noteKey;
+    private String authenticationToken;
+    private RelatedQuery query;
+    private RelatedResultSpec resultSpec;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
-      GUID((short)1, "guid"),
-      NOTE_KEY((short)2, "noteKey");
+      AUTHENTICATION_TOKEN((short)1, "authenticationToken"),
+      QUERY((short)2, "query"),
+      RESULT_SPEC((short)3, "resultSpec");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -74443,10 +75429,12 @@ public void validate() throws TException {
        */
       public static _Fields findByThriftId(int fieldId) {
         switch(fieldId) {
-          case 1: // GUID
-            return GUID;
-          case 2: // NOTE_KEY
-            return NOTE_KEY;
+          case 1: // AUTHENTICATION_TOKEN
+            return AUTHENTICATION_TOKEN;
+          case 2: // QUERY
+            return QUERY;
+          case 3: // RESULT_SPEC
+            return RESULT_SPEC;
           default:
             return null;
         }
@@ -74491,108 +75479,147 @@ public String getFieldName() {
     public static final Map<_Fields, FieldMetaData> metaDataMap;
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
-      tmpMap.put(_Fields.GUID, new FieldMetaData("guid", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRING)));
-      tmpMap.put(_Fields.NOTE_KEY, new FieldMetaData("noteKey", TFieldRequirementType.DEFAULT, 
+      tmpMap.put(_Fields.AUTHENTICATION_TOKEN, new FieldMetaData("authenticationToken", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRING)));
+      tmpMap.put(_Fields.QUERY, new FieldMetaData("query", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, RelatedQuery.class)));
+      tmpMap.put(_Fields.RESULT_SPEC, new FieldMetaData("resultSpec", TFieldRequirementType.DEFAULT, 
+          new StructMetaData(TType.STRUCT, RelatedResultSpec.class)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_args.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(findRelated_args.class, metaDataMap);
     }
 
-    public authenticateToSharedNote_args() {
+    public findRelated_args() {
     }
 
-    public authenticateToSharedNote_args(
-      String guid,
-      String noteKey)
+    public findRelated_args(
+      String authenticationToken,
+      RelatedQuery query,
+      RelatedResultSpec resultSpec)
     {
       this();
-      this.guid = guid;
-      this.noteKey = noteKey;
+      this.authenticationToken = authenticationToken;
+      this.query = query;
+      this.resultSpec = resultSpec;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public authenticateToSharedNote_args(authenticateToSharedNote_args other) {
-      if (other.isSetGuid()) {
-        this.guid = other.guid;
+    public findRelated_args(findRelated_args other) {
+      if (other.isSetAuthenticationToken()) {
+        this.authenticationToken = other.authenticationToken;
       }
-      if (other.isSetNoteKey()) {
-        this.noteKey = other.noteKey;
+      if (other.isSetQuery()) {
+        this.query = new RelatedQuery(other.query);
+      }
+      if (other.isSetResultSpec()) {
+        this.resultSpec = new RelatedResultSpec(other.resultSpec);
       }
     }
 
-    public authenticateToSharedNote_args deepCopy() {
-      return new authenticateToSharedNote_args(this);
+    public findRelated_args deepCopy() {
+      return new findRelated_args(this);
     }
 
     public void clear() {
-      this.guid = null;
-      this.noteKey = null;
+      this.authenticationToken = null;
+      this.query = null;
+      this.resultSpec = null;
     }
 
-    public String getGuid() {
-      return this.guid;
+    public String getAuthenticationToken() {
+      return this.authenticationToken;
     }
 
-    public void setGuid(String guid) {
-      this.guid = guid;
+    public void setAuthenticationToken(String authenticationToken) {
+      this.authenticationToken = authenticationToken;
     }
 
-    public void unsetGuid() {
-      this.guid = null;
+    public void unsetAuthenticationToken() {
+      this.authenticationToken = null;
     }
 
-    /** Returns true if field guid is set (has been asigned a value) and false otherwise */
-    public boolean isSetGuid() {
-      return this.guid != null;
+    /** Returns true if field authenticationToken is set (has been asigned a value) and false otherwise */
+    public boolean isSetAuthenticationToken() {
+      return this.authenticationToken != null;
     }
 
-    public void setGuidIsSet(boolean value) {
+    public void setAuthenticationTokenIsSet(boolean value) {
       if (!value) {
-        this.guid = null;
+        this.authenticationToken = null;
       }
     }
 
-    public String getNoteKey() {
-      return this.noteKey;
+    public RelatedQuery getQuery() {
+      return this.query;
     }
 
-    public void setNoteKey(String noteKey) {
-      this.noteKey = noteKey;
+    public void setQuery(RelatedQuery query) {
+      this.query = query;
     }
 
-    public void unsetNoteKey() {
-      this.noteKey = null;
+    public void unsetQuery() {
+      this.query = null;
     }
 
-    /** Returns true if field noteKey is set (has been asigned a value) and false otherwise */
-    public boolean isSetNoteKey() {
-      return this.noteKey != null;
+    /** Returns true if field query is set (has been asigned a value) and false otherwise */
+    public boolean isSetQuery() {
+      return this.query != null;
     }
 
-    public void setNoteKeyIsSet(boolean value) {
+    public void setQueryIsSet(boolean value) {
       if (!value) {
-        this.noteKey = null;
+        this.query = null;
+      }
+    }
+
+    public RelatedResultSpec getResultSpec() {
+      return this.resultSpec;
+    }
+
+    public void setResultSpec(RelatedResultSpec resultSpec) {
+      this.resultSpec = resultSpec;
+    }
+
+    public void unsetResultSpec() {
+      this.resultSpec = null;
+    }
+
+    /** Returns true if field resultSpec is set (has been asigned a value) and false otherwise */
+    public boolean isSetResultSpec() {
+      return this.resultSpec != null;
+    }
+
+    public void setResultSpecIsSet(boolean value) {
+      if (!value) {
+        this.resultSpec = null;
       }
     }
 
     public void setFieldValue(_Fields field, Object value) {
       switch (field) {
-      case GUID:
+      case AUTHENTICATION_TOKEN:
         if (value == null) {
-          unsetGuid();
+          unsetAuthenticationToken();
         } else {
-          setGuid((String)value);
+          setAuthenticationToken((String)value);
         }
         break;
 
-      case NOTE_KEY:
+      case QUERY:
         if (value == null) {
-          unsetNoteKey();
+          unsetQuery();
         } else {
-          setNoteKey((String)value);
+          setQuery((RelatedQuery)value);
+        }
+        break;
+
+      case RESULT_SPEC:
+        if (value == null) {
+          unsetResultSpec();
+        } else {
+          setResultSpec((RelatedResultSpec)value);
         }
         break;
 
@@ -74601,11 +75628,14 @@ public void setFieldValue(_Fields field, Object value) {
 
     public Object getFieldValue(_Fields field) {
       switch (field) {
-      case GUID:
-        return getGuid();
+      case AUTHENTICATION_TOKEN:
+        return getAuthenticationToken();
 
-      case NOTE_KEY:
-        return getNoteKey();
+      case QUERY:
+        return getQuery();
+
+      case RESULT_SPEC:
+        return getResultSpec();
 
       }
       throw new IllegalStateException();
@@ -74618,10 +75648,12 @@ public boolean isSet(_Fields field) {
       }
 
       switch (field) {
-      case GUID:
-        return isSetGuid();
-      case NOTE_KEY:
-        return isSetNoteKey();
+      case AUTHENTICATION_TOKEN:
+        return isSetAuthenticationToken();
+      case QUERY:
+        return isSetQuery();
+      case RESULT_SPEC:
+        return isSetResultSpec();
       }
       throw new IllegalStateException();
     }
@@ -74629,30 +75661,39 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof authenticateToSharedNote_args)
-        return this.equals((authenticateToSharedNote_args)that);
+      if (that instanceof findRelated_args)
+        return this.equals((findRelated_args)that);
       return false;
     }
 
-    public boolean equals(authenticateToSharedNote_args that) {
+    public boolean equals(findRelated_args that) {
       if (that == null)
         return false;
 
-      boolean this_present_guid = true && this.isSetGuid();
-      boolean that_present_guid = true && that.isSetGuid();
-      if (this_present_guid || that_present_guid) {
-        if (!(this_present_guid && that_present_guid))
+      boolean this_present_authenticationToken = true && this.isSetAuthenticationToken();
+      boolean that_present_authenticationToken = true && that.isSetAuthenticationToken();
+      if (this_present_authenticationToken || that_present_authenticationToken) {
+        if (!(this_present_authenticationToken && that_present_authenticationToken))
           return false;
-        if (!this.guid.equals(that.guid))
+        if (!this.authenticationToken.equals(that.authenticationToken))
           return false;
       }
 
-      boolean this_present_noteKey = true && this.isSetNoteKey();
-      boolean that_present_noteKey = true && that.isSetNoteKey();
-      if (this_present_noteKey || that_present_noteKey) {
-        if (!(this_present_noteKey && that_present_noteKey))
+      boolean this_present_query = true && this.isSetQuery();
+      boolean that_present_query = true && that.isSetQuery();
+      if (this_present_query || that_present_query) {
+        if (!(this_present_query && that_present_query))
           return false;
-        if (!this.noteKey.equals(that.noteKey))
+        if (!this.query.equals(that.query))
+          return false;
+      }
+
+      boolean this_present_resultSpec = true && this.isSetResultSpec();
+      boolean that_present_resultSpec = true && that.isSetResultSpec();
+      if (this_present_resultSpec || that_present_resultSpec) {
+        if (!(this_present_resultSpec && that_present_resultSpec))
+          return false;
+        if (!this.resultSpec.equals(that.resultSpec))
           return false;
       }
 
@@ -74663,28 +75704,37 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(authenticateToSharedNote_args other) {
+    public int compareTo(findRelated_args other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      authenticateToSharedNote_args typedOther = (authenticateToSharedNote_args)other;
+      findRelated_args typedOther = (findRelated_args)other;
 
-      lastComparison = Boolean.valueOf(isSetGuid()).compareTo(typedOther.isSetGuid());
+      lastComparison = Boolean.valueOf(isSetAuthenticationToken()).compareTo(typedOther.isSetAuthenticationToken());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetGuid()) {        lastComparison = TBaseHelper.compareTo(this.guid, typedOther.guid);
+      if (isSetAuthenticationToken()) {        lastComparison = TBaseHelper.compareTo(this.authenticationToken, typedOther.authenticationToken);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNoteKey()).compareTo(typedOther.isSetNoteKey());
+      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetNoteKey()) {        lastComparison = TBaseHelper.compareTo(this.noteKey, typedOther.noteKey);
+      if (isSetQuery()) {        lastComparison = TBaseHelper.compareTo(this.query, typedOther.query);
+        if (lastComparison != 0) {
+          return lastComparison;
+        }
+      }
+      lastComparison = Boolean.valueOf(isSetResultSpec()).compareTo(typedOther.isSetResultSpec());
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+      if (isSetResultSpec()) {        lastComparison = TBaseHelper.compareTo(this.resultSpec, typedOther.resultSpec);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -74706,16 +75756,25 @@ public void read(TProtocol iprot) throws TException {
           break;
         }
         switch (field.id) {
-          case 1: // GUID
+          case 1: // AUTHENTICATION_TOKEN
             if (field.type == TType.STRING) {
-              this.guid = iprot.readString();
+              this.authenticationToken = iprot.readString();
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // NOTE_KEY
-            if (field.type == TType.STRING) {
-              this.noteKey = iprot.readString();
+          case 2: // QUERY
+            if (field.type == TType.STRUCT) {
+              this.query = new RelatedQuery();
+              this.query.read(iprot);
+            } else { 
+              TProtocolUtil.skip(iprot, field.type);
+            }
+            break;
+          case 3: // RESULT_SPEC
+            if (field.type == TType.STRUCT) {
+              this.resultSpec = new RelatedResultSpec();
+              this.resultSpec.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -74733,14 +75792,19 @@ public void write(TProtocol oprot) throws TException {
       validate();
 
       oprot.writeStructBegin(STRUCT_DESC);
-      if (this.guid != null) {
-        oprot.writeFieldBegin(GUID_FIELD_DESC);
-        oprot.writeString(this.guid);
+      if (this.authenticationToken != null) {
+        oprot.writeFieldBegin(AUTHENTICATION_TOKEN_FIELD_DESC);
+        oprot.writeString(this.authenticationToken);
         oprot.writeFieldEnd();
       }
-      if (this.noteKey != null) {
-        oprot.writeFieldBegin(NOTE_KEY_FIELD_DESC);
-        oprot.writeString(this.noteKey);
+      if (this.query != null) {
+        oprot.writeFieldBegin(QUERY_FIELD_DESC);
+        this.query.write(oprot);
+        oprot.writeFieldEnd();
+      }
+      if (this.resultSpec != null) {
+        oprot.writeFieldBegin(RESULT_SPEC_FIELD_DESC);
+        this.resultSpec.write(oprot);
         oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
@@ -74748,22 +75812,30 @@ public void write(TProtocol oprot) throws TException {
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("authenticateToSharedNote_args(");
+      StringBuilder sb = new StringBuilder("findRelated_args(");
       boolean first = true;
 
-      sb.append("guid:");
-      if (this.guid == null) {
+      sb.append("authenticationToken:");
+      if (this.authenticationToken == null) {
         sb.append("null");
       } else {
-        sb.append(this.guid);
+        sb.append(this.authenticationToken);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("noteKey:");
-      if (this.noteKey == null) {
+      sb.append("query:");
+      if (this.query == null) {
         sb.append("null");
       } else {
-        sb.append(this.noteKey);
+        sb.append(this.query);
+      }
+      first = false;
+      if (!first) sb.append(", ");
+      sb.append("resultSpec:");
+      if (this.resultSpec == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.resultSpec);
       }
       first = false;
       sb.append(")");
@@ -74776,25 +75848,25 @@ public void validate() throws TException {
 
   }
 
-  public static class authenticateToSharedNote_result implements TBase<authenticateToSharedNote_result, authenticateToSharedNote_result._Fields>, java.io.Serializable, Cloneable   {
-    private static final TStruct STRUCT_DESC = new TStruct("authenticateToSharedNote_result");
+  public static class findRelated_result implements TBase<findRelated_result, findRelated_result._Fields>, java.io.Serializable, Cloneable   {
+    private static final TStruct STRUCT_DESC = new TStruct("findRelated_result");
 
     private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
     private static final TField USER_EXCEPTION_FIELD_DESC = new TField("userException", TType.STRUCT, (short)1);
-    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)2);
-    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)3);
+    private static final TField SYSTEM_EXCEPTION_FIELD_DESC = new TField("systemException", TType.STRUCT, (short)2);
+    private static final TField NOT_FOUND_EXCEPTION_FIELD_DESC = new TField("notFoundException", TType.STRUCT, (short)3);
 
-    private com.evernote.edam.userstore.AuthenticationResult success;
+    private RelatedResult success;
     private com.evernote.edam.error.EDAMUserException userException;
-    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
     private com.evernote.edam.error.EDAMSystemException systemException;
+    private com.evernote.edam.error.EDAMNotFoundException notFoundException;
 
     /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
     public enum _Fields implements TFieldIdEnum {
       SUCCESS((short)0, "success"),
       USER_EXCEPTION((short)1, "userException"),
-      NOT_FOUND_EXCEPTION((short)2, "notFoundException"),
-      SYSTEM_EXCEPTION((short)3, "systemException");
+      SYSTEM_EXCEPTION((short)2, "systemException"),
+      NOT_FOUND_EXCEPTION((short)3, "notFoundException");
 
       private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -74813,10 +75885,10 @@ public static _Fields findByThriftId(int fieldId) {
             return SUCCESS;
           case 1: // USER_EXCEPTION
             return USER_EXCEPTION;
-          case 2: // NOT_FOUND_EXCEPTION
-            return NOT_FOUND_EXCEPTION;
-          case 3: // SYSTEM_EXCEPTION
+          case 2: // SYSTEM_EXCEPTION
             return SYSTEM_EXCEPTION;
+          case 3: // NOT_FOUND_EXCEPTION
+            return NOT_FOUND_EXCEPTION;
           default:
             return null;
         }
@@ -74862,67 +75934,67 @@ public String getFieldName() {
     static {
       Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
       tmpMap.put(_Fields.SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
-          new StructMetaData(TType.STRUCT, com.evernote.edam.userstore.AuthenticationResult.class)));
+          new StructMetaData(TType.STRUCT, RelatedResult.class)));
       tmpMap.put(_Fields.USER_EXCEPTION, new FieldMetaData("userException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
-      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
-          new FieldValueMetaData(TType.STRUCT)));
       tmpMap.put(_Fields.SYSTEM_EXCEPTION, new FieldMetaData("systemException", TFieldRequirementType.DEFAULT, 
           new FieldValueMetaData(TType.STRUCT)));
+      tmpMap.put(_Fields.NOT_FOUND_EXCEPTION, new FieldMetaData("notFoundException", TFieldRequirementType.DEFAULT, 
+          new FieldValueMetaData(TType.STRUCT)));
       metaDataMap = Collections.unmodifiableMap(tmpMap);
-      FieldMetaData.addStructMetaDataMap(authenticateToSharedNote_result.class, metaDataMap);
+      FieldMetaData.addStructMetaDataMap(findRelated_result.class, metaDataMap);
     }
 
-    public authenticateToSharedNote_result() {
+    public findRelated_result() {
     }
 
-    public authenticateToSharedNote_result(
-      com.evernote.edam.userstore.AuthenticationResult success,
+    public findRelated_result(
+      RelatedResult success,
       com.evernote.edam.error.EDAMUserException userException,
-      com.evernote.edam.error.EDAMNotFoundException notFoundException,
-      com.evernote.edam.error.EDAMSystemException systemException)
+      com.evernote.edam.error.EDAMSystemException systemException,
+      com.evernote.edam.error.EDAMNotFoundException notFoundException)
     {
       this();
       this.success = success;
       this.userException = userException;
-      this.notFoundException = notFoundException;
       this.systemException = systemException;
+      this.notFoundException = notFoundException;
     }
 
     /**
      * Performs a deep copy on <i>other</i>.
      */
-    public authenticateToSharedNote_result(authenticateToSharedNote_result other) {
+    public findRelated_result(findRelated_result other) {
       if (other.isSetSuccess()) {
-        this.success = new com.evernote.edam.userstore.AuthenticationResult(other.success);
+        this.success = new RelatedResult(other.success);
       }
       if (other.isSetUserException()) {
         this.userException = new com.evernote.edam.error.EDAMUserException(other.userException);
       }
-      if (other.isSetNotFoundException()) {
-        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
-      }
       if (other.isSetSystemException()) {
         this.systemException = new com.evernote.edam.error.EDAMSystemException(other.systemException);
       }
+      if (other.isSetNotFoundException()) {
+        this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException(other.notFoundException);
+      }
     }
 
-    public authenticateToSharedNote_result deepCopy() {
-      return new authenticateToSharedNote_result(this);
+    public findRelated_result deepCopy() {
+      return new findRelated_result(this);
     }
 
     public void clear() {
       this.success = null;
       this.userException = null;
-      this.notFoundException = null;
       this.systemException = null;
+      this.notFoundException = null;
     }
 
-    public com.evernote.edam.userstore.AuthenticationResult getSuccess() {
+    public RelatedResult getSuccess() {
       return this.success;
     }
 
-    public void setSuccess(com.evernote.edam.userstore.AuthenticationResult success) {
+    public void setSuccess(RelatedResult success) {
       this.success = success;
     }
 
@@ -74964,49 +76036,49 @@ public void setUserExceptionIsSet(boolean value) {
       }
     }
 
-    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
-      return this.notFoundException;
+    public com.evernote.edam.error.EDAMSystemException getSystemException() {
+      return this.systemException;
     }
 
-    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
-      this.notFoundException = notFoundException;
+    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
+      this.systemException = systemException;
     }
 
-    public void unsetNotFoundException() {
-      this.notFoundException = null;
+    public void unsetSystemException() {
+      this.systemException = null;
     }
 
-    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
-    public boolean isSetNotFoundException() {
-      return this.notFoundException != null;
+    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
+    public boolean isSetSystemException() {
+      return this.systemException != null;
     }
 
-    public void setNotFoundExceptionIsSet(boolean value) {
+    public void setSystemExceptionIsSet(boolean value) {
       if (!value) {
-        this.notFoundException = null;
+        this.systemException = null;
       }
     }
 
-    public com.evernote.edam.error.EDAMSystemException getSystemException() {
-      return this.systemException;
+    public com.evernote.edam.error.EDAMNotFoundException getNotFoundException() {
+      return this.notFoundException;
     }
 
-    public void setSystemException(com.evernote.edam.error.EDAMSystemException systemException) {
-      this.systemException = systemException;
+    public void setNotFoundException(com.evernote.edam.error.EDAMNotFoundException notFoundException) {
+      this.notFoundException = notFoundException;
     }
 
-    public void unsetSystemException() {
-      this.systemException = null;
+    public void unsetNotFoundException() {
+      this.notFoundException = null;
     }
 
-    /** Returns true if field systemException is set (has been asigned a value) and false otherwise */
-    public boolean isSetSystemException() {
-      return this.systemException != null;
+    /** Returns true if field notFoundException is set (has been asigned a value) and false otherwise */
+    public boolean isSetNotFoundException() {
+      return this.notFoundException != null;
     }
 
-    public void setSystemExceptionIsSet(boolean value) {
+    public void setNotFoundExceptionIsSet(boolean value) {
       if (!value) {
-        this.systemException = null;
+        this.notFoundException = null;
       }
     }
 
@@ -75016,7 +76088,7 @@ public void setFieldValue(_Fields field, Object value) {
         if (value == null) {
           unsetSuccess();
         } else {
-          setSuccess((com.evernote.edam.userstore.AuthenticationResult)value);
+          setSuccess((RelatedResult)value);
         }
         break;
 
@@ -75028,19 +76100,19 @@ public void setFieldValue(_Fields field, Object value) {
         }
         break;
 
-      case NOT_FOUND_EXCEPTION:
+      case SYSTEM_EXCEPTION:
         if (value == null) {
-          unsetNotFoundException();
+          unsetSystemException();
         } else {
-          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
+          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
         }
         break;
 
-      case SYSTEM_EXCEPTION:
+      case NOT_FOUND_EXCEPTION:
         if (value == null) {
-          unsetSystemException();
+          unsetNotFoundException();
         } else {
-          setSystemException((com.evernote.edam.error.EDAMSystemException)value);
+          setNotFoundException((com.evernote.edam.error.EDAMNotFoundException)value);
         }
         break;
 
@@ -75055,12 +76127,12 @@ public Object getFieldValue(_Fields field) {
       case USER_EXCEPTION:
         return getUserException();
 
-      case NOT_FOUND_EXCEPTION:
-        return getNotFoundException();
-
       case SYSTEM_EXCEPTION:
         return getSystemException();
 
+      case NOT_FOUND_EXCEPTION:
+        return getNotFoundException();
+
       }
       throw new IllegalStateException();
     }
@@ -75076,10 +76148,10 @@ public boolean isSet(_Fields field) {
         return isSetSuccess();
       case USER_EXCEPTION:
         return isSetUserException();
-      case NOT_FOUND_EXCEPTION:
-        return isSetNotFoundException();
       case SYSTEM_EXCEPTION:
         return isSetSystemException();
+      case NOT_FOUND_EXCEPTION:
+        return isSetNotFoundException();
       }
       throw new IllegalStateException();
     }
@@ -75087,12 +76159,12 @@ public boolean isSet(_Fields field) {
     public boolean equals(Object that) {
       if (that == null)
         return false;
-      if (that instanceof authenticateToSharedNote_result)
-        return this.equals((authenticateToSharedNote_result)that);
+      if (that instanceof findRelated_result)
+        return this.equals((findRelated_result)that);
       return false;
     }
 
-    public boolean equals(authenticateToSharedNote_result that) {
+    public boolean equals(findRelated_result that) {
       if (that == null)
         return false;
 
@@ -75114,15 +76186,6 @@ public boolean equals(authenticateToSharedNote_result that) {
           return false;
       }
 
-      boolean this_present_notFoundException = true && this.isSetNotFoundException();
-      boolean that_present_notFoundException = true && that.isSetNotFoundException();
-      if (this_present_notFoundException || that_present_notFoundException) {
-        if (!(this_present_notFoundException && that_present_notFoundException))
-          return false;
-        if (!this.notFoundException.equals(that.notFoundException))
-          return false;
-      }
-
       boolean this_present_systemException = true && this.isSetSystemException();
       boolean that_present_systemException = true && that.isSetSystemException();
       if (this_present_systemException || that_present_systemException) {
@@ -75132,6 +76195,15 @@ public boolean equals(authenticateToSharedNote_result that) {
           return false;
       }
 
+      boolean this_present_notFoundException = true && this.isSetNotFoundException();
+      boolean that_present_notFoundException = true && that.isSetNotFoundException();
+      if (this_present_notFoundException || that_present_notFoundException) {
+        if (!(this_present_notFoundException && that_present_notFoundException))
+          return false;
+        if (!this.notFoundException.equals(that.notFoundException))
+          return false;
+      }
+
       return true;
     }
 
@@ -75139,13 +76211,13 @@ public int hashCode() {
       return 0;
     }
 
-    public int compareTo(authenticateToSharedNote_result other) {
+    public int compareTo(findRelated_result other) {
       if (!getClass().equals(other.getClass())) {
         return getClass().getName().compareTo(other.getClass().getName());
       }
 
       int lastComparison = 0;
-      authenticateToSharedNote_result typedOther = (authenticateToSharedNote_result)other;
+      findRelated_result typedOther = (findRelated_result)other;
 
       lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
       if (lastComparison != 0) {
@@ -75165,20 +76237,20 @@ public int compareTo(authenticateToSharedNote_result other) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
+      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
+      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
         if (lastComparison != 0) {
           return lastComparison;
         }
       }
-      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(typedOther.isSetSystemException());
+      lastComparison = Boolean.valueOf(isSetNotFoundException()).compareTo(typedOther.isSetNotFoundException());
       if (lastComparison != 0) {
         return lastComparison;
       }
-      if (isSetSystemException()) {        lastComparison = TBaseHelper.compareTo(this.systemException, typedOther.systemException);
+      if (isSetNotFoundException()) {        lastComparison = TBaseHelper.compareTo(this.notFoundException, typedOther.notFoundException);
         if (lastComparison != 0) {
           return lastComparison;
         }
@@ -75202,7 +76274,7 @@ public void read(TProtocol iprot) throws TException {
         switch (field.id) {
           case 0: // SUCCESS
             if (field.type == TType.STRUCT) {
-              this.success = new com.evernote.edam.userstore.AuthenticationResult();
+              this.success = new RelatedResult();
               this.success.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
@@ -75216,18 +76288,18 @@ public void read(TProtocol iprot) throws TException {
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 2: // NOT_FOUND_EXCEPTION
+          case 2: // SYSTEM_EXCEPTION
             if (field.type == TType.STRUCT) {
-              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
-              this.notFoundException.read(iprot);
+              this.systemException = new com.evernote.edam.error.EDAMSystemException();
+              this.systemException.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
             break;
-          case 3: // SYSTEM_EXCEPTION
+          case 3: // NOT_FOUND_EXCEPTION
             if (field.type == TType.STRUCT) {
-              this.systemException = new com.evernote.edam.error.EDAMSystemException();
-              this.systemException.read(iprot);
+              this.notFoundException = new com.evernote.edam.error.EDAMNotFoundException();
+              this.notFoundException.read(iprot);
             } else { 
               TProtocolUtil.skip(iprot, field.type);
             }
@@ -75252,21 +76324,21 @@ public void write(TProtocol oprot) throws TException {
         oprot.writeFieldBegin(USER_EXCEPTION_FIELD_DESC);
         this.userException.write(oprot);
         oprot.writeFieldEnd();
-      } else if (this.isSetNotFoundException()) {
-        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
-        this.notFoundException.write(oprot);
-        oprot.writeFieldEnd();
       } else if (this.isSetSystemException()) {
         oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
         this.systemException.write(oprot);
         oprot.writeFieldEnd();
+      } else if (this.isSetNotFoundException()) {
+        oprot.writeFieldBegin(NOT_FOUND_EXCEPTION_FIELD_DESC);
+        this.notFoundException.write(oprot);
+        oprot.writeFieldEnd();
       }
       oprot.writeFieldStop();
       oprot.writeStructEnd();
     }
 
     public String toString() {
-      StringBuilder sb = new StringBuilder("authenticateToSharedNote_result(");
+      StringBuilder sb = new StringBuilder("findRelated_result(");
       boolean first = true;
 
       sb.append("success:");
@@ -75285,19 +76357,19 @@ public String toString() {
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("notFoundException:");
-      if (this.notFoundException == null) {
+      sb.append("systemException:");
+      if (this.systemException == null) {
         sb.append("null");
       } else {
-        sb.append(this.notFoundException);
+        sb.append(this.systemException);
       }
       first = false;
       if (!first) sb.append(", ");
-      sb.append("systemException:");
-      if (this.systemException == null) {
+      sb.append("notFoundException:");
+      if (this.notFoundException == null) {
         sb.append("null");
       } else {
-        sb.append(this.systemException);
+        sb.append(this.notFoundException);
       }
       first = false;
       sb.append(")");
diff --git a/src/com/evernote/edam/notestore/NoteStoreIface.java b/src/com/evernote/edam/notestore/NoteStoreIface.java
index c8ec8ea..3175014 100644
--- a/src/com/evernote/edam/notestore/NoteStoreIface.java
+++ b/src/com/evernote/edam/notestore/NoteStoreIface.java
@@ -371,6 +371,10 @@
    * After this action, the notebook is no longer available for undeletion, etc.
    * If the notebook contains any Notes, they will be moved to the current
    * default notebook and moved into the trash (i.e. Note.active=false).
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param guid
    *   The GUID of the notebook to delete.
@@ -543,6 +547,10 @@
 
   /**
    * Permanently deletes the tag with the provided GUID, if present.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param guid
    *   The GUID of the tag to delete.
@@ -658,7 +666,11 @@
   public int updateSearch(String authenticationToken, com.evernote.edam.type.SavedSearch search) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;
 
   /**
-   * Permanently deletes the search with the provided GUID, if present.
+   * Permanently deletes the saved search with the provided GUID, if present.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param guid
    *   The GUID of the search to delete.
@@ -1269,8 +1281,12 @@
   public int deleteNote(String authenticationToken, String guid) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;
 
   /**
-   * Permanently removes the Note, and all of its Resources,
+   * Permanently removes a Note, and all of its Resources,
    * from the service.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param guid
    *   The GUID of the note to delete.
@@ -1303,6 +1319,10 @@
    * be prohibitively slow if there are more than a few hundred notes.
    * If an exception is thrown for any of the GUIDs, then none of the notes
    * will be deleted.  I.e. this call can be treated as an atomic transaction.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param noteGuids
    *   The list of GUIDs for the Notes to remove.
@@ -1332,6 +1352,10 @@
    * <p/>
    * This operation may be relatively slow if the account contains a large
    * number of inactive Notes.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @return
    *    The number of notes that were expunged.
@@ -1784,6 +1808,8 @@
   /**
    * Clients should make this call once per day to receive a bundle of ads that
    * will be displayed for the subsequent 24 hour period.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
    * 
    * @param adParameters
    *   A set of parameters that help the service determine which ads to return.
@@ -1796,6 +1822,8 @@
   /**
    * A thin client should make this call to retrieve a single random ad for
    * immediate display.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
    * 
    * @param adParameters
    *   A set of parameters to help the service determine which ad to return.
@@ -1848,7 +1876,7 @@
    *   attributes of the shared object are ignored.
    * @return
    *   The fully populated SharedNotebook object including the server assigned
-   *   share id and shareKey which can both the used to uniquely identify the
+   *   share id and shareKey which can both be used to uniquely identify the
    *   SharedNotebook.
    * 
    * @throws EDAMUserException <ul>
@@ -1916,6 +1944,10 @@
   /**
    * Expunges the SharedNotebooks in the user's account using the
    * SharedNotebook.id as the identifier.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param
    *   sharedNotebookIds - a list of ShardNotebook.id longs identifying the
@@ -1991,6 +2023,10 @@
 
   /**
    * Permanently expunges the linked notebook from the account.
+   * <p/>
+   * NOTE: This function is not available to third party applications.
+   * Calls will result in an EDAMUserException with the error code
+   * PERMISSION_DENIED.
    * 
    * @param guid
    *   The LinkedNotebook.guid field of the LinkedNotebook to permanently remove
@@ -2213,5 +2249,50 @@
    */
   public com.evernote.edam.userstore.AuthenticationResult authenticateToSharedNote(String guid, String noteKey) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMNotFoundException, com.evernote.edam.error.EDAMSystemException, TException;
 
+  /**
+   * Identify related entities on the service, such as notes,
+   * notebooks, and tags related to notes or content.
+   * 
+   * @param query
+   *   The information about which we are finding related entities.
+   * 
+   * @param resultSpec
+   *   Allows the client to indicate the type and quantity of
+   *   information to be returned, allowing a saving of time and
+   *   bandwidth.
+   * 
+   * @return
+   *   The result of the query, with information considered
+   *   to likely be relevantly related to the information
+   *   described by the query.
+   * 
+   * @throws EDAMUserException <ul>
+   *   <li>BAD_DATA_FORMAT "RelatedQuery.plainText" - If you provided a
+   *     a zero-length plain text value.
+   *   </li>
+   *   <li>BAD_DATA_FORMAT "RelatedQuery.noteGuid" - If you provided an
+   *     invalid Note GUID, that is, one that does not match the constraints
+   *     defined by EDAM_GUID_LEN_MIN, EDAM_GUID_LEN_MAX, EDAM_GUID_REGEX.
+   *   </li>
+   *   <li>PERMISSION_DENIED "Note" - If the caller does not have access to
+   *     the note identified by RelatedQuery.noteGuid.
+   *   </li>
+   *   <li>DATA_REQUIRED "RelatedResultSpec" - If you did not not set any values
+   *     in the result spec.
+   *   </li>
+   * </ul>
+   * 
+   * @throws EDAMNotFoundException <ul>
+   *   <li>"RelatedQuery.noteGuid" - the note with that GUID is not
+   *     found, if that field has been set in the query.
+   *   </li>
+   * </ul>
+   * 
+   * @param authenticationToken
+   * @param query
+   * @param resultSpec
+   */
+  public RelatedResult findRelated(String authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec) throws com.evernote.edam.error.EDAMUserException, com.evernote.edam.error.EDAMSystemException, com.evernote.edam.error.EDAMNotFoundException, TException;
+
 }
 
diff --git a/src/com/evernote/edam/notestore/RelatedQuery.java b/src/com/evernote/edam/notestore/RelatedQuery.java
new file mode 100644
index 0000000..f36e4c5
--- /dev/null
+++ b/src/com/evernote/edam/notestore/RelatedQuery.java
@@ -0,0 +1,398 @@
+/**
+ * Autogenerated by Thrift
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package com.evernote.edam.notestore;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.Arrays;
+
+import org.apache.thrift.*;
+import org.apache.thrift.meta_data.*;
+import org.apache.thrift.transport.*;
+import org.apache.thrift.protocol.*;
+
+/**
+ * A description of the thing for which we are searching for related
+ * entities.  You must choose exactly one field.
+ * 
+ * <dl>
+ * <dt>noteGuid</dt>
+ * <dd>The GUID of an existing note in your account for which related
+ *     entities will be found.</dd>
+ * 
+ * <dt>plainText</dt>
+ * <dd>A string of plain text for which to find related entities.
+ *     You should provide a text block with a number of characters between
+ *     EDAM_RELATED_PLAINTEXT_LEN_MIN and EDAM_RELATED_PLAINTEXT_LEN_MAX.
+ *     </dd>
+ * </dl>
+ */
+public class RelatedQuery implements TBase<RelatedQuery, RelatedQuery._Fields>, java.io.Serializable, Cloneable {
+  private static final TStruct STRUCT_DESC = new TStruct("RelatedQuery");
+
+  private static final TField NOTE_GUID_FIELD_DESC = new TField("noteGuid", TType.STRING, (short)1);
+  private static final TField PLAIN_TEXT_FIELD_DESC = new TField("plainText", TType.STRING, (short)2);
+
+  private String noteGuid;
+  private String plainText;
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements TFieldIdEnum {
+    NOTE_GUID((short)1, "noteGuid"),
+    PLAIN_TEXT((short)2, "plainText");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // NOTE_GUID
+          return NOTE_GUID;
+        case 2: // PLAIN_TEXT
+          return PLAIN_TEXT;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+
+  public static final Map<_Fields, FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.NOTE_GUID, new FieldMetaData("noteGuid", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.STRING)));
+    tmpMap.put(_Fields.PLAIN_TEXT, new FieldMetaData("plainText", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.STRING)));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    FieldMetaData.addStructMetaDataMap(RelatedQuery.class, metaDataMap);
+  }
+
+  public RelatedQuery() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public RelatedQuery(RelatedQuery other) {
+    if (other.isSetNoteGuid()) {
+      this.noteGuid = other.noteGuid;
+    }
+    if (other.isSetPlainText()) {
+      this.plainText = other.plainText;
+    }
+  }
+
+  public RelatedQuery deepCopy() {
+    return new RelatedQuery(this);
+  }
+
+  public void clear() {
+    this.noteGuid = null;
+    this.plainText = null;
+  }
+
+  public String getNoteGuid() {
+    return this.noteGuid;
+  }
+
+  public void setNoteGuid(String noteGuid) {
+    this.noteGuid = noteGuid;
+  }
+
+  public void unsetNoteGuid() {
+    this.noteGuid = null;
+  }
+
+  /** Returns true if field noteGuid is set (has been asigned a value) and false otherwise */
+  public boolean isSetNoteGuid() {
+    return this.noteGuid != null;
+  }
+
+  public void setNoteGuidIsSet(boolean value) {
+    if (!value) {
+      this.noteGuid = null;
+    }
+  }
+
+  public String getPlainText() {
+    return this.plainText;
+  }
+
+  public void setPlainText(String plainText) {
+    this.plainText = plainText;
+  }
+
+  public void unsetPlainText() {
+    this.plainText = null;
+  }
+
+  /** Returns true if field plainText is set (has been asigned a value) and false otherwise */
+  public boolean isSetPlainText() {
+    return this.plainText != null;
+  }
+
+  public void setPlainTextIsSet(boolean value) {
+    if (!value) {
+      this.plainText = null;
+    }
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case NOTE_GUID:
+      if (value == null) {
+        unsetNoteGuid();
+      } else {
+        setNoteGuid((String)value);
+      }
+      break;
+
+    case PLAIN_TEXT:
+      if (value == null) {
+        unsetPlainText();
+      } else {
+        setPlainText((String)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case NOTE_GUID:
+      return getNoteGuid();
+
+    case PLAIN_TEXT:
+      return getPlainText();
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case NOTE_GUID:
+      return isSetNoteGuid();
+    case PLAIN_TEXT:
+      return isSetPlainText();
+    }
+    throw new IllegalStateException();
+  }
+
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof RelatedQuery)
+      return this.equals((RelatedQuery)that);
+    return false;
+  }
+
+  public boolean equals(RelatedQuery that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_noteGuid = true && this.isSetNoteGuid();
+    boolean that_present_noteGuid = true && that.isSetNoteGuid();
+    if (this_present_noteGuid || that_present_noteGuid) {
+      if (!(this_present_noteGuid && that_present_noteGuid))
+        return false;
+      if (!this.noteGuid.equals(that.noteGuid))
+        return false;
+    }
+
+    boolean this_present_plainText = true && this.isSetPlainText();
+    boolean that_present_plainText = true && that.isSetPlainText();
+    if (this_present_plainText || that_present_plainText) {
+      if (!(this_present_plainText && that_present_plainText))
+        return false;
+      if (!this.plainText.equals(that.plainText))
+        return false;
+    }
+
+    return true;
+  }
+
+  public int hashCode() {
+    return 0;
+  }
+
+  public int compareTo(RelatedQuery other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    RelatedQuery typedOther = (RelatedQuery)other;
+
+    lastComparison = Boolean.valueOf(isSetNoteGuid()).compareTo(typedOther.isSetNoteGuid());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetNoteGuid()) {      lastComparison = TBaseHelper.compareTo(this.noteGuid, typedOther.noteGuid);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetPlainText()).compareTo(typedOther.isSetPlainText());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetPlainText()) {      lastComparison = TBaseHelper.compareTo(this.plainText, typedOther.plainText);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(TProtocol iprot) throws TException {
+    TField field;
+    iprot.readStructBegin();
+    while (true)
+    {
+      field = iprot.readFieldBegin();
+      if (field.type == TType.STOP) { 
+        break;
+      }
+      switch (field.id) {
+        case 1: // NOTE_GUID
+          if (field.type == TType.STRING) {
+            this.noteGuid = iprot.readString();
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        case 2: // PLAIN_TEXT
+          if (field.type == TType.STRING) {
+            this.plainText = iprot.readString();
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
+      }
+      iprot.readFieldEnd();
+    }
+    iprot.readStructEnd();
+    validate();
+  }
+
+  public void write(TProtocol oprot) throws TException {
+    validate();
+
+    oprot.writeStructBegin(STRUCT_DESC);
+    if (this.noteGuid != null) {
+      if (isSetNoteGuid()) {
+        oprot.writeFieldBegin(NOTE_GUID_FIELD_DESC);
+        oprot.writeString(this.noteGuid);
+        oprot.writeFieldEnd();
+      }
+    }
+    if (this.plainText != null) {
+      if (isSetPlainText()) {
+        oprot.writeFieldBegin(PLAIN_TEXT_FIELD_DESC);
+        oprot.writeString(this.plainText);
+        oprot.writeFieldEnd();
+      }
+    }
+    oprot.writeFieldStop();
+    oprot.writeStructEnd();
+  }
+
+  public String toString() {
+    StringBuilder sb = new StringBuilder("RelatedQuery(");
+    boolean first = true;
+
+    if (isSetNoteGuid()) {
+      sb.append("noteGuid:");
+      if (this.noteGuid == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.noteGuid);
+      }
+      first = false;
+    }
+    if (isSetPlainText()) {
+      if (!first) sb.append(", ");
+      sb.append("plainText:");
+      if (this.plainText == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.plainText);
+      }
+      first = false;
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws TException {
+    // check for required fields
+  }
+
+}
+
diff --git a/src/com/evernote/edam/notestore/RelatedResult.java b/src/com/evernote/edam/notestore/RelatedResult.java
new file mode 100644
index 0000000..481dfff
--- /dev/null
+++ b/src/com/evernote/edam/notestore/RelatedResult.java
@@ -0,0 +1,606 @@
+/**
+ * Autogenerated by Thrift
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package com.evernote.edam.notestore;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.Arrays;
+
+import org.apache.thrift.*;
+import org.apache.thrift.meta_data.*;
+import org.apache.thrift.transport.*;
+import org.apache.thrift.protocol.*;
+
+/**
+ * The result of calling findRelated().  The contents of the notes,
+ * notebooks, and tags fields will be in decreasing order of expected
+ * relevance.  It is possible that fewer results than requested will be
+ * returned even if there are enough distinct entities in the account
+ * in cases where the relevance is estimated to be low.
+ * 
+ * <dl>
+ * <dt>notes</dt>
+ * <dd>If notes have been requested to be included, this will be the
+ *     list of notes.</dd>
+ * 
+ * <dt>notebooks</dt>
+ * <dd>If notebooks have been requested to be included, this will be the
+ *     list of notebooks.</dd>
+ * 
+ * <dt>tags</dt>
+ * <dd>If tags have been requested to be included, this will be the list
+ *     of tags.</dd>
+ * </dl>
+ */
+public class RelatedResult implements TBase<RelatedResult, RelatedResult._Fields>, java.io.Serializable, Cloneable {
+  private static final TStruct STRUCT_DESC = new TStruct("RelatedResult");
+
+  private static final TField NOTES_FIELD_DESC = new TField("notes", TType.LIST, (short)1);
+  private static final TField NOTEBOOKS_FIELD_DESC = new TField("notebooks", TType.LIST, (short)2);
+  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.LIST, (short)3);
+
+  private List<com.evernote.edam.type.Note> notes;
+  private List<com.evernote.edam.type.Notebook> notebooks;
+  private List<com.evernote.edam.type.Tag> tags;
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements TFieldIdEnum {
+    NOTES((short)1, "notes"),
+    NOTEBOOKS((short)2, "notebooks"),
+    TAGS((short)3, "tags");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // NOTES
+          return NOTES;
+        case 2: // NOTEBOOKS
+          return NOTEBOOKS;
+        case 3: // TAGS
+          return TAGS;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+
+  public static final Map<_Fields, FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.NOTES, new FieldMetaData("notes", TFieldRequirementType.OPTIONAL, 
+        new ListMetaData(TType.LIST, 
+            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Note.class))));
+    tmpMap.put(_Fields.NOTEBOOKS, new FieldMetaData("notebooks", TFieldRequirementType.OPTIONAL, 
+        new ListMetaData(TType.LIST, 
+            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Notebook.class))));
+    tmpMap.put(_Fields.TAGS, new FieldMetaData("tags", TFieldRequirementType.OPTIONAL, 
+        new ListMetaData(TType.LIST, 
+            new StructMetaData(TType.STRUCT, com.evernote.edam.type.Tag.class))));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    FieldMetaData.addStructMetaDataMap(RelatedResult.class, metaDataMap);
+  }
+
+  public RelatedResult() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public RelatedResult(RelatedResult other) {
+    if (other.isSetNotes()) {
+      List<com.evernote.edam.type.Note> __this__notes = new ArrayList<com.evernote.edam.type.Note>();
+      for (com.evernote.edam.type.Note other_element : other.notes) {
+        __this__notes.add(new com.evernote.edam.type.Note(other_element));
+      }
+      this.notes = __this__notes;
+    }
+    if (other.isSetNotebooks()) {
+      List<com.evernote.edam.type.Notebook> __this__notebooks = new ArrayList<com.evernote.edam.type.Notebook>();
+      for (com.evernote.edam.type.Notebook other_element : other.notebooks) {
+        __this__notebooks.add(new com.evernote.edam.type.Notebook(other_element));
+      }
+      this.notebooks = __this__notebooks;
+    }
+    if (other.isSetTags()) {
+      List<com.evernote.edam.type.Tag> __this__tags = new ArrayList<com.evernote.edam.type.Tag>();
+      for (com.evernote.edam.type.Tag other_element : other.tags) {
+        __this__tags.add(new com.evernote.edam.type.Tag(other_element));
+      }
+      this.tags = __this__tags;
+    }
+  }
+
+  public RelatedResult deepCopy() {
+    return new RelatedResult(this);
+  }
+
+  public void clear() {
+    this.notes = null;
+    this.notebooks = null;
+    this.tags = null;
+  }
+
+  public int getNotesSize() {
+    return (this.notes == null) ? 0 : this.notes.size();
+  }
+
+  public java.util.Iterator<com.evernote.edam.type.Note> getNotesIterator() {
+    return (this.notes == null) ? null : this.notes.iterator();
+  }
+
+  public void addToNotes(com.evernote.edam.type.Note elem) {
+    if (this.notes == null) {
+      this.notes = new ArrayList<com.evernote.edam.type.Note>();
+    }
+    this.notes.add(elem);
+  }
+
+  public List<com.evernote.edam.type.Note> getNotes() {
+    return this.notes;
+  }
+
+  public void setNotes(List<com.evernote.edam.type.Note> notes) {
+    this.notes = notes;
+  }
+
+  public void unsetNotes() {
+    this.notes = null;
+  }
+
+  /** Returns true if field notes is set (has been asigned a value) and false otherwise */
+  public boolean isSetNotes() {
+    return this.notes != null;
+  }
+
+  public void setNotesIsSet(boolean value) {
+    if (!value) {
+      this.notes = null;
+    }
+  }
+
+  public int getNotebooksSize() {
+    return (this.notebooks == null) ? 0 : this.notebooks.size();
+  }
+
+  public java.util.Iterator<com.evernote.edam.type.Notebook> getNotebooksIterator() {
+    return (this.notebooks == null) ? null : this.notebooks.iterator();
+  }
+
+  public void addToNotebooks(com.evernote.edam.type.Notebook elem) {
+    if (this.notebooks == null) {
+      this.notebooks = new ArrayList<com.evernote.edam.type.Notebook>();
+    }
+    this.notebooks.add(elem);
+  }
+
+  public List<com.evernote.edam.type.Notebook> getNotebooks() {
+    return this.notebooks;
+  }
+
+  public void setNotebooks(List<com.evernote.edam.type.Notebook> notebooks) {
+    this.notebooks = notebooks;
+  }
+
+  public void unsetNotebooks() {
+    this.notebooks = null;
+  }
+
+  /** Returns true if field notebooks is set (has been asigned a value) and false otherwise */
+  public boolean isSetNotebooks() {
+    return this.notebooks != null;
+  }
+
+  public void setNotebooksIsSet(boolean value) {
+    if (!value) {
+      this.notebooks = null;
+    }
+  }
+
+  public int getTagsSize() {
+    return (this.tags == null) ? 0 : this.tags.size();
+  }
+
+  public java.util.Iterator<com.evernote.edam.type.Tag> getTagsIterator() {
+    return (this.tags == null) ? null : this.tags.iterator();
+  }
+
+  public void addToTags(com.evernote.edam.type.Tag elem) {
+    if (this.tags == null) {
+      this.tags = new ArrayList<com.evernote.edam.type.Tag>();
+    }
+    this.tags.add(elem);
+  }
+
+  public List<com.evernote.edam.type.Tag> getTags() {
+    return this.tags;
+  }
+
+  public void setTags(List<com.evernote.edam.type.Tag> tags) {
+    this.tags = tags;
+  }
+
+  public void unsetTags() {
+    this.tags = null;
+  }
+
+  /** Returns true if field tags is set (has been asigned a value) and false otherwise */
+  public boolean isSetTags() {
+    return this.tags != null;
+  }
+
+  public void setTagsIsSet(boolean value) {
+    if (!value) {
+      this.tags = null;
+    }
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case NOTES:
+      if (value == null) {
+        unsetNotes();
+      } else {
+        setNotes((List<com.evernote.edam.type.Note>)value);
+      }
+      break;
+
+    case NOTEBOOKS:
+      if (value == null) {
+        unsetNotebooks();
+      } else {
+        setNotebooks((List<com.evernote.edam.type.Notebook>)value);
+      }
+      break;
+
+    case TAGS:
+      if (value == null) {
+        unsetTags();
+      } else {
+        setTags((List<com.evernote.edam.type.Tag>)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case NOTES:
+      return getNotes();
+
+    case NOTEBOOKS:
+      return getNotebooks();
+
+    case TAGS:
+      return getTags();
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case NOTES:
+      return isSetNotes();
+    case NOTEBOOKS:
+      return isSetNotebooks();
+    case TAGS:
+      return isSetTags();
+    }
+    throw new IllegalStateException();
+  }
+
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof RelatedResult)
+      return this.equals((RelatedResult)that);
+    return false;
+  }
+
+  public boolean equals(RelatedResult that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_notes = true && this.isSetNotes();
+    boolean that_present_notes = true && that.isSetNotes();
+    if (this_present_notes || that_present_notes) {
+      if (!(this_present_notes && that_present_notes))
+        return false;
+      if (!this.notes.equals(that.notes))
+        return false;
+    }
+
+    boolean this_present_notebooks = true && this.isSetNotebooks();
+    boolean that_present_notebooks = true && that.isSetNotebooks();
+    if (this_present_notebooks || that_present_notebooks) {
+      if (!(this_present_notebooks && that_present_notebooks))
+        return false;
+      if (!this.notebooks.equals(that.notebooks))
+        return false;
+    }
+
+    boolean this_present_tags = true && this.isSetTags();
+    boolean that_present_tags = true && that.isSetTags();
+    if (this_present_tags || that_present_tags) {
+      if (!(this_present_tags && that_present_tags))
+        return false;
+      if (!this.tags.equals(that.tags))
+        return false;
+    }
+
+    return true;
+  }
+
+  public int hashCode() {
+    return 0;
+  }
+
+  public int compareTo(RelatedResult other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    RelatedResult typedOther = (RelatedResult)other;
+
+    lastComparison = Boolean.valueOf(isSetNotes()).compareTo(typedOther.isSetNotes());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetNotes()) {      lastComparison = TBaseHelper.compareTo(this.notes, typedOther.notes);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetNotebooks()).compareTo(typedOther.isSetNotebooks());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.notebooks, typedOther.notebooks);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetTags()).compareTo(typedOther.isSetTags());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetTags()) {      lastComparison = TBaseHelper.compareTo(this.tags, typedOther.tags);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(TProtocol iprot) throws TException {
+    TField field;
+    iprot.readStructBegin();
+    while (true)
+    {
+      field = iprot.readFieldBegin();
+      if (field.type == TType.STOP) { 
+        break;
+      }
+      switch (field.id) {
+        case 1: // NOTES
+          if (field.type == TType.LIST) {
+            {
+              TList _list103 = iprot.readListBegin();
+              this.notes = new ArrayList<com.evernote.edam.type.Note>(_list103.size);
+              for (int _i104 = 0; _i104 < _list103.size; ++_i104)
+              {
+                com.evernote.edam.type.Note _elem105;
+                _elem105 = new com.evernote.edam.type.Note();
+                _elem105.read(iprot);
+                this.notes.add(_elem105);
+              }
+              iprot.readListEnd();
+            }
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        case 2: // NOTEBOOKS
+          if (field.type == TType.LIST) {
+            {
+              TList _list106 = iprot.readListBegin();
+              this.notebooks = new ArrayList<com.evernote.edam.type.Notebook>(_list106.size);
+              for (int _i107 = 0; _i107 < _list106.size; ++_i107)
+              {
+                com.evernote.edam.type.Notebook _elem108;
+                _elem108 = new com.evernote.edam.type.Notebook();
+                _elem108.read(iprot);
+                this.notebooks.add(_elem108);
+              }
+              iprot.readListEnd();
+            }
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        case 3: // TAGS
+          if (field.type == TType.LIST) {
+            {
+              TList _list109 = iprot.readListBegin();
+              this.tags = new ArrayList<com.evernote.edam.type.Tag>(_list109.size);
+              for (int _i110 = 0; _i110 < _list109.size; ++_i110)
+              {
+                com.evernote.edam.type.Tag _elem111;
+                _elem111 = new com.evernote.edam.type.Tag();
+                _elem111.read(iprot);
+                this.tags.add(_elem111);
+              }
+              iprot.readListEnd();
+            }
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
+      }
+      iprot.readFieldEnd();
+    }
+    iprot.readStructEnd();
+    validate();
+  }
+
+  public void write(TProtocol oprot) throws TException {
+    validate();
+
+    oprot.writeStructBegin(STRUCT_DESC);
+    if (this.notes != null) {
+      if (isSetNotes()) {
+        oprot.writeFieldBegin(NOTES_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.STRUCT, this.notes.size()));
+          for (com.evernote.edam.type.Note _iter112 : this.notes)
+          {
+            _iter112.write(oprot);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
+    }
+    if (this.notebooks != null) {
+      if (isSetNotebooks()) {
+        oprot.writeFieldBegin(NOTEBOOKS_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.STRUCT, this.notebooks.size()));
+          for (com.evernote.edam.type.Notebook _iter113 : this.notebooks)
+          {
+            _iter113.write(oprot);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
+    }
+    if (this.tags != null) {
+      if (isSetTags()) {
+        oprot.writeFieldBegin(TAGS_FIELD_DESC);
+        {
+          oprot.writeListBegin(new TList(TType.STRUCT, this.tags.size()));
+          for (com.evernote.edam.type.Tag _iter114 : this.tags)
+          {
+            _iter114.write(oprot);
+          }
+          oprot.writeListEnd();
+        }
+        oprot.writeFieldEnd();
+      }
+    }
+    oprot.writeFieldStop();
+    oprot.writeStructEnd();
+  }
+
+  public String toString() {
+    StringBuilder sb = new StringBuilder("RelatedResult(");
+    boolean first = true;
+
+    if (isSetNotes()) {
+      sb.append("notes:");
+      if (this.notes == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.notes);
+      }
+      first = false;
+    }
+    if (isSetNotebooks()) {
+      if (!first) sb.append(", ");
+      sb.append("notebooks:");
+      if (this.notebooks == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.notebooks);
+      }
+      first = false;
+    }
+    if (isSetTags()) {
+      if (!first) sb.append(", ");
+      sb.append("tags:");
+      if (this.tags == null) {
+        sb.append("null");
+      } else {
+        sb.append(this.tags);
+      }
+      first = false;
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws TException {
+    // check for required fields
+  }
+
+}
+
diff --git a/src/com/evernote/edam/notestore/RelatedResultSpec.java b/src/com/evernote/edam/notestore/RelatedResultSpec.java
new file mode 100644
index 0000000..6d45381
--- /dev/null
+++ b/src/com/evernote/edam/notestore/RelatedResultSpec.java
@@ -0,0 +1,481 @@
+/**
+ * Autogenerated by Thrift
+ *
+ * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
+ */
+package com.evernote.edam.notestore;
+
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Map;
+import java.util.HashMap;
+import java.util.EnumMap;
+import java.util.Set;
+import java.util.HashSet;
+import java.util.EnumSet;
+import java.util.Collections;
+import java.util.Arrays;
+
+import org.apache.thrift.*;
+import org.apache.thrift.meta_data.*;
+import org.apache.thrift.transport.*;
+import org.apache.thrift.protocol.*;
+
+/**
+ * A description of the thing for which the service will find related
+ * entities, via findRelated(), together with a description of what
+ * type of entities and how many you are seeking in the
+ * RelatednessResult.
+ * 
+ * <dl>
+ * <dt>maxNotes</dt>
+ * <dd>Return notes that are related to the query, but no more than
+ *     this many.  Any value greater than EDAM_RELATED_MAX_NOTES
+ *     will be silently capped.  If you do not set this field, then
+ *     no notes will be returned.</dd>
+ * 
+ * <dt>maxNotebooks</dt>
+ * <dd>Return notebooks that are related to the query, but no more than
+ *     this many.  Any value greater than EDAM_RELATED_MAX_NOTEBOOKS
+ *     will be silently capped.  If you do not set this field, then
+ *     no notebooks will be returned.</dd>
+ * 
+ * <dt>maxTags</dt>
+ * <dd>Return tags that are related to the query, but no more than
+ *     this many.  Any value greater than EDAM_RELATED_MAX_TAGS
+ *     will be silently capped.  If you do not set this field, then
+ *     no tags will be returned.</dd>
+ * </dl>
+ */
+public class RelatedResultSpec implements TBase<RelatedResultSpec, RelatedResultSpec._Fields>, java.io.Serializable, Cloneable {
+  private static final TStruct STRUCT_DESC = new TStruct("RelatedResultSpec");
+
+  private static final TField MAX_NOTES_FIELD_DESC = new TField("maxNotes", TType.I32, (short)1);
+  private static final TField MAX_NOTEBOOKS_FIELD_DESC = new TField("maxNotebooks", TType.I32, (short)2);
+  private static final TField MAX_TAGS_FIELD_DESC = new TField("maxTags", TType.I32, (short)3);
+
+  private int maxNotes;
+  private int maxNotebooks;
+  private int maxTags;
+
+  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
+  public enum _Fields implements TFieldIdEnum {
+    MAX_NOTES((short)1, "maxNotes"),
+    MAX_NOTEBOOKS((short)2, "maxNotebooks"),
+    MAX_TAGS((short)3, "maxTags");
+
+    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
+
+    static {
+      for (_Fields field : EnumSet.allOf(_Fields.class)) {
+        byName.put(field.getFieldName(), field);
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, or null if its not found.
+     */
+    public static _Fields findByThriftId(int fieldId) {
+      switch(fieldId) {
+        case 1: // MAX_NOTES
+          return MAX_NOTES;
+        case 2: // MAX_NOTEBOOKS
+          return MAX_NOTEBOOKS;
+        case 3: // MAX_TAGS
+          return MAX_TAGS;
+        default:
+          return null;
+      }
+    }
+
+    /**
+     * Find the _Fields constant that matches fieldId, throwing an exception
+     * if it is not found.
+     */
+    public static _Fields findByThriftIdOrThrow(int fieldId) {
+      _Fields fields = findByThriftId(fieldId);
+      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
+      return fields;
+    }
+
+    /**
+     * Find the _Fields constant that matches name, or null if its not found.
+     */
+    public static _Fields findByName(String name) {
+      return byName.get(name);
+    }
+
+    private final short _thriftId;
+    private final String _fieldName;
+
+    _Fields(short thriftId, String fieldName) {
+      _thriftId = thriftId;
+      _fieldName = fieldName;
+    }
+
+    public short getThriftFieldId() {
+      return _thriftId;
+    }
+
+    public String getFieldName() {
+      return _fieldName;
+    }
+  }
+
+  // isset id assignments
+  private static final int __MAXNOTES_ISSET_ID = 0;
+  private static final int __MAXNOTEBOOKS_ISSET_ID = 1;
+  private static final int __MAXTAGS_ISSET_ID = 2;
+  private boolean[] __isset_vector = new boolean[3];
+
+  public static final Map<_Fields, FieldMetaData> metaDataMap;
+  static {
+    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
+    tmpMap.put(_Fields.MAX_NOTES, new FieldMetaData("maxNotes", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.I32)));
+    tmpMap.put(_Fields.MAX_NOTEBOOKS, new FieldMetaData("maxNotebooks", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.I32)));
+    tmpMap.put(_Fields.MAX_TAGS, new FieldMetaData("maxTags", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.I32)));
+    metaDataMap = Collections.unmodifiableMap(tmpMap);
+    FieldMetaData.addStructMetaDataMap(RelatedResultSpec.class, metaDataMap);
+  }
+
+  public RelatedResultSpec() {
+  }
+
+  /**
+   * Performs a deep copy on <i>other</i>.
+   */
+  public RelatedResultSpec(RelatedResultSpec other) {
+    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
+    this.maxNotes = other.maxNotes;
+    this.maxNotebooks = other.maxNotebooks;
+    this.maxTags = other.maxTags;
+  }
+
+  public RelatedResultSpec deepCopy() {
+    return new RelatedResultSpec(this);
+  }
+
+  public void clear() {
+    setMaxNotesIsSet(false);
+    this.maxNotes = 0;
+    setMaxNotebooksIsSet(false);
+    this.maxNotebooks = 0;
+    setMaxTagsIsSet(false);
+    this.maxTags = 0;
+  }
+
+  public int getMaxNotes() {
+    return this.maxNotes;
+  }
+
+  public void setMaxNotes(int maxNotes) {
+    this.maxNotes = maxNotes;
+    setMaxNotesIsSet(true);
+  }
+
+  public void unsetMaxNotes() {
+    __isset_vector[__MAXNOTES_ISSET_ID] = false;
+  }
+
+  /** Returns true if field maxNotes is set (has been asigned a value) and false otherwise */
+  public boolean isSetMaxNotes() {
+    return __isset_vector[__MAXNOTES_ISSET_ID];
+  }
+
+  public void setMaxNotesIsSet(boolean value) {
+    __isset_vector[__MAXNOTES_ISSET_ID] = value;
+  }
+
+  public int getMaxNotebooks() {
+    return this.maxNotebooks;
+  }
+
+  public void setMaxNotebooks(int maxNotebooks) {
+    this.maxNotebooks = maxNotebooks;
+    setMaxNotebooksIsSet(true);
+  }
+
+  public void unsetMaxNotebooks() {
+    __isset_vector[__MAXNOTEBOOKS_ISSET_ID] = false;
+  }
+
+  /** Returns true if field maxNotebooks is set (has been asigned a value) and false otherwise */
+  public boolean isSetMaxNotebooks() {
+    return __isset_vector[__MAXNOTEBOOKS_ISSET_ID];
+  }
+
+  public void setMaxNotebooksIsSet(boolean value) {
+    __isset_vector[__MAXNOTEBOOKS_ISSET_ID] = value;
+  }
+
+  public int getMaxTags() {
+    return this.maxTags;
+  }
+
+  public void setMaxTags(int maxTags) {
+    this.maxTags = maxTags;
+    setMaxTagsIsSet(true);
+  }
+
+  public void unsetMaxTags() {
+    __isset_vector[__MAXTAGS_ISSET_ID] = false;
+  }
+
+  /** Returns true if field maxTags is set (has been asigned a value) and false otherwise */
+  public boolean isSetMaxTags() {
+    return __isset_vector[__MAXTAGS_ISSET_ID];
+  }
+
+  public void setMaxTagsIsSet(boolean value) {
+    __isset_vector[__MAXTAGS_ISSET_ID] = value;
+  }
+
+  public void setFieldValue(_Fields field, Object value) {
+    switch (field) {
+    case MAX_NOTES:
+      if (value == null) {
+        unsetMaxNotes();
+      } else {
+        setMaxNotes((Integer)value);
+      }
+      break;
+
+    case MAX_NOTEBOOKS:
+      if (value == null) {
+        unsetMaxNotebooks();
+      } else {
+        setMaxNotebooks((Integer)value);
+      }
+      break;
+
+    case MAX_TAGS:
+      if (value == null) {
+        unsetMaxTags();
+      } else {
+        setMaxTags((Integer)value);
+      }
+      break;
+
+    }
+  }
+
+  public Object getFieldValue(_Fields field) {
+    switch (field) {
+    case MAX_NOTES:
+      return new Integer(getMaxNotes());
+
+    case MAX_NOTEBOOKS:
+      return new Integer(getMaxNotebooks());
+
+    case MAX_TAGS:
+      return new Integer(getMaxTags());
+
+    }
+    throw new IllegalStateException();
+  }
+
+  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
+  public boolean isSet(_Fields field) {
+    if (field == null) {
+      throw new IllegalArgumentException();
+    }
+
+    switch (field) {
+    case MAX_NOTES:
+      return isSetMaxNotes();
+    case MAX_NOTEBOOKS:
+      return isSetMaxNotebooks();
+    case MAX_TAGS:
+      return isSetMaxTags();
+    }
+    throw new IllegalStateException();
+  }
+
+  public boolean equals(Object that) {
+    if (that == null)
+      return false;
+    if (that instanceof RelatedResultSpec)
+      return this.equals((RelatedResultSpec)that);
+    return false;
+  }
+
+  public boolean equals(RelatedResultSpec that) {
+    if (that == null)
+      return false;
+
+    boolean this_present_maxNotes = true && this.isSetMaxNotes();
+    boolean that_present_maxNotes = true && that.isSetMaxNotes();
+    if (this_present_maxNotes || that_present_maxNotes) {
+      if (!(this_present_maxNotes && that_present_maxNotes))
+        return false;
+      if (this.maxNotes != that.maxNotes)
+        return false;
+    }
+
+    boolean this_present_maxNotebooks = true && this.isSetMaxNotebooks();
+    boolean that_present_maxNotebooks = true && that.isSetMaxNotebooks();
+    if (this_present_maxNotebooks || that_present_maxNotebooks) {
+      if (!(this_present_maxNotebooks && that_present_maxNotebooks))
+        return false;
+      if (this.maxNotebooks != that.maxNotebooks)
+        return false;
+    }
+
+    boolean this_present_maxTags = true && this.isSetMaxTags();
+    boolean that_present_maxTags = true && that.isSetMaxTags();
+    if (this_present_maxTags || that_present_maxTags) {
+      if (!(this_present_maxTags && that_present_maxTags))
+        return false;
+      if (this.maxTags != that.maxTags)
+        return false;
+    }
+
+    return true;
+  }
+
+  public int hashCode() {
+    return 0;
+  }
+
+  public int compareTo(RelatedResultSpec other) {
+    if (!getClass().equals(other.getClass())) {
+      return getClass().getName().compareTo(other.getClass().getName());
+    }
+
+    int lastComparison = 0;
+    RelatedResultSpec typedOther = (RelatedResultSpec)other;
+
+    lastComparison = Boolean.valueOf(isSetMaxNotes()).compareTo(typedOther.isSetMaxNotes());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetMaxNotes()) {      lastComparison = TBaseHelper.compareTo(this.maxNotes, typedOther.maxNotes);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetMaxNotebooks()).compareTo(typedOther.isSetMaxNotebooks());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetMaxNotebooks()) {      lastComparison = TBaseHelper.compareTo(this.maxNotebooks, typedOther.maxNotebooks);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    lastComparison = Boolean.valueOf(isSetMaxTags()).compareTo(typedOther.isSetMaxTags());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetMaxTags()) {      lastComparison = TBaseHelper.compareTo(this.maxTags, typedOther.maxTags);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
+    return 0;
+  }
+
+  public _Fields fieldForId(int fieldId) {
+    return _Fields.findByThriftId(fieldId);
+  }
+
+  public void read(TProtocol iprot) throws TException {
+    TField field;
+    iprot.readStructBegin();
+    while (true)
+    {
+      field = iprot.readFieldBegin();
+      if (field.type == TType.STOP) { 
+        break;
+      }
+      switch (field.id) {
+        case 1: // MAX_NOTES
+          if (field.type == TType.I32) {
+            this.maxNotes = iprot.readI32();
+            setMaxNotesIsSet(true);
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        case 2: // MAX_NOTEBOOKS
+          if (field.type == TType.I32) {
+            this.maxNotebooks = iprot.readI32();
+            setMaxNotebooksIsSet(true);
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        case 3: // MAX_TAGS
+          if (field.type == TType.I32) {
+            this.maxTags = iprot.readI32();
+            setMaxTagsIsSet(true);
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
+        default:
+          TProtocolUtil.skip(iprot, field.type);
+      }
+      iprot.readFieldEnd();
+    }
+    iprot.readStructEnd();
+    validate();
+  }
+
+  public void write(TProtocol oprot) throws TException {
+    validate();
+
+    oprot.writeStructBegin(STRUCT_DESC);
+    if (isSetMaxNotes()) {
+      oprot.writeFieldBegin(MAX_NOTES_FIELD_DESC);
+      oprot.writeI32(this.maxNotes);
+      oprot.writeFieldEnd();
+    }
+    if (isSetMaxNotebooks()) {
+      oprot.writeFieldBegin(MAX_NOTEBOOKS_FIELD_DESC);
+      oprot.writeI32(this.maxNotebooks);
+      oprot.writeFieldEnd();
+    }
+    if (isSetMaxTags()) {
+      oprot.writeFieldBegin(MAX_TAGS_FIELD_DESC);
+      oprot.writeI32(this.maxTags);
+      oprot.writeFieldEnd();
+    }
+    oprot.writeFieldStop();
+    oprot.writeStructEnd();
+  }
+
+  public String toString() {
+    StringBuilder sb = new StringBuilder("RelatedResultSpec(");
+    boolean first = true;
+
+    if (isSetMaxNotes()) {
+      sb.append("maxNotes:");
+      sb.append(this.maxNotes);
+      first = false;
+    }
+    if (isSetMaxNotebooks()) {
+      if (!first) sb.append(", ");
+      sb.append("maxNotebooks:");
+      sb.append(this.maxNotebooks);
+      first = false;
+    }
+    if (isSetMaxTags()) {
+      if (!first) sb.append(", ");
+      sb.append("maxTags:");
+      sb.append(this.maxTags);
+      first = false;
+    }
+    sb.append(")");
+    return sb.toString();
+  }
+
+  public void validate() throws TException {
+    // check for required fields
+  }
+
+}
+
diff --git a/src/com/evernote/edam/userstore/BootstrapSettings.java b/src/com/evernote/edam/userstore/BootstrapSettings.java
index cc39bb9..5a7f33b 100644
--- a/src/com/evernote/edam/userstore/BootstrapSettings.java
+++ b/src/com/evernote/edam/userstore/BootstrapSettings.java
@@ -94,6 +94,7 @@
   private static final TField ENABLE_SINGLE_NOTE_SHARING_FIELD_DESC = new TField("enableSingleNoteSharing", TType.BOOL, (short)9);
   private static final TField ENABLE_SPONSORED_ACCOUNTS_FIELD_DESC = new TField("enableSponsoredAccounts", TType.BOOL, (short)10);
   private static final TField ENABLE_TWITTER_SHARING_FIELD_DESC = new TField("enableTwitterSharing", TType.BOOL, (short)11);
+  private static final TField ENABLE_LINKED_IN_SHARING_FIELD_DESC = new TField("enableLinkedInSharing", TType.BOOL, (short)12);
 
   private String serviceHost;
   private String marketingUrl;
@@ -106,6 +107,7 @@
   private boolean enableSingleNoteSharing;
   private boolean enableSponsoredAccounts;
   private boolean enableTwitterSharing;
+  private boolean enableLinkedInSharing;
 
   /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
   public enum _Fields implements TFieldIdEnum {
@@ -119,7 +121,8 @@
     ENABLE_SHARED_NOTEBOOKS((short)8, "enableSharedNotebooks"),
     ENABLE_SINGLE_NOTE_SHARING((short)9, "enableSingleNoteSharing"),
     ENABLE_SPONSORED_ACCOUNTS((short)10, "enableSponsoredAccounts"),
-    ENABLE_TWITTER_SHARING((short)11, "enableTwitterSharing");
+    ENABLE_TWITTER_SHARING((short)11, "enableTwitterSharing"),
+    ENABLE_LINKED_IN_SHARING((short)12, "enableLinkedInSharing");
 
     private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();
 
@@ -156,6 +159,8 @@ public static _Fields findByThriftId(int fieldId) {
           return ENABLE_SPONSORED_ACCOUNTS;
         case 11: // ENABLE_TWITTER_SHARING
           return ENABLE_TWITTER_SHARING;
+        case 12: // ENABLE_LINKED_IN_SHARING
+          return ENABLE_LINKED_IN_SHARING;
         default:
           return null;
       }
@@ -203,7 +208,8 @@ public String getFieldName() {
   private static final int __ENABLESINGLENOTESHARING_ISSET_ID = 4;
   private static final int __ENABLESPONSOREDACCOUNTS_ISSET_ID = 5;
   private static final int __ENABLETWITTERSHARING_ISSET_ID = 6;
-  private boolean[] __isset_vector = new boolean[7];
+  private static final int __ENABLELINKEDINSHARING_ISSET_ID = 7;
+  private boolean[] __isset_vector = new boolean[8];
 
   public static final Map<_Fields, FieldMetaData> metaDataMap;
   static {
@@ -230,6 +236,8 @@ public String getFieldName() {
         new FieldValueMetaData(TType.BOOL)));
     tmpMap.put(_Fields.ENABLE_TWITTER_SHARING, new FieldMetaData("enableTwitterSharing", TFieldRequirementType.OPTIONAL, 
         new FieldValueMetaData(TType.BOOL)));
+    tmpMap.put(_Fields.ENABLE_LINKED_IN_SHARING, new FieldMetaData("enableLinkedInSharing", TFieldRequirementType.OPTIONAL, 
+        new FieldValueMetaData(TType.BOOL)));
     metaDataMap = Collections.unmodifiableMap(tmpMap);
     FieldMetaData.addStructMetaDataMap(BootstrapSettings.class, metaDataMap);
   }
@@ -274,6 +282,7 @@ public BootstrapSettings(BootstrapSettings other) {
     this.enableSingleNoteSharing = other.enableSingleNoteSharing;
     this.enableSponsoredAccounts = other.enableSponsoredAccounts;
     this.enableTwitterSharing = other.enableTwitterSharing;
+    this.enableLinkedInSharing = other.enableLinkedInSharing;
   }
 
   public BootstrapSettings deepCopy() {
@@ -299,6 +308,8 @@ public void clear() {
     this.enableSponsoredAccounts = false;
     setEnableTwitterSharingIsSet(false);
     this.enableTwitterSharing = false;
+    setEnableLinkedInSharingIsSet(false);
+    this.enableLinkedInSharing = false;
   }
 
   public String getServiceHost() {
@@ -547,6 +558,28 @@ public void setEnableTwitterSharingIsSet(boolean value) {
     __isset_vector[__ENABLETWITTERSHARING_ISSET_ID] = value;
   }
 
+  public boolean isEnableLinkedInSharing() {
+    return this.enableLinkedInSharing;
+  }
+
+  public void setEnableLinkedInSharing(boolean enableLinkedInSharing) {
+    this.enableLinkedInSharing = enableLinkedInSharing;
+    setEnableLinkedInSharingIsSet(true);
+  }
+
+  public void unsetEnableLinkedInSharing() {
+    __isset_vector[__ENABLELINKEDINSHARING_ISSET_ID] = false;
+  }
+
+  /** Returns true if field enableLinkedInSharing is set (has been asigned a value) and false otherwise */
+  public boolean isSetEnableLinkedInSharing() {
+    return __isset_vector[__ENABLELINKEDINSHARING_ISSET_ID];
+  }
+
+  public void setEnableLinkedInSharingIsSet(boolean value) {
+    __isset_vector[__ENABLELINKEDINSHARING_ISSET_ID] = value;
+  }
+
   public void setFieldValue(_Fields field, Object value) {
     switch (field) {
     case SERVICE_HOST:
@@ -637,6 +670,14 @@ public void setFieldValue(_Fields field, Object value) {
       }
       break;
 
+    case ENABLE_LINKED_IN_SHARING:
+      if (value == null) {
+        unsetEnableLinkedInSharing();
+      } else {
+        setEnableLinkedInSharing((Boolean)value);
+      }
+      break;
+
     }
   }
 
@@ -675,6 +716,9 @@ public Object getFieldValue(_Fields field) {
     case ENABLE_TWITTER_SHARING:
       return new Boolean(isEnableTwitterSharing());
 
+    case ENABLE_LINKED_IN_SHARING:
+      return new Boolean(isEnableLinkedInSharing());
+
     }
     throw new IllegalStateException();
   }
@@ -708,6 +752,8 @@ public boolean isSet(_Fields field) {
       return isSetEnableSponsoredAccounts();
     case ENABLE_TWITTER_SHARING:
       return isSetEnableTwitterSharing();
+    case ENABLE_LINKED_IN_SHARING:
+      return isSetEnableLinkedInSharing();
     }
     throw new IllegalStateException();
   }
@@ -823,6 +869,15 @@ public boolean equals(BootstrapSettings that) {
         return false;
     }
 
+    boolean this_present_enableLinkedInSharing = true && this.isSetEnableLinkedInSharing();
+    boolean that_present_enableLinkedInSharing = true && that.isSetEnableLinkedInSharing();
+    if (this_present_enableLinkedInSharing || that_present_enableLinkedInSharing) {
+      if (!(this_present_enableLinkedInSharing && that_present_enableLinkedInSharing))
+        return false;
+      if (this.enableLinkedInSharing != that.enableLinkedInSharing)
+        return false;
+    }
+
     return true;
   }
 
@@ -937,6 +992,15 @@ public int compareTo(BootstrapSettings other) {
         return lastComparison;
       }
     }
+    lastComparison = Boolean.valueOf(isSetEnableLinkedInSharing()).compareTo(typedOther.isSetEnableLinkedInSharing());
+    if (lastComparison != 0) {
+      return lastComparison;
+    }
+    if (isSetEnableLinkedInSharing()) {      lastComparison = TBaseHelper.compareTo(this.enableLinkedInSharing, typedOther.enableLinkedInSharing);
+      if (lastComparison != 0) {
+        return lastComparison;
+      }
+    }
     return 0;
   }
 
@@ -1038,6 +1102,14 @@ public void read(TProtocol iprot) throws TException {
             TProtocolUtil.skip(iprot, field.type);
           }
           break;
+        case 12: // ENABLE_LINKED_IN_SHARING
+          if (field.type == TType.BOOL) {
+            this.enableLinkedInSharing = iprot.readBool();
+            setEnableLinkedInSharingIsSet(true);
+          } else { 
+            TProtocolUtil.skip(iprot, field.type);
+          }
+          break;
         default:
           TProtocolUtil.skip(iprot, field.type);
       }
@@ -1106,6 +1178,11 @@ public void write(TProtocol oprot) throws TException {
       oprot.writeBool(this.enableTwitterSharing);
       oprot.writeFieldEnd();
     }
+    if (isSetEnableLinkedInSharing()) {
+      oprot.writeFieldBegin(ENABLE_LINKED_IN_SHARING_FIELD_DESC);
+      oprot.writeBool(this.enableLinkedInSharing);
+      oprot.writeFieldEnd();
+    }
     oprot.writeFieldStop();
     oprot.writeStructEnd();
   }
@@ -1187,6 +1264,12 @@ public String toString() {
       sb.append(this.enableTwitterSharing);
       first = false;
     }
+    if (isSetEnableLinkedInSharing()) {
+      if (!first) sb.append(", ");
+      sb.append("enableLinkedInSharing:");
+      sb.append(this.enableLinkedInSharing);
+      first = false;
+    }
     sb.append(")");
     return sb.toString();
   }
diff --git a/src/com/evernote/edam/userstore/Constants.java b/src/com/evernote/edam/userstore/Constants.java
index 5367891..66e4a5d 100644
--- a/src/com/evernote/edam/userstore/Constants.java
+++ b/src/com/evernote/edam/userstore/Constants.java
@@ -20,6 +20,6 @@
 
   public static final short EDAM_VERSION_MAJOR = (short)1;
 
-  public static final short EDAM_VERSION_MINOR = (short)21;
+  public static final short EDAM_VERSION_MINOR = (short)22;
 
 }
diff --git a/src/com/evernote/edam/userstore/UserStore.java b/src/com/evernote/edam/userstore/UserStore.java
index 71d0da3..0dff937 100644
--- a/src/com/evernote/edam/userstore/UserStore.java
+++ b/src/com/evernote/edam/userstore/UserStore.java
@@ -821,7 +821,7 @@ public String getFieldName() {
     public checkVersion_args() {
       this.edamVersionMajor = (short)1;
 
-      this.edamVersionMinor = (short)21;
+      this.edamVersionMinor = (short)22;
 
     }
 
@@ -858,7 +858,7 @@ public void clear() {
       this.clientName = null;
       this.edamVersionMajor = (short)1;
 
-      this.edamVersionMinor = (short)21;
+      this.edamVersionMinor = (short)22;
 
     }
 
