diff --git a/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java b/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
index 197a88b..a4cd0b6 100644
--- a/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
+++ b/src/com/evernote/client/oauth/android/EvernoteOAuthActivity.java
@@ -25,6 +25,11 @@
  */
 package com.evernote.client.oauth.android;
 
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
 import org.scribe.builder.ServiceBuilder;
 import org.scribe.builder.api.EvernoteApi;
 import org.scribe.exceptions.OAuthException;
@@ -168,9 +173,18 @@ private OAuthService createService() {
    */
   private void beginAuthentication() {
     try {
-      OAuthService service = createService();
+      final OAuthService service = createService();
       Log.i(TAG, "Retrieving OAuth request token...");
-      Token reqToken = service.getRequestToken();
+      ExecutorService exec = Executors.newSingleThreadExecutor();
+      Callable<Token> getRequestTokenTask = new Callable<Token>() {
+          @Override
+          public Token call() throws Exception {
+              return service.getRequestToken();
+          }
+      };
+      Future<Token> defferedRequestToken = exec.submit(getRequestTokenTask);
+      Token reqToken = defferedRequestToken.get();
+      exec.shutdownNow();
       this.requestToken = reqToken.getToken();
       this.requestTokenSecret = reqToken.getSecret();
       
@@ -200,17 +214,25 @@ private EvernoteAuthToken completeAuth(Uri uri) {
     EvernoteAuthToken accessToken = null;
 
     if (requestToken != null) {
-      OAuthService service = createService();
+      final OAuthService service = createService();
       String verifierString = uri.getQueryParameter("oauth_verifier");
       if (verifierString == null || verifierString.length() == 0) {
         Log.i(TAG, "User did not authorize access");
       } else {
-        Verifier verifier = new Verifier(verifierString);
+        final Verifier verifier = new Verifier(verifierString);
         Log.i(TAG, "Retrieving OAuth access token...");  
         try {
-          Token reqToken = new Token(requestToken, requestTokenSecret);
-          accessToken = 
-            new EvernoteAuthToken(service.getAccessToken(reqToken, verifier));
+          final Token reqToken = new Token(requestToken, requestTokenSecret);
+          ExecutorService exec = Executors.newSingleThreadExecutor();
+          Callable<EvernoteAuthToken> getEvernoteAuthTokenTask = new Callable<EvernoteAuthToken>() {
+              @Override
+              public EvernoteAuthToken call() throws Exception {
+                  return new EvernoteAuthToken(service.getAccessToken(reqToken, verifier));
+              }
+          };
+          Future<EvernoteAuthToken> defferedEvernoteAutoToken = exec.submit(getEvernoteAuthTokenTask);
+          accessToken = defferedEvernoteAutoToken.get();
+          exec.shutdownNow();
         } catch (OAuthException oax) {
           Log.e(TAG, "Failed to obtain OAuth access token", oax);
         } catch (Exception ex) {
