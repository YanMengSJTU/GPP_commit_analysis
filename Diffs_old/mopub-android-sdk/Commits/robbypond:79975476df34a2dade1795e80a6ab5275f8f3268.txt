diff --git a/CHANGELOG.md b/CHANGELOG.md
index afe16fd3..27dce7c0 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,13 @@
+## Version 2.2 (Jun 19, 2014)
+
+  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  	- Facebook Audience Network (`FacebookNative.java`)
+  	- InMobi Native Ads (`InMobiNative.java`)
+  - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
+  - Added star rating information to the `NativeResponse` object, via `NativeResponse#getStarRating()`. This method returns a `Double` corresponding to an app's rating on a 5-star scale.
+  - VAST video quartile and completion trackers now always include the user-agent
+  - Ensured that banners never autorefresh until they have been loaded at least once
+
 ## Version 2.1 (May 15, 2014)
 
   - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for Facebook custom events](http://help.mopub.com/customer/portal/articles/1552301-how-to-integrate-facebook-audience-network-using-custom-events).
diff --git a/README.md b/README.md
index c67ac451..d9e6028b 100644
--- a/README.md
+++ b/README.md
@@ -27,11 +27,12 @@ Integration instructions are available on the [wiki](https://github.com/mopub/mo
 
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for details.
 
-  - Added custom events for Facebook ads. `FacebookBanner` and `FacebookInterstitial` can be found in the extras directory of the SDK (`/extras/src/com/mopub/mobileads`). For more information, please see the [help page for Facebook custom events](http://help.mopub.com/customer/portal/articles/1552301-how-to-integrate-facebook-audience-network-using-custom-events).
-  - Significant improvements to video ads
-    - Added overlay including a "Learn More" button, video length, and time left until the video may be skipped
-    - Added support for companion banners (shown upon video completion)
-  - Added Logcat warnings (and Toasts for debug builds) in cases where all necessary Activity permissions haven't been added to the `AndroidManifest`
+  - **Native ads mediation** release; integration instructions and documentation are available on the [GitHub wiki](https://github.com/mopub/mopub-android-sdk/wiki/Integrating-Native-Third-Party-Ad-Networks). Added custom event native implementations to the native extras directory of the SDK (`/extras/src/com/mopub/nativeads`), with initial support for the following networks:
+  	- Facebook Audience Network (`FacebookNative.java`)
+  	- InMobi Native Ads (`InMobiNative.java`)
+  - **Native ads content filtering**: Added the ability to specify which native ad elements you want to receive from the MoPub Marketplace to optimize bandwidth use and download only required assets, via `RequestParameters.Builder#desiredAssets(…)`. This feature only works for the six standard Marketplace assets, found in `RequestParameters.NativeAdAsset`. Any additional elements added in direct sold ads will always be sent down in the extras.
+  - Added star rating information to the `NativeResponse` object, via `NativeResponse#getStarRating()`. This method returns a `Double` corresponding to an app's rating on a 5-star scale.
+  - Bug fixes
 
 ## Requirements
 
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
index dd58b6c6..3ed00d2a 100644
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
@@ -40,7 +40,7 @@
 import com.jirbo.adcolony.AdColonyAd;
 import com.jirbo.adcolony.AdColonyAdListener;
 import com.jirbo.adcolony.AdColonyVideoAd;
-import com.mopub.mobileads.util.Json;
+import com.mopub.common.util.Json;
 
 import java.util.*;
 import java.util.concurrent.*;
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
new file mode 100644
index 00000000..952783cb
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/FacebookNative.java
@@ -0,0 +1,162 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.view.View;
+
+import com.facebook.ads.Ad;
+import com.facebook.ads.AdError;
+import com.facebook.ads.AdListener;
+import com.facebook.ads.NativeAd;
+import com.facebook.ads.NativeAd.Rating;
+
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+/*
+ * Tested with Facebook SDK 3.14.1
+ */
+public class FacebookNative extends CustomEventNative implements AdListener {
+    private static final String PLACEMENT_ID_KEY = "placement_id";
+
+    private Context mContext;
+    private NativeAd mNativeAd;
+    private CustomEventNativeListener mCustomEventNativeListener;
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        mContext = context.getApplicationContext();
+
+        final String placementId;
+        if (extrasAreValid(serverExtras)) {
+            placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mCustomEventNativeListener = customEventNativeListener;
+
+        mNativeAd = new NativeAd(context, placementId);
+        mNativeAd.setAdListener(this);
+        mNativeAd.loadAd();
+    }
+
+    // AdListener implementation
+    @Override
+    public void onAdLoaded(final Ad ad) {
+        // This identity check is from Facebook's Native API sample code:
+        // https://developers.facebook.com/docs/audience-network/android/native-api
+        if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
+        final FacebookForwardingNativeAd facebookForwardingNativeAd =
+                new FacebookForwardingNativeAd(mNativeAd);
+
+        final List<String> imageUrls = new ArrayList<String>();
+        final String mainImageUrl = facebookForwardingNativeAd.getMainImageUrl();
+        if (mainImageUrl != null) {
+            imageUrls.add(facebookForwardingNativeAd.getMainImageUrl());
+        }
+        final String iconUrl = facebookForwardingNativeAd.getIconImageUrl();
+        if (iconUrl != null) {
+            imageUrls.add(facebookForwardingNativeAd.getIconImageUrl());
+        }
+
+        preCacheImages(mContext, imageUrls, new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                mCustomEventNativeListener.onNativeAdLoaded(facebookForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                mCustomEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    @Override
+    public void onError(final Ad ad, final AdError error) {
+        if (error == AdError.NO_FILL) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+        } else if (error == AdError.INTERNAL_ERROR) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+        } else {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        }
+    }
+
+    @Override
+    public void onAdClicked(final Ad ad) {
+        // not used
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class FacebookForwardingNativeAd extends BaseForwardingNativeAd {
+        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
+        private static final String APP_RATING_FOR_AD = "appRatingForAd";
+        private static final int IMPRESSION_MIN_TIME_VIEWED = 0;
+
+        private final NativeAd mNativeAd;
+
+        FacebookForwardingNativeAd(final NativeAd nativeAd) {
+            if (nativeAd == null) {
+                throw new IllegalArgumentException("Facebook NativeAd cannot be null");
+            }
+
+            mNativeAd = nativeAd;
+
+            setTitle(nativeAd.getAdTitle());
+            setText(nativeAd.getAdBody());
+
+            NativeAd.Image coverImage = nativeAd.getAdCoverImage();
+            setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
+
+            NativeAd.Image icon = nativeAd.getAdIcon();
+            setIconImageUrl(icon == null ? null : icon.getUrl());
+
+            setCallToAction(nativeAd.getAdCallToAction());
+            setStarRating(getDoubleRating(nativeAd.getAdStarRating()));
+
+            addExtra(SOCIAL_CONTEXT_FOR_AD, nativeAd.getAdSocialContext());
+
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
+        @Override
+        public void recordImpression() {
+            mNativeAd.logImpression();
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            mNativeAd.handleClick();
+        }
+
+        @Override
+        public void destroy() {
+            mNativeAd.destroy();
+        }
+
+        private static Double getDoubleRating(final Rating rating) {
+            if (rating == null) {
+                return null;
+            }
+
+            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
+        }
+    }
+}
diff --git a/extras/src/com/mopub/nativeads/InMobiNative.java b/extras/src/com/mopub/nativeads/InMobiNative.java
new file mode 100644
index 00000000..4fa79df5
--- /dev/null
+++ b/extras/src/com/mopub/nativeads/InMobiNative.java
@@ -0,0 +1,196 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.content.Context;
+import android.view.View;
+import android.view.ViewGroup;
+
+import com.inmobi.commons.InMobi;
+import com.inmobi.monetization.IMErrorCode;
+import com.inmobi.monetization.IMNative;
+import com.inmobi.monetization.IMNativeListener;
+import com.mopub.common.util.MoPubLog;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.common.util.Json.getJsonValue;
+import static com.mopub.common.util.Numbers.parseDouble;
+
+/*
+ * Tested with InMobi SDK 4.4.0
+ */
+class InMobiNative extends CustomEventNative implements IMNativeListener {
+    private static final String APP_ID_KEY = "app_id";
+
+    private Context mContext;
+    private CustomEventNativeListener mCustomEventNativeListener;
+
+    // CustomEventNative implementation
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        mContext = context;
+
+        if (!(context instanceof Activity)) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+        final Activity activity = (Activity) context;
+
+        final String appId;
+        if (extrasAreValid(serverExtras)) {
+            appId = serverExtras.get(APP_ID_KEY);
+        } else {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mCustomEventNativeListener = customEventNativeListener;
+
+        InMobi.initialize(activity, appId);
+        final IMNative imNative = new IMNative(this);
+        imNative.loadAd();
+    }
+
+    // IMNativeListener implementation
+    @Override
+    public void onNativeRequestSucceeded(final IMNative imNative) {
+        if (imNative == null) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+            return;
+        }
+
+        final InMobiForwardingNativeAd inMobiForwardingNativeAd;
+        try {
+            inMobiForwardingNativeAd = new InMobiForwardingNativeAd(imNative);
+        } catch (IllegalArgumentException e) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            return;
+        } catch (JSONException e) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            return;
+        }
+
+        final List<String> imageUrls = new ArrayList<String>();
+        final String mainImageUrl = inMobiForwardingNativeAd.getMainImageUrl();
+        if (mainImageUrl != null) {
+            imageUrls.add(mainImageUrl);
+        }
+        final String iconUrl = inMobiForwardingNativeAd.getIconImageUrl();
+        if (iconUrl != null) {
+            imageUrls.add(iconUrl);
+        }
+
+        preCacheImages(mContext, imageUrls, new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                mCustomEventNativeListener.onNativeAdLoaded(inMobiForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                mCustomEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    @Override
+    public void onNativeRequestFailed(final IMErrorCode errorCode) {
+        if (errorCode == IMErrorCode.INVALID_REQUEST) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
+        } else if (errorCode == IMErrorCode.INTERNAL_ERROR || errorCode == IMErrorCode.NETWORK_ERROR) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
+        } else if (errorCode == IMErrorCode.NO_FILL) {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
+        } else {
+            mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+        }
+    }
+
+    private boolean extrasAreValid(final Map<String, String> serverExtras) {
+        final String placementId = serverExtras.get(APP_ID_KEY);
+        return (placementId != null && placementId.length() > 0);
+    }
+
+    static class InMobiForwardingNativeAd extends BaseForwardingNativeAd {
+        static final int IMPRESSION_MIN_TIME_VIEWED = 0;
+
+        // Modifiable keys
+        static final String TITLE = "title";
+        static final String DESCRIPTION = "description";
+        static final String SCREENSHOTS = "screenshots";
+        static final String ICON = "icon";
+        static final String LANDING_URL = "landing_url";
+        static final String CTA = "cta";
+        static final String RATING = "rating";
+
+        // Constant keys
+        static final String URL = "url";
+
+        private final IMNative mImNative;
+
+        InMobiForwardingNativeAd(final IMNative imNative) throws IllegalArgumentException, JSONException {
+            if (imNative == null) {
+                throw new IllegalArgumentException("InMobi Native Ad cannot be null");
+            }
+
+            mImNative = imNative;
+
+            final JSONTokener jsonTokener = new JSONTokener(mImNative.getContent());
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            setTitle(getJsonValue(jsonObject, TITLE, String.class));
+            setText(getJsonValue(jsonObject, DESCRIPTION, String.class));
+
+            final JSONObject screenShotJsonObject = getJsonValue(jsonObject, SCREENSHOTS, JSONObject.class);
+            if (screenShotJsonObject != null) {
+                setMainImageUrl(getJsonValue(screenShotJsonObject, URL, String.class));
+            }
+
+            final JSONObject iconJsonObject = getJsonValue(jsonObject, ICON, JSONObject.class);
+            if (iconJsonObject != null) {
+                setIconImageUrl(getJsonValue(iconJsonObject, URL, String.class));
+            }
+
+            setClickDestinationUrl(getJsonValue(jsonObject, LANDING_URL, String.class));
+            setCallToAction(getJsonValue(jsonObject, CTA, String.class));
+
+            try {
+                setStarRating(parseDouble(jsonObject.opt(RATING)));
+            } catch (ClassCastException e) {
+                MoPubLog.d("Unable to set invalid star rating for InMobi Native.");
+            }
+            setImpressionMinTimeViewed(IMPRESSION_MIN_TIME_VIEWED);
+        }
+
+        @Override
+        public void prepareImpression(final View view) {
+            if (view != null && view instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view);
+            } else if (view != null && view.getParent() instanceof ViewGroup) {
+                mImNative.attachToView((ViewGroup) view.getParent());
+            } else {
+                MoPubLog.e("InMobi did not receive ViewGroup to attachToView, unable to record impressions");
+            }
+        }
+
+        @Override
+        public void handleClick(final View view) {
+            mImNative.handleClick(null);
+        }
+
+        @Override
+        public void destroy() {
+            mImNative.detachFromView();
+        }
+    }
+}
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 9ee197b6..901992f6 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -12,8 +12,7 @@
     <!-- For MRAID 2 -->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:icon="@drawable/icon" android:label="@string/app_name"
-            android:debuggable="true">
+    <application android:icon="@drawable/icon" android:label="@string/app_name">
 	    <activity android:name="com.mopub.simpleadsdemo.SimpleAdsDemo"
 	            android:label="@string/app_name" android:theme="@android:style/Theme.NoTitleBar"
                 android:configChanges="orientation">
diff --git a/mopub-sample/res/layout/console.xml b/mopub-sample/res/layout/console.xml
deleted file mode 100644
index 8c23b037..00000000
--- a/mopub-sample/res/layout/console.xml
+++ /dev/null
@@ -1,59 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-
-<RelativeLayout
-	android:id="@+id/toplayout"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="wrap_content">
-
-	<Button
-		android:id="@+id/searchbutton"
-		android:layout_width="wrap_content"
-		android:layout_height="wrap_content"
-		android:layout_alignParentRight="true"
-		android:layout_marginLeft="10dp"
-		android:layout_marginTop="20dp"
-		android:text="Load Ad" />
-
-	<EditText
-		android:id="@+id/searchtext"
-		android:hint="Keyword, try 'coffee'"
-		android:layout_width="fill_parent"
-		android:layout_height="wrap_content"
-		android:layout_toLeftOf="@id/searchbutton"
-		android:layout_alignTop="@id/searchbutton" />
-</RelativeLayout>
-
-<RelativeLayout
-	android:id="@+id/toplayout"
-	android:orientation="vertical"
-	android:layout_width="fill_parent"
-	android:layout_height="fill_parent">
-
-	<com.mopub.mobileads.MoPubView
-		android:id="@+id/bannerview"
-		android:layout_alignParentBottom="true"
-		android:background="@drawable/spacer"
-		android:layout_marginTop="10dp"
-		android:layout_width="fill_parent"
-		android:layout_height="50dp" />
-
-	<TextView
-		android:id="@+id/consoletext"
-		android:scrollbars = "vertical"
-		android:maxLines = "1000"
-		android:layout_width="fill_parent"
-		android:layout_height="fill_parent"
-		android:layout_above="@id/bannerview"
-		android:textSize = "10sp"
-		android:typeface="monospace"
-		android:background="#000000"
-		android:text="MoPub Ad Loading Console\n========================\n" />
-
-</RelativeLayout>
-
-</LinearLayout>
diff --git a/mopub-sdk/etc/mraid.js b/mopub-sdk/etc/mraid.js
index d81ee015..443df6ff 100644
--- a/mopub-sdk/etc/mraid.js
+++ b/mopub-sdk/etc/mraid.js
@@ -126,7 +126,7 @@
 
   // Constants. ////////////////////////////////////////////////////////////////////////////////////
 
-  var VERSION = mraid.VERSION = '2.0';
+  var VERSION = mraid.VERSION = '1.0';
 
   var STATES = mraid.STATES = {
     LOADING: 'loading',     // Initial state.
diff --git a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
index e60bbe2c..82d5fa90 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/DownloadResponse.java
@@ -1,16 +1,19 @@
 package com.mopub.common;
 
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Streams;
 
+import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 
 import java.io.BufferedInputStream;
 import java.io.ByteArrayOutputStream;
 
 public class DownloadResponse {
-    private byte[] bytes = new byte[0];
-    private final int statusCode;
-    private final long contentLength;
+    private byte[] mBytes = new byte[0];
+    private final int mStatusCode;
+    private final long mContentLength;
+    private final Header[] mHeaders;
 
     public DownloadResponse(final HttpResponse httpResponse) throws Exception {
         final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
@@ -18,25 +21,35 @@ public DownloadResponse(final HttpResponse httpResponse) throws Exception {
         try {
             inputStream = new BufferedInputStream(httpResponse.getEntity().getContent());
             Streams.copyContent(inputStream, outputStream);
-            bytes = outputStream.toByteArray();
+            mBytes = outputStream.toByteArray();
         } finally {
             Streams.closeStream(inputStream);
             Streams.closeStream(outputStream);
         }
 
-        this.statusCode = httpResponse.getStatusLine().getStatusCode();
-        this.contentLength = bytes.length;
+        mStatusCode = httpResponse.getStatusLine().getStatusCode();
+        mContentLength = mBytes.length;
+        mHeaders = httpResponse.getAllHeaders();
     }
 
     public byte[] getByteArray() {
-        return bytes;
+        return mBytes;
     }
 
     public int getStatusCode() {
-        return statusCode;
+        return mStatusCode;
     }
 
     public long getContentLength() {
-        return contentLength;
+        return mContentLength;
+    }
+
+    public String getFirstHeader(final ResponseHeader responseHeader) {
+        for (final Header header : mHeaders) {
+            if (header.getName().equals(responseHeader.getKey())) {
+                return header.getValue();
+            }
+        }
+        return null;
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
index afb4335a..7749ef46 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/GpsHelper.java
@@ -2,11 +2,17 @@
 
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.os.AsyncTask;
+
 import com.mopub.common.factories.MethodBuilderFactory;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.MoPubLog;
 
+import java.lang.ref.WeakReference;
+
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.common.util.Reflection.classFound;
+
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.ADMOB_INTERSTITIAL;
@@ -94,37 +100,69 @@ static public void asyncFetchAdvertisingInfo(final Context context) {
         asyncFetchAdvertisingInfo(context, null);
     }
 
+    static private class FetchAdvertisingInfoTask extends AsyncTask<Void, Void, Void> {
+        private WeakReference<Context> mContextWeakReference;
+        private WeakReference<GpsHelperListener> mGpsHelperListenerWeakReference;
+
+        public FetchAdvertisingInfoTask(Context context, GpsHelperListener gpsHelperListener) {
+            mContextWeakReference = new WeakReference<Context>(context);
+            mGpsHelperListenerWeakReference = new WeakReference<GpsHelperListener>(gpsHelperListener);
+        }
+
+        @Override
+        protected Void doInBackground(Void... voids) {
+            try {
+                Context context = mContextWeakReference.get();
+                if (context == null) {
+                    return null;
+                }
+
+                MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
+                        .setStatic(Class.forName(sAdvertisingIdClientClassName))
+                        .addParam(Context.class, context);
+
+                Object adInfo = methodBuilder.execute();
+
+                if (adInfo != null) {
+                    updateSharedPreferences(context, adInfo);
+                }
+            } catch (Exception exception) {
+                MoPubLog.d("Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
+            }
+
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(Void aVoid) {
+            GpsHelperListener gpsHelperListener = mGpsHelperListenerWeakReference.get();
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
+            }
+        }
+    }
+
     static public void asyncFetchAdvertisingInfo(final Context context, final GpsHelperListener gpsHelperListener) {
         if (!classFound(sAdvertisingIdClientClassName)) {
             if (gpsHelperListener != null) {
                 gpsHelperListener.onFetchAdInfoCompleted();
             }
+
+            return;
         }
 
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
-                            .setStatic(Class.forName(sAdvertisingIdClientClassName))
-                            .addParam(Context.class, context);
-
-                    Object adInfo = methodBuilder.execute();
-
-                    if (adInfo != null) {
-                        updateSharedPreferences(context, adInfo);
-                    }
-                } catch (Exception exception) {
-                    MoPubLog.d("Unable to obtain AdvertisingIdClient.getAdvertisingIdInfo()");
-                } finally {
-                    if (gpsHelperListener != null) {
-                        gpsHelperListener.onFetchAdInfoCompleted();
-                    }
-                }
+        try {
+            AsyncTasks.safeExecuteOnExecutor(new FetchAdvertisingInfoTask(context, gpsHelperListener));
+        } catch (Exception exception) {
+            MoPubLog.d("Error executing FetchAdvertisingInfoTask", exception);
+
+            if (gpsHelperListener != null) {
+                gpsHelperListener.onFetchAdInfoCompleted();
             }
-        }).start();
+        }
     }
 
+
     static void updateSharedPreferences(final Context context, final Object adInfo) {
         String advertisingId = reflectedGetAdvertisingId(adInfo, null);
         boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
diff --git a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
index eb783fe3..5f6a66b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/HttpClient.java
@@ -1,7 +1,10 @@
 package com.mopub.common;
 
 import android.net.http.AndroidHttpClient;
+import android.os.Handler;
+import android.os.Looper;
 
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.MoPubLog;
 
@@ -11,6 +14,8 @@
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
 
+import java.util.Arrays;
+
 public class HttpClient {
     private static final int CONNECTION_TIMEOUT = 10000;
     private static final int SOCKET_TIMEOUT = 10000;
@@ -28,8 +33,12 @@ public static AndroidHttpClient getHttpClient() {
         return httpClient;
     }
 
-    public static void makeTrackingHttpRequest(final String url) {
-        final DownloadTask httpDownloadTask = new DownloadTask(new DownloadTask.DownloadTaskListener() {
+    public static void makeTrackingHttpRequest(final Iterable<String> urls) {
+        if (urls == null) {
+            return;
+        }
+
+        final DownloadTask.DownloadTaskListener downloadTaskListener = new DownloadTask.DownloadTaskListener() {
             @Override
             public void onComplete(final String url, final DownloadResponse downloadResponse) {
                 if (downloadResponse == null || downloadResponse.getStatusCode() != HttpStatus.SC_OK) {
@@ -40,18 +49,31 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
                 String result = HttpResponses.asResponseString(downloadResponse);
 
                 if (result != null) {
-                    MoPubLog.d("Successfully hit tracking endpoint:" + url);
+                    MoPubLog.d("Successfully hit tracking endpoint: " + url);
                 } else {
                     MoPubLog.d("Failed to hit tracking endpoint: " + url);
                 }
             }
-        });
+        };
 
-        try {
-            final HttpGet httpGet = new HttpGet(url);
-            httpDownloadTask.execute(httpGet);
-        } catch (Exception e) {
-            MoPubLog.d("Failed to hit tracking endpoint: " + url);
-        }
+        final Runnable trackingHttpRequestRunnable = new Runnable() {
+            @Override
+            public void run() {
+                for (final String url : urls) {
+                    try {
+                        final HttpGet httpGet = new HttpGet(url);
+                        AsyncTasks.safeExecuteOnExecutor(new DownloadTask(downloadTaskListener), httpGet);
+                    } catch (Exception e) {
+                        MoPubLog.d("Failed to hit tracking endpoint: " + url);
+                    }
+                }
+            }
+        };
+
+        new Handler(Looper.getMainLooper()).post(trackingHttpRequestRunnable);
+    }
+
+    public static void makeTrackingHttpRequest(final String url) {
+        makeTrackingHttpRequest(Arrays.asList(url));
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
index b47dc384..5bbc3f1b 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/MoPub.java
@@ -33,5 +33,5 @@
 package com.mopub.common;
 
 public class MoPub {
-    public static final String SDK_VERSION = "2.1";
+    public static final String SDK_VERSION = "2.2";
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
index 4ee8b4be..314549a2 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,6 +1,7 @@
 package com.mopub.common.util;
 
 import android.os.AsyncTask;
+import android.os.Looper;
 
 import java.util.concurrent.Executor;
 
@@ -13,11 +14,15 @@
      * Starting with ICS, default AsyncTask#execute behavior runs the tasks serially. This method
      * attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor, if possible.
      */
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) {
+    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) throws IllegalArgumentException, IllegalStateException {
         if (asyncTask == null) {
             throw new IllegalArgumentException("Unable to execute null AsyncTask.");
         }
 
+        if (Looper.myLooper() != Looper.getMainLooper()) {
+            throw new IllegalStateException("AsyncTask must be executed on the main thread");
+        }
+
         if (currentApiLevel().isAtLeast(ICE_CREAM_SANDWICH)) {
             try {
                 Executor threadPoolExecutor = (Executor) AsyncTask.class.getField("THREAD_POOL_EXECUTOR").get(AsyncTask.class);
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
similarity index 80%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java
rename to mopub-sdk/src/main/java/com/mopub/common/util/Json.java
index ba253aad..ed7075d1 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/Json.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Json.java
@@ -30,14 +30,16 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.json.JSONTokener;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 
 public class Json {
     public static Map<String, String> jsonStringToMap(String jsonParams) throws Exception {
@@ -99,4 +101,20 @@ public static String mapToJsonString(Map<String, String> map) {
         }
     }
 
+    public static <T> T getJsonValue(final JSONObject jsonObject, final String key, final Class<T> valueClass) {
+        if (jsonObject == null || key == null || valueClass == null) {
+            throw new IllegalArgumentException("Cannot pass any null argument to getJsonValue");
+        }
+
+        final Object object = jsonObject.opt(key);
+        if (object == null) {
+            MoPubLog.w("Tried to get Json value with key: " + key + ", but it was null");
+            return null;
+        } else if (!valueClass.isInstance(object)) {
+            MoPubLog.w("Tried to get Json value with key: " + key + ", of type: " + valueClass.toString() + ", its type did not match");
+            return null;
+        }
+
+        return valueClass.cast(object);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
index e3d41164..98d489a0 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/MoPubLog.java
@@ -20,4 +20,12 @@ public static int w(final String message) {
     public static int w(final String message, final Throwable throwable) {
         return Log.w(LOGTAG, message, throwable);
     }
+
+    public static int e(final String message) {
+        return MoPubLog.e(message, null);
+    }
+
+    public static int e(final String message, final Throwable throwable) {
+        return Log.e(LOGTAG, message, throwable);
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
new file mode 100644
index 00000000..773d49c3
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/Numbers.java
@@ -0,0 +1,19 @@
+package com.mopub.common.util;
+
+public class Numbers {
+    private Numbers() {}
+
+    public static Double parseDouble(final Object value) throws ClassCastException {
+        if (value instanceof Number) {
+            return ((Number) value).doubleValue();
+        } else if (value instanceof String) {
+            try {
+                return Double.valueOf((String) value);
+            } catch (NumberFormatException e) {
+                throw new ClassCastException("Unable to parse " + value + " as double.");
+            }
+        } else {
+            throw new ClassCastException("Unable to parse " + value + " as double.");
+        }
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
similarity index 98%
rename from mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java
rename to mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
index 1f1f5db8..2fe65112 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/ResponseHeader.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -30,7 +30,7 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 public enum ResponseHeader {
     AD_TIMEOUT("X-AdTimeout"),
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 4eaeb111..b4f163a4 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -38,6 +38,7 @@
 import android.net.Uri;
 import android.util.Log;
 import android.view.View;
+
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.util.Base64;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
index b04657ef..9160fe5d 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdConfiguration.java
@@ -36,10 +36,12 @@
 import android.os.Build;
 import android.provider.Settings;
 import android.webkit.WebView;
+
 import com.mopub.common.MoPub;
 import com.mopub.common.util.DateAndTime;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.VersionCode;
+
 import org.apache.http.HttpResponse;
 
 import java.io.*;
@@ -49,17 +51,17 @@
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractIntHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractIntegerHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.mobileads.util.ResponseHeader.FAIL_URL;
-import static com.mopub.mobileads.util.ResponseHeader.HEIGHT;
-import static com.mopub.mobileads.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.mobileads.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.mobileads.util.ResponseHeader.WIDTH;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
+import static com.mopub.common.util.ResponseHeader.FAIL_URL;
+import static com.mopub.common.util.ResponseHeader.HEIGHT;
+import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
+import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
+import static com.mopub.common.util.ResponseHeader.WIDTH;
 
 public class AdConfiguration implements Serializable {
     private static final long serialVersionUID = 0L;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
index 0077f8f3..e4893cbf 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetchTask.java
@@ -42,9 +42,9 @@
 import org.apache.http.conn.ClientConnectionManager;
 
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.USER_AGENT;
-import static com.mopub.mobileads.util.ResponseHeader.WARMUP;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.USER_AGENT;
+import static com.mopub.common.util.ResponseHeader.WARMUP;
 
 public class AdFetchTask extends AsyncTask<String, Void, AdLoadTask> {
     private TaskTracker mTaskTracker;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
index d43cf6f1..03c73101 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdFetcher.java
@@ -33,6 +33,7 @@
 package com.mopub.mobileads;
 
 import android.util.Log;
+
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.mobileads.factories.AdFetchTaskFactory;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
index 77b6c887..e01e7430 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdLoadTask.java
@@ -35,32 +35,35 @@
 import android.app.Activity;
 import android.net.Uri;
 import android.util.Log;
+
+import com.mopub.common.util.Json;
 import com.mopub.common.util.Strings;
-import com.mopub.mobileads.util.Json;
+
 import org.apache.http.Header;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 
-import java.io.*;
+import java.io.IOException;
 import java.lang.ref.WeakReference;
 import java.lang.reflect.Method;
-import java.util.*;
-
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
+import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
 import static com.mopub.mobileads.util.HttpResponses.extractBooleanHeader;
 import static com.mopub.mobileads.util.HttpResponses.extractHeader;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.mobileads.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
 
 abstract class AdLoadTask {
     WeakReference<AdViewController> mWeakAdViewController;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
index 882e0edb..3f78096b 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -42,9 +42,12 @@
 import android.view.Gravity;
 import android.view.View;
 import android.widget.FrameLayout;
+
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.mobileads.factories.AdFetcherFactory;
 import com.mopub.mobileads.factories.HttpClientFactory;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.DefaultHttpClient;
@@ -52,11 +55,8 @@
 import java.util.*;
 
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static com.mopub.common.GpsHelper.GpsHelperListener;
-import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
-import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfoIfNotCached;
-import static com.mopub.common.LocationService.LocationAwareness;
-import static com.mopub.common.LocationService.getLastKnownLocation;
+import static com.mopub.common.LocationService.*;
+import static com.mopub.common.GpsHelper.*;
 import static com.mopub.mobileads.MoPubView.DEFAULT_LOCATION_PRECISION;
 
 public class AdViewController {
@@ -84,12 +84,14 @@
 
     private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
     private boolean mAutoRefreshEnabled = true;
+    private boolean mPreviousAutoRefreshSetting = true;
     private String mKeywords;
     private Location mLocation;
     private LocationAwareness mLocationAwareness = LocationAwareness.NORMAL;
     private int mLocationPrecision = DEFAULT_LOCATION_PRECISION;
     private boolean mIsFacebookSupported = true;
     private boolean mIsTesting;
+    private boolean mAdWasLoaded;
 
     protected static void setShouldHonorServerDimensions(View view) {
         sViewShouldHonorServerDimensions.put(view, true);
@@ -126,6 +128,7 @@ public MoPubView getMoPubView() {
     }
 
     public void loadAd() {
+        mAdWasLoaded = true;
         if (mAdConfiguration.getAdUnitId() == null) {
             Log.d("MoPub", "Can't load an ad in this ad view because the ad unit ID is null. " +
                     "Did you forget to call setAdUnitId()?");
@@ -260,17 +263,33 @@ public boolean getAutorefreshEnabled() {
         return mAutoRefreshEnabled;
     }
 
-    public void setAutorefreshEnabled(boolean enabled) {
-        mAutoRefreshEnabled = enabled;
+    void pauseRefresh() {
+        mPreviousAutoRefreshSetting = mAutoRefreshEnabled;
+        setAutorefreshEnabled(false);
+    }
 
-        if (mAdConfiguration.getAdUnitId() != null) {
-            Log.d("MoPub", "Automatic refresh for " + mAdConfiguration + " set to: " + enabled + ".");
+    void unpauseRefresh() {
+        setAutorefreshEnabled(mPreviousAutoRefreshSetting);
+    }
 
+    void forceSetAutorefreshEnabled(boolean enabled) {
+        mPreviousAutoRefreshSetting = enabled;
+        setAutorefreshEnabled(enabled);
+    }
+
+    private void setAutorefreshEnabled(boolean enabled) {
+        final boolean autorefreshChanged = mAdWasLoaded && (mAutoRefreshEnabled != enabled);
+        if (autorefreshChanged) {
+            final String enabledString = (enabled) ? "enabled" : "disabled";
+            final String adUnitId = (mAdConfiguration != null) ? mAdConfiguration.getAdUnitId() : null;
+
+            MoPubLog.d("Refresh " + enabledString + " for ad unit (" + adUnitId + ").");
         }
 
-        if (mAutoRefreshEnabled) {
+        mAutoRefreshEnabled = enabled;
+        if (mAdWasLoaded && mAutoRefreshEnabled) {
             scheduleRefreshTimerIfEnabled();
-        } else {
+        } else if (!mAutoRefreshEnabled) {
             cancelRefreshTimer();
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index be3c3890..3b30f0c5 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -38,9 +38,9 @@
 import android.view.MotionEvent;
 import android.view.View;
 
+import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static com.mopub.common.util.VersionCode.currentApiLevel;
-import static com.mopub.mobileads.ViewGestureDetector.UserClickListener;
 
 public class BaseHtmlWebView extends BaseWebView implements UserClickListener {
     private final ViewGestureDetector mViewGestureDetector;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 75d0876c..9f0ea011 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -36,11 +36,13 @@
 import android.os.Handler;
 import android.util.Log;
 import android.view.View;
+
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.util.Json;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index b7cda1a4..4ef0f468 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -35,11 +35,13 @@
 import android.content.Context;
 import android.os.Handler;
 import android.util.Log;
+
+import com.mopub.common.util.Json;
 import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.util.Json;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
index 7ff2cf54..4288e162 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubBrowserController.java
@@ -37,6 +37,7 @@
 import android.content.Intent;
 import android.net.Uri;
 import android.util.Log;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.util.IntentUtils;
 import com.mopub.mobileads.util.Utils;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index e20c5191..012ddcbb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -35,10 +35,12 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.util.Log;
+
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.mobileads.factories.HttpClientFactory;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.HttpStatus;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 5825e232..85df9c9a 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -37,15 +37,14 @@
 import android.location.Location;
 import android.util.Log;
 
-import com.mopub.common.LocationService;
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 
 import java.util.*;
 
 import static com.mopub.common.LocationService.*;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
index e09aa86e..a9e887de 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -44,7 +44,6 @@
 import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
 
-import com.mopub.common.LocationService;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.factories.AdViewControllerFactory;
 import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
@@ -53,8 +52,8 @@
 
 import static com.mopub.common.LocationService.*;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 
 public class MoPubView extends FrameLayout {
 
@@ -78,8 +77,7 @@
     private BroadcastReceiver mScreenStateReceiver;
     private boolean mIsInForeground;
     private LocationAwareness mLocationAwareness;
-    private boolean mPreviousAutorefreshSetting = false;
-    
+
     private BannerAdListener mBannerAdListener;
     
     private OnAdWillLoadListener mOnAdWillLoadListener;
@@ -122,34 +120,23 @@ public MoPubView(Context context, AttributeSet attrs) {
     }
 
     private void registerScreenStateBroadcastReceiver() {
-        if (mAdViewController == null) return;
-
         mScreenStateReceiver = new BroadcastReceiver() {
-            public void onReceive(Context context, Intent intent) {
-                if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {
-                    if (mIsInForeground) {
-                        Log.d("MoPub", "Screen sleep with ad in foreground, disable refresh");
-                        if (mAdViewController != null) {
-                            mPreviousAutorefreshSetting = mAdViewController.getAutorefreshEnabled();
-                            mAdViewController.setAutorefreshEnabled(false);
-                        }
-                    } else {
-                        Log.d("MoPub", "Screen sleep but ad in background; " +
-                                "refresh should already be disabled");
-                    }
-                } else if (intent.getAction().equals(Intent.ACTION_USER_PRESENT)) {
-                    if (mIsInForeground) {
-                        Log.d("MoPub", "Screen wake / ad in foreground, reset refresh");
-                        if (mAdViewController != null) {
-                            mAdViewController.setAutorefreshEnabled(mPreviousAutorefreshSetting);
-                        }
-                    } else {
-                        Log.d("MoPub", "Screen wake but ad in background; don't enable refresh");
-                    }
+            public void onReceive(final Context context, final Intent intent) {
+                if (!mIsInForeground || intent == null) {
+                    return;
+                }
+
+                final String action = intent.getAction();
+
+                if (Intent.ACTION_USER_PRESENT.equals(action)) {
+                    setAdVisibility(true);
+                } else if (Intent.ACTION_SCREEN_OFF.equals(action)) {
+                    setAdVisibility(false);
                 }
             }
         };
-        IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
+
+        final IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
         filter.addAction(Intent.ACTION_USER_PRESENT);
         mContext.registerReceiver(mScreenStateReceiver, filter);
     }
@@ -229,17 +216,21 @@ protected void trackNativeImpression() {
 
     @Override
     protected void onWindowVisibilityChanged(int visibility) {
-        if (mAdViewController == null) return;
+        final boolean isVisible = (visibility == VISIBLE);
 
-        if (visibility == VISIBLE) {
-            Log.d("MoPub", "Ad Unit ("+ mAdViewController.getAdUnitId()+") going visible: enabling refresh");
-            mIsInForeground = true;
-            mAdViewController.setAutorefreshEnabled(true);
+        mIsInForeground = isVisible;
+        setAdVisibility(isVisible);
+    }
+
+    private void setAdVisibility(boolean isVisible) {
+        if (mAdViewController == null) {
+            return;
         }
-        else {
-            Log.d("MoPub", "Ad Unit ("+ mAdViewController.getAdUnitId()+") going invisible: disabling refresh");
-            mIsInForeground = false;
-            mAdViewController.setAutorefreshEnabled(false);
+
+        if (isVisible) {
+            mAdViewController.unpauseRefresh();
+        } else {
+            mAdViewController.pauseRefresh();
         }
     }
 
@@ -388,7 +379,9 @@ public void setLocalExtras(Map<String, Object> localExtras) {
     }
 
     public void setAutorefreshEnabled(boolean enabled) {
-        if (mAdViewController != null) mAdViewController.setAutorefreshEnabled(enabled);
+        if (mAdViewController != null) {
+            mAdViewController.forceSetAutorefreshEnabled(enabled);
+        }
     }
 
     public boolean getAutorefreshEnabled() {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
index 4a3a8396..0e4fe95f 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidDisplayController.java
@@ -65,6 +65,7 @@
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.Toast;
+
 import com.mopub.common.util.Streams;
 import com.mopub.mobileads.MraidView.ExpansionStyle;
 import com.mopub.mobileads.MraidView.NativeCloseButtonStyle;
@@ -73,6 +74,7 @@
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.util.HttpResponses;
 import com.mopub.mobileads.util.Mraids;
+
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -84,8 +86,6 @@
 import java.text.SimpleDateFormat;
 import java.util.*;
 
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.CREATE_CALENDAR_EVENT;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.EXPAND;
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.GET_CURRENT_POSITION;
@@ -95,13 +95,15 @@
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
 import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
 import static com.mopub.mobileads.MraidView.BaseMraidListener;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
+import static com.mopub.common.util.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
 import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
 import static com.mopub.mobileads.util.Mraids.isCalendarAvailable;
 import static com.mopub.mobileads.util.Mraids.isInlineVideoAvailable;
 import static com.mopub.mobileads.util.Mraids.isSmsAvailable;
 import static com.mopub.mobileads.util.Mraids.isStorePictureSupported;
 import static com.mopub.mobileads.util.Mraids.isTelAvailable;
-import static com.mopub.mobileads.util.ResponseHeader.LOCATION;
+import static com.mopub.common.util.ResponseHeader.LOCATION;
 
 class MraidDisplayController extends MraidAbstractController {
     private static final String LOGTAG = "MraidDisplayController";
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index f51ef860..9f246b71 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -40,6 +40,7 @@
 import android.view.View;
 import android.view.Window;
 import android.view.WindowManager;
+
 import com.mopub.common.util.IntentUtils;
 
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
index d3ae5d41..67582d38 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidVideoViewController.java
@@ -40,7 +40,9 @@
 import android.widget.ImageButton;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.util.Dips;
+import com.mopub.common.util.Drawables;
 
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
index 3922a464..f5e94874 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MraidView.java
@@ -42,9 +42,11 @@
 import android.view.View;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
+
 import com.mopub.common.util.Strings;
 import com.mopub.mobileads.factories.HttpClientFactory;
 import com.mopub.mobileads.resource.MraidJavascript;
+
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.NameValuePair;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index aae90c9f..717b5ab2 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -43,13 +43,13 @@
 import android.media.MediaPlayer;
 import android.os.Bundle;
 import android.os.Handler;
-import android.util.Log;
 import android.view.Gravity;
 import android.view.MotionEvent;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
 import android.widget.VideoView;
+
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.HttpResponses;
@@ -57,19 +57,25 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.VersionCode;
-import com.mopub.mobileads.util.HttpUtils;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 
-import java.io.*;
-import java.util.*;
-import java.util.concurrent.*;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.Serializable;
+import java.util.List;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;
+import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_SHOW;
 
@@ -156,7 +162,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 
         mCompanionAdImageView = createCompanionAdImageView(context);
 
-        pingOnBackgroundThread(mVastVideoConfiguration.getImpressionTrackers());
+        makeTrackingHttpRequest(mVastVideoConfiguration.getImpressionTrackers());
 
         mVideoProgressCheckerRunnable = createVideoProgressCheckerRunnable();
     }
@@ -252,8 +258,8 @@ private void downloadCompanionAd() {
                 final HttpGet httpGet = new HttpGet(mVastCompanionAd.getImageUrl());
                 DownloadTask downloadTask = new DownloadTask(this);
                 AsyncTasks.safeExecuteOnExecutor(downloadTask, httpGet);
-            } catch (IllegalArgumentException e) {
-                // malformed url, don't download optional companion ad
+            } catch (Exception e) {
+                MoPubLog.d("Failed to download companion ad", e);
             }
         }
     }
@@ -270,22 +276,22 @@ public void run() {
 
                     if (!mIsStartMarkHit && currentPosition >= 1000) {
                         mIsStartMarkHit = true;
-                        pingOnBackgroundThread(mVastVideoConfiguration.getStartTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getStartTrackers());
                     }
 
                     if (!mIsFirstMarkHit && progressPercentage > FIRST_QUARTER_MARKER) {
                         mIsFirstMarkHit = true;
-                        pingOnBackgroundThread(mVastVideoConfiguration.getFirstQuartileTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getFirstQuartileTrackers());
                     }
 
                     if (!mIsSecondMarkHit && progressPercentage > MID_POINT_MARKER) {
                         mIsSecondMarkHit = true;
-                        pingOnBackgroundThread(mVastVideoConfiguration.getMidpointTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getMidpointTrackers());
                     }
 
                     if (!mIsThirdMarkHit && progressPercentage > THIRD_QUARTER_MARKER) {
                         mIsThirdMarkHit = true;
-                        pingOnBackgroundThread(mVastVideoConfiguration.getThirdQuartileTrackers());
+                        makeTrackingHttpRequest(mVastVideoConfiguration.getThirdQuartileTrackers());
                     }
 
                     if (isLongVideo(mVideoView.getDuration()) ) {
@@ -353,7 +359,7 @@ public void onCompletion(MediaPlayer mp) {
 
                 videoCompleted(false);
 
-                pingOnBackgroundThread(mVastVideoConfiguration.getCompleteTrackers());
+                makeTrackingHttpRequest(mVastVideoConfiguration.getCompleteTrackers());
                 mIsVideoFinishedPlaying = true;
 
                 videoView.setVisibility(View.GONE);
@@ -444,7 +450,7 @@ private ImageView createCompanionAdImageView(final Context context) {
     }
 
     private void handleClick(final List<String> clickThroughTrackers, final String clickThroughUrl) {
-        pingOnBackgroundThread(clickThroughTrackers);
+        makeTrackingHttpRequest(clickThroughTrackers);
 
         videoClicked();
 
@@ -472,25 +478,6 @@ private boolean shouldAllowClickThrough() {
         return mShowCloseButtonEventFired;
     }
 
-    private void pingOnBackgroundThread(List<String> urls) {
-        if (urls == null) {
-            return;
-        }
-
-        for (final String url : urls) {
-            sThreadPoolExecutor.execute(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        HttpUtils.ping(url);
-                    } catch (Exception e) {
-                        Log.d("MoPub", "Unable to track video impression url: " + url);
-                    }
-                }
-            });
-        }
-    }
-
     private void startProgressChecker() {
         if (!mIsVideoProgressShouldBeChecked) {
             mIsVideoProgressShouldBeChecked = true;
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index 73271ecb..3b128491 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -162,7 +162,7 @@
             "\n" +
             "  // Constants. ////////////////////////////////////////////////////////////////////////////////////\n" +
             "\n" +
-            "  var VERSION = mraid.VERSION = '2.0';\n" +
+            "  var VERSION = mraid.VERSION = '1.0';\n" +
             "\n" +
             "  var STATES = mraid.STATES = {\n" +
             "    LOADING: 'loading',     // Initial state.\n" +
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
index fdeb62f4..b5802fd3 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpResponses.java
@@ -32,6 +32,8 @@
 
 package com.mopub.mobileads.util;
 
+import com.mopub.common.util.ResponseHeader;
+
 import org.apache.http.Header;
 import org.apache.http.HttpResponse;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java
deleted file mode 100644
index 87e647ea..00000000
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/HttpUtils.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.factories.HttpClientFactory;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
-
-import java.io.*;
-
-public class HttpUtils {
-
-    public static HttpResponse ping(String url) throws IOException, IllegalArgumentException {
-        if (url == null) {
-            throw new IllegalArgumentException("Url must not be null.");
-        }
-
-        HttpGet request = new HttpGet(url);
-        DefaultHttpClient defaultHttpClient = HttpClientFactory.create();
-        return defaultHttpClient.execute(request);
-    }
-}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
index c6cced92..b3fa2bcb 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastManager.java
@@ -3,11 +3,16 @@
 import android.content.Context;
 import android.view.Display;
 import android.view.WindowManager;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.util.AsyncTasks;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.mobileads.VastVideoDownloadTask;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.List;
 
 import static com.mopub.mobileads.VastVideoDownloadTask.VastVideoDownloadTaskListener;
 import static com.mopub.mobileads.util.vast.VastXmlManagerAggregator.VastXmlManagerAggregatorListener;
@@ -38,7 +43,16 @@ public void prepareVastVideoConfiguration(final String vastXml, final VastManage
         if (mVastXmlManagerAggregator == null) {
             mVastManagerListener = vastManagerListener;
             mVastXmlManagerAggregator = new VastXmlManagerAggregator(this);
-            AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
+
+            try {
+                AsyncTasks.safeExecuteOnExecutor(mVastXmlManagerAggregator, vastXml);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to aggregate vast xml", e);
+
+                if (mVastManagerListener != null) {
+                    mVastManagerListener.onVastVideoConfigurationPrepared(null);
+                }
+            }
         }
     }
 
@@ -86,10 +100,18 @@ public void onComplete(boolean success) {
                 }
         );
 
-        AsyncTasks.safeExecuteOnExecutor(
-                vastVideoDownloadTask,
-                vastVideoConfiguration.getNetworkMediaFileUrl()
-        );
+        try {
+            AsyncTasks.safeExecuteOnExecutor(
+                    vastVideoDownloadTask,
+                    vastVideoConfiguration.getNetworkMediaFileUrl()
+            );
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download vast video", e);
+
+            if (mVastManagerListener != null) {
+                mVastManagerListener.onVastVideoConfigurationPrepared(null);
+            }
+        }
     }
 
     private boolean updateDiskMediaFileUrl(final VastVideoConfiguration vastVideoConfiguration) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
index 8b098a7d..86748f05 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/util/vast/VastXmlManager.java
@@ -6,11 +6,15 @@
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
 
+import java.io.IOException;
+import java.io.StringReader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.parsers.ParserConfigurationException;
-import java.io.*;
-import java.util.*;
 
 class VastXmlManager {
     private static final String ROOT_TAG = "MPMoVideoXMLDocRoot";
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
index d735504e..ac8de165 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,39 +1,55 @@
 package com.mopub.nativeads;
 
+import android.app.Activity;
 import android.content.Context;
 import android.view.View;
 import android.view.ViewGroup;
 
+import com.mopub.common.util.MoPubLog;
+
+import java.lang.ref.WeakReference;
+
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 
 public final class AdapterHelper {
-    private final Context mContext;
+    private final WeakReference<Activity> mActivity;
+    private final Context mApplicationContext;
     private final int mStart;
     private final int mInterval;
 
     public AdapterHelper(final Context context, final int start, final int interval) throws IllegalArgumentException {
         if (context == null) {
-            throw new IllegalArgumentException("Illegal argument: context was null.");
+            throw new IllegalArgumentException("Illegal argument: Context was null.");
+        } else if (!(context instanceof Activity)) {
+            throw new IllegalArgumentException("Illegal argument: Context must be instance of Activity.");
         } else if (start < 0) {
             throw new IllegalArgumentException("Illegal argument: negative starting position.");
         } else if (interval < 2) {
             throw new IllegalArgumentException("Illegal argument: interval must be at least 2.");
         }
 
-        mContext = context.getApplicationContext();
+        mActivity = new WeakReference<Activity>((Activity) context);
+        mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
     }
 
     public View getAdView(final View convertView,
-                          final ViewGroup parent,
-                          final NativeResponse nativeResponse,
-                          final ViewBinder viewBinder,
-                          final MoPubNativeListener moPubNativeListener) {
+            final ViewGroup parent,
+            final NativeResponse nativeResponse,
+            final ViewBinder viewBinder,
+            final MoPubNativeListener moPubNativeListener) {
+        final Activity activity = mActivity.get();
+        if (activity == null) {
+            MoPubLog.d("Weak reference to Activity Context in AdapterHelper became null. " +
+                    "Returning empty view.");
+            return new View(mApplicationContext);
+        }
+
         return NativeAdViewHelper.getAdView(
                 convertView,
                 parent,
-                mContext,
+                activity,
                 nativeResponse,
                 viewBinder,
                 moPubNativeListener
@@ -87,4 +103,10 @@ private int numberOfAdsThatCouldFitWithContent(final int contentRowCount) {
             return (int) Math.floor((double) (contentRowCount - mStart) / spacesBetweenAds) + 1;
         }
     }
+
+    // Testing
+    @Deprecated
+    void clearActivityContext() {
+        mActivity.clear();
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
new file mode 100644
index 00000000..a7acfe06
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/BaseForwardingNativeAd.java
@@ -0,0 +1,234 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+import com.mopub.common.util.MoPubLog;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+abstract class BaseForwardingNativeAd implements NativeAdInterface {
+    private static final int IMPRESSION_MIN_PERCENTAGE_VIEWED = 50;
+    static final double MIN_STAR_RATING = 0;
+    static final double MAX_STAR_RATING = 5;
+
+    // Basic fields
+    private String mMainImageUrl;
+    private String mIconImageUrl;
+    private String mClickDestinationUrl;
+    private String mCallToAction;
+    private String mTitle;
+    private String mText;
+    private Double mStarRating;
+
+    // Impression logistics
+    private final Set<String> mImpressionTrackers;
+    private int mImpressionMinTimeViewed;
+
+    // Extras
+    private final Map<String, Object> mExtras;
+
+    BaseForwardingNativeAd() {
+        mImpressionMinTimeViewed = 1000;
+
+        mImpressionTrackers = new HashSet<String>();
+        mExtras = new HashMap<String, Object>();
+    }
+
+    // Getters
+    /**
+     * Returns the String url corresponding to the ad's main image.
+     */
+    @Override
+    final public String getMainImageUrl() {
+        return mMainImageUrl;
+    }
+
+    /**
+     * Returns the String url corresponding to the ad's icon image.
+     */
+    @Override
+    final public String getIconImageUrl() {
+        return mIconImageUrl;
+    }
+
+    /**
+     * Returns a Set<String> of all impression trackers associated with this native ad. Note that
+     * network requests will automatically be made to each of these impression trackers when the
+     * native ad is display on screen. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed}
+     * and {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for relevant
+     * impression-tracking parameters.
+     */
+    @Override
+    final public Set<String> getImpressionTrackers() {
+        return new HashSet<String>(mImpressionTrackers);
+    }
+
+    /**
+     * Returns the String url that the device will attempt to resolve when the ad is clicked.
+     */
+    @Override
+    final public String getClickDestinationUrl() {
+        return mClickDestinationUrl;
+    }
+
+    /**
+     * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
+     */
+    @Override
+    final public String getCallToAction() {
+        return mCallToAction;
+    }
+
+    /**
+     * Returns the String corresponding to the ad's title.
+     */
+    @Override
+    final public String getTitle() {
+        return mTitle;
+    }
+
+    /**
+     * Returns the String corresponding to the ad's body text.
+     */
+    @Override
+    final public String getText() {
+        return mText;
+    }
+
+    /**
+     * For app install ads, this returns the associated star rating (on a 5 star scale) for the
+     * advertised app. Note that this method may return null if the star rating was either never set
+     * or invalid.
+     */
+    @Override
+    final public Double getStarRating() {
+        return mStarRating;
+    }
+
+    /**
+     * Returns the minimum viewable percentage of the ad that must be onscreen for it to be
+     * considered visible. See {@link BaseForwardingNativeAd#getImpressionMinTimeViewed()} for
+     * additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinPercentageViewed() {
+        return IMPRESSION_MIN_PERCENTAGE_VIEWED;
+    }
+
+    /**
+     * Returns the minimum amount of time (in milliseconds) the ad that must be onscreen before an
+     * impression is recorded. See {@link BaseForwardingNativeAd#getImpressionMinPercentageViewed()}
+     * for additional impression tracking considerations.
+     */
+    @Override
+    final public int getImpressionMinTimeViewed() {
+        return mImpressionMinTimeViewed;
+    }
+
+    // Extras Getters
+    /**
+     * Given a particular String key, return the associated Object value from the ad's extras map.
+     * See {@link BaseForwardingNativeAd#getExtras()} for more information.
+     */
+    @Override
+    final public Object getExtra(final String key) {
+        return mExtras.get(key);
+    }
+
+    @Override
+    /**
+     * Returns a copy of the extras map, reflecting additional ad content not reflected in any
+     * of the above hardcoded setters. This is particularly useful for passing down custom fields
+     * with MoPub's direct-sold native ads or from mediated networks that pass back additional
+     * fields.
+     */
+    final public Map<String, Object> getExtras() {
+        return new HashMap<String, Object>(mExtras);
+    }
+
+    // Setters
+    final void setMainImageUrl(final String mainImageUrl) {
+        mMainImageUrl = mainImageUrl;
+    }
+
+    final void setIconImageUrl(final String iconImageUrl) {
+        mIconImageUrl = iconImageUrl;
+    }
+
+    final void setClickDestinationUrl(final String clickDestinationUrl) {
+        mClickDestinationUrl = clickDestinationUrl;
+    }
+
+    final void setCallToAction(final String callToAction) {
+        mCallToAction = callToAction;
+    }
+
+    final void setTitle(final String title) {
+        mTitle = title;
+    }
+
+    final void setText(final String text) {
+        mText = text;
+    }
+
+    final void setStarRating(final Double starRating) {
+        if (starRating == null) {
+            mStarRating = null;
+        } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
+            mStarRating = starRating;
+        } else {
+            MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
+                    + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
+        }
+    }
+
+    final void addExtra(final String key, final Object value) {
+        mExtras.put(key, value);
+    }
+
+    final void addImpressionTracker(final String url) {
+        mImpressionTrackers.add(url);
+    }
+
+    final void setImpressionMinTimeViewed(final int impressionMinTimeViewed) {
+        if (impressionMinTimeViewed >= 0) {
+            mImpressionMinTimeViewed = impressionMinTimeViewed;
+        }
+    }
+
+    // Event Handlers
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to prepare state for recording an impression before a view is rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void prepareImpression(final View view) { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to explicitly record an impression of a view rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void recordImpression() { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to explicitly handle click events of views rendered to screen.
+     * This method is optional.
+     */
+    @Override
+    public void handleClick(final View view) { }
+
+    /**
+     * Your base native ad subclass should implement this method if the network requires the developer
+     * to destroy or cleanup their native ad when they are finished with it.
+     * This method is optional.
+     */
+    @Override
+    public void destroy() { }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
new file mode 100644
index 00000000..7df5da09
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -0,0 +1,87 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+
+import java.util.List;
+import java.util.Map;
+
+/**
+ * CustomEventNative is a base class for custom events that support native ads. By implementing
+ * subclasses of CustomEventNative, you can enable the MoPub SDK to support a wider
+ * variety of third-party ad networks, or execute any of your application code on demand.
+ *
+ * At runtime, the MoPub SDK will find and instantiate a CustomEventNative subclass as needed
+ * and invoke its loadNativeAd() method.
+ */
+public abstract class CustomEventNative {
+    /**
+     * When the MoPub SDK receives a response indicating it should load a custom event, it will send
+     * this message to your custom event class. Your implementation of this method can either load
+     * a native ad from a third-party ad network, or execute any application code. It must also
+     * notify the provided CustomEventNativeListener Object of certain lifecycle events.
+     *
+     * The localExtras parameter is a Map containing additional custom data that is set within
+     * your application by calling MoPubNative.setLocalExtras(Map<String, Object>). Note that the
+     * localExtras Map is a copy of the Map supplied to setLocalExtras().
+     *
+     * The serverExtras parameter is a Map containing additional custom data configurable on the
+     * MoPub website that you want to associate with a given custom event request. This data may be
+     * used to pass dynamic information, such as publisher IDs, without changes in application code.
+     */
+    protected abstract void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras);
+
+    /**
+     * Pre caches the given set of image urls. We recommend using this method to warm the image
+     * cache before calling {@link CustomEventNativeListener#onNativeAdLoaded}. Doing so will
+     * force images to cache before displaying the ad.
+     */
+    final void preCacheImages(final Context context,
+            final List<String> imageUrls,
+            final ImageListener imageListener) {
+        ImageService.get(context, imageUrls, new ImageService.ImageServiceListener() {
+            @Override
+            public void onSuccess(final Map<String, Bitmap> bitmaps) {
+                imageListener.onImagesCached();
+            }
+
+            @Override
+            public void onFail() {
+                imageListener.onImagesFailedToCache(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+            }
+        });
+    }
+
+    public interface ImageListener {
+        /**
+         * Called when images are successfully cached. If you haven't already called
+         * {@link CustomEventNativeListener#onNativeAdLoaded}, you should typically do so now.
+         */
+        void onImagesCached();
+
+        /**
+         * Called when images failed to cache. You should typically call
+         * {@link CustomEventNativeListener#onNativeAdFailed} from this callback.
+         */
+        void onImagesFailedToCache(NativeErrorCode errorCode);
+    }
+
+    public interface CustomEventNativeListener {
+        /**
+         * Your custom event subclass must call this method when it successfully loads a native ad.
+         * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
+         * stall.
+         */
+        void onNativeAdLoaded(NativeAdInterface nativeAd);
+
+        /**
+         * Your custom event subclass must call this method when it fails to load a native ad.
+         * Failure to do so will disrupt the mediation waterfall and cause future ad requests to
+         * stall.
+         */
+        void onNativeAdFailed(NativeErrorCode errorCode);
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
new file mode 100644
index 00000000..3aab114d
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -0,0 +1,54 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.HttpResponses;
+import com.mopub.common.util.Json;
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+
+import java.util.HashMap;
+import java.util.Map;
+
+final class CustomEventNativeAdapter {
+    private CustomEventNativeAdapter() {}
+
+    static final String RESPONSE_BODY_KEY = "response_body_key";
+
+    public static void loadNativeAd(final Context context,
+            final Map<String, Object> localExtras,
+            final DownloadResponse downloadResponse,
+            final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+
+        final String customEventNativeData = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_DATA);
+        final String customEventNativeClassName = downloadResponse.getFirstHeader(ResponseHeader.CUSTOM_EVENT_NAME);
+
+        final CustomEventNative customEventNative;
+        try {
+            customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
+        } catch (Exception e) {
+            MoPubLog.w("Failed to load Custom Event Native class: " + customEventNativeClassName);
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            return;
+        }
+
+        Map<String, String> serverExtras = new HashMap<String, String>();
+        // Attempt to load the JSON extras into mServerExtras.
+        try {
+            serverExtras = Json.jsonStringToMap(customEventNativeData);
+        } catch (Exception e) {
+            MoPubLog.w("Failed to create Map from JSON: " + customEventNativeData, e);
+        }
+
+        serverExtras.put(RESPONSE_BODY_KEY, HttpResponses.asResponseString(downloadResponse));
+
+        customEventNative.loadNativeAd(
+                context,
+                customEventNativeListener,
+                localExtras,
+                serverExtras
+        );
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
index 625563a7..2f678f7f 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDiskTaskManager.java
@@ -1,9 +1,10 @@
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
+
 import com.mopub.common.CacheService;
 
-import java.util.*;
+import java.util.List;
 
 import static com.mopub.common.CacheService.DiskLruCacheGetListener;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
index 789334c6..d10574b5 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageDownloadTaskManager.java
@@ -46,7 +46,13 @@ void execute() {
             final HttpUriRequest httpUriRequest = entry.getKey();
             final DownloadTask downloadTask = entry.getValue();
 
-            AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
+            try {
+                AsyncTasks.safeExecuteOnExecutor(downloadTask, httpUriRequest);
+            } catch (Exception e) {
+                MoPubLog.d("Failed to download image", e);
+
+                mImageTaskManagerListener.onFail();
+            }
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
index f016680d..6276a80c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImageService.java
@@ -4,8 +4,8 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 
-import com.mopub.common.util.MoPubLog;
 import com.mopub.common.CacheService;
+import com.mopub.common.util.MoPubLog;
 import com.mopub.common.util.Streams;
 
 import java.io.ByteArrayOutputStream;
@@ -69,7 +69,7 @@ static void putBitmapInCache(final String key, final Bitmap bitmap) {
     static List<String> getBitmapsFromMemoryCache(final List<String> urls, final Map<String, Bitmap> hits) {
         final List<String> cacheMisses = new ArrayList<String>();
         for (final String url : urls) {
-            Bitmap bitmap = getBitmapFromMemoryCache(url);
+            final Bitmap bitmap = getBitmapFromMemoryCache(url);
 
             if (bitmap != null) {
                 hits.put(url, bitmap);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
index def9a9ca..8e2da415 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/ImpressionTrackingManager.java
@@ -13,14 +13,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 
-import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
-import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-
 class ImpressionTrackingManager {
     private static final int PERIOD = 250;
 
     private static WeakHashMap<View, NativeResponseWrapper> sKeptViews = new WeakHashMap<View, NativeResponseWrapper>(10);
-
     private static final ScheduledExecutorService sScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();
     private static final VisibilityCheck sVisibilityCheck = new VisibilityCheck();
     private static AtomicBoolean mIsStarted = new AtomicBoolean(false);
@@ -42,10 +38,14 @@ static void stop() {
         }
     }
 
-    static void addView(final View view, final NativeResponse nativeResponse, final MoPubNativeListener moPubNativeListener) {
-        if (view != null && nativeResponse != null) {
-            sKeptViews.put(view, new NativeResponseWrapper(nativeResponse, moPubNativeListener));
+    static void addView(final View view, final NativeResponse nativeResponse) {
+        if (view == null || nativeResponse == null) {
+            return;
         }
+        sKeptViews.put(
+                view,
+                new NativeResponseWrapper(nativeResponse)
+        );
     }
 
     static void removeView(final View view) {
@@ -53,9 +53,6 @@ static void removeView(final View view) {
     }
 
     static class VisibilityCheck implements Runnable {
-        private static final double MINIMUM_PERCENT_VISIBLE = 50;
-        private static final long MINIMUM_IMPRESSION_TIME = 1000;
-
         @Override
         public void run() {
             final Iterator<Map.Entry<View, NativeResponseWrapper>> entryIterator = sKeptViews.entrySet().iterator();
@@ -63,10 +60,10 @@ public void run() {
             while (entryIterator.hasNext()) {
                 final Map.Entry<View, NativeResponseWrapper> entry = entryIterator.next();
                 final View view = entry.getKey();
-                final NativeResponseWrapper wrapper = entry.getValue();
+                final NativeResponseWrapper nativeResponseWrapper = entry.getValue();
 
                 // if our wrapper or its response is null, skip
-                if (wrapper == null || wrapper.mNativeResponse == null) {
+                if (nativeResponseWrapper == null || nativeResponseWrapper.mNativeResponse == null) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -75,7 +72,7 @@ public void run() {
                     continue;
                 }
 
-                if (wrapper.mNativeResponse.isDestroyed()) {
+                if (nativeResponseWrapper.mNativeResponse.isDestroyed()) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -85,7 +82,7 @@ public void run() {
                 }
 
                 // if this response has already recorded an impression, skip
-                if (wrapper.mNativeResponse.getRecordedImpression()) {
+                if (nativeResponseWrapper.mNativeResponse.getRecordedImpression()) {
                     try {
                         entryIterator.remove();
                     } catch (ConcurrentModificationException e) {
@@ -95,72 +92,60 @@ public void run() {
                 }
 
                 // if the view is not sufficiently visible, reset the visible timestamp, and skip
-                if (!isVisible(view)) {
-                    wrapper.mFirstVisibleTimestamp = 0;
+                if (!isVisible(view, nativeResponseWrapper)) {
+                    nativeResponseWrapper.mFirstVisibleTimestamp = 0;
                     continue;
                 }
 
                 // if it just became visible, set the firstChecked timestamp, and skip
-                if (wrapper.mFirstVisibleTimestamp == 0) {
-                    wrapper.mFirstVisibleTimestamp = SystemClock.uptimeMillis();
+                if (nativeResponseWrapper.mFirstVisibleTimestamp == 0) {
+                    nativeResponseWrapper.mFirstVisibleTimestamp = SystemClock.uptimeMillis();
                     continue;
                 }
 
                 // if not enough time has elapsed, skip
-                if (SystemClock.uptimeMillis() - wrapper.mFirstVisibleTimestamp < MINIMUM_IMPRESSION_TIME) {
+                if (SystemClock.uptimeMillis() - nativeResponseWrapper.mFirstVisibleTimestamp < nativeResponseWrapper.mNativeResponse.getImpressionMinTimeViewed()) {
                     continue;
                 }
 
                 // otherwise, record an impression
-                wrapper.mNativeResponse.recordImpression();
-
-                // Fire and forget impression trackers
-                for (final String impressionTracker : wrapper.mNativeResponse.getImpressionTrackers()) {
-                    makeTrackingHttpRequest(impressionTracker);
-                }
+                nativeResponseWrapper.mNativeResponse.recordImpression(view);
 
-                // Notify the developer
-                if (wrapper.mMoPubNativeListener != null) {
-                    wrapper.mMoPubNativeListener.onNativeImpression(view);
-                    try {
-                        entryIterator.remove();
-                    } catch (ConcurrentModificationException e) {
-                        // continue
-                    }
+                try {
+                    entryIterator.remove();
+                } catch (ConcurrentModificationException e) {
+                    // continue
                 }
             }
         }
 
-        static boolean isVisible(final View view) {
-            if (view == null || view.getVisibility() != View.VISIBLE) {
+        static boolean isVisible(final View view, final NativeResponseWrapper nativeResponseWrapper) {
+            if (view == null || nativeResponseWrapper == null || view.getVisibility() != View.VISIBLE) {
                 return false;
             }
 
             final Rect visibleRect = new Rect();
             view.getGlobalVisibleRect(visibleRect);
 
-            int visibleViewArea = visibleRect.width() * visibleRect.height();
-            int totalViewArea = view.getWidth() * view.getHeight();
+            final int visibleViewArea = visibleRect.width() * visibleRect.height();
+            final int totalViewArea = view.getWidth() * view.getHeight();
 
             if (totalViewArea <= 0) {
                 return false;
             }
 
-            double visiblePercent = 100 * visibleViewArea / totalViewArea;
+            final double visiblePercent = 100 * visibleViewArea / totalViewArea;
 
-            return visiblePercent >= MINIMUM_PERCENT_VISIBLE;
+            return visiblePercent >= nativeResponseWrapper.mNativeResponse.getImpressionMinPercentageViewed();
         }
     }
 
     static class NativeResponseWrapper {
         final NativeResponse mNativeResponse;
-        final MoPubNativeListener mMoPubNativeListener;
         long mFirstVisibleTimestamp;
 
-        NativeResponseWrapper(final NativeResponse nativeResponse,
-                final MoPubNativeListener moPubNativeListener) {
+        NativeResponseWrapper(final NativeResponse nativeResponse) {
             mNativeResponse = nativeResponse;
-            mMoPubNativeListener = moPubNativeListener;
             mFirstVisibleTimestamp = 0;
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
new file mode 100644
index 00000000..a7f43959
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -0,0 +1,182 @@
+package com.mopub.nativeads;
+
+import android.content.Context;
+
+import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.Numbers;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static com.mopub.common.util.Numbers.parseDouble;
+import static com.mopub.nativeads.CustomEventNativeAdapter.RESPONSE_BODY_KEY;
+import static com.mopub.nativeads.NativeResponse.Parameter;
+
+public class MoPubCustomEventNative extends CustomEventNative {
+    @Override
+    protected void loadNativeAd(final Context context,
+            final CustomEventNativeListener customEventNativeListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+
+        final MoPubForwardingNativeAd moPubForwardingNativeAd;
+        try {
+            moPubForwardingNativeAd = new MoPubForwardingNativeAd(serverExtras.get(RESPONSE_BODY_KEY));
+        } catch (IllegalArgumentException e) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+            return;
+        } catch (JSONException e) {
+            customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+            return;
+        }
+        preCacheImages(context, moPubForwardingNativeAd.getAllImageUrls(), new ImageListener() {
+            @Override
+            public void onImagesCached() {
+                customEventNativeListener.onNativeAdLoaded(moPubForwardingNativeAd);
+            }
+
+            @Override
+            public void onImagesFailedToCache(NativeErrorCode errorCode) {
+                customEventNativeListener.onNativeAdFailed(errorCode);
+            }
+        });
+    }
+
+    static class MoPubForwardingNativeAd extends BaseForwardingNativeAd {
+        MoPubForwardingNativeAd(final String jsonString) throws IllegalArgumentException, JSONException {
+            if (jsonString == null) {
+                throw new IllegalArgumentException("Json String cannot be null");
+            }
+
+            final JSONTokener jsonTokener = new JSONTokener(jsonString);
+            final JSONObject jsonObject = new JSONObject(jsonTokener);
+
+            if (!containsRequiredKeys(jsonObject)) {
+                throw new IllegalArgumentException("JSONObject did not contain required keys.");
+            }
+
+            final Iterator<String> keys = jsonObject.keys();
+            while (keys.hasNext()) {
+                final String key = keys.next();
+                final Parameter parameter = Parameter.from(key);
+
+                if (parameter != null) {
+                    try {
+                        addInstanceVariable(parameter, jsonObject.opt(key));
+                    } catch (ClassCastException e) {
+                        throw new IllegalArgumentException("JSONObject key (" + key + ") contained unexpected value.");
+                    }
+                } else {
+                    addExtra(key, jsonObject.opt(key));
+                }
+            }
+        }
+
+        private boolean containsRequiredKeys(final JSONObject jsonObject) {
+            final Set<String> keys = new HashSet<String>();
+
+            final Iterator<String> jsonKeys = jsonObject.keys();
+            while (jsonKeys.hasNext()) {
+                keys.add(jsonKeys.next());
+            }
+
+            return keys.containsAll(Parameter.requiredKeys);
+        }
+
+        private void addInstanceVariable(final Parameter key, final Object value) throws ClassCastException {
+            try {
+                switch (key) {
+                    case MAIN_IMAGE:
+                        setMainImageUrl((String) value);
+                        break;
+                    case ICON_IMAGE:
+                        setIconImageUrl((String) value);
+                        break;
+                    case IMPRESSION_TRACKER:
+                        addImpressionTrackers(value);
+                        break;
+                    case CLICK_TRACKER:
+                        break;
+                    case CLICK_DESTINATION:
+                        setClickDestinationUrl((String) value);
+                        break;
+                    case CALL_TO_ACTION:
+                        setCallToAction((String) value);
+                        break;
+                    case TITLE:
+                        setTitle((String) value);
+                        break;
+                    case TEXT:
+                        setText((String) value);
+                        break;
+                    case STAR_RATING:
+                        setStarRating(parseDouble(value));
+                        break;
+                    default:
+                        MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
+                        break;
+                }
+            } catch (ClassCastException e) {
+                if (!key.required) {
+                    MoPubLog.d("Ignoring class cast exception for optional key: " + key.name);
+                } else {
+                    throw e;
+                }
+            }
+        }
+
+        private void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
+            if (!(impressionTrackers instanceof JSONArray)) {
+                throw new ClassCastException("Expected impression trackers of type JSONArray.");
+            }
+
+            final JSONArray trackers = (JSONArray) impressionTrackers;
+            for (int i = 0; i < trackers.length(); i++) {
+                try {
+                    addImpressionTracker(trackers.getString(i));
+                } catch (JSONException e) {
+                    // This will only occur if we access a non-existent index in JSONArray.
+                    MoPubLog.d("Unable to parse impression trackers.");
+                }
+            }
+        }
+
+        private boolean isImageKey(final String name) {
+            return name != null && name.toLowerCase().endsWith("image");
+        }
+
+        List<String> getExtrasImageUrls() {
+            final List<String> extrasBitmapUrls = new ArrayList<String>(getExtras().size());
+            for (final Map.Entry<String, Object> entry : getExtras().entrySet()) {
+                if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
+                    extrasBitmapUrls.add((String) entry.getValue());
+                }
+            }
+
+            return extrasBitmapUrls;
+        }
+
+        List<String> getAllImageUrls() {
+            final List<String> imageUrls = new ArrayList<String>();
+            if (getMainImageUrl() != null) {
+                imageUrls.add(getMainImageUrl());
+            }
+            if (getIconImageUrl() != null) {
+                imageUrls.add(getIconImageUrl());
+            }
+
+            imageUrls.addAll(getExtrasImageUrls());
+            return imageUrls;
+        }
+
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
index 992095a5..7b567d10 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,39 +1,39 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.graphics.Bitmap;
 import android.view.View;
 
 import com.mopub.common.DownloadResponse;
 import com.mopub.common.DownloadTask;
 import com.mopub.common.GpsHelper;
-import com.mopub.common.HttpResponses;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
 
 import org.apache.http.HttpStatus;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
-import org.json.JSONObject;
 
+import java.lang.ref.WeakReference;
+import java.util.HashMap;
 import java.util.Map;
 
 import static com.mopub.common.GpsHelper.GpsHelperListener;
 import static com.mopub.common.GpsHelper.asyncFetchAdvertisingInfo;
-
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static com.mopub.nativeads.NativeErrorCode.CONNECTION_ERROR;
 import static com.mopub.nativeads.NativeErrorCode.EMPTY_AD_RESPONSE;
-import static com.mopub.nativeads.NativeErrorCode.IMAGE_DOWNLOAD_FAILURE;
-import static com.mopub.nativeads.NativeErrorCode.INVALID_JSON;
 import static com.mopub.nativeads.NativeErrorCode.INVALID_REQUEST_URL;
 import static com.mopub.nativeads.NativeErrorCode.SERVER_ERROR_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNEXPECTED_RESPONSE_CODE;
 import static com.mopub.nativeads.NativeErrorCode.UNSPECIFIED;
 
 public final class MoPubNative {
+
     public interface MoPubNativeListener {
         public void onNativeLoad(final NativeResponse nativeResponse);
         public void onNativeFail(final NativeErrorCode errorCode);
@@ -48,10 +48,11 @@
         };
     }
 
-    private NativeResponse mNativeResponse;
-    private final Context mContext;
+    // must be an activity context since 3rd party networks need it
+    private final WeakReference<Context> mContext;
     private final String mAdUnitId;
     private MoPubNativeListener mMoPubNativeListener;
+    private Map<String, Object> mLocalExtras;
 
     public MoPubNative(final Context context, final String adUnitId, final MoPubNativeListener moPubNativeListener) {
         ImpressionTrackingManager.start();
@@ -66,25 +67,39 @@ public MoPubNative(final Context context, final String adUnitId, final MoPubNati
 
         ManifestUtils.checkNativeActivitiesDeclared(context);
 
-        mContext = context.getApplicationContext();
+        mContext = new WeakReference<Context>(context);
         mAdUnitId = adUnitId;
         mMoPubNativeListener = moPubNativeListener;
         
         // warm up cache for google play services info
-        asyncFetchAdvertisingInfo(mContext);
+        asyncFetchAdvertisingInfo(context);
+    }
+
+    public void destroy() {
+        mContext.clear();
+        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
+    }
+
+    public void setLocalExtras(final Map<String, Object> localExtras) {
+        mLocalExtras = new HashMap<String, Object>(localExtras);
     }
 
     public void makeRequest() {
-        makeRequest(null);
+        final RequestParameters requestParameters = null;
+        makeRequest(requestParameters);
     }
 
     public void makeRequest(final RequestParameters requestParameters) {
-        makeRequest(requestParameters, new NativeGpsHelperListener(requestParameters));
+        makeRequest(new NativeGpsHelperListener(requestParameters));
     }
 
-    void makeRequest(final RequestParameters requestParameters,
-            NativeGpsHelperListener nativeGpsHelperListener) {
-        if (!DeviceUtils.isNetworkAvailable(mContext)) {
+    void makeRequest(final NativeGpsHelperListener nativeGpsHelperListener) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+
+        if (!DeviceUtils.isNetworkAvailable(context)) {
             mMoPubNativeListener.onNativeFail(CONNECTION_ERROR);
             return;
         }
@@ -93,16 +108,18 @@ void makeRequest(final RequestParameters requestParameters,
         // is not cached then guarantee we get it before building the ad request url
         // in the callback, this is a requirement from Google
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(
-                mContext,
+                context,
                 nativeGpsHelperListener
         );
     }
-    public void destroy() {
-        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
-    }
 
-    private void loadNativeAd(final RequestParameters requestParameters) {
-        String endpointUrl = new NativeUrlGenerator(mContext)
+    void loadNativeAd(final RequestParameters requestParameters) {
+        final Context context = getContextOrDestroy();
+        if (context == null) {
+            return;
+        }
+
+        final String endpointUrl = new NativeUrlGenerator(context)
                 .withAdUnitId(mAdUnitId)
                 .withRequest(requestParameters)
                 .generateUrlString(Constants.NATIVE_HOST);
@@ -111,6 +128,10 @@ private void loadNativeAd(final RequestParameters requestParameters) {
             MoPubLog.d("Loading ad from: " + endpointUrl);
         }
 
+        requestNativeAd(endpointUrl);
+    }
+
+    private void requestNativeAd(final String endpointUrl) {
         final HttpGet httpGet;
         try {
             httpGet = new HttpGet(endpointUrl);
@@ -136,39 +157,54 @@ public void onComplete(final String url, final DownloadResponse downloadResponse
                 } else if (downloadResponse.getContentLength() == 0) {
                     mMoPubNativeListener.onNativeFail(EMPTY_AD_RESPONSE);
                 } else {
+                    final CustomEventNativeListener customEventNativeListener = new CustomEventNativeListener() {
+                        @Override
+                        public void onNativeAdLoaded(final NativeAdInterface nativeAd) {
+                            final Context context = getContextOrDestroy();
+                            if (context == null) {
+                                return;
+                            }
+                            mMoPubNativeListener.onNativeLoad(new NativeResponse(context, downloadResponse, nativeAd, mMoPubNativeListener));
+                        }
 
-                    final JSONObject jsonObject = HttpResponses.asJsonObject(downloadResponse);
-
-                    if (jsonObject == null) {
-                        mMoPubNativeListener.onNativeFail(INVALID_JSON);
-                    } else {
-                        try {
-                            mNativeResponse = new NativeResponse(jsonObject);
-                        } catch (IllegalArgumentException e) {
-                            mMoPubNativeListener.onNativeFail(INVALID_JSON);
-                            return;
+                        @Override
+                        public void onNativeAdFailed(final NativeErrorCode errorCode) {
+                            requestNativeAd(downloadResponse.getFirstHeader(ResponseHeader.FAIL_URL));
                         }
-                        downloadImages();
+                    };
+
+                    final Context context = getContextOrDestroy();
+                    if (context == null) {
+                        return;
                     }
+                    CustomEventNativeAdapter.loadNativeAd(
+                            context,
+                            mLocalExtras,
+                            downloadResponse,
+                            customEventNativeListener
+                    );
                 }
             }
         });
 
-        AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
-    }
+        try {
+            AsyncTasks.safeExecuteOnExecutor(jsonDownloadTask, httpUriRequest);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to download json", e);
 
-    private void downloadImages() {
-        ImageService.get(mContext, mNativeResponse.getAllImageUrls(), new ImageService.ImageServiceListener() {
-            @Override
-            public void onSuccess(Map<String, Bitmap> bitmaps) {
-                mMoPubNativeListener.onNativeLoad(mNativeResponse);
-            }
+            mMoPubNativeListener.onNativeFail(UNSPECIFIED);
+        }
 
-            @Override
-            public void onFail() {
-                mMoPubNativeListener.onNativeFail(IMAGE_DOWNLOAD_FAILURE);
-            }
-        });
+    }
+
+    Context getContextOrDestroy() {
+        final Context context = mContext.get();
+        if (context == null) {
+            destroy();
+            MoPubLog.d("Weak reference to Activity Context in MoPubNative became null. This instance" +
+                    " of MoPubNative is destroyed and No more requests will be processed.");
+        }
+        return context;
     }
 
     // Do not store this class as a member of MoPubNative; will result in circular reference
@@ -182,4 +218,9 @@ public void onFetchAdInfoCompleted() {
             loadNativeAd(mRequestParameters);
         }
     }
+
+    @Deprecated
+    MoPubNativeListener getMoPubNativeListener() {
+        return mMoPubNativeListener;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
new file mode 100644
index 00000000..f4f247bd
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdInterface.java
@@ -0,0 +1,31 @@
+package com.mopub.nativeads;
+
+import android.view.View;
+
+import java.util.Map;
+import java.util.Set;
+
+interface NativeAdInterface {
+    // Getters
+    String getMainImageUrl();
+    String getIconImageUrl();
+    String getClickDestinationUrl();
+    String getCallToAction();
+    String getTitle();
+    String getText();
+    Double getStarRating();
+
+    Set<String> getImpressionTrackers();
+    int getImpressionMinPercentageViewed();
+    int getImpressionMinTimeViewed();
+
+    // Extras Getters
+    Object getExtra(final String key);
+    Map<String, Object> getExtras();
+
+    // Event Handlers
+    void prepareImpression(final View view);
+    void recordImpression();
+    void handleClick(final View view);
+    void destroy();
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index f538c821..faf76da4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,29 +1,17 @@
 package com.mopub.nativeads;
 
 import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 
-import com.mopub.common.MoPubBrowser;
 import com.mopub.common.util.MoPubLog;
 
-import java.lang.ref.SoftReference;
-import java.util.Arrays;
-import java.util.Iterator;
-
 import static android.view.View.GONE;
 import static android.view.View.OnClickListener;
 import static android.view.View.VISIBLE;
-import static com.mopub.common.HttpClient.makeTrackingHttpRequest;
-import static com.mopub.common.util.IntentUtils.deviceCanHandleIntent;
-import static com.mopub.common.util.IntentUtils.isDeepLink;
-
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
-import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
 
 class NativeAdViewHelper {
     private NativeAdViewHelper() {}
@@ -62,9 +50,9 @@ static View getAdView(View convertView,
             convertView.setVisibility(GONE);
         } else {
             populateConvertViewSubViews(convertView, nativeViewHolder, nativeResponse, viewBinder);
-            attachClickListeners(context, convertView, nativeViewHolder, nativeResponse, moPubNativeListener);
+            attachClickListeners(convertView, nativeViewHolder, nativeResponse);
             convertView.setVisibility(VISIBLE);
-            ImpressionTrackingManager.addView(convertView, nativeResponse, moPubNativeListener);
+            nativeResponse.prepareImpression(convertView);
         }
 
         return convertView;
@@ -90,9 +78,9 @@ static NativeViewHolder getOrCreateNativeViewHolder(final View convertView, fina
     }
 
     private static void populateConvertViewSubViews(final View convertView,
-                                                    final NativeViewHolder nativeViewHolder,
-                                                    final NativeResponse nativeResponse,
-                                                    final ViewBinder viewBinder) {
+            final NativeViewHolder nativeViewHolder,
+            final NativeResponse nativeResponse,
+            final ViewBinder viewBinder) {
         nativeViewHolder.update(nativeResponse);
         nativeViewHolder.updateExtras(convertView, nativeResponse, viewBinder);
     }
@@ -107,25 +95,21 @@ private static void removeClickListeners(final View view,
         setCtaClickListener(nativeViewHolder, null);
     }
 
-    private static void attachClickListeners(final Context context,
-                                             final View view,
-                                             final NativeViewHolder nativeViewHolder,
-                                             final NativeResponse nativeResponse,
-                                             final MoPubNativeListener moPubNativeListener) {
+    private static void attachClickListeners(final View view,
+            final NativeViewHolder nativeViewHolder,
+            final NativeResponse nativeResponse) {
         if (view == null || nativeResponse == null) {
             return;
         }
 
-        final String clickTrackerUrl = nativeResponse.getClickTracker();
-        final String destinationUrl = nativeResponse.getClickDestinationUrl();
         final NativeViewClickListener nativeViewClickListener
-                = new NativeViewClickListener(context, clickTrackerUrl, destinationUrl, moPubNativeListener);
+                = new NativeViewClickListener(nativeResponse);
         view.setOnClickListener(nativeViewClickListener);
         setCtaClickListener(nativeViewHolder, nativeViewClickListener);
     }
 
     private static void setCtaClickListener(final NativeViewHolder nativeViewHolder,
-                                            final NativeViewClickListener nativeViewClickListener) {
+            final NativeViewClickListener nativeViewClickListener) {
         if (nativeViewHolder == null || nativeViewClickListener == null) {
             return;
         }
@@ -138,98 +122,15 @@ private static void setCtaClickListener(final NativeViewHolder nativeViewHolder,
     }
 
     static class NativeViewClickListener implements OnClickListener {
-        private final Context mContext;
-        private final String mClickTrackerUrl;
-        private final String mDestinationUrl;
-        private final MoPubNativeListener mMoPubNativeListener;
-
-        NativeViewClickListener(final Context context,
-                final String clickTrackerUrl,
-                final String destinationUrl,
-                final MoPubNativeListener moPubNativeListener) {
-            mContext = context.getApplicationContext();
-            mClickTrackerUrl = clickTrackerUrl;
-            mDestinationUrl = destinationUrl;
-            mMoPubNativeListener = moPubNativeListener;
-        }
-
-        @Override
-        public void onClick(View view) {
-            final SpinningProgressView spinningProgressView = new SpinningProgressView(mContext);
-            spinningProgressView.addToRoot(view);
-
-            // Fire and forget click tracker
-            makeTrackingHttpRequest(mClickTrackerUrl);
-
-            if (mDestinationUrl != null) {
-                final Iterator<String> urlIterator = Arrays.asList(mDestinationUrl).iterator();
-                final ClickDestinationUrlResolutionListener urlResolutionListener = new ClickDestinationUrlResolutionListener(
-                        mContext,
-                        urlIterator,
-                        spinningProgressView,
-                        mMoPubNativeListener,
-                        view
-                );
-                UrlResolutionTask.getResolvedUrl(urlIterator.next(), urlResolutionListener);
-            }
-        }
-    }
-
-    private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
-        private final Context mContext;
-        private final Iterator<String> mUrlIterator;
-        private final SoftReference<SpinningProgressView> mSpinningProgressView;
-        private final MoPubNativeListener mMoPubNativeListener;
-        private final SoftReference<View> mView;
-
-        public ClickDestinationUrlResolutionListener(final Context context,
-                final Iterator<String> urlIterator,
-                final SpinningProgressView spinningProgressView,
-                final MoPubNativeListener moPubNativeListener,
-                final View view) {
-            mContext = context;
-            mUrlIterator = urlIterator;
-            mSpinningProgressView = new SoftReference<SpinningProgressView>(spinningProgressView);
-            mMoPubNativeListener = (moPubNativeListener == null)
-                    ? MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER
-                    : moPubNativeListener;
-            mView = new SoftReference<View>(view);
-        }
+        private final NativeResponse mNativeResponse;
 
-        @Override
-        public void onSuccess(String result) {
-            final Intent intent = new Intent(Intent.ACTION_VIEW);
-            intent.setData(Uri.parse(result));
-            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-
-            if (isDeepLink(result)) {
-                if (deviceCanHandleIntent(mContext, intent)) {
-                    mMoPubNativeListener.onNativeClick(mView.get());
-                    mContext.startActivity(intent);
-                } else {
-                    if (mUrlIterator.hasNext()) {
-                        UrlResolutionTask.getResolvedUrl(mUrlIterator.next(), this);
-                    } else {
-                        mMoPubNativeListener.onNativeClick(mView.get());
-                        MoPubBrowser.open(mContext, result);
-                    }
-                }
-            } else {
-                mMoPubNativeListener.onNativeClick(mView.get());
-                MoPubBrowser.open(mContext, result);
-            }
-
-            if (mSpinningProgressView.get() != null) {
-                mSpinningProgressView.get().removeFromRoot();
-            }
+        NativeViewClickListener(final NativeResponse nativeResponse) {
+            mNativeResponse = nativeResponse;
         }
 
         @Override
-        public void onFailure() {
-            MoPubLog.d("Failed to resolve URL for click.");
-            if (mSpinningProgressView.get() != null) {
-                mSpinningProgressView.get().removeFromRoot();
-            }
+        public void onClick(View view) {
+            mNativeResponse.handleClick(view);
         }
     }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index 12a14a49..c0d86de4 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -8,7 +8,15 @@
     UNEXPECTED_RESPONSE_CODE("Received unexpected response code from server."),
     SERVER_ERROR_RESPONSE_CODE("Server returned erroneous response code."),
     CONNECTION_ERROR("Network is unavailable."),
-    UNSPECIFIED("Unspecified error occurred.");
+    UNSPECIFIED("Unspecified error occurred."),
+
+    NETWORK_INVALID_REQUEST("Third-party network received invalid request."),
+    NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
+    NETWORK_NO_FILL("Third-party network failed to provide inventory."),
+    NETWORK_INVALID_STATE("Third-party network failed due to invalid internal state."),
+
+    NATIVE_ADAPTER_CONFIGURATION_ERROR("Custom Event Native was configured incorrectly."),
+    NATIVE_ADAPTER_NOT_FOUND("Unable to find Custom Event Native.");
 
     private final String message;
 
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
index 065aa216..fab32c2b 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeResponse.java
@@ -1,31 +1,40 @@
 package com.mopub.nativeads;
 
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+import android.view.View;
 import android.widget.ImageView;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.HttpClient;
+import com.mopub.common.MoPubBrowser;
+import com.mopub.common.util.IntentUtils;
 import com.mopub.common.util.MoPubLog;
+import com.mopub.common.util.ResponseHeader;
 
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
+import java.lang.ref.SoftReference;
 import java.util.ArrayList;
-import java.util.HashMap;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static com.mopub.nativeads.NativeResponse.Parameter.CALL_TO_ACTION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_DESTINATION;
 import static com.mopub.nativeads.NativeResponse.Parameter.CLICK_TRACKER;
 import static com.mopub.nativeads.NativeResponse.Parameter.ICON_IMAGE;
 import static com.mopub.nativeads.NativeResponse.Parameter.IMPRESSION_TRACKER;
 import static com.mopub.nativeads.NativeResponse.Parameter.MAIN_IMAGE;
+import static com.mopub.nativeads.NativeResponse.Parameter.STAR_RATING;
 import static com.mopub.nativeads.NativeResponse.Parameter.TEXT;
 import static com.mopub.nativeads.NativeResponse.Parameter.TITLE;
-import static com.mopub.nativeads.NativeResponse.Parameter.isImageKey;
-import static java.util.Map.Entry;
+import static com.mopub.nativeads.UrlResolutionTask.UrlResolutionListener;
+import static com.mopub.nativeads.UrlResolutionTask.getResolvedUrl;
 
 public final class NativeResponse {
     enum Parameter {
@@ -42,8 +51,8 @@
         CALL_TO_ACTION("ctatext", false),
         STAR_RATING("starrating", false);
 
-        private final String name;
-        private final boolean required;
+        final String name;
+        final boolean required;
 
         Parameter(final String name, boolean required) {
             this.name = name;
@@ -51,7 +60,7 @@
         }
 
         static Parameter from(final String name) {
-            for (final Parameter parameter : Parameter.values()) {
+            for (final Parameter parameter : values()) {
                 if (parameter.name.equals(name)) {
                     return parameter;
                 }
@@ -60,13 +69,9 @@ static Parameter from(final String name) {
             return null;
         }
 
-        static boolean isImageKey(final String name) {
-            return name != null && name.toLowerCase().endsWith("image");
-        }
-
         static Set<String> requiredKeys = new HashSet<String>();
         static {
-            for (final Parameter parameter : Parameter.values()) {
+            for (final Parameter parameter : values()) {
                 if (parameter.required) {
                     requiredKeys.add(parameter.name);
                 }
@@ -74,239 +79,277 @@ static boolean isImageKey(final String name) {
         }
     }
 
-    private String mMainImageUrl;
-    private String mIconImageUrl;
-    private List<String> mImpressionTrackers;
-    private String mClickTracker;
-    private String mClickDestinationUrl;
-    private String mCallToAction;
-    private String mTitle;
-    private String mText;
-    private boolean mRecordedImpression;
-    private final Map<String, Object> mExtras;
-    private boolean mIsDestroyed;
-
-    NativeResponse(final JSONObject jsonObject) throws IllegalArgumentException {
-        mExtras = new HashMap<String, Object>();
-        mImpressionTrackers = new ArrayList<String>();
-
-        if (!containsRequiredKeys(jsonObject)) {
-            throw new IllegalArgumentException("JSONObject did not contain required keys.");
-        }
-
-        Iterator<String> keys = jsonObject.keys();
-        while (keys.hasNext()) {
-            final String key = keys.next();
-            final Parameter parameter = Parameter.from(key);
-
-            if (parameter != null) {
-                try {
-                    addInstanceVariable(parameter, jsonObject.opt(key));
-                } catch (ClassCastException e) {
-                    throw new IllegalArgumentException("JSONObject key (" + key + ") contained unexpected value.");
-                }
-            } else {
-                addExtra(key, jsonObject.opt(key));
-            }
-        }
+    final Context mContext;
+    MoPubNativeListener mMoPubNativeListener;
+    final NativeAdInterface mNativeAd;
+
+    // Impression and click trackers for the MoPub adserver
+    final Set<String> mMoPubImpressionTrackers;
+    final String mMoPubClickTracker;
+
+    boolean mRecordedImpression;
+    boolean mIsClicked;
+    boolean mIsDestroyed;
+
+    public NativeResponse(final Context context,
+            final DownloadResponse downloadResponse,
+            final NativeAdInterface nativeAd,
+            final MoPubNativeListener moPubNativeListener) {
+        mContext = context.getApplicationContext();
+        mMoPubNativeListener = moPubNativeListener;
+        mNativeAd = nativeAd;
+
+        mMoPubImpressionTrackers = new HashSet<String>();
+        mMoPubImpressionTrackers.add(downloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL));
+        mMoPubClickTracker = downloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL);
     }
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder();
-
-        stringBuilder.append(TITLE.name).append(":").append(mTitle).append("\n");
-        stringBuilder.append(TEXT.name).append(":").append(mText).append("\n");
-        stringBuilder.append(ICON_IMAGE.name).append(":").append(mIconImageUrl).append("\n");
-        stringBuilder.append(MAIN_IMAGE.name).append(":").append(mMainImageUrl).append("\n");
-        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(mImpressionTrackers).append("\n");
-        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mClickTracker).append("\n");
-        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(mClickDestinationUrl).append("\n");
-        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(mCallToAction).append("\n");
+        final StringBuilder stringBuilder = new StringBuilder("\n");
+
+        stringBuilder.append(TITLE.name).append(":").append(getTitle()).append("\n");
+        stringBuilder.append(TEXT.name).append(":").append(getText()).append("\n");
+        stringBuilder.append(ICON_IMAGE.name).append(":").append(getIconImageUrl()).append("\n");
+        stringBuilder.append(MAIN_IMAGE.name).append(":").append(getMainImageUrl()).append("\n");
+        stringBuilder.append(STAR_RATING.name).append(":").append(getStarRating()).append("\n");
+        stringBuilder.append(IMPRESSION_TRACKER.name).append(":").append(getImpressionTrackers()).append("\n");
+        stringBuilder.append(CLICK_TRACKER.name).append(":").append(mMoPubClickTracker).append("\n");
+        stringBuilder.append(CLICK_DESTINATION.name).append(":").append(getClickDestinationUrl()).append("\n");
+        stringBuilder.append(CALL_TO_ACTION.name).append(":").append(getCallToAction()).append("\n");
         stringBuilder.append("recordedImpression").append(":").append(mRecordedImpression).append("\n");
-        stringBuilder.append("extras").append(":").append(mExtras);
+        stringBuilder.append("extras").append(":").append(getExtras());
 
         return stringBuilder.toString();
     }
 
-    public void destroy() {
-        mIsDestroyed = true;
-        mExtras.clear();
-    }
-
-    /**
-     * Getters
-     */
+    // Interface Methods
+    // Getters
     public String getMainImageUrl() {
-        return mMainImageUrl;
+        return mNativeAd.getMainImageUrl();
     }
 
-    public void loadMainImage(final ImageView imageView) {
-        loadImageView(mMainImageUrl, imageView);
+    public String getIconImageUrl() {
+        return mNativeAd.getIconImageUrl();
     }
 
-    public String getIconImageUrl() {
-        return mIconImageUrl;
+    public String getClickDestinationUrl() {
+        return mNativeAd.getClickDestinationUrl();
     }
 
-    public void loadIconImage(final ImageView imageView) {
-        loadImageView(mIconImageUrl, imageView);
+    public String getCallToAction() {
+        return mNativeAd.getCallToAction();
     }
 
-    public List<String> getImpressionTrackers() {
-        return mImpressionTrackers;
+    public String getTitle() {
+        return mNativeAd.getTitle();
     }
 
-    public String getClickTracker() {
-        return mClickTracker;
+    public String getText() {
+        return mNativeAd.getText();
     }
 
-    public String getClickDestinationUrl() {
-        return mClickDestinationUrl;
+    public List<String> getImpressionTrackers() {
+        final Set<String> allImpressionTrackers = new HashSet<String>();
+        allImpressionTrackers.addAll(mMoPubImpressionTrackers);
+        allImpressionTrackers.addAll(mNativeAd.getImpressionTrackers());
+        return new ArrayList<String>(allImpressionTrackers);
     }
 
-    public String getCallToAction() {
-        return mCallToAction;
+    public String getClickTracker() {
+        return mMoPubClickTracker;
     }
 
-    public String getTitle() {
-        return mTitle;
+    public Double getStarRating() {
+        return mNativeAd.getStarRating();
     }
 
-    public String getSubtitle() {
-        return mText;
+    public int getImpressionMinTimeViewed() {
+        return mNativeAd.getImpressionMinTimeViewed();
     }
 
-    public boolean getRecordedImpression() {
-        return mRecordedImpression;
+    public int getImpressionMinPercentageViewed() {
+        return mNativeAd.getImpressionMinPercentageViewed();
     }
 
+    // Extras Getters
     public Object getExtra(final String key) {
-        return mExtras.get(key);
+        return mNativeAd.getExtra(key);
     }
 
     public Map<String, Object> getExtras() {
-        return new HashMap<String, Object>(mExtras);
+        return mNativeAd.getExtras();
     }
 
-    public void loadExtrasImage(final String key, final ImageView imageView) {
-        Object object = mExtras.get(key);
-        if (object != null && object instanceof String) {
-            final String imageUrl = (String) mExtras.get(key);
-            loadImageView(imageUrl, imageView);
+    // Event Handlers
+    public void prepareImpression(final View view) {
+        if (getRecordedImpression() || isDestroyed()) {
+            return;
         }
-    }
 
-    private void loadImageView(final String url, final ImageView imageView) {
-        ImageViewService.loadImageView(url, imageView);
+        ImpressionTrackingManager.addView(view, this);
+        mNativeAd.prepareImpression(view);
     }
 
-    public boolean isDestroyed() {
-        return mIsDestroyed;
+    public void recordImpression(final View view) {
+        if (getRecordedImpression() || isDestroyed()) {
+            return;
+        }
+
+        for (final String impressionTracker : getImpressionTrackers()) {
+            HttpClient.makeTrackingHttpRequest(impressionTracker);
+        }
+
+        mNativeAd.recordImpression();
+        mRecordedImpression = true;
+
+        mMoPubNativeListener.onNativeImpression(view);
     }
 
-    List<String> getExtrasImageUrls() {
-        final List<String> extrasBitmapUrls = new ArrayList<String>(mExtras.size());
+    public void handleClick(final View view) {
+        if (isDestroyed()) {
+            return;
+        }
 
-        for (final Entry<String, Object> entry : mExtras.entrySet()) {
-            if (isImageKey(entry.getKey()) && entry.getValue() instanceof String) {
-                extrasBitmapUrls.add((String) entry.getValue());
-            }
+        if (!isClicked()) {
+            HttpClient.makeTrackingHttpRequest(mMoPubClickTracker);
         }
 
-        return extrasBitmapUrls;
+        openClickDestinationUrl(view);
+        mNativeAd.handleClick(view);
+        mIsClicked = true;
+
+        mMoPubNativeListener.onNativeClick(view);
     }
 
-    List<String> getAllImageUrls() {
-        final List<String> imageUrls = new ArrayList<String>();
-        if (mMainImageUrl != null) {
-            imageUrls.add(mMainImageUrl);
+    public void destroy() {
+        if (isDestroyed()) {
+            return;
         }
-        if (mIconImageUrl != null) {
-            imageUrls.add(mIconImageUrl);
+
+        mMoPubNativeListener = EMPTY_MOPUB_NATIVE_LISTENER;
+
+        mNativeAd.destroy();
+        mIsDestroyed = true;
+    }
+
+    // Non Interface Public Methods
+    public void loadMainImage(final ImageView imageView) {
+        loadImageView(getMainImageUrl(), imageView);
+    }
+
+    public void loadIconImage(final ImageView imageView) {
+        loadImageView(getIconImageUrl(), imageView);
+    }
+
+    public void loadExtrasImage(final String key, final ImageView imageView) {
+        final Object object = getExtra(key);
+        if (object != null && object instanceof String) {
+            loadImageView((String) object, imageView);
         }
+    }
 
-        imageUrls.addAll(getExtrasImageUrls());
-        return imageUrls;
+    public boolean getRecordedImpression() {
+        return mRecordedImpression;
     }
 
-    /**
-     * Setters
-     */
+    public boolean isClicked() {
+        return mIsClicked;
+    }
 
-    void recordImpression() {
-        mRecordedImpression = true;
+    public boolean isDestroyed() {
+        return mIsDestroyed;
     }
 
-    private boolean containsRequiredKeys(final JSONObject jsonObject) {
-        final Set<String> keys = new HashSet<String>();
+    // Helpers
+    private void loadImageView(final String url, final ImageView imageView) {
+        ImageViewService.loadImageView(url, imageView);
+    }
 
-        final Iterator<String> jsonKeys = jsonObject.keys();
-        while (jsonKeys.hasNext()) {
-            keys.add(jsonKeys.next());
+    private void openClickDestinationUrl(final View view) {
+        if (getClickDestinationUrl() == null) {
+            return;
         }
 
-        return keys.containsAll(Parameter.requiredKeys);
-    }
-
-    private void addInstanceVariable(final Parameter key, final Object value) throws ClassCastException {
-        try {
-            switch (key) {
-                case MAIN_IMAGE:
-                    mMainImageUrl = (String) value;
-                    break;
-                case ICON_IMAGE:
-                    mIconImageUrl = (String) value;
-                    break;
-                case IMPRESSION_TRACKER:
-                    addImpressionTrackers(value);
-                    break;
-                case CLICK_TRACKER:
-                    mClickTracker = (String) value;
-                    break;
-                case CLICK_DESTINATION:
-                    mClickDestinationUrl = (String) value;
-                    break;
-                case CALL_TO_ACTION:
-                    mCallToAction = (String) value;
-                    break;
-                case TITLE:
-                    mTitle = (String) value;
-                    break;
-                case TEXT:
-                    mText = (String) value;
-                    break;
-                default:
-                    MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
-                    break;
-            }
-        } catch (ClassCastException e) {
-            if (!key.required) {
-                MoPubLog.d("Ignoring class cast exception for optional defined key: " + key.name);
-            } else {
-                throw e;
-            }
+        SpinningProgressView spinningProgressView = null;
+        if (view != null) {
+            spinningProgressView = new SpinningProgressView(mContext);
+            spinningProgressView.addToRoot(view);
         }
-    }
 
-    private void addExtra(final String key, final Object value) {
-        mExtras.put(key, value);
+        final Iterator<String> urlIterator = Arrays.asList(getClickDestinationUrl()).iterator();
+        final ClickDestinationUrlResolutionListener urlResolutionListener = new ClickDestinationUrlResolutionListener(
+                mContext,
+                urlIterator,
+                spinningProgressView
+        );
+
+        getResolvedUrl(urlIterator.next(), urlResolutionListener);
     }
 
-    private void addImpressionTrackers(final Object impressionTrackers) throws ClassCastException {
-        if (!(impressionTrackers instanceof JSONArray)) {
-            throw new ClassCastException("Expected impression trackers of type JSONArray.");
+    private static class ClickDestinationUrlResolutionListener implements UrlResolutionListener {
+        private final Context mContext;
+        private final Iterator<String> mUrlIterator;
+        private final SoftReference<SpinningProgressView> mSpinningProgressView;
+
+        public ClickDestinationUrlResolutionListener(final Context context,
+                final Iterator<String> urlIterator,
+                final SpinningProgressView spinningProgressView) {
+            mContext = context.getApplicationContext();
+            mUrlIterator = urlIterator;
+            mSpinningProgressView = new SoftReference<SpinningProgressView>(spinningProgressView);
+        }
+
+        @Override
+        public void onSuccess(final String resolvedUrl) {
+            final Intent intent = new Intent(Intent.ACTION_VIEW);
+            intent.setData(Uri.parse(resolvedUrl));
+            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+
+            if (IntentUtils.isDeepLink(resolvedUrl) && IntentUtils.deviceCanHandleIntent(mContext, intent)) {
+                // Open another Android app from deep link
+                mContext.startActivity(intent);
+            } else if (mUrlIterator.hasNext()) {
+                // If we can't handle a deep link then try the fallback url
+                getResolvedUrl(mUrlIterator.next(), this);
+                return;
+            } else {
+                // If we can't open the deep link and there are no backup links
+                // Or the link is a browser link then handle it here
+                MoPubBrowser.open(mContext, resolvedUrl);
+            }
+
+            removeSpinningProgressView();
         }
 
-        final JSONArray trackers = (JSONArray) impressionTrackers;
+        @Override
+        public void onFailure() {
+            MoPubLog.d("Failed to resolve URL for click.");
+            removeSpinningProgressView();
+        }
 
-        for (int i = 0; i < trackers.length(); i++) {
-            try {
-                mImpressionTrackers.add(trackers.getString(i));
-            } catch (JSONException e) {
-                // This will only occur if we access a non-existent index in JSONArray.
-                MoPubLog.d("Unable to parse impression trackers.");
+        private void removeSpinningProgressView() {
+            final SpinningProgressView spinningProgressView = mSpinningProgressView.get();
+            if (spinningProgressView != null) {
+                spinningProgressView.removeFromRoot();
             }
         }
     }
+
+    @Deprecated
+    public String getSubtitle() {
+        return mNativeAd.getText();
+    }
+
+    // Testing
+    @Deprecated
+    MoPubNativeListener getMoPubNativeListener() {
+        return mMoPubNativeListener;
+    }
+
+    // Testing
+    @Deprecated
+    void setRecordedImpression(final boolean recordedImpression) {
+        mRecordedImpression = recordedImpression;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index 6d9e7ab4..af13c917 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -7,14 +7,16 @@
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.GpsHelper;
 import com.mopub.common.LocationService;
-import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.MoPub;
+import com.mopub.common.util.Strings;
 
 class NativeUrlGenerator extends AdUrlGenerator {
     private static int sLocationPrecision = 6;
     private static LocationService.LocationAwareness sLocationAwareness
             = LocationService.LocationAwareness.NORMAL;
 
+    private String mDesiredAssets;
+
     NativeUrlGenerator(Context context) {
         super(context);
     }
@@ -29,6 +31,7 @@ NativeUrlGenerator withRequest(final RequestParameters requestParameters) {
         if (requestParameters != null) {
             mKeywords = requestParameters.getKeywords();
             mLocation = requestParameters.getLocation();
+            mDesiredAssets = requestParameters.getDesiredAssets();
         }
         return this;
     }
@@ -77,9 +80,17 @@ public String generateUrlString(final String serverHostname) {
 
         setTwitterAppInstalledFlag();
 
+        setDesiredAssets();
+
         return getFinalUrlString();
     }
 
+    private void setDesiredAssets() {
+        if (mDesiredAssets != null && !Strings.isEmpty(mDesiredAssets)) {
+            addParam("assets", mDesiredAssets);
+        }
+    }
+
     @Override
     protected void setSdkVersion(String sdkVersion) {
         addParam("nsv", sdkVersion);
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
index 4ca28883..9e81b899 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/NativeViewHolder.java
@@ -6,8 +6,6 @@
 
 import com.mopub.common.util.MoPubLog;
 
-import static com.mopub.nativeads.NativeResponse.Parameter.isImageKey;
-
 class NativeViewHolder {
     TextView titleView;
     TextView textView;
@@ -37,7 +35,7 @@ static NativeViewHolder fromViewBinder(final View view, final ViewBinder viewBin
 
     void update(final NativeResponse nativeResponse) {
         addTextView(titleView, nativeResponse.getTitle());
-        addTextView(textView, nativeResponse.getSubtitle());
+        addTextView(textView, nativeResponse.getText());
         addTextView(callToActionView, nativeResponse.getCallToAction());
 
         nativeResponse.loadMainImage(mainImageView);
@@ -52,24 +50,18 @@ void updateExtras(final View outerView,
             final View view = outerView.findViewById(resourceId);
             final Object content = nativeResponse.getExtra(key);
 
-            if (isImageKey(key)) {
-                if (view instanceof ImageView) {
-                    // Clear previous image
-                    ((ImageView) view).setImageDrawable(null);
-                    nativeResponse.loadExtrasImage(key, (ImageView) view);
-                } else {
-                    MoPubLog.d("View bound to " + key + " should be an instance of ImageView.");
+            if (view instanceof ImageView) {
+                // Clear previous image
+                ((ImageView) view).setImageDrawable(null);
+                nativeResponse.loadExtrasImage(key, (ImageView) view);
+            } else if (view instanceof TextView) {
+                // Clear previous text value
+                ((TextView) view).setText(null);
+                if (content instanceof String) {
+                    addTextView((TextView) view, (String) content);
                 }
             } else {
-                if (view instanceof TextView) {
-                    // Clear previous text value
-                    ((TextView) view).setText(null);
-                    if (content instanceof String) {
-                        addTextView((TextView) view, (String) content);
-                    }
-                } else {
-                    MoPubLog.d("View bound to " + key + " should be an instance of TextView.");
-                }
+                MoPubLog.d("View bound to " + key + " should be an instance of TextView or ImageView.");
             }
         }
     }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
index c3f6d995..fea4fb4c 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -1,14 +1,40 @@
 package com.mopub.nativeads;
 
 import android.location.Location;
+import android.text.TextUtils;
+
+import java.util.EnumSet;
 
 public final class RequestParameters {
+
+    public enum NativeAdAsset {
+        TITLE("title"),
+        TEXT("text"),
+        ICON_IMAGE("iconimage"),
+        MAIN_IMAGE("mainimage"),
+        CALL_TO_ACTION_TEXT("ctatext"),
+        STAR_RATING("starrating");
+
+        private final String mAssetName;
+
+        private NativeAdAsset(String assetName) {
+            mAssetName = assetName;
+        }
+
+        @Override
+        public String toString() {
+            return mAssetName;
+        }
+    }
+
     private final String mKeywords;
     private final Location mLocation;
+    private final EnumSet<NativeAdAsset> mDesiredAssets;
 
     public final static class Builder {
         private String keywords;
         private Location location;
+        private EnumSet<NativeAdAsset> desiredAssets;
 
         public final Builder keywords(String keywords) {
             this.keywords = keywords;
@@ -20,6 +46,12 @@ public final Builder location(Location location) {
             return this;
         }
 
+        // Specify set of assets used by this ad request. If not set, this defaults to all assets
+        public final Builder desiredAssets(final EnumSet<NativeAdAsset> desiredAssets) {
+            this.desiredAssets = EnumSet.copyOf(desiredAssets);
+            return this;
+        }
+
         public final RequestParameters build() {
             return new RequestParameters(this);
         }
@@ -28,6 +60,7 @@ public final RequestParameters build() {
     private RequestParameters(Builder builder) {
         mKeywords = builder.keywords;
         mLocation = builder.location;
+        mDesiredAssets = builder.desiredAssets;
     }
 
     public final String getKeywords() {
@@ -37,4 +70,13 @@ public final String getKeywords() {
     public final Location getLocation() {
         return mLocation;
     }
+
+    public final String getDesiredAssets() {
+        String result = "";
+
+        if (mDesiredAssets != null) {
+            result = TextUtils.join(",", mDesiredAssets.toArray());
+        }
+        return result;
+    }
 }
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
index 49a60da3..cce76111 100644
--- a/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/UrlResolutionTask.java
@@ -4,6 +4,7 @@
 
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.IntentUtils;
+import com.mopub.common.util.MoPubLog;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
@@ -13,7 +14,7 @@
     private static final int REDIRECT_LIMIT = 10;
 
     interface UrlResolutionListener {
-        void onSuccess(String result);
+        void onSuccess(String resolvedUrl);
         void onFailure();
     }
 
@@ -21,7 +22,14 @@
 
     public static void getResolvedUrl(final String urlString, final UrlResolutionListener listener) {
         final UrlResolutionTask urlResolutionTask = new UrlResolutionTask(listener);
-        AsyncTasks.safeExecuteOnExecutor(urlResolutionTask, urlString);
+
+        try {
+            AsyncTasks.safeExecuteOnExecutor(urlResolutionTask, urlString);
+        } catch (Exception e) {
+            MoPubLog.d("Failed to resolve url", e);
+
+            listener.onFailure();
+        }
     }
 
     UrlResolutionTask(UrlResolutionListener listener) {
diff --git a/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
new file mode 100644
index 00000000..019b5338
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
@@ -0,0 +1,31 @@
+package com.mopub.nativeads.factories;
+
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.MoPubCustomEventNative;
+
+import java.lang.reflect.Constructor;
+
+public class CustomEventNativeFactory {
+    protected static CustomEventNativeFactory instance = new CustomEventNativeFactory();
+
+    public static CustomEventNative create(final String className) throws Exception {
+        if (className != null) {
+            final Class<? extends CustomEventNative> nativeClass = Class.forName(className)
+                    .asSubclass(CustomEventNative.class);
+            return instance.internalCreate(nativeClass);
+        } else {
+            return new MoPubCustomEventNative();
+        }
+    }
+
+    @Deprecated // for testing
+    public static void setInstance(final CustomEventNativeFactory customEventNativeFactory) {
+        instance = customEventNativeFactory;
+    }
+
+    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) throws Exception {
+        final Constructor<?> nativeConstructor = nativeClass.getDeclaredConstructor((Class[]) null);
+        nativeConstructor.setAccessible(true);
+        return (CustomEventNative) nativeConstructor.newInstance();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
index b6fd9eed..7da791f4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DownloadTaskTest.java
@@ -1,5 +1,8 @@
 package com.mopub.common;
 
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.junit.Before;
@@ -27,10 +30,12 @@
     private HttpGet httpGet;
     private String mTestResponse;
     private FakeHttpLayer mFakeHttpLayer;
+    private TestHttpResponseWithHeaders mTestHttpResponseWithHeaders;
 
     @Before
     public void setUp() throws Exception {
         mSemaphore = new Semaphore(0);
+
         mDownloadTaskListener = new DownloadTask.DownloadTaskListener() {
             @Override
             public void onComplete(String url, DownloadResponse response) {
@@ -45,17 +50,24 @@ public void onComplete(String url, DownloadResponse response) {
         } catch (IllegalArgumentException e) {
             fail("Could not initialize HttpGet in test");
         }
+
         mTestResponse = "TEST RESPONSE";
+        mTestHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, mTestResponse);
+        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
+        mTestHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+
         mFakeHttpLayer = Robolectric.getFakeHttpLayer();
     }
 
     @Test
     public void execute_whenDownloadTaskAndHttpClientCompleteSuccessfully_shouldReturn200HttpResponse() throws Exception {
-        mFakeHttpLayer.addPendingHttpResponse(200, mTestResponse);
+        mFakeHttpLayer.addPendingHttpResponse(mTestHttpResponseWithHeaders);
         mDownloadTask.execute(httpGet);
         mSemaphore.acquire();
         assertThat(mUrl).isEqualTo(httpGet.getURI().toString());
         assertThat(mDownloadResponse.getStatusCode()).isEqualTo(200);
+        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.IMPRESSION_URL)).isEqualTo("moPubImpressionTrackerUrl");
+        assertThat(mDownloadResponse.getFirstHeader(ResponseHeader.CLICKTHROUGH_URL)).isEqualTo("moPubClickTrackerUrl");
         assertThat(HttpResponses.asResponseString(mDownloadResponse)).isEqualTo(mTestResponse);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 0f46c31f..d14356f8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -35,15 +35,18 @@
 import android.app.Activity;
 import android.content.Context;
 import android.content.SharedPreferences;
+import android.os.Looper;
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 
 import java.util.concurrent.Semaphore;
 
@@ -62,6 +65,7 @@
     private TestAdInfo adInfo;
     private Semaphore semaphore;
     private GpsHelper.GpsHelperListener semaphoreGpsHelperListener;
+    private Looper gpsHelperListenerCallbackLooper;
 
     // This class emulates the AdInfo class returned from the Google Play Services
     // AdvertisingIdClient.getAdvertisingIdInfo method; need to implement getters for reflection calls
@@ -91,6 +95,7 @@ public void setup() {
         semaphoreGpsHelperListener = new GpsHelper.GpsHelperListener() {
             @Override
             public void onFetchAdInfoCompleted() {
+                gpsHelperListenerCallbackLooper = Looper.myLooper();
                 semaphore.release();
             }
         };
@@ -127,6 +132,20 @@ public void isGpsAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse()
         assertThat(GpsHelper.isGpsAvailable(context)).isFalse();
     }
 
+    @Test
+    public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
+        GpsHelper.setClassNamesForTesting();
+        when(methodBuilder.execute()).thenReturn(
+                adInfo,
+                adInfo.ADVERTISING_ID,
+                adInfo.LIMIT_AD_TRACKING_ENABLED
+        );
+
+        GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
+        safeAcquireSemaphore();
+        assertThat(gpsHelperListenerCallbackLooper).isEqualTo(Looper.getMainLooper());
+    }
+
     @Test
     public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldPopulateSharedPreferences() throws Exception {
         verifyCleanSharedPreferences(context);
@@ -138,7 +157,7 @@ public void asyncFetchAdvertisingInfo_whenGooglePlayServicesIsLinked_shouldPopul
         );
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifySharedPreferences(context, adInfo);
     }
 
@@ -149,7 +168,7 @@ public void asyncFetchAdvertisingInfo_whenReflectedMethodCallThrows_shouldNotPop
         when(methodBuilder.execute()).thenThrow(new Exception());
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -160,7 +179,7 @@ public void asyncFetchAdvertisingInfo_whenReflectedMethodCallReturnsNull_shouldN
         when(methodBuilder.execute()).thenReturn(null);
 
         GpsHelper.asyncFetchAdvertisingInfo(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -176,7 +195,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsLinkedA
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifySharedPreferences(context, adInfo);
     }
 
@@ -190,7 +209,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesLinkedAnd
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verify(methodBuilder).execute();
     }
 
@@ -203,7 +222,7 @@ public void asyncFetchAdvertisingInfoIfNotCached_whenGooglePlayServicesIsNotLink
         );
 
         GpsHelper.asyncFetchAdvertisingInfoIfNotCached(context, semaphoreGpsHelperListener);
-        semaphore.acquire();
+        safeAcquireSemaphore();
         verifyCleanSharedPreferences(context);
     }
 
@@ -343,6 +362,12 @@ static public void populateAndVerifySharedPreferences(Context context, TestAdInf
         verifySharedPreferences(context, adInfo);
     }
 
+    private void safeAcquireSemaphore() throws Exception {
+        Robolectric.runBackgroundTasks();
+        Robolectric.runUiThreadTasks();
+        semaphore.acquire();
+    }
+
     static public void verifySharedPreferences(Context context, TestAdInfo adInfo) {
         SharedPreferences sharedPreferences = SharedPreferencesHelper.getSharedPreferences(context);
         assertThat(sharedPreferences.contains(GpsHelper.ADVERTISING_ID_KEY)).isTrue();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 8cae5401..1a6dc5e1 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -2,6 +2,10 @@
 
 import android.os.AsyncTask;
 import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+
+import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -62,6 +66,13 @@ public void safeExecutorOnExecutor_beforeICS_withNullAsyncTask_shouldThrowIllega
         }
     }
 
+    @Test
+    public void safeExecutorOnExecutor_beforeICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", HONEYCOMB_MR2.getApiLevel());
+
+        ensureFastFailWhenTaskIsRunOnBackgroundThread();
+    }
+
     @Test
     public void safeExecuteOnExecutor_atLeastICS_shouldCallExecuteWithParamsWithExecutor() throws Exception {
         Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
@@ -81,7 +92,6 @@ public void safeExecutorOnExecutor_atLeastICS_withNullParam_shouldCallExecuteWit
 
     }
 
-
     @Test
     public void safeExecutorOnExecutor_atLeastICS_withNullAsyncTask_shouldThrowIllegalArgumentException() throws Exception {
         Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
@@ -93,4 +103,35 @@ public void safeExecutorOnExecutor_atLeastICS_withNullAsyncTask_shouldThrowIlleg
             // pass
         }
     }
+
+    @Test
+    public void safeExecutorOnExecutor_atLeastICS_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
+        Robolectric.Reflection.setFinalStaticField(Build.VERSION.class, "SDK_INT", ICE_CREAM_SANDWICH.getApiLevel());
+
+        ensureFastFailWhenTaskIsRunOnBackgroundThread();
+    }
+
+    private void ensureFastFailWhenTaskIsRunOnBackgroundThread() {
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
+
+                    Handler handler = new Handler(Looper.getMainLooper());
+                    handler.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            fail("Should have thrown IllegalStateException");
+                        }
+                    });
+                } catch (IllegalStateException exception) {
+                    // pass
+                }
+            }
+        }).start();
+
+        ThreadUtils.pause(10);
+        Robolectric.runUiThreadTasks();
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
similarity index 98%
rename from mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index 177add8f..c0954dd3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -30,14 +30,16 @@
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-package com.mopub.mobileads.util;
+package com.mopub.common.util;
 
 import com.mopub.mobileads.test.support.SdkTestRunner;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
new file mode 100644
index 00000000..93d8fb1f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -0,0 +1,59 @@
+package com.mopub.common.util;
+
+import android.app.Activity;
+
+import org.junit.Test;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Mockito.mock;
+
+public class NumbersTest {
+    @Test
+    public void parseDouble_withNumberValue_shouldReturnDouble() throws Exception {
+        int anInt = 2;
+        assertThat(Numbers.parseDouble(anInt)).isEqualTo(anInt);
+
+        double aDouble = 2.1;
+        assertThat(Numbers.parseDouble(aDouble)).isEqualTo(aDouble);
+
+        float aFloat = 2.2f;
+        assertThat(Numbers.parseDouble(aFloat)).isEqualTo(aFloat);
+
+        double nan = Double.NaN;
+        assertThat(Numbers.parseDouble(nan)).isEqualTo(nan);
+    }
+
+    @Test
+    public void parseDouble_withStringValue_shouldReturnDouble() throws Exception {
+        assertThat(Numbers.parseDouble("0.01")).isEqualTo(0.01);
+        assertThat(Numbers.parseDouble("-1015")).isEqualTo(-1015);
+    }
+
+    @Test
+    public void parseDouble_withInvalidStringValue_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble("dog");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+
+        try {
+            Numbers.parseDouble("123a");
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void parseDouble_withInvalidObjectType_shouldThrowClassCastException() throws Exception {
+        try {
+            Numbers.parseDouble(mock(Activity.class));
+            fail("Expected ClassCastException");
+        } catch (ClassCastException e) {
+            // pass
+        }
+    }
+}
\ No newline at end of file
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index bd666cde..78f7dac2 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -34,12 +34,13 @@
 
 import android.app.Activity;
 import android.view.View;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
-import static com.mopub.common.util.Reflection.MethodBuilder;
+import static com.mopub.common.util.Reflection.*;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.fest.assertions.api.Assertions.fail;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
new file mode 100644
index 00000000..dcfabedc
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/CommonUtils.java
@@ -0,0 +1,16 @@
+package com.mopub.common.util.test.support;
+
+import org.robolectric.Robolectric;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+public class CommonUtils {
+    public static void assertHttpRequestsMade(String... urls) {
+        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
+        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
+
+        for (final String url : urls) {
+            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
+        }
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index a05b82ad..e78a6989 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -39,8 +39,8 @@
 import android.net.Uri;
 import android.view.View;
 import android.widget.TextView;
-import com.mopub.common.util.test.support.TestDateAndTime;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+import com.mopub.common.util.test.support.TestDateAndTime;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
index f150725f..ff5f1fea 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdConfigurationTest.java
@@ -16,17 +16,17 @@
 import java.util.*;
 
 import static com.mopub.mobileads.AdViewController.MINIMUM_REFRESH_TIME_MILLISECONDS;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.DSP_CREATIVE_ID;
-import static com.mopub.mobileads.util.ResponseHeader.FAIL_URL;
-import static com.mopub.mobileads.util.ResponseHeader.HEIGHT;
-import static com.mopub.mobileads.util.ResponseHeader.IMPRESSION_URL;
-import static com.mopub.mobileads.util.ResponseHeader.NETWORK_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.REFRESH_TIME;
-import static com.mopub.mobileads.util.ResponseHeader.WIDTH;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.DSP_CREATIVE_ID;
+import static com.mopub.common.util.ResponseHeader.FAIL_URL;
+import static com.mopub.common.util.ResponseHeader.HEIGHT;
+import static com.mopub.common.util.ResponseHeader.IMPRESSION_URL;
+import static com.mopub.common.util.ResponseHeader.NETWORK_TYPE;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.REFRESH_TIME;
+import static com.mopub.common.util.ResponseHeader.WIDTH;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
index f4380431..7ab2bb97 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
@@ -46,11 +46,11 @@
 import java.util.*;
 import java.util.concurrent.*;
 
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.FULL_AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.FULL_AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
 import static com.mopub.common.util.VersionCode.HONEYCOMB_MR2;
 import static com.mopub.common.util.VersionCode.ICE_CREAM_SANDWICH;
 import static org.mockito.Matchers.any;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
index fd493f50..49f20ecd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
@@ -47,14 +47,14 @@
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.HTML_INTERSTITIAL;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_BANNER;
 import static com.mopub.mobileads.AdTypeTranslator.CustomEventType.MRAID_INTERSTITIAL;
-import static com.mopub.mobileads.util.ResponseHeader.AD_TYPE;
-import static com.mopub.mobileads.util.ResponseHeader.CLICKTHROUGH_URL;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_SELECTOR;
-import static com.mopub.mobileads.util.ResponseHeader.NATIVE_PARAMS;
-import static com.mopub.mobileads.util.ResponseHeader.REDIRECT_URL;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
+import static com.mopub.common.util.ResponseHeader.AD_TYPE;
+import static com.mopub.common.util.ResponseHeader.CLICKTHROUGH_URL;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_SELECTOR;
+import static com.mopub.common.util.ResponseHeader.NATIVE_PARAMS;
+import static com.mopub.common.util.ResponseHeader.REDIRECT_URL;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index a871597a..a0f7bbfd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -41,6 +41,7 @@
 import android.view.View;
 import android.webkit.WebView;
 import android.widget.FrameLayout;
+
 import com.mopub.common.GpsHelper;
 import com.mopub.common.GpsHelperTest;
 import com.mopub.common.MoPub;
@@ -51,6 +52,7 @@
 import com.mopub.mobileads.test.support.TestAdFetcherFactory;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.ThreadUtils;
+
 import org.apache.http.HttpRequest;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -79,6 +81,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -92,16 +95,19 @@
     private HttpResponse response;
     private HttpClient httpClient;
     private AdFetcher adFetcher;
-    private Activity context;
     private MethodBuilder methodBuilder;
+    private Activity context;
 
     @Before
     public void setup() {
-        moPubView = mock(MoPubView.class);
-        stub(moPubView.getContext()).toReturn(new Activity());
-        httpClient = HttpClientFactory.create();
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+
+        moPubView = mock(MoPubView.class);
+        stub(moPubView.getContext()).toReturn(context);
+
+        httpClient = HttpClientFactory.create();
+
         subject = new AdViewController(context, moPubView);
         response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
         adFetcher = TestAdFetcherFactory.getSingletonMock();
@@ -138,7 +144,7 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() th
         Robolectric.pauseMainLooper();
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
 
-        subject.setAutorefreshEnabled(false);
+        subject.forceSetAutorefreshEnabled(false);
 
         subject.scheduleRefreshTimerIfEnabled();
 
@@ -172,6 +178,77 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfRefreshTimeIsZero() t
 
         assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
     }
+    
+    @Test
+    public void forceSetAutoRefreshEnabled_shouldSetAutoRefreshSetting() throws Exception {
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.forceSetAutorefreshEnabled(true);
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    }
+
+    @Test
+    public void pauseRefresh_shouldDisableAutorefresh() throws Exception {
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+
+        subject.pauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+    }
+
+    @Test
+    public void unpauseRefresh_afterUnpauseRefresh_shouldEnableRefresh() throws Exception {
+        subject.pauseRefresh();
+        
+        subject.unpauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isTrue();
+    }
+
+    @Test
+    public void pauseAndUnpauseRefresh_withRefreshForceDisabled_shouldAlwaysHaveRefreshFalse() throws Exception {
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.pauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+
+        subject.unpauseRefresh();
+        assertThat(subject.getAutorefreshEnabled()).isFalse();
+    }
+
+    @Test
+    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
+        final AdViewController adViewControllerSpy = spy(subject);
+
+        adViewControllerSpy.loadAd();
+        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        verify(adViewControllerSpy).scheduleRefreshTimerIfEnabled();
+    }
+
+    @Test
+    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
+        final AdViewController adViewControllerSpy = spy(subject);
+
+        adViewControllerSpy.forceSetAutorefreshEnabled(true);
+        verify(adViewControllerSpy, never()).scheduleRefreshTimerIfEnabled();
+    }
+
+    @Test
+    public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
+        response.addHeader("X-Refreshtime", "30");
+        subject.configureUsingHttpResponse(response);
+
+        Robolectric.pauseMainLooper();
+
+        subject.loadAd();
+        subject.forceSetAutorefreshEnabled(true);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+
+        subject.forceSetAutorefreshEnabled(false);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
 
     @Test
     public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index 7f157fa2..cc8d91e4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -36,8 +36,11 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.support.v4.content.LocalBroadcastManager;
+
 import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
 import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.fest.util.Lists;
 import org.fest.util.Sets;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -45,7 +48,9 @@
 import org.junit.runner.RunWith;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.Set;
 
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -57,6 +62,7 @@
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index 60fcdd23..5cb2fdc1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -39,6 +39,7 @@
 import android.content.pm.ResolveInfo;
 import android.net.Uri;
 import android.webkit.WebView;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index 83c02188..e10fd2a9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -49,6 +49,7 @@
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import static android.widget.RelativeLayout.LayoutParams;
+import static com.mopub.mobileads.AdFetcher.AD_CONFIGURATION_KEY;
 import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
 import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 84acc9c3..b92eb9ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -33,6 +33,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
 import org.junit.Before;
@@ -42,14 +43,14 @@
 import java.math.BigDecimal;
 import java.util.*;
 
-import static com.mopub.common.LocationService.LocationAwareness;
+import static com.mopub.common.LocationService.*;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index db36b0a1..83ce806a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -33,19 +33,28 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.content.LocalBroadcastManager;
+import android.view.View;
+
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
 import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowApplication;
+import org.robolectric.shadows.ShadowLocalBroadcastManager;
 
 import java.util.*;
 
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
-import static com.mopub.mobileads.util.ResponseHeader.CUSTOM_EVENT_NAME;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_HTML_DATA;
+import static com.mopub.common.util.ResponseHeader.CUSTOM_EVENT_NAME;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.never;
@@ -58,15 +67,105 @@
     private Map<String,String> paramsMap = new HashMap<String, String>();
     private CustomEventBannerAdapter customEventBannerAdapter;
     private AdViewController adViewController;
+    private Context context;
 
     @Before
     public void setup() {
-        subject = new MoPubView(new Activity());
+        context = new Activity();
+        subject = new MoPubView(context);
         customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
         reset(customEventBannerAdapter);
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
+    @Test
+    public void screenStateBroadcastReceiver_withActionUserPresent_shouldUnpauseRefresh() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+
+        verify(adViewController).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withActionScreenOff_shouldPauseRefersh() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+
+        verify(adViewController).pauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withNullIntent_shouldDoNothing() throws Exception {
+        broadcastIntent(null);
+
+        verify(adViewController, never()).pauseRefresh();
+        verify(adViewController, never()).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_withRandomIntent_shouldDoNothing() throws Exception {
+        broadcastIntent(new Intent(Intent.ACTION_BATTERY_LOW));
+
+        verify(adViewController, never()).pauseRefresh();
+        verify(adViewController, never()).unpauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_whenAdInBackground_shouldDoNothing() throws Exception {
+        subject.onWindowVisibilityChanged(View.INVISIBLE);
+        reset(adViewController);
+
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+        verify(adViewController, never()).unpauseRefresh();
+
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+        verify(adViewController, never()).pauseRefresh();
+    }
+
+    @Test
+    public void screenStateBroadcastReceiver_afterOnDestroy_shouldDoNothing() throws Exception {
+        subject.destroy();
+
+        broadcastIntent(new Intent(Intent.ACTION_USER_PRESENT));
+        verify(adViewController, never()).unpauseRefresh();
+
+        broadcastIntent(new Intent(Intent.ACTION_SCREEN_OFF));
+        verify(adViewController, never()).pauseRefresh();
+    }
+
+    @Test
+    public void onWindowVisibilityChanged_toVisible_shouldUnpauseRefresh() throws Exception {
+        subject.onWindowVisibilityChanged(View.VISIBLE);
+
+        verify(adViewController).unpauseRefresh();
+    }
+
+    @Test
+    public void onWindowVisibilityChanged_toInvisible_shouldPauseRefresh() throws Exception {
+        subject.onWindowVisibilityChanged(View.INVISIBLE);
+
+        verify(adViewController).pauseRefresh();
+    }
+
+    @Test
+    public void setAutorefreshEnabled_withRefreshTrue_shouldForwardToAdViewController() throws Exception {
+        subject.setAutorefreshEnabled(true);
+
+        verify(adViewController).forceSetAutorefreshEnabled(true);
+    }
+
+    @Test
+    public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewController() throws Exception {
+        subject.setAutorefreshEnabled(false);
+
+        verify(adViewController).forceSetAutorefreshEnabled(false);
+    }
+    
+    @Test
+    public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
+        subject.nativeAdLoaded();
+
+        verify(adViewController).scheduleRefreshTimerIfEnabled();
+    }
+
     @Test
     public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
         paramsMap.put(CUSTOM_EVENT_NAME.getKey(), "name");
@@ -89,4 +188,12 @@ public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws E
         verify(customEventBannerAdapter, never()).invalidate();
         verify(customEventBannerAdapter, never()).loadAd();
     }
+
+    private void broadcastIntent(final Intent intent) {
+        final List<ShadowApplication.Wrapper> wrappers = Robolectric.getShadowApplication().getRegisteredReceivers();
+
+        for (final ShadowApplication.Wrapper wrapper : wrappers) {
+            wrapper.broadcastReceiver.onReceive(context, intent);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
index 1f5b7f18..514f9896 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
@@ -45,12 +45,14 @@
 import android.widget.FrameLayout;
 import android.widget.ImageView;
 import android.widget.RelativeLayout;
+
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.mobileads.test.support.TestMraidViewFactory;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import com.mopub.mobileads.util.MraidsTest;
+
 import org.apache.http.HttpResponse;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.junit.Before;
@@ -65,9 +67,10 @@
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
-import java.io.*;
+import java.io.File;
 import java.net.URI;
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 import static android.content.DialogInterface.BUTTON_NEGATIVE;
 import static android.content.DialogInterface.BUTTON_POSITIVE;
@@ -83,7 +86,7 @@
 import static com.mopub.mobileads.MraidCommandFactory.MraidJavascriptCommand.STORE_PICTURE;
 import static com.mopub.mobileads.MraidCommandStorePicture.MIME_TYPE_HEADER;
 import static com.mopub.mobileads.util.Mraids.ANDROID_CALENDAR_CONTENT_TYPE;
-import static java.io.File.*;
+import static java.io.File.separator;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 001176e6..2182fce4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -14,6 +14,7 @@
 import android.view.ViewGroup;
 import android.widget.ImageView;
 import android.widget.VideoView;
+
 import com.mopub.common.MoPubBrowser;
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Drawables;
@@ -22,6 +23,7 @@
 import com.mopub.mobileads.test.support.SdkTestRunner;
 import com.mopub.mobileads.util.vast.VastCompanionAd;
 import com.mopub.mobileads.util.vast.VastVideoConfiguration;
+
 import org.apache.http.HttpRequest;
 import org.apache.maven.artifact.ant.shaded.ReflectionUtils;
 import org.junit.After;
@@ -31,17 +33,20 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
+import org.robolectric.shadows.ShadowHandler;
 import org.robolectric.shadows.ShadowLocalBroadcastManager;
 import org.robolectric.shadows.ShadowVideoView;
 import org.robolectric.tester.org.apache.http.RequestMatcher;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.io.*;
-import java.util.*;
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Arrays;
 
 import static android.media.MediaPlayer.OnPreparedListener;
 import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static com.mopub.common.MoPubBrowser.DESTINATION_URL_KEY;
+import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
 import static com.mopub.mobileads.BaseVideoViewController.BaseVideoViewControllerListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiver.ACTION_INTERSTITIAL_FAIL;
@@ -145,6 +150,7 @@ public void constructor_shouldPingImpressionTrackers() throws Exception {
 
         initializeSubject();
 
+        Robolectric.getUiThreadScheduler().unPause();
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
@@ -275,7 +281,12 @@ public void onClick_withCompanionAd_shouldFireCompanionAdClickTrackersAndStartMo
         assertThat(imageView.performClick()).isTrue();
         Thread.sleep(NETWORK_DELAY);
 
-        assertHttpRequestsMade("companion_image_url", "imp", "companion_click_tracking_url_1", "companion_click_tracking_url_2");
+        assertHttpRequestsMade(
+                "companion_image_url",
+                "imp",
+                "companion_click_tracking_url_1",
+                "companion_click_tracking_url_2"
+        );
 
         ArgumentCaptor<Bundle> bundleCaptor = ArgumentCaptor.forClass(Bundle.class);
         verify(baseVideoViewControllerListener).onStartActivityForResult(
@@ -431,6 +442,7 @@ public void onTouch_whenCloseButtonVisible_shouldPingClickThroughTrackers() thro
         subject.setCloseButtonVisible(true);
 
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
+        Robolectric.getUiThreadScheduler().unPause();
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
@@ -520,6 +532,7 @@ public void onCompletion_shouldPingCompletionTrackers() throws Exception {
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
+        Robolectric.getUiThreadScheduler().unPause();
         Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
@@ -542,11 +555,11 @@ public void onCompletion_shouldStopProgressChecker() throws Exception {
         initializeSubject();
         subject.onResume();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
 
         getShadowVideoView().getOnCompletionListener().onCompletion(null);
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
     }
 
     @Test
@@ -603,14 +616,11 @@ public void onError_shouldStopProgressChecker() throws Exception {
         initializeSubject();
         subject.onResume();
 
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
 
         getShadowVideoView().getOnErrorListener().onError(null, 0, 0);
 
-        // The error event broadcasts a ACTION_INTERSTITIAL_FAIL action, so make sure the enqueued task is of that type
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        Robolectric.getUiThreadScheduler().remove(subject.getVideoProgressCheckerRunnable());
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
     }
 
     @Test
@@ -734,7 +744,8 @@ public void videoProgressCheckerRunnableRun_shouldFireOffAllProgressTrackers() t
         setMediaPlayer(mediaPlayer);
 
         // this runs the videoProgressChecker
-        Robolectric.getUiThreadScheduler().runOneTask();
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         assertHttpRequestsMade("first", "second", "third");
@@ -752,7 +763,7 @@ public void videoProgressCheckerRunnableRun_whenDurationIsInvalid_shouldNotMakeA
         initializeSubject();
         setMediaPlayer(mediaPlayer);
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
         Robolectric.getUiThreadScheduler().runOneTask();
         // make sure the repeated task hasn't run yet
@@ -776,7 +787,7 @@ public void videoProgressCheckerRunnableRun_whenCurrentTimeLessThanOneSecond_sho
         initializeSubject();
         subject.onResume();
         setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
         Robolectric.getUiThreadScheduler().runOneTask();
         // make sure the repeated task hasn't run yet
@@ -810,11 +821,10 @@ public void videoProgressCheckerRunnableRun_whenCurrentTimeGreaterThanOneSecond_
         initializeSubject();
         subject.onResume();
         setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
 
         Thread.sleep(NETWORK_DELAY);
 
@@ -843,21 +853,17 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastFirstQuartile_shou
         initializeSubject();
         subject.onResume();
         setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         assertHttpRequestsMade("first");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
         // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
         Robolectric.getUiThreadScheduler().runOneTask();
-
         Thread.sleep(NETWORK_DELAY);
 
         assertThat(Robolectric.httpRequestWasMade()).isFalse();
@@ -877,21 +883,16 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastMidQuartile_should
         initializeSubject();
         subject.onResume();
         setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         assertHttpRequestsMade("first", "second");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
-        // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
         Robolectric.getUiThreadScheduler().runOneTask();
-
         Thread.sleep(NETWORK_DELAY);
 
         assertThat(Robolectric.httpRequestWasMade()).isFalse();
@@ -912,21 +913,16 @@ public void videoProgressCheckerRunnableRun_whenProgressIsPastThirdQuartile_shou
         initializeSubject();
         subject.onResume();
         setMediaPlayer(mediaPlayer);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        Robolectric.getUiThreadScheduler().runOneTask();
-        // make sure the repeated task hasn't run yet
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(2);
 
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         assertHttpRequestsMade("first", "second", "third");
         Robolectric.getFakeHttpLayer().clearRequestInfos();
 
-        // run checker another time
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
         Robolectric.getUiThreadScheduler().runOneTask();
-
         Thread.sleep(NETWORK_DELAY);
 
         assertThat(Robolectric.httpRequestWasMade()).isFalse();
@@ -987,17 +983,17 @@ public void videoProgressCheckerRunnableRun_whenCurrentPositionIsGreaterThanShow
     }
 
     @Test
-    public void onPause_shouldStopProgressCheckerOnce() throws Exception {
+    public void onPause_shouldStopProgressChecker() throws Exception {
         initializeSubject();
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
 
         subject.onPause();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
 
         subject.onPause();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
     }
 
     @Test
@@ -1005,16 +1001,16 @@ public void onResume_shouldStartVideoProgressCheckerOnce() throws Exception {
         initializeSubject();
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
 
         subject.onPause();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isFalse();
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
 
         subject.onResume();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+        assertThat(subject.getIsVideoProgressShouldBeChecked()).isTrue();
     }
 
     @Test
@@ -1092,18 +1088,10 @@ private void setMediaPlayer(final MediaPlayer mediaPlayer) throws IllegalAccessE
         ReflectionUtils.setVariableValueInObject(videoView, "mCurrentState", state);
     }
 
-    private void assertHttpRequestsMade(String... urls) {
-        final int numberOfReceivedHttpRequests = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size();
-        assertThat(numberOfReceivedHttpRequests).isEqualTo(urls.length);
-
-        for (final String url : urls) {
-            assertThat(Robolectric.httpRequestWasMade(url)).isTrue();
-        }
-    }
-
     private void fastForwardMediaPlayerAndAssertRequestMade(int time, String... urls) throws Exception {
         stub(mediaPlayer.getCurrentPosition()).toReturn(time);
-        Robolectric.getUiThreadScheduler().runOneTask();
+        Robolectric.getUiThreadScheduler().unPause();
+        Robolectric.getBackgroundScheduler().unPause();
         Thread.sleep(NETWORK_DELAY);
 
         if (urls == null) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
index 1569764a..dae3c5f6 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
@@ -1,6 +1,6 @@
 package com.mopub.mobileads.test.support;
 
-import com.mopub.mobileads.util.Json;
+import com.mopub.common.util.Json;
 
 import java.util.Collections;
 import java.util.Map;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
index 925dfdeb..db63f8ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
@@ -36,7 +36,8 @@
 import org.apache.http.message.BasicHeader;
 import org.robolectric.tester.org.apache.http.TestHttpResponse;
 
-import java.util.*;
+import java.util.HashMap;
+import java.util.Map;
 
 public class TestHttpResponseWithHeaders extends TestHttpResponse {
     private Map<String, Header> headers;
@@ -55,4 +56,9 @@ public void addHeader(String name, String value) {
     public Header getFirstHeader(String name) {
         return headers.get(name);
     }
+
+    @Override
+    public Header[] getAllHeaders() {
+        return headers.values().toArray(new Header[headers.size()]);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
index 23eefb48..5ab561b1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
@@ -38,8 +38,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
-import static com.mopub.mobileads.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.mobileads.util.ResponseHeader.SCROLLABLE;
+import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
+import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java
deleted file mode 100644
index dfb3f697..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpUtilsTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-/*
- * Copyright (c) 2010-2013, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- *  Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- *  Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- *  Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.io.*;
-import java.util.*;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
-
-@RunWith(SdkTestRunner.class)
-public class HttpUtilsTest {
-
-    TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "woot");
-    }
-
-    @Test
-    public void ping_shouldSendNetworkRequestAndGetResponse() throws Exception {
-        Robolectric.addPendingHttpResponse(response);
-
-        HttpResponse expectedResponse = HttpUtils.ping("http://myurl.tv");
-
-        Scanner scanner = new Scanner(new InputStreamReader(expectedResponse.getEntity().getContent()));
-        StringBuilder content = new StringBuilder();
-        while (scanner.hasNext()) {
-            content.append(scanner.next());
-        }
-
-        assertThat(content.toString()).isEqualTo("woot");
-    }
-
-    @Test
-    public void ping_withNullUrl_shouldThrowException() throws Exception {
-        try {
-            HttpUtils.ping(null);
-            fail("logic error - should have thrown IllegalArgumentException");
-        } catch (Exception exception) {
-            assertThat(exception).isInstanceOf(IllegalArgumentException.class);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index 0d4d3c36..db692e8b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -9,6 +9,7 @@
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
 
 @RunWith(SdkTestRunner.class)
 public class AdapterHelperTest {
@@ -21,6 +22,25 @@
     @Before
     public void setUp() throws Exception {
         context = new Activity();
+        start = 1;
+        interval = 2;
+        subject = new AdapterHelper(context, start, interval);
+    }
+
+    @Test
+    public void constructor_whenPassedAnApplicationContext_shouldThrowIllegalArgumentException() throws Exception {
+        try {
+            new AdapterHelper(context.getApplicationContext(), start, interval);
+            fail("Expected IllegalArgumentException to be thrown");
+        } catch (IllegalArgumentException e) {
+            assertThat(e.getMessage()).isEqualTo("Illegal argument: Context must be instance of Activity.");
+        }
+    }
+
+    @Test
+    public void getAdView_withNullActivityContext_shouldReturnEmptyViewWithApplicationContext() throws Exception {
+        subject.clearActivityContext();
+        assertThat(subject.getAdView(null, null, null, null, null).getContext()).isEqualTo(context.getApplication());
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
new file mode 100644
index 00000000..f88d5f81
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseForwardingNativeAdTest.java
@@ -0,0 +1,100 @@
+package com.mopub.nativeads;
+
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+
+@RunWith(SdkTestRunner.class)
+public class BaseForwardingNativeAdTest {
+
+    private BaseForwardingNativeAd subject;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new BaseForwardingNativeAd() {};
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        ImpressionTrackingManager.purgeViews();
+    }
+
+    @Test
+    public void constructor_shouldInitializeMembers() throws Exception {
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(1000);
+        assertThat(subject.getImpressionTrackers()).isEmpty();
+        assertThat(subject.getExtras()).isEmpty();
+    }
+
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIsGreaterThan0_shouldSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+
+    @Test
+    public void setImpressionMinTimeViewed_whenTimeIsLessThan0_shouldNotSetTime() throws Exception {
+        subject.setImpressionMinTimeViewed(250);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+
+        subject.setImpressionMinTimeViewed(-1);
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(250);
+    }
+    
+    @Test
+    public void setStarRating_withinValidRange_shouldSetStarRating() throws Exception {
+        subject.setStarRating(0.0);
+        assertThat(subject.getStarRating()).isEqualTo(0.0);
+
+        subject.setStarRating(5.0);
+        assertThat(subject.getStarRating()).isEqualTo(5.0);
+
+        subject.setStarRating(2.5);
+        assertThat(subject.getStarRating()).isEqualTo(2.5);
+    }
+
+    @Test
+    public void setStarRating_withNull_shouldSetStarRatingToNull() throws Exception {
+        // Setting star rating to 0 before each case, so we can detect when it gets set to null
+        final double initialStarRating = 0.0;
+
+        subject.setStarRating(initialStarRating);
+        subject.setStarRating(null);
+        assertThat(subject.getStarRating()).isEqualTo(null);
+    }
+
+    @Test
+    public void setStarRating_withNanOrInf_shouldNotSetStarRating() throws Exception {
+        // First, set star rating to a valid value
+        final double initialStarRating = 3.75;
+        subject.setStarRating(initialStarRating);
+
+        subject.setStarRating(Double.NaN);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(Double.POSITIVE_INFINITY);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(Double.NEGATIVE_INFINITY);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+    }
+    
+    @Test
+    public void setStarRating_withValuesOutsideOfValidRange_shouldNotSetStarRating() throws Exception {
+        // First, set star rating to a valid value
+        final double initialStarRating = 4.9;
+        subject.setStarRating(initialStarRating);
+
+        subject.setStarRating(5.0001);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+
+        subject.setStarRating(-0.001);
+        assertThat(subject.getStarRating()).isEqualTo(initialStarRating);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
new file mode 100644
index 00000000..1939b6c5
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -0,0 +1,82 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+import com.mopub.nativeads.test.support.TestCustomEventNativeFactory;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.HashMap;
+
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class CustomEventNativeAdapterTest {
+
+    private Activity context;
+    private DownloadResponse downloadResponse;
+    private HashMap<String, Object> localExtras;
+    private CustomEventNative.CustomEventNativeListener mCustomEventNativeListener;
+    private CustomEventNative mCustomEventNative;
+    private HashMap<String, String> serverExtras;
+    private TestHttpResponseWithHeaders testHttpResponseWithHeaders;
+
+    @Before
+    public void setUp() throws Exception {
+        context = new Activity();
+
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+        serverExtras.put("key", "value");
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "body");
+
+        testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "body");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"key\" : \"value\" }");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.nativeads.MoPubCustomEventNative");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
+
+        mCustomEventNative = TestCustomEventNativeFactory.getSingletonMock();
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.baaad.invalidinvalid123143");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+        verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{ \"bad json");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        serverExtras.remove("key");
+
+        CustomEventNativeAdapter.loadNativeAd(context, localExtras, downloadResponse, mCustomEventNativeListener);
+        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(NativeAdInterface.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
index c61d1c58..55e792e5 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImageServiceTest.java
@@ -4,9 +4,11 @@
 import android.content.Context;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.CacheServiceTest;
 import com.mopub.nativeads.test.support.SdkTestRunner;
+
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -16,9 +18,14 @@
 import org.robolectric.Robolectric;
 import org.robolectric.tester.org.apache.http.FakeHttpLayer;
 
-import java.io.*;
-import java.util.*;
-import java.util.concurrent.*;
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.Semaphore;
 
 import static com.mopub.nativeads.ImageService.ImageServiceListener;
 import static org.fest.assertions.api.Assertions.assertThat;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
index c6445a99..37ba7dd1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackingManagerTest.java
@@ -5,10 +5,11 @@
 import android.graphics.Rect;
 import android.view.View;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
@@ -39,19 +40,26 @@
 
     private View view;
     private NativeResponse nativeResponse;
+    private NativeResponseWrapper nativeResponseWrapper;
     private Context context;
     private MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
 
     @Before
     public void setUp() throws Exception {
+        ImpressionTrackingManager.purgeViews();
+
         context = new Activity();
         mopubNativeListener = mock(MoPubNativeListener.class);
         view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+
+        final BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "url1");
+        final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, mopubNativeListener);
+        nativeResponseWrapper = new NativeResponseWrapper(nativeResponse);
+
         Robolectric.addPendingHttpResponse(new TestHttpResponse(200, ""));
 
         // We need this to ensure that our SystemClock starts
@@ -89,7 +97,7 @@ public void stop_beforeStartIsCalled_doesNothing() throws Exception {
 
     @Test
     public void addView_shouldAddViewToHashMap() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).hasSize(1);
         assertThat(keptViews.get(view).mNativeResponse).isEqualTo(nativeResponse);
@@ -97,14 +105,14 @@ public void addView_shouldAddViewToHashMap() throws Exception {
 
     @Test
     public void addView_whenViewIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(null, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(null, nativeResponse);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).isEmpty();
     }
 
     @Test
     public void addView_whenNativeResponseIsNull_shouldNotAddView() throws Exception {
-        ImpressionTrackingManager.addView(view, null, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, null);
         Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
         assertThat(keptViews).isEmpty();
     }
@@ -114,8 +122,8 @@ public void removeView_shouldRemoveViewFromKeptViews() throws Exception {
         View view1 = mock(View.class);
         View view2 = mock(View.class);
 
-        ImpressionTrackingManager.addView(view1, nativeResponse, mopubNativeListener);
-        ImpressionTrackingManager.addView(view2, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view1, nativeResponse);
+        ImpressionTrackingManager.addView(view2, nativeResponse);
         assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(2);
 
         ImpressionTrackingManager.removeView(view2);
@@ -134,7 +142,7 @@ public void removeView_whenThereAreNoKeptViews_shouldDoNothing() throws Exceptio
 
     @Test
     public void removeView_whenViewIsNull_shouldDoNothing() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         assertThat(ImpressionTrackingManager.getKeptViews()).hasSize(1);
         ImpressionTrackingManager.removeView(null);
@@ -143,51 +151,54 @@ public void removeView_whenViewIsNull_shouldDoNothing() throws Exception {
 
     @Test
     public void visibilityCheckRun_whenWrapperIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         // This doesn't normally happen; perhaps we're being overly defensive
         ImpressionTrackingManager.getKeptViews().put(view, null);
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenNativeResponseIsNull_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         // This doesn't normally happen; perhaps we're being overly defensive
-        ImpressionTrackingManager.getKeptViews().put(view, new NativeResponseWrapper(null, null));
+        ImpressionTrackingManager.getKeptViews().put(view, new NativeResponseWrapper(null));
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenNativeResponseHasRecordedImpression_shouldNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
-        nativeResponse.recordImpression();
-        assertThat(nativeResponse.getRecordedImpression()).isTrue();
+        ImpressionTrackingManager.addView(view, nativeResponse);
+        nativeResponse.recordImpression(view);
+        assertImpressionTracked(true);
+
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(mopubNativeListener);
 
         new VisibilityCheck().run();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenViewIsInvisible_shouldNotTrackImpression() throws Exception {
         view.setVisibility(View.INVISIBLE);
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         new VisibilityCheck().run();
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsZero_shouldUpdateTimestampAndNotTrackImpression() throws Exception {
-        ImpressionTrackingManager.addView(view, nativeResponse, mopubNativeListener);
+        ImpressionTrackingManager.addView(view, nativeResponse);
 
         assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(0);
 
@@ -196,13 +207,12 @@ public void visibilityCheckRun_whenLastViewedTimestampIsZero_shouldUpdateTimesta
 
         assertThat(ImpressionTrackingManager.getKeptViews().get(view).mFirstVisibleTimestamp).isEqualTo(111);
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndLessThanOneSecondHasElapsed_shouldNotTrackImpression() throws Exception {
         // Force the last viewed timestamp to be a known value
-        NativeResponseWrapper nativeResponseWrapper = new NativeResponseWrapper(nativeResponse, mopubNativeListener);
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
         ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
 
@@ -211,14 +221,13 @@ public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndLessThanOneSec
         new VisibilityCheck().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isFalse();
-        assertImpressionTracked(nativeResponse, false);
+        assertImpressionTracked(false);
     }
 
     @Ignore("Review race condition")
     @Test
     public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndMoreThanOneSecondHasElapsed_shouldTrackImpression() throws Exception {
         // Force the last viewed timestamp to be a known value
-        NativeResponseWrapper nativeResponseWrapper = new NativeResponseWrapper(nativeResponse, mopubNativeListener);
         nativeResponseWrapper.mFirstVisibleTimestamp = 5555;
         ImpressionTrackingManager.getKeptViews().put(view, nativeResponseWrapper);
 
@@ -227,57 +236,58 @@ public void visibilityCheckRun_whenLastViewedTimestampIsNotZeroAndMoreThanOneSec
         new VisibilityCheck().run();
 
         assertThat(nativeResponse.getRecordedImpression()).isTrue();
-        assertImpressionTracked(nativeResponse, true);
+        assertImpressionTracked(true);
     }
 
     @Test
     public void isVisible_whenViewIsEntirelyOnScreen_shouldReturnTrue() throws Exception {
         view = getViewMock(View.VISIBLE, 100, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isTrue();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
     }
 
     @Test
     public void isVisible_whenViewIs50PercentVisible_shouldReturnTrue() throws Exception {
         view = getViewMock(View.VISIBLE, 50, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isTrue();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isTrue();
     }
 
     @Test
     public void isVisible_whenViewIs49PercentVisible_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 49, 100, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenVisibleAreaIsZero_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 0, 0, 100, 100);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenViewIsInvisibleOrGone_shouldReturnFalse() throws Exception {
         View view = getViewMock(View.INVISIBLE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
 
         reset(view);
         view = getViewMock(View.GONE, 100, 100, 100, 100);
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
     public void isVisible_whenViewHasZeroWidthAndHeight_shouldReturnFalse() throws Exception {
         view = getViewMock(View.VISIBLE, 100, 100, 0, 0);
 
-        assertThat(VisibilityCheck.isVisible(view)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, nativeResponseWrapper)).isFalse();
     }
 
     @Test
-    public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
-        assertThat(VisibilityCheck.isVisible(null)).isFalse();
+    public void isVisible_whenViewOrNativeResponseWrapperIsNull_shouldReturnFalse() throws Exception {
+        assertThat(VisibilityCheck.isVisible(null, nativeResponseWrapper)).isFalse();
+        assertThat(VisibilityCheck.isVisible(view, null)).isFalse();
     }
 
     private View getViewMock(final int visibility,
@@ -302,7 +312,7 @@ public Boolean answer(InvocationOnMock invocationOnMock) throws Throwable {
         return view;
     }
 
-    private void assertImpressionTracked(final NativeResponse nativeResponseMock, final boolean wasTracked) {
+    private void assertImpressionTracked(final boolean wasTracked) {
         // Ensure that we fired off the HttpGets for each of the impression trackers
         if (wasTracked) {
             assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos().size()).isEqualTo(1);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
new file mode 100644
index 00000000..464ee48a
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -0,0 +1,118 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.common.CacheService;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.apache.http.HttpRequest;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.FakeHttpLayer;
+import org.robolectric.tester.org.apache.http.RequestMatcher;
+import org.robolectric.tester.org.apache.http.TestHttpResponse;
+
+import java.util.HashMap;
+
+import static com.mopub.common.util.test.support.CommonUtils.assertHttpRequestsMade;
+import static com.mopub.nativeads.CustomEventNative.CustomEventNativeListener;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubCustomEventNativeTest {
+
+    private MoPubCustomEventNative subject;
+    private Activity context;
+    private HashMap<String, Object> localExtras;
+    private CustomEventNativeListener mCustomEventNativeListener;
+    private HashMap<String, String> serverExtras;
+    private JSONObject fakeJsonObject;
+    private FakeHttpLayer fakeHttpLayer;
+
+    @Before
+    public void setUp() throws Exception {
+        subject = new MoPubCustomEventNative();
+        context = new Activity();
+
+        localExtras = new HashMap<String, Object>();
+        serverExtras = new HashMap<String, String>();
+
+        fakeJsonObject = new JSONObject();
+        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        fakeJsonObject.put("clktracker", "expected clicktracker");
+        fakeJsonObject.put("mainimage", "mainimageurl");
+        fakeJsonObject.put("iconimage", "iconimageurl");
+        fakeJsonObject.put("extraimage", "extraimageurl");
+
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
+
+        mCustomEventNativeListener = mock(CustomEventNativeListener.class);
+
+        fakeHttpLayer = Robolectric.getFakeHttpLayer();
+        fakeHttpLayer.addHttpResponseRule(
+                new RequestMatcher() {
+                    @Override
+                    public boolean matches(HttpRequest request) {
+                        return true;
+                    }
+                },
+                new TestHttpResponse(200, "body")
+        );
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        CacheService.clearAndNullCaches();
+        reset(mCustomEventNativeListener);
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_shouldDownloadImagesAndNotifyListenerOfOnNativeAdLoaded() throws Exception {
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+
+        assertHttpRequestsMade("mainimageurl", "iconimageurl", "extraimageurl");
+
+        verify(mCustomEventNativeListener).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
+    }
+
+    @Test
+    public void loadNativeAd_withValidInput_withFailedImageDownload_shouldNotDownloadImagesAndNotifyListenerOfOnNativeAdFailed() throws Exception {
+        fakeHttpLayer.clearHttpResponseRules();
+        fakeHttpLayer.addPendingHttpResponse(500, "body");
+
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, fakeJsonObject.toString());
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.IMAGE_DOWNLOAD_FAILURE);
+    }
+
+    @Test
+    public void loadNativeAd_withInvalidResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, "{ \"bad json");
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_JSON);
+    }
+
+    @Test
+    public void loadNativeAd_withNullResponseBody_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+        serverExtras.put(CustomEventNativeAdapter.RESPONSE_BODY_KEY, null);
+
+        subject.loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
+        verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(MoPubCustomEventNative.MoPubForwardingNativeAd.class));
+        verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
new file mode 100644
index 00000000..e46755ee
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubForwardingNativeAdTest.java
@@ -0,0 +1,249 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+
+import com.mopub.mobileads.test.support.SdkTestRunner;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+
+import static com.mopub.nativeads.NativeResponse.Parameter;
+import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.fest.assertions.api.Assertions.fail;
+
+@RunWith(SdkTestRunner.class)
+public class MoPubForwardingNativeAdTest {
+
+    private JSONObject fakeJsonObject;
+    private MoPubCustomEventNative.MoPubForwardingNativeAd subject;
+
+    @Before
+    public void setUp() throws Exception {
+        fakeJsonObject = new JSONObject();
+        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
+        fakeJsonObject.put("clktracker", "expected clicktracker");
+    }
+
+    @Test
+    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
+        final HashSet<String> expectedKeys = new HashSet<String>();
+        expectedKeys.add("imptracker");
+        expectedKeys.add("clktracker");
+
+        assertThat(requiredKeys).isEqualTo(expectedKeys);
+    }
+
+    @Test
+    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
+        final Parameter parameter = Parameter.from("title");
+
+        assertThat(parameter).isEqualTo(Parameter.TITLE);
+    }
+
+    @Test
+    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
+        final Parameter parameter = Parameter.from("random gibberish");
+
+        assertThat(parameter).isNull();
+    }
+
+    @Test
+    public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
+        fakeJsonObject.remove("imptracker");
+
+        try {
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            fail("Expected IllegalArgumentException");
+        } catch (IllegalArgumentException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void constructor_whenRequiredKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
+        fakeJsonObject.put("imptracker", 12345);
+
+        try {
+            subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+            fail("Expected IllegalArgumentException");
+        } catch (IllegalArgumentException e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void constructor_shouldSetRequiredExpectedFields() throws Exception {
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
+    }
+
+    @Test
+    public void constructor_shouldSetOptionalExpectedFields() throws Exception {
+        fakeJsonObject.put("title", "expected title");
+        fakeJsonObject.put("text", "expected text");
+        fakeJsonObject.put("mainimage", "expected mainimage");
+        fakeJsonObject.put("iconimage", "expected iconimage");
+
+        fakeJsonObject.put("clk", "expected clk");
+
+        fakeJsonObject.put("fallback", "expected fallback");
+        fakeJsonObject.put("ctatext", "expected ctatext");
+        fakeJsonObject.put("starrating", 5.0);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getTitle()).isEqualTo("expected title");
+        assertThat(subject.getText()).isEqualTo("expected text");
+        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
+        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
+
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
+
+//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
+        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
+        assertThat(subject.getStarRating()).isEqualTo(5.0);
+    }
+
+    @Test
+    public void constructor_withIntegerStarRating_shouldSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", 3);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isEqualTo(3.0);
+    }
+
+    @Test
+    public void constructor_withStringStarRating_shouldSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", "2.3");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isEqualTo(2.3);
+    }
+    
+    @Test
+    public void constructor_withInvalidStringStarRating_shouldNotSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", "this is not a number");
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isNull();
+    }
+
+    @Test
+    public void constructor_withInvalidlyTypedStarRating_shouldNotSetStarRating() throws Exception {
+        fakeJsonObject.put("starrating", new Activity());
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getStarRating()).isNull();
+    }
+
+    @Test
+    public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
+        /**
+         * At this level of abstraction, we don't actually care that these Strings resolve to valid
+         * URLs. We just want to ensure that the constructor does not throw an exception.
+         */
+        final JSONArray impressionTrackers = new JSONArray();
+        impressionTrackers.put("url1");
+        impressionTrackers.put(JSONObject.NULL);
+        impressionTrackers.put(2.12);
+        fakeJsonObject.put("imptracker", impressionTrackers);
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
+    }
+
+    @Test
+    public void constructor_shouldSetExtraFields() throws Exception {
+        List<Object> array = new ArrayList<Object>();
+        array.add("index1");
+        array.add(-10);
+
+        Map<String, Object> map = new HashMap<String, Object>();
+        map.put("one", "a");
+        map.put("two", "b");
+
+        fakeJsonObject.put("key1", "yay json");
+        fakeJsonObject.put("key2", 5);
+        fakeJsonObject.put("key3", new JSONArray(array));
+        fakeJsonObject.put("key4", new JSONObject(map));
+
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
+        assertThat(subject.getExtra("key2")).isEqualTo(5);
+        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
+        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
+    }
+
+    @Ignore("pending")
+    @Test
+    public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
+        // no easy way to test this since nothing can be mocked
+        // also not a critical test since it directly calls another service
+    }
+
+    @Test
+    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
+        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
+        fakeJsonObject.put("test_image", "image_url_1");
+        fakeJsonObject.put("filler", "ignored");
+        fakeJsonObject.put("otherIMAGE", "image_url_2");
+        fakeJsonObject.put("more filler", "ignored");
+        fakeJsonObject.put("lastimage", "image_url_3");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
+    }
+
+
+    @Test
+    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
+        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
+        fakeJsonObject.put("imageAtFront", "ignored");
+        fakeJsonObject.put("middle_image_in_key", "ignored");
+        fakeJsonObject.put("other", "ignored");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getExtrasImageUrls()).isEmpty();
+    }
+
+    @Test
+    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldReturnAllUrls() throws Exception {
+        fakeJsonObject.put("mainimage", "mainImageUrl");
+        fakeJsonObject.put("iconimage", "iconImageUrl");
+        fakeJsonObject.put("extraimage", "extraImageUrl");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getAllImageUrls()).containsOnly(
+                "mainImageUrl",
+                "iconImageUrl",
+                "extraImageUrl"
+        );
+    }
+
+    @Test
+    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
+        fakeJsonObject.put("extra1_image", "expected extra1_image");
+        fakeJsonObject.put("extra2_image", "expected extra2_image");
+        subject = new MoPubCustomEventNative.MoPubForwardingNativeAd(fakeJsonObject.toString());
+
+        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 8e348801..fa766fb8 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -15,6 +15,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
 
 import java.util.concurrent.Semaphore;
 
@@ -22,9 +23,11 @@
 import static android.Manifest.permission.INTERNET;
 import static com.mopub.common.util.Reflection.MethodBuilder;
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
+import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -35,18 +38,18 @@
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
     private Activity context;
-    private RequestParameters requestParameters;
     private MoPubNative.NativeGpsHelperListener nativeGpsHelperListener;
     private Semaphore semaphore;
     private static final String adUnitId = "test_adunit_id";
+    private MoPubNativeListener moPubNativeListener;
 
     @Before
     public void setup() {
         context = new Activity();
         shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         shadowOf(context).grantPermissions(INTERNET);
-        requestParameters = new RequestParameters.Builder().build();
-        subject = new MoPubNative(context, adUnitId, mock(MoPubNativeListener.class));
+        moPubNativeListener = mock(MoPubNativeListener.class);
+        subject = new MoPubNative(context, adUnitId, moPubNativeListener);
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
         nativeGpsHelperListener = mock(MoPubNative.NativeGpsHelperListener.class);
         semaphore = new Semaphore(0);
@@ -82,7 +85,7 @@ public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shoul
                 adInfo.LIMIT_AD_TRACKING_ENABLED
         );
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         semaphore.acquire();
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
@@ -90,17 +93,18 @@ public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shoul
     }
 
     @Test
-    public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
+    public void makeRequest_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws Exception {
         SharedPreferencesHelper.getSharedPreferences(context).edit().clear().commit();
         GpsHelperTest.verifyCleanSharedPreferences(context);
 
         GpsHelper.setClassNamesForTesting();
         when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
         when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+
         // return error code so it fails
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
@@ -108,7 +112,24 @@ public void loadAd_whenGooglePlayServicesIsNotLinked_shouldFetchAdFast() throws
     }
 
     @Test
-    public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
+    public void makeRequest_whenGooglePlayServicesIsNotLinked_withNullContext_shouldReturnFast() throws Exception {
+        subject.destroy();
+
+        GpsHelper.setClassNamesForTesting();
+        when(methodBuilder.setStatic(any(Class.class))).thenReturn(methodBuilder);
+        when(methodBuilder.addParam(any(Class.class), any())).thenReturn(methodBuilder);
+
+        // return error code so it fails
+        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
+
+        subject.makeRequest(nativeGpsHelperListener);
+        // no need to sleep since it run the callback without an async task
+
+        verify(nativeGpsHelperListener, never()).onFetchAdInfoCompleted();
+    }
+
+    @Test
+    public void makeRequest_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAdFast() throws Exception {
         GpsHelperTest.TestAdInfo adInfo = new GpsHelperTest.TestAdInfo();
         GpsHelperTest.populateAndVerifySharedPreferences(context, adInfo);
         GpsHelper.setClassNamesForTesting();
@@ -119,10 +140,41 @@ public void loadAd_whenGooglePlayServicesIsLinkedAndAdInfoIsCached_shouldFetchAd
                 GpsHelper.GOOGLE_PLAY_SUCCESS_CODE
         );
 
-        subject.makeRequest(requestParameters, nativeGpsHelperListener);
+        subject.makeRequest(nativeGpsHelperListener);
         // no need to sleep since it run the callback without an async task
 
         verify(nativeGpsHelperListener).onFetchAdInfoCompleted();
         GpsHelperTest.verifySharedPreferences(context, adInfo);
     }
+
+    @Test
+    public void destroy_shouldSetMoPubNativeListenerToEmptyAndClearContext() throws Exception {
+        assertThat(subject.getContextOrDestroy()).isSameAs(context);
+        assertThat(subject.getMoPubNativeListener()).isSameAs(moPubNativeListener);
+
+        subject.destroy();
+
+        assertThat(subject.getContextOrDestroy()).isNull();
+        assertThat(subject.getMoPubNativeListener()).isSameAs(MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER);
+    }
+
+    @Ignore("pending")
+    @Test
+    public void loadNativeAd_shouldQueueAsyncDownloadTask() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.loadNativeAd(null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
+    }
+
+    @Test
+    public void loadNativeAd_shouldReturnFast() throws Exception {
+        Robolectric.getUiThreadScheduler().pause();
+
+        subject.destroy();
+        subject.loadNativeAd(null);
+
+        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 6dbb346e..ad1e8d90 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -9,12 +9,12 @@
 import android.widget.RelativeLayout;
 import android.widget.TextView;
 
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Utils;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -23,6 +23,7 @@
 import static com.mopub.nativeads.MoPubNative.MoPubNativeListener;
 import static com.mopub.nativeads.NativeAdViewHelper.NativeViewClickListener;
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 
 @RunWith(SdkTestRunner.class)
 public class NativeAdViewHelperTest {
@@ -30,9 +31,8 @@
     private RelativeLayout relativeLayout;
     private ViewGroup viewGroup;
     private NativeResponse nativeResponse;
+    private BaseForwardingNativeAd mNativeAd;
     private ViewBinder viewBinder;
-    private MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
     private TextView titleView;
     private TextView textView;
     private TextView callToActionView;
@@ -46,10 +46,12 @@ public void setUp() throws Exception {
         relativeLayout.setId((int) Utils.generateUniqueId());
         viewGroup = new LinearLayout(context);
 
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        mNativeAd = new BaseForwardingNativeAd() {};
+        mNativeAd.setClickDestinationUrl("destinationUrl");
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "clickTrackerUrl");
+        final DownloadResponse downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+        nativeResponse = new NativeResponse(context, downloadResponse, mNativeAd, mock(MoPubNativeListener.class));
 
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
@@ -77,10 +79,6 @@ public void setUp() throws Exception {
                 .build();
     }
 
-    @After
-    public void tearDown() throws Exception {
-    }
-
     @Test
     public void getAdView_whenCallToActionIsAButton_shouldAttachClickListenersToConvertViewAndCtaButton() throws Exception {
         assertThat(relativeLayout.performClick()).isFalse();
@@ -134,7 +132,7 @@ public void getOrCreateNativeViewHolder_whenViewTagHasNativeViewHolder_shouldNot
 
     @Test
     public void onClick_shouldQueueClickTrackerAndUrlResolutionTasks() throws Exception {
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(context, "clickTrackerUrl", "destinationUrl", null);
+        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
 
         Robolectric.getBackgroundScheduler().pause();
         assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
@@ -145,7 +143,9 @@ public void onClick_shouldQueueClickTrackerAndUrlResolutionTasks() throws Except
 
     @Test
     public void onClick_withNullDestinationUrl_shouldNotQueueUrlResolutionTask() throws Exception {
-        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(context, "clickTrackerUrl", null, null);
+        mNativeAd.setClickDestinationUrl(null);
+
+        NativeViewClickListener nativeViewClickListener = new NativeViewClickListener(nativeResponse);
 
         Robolectric.getBackgroundScheduler().pause();
         assertThat(Robolectric.getBackgroundScheduler().enqueuedTaskCount()).isEqualTo(0);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
index 9bb3abb9..d4fb9ffe 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeResponseTest.java
@@ -1,268 +1,303 @@
 package com.mopub.nativeads;
 
-import com.mopub.mobileads.test.support.SdkTestRunner;
+import android.app.Activity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
+import com.mopub.common.DownloadResponse;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.tester.org.apache.http.HttpRequestInfo;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 
-import static com.mopub.nativeads.NativeResponse.Parameter;
-import static com.mopub.nativeads.NativeResponse.Parameter.requiredKeys;
+import static com.mopub.nativeads.ImpressionTrackingManager.NativeResponseWrapper;
+import static com.mopub.nativeads.MoPubNative.MoPubNativeListener.EMPTY_MOPUB_NATIVE_LISTENER;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Assertions.fail;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 public class NativeResponseTest {
 
-    private JSONObject fakeJsonObject;
     private NativeResponse subject;
+    private BaseForwardingNativeAd mNativeAd;
+    private Activity context;
+    private ViewGroup view;
+    private MoPubNative.MoPubNativeListener moPubNativeListener;
+    private NativeResponse subjectWMockBaseNativeAd;
+    private NativeAdInterface mMockNativeAd;
+    private boolean baseNativeAdRecordedImpression;
+    private boolean baseNativeAdIsClicked;
+    private DownloadResponse downloadResponse;
 
     @Before
     public void setUp() throws Exception {
-        fakeJsonObject = new JSONObject();
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
+        context = new Activity();
+        mNativeAd = new BaseForwardingNativeAd() {
+            @Override
+            public void recordImpression() {
+                baseNativeAdRecordedImpression = true;
+            }
+
+            @Override
+            public void handleClick(final View view) {
+                baseNativeAdIsClicked = true;
+            }
+        };
+        mNativeAd.setTitle("title");
+        mNativeAd.setText("text");
+        mNativeAd.setMainImageUrl("mainImageUrl");
+        mNativeAd.setIconImageUrl("iconImageUrl");
+        mNativeAd.setClickDestinationUrl("clickDestinationUrl");
+        mNativeAd.setCallToAction("callToAction");
+        mNativeAd.addExtra("extra", "extraValue");
+        mNativeAd.addExtra("extraImage", "extraImageUrl");
+        mNativeAd.addImpressionTracker("impressionUrl");
+        mNativeAd.setImpressionMinTimeViewed(500);
+
+        view = new LinearLayout(context);
+
+        final TestHttpResponseWithHeaders testHttpResponseWithHeaders = new TestHttpResponseWithHeaders(200, "");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.IMPRESSION_URL.getKey(), "moPubImpressionTrackerUrl");
+        testHttpResponseWithHeaders.addHeader(ResponseHeader.CLICKTHROUGH_URL.getKey(), "moPubClickTrackerUrl");
+        downloadResponse = new DownloadResponse(testHttpResponseWithHeaders);
+
+        moPubNativeListener = mock(MoPubNative.MoPubNativeListener.class);
+
+        subject = new NativeResponse(context, downloadResponse, mNativeAd, moPubNativeListener);
+
+        mMockNativeAd = mock(NativeAdInterface.class);
+        subjectWMockBaseNativeAd = new NativeResponse(context, downloadResponse, mMockNativeAd, moPubNativeListener);
     }
 
-    @Test
-    public void parameter_requiredKeys_shouldOnlyContainTheRequiredKeys() throws Exception {
-        final HashSet<String> expectedKeys = new HashSet<String>();
-        expectedKeys.add("imptracker");
-        expectedKeys.add("clktracker");
-
-        assertThat(requiredKeys).isEqualTo(expectedKeys);
+    @After
+    public void tearDown() throws Exception {
+        ImpressionTrackingManager.purgeViews();
     }
 
     @Test
-    public void parameter_fromString_shouldReturnParameterOnMatch() throws Exception {
-        final Parameter parameter = Parameter.from("title");
-
-        assertThat(parameter).isEqualTo(Parameter.TITLE);
+    public void getTitle_shouldReturnTitleFromBaseNativeAd() throws Exception {
+        assertThat(subject.getTitle()).isEqualTo("title");
     }
 
     @Test
-    public void parameter_fromString_shouldReturnNullOnIllegalKey() throws Exception {
-        final Parameter parameter = Parameter.from("random gibberish");
-
-        assertThat(parameter).isNull();
+    public void getTitle_shouldReturnTextFromBaseNativeAd() throws Exception {
+        assertThat(subject.getText()).isEqualTo("text");
     }
 
     @Test
-    public void constructor_whenMissingRequiredKeys_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.remove("imptracker");
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getMainImageUrl_shouldReturnMainImageUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getMainImageUrl()).isEqualTo("mainImageUrl");
     }
 
     @Test
-    public void constructor_whenExpectedKeyOfWrongType_shouldThrowIllegalArgumentException() throws Exception {
-        fakeJsonObject.put("clktracker", 100);
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getIconImageUrl_shouldReturnIconImageUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getIconImageUrl()).isEqualTo("iconImageUrl");
     }
 
     @Test
-    public void constructor_shouldSetRequiredExpectedFields() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getClickTracker()).isEqualTo("expected clicktracker");
+    public void getClickDestinationUrl_shouldReturnClickDestinationUrlFromBaseNativeAd() throws Exception {
+        assertThat(subject.getClickDestinationUrl()).isEqualTo("clickDestinationUrl");
     }
 
     @Test
-    public void constructor_shouldSetOptionalExpectedFields() throws Exception {
-        fakeJsonObject.put("title", "expected title");
-        fakeJsonObject.put("text", "expected text");
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
-
-        fakeJsonObject.put("clk", "expected clk");
-
-        fakeJsonObject.put("fallback", "expected fallback");
-        fakeJsonObject.put("ctatext", "expected ctatext");
-        fakeJsonObject.put("starrating", 5.0);
-
-        subject = new NativeResponse(fakeJsonObject);
+    public void getCallToAction_shouldReturnCallToActionFromBaseNativeAd() throws Exception {
+        assertThat(subject.getCallToAction()).isEqualTo("callToAction");
+    }
 
-        assertThat(subject.getTitle()).isEqualTo("expected title");
-        assertThat(subject.getSubtitle()).isEqualTo("expected text");
-        assertThat(subject.getMainImageUrl()).isEqualTo("expected mainimage");
-        assertThat(subject.getIconImageUrl()).isEqualTo("expected iconimage");
+    @Test
+    public void getExtra_shouldReturnExtraFromBaseNativeAd() throws Exception {
+        assertThat(subject.getExtra("extra")).isEqualTo("extraValue");
+    }
 
-        assertThat(subject.getClickDestinationUrl()).isEqualTo("expected clk");
+    @Test
+    public void getExtras_shouldReturnCopyOfExtrasMapFromBaseNativeAd() throws Exception {
+        final Map<String, Object> extras = subject.getExtras();
+        assertThat(extras.size()).isEqualTo(2);
+        assertThat(extras.get("extra")).isEqualTo("extraValue");
+        assertThat(extras.get("extraImage")).isEqualTo("extraImageUrl");
+        assertThat(extras).isNotSameAs(mNativeAd.getExtras());
+    }
 
-//        assertThat(subject.getFallback()).isEqualTo("expected fallback");
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
-        assertThat(subject.getClickTracker()).isEqualTo("expected clicktracker");
-        assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
-//        assertThat(subject.getStarRating()).isEqualTo(5.0);
+    @Test
+    public void getImpressionTrackers_shouldReturnImpressionTrackersFromMoPubAndFromBaseNativeAd() throws Exception {
+        final List<String> impressionTrackers = subject.getImpressionTrackers();
+        assertThat(impressionTrackers).containsOnly("moPubImpressionTrackerUrl", "impressionUrl");
     }
 
     @Test
-    public void constructor_whenImpressionTrackersIsNotJSONArray_shouldThrowIllegalArgumentException() throws Exception {
-        // An array list is not the same thing as a JSONArray
-        final List<String> impressionTrackers = new ArrayList<String>();
-        impressionTrackers.add("url1");
-        impressionTrackers.add("url2");
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        try {
-            subject = new NativeResponse(fakeJsonObject);
-            fail("Expected constructor to throw an IllegalArgumentException");
-        } catch (IllegalArgumentException e) {
-            // pass
-        }
+    public void getImpressionMinTimeViewed_shouldReturnImpressionMinTimeViewedFromBaseNativeAd() throws Exception {
+        assertThat(subject.getImpressionMinTimeViewed()).isEqualTo(500);
     }
 
     @Test
-    public void constructor_whenImpressionTrackersContainsNonStrings_willCoerceToString() throws Exception {
-        /**
-         * At this level of abstraction, we don't actually care that these Strings resolve to valid
-         * URLs. We just want to ensure that the constructor does not throw an exception.
-         */
-        final JSONArray impressionTrackers = new JSONArray();
-        impressionTrackers.put("url1");
-        impressionTrackers.put(JSONObject.NULL);
-        impressionTrackers.put(2.12);
-        fakeJsonObject.put("imptracker", impressionTrackers);
-
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getImpressionTrackers()).containsOnly("url1", "null", "2.12");
+    public void getImpressionMinPercentageViewed_shouldReturnImpressionMinPercentageViewedFromBaseNativeAd() throws Exception {
+        assertThat(subject.getImpressionMinPercentageViewed()).isEqualTo(50);
     }
 
     @Test
-    public void constructor_shouldSetExtraFields() throws Exception {
-        List<Object> array = new ArrayList<Object>();
-        array.add("index1");
-        array.add(-10);
-
-        Map<String, Object> map = new HashMap<String, Object>();
-        map.put("one", "a");
-        map.put("two", "b");
-
-        fakeJsonObject.put("key1", "yay json");
-        fakeJsonObject.put("key2", 5);
-        fakeJsonObject.put("key3", new JSONArray(array));
-        fakeJsonObject.put("key4", new JSONObject(map));
-
-        subject = new NativeResponse(fakeJsonObject);
-
-        assertThat(subject.getExtra("key1")).isEqualTo("yay json");
-        assertThat(subject.getExtra("key2")).isEqualTo(5);
-        assertThat((JSONArray) subject.getExtra("key3")).isEqualsToByComparingFields(new JSONArray(array));
-        assertThat((JSONObject) subject.getExtra("key4")).isEqualsToByComparingFields(new JSONObject(map));
+    public void getClickTracker_shouldReturnMoPubClickTracker() throws Exception {
+        assertThat(subject.getClickTracker()).isEqualTo("moPubClickTrackerUrl");
+    }
+    
+    @Test
+    public void prepareImpression_shouldAddViewAndResponseToImpressionTrackingManagerAndCallPrepareImpressionOnBaseNativeAd() throws Exception {
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        subjectWMockBaseNativeAd.prepareImpression(view);
+        final Map<View, NativeResponseWrapper> keptViews = ImpressionTrackingManager.getKeptViews();
+        assertThat(keptViews.size()).isEqualTo(1);
+        assertThat(keptViews.get(view).mNativeResponse).isSameAs(subjectWMockBaseNativeAd);
+
+        verify(mMockNativeAd).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenNoExtras_shouldReturnEmptyList() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
+    public void prepareImpression_whenDestroyed_shouldReturnFast() throws Exception {
+        subjectWMockBaseNativeAd.destroy();
+        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
 
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
+        subjectWMockBaseNativeAd.prepareImpression(view);
+
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenExtrasDoesNotContainImageKeys_shouldReturnEmptyList() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("imageAtFront", "ignored");
-        fakeJsonObject.put("middle_image_in_key", "ignored");
-        fakeJsonObject.put("other", "ignored");
+    public void prepareImpression_whenAlreadyImpressed_shouldReturnFast() throws Exception {
+        subjectWMockBaseNativeAd.setRecordedImpression(true);
+        assertThat(subjectWMockBaseNativeAd.getRecordedImpression()).isTrue();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
 
-        subject = new NativeResponse(fakeJsonObject);
+        subjectWMockBaseNativeAd.prepareImpression(view);
 
-        assertThat(subject.getExtrasImageUrls()).isEmpty();
+        assertThat(ImpressionTrackingManager.getKeptViews()).isEmpty();
+        verify(mMockNativeAd, never()).prepareImpression(view);
     }
 
     @Test
-    public void getExtrasImageUrls_whenExtrasContainsImages_shouldReturnImageUrls() throws Exception {
-        // getExtrasImageUrls requires the key to end with a case-insensitive "image" to be counted as an image
-        fakeJsonObject.put("test_image", "image_url_1");
-        fakeJsonObject.put("filler", "ignored");
-        fakeJsonObject.put("otherIMAGE", "image_url_2");
-        fakeJsonObject.put("more filler", "ignored");
-        fakeJsonObject.put("lastimage", "image_url_3");
+    public void recordImpression_shouldRecordImpressionsAndCallIntoBaseNativeAdAndNotifyListenerIdempotently() throws Exception {
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        assertThat(subject.getRecordedImpression()).isFalse();
+
+        subject.recordImpression(view);
+
+        assertThat(subject.getRecordedImpression()).isTrue();
 
-        subject = new NativeResponse(fakeJsonObject);
+        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
+        assertThat(httpRequestInfos.size()).isEqualTo(2);
+        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubImpressionTrackerUrl");
+        assertThat(httpRequestInfos.get(1).getHttpRequest().getRequestLine().getUri()).isEqualTo("impressionUrl");
 
-        assertThat(subject.getExtrasImageUrls()).containsOnly("image_url_1", "image_url_2", "image_url_3");
+        assertThat(baseNativeAdRecordedImpression).isTrue();
+        verify(moPubNativeListener).onNativeImpression(view);
+
+        // reset state
+        baseNativeAdRecordedImpression = false;
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(moPubNativeListener);
+
+        // verify impression tracking doesn't fire again
+        subject.recordImpression(view);
+        assertThat(subject.getRecordedImpression()).isTrue();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener, never()).onNativeImpression(view);
     }
 
-    @Ignore("pending")
     @Test
-    public void loadExtrasImage_shouldAsyncLoadImages() throws Exception {
-        // no easy way to test this since nothing can be mocked
-        // also not a critical test since it directly calls another service
+    public void recordImpression_whenDestroyed_shouldReturnFast() throws Exception {
+        subject.destroy();
+        subject.recordImpression(view);
+        assertThat(subject.getRecordedImpression()).isFalse();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener, never()).onNativeImpression(view);
     }
 
     @Test
-    public void getAllImageUrls_withNoExtraImages_shouldReturnEmptyList() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
+    public void handleClick_withNoBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndNotifyListener() throws Exception {
+        Robolectric.getFakeHttpLayer().addPendingHttpResponse(200, "ok");
+        assertThat(subject.isClicked()).isFalse();
 
-        assertThat(subject.getAllImageUrls()).isEmpty();
-    }
+        subject.handleClick(view);
 
-    @Test
-    public void getAllImageUrls_withExtraImagesAndMainAndIconImages_shouldIncludeThemAlongWithMainAndIconImageUrls() throws Exception {
-        fakeJsonObject.put("mainimage", "expected mainimage");
-        fakeJsonObject.put("iconimage", "expected iconimage");
+        assertThat(subject.isClicked()).isTrue();
+
+        List<HttpRequestInfo> httpRequestInfos = Robolectric.getFakeHttpLayer().getSentHttpRequestInfos();
+        assertThat(httpRequestInfos.size()).isEqualTo(1);
+        assertThat(httpRequestInfos.get(0).getHttpRequest().getRequestLine().getUri()).isEqualTo("moPubClickTrackerUrl");
 
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
+        assertThat(baseNativeAdIsClicked).isTrue();
+        verify(moPubNativeListener).onNativeClick(view);
 
-        subject = new NativeResponse(fakeJsonObject);
+        // reset state
+        baseNativeAdIsClicked = false;
+        Robolectric.getFakeHttpLayer().clearRequestInfos();
+        reset(moPubNativeListener);
 
-        assertThat(subject.getAllImageUrls()).containsOnly(
-                "expected mainimage",
-                "expected iconimage",
-                "expected extra1_image",
-                "expected extra2_image"
-        );
+        // second time, tracking does not fire
+        subject.handleClick(view);
+        assertThat(subject.isClicked()).isTrue();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdRecordedImpression).isFalse();
+        verify(moPubNativeListener).onNativeClick(view);
+    }
+
+    @Ignore("pending")
+    @Test
+    public void handleClick_withBaseNativeAdClickDestinationUrl_shouldRecordClickAndCallIntoBaseNativeAdAndOpenClickDestinationAndNotifyListener() throws Exception {
+        // Really difficult to test url resolution since it doesn't use the apache http client
     }
 
     @Test
-    public void getAllImageUrls_withOnlyExtrasImages_shouldNotIncludeMainOrIconImages() throws Exception {
-        fakeJsonObject.put("extra1_image", "expected extra1_image");
-        fakeJsonObject.put("extra2_image", "expected extra2_image");
+    public void handleClick_whenDestroyed_shouldReturnFast() throws Exception {
+        subject.destroy();
+        subject.handleClick(view);
+        assertThat(subject.isClicked()).isFalse();
+        assertThat(Robolectric.getFakeHttpLayer().getSentHttpRequestInfos()).isEmpty();
+        assertThat(baseNativeAdIsClicked).isFalse();
+        verify(moPubNativeListener, never()).onNativeClick(view);
+    }
 
-        subject = new NativeResponse(fakeJsonObject);
+    @Test
+    public void destroy_shouldCallIntoBaseNativeAd() throws Exception {
+        subjectWMockBaseNativeAd.destroy();
+        assertThat(subjectWMockBaseNativeAd.isDestroyed()).isTrue();
+        verify(mMockNativeAd).destroy();
 
-        assertThat(subject.getAllImageUrls()).containsOnly("expected extra1_image", "expected extra2_image");
+        reset(mMockNativeAd);
+
+        subjectWMockBaseNativeAd.destroy();
+        verify(mMockNativeAd, never()).destroy();
     }
 
     @Test
-    public void recordImpression_shouldSaveImpressionStateWithIdempotence() throws Exception {
-        subject = new NativeResponse(fakeJsonObject);
-        assertThat(subject.getRecordedImpression()).isFalse();
+    public void destroy_shouldSetMoPubNativeListenerToEmptyMoPubNativeListener() throws Exception {
+        assertThat(subjectWMockBaseNativeAd.getMoPubNativeListener()).isSameAs(moPubNativeListener);
 
-        subject.recordImpression();
-        assertThat(subject.getRecordedImpression()).isTrue();
+        subjectWMockBaseNativeAd.destroy();
 
-        subject.recordImpression();
-        assertThat(subject.getRecordedImpression()).isTrue();
+        assertThat(subjectWMockBaseNativeAd.getMoPubNativeListener()).isSameAs(EMPTY_MOPUB_NATIVE_LISTENER);
     }
 
     @Ignore("pending")
     @Test
-    public void loadMainAndIconImages_shouldAsyncLoadImages() throws Exception {
+    public void loadExtrasImage_shouldAsyncLoadImages() throws Exception {
         // no easy way to test this since nothing can be mocked
         // also not a critical test since it directly calls another service
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
new file mode 100644
index 00000000..86deaa9f
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -0,0 +1,94 @@
+package com.mopub.nativeads;
+
+import android.app.Activity;
+import android.net.Uri;
+
+import com.mopub.nativeads.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import java.util.EnumSet;
+import java.util.List;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+
+import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.robolectric.Robolectric.shadowOf;
+
+@RunWith(SdkTestRunner.class)
+public class NativeUrlGeneratorTest {
+    private Activity context;
+    private NativeUrlGenerator subject;
+
+    @Before
+    public void setup() {
+        context = new Activity();
+        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldIncludeDesiredAssetIfSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(1);
+        assertThat(desiredAssets).contains("title");
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldIncludeDesiredAssetsIfSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(3);
+        assertThat(desiredAssets).contains("title", "text", "iconimage");
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234");
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(0);
+    }
+
+    @Test
+    public void generateNativeAdUrl_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() throws Exception {
+        EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
+        RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
+
+        subject = new NativeUrlGenerator(context).withAdUnitId("1234").withRequest(requestParameters);
+
+        String requestString = generateMinimumUrlString();
+        List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
+
+        assertThat(desiredAssets.size()).isEqualTo(0);
+    }
+
+    private List<String> getDesiredAssetsListFromRequestUrlString(String requestString) {
+        Uri requestUri = Uri.parse(requestString);
+
+        String desiredAssetsString = requestUri.getQueryParameter("assets");
+        return (desiredAssetsString == null) ? new ArrayList<String>() : Arrays.asList(desiredAssetsString.split(","));
+    }
+
+    private String generateMinimumUrlString() {
+        return subject.generateUrlString("ads.mopub.com");
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
index 7dd1615a..736c6da7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeViewHolderTest.java
@@ -10,17 +10,17 @@
 import android.widget.TextView;
 
 import com.mopub.common.CacheService;
+import com.mopub.common.DownloadResponse;
 import com.mopub.common.util.Utils;
+import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
 import com.mopub.nativeads.test.support.SdkTestRunner;
 
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.mock;
 import static org.robolectric.Robolectric.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -31,7 +31,6 @@
     private NativeResponse nativeResponse;
     private ViewBinder viewBinder;
     private MoPubNative.MoPubNativeListener mopubNativeListener;
-    private JSONObject fakeJsonObject;
     private TextView titleView;
     private TextView textView;
     private TextView callToActionView;
@@ -39,6 +38,7 @@
     private ImageView iconImageView;
     private TextView extrasTextView;
     private ImageView extrasImageView;
+    private ImageView extrasImageView2;
 
     @Before
     public void setUp() throws Exception {
@@ -47,12 +47,6 @@ public void setUp() throws Exception {
         relativeLayout.setId((int) Utils.generateUniqueId());
         viewGroup = new LinearLayout(context);
 
-        fakeJsonObject = new JSONObject();
-
-        // Only mandatory json fields
-        fakeJsonObject.put("imptracker", new JSONArray("[\"url1\", \"url2\"]"));
-        fakeJsonObject.put("clktracker", "expected clicktracker");
-
         // Fields in the web ui
         titleView = new TextView(context);
         titleView.setId((int) Utils.generateUniqueId());
@@ -70,6 +64,8 @@ public void setUp() throws Exception {
         extrasTextView.setId((int) Utils.generateUniqueId());
         extrasImageView = new ImageView(context);
         extrasImageView.setId((int) Utils.generateUniqueId());
+        extrasImageView2 = new ImageView(context);
+        extrasImageView2.setId((int) Utils.generateUniqueId());
 
         relativeLayout.addView(titleView);
         relativeLayout.addView(textView);
@@ -78,10 +74,7 @@ public void setUp() throws Exception {
         relativeLayout.addView(iconImageView);
         relativeLayout.addView(extrasTextView);
         relativeLayout.addView(extrasImageView);
-    }
-
-    @After
-    public void tearDown() throws Exception {
+        relativeLayout.addView(extrasImageView2);
     }
 
     @Test
@@ -148,12 +141,15 @@ public void update_shouldAddValuesToViews() throws Exception {
         CacheService.putToMemoryCache("mainimageurl", "mainimagedata".getBytes());
         CacheService.putToMemoryCache("iconimageurl", "iconimagedata".getBytes());
 
-        fakeJsonObject.put("title", "titletext");
-        fakeJsonObject.put("text", "texttext");
-        fakeJsonObject.put("mainimage", "mainimageurl");
-        fakeJsonObject.put("iconimage", "iconimageurl");
-        fakeJsonObject.put("ctatext", "cta");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.setTitle("titletext");
+        nativeAd.setText("texttext");
+        nativeAd.setMainImageUrl("mainimageurl");
+        nativeAd.setIconImageUrl("iconimageurl");
+        nativeAd.setCallToAction("cta");
+
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -187,7 +183,8 @@ public void update_withMissingNativeResponseFields_shouldClearPreviousValues() t
         iconImageView.setImageBitmap(ImageService.byteArrayToBitmap("previousiconimagedata".getBytes()));
 
         // Only required fields in native response
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, mock(BaseForwardingNativeAd.class), null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .titleId(titleView.getId())
@@ -215,8 +212,10 @@ public void update_withDifferentViewBinder_shouldNotClearPreviousValues() throws
         titleView.setText("previoustitletext");
         textView.setText("previoustexttext");
 
-        fakeJsonObject.put("ctatext", "cta");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.setCallToAction("cta");
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .callToActionId(callToActionView.getId())
@@ -237,14 +236,19 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         // Setup for cache state for image gets
         CacheService.initializeCaches(context);
         CacheService.putToMemoryCache("extrasimageurl", "extrasimagedata".getBytes());
+        CacheService.putToMemoryCache("extrasimageurl2", "extrasimagedata2".getBytes());
 
-        fakeJsonObject.put("extrastext", "extrastexttext");
-        fakeJsonObject.put("extrasimage", "extrasimageurl");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.addExtra("extrastext", "extrastexttext");
+        nativeAd.addExtra("extrasimage", "extrasimageurl");
+        nativeAd.addExtra("extrasimage2", "extrasimageurl2");
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
                 .addExtra("extrasimage", extrasImageView.getId())
+                .addExtra("extrasimage2", extrasImageView2.getId())
                 .build();
 
         NativeViewHolder nativeViewHolder =
@@ -255,18 +259,23 @@ public void updateExtras_shouldAddValuesToViews() throws Exception {
         assertThat(extrasTextView.getText()).isEqualTo("extrastexttext");
         assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
                 .getCreatedFromBytes()).isEqualTo("extrasimagedata".getBytes());
+        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
+                .getCreatedFromBytes()).isEqualTo("extrasimagedata2".getBytes());
     }
 
     @Test
     public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() throws Exception {
         extrasTextView.setText("previousextrastext");
         extrasImageView.setImageBitmap(ImageService.byteArrayToBitmap("previousextrasimagedata".getBytes()));
+        extrasImageView2.setImageBitmap(ImageService.byteArrayToBitmap("previousextrasimagedata2".getBytes()));
 
-        nativeResponse = new NativeResponse(fakeJsonObject);
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, new BaseForwardingNativeAd(){}, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasTextView.getId())
                 .addExtra("extrasimage", extrasImageView.getId())
+                .addExtra("extrasimage2", extrasImageView2.getId())
                 .build();
 
         NativeViewHolder nativeViewHolder =
@@ -275,18 +284,24 @@ public void updateExtras_withMissingExtrasValues_shouldClearPreviousValues() thr
         assertThat(extrasTextView.getText()).isEqualTo("previousextrastext");
         assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView))
                 .getCreatedFromBytes()).isEqualTo("previousextrasimagedata".getBytes());
+        assertThat(shadowOf(ImageViewServiceTest.getBitmapFromImageView(extrasImageView2))
+                .getCreatedFromBytes()).isEqualTo("previousextrasimagedata2".getBytes());
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
         assertThat(extrasTextView.getText()).isEqualTo("");
         assertThat(extrasImageView.getDrawable()).isNull();
+        assertThat(extrasImageView2.getDrawable()).isNull();
     }
 
     @Test
-    public void updateExtras_withMismatchingViewTypes_shouldNotSetValues() throws Exception {
-        fakeJsonObject.put("extrastext", "extrastexttext");
-        fakeJsonObject.put("extrasimage", "extrasimageurl");
-        nativeResponse = new NativeResponse(fakeJsonObject);
+    public void updateExtras_withMismatchingViewTypes_shouldSetTextViewToImageUrlAndSetExtrasImageViewToNull() throws Exception {
+        BaseForwardingNativeAd nativeAd = new BaseForwardingNativeAd() {};
+        nativeAd.addExtra("extrastext", "extrastexttext");
+        nativeAd.addExtra("extrasimage", "extrasimageurl");
+
+        final DownloadResponse downloadResponse = new DownloadResponse(new TestHttpResponseWithHeaders(200, ""));
+        nativeResponse = new NativeResponse(context, downloadResponse, nativeAd, null);
 
         viewBinder = new ViewBinder.Builder(relativeLayout.getId())
                 .addExtra("extrastext", extrasImageView.getId())
@@ -301,7 +316,7 @@ public void updateExtras_withMismatchingViewTypes_shouldNotSetValues() throws Ex
 
         nativeViewHolder.updateExtras(relativeLayout, nativeResponse, viewBinder);
 
-        assertThat(extrasTextView.getText()).isEqualTo("");
+        assertThat(extrasTextView.getText()).isEqualTo("extrasimageurl");
         assertThat(extrasImageView.getDrawable()).isNull();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
new file mode 100644
index 00000000..3a46eb1e
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -0,0 +1,38 @@
+package com.mopub.nativeads.factories;
+
+import com.mopub.nativeads.CustomEventNative;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+@RunWith(RobolectricTestRunner.class)
+public class CustomEventNativeFactoryTest {
+    @Test
+    public void create_withValidClassName_shouldCreateClass() throws Exception {
+        assertCustomEventClassCreated("com.mopub.nativeads.MoPubCustomEventNative");
+    }
+
+    @Test
+    public void create_withInvalidClassName_shouldThrowException() throws Exception {
+        try {
+            CustomEventNativeFactory.create("com.mopub.nativeads.inVaLiDClassssssName1231232131");
+            fail("CustomEventNativeFactory did not throw exception on create");
+        } catch (Exception e) {
+            // pass
+        }
+    }
+
+    @Test
+    public void create_withNullClassName_shouldReturnMoPubCustomEventNativeClass() throws Exception {
+        assertThat(CustomEventNativeFactory.create(null).getClass().getName()).isEqualTo("com.mopub.nativeads.MoPubCustomEventNative");
+    }
+
+    private void assertCustomEventClassCreated(final String className) throws Exception {
+        final CustomEventNative customEventNative = CustomEventNativeFactory.create(className);
+        assertThat(customEventNative.getClass().getName()).isEqualTo(className);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
index ba31ed34..a453bc9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/SdkTestRunner.java
@@ -2,6 +2,7 @@
 
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
 
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
@@ -24,6 +25,7 @@ public SdkTestRunner(Class<?> testClass) throws InitializationError {
         @Override
         public void prepareTest(Object test) {
             MethodBuilderFactory.setInstance(new TestMethodBuilderFactory());
+            CustomEventNativeFactory.setInstance(new TestCustomEventNativeFactory());
             MockitoAnnotations.initMocks(test);
         }
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
new file mode 100644
index 00000000..3132f10d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
@@ -0,0 +1,23 @@
+package com.mopub.nativeads.test.support;
+
+import com.mopub.nativeads.CustomEventNative;
+import com.mopub.nativeads.factories.CustomEventNativeFactory;
+
+import static org.mockito.Mockito.mock;
+
+public class TestCustomEventNativeFactory extends CustomEventNativeFactory {
+    private CustomEventNative instance = mock(CustomEventNative.class);
+
+    public static CustomEventNative getSingletonMock() {
+        return getTestFactory().instance;
+    }
+
+    private static TestCustomEventNativeFactory getTestFactory() {
+        return ((TestCustomEventNativeFactory) CustomEventNativeFactory.instance);
+    }
+
+    @Override
+    protected CustomEventNative internalCreate(final Class<? extends CustomEventNative> nativeClass) {
+        return instance;
+    }
+}
diff --git a/robotium-sample/AndroidManifest.xml b/robotium-sample/AndroidManifest.xml
index 180580a9..24230c17 100644
--- a/robotium-sample/AndroidManifest.xml
+++ b/robotium-sample/AndroidManifest.xml
@@ -9,8 +9,7 @@
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
     
-    <application android:label="Cool Activity"
-            android:debuggable="true">
+    <application android:label="Cool Activity">
 	    <activity android:name=".RobotiumTestSupportActivity"
 	            android:label="Cool Activity" android:theme="@android:style/Theme.NoTitleBar" >
 	        <intent-filter>
diff --git a/robotium-tests/AndroidManifest.xml b/robotium-tests/AndroidManifest.xml
index 7d522746..03714b71 100644
--- a/robotium-tests/AndroidManifest.xml
+++ b/robotium-tests/AndroidManifest.xml
@@ -7,8 +7,7 @@
 
     <instrumentation android:targetPackage="com.mopub.mobileads.robotium" android:name="android.test.InstrumentationTestRunner" />
 
-    <application android:label="Cool Activity Test"
-                 android:debuggable="true">
+    <application android:label="Cool Activity Test">
         <uses-library android:name="android.test.runner" />
     </application>
-</manifest>
\ No newline at end of file
+</manifest>
