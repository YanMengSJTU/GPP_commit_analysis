diff --git a/CHANGELOG.md b/CHANGELOG.md
index a5de7bb2..2a34f068 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,20 @@
+## Version 5.4.0 (October 3, 2018)
+- Upgraded target SDK version to 28 and support libraries to 28.0.0.
+- Upgraded ExoPlayer dependency to 2.8.3.
+- Moved `AdvancedBiddingInitializationAsyncTask` and `RefreshAdvertisingInfoAsyncTask` to the parallel executor.
+- MRAID `isViewable` now more closely follows our impression tracking instead of the ad being marked viewable as soon as it loads.
+- Bug fixes.
+
+## Version 5.3.0 (August 15, 2018)
+- This release includes the foundation work for SDK to receive optimized responses for multiple placements from the waterfall. This effort will reduce the number of server roundtrips and minimize the ad response latency.
+- Upgraded ExoPlayer dependency to 2.8.2.
+- Upgraded recommended Google Play Services dependency to 15.0.1.
+- Upgraded target sdk version to 27 and support libraries to 27.1.1.
+- Upgraded Gradle dependency to 4.4.
+- Upgraded Android Plugin dependency to 3.1.3.
+- Upgraded test dependencies Powermock to 1.6.6 and Robolectric to 3.8.
+- Bug Fixes.
+
 ## Version 5.2.0 (July 9, 2018)
 - SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
 - `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
diff --git a/README.md b/README.md
index 9bc5b523..60f3334f 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.4.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.4.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.4.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.4.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.4.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.2.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.4.0@aar') {
             transitive = true
         }
     }
@@ -109,17 +109,19 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
-- `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
+- Upgraded target SDK version to 28 and support libraries to 28.0.0.
+- Upgraded ExoPlayer dependency to 2.8.3.
+- Moved `AdvancedBiddingInitializationAsyncTask` and `RefreshAdvertisingInfoAsyncTask` to the parallel executor.
+- MRAID `isViewable` now more closely follows our impression tracking instead of the ad being marked viewable as soon as it loads.
 
 ## Requirements
 
 - Android 4.1 (API Version 16) and up (**Updated in 4.12.0**)
-- android-support-v4.jar, r26 (**Updated in 4.18.0**)
-- android-support-annotations.jar, r26 (**Updated in 4.18.0**)
-- android-support-v7-recyclerview.jar, r26 (**Updated in 4.18.0**)
+- android-support-v4.jar, r28 (**Updated in 5.4.0**)
+- android-support-annotations.jar, r28 (**Updated in 5.4.0**)
+- android-support-v7-recyclerview.jar, r28 (**Updated in 5.4.0**)
 - MoPub Volley Library (mopub-volley-2.0.0.jar - available on JCenter) (**Updated in 5.0.0**)
-- **Recommended** Google Play Services 11.4.0
+- **Recommended** Google Play Services 15.0.1
 
 ## Upgrading to SDK 5.0
 
@@ -139,7 +141,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.4.0@aar') {
         transitive = true
     }
 }
@@ -148,7 +150,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.4.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index 62e69f6b..9a7c7148 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 buildscript {
     repositories {
         jcenter()
@@ -5,11 +9,11 @@ buildscript {
     }
 
     dependencies {
-        classpath 'com.android.tools.build:gradle:3.0.1'
+        classpath 'com.android.tools.build:gradle:3.1.3'
         classpath 'com.novoda:bintray-release:0.8.0'
     }
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '4.3.1'
+    gradleVersion = '4.4'
 }
diff --git a/gradle.properties b/gradle.properties
index 2cef46c6..704dac86 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,2 +1,6 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 org.gradle.jvmargs=-Xmx8192m -XX:MaxPermSize=2048m
 org.gradle.daemon=false
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 3e785403..a6f3ae3c 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,10 @@
-#Mon Nov 13 15:46:01 PST 2017
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
+#Thu Jul 12 13:45:05 PDT 2018
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip
diff --git a/gradlew.bat b/gradlew.bat
index aec99730..370f2fcb 100644
--- a/gradlew.bat
+++ b/gradlew.bat
@@ -1,3 +1,7 @@
+@rem Copyright 2018 Twitter, Inc.
+@rem Licensed under the MoPub SDK License Agreement
+@rem http://www.mopub.com/legal/sdk-license-agreement/
+
 @if "%DEBUG%" == "" @echo off
 @rem ##########################################################################
 @rem
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index c3945025..17fe7212 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,10 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="62"
-      android:versionName="5.2.0">
-    <uses-sdk android:minSdkVersion="16"
-              android:targetSdkVersion="26"/>
+      android:versionCode="64"
+      android:versionName="5.4.0">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
@@ -13,8 +11,11 @@
     <!--WRITE_EXTERNAL_STORAGE is optional and only required for MRAID 2.0 storePicture ads.-->
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
 
-    <application android:icon="@drawable/icon" android:label="@string/app_name"
-                 android:networkSecurityConfig="@xml/network_security_config">
+    <application
+        android:icon="@drawable/icon"
+        android:label="@string/app_name"
+        android:networkSecurityConfig="@xml/network_security_config"
+        android:supportsRtl="true">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
                 android:launchMode="singleTask"
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 37348eaa..ae25b151 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 repositories {
     google()
     jcenter()
@@ -11,18 +15,17 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.2.0'
+project.version = '5.4.0'
 
 android {
-    compileSdkVersion 26
-    buildToolsVersion '26.0.2'
+    compileSdkVersion 28
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 62
+        versionCode 64
         versionName version
         minSdkVersion 16
-        targetSdkVersion 26
+        targetSdkVersion 28
     }
 
     buildTypes {
@@ -57,9 +60,10 @@ android {
 }
 
 dependencies {
-    implementation 'com.android.support:support-v4:26.1.0'
-    implementation 'com.google.android.gms:play-services-ads:11.4.0'
-    implementation 'com.google.android.gms:play-services-base:11.4.0'
-    implementation 'com.android.support:recyclerview-v7:26.1.0'
+    implementation 'com.android.support:customtabs:28.0.0'
+    implementation 'com.android.support:support-v4:28.0.0'
+    implementation 'com.google.android.gms:play-services-ads:15.0.1'
+    implementation 'com.google.android.gms:play-services-base:15.0.1'
+    implementation 'com.android.support:recyclerview-v7:28.0.0'
     implementation project(':mopub-sdk')
 }
diff --git a/mopub-sample/project.properties b/mopub-sample/project.properties
index d8ac5433..89566a2b 100644
--- a/mopub-sample/project.properties
+++ b/mopub-sample/project.properties
@@ -1,3 +1,7 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 # This file is automatically generated by Android Tools.
 # Do not modify this file -- YOUR CHANGES WILL BE ERASED!
 #
diff --git a/mopub-sample/res/layout/ad_config_dialog.xml b/mopub-sample/res/layout/ad_config_dialog.xml
index dc2c304b..5461b486 100644
--- a/mopub-sample/res/layout/ad_config_dialog.xml
+++ b/mopub-sample/res/layout/ad_config_dialog.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical"
-              android:padding="@dimen/sample_text_size">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:padding="@dimen/sample_text_size"
+    android:textDirection="locale">
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -17,13 +17,13 @@
             android:layout_width="80sp"
             android:layout_height="wrap_content"
             android:text="@string/ad_type"
-            android:textSize="@dimen/sample_text_size"/>
+            android:textSize="@dimen/sample_text_size" />
 
         <Spinner
             android:id="@+id/add_ad_unit_type"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+            android:layout_weight="1" />
     </LinearLayout>
 
     <LinearLayout
@@ -36,14 +36,14 @@
             android:layout_width="80sp"
             android:layout_height="wrap_content"
             android:text="@string/ad_unit_id"
-            android:textSize="@dimen/sample_text_size"/>
+            android:textSize="@dimen/sample_text_size" />
 
         <EditText
             android:id="@+id/add_ad_unit_id"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:hint="@string/ad_unit_hint"/>
+            android:hint="@string/ad_unit_hint" />
 
     </LinearLayout>
 
@@ -58,14 +58,14 @@
             android:layout_width="80sp"
             android:layout_height="wrap_content"
             android:text="@string/ad_unit_name"
-            android:textSize="@dimen/sample_text_size"/>
+            android:textSize="@dimen/sample_text_size" />
 
         <EditText
             android:id="@+id/add_ad_unit_description"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:hint="@string/ad_unit_name_hint"/>
+            android:hint="@string/ad_unit_name_hint" />
     </LinearLayout>
 
-</LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/mopub-sample/res/layout/ad_configuration_list_item.xml b/mopub-sample/res/layout/ad_configuration_list_item.xml
index 1d12f082..381568cc 100644
--- a/mopub-sample/res/layout/ad_configuration_list_item.xml
+++ b/mopub-sample/res/layout/ad_configuration_list_item.xml
@@ -1,9 +1,10 @@
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
     android:orientation="vertical"
-    android:paddingBottom="8dp" >
+    android:paddingBottom="8dp"
+    android:textDirection="locale">
 
     <TextView
         android:id="@+id/separator"
@@ -20,8 +21,10 @@
             android:layout_width="match_parent"
             android:layout_height="wrap_content"
             android:layout_alignParentTop="true"
+            android:paddingEnd="8dp"
             android:paddingLeft="8dp"
             android:paddingRight="8dp"
+            android:paddingStart="8dp"
             android:paddingTop="8dp"
             android:singleLine="true"
             android:textColor="?android:attr/textColorPrimary"
@@ -34,8 +37,10 @@
             android:layout_height="wrap_content"
             android:layout_below="@id/banner_description"
             android:layout_marginTop="8dp"
+            android:paddingEnd="8dp"
             android:paddingLeft="8dp"
             android:paddingRight="8dp"
+            android:paddingStart="8dp"
             android:singleLine="true"
             android:textColor="?android:attr/textColorSecondary"
             android:textSize="14sp"
@@ -45,10 +50,10 @@
             android:id="@+id/banner_delete"
             android:layout_width="48dp"
             android:layout_height="48dp"
+            android:layout_alignParentEnd="true"
             android:layout_alignParentRight="true"
             android:scaleType="centerCrop"
-            android:src="@android:drawable/ic_menu_delete"
-            />
+            android:src="@android:drawable/ic_menu_delete" />
 
     </RelativeLayout>
 </LinearLayout>
diff --git a/mopub-sample/res/layout/ad_unit_list_fragment.xml b/mopub-sample/res/layout/ad_unit_list_fragment.xml
index 22ac358e..3abcabbe 100644
--- a/mopub-sample/res/layout/ad_unit_list_fragment.xml
+++ b/mopub-sample/res/layout/ad_unit_list_fragment.xml
@@ -1,30 +1,29 @@
 <?xml version="1.0" encoding="utf-8"?>
-
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:paddingBottom="15dp">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:paddingBottom="15dp"
+    android:textDirection="locale">
 
     <ListView
         android:id="@android:id/list"
         android:layout_width="match_parent"
         android:layout_height="0dp"
-        android:layout_weight="1"
-        android:layout_marginBottom="10dp"/>
+        android:layout_marginBottom="10dp"
+        android:layout_weight="1" />
 
     <Button
         android:id="@+id/add_ad_unit_button"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:layout_gravity="center_horizontal"
-        android:text="@string/add_ad_unit_button"
-        />
+        android:text="@string/add_ad_unit_button" />
 
     <TextView
         android:id="@+id/version_code"
-        android:layout_gravity="center_horizontal"
-        android:textSize="@dimen/detail_text_size"
         android:layout_width="wrap_content"
-        android:layout_height="wrap_content"/>
+        android:layout_height="wrap_content"
+        android:layout_gravity="center_horizontal"
+        android:textSize="@dimen/detail_text_size" />
 </LinearLayout>
diff --git a/mopub-sample/res/layout/banner_detail_fragment.xml b/mopub-sample/res/layout/banner_detail_fragment.xml
index 35241ce3..d4050ba1 100644
--- a/mopub-sample/res/layout/banner_detail_fragment.xml
+++ b/mopub-sample/res/layout/banner_detail_fragment.xml
@@ -1,16 +1,18 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:layout_height="match_parent" >
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:textDirection="locale">
 
     <TextView
         android:id="@+id/description"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:paddingTop="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorPrimary"
@@ -21,8 +23,10 @@
         android:id="@+id/ad_unit_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorSecondary"
         android:textSize="14sp"
@@ -30,35 +34,35 @@
 
     <EditText
         android:id="@+id/keywords_field"
-        android:hint="@string/keywords"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:inputType="text|textFilter|textShortMessage"
+        android:hint="@string/keywords"
         android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
         android:singleLine="true" />
 
     <LinearLayout
-        android:orientation="horizontal"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
 
         <EditText
             android:id="@+id/user_data_keywords_field"
-            android:hint="@string/user_data_keywords"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="3"
-            android:inputType="text|textFilter|textShortMessage"
+            android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
+            android:inputType="text|textFilter|textShortMessage"
             android:singleLine="true" />
 
         <Button
             android:id="@+id/load_button"
-            android:text="@string/load_ad"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:singleLine="true"/>
+            android:singleLine="true"
+            android:text="@string/load_ad" />
     </LinearLayout>
 
     <com.mopub.mobileads.MoPubView
@@ -66,6 +70,5 @@
         android:layout_width="320dp"
         android:layout_height="50dp"
         android:layout_gravity="center_horizontal"
-        android:layout_marginTop="10dp">
-    </com.mopub.mobileads.MoPubView>
+        android:layout_marginTop="10dp"></com.mopub.mobileads.MoPubView>
 </LinearLayout>
diff --git a/mopub-sample/res/layout/interstitial_detail_fragment.xml b/mopub-sample/res/layout/interstitial_detail_fragment.xml
index 03f4888b..c467beb6 100644
--- a/mopub-sample/res/layout/interstitial_detail_fragment.xml
+++ b/mopub-sample/res/layout/interstitial_detail_fragment.xml
@@ -1,16 +1,18 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:orientation="vertical"
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:textDirection="locale">
 
     <TextView
         android:id="@+id/description"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:paddingTop="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorPrimary"
@@ -21,8 +23,10 @@
         android:id="@+id/ad_unit_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorSecondary"
         android:textSize="14sp"
@@ -30,49 +34,49 @@
 
     <EditText
         android:id="@+id/keywords_field"
-        android:hint="@string/keywords"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:inputType="text|textFilter|textShortMessage"
+        android:hint="@string/keywords"
         android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
         android:singleLine="true" />
 
     <EditText
         android:id="@+id/user_data_keywords_field"
-        android:hint="@string/user_data_keywords"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:inputType="text|textFilter|textShortMessage"
+        android:hint="@string/user_data_keywords"
         android:imeOptions="actionDone"
+        android:inputType="text|textFilter|textShortMessage"
         android:singleLine="true" />
 
     <EditText
         android:id="@+id/custom_data_field"
-        android:visibility="gone"
-        android:hint="@string/custom_data"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
-        android:inputType="text|textFilter|textShortMessage"
+        android:hint="@string/custom_data"
         android:imeOptions="actionDone"
-        android:singleLine="true" />
+        android:inputType="text|textFilter|textShortMessage"
+        android:singleLine="true"
+        android:visibility="gone" />
 
     <LinearLayout
-        android:orientation="horizontal"
         android:layout_width="match_parent"
-        android:layout_height="wrap_content">
+        android:layout_height="wrap_content"
+        android:orientation="horizontal">
 
         <Button
             android:id="@+id/load_button"
-            android:text="@string/load_ad"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
-            android:layout_weight="1" />
+            android:layout_weight="1"
+            android:text="@string/load_ad" />
 
         <Button
             android:id="@+id/show_button"
-            android:text="@string/show_ad"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
-            android:layout_weight="1"/>
+            android:layout_weight="1"
+            android:text="@string/show_ad" />
     </LinearLayout>
 </LinearLayout>
diff --git a/mopub-sample/res/layout/main.xml b/mopub-sample/res/layout/main.xml
index 682a1cc8..620cb5e2 100644
--- a/mopub-sample/res/layout/main.xml
+++ b/mopub-sample/res/layout/main.xml
@@ -2,5 +2,4 @@
 <FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/fragment_container"
     android:layout_width="match_parent"
-    android:layout_height="match_parent">
-</FrameLayout>
+    android:layout_height="match_parent"></FrameLayout>
diff --git a/mopub-sample/res/layout/native_ad_list_item.xml b/mopub-sample/res/layout/native_ad_list_item.xml
index e81c3379..261a5d02 100644
--- a/mopub-sample/res/layout/native_ad_list_item.xml
+++ b/mopub-sample/res/layout/native_ad_list_item.xml
@@ -1,74 +1,90 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/native_outer_view"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:background="@android:color/white">
-    <ImageView android:id="@+id/native_icon_image"
+    android:background="@android:color/white"
+    android:textDirection="locale">
+
+    <ImageView
+        android:id="@+id/native_icon_image"
         android:layout_width="64dp"
         android:layout_height="64dp"
-        android:background="@null"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
         android:layout_alignParentTop="true"
-        android:layout_marginTop="10dp"
         android:layout_marginLeft="10dp"
-        />
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:background="@null"
+        android:contentDescription="@null" />
 
-    <TextView android:id="@+id/native_title"
-        android:layout_width="match_parent"
-        android:layout_marginLeft="84dp"
-        android:layout_marginTop="32dp"
+    <TextView
+        android:id="@+id/native_title"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_alignParentTop="true"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="84dp"
+        android:layout_marginStart="84dp"
+        android:layout_marginTop="32dp"
         android:textColor="@android:color/darker_gray"
         android:textStyle="bold" />
 
-    <TextView android:id="@+id/native_text"
-        android:layout_width="match_parent"
+    <TextView
+        android:id="@+id/native_text"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_below="@+id/native_icon_image"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/native_icon_image"
         android:layout_marginLeft="10dp"
+        android:layout_marginStart="10dp"
         android:layout_marginTop="10dp"
         android:textColor="@android:color/darker_gray" />
 
 
-    <ImageView android:id="@+id/native_main_image"
+    <ImageView
+        android:id="@+id/native_main_image"
         android:layout_width="match_parent"
         android:layout_height="@dimen/native_main_image_height"
-        android:background="@null"
-        android:layout_marginTop="10dp"
+        android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/native_text"
         android:layout_marginLeft="10dp"
         android:layout_marginRight="10dp"
-        android:layout_below="@+id/native_text"
-        android:layout_alignParentLeft="true"
+        android:layout_marginTop="10dp"
+        android:background="@null"
         android:contentDescription="@string/native_main_image"
-        android:scaleType="centerCrop"/>
+        android:scaleType="centerCrop" />
 
     <Button
         android:id="@+id/native_cta"
         android:layout_width="wrap_content"
         android:layout_height="35dp"
-        android:text="@string/learn_more"
-        android:textColor="@android:color/black"
-        android:textStyle="bold"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_below="@+id/native_main_image"
+        android:layout_marginEnd="10dp"
         android:layout_marginRight="10dp"
         android:layout_marginTop="10dp"
-        android:layout_below="@+id/native_main_image"
-        android:textSize="12sp"
-        android:layout_alignParentRight="true"
         android:clickable="true"
-        android:paddingBottom="10dp" />
+        android:focusable="true"
+        android:paddingBottom="10dp"
+        android:text="@string/learn_more"
+        android:textColor="@android:color/black"
+        android:textSize="12sp"
+        android:textStyle="bold" />
 
     <ImageView
         android:id="@+id/native_privacy_information_icon_image"
         android:layout_width="40dp"
         android:layout_height="40dp"
-        android:padding="10dp"
-        android:layout_alignParentRight="true"
         android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
-        android:contentDescription="@string/native_privacy_information_icon_image"/>
+        android:contentDescription="@string/native_privacy_information_icon_image"
+        android:padding="10dp" />
 
 </RelativeLayout>
diff --git a/mopub-sample/res/layout/native_gallery_content.xml b/mopub-sample/res/layout/native_gallery_content.xml
index 7bf2d7b4..aa7344f4 100644
--- a/mopub-sample/res/layout/native_gallery_content.xml
+++ b/mopub-sample/res/layout/native_gallery_content.xml
@@ -1,8 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <TextView xmlns:android="http://schemas.android.com/apk/res/android"
-          android:id="@+id/native_gallery_content_text"
-          android:layout_width="match_parent"
-          android:layout_height="wrap_content"
-          android:layout_gravity="center"
-          android:padding="16dp"/>
+    android:id="@+id/native_gallery_content_text"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_gravity="center"
+    android:padding="16dp"
+    android:textDirection="locale" />
 
diff --git a/mopub-sample/res/layout/native_gallery_fragment.xml b/mopub-sample/res/layout/native_gallery_fragment.xml
index d368cc44..9054cd3e 100644
--- a/mopub-sample/res/layout/native_gallery_fragment.xml
+++ b/mopub-sample/res/layout/native_gallery_fragment.xml
@@ -1,31 +1,36 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:textDirection="locale">
 
     <TextView
         android:id="@+id/description"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:paddingTop="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorPrimary"
         android:textSize="16sp"
-        android:textStyle="bold"/>
+        android:textStyle="bold" />
 
     <TextView
         android:id="@+id/ad_unit_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorSecondary"
         android:textSize="14sp"
-        android:textStyle="normal"/>
+        android:textStyle="normal" />
 
     <EditText
         android:id="@+id/keywords_field"
@@ -34,7 +39,7 @@
         android:hint="@string/keywords"
         android:imeOptions="actionDone"
         android:inputType="text|textFilter|textShortMessage"
-        android:singleLine="true"/>
+        android:singleLine="true" />
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -49,14 +54,14 @@
             android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
-            android:singleLine="true"/>
+            android:singleLine="true" />
 
         <Button
             android:id="@+id/load_button"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:text="@string/load_ad"/>
+            android:text="@string/load_ad" />
     </LinearLayout>
 
     <FrameLayout
@@ -68,11 +73,11 @@
             android:layout_height="match_parent"
             android:background="#aa333333"
             android:gravity="center"
-            android:text="@string/swipe_text"/>
+            android:text="@string/swipe_text" />
 
         <android.support.v4.view.ViewPager
             android:id="@+id/gallery_pager"
             android:layout_width="match_parent"
-            android:layout_height="match_parent"/>
+            android:layout_height="match_parent" />
     </FrameLayout>
 </LinearLayout>
diff --git a/mopub-sample/res/layout/native_list_view_fragment.xml b/mopub-sample/res/layout/native_list_view_fragment.xml
index 0944ac52..4706a243 100644
--- a/mopub-sample/res/layout/native_list_view_fragment.xml
+++ b/mopub-sample/res/layout/native_list_view_fragment.xml
@@ -1,31 +1,36 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:layout_width="match_parent"
-              android:layout_height="match_parent"
-              android:orientation="vertical">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:textDirection="locale">
 
     <TextView
         android:id="@+id/description"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:paddingTop="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorPrimary"
         android:textSize="16sp"
-        android:textStyle="bold"/>
+        android:textStyle="bold" />
 
     <TextView
         android:id="@+id/ad_unit_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorSecondary"
         android:textSize="14sp"
-        android:textStyle="normal"/>
+        android:textStyle="normal" />
 
     <EditText
         android:id="@+id/keywords_field"
@@ -34,7 +39,7 @@
         android:hint="@string/keywords"
         android:imeOptions="actionDone"
         android:inputType="text|textFilter|textShortMessage"
-        android:singleLine="true"/>
+        android:singleLine="true" />
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -49,19 +54,19 @@
             android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
-            android:singleLine="true"/>
+            android:singleLine="true" />
 
         <Button
             android:id="@+id/load_button"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:text="@string/load_ad"/>
+            android:text="@string/load_ad" />
     </LinearLayout>
 
     <ListView
         android:id="@+id/native_list_view"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:padding="5dp"/>
+        android:padding="5dp" />
 </LinearLayout>
diff --git a/mopub-sample/res/layout/recycler_view_fragment.xml b/mopub-sample/res/layout/recycler_view_fragment.xml
index f35696c6..a5fab091 100644
--- a/mopub-sample/res/layout/recycler_view_fragment.xml
+++ b/mopub-sample/res/layout/recycler_view_fragment.xml
@@ -1,29 +1,36 @@
 <?xml version="1.0" encoding="utf-8"?>
 <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-              android:orientation="vertical" android:layout_width="match_parent"
-              android:layout_height="match_parent">
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:textDirection="locale">
+
     <TextView
         android:id="@+id/description"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:paddingTop="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorPrimary"
         android:textSize="16sp"
-        android:textStyle="bold"/>
+        android:textStyle="bold" />
 
     <TextView
         android:id="@+id/ad_unit_id"
         android:layout_width="match_parent"
         android:layout_height="wrap_content"
+        android:paddingEnd="8dp"
         android:paddingLeft="8dp"
         android:paddingRight="8dp"
+        android:paddingStart="8dp"
         android:singleLine="true"
         android:textColor="?android:attr/textColorSecondary"
         android:textSize="14sp"
-        android:textStyle="normal"/>
+        android:textStyle="normal" />
 
     <EditText
         android:id="@+id/keywords_field"
@@ -32,7 +39,7 @@
         android:hint="@string/keywords"
         android:imeOptions="actionDone"
         android:inputType="text|textFilter|textShortMessage"
-        android:singleLine="true"/>
+        android:singleLine="true" />
 
     <LinearLayout
         android:layout_width="match_parent"
@@ -47,21 +54,21 @@
             android:hint="@string/user_data_keywords"
             android:imeOptions="actionDone"
             android:inputType="text|textFilter|textShortMessage"
-            android:singleLine="true"/>
+            android:singleLine="true" />
 
         <Button
             android:id="@+id/load_button"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:text="@string/load_ad"/>
+            android:text="@string/load_ad" />
 
         <Button
             android:id="@+id/switch_button"
             android:layout_width="0dp"
             android:layout_height="wrap_content"
             android:layout_weight="1"
-            android:text="@string/switch_layout"/>
+            android:text="@string/switch_layout" />
     </LinearLayout>
 
     <android.support.v7.widget.RecyclerView
diff --git a/mopub-sample/res/layout/video_ad_list_item.xml b/mopub-sample/res/layout/video_ad_list_item.xml
index 286dd0e3..47912f25 100644
--- a/mopub-sample/res/layout/video_ad_list_item.xml
+++ b/mopub-sample/res/layout/video_ad_list_item.xml
@@ -1,35 +1,46 @@
-<RelativeLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
     android:id="@+id/native_outer_view"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:background="@android:color/white">
-    <ImageView android:id="@+id/native_icon_image"
+    android:background="@android:color/white"
+    android:textDirection="locale">
+
+    <ImageView
+        android:id="@+id/native_icon_image"
         android:layout_width="64dp"
         android:layout_height="64dp"
-        android:background="@null"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
         android:layout_alignParentTop="true"
-        android:layout_marginTop="10dp"
         android:layout_marginLeft="10dp"
-        />
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:background="@null"
+        android:contentDescription="@null" />
 
-    <TextView android:id="@+id/native_title"
-        android:layout_width="match_parent"
-        android:layout_marginLeft="84dp"
-        android:layout_marginTop="32dp"
+    <TextView
+        android:id="@+id/native_title"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_alignParentTop="true"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_alignParentTop="true"
+        android:layout_marginLeft="84dp"
+        android:layout_marginStart="84dp"
+        android:layout_marginTop="32dp"
         android:textColor="@android:color/darker_gray"
         android:textStyle="bold" />
 
-    <TextView android:id="@+id/native_text"
-        android:layout_width="match_parent"
+    <TextView
+        android:id="@+id/native_text"
+        android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_below="@+id/native_icon_image"
         android:layout_alignParentLeft="true"
+        android:layout_alignParentStart="true"
+        android:layout_below="@+id/native_icon_image"
         android:layout_marginLeft="10dp"
+        android:layout_marginStart="10dp"
         android:layout_marginTop="10dp"
         android:textColor="@android:color/darker_gray" />
 
@@ -38,37 +49,42 @@
         android:id="@+id/native_media_layout"
         android:layout_width="match_parent"
         android:layout_height="match_parent"
-        android:background="#000000"
-        android:layout_marginTop="10dp"
+        android:layout_below="@+id/native_text"
+        android:layout_centerHorizontal="true"
+        android:layout_marginBottom="10dp"
+        android:layout_marginEnd="10dp"
         android:layout_marginLeft="10dp"
         android:layout_marginRight="10dp"
-        android:layout_marginBottom="10dp"
-        android:layout_below="@+id/native_text"
-        android:layout_centerHorizontal="true" />
+        android:layout_marginStart="10dp"
+        android:layout_marginTop="10dp"
+        android:background="#000000" />
 
     <Button
         android:id="@+id/native_cta"
         android:layout_width="wrap_content"
         android:layout_height="35dp"
-        android:text="@string/learn_more"
-        android:textColor="@android:color/black"
-        android:textStyle="bold"
+        android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
+        android:layout_below="@+id/native_media_layout"
+        android:layout_marginEnd="10dp"
         android:layout_marginRight="10dp"
         android:layout_marginTop="10dp"
-        android:layout_below="@+id/native_media_layout"
-        android:textSize="12sp"
-        android:layout_alignParentRight="true"
         android:clickable="true"
-        android:paddingBottom="10dp" />
+        android:focusable="true"
+        android:paddingBottom="10dp"
+        android:text="@string/learn_more"
+        android:textColor="@android:color/black"
+        android:textSize="12sp"
+        android:textStyle="bold" />
 
     <ImageView
         android:id="@+id/native_privacy_information_icon_image"
         android:layout_width="40dp"
         android:layout_height="40dp"
-        android:padding="10dp"
-        android:layout_alignParentRight="true"
         android:layout_alignParentEnd="true"
+        android:layout_alignParentRight="true"
         android:layout_alignParentTop="true"
-        android:contentDescription="@string/native_privacy_information_icon_image"/>
+        android:contentDescription="@string/native_privacy_information_icon_image"
+        android:padding="10dp" />
 
 </RelativeLayout>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
index 044b0f43..bc59d9eb 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AbstractBannerDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.os.Bundle;
@@ -46,7 +50,7 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 
         views.mKeywordsField.setText(getArguments().getString(MoPubListFragment.KEYWORDS_KEY, ""));
         views.mUserDataKeywordsField.setText(getArguments().getString(MoPubListFragment.USER_DATA_KEYWORDS_KEY, ""));
-        hideSoftKeyboard(views.mUserDataKeywordsField);
+        hideSoftKeyboard(views.mKeywordsField);
 
         final String adUnitId = mMoPubSampleAdUnit.getAdUnitId();
         views.mDescriptionView.setText(mMoPubSampleAdUnit.getDescription());
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
index 3a1b987b..0d60e1d2 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/AdUnitDataSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.content.ContentValues;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
index f083f921..1da79d58 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/BannerDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 public class BannerDetailFragment extends AbstractBannerDetailFragment {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
index e5e8118b..67f24f33 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/DetailFragmentViewHolder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
index 1c996ffd..723ccfbe 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/InterstitialDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.os.Bundle;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
index c0c000f0..4d502cf3 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LeaderboardDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 public class LeaderboardDetailFragment extends AbstractBannerDetailFragment {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index c7cad1ac..3b8d7c0c 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.content.Context;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
index 7d16e54a..3aab7794 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubListFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.app.AlertDialog;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
index 3f3efa4a..97f3381f 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSQLiteHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.content.Context;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
index 08756572..bbec05a7 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.annotation.TargetApi;
@@ -52,6 +56,9 @@ private static void setWebDebugging() {
     @Nullable
     PersonalInfoManager mPersonalInfoManager;
 
+    @Nullable
+    private ConsentStatusChangeListener mConsentStatusChangeListener;
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -82,9 +89,10 @@ protected void onCreate(Bundle savedInstanceState) {
                 .build();
         MoPub.initializeSdk(this, sdkConfiguration, initSdkListener());
 
+        mConsentStatusChangeListener = initConsentChangeListener();
         mPersonalInfoManager = MoPub.getPersonalInformationManager();
         if (mPersonalInfoManager != null) {
-            mPersonalInfoManager.subscribeConsentStatusChangeListener(initConsentChangeListener());
+            mPersonalInfoManager.subscribeConsentStatusChangeListener(mConsentStatusChangeListener);
         }
 
         // Intercepts all logs including Level.FINEST so we can show a toast
@@ -92,6 +100,16 @@ protected void onCreate(Bundle savedInstanceState) {
         LoggingUtils.enableCanaryLogging(this);
     }
 
+    @Override
+    protected void onDestroy() {
+        if (mPersonalInfoManager != null) {
+            // unsubscribe or memory leak will occur
+            mPersonalInfoManager.unsubscribeConsentStatusChangeListener(mConsentStatusChangeListener);
+        }
+        mConsentStatusChangeListener = null;
+        super.onDestroy();
+    }
+
     private void createMoPubListFragment(@NonNull final Intent intent) {
         if (findViewById(R.id.fragment_container) != null) {
             mMoPubListFragment = new MoPubListFragment();
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
index ea3bb0d3..286cc8e7 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleAdUnit.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.os.Bundle;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
index a2678507..a094b47e 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MoPubSampleListAdapter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.content.Context;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
index 2f15a7fa..18974eb9 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/MrectDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 public class MrectDetailFragment extends AbstractBannerDetailFragment {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
index aeb3e4ff..ad2c92ce 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeGalleryFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.app.Activity;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
index 3c9bbb99..5f8bd7ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeListViewFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.location.Location;
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
index cb899fe3..b3a89c25 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/NativeRecyclerViewFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
index 747df6ea..aaa80aa4 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/RewardedVideoDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.app.AlertDialog;
@@ -107,6 +111,7 @@ public void onClick(View view) {
 
     @Override
     public void onDestroyView() {
+        MoPubRewardedVideos.setRewardedVideoListener(null);
         super.onDestroyView();
     }
 
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
index 0a715bbe..cf9c606b 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/SkyscraperDetailFragment.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 public class SkyscraperDetailFragment extends AbstractBannerDetailFragment {
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
index 734e777b..03d25605 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/Utils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.simpleadsdemo;
 
 import android.content.Context;
@@ -36,8 +40,8 @@ static boolean isAlphaNumeric(final String input) {
     static void logToast(Context context, String message) {
         Log.d(LOGTAG, message);
 
-        if (context != null) {
-            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();
+        if (context != null && context.getApplicationContext() != null) {
+            Toast.makeText(context.getApplicationContext(), message, Toast.LENGTH_SHORT).show();
         }
     }
 }
diff --git a/mopub-sample/src/test/resources/com/mopub/robolectric.properties b/mopub-sample/src/test/resources/com/mopub/robolectric.properties
index ce97d608..6f46a8e5 100644
--- a/mopub-sample/src/test/resources/com/mopub/robolectric.properties
+++ b/mopub-sample/src/test/resources/com/mopub/robolectric.properties
@@ -1 +1,5 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index eb0a8bde..97579def 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: 'shared-build.gradle'
 
 dependencies {
@@ -9,15 +13,15 @@ dependencies {
     api project(':mopub-sdk:mopub-sdk-native-video')
 
     testImplementation 'junit:junit:4.12'
-    testImplementation 'org.robolectric:robolectric:3.5.1'
+    testImplementation 'org.robolectric:robolectric:3.8'
     testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
     testImplementation 'org.robolectric:shadows-httpclient:3.5.1'
     testImplementation 'com.squareup:fest-android:1.0.7'
-    testImplementation 'org.mockito:mockito-core:1.9.5'
-    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
-    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
-    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
-    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.5'
+    testImplementation 'org.mockito:mockito-core:1.10.8'
+    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
+    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.6'
+    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
+    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.6'
 }
 
 android {
@@ -32,4 +36,4 @@ project.description = 'MoPub Android SDK'
 project.ext.displayName = 'MoPub Android SDK'
 project.ext.projectName = 'mopub-sdk'
 project.ext.uploadName = 'mopub-android-sdk'
-apply from: 'publisher.gradle'
\ No newline at end of file
+apply from: 'publisher.gradle'
diff --git a/mopub-sdk/build.properties b/mopub-sdk/build.properties
index ee52d86d..1093e1d0 100644
--- a/mopub-sdk/build.properties
+++ b/mopub-sdk/build.properties
@@ -1,3 +1,7 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 # This file is used to override default values used by the Ant build system.
 #
 # This file must be checked in Version Control Systems, as it is
diff --git a/mopub-sdk/etc/expectedFile.jpg b/mopub-sdk/etc/expectedFile.jpg
deleted file mode 100644
index 22a2a3cc..00000000
Binary files a/mopub-sdk/etc/expectedFile.jpg and /dev/null differ
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 3e785403..a12d1913 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,3 +1,7 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 #Mon Nov 13 15:46:01 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
diff --git a/mopub-sdk/gradlew.bat b/mopub-sdk/gradlew.bat
index aec99730..370f2fcb 100644
--- a/mopub-sdk/gradlew.bat
+++ b/mopub-sdk/gradlew.bat
@@ -1,3 +1,7 @@
+@rem Copyright 2018 Twitter, Inc.
+@rem Licensed under the MoPub SDK License Agreement
+@rem http://www.mopub.com/legal/sdk-license-agreement/
+
 @if "%DEBUG%" == "" @echo off
 @rem ##########################################################################
 @rem
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index 843d709e..fefe5164 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 dependencies {
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
index 7649a506..dcc5f12c 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/BannerVisibilityTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
index be3c0062..99dd04ac 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBanner.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -14,7 +18,9 @@
  * and invoke its loadAd() method.
  */
 public abstract class CustomEventBanner {
-    
+
+    private boolean mAutomaticImpressionAndClickTracking = true;
+
     /*
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
      * this message to your custom event class. Your implementation of this method can either load
@@ -44,6 +50,20 @@ protected abstract void loadBanner(Context context,
     protected void trackMpxAndThirdPartyImpressions() {
     }
 
+    /**
+     * Enables or disables automatic impression and click tracking. This is enabled by default.
+     *
+     * @param autoTrack True to use automatic impression and click tracking. False to use manual
+     *                  impression and click tracking.
+     */
+    protected void setAutomaticImpressionAndClickTracking(final boolean autoTrack) {
+        mAutomaticImpressionAndClickTracking = autoTrack;
+    }
+
+    boolean isAutomaticImpressionAndClickTrackingEnabled() {
+        return mAutomaticImpressionAndClickTracking;
+    }
+
     public interface CustomEventBannerListener {
         /*
          * Your custom event subclass must call this method when it successfully loads an ad and
@@ -75,6 +95,12 @@ protected void trackMpxAndThirdPartyImpressions() {
          */
         void onBannerClicked();
 
+        /*
+         * Your custom event subclass should call this method when an impression happens if you
+         * set automatic impression and click tracking to false. Otherwise, this method is optional.
+         */
+        void onBannerImpression();
+
         /*
          * This is an alias for onBannerClicked().
          * Your custom event subclass should call this method if the ad will cause the user to leave
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 5b24ec80..32a5b083 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -34,7 +38,7 @@
     private boolean mInvalidated;
     private MoPubView mMoPubView;
     private Context mContext;
-    private CustomEventBanner mCustomEventBanner;
+    @Nullable private CustomEventBanner mCustomEventBanner;
     private Map<String, Object> mLocalExtras;
     private Map<String, String> mServerExtras;
 
@@ -74,7 +78,7 @@ public void run() {
         }
 
         // Attempt to load the JSON extras into mServerExtras.
-        mServerExtras = new TreeMap<String, String>(serverExtras);
+        mServerExtras = new TreeMap<>(serverExtras);
 
         // Parse banner impression tracking headers to determine if we are in visibility experiment
         parseBannerImpressionTrackingHeaders();
@@ -125,6 +129,7 @@ void invalidate() {
             } catch (Exception e) {
                 MoPubLog.d("Destroying a banner visibility tracker threw an exception", e);
             }
+            mVisibilityTracker = null;
         }
         mContext = null;
         mCustomEventBanner = null;
@@ -167,13 +172,11 @@ private void cancelTimeout() {
     }
 
     private int getTimeoutDelayMilliseconds() {
-        if (mMoPubView == null
-                || mMoPubView.getAdTimeoutDelay() == null
-                || mMoPubView.getAdTimeoutDelay() < 0) {
+        if (mMoPubView == null) {
             return DEFAULT_BANNER_TIMEOUT_DELAY;
         }
 
-        return mMoPubView.getAdTimeoutDelay() * 1000;
+        return mMoPubView.getAdTimeoutDelay(DEFAULT_BANNER_TIMEOUT_DELAY);
     }
 
     private void parseBannerImpressionTrackingHeaders() {
@@ -216,7 +219,7 @@ public void onBannerLoaded(View bannerView) {
         cancelTimeout();
 
         if (mMoPubView != null) {
-            mMoPubView.nativeAdLoaded();
+            mMoPubView.creativeDownloaded();
 
             // If visibility impression tracking is enabled for banners, fire all impression
             // tracking URLs (AdServer, MPX, 3rd-party) for both HTML and MRAID banner types when
@@ -224,7 +227,9 @@ public void onBannerLoaded(View bannerView) {
             //
             // Else, retain old behavior of firing AdServer impression tracking URL if and only if
             // banner is not HTML.
-            if (mIsVisibilityImpressionTrackingEnabled) {
+            if (mIsVisibilityImpressionTrackingEnabled &&
+                    mCustomEventBanner != null &&
+                    mCustomEventBanner.isAutomaticImpressionAndClickTrackingEnabled()) {
                 // Disable autorefresh temporarily until an impression happens.
                 mMoPubView.pauseAutorefresh();
                 // Set up visibility tracker and listener if in experiment
@@ -246,7 +251,9 @@ public void onVisibilityChanged() {
             mMoPubView.setAdContentView(bannerView);
 
             // Old behavior
-            if (!mIsVisibilityImpressionTrackingEnabled) {
+            if (!mIsVisibilityImpressionTrackingEnabled &&
+                    mCustomEventBanner != null &&
+                    mCustomEventBanner.isAutomaticImpressionAndClickTrackingEnabled()) {
                 if (!(bannerView instanceof HtmlBannerWebView)) {
                     mMoPubView.trackNativeImpression();
                 }
@@ -260,11 +267,12 @@ public void onBannerFailed(MoPubErrorCode errorCode) {
             return;
         }
 
+        cancelTimeout();
+
         if (mMoPubView != null) {
             if (errorCode == null) {
                 errorCode = UNSPECIFIED;
             }
-            cancelTimeout();
             mMoPubView.loadFailUrl(errorCode);
         }
     }
@@ -300,6 +308,22 @@ public void onBannerClicked() {
         }
     }
 
+    @Override
+    public void onBannerImpression() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mMoPubView != null &&
+                mCustomEventBanner != null &&
+                !mCustomEventBanner.isAutomaticImpressionAndClickTrackingEnabled()) {
+            mMoPubView.trackNativeImpression();
+            if (mIsVisibilityImpressionTrackingEnabled) {
+                mCustomEventBanner.trackMpxAndThirdPartyImpressions();
+            }
+        }
+    }
+
     @Override
     public void onLeaveApplication() {
         onBannerClicked();
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
index 84999f66..21552d61 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/DefaultBannerAdListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import static com.mopub.mobileads.MoPubView.BannerAdListener;
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index 884f10a5..978fb7ad 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -39,15 +43,11 @@ protected void loadBanner(
         }
 
         String htmlData;
-        String redirectUrl;
         String clickthroughUrl;
-        Boolean isScrollable;
         AdReport adReport;
         if (extrasAreValid(serverExtras)) {
             htmlData = serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY);
-            redirectUrl = serverExtras.get(DataKeys.REDIRECT_URL_KEY);
             clickthroughUrl = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
-            isScrollable = Boolean.valueOf(serverExtras.get(DataKeys.SCROLLABLE_KEY));
 
             try {
                 adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
@@ -61,7 +61,7 @@ protected void loadBanner(
             return;
         }
 
-        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+        mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
 
         // We only measure viewability when we have an activity context. This sets up a delayed
@@ -89,6 +89,7 @@ protected void onInvalidate() {
 
         if (mHtmlBannerWebView != null) {
             mHtmlBannerWebView.destroy();
+            mHtmlBannerWebView = null;
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
index 3d847393..da78130d 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBannerWebView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -13,10 +17,10 @@ public HtmlBannerWebView(Context context, AdReport adReport) {
         super(context, adReport);
     }
 
-    public void init(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, String dspCreativeId) {
-        super.init(isScrollable);
+    public void init(CustomEventBannerListener customEventBannerListener, String clickthroughUrl, String dspCreativeId) {
+        super.init();
 
-        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, redirectUrl, dspCreativeId));
+        setWebViewClient(new HtmlWebViewClient(new HtmlBannerWebViewListener(customEventBannerListener), this, clickthroughUrl, dspCreativeId));
     }
 
     static class HtmlBannerWebViewListener implements HtmlWebViewListener {
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
index d6a53767..0a0539cc 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerAdapterFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
index 0e48242d..70bbe267 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/CustomEventBannerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import com.mopub.mobileads.CustomEventBanner;
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index f7be2625..2f339bbd 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
@@ -16,21 +20,17 @@ public static HtmlBannerWebView create(
             Context context,
             AdReport adReport,
             CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
             String clickthroughUrl) {
-        return instance.internalCreate(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
+        return instance.internalCreate(context, adReport, customEventBannerListener, clickthroughUrl);
     }
 
     public HtmlBannerWebView internalCreate(
             Context context,
             AdReport adReport,
             CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
             String clickthroughUrl) {
         HtmlBannerWebView htmlBannerWebView = new HtmlBannerWebView(context, adReport);
-        htmlBannerWebView.init(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl, adReport.getDspCreativeId());
+        htmlBannerWebView.init(customEventBannerListener, clickthroughUrl, adReport.getDspCreativeId());
         return htmlBannerWebView;
     }
 
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 99b7eedb..8cf24853 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 400d6467..2276f0cb 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 repositories {
@@ -12,11 +16,11 @@ dependencies {
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
-        implementation('com.mopub:libAvid-mopub:3.6.4')
+        api('com.mopub:libAvid-mopub:3.6.4')
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-        implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
+        api 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
index fac2245b..db86ec57 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
+++ b/mopub-sdk/mopub-sdk-base/src/main/AndroidManifest.xml
@@ -1,5 +1,9 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="com.mopub.mobileads.base">
-    <application/>
-</manifest>
 
+    <application>
+        <uses-library
+            android:name="org.apache.http.legacy"
+            android:required="false" />
+    </application>
+</manifest>
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
index 630c180e..b1123ccd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdFormat.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 public enum AdFormat {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
index 9fa221b2..10f12252 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdReport.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.os.Build;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
index 35d738fa..fb1be68e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdType.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
@@ -14,5 +18,4 @@
     public static final String REWARDED_PLAYABLE = "rewarded_playable";
     public static final String CUSTOM = "custom";
     public static final String CLEAR = "clear";
-    public static final String MULTI = "multi";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index a4e42464..a95ba603 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
index 6a500f26..74a8cb7b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddersInitializedListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
index 76481dee..2a09e6bf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdvancedBiddingTokens.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
@@ -6,6 +10,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 
 import org.json.JSONException;
@@ -33,7 +38,8 @@ public void addAdvancedBidders(
             @NonNull final List<Class<? extends MoPubAdvancedBidder>> advancedBidderClasses) {
         Preconditions.checkNotNull(advancedBidderClasses);
 
-        new AdvancedBiddersInitializationAsyncTask(advancedBidderClasses, this).execute();
+        AsyncTasks.safeExecuteOnExecutor(
+                new AdvancedBiddersInitializationAsyncTask(advancedBidderClasses, this));
     }
 
     @Nullable
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
index 4583112e..173922de 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
index 994f01db..4c10a739 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseLifecycleListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 45b8b764..6d65910d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.graphics.Point;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
index 66de7413..121da77d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BrowserWebViewClient.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.graphics.Bitmap;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
index a88ad866..40d4f714 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CacheService.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 0cd8abe8..671dec71 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.annotation.SuppressLint;
@@ -92,7 +96,7 @@ public int getId() {
      * Returns the singleton ClientMetadata object, using the context to obtain data if necessary.
      */
     @NonNull
-    public static ClientMetadata getInstance(Context context) {
+    public static ClientMetadata getInstance(@NonNull final Context context) {
         // Use a local variable so we can reduce accesses of the volatile field.
         ClientMetadata result = sInstance;
         if (result == null) {
@@ -126,7 +130,9 @@ public static ClientMetadata getInstance() {
     }
 
     // NEVER CALL THIS AS A USER. Get it from the Singletons class.
-    public ClientMetadata(Context context) {
+    public ClientMetadata(@NonNull final Context context) {
+        Preconditions.checkNotNull(context);
+
         mContext = context.getApplicationContext();
         mConnectivityManager =
                 (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
@@ -141,7 +147,7 @@ public ClientMetadata(Context context) {
         mAppVersion = getAppVersionFromContext(mContext);
         PackageManager packageManager = mContext.getPackageManager();
         ApplicationInfo applicationInfo = null;
-        mAppPackageName = context.getPackageName();
+        mAppPackageName = mContext.getPackageName();
         try {
             applicationInfo = packageManager.getApplicationInfo(mAppPackageName, 0);
         } catch (final NameNotFoundException e) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
index aca01406..bb97ad3a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CloseableLayout.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
index 7fc40db1..8664f3c1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CompositeSdkInitializationListener.java
@@ -1,8 +1,13 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 
 /**
@@ -10,7 +15,7 @@
  */
 class CompositeSdkInitializationListener implements SdkInitializationListener {
 
-    @NonNull private final SdkInitializationListener mSdkInitializationListener;
+    @Nullable private SdkInitializationListener mSdkInitializationListener;
     private int mTimes;
 
     /**
@@ -35,7 +40,10 @@ public void onInitializationFinished() {
             new Handler(Looper.getMainLooper()).post(new Runnable() {
                 @Override
                 public void run() {
-                    mSdkInitializationListener.onInitializationFinished();
+                    if (mSdkInitializationListener != null) {
+                        mSdkInitializationListener.onInitializationFinished();
+                        mSdkInitializationListener = null;
+                    }
                 }
             });
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
index 8303f908..6dbfd8ab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Constants.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 public class Constants {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
index f6fec437..0f65748b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/CreativeOrientation.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index a841110b..56a22f21 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
@@ -5,11 +9,9 @@
  */
 public class DataKeys {
     public static final String AD_REPORT_KEY = "mopub-intent-ad-report";
-    public static final String HTML_RESPONSE_BODY_KEY = "Html-Response-Body";
-    public static final String REDIRECT_URL_KEY = "Redirect-Url";
-    public static final String CLICKTHROUGH_URL_KEY = "Clickthrough-Url";
-    public static final String CLICK_TRACKING_URL_KEY = "Click-Tracking-Url";
-    public static final String SCROLLABLE_KEY = "Scrollable";
+    public static final String HTML_RESPONSE_BODY_KEY = "html-response-body";
+    public static final String CLICKTHROUGH_URL_KEY = "clickthrough-url";
+    public static final String CLICK_TRACKING_URL_KEY = "click-tracking-url";
     public static final String CREATIVE_ORIENTATION_KEY = "com_mopub_orientation";
     public static final String JSON_BODY_KEY = "com_mopub_native_json";
     public static final String BROADCAST_IDENTIFIER_KEY = "broadcastIdentifier";
@@ -18,39 +20,47 @@
     public static final String AD_HEIGHT = "com_mopub_ad_height";
 
     // Banner imp tracking fields
-    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
-    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
-    public static final String BANNER_IMPRESSION_PIXEL_COUNT_ENABLED = "Banner-Impression-Pixel-Count-Enabled";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "banner-impression-min-pixels";
+    public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "banner-impression-min-ms";
+    public static final String BANNER_IMPRESSION_PIXEL_COUNT_ENABLED = "banner-impression-pixel-count-enabled";
 
     // Native fields
-    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
-    public static final String IMPRESSION_VISIBLE_MS = "Impression-Visible-Ms";
-    public static final String IMPRESSION_MIN_VISIBLE_PX = "Impression-Min-Visible-Px";
+    public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "impression-min-visible-percent";
+    public static final String IMPRESSION_VISIBLE_MS = "impression-visible-ms";
+    public static final String IMPRESSION_MIN_VISIBLE_PX = "impression-min-visible-px";
 
     // Native Video fields
-    public static final String PLAY_VISIBLE_PERCENT = "Play-Visible-Percent";
-    public static final String PAUSE_VISIBLE_PERCENT = "Pause-Visible-Percent";
-    public static final String MAX_BUFFER_MS = "Max-Buffer-Ms";
+    public static final String PLAY_VISIBLE_PERCENT = "play-visible-percent";
+    public static final String PAUSE_VISIBLE_PERCENT = "pause-visible-percent";
+    public static final String MAX_BUFFER_MS = "max-buffer-ms";
+    public static final String EVENT_DETAILS = "event-details";
 
     // Rewarded Ad fields
-    public static final String REWARDED_AD_CURRENCY_NAME_KEY = "Rewarded-Ad-Currency-Name";
-    public static final String REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY = "Rewarded-Ad-Currency-Value-String";
-    public static final String REWARDED_AD_CUSTOMER_ID_KEY = "Rewarded-Ad-Customer-Id";
-    public static final String REWARDED_AD_DURATION_KEY = "Rewarded-Ad-Duration";
-    public static final String SHOULD_REWARD_ON_CLICK_KEY = "Should-Reward-On-Click";
+    public static final String REWARDED_AD_CURRENCY_NAME_KEY = "rewarded-ad-currency-name";
+    public static final String REWARDED_AD_CURRENCY_AMOUNT_STRING_KEY = "rewarded-ad-currency-value-string";
+    public static final String REWARDED_AD_CUSTOMER_ID_KEY = "rewarded-ad-customer-id";
+    public static final String REWARDED_AD_DURATION_KEY = "rewarded-ad-duration";
+    public static final String SHOULD_REWARD_ON_CLICK_KEY = "should-reward-on-click";
 
     // Viewability fields
-    public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "External-Video-Viewability-Trackers";
+    public static final String EXTERNAL_VIDEO_VIEWABILITY_TRACKERS_KEY = "external-video-viewability-trackers";
 
     // Advanced bidding fields
-    public static final String ADM_KEY = "Adm";
+    public static final String ADM_KEY = "adm";
+
+    // Video tracking fields
+    public static final String VIDEO_TRACKERS_KEY = "video-trackers";
 
     /**
      * @deprecated as of 4.12, replaced by {@link #REWARDED_AD_CUSTOMER_ID_KEY}
      */
     @Deprecated
-    public static final String REWARDED_VIDEO_CUSTOMER_ID = "Rewarded-Ad-Customer-Id";
+    public static final String REWARDED_VIDEO_CUSTOMER_ID = "rewarded-ad-customer-id";
+
+    /**
+     * @deprecated as of 5.4 since this is no longer used.
+     */
+    @Deprecated
+    public static final String REDIRECT_URL_KEY = "redirect-url";
 
-    // Video tracking fields
-    public static final String VIDEO_TRACKERS_KEY = "Video-Trackers";
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
index 25564d9b..207f5c84 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DoubleTimeTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.os.SystemClock;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
index 36423f9e..c2a81d15 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
index cf24e521..bf65416a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
index cec3a306..c7ae513c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/FullAdType.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
index 41e1c558..e839adef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
index 39134208..d6e630d9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/IntentActions.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
index 724d683a..f426f9d2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LifecycleListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
index 92270c72..60dda081 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/LocationService.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
index 42e7b7a6..6313d964 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MediationSettings.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index bf9f691f..cc07ffd1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -1,7 +1,12 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -16,7 +21,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.2.0";
+    public static final String SDK_VERSION = "5.4.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -166,6 +171,7 @@ public static void initializeSdk(@NonNull final Context context,
 
         if (sSdkInitialized) {
             MoPubLog.d("MoPub SDK is already initialized");
+            initializationFinished(sdkInitializationListener);
             return;
         }
         if (sSdkInitializing) {
@@ -180,16 +186,9 @@ public static void initializeSdk(@NonNull final Context context,
 
         sSdkInitializing = true;
 
-        final SdkInitializationListener internalSdkInitializationListener = new SdkInitializationListener() {
-            @Override
-            public void onInitializationFinished() {
-                sSdkInitializing = false;
-                sSdkInitialized = true;
-                if (sdkInitializationListener != null) {
-                    sdkInitializationListener.onInitializationFinished();
-                }
-            }
-        };
+        final InternalSdkInitializationListener internalSdkInitializationListener =
+                new InternalSdkInitializationListener(sdkInitializationListener);
+
         final SdkInitializationListener compositeSdkInitializationListener =
                 new CompositeSdkInitializationListener(internalSdkInitializationListener, 2);
 
@@ -313,6 +312,34 @@ private static void initializeRewardedVideo(@NonNull Activity activity, @NonNull
         }
     }
 
+    private static void initializationFinished(@Nullable final SdkInitializationListener sdkInitializationListener) {
+        sSdkInitializing = false;
+        sSdkInitialized = true;
+        new Handler(Looper.getMainLooper()).post(new Runnable() {
+            @Override
+            public void run() {
+                if (sdkInitializationListener != null) {
+                    sdkInitializationListener.onInitializationFinished();
+                }
+            }
+        });
+    }
+
+    private static class InternalSdkInitializationListener implements SdkInitializationListener {
+        @Nullable
+        private SdkInitializationListener mSdkInitializationListener;
+
+        InternalSdkInitializationListener(@Nullable SdkInitializationListener sdkInitializationListener) {
+            mSdkInitializationListener = sdkInitializationListener;
+        }
+
+        @Override
+        public void onInitializationFinished() {
+            initializationFinished(mSdkInitializationListener);
+            mSdkInitializationListener = null;
+        }
+    }
+
     @VisibleForTesting
     static void updateActivity(@NonNull Activity activity) {
         if (!sSearchedForUpdateActivityMethod) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
index d41f46f9..45a7068d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
index b1ec19e5..6e02770d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubAdvancedBidderData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index 26ef3318..a45d1a8a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
index d8032625..c6f5ad9e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubHttpUrlConnection.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
@@ -42,7 +46,7 @@ public static HttpURLConnection getHttpUrlConnection(@NonNull final String url)
 
         final HttpURLConnection urlConnection =
                 (HttpURLConnection) new URL(getUrl).openConnection();
-        urlConnection.setRequestProperty("User-Agent", Networking.getCachedUserAgent());
+        urlConnection.setRequestProperty("user-agent", Networking.getCachedUserAgent());
         urlConnection.setConnectTimeout(CONNECT_TIMEOUT);
         urlConnection.setReadTimeout(READ_TIMEOUT);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
index b57e1429..affe4d6c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubLifecycleManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
index 24450868..6e25fe5f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
index 126ff4b4..b3ff41be 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/Preconditions.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
index 2e456d32..1ea429d5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkConfiguration.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
index ba96a762..e3ba511c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SdkInitializationListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
index 500910dc..8bc9db8f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/SharedPreferencesHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
index 39a16649..bd8b9fdd 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlAction.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
index b665bf52..b1c7ef60 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlHandler.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index 02668325..02f34db7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.net.Uri;
@@ -113,7 +117,7 @@ static String resolveRedirectLocation(@NonNull final String baseUrl,
             @NonNull final HttpURLConnection httpUrlConnection) throws IOException, URISyntaxException {
         final URI baseUri = new URI(baseUrl);
         final int responseCode = httpUrlConnection.getResponseCode();
-        final String redirectUrl = httpUrlConnection.getHeaderField("Location");
+        final String redirectUrl = httpUrlConnection.getHeaderField("location");
         String result = null;
 
         if (responseCode >= 300 && responseCode < 400) {
@@ -123,10 +127,10 @@ static String resolveRedirectLocation(@NonNull final String baseUrl,
                 result =  baseUri.resolve(redirectUrl).toString();
             } catch (IllegalArgumentException e) {
                 // Ensure the request is cancelled instead of resolving an intermediary URL
-                MoPubLog.e("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
+                MoPubLog.d("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
                 throw new URISyntaxException(redirectUrl, "Unable to parse invalid URL");
             } catch (NullPointerException e) {
-                MoPubLog.e("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
+                MoPubLog.d("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
                 throw e;
             }
         }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
similarity index 92%
rename from mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
index 424e97d0..923e6a5d 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/VisibilityTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibilityTracker.java
@@ -1,4 +1,8 @@
-package com.mopub.nativeads;
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
 
 import android.content.Context;
 import android.graphics.Rect;
@@ -9,7 +13,6 @@
 import android.view.View;
 import android.view.ViewTreeObserver;
 
-import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Views;
 
@@ -25,7 +28,7 @@
  * Tracks views to determine when they become visible or invisible, where visibility is defined as
  * having been at least X% on the screen.
  */
-class VisibilityTracker {
+public class VisibilityTracker {
     // Time interval to use for throttling visibility checks.
     private static final int VISIBILITY_THROTTLE_MILLIS = 100;
 
@@ -41,7 +44,7 @@
     private long mAccessCounter = 0;
 
     // Listener that passes all visible and invisible views when a visibility check occurs
-    interface VisibilityTrackerListener {
+    public interface VisibilityTrackerListener {
         void onVisibilityChanged(List<View> visibleViews, List<View> invisibleViews);
     }
 
@@ -133,7 +136,7 @@ private void setViewTreeObserver(@Nullable final Context context, @Nullable fina
         viewTreeObserver.addOnPreDrawListener(mOnPreDrawListener);
     }
 
-    void setVisibilityTrackerListener(
+    public void setVisibilityTrackerListener(
             @Nullable final VisibilityTrackerListener visibilityTrackerListener) {
         mVisibilityTrackerListener = visibilityTrackerListener;
     }
@@ -141,17 +144,17 @@ void setVisibilityTrackerListener(
     /**
      * Tracks the given view for visibility.
      */
-    void addView(@NonNull final View view, final int minPercentageViewed,
+    public void addView(@NonNull final View view, final int minPercentageViewed,
             @Nullable final Integer minVisiblePx) {
         addView(view, view, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
+    public void addView(@NonNull View rootView, @NonNull final View view, final int minPercentageViewed,
             @Nullable final Integer minVisiblePx) {
         addView(rootView, view, minPercentageViewed, minPercentageViewed, minVisiblePx);
     }
 
-    void addView(@NonNull View rootView, @NonNull final View view,
+    public void addView(@NonNull View rootView, @NonNull final View view,
             final int minVisiblePercentageViewed, final int maxInvisiblePercentageViewed,
             @Nullable final Integer minVisiblePx) {
         setViewTreeObserver(view.getContext(), view);
@@ -196,14 +199,14 @@ private void trimTrackedViews(long minAccessOrder) {
     /**
      * Stops tracking a view, cleaning any pending tracking
      */
-    void removeView(@NonNull final View view) {
+    public void removeView(@NonNull final View view) {
         mTrackedViews.remove(view);
     }
 
     /**
      * Immediately clear all views. Useful for when we re-request ads for an ad placer
      */
-    void clear() {
+    public void clear() {
         mTrackedViews.clear();
         mVisibilityHandler.removeMessages(0);
         mIsVisibilityScheduled = false;
@@ -212,7 +215,7 @@ void clear() {
     /**
      * Destroy the visibility tracker, preventing it from future use.
      */
-    void destroy() {
+    public void destroy() {
         clear();
         final ViewTreeObserver viewTreeObserver = mWeakViewTreeObserver.get();
         if (viewTreeObserver != null && viewTreeObserver.isAlive()) {
@@ -222,7 +225,7 @@ void destroy() {
         mVisibilityTrackerListener = null;
     }
 
-    void scheduleVisibilityCheck() {
+    public void scheduleVisibilityCheck() {
         // Tracking this directly instead of calling hasMessages directly because we measured that
         // this led to slightly better performance.
         if (mIsVisibilityScheduled) {
@@ -273,14 +276,14 @@ public void run() {
         }
     }
 
-    static class VisibilityChecker {
+    public static class VisibilityChecker {
         // A rect to use for hit testing. Create this once to avoid excess garbage collection
         private final Rect mClipRect = new Rect();
 
         /**
          * Whether the visible time has elapsed from the start time. Easily mocked for testing.
          */
-        boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeViewed) {
+        public boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeViewed) {
             return SystemClock.uptimeMillis() - startTimeMillis >= minTimeViewed;
         }
 
@@ -288,7 +291,7 @@ boolean hasRequiredTimeElapsed(final long startTimeMillis, final int minTimeView
          * Whether the view is at least certain amount visible. If the min pixel amount is set,
          * use that. Otherwise, use the min percentage visible.
          */
-        boolean isVisible(@Nullable final View rootView, @Nullable final View view,
+        public boolean isVisible(@Nullable final View rootView, @Nullable final View view,
                 final int minPercentageViewed, @Nullable final Integer minVisiblePx) {
             // ListView & GridView both call detachFromParent() for views that can be recycled for
             // new data. This is one of the rare instances where a view will have a null parent for
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
index 75dec6a8..3573ff09 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/VisibleForTesting.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
index d2d726b7..badb1186 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/factories/MethodBuilderFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.factories;
 
 import static com.mopub.common.util.Reflection.MethodBuilder;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
index fb527fef..60982445 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/logging/MoPubLog.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.logging;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
index eab380af..ee26d20e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
index 3ac6864b..d04e0fa5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentChangeReason.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
index df1509ab..50ee38e6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
index 9888af19..4b1d220c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index d8b34bc8..6e8e96d3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
index bd407b6c..db6908aa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogLayout.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.annotation.SuppressLint;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
index dcb84da2..80fd836f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
index 2d5c1cdf..3ed7cc67 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogRequest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
index 85107b98..a60ab9f0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogResponse.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
index a19bb3ff..fb894731 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
index cba8a4b9..ece023ea 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatus.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
index 4333abbb..2ec5c03e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentStatusChangeListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index c2ffb928..bbeb5ffc 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.ContentResolver;
@@ -15,6 +19,7 @@
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.AsyncTasks;
 
 import java.util.Calendar;
 
@@ -83,7 +88,7 @@ private void refreshAdvertisingInfo() {
             return;
         }
         mRefreshingAdvertisingInfo = true;
-        new RefreshAdvertisingInfoAsyncTask().execute();
+        AsyncTasks.safeExecuteOnExecutor(new RefreshAdvertisingInfoAsyncTask());
     }
 
     void refreshAdvertisingInfoBackgroundThread() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
index 7960e5f2..a8f1c9b0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index 67ff4c0a..b7c1699f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 
@@ -11,6 +15,7 @@
 
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
 import com.mopub.common.Preconditions;
 import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.VisibleForTesting;
@@ -18,8 +23,8 @@
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.MoPubConversionTracker;
 import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.network.AdRequest;
 import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MultiAdResponse;
 import com.mopub.network.Networking;
 import com.mopub.volley.VolleyError;
 
@@ -45,7 +50,7 @@
     @NonNull private final ConsentDialogController mConsentDialogController;
     @NonNull private final MoPubConversionTracker mConversionTracker;
     @NonNull private final SyncRequest.Listener mSyncRequestListener;
-    @NonNull private AdRequest.ServerOverrideListener mServerOverrideListener;
+    @NonNull private MultiAdResponse.ServerOverrideListener mServerOverrideListener;
     @Nullable private SdkInitializationListener mSdkInitializationListener;
 
     private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
@@ -66,11 +71,11 @@ public PersonalInfoManager(@NonNull final Context context, @NonNull final String
                 new HashSet<ConsentStatusChangeListener>());
         mSyncRequestListener = new PersonalInfoSyncRequestListener();
         mServerOverrideListener = new PersonalInfoServerOverrideListener();
-        AdRequest.setServerOverrideListener(mServerOverrideListener);
+        MultiAdResponse.setServerOverrideListener(mServerOverrideListener);
 
         mConsentDialogController = new ConsentDialogController(mAppContext);
 
-        mPersonalInfoData = new PersonalInfoData(context, adUnitId);
+        mPersonalInfoData = new PersonalInfoData(mAppContext, adUnitId);
 
         mConversionTracker = new MoPubConversionTracker(mAppContext);
 
@@ -382,6 +387,10 @@ static boolean shouldMakeSyncRequest(final boolean syncRequestInFlight,
      *              a GDPR region or if a request is already in flight.
      */
     public void requestSync(final boolean force) {
+        if (!MoPub.isSdkInitialized()) {
+            return;
+        }
+
         final AdvertisingId advertisingId = ClientMetadata.getInstance(mAppContext)
                 .getMoPubIdentifier().getAdvertisingInfo();
         if (!shouldMakeSyncRequest(mSyncRequestInFlight,
@@ -394,6 +403,11 @@ public void requestSync(final boolean force) {
             return;
         }
 
+        requestSync();
+    }
+
+    @VisibleForTesting
+    void requestSync() {
         mSyncRequestConsentStatus = mPersonalInfoData.getConsentStatus();
         mSyncRequestEpochTime = Calendar.getInstance().getTimeInMillis();
         mSyncRequestInFlight = true;
@@ -547,7 +561,7 @@ public void onInitializationFinished() {
                         mSdkInitializationListener = null;
                     }
                 } else {
-                    requestSync(false);
+                    requestSync();
                 }
                 new MoPubConversionTracker(mAppContext).reportAppOpen(true);
             }
@@ -659,7 +673,7 @@ public void onErrorResponse(final VolleyError volleyError) {
         }
     }
 
-    private class PersonalInfoServerOverrideListener implements AdRequest.ServerOverrideListener {
+    private class PersonalInfoServerOverrideListener implements MultiAdResponse.ServerOverrideListener {
         @Override
         public void onForceExplicitNo(@Nullable final String consentChangeReason) {
             if (TextUtils.isEmpty(consentChangeReason)) {
@@ -705,7 +719,7 @@ PersonalInfoData getPersonalInfoData() {
     @NonNull
     @Deprecated
     @VisibleForTesting
-    AdRequest.ServerOverrideListener getServerOverrideListener() {
+    MultiAdResponse.ServerOverrideListener getServerOverrideListener() {
         return mServerOverrideListener;
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
index 62d6e69f..a11f1e31 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
index 3c99e15b..c05c3faa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
index 31b88fed..64fd28e5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
index 966453af..d4585c6e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
index e1da8d52..e08aded5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/AsyncTasks.java
@@ -1,14 +1,24 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.os.AsyncTask;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.logging.MoPubLog;
 
 import java.util.concurrent.Executor;
 
 public class AsyncTasks {
     private static Executor sExecutor;
+    private static Handler sUiThreadHandler;
 
     static {
         init();
@@ -18,6 +28,7 @@
     private static void init() {
         // Reuse the async task executor
         sExecutor = AsyncTask.THREAD_POOL_EXECUTOR;
+        sUiThreadHandler = new Handler(Looper.getMainLooper());
     }
 
     @VisibleForTesting
@@ -29,10 +40,19 @@ public static void setExecutor(Executor executor) {
      * Starting with Honeycomb, default AsyncTask#execute behavior runs the tasks serially. This
      * method attempts to force these AsyncTasks to run in parallel with a ThreadPoolExecutor.
      */
-    public static <P> void safeExecuteOnExecutor(AsyncTask<P, ?, ?> asyncTask, P... params) {
+    public static <P> void safeExecuteOnExecutor(final @NonNull AsyncTask<P, ?, ?> asyncTask, final @Nullable P... params) {
         Preconditions.checkNotNull(asyncTask, "Unable to execute null AsyncTask.");
-        Preconditions.checkUiThread("AsyncTask must be executed on the main thread");
 
-        asyncTask.executeOnExecutor(sExecutor, params);
+        if (Looper.getMainLooper() == Looper.myLooper()) {
+            asyncTask.executeOnExecutor(sExecutor, params);
+        } else {
+            MoPubLog.d("Posting AsyncTask to main thread for execution.");
+            sUiThreadHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    asyncTask.executeOnExecutor(sExecutor, params);
+                }
+            });
+        }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
index 27f49bc5..ddd6fac4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DateAndTime.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import java.text.SimpleDateFormat;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
index be7cbf45..85c157b8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
index bde599fa..7eaf95d9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Dips.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
index 652bf750..4de5865d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Drawables.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
index 52693bdb..24507a24 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Files.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import java.io.File;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
index 15177acd..eb2509d5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ImageUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.graphics.Bitmap;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
index b54723cb..19e0825b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Intents.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
@@ -21,13 +25,24 @@
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import java.util.Collections;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 
 import static android.content.Intent.FLAG_ACTIVITY_NEW_TASK;
 import static com.mopub.common.MoPub.getBrowserAgent;
 
 public class Intents {
 
+    private static final Map<String, String> STORE_SCHEME_TO_URL_MAP;
+    static {
+        Map<String, String> tempMap = new HashMap<>();
+        tempMap.put("market", "https://play.google.com/store/apps/details?%s");
+        tempMap.put("amzn", "http://www.amazon.com/gp/mas/dl/android?%s");
+        STORE_SCHEME_TO_URL_MAP = Collections.unmodifiableMap(tempMap);
+    }
+
     private Intents() {}
 
     public static void startActivity(@NonNull final Context context, @NonNull final Intent intent)
@@ -250,6 +265,14 @@ public static void launchApplicationUrl(@NonNull final Context context,
 
         if (deviceCanHandleIntent(context, intent)) {
             launchApplicationIntent(context, intent);
+        } else if (STORE_SCHEME_TO_URL_MAP.containsKey(intent.getScheme())
+                && intent.getData() != null
+                && !TextUtils.isEmpty(intent.getData().getQuery())) {
+            // If this is a market intent and we don't have the Play Store or Amazon App Store installed,
+            // create and launch an intent for the appropriate Play Store URL
+            final String storeBrowserUrl = String.format(STORE_SCHEME_TO_URL_MAP.get(intent.getScheme()), intent.getData().getQuery());
+            final Intent storeBrowserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(storeBrowserUrl));
+            launchApplicationIntent(context, storeBrowserIntent);
         } else {
             // Deeplink+ needs this exception to know primaryUrl failed and then attempt fallbackUrl
             // See UrlAction.FOLLOW_DEEP_LINK_WITH_FALLBACK
@@ -273,7 +296,7 @@ public static void launchApplicationIntent(@NonNull final Context context,
         } else {
             final String fallbackUrl = intent.getStringExtra("browser_fallback_url");
             if (TextUtils.isEmpty(fallbackUrl)) {
-                if (!"market".equalsIgnoreCase(intent.getScheme())) {
+                if (!STORE_SCHEME_TO_URL_MAP.containsKey(intent.getScheme())) {
                     launchApplicationUrl(context, getPlayStoreUri(intent));
                 } else {
                     throw new IntentNotResolvableException("Device could not handle neither " +
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
index 143dc2e7..8a540557 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/JavaScriptWebViewCallbacks.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 public enum JavaScriptWebViewCallbacks {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
index 91e0e614..bafa5c7d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Json.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.text.TextUtils;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index b373e756..1bc0e0ee 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
index 465d696c..64acb9c7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/MoPubCollections.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
index 0c5021b6..60fe2b2d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Numbers.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 public class Numbers {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
index d3a2410f..b9b12186 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Reflection.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
index 6f2d46f1..52dadad1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ReflectionTarget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index e1bf56f4..2f42a6a8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -1,73 +1,84 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 public enum ResponseHeader {
-    AD_TIMEOUT("X-AdTimeout"),
-    AD_TYPE("X-Adtype"),
-    CLICK_TRACKING_URL("X-Clickthrough"),
-    CUSTOM_EVENT_DATA("X-Custom-Event-Class-Data"),
-    CUSTOM_EVENT_NAME("X-Custom-Event-Class-Name"),
-    CUSTOM_EVENT_HTML_DATA("X-Custom-Event-Html-Data"),
-    CREATIVE_ID("X-CreativeId"),
-    DSP_CREATIVE_ID("X-DspCreativeid"),
-    FAIL_URL("X-Failurl"),
-    FULL_AD_TYPE("X-Fulladtype"),
-    HEIGHT("X-Height"),
-    IMPRESSION_URL("X-Imptracker"),
-    REDIRECT_URL("X-Launchpage"),
-    NATIVE_PARAMS("X-Nativeparams"),
-    NETWORK_TYPE("X-Networktype"),
-    ORIENTATION("X-Orientation"),
-    REFRESH_TIME("X-Refreshtime"),
-    SCROLLABLE("X-Scrollable"),
-    WARMUP("X-Warmup"),
-    WIDTH("X-Width"),
-
-    LOCATION("Location"),
-    USER_AGENT("User-Agent"),
-    ACCEPT_LANGUAGE("Accept-Language"),
-    BROWSER_AGENT("X-Browser-Agent"),
+    AD_TIMEOUT("x-ad-timeout-ms"),
+    AD_TYPE("x-adtype"),
+    CLICK_TRACKING_URL("x-clickthrough"),
+    CUSTOM_EVENT_DATA("x-custom-event-class-data"),
+    CUSTOM_EVENT_NAME("x-custom-event-class-name"),
+    CREATIVE_ID("x-creativeid"),
+    DSP_CREATIVE_ID("x-dspcreativeid"),
+    FAIL_URL("x-next-url"),
+    FULL_AD_TYPE("x-fulladtype"),
+    HEIGHT("x-height"),
+    IMPRESSION_URL("x-imptracker"),
+    IMPRESSION_URLS("imptrackers"),
+    NATIVE_PARAMS("x-nativeparams"),
+    NETWORK_TYPE("x-networktype"),
+    ORIENTATION("x-orientation"),
+    REFRESH_TIME("x-refreshtime"),
+    WARMUP("x-warmup"),
+    WIDTH("x-width"),
+    BACKFILL("x-backfill"),
+    REQUEST_ID("x-request-id"),
+
+    // HTTP headers
+    CONTENT_TYPE("content-type"),
+    LOCATION("location"),
+    USER_AGENT("user-agent"),
+    ACCEPT_LANGUAGE("accept-language"),
+
+    BROWSER_AGENT("x-browser-agent"),
 
     // Banner impression tracking fields
-    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("X-Banner-Impression-Min-Pixels"),
-    BANNER_IMPRESSION_MIN_VISIBLE_MS("X-Banner-Impression-Min-Ms"),
+    BANNER_IMPRESSION_MIN_VISIBLE_DIPS("x-banner-impression-min-pixels"),
+    BANNER_IMPRESSION_MIN_VISIBLE_MS("x-banner-impression-min-ms"),
 
     // Native fields
-    IMPRESSION_MIN_VISIBLE_PERCENT("X-Impression-Min-Visible-Percent"),
-    IMPRESSION_VISIBLE_MS("X-Impression-Visible-Ms"),
-    IMPRESSION_MIN_VISIBLE_PX("X-Native-Impression-Min-Px"),
+    IMPRESSION_MIN_VISIBLE_PERCENT("x-impression-min-visible-percent"),
+    IMPRESSION_VISIBLE_MS("x-impression-visible-ms"),
+    IMPRESSION_MIN_VISIBLE_PX("x-native-impression-min-px"),
 
     // Native Video fields
-    PLAY_VISIBLE_PERCENT("X-Play-Visible-Percent"),
-    PAUSE_VISIBLE_PERCENT("X-Pause-Visible-Percent"),
-    MAX_BUFFER_MS("X-Max-Buffer-Ms"),
+    PLAY_VISIBLE_PERCENT("x-play-visible-percent"),
+    PAUSE_VISIBLE_PERCENT("x-pause-visible-percent"),
+    MAX_BUFFER_MS("x-max-buffer-ms"),
 
     // Rewarded Ad fields
-    REWARDED_VIDEO_CURRENCY_NAME("X-Rewarded-Video-Currency-Name"),
-    REWARDED_VIDEO_CURRENCY_AMOUNT("X-Rewarded-Video-Currency-Amount"),
-    REWARDED_CURRENCIES("X-Rewarded-Currencies"),
-    REWARDED_VIDEO_COMPLETION_URL("X-Rewarded-Video-Completion-Url"),
-    REWARDED_DURATION("X-Rewarded-Duration"),
-    SHOULD_REWARD_ON_CLICK("X-Should-Reward-On-Click"),
+    REWARDED_VIDEO_CURRENCY_NAME("x-rewarded-video-currency-name"),
+    REWARDED_VIDEO_CURRENCY_AMOUNT("x-rewarded-video-currency-amount"),
+    REWARDED_CURRENCIES("x-rewarded-currencies"),
+    REWARDED_VIDEO_COMPLETION_URL("x-rewarded-video-completion-url"),
+    REWARDED_DURATION("x-rewarded-duration"),
+    SHOULD_REWARD_ON_CLICK("x-should-reward-on-click"),
 
     // Internal Video Trackers
-    VIDEO_TRACKERS("X-Video-Trackers"),
+    VIDEO_TRACKERS("x-video-trackers"),
 
     // Viewability fields
-    VIDEO_VIEWABILITY_TRACKERS("X-Video-Viewability-Trackers"),
-    DISABLE_VIEWABILITY("X-Disable-Viewability"),
+    VIDEO_VIEWABILITY_TRACKERS("x-video-viewability-trackers"),
+    DISABLE_VIEWABILITY("x-disable-viewability"),
 
-    // Advanced bidding fields
-    AD_RESPONSE_TYPE("X-Ad-Response-Type"),
+    // Client-side Waterfall
+    AD_RESPONSES("ad-responses"),
+    CONTENT("content"),
+    METADATA("metadata"),
+
+    BEFORE_LOAD_URL("x-before-load-url"),
+    AFTER_LOAD_URL("x-after-load-url"),
+    AFTER_LOAD_SUCCESS_URL("x-after-load-success-url"),
+    AFTER_LOAD_FAIL_URL("x-after-load-fail-url"),
 
     // Consent fields
     INVALIDATE_CONSENT("invalidate_consent"),
     FORCE_EXPLICIT_NO("force_explicit_no"),
     REACQUIRE_CONSENT("reacquire_consent"),
     CONSENT_CHANGE_REASON("consent_change_reason"),
-    FORCE_GDPR_APPLIES("force_gdpr_applies"),
-
-
-    @Deprecated CUSTOM_SELECTOR("X-Customselector");
+    FORCE_GDPR_APPLIES("force_gdpr_applies");
 
     private final String key;
     ResponseHeader(String key) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
index fabe6469..e7a62330 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Streams.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import com.mopub.common.logging.MoPubLog;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
index f474c2f1..1b0b65ac 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Strings.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
index f3125176..7d803067 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Timer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import java.util.concurrent.TimeUnit;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
index cc5f9e5b..97745a7b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Utils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import java.security.MessageDigest;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
index 694ff1c5..2a6f7da1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Views.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
index 414aee91..d03752af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/Visibility.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.view.View;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
index 4eb87f6f..acfe6add 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/IntentNotResolvableException.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.exceptions;
 
 public class IntentNotResolvableException extends Exception {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
index cca732da..030db506 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/exceptions/UrlParseException.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.exceptions;
 
 public class UrlParseException extends Exception {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
index ced94fa6..ee14c4e1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertGestureListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
index 48a7898f..0bdbac98 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdAlertReporter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
deleted file mode 100644
index d86c7ac9..00000000
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdRequestStatusMapping.java
+++ /dev/null
@@ -1,205 +0,0 @@
-package com.mopub.mobileads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-
-import java.util.Map;
-import java.util.TreeMap;
-
-public class AdRequestStatusMapping {
-    @NonNull
-    private final Map<String, AdRequestStatus> mAdUnitToAdRequestStatus;
-
-    public AdRequestStatusMapping() {
-        mAdUnitToAdRequestStatus = new TreeMap<String, AdRequestStatus>();
-    }
-
-    void markFail(@NonNull final String adUnitId) {
-        mAdUnitToAdRequestStatus.remove(adUnitId);
-    }
-
-    void markLoading(@NonNull final String adUnitId) {
-        mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(LoadingStatus.LOADING));
-    }
-
-    void markLoaded(
-            @NonNull final String adUnitId,
-            @Nullable final String failUrlString,
-            @Nullable final String impressionTrackerUrlString,
-            @Nullable final String clickTrackerUrlString) {
-        mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(
-                LoadingStatus.LOADED,
-                failUrlString,
-                impressionTrackerUrlString,
-                clickTrackerUrlString));
-    }
-
-    void markPlayed(@NonNull final String adUnitId) {
-        // If possible, attempt to keep the URL fields in AdRequestStatus
-        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            final AdRequestStatus adRequestStatus = mAdUnitToAdRequestStatus.get(adUnitId);
-            adRequestStatus.setStatus(LoadingStatus.PLAYED);
-        } else {
-            mAdUnitToAdRequestStatus.put(adUnitId, new AdRequestStatus(LoadingStatus.PLAYED));
-        }
-    }
-
-    boolean canPlay(@NonNull final String adUnitId) {
-        final AdRequestStatus adRequestStatus = mAdUnitToAdRequestStatus.get(adUnitId);
-        return adRequestStatus != null
-            && LoadingStatus.LOADED.equals(adRequestStatus.getStatus());
-    }
-
-    boolean isLoading(@NonNull final String adUnitId) {
-        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            return false;
-        }
-
-        return mAdUnitToAdRequestStatus.get(adUnitId).getStatus() == LoadingStatus.LOADING;
-    }
-
-    @Nullable String getFailoverUrl(@NonNull final String adUnitId) {
-        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            return null;
-        }
-
-        return mAdUnitToAdRequestStatus.get(adUnitId).getFailurl();
-    }
-
-    @Nullable String getImpressionTrackerUrlString(@NonNull final String adUnitId) {
-        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            return null;
-        }
-
-        return mAdUnitToAdRequestStatus.get(adUnitId).getImpressionUrl();
-    }
-
-    @Nullable String getClickTrackerUrlString(@NonNull final String adUnitId) {
-        if (!mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            return null;
-        }
-
-        return mAdUnitToAdRequestStatus.get(adUnitId).getClickUrl();
-    }
-
-    void clearImpressionUrl(@NonNull final String adUnitId) {
-        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            mAdUnitToAdRequestStatus.get(adUnitId).setImpressionUrl(null);
-        }
-    }
-
-    void clearClickUrl(@NonNull final String adUnitId) {
-        if (mAdUnitToAdRequestStatus.containsKey(adUnitId)) {
-            mAdUnitToAdRequestStatus.get(adUnitId).setClickUrl(null);
-        }
-    }
-
-    @Deprecated
-    @VisibleForTesting
-    void clearMapping() {
-        mAdUnitToAdRequestStatus.clear();
-    }
-
-    private static enum LoadingStatus { LOADING, LOADED, PLAYED }
-    private static class AdRequestStatus {
-        @NonNull
-        private LoadingStatus mLoadingStatus;
-        @Nullable
-        private String mFailUrl;
-        @Nullable
-        private String mImpressionUrl;
-        @Nullable
-        private String mClickUrl;
-
-        public AdRequestStatus(@NonNull final LoadingStatus loadingStatus) {
-            this(loadingStatus, null, null, null);
-        }
-
-        public AdRequestStatus(
-                @NonNull final LoadingStatus loadingStatus,
-                @Nullable final String failUrl,
-                @Nullable final String impressionUrl,
-                @Nullable final String clickUrl) {
-            Preconditions.checkNotNull(loadingStatus);
-
-            mLoadingStatus = loadingStatus;
-            mFailUrl = failUrl;
-            mImpressionUrl = impressionUrl;
-            mClickUrl = clickUrl;
-        }
-
-        @NonNull
-        private LoadingStatus getStatus() {
-            return mLoadingStatus;
-        }
-
-        private void setStatus(@NonNull final LoadingStatus loadingStatus) {
-            mLoadingStatus = loadingStatus;
-        }
-
-        @Nullable
-        private String getFailurl() {
-            return mFailUrl;
-        }
-
-        @Nullable
-        private String getImpressionUrl() {
-            return mImpressionUrl;
-        }
-
-        private void setImpressionUrl(@Nullable final String impressionUrl) {
-            mImpressionUrl = impressionUrl;
-        }
-
-        @Nullable
-        private String getClickUrl() {
-            return mClickUrl;
-        }
-
-        private void setClickUrl(@Nullable final String clickUrl) {
-            mClickUrl = clickUrl;
-        }
-
-        @Override
-        public boolean equals(Object o) {
-            if (o == null) {
-                return false;
-            }
-
-            if (this == o) {
-                return true;
-            }
-
-            if (!(o instanceof AdRequestStatus)) {
-                return false;
-            }
-
-            final AdRequestStatus that = (AdRequestStatus) o;
-
-            return this.mLoadingStatus.equals(that.mLoadingStatus) &&
-                    TextUtils.equals(this.mFailUrl, that.mFailUrl) &&
-                    TextUtils.equals(this.mImpressionUrl, that.mImpressionUrl) &&
-                    TextUtils.equals(this.mClickUrl, that.mClickUrl);
-        }
-
-        @Override
-        public int hashCode() {
-            int result = 29;
-            result = 31 * result + mLoadingStatus.ordinal();
-            result = 31 * result + (mFailUrl != null
-                    ? mFailUrl.hashCode()
-                    : 0);
-            result = 31 * result + (mImpressionUrl != null
-                    ? mImpressionUrl.hashCode()
-                    : 0);
-            result = 31 * result + (mClickUrl != null
-                    ? mClickUrl.hashCode()
-                    : 0);
-            return result;
-        }
-    }
-}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
index a273daeb..7d0f1c0b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdTypeTranslator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index a97f8e42..8f4cb55c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -1,5 +1,10 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.location.Location;
 import android.net.ConnectivityManager;
@@ -24,13 +29,12 @@
 import com.mopub.common.util.Dips;
 import com.mopub.common.util.Utils;
 import com.mopub.mraid.MraidNativeCommandHandler;
-import com.mopub.network.AdRequest;
+import com.mopub.network.AdLoader;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.Networking;
 import com.mopub.network.TrackingRequest;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
 import java.util.HashMap;
@@ -42,14 +46,14 @@
 
 public class AdViewController {
     static final int DEFAULT_REFRESH_TIME_MILLISECONDS = 60000;  // 1 minute
-    static final int MAX_REFRESH_TIME_MILLISECONDS = 600000; // 10 minutes
-    static final double BACKOFF_FACTOR = 1.5;
+    private static final int MAX_REFRESH_TIME_MILLISECONDS = 600000; // 10 minutes
+    private static final double BACKOFF_FACTOR = 1.5;
     private static final FrameLayout.LayoutParams WRAP_AND_CENTER_LAYOUT_PARAMS =
             new FrameLayout.LayoutParams(
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     FrameLayout.LayoutParams.WRAP_CONTENT,
                     Gravity.CENTER);
-    private final static WeakHashMap<View,Boolean> sViewShouldHonorServerDimensions = new WeakHashMap<View, Boolean>();
+    private final static WeakHashMap<View,Boolean> sViewShouldHonorServerDimensions = new WeakHashMap<>();
 
     private final long mBroadcastIdentifier;
 
@@ -57,22 +61,22 @@
     @Nullable private MoPubView mMoPubView;
     @Nullable private WebViewAdUrlGenerator mUrlGenerator;
 
+    @Nullable private Request mActiveRequest;
+    @Nullable AdLoader mAdLoader;
+    @NonNull private final AdLoader.Listener mAdListener;
     @Nullable private AdResponse mAdResponse;
     @Nullable private String mCustomEventClassName;
     private final Runnable mRefreshRunnable;
-    @NonNull private final AdRequest.Listener mAdListener;
 
     private boolean mIsDestroyed;
     private Handler mHandler;
-    private boolean mIsLoading;
-    private String mUrl;
     private boolean mExpanded;
 
     // This is the power of the exponential term in the exponential backoff calculation.
     @VisibleForTesting
     int mBackoffPower = 1;
 
-    private Map<String, Object> mLocalExtras = new HashMap<String, Object>();
+    private Map<String, Object> mLocalExtras = new HashMap<>();
 
     /**
      * This is the current auto refresh status. If this is true, then ads will attempt to refresh.
@@ -93,8 +97,6 @@
     private boolean mIsTesting;
     private boolean mAdWasLoaded;
     @Nullable private String mAdUnitId;
-    private int mTimeoutMilliseconds;
-    @Nullable private AdRequest mActiveRequest;
     @Nullable private Integer mRefreshTimeMillis;
 
     public static void setShouldHonorServerDimensions(View view) {
@@ -110,13 +112,12 @@ public AdViewController(@NonNull Context context, @NonNull MoPubView view) {
         mMoPubView = view;
 
         // Timeout value of less than 0 means use the ad format's default timeout
-        mTimeoutMilliseconds = -1;
         mBroadcastIdentifier = Utils.generateUniqueId();
 
         mUrlGenerator = new WebViewAdUrlGenerator(mContext.getApplicationContext(),
                 MraidNativeCommandHandler.isStorePictureSupported(mContext));
 
-        mAdListener = new AdRequest.Listener() {
+        mAdListener = new AdLoader.Listener() {
             @Override
             public void onSuccess(final AdResponse response) {
                 onAdLoadSuccess(response);
@@ -143,11 +144,8 @@ void onAdLoadSuccess(@NonNull final AdResponse adResponse) {
         mAdResponse = adResponse;
         mCustomEventClassName = adResponse.getCustomEventClassName();
         // Do other ad loading setup. See AdFetcher & AdLoadTask.
-        mTimeoutMilliseconds = mAdResponse.getAdTimeoutMillis() == null
-                ? mTimeoutMilliseconds
-                : mAdResponse.getAdTimeoutMillis();
         mRefreshTimeMillis = mAdResponse.getRefreshTimeMillis();
-        setNotLoading();
+        mActiveRequest = null;
 
         loadCustomEvent(mMoPubView, adResponse.getCustomEventClassName(),
                 adResponse.getServerExtras());
@@ -175,7 +173,6 @@ void onAdLoadError(final VolleyError error) {
             mBackoffPower++;
         }
 
-        setNotLoading();
         adDidFail(errorCode);
     }
 
@@ -250,11 +247,12 @@ private void internalLoadAd() {
         }
 
         String adUrl = generateAdUrl();
-        loadNonJavascript(adUrl);
+        loadNonJavascript(adUrl, null);
     }
 
-    void loadNonJavascript(@Nullable final String url) {
+    void loadNonJavascript(@Nullable final String url, @Nullable final MoPubError moPubError) {
         if (url == null) {
+            adDidFail(MoPubErrorCode.NO_FILL);
             return;
         }
 
@@ -262,36 +260,29 @@ void loadNonJavascript(@Nullable final String url) {
             MoPubLog.d("Loading url: " + url);
         }
 
-        if (mIsLoading) {
+        if (mActiveRequest != null) {
             if (!TextUtils.isEmpty(mAdUnitId)) {  // This shouldn't be able to happen?
                 MoPubLog.i("Already loading an ad for " + mAdUnitId + ", wait to finish.");
             }
             return;
         }
 
-        mUrl = url;
-        mIsLoading = true;
-
-        fetchAd(mUrl);
+        fetchAd(url, moPubError);
     }
 
+    @Deprecated
     public void reload() {
-        MoPubLog.d("Reload ad: " + mUrl);
-        loadNonJavascript(mUrl);
+        loadAd();
     }
 
     /**
      * Returns true if continuing to load the failover url, false if the ad actually did not fill.
      */
     boolean loadFailUrl(MoPubErrorCode errorCode) {
-        mIsLoading = false;
-
         Log.v("MoPub", "MoPubErrorCode: " + (errorCode == null ? "" : errorCode.toString()));
 
-        final String failUrl = mAdResponse == null ? "" : mAdResponse.getFailoverUrl();
-        if (!TextUtils.isEmpty(failUrl)) {
-            MoPubLog.d("Loading failover url: " + failUrl);
-            loadNonJavascript(failUrl);
+        if (mAdLoader != null && mAdLoader.hasMoreAds()) {
+            loadNonJavascript("", errorCode);
             return true;
         } else {
             // No other URLs to try, so signal a failure.
@@ -301,13 +292,24 @@ boolean loadFailUrl(MoPubErrorCode errorCode) {
     }
 
     void setNotLoading() {
-        this.mIsLoading = false;
         if (mActiveRequest != null) {
             if (!mActiveRequest.isCanceled()) {
                 mActiveRequest.cancel();
             }
             mActiveRequest = null;
         }
+        mAdLoader = null;
+    }
+
+    void creativeDownloadSuccess() {
+        scheduleRefreshTimerIfEnabled();
+
+        if (mAdLoader == null) {
+            MoPubLog.w("mAdLoader is not supposed to be null");
+            return;
+        }
+        mAdLoader.creativeDownloadSuccess();
+        mAdLoader = null;
     }
 
     public String getKeywords() {
@@ -462,10 +464,7 @@ void cleanup() {
             return;
         }
 
-        if (mActiveRequest != null) {
-            mActiveRequest.cancel();
-            mActiveRequest = null;
-        }
+        setNotLoading();
 
         setAutoRefreshStatus(false);
         cancelRefreshTimer();
@@ -481,13 +480,17 @@ void cleanup() {
         mIsDestroyed = true;
     }
 
-    Integer getAdTimeoutDelay() {
-        return mTimeoutMilliseconds;
+    @NonNull
+    Integer getAdTimeoutDelay(int defaultValue) {
+        if (mAdResponse == null) {
+            return defaultValue;
+        }
+        return mAdResponse.getAdTimeoutMillis(defaultValue);
     }
 
     void trackImpression() {
         if (mAdResponse != null) {
-            TrackingRequest.makeTrackingHttpRequest(mAdResponse.getImpressionTrackingUrl(),
+            TrackingRequest.makeTrackingHttpRequest(mAdResponse.getImpressionTrackingUrls(),
                     mContext);
         }
     }
@@ -500,7 +503,7 @@ void registerClick() {
         }
     }
 
-    void fetchAd(String url) {
+    void fetchAd(@NonNull String url, @Nullable final MoPubError moPubError) {
         MoPubView moPubView = getMoPubView();
         if (moPubView == null || mContext == null) {
             MoPubLog.d("Can't load an ad in this ad view because it was destroyed.");
@@ -508,15 +511,12 @@ void fetchAd(String url) {
             return;
         }
 
-        AdRequest adRequest = new AdRequest(url,
-                moPubView.getAdFormat(),
-                mAdUnitId,
-                mContext,
-                mAdListener
-        );
-        RequestQueue requestQueue = Networking.getRequestQueue(mContext);
-        requestQueue.add(adRequest);
-        mActiveRequest = adRequest;
+        synchronized (this) {
+            if (mAdLoader == null || !mAdLoader.hasMoreAds()) {
+                mAdLoader = new AdLoader(url, moPubView.getAdFormat(), mAdUnitId, mContext, mAdListener);
+            }
+        }
+        mActiveRequest = mAdLoader.loadNextAd(moPubError);
     }
 
     void forceRefresh() {
@@ -566,7 +566,7 @@ void scheduleRefreshTimerIfEnabled() {
 
     void setLocalExtras(Map<String, Object> localExtras) {
         mLocalExtras = (localExtras != null)
-                ? new TreeMap<String,Object>(localExtras)
+                ? new TreeMap<>(localExtras)
                 : new TreeMap<String,Object>();
     }
 
@@ -575,7 +575,7 @@ void setLocalExtras(Map<String, Object> localExtras) {
      */
     Map<String, Object> getLocalExtras() {
         return (mLocalExtras != null)
-                ? new TreeMap<String,Object>(mLocalExtras)
+                ? new TreeMap<>(mLocalExtras)
                 : new TreeMap<String,Object>();
     }
 
@@ -583,6 +583,7 @@ private void cancelRefreshTimer() {
         mHandler.removeCallbacks(mRefreshRunnable);
     }
 
+    @SuppressLint("MissingPermission")
     private boolean isNetworkAvailable() {
         if (mContext == null) {
             return false;
@@ -593,9 +594,11 @@ private boolean isNetworkAvailable() {
         }
 
         // Otherwise, perform the connectivity check.
-        ConnectivityManager cm
-                = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
-        NetworkInfo networkInfo = cm.getActiveNetworkInfo();
+        ConnectivityManager cm = (ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo networkInfo = null;
+        if (cm != null) {
+            networkInfo = cm.getActiveNetworkInfo();
+        }
         return networkInfo != null && networkInfo.isConnected();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
index 01087aa5..ec166600 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AvidBuyerTagXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
index 9f6b7f32..ac238667 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseBroadcastReceiver.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.BroadcastReceiver;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
index b65913eb..957a56b5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseHtmlWebView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -31,8 +35,8 @@ public BaseHtmlWebView(Context context, AdReport adReport) {
         setBackgroundColor(Color.TRANSPARENT);
     }
 
-    public void init(boolean isScrollable) {
-        initializeOnTouchListener(isScrollable);
+    public void init() {
+        initializeOnTouchListener();
     }
 
     @Override
@@ -80,13 +84,13 @@ void loadHtmlResponse(String htmlResponse) {
                 "text/html", "utf-8", null);
     }
 
-    void initializeOnTouchListener(final boolean isScrollable) {
+    void initializeOnTouchListener() {
         setOnTouchListener(new View.OnTouchListener() {
             public boolean onTouch(View v, MotionEvent event) {
                 mViewGestureDetector.sendTouchEvent(event);
 
                 // We're not handling events if the current action is ACTION_MOVE
-                return (event.getAction() == MotionEvent.ACTION_MOVE) && !isScrollable;
+                return event.getAction() == MotionEvent.ACTION_MOVE;
             }
         });
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
index a3906be0..4f5a0905 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoPlayerActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
index 9e31439a..25d36531 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseVideoViewController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
index 53a57f6c..1fe53742 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/BaseWebView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.annotation.SuppressLint;
@@ -45,6 +49,10 @@ protected void onAttachedToWindow() {
 
     @Override
     public void destroy() {
+        if (mIsDestroyed) {
+            return;
+        }
+
         mIsDestroyed = true;
 
         // Needed to prevent receiving the following error on Android versions using WebViewClassic
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
index d667ea73..4f6e37c9 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
index 8b310536..6386f62a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/FacebookKeywordProvider.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
index 743c4d69..40b51de2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewClient.java
@@ -1,17 +1,16 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
-import android.graphics.Bitmap;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
 import com.mopub.common.UrlAction;
 import com.mopub.common.UrlHandler;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.util.Intents;
-import com.mopub.exceptions.IntentNotResolvableException;
 
 import java.util.EnumSet;
 
@@ -37,15 +36,12 @@
     private final HtmlWebViewListener mHtmlWebViewListener;
     private final BaseHtmlWebView mHtmlWebView;
     private final String mClickthroughUrl;
-    private final String mRedirectUrl;
 
     HtmlWebViewClient(HtmlWebViewListener htmlWebViewListener,
-            BaseHtmlWebView htmlWebView, String clickthrough,
-            String redirect, String dspCreativeId) {
+            BaseHtmlWebView htmlWebView, String clickthrough, String dspCreativeId) {
         mHtmlWebViewListener = htmlWebViewListener;
         mHtmlWebView = htmlWebView;
         mClickthroughUrl = clickthrough;
-        mRedirectUrl = redirect;
         mDspCreativeId = dspCreativeId;
         mContext = htmlWebView.getContext();
     }
@@ -90,22 +86,4 @@ public void onFailLoad() {
                 .build().handleUrl(mContext, url, mHtmlWebView.wasClicked());
         return true;
     }
-
-    @Override
-    public void onPageStarted(WebView view, String url, Bitmap favicon) {
-        // If the URL being loaded shares the redirectUrl prefix, open it in the browser.
-        if (mRedirectUrl != null && url.startsWith(mRedirectUrl)) {
-            view.stopLoading();
-            if (mHtmlWebView.wasClicked()) {
-                try {
-                    Intents.showMoPubBrowserForUrl(mContext, Uri.parse(url), mDspCreativeId);
-                } catch (IntentNotResolvableException e) {
-                    MoPubLog.d(e.getMessage());
-                }
-            } else {
-                MoPubLog.d("Attempted to redirect without user interaction");
-            }
-        }
-    }
-
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
index 41ee0dbb..bbb2bd9b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/HtmlWebViewListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 public interface HtmlWebViewListener {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
index e2a377da..78d5b54f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/Interstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 490ba301..e3fc6841 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java
new file mode 100644
index 00000000..ee9ee386
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubError.java
@@ -0,0 +1,24 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+/**
+ * Temporary solution, this interface will be removed in the next major release
+ */
+@Deprecated
+public interface MoPubError {
+    int ER_SUCCESS = 0;
+    int ER_ADAPTER_NOT_FOUND = 1;
+    int ER_TIMEOUT = 2;
+    int ER_INVALID_DATA = 3;
+    int ER_UNSPECIFIED = 10000;
+
+    /**
+     * {@link MoPubErrorCode} and NativeErrorCode must implement this function to map
+     * enum value to server error code value
+     * @return ER_* constant value
+     */
+    int getIntCode();
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index cc74ef2c..1dfa2aab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -1,18 +1,30 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
-public enum MoPubErrorCode {
+public enum MoPubErrorCode implements MoPubError {
+    AD_SUCCESS("ad successfully loaded."),
+    DO_NOT_TRACK("Do not track is enabled."),
+    UNSPECIFIED("Unspecified error."),
+
+    // Ad load server errors
     NO_FILL("No ads found."),
     WARMUP("Ad unit is warming up. Try again in a few minutes."),
     SERVER_ERROR("Unable to connect to MoPub adserver."),
+
+    // Client ad load errors
     INTERNAL_ERROR("Unable to serve ad due to invalid internal state."),
     CANCELLED("Ad request was cancelled."),
     NO_CONNECTION("No internet connection detected."),
 
+    ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
+    ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
+
     /** see {@link com.mopub.common.Constants#AD_EXPIRATION_DELAY } */
     EXPIRED("Ad expired since it was not shown within 4 hours."),
 
-    ADAPTER_NOT_FOUND("Unable to find Native Network or Custom Event adapter."),
-    ADAPTER_CONFIGURATION_ERROR("Native Network or Custom Event adapter was configured incorrectly."),
     NETWORK_TIMEOUT("Third-party network failed to respond in a timely manner."),
     NETWORK_NO_FILL("Third-party network failed to provide an ad."),
     NETWORK_INVALID_STATE("Third-party network failed due to invalid internal state."),
@@ -20,20 +32,16 @@
     VIDEO_CACHE_ERROR("Error creating a cache to store downloaded videos."),
     VIDEO_DOWNLOAD_ERROR("Error downloading video."),
 
-    VIDEO_NOT_AVAILABLE("No video loaded for ad unit."),
-    VIDEO_PLAYBACK_ERROR("Error playing a video."),
+    GDPR_DOES_NOT_APPLY("GDPR does not apply. Ignoring consent-related actions."),
 
     REWARDED_CURRENCIES_PARSING_ERROR("Error parsing rewarded currencies JSON header."),
     REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
 
-    DO_NOT_TRACK("Do not track is enabled."),
-    GDPR_DOES_NOT_APPLY("GDPR does not apply. Ignoring consent-related actions."),
-
-    UNSPECIFIED("Unspecified error.");
+    VIDEO_NOT_AVAILABLE("No video loaded for ad unit."),
+    VIDEO_PLAYBACK_ERROR("Error playing a video.");
 
     private final String message;
-
-    private MoPubErrorCode(String message) {
+    MoPubErrorCode(String message) {
         this.message = message;
     }
 
@@ -41,4 +49,17 @@ private MoPubErrorCode(String message) {
     public String toString() {
         return this.message;
     }
+
+    @Override
+    public int getIntCode() {
+        switch (this) {
+            case NETWORK_TIMEOUT:
+                return ER_TIMEOUT;
+            case ADAPTER_NOT_FOUND:
+                return ER_ADAPTER_NOT_FOUND;
+            case AD_SUCCESS:
+                return ER_SUCCESS;
+        }
+        return ER_UNSPECIFIED;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 4f6fd25e..51ddfccb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -136,8 +140,12 @@ private void invalidateAdapter() {
         }
     }
 
-    Integer getAdTimeoutDelay() {
-        return (mAdViewController != null) ? mAdViewController.getAdTimeoutDelay() : null;
+    @NonNull
+    Integer getAdTimeoutDelay(int defaultValue) {
+        if (mAdViewController == null) {
+            return defaultValue;
+        }
+        return mAdViewController.getAdTimeoutDelay(defaultValue);
     }
 
     protected boolean loadFailUrl(@NonNull final MoPubErrorCode errorCode) {
@@ -252,8 +260,10 @@ protected void adClicked() {
         }
     }
 
-    protected void nativeAdLoaded() {
-        if (mAdViewController != null) mAdViewController.scheduleRefreshTimerIfEnabled();
+    protected void creativeDownloaded() {
+        if (mAdViewController != null) {
+            mAdViewController.creativeDownloadSuccess();
+        }
         adLoaded();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
index 18a3a137..3c2db53a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoatBuyerTagXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
index ff1bfc63..824bee4d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MraidVideoPlayerActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
index ee2512ba..d7ca7a1d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/RepeatingHandlerRunnable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index e0006a9b..a6cfc1e6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
index dbbec142..6cb38fe0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAdXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
index b2016d12..f019f8ef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
index 6d269f82..841b4a3e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdConfig.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
index 1d977fb1..681a00ba 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastCompanionAdXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
index 532050bf..2ccdb5f5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastErrorCode.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
index c4145a13..262893f6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionParentXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
index 7b46bd30..b1d6bb14 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastExtensionXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
index a179b4f4..92c9d18f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastFractionalProgressTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
index ebf2cbee..6a8ddfad 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconConfig.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
index 68afcb66..01d58c1b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastIconXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
index 108d5f5c..b18466f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastInLineXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
index ce6a4b9a..00a5fe38 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastLinearXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
index 73881485..42309959 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacro.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
index 429376ba..af7b4b77 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMacroHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
index 2e1e5fcb..6d5a1acb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
index a86d500c..1369bb98 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastMediaXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
index 41d387de..f803cc17 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
index 51db66d4..b5a3afcf 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastResourceXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
index 4dbde1f8..f2eb47c0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
index dbf37d7f..dcc34306 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTask.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.graphics.Bitmap;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
index a547b3a5..4e075c24 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCloseButtonWidget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index c845fd9d..e9480f17 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
index 7d3dc4c9..35666b24 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoCtaButtonWidget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
index bbc19b9b..8cad870e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoGradientStripWidget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
index 9af9ded0..fba3292a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoProgressBarWidget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
index 8704e0fe..4fa00bbb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoRadialCountdownWidget.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
index a34b447b..a73a21ca 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index a1e67198..a4856be3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
index b7c6319c..99bfb8ed 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewCountdownRunnable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
index 3e9e8970..760ab6f8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewProgressRunnable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
index ba8288f1..9cacee32 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWebView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
index a7028079..dbc388b7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastWrapperXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
index 8982783b..12144699 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
index e646cae9..cbc9146c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastXmlManagerAggregator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
index 968e5550..3cf36b15 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoDownloader.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.AsyncTask;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
index 4a041f44..4df61652 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoTrackingEvent.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
index 4605651d..91d84566 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
index 69438c34..abd08494 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
index cdb92180..b8b64ffa 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ViewGestureDetector.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
index e1d2cb3d..227d63ff 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewAdUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
index 1cbb4a40..52de067c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/WebViewCacheService.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.annotation.SuppressLint;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
index 994fbef2..e4965d33 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/AdViewControllerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
index 8a335dc9..0915bcc7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MoPubViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
index 50c5391e..50ccdfc5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/MraidControllerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
index 2d754c77..0f6d3fc1 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/factories/VastManagerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
index dbe95757..f0e36d1a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/BaseWidgetDrawable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
index 123f33e3..53fc6c74 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CloseButtonDrawable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.graphics.Canvas;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
index d3077bac..a9b9cc9e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/CtaButtonDrawable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
index 68f20059..dcc02f82 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/DrawableConstants.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.graphics.Color;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
index cc0791a9..6c569804 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/MraidJavascript.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 public class MraidJavascript {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
index 7bfc5d0e..c1da6d21 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/ProgressBarDrawable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
index 318a6834..8a0e0e09 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/resource/RadialCountdownDrawable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.resource;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
index 05ceec73..f4bcda5f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/WebViews.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.util;
 
 import android.os.Build;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
index d5c8d3b5..67c8a675 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/util/XmlUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.util;
 
 import org.w3c.dom.Document;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 00ccf7bd..0f17e025 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.ActivityNotFoundException;
@@ -22,12 +26,13 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.Constants;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.BaseWebView;
 import com.mopub.mobileads.ViewGestureDetector;
 import com.mopub.mobileads.ViewGestureDetector.UserClickListener;
-import com.mopub.mraid.MraidBridge.MraidWebView.OnVisibilityChangedListener;
 import com.mopub.mraid.MraidNativeCommandHandler.MraidCommandFailureListener;
 import com.mopub.network.Networking;
 
@@ -38,6 +43,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.util.HashMap;
+import java.util.List;
 import java.util.Map;
 
 public class MraidBridge {
@@ -177,7 +183,7 @@ public boolean onTouch(final View v, final MotionEvent event) {
             }
         });
 
-        mMraidWebView.setVisibilityChangedListener(new OnVisibilityChangedListener() {
+        mMraidWebView.setVisibilityChangedListener(new MraidWebView.OnVisibilityChangedListener() {
             @Override
             public void onVisibilityChanged(final boolean isVisible) {
                 if (mMraidBridgeListener != null) {
@@ -188,7 +194,10 @@ public void onVisibilityChanged(final boolean isVisible) {
     }
 
     void detach() {
-        mMraidWebView = null;
+        if (mMraidWebView != null) {
+            mMraidWebView.destroy();
+            mMraidWebView = null;
+        }
     }
 
     public void setContentHtml(@NonNull String htmlData) {
@@ -218,7 +227,7 @@ void injectJavaScript(@NonNull String javascript) {
                     + "attached:\n\t" + javascript);
             return;
         }
-        MoPubLog.v("Injecting Javascript into MRAID WebView:\n\t" + javascript);
+        MoPubLog.d("Injecting Javascript into MRAID WebView:\n\t" + javascript);
         mMraidWebView.loadUrl("javascript:" + javascript);
     }
 
@@ -234,17 +243,33 @@ private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand comm
     }
 
     public static class MraidWebView extends BaseWebView {
+
+        private static final int DEFAULT_MIN_VISIBLE_PX = 1;
+
         public interface OnVisibilityChangedListener {
             void onVisibilityChanged(boolean isVisible);
         }
 
         @Nullable private OnVisibilityChangedListener mOnVisibilityChangedListener;
+        @Nullable private VisibilityTracker mVisibilityTracker;
 
-        private boolean mIsVisible;
+        private boolean mMraidViewable;
 
         public MraidWebView(Context context) {
             super(context);
-            mIsVisible = getVisibility() == View.VISIBLE;
+
+            mVisibilityTracker = new VisibilityTracker(context);
+            final VisibilityTracker.VisibilityTrackerListener visibilityTrackerListener = new VisibilityTracker.VisibilityTrackerListener() {
+                @Override
+                public void onVisibilityChanged(@NonNull final List<View> visibleViews,
+                        @NonNull final List<View> invisibleViews) {
+                    Preconditions.checkNotNull(visibleViews);
+                    Preconditions.checkNotNull(invisibleViews);
+
+                    setMraidViewable(visibleViews.contains(MraidWebView.this));
+                }
+            };
+            mVisibilityTracker.setVisibilityTrackerListener(visibilityTrackerListener);
         }
 
         void setVisibilityChangedListener(@Nullable OnVisibilityChangedListener listener) {
@@ -254,17 +279,38 @@ void setVisibilityChangedListener(@Nullable OnVisibilityChangedListener listener
         @Override
         protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
             super.onVisibilityChanged(changedView, visibility);
-            boolean newIsVisible = (visibility == View.VISIBLE);
-            if (newIsVisible != mIsVisible) {
-                mIsVisible = newIsVisible;
-                if (mOnVisibilityChangedListener != null) {
-                    mOnVisibilityChangedListener.onVisibilityChanged(mIsVisible);
-                }
+            if (mVisibilityTracker == null) {
+                setMraidViewable(visibility == View.VISIBLE);
+                return;
             }
+            if (visibility == View.VISIBLE) {
+                mVisibilityTracker.clear();
+                mVisibilityTracker.addView(changedView, this, 0, 0, DEFAULT_MIN_VISIBLE_PX);
+            } else {
+                mVisibilityTracker.removeView(this);
+                setMraidViewable(false);
+            }
+        }
+
+        private void setMraidViewable(final boolean viewable) {
+            if (mMraidViewable == viewable) {
+                return;
+            }
+            mMraidViewable = viewable;
+            if (mOnVisibilityChangedListener != null) {
+                mOnVisibilityChangedListener.onVisibilityChanged(viewable);
+            }
+        }
+
+        public boolean isMraidViewable() {
+            return mMraidViewable;
         }
 
-        public boolean isVisible() {
-            return mIsVisible;
+        @Override
+        public void destroy() {
+            super.destroy();
+            mVisibilityTracker = null;
+            mOnVisibilityChangedListener = null;
         }
     }
 
@@ -293,7 +339,7 @@ boolean handleShouldOverrideUrl(@NonNull final String url) {
         try {
             uri = new URI(url);
         } catch (URISyntaxException e) {
-            MoPubLog.w("Invalid MRAID URL: " + url);
+            MoPubLog.d("Invalid MRAID URL: " + url);
             fireErrorEvent(MraidJavascriptCommand.UNSPECIFIED, "Mraid command sent an invalid URL");
             return true;
         }
@@ -594,8 +640,9 @@ boolean isClicked() {
         return mIsClicked;
     }
 
-    boolean isVisible() {
-        return mMraidWebView != null && mMraidWebView.isVisible();
+    boolean isViewable() {
+        final MraidWebView mraidWebView = mMraidWebView;
+        return mraidWebView != null && mraidWebView.isMraidViewable();
     }
 
     boolean isAttached() {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
index 3db8e050..53cb3a76 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidCommandException.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 class MraidCommandException extends Exception {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index ef3c6834..0c3e9e99 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
@@ -25,13 +29,13 @@
 import android.widget.FrameLayout.LayoutParams;
 
 import com.mopub.common.AdReport;
-import com.mopub.common.ExternalViewabilitySessionManager;
-import com.mopub.common.UrlHandler;
 import com.mopub.common.CloseableLayout;
 import com.mopub.common.CloseableLayout.ClosePosition;
 import com.mopub.common.CloseableLayout.OnCloseListener;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.Preconditions;
 import com.mopub.common.UrlAction;
+import com.mopub.common.UrlHandler;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.DeviceUtils;
@@ -523,7 +527,7 @@ public void run() {
                         MraidNativeCommandHandler.isStorePictureSupported(mContext),
                         isInlineVideoAvailable());
                 mMraidBridge.notifyPlacementType(mPlacementType);
-                mMraidBridge.notifyViewability(mMraidBridge.isVisible());
+                mMraidBridge.notifyViewability(mMraidBridge.isViewable());
                 mMraidBridge.notifyReady();
             }
         });
@@ -547,7 +551,7 @@ public void run() {
                         isInlineVideoAvailable());
                 mTwoPartBridge.notifyViewState(mViewState);
                 mTwoPartBridge.notifyPlacementType(mPlacementType);
-                mTwoPartBridge.notifyViewability(mTwoPartBridge.isVisible());
+                mTwoPartBridge.notifyViewability(mTwoPartBridge.isViewable());
                 mTwoPartBridge.notifyReady();
             }
         });
@@ -654,16 +658,18 @@ public void destroy() {
         Views.removeFromParent(mCloseableAdContainer);
 
         // Calling destroy eliminates a memory leak on Gingerbread devices
+        detachMraidWebView();
+        detachTwoParWebView();
+    }
+
+    private void detachMraidWebView() {
         mMraidBridge.detach();
-        if (mMraidWebView != null) {
-            mMraidWebView.destroy();
-            mMraidWebView = null;
-        }
+        mMraidWebView = null;
+    }
+
+    private void detachTwoParWebView() {
         mTwoPartBridge.detach();
-        if (mTwoPartWebView != null) {
-            mTwoPartWebView.destroy();
-            mTwoPartWebView = null;
-        }
+        mTwoPartWebView = null;
     }
 
     private void setViewState(@NonNull ViewState viewState) {
@@ -868,8 +874,9 @@ protected void handleClose() {
         if (mViewState == ViewState.RESIZED || mViewState == ViewState.EXPANDED) {
             if (mTwoPartBridge.isAttached() && mTwoPartWebView != null) {
                 // If we have a two part web view, simply remove it from the closeable container
-                mCloseableAdContainer.removeView(mTwoPartWebView);
-                mTwoPartBridge.detach();
+                final MraidWebView twoPartWebView = mTwoPartWebView;
+                detachTwoParWebView();
+                mCloseableAdContainer.removeView(twoPartWebView);
             } else {
                 // Move the web view from the closeable container back to the default container
                 mCloseableAdContainer.removeView(mMraidWebView);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
index bb1b175e..cc7c00a7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidJavascriptCommand.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
index 26963641..9904045c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidNativeCommandHandler.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
@@ -26,6 +30,7 @@
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.Intents;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.Streams;
 import com.mopub.common.util.Utils;
 
@@ -53,9 +58,6 @@
         void onFailure(MraidCommandException exception);
     }
 
-    @VisibleForTesting
-    static final String MIME_TYPE_HEADER = "Content-Type";
-
     private static final int MAX_NUMBER_DAYS_IN_MONTH = 31;
     private static final String[] DATE_FORMATS = {
             "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
@@ -511,7 +513,7 @@ private String getFileNameForUriAndHeaders(@NonNull final URI uri,
             }
             String filename = new File(path).getName();
 
-            final List<String> mimeTypeHeaders = headers.get(MIME_TYPE_HEADER);
+            final List<String> mimeTypeHeaders = headers.get(ResponseHeader.CONTENT_TYPE.getKey());
             if (mimeTypeHeaders == null || mimeTypeHeaders.isEmpty()
                     || mimeTypeHeaders.get(0) == null) {
                 return filename;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
index 5b2bdb56..40175e6f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidOrientation.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.pm.ActivityInfo;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
index 972a0577..7b1fb9ea 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidScreenMetrics.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
index 14976812..39489f51 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidVideoViewController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
index b2864ed4..d256df5b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewClient.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.net.Uri;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
index 5d1d92c6..5269c6bb 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidWebViewDebugListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
index 5d43c066..b1b24a87 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/PlacementType.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import java.util.Locale;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
index 40fc1cef..85fcd5c3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/ViewState.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import java.util.Locale;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
new file mode 100644
index 00000000..3a88f258
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdLoader.java
@@ -0,0 +1,306 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+
+import android.content.Context;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.mobileads.MoPubError;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Response;
+import com.mopub.volley.VolleyError;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * AdLoader implements several simple functions: communicate with Volley to download multiple ads
+ * in one HTTP call, implement client side waterfall logic, asynchronously return objects
+ * AdResponse. This class is immutable and fully supports multithreading.
+ */
+public class AdLoader {
+    // to be implemented by external listener
+    public interface Listener extends Response.ErrorListener {
+        void onSuccess(AdResponse response);
+    }
+
+    private final MultiAdRequest.Listener mAdListener;
+    private final WeakReference<Context> mContext;
+    private final Listener mOriginalListener;
+
+    @NonNull
+    private MultiAdRequest mMultiAdRequest;
+    @Nullable
+    protected MultiAdResponse mMultiAdResponse;
+    @NonNull
+    private final Object lock = new Object(); // multithreading
+    @Nullable
+    protected AdResponse mLastDeliveredResponse = null;
+    @Nullable
+    private ContentDownloadAnalytics mDownloadTracker;
+
+    private volatile boolean mRunning;
+    private volatile boolean mFailed;
+    private boolean mContentDownloaded;
+
+    @NonNull
+    private Handler mHandler;
+
+    /**
+     * @param url      initial URL to download ads from ads.mopub.com
+     * @param adFormat banner, interstitial, etc.
+     * @param adUnitId ad unit id will be sent to the server
+     * @param context  required by {@link Networking} class
+     * @param listener callback to return results
+     */
+    public AdLoader(@NonNull final String url,
+                    @NonNull final AdFormat adFormat,
+                    @Nullable final String adUnitId,
+                    @NonNull final Context context,
+                    @NonNull final Listener listener) {
+        Preconditions.checkArgument(!TextUtils.isEmpty(url));
+        Preconditions.checkNotNull(adFormat);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(listener);
+
+        mContext = new WeakReference<>(context);
+        mOriginalListener = listener;
+
+        mHandler = new Handler();
+
+        mAdListener = new MultiAdRequest.Listener() {
+            @Override
+            public void onErrorResponse(VolleyError volleyError) {
+                mFailed = true;
+                mRunning = false;
+                deliverError(volleyError);
+            }
+
+            @Override
+            public void onSuccessResponse(final MultiAdResponse response) {
+                synchronized (lock) {
+                    mRunning = false;
+                    mMultiAdResponse = response;
+                    if (mMultiAdResponse.hasNext()) {
+                        deliverResponse(mMultiAdResponse.next());
+                    }
+                }
+            }
+        };
+
+        mRunning = false;
+        mFailed = false;
+        mMultiAdRequest = new MultiAdRequest(url,
+                adFormat,
+                adUnitId,
+                context,
+                mAdListener
+        );
+    }
+
+    /**
+     * @return true if more ads available locally or on the server, otherwise false
+     */
+    public boolean hasMoreAds() {
+        if (mFailed) {
+            return false;
+        }
+
+        if (mContentDownloaded) {
+            return false;
+        }
+
+        MultiAdResponse response = mMultiAdResponse;
+        return response == null || response.hasNext() || !response.isWaterfallFinished();
+    }
+
+    /**
+     * The waterfall logic is mostly implemented inside loadNextAd.
+     * The ad is downloaded asynchronously. The ad might come from internal cache
+     * or downloaded from the server. Make sure to call {@link #hasMoreAds()} before
+     * calling loadNextAd.
+     *
+     * @param errorCode creative download error or null for the first call
+     * @return The returned object Request<?> can be used to cancel asynchronous operation.
+     */
+    @Nullable
+    public Request<?> loadNextAd(@Nullable final MoPubError errorCode) {
+        if (mRunning) {
+            return mMultiAdRequest;
+        }
+        if (mFailed) {
+            // call back using handler to make sure it is always async.
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    deliverError(new MoPubNetworkError(MoPubNetworkError.Reason.UNSPECIFIED));
+                }
+            });
+            return null;
+        }
+
+        synchronized (lock) {
+            // not running and not failed: start it for the first time
+            if (mMultiAdResponse == null) {
+                return fetchAd(mMultiAdRequest, mContext.get());
+            }
+
+            // report creative download error to the server
+            if (null != errorCode) {
+                creativeDownloadFailed(errorCode);
+            }
+
+            // in the middle of waterfall, check if preloaded items available
+            if (mMultiAdResponse.hasNext()) {
+                // logic to return next preloaded AdResponse item
+                final AdResponse adResponse = mMultiAdResponse.next();
+                mHandler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        deliverResponse(adResponse);
+                    }
+                });
+                return mMultiAdRequest;
+            }
+
+            // logic to request more waterfall ads from server
+            if (!mMultiAdResponse.isWaterfallFinished()) {
+                // create new request with failURL
+                mMultiAdRequest = new MultiAdRequest(mMultiAdResponse.getFailURL(),
+                        mMultiAdRequest.mAdFormat,
+                        mMultiAdRequest.mAdUnitId,
+                        mContext.get(),
+                        mAdListener
+                );
+                return fetchAd(mMultiAdRequest, mContext.get());
+            }
+        } // end synchronized(lock)
+
+        // end of waterfall, there is nothing to download
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                deliverError(new MoPubNetworkError(MoPubNetworkError.Reason.NO_FILL));
+            }
+        });
+
+        return null;
+    }
+
+    /**
+     * Call this function to notify server that creative content successfully downloaded
+     */
+    public void creativeDownloadSuccess() {
+        mContentDownloaded = true;
+
+        if (null == mDownloadTracker) {
+            MoPubLog.e("Response analytics should not be null here");
+            return;
+        }
+
+        Context context = mContext.get();
+        if (null == context || null == mLastDeliveredResponse) {
+            MoPubLog.w("Cannot send 'x-after-load-url' analytics.");
+            return;
+        }
+
+        mDownloadTracker.reportAfterLoad(context, null);
+        mDownloadTracker.reportAfterLoadSuccess(context);
+    }
+
+    private void creativeDownloadFailed(@Nullable final MoPubError errorCode) {
+        if (null == errorCode) {
+            MoPubLog.w("Must provide error code to report creative download error");
+            return;
+        }
+
+        Context context = mContext.get();
+        if (null == context || null == mLastDeliveredResponse) {
+            MoPubLog.w("Cannot send creative mFailed analytics.");
+            return;
+        }
+
+        if (mDownloadTracker != null) {
+            mDownloadTracker.reportAfterLoad(context, errorCode);
+            mDownloadTracker.reportAfterLoadFail(context, errorCode);
+        }
+    }
+
+    /**
+     * Submits request to the networking library
+     *
+     * @param request will be sent to the networking library
+     * @param context required by networking library
+     * @return generic object Request to be used for cancel() if necessary
+     */
+    @Nullable
+    private Request<?> fetchAd(@NonNull final MultiAdRequest request,
+                               @Nullable final Context context) {
+        Preconditions.checkNotNull(request);
+
+        if (context == null) {
+            return null;
+        }
+
+        mRunning = true;
+        RequestQueue requestQueue = Networking.getRequestQueue(context);
+        mMultiAdRequest = request;
+        requestQueue.add(request);
+        return request;
+    }
+
+    /**
+     * Helper function to make callback
+     *
+     * @param volleyError error to be delivered
+     */
+    private void deliverError(@NonNull final VolleyError volleyError) {
+        Preconditions.checkNotNull(volleyError);
+
+        mLastDeliveredResponse = null;
+        if (mOriginalListener != null) {
+            if (volleyError instanceof MoPubNetworkError) {
+                mOriginalListener.onErrorResponse(volleyError);
+            } else {
+                mOriginalListener.onErrorResponse(new MoPubNetworkError(volleyError.getMessage(),
+                        volleyError.getCause(),
+                        MoPubNetworkError.Reason.UNSPECIFIED));
+            }
+        }
+    }
+
+    /**
+     * Helper function to make 'success' callback
+     *
+     * @param adResponse valid {@link AdResponse} object
+     */
+    private void deliverResponse(@NonNull final AdResponse adResponse) {
+        Preconditions.checkNotNull(adResponse);
+
+        Context context = mContext.get();
+        mDownloadTracker = new ContentDownloadAnalytics(adResponse);
+        mDownloadTracker.reportBeforeLoad(context);
+
+        if (mOriginalListener != null) {
+            mLastDeliveredResponse = adResponse;
+            mOriginalListener.onSuccess(adResponse);
+        }
+    }
+
+    public boolean isRunning() {
+        return mRunning;
+    }
+
+    public boolean isFailed() {
+        return mFailed;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
index 9dd3d24c..63f52445 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdResponse.java
@@ -1,14 +1,22 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.MoPub.BrowserAgent;
+import com.mopub.common.Preconditions;
 import com.mopub.common.util.DateAndTime;
 
 import org.json.JSONObject;
 
 import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 import java.util.Map;
 import java.util.TreeMap;
 
@@ -38,15 +46,21 @@
     private final Integer mRewardedDuration;
     private final boolean mShouldRewardOnClick;
 
-    @Nullable
-    private final String mRedirectUrl;
     @Nullable
     private final String mClickTrackingUrl;
-    @Nullable
-    private final String mImpressionTrackingUrl;
+    @NonNull
+    private final List<String> mImpressionTrackingUrls;
     @Nullable
     private final String mFailoverUrl;
     @Nullable
+    private final String mBeforeLoadUrl;
+    @NonNull
+    private final List<String> mAfterLoadUrls;
+    @NonNull
+    private final List<String> mAfterLoadSuccessUrls;
+    @NonNull
+    private final List<String> mAfterLoadFailUrls;
+    @Nullable
     private final String mRequestId;
 
     @Nullable
@@ -60,8 +74,6 @@
     @Nullable
     private final String mDspCreativeId;
 
-    private final boolean mScrollable;
-
     @Nullable
     private final String mResponseBody;
     @Nullable
@@ -90,17 +102,19 @@ private AdResponse(@NonNull Builder builder) {
         mRewardedDuration = builder.rewardedDuration;
         mShouldRewardOnClick = builder.shouldRewardOnClick;
 
-        mRedirectUrl = builder.redirectUrl;
         mClickTrackingUrl = builder.clickTrackingUrl;
-        mImpressionTrackingUrl = builder.impressionTrackingUrl;
+        mImpressionTrackingUrls = builder.impressionTrackingUrls;
         mFailoverUrl = builder.failoverUrl;
+        mBeforeLoadUrl = builder.beforeLoadUrl;
+        mAfterLoadUrls = builder.afterLoadUrls;
+        mAfterLoadSuccessUrls = builder.afterLoadSuccessUrls;
+        mAfterLoadFailUrls = builder.afterLoadFailUrls;
         mRequestId = builder.requestId;
         mWidth = builder.width;
         mHeight = builder.height;
         mAdTimeoutDelayMillis = builder.adTimeoutDelayMillis;
         mRefreshTimeMillis = builder.refreshTimeMillis;
         mDspCreativeId = builder.dspCreativeId;
-        mScrollable = builder.scrollable;
         mResponseBody = builder.responseBody;
         mJsonBody = builder.jsonBody;
         mCustomEventClassName = builder.customEventClassName;
@@ -172,33 +186,45 @@ public boolean shouldRewardOnClick() {
         return mShouldRewardOnClick;
     }
 
-    @Nullable
-    public String getRedirectUrl() {
-        return mRedirectUrl;
-    }
-
     @Nullable
     public String getClickTrackingUrl() {
         return mClickTrackingUrl;
     }
 
-    @Nullable
-    public String getImpressionTrackingUrl() {
-        return mImpressionTrackingUrl;
+    @NonNull
+    public List<String> getImpressionTrackingUrls() {
+        return mImpressionTrackingUrls;
     }
 
+    @Deprecated
     @Nullable
     public String getFailoverUrl() {
         return mFailoverUrl;
     }
 
     @Nullable
-    public String getRequestId() {
-        return mRequestId;
+    public String getBeforeLoadUrl() {
+        return mBeforeLoadUrl;
     }
 
-    public boolean isScrollable() {
-        return mScrollable;
+    @NonNull
+    public List<String> getAfterLoadUrls() {
+        return mAfterLoadUrls;
+    }
+
+    @NonNull
+    public List<String> getAfterLoadSuccessUrls() {
+        return mAfterLoadSuccessUrls;
+    }
+
+    @NonNull
+    public List<String> getAfterLoadFailUrls() {
+        return mAfterLoadFailUrls;
+    }
+
+    @Nullable
+    public String getRequestId() {
+        return mRequestId;
     }
 
     @Nullable
@@ -211,8 +237,11 @@ public Integer getHeight() {
         return mHeight;
     }
 
-    @Nullable
-    public Integer getAdTimeoutMillis() {
+    @NonNull
+    public Integer getAdTimeoutMillis(int defaultValue) {
+        if (mAdTimeoutDelayMillis == null || mAdTimeoutDelayMillis < 1000) {
+            return defaultValue;
+        }
         return mAdTimeoutDelayMillis;
     }
 
@@ -237,7 +266,7 @@ public String getCustomEventClassName() {
     @NonNull
     public Map<String, String> getServerExtras() {
         // Strings are immutable, so this works as a "deep" copy.
-        return new TreeMap<String, String>(mServerExtras);
+        return new TreeMap<>(mServerExtras);
     }
 
     public long getTimestamp() {
@@ -254,15 +283,17 @@ public Builder toBuilder() {
                 .setRewardedVideoCompletionUrl(mRewardedVideoCompletionUrl)
                 .setRewardedDuration(mRewardedDuration)
                 .setShouldRewardOnClick(mShouldRewardOnClick)
-                .setRedirectUrl(mRedirectUrl)
                 .setClickTrackingUrl(mClickTrackingUrl)
-                .setImpressionTrackingUrl(mImpressionTrackingUrl)
+                .setImpressionTrackingUrls(mImpressionTrackingUrls)
                 .setFailoverUrl(mFailoverUrl)
+                .setBeforeLoadUrl(mBeforeLoadUrl)
+                .setAfterLoadUrls(mAfterLoadUrls)
+                .setAfterLoadSuccessUrls(mAfterLoadSuccessUrls)
+                .setAfterLoadFailUrls(mAfterLoadFailUrls)
                 .setDimensions(mWidth, mHeight)
                 .setAdTimeoutDelayMilliseconds(mAdTimeoutDelayMillis)
                 .setRefreshTimeMilliseconds(mRefreshTimeMillis)
                 .setDspCreativeId(mDspCreativeId)
-                .setScrollable(mScrollable)
                 .setResponseBody(mResponseBody)
                 .setJsonBody(mJsonBody)
                 .setCustomEventClassName(mCustomEventClassName)
@@ -283,10 +314,13 @@ public Builder toBuilder() {
         private Integer rewardedDuration;
         private boolean shouldRewardOnClick;
 
-        private String redirectUrl;
         private String clickTrackingUrl;
-        private String impressionTrackingUrl;
+        private List<String> impressionTrackingUrls = new ArrayList<>();
         private String failoverUrl;
+        private String beforeLoadUrl;
+        private List<String> afterLoadUrls = new ArrayList<>();
+        private List<String> afterLoadSuccessUrls = new ArrayList<>();
+        private List<String> afterLoadFailUrls = new ArrayList<>();
         private String requestId;
 
         private Integer width;
@@ -295,15 +329,13 @@ public Builder toBuilder() {
         private Integer refreshTimeMillis;
         private String dspCreativeId;
 
-        private boolean scrollable = false;
-
         private String responseBody;
         private JSONObject jsonBody;
 
         private String customEventClassName;
         private BrowserAgent browserAgent;
 
-        private Map<String, String> serverExtras = new TreeMap<String, String>();
+        private Map<String, String> serverExtras = new TreeMap<>();
 
         public Builder setAdType(@Nullable final String adType) {
             this.adType = adType;
@@ -358,18 +390,15 @@ public Builder setShouldRewardOnClick(final boolean shouldRewardOnClick) {
             return this;
         }
 
-        public Builder setRedirectUrl(@Nullable final String redirectUrl) {
-            this.redirectUrl = redirectUrl;
-            return this;
-        }
-
         public Builder setClickTrackingUrl(@Nullable final String clickTrackingUrl) {
             this.clickTrackingUrl = clickTrackingUrl;
             return this;
         }
 
-        public Builder setImpressionTrackingUrl(@Nullable final String impressionTrackingUrl) {
-            this.impressionTrackingUrl = impressionTrackingUrl;
+        public Builder setImpressionTrackingUrls(@NonNull final List<String> impressionTrackingUrls) {
+            Preconditions.checkNotNull(impressionTrackingUrls);
+
+            this.impressionTrackingUrls = impressionTrackingUrls;
             return this;
         }
 
@@ -378,6 +407,29 @@ public Builder setFailoverUrl(@Nullable final String failoverUrl) {
             return this;
         }
 
+        public Builder setBeforeLoadUrl(@Nullable final String beforeLoadUrl) {
+            this.beforeLoadUrl = beforeLoadUrl;
+            return this;
+        }
+
+        public Builder setAfterLoadUrls(@NonNull final List<String> afterLoadUrls) {
+            Preconditions.checkNotNull(afterLoadUrls);
+            this.afterLoadUrls = afterLoadUrls;
+            return this;
+        }
+
+        public Builder setAfterLoadSuccessUrls(@NonNull final List<String> afterLoadSuccessUrls) {
+            Preconditions.checkNotNull(afterLoadSuccessUrls);
+            this.afterLoadSuccessUrls = afterLoadSuccessUrls;
+            return this;
+        }
+
+        public Builder setAfterLoadFailUrls(@NonNull final List<String> afterLoadFailUrls) {
+            Preconditions.checkNotNull(afterLoadFailUrls);
+            this.afterLoadFailUrls = afterLoadFailUrls;
+            return this;
+        }
+
         public Builder setRequestId(@Nullable final String requestId) {
             this.requestId = requestId;
             return this;
@@ -400,11 +452,6 @@ public Builder setRefreshTimeMilliseconds(@Nullable final Integer refreshTimeMil
             return this;
         }
 
-        public Builder setScrollable(@Nullable final Boolean scrollable) {
-            this.scrollable = scrollable == null ? this.scrollable : scrollable;
-            return this;
-        }
-
         public Builder setDspCreativeId(@Nullable final String dspCreativeId) {
             this.dspCreativeId = dspCreativeId;
             return this;
@@ -432,9 +479,9 @@ public Builder setBrowserAgent(@Nullable final BrowserAgent browserAgent) {
 
         public Builder setServerExtras(@Nullable final Map<String, String> serverExtras) {
             if (serverExtras == null) {
-                this.serverExtras = new TreeMap<String, String>();
+                this.serverExtras = new TreeMap<>();
             } else {
-                this.serverExtras = new TreeMap<String, String>(serverExtras);
+                this.serverExtras = new TreeMap<>(serverExtras);
             }
             return this;
         }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
index fa17fee8..1ab20047 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/BackoffPolicy.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import com.mopub.volley.VolleyError;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java
new file mode 100644
index 00000000..b8d81aa1
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/ContentDownloadAnalytics.java
@@ -0,0 +1,132 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import com.mopub.common.Preconditions;
+import com.mopub.mobileads.MoPubError;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import static android.os.SystemClock.uptimeMillis;
+
+class ContentDownloadAnalytics {
+    enum DownloadResult {
+        AD_LOADED("ad_loaded"),
+        MISSING_ADAPTER("missing_adapter"),
+        TIMEOUT("timeout"),
+        INVALID_DATA("invalid_data");
+
+        @NonNull
+        private final String value;
+
+        DownloadResult(@NonNull String loadResult) {
+            value = loadResult;
+        }
+    }
+
+    private static final String LOAD_DURATION_MS_MACRO = "%%LOAD_DURATION_MS%%";
+    private static final String LOAD_RESULT_MACRO = "%%LOAD_RESULT%%";
+
+    @Nullable
+    Long mBeforeLoadTime = null;
+    @NonNull
+    private AdResponse mAdResponse;
+
+    ContentDownloadAnalytics(@NonNull AdResponse adResponse) {
+        Preconditions.checkNotNull(adResponse);
+
+        mAdResponse = adResponse;
+    }
+
+    void reportBeforeLoad(@Nullable Context context) {
+        if (context == null) {
+            return;
+        }
+
+        String url = mAdResponse.getBeforeLoadUrl();
+        if (TextUtils.isEmpty(url)) {
+            return;
+        }
+
+        mBeforeLoadTime = uptimeMillis();
+        TrackingRequest.makeTrackingHttpRequest(url, context);
+    }
+
+    void reportAfterLoad(@Nullable Context context, @Nullable final MoPubError errorCode) {
+        if (context == null || mBeforeLoadTime == null) {
+            return;
+        }
+
+        DownloadResult result = errorCodeToDownloadResult(errorCode);
+        List<String> urls = generateAfterLoadUrls(mAdResponse.getAfterLoadUrls(), result.value);
+
+        TrackingRequest.makeTrackingHttpRequest(urls, context);
+    }
+
+    void reportAfterLoadSuccess(@Nullable Context context) {
+        if (context == null || mBeforeLoadTime == null) {
+            return;
+        }
+
+        List<String> urls = generateAfterLoadUrls(mAdResponse.getAfterLoadSuccessUrls(), DownloadResult.AD_LOADED.value);
+
+        TrackingRequest.makeTrackingHttpRequest(urls, context);
+    }
+
+    void reportAfterLoadFail(@Nullable Context context, @Nullable final MoPubError errorCode) {
+        if (context == null || mBeforeLoadTime == null) {
+            return;
+        }
+
+        DownloadResult result = errorCodeToDownloadResult(errorCode);
+        List<String> urls = generateAfterLoadUrls(mAdResponse.getAfterLoadFailUrls(), result.value);
+
+        TrackingRequest.makeTrackingHttpRequest(urls, context);
+    }
+
+    @Nullable
+    private List<String> generateAfterLoadUrls(@Nullable List<String> urls, @NonNull String loadResult) {
+        if (urls == null || urls.isEmpty() || mBeforeLoadTime == null) {
+            return null;
+        }
+
+        List<String> newUrls = new ArrayList<>();
+
+        for (String url : urls) {
+            url = url.replace(LOAD_DURATION_MS_MACRO, String.valueOf(uptimeMillis() - mBeforeLoadTime));
+            url = url.replace(LOAD_RESULT_MACRO, Uri.encode(loadResult));
+            newUrls.add(url);
+        }
+        return newUrls;
+    }
+
+    @NonNull
+    private DownloadResult errorCodeToDownloadResult(@Nullable final MoPubError errorCode) {
+        if (null == errorCode) {
+            return DownloadResult.AD_LOADED;
+        }
+
+        switch (errorCode.getIntCode()) {
+            case MoPubError.ER_SUCCESS:
+                return DownloadResult.AD_LOADED;
+            case MoPubError.ER_TIMEOUT:
+                return DownloadResult.TIMEOUT;
+            case MoPubError.ER_ADAPTER_NOT_FOUND:
+                return DownloadResult.MISSING_ADAPTER;
+        }
+
+        return DownloadResult.INVALID_DATA;
+    }
+}
+
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
index 5cd1d30f..189489c7 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/CustomSSLSocketFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.net.SSLCertificateSocketFactory;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
index a1b0523a..c77b0943 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/HeaderUtils.java
@@ -1,26 +1,26 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.ResponseHeader;
-import com.mopub.volley.Header;
-import com.mopub.volley.toolbox.HttpResponse;
 
+import org.json.JSONArray;
+import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.text.NumberFormat;
-import java.util.Iterator;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
-import java.util.Map;
 
 public class HeaderUtils {
-    @Nullable
-    public static String extractHeader(Map<String, String> headers, ResponseHeader responseHeader) {
-        return headers.get(responseHeader.getKey().toLowerCase());
-    }
 
     @NonNull
     public static String extractHeader(@Nullable final JSONObject headers,
@@ -31,8 +31,7 @@ public static String extractHeader(@Nullable final JSONObject headers,
             return "";
         }
 
-        final String key = getKeyIgnoreCase(headers, responseHeader.getKey());
-        return headers.optString(key);
+        return headers.optString(responseHeader.getKey());
     }
 
     @Nullable
@@ -40,10 +39,6 @@ public static Integer extractIntegerHeader(JSONObject headers, ResponseHeader re
         return formatIntHeader(extractHeader(headers, responseHeader));
     }
 
-    public static boolean extractBooleanHeader(Map<String, String> headers, ResponseHeader responseHeader, boolean defaultValue) {
-        return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
-    }
-
     public static boolean extractBooleanHeader(JSONObject headers, ResponseHeader responseHeader, boolean defaultValue) {
         return formatBooleanHeader(extractHeader(headers, responseHeader), defaultValue);
     }
@@ -53,36 +48,34 @@ public static Integer extractPercentHeader(JSONObject headers, ResponseHeader re
         return formatPercentHeader(extractHeader(headers, responseHeader));
     }
 
-    @Nullable
-    public static String extractPercentHeaderString(JSONObject headers,
-            ResponseHeader responseHeader) {
-        Integer percentHeaderValue = extractPercentHeader(headers, responseHeader);
-        return percentHeaderValue != null ? percentHeaderValue.toString() : null;
-    }
+    @NonNull
+    static List<String> extractStringArray(@NonNull final JSONObject headers,
+            @NonNull final ResponseHeader responseHeader) {
+        Preconditions.checkNotNull(headers);
+        Preconditions.checkNotNull(responseHeader);
 
-    @Nullable
-    public static String extractHeader(HttpResponse response, ResponseHeader responseHeader) {
-        final Header header = getFirstHeader(response.getHeaders(), responseHeader);
-        return header != null ? header.getValue() : null;
-    }
+        final List<String> stringArray = new ArrayList<>();
+        final JSONArray jsonArray = headers.optJSONArray(responseHeader.getKey());
+        if (jsonArray == null) {
+            return stringArray;
+        }
 
-    public static boolean extractBooleanHeader(HttpResponse response, ResponseHeader responseHeader, boolean defaultValue) {
-        return formatBooleanHeader(extractHeader(response, responseHeader), defaultValue);
-    }
+        for (int i = 0; i < jsonArray.length(); i++) {
+            try {
+                stringArray.add(jsonArray.getString(i));
+            } catch (JSONException e) {
+                MoPubLog.d("Unable to parse item " + i + " from " + responseHeader.getKey());
+            }
+        }
 
-    @Nullable
-    public static Integer extractIntegerHeader(HttpResponse response, ResponseHeader responseHeader) {
-        String headerValue = extractHeader(response, responseHeader);
-        return formatIntHeader(headerValue);
+        return stringArray;
     }
 
-    public static int extractIntHeader(HttpResponse response, ResponseHeader responseHeader, int defaultValue) {
-        Integer headerValue = extractIntegerHeader(response, responseHeader);
-        if (headerValue == null) {
-            return defaultValue;
-        }
-
-        return headerValue;
+    @Nullable
+    static String extractPercentHeaderString(JSONObject headers,
+            ResponseHeader responseHeader) {
+        Integer percentHeaderValue = extractPercentHeader(headers, responseHeader);
+        return percentHeaderValue != null ? percentHeaderValue.toString() : null;
     }
 
     private static boolean formatBooleanHeader(@Nullable String headerValue, boolean defaultValue) {
@@ -127,36 +120,4 @@ private static Integer formatPercentHeader(@Nullable String headerValue) {
 
         return percentValue;
     }
-
-    private static Header getFirstHeader(@Nullable final List<Header> headers,
-            @NonNull final ResponseHeader responseHeader) {
-        Preconditions.checkNotNull(responseHeader);
-
-        if (headers == null) {
-            return null;
-        }
-
-        for (final Header header : headers) {
-            if (header.getName().equalsIgnoreCase(responseHeader.getKey())) {
-                return header;
-            }
-        }
-        return null;
-    }
-
-    @NonNull
-    private static String getKeyIgnoreCase(@NonNull final JSONObject json,
-                                           @NonNull final String searchKey) {
-        Preconditions.checkNotNull(json);
-        Preconditions.checkNotNull(searchKey);
-
-        final Iterator<String> keys = json.keys();
-        while (keys.hasNext()) {
-            final String key = keys.next();
-            if (searchKey.equalsIgnoreCase(key)) {
-                return key;
-            }
-        }
-        return searchKey;
-    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
index b522e707..7d30ca54 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/InetAddressUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
index 99851c23..b4be1c7f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MaxWidthImageLoader.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
index 43becf67..a9c6c3c0 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubNetworkError.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
index 44c910a5..9d64641f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
@@ -1,18 +1,27 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.content.Context;
+import android.os.Build;
+import android.os.LocaleList;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
 import com.mopub.volley.Response;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
 import java.io.UnsupportedEncodingException;
+import java.util.Locale;
 import java.util.Map;
+import java.util.TreeMap;
 
 /**
  * Changes the type of request it is based on whether or not the request is going to MoPub's ad
@@ -75,9 +84,46 @@ protected String parseStringBody(@NonNull final NetworkResponse response) {
         return parsed;
     }
 
-    @VisibleForTesting
     @NonNull
     public String getOriginalUrl() {
         return mOriginalUrl;
     }
+
+    @Override
+    public Map<String, String> getHeaders() {
+        final TreeMap<String, String> headers = new TreeMap<>();
+
+        Locale userLocale = null;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+            LocaleList list = mContext.getResources().getConfiguration().getLocales();
+            if (list.size() > 0) {
+                userLocale = list.get(0);
+            }
+        } else {
+            userLocale = mContext.getResources().getConfiguration().locale;
+        }
+
+        final String language;
+        final String country;
+        if (userLocale != null && !TextUtils.isEmpty(userLocale.toString().trim())) {
+            // If user's preferred locale is available
+            language = userLocale.getLanguage().trim();
+            country = userLocale.getCountry().trim();
+        } else {
+            // Use default locale
+            language = Locale.getDefault().getLanguage().trim();
+            country = Locale.getDefault().getCountry().trim();
+        }
+
+        String languageCode;
+        if (!TextUtils.isEmpty(language)) {
+            languageCode = language;
+            if (!TextUtils.isEmpty(country)) {
+                languageCode += "-" + country.toLowerCase();
+            }
+            headers.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), languageCode);
+        }
+
+        return headers;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
index 9b5d4592..7f5d137e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestQueue.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
index 4b64ac29..7d9d64d6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequestUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java
new file mode 100644
index 00000000..7c11c9fb
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdRequest.java
@@ -0,0 +1,156 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.MoPub;
+import com.mopub.common.Preconditions;
+import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.privacy.PersonalInfoManager;
+import com.mopub.volley.DefaultRetryPolicy;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+import com.mopub.volley.toolbox.HttpHeaderParser;
+
+/**
+ * Volley request class helper to support ad requests specifics
+ */
+public class MultiAdRequest extends MoPubRequest<MultiAdResponse> {
+
+    @NonNull
+    public final Listener mListener;
+    @NonNull
+    final AdFormat mAdFormat;
+    @Nullable
+    final String mAdUnitId;
+    @NonNull
+    private final Context mContext;
+
+    private int hashCode = 0;
+
+    public interface Listener extends Response.ErrorListener {
+        void onSuccessResponse(MultiAdResponse response);
+    }
+
+    MultiAdRequest(@NonNull final String url,
+                   @NonNull final AdFormat adFormat,
+                   @Nullable final String adUnitId,
+                   @NonNull final Context context,
+                   @NonNull final Listener listener) {
+        super(context, clearUrlIfSdkNotInitialized(url), listener);
+        Preconditions.checkNotNull(url);
+        Preconditions.checkNotNull(adFormat);
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(listener);
+
+        mAdUnitId = adUnitId;
+        mListener = listener;
+        mAdFormat = adFormat;
+        mContext = context.getApplicationContext();
+
+        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
+                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
+                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
+                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
+        setRetryPolicy(retryPolicy);
+        setShouldCache(false);
+
+        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
+        if (personalInfoManager != null) {
+            personalInfoManager.requestSync(false);
+        }
+    }
+
+    /**
+     * For 5.2.0 and onwards, disable load when the sdk is not initialized.
+     *
+     * @param url The original url
+     * @return The original url if the sdk is initialized. Otherwise, returns an empty url.
+     */
+    @NonNull
+    private static String clearUrlIfSdkNotInitialized(@NonNull final String url) {
+        if (MoPub.getPersonalInformationManager() == null || !MoPub.isSdkInitialized()) {
+            MoPubLog.e("Make sure to call MoPub#initializeSdk before loading an ad.");
+            return "";
+        }
+        return url;
+    }
+
+    /**
+     * Callback from Volley to parse network response
+     * @param networkResponse data to be parsed
+     * @return valid response or null in case of error
+     */
+    @Nullable
+    @Override
+    protected Response<MultiAdResponse> parseNetworkResponse(NetworkResponse networkResponse) {
+        MultiAdResponse multiAdResponse;
+        try {
+            multiAdResponse = new MultiAdResponse(mContext, networkResponse, mAdFormat, mAdUnitId);
+        } catch (Exception ex) {
+            if (ex instanceof MoPubNetworkError) {
+                return Response.error((MoPubNetworkError) ex);
+            }
+            // Volley network error
+            return Response.error(new MoPubNetworkError(ex, MoPubNetworkError.Reason.UNSPECIFIED));
+        }
+
+        return Response.success(multiAdResponse, HttpHeaderParser.parseCacheHeaders(networkResponse));
+    }
+
+    /**
+     * Callback from Volley to deliver successful result to listener
+     * @param multiAdResponse valid object {@link MultiAdResponse}
+     */
+    @Override
+    protected void deliverResponse(MultiAdResponse multiAdResponse) {
+        if (!isCanceled()) {
+            mListener.onSuccessResponse(multiAdResponse);
+        }
+    }
+
+    @Override
+    public void cancel() {
+        super.cancel();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (obj == this)
+            return true;
+
+        if (!(obj instanceof MultiAdRequest)) {
+            return false;
+        }
+
+        MultiAdRequest other = (MultiAdRequest) obj;
+        int res = 0;
+        if (mAdUnitId != null) {
+            res = other.mAdUnitId == null ? 1 : mAdUnitId.compareTo(other.mAdUnitId);
+        } else if (other.mAdUnitId != null) {
+            res = -1;
+        }
+
+        return res == 0
+                && mAdFormat == other.mAdFormat
+                && getUrl().compareTo(other.getUrl()) == 0;
+    }
+
+    @Override
+    public int hashCode() {
+        if (hashCode == 0) {
+            int result = mAdUnitId == null ? 29 : mAdUnitId.hashCode();
+            result = 31 * result + mAdFormat.hashCode();
+            result = 31 * result + getOriginalUrl().hashCode();
+            hashCode = result;
+        }
+        return hashCode;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
similarity index 51%
rename from mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
rename to mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
index 23aa9f40..d1af4aef 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MultiAdResponse.java
@@ -1,61 +1,51 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
+
 import android.content.Context;
-import android.net.Uri;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
+import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
+import com.mopub.common.ExternalViewabilitySessionManager;
 import com.mopub.common.FullAdType;
 import com.mopub.common.MoPub;
-import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
-import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.util.Json;
 import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.AdTypeTranslator;
-import com.mopub.volley.DefaultRetryPolicy;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
 import com.mopub.volley.toolbox.HttpHeaderParser;
 
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
-import java.util.HashMap;
-import java.util.Locale;
+import java.io.UnsupportedEncodingException;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
 import java.util.Map;
-import java.util.TreeMap;
 
-import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
+import static com.mopub.common.DataKeys.ADM_KEY;
 import static com.mopub.network.HeaderUtils.extractBooleanHeader;
 import static com.mopub.network.HeaderUtils.extractHeader;
 import static com.mopub.network.HeaderUtils.extractIntegerHeader;
 import static com.mopub.network.HeaderUtils.extractPercentHeaderString;
+import static com.mopub.network.HeaderUtils.extractStringArray;
 
-public class AdRequest extends MoPubRequest<AdResponse> {
-
-    @VisibleForTesting
-    static final String AD_RESPONSES_KEY = "ad-responses";
-    private static final String ADM_KEY = "adm";
-    private static final String BODY_KEY = "body";
-    private static final String HEADERS_KEY = "headers";
-
-    @NonNull private final AdRequest.Listener mListener;
-    @NonNull private final AdFormat mAdFormat;
-    @Nullable private final String mAdUnitId;
-    @NonNull private final Context mContext;
-    @Nullable private static ServerOverrideListener sServerOverrideListener;
-
-    public interface Listener extends Response.ErrorListener {
-        void onSuccess(AdResponse response);
-    }
+/**
+ * Immutable data class to parse client side waterfall network response.
+ */
+public class MultiAdResponse implements Iterator<AdResponse> {
 
     public interface ServerOverrideListener {
         void onForceExplicitNo(@Nullable final String consentChangeReason);
@@ -64,122 +54,166 @@
         void onForceGdprApplies();
     }
 
-    public AdRequest(@NonNull final String url,
-            @NonNull final AdFormat adFormat,
-            @Nullable final String adUnitId,
-            @NonNull Context context,
-            @NonNull final Listener listener) {
-        super(context, clearUrlIfSdkNotInitialized(url), listener);
-        Preconditions.checkNotNull(adFormat);
-        Preconditions.checkNotNull(listener);
-        mAdUnitId = adUnitId;
-        mListener = listener;
-        mAdFormat = adFormat;
-        mContext = context.getApplicationContext();
-        DefaultRetryPolicy retryPolicy = new DefaultRetryPolicy(
-                DefaultRetryPolicy.DEFAULT_TIMEOUT_MS,
-                DefaultRetryPolicy.DEFAULT_MAX_RETRIES,
-                DefaultRetryPolicy.DEFAULT_BACKOFF_MULT);
-        setRetryPolicy(retryPolicy);
-        setShouldCache(false);
-
-        final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
-        if (personalInfoManager != null) {
-            personalInfoManager.requestSync(false);
-        }
-    }
+    @NonNull
+    private final Iterator<AdResponse> mResponseIterator;
 
-    /**
-     * For 5.2 and onwards, disable load when the sdk is not initialized.
-     *
-     * @param url The original url
-     * @return The original url if the sdk is initialized. Otherwise, returns an empty url.
-     */
     @NonNull
-    private static String clearUrlIfSdkNotInitialized(@NonNull final String url) {
-        if (MoPub.getPersonalInformationManager() == null || !MoPub.isSdkInitialized()) {
-            MoPubLog.e("Make sure to call MoPub#initializeSdk before loading an ad.");
-            return "";
-        }
-        return url;
-    }
+    private String mFailUrl;
 
     @NonNull
-    public Listener getListener() {
-        return mListener;
+    public String getFailURL() {
+        return mFailUrl;
     }
 
-    public static void setServerOverrideListener(
-            @NonNull final ServerOverrideListener serverOverrideListener) {
-        sServerOverrideListener = serverOverrideListener;
-    }
+    @Nullable
+    private static ServerOverrideListener sServerOverrideListener;
 
-    @Override
-    public Map<String, String> getHeaders() {
-        TreeMap<String, String> headers = new TreeMap<String, String>();
+    /*
+     *
+     * @param jsonString - Server response in JSON format
+     * @param networkResponse Volley NetworkResponse object
+     * @param adFormat ad format
+     * @param adUnitId ad unit id originally sent to server
+     * @throws JSONException, MoPubNetworkError
+     */
+    public MultiAdResponse(@NonNull final Context appContext,
+                           @NonNull final NetworkResponse networkResponse,
+                           @NonNull final AdFormat adFormat,
+                           @Nullable final String adUnitId) throws JSONException, MoPubNetworkError {
 
-        // Use default locale first for language code
-        String languageCode = Locale.getDefault().getLanguage();
+        // Response Body encoding / decoding
+        final String responseBody = parseStringBody(networkResponse);
 
-        // If user's preferred locale is different from default locale, override language code
-        Locale userLocale = mContext.getResources().getConfiguration().locale;
-        if (userLocale != null) {
-            if (! userLocale.getLanguage().trim().isEmpty()) {
-                languageCode = userLocale.getLanguage().trim();
+        JSONObject jsonObject = new JSONObject(responseBody);
+        mFailUrl = jsonObject.optString(ResponseHeader.FAIL_URL.getKey());
+        String requestId = jsonObject.optString(ResponseHeader.REQUEST_ID.getKey());
+
+        final boolean invalidateConsent = extractBooleanHeader(jsonObject,
+                ResponseHeader.INVALIDATE_CONSENT, false);
+        final boolean forceExplicitNo = extractBooleanHeader(jsonObject,
+                ResponseHeader.FORCE_EXPLICIT_NO, false);
+        final boolean reacquireConsent = extractBooleanHeader(jsonObject,
+                ResponseHeader.REACQUIRE_CONSENT, false);
+        final String consentChangeReason = extractHeader(jsonObject,
+                ResponseHeader.CONSENT_CHANGE_REASON);
+        final boolean forceGdprApplies = extractBooleanHeader(jsonObject,
+                ResponseHeader.FORCE_GDPR_APPLIES, false);
+        if (sServerOverrideListener != null) {
+            if (forceGdprApplies) {
+                sServerOverrideListener.onForceGdprApplies();
+            }
+            if (forceExplicitNo) {
+                sServerOverrideListener.onForceExplicitNo(consentChangeReason);
+            } else if (invalidateConsent) {
+                sServerOverrideListener.onInvalidateConsent(consentChangeReason);
+            } else if (reacquireConsent) {
+                sServerOverrideListener.onReacquireConsent(consentChangeReason);
             }
         }
 
-        // Do not add header if language is empty
-        if (! languageCode.isEmpty()) {
-            headers.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), languageCode);
+        JSONArray adResponses = jsonObject.getJSONArray(ResponseHeader.AD_RESPONSES.getKey());
+        int ADS_PER_RESPONSE = 3;
+        List<AdResponse> list = new ArrayList<>(ADS_PER_RESPONSE);
+        AdResponse adResponseClear = null;
+        for (int i = 0; i < adResponses.length(); i++) {
+            try {
+                JSONObject item = adResponses.getJSONObject(i);
+                AdResponse singleAdResponse = parseSingleAdResponse(appContext, networkResponse, item, adUnitId, adFormat, requestId);
+                if (!AdType.CLEAR.equals(singleAdResponse.getAdType())) {
+                    list.add(singleAdResponse);
+                    continue;
+                }
+
+                // received message 'clear'
+                mFailUrl = "";
+                adResponseClear = singleAdResponse;
+                if (extractWarmup(item)) {
+                    throw new MoPubNetworkError("Server is preparing this Ad Unit.",
+                            MoPubNetworkError.Reason.WARMING_UP,
+                            adResponseClear.getRefreshTimeMillis());
+                }
+                break; // we don't process items beyond 'clear'
+
+            } catch (JSONException ex) {
+                // don't break everything because of single item parsing error
+                MoPubLog.w("Invalid response item. Body: " + responseBody);
+            } catch (MoPubNetworkError ex) {
+                if (ex.getReason() == MoPubNetworkError.Reason.WARMING_UP) {
+                    throw ex;
+                }
+                MoPubLog.w("Invalid response item. Error: " + ex.getReason());
+            } catch (Exception ex) {
+                MoPubLog.w("Unexpected error parsing response item. " + ex.getMessage());
+            }
         }
+        mResponseIterator = list.iterator();
 
-        return headers;
+        // validate if there is any valid ad response
+        if (!mResponseIterator.hasNext()) {
+            Integer refreshTimeMilliseconds = Constants.THIRTY_SECONDS_MILLIS;
+            if (adResponseClear != null) {
+                refreshTimeMilliseconds = adResponseClear.getRefreshTimeMillis();
+            }
+            throw new MoPubNetworkError(
+                    "No ads found for ad unit.",
+                    MoPubNetworkError.Reason.NO_FILL,
+                    refreshTimeMilliseconds);
+        }
     }
 
     @Override
-    protected Response<AdResponse> parseNetworkResponse(final NetworkResponse networkResponse) {
-        // NOTE: We never get status codes outside of {[200, 299], 304}. Those errors are sent to the
-        // error listener.
-
-        // convert all keys to lowercase
-        final Map<String, String> headers = new HashMap<>();
-        for(final String key : networkResponse.headers.keySet() ){
-            headers.put(key.toLowerCase(), networkResponse.headers.get(key));
-        }
+    public boolean hasNext() {
+        return mResponseIterator.hasNext();
+    }
 
-        final JSONObject jsonHeaders;
-        final JSONObject currentAdResponse;
+    @NonNull
+    @Override
+    public AdResponse next() {
+        return mResponseIterator.next();
+    }
 
-        if (extractBooleanHeader(headers, ResponseHeader.WARMUP, false)) {
-            return Response.error(new MoPubNetworkError("Ad Unit is warming up.",
-                    MoPubNetworkError.Reason.WARMING_UP));
-        }
+    boolean isWaterfallFinished() {
+        return TextUtils.isEmpty(mFailUrl);
+    }
+
+    public static void setServerOverrideListener(
+            @NonNull final ServerOverrideListener serverOverrideListener) {
+        sServerOverrideListener = serverOverrideListener;
+    }
+
+    /**
+     * Parse single object {@link AdResponse} from JSON
+     *
+     * @param appContext      application context
+     * @param networkResponse original Volley network response
+     * @param jsonObject      JSON object to parse
+     * @param adUnitId        request ad unit id
+     * @param adFormat        see {@link AdFormat}
+     * @param requestId       GUID assigned by server
+     * @return valid {@link AdResponse} or throws exception
+     * @throws JSONException     when JSON format is broken or critical field is missing
+     * @throws MoPubNetworkError when high level validation failed
+     */
+    @NonNull
+    protected static AdResponse parseSingleAdResponse(@NonNull final Context appContext,
+                                                      @NonNull final NetworkResponse networkResponse,
+                                                      @NonNull final JSONObject jsonObject,
+                                                      @Nullable final String adUnitId,
+                                                      @NonNull final AdFormat adFormat,
+                                                      @Nullable final String requestId) throws JSONException, MoPubNetworkError {
+        Preconditions.checkNotNull(appContext);
+        Preconditions.checkNotNull(networkResponse);
+        Preconditions.checkNotNull(jsonObject);
+        Preconditions.checkNotNull(adFormat);
 
         final AdResponse.Builder builder = new AdResponse.Builder();
-        builder.setAdUnitId(mAdUnitId);
+        final String content = jsonObject.optString(ResponseHeader.CONTENT.getKey());
+        final JSONObject jsonHeaders = jsonObject.getJSONObject(ResponseHeader.METADATA.getKey());
 
-        // Response Body encoding / decoding
-        final String responseBody = parseStringBody(networkResponse);
-        builder.setResponseBody(responseBody);
+        builder.setAdUnitId(adUnitId);
 
-        if (AdType.MULTI.equalsIgnoreCase(extractHeader(headers, ResponseHeader.AD_RESPONSE_TYPE))) {
-            try {
-                final JSONObject rootBody = new JSONObject(responseBody);
-                final JSONArray adResponsesJson = rootBody.getJSONArray(AD_RESPONSES_KEY);
-                // Currently, there is only one ad response. Client-side waterfall will be
-                // able to handle multiple ad responses.
-                currentAdResponse = adResponsesJson.getJSONObject(0);
-                jsonHeaders = currentAdResponse.getJSONObject(HEADERS_KEY);
-            } catch (JSONException e) {
-                return Response.error(
-                        new MoPubNetworkError("Failed to decode header JSON",
-                                e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
-            }
-        } else {
-            jsonHeaders = new JSONObject(headers);
-            currentAdResponse = null;
-        }
+        // Response Body encoding / decoding
+        builder.setResponseBody(content);
 
         String adTypeString = extractHeader(jsonHeaders, ResponseHeader.AD_TYPE);
         String fullAdTypeString = extractHeader(jsonHeaders, ResponseHeader.FULL_AD_TYPE);
@@ -188,22 +222,11 @@ public static void setServerOverrideListener(
 
         // In the case of a CLEAR response, the REFRESH_TIME header must still be respected. Ensure
         // that it is parsed and passed along to the MoPubNetworkError.
-        final Integer refreshTimeSeconds = extractIntegerHeader(jsonHeaders,
-                ResponseHeader.REFRESH_TIME);
-        final Integer refreshTimeMilliseconds = refreshTimeSeconds == null
-                ? null
-                : refreshTimeSeconds * 1000;
+        final Integer refreshTimeMilliseconds = extractRefreshTimeMS(jsonObject);
         builder.setRefreshTimeMilliseconds(refreshTimeMilliseconds);
 
         if (AdType.CLEAR.equals(adTypeString)) {
-            final AdResponse adResponse = builder.build();
-            return Response.error(
-                    new MoPubNetworkError(
-                            "No ads found for ad unit.",
-                            MoPubNetworkError.Reason.NO_FILL,
-                            refreshTimeMilliseconds
-                    )
-            );
+            return builder.build();
         }
 
         String dspCreativeId = extractHeader(jsonHeaders, ResponseHeader.DSP_CREATIVE_ID);
@@ -212,52 +235,69 @@ public static void setServerOverrideListener(
         String networkType = extractHeader(jsonHeaders, ResponseHeader.NETWORK_TYPE);
         builder.setNetworkType(networkType);
 
-        String redirectUrl = extractHeader(jsonHeaders, ResponseHeader.REDIRECT_URL);
-        builder.setRedirectUrl(redirectUrl);
-
         // X-Clickthrough is parsed into the AdResponse as the click tracker
         // Used by AdViewController, Rewarded Video, Native Adapter, MoPubNative
         String clickTrackingUrl = extractHeader(jsonHeaders, ResponseHeader.CLICK_TRACKING_URL);
         builder.setClickTrackingUrl(clickTrackingUrl);
 
-        builder.setImpressionTrackingUrl(extractHeader(jsonHeaders, ResponseHeader.IMPRESSION_URL));
+        // As of 5.3, we moved to an array of impression urls.
+        final List<String> impressionUrls = extractStringArray(jsonHeaders,
+                ResponseHeader.IMPRESSION_URLS);
+        if (impressionUrls.isEmpty()) {
+            // During the transition period where adserver still sends back just one impression
+            // url, handle this as if we get a list of one impression url.
+            impressionUrls.add(extractHeader(jsonHeaders, ResponseHeader.IMPRESSION_URL));
+        }
+        builder.setImpressionTrackingUrls(impressionUrls);
 
-        String failUrl = extractHeader(jsonHeaders, ResponseHeader.FAIL_URL);
-        builder.setFailoverUrl(failUrl);
+        builder.setBeforeLoadUrl(extractHeader(jsonHeaders, ResponseHeader.BEFORE_LOAD_URL));
 
-        String requestId = getRequestId(failUrl);
-        builder.setRequestId(requestId);
+        final List<String> afterLoadUrls = extractStringArray(jsonHeaders,
+                ResponseHeader.AFTER_LOAD_URL);
+        if (afterLoadUrls.isEmpty()) {
+            afterLoadUrls.add(extractHeader(jsonHeaders, ResponseHeader.AFTER_LOAD_URL));
+        }
+        builder.setAfterLoadUrls(afterLoadUrls);
 
-        boolean isScrollable = extractBooleanHeader(jsonHeaders, ResponseHeader.SCROLLABLE, false);
-        builder.setScrollable(isScrollable);
+        final List<String> afterLoadSuccessUrls = extractStringArray(jsonHeaders,
+                ResponseHeader.AFTER_LOAD_SUCCESS_URL);
+        if (afterLoadSuccessUrls.isEmpty()) {
+            afterLoadSuccessUrls.add(extractHeader(jsonHeaders, ResponseHeader.AFTER_LOAD_SUCCESS_URL));
+        }
+        builder.setAfterLoadSuccessUrls(afterLoadSuccessUrls);
+
+        final List<String> afterLoadFailUrls = extractStringArray(jsonHeaders,
+                ResponseHeader.AFTER_LOAD_FAIL_URL);
+        if (afterLoadFailUrls.isEmpty()) {
+            afterLoadFailUrls.add(extractHeader(jsonHeaders, ResponseHeader.AFTER_LOAD_FAIL_URL));
+        }
+        builder.setAfterLoadFailUrls(afterLoadFailUrls);
+
+        builder.setRequestId(requestId);
 
         Integer width = extractIntegerHeader(jsonHeaders, ResponseHeader.WIDTH);
         Integer height = extractIntegerHeader(jsonHeaders, ResponseHeader.HEIGHT);
         builder.setDimensions(width, height);
 
-        Integer adTimeoutDelaySeconds = extractIntegerHeader(jsonHeaders, ResponseHeader.AD_TIMEOUT);
-        builder.setAdTimeoutDelayMilliseconds(
-                adTimeoutDelaySeconds == null
-                        ? null
-                        : adTimeoutDelaySeconds * 1000);
+        Integer adTimeoutDelayMilliseconds = extractIntegerHeader(jsonHeaders, ResponseHeader.AD_TIMEOUT);
+        builder.setAdTimeoutDelayMilliseconds(adTimeoutDelayMilliseconds);
 
         if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
             try {
-                builder.setJsonBody(new JSONObject(responseBody));
+                builder.setJsonBody(new JSONObject(content));
             } catch (JSONException e) {
-                return Response.error(
-                        new MoPubNetworkError("Failed to decode body JSON for native ad format",
-                                e, MoPubNetworkError.Reason.BAD_BODY));
+                throw new MoPubNetworkError("Failed to decode body JSON for native ad format",
+                        e, MoPubNetworkError.Reason.BAD_BODY);
             }
         }
 
         // Derive custom event fields
-        String customEventClassName = AdTypeTranslator.getCustomEventName(mAdFormat, adTypeString,
+        String customEventClassName = AdTypeTranslator.getCustomEventName(adFormat, adTypeString,
                 fullAdTypeString, jsonHeaders);
         builder.setCustomEventClassName(customEventClassName);
 
         // Default browser agent from X-Browser-Agent header
-        BrowserAgent browserAgent = BrowserAgent.fromHeader(
+        MoPub.BrowserAgent browserAgent = MoPub.BrowserAgent.fromHeader(
                 extractIntegerHeader(jsonHeaders, ResponseHeader.BROWSER_AGENT));
         MoPub.setBrowserAgentFromAdServer(browserAgent);
         builder.setBrowserAgent(browserAgent);
@@ -274,24 +314,19 @@ public static void setServerOverrideListener(
         try {
             serverExtras = Json.jsonStringToMap(customEventData);
         } catch (JSONException e) {
-            return Response.error(
-                    new MoPubNetworkError("Failed to decode server extras for custom event data.",
-                            e, MoPubNetworkError.Reason.BAD_HEADER_DATA));
+            throw new MoPubNetworkError("Failed to decode server extras for custom event data.",
+                    e, MoPubNetworkError.Reason.BAD_HEADER_DATA);
         }
 
         try {
-            if (currentAdResponse != null) {
-                serverExtras.put(DataKeys.ADM_KEY, currentAdResponse.getString(ADM_KEY));
+            if (!jsonHeaders.optString(ADM_KEY).isEmpty()) {
+                serverExtras.put(ADM_KEY, jsonHeaders.getString(ADM_KEY));
             }
         } catch (JSONException e) {
-            return Response.error(
-                    new MoPubNetworkError("Failed to parse ADM for advanced bidding",
-                            e, MoPubNetworkError.Reason.BAD_BODY));
+            throw new MoPubNetworkError("Failed to parse ADM for advanced bidding",
+                    e, MoPubNetworkError.Reason.BAD_BODY);
         }
 
-        if (!TextUtils.isEmpty(redirectUrl)) {
-            serverExtras.put(DataKeys.REDIRECT_URL_KEY, redirectUrl);
-        }
         if (!TextUtils.isEmpty(clickTrackingUrl)) {
             // X-Clickthrough parsed into serverExtras
             // Used by Banner, Interstitial
@@ -299,8 +334,7 @@ public static void setServerOverrideListener(
         }
         if (eventDataIsInResponseBody(adTypeString, fullAdTypeString)) {
             // Some MoPub-specific custom events get their serverExtras from the response itself:
-            serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, responseBody);
-            serverExtras.put(DataKeys.SCROLLABLE_KEY, Boolean.toString(isScrollable));
+            serverExtras.put(DataKeys.HTML_RESPONSE_BODY_KEY, content);
             serverExtras.put(DataKeys.CREATIVE_ORIENTATION_KEY, extractHeader(jsonHeaders, ResponseHeader.ORIENTATION));
         }
         if (AdType.STATIC_NATIVE.equals(adTypeString) || AdType.VIDEO_NATIVE.equals(adTypeString)) {
@@ -308,7 +342,7 @@ public static void setServerOverrideListener(
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT);
             final String impressionVisibleMS = extractHeader(jsonHeaders,
                     ResponseHeader.IMPRESSION_VISIBLE_MS);
-            final String impressionMinVisiblePx = extractHeader(headers,
+            final String impressionMinVisiblePx = extractHeader(jsonHeaders,
                     ResponseHeader.IMPRESSION_MIN_VISIBLE_PX);
             if (!TextUtils.isEmpty(impressionMinVisiblePercent)) {
                 serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT,
@@ -321,6 +355,7 @@ public static void setServerOverrideListener(
                 serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PX, impressionMinVisiblePx);
             }
         }
+
         if (AdType.VIDEO_NATIVE.equals(adTypeString)) {
             serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT,
                     extractPercentHeaderString(jsonHeaders, ResponseHeader.PLAY_VISIBLE_PERCENT));
@@ -343,19 +378,19 @@ public static void setServerOverrideListener(
         }
 
         // Banner imp tracking
-        if (AdFormat.BANNER.equals(mAdFormat)) {
+        if (AdFormat.BANNER.equals(adFormat)) {
             serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS,
-                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
+                    extractHeader(jsonHeaders, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS));
             serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS,
-                    extractHeader(headers, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
+                    extractHeader(jsonHeaders, ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS));
         }
 
         // Disable viewability vendors, if any
         final String disabledViewabilityVendors = extractHeader(jsonHeaders,
                 ResponseHeader.DISABLE_VIEWABILITY);
         if (!TextUtils.isEmpty(disabledViewabilityVendors)) {
-            final ViewabilityVendor disabledVendors =
-                    ViewabilityVendor.fromKey(disabledViewabilityVendors);
+            final ExternalViewabilitySessionManager.ViewabilityVendor disabledVendors =
+                    ExternalViewabilitySessionManager.ViewabilityVendor.fromKey(disabledViewabilityVendors);
             if (disabledVendors != null) {
                 disabledVendors.disable();
             }
@@ -385,64 +420,50 @@ public static void setServerOverrideListener(
             builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
-        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders,
-                ResponseHeader.INVALIDATE_CONSENT, false);
-        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders,
-                ResponseHeader.FORCE_EXPLICIT_NO, false);
-        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders,
-                ResponseHeader.REACQUIRE_CONSENT, false);
-        String consentChangeReason = extractHeader(jsonHeaders,
-                ResponseHeader.CONSENT_CHANGE_REASON);
-        final boolean forceGdprApplies = extractBooleanHeader(jsonHeaders,
-                ResponseHeader.FORCE_GDPR_APPLIES, false);
-
-        if (sServerOverrideListener != null) {
-            if (forceGdprApplies) {
-                sServerOverrideListener.onForceGdprApplies();
-            }
-            if (forceExplicitNo) {
-                sServerOverrideListener.onForceExplicitNo(consentChangeReason);
-            } else if (invalidateConsent) {
-                sServerOverrideListener.onInvalidateConsent(consentChangeReason);
-            } else if (reacquireConsent) {
-                sServerOverrideListener.onReacquireConsent(consentChangeReason);
-            }
-        }
+        return builder.build();
+    }
 
-        AdResponse adResponse = builder.build();
+    /**
+     * Extract parameter 'x-refreshtime' from ad JSON
+     *
+     * @param item server data in JSON format
+     * @return refresh time in milliseconds
+     * @throws JSONException when JSON key is not found
+     */
+    @Nullable
+    private static Integer extractRefreshTimeMS(@NonNull final JSONObject item) throws JSONException {
+        Preconditions.checkNotNull(item);
 
-        return Response.success(builder.build(),  // Cast needed for Response generic.
-                HttpHeaderParser.parseCacheHeaders(networkResponse));
+        final JSONObject jsonHeaders = item.getJSONObject(ResponseHeader.METADATA.getKey());
+        final Integer refreshTimeSeconds = extractIntegerHeader(jsonHeaders, ResponseHeader.REFRESH_TIME);
+        return refreshTimeSeconds == null ? null : refreshTimeSeconds * 1000;
     }
 
-    private boolean eventDataIsInResponseBody(@Nullable String adType,
-            @Nullable String fullAdType) {
-        return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
-                (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
-                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
-                AdType.REWARDED_PLAYABLE.equals(adType);
-    }
+    private static boolean extractWarmup(@NonNull final JSONObject item) {
+        Preconditions.checkNotNull(item);
 
-    @Override
-    protected void deliverResponse(final AdResponse adResponse) {
-        mListener.onSuccess(adResponse);
+        final JSONObject jsonHeaders = item.optJSONObject(ResponseHeader.METADATA.getKey());
+        return extractBooleanHeader(jsonHeaders, ResponseHeader.WARMUP, false);
     }
 
-    @Nullable
-    @VisibleForTesting
-    String getRequestId(@Nullable String failUrl) {
-        if (failUrl == null) {
-            return null;
-        }
+    // Based on Volley's StringResponse class.
+    private static String parseStringBody(@NonNull final NetworkResponse response) {
+        Preconditions.checkNotNull(response);
 
-        String requestId = null;
-        Uri uri = Uri.parse(failUrl);
+        String parsed;
         try {
-            requestId = uri.getQueryParameter("request_id");
-        } catch (UnsupportedOperationException e) {
-            MoPubLog.d("Unable to obtain request id from fail url.");
+            parsed = new String(response.data, HttpHeaderParser.parseCharset(response.headers));
+        } catch (UnsupportedEncodingException e) {
+            parsed = new String(response.data);
         }
+        return parsed;
+    }
 
-        return requestId;
+    private static boolean eventDataIsInResponseBody(@Nullable final String adType,
+                                                     @Nullable final String fullAdType) {
+        return AdType.MRAID.equals(adType) || AdType.HTML.equals(adType) ||
+                (AdType.INTERSTITIAL.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                (AdType.REWARDED_VIDEO.equals(adType) && FullAdType.VAST.equals(fullAdType)) ||
+                AdType.REWARDED_PLAYABLE.equals(adType);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
index e551304f..f18d570e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/Networking.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
index 9c4f9faf..5cbe321d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/PlayServicesUrlRewriter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.net.Uri;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
index ba535bf8..3f8aa67a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
index 97110951..8d63b868 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/RequestQueueHttpStack.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
index f6a7bf91..8fdf38e3 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/TrackingRequest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
index 9cddd85f..a281c810 100644
--- a/mopub-sdk/mopub-sdk-interstitial/build.gradle
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 dependencies {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
index 3e4f0c17..5de03279 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/BaseInterstitialActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index 55ec4bb1..fe34c8ab 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -14,7 +18,9 @@
  * and invoke its loadInterstitial() method.
  */
 public abstract class CustomEventInterstitial implements Interstitial {
-    
+
+    private boolean mAutomaticImpressionAndClickTracking = true;
+
     /*
      * When the MoPub SDK receives a response indicating it should load a custom event, it will send
      * this message to your custom event class. Your implementation of this method can either load
@@ -44,6 +50,20 @@ protected abstract void loadInterstitial(Context context,
      * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
      */
     protected abstract void onInvalidate();
+
+    /**
+     * Enables or disables automatic impression and click tracking. This is enabled by default.
+     *
+     * @param autoTrack True to use automatic impression and click tracking. False to use manual
+     *                  impression and click tracking.
+     */
+    protected void setAutomaticImpressionAndClickTracking(final boolean autoTrack) {
+        mAutomaticImpressionAndClickTracking = autoTrack;
+    }
+
+    boolean isAutomaticImpressionAndClickTrackingEnabled() {
+        return mAutomaticImpressionAndClickTracking;
+    }
     
     public interface CustomEventInterstitialListener {
         /*
@@ -72,6 +92,12 @@ protected abstract void loadInterstitial(Context context,
          * ad. This method is optional.
          */
         void onInterstitialClicked();
+
+        /**
+         * Your custom event subclass should call this method when an impression happens if you
+         * set automatic impression and click tracking to false. Otherwise, this method is optional.
+         */
+        void onInterstitialImpression();
         
         /*
          * This is an alias for onInterstitialClicked().
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
index 73c57c5c..a5270f5f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitialAdapter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -136,18 +140,25 @@ void setAdapterListener(CustomEventInterstitialAdapterListener listener) {
         mCustomEventInterstitialAdapterListener = listener;
     }
 
+    boolean isAutomaticImpressionAndClickTrackingEnabled() {
+        final CustomEventInterstitial customEventInterstitial = mCustomEventInterstitial;
+        if (customEventInterstitial == null) {
+            return true;
+        }
+
+        return customEventInterstitial.isAutomaticImpressionAndClickTrackingEnabled();
+    }
+
     private void cancelTimeout() {
         mHandler.removeCallbacks(mTimeout);
     }
 
     private int getTimeoutDelayMilliseconds() {
-        if (mMoPubInterstitial == null
-                || mMoPubInterstitial.getAdTimeoutDelay() == null
-                || mMoPubInterstitial.getAdTimeoutDelay() < 0) {
+        if (mMoPubInterstitial == null ) {
             return DEFAULT_INTERSTITIAL_TIMEOUT_DELAY;
         }
 
-        return mMoPubInterstitial.getAdTimeoutDelay() * 1000;
+        return mMoPubInterstitial.getAdTimeoutDelay(DEFAULT_INTERSTITIAL_TIMEOUT_DELAY);
     }
 
     interface CustomEventInterstitialAdapterListener {
@@ -155,6 +166,7 @@ private int getTimeoutDelayMilliseconds() {
         void onCustomEventInterstitialFailed(MoPubErrorCode errorCode);
         void onCustomEventInterstitialShown();
         void onCustomEventInterstitialClicked();
+        void onCustomEventInterstitialImpression();
         void onCustomEventInterstitialDismissed();
     }
 
@@ -211,6 +223,17 @@ public void onInterstitialClicked() {
         }
     }
 
+    @Override
+    public void onInterstitialImpression() {
+        if (isInvalidated()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapterListener != null) {
+            mCustomEventInterstitialAdapterListener.onCustomEventInterstitialImpression();
+        }
+    }
+
     @Override
     public void onLeaveApplication() {
         onInterstitialClicked();
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
index 73a37a12..9488e307 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/DefaultInterstitialAdListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
index bfe38ea0..b7f084b9 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/EventForwardingBroadcastReceiver.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
index 370b2fe0..d38178c8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
@@ -9,13 +13,9 @@
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 
 public class HtmlInterstitial extends ResponseBodyInterstitial {
     private String mHtmlData;
-    private boolean mIsScrollable;
-    private String mRedirectUrl;
     private String mClickthroughUrl;
     @NonNull
     private CreativeOrientation mOrientation;
@@ -23,22 +23,18 @@
     @Override
     protected void extractExtras(Map<String, String> serverExtras) {
         mHtmlData = serverExtras.get(HTML_RESPONSE_BODY_KEY);
-        mIsScrollable = Boolean.valueOf(serverExtras.get(SCROLLABLE_KEY));
-        mRedirectUrl = serverExtras.get(REDIRECT_URL_KEY);
         mClickthroughUrl = serverExtras.get(CLICKTHROUGH_URL_KEY);
         mOrientation = CreativeOrientation.fromHeader(serverExtras.get(CREATIVE_ORIENTATION_KEY));
     }
 
     @Override
     protected void preRenderHtml(CustomEventInterstitialListener customEventInterstitialListener) {
-        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData,
-                mIsScrollable, mRedirectUrl, mClickthroughUrl, mBroadcastIdentifier);
+        MoPubActivity.preRenderHtml(this, mContext, mAdReport, customEventInterstitialListener, mHtmlData, mClickthroughUrl, mBroadcastIdentifier);
     }
 
     @Override
     public void showInterstitial() {
-        MoPubActivity.start(mContext, mHtmlData, mAdReport, mIsScrollable,
-                mRedirectUrl, mClickthroughUrl, mOrientation,
+        MoPubActivity.start(mContext, mHtmlData, mAdReport, mClickthroughUrl, mOrientation,
                 mBroadcastIdentifier);
     }
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
index fb3762c0..25cec87c 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/HtmlInterstitialWebView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -16,11 +20,11 @@ public HtmlInterstitialWebView(Context context, AdReport adReport) {
         mHandler = new Handler();
     }
 
-    public void init(final CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl, String dspCreativeId) {
-        super.init(isScrollable);
+    public void init(final CustomEventInterstitialListener customEventInterstitialListener, String clickthroughUrl, String dspCreativeId) {
+        super.init();
 
         HtmlInterstitialWebViewListener htmlInterstitialWebViewListener = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
-        HtmlWebViewClient htmlWebViewClient = new HtmlWebViewClient(htmlInterstitialWebViewListener, this, clickthroughUrl, redirectUrl, dspCreativeId);
+        HtmlWebViewClient htmlWebViewClient = new HtmlWebViewClient(htmlInterstitialWebViewListener, this, clickthroughUrl, dspCreativeId);
         setWebViewClient(htmlWebViewClient);
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
index d5f51e1f..360a4841 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.ActivityNotFoundException;
@@ -25,8 +29,6 @@
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
@@ -42,11 +44,10 @@
     @Nullable private HtmlInterstitialWebView mHtmlInterstitialWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
 
-    public static void start(Context context, String htmlData, AdReport adReport,
-            boolean isScrollable, String redirectUrl, String clickthroughUrl,
+    public static void start(Context context, String htmlData, AdReport adReport, String clickthroughUrl,
             CreativeOrientation creativeOrientation, long broadcastIdentifier) {
-        Intent intent = createIntent(context, htmlData, adReport, isScrollable,
-                redirectUrl, clickthroughUrl, creativeOrientation, broadcastIdentifier);
+        Intent intent = createIntent(context, htmlData, adReport, clickthroughUrl,
+                creativeOrientation, broadcastIdentifier);
         try {
             context.startActivity(intent);
         } catch (ActivityNotFoundException anfe) {
@@ -55,13 +56,11 @@ public static void start(Context context, String htmlData, AdReport adReport,
     }
 
     static Intent createIntent(Context context,
-            String htmlData, AdReport adReport, boolean isScrollable, String redirectUrl,
-            String clickthroughUrl, CreativeOrientation orientation, long broadcastIdentifier) {
+            String htmlData, AdReport adReport, String clickthroughUrl,
+            CreativeOrientation orientation, long broadcastIdentifier) {
         Intent intent = new Intent(context, MoPubActivity.class);
         intent.putExtra(HTML_RESPONSE_BODY_KEY, htmlData);
-        intent.putExtra(SCROLLABLE_KEY, isScrollable);
         intent.putExtra(CLICKTHROUGH_URL_KEY, clickthroughUrl);
-        intent.putExtra(REDIRECT_URL_KEY, redirectUrl);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
         intent.putExtra(AD_REPORT_KEY, adReport);
         intent.putExtra(CREATIVE_ORIENTATION_KEY, orientation);
@@ -74,13 +73,10 @@ static void preRenderHtml(final Interstitial baseInterstitial,
             final AdReport adReport,
             final CustomEventInterstitialListener customEventInterstitialListener,
             final String htmlData,
-            final boolean isScrollable,
-            final String redirectUrl,
             final String clickthroughUrl,
             final long broadcastIdentifier) {
         final HtmlInterstitialWebView htmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(
-                context.getApplicationContext(), adReport, customEventInterstitialListener,
-                isScrollable, redirectUrl, clickthroughUrl);
+                context.getApplicationContext(), adReport, customEventInterstitialListener, clickthroughUrl);
 
         htmlInterstitialWebView.enablePlugins(false);
         htmlInterstitialWebView.enableJavascriptCaching();
@@ -110,8 +106,6 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
     @Override
     public View getAdView() {
         Intent intent = getIntent();
-        boolean isScrollable = intent.getBooleanExtra(SCROLLABLE_KEY, false);
-        String redirectUrl = intent.getStringExtra(REDIRECT_URL_KEY);
         String clickthroughUrl = intent.getStringExtra(CLICKTHROUGH_URL_KEY);
         String htmlResponse = intent.getStringExtra(HTML_RESPONSE_BODY_KEY);
 
@@ -124,8 +118,8 @@ public View getAdView() {
                     WebViewCacheService.popWebViewConfig(broadcastIdentifier);
             if (config != null && config.getWebView() instanceof HtmlInterstitialWebView) {
                 mHtmlInterstitialWebView = (HtmlInterstitialWebView) config.getWebView();
-                mHtmlInterstitialWebView.init(new BroadcastingInterstitialListener(), isScrollable,
-                        redirectUrl, clickthroughUrl, mAdReport != null ? mAdReport.getDspCreativeId(): null);
+                mHtmlInterstitialWebView.init(new BroadcastingInterstitialListener(), clickthroughUrl,
+                        mAdReport != null ? mAdReport.getDspCreativeId() : null);
                 mHtmlInterstitialWebView.enablePlugins(true);
                 mHtmlInterstitialWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
 
@@ -137,7 +131,7 @@ public View getAdView() {
 
         MoPubLog.d("WebView cache miss. Recreating the WebView.");
         mHtmlInterstitialWebView = HtmlInterstitialWebViewFactory.create(getApplicationContext(),
-                mAdReport, new BroadcastingInterstitialListener(), isScrollable, redirectUrl, clickthroughUrl);
+                mAdReport, new BroadcastingInterstitialListener(), clickthroughUrl);
         
         mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(this);
         mExternalViewabilitySessionManager.createDisplaySession(this, mHtmlInterstitialWebView, true);
@@ -202,6 +196,10 @@ public void onInterstitialClicked() {
             broadcastAction(MoPubActivity.this, getBroadcastIdentifier(), ACTION_INTERSTITIAL_CLICK);
         }
 
+        @Override
+        public void onInterstitialImpression() {
+        }
+
         @Override
         public void onLeaveApplication() {
         }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index 94420ecc..0df32007 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -249,6 +253,7 @@ synchronized boolean attemptStateTransition(@NonNull final InterstitialState end
      */
     private void setInterstitialStateDestroyed() {
         invalidateInterstitialAdapter();
+        mInterstitialAdListener = null;
         mInterstitialView.setBannerAdListener(null);
         mInterstitialView.destroy();
         mHandler.removeCallbacks(mAdExpiration);
@@ -276,8 +281,8 @@ boolean isDestroyed() {
         return mCurrentInterstitialState == DESTROYED;
     }
 
-    Integer getAdTimeoutDelay() {
-        return mInterstitialView.getAdTimeoutDelay();
+    Integer getAdTimeoutDelay(int defaultValue) {
+        return mInterstitialView.getAdTimeoutDelay(defaultValue);
     }
 
     @NonNull
@@ -371,6 +376,10 @@ public void onCustomEventInterstitialLoaded() {
 
         attemptStateTransition(READY);
 
+        if (mInterstitialView.mAdViewController != null) {
+            mInterstitialView.mAdViewController.creativeDownloadSuccess();
+        }
+
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialLoaded(this);
         }
@@ -393,7 +402,10 @@ public void onCustomEventInterstitialShown() {
             return;
         }
 
-        mInterstitialView.trackImpression();
+        if (mCustomEventInterstitialAdapter == null ||
+                mCustomEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled()) {
+            mInterstitialView.trackImpression();
+        }
 
         if (mInterstitialAdListener != null) {
             mInterstitialAdListener.onInterstitialShown(this);
@@ -413,6 +425,18 @@ public void onCustomEventInterstitialClicked() {
         }
     }
 
+    @Override
+    public void onCustomEventInterstitialImpression() {
+        if (isDestroyed()) {
+            return;
+        }
+
+        if (mCustomEventInterstitialAdapter != null &&
+                !mCustomEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled()) {
+            mInterstitialView.trackImpression();
+        }
+    }
+
     @Override
     public void onCustomEventInterstitialDismissed() {
         if (isDestroyed()) {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
index a2bee5e7..53827498 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/MraidActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.ActivityNotFoundException;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
index 2bc42b13..cf1ca0d8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/ResponseBodyInterstitial.java
@@ -1,6 +1,11 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.AdReport;
 import com.mopub.common.ExternalViewabilitySessionManager;
@@ -14,6 +19,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public abstract class ResponseBodyInterstitial extends CustomEventInterstitial {
+    @Nullable
     private EventForwardingBroadcastReceiver mBroadcastReceiver;
     protected Context mContext;
     protected AdReport mAdReport;
@@ -67,6 +73,7 @@ public void loadInterstitial(
     public void onInvalidate() {
         if (mBroadcastReceiver != null) {
             mBroadcastReceiver.unregister(mBroadcastReceiver);
+            mBroadcastReceiver = null;
         }
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
index 89fcd4ec..dcefcbde 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/VastVideoInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
index e7042f5c..e16d9392 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialAdapterFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import com.mopub.common.AdReport;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
index 7d3f5830..38737b05 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/CustomEventInterstitialFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import com.mopub.mobileads.CustomEventInterstitial;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
index e26f34a8..751a7d07 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
@@ -14,21 +18,17 @@ public static HtmlInterstitialWebView create(
             Context context,
             AdReport adReport,
             CustomEventInterstitialListener customEventInterstitialListener,
-            boolean isScrollable,
-            String redirectUrl,
             String clickthroughUrl) {
-        return instance.internalCreate(context, adReport, customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
+        return instance.internalCreate(context, adReport, customEventInterstitialListener, clickthroughUrl);
     }
 
     public HtmlInterstitialWebView internalCreate(
             Context context,
             AdReport adReport,
             CustomEventInterstitialListener customEventInterstitialListener,
-            boolean isScrollable,
-            String redirectUrl,
             String clickthroughUrl) {
         HtmlInterstitialWebView htmlInterstitialWebView = new HtmlInterstitialWebView(context, adReport);
-        htmlInterstitialWebView.init(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl, adReport.getDspCreativeId());
+        htmlInterstitialWebView.init(customEventInterstitialListener, clickthroughUrl, adReport.getDspCreativeId());
         return htmlInterstitialWebView;
     }
 
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
index 34ecd599..e4ff64e8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mraid/MraidInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index 191c33a9..6604b7b8 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -1,8 +1,12 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 dependencies {
     api project(':mopub-sdk:mopub-sdk-base')
-    api 'com.android.support:recyclerview-v7:26.1.0'
+    api 'com.android.support:recyclerview-v7:28.0.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
index daad0fb1..fbedb4fd 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdRendererRegistry.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
index 9318e2ce..49744343 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/AdapterHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -13,10 +17,9 @@
 import java.lang.ref.WeakReference;
 
 /**
- * @deprecated As of release 2.4, use {@link com.mopub.nativeads.MoPubAdAdapter} or
+ * Use {@link com.mopub.nativeads.MoPubAdAdapter} or
  * {@link com.mopub.nativeads.MoPubStreamAdPlacer} instead
  */
-@Deprecated
 public final class AdapterHelper {
     /**
      * Preferably an Activity Context.
@@ -26,19 +29,17 @@
     private final int mStart;
     private final int mInterval;
 
-    @Deprecated
     public AdapterHelper(@NonNull final Context context, final int start, final int interval) {
         Preconditions.checkNotNull(context, "Context cannot be null.");
         Preconditions.checkArgument(start >= 0, "start position must be non-negative");
         Preconditions.checkArgument(interval >= 2, "interval must be at least 2");
 
-        mContext = new WeakReference<Context>(context);
+        mContext = new WeakReference<>(context);
         mApplicationContext = context.getApplicationContext();
         mStart = start;
         mInterval = interval;
     }
 
-    @Deprecated
     @NonNull
     public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
@@ -59,7 +60,6 @@ public View getAdView(@Nullable final View convertView,
         );
     }
 
-    @Deprecated
     @NonNull
     public View getAdView(@Nullable final View convertView,
             @Nullable final ViewGroup parent,
@@ -68,18 +68,15 @@ public View getAdView(@Nullable final View convertView,
     }
 
     // Total number of content rows + ad rows
-    @Deprecated
     public int shiftedCount(final int originalCount) {
         return originalCount + numberOfAdsThatCouldFitWithContent(originalCount);
     }
 
     // Shifted position of content in the backing list
-    @Deprecated
     public int shiftedPosition(final int position) {
         return position - numberOfAdsSeenUpToPosition(position);
     }
 
-    @Deprecated
     public boolean isAdPosition(final int position) {
         if (position < mStart) {
             return false;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
index 90b53bcd..fefb2764 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/BaseNativeAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
@@ -29,9 +33,12 @@
     @NonNull final private Set<String> mClickTrackers;
     @Nullable private NativeEventListener mNativeEventListener;
 
+    private boolean mInvalidated;
+
     protected BaseNativeAd() {
         mImpressionTrackers = new HashSet<String>();
         mClickTrackers = new HashSet<String>();
+        mInvalidated = false;
     }
 
     // Lifecycle Handlers
@@ -155,4 +162,12 @@ final public void addClickTracker(@NonNull final String url) {
     Set<String> getClickTrackers() {
         return new HashSet<String>(mClickTrackers);
     }
+
+    public void invalidate(){
+        mInvalidated = true;
+    }
+
+    public boolean isInvalidated(){
+        return mInvalidated;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
index 84b36260..b1d08354 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClickInterface.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.view.View;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
index 0809b8d2..9de254da 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ClientPositioningSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
index 0177a1d5..a2d3a864 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNative.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -35,6 +39,12 @@ protected abstract void loadNativeAd(@NonNull final Context context,
             @NonNull final Map<String, Object> localExtras,
             @NonNull final Map<String, String> serverExtras);
 
+    /*
+     * Called when a Custom Event is being invalidated or destroyed. Perform any final cleanup here.
+     */
+    protected void onInvalidate() {
+    }
+
     public interface CustomEventNativeListener {
         /**
          * Your custom event subclass must call this method when it successfully loads a native ad.
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
index e323a2ac..06a144da 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/CustomEventNativeAdapter.java
@@ -1,9 +1,17 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
+import android.os.Handler;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
+import com.mopub.common.Constants;
 import com.mopub.common.DataKeys;
+import com.mopub.common.Preconditions;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.nativeads.factories.CustomEventNativeFactory;
 import com.mopub.network.AdResponse;
@@ -11,22 +19,53 @@
 import java.util.Map;
 
 final class CustomEventNativeAdapter {
-    private CustomEventNativeAdapter() {}
 
-    public static void loadNativeAd(@NonNull final Context context,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final AdResponse adResponse,
-            @NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+    @NonNull
+    private final Handler mHandler;
+    @NonNull
+    private final Runnable mTimeout;
+    @Nullable
+    private CustomEventNative customEventNative;
+    @NonNull
+    private CustomEventNative.CustomEventNativeListener mExternalListener;
+
+    private volatile boolean mCompleted;
+
+    CustomEventNativeAdapter(@NonNull final CustomEventNative.CustomEventNativeListener customEventNativeListener) {
+        Preconditions.checkNotNull(customEventNativeListener);
+
+        mExternalListener = customEventNativeListener;
+
+        mCompleted = false;
+        mHandler = new Handler();
+        mTimeout = new Runnable() {
+            @Override
+            public void run() {
+                if (mCompleted) {
+                    return;
+                }
+                MoPubLog.d("Timeout loading native ad content. " + CustomEventNativeAdapter.this.toString());
+                stopLoading();
+                mExternalListener.onNativeAdFailed(NativeErrorCode.NETWORK_TIMEOUT);
+            }
+        };
+    }
+
+    public void loadNativeAd(@NonNull final Context context,
+                             @NonNull final Map<String, Object> localExtras,
+                             @NonNull final AdResponse adResponse) {
+        Preconditions.checkNotNull(context);
+        Preconditions.checkNotNull(localExtras);
+        Preconditions.checkNotNull(adResponse);
 
-        final CustomEventNative customEventNative;
         String customEventNativeClassName = adResponse.getCustomEventClassName();
 
         MoPubLog.d("Attempting to invoke custom event: " + customEventNativeClassName);
         try {
             customEventNative = CustomEventNativeFactory.create(customEventNativeClassName);
         } catch (Exception e) {
-            MoPubLog.w("Failed to load Custom Event Native class: " + customEventNativeClassName);
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            MoPubLog.e("Failed to load Custom Event Native class: " + customEventNativeClassName);
+            mExternalListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
             return;
         }
         if (adResponse.hasJson()) {
@@ -40,13 +79,56 @@ public static void loadNativeAd(@NonNull final Context context,
         try {
             customEventNative.loadNativeAd(
                     context,
-                    customEventNativeListener,
+                    createListener(),
                     localExtras,
-                    adResponse.getServerExtras()
-            );
+                    adResponse.getServerExtras());
+
+            long timeoutMS = adResponse.getAdTimeoutMillis(Constants.THIRTY_SECONDS_MILLIS);
+            mHandler.postDelayed(mTimeout, timeoutMS);
         } catch (Exception e) {
             MoPubLog.w("Loading custom event native threw an error.", e);
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+            mExternalListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
+        }
+    }
+
+    @NonNull
+    private CustomEventNative.CustomEventNativeListener createListener() {
+        return new CustomEventNative.CustomEventNativeListener() {
+            @Override
+            public void onNativeAdLoaded(BaseNativeAd nativeAd) {
+                if (mCompleted) {
+                    return;
+                }
+                invalidate();
+                mExternalListener.onNativeAdLoaded(nativeAd);
+            }
+
+            @Override
+            public void onNativeAdFailed(NativeErrorCode errorCode) {
+                if (mCompleted) {
+                    return;
+                }
+                invalidate();
+                mExternalListener.onNativeAdFailed(errorCode);
+            }
+        };
+    }
+
+    void stopLoading() {
+        try {
+            if (customEventNative != null)
+                customEventNative.onInvalidate();
+        } catch (Exception e) {
+            MoPubLog.e(e.toString());
+        }
+        invalidate();
+    }
+
+    private synchronized void invalidate() {
+        if (!mCompleted) {
+            mCompleted = true;
+            mHandler.removeCallbacks(mTimeout);
+            customEventNative = null;
         }
     }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
index 6931c414..432f33b5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionInterface.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.view.View;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
index d4989636..e438143d 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ImpressionTracker.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -8,14 +12,15 @@
 import android.view.View;
 
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.VisibilityTracker;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.WeakHashMap;
 
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
+import static com.mopub.common.VisibilityTracker.VisibilityChecker;
+import static com.mopub.common.VisibilityTracker.VisibilityTrackerListener;
 
 /**
  * Impression tracker used to call {@link ImpressionInterface#recordImpression(View)} when a
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
index bdbc0bb7..c424477c 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/IntInterval.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
index c1aaa849..b4ec5f12 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdAdapter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -16,6 +20,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.Preconditions.NoThrow;
 import com.mopub.common.VisibleForTesting;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 
@@ -25,7 +30,7 @@
 import static android.widget.AdapterView.OnItemClickListener;
 import static android.widget.AdapterView.OnItemLongClickListener;
 import static android.widget.AdapterView.OnItemSelectedListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
+import static com.mopub.common.VisibilityTracker.VisibilityTrackerListener;
 
 /**
  * {@code MoPubAdAdapter} facilitates placing ads into an Android {@link android.widget.ListView} or
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
index 04d9c8f3..bb741204 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubAdRenderer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index d5174d12..bb62a152 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -27,12 +31,17 @@
 import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
 
 public class MoPubCustomEventNative extends CustomEventNative {
+    private MoPubStaticNativeAd moPubStaticNativeAd;
 
     @Override
     protected void loadNativeAd(@NonNull final Context context,
-            @NonNull final CustomEventNativeListener customEventNativeListener,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) {
+                                @NonNull final CustomEventNativeListener customEventNativeListener,
+                                @NonNull final Map<String, Object> localExtras,
+                                @NonNull final Map<String, String> serverExtras) {
+
+        if (moPubStaticNativeAd != null && !moPubStaticNativeAd.isInvalidated()) {
+            return;
+        }
 
         Object json = localExtras.get(JSON_BODY_KEY);
         // null or non-JSONObjects should not be passed in localExtras as JSON_BODY_KEY
@@ -41,7 +50,7 @@ protected void loadNativeAd(@NonNull final Context context,
             return;
         }
 
-        final MoPubStaticNativeAd moPubStaticNativeAd =
+        moPubStaticNativeAd =
                 new MoPubStaticNativeAd(context,
                         (JSONObject) json,
                         new ImpressionTracker(context),
@@ -85,6 +94,14 @@ protected void loadNativeAd(@NonNull final Context context,
         }
     }
 
+    @Override
+    protected void onInvalidate() {
+        if (moPubStaticNativeAd == null) {
+            return;
+        }
+        moPubStaticNativeAd.invalidate();
+    }
+
     static class MoPubStaticNativeAd extends StaticNativeAd {
         enum Parameter {
             IMPRESSION_TRACKER("imptracker", true),
@@ -103,7 +120,8 @@ protected void loadNativeAd(@NonNull final Context context,
             PRIVACY_INFORMATION_ICON_IMAGE_URL("privacyicon", false),
             PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL("privacyclkurl", false);
 
-            @NonNull final String name;
+            @NonNull
+            final String name;
             final boolean required;
 
             Parameter(@NonNull final String name, final boolean required) {
@@ -125,6 +143,7 @@ static Parameter from(@NonNull final String name) {
             @NonNull
             @VisibleForTesting
             static final Set<String> requiredKeys = new HashSet<String>();
+
             static {
                 for (final Parameter parameter : values()) {
                     if (parameter.required) {
@@ -137,17 +156,23 @@ static Parameter from(@NonNull final String name) {
         @VisibleForTesting
         static final String PRIVACY_INFORMATION_CLICKTHROUGH_URL = "https://www.mopub.com/optout";
 
-        @NonNull private final Context mContext;
-        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
-        @NonNull private final JSONObject mJsonObject;
-        @NonNull private final ImpressionTracker mImpressionTracker;
-        @NonNull private final NativeClickHandler mNativeClickHandler;
+        @NonNull
+        private final Context mContext;
+        @NonNull
+        private final CustomEventNativeListener mCustomEventNativeListener;
+        @NonNull
+        private final JSONObject mJsonObject;
+        @NonNull
+        private final ImpressionTracker mImpressionTracker;
+        @NonNull
+        private final NativeClickHandler mNativeClickHandler;
+
 
         MoPubStaticNativeAd(@NonNull final Context context,
-                @NonNull final JSONObject jsonBody,
-                @NonNull final ImpressionTracker impressionTracker,
-                @NonNull final NativeClickHandler nativeClickHandler,
-                @NonNull final CustomEventNativeListener customEventNativeListener) {
+                            @NonNull final JSONObject jsonBody,
+                            @NonNull final ImpressionTracker impressionTracker,
+                            @NonNull final NativeClickHandler nativeClickHandler,
+                            @NonNull final CustomEventNativeListener customEventNativeListener) {
             mJsonObject = jsonBody;
             mContext = context.getApplicationContext();
             mImpressionTracker = impressionTracker;
@@ -182,11 +207,17 @@ void loadAd() throws IllegalArgumentException {
             preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
                 @Override
                 public void onImagesCached() {
+                    if (isInvalidated()) {
+                        return;
+                    }
                     mCustomEventNativeListener.onNativeAdLoaded(MoPubStaticNativeAd.this);
                 }
 
                 @Override
                 public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                    if (isInvalidated()) {
+                        return;
+                    }
                     mCustomEventNativeListener.onNativeAdFailed(errorCode);
                 }
             });
@@ -203,7 +234,7 @@ private boolean containsRequiredKeys(@NonNull final JSONObject jsonObject) {
         }
 
         private void addInstanceVariable(@NonNull final Parameter key,
-                @Nullable final Object value) throws ClassCastException {
+                                         @Nullable final Object value) throws ClassCastException {
             try {
                 switch (key) {
                     case MAIN_IMAGE:
@@ -308,6 +339,7 @@ public void clear(@NonNull final View view) {
         @Override
         public void destroy() {
             mImpressionTracker.destroy();
+            super.destroy();
         }
 
         // Event Handlers
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
index 9fe1ae15..611f80bd 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNative.java
@@ -1,8 +1,13 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.Constants;
@@ -12,12 +17,11 @@
 import com.mopub.common.util.DeviceUtils;
 import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.MoPubErrorCode;
-import com.mopub.network.AdRequest;
+import com.mopub.network.AdLoader;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.Networking;
 import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.RequestQueue;
+import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
 import java.lang.ref.WeakReference;
@@ -60,8 +64,10 @@ public void onNativeFail(final NativeErrorCode errorCode) {
 
     // For small sets TreeMap, takes up less memory than HashMap
     @NonNull private Map<String, Object> mLocalExtras = new TreeMap<String, Object>();
-    @NonNull private final AdRequest.Listener mVolleyListener;
-    @Nullable private AdRequest mNativeRequest;
+    @Nullable private AdLoader mAdLoader;
+    @Nullable private CustomEventNativeAdapter mNativeAdapter;
+    @NonNull private final AdLoader.Listener mVolleyListener;
+    @Nullable private Request mNativeRequest;
     @NonNull AdRendererRegistry mAdRendererRegistry;
 
     public MoPubNative(@NonNull final Context context,
@@ -86,7 +92,7 @@ public MoPubNative(@NonNull final Context context,
         mAdUnitId = adUnitId;
         mMoPubNativeNetworkListener = moPubNativeNetworkListener;
         mAdRendererRegistry = adRendererRegistry;
-        mVolleyListener = new AdRequest.Listener() {
+        mVolleyListener = new AdLoader.Listener() {
             @Override
             public void onSuccess(@NonNull final AdResponse response) {
                 onAdLoad(response);
@@ -114,6 +120,8 @@ public void destroy() {
             mNativeRequest.cancel();
             mNativeRequest = null;
         }
+        mAdLoader = null;
+
         mMoPubNativeNetworkListener = EMPTY_NETWORK_LISTENER;
     }
 
@@ -167,26 +175,27 @@ private void loadNativeAd(
         final String endpointUrl = generator.generateUrlString(Constants.HOST);
 
         if (endpointUrl != null) {
-            MoPubLog.d("Loading ad from: " + endpointUrl);
+            MoPubLog.d("MoPubNative Loading ad from: " + endpointUrl);
         }
 
-        requestNativeAd(endpointUrl);
+        requestNativeAd(endpointUrl, null);
     }
 
-    void requestNativeAd(@Nullable final String endpointUrl) {
+    void requestNativeAd(@Nullable final String endpointUrl, @Nullable final NativeErrorCode errorCode) {
         final Context context = getContextOrDestroy();
         if (context == null) {
             return;
         }
 
-        if (endpointUrl == null) {
-            mMoPubNativeNetworkListener.onNativeFail(INVALID_REQUEST_URL);
-            return;
+        if (mAdLoader == null || !mAdLoader.hasMoreAds()) {
+            if (TextUtils.isEmpty(endpointUrl)) {
+                mMoPubNativeNetworkListener.onNativeFail(errorCode == null ? INVALID_REQUEST_URL : errorCode);
+                return;
+            } else {
+                mAdLoader = new AdLoader(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
+            }
         }
-
-        mNativeRequest = new AdRequest(endpointUrl, AdFormat.NATIVE, mAdUnitId, context, mVolleyListener);
-        RequestQueue requestQueue = Networking.getRequestQueue(context);
-        requestQueue.add(mNativeRequest);
+        mNativeRequest = mAdLoader.loadNextAd(errorCode);
     }
 
     private void onAdLoad(@NonNull final AdResponse response) {
@@ -198,6 +207,9 @@ private void onAdLoad(@NonNull final AdResponse response) {
                 new CustomEventNativeListener() {
                     @Override
                     public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
+                        MoPubLog.w("MoPubNative.onNativeAdLoaded " + mNativeAdapter);
+                        mNativeAdapter = null;
+
                         final Context context = getContextOrDestroy();
                         if (context == null) {
                             return;
@@ -209,8 +221,12 @@ public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
                             return;
                         }
 
+                        if(mAdLoader!=null) {
+                            mAdLoader.creativeDownloadSuccess();
+                        }
+
                         mMoPubNativeNetworkListener.onNativeLoad(new NativeAd(context,
-                                        response.getImpressionTrackingUrl(),
+                                        response.getImpressionTrackingUrls(),
                                         response.getClickTrackingUrl(),
                                         mAdUnitId,
                                         nativeAd,
@@ -221,16 +237,21 @@ public void onNativeAdLoaded(@NonNull final BaseNativeAd nativeAd) {
                     @Override
                     public void onNativeAdFailed(final NativeErrorCode errorCode) {
                         MoPubLog.v(String.format("Native Ad failed to load with error: %s.", errorCode));
-                        requestNativeAd(response.getFailoverUrl());
+                        mNativeAdapter = null;
+                        requestNativeAd("", errorCode);
                     }
                 };
 
-        CustomEventNativeAdapter.loadNativeAd(
+        if (mNativeAdapter != null) {
+            MoPubLog.w("Native adapter is not null.");
+            mNativeAdapter.stopLoading();
+        }
+
+        mNativeAdapter = new CustomEventNativeAdapter(customEventNativeListener);
+        mNativeAdapter.loadNativeAd(
                 context,
                 mLocalExtras,
-                response,
-                customEventNativeListener
-        );
+                response);
     }
 
     @VisibleForTesting
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
index 84289613..d567d776 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdLoadedListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
index 4d92b43f..4cf952d0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubNativeAdPositioning.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
index 7afb0337..d0d519f4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerAdapter.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -11,6 +15,7 @@
 import com.mopub.common.Preconditions;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubClientPositioning;
 import com.mopub.nativeads.MoPubNativeAdPositioning.MoPubServerPositioning;
 
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
index 963f2ce5..17796e3f 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubRecyclerViewHolder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
index aec86d57..0172555a 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStaticNativeAdRenderer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
index 3574b303..c285edc0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubStreamAdPlacer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
index 2c13abdd..5f4dd707 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -12,6 +16,7 @@
 import com.mopub.network.TrackingRequest;
 
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import static com.mopub.nativeads.BaseNativeAd.NativeEventListener;
@@ -61,7 +66,7 @@
     private boolean mIsDestroyed;
 
     public NativeAd(@NonNull final Context context,
-            @NonNull final String moPubImpressionTrackerUrl,
+            @NonNull final List<String> moPubImpressionTrackerUrls,
             @NonNull final String moPubClickTrackerUrl,
             @NonNull final String adUnitId,
             @NonNull final BaseNativeAd baseNativeAd,
@@ -71,7 +76,7 @@ public NativeAd(@NonNull final Context context,
         mAdUnitId = adUnitId;
 
         mImpressionTrackers = new HashSet<String>();
-        mImpressionTrackers.add(moPubImpressionTrackerUrl);
+        mImpressionTrackers.addAll(moPubImpressionTrackerUrls);
         mImpressionTrackers.addAll(baseNativeAd.getImpressionTrackers());
 
         mClickTrackers = new HashSet<String>();
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
index 8ecc0be3..61574877 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
index 92a6e2d5..010df1e0 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
index 50db633a..6a8500e6 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeAdViewHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -12,9 +16,8 @@
 import java.util.WeakHashMap;
 
 /**
- * @deprecated As of release 2.4, use {@link MoPubStaticNativeAdRenderer} instead
+ * Use {@link MoPubStaticNativeAdRenderer} instead
  */
-@Deprecated
 class NativeAdViewHelper {
     private NativeAdViewHelper() {
     }
@@ -30,9 +33,8 @@ private NativeAdViewHelper() {
      * up its state before associating with a new {@link NativeAd}
      */
     static private final WeakHashMap<View, NativeAd> sNativeAdMap =
-            new WeakHashMap<View, NativeAd>();
+            new WeakHashMap<>();
 
-    @Deprecated
     @NonNull
     static View getAdView(@Nullable View convertView,
             @Nullable final ViewGroup parent,
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
index 045f7ebe..92d3ade2 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeClickHandler.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
index ff8ad9fd..aec0c6ca 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeErrorCode.java
@@ -1,8 +1,15 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
 
-public enum NativeErrorCode {
+import com.mopub.mobileads.MoPubError;
+
+public enum NativeErrorCode implements MoPubError {
+    AD_SUCCESS("ad successfully loaded."),
     EMPTY_AD_RESPONSE("Server returned empty response."),
     INVALID_RESPONSE("Unable to parse response from server."),
     IMAGE_DOWNLOAD_FAILURE("Unable to download images associated with ad."),
@@ -23,7 +30,7 @@
 
     private final String message;
 
-    private NativeErrorCode(String message) {
+    NativeErrorCode(String message) {
         this.message = message;
     }
 
@@ -32,4 +39,18 @@ private NativeErrorCode(String message) {
     public final String toString() {
         return message;
     }
+
+    @Override
+    public int getIntCode() {
+        switch (this) {
+            case NETWORK_TIMEOUT:
+                return ER_TIMEOUT;
+            case NATIVE_ADAPTER_NOT_FOUND:
+                return ER_ADAPTER_NOT_FOUND;
+            case AD_SUCCESS:
+                return ER_SUCCESS;
+        }
+        return ER_UNSPECIFIED;
+    }
+
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
index c01a329b..a92d2267 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeImageHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
index 53c1f451..63927de4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeRendererHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
index e8854584..9a92c4ea 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/NativeUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
index d8ba46c6..4a68cb1b 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PlacementData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
index 631e36fa..2caf25b5 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningRequest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
index c26b1e33..575bc2db 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
index cb654731..c4f72456 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/PositioningUrlGenerator.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
index bbb2ec59..c62077fe 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/RequestParameters.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.location.Location;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
index adb73b44..0ca7158f 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ServerPositioningSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
index ff220440..0a893986 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/SpinningProgressView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
index a2b90337..e0881934 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
@@ -257,7 +261,9 @@ public void prepare(@NonNull final View view) { }
     public void clear(@NonNull final View view) { }
 
     @Override
-    public void destroy() { }
+    public void destroy() {
+        invalidate();
+    }
 
     // Event Handlers
     /**
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
index 2a5f538b..2dfb20b8 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/StaticNativeViewHolder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
index 4b9df9ee..35790f24 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TaskManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
index 9d4d588b..e5d2aa2d 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/TimestampWrapper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.os.SystemClock;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
index 9350f0e7..1efef473 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/ViewBinder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
index 92fec2e1..49bd4eb4 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/factories/CustomEventNativeFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads.factories;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 885bf2e7..9fcf8684 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -1,8 +1,12 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 dependencies {
     api project(':mopub-sdk:mopub-sdk-native-static')
-    api 'com.google.android.exoplayer:exoplayer:r2.4.4'
+    api 'com.google.android.exoplayer:exoplayer:2.8.3'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
index d7d4a135..4800a060 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/HttpDiskCompositeDataSource.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
index 43de589e..b965e378 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaLayout.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
index 4b0f9efb..6adf2ac8 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewBinder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
index 54121e39..3457a2cf 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MediaViewHolder.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index fa9b3ee3..dc1c22ae 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -14,6 +18,7 @@
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.Utils;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
 import com.mopub.mobileads.VastManager;
 import com.mopub.mobileads.VastTracker;
@@ -36,6 +41,7 @@
 import java.util.Map;
 import java.util.Set;
 
+import static com.mopub.common.DataKeys.EVENT_DETAILS;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT;
 import static com.mopub.common.DataKeys.IMPRESSION_MIN_VISIBLE_PX;
 import static com.mopub.common.DataKeys.IMPRESSION_VISIBLE_MS;
@@ -48,7 +54,7 @@
 import static com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
 
 public class MoPubCustomEventVideoNative extends CustomEventNative {
-
+    private MoPubVideoNativeAd videoNativeAd;
     @Override
     protected void loadNativeAd(@NonNull final Context context,
             @NonNull final CustomEventNativeListener customEventNativeListener,
@@ -61,6 +67,8 @@ protected void loadNativeAd(@NonNull final Context context,
             return;
         }
 
+        final Object eventDetailsObject = localExtras.get(EVENT_DETAILS);
+
         final VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         if (!videoResponseHeaders.hasValidHeaders()) {
             customEventNativeListener.onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
@@ -77,7 +85,7 @@ protected void loadNativeAd(@NonNull final Context context,
         }
 
         final String clickTrackingUrlFromHeader = (String) clickTrackingUrlFromHeaderObject;
-        final MoPubVideoNativeAd videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
+        videoNativeAd = new MoPubVideoNativeAd(context, (JSONObject) json,
                 customEventNativeListener, videoResponseHeaders,
                 clickTrackingUrlFromHeader);
         try {
@@ -87,6 +95,14 @@ protected void loadNativeAd(@NonNull final Context context,
         }
     }
 
+    @Override
+    protected void onInvalidate(){
+        if (videoNativeAd == null) {
+            return;
+        }
+        videoNativeAd.invalidate();
+    }
+
     public static class MoPubVideoNativeAd extends VideoNativeAd
             implements VastManager.VastManagerListener, NativeVideoProgressRunnable.ProgressListener,
             AudioManager.OnAudioFocusChangeListener {
@@ -265,6 +281,9 @@ void loadAd() throws IllegalArgumentException {
             preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
                 @Override
                 public void onImagesCached() {
+                    if(isInvalidated()) {
+                        return;
+                    }
                     mVastManager.prepareVastVideoConfiguration(getVastVideo(),
                             MoPubVideoNativeAd.this,
                             null,
@@ -273,6 +292,9 @@ public void onImagesCached() {
 
                 @Override
                 public void onImagesFailedToCache(final NativeErrorCode errorCode) {
+                    if(isInvalidated()) {
+                        return;
+                    }
                     mCustomEventNativeListener.onNativeAdFailed(errorCode);
                 }
             });
@@ -550,6 +572,7 @@ public void clear(@NonNull final View view) {
 
         @Override
         public void destroy() {
+            invalidate();
             cleanUpMediaLayout();
             mNativeVideoController.setPlayWhenReady(false);
             mNativeVideoController.release(this);
@@ -674,6 +697,7 @@ void applyState(@NonNull final VideoState videoState, boolean transitionToFullSc
                     mVastVideoConfig.handleError(mContext, null, 0);
                     mNativeVideoController.setAppAudioEnabled(false);
                     mMediaLayout.setMode(MediaLayout.Mode.IMAGE);
+                    // Only log the failed to play event when the video has not started
                     break;
                 case CREATED:
                 case LOADING:
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
index 551e6417..e639e757 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubVideoNativeAdRenderer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index 9b23cb26..7819ccf1 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
index 8a8768f5..efff2679 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.content.Context;
@@ -20,8 +24,9 @@
 import com.google.android.exoplayer2.ExoPlayerFactory;
 import com.google.android.exoplayer2.LoadControl;
 import com.google.android.exoplayer2.PlaybackParameters;
+import com.google.android.exoplayer2.Player;
+import com.google.android.exoplayer2.PlayerMessage;
 import com.google.android.exoplayer2.Renderer;
-import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
 import com.google.android.exoplayer2.extractor.Extractor;
 import com.google.android.exoplayer2.extractor.ExtractorsFactory;
@@ -43,7 +48,7 @@
 import com.mopub.mobileads.VastTracker;
 import com.mopub.mobileads.VastVideoConfig;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
-import com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
+import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.network.TrackingRequest;
 
 import java.lang.ref.WeakReference;
@@ -56,7 +61,7 @@
  * Wrapper class around the {@link ExoPlayer} to provide a nice interface into the player along
  * with some helper methods. This class is not thread safe.
  */
-public class NativeVideoController implements ExoPlayer.EventListener, OnAudioFocusChangeListener {
+public class NativeVideoController extends ExoPlayer.DefaultEventListener implements OnAudioFocusChangeListener {
 
     public interface Listener {
         void onStateChanged(boolean playWhenReady, int playbackState);
@@ -66,11 +71,11 @@
     @NonNull private final static Map<Long, NativeVideoController> sManagerMap =
             new HashMap<Long, NativeVideoController>(4);
 
-    public static final int STATE_READY = ExoPlayer.STATE_READY;
-    public static final int STATE_BUFFERING = ExoPlayer.STATE_BUFFERING;
-    public static final int STATE_IDLE = ExoPlayer.STATE_IDLE;
-    public static final int STATE_ENDED = ExoPlayer.STATE_ENDED;
-    public static final int STATE_CLEARED = ExoPlayer.STATE_ENDED + 1;
+    public static final int STATE_READY = Player.STATE_READY;
+    public static final int STATE_BUFFERING = Player.STATE_BUFFERING;
+    public static final int STATE_IDLE = Player.STATE_IDLE;
+    public static final int STATE_ENDED = Player.STATE_ENDED;
+    public static final int STATE_CLEARED = Player.STATE_ENDED + 1;
 
     public static final long RESUME_FINISHED_THRESHOLD = 750L;
 
@@ -97,7 +102,7 @@
     private boolean mPlayWhenReady;
     private boolean mAudioEnabled;
     private boolean mAppAudioEnabled;
-    private int mPreviousExoPlayerState = ExoPlayer.STATE_IDLE;
+    private int mPreviousExoPlayerState = Player.STATE_IDLE;
     private boolean mExoPlayerStateStartedFromIdle = true;
 
     /**
@@ -288,9 +293,6 @@ public void release(@NonNull final Object owner) {
         }
     }
 
-    @Override
-    public void onTimelineChanged(Timeline timeline, Object manifest) {}
-
     @Override
     public void onTracksChanged(TrackGroupArray trackGroups, TrackSelectionArray trackSelections) {}
 
@@ -310,9 +312,9 @@ public void onPlayerStateChanged(final boolean playWhenReady, final int newState
         }
 
         mPreviousExoPlayerState = newState;
-        if (newState == ExoPlayer.STATE_READY) {
+        if (newState == Player.STATE_READY) {
             mExoPlayerStateStartedFromIdle = false;
-        } else if (newState == ExoPlayer.STATE_IDLE) {
+        } else if (newState == Player.STATE_IDLE) {
             mExoPlayerStateStartedFromIdle = true;
         }
 
@@ -348,9 +350,6 @@ public void onPlayerError(ExoPlaybackException e) {
         mNativeVideoProgressRunnable.requestStop();
     }
 
-    @Override
-    public void onPositionDiscontinuity() {}
-
     @Override
     public void onPlaybackParametersChanged(PlaybackParameters playbackParameters) {}
 
@@ -395,14 +394,17 @@ private void preparePlayer() {
         if (mExoPlayer == null) {
             mVideoRenderer = new MediaCodecVideoRenderer(mContext,
                     MediaCodecSelector.DEFAULT, 0, mHandler, null, 10);
-            mAudioRenderer = new MediaCodecAudioRenderer(MediaCodecSelector.DEFAULT);
+            mAudioRenderer = new MediaCodecAudioRenderer(mContext, MediaCodecSelector.DEFAULT);
             final DefaultAllocator allocator = new DefaultAllocator(true, BUFFER_SEGMENT_SIZE,
                     BUFFER_SEGMENT_COUNT);
 
+            final DefaultLoadControl.Builder defaultLoadControlBuilder = new DefaultLoadControl.Builder();
+            defaultLoadControlBuilder.setAllocator(allocator);
+
             mExoPlayer = mMoPubExoPlayerFactory.newInstance(
-                    new Renderer[] {mVideoRenderer, mAudioRenderer},
+                    new Renderer[]{mVideoRenderer, mAudioRenderer},
                     new DefaultTrackSelector(),
-                    new DefaultLoadControl(allocator));
+                    defaultLoadControlBuilder.createDefaultLoadControl());
 
             mNativeVideoProgressRunnable.setExoPlayer(mExoPlayer);
             mExoPlayer.addListener(this);
@@ -421,13 +423,10 @@ public DataSource createDataSource() {
                 }
             };
 
-            final MediaSource mediaSource = new ExtractorMediaSource(
-                    Uri.parse(mVastVideoConfig.getNetworkMediaFileUrl()),
-                    dataSourceFactory,
-                    extractorsFactory,
-                    mHandler,
-                    null
-            );
+            final ExtractorMediaSource.Factory extractorMediaSourceFactory = new ExtractorMediaSource.Factory(dataSourceFactory);
+            extractorMediaSourceFactory.setExtractorsFactory(extractorsFactory);
+
+            final MediaSource mediaSource = extractorMediaSourceFactory.createMediaSource(Uri.parse(mVastVideoConfig.getNetworkMediaFileUrl()));
 
             mExoPlayer.prepare(mediaSource);
             mNativeVideoProgressRunnable.startRepeating(50);
@@ -450,24 +449,43 @@ private void setExoAudio() {
     }
 
     private void setExoAudio(final float volume) {
-        Preconditions.checkArgument(volume >= 0.0f && volume <= 1.0f);
-        if (mExoPlayer == null) {
+        final ExoPlayer exoPlayer = mExoPlayer;
+        final MediaCodecAudioRenderer audioRenderer = mAudioRenderer;
+
+        if (exoPlayer == null || audioRenderer == null) {
             return;
         }
 
-        mExoPlayer.sendMessages(
-                new ExoPlayer.ExoPlayerMessage(mAudioRenderer, C.MSG_SET_VOLUME, volume)
-        );
+        final PlayerMessage playerMessage =  exoPlayer.createMessage(audioRenderer);
+
+        if (playerMessage == null) {
+            MoPubLog.d("ExoPlayer.createMessage returned null.");
+            return;
+        }
+
+        playerMessage.setType(C.MSG_SET_VOLUME)
+                .setPayload(volume)
+                .send();
     }
 
     private void setExoSurface(@Nullable final Surface surface) {
-        if (mExoPlayer == null) {
+        final ExoPlayer exoPlayer = mExoPlayer;
+        final MediaCodecVideoRenderer videoRenderer = mVideoRenderer;
+
+        if (exoPlayer == null || videoRenderer == null) {
+            return;
+        }
+
+        final PlayerMessage playerMessage =  exoPlayer.createMessage(videoRenderer);
+
+        if (playerMessage == null) {
+            MoPubLog.d("ExoPlayer.createMessage returned null.");
             return;
         }
 
-        mExoPlayer.sendMessages(
-            new ExoPlayer.ExoPlayerMessage(mVideoRenderer, C.MSG_SET_SURFACE, surface)
-        );
+        playerMessage.setType(C.MSG_SET_SURFACE)
+                .setPayload(surface)
+                .send();
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index eb4684a3..ef6ef131 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
index acd46822..e0b4b437 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
index c9fdc4fa..fe56fb89 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply from: '../shared-build.gradle'
 
 dependencies {
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
index 60014242..abf65399 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/common/MoPubReward.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java
new file mode 100644
index 00000000..eb5ee100
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/AdLoaderRewardedVideo.java
@@ -0,0 +1,89 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.Preconditions;
+import com.mopub.network.AdLoader;
+import com.mopub.network.AdResponse;
+import com.mopub.network.TrackingRequest;
+
+import java.util.Collections;
+import java.util.List;
+
+class AdLoaderRewardedVideo extends AdLoader {
+    private boolean mImpressionTrackerFired;
+    private boolean mClickTrackerFired;
+
+    AdLoaderRewardedVideo(@NonNull String url,
+                          @NonNull AdFormat adFormat,
+                          @NonNull String adUnitId,
+                          @NonNull Context context,
+                          @NonNull Listener listener) {
+        super(url, adFormat, adUnitId, context, listener);
+
+        mImpressionTrackerFired = false;
+        mClickTrackerFired = false;
+    }
+
+    @Nullable
+    String getFailurl() {
+        if (mMultiAdResponse != null) {
+            return mMultiAdResponse.getFailURL();
+        }
+        return null;
+    }
+
+    @NonNull
+    List<String> getImpressionUrls() {
+        if (mLastDeliveredResponse != null) {
+            return mLastDeliveredResponse.getImpressionTrackingUrls();
+        }
+        return Collections.emptyList();
+    }
+
+    @Nullable
+    String getClickUrl() {
+        if (mLastDeliveredResponse != null) {
+            return mLastDeliveredResponse.getClickTrackingUrl();
+        }
+        return null;
+    }
+
+    @Nullable
+    AdResponse getLastDeliveredResponse() {
+        return mLastDeliveredResponse;
+    }
+
+    void trackImpression(@NonNull Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (mLastDeliveredResponse == null || mImpressionTrackerFired) {
+            return;
+        }
+
+        mImpressionTrackerFired = true;
+        TrackingRequest.makeTrackingHttpRequest(
+                getImpressionUrls(),
+                context);
+    }
+
+    void trackClick(@NonNull Context context) {
+        Preconditions.checkNotNull(context);
+
+        if (mLastDeliveredResponse == null || mClickTrackerFired) {
+            return;
+        }
+
+        mClickTrackerFired = true;
+        TrackingRequest.makeTrackingHttpRequest(
+                getClickUrl(),
+                context);
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
index c9b15d97..8967a1a1 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
index 9858e2a9..57dacf22 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedPlayable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 /**
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
index f3ecfad6..aac8d2bd 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/CustomEventRewardedVideo.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
index 7298bf8c..2009886e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedAd.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -164,6 +168,10 @@ public void onInterstitialClicked() {
             MoPubRewardedVideoManager.onRewardedVideoClicked(mCustomEventClass, getAdNetworkId());
         }
 
+        @Override
+        public void onInterstitialImpression() {
+        }
+
         @Override
         public void onLeaveApplication() {
         }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
index 963ec1cb..0174b54c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedPlayable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
index ca70f8b3..71e32940 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideo.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
index bf5a12f8..51a99e20 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoListener.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
@@ -14,7 +18,7 @@
 
     /**
      * Called when the adUnitId has loaded. At this point you should be able to call
-     * {@link com.mopub.common.MoPub#showRewardedVideo(String)} to show the video.
+     * {@link com.mopub.mobileads.MoPubRewardedVideos#showRewardedVideo(String)} to show the video.
      */
     public void onRewardedVideoLoadSuccess(@NonNull String adUnitId);
 
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index bfb8edf2..88866a61 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -10,7 +14,6 @@
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
-import com.mopub.common.AdFormat;
 import com.mopub.common.AdReport;
 import com.mopub.common.AdUrlGenerator;
 import com.mopub.common.ClientMetadata;
@@ -28,12 +31,8 @@
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.ReflectionTarget;
 import com.mopub.common.util.Utils;
-import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
-import com.mopub.network.Networking;
-import com.mopub.network.TrackingRequest;
-import com.mopub.volley.RequestQueue;
 import com.mopub.volley.VolleyError;
 
 import org.json.JSONException;
@@ -76,7 +75,6 @@
     @NonNull private final Handler mCallbackHandler;
     @NonNull private WeakReference<Activity> mMainActivity;
     @NonNull private final Context mContext;
-    @NonNull private final AdRequestStatusMapping mAdRequestStatus;
     @NonNull private final RewardedAdData mRewardedAdData;
     @Nullable private MoPubRewardedVideoListener mVideoListener;
 
@@ -86,25 +84,7 @@
     @NonNull private final Handler mCustomEventTimeoutHandler;
     @NonNull private final Map<String, Runnable> mTimeoutMap;
 
-    public static class RewardedVideoRequestListener implements AdRequest.Listener {
-        public final String adUnitId;
-        private final MoPubRewardedVideoManager mVideoManager;
-
-        public RewardedVideoRequestListener(MoPubRewardedVideoManager videoManager, String adUnitId) {
-            this.adUnitId = adUnitId;
-            this.mVideoManager = videoManager;
-        }
-
-        @Override
-        public void onSuccess(final AdResponse response) {
-            mVideoManager.onAdSuccess(response, adUnitId);
-        }
-
-        @Override
-        public void onErrorResponse(final VolleyError volleyError) {
-            mVideoManager.onAdError(volleyError, adUnitId);
-        }
-    }
+    @NonNull private final RewardedAdsLoaders rewardedAdsLoaders;
 
     public static final class RequestParameters {
         @Nullable public final String mKeywords;
@@ -143,17 +123,17 @@ public RequestParameters(@Nullable final String keywords,
 
 
     private MoPubRewardedVideoManager(@NonNull Activity mainActivity, MediationSettings... mediationSettings) {
-        mMainActivity = new WeakReference<Activity>(mainActivity);
+        mMainActivity = new WeakReference<>(mainActivity);
         mContext = mainActivity.getApplicationContext();
         mRewardedAdData = new RewardedAdData();
         mCallbackHandler = new Handler(Looper.getMainLooper());
-        mGlobalMediationSettings = new HashSet<MediationSettings>();
+        mGlobalMediationSettings = new HashSet<>();
         MoPubCollections.addAllNonNull(mGlobalMediationSettings, mediationSettings);
-        mInstanceMediationSettings = new HashMap<String, Set<MediationSettings>>();
+        mInstanceMediationSettings = new HashMap<>();
         mCustomEventTimeoutHandler = new Handler();
-        mTimeoutMap = new HashMap<String, Runnable>();
+        mTimeoutMap = new HashMap<>();
 
-        mAdRequestStatus = new AdRequestStatusMapping();
+        rewardedAdsLoaders = new RewardedAdsLoaders(this);
 
         sCustomEventSharedPrefs =
                 SharedPreferencesHelper.getSharedPreferences(mContext, CUSTOM_EVENT_PREF_NAME);
@@ -228,9 +208,9 @@ public static synchronized void init(@NonNull Activity mainActivity, MediationSe
     }
 
     @ReflectionTarget
-    public static void updateActivity(@NonNull Activity activity) {
+    public static void updateActivity(@Nullable Activity activity) {
         if (sInstance != null) {
-            sInstance.mMainActivity = new WeakReference<Activity>(activity);
+            sInstance.mMainActivity = new WeakReference<>(activity);
         } else {
             logErrorNotInitialized();
         }
@@ -307,7 +287,7 @@ public static void setVideoListener(@Nullable MoPubRewardedVideoListener listene
     }
 
     /**
-     * Builds an AdRequest for the given adUnitId and adds it to the singleton RequestQueue. This
+     * Builds a MultiAdRequest for the given adUnitId and adds it to the singleton RequestQueue. This
      * method will not make a new request if there is already a video loading for this adUnitId.
      *
      * @param adUnitId MoPub adUnitId String
@@ -335,7 +315,7 @@ public static void loadVideo(@NonNull final String adUnitId,
             return;
         }
 
-        if (sInstance.mAdRequestStatus.canPlay(adUnitId)) {
+        if (sInstance.rewardedAdsLoaders.canPlay(adUnitId)) {
             MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
             "unit %s. This ad unit already finished loading and is ready to show.", adUnitId));
             postToInstance(new Runnable() {
@@ -353,7 +333,7 @@ public void run() {
         // If any instance MediationSettings have been specified, update the internal map.
         // Note: This always clears the MediationSettings for the ad unit, whether or not any
         // MediationSettings have been provided.
-        final Set<MediationSettings> newInstanceMediationSettings = new HashSet<MediationSettings>();
+        final Set<MediationSettings> newInstanceMediationSettings = new HashSet<>();
         MoPubCollections.addAllNonNull(newInstanceMediationSettings, mediationSettings);
         sInstance.mInstanceMediationSettings.put(adUnitId, newInstanceMediationSettings);
 
@@ -370,34 +350,34 @@ public void run() {
                 .withLocation(requestParameters == null ? null : requestParameters.mLocation)
                 .generateUrlString(Constants.HOST);
 
-        loadVideo(adUnitId, adUrlString);
+        loadVideo(adUnitId, adUrlString, null);
     }
 
-    private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlString) {
+    private static void loadVideo(@NonNull String adUnitId, @NonNull String adUrlString, @Nullable MoPubErrorCode errorCode) {
         if (sInstance == null) {
             logErrorNotInitialized();
             return;
         }
 
-        if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+        sInstance.fetchAd(adUnitId, adUrlString, errorCode);
+    }
+
+    private void fetchAd(@NonNull String adUnitId, @NonNull String adUrlString, @Nullable MoPubErrorCode errorCode) {
+        if (rewardedAdsLoaders.isLoading(adUnitId)) {
+            MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
+                    "unit %s. A request is already pending.", adUnitId));
+            return;
+        }
+        if (rewardedAdsLoaders.isLoading(adUnitId)) {
             MoPubLog.d(String.format(Locale.US, "Did not queue rewarded ad request for ad " +
                     "unit %s. A request is already pending.", adUnitId));
             return;
         }
 
         // Issue MoPub request
-        final AdRequest request = new AdRequest(
-                adUrlString,
-                AdFormat.REWARDED_VIDEO,
-                adUnitId,
-                sInstance.mContext,
-                new RewardedVideoRequestListener(sInstance, adUnitId)
-        );
-        final RequestQueue requestQueue = Networking.getRequestQueue(sInstance.mContext);
-        requestQueue.add(request);
-        sInstance.mAdRequestStatus.markLoading(adUnitId);
         MoPubLog.d(String.format(Locale.US,
                 "Loading rewarded ad request for ad unit %s with URL %s", adUnitId, adUrlString));
+        rewardedAdsLoaders.loadNextAd(mContext, adUnitId, adUrlString, errorCode);
     }
 
     public static boolean hasVideo(@NonNull String adUnitId) {
@@ -443,10 +423,9 @@ public static void showVideo(@NonNull String adUnitId,
                     sInstance.mRewardedAdData.getMoPubReward(adUnitId));
             sInstance.mRewardedAdData.updateAdUnitToCustomDataMapping(adUnitId, customData);
             sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(adUnitId);
-            sInstance.mAdRequestStatus.markPlayed(adUnitId);
             customEvent.show();
         } else {
-            if (sInstance.mAdRequestStatus.isLoading(adUnitId)) {
+            if (sInstance.rewardedAdsLoaders.isLoading(adUnitId)) {
                 MoPubLog.d("Rewarded ad is not ready to be shown yet.");
             } else {
                 MoPubLog.d("No rewarded ad loading or loaded.");
@@ -458,7 +437,7 @@ public static void showVideo(@NonNull String adUnitId,
 
     private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewardedAd customEvent) {
         return (sInstance != null
-                && sInstance.mAdRequestStatus.canPlay(adUnitId)
+                && sInstance.rewardedAdsLoaders.canPlay(adUnitId)
                 && customEvent != null
                 && customEvent.isReady());
     }
@@ -474,7 +453,7 @@ private static boolean isPlayable(String adUnitId, @Nullable CustomEventRewarded
             return sInstance.mRewardedAdData.getAvailableRewards(adUnitId);
         } else {
             logErrorNotInitialized();
-            return Collections.<MoPubReward>emptySet();
+            return Collections.emptySet();
         }
     }
 
@@ -494,17 +473,10 @@ public static void selectReward(@NonNull String adUnitId, @NonNull MoPubReward s
     }
 
     ///// Ad Request / Response methods /////
-    private void onAdSuccess(AdResponse adResponse, String adUnitId) {
-        mAdRequestStatus.markLoaded(adUnitId,
-                adResponse.getFailoverUrl(),
-                adResponse.getImpressionTrackingUrl(),
-                adResponse.getClickTrackingUrl());
-
-        Integer timeoutMillis = adResponse.getAdTimeoutMillis();
-        if (timeoutMillis == null || timeoutMillis <= 0) {
-            timeoutMillis = DEFAULT_LOAD_TIMEOUT;
-        }
+    void onAdSuccess(AdResponse adResponse) {
+        final String adUnitId = adResponse.getAdUnitId();
 
+        Integer timeoutMillis = adResponse.getAdTimeoutMillis(DEFAULT_LOAD_TIMEOUT);
         final String customEventClassName = adResponse.getCustomEventClassName();
 
         if (customEventClassName == null) {
@@ -529,7 +501,7 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
                             CustomEventRewardedAd.class);
 
             // Put important data into localExtras...
-            final Map<String, Object> localExtras = new TreeMap<String, Object>();
+            final Map<String, Object> localExtras = new TreeMap<>();
             localExtras.put(DataKeys.AD_UNIT_ID_KEY, adUnitId);
             localExtras.put(DataKeys.REWARDED_AD_CURRENCY_NAME_KEY,
                     adResponse.getRewardedVideoCurrencyName());
@@ -581,7 +553,7 @@ private void onAdSuccess(AdResponse adResponse, String adUnitId) {
 
                 // Don't go through the ordinary failover process since we have
                 // no activity for the failover to use.
-                mAdRequestStatus.markFail(adUnitId);
+                rewardedAdsLoaders.markFail(adUnitId);
                 return;
             }
 
@@ -632,7 +604,7 @@ public void run() {
         }
     }
 
-    private void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitId) {
+    void onAdError(@NonNull VolleyError volleyError, @NonNull String adUnitId) {
         MoPubErrorCode errorCode = MoPubErrorCode.INTERNAL_ERROR;
         if (volleyError instanceof MoPubNetworkError) {
             MoPubNetworkError err = (MoPubNetworkError) volleyError;
@@ -693,11 +665,8 @@ private void failover(@NonNull final String adUnitId, @NonNull final MoPubErrorC
         Preconditions.checkNotNull(adUnitId);
         Preconditions.checkNotNull(errorCode);
 
-        final String failoverUrl = mAdRequestStatus.getFailoverUrl(adUnitId);
-        mAdRequestStatus.markFail(adUnitId);
-
-        if (failoverUrl != null && !errorCode.equals(EXPIRED)) {
-            loadVideo(adUnitId, failoverUrl);
+        if (rewardedAdsLoaders.hasMoreAds(adUnitId) && !errorCode.equals(EXPIRED)) {
+            loadVideo(adUnitId, "", errorCode);
         } else if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoLoadFailure(adUnitId, errorCode);
         }
@@ -727,6 +696,7 @@ void onRewardedVideoLoadSuccess(@NonNull final Class<T> customEventClass, @NonNu
             @Override
             protected void forEach(@NonNull final String moPubId) {
                 sInstance.cancelTimeouts(moPubId);
+                sInstance.rewardedAdsLoaders.creativeDownloadSuccess(moPubId);
                 if (sInstance.mVideoListener != null) {
                     sInstance.mVideoListener.onRewardedVideoLoadSuccess(moPubId);
                 }
@@ -771,10 +741,7 @@ private static void onRewardedVideoStartedAction(@NonNull final String adUnitId)
         if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoStarted(adUnitId);
         }
-        TrackingRequest.makeTrackingHttpRequest(
-                sInstance.mAdRequestStatus.getImpressionTrackerUrlString(adUnitId),
-                sInstance.mContext);
-        sInstance.mAdRequestStatus.clearImpressionUrl(adUnitId);
+        sInstance.rewardedAdsLoaders.onRewardedVideoStarted(adUnitId, sInstance.mContext);
     }
 
     public static <T extends CustomEventRewardedAd>
@@ -795,7 +762,9 @@ public void run() {
                     onRewardedVideoPlaybackErrorAction(currentlyShowingAdUnitId, errorCode);
                 }
             });
+            sInstance.rewardedAdsLoaders.markFail(currentlyShowingAdUnitId);
         }
+        sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(null);
     }
 
     private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
@@ -834,10 +803,7 @@ private static void onRewardedVideoClickedAction(@NonNull final String adUnitId)
             sInstance.mVideoListener.onRewardedVideoClicked(adUnitId);
         }
 
-        TrackingRequest.makeTrackingHttpRequest(
-                sInstance.mAdRequestStatus.getClickTrackerUrlString(adUnitId),
-                sInstance.mContext);
-        sInstance.mAdRequestStatus.clearClickUrl(adUnitId);
+        sInstance.rewardedAdsLoaders.onRewardedVideoClicked(adUnitId, sInstance.mContext);
     }
 
     public static <T extends CustomEventRewardedAd>
@@ -867,6 +833,8 @@ private static void onRewardedVideoClosedAction(@NonNull final String adUnitId)
         if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoClosed(adUnitId);
         }
+        // remove adloader from map
+        sInstance.rewardedAdsLoaders.markPlayed(adUnitId);
     }
 
     public static <T extends CustomEventRewardedAd>
@@ -932,7 +900,7 @@ public void run() {
                         sInstance.mRewardedAdData.getLastShownMoPubReward(customEventClass),
                         moPubReward);
 
-                Set<String> rewardedIds = new HashSet<String>();
+                Set<String> rewardedIds = new HashSet<>();
                 if (TextUtils.isEmpty(currentlyShowingAdUnitId)) {
                     final Set<String> moPubIds = sInstance.mRewardedAdData.getMoPubIdsForAdNetwork(
                             customEventClass, thirdPartyId);
@@ -1018,9 +986,9 @@ static RewardedAdData getRewardedAdData() {
     @Deprecated
     @VisibleForTesting
     @Nullable
-    static AdRequestStatusMapping getAdRequestStatusMapping() {
+    static RewardedAdsLoaders getAdRequestStatusMapping() {
         if (sInstance != null) {
-            return sInstance.mAdRequestStatus;
+            return sInstance.rewardedAdsLoaders;
         }
         return null;
     }
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
index 6b7c7fcd..3f1729ef 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideos.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
index c9cec328..b17ce665 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdData.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java
new file mode 100644
index 00000000..08004b21
--- /dev/null
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedAdsLoaders.java
@@ -0,0 +1,150 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
+import com.mopub.network.AdLoader;
+import com.mopub.network.AdResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.VolleyError;
+
+import java.util.HashMap;
+import java.util.Map;
+
+class RewardedAdsLoaders {
+    @NonNull private final HashMap<String, AdLoaderRewardedVideo> mAdUnitToAdLoader;
+    @NonNull private final MoPubRewardedVideoManager moPubRewardedVideoManager;
+
+    public class RewardedVideoRequestListener implements AdLoader.Listener {
+        public final String adUnitId;
+
+        RewardedVideoRequestListener(String adUnitId) {
+            this.adUnitId = adUnitId;
+        }
+
+        @Override
+        public void onSuccess(final AdResponse response) {
+            moPubRewardedVideoManager.onAdSuccess(response);
+        }
+
+        @Override
+        public void onErrorResponse(final VolleyError volleyError) {
+            moPubRewardedVideoManager.onAdError(volleyError, adUnitId);
+        }
+    }
+
+    RewardedAdsLoaders(@NonNull final MoPubRewardedVideoManager rewardedVideoManager){
+        moPubRewardedVideoManager  = rewardedVideoManager;
+        mAdUnitToAdLoader = new HashMap<>();
+    }
+
+    @Nullable
+    Request<?> loadNextAd(@NonNull Context context,
+                          @NonNull String adUnitId,
+                          @NonNull String adUrlString,
+                          @Nullable MoPubErrorCode errorCode) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(context);
+
+        AdLoaderRewardedVideo adLoader = mAdUnitToAdLoader.get(adUnitId);
+
+        if (adLoader == null || !adLoader.hasMoreAds()) {
+            adLoader = new AdLoaderRewardedVideo(adUrlString,
+                                                 AdFormat.REWARDED_VIDEO,
+                                                 adUnitId,
+                                                 context,
+                                                 new RewardedVideoRequestListener(adUnitId));
+            mAdUnitToAdLoader.put(adUnitId, adLoader);
+        }
+
+        return adLoader.loadNextAd(errorCode);
+    }
+
+    boolean isLoading(@NonNull final String adUnitId) {
+        return mAdUnitToAdLoader.containsKey(adUnitId) && mAdUnitToAdLoader.get(adUnitId).isRunning();
+    }
+
+    void markFail(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        if (mAdUnitToAdLoader.containsKey(adUnitId)) {
+            mAdUnitToAdLoader.remove(adUnitId);
+        }
+    }
+
+    void markPlayed(@NonNull final String adUnitId) {
+        Preconditions.checkNotNull(adUnitId);
+
+        if (mAdUnitToAdLoader.containsKey(adUnitId)) {
+            mAdUnitToAdLoader.remove(adUnitId);
+        }
+    }
+
+    void onRewardedVideoStarted(@NonNull String adUnitId, @NonNull Context context) {
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(context);
+
+        AdLoaderRewardedVideo loaderRewardedVideo = mAdUnitToAdLoader.get(adUnitId);
+        if (loaderRewardedVideo == null) {
+            return;
+        }
+
+        loaderRewardedVideo.trackImpression(context);
+    }
+
+    void onRewardedVideoClicked(@NonNull String adUnitId, @NonNull Context context){
+        Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(context);
+
+        AdLoaderRewardedVideo loaderRewardedVideo = mAdUnitToAdLoader.get(adUnitId);
+        if (loaderRewardedVideo == null) {
+            return;
+        }
+
+        loaderRewardedVideo.trackClick(context);
+    }
+
+    boolean canPlay(@NonNull final String adUnitId) {
+        AdLoaderRewardedVideo loaderRewardedVideo = mAdUnitToAdLoader.get(adUnitId);
+        if (loaderRewardedVideo == null) {
+            return false;
+        }
+
+        AdResponse adResponse =  loaderRewardedVideo.getLastDeliveredResponse();
+        return adResponse != null;
+    }
+
+    boolean hasMoreAds(@NonNull final String adUnitId) {
+        AdLoaderRewardedVideo loaderRewardedVideo = mAdUnitToAdLoader.get(adUnitId);
+        return loaderRewardedVideo != null && loaderRewardedVideo.hasMoreAds();
+    }
+
+    void creativeDownloadSuccess(@NonNull final String adUnitId){
+        AdLoaderRewardedVideo loaderRewardedVideo = mAdUnitToAdLoader.get(adUnitId);
+        if (loaderRewardedVideo == null) {
+            return;
+        }
+
+        loaderRewardedVideo.creativeDownloadSuccess();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    void clearMapping() {
+        mAdUnitToAdLoader.clear();
+    }
+
+    @Deprecated
+    @VisibleForTesting
+    Map<String, AdLoaderRewardedVideo> getLoadersMap(){
+        return mAdUnitToAdLoader;
+    }
+}
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
index 5855cc69..60736f6b 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidActivity.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
index 530b41b0..46ea5487 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedMraidCountdownRunnable.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
index 6b0c4ecd..e37d954c 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVastVideoInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
index 506d38b7..2df62afc 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoBroadcastReceiver.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
index c9ab5b46..ec41f640 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
index 021b4532..fa03bcac 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandler.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
index ad96fbdc..0137bb6e 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidController.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 
@@ -85,16 +89,19 @@ public void create(@NonNull Context context, CloseableLayout closeableLayout) {
 
     public void pause() {
         stopRunnables();
+        super.pause(false);
     }
 
     @Override
     public void resume() {
+        super.resume();
         startRunnables();
     }
 
     @Override
     public void destroy() {
         stopRunnables();
+        super.destroy();
     }
 
     @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
index 32bf7b3f..c5e6b2de 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedMraidInterstitial.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.Context;
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
index 4599a175..f48b0c77 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mraid/RewardedPlayableBroadcastReceiver.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.content.Context;
diff --git a/mopub-sdk/project.properties b/mopub-sdk/project.properties
index 8e4bc5fd..568f4e7b 100644
--- a/mopub-sdk/project.properties
+++ b/mopub-sdk/project.properties
@@ -1,3 +1,7 @@
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
 # This file is automatically generated by Android Tools.
 # Do not modify this file -- YOUR CHANGES WILL BE ERASED!
 #
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 1fd54c43..a56b569d 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply plugin: 'com.android.library'
 apply plugin: 'com.novoda.bintray-release'
 
diff --git a/mopub-sdk/settings.gradle b/mopub-sdk/settings.gradle
index b44b682c..f79d4d81 100644
--- a/mopub-sdk/settings.gradle
+++ b/mopub-sdk/settings.gradle
@@ -1 +1,5 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 rootProject.name = 'mopub-sdk'
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index d808ee9b..b160e71b 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 apply plugin: 'com.android.library'
 
 repositories {
@@ -10,19 +14,18 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '5.2.0'
+project.version = '5.4.0'
 
 android {
-    compileSdkVersion 26
-    buildToolsVersion '26.0.2'
+    compileSdkVersion 28
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 62
+        versionCode 64
         versionName version
         minSdkVersion 16
-        targetSdkVersion 26
+        targetSdkVersion 28
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
@@ -75,6 +78,6 @@ android {
 }
 
 dependencies {
-    api 'com.android.support:support-v4:26.1.0'
-    api 'com.android.support:support-annotations:26.1.0'
+    api 'com.android.support:support-v4:28.0.0'
+    api 'com.android.support:support-annotations:28.0.0'
 }
diff --git a/mopub-sdk/src/main/AndroidManifest.xml b/mopub-sdk/src/main/AndroidManifest.xml
index 438e00cd..786dbbe6 100644
--- a/mopub-sdk/src/main/AndroidManifest.xml
+++ b/mopub-sdk/src/main/AndroidManifest.xml
@@ -3,9 +3,6 @@
     package="com.mopub.mobileads"
     android:versionCode="1"
     android:versionName="1.0">
-    <uses-sdk
-        android:minSdkVersion="9"
-        android:targetSdkVersion="26"/>
     <application/>
 </manifest>
 
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
deleted file mode 100644
index d6608042..00000000
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ /dev/null
@@ -1,3 +0,0 @@
-fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=5.2.0+kit
-fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
index 0f91d2e6..6a89954a 100644
--- a/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
+++ b/mopub-sdk/src/test/java/com/mopub/TestSdkHelper.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub;
 
 import android.os.Build;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
index ea9e121b..c7ac3b68 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdReportTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
@@ -23,7 +27,7 @@
 import java.util.Locale;
 
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -67,17 +71,17 @@ public void testToString_shouldProperlyConstructParametersTextFile() {
                         "ad_type : interstitial\n" +
                         "ad_size : {480, 320}\n";
 
-        stub(mockClientMetadata.getSdkVersion()).toReturn("1.15.2.2");
-        stub(mockAdResponse.getDspCreativeId()).toReturn("");
-        stub(mockClientMetadata.getDeviceModel()).toReturn("android");
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(Locale.US);
-        stub(mockClientMetadata.getMoPubIdentifier()).toReturn(new MoPubIdentifier(context));
+        when(mockClientMetadata.getSdkVersion()).thenReturn("1.15.2.2");
+        when(mockAdResponse.getDspCreativeId()).thenReturn("");
+        when(mockClientMetadata.getDeviceModel()).thenReturn("android");
+        when(mockClientMetadata.getDeviceLocale()).thenReturn(Locale.US);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
 
-        stub(mockAdResponse.getNetworkType()).toReturn("unknown");
-        stub(mockAdResponse.getTimestamp()).toReturn(now.getTime());
-        stub(mockAdResponse.getAdType()).toReturn("interstitial");
-        stub(mockAdResponse.getWidth()).toReturn(480);
-        stub(mockAdResponse.getHeight()).toReturn(320);
+        when(mockAdResponse.getNetworkType()).thenReturn("unknown");
+        when(mockAdResponse.getTimestamp()).thenReturn(now.getTime());
+        when(mockAdResponse.getAdType()).thenReturn("interstitial");
+        when(mockAdResponse.getWidth()).thenReturn(480);
+        when(mockAdResponse.getHeight()).thenReturn(320);
 
         subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
         assertThat(subject.toString()).isEqualTo(expectedParameters);
@@ -99,16 +103,16 @@ public void constructor_shouldHandleInvalidAdConfigurationValues() {
                         "ad_type : null\n" +
                         "ad_size : {0, 0}\n";
 
-        stub(mockClientMetadata.getSdkVersion()).toReturn(null);
-        stub(mockAdResponse.getDspCreativeId()).toReturn(null);
-        stub(mockClientMetadata.getDeviceLocale()).toReturn(null);
-        stub(mockAdResponse.getNetworkType()).toReturn(null);
-        stub(mockClientMetadata.getMoPubIdentifier()).toReturn(new MoPubIdentifier(context));
+        when(mockClientMetadata.getSdkVersion()).thenReturn(null);
+        when(mockAdResponse.getDspCreativeId()).thenReturn(null);
+        when(mockClientMetadata.getDeviceLocale()).thenReturn(null);
+        when(mockAdResponse.getNetworkType()).thenReturn(null);
+        when(mockClientMetadata.getMoPubIdentifier()).thenReturn(new MoPubIdentifier(context));
 
-        stub(mockAdResponse.getTimestamp()).toReturn(-1L);
-        stub(mockAdResponse.getAdType()).toReturn(null);
-        stub(mockAdResponse.getWidth()).toReturn(null);
-        stub(mockAdResponse.getHeight()).toReturn(null);
+        when(mockAdResponse.getTimestamp()).thenReturn(-1L);
+        when(mockAdResponse.getAdType()).thenReturn(null);
+        when(mockAdResponse.getWidth()).thenReturn(null);
+        when(mockAdResponse.getHeight()).thenReturn(null);
 
         subject = new AdReport("testAdUnit", mockClientMetadata, mockAdResponse);
         assertThat(subject.toString()).isEqualTo(expectedParameters);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java b/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
index 9aa48037..2c0f5605 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/AdvancedBiddingTokensTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index d0b8e502..32275e20 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
index 28019855..92567cca 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CacheServiceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
index 45e8ae8b..6a391704 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/ClientMetadataTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
index aab8e358..d68a7f45 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CloseableLayoutTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java b/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
index 0ea85803..a62e948c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/CreativeOrientationTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import org.junit.Test;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
index ac6fcc64..18dc8e8d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/DoubleTimeTrackerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 9d114c35..2f20265b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
index 2ae35eba..b745f196 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/LocationServiceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
index eb92fcc5..99563d13 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubBrowserTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.webkit.CookieSyncManager;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
index 869a0d60..0d6b85b3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubHttpUrlConnectionTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
@@ -38,7 +42,7 @@ public void setUp() throws Exception {
     public void getHttpUrlConnection_shouldReturnHttpUrlConnectionWithUserAgent() throws Exception {
         HttpURLConnection urlConnection = MoPubHttpUrlConnection.getHttpUrlConnection(url);
 
-        List<String> userAgentHeaders = urlConnection.getRequestProperties().get("User-Agent");
+        List<String> userAgentHeaders = urlConnection.getRequestProperties().get("user-agent");
         assertThat(userAgentHeaders).containsExactly(userAgent);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 8d0a3f25..d6136a08 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
@@ -8,6 +12,7 @@
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.privacy.SyncRequest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.CustomEventRewardedVideo;
@@ -31,7 +36,9 @@
 import org.powermock.core.classloader.annotations.PrepareForTest;
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -100,6 +107,7 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         mockStatic(MoPubRewardedVideoManager.class);
 
         MoPub.resetBrowserAgent();
+        AsyncTasks.setExecutor(new RoboExecutorService());
     }
 
     @After
@@ -154,6 +162,7 @@ public void initializeSdk_withRewardedVideo_shouldCallMoPubRewardedVideoManager(
                 new SdkConfiguration.Builder(INIT_ADUNIT).build(),
                 mockInitializationListener);
 
+        ShadowLooper.runUiThreadTasks();
         verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
@@ -165,6 +174,7 @@ public void initializeSdk_withRewardedVideo_withMediationSettings_shouldCallMoPu
                 new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(mMediationSettings).build(),
                 mockInitializationListener);
 
+        ShadowLooper.runUiThreadTasks();
         verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
@@ -189,6 +199,7 @@ public void initializeSdk_withRewardedVideo_withNetworksToInit_shouldCallMoPubRe
                         .build(),
                 mockInitializationListener);
 
+        ShadowLooper.runUiThreadTasks();
         verify(mockInitializationListener).onInitializationFinished();
         List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
         classList.add(TestCustomEventRewardedVideo.class);
@@ -263,6 +274,7 @@ public void initializeSdk_withOneAdvancedBidder_shouldSetAdvancedBiddingTokens()
 
         MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
+        ShadowLooper.runUiThreadTasks();
         assertThat(MoPub.getAdvancedBiddingTokensJson(mActivity)).isEqualTo(
                 "{\"AdvancedBidderTestClassName\":{\"token\":\"AdvancedBidderTestClassToken\"}}");
     }
@@ -275,6 +287,7 @@ public void initializeSdk_withMultipleInitializations_shouldSetAdvancedBiddingTo
 
         MoPub.initializeSdk(mActivity, sdkConfiguration, null);
 
+        ShadowLooper.runUiThreadTasks();
         assertThat(MoPub.getAdvancedBiddingTokensJson(mActivity)).isEqualTo(
                 "{\"AdvancedBidderTestClassName\":{\"token\":\"AdvancedBidderTestClassToken\"}}");
 
@@ -293,6 +306,7 @@ public void initializeSdk_withMultipleInitializations_shouldSetAdvancedBiddingTo
     public void initializeSdk_withCallbackSet_shouldCallCallback() throws Exception {
         MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
                 INIT_ADUNIT).build(), mockInitializationListener);
+        ShadowLooper.runUiThreadTasks();
 
         verify(mockInitializationListener).onInitializationFinished();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
index 2e021297..aae84356 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/PreconditionsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index 0331d892..ca8945bc 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.net.Uri;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index c4c936aa..597e9210 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index a11feb12..221c37e6 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.Nullable;
@@ -192,7 +196,7 @@ public void doInBackground_withNativeBrowserAgent_withMoPubNativeBrowserScheme_s
     private void setupMockHttpUrlConnection(final int responseCode,
             @Nullable final String absolutePathUrl) throws IOException {
         when(mockHttpUrlConnection.getResponseCode()).thenReturn(responseCode);
-        when(mockHttpUrlConnection.getHeaderField("Location")).thenReturn(absolutePathUrl);
+        when(mockHttpUrlConnection.getHeaderField("location")).thenReturn(absolutePathUrl);
     }
 
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
similarity index 97%
rename from mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
rename to mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
index 4a903940..83cbdd6e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/VisibilityTrackerTest.java
@@ -1,4 +1,8 @@
-package com.mopub.nativeads;
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common;
 
 import android.app.Activity;
 import android.graphics.Rect;
@@ -9,9 +13,9 @@
 import android.view.ViewTreeObserver;
 import android.view.Window;
 
+import com.mopub.common.VisibilityTracker.TrackingInfo;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
-import com.mopub.nativeads.VisibilityTracker.TrackingInfo;
 
 import org.fest.util.Lists;
 import org.junit.Before;
@@ -31,8 +35,8 @@
 import java.util.WeakHashMap;
 
 import static android.view.ViewTreeObserver.OnPreDrawListener;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
-import static com.mopub.nativeads.VisibilityTracker.VisibilityTrackerListener;
+import static com.mopub.common.VisibilityTracker.VisibilityChecker;
+import static com.mopub.common.VisibilityTracker.VisibilityTrackerListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
@@ -368,7 +372,7 @@ public void addView_shouldClearViewAfterNumAccesses() {
         assertThat(trackedViews).hasSize(1);
     }
 
-    static View createViewMock(final int visibility,
+    public static View createViewMock(final int visibility,
             final int visibleWidth,
             final int visibleHeight,
             final int viewWidth,
diff --git a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
index 8afeb57d..fbd4b705 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/VolleyRequestMatcher.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common;
 
 import android.support.annotation.Nullable;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
index 47440e0a..96699be7 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
index 857c5370..661e4ea4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
index 3555f355..9466e1df 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
index dd963b95..8019acba 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogLayoutTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
index 9d49474d..a96a37a3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
index dd507068..bc1a4285 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index fcddfac4..89e6ee5b 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
@@ -8,6 +12,7 @@
 
 import com.mopub.common.GpsHelper;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
@@ -24,7 +29,9 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.RuntimeEnvironment;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 import org.robolectric.annotation.Config;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Calendar;
 
@@ -61,6 +68,7 @@ public void setup() {
         context = activity.getApplicationContext();
         idChangeListener = mock(MoPubIdentifier.AdvertisingIdChangeListener.class);
         initializationListener = mock(SdkInitializationListener.class);
+        AsyncTasks.setExecutor(new RoboExecutorService());
     }
 
     @After
@@ -94,6 +102,8 @@ public void constructor_withExpiredOldId_withNoAmazon_withNoGoogle_shouldCallOnI
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
 
         subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
 
         AdvertisingId oldId = oldIdClientCaptor.getValue();
@@ -113,6 +123,8 @@ public void constructor_withNotExpiredOldid_withNoAmazon_withNoGoogle_shouldCall
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
 
         subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
 
         AdvertisingId idData = subject.getAdvertisingInfo();
@@ -131,6 +143,7 @@ public void constructor_withExpiredId_withNoListenerSet_shouldNotCrash_shouldRot
         AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
 
         subject = new MoPubIdentifier(context);
+        ShadowLooper.runUiThreadTasks();
         subject.setIdChangeListener(null);
         AdvertisingId newId = subject.getAdvertisingInfo();
 
@@ -149,6 +162,8 @@ public void constructor_withGoogle_withNoAmazon_withDoNotTrackTrue_shoulUseGoogl
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
 
         subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
 
         AdvertisingId oldId = oldIdClientCaptor.getValue();
@@ -174,6 +189,8 @@ public void constructor_withAmazon_withNoGoogle_shoulUseAmazonId() throws Except
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
 
         subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
 
         AdvertisingId oldId = oldIdClientCaptor.getValue();
@@ -198,6 +215,8 @@ public void constructor_withGoogle_withNoAmazon_withDoNotTrackFalse_shoulUseGoog
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
 
         subject = new MoPubIdentifier(context, idChangeListener);
+
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
 
         AdvertisingId oldId = oldIdClientCaptor.getValue();
@@ -270,6 +289,7 @@ public void setAdvertisingInfo_whenCalledTwice_shouldCallInitializationListenerO
 
         subject.setAdvertisingInfo(adId1);
 
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
         verify(initializationListener).onInitializationFinished();
         AdvertisingId storedId = MoPubIdentifier.readIdFromStorage(context);
@@ -352,6 +372,7 @@ public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withNoGoogle_wi
 
         subject.refreshAdvertisingInfoBackgroundThread();
 
+        ShadowLooper.runUiThreadTasks();
         verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
         AdvertisingId oldId = oldIdClientCaptor.getValue();
         AdvertisingId newId = newIdClientCaptor.getValue();
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
index bc2e5450..40800457 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoDataTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
index 86a3fa65..da4cf1a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
@@ -5,6 +9,7 @@
 import android.os.SystemClock;
 
 import com.mopub.common.ClientMetadata;
+import com.mopub.common.MoPub;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.network.MoPubRequestQueue;
@@ -34,7 +39,7 @@
 @RunWith(SdkTestRunner.class)
 @PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @Config(constants = BuildConfig.class)
-@PrepareForTest({ClientMetadata.class, Networking.class, AdvertisingId.class})
+@PrepareForTest({ClientMetadata.class, Networking.class, AdvertisingId.class, MoPub.class})
 public class PersonalInfoManagerTest {
 
     private static int DEFAULT_TIME_MS = 300000;
@@ -73,6 +78,9 @@ public void setUp() {
         when(Networking.getRequestQueue(any(Context.class))).thenReturn(mockRequestQueue);
         when(Networking.getScheme()).thenReturn("https");
 
+        PowerMockito.mockStatic(MoPub.class);
+        when(MoPub.isSdkInitialized()).thenReturn(true);
+
         subject = new PersonalInfoManager(activity, "adunit", null);
         personalInfoData = subject.getPersonalInfoData();
         mockConsentStatusChangeListener = mock(ConsentStatusChangeListener.class);
@@ -588,6 +596,35 @@ public void shouldMakeSyncRequest_withMostMajorCases_shouldReturnCorrectBoolean(
         assertThat(actual).isFalse();
     }
 
+    @Test
+    public void requestSync_withSdkInitialized_withShouldMakeSyncRequestTrue_shouldAddSyncRequestToRequestQueue() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.requestSync(true);
+
+        verify(mockRequestQueue).add(any(SyncRequest.class));
+    }
+
+    @Test
+    public void requestSync_withSdkNotInitialized_shouldDoNothing() {
+        personalInfoData.setGdprApplies(true);
+        when(MoPub.isSdkInitialized()).thenReturn(false);
+
+        subject.requestSync(true);
+
+        verifyZeroInteractions(mockRequestQueue);
+    }
+
+    @Test
+    public void requestSyncNoParams_withSdkNotInitialized_shouldAddSyncRequestToRequestQueue() {
+        personalInfoData.setGdprApplies(true);
+        when(MoPub.isSdkInitialized()).thenReturn(false);
+
+        subject.requestSync();
+
+        verify(mockRequestQueue).add(any(SyncRequest.class));
+    }
+
     @Test
     public void serverOverrideListener_onForceExplicitNo_withNullMessage_shouldChangeStatusToNo() {
         personalInfoData.setGdprApplies(true);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
index abd1f3e7..1c609379 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.privacy;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index a4d42c0a..9b8255a4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -1,5 +1,11 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.test.support;
 
+import android.support.annotation.NonNull;
+
 import com.mopub.common.CacheService;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
@@ -51,6 +57,7 @@ public SdkTestRunner(Class<?> testClass) throws InitializationError {
     }
 
     @Override
+    @NonNull
     protected Class<? extends TestLifecycle> getTestLifecycleClass() {
         return TestLifeCycleWithInjection.class;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
index 49df0663..e5dd719c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.test.support;
 
 import android.net.Uri;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
index 2d44074a..c96904ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/AsyncTasksTest.java
@@ -1,10 +1,10 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.os.AsyncTask;
-import android.os.Handler;
-import android.os.Looper;
-
-import com.mopub.mobileads.test.support.ThreadUtils;
 
 import org.junit.Before;
 import org.junit.Test;
@@ -13,8 +13,8 @@
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.concurrent.Executor;
+import java.util.concurrent.Semaphore;
 
-import static junit.framework.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.spy;
@@ -48,33 +48,19 @@ public void safeExecuteOnExecutor_withNullAsyncTask_shouldThrowNullPointerExcept
         AsyncTasks.safeExecuteOnExecutor(null, "hello");
     }
 
-
     @Test
-    public void safeExecuteOnExecutor_runningOnABackgroundThread_shouldThrowIllegalStateException() throws Exception {
-        ensureFastFailWhenTaskIsRunOnBackgroundThread();
-    }
-
-    private void ensureFastFailWhenTaskIsRunOnBackgroundThread() {
+    public void safeExecuteOnExecutor_runningOnABackgroundThread_shouldStartAsyncTaskOnUiThread() throws Exception {
+        final Semaphore semaphore = new Semaphore(0);
         new Thread(new Runnable() {
             @Override
             public void run() {
-                try {
-                    AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
-
-                    Handler handler = new Handler(Looper.getMainLooper());
-                    handler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            fail("Should have thrown IllegalStateException");
-                        }
-                    });
-                } catch (IllegalStateException exception) {
-                    // pass
-                }
+                AsyncTasks.safeExecuteOnExecutor(asyncTask, "hello");
+                semaphore.release();
             }
         }).start();
 
-        ThreadUtils.pause(10);
+        semaphore.acquire();
         ShadowLooper.runUiThreadTasks();
+        verify(asyncTask).executeOnExecutor(any(Executor.class), eq("hello"));
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
index 18932043..69c75670 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DeviceUtilsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.Manifest;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
index 283038e0..f4e2b157 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DipsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
index fa129c0d..82bd5bb5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
index cffb7ace..c3a2a2ef 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/FilesTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
@@ -13,7 +17,7 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 @RunWith(RobolectricTestRunner.class)
 public class FilesTest {
@@ -95,7 +99,7 @@ public void createDirectory_withExternalStoragePath_withoutRelevantPermission_sh
     @Test
     public void intLength_whenFileHasLengthLessThanMaxInt_shouldReturnThatLength() throws Exception {
         File file = mock(File.class);
-        stub(file.length()).toReturn(1234L);
+        when(file.length()).thenReturn(1234L);
 
         int length = Files.intLength(file);
 
@@ -105,7 +109,7 @@ public void intLength_whenFileHasLengthLessThanMaxInt_shouldReturnThatLength() t
     @Test
     public void intLength_whenFileHasLengthGreaterThanMaxInt_shouldReturnMaxInt() throws Exception {
         File file = mock(File.class);
-        stub(file.length()).toReturn(Integer.MAX_VALUE + 100L);
+        when(file.length()).thenReturn(Integer.MAX_VALUE + 100L);
 
         int length = Files.intLength(file);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index 52737211..2511eb3f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
@@ -29,7 +33,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
@@ -102,11 +106,11 @@ public void deviceCanHandleIntent_whenActivityCanResolveIntent_shouldReturnTrue(
         List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
         resolveInfos.add(new ResolveInfo());
 
-        stub(context.getPackageManager()).toReturn(packageManager);
+        when(context.getPackageManager()).thenReturn(packageManager);
         Intent specificIntent = new Intent();
         specificIntent.setData(Uri.parse("specificIntent:"));
 
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
+        when(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).thenReturn(resolveInfos);
 
         assertThat(Intents.deviceCanHandleIntent(context, specificIntent)).isTrue();
     }
@@ -119,13 +123,13 @@ public void deviceCanHandleIntent_whenActivityCanNotResolveIntent_shouldReturnFa
         List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
         resolveInfos.add(new ResolveInfo());
 
-        stub(context.getPackageManager()).toReturn(packageManager);
+        when(context.getPackageManager()).thenReturn(packageManager);
         Intent specificIntent = new Intent();
         specificIntent.setData(Uri.parse("specificIntent:"));
 
         Intent otherIntent = new Intent();
         otherIntent.setData(Uri.parse("other:"));
-        stub(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).toReturn(resolveInfos);
+        when(packageManager.queryIntentActivities(eq(specificIntent), eq(0))).thenReturn(resolveInfos);
 
         assertThat(Intents.deviceCanHandleIntent(context, otherIntent)).isFalse();
     }
@@ -272,6 +276,64 @@ public void launchApplicationUrl_withResolvableUrl_shouldOpenActivity() throws E
         assertThat(startedActivity).isNotNull();
     }
 
+    @Test
+    public void launchApplicationUrl_withUnresolvableMarketUrl_shouldResolveToPlayStoreURLandOpenActivity() throws Exception {
+        // unresolvable "market://" intent url
+        final String marketUrl = "market://details?id=com.mopub.simpleadsdemo";
+
+        // resolvable Play Store url
+        final String playStoreUrl = "https://play.google.com/store/apps/details?id=com.mopub.simpleadsdemo";
+        makeUrlResolvable(playStoreUrl);
+
+        // use unresolvable "market://" url, but should start browser activity with resolvable Play Store url
+        Intents.launchApplicationUrl(activityContext, Uri.parse(marketUrl));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
+    @Test
+    public void launchApplicationUrl_withResolvableMarketUrl_shouldOpenPlayStoreActivity() throws Exception {
+        final String marketUrl = "market://details?id=com.mopub.simpleadsdemo";
+        makeUrlResolvable(marketUrl);
+        // unresolvable equivalent Play Store url ("https://play.google.com/store/apps/details?id=com.mopub.simpleadsdemo")
+
+        // use resolvable "market://" url
+        Intents.launchApplicationUrl(activityContext, Uri.parse(marketUrl));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
+    @Test
+    public void launchApplicationUrl_withUnresolvableMarketUrl_shouldResolveToAmazonStoreURLandOpenActivity() throws Exception {
+        // unresolvable "amzn://" intent url
+        final String storeUrl = "amzn://apps/android?p=com.mopub.simpleadsdemo";
+
+        // resolvable Amazon Store url
+        final String amazonStoreUrl = "http://www.amazon.com/gp/mas/dl/android?p=com.mopub.simpleadsdemo";
+        makeUrlResolvable(amazonStoreUrl);
+
+        // use unresolvable "market://" url, but should start browser activity with resolvable Play Store url
+        Intents.launchApplicationUrl(activityContext, Uri.parse(storeUrl));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
+    @Test
+    public void launchApplicationUrl_withResolvableMarketUrl_shouldOpenAmazonStoreActivity() throws Exception {
+        final String storeUrl = "amzn://apps/android?p=com.mopub.simpleadsdemo";
+        makeUrlResolvable(storeUrl);
+        // unresolvable equivalent Play Store url ("https://play.google.com/store/apps/details?id=com.mopub.simpleadsdemo")
+
+        // use resolvable "market://" url
+        Intents.launchApplicationUrl(activityContext, Uri.parse(storeUrl));
+        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+
+        assertThat(startedActivity).isNotNull();
+    }
+
     @Test(expected = IntentNotResolvableException.class)
     public void launchApplicationUrl_withUnresolvableUrl_shouldThrowIntentNotResolvableException() throws Exception {
         final String url = "url_to_installed_app";
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
index 3c4bbd4f..199fae48 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/JsonTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 26a4300f..82de1db5 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
index f58f8c37..b93e06e3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/NumbersTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
index 781d273a..536b950d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ReflectionTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
index 495e44e6..f522b69e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/StreamsTest.java
@@ -1,10 +1,21 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
+import android.graphics.Bitmap;
+
+import com.mopub.common.util.test.support.TestDrawables;
+import com.mopub.mobileads.test.support.FileUtils;
+
+import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 
 import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -16,9 +27,17 @@
 
 @RunWith(RobolectricTestRunner.class)
 public class StreamsTest {
+
+    @Before
+    public void setUp() throws Exception {
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        TestDrawables.EXPECTED_FILE.getBitmap().compress(Bitmap.CompressFormat.JPEG, 100, baos);
+        FileUtils.writeBytesToFile(baos.toByteArray(), "/tmp/expectedFile.jpg");
+    }
+
     @Test
     public void copyStream_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
+        File inFile = new File("/tmp/expectedFile.jpg");
         FileInputStream in = new FileInputStream(inFile);
         File tempFile = File.createTempFile("foo", "bar");
         FileOutputStream out = new FileOutputStream(tempFile);
@@ -30,7 +49,7 @@ public void copyStream_shouldCopyContentsOfOneStreamToAnother() throws Exception
 
     @Test
     public void copyStream_withMaxBytes_belowThreshold_shouldCopyContentsOfOneStreamToAnother() throws Exception {
-        File inFile = new File("etc/expectedFile.jpg");
+        File inFile = new File("/tmp/expectedFile.jpg");
         FileInputStream in = new FileInputStream(inFile);
         File tempFile = File.createTempFile("foo", "bar");
         FileOutputStream out = new FileOutputStream(tempFile);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
index 0bb01118..4124c6f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/UtilsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
index a9eb7a6b..040e415e 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ViewsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
index 81810ae6..29bd8e5f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/VisibilityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util;
 
 import android.view.View;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
index 585c5323..be56c6fb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowAsyncTasks.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util.test.support;
 
 import android.os.AsyncTask;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
index 7ae73832..da6c183c 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowMoPubHttpUrlConnection.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util.test.support;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index 651f0990..1858111a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util.test.support;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
index 154d12d3..9e20a750 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDateAndTime.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util.test.support;
 
 import com.mopub.common.util.DateAndTime;
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java
new file mode 100644
index 00000000..d21724ca
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestDrawables.java
@@ -0,0 +1,51 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.common.util.test.support;
+
+import android.content.Context;
+import android.graphics.Bitmap;
+import android.graphics.BitmapFactory;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
+import android.util.Base64;
+import android.util.DisplayMetrics;
+
+import com.mopub.common.util.Dips;
+
+public enum TestDrawables {
+    EXPECTED_FILE("");
+
+    private final String encodedString;
+
+    // We cache a bitmap, NOT a drawable. Drawables maintain view specific properties,
+    // such as their bounds, and caching them causes problems when the same drawable is used by
+    // multiple views.
+    private Bitmap cachedBitmap;
+
+    TestDrawables(final String encodedString) {
+        this.encodedString = encodedString;
+    }
+
+    public Drawable createDrawable(final Context context) {
+        Bitmap bitmap = getBitmap();
+        BitmapDrawable drawable = new BitmapDrawable(context.getResources(), bitmap);
+
+        final DisplayMetrics displayMetrics = context.getResources().getDisplayMetrics();
+        drawable.setTargetDensity(Dips.asIntPixels(displayMetrics.xdpi, context));
+        return drawable;
+    }
+
+    public Bitmap getBitmap() {
+        if (cachedBitmap == null) {
+            byte[] rawImageData = Base64.decode(encodedString, Base64.DEFAULT);
+            cachedBitmap = BitmapFactory.decodeByteArray(rawImageData, 0, rawImageData.length);
+        }
+        return cachedBitmap;
+    }
+
+    public void clear() {
+        cachedBitmap = null;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
index 49d11389..16f6b4f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/TestMethodBuilderFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.common.util.test.support;
 
 import com.mopub.common.factories.MethodBuilderFactory;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
index cd34ddc2..aafa6254 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertGestureListenerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -20,7 +24,7 @@
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.GOING_RIGHT;
 import static com.mopub.mobileads.AdAlertGestureListener.ZigZagState.UNSET;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -41,7 +45,7 @@
 
     @Before
     public void setup() {
-        stub(mockView.getContext()).toReturn(mockContext);
+        when(mockView.getContext()).thenReturn(mockContext);
 
         subject = new AdAlertGestureListener(mockView, mockAdReport);
 
@@ -54,21 +58,21 @@ public void setup() {
 
     @Test
     public void constructor_shouldSetThresholdToOneThirdOfViewsWidth() throws Exception {
-        stub(mockView.getWidth()).toReturn(150);
+        when(mockView.getWidth()).thenReturn(150);
         subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(50);
     }
 
     @Test
     public void constructor_whenViewWidthIsWiderThanThreeTimesMaxThreshold_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(500);
+        when(mockView.getWidth()).thenReturn(500);
         subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
     }
 
     @Test
     public void constructor_whenViewWidthIs0_shouldSetThresholdTo100() throws Exception {
-        stub(mockView.getWidth()).toReturn(0);
+        when(mockView.getWidth()).thenReturn(0);
         subject = new AdAlertGestureListener(mockView, mockAdReport);
         assertThat(subject.getMinimumDipsInZigZag()).isEqualTo(100);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
index d743e27c..e01ede6f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdAlertReporterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -29,7 +33,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -52,8 +56,8 @@
     public void setup() {
         bitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ARGB_8888);
 
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.getDrawingCache()).toReturn(bitmap);
+        when(mockView.getRootView()).thenReturn(mockView);
+        when(mockView.getDrawingCache()).thenReturn(bitmap);
 
         now = new Date();
         TestDateAndTime.getInstance().setNow(now);
@@ -91,11 +95,11 @@ public void constructor_shouldCreateIntentWithDatestampInSubject() throws Except
     public void constructor_shouldCreateIntentWithImageStringAndParametersAndResponseInBody() throws Exception {
         TextView textView = mock(TextView.class);
         Bitmap sampleBitmap = Bitmap.createBitmap(10, 10, Bitmap.Config.ALPHA_8);
-        stub(textView.getDrawingCache()).toReturn(sampleBitmap);
-        stub(mockView.getRootView()).toReturn(textView);
+        when(textView.getDrawingCache()).thenReturn(sampleBitmap);
+        when(mockView.getRootView()).thenReturn(textView);
 
-        stub(mockAdReport.toString()).toReturn("Ad Report data - this is a long list of newlined params.");
-        stub(mockAdReport.getResponseString()).toReturn("Test ad string.");
+        when(mockAdReport.toString()).thenReturn("Ad Report data - this is a long list of newlined params.");
+        when(mockAdReport.getResponseString()).thenReturn("Test ad string.");
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         emailIntent = subject.getEmailIntent();
@@ -124,7 +128,7 @@ public void constructor_whenAdReportIsNull_shouldReturnEmptyString() throws Exce
     public void constructor_shouldSetCorrectResponseString() throws Exception {
         String expectedResponse = "response";
 
-        stub(mockAdReport.getResponseString()).toReturn(expectedResponse);
+        when(mockAdReport.getResponseString()).thenReturn(expectedResponse);
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
         assertThat(subject.getResponse()).isEqualTo(expectedResponse);
@@ -147,8 +151,8 @@ public void send_shouldCreateEmailChooserIntent() throws Exception {
     @Test
     public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnabled() throws Exception {
         reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(true);
+        when(mockView.getRootView()).thenReturn(mockView);
+        when(mockView.isDrawingCacheEnabled()).thenReturn(true);
 
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
@@ -159,8 +163,8 @@ public void getScreenshot_whenIsDrawingCacheEnabled_shouldKeepDrawingCacheEnable
     @Test
     public void getScreenshot_whenIsDrawingCacheDisabled_shouldKeepDrawingCacheDisabled() throws Exception {
         reset(mockView);
-        stub(mockView.getRootView()).toReturn(mockView);
-        stub(mockView.isDrawingCacheEnabled()).toReturn(false);
+        when(mockView.getRootView()).thenReturn(mockView);
+        when(mockView.isDrawingCacheEnabled()).thenReturn(false);
 
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
@@ -176,7 +180,7 @@ public void getScreenshot_whenViewIsNull_shouldPass() throws Exception {
 
     @Test
     public void getScreenshot_whenRootViewIsNull_shouldPass() throws Exception {
-        stub(mockView.getRootView()).toReturn(null);
+        when(mockView.getRootView()).thenReturn(null);
 
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
@@ -185,7 +189,7 @@ public void getScreenshot_whenRootViewIsNull_shouldPass() throws Exception {
 
     @Test
     public void getScreenshot_whenRootViewDrawingCacheIsNull_shouldPass() throws Exception {
-        stub(mockView.getDrawingCache()).toReturn(null);
+        when(mockView.getDrawingCache()).thenReturn(null);
 
         subject = new AdAlertReporter(mockContext, mockView, mockAdReport);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java
new file mode 100644
index 00000000..e96a888c
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoaderRewardedVideoTest.java
@@ -0,0 +1,260 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.network.AdLoader;
+import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MultiAdRequest;
+import com.mopub.network.MultiAdResponse;
+import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.invocation.InvocationOnMock;
+import org.mockito.stubbing.Answer;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AdLoaderRewardedVideoTest {
+
+    @Mock
+    private AdLoader.Listener mockListener;
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+
+    private Activity activity;
+    private final String adUnitId = "adUnitId";
+
+    private AdLoaderRewardedVideo subject;
+    private TrackingRequest request;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        String url = "test-url";
+        subject = new AdLoaderRewardedVideo(url, AdFormat.REWARDED_VIDEO, adUnitId, activity, mockListener);
+
+        when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
+            @Override
+            public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                Request req = ((Request) invocationOnMock.getArguments()[0]);
+                if (req.getClass().equals(TrackingRequest.class)) {
+                    request = (TrackingRequest) req;
+                    return null;
+                } else if (req.getClass().equals(MultiAdRequest.class)) {
+                    // ignore it
+                    return null;
+                } else {
+                    throw new Exception(String.format("Request object added to RequestQueue can " +
+                            "only be of type TrackingRequest, saw %s instead.", req.getClass()));
+                }
+            }
+        });
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @After
+    public void teardown() {
+    }
+
+    @Test
+    public void loadNextAd_withNoAdResponse_shouldReturnAllEmptyOrNulls() {
+        // validation for basic AdLoader
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+
+        //validation for all functions in AdLoaderRewardedVideo
+        assertThat(subject.getFailurl()).isNull();
+        assertThat(subject.getClickUrl()).isNull();
+        assertThat(subject.getImpressionUrls()).isEmpty();
+        assertThat(subject.getLastDeliveredResponse()).isNull();
+    }
+
+    @Test
+    public void oneAdResponse_shouldSucceed() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject serverJson = createAdResponseJson();
+        JSONObject firstAdJson = serverJson.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject firstAdMetadata = firstAdJson.getJSONObject(ResponseHeader.METADATA.getKey());
+        byte[] body = serverJson.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation for basic AdLoader
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        //validation for all functions in AdLoaderRewardedVideo
+        assertThat(subject.getFailurl()).isEqualTo(serverJson.getString(ResponseHeader.FAIL_URL.getKey()));
+        assertThat(subject.getClickUrl()).isEqualTo(firstAdMetadata.getString(ResponseHeader.CLICK_TRACKING_URL.getKey()));
+        assertThat(subject.getImpressionUrls().get(0)).isEqualTo(firstAdMetadata.getString(ResponseHeader.IMPRESSION_URL.getKey()));
+        assertThat(subject.getLastDeliveredResponse()).isNotNull();
+    }
+
+    @Test
+    public void trackImpression_shouldMakeTrackingRequest() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject serverJson = createAdResponseJson();
+        byte[] body = serverJson.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation for basic AdLoader
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        // call tracking
+        subject.trackImpression(activity);
+        //validation for impression tracking request
+
+        assertThat(request).isNotNull();
+        assertThat(request.getUrl()).isEqualTo("impression_tracking_url");
+    }
+
+    @Test
+    public void trackImpression_withImpressionTrackingUrlsList_shouldIgnoreSingleImpressionUrl_shouldFireListOfImpressionUrls() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        final JSONObject serverJson = createAdResponseJson();
+        serverJson.getJSONArray("ad-responses").getJSONObject(0).getJSONObject("metadata").put(
+                "imptrackers", new JSONArray().put("imp1").put("imp2"));
+        byte[] body = serverJson.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation for basic AdLoader
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        // call tracking
+        subject.trackImpression(activity);
+        //validation for impression tracking request
+
+        assertThat(request).isNotNull();
+        assertThat(request.getUrl()).isEqualTo("imp2");
+    }
+
+    @Test
+    public void trackClick_shouldMakeClickTrackingRequest() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject serverJson = createAdResponseJson();
+        byte[] body = serverJson.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation for basic AdLoader
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        // call tracking
+        subject.trackClick(activity);
+
+        //validation for 'click' tracking request
+        assertThat(request).isNotNull();
+        assertThat(request.getUrl()).isEqualTo("click-url");
+    }
+
+    // -----------  utils  -----------
+    private static Field getPrivateField(final String name) throws NoSuchFieldException {
+        Field declaredField = AdLoader.class.getDeclaredField(name);
+        declaredField.setAccessible(true);
+        return declaredField;
+    }
+
+    private static JSONObject createAdResponseJson() throws JSONException {
+        final String jsonString = "{\n" +
+                "  \"ad-responses\": [\n" +
+                "    {\n" +
+                "      \"content\": \"ad-content-text\",\n" +
+                "      \"metadata\": {\n" +
+                "        \"content-type\": \"text/html; charset=UTF-8\",\n" +
+                "        \"x-ad-timeout-ms\": 0,\n" +
+                "        \"x-adgroupid\": \"b4148ea9ed7b4003b9d7c1e61036e0b1\",\n" +
+                "        \"x-adtype\": \"rewarded_video\",\n" +
+                "        \"x-backgroundcolor\": \"\",\n" +
+                "        \"x-banner-impression-min-ms\": \"\",\n" +
+                "        \"x-banner-impression-min-pixels\": \"\",\n" +
+                "        \"x-before-load-url\": \"\",\n" +
+                "        \"x-browser-agent\": -1,\n" +
+                "        \"x-clickthrough\": \"click-url\",\n" +
+                "        \"x-creativeid\": \"4652bd83d89a40c5a4e276dbf101499f\",\n" +
+                "        \"x-custom-event-class-data\": \"\",\n" +
+                "        \"x-custom-event-class-name\": \"\",\n" +
+                "        \"x-disable-viewability\": 3,\n" +
+                "        \"x-dspcreativeid\": \"\",\n" +
+                "        \"x-format\": \"\",\n" +
+                "        \"x-fulladtype\": \"vast\",\n" +
+                "        \"x-height\": -1,\n" +
+                "        \"x-imptracker\": \"impression_tracking_url\",\n" +
+                "        \"x-interceptlinks\": \"\",\n" +
+                "        \"x-nativeparams\": \"\",\n" +
+                "        \"x-networktype\": \"\",\n" +
+                "        \"x-orientation\": \"l\",\n" +
+                "        \"x-precacherequired\": \"1\",\n" +
+                "        \"x-refreshtime\": 30,\n" +
+                "        \"x-rewarded-currencies\": {\n" +
+                "          \"rewards\": [ { \"name\": \"Coins\", \"amount\": 15 } ]\n" +
+                "        },\n" +
+                "        \"x-rewarded-video-completion-url\": \"\",\n" +
+                "        \"x-rewarded-video-currency-amount\": 10,\n" +
+                "        \"x-rewarded-video-currency-name\": \"Coins\",\n" +
+                "        \"x-vastvideoplayer\": \"\",\n" +
+                "        \"x-video-trackers\": \"\",\n" +
+                "        \"x-video-viewability-trackers\": \"\",\n" +
+                "        \"x-width\": -1\n" +
+                "      }\n" +
+                "    }\n" +
+                "  ],\n" +
+                "  \"x-next-url\": \"next-url\"\n" +
+                "}";
+
+        return new JSONObject(jsonString);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
deleted file mode 100644
index bc66ea83..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdRequestStatusMappingTest.java
+++ /dev/null
@@ -1,129 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.common.test.support.SdkTestRunner;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.annotation.Config;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdRequestStatusMappingTest {
-    private AdRequestStatusMapping subject;
-    private String key1;
-
-    @Before
-    public void setUp() {
-        subject = new AdRequestStatusMapping();
-        key1 = "adUnitId1";
-    }
-
-    @Test
-    public void markFail_shouldNullOutAllValues() {
-        subject.markFail(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoading_shouldNotUpdateUrls_shouldSetIsLoadingTrue() {
-        subject.markLoading(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isTrue();
-    }
-
-    @Test
-    public void markLoaded_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markLoaded_withNullValues_shouldUpdateUrls_shouldSetCanPlayTrue() {
-        subject.markLoaded(key1, null, null, null);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isTrue();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_afterLoaded_shouldKeepExistingUrls_shouldSetCanPlayFalse() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void markPlayed_beforeLoaded_shouldSetUrlsNull_shouldSetCanPlayFalse() {
-        subject.markPlayed(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-    }
-
-    @Test
-    public void clearImpression_shouldResetImpressionUrl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearImpressionUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isEqualTo("click");
-    }
-
-    @Test
-    public void clearclick_shouldResetClickurl() {
-        subject.markLoaded(key1, "fail", "imp", "click");
-        subject.clearClickUrl(key1);
-
-        assertThat(subject.getFailoverUrl(key1)).isEqualTo("fail");
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isEqualTo("imp");
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-    }
-
-    @Test
-    public void allAccessors_withInvalidKey_shouldReturnDefaultsAndNotThrowExceptions() {
-        assertThat(subject.getFailoverUrl(key1)).isNull();
-        assertThat(subject.getImpressionTrackerUrlString(key1)).isNull();
-        assertThat(subject.getClickTrackerUrlString(key1)).isNull();
-
-        assertThat(subject.canPlay(key1)).isFalse();
-        assertThat(subject.isLoading(key1)).isFalse();
-
-        subject.clearImpressionUrl(key1);
-        subject.clearClickUrl(key1);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
index 29dc5dfa..4f3b689b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -21,7 +25,7 @@
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -37,8 +41,8 @@ public void setUp() throws Exception {
         moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
 
         Context context = Robolectric.buildActivity(Activity.class).create().get();
-        stub(moPubView.getContext()).toReturn(context);
-        stub(moPubInterstitialView.getContext()).toReturn(context);
+        when(moPubView.getContext()).thenReturn(context);
+        when(moPubInterstitialView.getContext()).thenReturn(context);
 
         Map<String, String> stringHeaders = new HashMap<String, String>();
         headers = new JSONObject(stringHeaders);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 886f0441..10a4ab9c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.Manifest;
@@ -23,10 +27,11 @@
 import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mobileads.test.support.ThreadUtils;
-import com.mopub.network.AdRequest;
+import com.mopub.network.AdLoader;
 import com.mopub.network.AdResponse;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MultiAdRequest;
 import com.mopub.network.Networking;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.NoConnectionError;
@@ -45,13 +50,13 @@
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLooper;
 
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Map;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyMap;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
@@ -110,9 +115,7 @@ public void setup() throws Exception {
         response = new AdResponse.Builder()
                 .setCustomEventClassName("customEvent")
                 .setClickTrackingUrl("clickUrl")
-                .setImpressionTrackingUrl("impressionUrl")
-                .setRedirectUrl("redirectUrl")
-                .setScrollable(false)
+                .setImpressionTrackingUrls(Arrays.asList("impressionUrl1", "impressionUrl2"))
                 .setDimensions(320, 50)
                 .setAdType("html")
                 .setFailoverUrl("failUrl")
@@ -373,7 +376,8 @@ public void trackImpression_shouldAddToRequestQueue() throws Exception {
         subject.onAdLoadSuccess(response);
         subject.trackImpression();
 
-        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl")));
+        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("impressionUrl2")));
     }
 
     @Test
@@ -400,8 +404,8 @@ public void registerClick_NoAdResponse_shouldNotAddToQueue() {
     @Test
     public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
         subject.cleanup();
-        subject.fetchAd("adUrl");
-        verify(mockRequestQueue, never()).add(any(AdRequest.class));
+        subject.fetchAd("adUrl", null);
+        verify(mockRequestQueue, never()).add(any(MultiAdRequest.class));
     }
 
     @Test
@@ -424,7 +428,7 @@ public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
     @Test
     public void loadNonJavascript_shouldFetchAd() throws Exception {
         String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
+        subject.loadNonJavascript(url, null);
 
         verify(mockRequestQueue).add(argThat(isUrl(url)));
     }
@@ -432,32 +436,23 @@ public void loadNonJavascript_shouldFetchAd() throws Exception {
     @Test
     public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
         String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
+        subject.loadNonJavascript(url, null);
         reset(mockRequestQueue);
-        subject.loadNonJavascript(url);
+        subject.loadNonJavascript(url, null);
 
         verify(mockRequestQueue, never()).add(any(Request.class));
     }
 
     @Test
     public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
-        subject.loadNonJavascript(null);
+        subject.loadNonJavascript(null, null);
         // pass
     }
 
     @Test
-    public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "https://www.guy.com";
-        subject.loadNonJavascript(url);
-        subject.setNotLoading();
-        reset(mockRequestQueue);
-        subject.reload();
+    public void loadFailUrl_shouldLoadFailUrl() {
+        subject.mAdLoader = new AdLoader("failUrl", AdFormat.BANNER, "adUnitId", activity, mock(AdLoader.Listener.class));
 
-        verify(mockRequestQueue).add(argThat(isUrl(url)));
-    }
-
-    @Test
-    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
         subject.onAdLoadSuccess(response);
         subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
 
@@ -680,7 +675,7 @@ public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEv
         String customEventClassName = "customEventClassName";
         subject.loadCustomEvent(null, customEventClassName, serverExtras);
 
-        verify(mockMoPubView, never()).loadCustomEvent(anyString(), anyMap());
+        verify(mockMoPubView, never()).loadCustomEvent(anyString(), any(Map.class));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
index 0fc42a7f..887df792 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
index d6f00d40..ab15224d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -8,6 +12,7 @@
 
 import com.mopub.TestSdkHelper;
 import com.mopub.common.AdReport;
+import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 
 import org.junit.Before;
@@ -68,22 +73,22 @@ public void pluginState_BelowJellybeanMr2_shouldDefaultToOn_shouldAllowToggling(
     }
 
     @Test
-    public void init_shouldSetWebViewScrollability() throws Exception {
-        subject.init(false);
+    public void init_shouldSetWebViewScrollability() {
+        subject.init();
         assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
 
-        subject.init(true);
+        subject.init();
         assertThat(Shadows.shadowOf(subject).getOnTouchListener()).isNotNull();
     }
 
     @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
+    public void loadUrl_shouldAcceptNullParameter() {
         subject.loadUrl(null);
         // pass
     }
 
     @Test
-    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
+    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() {
         String javascriptUrl = "javascript:function() {alert(\"guy\")};";
         subject.loadUrl(javascriptUrl);
 
@@ -91,12 +96,12 @@ public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exceptio
     }
 
     @Test
-    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
+    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() {
         String htmlResponse = "some random html response";
         subject.loadHtmlResponse(htmlResponse);
 
         ShadowWebView.LoadDataWithBaseURL lastLoadData = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
+        assertThat(lastLoadData.baseUrl).isEqualTo("http://" + Constants.HOST + "/");
         assertThat(lastLoadData.data).isEqualTo(htmlResponse);
         assertThat(lastLoadData.mimeType).isEqualTo("text/html");
         assertThat(lastLoadData.encoding).isEqualTo("utf-8");
@@ -104,21 +109,10 @@ public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
     }
 
     @Test
-    public void sendTouchEvent_withScrollingDisabled_shouldSetUserClicked() throws Exception {
-        assertThat(subject.wasClicked()).isFalse();
-
-        subject.initializeOnTouchListener(false);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Exception {
+    public void sendTouchEvent_shouldSetUserClicked() {
         assertThat(subject.wasClicked()).isFalse();
 
-        subject.initializeOnTouchListener(true);
+        subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchUp);
@@ -126,8 +120,8 @@ public void sendTouchEvent_withScrollingEnabled_shouldSetUserClicked() throws Ex
     }
 
     @Test
-    public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
+    public void sendTouchEvent_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() {
+        subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
@@ -149,31 +143,8 @@ public void sendTouchEvent_withScrollingDisabled_withLotsOfRandomMotionEvents_sh
     }
 
     @Test
-    public void sendTouchEvent_withScrollingEnabled_withLotsOfRandomMotionEvents_shouldEventuallySetUserClicked() throws Exception {
-        subject.initializeOnTouchListener(true);
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isFalse();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isFalse();
-
-        onTouchListener.onTouch(subject, touchUp);
-        assertThat(subject.wasClicked()).isTrue();
-
-        onTouchListener.onTouch(subject, touchDown);
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_CANCEL));
-        assertThat(subject.wasClicked()).isTrue();
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-        assertThat(subject.wasClicked()).isTrue();
-    }
-
-    @Test
-    public void onResetClicked_shouldonResetClicked() throws Exception {
-        subject.initializeOnTouchListener(false);
+    public void onResetClicked_shouldonResetClicked() {
+        subject.initializeOnTouchListener();
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
         onTouchListener.onTouch(subject, touchDown);
@@ -185,8 +156,8 @@ public void onResetClicked_shouldonResetClicked() throws Exception {
     }
 
     @Test
-    public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() throws Exception {
-        subject.initializeOnTouchListener(false);
+    public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() {
+        subject.initializeOnTouchListener();
         assertThat(subject.wasClicked()).isFalse();
 
         subject.onResetUserClick();
@@ -194,20 +165,8 @@ public void onResetClicked_whenTouchStateIsUnset_shouldKeepTouchStateUnset() thr
     }
 
     @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsTrue_onTouchListenerShouldAlwaysReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(true);
-
-        View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
-        // ACTION_DOWN is guaranteed to be run before ACTION_MOVE
-        onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_DOWN));
-        boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
-
-        assertThat(shouldConsumeTouch).isFalse();
-    }
-
-    @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTouchListenerShouldReturnTrue() throws Exception {
-        subject.initializeOnTouchListener(false);
+    public void setWebView_whenActionMove_onTouchListenerShouldReturnTrue() {
+        subject.initializeOnTouchListener();
 
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
         boolean shouldConsumeTouch = onTouchListener.onTouch(subject, createMotionEvent(MotionEvent.ACTION_MOVE));
@@ -216,8 +175,8 @@ public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenActionMove_onTo
     }
 
     @Test
-    public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNotActionMove_onTouchListenerShouldReturnFalse() throws Exception {
-        subject.initializeOnTouchListener(false);
+    public void setWebView_whenMotionEventIsNotActionMove_onTouchListenerShouldReturnFalse() {
+        subject.initializeOnTouchListener();
 
         View.OnTouchListener onTouchListener = Shadows.shadowOf(subject).getOnTouchListener();
 
@@ -232,7 +191,7 @@ public void setWebViewScrollingEnabled_whenScrollableIsFalse_whenMotionEventIsNo
     }
 
     @Test
-    public void destroy_shouldRemoveSelfFromParent() throws Exception {
+    public void destroy_shouldRemoveSelfFromParent() {
         ViewGroup parentView = mock(ViewGroup.class);
         ShadowWebView shadow = Shadows.shadowOf(subject);
         shadow.setMyParent(parentView);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index 5a5fff27..e5981919 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
index d7f57390..1cd2ddc5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseVideoPlayerActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
index 619ae104..d840c817 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseWebViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
index a4982e7e..566e19f2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ConversionUrlGeneratorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 13c6c4ae..08e4100a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -29,6 +33,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
@@ -40,6 +45,8 @@
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class CustomEventBannerAdapterTest {
+    private static final int DEFAULT_TIMEOUT_DELAY = CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY;
+
     private CustomEventBannerAdapter subject;
     @Mock
     private MoPubView moPubView;
@@ -55,7 +62,7 @@
 
     @Before
     public void setUp() throws Exception {
-        when(moPubView.getAdTimeoutDelay()).thenReturn(null);
+        when(moPubView.getAdTimeoutDelay(anyInt())).thenReturn(DEFAULT_TIMEOUT_DELAY);
         when(moPubView.getAdWidth()).thenReturn(320);
         when(moPubView.getAdHeight()).thenReturn(50);
 
@@ -75,6 +82,7 @@ public void setUp() throws Exception {
         expectedServerExtras = new HashMap<String, String>();
 
         banner = CustomEventBannerFactory.create(CLASS_NAME);
+        when(banner.isAutomaticImpressionAndClickTrackingEnabled()).thenReturn(true);
     }
 
     @Test
@@ -87,22 +95,7 @@ public void constructor_shouldPopulateLocalExtrasWithAdWidthAndHeight() throws E
     public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
         subject.loadAd();
 
-        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        when(moPubView.getAdTimeoutDelay()).thenReturn(-1);
-
-        subject.loadAd();
-
-        ShadowLooper.idleMainLooper(CustomEventBannerAdapter.DEFAULT_BANNER_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(DEFAULT_TIMEOUT_DELAY - 1);
         verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
@@ -113,7 +106,7 @@ public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateW
 
     @Test
     public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-       when(moPubView.getAdTimeoutDelay()).thenReturn(77);
+       when(moPubView.getAdTimeoutDelay(anyInt())).thenReturn(77000);
 
         subject.loadAd();
 
@@ -263,7 +256,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression(
         View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
         subject.onBannerLoaded(mockHtmlBannerWebView);
 
-        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
 
@@ -279,7 +272,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_shouldSignalMoPubView(
         View view = new View(Robolectric.buildActivity(Activity.class).create().get());
         subject.onBannerLoaded(view);
 
-        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView).trackNativeImpression();
 
@@ -304,7 +297,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionT
         assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
         assertThat(subject.getVisibilityTracker()).isNotNull();
         assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
-        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
         verify(moPubView).pauseAutorefresh();
@@ -326,7 +319,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressi
         assertThat(subject.isVisibilityImpressionTrackingEnabled()).isTrue();
         assertThat(subject.getVisibilityTracker()).isNotNull();
         assertThat(subject.getVisibilityTracker().getBannerVisibilityTrackerListener()).isNotNull();
-        verify(moPubView).nativeAdLoaded();
+        verify(moPubView).creativeDownloaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView, never()).trackNativeImpression();
         verify(moPubView).pauseAutorefresh();
@@ -378,6 +371,24 @@ public void onBannerClicked_shouldRegisterClick() throws Exception {
         verify(moPubView).registerClick();
     }
 
+    @Test
+    public void onBannerImpression_withAutomaticImpressionAndClickTrackingEnabled_shouldDoNothing() {
+        when(banner.isAutomaticImpressionAndClickTrackingEnabled()).thenReturn(true);
+
+        subject.onBannerImpression();
+
+        verify(moPubView, never()).trackNativeImpression();
+    }
+
+    @Test
+    public void onBannerImpression_withAutomaticImpressionAndClickTrackingDisabled_shouldRegisterImpression() {
+        when(banner.isAutomaticImpressionAndClickTrackingEnabled()).thenReturn(false);
+
+        subject.onBannerImpression();
+
+        verify(moPubView).trackNativeImpression();
+    }
+
     @Test
     public void onLeaveApplication_shouldRegisterClick() throws Exception {
         subject.onLeaveApplication();
@@ -411,7 +422,7 @@ public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exce
         subject.onBannerClicked();
         subject.onLeaveApplication();
 
-        verify(moPubView, never()).nativeAdLoaded();
+        verify(moPubView, never()).creativeDownloaded();
         verify(moPubView, never()).setAdContentView(any(View.class));
         verify(moPubView, never()).trackNativeImpression();
         verify(moPubView, never()).loadFailUrl(any(MoPubErrorCode.class));
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
index e5934618..f0e28a6c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -29,16 +33,19 @@
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyInt;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class CustomEventInterstitialAdapterTest {
+    private static final int DEFAULT_TIMEOUT_DELAY = CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY;
+
     private static long BROADCAST_IDENTIFER = 123;
     private CustomEventInterstitialAdapter subject;
     @Mock
@@ -58,11 +65,11 @@
     @Before
     public void setUp() throws Exception {
 
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(null);
+        when(mockMoPubInterstitial.getAdTimeoutDelay(anyInt())).thenReturn(DEFAULT_TIMEOUT_DELAY);
         moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        stub(moPubInterstitialView.getAdViewController()).toReturn(mockAdViewController);
-        stub(mockAdViewController.getAdReport()).toReturn(mockAdReport);
-        stub(mockMoPubInterstitial.getMoPubInterstitialView()).toReturn(moPubInterstitialView);
+        when(moPubInterstitialView.getAdViewController()).thenReturn(mockAdViewController);
+        when(mockAdViewController.getAdReport()).thenReturn(mockAdReport);
+        when(mockMoPubInterstitial.getMoPubInterstitialView()).thenReturn(moPubInterstitialView);
 
         serverExtras = new HashMap<String, String>();
         serverExtras.put("key", "value");
@@ -76,6 +83,7 @@ public void setUp() throws Exception {
 
         interstitialAdapterListener = mock(CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener.class);
         subject.setAdapterListener(interstitialAdapterListener);
+        when(interstitial.isAutomaticImpressionAndClickTrackingEnabled()).thenReturn(true);
     }
 
     @Test
@@ -90,7 +98,7 @@ public void constructor_withInvalidClassName_shouldCallOnCustomEventInterstitial
     @Test
     public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
         subject.loadInterstitial();
-        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
+        ShadowLooper.idleMainLooper(DEFAULT_TIMEOUT_DELAY - 1);
         verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
         assertThat(subject.isInvalidated()).isFalse();
 
@@ -100,22 +108,8 @@ public void timeout_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Ex
     }
 
     @Test
-    public void timeout_withNegativeAdTimeoutDelay_shouldSignalFailureAndInvalidateWithDefaultDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(-1);
-
-        subject.loadInterstitial();
-        ShadowLooper.idleMainLooper(CustomEventInterstitialAdapter.DEFAULT_INTERSTITIAL_TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        ShadowLooper.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() throws Exception {
-        stub(mockMoPubInterstitial.getAdTimeoutDelay()).toReturn(77);
+    public void timeout_withNonNullAdTimeoutDelay_shouldSignalFailureAndInvalidateWithCustomDelay() {
+        when(mockMoPubInterstitial.getAdTimeoutDelay(anyInt())).thenReturn(77000);
 
         subject.loadInterstitial();
         ShadowLooper.idleMainLooper(77000 - 1);
@@ -132,7 +126,7 @@ public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Excep
         Location expectedLocation = new Location("");
         expectedLocation.setLongitude(10.0);
         expectedLocation.setLongitude(20.1);
-        stub(mockMoPubInterstitial.getLocation()).toReturn(expectedLocation);
+        when(mockMoPubInterstitial.getLocation()).thenReturn(expectedLocation);
         subject = new CustomEventInterstitialAdapter(mockMoPubInterstitial, CLASS_NAME, new HashMap<String, String>(), BROADCAST_IDENTIFER, mockAdViewController.getAdReport());
         subject.loadInterstitial();
 
@@ -280,6 +274,13 @@ public void onInterstitialClicked_shouldSignalAdapterListener() throws Exception
         verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
     }
 
+    @Test
+    public void onInterstitialImpression_shouldSignalAdapterListener() {
+        subject.onInterstitialImpression();
+
+        verify(interstitialAdapterListener).onCustomEventInterstitialImpression();
+    }
+
     @Test
     public void onLeaveApplication_shouldSignalAdapterListener() throws Exception {
         subject.onLeaveApplication();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index 9f190751..dfba86a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index 90e7c77a..ec0f4545 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -22,16 +26,14 @@
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -55,7 +57,6 @@ public void setup() {
         serverExtras = new HashMap<String, String>();
         responseBody = "expected response body";
         serverExtras.put(HTML_RESPONSE_BODY_KEY, responseBody);
-        serverExtras.put(SCROLLABLE_KEY, "false");
     }
 
     @Test
@@ -63,8 +64,6 @@ public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception {
         subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
 
         assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
         assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
         verify(htmlBannerWebView).loadHtmlResponse(responseBody);
     }
@@ -76,22 +75,16 @@ public void loadBanner_whenNoHtmlResponse_shouldNotifyBannerFailed() throws Exce
 
         verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
         assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
         assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
         verify(htmlBannerWebView, never()).loadHtmlResponse(anyString());
     }
 
     @Test
     public void loadBanner_shouldPassParametersThrough() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
         serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
         subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
 
         assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl");
         assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
         verify(htmlBannerWebView).loadHtmlResponse(responseBody);
     }
@@ -130,7 +123,7 @@ public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
     public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {
         subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
         MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();
-        stub(moPubView.getContext()).toReturn(context);
+        when(moPubView.getContext()).thenReturn(context);
         AdViewController adViewController = new AdViewController(context, moPubView);
 
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
index dc2a4ce6..cc6ee7dd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -29,29 +33,27 @@
     private AdReport mockAdReport;
     private CustomEventBannerListener customEventBannerListener;
     private String clickthroughUrl;
-    private String redirectUrl;
     private String dspCreativeId;
 
     @Before
-    public void setup() throws Exception {
+    public void setup() {
         subject = new HtmlBannerWebView(Robolectric.buildActivity(Activity.class).create().get(),
                 mockAdReport);
         customEventBannerListener = mock(CustomEventBannerListener.class);
         clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
         dspCreativeId = "dspCreativeId";
     }
 
     @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
+    public void init_shouldSetupWebViewClient() {
+        subject.init(customEventBannerListener, clickthroughUrl, dspCreativeId);
         WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
         assertThat(webViewClient).isNotNull();
         assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
     }
 
     @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
+    public void htmlBannerWebViewListener_shouldForwardCalls() {
         HtmlBannerWebView.HtmlBannerWebViewListener listenerSubject = new HtmlBannerWebView.HtmlBannerWebViewListener(customEventBannerListener);
 
         listenerSubject.onClicked();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index 851b090d..37d17daf 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -21,8 +25,6 @@
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
 import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
@@ -75,14 +77,11 @@ public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl()
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
 
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isNull();
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isNull();
         verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
         verify(htmlInterstitialWebView, never()).loadHtmlResponse(anyString());
     }
 
-
     @Test
     public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
@@ -90,8 +89,6 @@ public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefau
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
@@ -99,8 +96,6 @@ public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefau
 
     @Test
     public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
         serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
 
         subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
@@ -108,8 +103,6 @@ public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exce
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
         assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
index 2a73c7d3..7fbc55ed 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -30,8 +34,6 @@
     private HtmlInterstitialWebView subject;
     private CustomEventInterstitialListener customEventInterstitialListener;
     private String clickthroughUrl;
-    private boolean isScrollable;
-    private String redirectUrl;
     private String dspCreativeId;
 
     @Before
@@ -39,22 +41,20 @@ public void setUp() throws Exception {
         subject = new HtmlInterstitialWebView(Robolectric.buildActivity(Activity.class).create().get(),
                 mockAdReport);
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        isScrollable = false;
         clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
         dspCreativeId = "dspCreativeId";
     }
 
     @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl, dspCreativeId);
+    public void init_shouldSetupWebViewClient() {
+        subject.init(customEventInterstitialListener, clickthroughUrl, dspCreativeId);
         WebViewClient webViewClient = Shadows.shadowOf(subject).getWebViewClient();
         assertThat(webViewClient).isNotNull();
         assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
     }
 
     @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
+    public void htmlBannerWebViewListener_shouldForwardCalls() {
         HtmlInterstitialWebViewListener listenerSubject = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
 
         listenerSubject.onLoaded(subject);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index a41437c3..75402635 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -1,8 +1,11 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
 import android.app.Application;
-import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.content.pm.ResolveInfo;
@@ -15,20 +18,16 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.any;
-import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.robolectric.Shadows.shadowOf;
@@ -52,7 +51,7 @@ public void setUp() throws Exception {
         when(htmlWebView.getContext()).thenReturn(context);
         when(htmlWebView.wasClicked()).thenReturn(true);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL,
-                "redirect", "dsp_creative_id");
+                "dsp_creative_id");
         while(shadowOf((Application) context).getNextStartedActivity() != null) {}
     }
 
@@ -94,8 +93,8 @@ public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent()
     @Test
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_andCanHandleCustomIntent_shouldTryToLaunchCustomIntent() throws Exception {
         String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
         shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
@@ -109,8 +108,8 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_a
     @Test
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withoutUserClick_shouldNotTryToLaunchIntent() throws Exception {
         String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(false);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
@@ -123,8 +122,8 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withoutUserClic
     @Test
     public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_butCanNotHandleCustomIntent_shouldFailSilently() throws Exception {
         String customUrl = "myintent://something";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
@@ -137,8 +136,8 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_b
 
     @Test
     public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, "dsp_creative_id");
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "dsp_creative_id");
         String validUrl = "https://www.mopub.com";
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
@@ -154,8 +153,8 @@ public void shouldOverrideUrlLoading_withHttpUrl_withUserClick_shouldOpenBrowser
 
     @Test
     public void shouldOverrideUrlLoading_withHttpUrl_withoutUserClick_shouldNotOpenBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(false);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
         String validUrl = "https://www.mopub.com";
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
@@ -168,7 +167,7 @@ public void shouldOverrideUrlLoading_withHttpUrl_withoutUserClick_shouldNotOpenB
     @Test
     public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_shouldNotChangeUrl() throws Exception {
         String validUrl = "https://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(true);
+        when(htmlWebView.wasClicked()).thenReturn(true);
 
         subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
@@ -179,7 +178,7 @@ public void shouldOverrideUrlLoading_withClickTrackingRedirect_withUserClick_sho
     @Test
     public void shouldOverrideUrlLoading_withClickTrackingRedirect_withoutUserClick_shouldChangeUrl() throws Exception {
         String validUrl = "https://www.mopub.com";
-        stub(htmlWebView.wasClicked()).toReturn(false);
+        when(htmlWebView.wasClicked()).thenReturn(false);
 
         subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
 
@@ -188,8 +187,8 @@ public void shouldOverrideUrlLoading_withClickTrackingRedirect_withoutUserClick_
 
     @Test
     public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldFailSilently() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "");
 
@@ -199,8 +198,8 @@ public void shouldOverrideUrlLoading_withEmptyUrl_withUserClick_shouldFailSilent
 
     @Test
     public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAboutBlank() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(false);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "");
 
@@ -209,8 +208,8 @@ public void shouldOverrideUrlLoading_withEmptyUrl_withoutUserClick_shouldLoadAbo
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
                 "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
@@ -225,8 +224,8 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withUserClick_shoul
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_shouldStartIntentWithActionView() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(false);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView,
                 "mopubnativebrowser://navigate?url=https%3A%2F%2Fwww.mopub.com");
@@ -239,9 +238,9 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withoutUserClick_sh
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUserClick_shouldNotBeHandledByNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
+        when(htmlWebView.wasClicked()).thenReturn(true);
         String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
@@ -254,9 +253,9 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withUs
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withoutUserClick_shouldNotLoad() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
+        when(htmlWebView.wasClicked()).thenReturn(false);
         String opaqueNativeBrowserUriString = "mopubnativebrowser:navigate?url=https%3A%2F%2Fwww.mopub.com";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, opaqueNativeBrowserUriString);
 
@@ -269,8 +268,8 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_butOpaqueUri_withou
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withUserClick_shouldFailSilently() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(true);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
@@ -284,8 +283,8 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSche
 
     @Test
     public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSchemeUrl_withoutUserClick_shouldNotInvokeNativeBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        when(htmlWebView.wasClicked()).thenReturn(false);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         boolean shouldOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "something://blah?url=invalid");
 
@@ -297,7 +296,7 @@ public void shouldOverrideUrlLoading_withNativeBrowserScheme_withInvalidHostSche
 
     @Test
     public void shouldOverrideUrlLoading_withAboutBlankUrl_shouldFailSilently() {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
+        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
 
         subject.shouldOverrideUrlLoading(htmlWebView, "about:blank");
 
@@ -351,87 +350,6 @@ public void shouldOverrideUrlLoading_withDeepLinkUrl_withoutUserClick_shouldDoNo
         assertNothingHappensWithoutClick("myapp://view");
     }
 
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getStringExtra(MoPubBrowser.DSP_CREATIVE_ID)).isEqualTo("dsp_creative_id");
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_withoutUserClick_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        stub(htmlWebView.wasClicked()).toReturn(false);
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect", "dsp_creative_id");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_shouldNotChangeUrl_shouldOpenInBrowser() throws Exception {
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = ShadowApplication.getInstance().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(url);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withoutUserClick_shouldNotOpenInBrowser() throws Exception {
-        when(htmlWebView.wasClicked()).thenReturn(false);
-        String url = "redirectUrlToLoad";
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_withUserClick_whenMoPubBrowserCannotHandleIntent_shouldFailSilently() throws Exception {
-        Context mockContext = mock(Context.class);
-        stub(htmlWebView.wasClicked()).toReturn(true);
-        stub(htmlWebView.getContext()).toReturn(mockContext);
-        String url = "redirectUrlToLoad";
-
-        // We only want startActivity() to throw an exception the first time we call it.
-        doThrow(new ActivityNotFoundException())
-                .doNothing()
-                .when(mockContext).startActivity(any(Intent.class));
-
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL, "redirect", "dsp_creative_id");
-        subject.onPageStarted(htmlWebView, url, null);
-
-        ArgumentCaptor<Intent> intentArgumentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(mockContext).startActivity(intentArgumentCaptor.capture());
-
-        Intent intent = intentArgumentCaptor.getValue();
-        assertThat(intent.getData()).isNull();
-        verify(htmlWebViewListener, never()).onClicked();
-        verify(htmlWebView, never()).onResetUserClick();
-    }
-
     @Test
     public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing() throws Exception {
         WebView view = mock(WebView.class);
@@ -445,7 +363,7 @@ public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing()
     private void assertPhoneUrlStartedCorrectIntent(String url) {
         boolean didOverrideUrl;
 
-        stub(htmlWebView.wasClicked()).toReturn(true);
+        when(htmlWebView.wasClicked()).thenReturn(true);
         didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
         Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
@@ -456,7 +374,7 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
         reset(htmlWebViewListener);
         reset(htmlWebView);
 
-        stub(htmlWebView.wasClicked()).toReturn(false);
+        when(htmlWebView.wasClicked()).thenReturn(false);
         didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
         assertThat(ShadowApplication.getInstance().getNextStartedActivity()).isNull();
         assertThat(didOverrideUrl).isTrue();
@@ -467,7 +385,7 @@ private void assertPhoneUrlStartedCorrectIntent(String url) {
     }
 
     private void assertNothingHappensWithoutClick(final String url) {
-        stub(htmlWebView.wasClicked()).toReturn(false);
+        when(htmlWebView.wasClicked()).thenReturn(false);
 
         subject.shouldOverrideUrlLoading(htmlWebView, url);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
index 318911ba..64e8f967 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Intent;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index d2b0381c..564b9f4a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -31,8 +35,6 @@
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
-import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
@@ -54,9 +56,7 @@
 @Config(constants = BuildConfig.class)
 public class MoPubActivityTest {
     private static final String EXPECTED_HTML_DATA = "htmlData";
-    private static final boolean EXPECTED_IS_SCROLLABLE = true;
     @Mock private AdReport mockAdReport;
-    private static final String EXPECTED_REDIRECT_URL = "redirectUrl";
     private static final String EXPECTED_CLICKTHROUGH_URL = "https://expected_url";
     private static final CreativeOrientation EXPECTED_ORIENTATION = CreativeOrientation.PORTRAIT;
 
@@ -76,8 +76,7 @@ public void setUp() throws Exception {
 
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         Intent moPubActivityIntent = MoPubActivity.createIntent(context,
-                EXPECTED_HTML_DATA, mockAdReport, EXPECTED_IS_SCROLLABLE,
-                EXPECTED_REDIRECT_URL,
+                EXPECTED_HTML_DATA, mockAdReport,
                 EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
 
         final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(
@@ -102,7 +101,7 @@ public void onCreate_shouldHaveLockedOrientation() {
     public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
         String htmlData = "this is nonsense";
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, htmlData, true, "redirectUrl",
+                customEventInterstitialListener, htmlData,
                 "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enablePlugins(eq(false));
@@ -112,7 +111,7 @@ public void preRenderHtml_shouldPreloadTheHtml() throws Exception {
     @Test
     public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, "html_data", true, "redirectUrl",
+                customEventInterstitialListener, "html_data",
                 "clickthroughUrl", testBroadcastIdentifier);
 
         verify(htmlInterstitialWebView).enableJavascriptCaching();
@@ -121,7 +120,7 @@ public void preRenderHtml_shouldEnableJavascriptCachingForDummyWebView() {
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null, true, "redirectUrl",
+                customEventInterstitialListener, null,
                 "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
@@ -137,7 +136,7 @@ public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFinishLoad() throw
     @Test
     public void preRenderHtml_shouldHaveAWebViewClientThatForwardsFailLoad() throws Exception {
         MoPubActivity.preRenderHtml(htmlInterstitial, subject, mockAdReport,
-                customEventInterstitialListener, null, true, "redirectUrl",
+                customEventInterstitialListener, null,
                 "clickthroughUrl", testBroadcastIdentifier);
 
         ArgumentCaptor<WebViewClient> webViewClientCaptor = ArgumentCaptor.forClass(WebViewClient.class);
@@ -165,9 +164,7 @@ public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
 
         assertThat(adView).isSameAs(htmlInterstitialWebView);
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
         verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
     }
 
@@ -189,13 +186,13 @@ public void onDestroy_shouldFireJavascriptWebviewDidClose() throws Exception {
     }
 
     @Test
-    public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
-        MoPubActivity.start(subject, "expectedResponse", mockAdReport, true, "redirectUrl", "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
+    public void start_shouldStartMoPubActivityWithCorrectParameters() {
+        final ActivityController<MoPubActivity> activityController = Robolectric.buildActivity(MoPubActivity.class);
+        final MoPubActivity activitySubject = activityController.get();
+        MoPubActivity.start(activitySubject, "expectedResponse", mockAdReport, "clickthroughUrl", CreativeOrientation.PORTRAIT, testBroadcastIdentifier);
 
         Intent nextStartedActivity = ShadowApplication.getInstance().getNextStartedActivity();
         assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
         assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
         assertThat(nextStartedActivity.getSerializableExtra(CREATIVE_ORIENTATION_KEY)).isEqualTo(CreativeOrientation.PORTRAIT);
         assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
@@ -209,8 +206,6 @@ public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throw
         subject.getAdView();
 
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
         assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
         verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index f7691214..2424f409 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
index 30bb636b..57410167 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -75,6 +79,8 @@ public void setUp() throws Exception {
 
         customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
         reset(customEventInterstitialAdapter);
+        when(customEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled())
+                .thenReturn(true);
         adViewController = TestAdViewControllerFactory.getSingletonMock();
     }
 
@@ -234,6 +240,30 @@ public void onCustomEventInterstitialClicked_whenInterstitialAdListenerIsNull_sh
         verify(interstitialAdListener, never()).onInterstitialClicked(eq(subject));
     }
 
+    @Test
+    public void onCustomEventInterstitialImpression_whenAutomaticImpressionTrackingIsEnabled_shouldDoNothing() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        when(customEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled())
+                .thenReturn(true);
+
+        subject.onCustomEventInterstitialImpression();
+
+        verify(interstitialView, never()).trackImpression();
+    }
+
+    @Test
+    public void onCustomEventInterstitialImpression_whenAutomaticImpressionTrackingIsDisabled_shouldDoNothing() {
+        subject.setCustomEventInterstitialAdapter(customEventInterstitialAdapter);
+        subject.setInterstitialView(interstitialView);
+        when(customEventInterstitialAdapter.isAutomaticImpressionAndClickTrackingEnabled())
+                .thenReturn(false);
+
+        subject.onCustomEventInterstitialImpression();
+
+        verify(interstitialView).trackImpression();
+    }
+
     @Test
     public void onCustomEventInterstitialDismissed_shouldNotifyListener() throws Exception {
         subject.onCustomEventInterstitialDismissed();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
index 1b4708c8..ce4f1404 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedPlayableTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index 2a4f862f..fb5944e3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -5,6 +9,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
+import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
 import com.mopub.common.LifecycleListener;
@@ -18,14 +23,21 @@
 import com.mopub.common.privacy.SyncRequest;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
-import com.mopub.network.AdRequest;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.network.AdResponse;
+import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MultiAdRequest;
+import com.mopub.network.MultiAdResponse;
 import com.mopub.network.Networking;
+import com.mopub.network.TrackingRequest;
 import com.mopub.volley.AuthFailureError;
+import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
 import com.mopub.volley.VolleyError;
 
+import org.json.JSONException;
+import org.json.JSONObject;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -33,6 +45,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mock;
+import org.mockito.Mockito;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
@@ -41,7 +54,6 @@
 import org.robolectric.shadows.ShadowLooper;
 
 import java.util.Arrays;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -65,12 +77,12 @@
 public class
         MoPubRewardedVideoManagerTest {
 
-    public static final String MOPUB_REWARD = "mopub_reward";
-    public static final String REWARDED_CURRENCY_NAME = "Coins";
-    public static final String REWARDED_CURRENCY_AMOUNT_STR = "15";
-    public static final String SINGLE_REWARDED_CURRENCY_JSON =
+    private static final String MOPUB_REWARD = "mopub_reward";
+    private static final String SINGLE_CURRENCY_NAME = "Coins_old";
+    private static final int SINGLE_CURRENCY_AMOUNT = 17;
+    private static final String MULTI_CURRENCY_JSON_1 =
             "{\"rewards\": [ { \"name\": \"Coins\", \"amount\": 25 } ] }";
-    public static final String MULTI_REWARDED_CURRENCIES_JSON =
+    private static final String MULTI_CURRENCIES_JSON_4 =
             "{\n" +
                     "  \"rewards\": [\n" +
                     "    { \"name\": \"Coins\", \"amount\": 8 },\n" +
@@ -79,16 +91,17 @@
                     "    { \"name\": \"Energy\", \"amount\": 20 }\n" +
                     "  ]\n" +
                     "}\n";
-    public static final String TEST_CUSTOM_EVENT_PREF_NAME = "mopubTestCustomEventSettings";
+    private static final String TEST_CUSTOM_EVENT_PREF_NAME = "mopubTestCustomEventSettings";
     private static final String CUSTOM_DATA_MAX_LENGTH_EXCEEDED_MESSAGE = "provided rewarded ad custom data parameter longer than supported";
+    private static final String adUnitId = "testAdUnit";
 
     @Mock
     MoPubRequestQueue mockRequestQueue;
     @Mock
-    MoPubRewardedVideoListener mockVideoListener;
+    private MoPubRewardedVideoListener mockVideoListener;
 
-    private AdRequest.Listener requestListener;
-    private AdRequest request;
+    private MultiAdRequest.Listener requestListener;
+    private MultiAdRequest request;
     private RewardedVideoCompletionRequest rewardedVideoCompletionRequest;
     private Activity mActivity;
     private SharedPreferences mTestCustomEventSharedPrefs;
@@ -106,6 +119,7 @@ public void setup() throws Exception {
 
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
         MoPubRewardedVideoManager.init(mActivity);
+
         // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
         // teardown singletons properly between tests.
         MoPubRewardedVideoManager.updateActivity(mActivity);
@@ -128,18 +142,20 @@ public void setup() throws Exception {
             @Override
             public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
                 Request req = ((Request) invocationOnMock.getArguments()[0]);
-                if (req.getClass().equals(AdRequest.class)) {
-                    request = (AdRequest) req;
-                    requestListener = request.getListener();
+                if (req.getClass().equals(MultiAdRequest.class)) {
+                    request = (MultiAdRequest) req;
+                    requestListener = request.mListener;
                     return null;
                 } else if (req.getClass().equals(RewardedVideoCompletionRequest.class)) {
                     rewardedVideoCompletionRequest = (RewardedVideoCompletionRequest) req;
                     return null;
                 } else if(req.getClass().equals(SyncRequest.class)){
                     return null;
+                } else if(req.getClass().equals(TrackingRequest.class)){
+                    return null;
                 } else {
                     throw new Exception(String.format("Request object added to RequestQueue can " +
-                            "only be of type AdRequest or RewardedVideoCompletionRequest, " +
+                            "only be of type MultiAdRequest or RewardedVideoCompletionRequest, " +
                             "saw %s instead.", req.getClass()));
                 }
             }
@@ -365,34 +381,38 @@ public void loadVideo_withDifferentVideoAlreadyShowing_shouldLoadVideo() {
 
         ShadowLooper.unPauseMainLooper();
 
-        verify(mockRequestQueue).add(any(AdRequest.class));
+        verify(mockRequestQueue).add(any(MultiAdRequest.class));
     }
 
     @Test
     public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() throws Exception {
         final CustomEventRewardedVideo mockCustomEvent = mock(CustomEventRewardedVideo.class);
         MoPubRewardedVideoManager.getRewardedAdData().updateAdUnitCustomEventMapping(
-                "testAdUnit", mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
+                adUnitId, mockCustomEvent, TestCustomEvent.AD_NETWORK_ID);
+
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
         // Load the first custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
         // Verify the first custom event
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
         verify(mockRequestQueue).add(any(Request.class));
         reset(mockVideoListener);
@@ -400,13 +420,13 @@ public void loadVideo_withCustomEventAlreadyLoaded_shouldNotLoadAnotherVideo() t
         ShadowLooper.pauseMainLooper();
 
         // Load the second custom event
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
 
         ShadowLooper.unPauseMainLooper();
 
         // Verify the first custom event is still available
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
         // Make sure the second load does not attempt to load another ad
         verifyNoMoreInteractions(mockRequestQueue);
@@ -417,6 +437,8 @@ public void callbackMethods_withNullListener_shouldNotError() {
         // Clients can set RVM null.
         MoPubRewardedVideoManager.setVideoListener(null);
 
+        MultiAdResponse multiAdResponse = Mockito.mock(MultiAdResponse.class);
+
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -428,7 +450,7 @@ public void callbackMethods_withNullListener_shouldNotError() {
 
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
         // Triggers a call to MoPubRewardedVideoManager.onRewardedVideoLoadSuccess
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(multiAdResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -447,6 +469,7 @@ public void callbackMethods_withNullListener_shouldNotError() {
 
     @Test
     public void onAdSuccess_noActivityFound_shouldNotCallFailUrl() {
+        MultiAdResponse multiAdResponse = Mockito.mock(MultiAdResponse.class);
         AdResponse testResponse = new AdResponse.Builder()
                 .setAdType(AdType.CUSTOM)
                 .setCustomEventClassName(
@@ -456,9 +479,9 @@ public void onAdSuccess_noActivityFound_shouldNotCallFailUrl() {
 
         MoPubRewardedVideoManager.updateActivity(null);
         MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(multiAdResponse);
 
-        verify(mockRequestQueue).add(any(AdRequest.class));
+        verify(mockRequestQueue).add(any(MultiAdRequest.class));
         verifyNoMoreInteractions(mockRequestQueue);
 
         // Clean up the static state we screwed up:
@@ -467,230 +490,264 @@ public void onAdSuccess_noActivityFound_shouldNotCallFailUrl() {
 
     @Test
     public void onAdSuccess_noCEFound_shouldCallFailCallback() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .build();
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "doesn't_Exist");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
 
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(testResponse);
 
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId),
                 eq(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
     @Test
-    public void onAdSuccess_noCEFound_shouldLoadFailUrl() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName("doesn't_Exist")
-                .setFailoverUrl("fail.url")
-                .build();
+    public void onAdSuccess_noCEFound_shouldLoadFailUrl() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        jsonResponse.put(ResponseHeader.FAIL_URL.getKey(), "fail.url");
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "doesn't_Exist");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
 
-        assertThat(new String(request.getBody())).contains("testAdUnit");
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(testResponse);
         assertThat(request.getUrl()).isEqualTo("fail.url");
         // Clear up the static state :(
         requestListener.onErrorResponse(new VolleyError("reset"));
     }
 
     @Test
-    public void onAdSuccess_shouldInstantiateCustomEvent_shouldLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
+    public void onAdSuccess_shouldInstantiateCustomEvent_shouldLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), SINGLE_CURRENCY_NAME);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), SINGLE_CURRENCY_AMOUNT);
+        metadata.remove(ResponseHeader.REWARDED_CURRENCIES.getKey());
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
     @Test
-    public void onAdSuccess_withLegacyRewardedCurrencyHeaders_shouldMapAdUnitIdToReward_shouldLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName(REWARDED_CURRENCY_NAME)
-                .setRewardedVideoCurrencyAmount(REWARDED_CURRENCY_AMOUNT_STR)
-                .build();
+    public void onAdSuccess_withLegacyRewardedCurrencyHeaders_shouldMapAdUnitIdToReward_shouldLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), SINGLE_CURRENCY_NAME);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), SINGLE_CURRENCY_AMOUNT);
+        metadata.remove(ResponseHeader.REWARDED_CURRENCIES.getKey());
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
 
         // Verify that the reward is mapped to the adunit
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNotNull();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getLabel()).isEqualTo(REWARDED_CURRENCY_NAME);
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getAmount()).isEqualTo(Integer.parseInt(REWARDED_CURRENCY_AMOUNT_STR));
-        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit")).isEmpty();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId)).isNotNull();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId).getLabel()).isEqualTo(SINGLE_CURRENCY_NAME);
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId).getAmount()).isEqualTo(SINGLE_CURRENCY_AMOUNT);
+        assertThat(rewardedVideoData.getAvailableRewards(adUnitId)).isEmpty();
     }
 
     @Test
-    public void onAdSuccess_withMultiRewardedCurrenciesJsonHeader_shouldMapAdUnitToAvailableRewards_shouldLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void onAdSuccess_withMultiRewardedCurrenciesJsonHeader_shouldMapAdUnitToAvailableRewards_shouldLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), new JSONObject(MULTI_CURRENCIES_JSON_4));
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
 
         // Verify that only available rewards are updated, not the final reward mapped to the adunit
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
-        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(4);
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 8)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 1)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 10)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Energy", 20)).isTrue();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId)).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards(adUnitId).size()).isEqualTo(4);
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Coins", 8)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Diamonds", 1)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Diamonds", 10)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Energy", 20)).isTrue();
     }
 
     @Test
-    public void onAdSuccess_withSingleRewardedCurrencyJsonHeader_shouldMapAdUnitToRewardAndUpdateAvailableRewards_shouldLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(SINGLE_REWARDED_CURRENCY_JSON)
-                .build();
+    public void onAdSuccess_withSingleRewardedCurrencyJsonHeader_shouldMapAdUnitToRewardAndUpdateAvailableRewards_shouldLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
 
         // Verify that the single reward is mapped to the adunit, and it's the only available reward
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNotNull();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getLabel()).isEqualTo("Coins");
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit").getAmount()).isEqualTo(25);
-        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(1);
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 25)).isTrue();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId)).isNotNull();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId).getLabel()).isEqualTo("Coins");
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId).getAmount()).isEqualTo(15);
+        assertThat(rewardedVideoData.getAvailableRewards(adUnitId).size()).isEqualTo(1);
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Coins", 15)).isTrue();
     }
 
     @Test
-    public void onAdSuccess_withBothLegacyAndJsonHeaders_shouldIgnoreLegacyHeaders_shouldLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName(REWARDED_CURRENCY_NAME)
-                .setRewardedVideoCurrencyAmount(REWARDED_CURRENCY_AMOUNT_STR)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void onAdSuccess_withBothLegacyAndJsonHeaders_shouldIgnoreLegacyHeaders_shouldLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), SINGLE_CURRENCY_NAME);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), SINGLE_CURRENCY_AMOUNT);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), MULTI_CURRENCIES_JSON_4);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
         verifyNoMoreInteractions(mockVideoListener);
 
         // Verify that the legacy headers are ignored, and available rewards are updated from the JSON header
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
-        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").size()).isEqualTo(4);
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Coins", 8)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 1)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Diamonds", 10)).isTrue();
-        assertThat(rewardedVideoData.existsInAvailableRewards("testAdUnit", "Energy", 20)).isTrue();
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId)).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards(adUnitId).size()).isEqualTo(4);
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Coins", 8)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Diamonds", 1)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Diamonds", 10)).isTrue();
+        assertThat(rewardedVideoData.existsInAvailableRewards(adUnitId, "Energy", 20)).isTrue();
     }
 
     @Test
-    public void onAdSuccess_withMalformedRewardedCurrenciesJsonHeader_shouldNotUpdateRewardMappings_andNotLoad() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies("not json")
-                .build();
+    public void onAdSuccess_withMalformedRewardedCurrenciesJsonHeader_shouldNotUpdateRewardMappings_andNotLoad() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), "not json");
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isFalse();
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId),
                 eq(MoPubErrorCode.REWARDED_CURRENCIES_PARSING_ERROR));
         verifyNoMoreInteractions(mockVideoListener);
 
         // Verify that no reward mappings are updated
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        assertThat(rewardedVideoData.getMoPubReward("testAdUnit")).isNull();
-        assertThat(rewardedVideoData.getAvailableRewards("testAdUnit").isEmpty());
+        assertThat(rewardedVideoData.getMoPubReward(adUnitId)).isNull();
+        assertThat(rewardedVideoData.getAvailableRewards(adUnitId).isEmpty());
     }
 
     @Test
-    public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPrefs() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
+    public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPrefs() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "");
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -704,24 +761,23 @@ public void onAdSuccess_withEmptyServerExtras_shouldStillSaveEmptyMapInSharedPre
     }
 
     @Test
-    public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() {
-        Map<String, String> serverExtras = new HashMap<>();
-        serverExtras.put("k1", "v1");
-        serverExtras.put("k2", "v2");
+    public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{\"k1\":\"v1\",\"k2\":\"v2\"}");
 
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setServerExtras(serverExtras)
-                .build();
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -736,29 +792,29 @@ public void onAdSuccess_withServerExtras_shouldSaveInitParamsInSharedPrefs() {
     }
 
     @Test
-    public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs() {
+    public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs() throws JSONException, MoPubNetworkError {
         // Put in {"k1":"v1","k2":"v2"} as existing init params.
         mTestCustomEventSharedPrefs.edit().putString(
                 TestCustomEvent.class.getName(),
                 "{\"k1\":\"v1\",\"k2\":\"v2\"}").commit();
 
         // New init params are {"k3":"v3"}.
-        Map<String, String> serverExtras = new HashMap<>();
-        serverExtras.put("k3", "v3");
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{\"k3\":\"v3\"}");
 
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setServerExtras(serverExtras)
-                .build();
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -772,25 +828,23 @@ public void onAdSuccess_withNewInitParams_shouldUpdateInitParamsInSharedPrefs()
     }
 
     @Test
-    public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSharedPrefs() {
-        Map<String, String> serverExtras = new HashMap<>();
-        serverExtras.put("k1", "v1");
-        serverExtras.put("k2", "v2");
+    public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSharedPrefs() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideo");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(), "{\"k1\":\"v1\", \"k2\":\"v2\"}");
 
-        // MoPubRewardedVideo does not extend from CustomEventRewardedVideo
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideo")
-                .setAdType(AdType.CUSTOM)
-                .setServerExtras(serverExtras)
-                .build();
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, "testAdUnit1");
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo("testAdUnit1", null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -800,11 +854,14 @@ public void onAdSuccess_witNonCustomEventRewardedVideo_shouldNotSaveAnythingInSh
 
     @Test
     public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, "testAdUnit1");
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
@@ -812,7 +869,7 @@ public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() thro
 
         // Load the first custom event
         MoPubRewardedVideoManager.loadVideo("testAdUnit1", null);
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -826,8 +883,9 @@ public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() thro
         ShadowLooper.pauseMainLooper();
 
         // Load the second custom event
+        testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, "testAdUnit2");
         MoPubRewardedVideoManager.loadVideo("testAdUnit2", null);
-        requestListener.onSuccess(testResponse);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
@@ -844,132 +902,154 @@ public void onAdSuccess_shouldHaveUniqueBroadcastIdsSetForEachCustomEvent() thro
 
     @Test
     public void onAdSuccess_shouldUpdateAdUnitRewardMapping() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName("currency_name")
-                .setRewardedVideoCurrencyAmount("123")
-                .build();
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), SINGLE_CURRENCY_NAME);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), SINGLE_CURRENCY_AMOUNT);
+        metadata.remove(ResponseHeader.REWARDED_CURRENCIES.getKey());
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
         MoPubReward moPubReward =
-                MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit");
-        assertThat(moPubReward.getAmount()).isEqualTo(123);
-        assertThat(moPubReward.getLabel()).isEqualTo("currency_name");
+                MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward(adUnitId);
+        assertThat(moPubReward.getAmount()).isEqualTo(SINGLE_CURRENCY_AMOUNT);
+        assertThat(moPubReward.getLabel()).isEqualTo(SINGLE_CURRENCY_NAME);
     }
-    
+
     @Test
-    public void showVideo_shouldSetHasVideoFalse() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
+    public void onRewardedVideoClosed_shouldSetHasVideoFalse() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isTrue();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq("testAdUnit"));
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        verify(mockVideoListener).onRewardedVideoStarted(eq("testAdUnit"));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+        verify(mockVideoListener).onRewardedVideoLoadSuccess(eq(adUnitId));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isTrue();
+        verify(mockVideoListener).onRewardedVideoStarted(eq(adUnitId));
+        MoPubRewardedVideoManager.onRewardedVideoClosed(TestCustomEvent.class, adUnitId);
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isFalse();
     }
     
     @Test
-    public void showVideo_whenNotHasVideo_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .build();
+    public void showVideo_whenNotHasVideo_shouldFail() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$NoVideoCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.NETWORK_NO_FILL));
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId), eq(MoPubErrorCode.NETWORK_NO_FILL));
 
-        assertThat(MoPubRewardedVideoManager.hasVideo("testAdUnit")).isFalse();
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
+        assertThat(MoPubRewardedVideoManager.hasVideo(adUnitId)).isFalse();
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId), eq(MoPubErrorCode.VIDEO_NOT_AVAILABLE));
     }
 
     @Test
-    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelected_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenRewardNotSelected_shouldFail() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), new JSONObject(MULTI_CURRENCIES_JSON_4));
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
         // Multiple rewards are available, but a reward is not selected before showing video
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
     }
 
     @Test
-    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSelected_shouldUpdateRewardMappings() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSelected_shouldUpdateRewardMappings() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), new JSONObject(MULTI_CURRENCIES_JSON_4));
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
-        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards(adUnitId);
         assertThat(availableRewards.size()).isEqualTo(4);
 
         // Select the 10 Diamonds reward
         for (MoPubReward reward : availableRewards) {
             if (reward.getLabel().equals("Diamonds") && reward.getAmount() == 10) {
-                MoPubRewardedVideoManager.selectReward("testAdUnit", reward);
+                MoPubRewardedVideoManager.selectReward(adUnitId, reward);
                 break;
             }
         }
 
         // AdUnit to MoPubReward mapping
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        MoPubReward moPubReward = rewardedVideoData.getMoPubReward("testAdUnit");
+        MoPubReward moPubReward = rewardedVideoData.getMoPubReward(adUnitId);
         assertThat(moPubReward.getLabel()).isEqualTo("Diamonds");
         assertThat(moPubReward.getAmount()).isEqualTo(10);
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        MoPubRewardedVideoManager.showVideo(adUnitId);
 
         // CustomEventRewardedAd class to MoPubReward mapping
         moPubReward = rewardedVideoData.getLastShownMoPubReward(TestCustomEvent.class);
@@ -978,21 +1058,25 @@ public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenValidRewardIsSel
     }
 
     @Test
-    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWithWrongAdUnit_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWithWrongAdUnit_shouldFail() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), new JSONObject(MULTI_CURRENCIES_JSON_4));
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
-        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards(adUnitId);
         assertThat(availableRewards.size()).isEqualTo(4);
 
         // Select the 10 Diamonds reward, but to a wrong AdUnit
@@ -1004,71 +1088,79 @@ public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectRewardWith
         }
 
         // No selected reward is mapped to AdUnit
-        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit")).isNull();
+        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward(adUnitId)).isNull();
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
     }
 
     @Test
-    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIsNotAvailable_shouldFail() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(MULTI_REWARDED_CURRENCIES_JSON)
-                .build();
+    public void showVideo_withMultiRewardedCurrenciesJsonHeader_whenSelectedRewardIsNotAvailable_shouldFail() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), new JSONObject(MULTI_CURRENCIES_JSON_4));
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
-        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards("testAdUnit");
+        Set<MoPubReward> availableRewards = MoPubRewardedVideoManager.getAvailableRewards(adUnitId);
         assertThat(availableRewards.size()).isEqualTo(4);
 
         // Select a reward that's not in the returned set of available rewards
-        MoPubRewardedVideoManager.selectReward("testAdUnit", MoPubReward.success("fake reward", 99));
+        MoPubRewardedVideoManager.selectReward(adUnitId, MoPubReward.success("fake reward", 99));
 
         // No selected reward is mapped to AdUnit
-        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward("testAdUnit")).isNull();
+        assertThat(MoPubRewardedVideoManager.getRewardedAdData().getMoPubReward(adUnitId)).isNull();
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
+        MoPubRewardedVideoManager.showVideo(adUnitId);
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId), eq(MoPubErrorCode.REWARD_NOT_SELECTED));
     }
 
     @Test
-    public void showVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected_shouldSelectOnlyRewardAutomatically() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedCurrencies(SINGLE_REWARDED_CURRENCY_JSON)
-                .build();
+    public void showVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected_shouldSelectOnlyRewardAutomatically() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), MULTI_CURRENCY_JSON_1);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         // There's only one reward in the set of available rewards for this AdUnit
-        assertThat(MoPubRewardedVideoManager.getAvailableRewards("testAdUnit").size()).isEqualTo(1);
+        assertThat(MoPubRewardedVideoManager.getAvailableRewards(adUnitId).size()).isEqualTo(1);
 
         // The only reward is automatically mapped to this AdUnit
         RewardedAdData rewardedVideoData = MoPubRewardedVideoManager.getRewardedAdData();
-        MoPubReward moPubReward = rewardedVideoData.getMoPubReward("testAdUnit");
+        MoPubReward moPubReward = rewardedVideoData.getMoPubReward(adUnitId);
         assertThat(moPubReward.getLabel()).isEqualTo("Coins");
         assertThat(moPubReward.getAmount()).isEqualTo(25);
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        MoPubRewardedVideoManager.showVideo(adUnitId);
 
         // CustomEventRewardedAd class to MoPubReward mapping
         moPubReward = rewardedVideoData.getLastShownMoPubReward(TestCustomEvent.class);
@@ -1078,24 +1170,28 @@ public void showVideo_withSingleRewardedCurrencyJsonHeader_whenRewardNotSelected
 
     @Test
     public void showVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCustomEventRewardMapping() throws Exception {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setAdType(AdType.CUSTOM)
-                .setRewardedVideoCurrencyName("currency_name")
-                .setRewardedVideoCurrencyAmount("123")
-                .build();
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currency_name");
+        metadata.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), 123);
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), "");
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
 
         // Robolectric executes its handlers immediately, so if we want the async behavior we see
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit");
+        MoPubRewardedVideoManager.showVideo(adUnitId);
 
         MoPubReward moPubReward =
                 MoPubRewardedVideoManager.getRewardedAdData().getLastShownMoPubReward(TestCustomEvent.class);
@@ -1105,6 +1201,8 @@ public void showVideo_withLegacyRewardedCurrencyHeaders_shouldUpdateLastShownCus
 
     @Test
     public void showVideo_withCustomDataShorterThanLengthMaximum_shouldNotLogWarning() {
+        MultiAdResponse multiAdResponse = Mockito.mock(MultiAdResponse.class);
+        when(multiAdResponse.getFailURL()).thenReturn("failUrl");
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -1114,12 +1212,12 @@ public void showVideo_withCustomDataShorterThanLengthMaximum_shouldNotLogWarning
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(multiAdResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit",
+        MoPubRewardedVideoManager.showVideo(adUnitId,
                 createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES - 1));
 
         for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
@@ -1131,6 +1229,8 @@ public void showVideo_withCustomDataShorterThanLengthMaximum_shouldNotLogWarning
 
     @Test
     public void showVideo_withCustomDataGreaterThanLengthMaximum_shouldLogWarning() {
+        MultiAdResponse multiAdResponse = Mockito.mock(MultiAdResponse.class);
+        when(multiAdResponse.getFailURL()).thenReturn("failUrl");
         AdResponse testResponse = new AdResponse.Builder()
                 .setCustomEventClassName("com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
                 .setAdType(AdType.CUSTOM)
@@ -1140,12 +1240,12 @@ public void showVideo_withCustomDataGreaterThanLengthMaximum_shouldLogWarning()
         // in an actual app we have to pause the main looper until we're done successfully loading the ad.
         ShadowLooper.pauseMainLooper();
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(multiAdResponse);
 
         ShadowLooper.unPauseMainLooper();
 
-        MoPubRewardedVideoManager.showVideo("testAdUnit",
+        MoPubRewardedVideoManager.showVideo(adUnitId,
                 createStringWithLength(MoPubRewardedVideoManager.CUSTOM_DATA_MAX_LENGTH_BYTES  + 1));
 
         for (final ShadowLog.LogItem logItem : ShadowLog.getLogs()) {
@@ -1159,19 +1259,20 @@ public void showVideo_withCustomDataGreaterThanLengthMaximum_shouldLogWarning()
     }
 
     @Test
-    public void onAdFailure_shouldCallFailCallback() {
+    public void onAdFailure_shouldCallFailCallback() throws JSONException {
         VolleyError e = new VolleyError("testError!");
 
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
 
-        assertThat(new String(request.getBody())).contains("testAdUnit");
+        JSONObject jsonBody = new JSONObject(new String(request.getBody()));
+        assertThat(jsonBody.get("id")).isEqualTo(adUnitId);
         requestListener.onErrorResponse(e);
         verify(mockVideoListener).onRewardedVideoLoadFailure(anyString(), any(MoPubErrorCode.class));
         verifyNoMoreInteractions(mockVideoListener);
     }
 
     @Test
-    public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Exception {
+    public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.success("network_reward", 456);
 
@@ -1181,7 +1282,7 @@ public void chooseReward_shouldReturnMoPubRewardOverNetworkReward() throws Excep
     }
 
     @Test
-    public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() throws Exception {
+    public void chooseReward_withNetworkRewardNotSuccessful_shouldReturnNetworkReward() {
         MoPubReward moPubReward = MoPubReward.success(MOPUB_REWARD, 123);
         MoPubReward networkReward = MoPubReward.failure();
 
@@ -1355,23 +1456,26 @@ public void onRewardedVideoCompleted_withServerCompletionUrl_withNullRewardForCu
     }
 
     @Test
-    public void onRewardedVideoLoadFailure_withExpirationErrorCode_shouldCallFailCallback_shouldNotLoadFailUrl() {
-        AdResponse testResponse = new AdResponse.Builder()
-                .setAdType(AdType.CUSTOM)
-                .setCustomEventClassName(
-                        "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent")
-                .setFailoverUrl("fail.url")
-                .build();
-
-        MoPubRewardedVideoManager.loadVideo("testAdUnit", null);
-        requestListener.onSuccess(testResponse);
+    public void onRewardedVideoLoadFailure_withExpirationErrorCode_shouldCallFailCallback_shouldNotLoadFailUrl() throws JSONException, MoPubNetworkError {
+        JSONObject jsonResponse = createRewardedJsonResponse();
+        jsonResponse.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
+        JSONObject firstResponse = jsonResponse.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).getJSONObject(0);
+        JSONObject metadata = firstResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "com.mopub.mobileads.MoPubRewardedVideoManagerTest$TestCustomEvent");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.CUSTOM);
+
+        NetworkResponse netResponse = new NetworkResponse(jsonResponse.toString().getBytes());
+        MultiAdResponse testResponse = new MultiAdResponse(mActivity, netResponse, AdFormat.REWARDED_VIDEO, adUnitId);
+
+        MoPubRewardedVideoManager.loadVideo(adUnitId, null);
+        requestListener.onSuccessResponse(testResponse);
         MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TestCustomEvent.class,
                 TestCustomEvent.AD_NETWORK_ID, MoPubErrorCode.EXPIRED);
 
-        verify(mockVideoListener).onRewardedVideoLoadFailure(eq("testAdUnit"),
+        verify(mockVideoListener).onRewardedVideoLoadFailure(eq(adUnitId),
                 eq(MoPubErrorCode.EXPIRED));
         verifyNoMoreInteractions(mockVideoListener);
-        verify(mockRequestQueue).add(any(AdRequest.class));
+        verify(mockRequestQueue).add(any(MultiAdRequest.class));
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
@@ -1470,4 +1574,56 @@ public boolean matches(final Object argument) {
             }
         }
     }
+
+    private static JSONObject createRewardedJsonResponse() throws JSONException {
+        final String jsonString = "{\n" +
+                "  \"ad-responses\": [\n" +
+                "    {\n" +
+                "      \"content\": \"<VAST version=\\\"2.0\\\">\\r\\n  <Ad id=\\\"1\\\">\\r\\n    <InLine>\\r\\n      <AdSystem>MoPub</AdSystem>\\r\\n      <AdTitle>MoPub Video Test Ad</AdTitle>\\r\\n      <Impression>\\r\\n        <![CDATA[https://d30x8mtr3hjnzo.cloudfront.net/client/images/vastimp1x1.png?1519938200329]]>\\r\\n      </Impression>\\r\\n      <Creatives>\\r\\n        <Creative>\\r\\n          <Linear>\\r\\n            <Duration>00:00:30</Duration>\\r\\n            <VideoClicks>\\r\\n              <ClickThrough>\\r\\n                <![CDATA[mopubnativebrowser://navigate?url=http%3A%2F%2Fwww.mopub.com]]>\\r\\n              </ClickThrough>\\r\\n            </VideoClicks>\\r\\n            <MediaFiles>\\r\\n              <MediaFile delivery=\\\"progressive\\\" type=\\\"video/mp4\\\" bitrate=\\\"325\\\" width=\\\"640\\\" height=\\\"360\\\">\\r\\n                <![CDATA[https://d2al1opqne3nsh.cloudfront.net/videos/corgi_30s_640x360_baseline_30.mp4]]>\\r\\n              </MediaFile>\\r\\n            </MediaFiles>\\r\\n          </Linear>\\r\\n        </Creative>\\r\\n        <Creative>\\r\\n          <CompanionAds>\\r\\n            <Companion width=\\\"640\\\" height=\\\"360\\\">\\r\\n              <StaticResource creativeType=\\\"image/jpeg\\\">\\r\\n                <![CDATA[https://d2al1opqne3nsh.cloudfront.net/images/igetbeggin_640x360.jpg]]>\\r\\n              </StaticResource>\\r\\n              <TrackingEvents>\\r\\n                <Tracking event=\\\"creativeView\\\">\\r\\n                  <![CDATA[https://www.mopub.com/?q=companionTracking640x360]]>\\r\\n                </Tracking>\\r\\n              </TrackingEvents>\\r\\n              <CompanionClickThrough>\\r\\n                <![CDATA[https://www.mopub.com/?q=companionClickThrough640x360]]>\\r\\n              </CompanionClickThrough>\\r\\n            </Companion>\\r\\n          </CompanionAds>\\r\\n        </Creative>\\r\\n      </Creatives>\\r\\n    </InLine>\\r\\n  </Ad>\\r\\n</VAST> <MP_TRACKING_URLS>  </MP_TRACKING_URLS> \",\n" +
+                "      \"metadata\": {\n" +
+                "        \"content-type\": \"text/html; charset=UTF-8\",\n" +
+                "        \"x-ad-timeout-ms\": 0,\n" +
+                "        \"x-adgroupid\": \"b4148ea9ed7b4003b9d7c1e61036e0b1\",\n" +
+                "        \"x-adtype\": \"rewarded_video\",\n" +
+                "        \"x-backgroundcolor\": \"\",\n" +
+                "        \"x-banner-impression-min-ms\": \"\",\n" +
+                "        \"x-banner-impression-min-pixels\": \"\",\n" +
+                "        \"x-before-load-url\": \"\",\n" +
+                "        \"x-browser-agent\": -1,\n" +
+//                "        \"x-clickthrough\": \"http://ads-staging.mopub.com/m/aclk?appid=&cid=4652bd83d89a40c5a4e276dbf101499f&city=San%20Francisco&ckv=2&country_code=US&cppck=E3A19&dev=Android%20SDK%20built%20for%20x86&exclude_adgroups=b4148ea9ed7b4003b9d7c1e61036e0b1&id=920b6145fb1546cf8b5cf2ac34638bb7&is_mraid=0&os=Android&osv=8.0.0&req=5e3d79f17abb48468d95fde17e82f7f6&reqt=1519938200.0&rev=0&udid=ifa%3Abd9022e4-5ced-4af2-8cba-dd15ffa715ee&video_type=\",\n" +
+                "        \"x-clickthrough\": \"\",\n" +
+                "        \"x-creativeid\": \"4652bd83d89a40c5a4e276dbf101499f\",\n" +
+                "        \"x-custom-event-class-data\": \"\",\n" +
+                "        \"x-custom-event-class-name\": \"\",\n" +
+                "        \"x-disable-viewability\": 3,\n" +
+                "        \"x-dspcreativeid\": \"\",\n" +
+                "        \"x-format\": \"\",\n" +
+                "        \"x-fulladtype\": \"vast\",\n" +
+                "        \"x-height\": -1,\n" +
+                "        \"x-imptracker\": \"http://ads-staging.mopub.com/m/imp?appid=&cid=4652bd83d89a40c5a4e276dbf101499f&city=San%20Francisco&ckv=2&country_code=US&cppck=6A575&dev=Android%20SDK%20built%20for%20x86&exclude_adgroups=b4148ea9ed7b4003b9d7c1e61036e0b1&id=920b6145fb1546cf8b5cf2ac34638bb7&is_ab=0&is_mraid=0&os=Android&osv=8.0.0&req=5e3d79f17abb48468d95fde17e82f7f6&reqt=1519938200.0&rev=0.000050&udid=ifa%3Abd9022e4-5ced-4af2-8cba-dd15ffa715ee&video_type=\",\n" +
+                "        \"x-interceptlinks\": \"\",\n" +
+                "        \"x-nativeparams\": \"\",\n" +
+                "        \"x-networktype\": \"\",\n" +
+                "        \"x-orientation\": \"l\",\n" +
+                "        \"x-precacherequired\": \"1\",\n" +
+                "        \"x-refreshtime\": 30,\n" +
+                "        \"x-rewarded-currencies\": {\n" +
+                "          \"rewards\": [ { \"name\": \"Coins\", \"amount\": 15 } ]\n" +
+                "        },\n" +
+                "        \"x-rewarded-video-completion-url\": \"\",\n" +
+                "        \"x-rewarded-video-currency-amount\": 10,\n" +
+                "        \"x-rewarded-video-currency-name\": \"Coins\",\n" +
+                "        \"x-vastvideoplayer\": \"\",\n" +
+                "        \"x-video-trackers\": \"\",\n" +
+                "        \"x-video-viewability-trackers\": \"\",\n" +
+                "        \"x-width\": -1\n" +
+                "      }\n" +
+                "    }\n" +
+                "  ],\n" +
+//                "  \"x-next-url\": \"http://ads-staging.mopub.com/m/ad?v=6&id=920b6145fb1546cf8b5cf2ac34638bb7&nv=6.1&dn=Google%2CAndroid%20SDK%20built%20for%20x86%2Csdk_gphone_x86&bundle=com.mopub.simpleadsdemo&z=%2B0000&o=p&w=1080&h=1920&sc_a=2.625&mcc=310&mnc=260&iso=us&cn=Android&ct=3&av=4.20.0&udid=ifa%3Abd9022e4-5ced-4af2-8cba-dd15ffa715ee&dnt=0&mr=1&android_perms_ext_storage=0&vv=3&exclude=b4148ea9ed7b4003b9d7c1e61036e0b1&request_id=5e3d79f17abb48468d95fde17e82f7f6&fail=1\"\n" +
+                "  \"x-next-url\": \"\"\n" +
+                "}";
+
+        return new JSONObject(jsonString);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
index bfeb5d34..02bfabfe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
index eb0820e6..61d79005 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubShadowMediaPlayer.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.media.MediaPlayer;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
index 71e4b64f..4888888c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -167,10 +171,10 @@ public void setAutorefreshEnabled_withRefreshFalse_shouldForwardToAdViewControll
     }
     
     @Test
-    public void nativeAdLoaded_shouldScheduleRefreshTimer() throws Exception {
-        subject.nativeAdLoaded();
+    public void creativeDownloaded_shouldCreativeDownloadSuccess() {
+        subject.creativeDownloaded();
 
-        verify(adViewController).scheduleRefreshTimerIfEnabled();
+        verify(adViewController).creativeDownloadSuccess();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index 0985504b..df9ae4d5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -11,6 +15,7 @@
 import android.webkit.WebViewClient;
 import android.widget.FrameLayout;
 
+import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mraid.MraidBridge;
 import com.mopub.mraid.MraidBridge.MraidWebView;
@@ -96,7 +101,7 @@ public void preRenderHtml_shouldLoadHtml() {
                 mockMraidWebView, testBroadcastIdentifier);
 
         verify(mockMraidWebView).loadDataWithBaseURL(
-                "http://ads.mopub.com/",
+                "http://" + Constants.HOST + "/",
                 HTML_DATA,
                 "text/html",
                 "UTF-8",
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 9db1e540..ca622e60 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
index e6314478..a3067c28 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RepeatingHandlerRunnableTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
index e5832e88..021cd3e5 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ResponseBodyInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import org.junit.Ignore;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
index e7e5e862..f95efe4f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdDataTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.MoPubReward;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java
new file mode 100644
index 00000000..00812ba6
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedAdsLoadersTest.java
@@ -0,0 +1,124 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.mobileads;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.test.support.SdkTestRunner;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class RewardedAdsLoadersTest {
+    private static final String AD_UNIT_ID = "ad_unit_id";
+
+    @Mock
+    private MoPubRewardedVideoManager mockRewardedVideoManager;
+    @Mock
+    private AdLoaderRewardedVideo mockLoaderRewardedVideo;
+
+    private Activity activity;
+    private RewardedAdsLoaders subject;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        subject = new RewardedAdsLoaders(mockRewardedVideoManager);
+        subject.getLoadersMap().put(AD_UNIT_ID, mockLoaderRewardedVideo);
+
+    }
+
+    @Test
+    public void isLoading_fullTest() {
+        // when ad unit loader is present
+        subject.isLoading(AD_UNIT_ID);
+        verify(mockLoaderRewardedVideo).isRunning();
+
+        // when ad unit loader is not present
+        reset(mockLoaderRewardedVideo);
+        subject.isLoading("invalid_ad_unit_id");
+        verify(mockLoaderRewardedVideo, never()).isRunning();
+    }
+
+    @Test
+    public void markFailed_fullTest() {
+        // when ad unit is not present
+        subject.markFail("invalid_ad_unit_id");
+        assertThat(subject.getLoadersMap().size()).isEqualTo(1);
+
+        // when ad unit is present
+        subject.markFail(AD_UNIT_ID);
+        assertThat(subject.getLoadersMap().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void markPlayed_fullTest() {
+        // when ad unit is not present
+        subject.markPlayed("invalid_ad_unit_id");
+        assertThat(subject.getLoadersMap().size()).isEqualTo(1);
+
+        // when ad unit is present
+        subject.markPlayed(AD_UNIT_ID);
+        assertThat(subject.getLoadersMap().size()).isEqualTo(0);
+    }
+
+    @Test
+    public void onRewardedVideoStarted_fullTest() {
+        // when ad unit is not present
+        subject.onRewardedVideoStarted("invalid_ad_unit_id", activity);
+        verify(mockLoaderRewardedVideo, never()).trackImpression(any(Context.class));
+
+        // when ad unit is present
+        subject.onRewardedVideoStarted(AD_UNIT_ID, activity);
+        verify(mockLoaderRewardedVideo).trackImpression(eq(activity));
+    }
+
+    @Test
+    public void onRewardedVideoClicked_fullTest() {
+        // when ad unit is not present
+        subject.onRewardedVideoClicked("invalid_ad_unit_id", activity);
+        verify(mockLoaderRewardedVideo, never()).trackClick(any(Context.class));
+
+        // when ad unit is present
+        subject.onRewardedVideoClicked(AD_UNIT_ID, activity);
+        verify(mockLoaderRewardedVideo).trackClick(eq(activity));
+    }
+
+    @Test
+    public void canPlay_fullTest() {
+        // when ad unit is not present
+        subject.canPlay("invalid_ad_unit_id");
+        verify(mockLoaderRewardedVideo, never()).getLastDeliveredResponse();
+
+        // when ad unit is present
+        subject.canPlay(AD_UNIT_ID);
+        verify(mockLoaderRewardedVideo).getLastDeliveredResponse();
+    }
+
+    @Test
+    public void creativeDownloadSuccess_fullTest(){
+        // when ad unit is not present
+        subject.creativeDownloadSuccess("invalid_ad_unit_id");
+        verify(mockLoaderRewardedVideo, never()).creativeDownloadSuccess();
+
+        // when ad unit is present
+        subject.creativeDownloadSuccess(AD_UNIT_ID);
+        verify(mockLoaderRewardedVideo).creativeDownloadSuccess();
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
index 65c07b52..f4cff488 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
index 4060bde7..d27b83f4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidCountdownRunnableTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
index cbc4cf92..ec827fb0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVastVideoInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
index fdbec0c4..98aae002 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoBroadcastReceiverTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
index 43b3fadb..7b2cc96e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedVideoCompletionRequestHandlerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
index b7cd5153..0e00fcb3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastAdXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
index 559db818..be6f4180 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastBaseInLineWrapperXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
index 0c9de71e..44167515 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
index a738a601..cffbe329 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
index 74faa3ab..b3fa4f88 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionParentXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
index ab3d313a..f329405f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastExtensionXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
index b6375b96..293ccbcd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
index 1789c222..990c6227 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
index ef132fcd..79716eb1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastLinearXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
index 9b1cb0ae..23de4052 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMacroHelperTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.net.Uri;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
index 7f0d8b98..9d72b740 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -28,7 +32,7 @@
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
+@Config(constants = BuildConfig.class, qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastManagerTest {
     static final String EXTENSIONS_SNIPPET_PLACEHOLDER = "<![CDATA[EXTENSIONS_SNIPPET]]>";
     static final String TEST_VAST_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='progress' offset='00:00:03.100'>https://myTrackingURL/wrapper/progress</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='close'>https://myTrackingURL/wrapper/close</Tracking><Tracking event='skip'>https://myTrackingURL/wrapper/skip</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative><Creative AdID=\"601364-Companion\"> <CompanionAds><Companion width=\"9000\"></Companion> </CompanionAds></Creative></Creatives><![CDATA[EXTENSIONS_SNIPPET]]><Error><![CDATA[https://wrapperErrorTracker]]></Error></Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
index e1effa81..b8382612 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastMediaXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
index 01fcbe31..f745ce3b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
index fab514c3..8c4bbf55 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastResourceXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
index eeaace59..c3ac9844 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoBlurLastVideoFrameTaskTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.graphics.Bitmap;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
index 91b85528..1417fbae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCloseButtonWidgetTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
index 76639db5..7202c60c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoConfigTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
index 2943bfea..ad763084 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoCtaButtonWidgetTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
index 5d397b97..7c4088f9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoGradientStripWidgetTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
index 3efadc75..c0259e24 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
index d214c516..d1f60089 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoProgressBarWidgetTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
index e92e60c9..e3dca89c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoRadialCountdownWidgetTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 80435168..483fc0b3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -92,7 +96,7 @@
 import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowVastVideoView.class})
+@Config(constants = BuildConfig.class, qualifiers = "w800dp-h480dp", shadows = {ShadowVastVideoView.class})
 public class VastVideoViewControllerTest {
     public static final int NETWORK_DELAY = 100;
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
index fd69364c..3aed374a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewCountdownRunnableTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
index 4097331e..74312af1 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewProgressRunnableTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.content.Context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
index 30b8ccba..89120cbd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
index cec7dcad..2216ac2b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWebViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -8,6 +12,7 @@
 import android.webkit.WebView;
 
 import com.mopub.TestSdkHelper;
+import com.mopub.common.Constants;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.GestureUtils;
 import com.mopub.mobileads.test.support.VastUtils;
@@ -77,7 +82,7 @@ public void loadData_shouldCallLoadDataWithBaseURL() throws Exception {
 
         ShadowWebView.LoadDataWithBaseURL lastLoadData
                 = Shadows.shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
+        assertThat(lastLoadData.baseUrl).isEqualTo("http://" + Constants.HOST + "/");
         assertThat(lastLoadData.data).isEqualTo(data);
         assertThat(lastLoadData.mimeType).isEqualTo("text/html");
         assertThat(lastLoadData.encoding).isEqualTo("utf-8");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
index 0475625f..f489050f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastWrapperXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
index c7a9b243..5fea203b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerAggregatorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -40,8 +44,12 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowMoPubHttpUrlConnection.class})
+@Config(constants = BuildConfig.class, qualifiers = "w480dp-h800dp", shadows = {ShadowMoPubHttpUrlConnection.class})
 public class VastXmlManagerAggregatorTest {
+    // Default portrait screen width is 480, height is 800
+    private static final int DIM_SHORT = 480;
+    private static final int DIM_LONG = 800;
+
     static final String TEST_VAST_XML_STRING = "<VAST version='2.0'>" +
             "    <Ad id='empty'>" +
             "        <InLine>" +
@@ -281,7 +289,7 @@
             "    </Ad>" +
             "</VAST>";
 
-    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[https://badNestedError]]</Error]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
+    static final String TEST_VAST_BAD_NEST_URL_XML_STRING = "<VAST version='2.0'><Ad id='62833'><Wrapper><AdSystem>Tapad</AdSystem><VASTAdTagURI>https://dsp.x-team.staging.mopub.com/xml\"$|||</VASTAdTagURI><Impression>https://myTrackingURL/wrapper/impression1</Impression><Impression>https://myTrackingURL/wrapper/impression2</Impression><Creatives><Creative AdID='62833'><Linear><TrackingEvents><Tracking event='creativeView'>https://myTrackingURL/wrapper/creativeView</Tracking><Tracking event='start'>https://myTrackingURL/wrapper/start</Tracking><Tracking event='midpoint'>https://myTrackingURL/wrapper/midpoint</Tracking><Tracking event='firstQuartile'>https://myTrackingURL/wrapper/firstQuartile</Tracking><Tracking event='thirdQuartile'>https://myTrackingURL/wrapper/thirdQuartile</Tracking><Tracking event='complete'>https://myTrackingURL/wrapper/complete</Tracking><Tracking event='mute'>https://myTrackingURL/wrapper/mute</Tracking><Tracking event='unmute'>https://myTrackingURL/wrapper/unmute</Tracking><Tracking event='pause'>https://myTrackingURL/wrapper/pause</Tracking><Tracking event='resume'>https://myTrackingURL/wrapper/resume</Tracking><Tracking event='fullscreen'>https://myTrackingURL/wrapper/fullscreen</Tracking></TrackingEvents><VideoClicks><ClickTracking>https://myTrackingURL/wrapper/click</ClickTracking></VideoClicks></Linear></Creative></Creatives><Error>![CDATA[https://badNestedError]]</Error>]</Wrapper></Ad></VAST><MP_TRACKING_URLS><MP_TRACKING_URL>https://www.mopub.com/imp1</MP_TRACKING_URL><MP_TRACKING_URL>https://www.mopub.com/imp2</MP_TRACKING_URL></MP_TRACKING_URLS>";
 
     static final String TEST_JUST_ERROR_XML_STRING = "<VAST version='3.0'>" +
             "<Error><![CDATA[https://justErrorTracking?errorcode=[ERRORCODE]]]></Error>" +
@@ -356,8 +364,8 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         }).when(vastXmlManagerAggregatorListener).onAggregationComplete(any(VastVideoConfig.class));
 
         // Always assume landscape (where width > height) since videos will always be played in this orientation
-        int screenWidth = 800;
-        int screenHeight = 480;
+        int screenWidth = DIM_LONG;
+        int screenHeight = DIM_SHORT;
         double screenAspectRatio = (double) screenWidth / screenHeight;
         int screenArea = screenWidth * screenHeight;
         subject = new VastXmlManagerAggregator(vastXmlManagerAggregatorListener, screenAspectRatio,
@@ -410,7 +418,7 @@ public void doInBackground_shouldFollowMaxRedirectsMinusOne() throws Exception {
     }
 
     @Test
-    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
+    public void getBestMediaFileUrl_shouldReturnMediaFileUrl() {
         final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/mp4", "video_url");
 
         final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
@@ -418,7 +426,7 @@ public void getBestMediaFileUrl_shouldReturnMediaFileUrl() throws Exception {
     }
 
     @Test
-    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exception {
+    public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() {
         final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, null, "video_url");
 
         final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
@@ -426,7 +434,7 @@ public void getBestMediaFileUrl_withNullMediaType_shouldReturnNull() throws Exce
     }
 
     @Test
-    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() throws Exception {
+    public void getBestMediaFileUrl_withIncompatibleMediaType_shouldReturnNull() {
         final VastMediaXmlManager mediaXmlManager = initializeMediaXmlManagerMock(300, 250, "video/rubbish", "video_url");
 
         final String bestMediaFileUrl = subject.getBestMediaFileUrl(Arrays.asList(mediaXmlManager));
@@ -468,10 +476,9 @@ public void getBestMediaFileUrl_withNegativeDimension_shouldReturnNull() throws
 
     @Test
     public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Triple screen size
         final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
@@ -484,10 +491,9 @@ public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaClos
 
     @Test
     public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Triple screen size
         final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(2400, 1440, "video/mp4", "video_url1");
@@ -502,10 +508,9 @@ public void getBestMediaFileUrl_withSameAspectRatios_shouldReturnUrlWithAreaClos
 
     @Test
     public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Landscape
         final VastMediaXmlManager mediaXmlManager1 =
@@ -521,10 +526,9 @@ public void getBestMediaFileUrl_withSameArea_shouldReturnUrlWithAspectRatioClose
 
     @Test
     public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Invalid media type
         final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
@@ -539,10 +543,9 @@ public void getBestMediaFileUrl_withInvalidMediaTypeAndNullDimension_shouldRetur
 
     @Test
     public void getBestMediaFileUrl_withInvalidMediaTypeAndNullMediaType_shouldReturnNull() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         final VastMediaXmlManager mediaXmlManager1 = initializeMediaXmlManagerMock(800, 480, "video/invalid", "video_url1");
         final VastMediaXmlManager mediaXmlManager2 = initializeMediaXmlManagerMock(800,
@@ -610,10 +613,9 @@ public void getBestCompanionAd_withHeightTooSmall_shouldReturnNull() throws Exce
 
     @Test
     public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea1() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Triple screen size
         final VastCompanionAdXmlManager companionXmlManager1 =
@@ -630,10 +632,9 @@ public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithA
 
     @Test
     public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithAreaCloserToScreenArea2() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Triple screen size
         final VastCompanionAdXmlManager companionXmlManager1 =
@@ -650,10 +651,9 @@ public void getBestCompanionAd_withSameAspectRatios_shouldReturnCompanionAdWithA
 
     @Test
     public void getBestCompanionAd_withSameArea_shouldReturnLandscapeCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Landscape
         final VastCompanionAdXmlManager companionXmlManager1 =
@@ -670,10 +670,9 @@ public void getBestCompanionAd_withSameArea_shouldReturnLandscapeCompanionAdWith
 
     @Test
     public void getBestCompanionAd_withSameArea_shouldReturnPortraitCompanionAdWithAspectRatioCloserToScreenAspectRatio() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Landscape
         final VastCompanionAdXmlManager companionXmlManager1 =
@@ -738,10 +737,9 @@ public void getBestCompanionAd_withInvalidStaticResource_withValidHtmlResource_s
 
     @Test
     public void getBestCompanionAd_withCompanionAdTooSmall_shouldReturnCompanionAdWithAtLeastMinimumSize() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // 305 x 305 is both fewer pixels (screen area) and a worse aspect ratio. It still should be
         // chosen because 240 is not wide enough to be considered for a companion ad
@@ -880,16 +878,15 @@ public void evaluateVastXmlManager_withSocialActions_shouldKeepSocialActionsFrom
     @Test
     public void
     getScaledDimensions_withStaticResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 400,
                 VastResource.Type.STATIC_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
         assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
@@ -902,10 +899,9 @@ public void evaluateVastXmlManager_withSocialActions_shouldKeepSocialActionsFrom
 
     @Test
     public void getScaledDimensions_withStaticResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(400, 960,
@@ -924,10 +920,9 @@ public void getScaledDimensions_withStaticResource_withHeightLargerThanScreen_sh
 
     @Test
     public void getScaledDimensions_withStaticResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(
@@ -935,8 +930,8 @@ public void getScaledDimensions_withStaticResource_withWidthAndHeightEqualToScre
                 480 - VastVideoViewController.WEBVIEW_PADDING,
                 VastResource.Type.STATIC_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(
@@ -950,11 +945,10 @@ public void getScaledDimensions_withStaticResource_withWidthAndHeightEqualToScre
 
     @Test
     public void getScaledDimensions_withStaticResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(
                 Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 2,
@@ -973,10 +967,9 @@ public void getScaledDimensions_withStaticResource_withWidthAdjustedToLessThanZe
 
     @Test
     public void getScaledDimensions_withStaticResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(2, 960,
@@ -996,55 +989,52 @@ public void getScaledDimensions_withStaticResource_withHeightAdjustedToLessThanZ
     @Test
     public void getScaledDimensions_withHTMLResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight()
             throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 400,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
         assertThat(landscapePoint.y).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(960, 600,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.x).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
         assertThat(portraitPoint.y).isEqualTo(600 - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
     public void getScaledDimensions_withHTMLResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(400, 960,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
         assertThat(landscapePoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(400, 1600,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
         assertThat(portraitPoint.x).isEqualTo(400 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
     public void getScaledDimensions_withHTMLResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(
                 Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 2,
@@ -1063,10 +1053,9 @@ public void getScaledDimensions_withHTMLResource_withWidthAdjustedToLessThanZero
 
     @Test
     public void getScaledDimensions_withHTMLResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(2, 960,
@@ -1085,10 +1074,9 @@ public void getScaledDimensions_withHTMLResource_withHeightAdjustedToLessThanZer
 
     @Test
     public void getScaledDimensions_withHTMLResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(
@@ -1096,8 +1084,8 @@ public void getScaledDimensions_withHTMLResource_withWidthAndHeightEqualToScreen
                 480 - VastVideoViewController.WEBVIEW_PADDING,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(
@@ -1105,44 +1093,42 @@ public void getScaledDimensions_withHTMLResource_withWidthAndHeightEqualToScreen
                 800 - VastVideoViewController.WEBVIEW_PADDING,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.x).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
     public void getScaledDimensions_withHTMLResource_withWidthAndHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(5000, 5000,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(1337, 4200,
                 VastResource.Type.HTML_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.PORTRAIT);
-        assertThat(portraitPoint.x).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(portraitPoint.y).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.x).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(portraitPoint.y).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
     }
 
     @Test
     public void getScaledDimensions_withIFrameResource_withWidthLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 400,
                 VastResource.Type.IFRAME_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
         assertThat(landscapePoint.y).isEqualTo(200 - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
@@ -1155,10 +1141,9 @@ public void getScaledDimensions_withIFrameResource_withWidthLargerThanScreen_sho
 
     @Test
     public void getScaledDimensions_withIFrameResource_withHeightLargerThanScreen_shouldScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(400, 960,
@@ -1177,19 +1162,18 @@ public void getScaledDimensions_withIFrameResource_withHeightLargerThanScreen_sh
 
     @Test
     public void getScaledDimensions_withIFrameResource_withWidthAndHeightEqualToScreen_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(
-                800 - VastVideoViewController.WEBVIEW_PADDING,
-                480 - VastVideoViewController.WEBVIEW_PADDING,
+                DIM_LONG - VastVideoViewController.WEBVIEW_PADDING,
+                DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING,
                 VastResource.Type.IFRAME_RESOURCE,
                 VastXmlManagerAggregator.CompanionOrientation.LANDSCAPE);
-        assertThat(landscapePoint.x).isEqualTo(800 - VastVideoViewController.WEBVIEW_PADDING);
-        assertThat(landscapePoint.y).isEqualTo(480 - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.x).isEqualTo(DIM_LONG - VastVideoViewController.WEBVIEW_PADDING);
+        assertThat(landscapePoint.y).isEqualTo(DIM_SHORT - VastVideoViewController.WEBVIEW_PADDING);
 
         // Width and height are evaluated in portrait
         Point portraitPoint = subject.getScaledDimensions(
@@ -1203,11 +1187,10 @@ public void getScaledDimensions_withIFrameResource_withWidthAndHeightEqualToScre
 
     @Test
     public void getScaledDimensions_withIFrameResource_withWidthAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(
                 Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(1600, 2,
@@ -1226,10 +1209,9 @@ public void getScaledDimensions_withIFrameResource_withWidthAdjustedToLessThanZe
 
     @Test
     public void getScaledDimensions_withIFrameResource_withHeightAdjustedToLessThanZero_shouldNotScaleWidthAndHeight() throws Exception {
-        // Default screen width is 480, height is 800
         final Display display = ((WindowManager) context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay();
-        assertThat(display.getWidth()).isEqualTo(480);
-        assertThat(display.getHeight()).isEqualTo(800);
+        assertThat(display.getWidth()).isEqualTo(DIM_SHORT);
+        assertThat(display.getHeight()).isEqualTo(DIM_LONG);
 
         // Width and height are evaluated in landscape
         Point landscapePoint = subject.getScaledDimensions(2, 960,
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
index a2b0f541..f5675189 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
index 7b3ce325..2dd254ac 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoDownloaderTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
index 0a7acd72..fe84b16a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VideoViewabilityTrackerXmlManagerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index a284e863..75e85afe 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -20,7 +24,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;
 
 
@@ -37,8 +41,8 @@
     public void setUp() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
         view = mock(View.class);
-        stub(view.getWidth()).toReturn(320);
-        stub(view.getHeight()).toReturn(50);
+        when(view.getWidth()).thenReturn(320);
+        when(view.getHeight()).thenReturn(50);
 
         adAlertGestureListener = mock(AdAlertGestureListener.class);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 7ab409d2..45282c81 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.app.Activity;
@@ -32,6 +36,7 @@
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
@@ -50,8 +55,10 @@
 import org.robolectric.Robolectric;
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
+import org.robolectric.shadows.ShadowLooper;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
@@ -89,6 +96,7 @@
     private MoPubShadowTelephonyManager shadowTelephonyManager;
     private MoPubShadowConnectivityManager shadowConnectivityManager;
     private Activity context;
+    private Context spyApplicationContext;
     private MethodBuilder methodBuilder;
     private PersonalInfoManager mockPersonalInfoManager;
     private ConsentData mockConsentData;
@@ -101,6 +109,8 @@ public void setup() throws Exception {
         Shadows.shadowOf(context).grantPermissions(ACCESS_COARSE_LOCATION);
         Shadows.shadowOf(context).grantPermissions(READ_PHONE_STATE);
 
+        AsyncTasks.setExecutor(new RoboExecutorService());
+
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
         final DisplayMetrics mockDisplayMetrics = mock(DisplayMetrics.class);
@@ -126,7 +136,7 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
                 }
             }).when(mockDisplay).getRealSize(any(Point.class));
             when(mockWindowManager.getDefaultDisplay()).thenReturn(mockDisplay);
-            final Context spyApplicationContext = spy(context.getApplicationContext());
+            spyApplicationContext = spy(context.getApplicationContext());
             when(spyApplicationContext.getResources()).thenReturn(spyResources);
             when(spyApplicationContext.getPackageName()).thenReturn("testBundle");
             PackageManager mockPackageManager = mock(PackageManager.class);
@@ -208,6 +218,7 @@ public void generateAdUrl_shouldIncludeAllFields() throws Exception {
                 INIT_ADUNIT).withAdvancedBidder(
                 WebViewAdvancedBidder.class).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
+        ShadowLooper.runUiThreadTasks();
         MoPub.setAdvancedBiddingEnabled(true);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
@@ -945,7 +956,7 @@ public void generateAdUrl_whenLocationServiceNetworkProviderHasMostRecentLocatio
 
     @Test
     public void generateAdUrl_withNullPackageName_withEmptyPackageName_shouldNotIncludeBundleKey() {
-        when(context.getPackageName()).thenReturn(null).thenReturn("");
+        when(spyApplicationContext.getPackageName()).thenReturn(null).thenReturn("");
 
         final String adUrlNullPackageName = generateMinimumUrlString();
         final String adUrlEmptyPackageName = generateMinimumUrlString();
@@ -1051,7 +1062,7 @@ public String build() {
                     (TextUtils.isEmpty(latLon) ? "" :
                             "&ll=" + latLon + "&lla=" + locationAccuracy + "&llf=" + latLonLastUpdated) +
                     "&z=-0700" +
-                    "&o=u" +
+                    "&o=p" +
                     "&w=" + TEST_SCREEN_WIDTH +
                     "&h=" + TEST_SCREEN_HEIGHT +
                     "&sc=1.0" +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
index 02e3b6d9..85fdcc04 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewCacheServiceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
index 388ae73f..85c32371 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
index 86ca874d..e1ee3be0 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.factories;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
index ddaab4e5..6a8a28ba 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/FileUtils.java
@@ -1,7 +1,12 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.common.util.Streams;
 
+import java.io.ByteArrayInputStream;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
 
@@ -14,4 +19,12 @@ public static void copyFile(String sourceFile, String destinationFile) {
             throw new RuntimeException(e);
         }
     }
+
+    public static void writeBytesToFile(byte[] sourceBytes, String destinationFile) {
+        try {
+            Streams.copyContent(new ByteArrayInputStream(sourceBytes), new FileOutputStream(destinationFile));
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
index eeee2c93..d81c093c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/GestureUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.view.MotionEvent;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
index dae3c5f6..377f8119 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/JsonUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.common.util.Json;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
index b480d308..504a311f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.net.ConnectivityManager;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
index 7a4256e5..bda3fcbf 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowTelephonyManager.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.telephony.TelephonyManager;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
index b66c9708..6e02efac 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ShadowVastVideoView.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.mobileads.VastVideoView;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
index 6ca5f842..db33183d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
index b6301488..8a4b5d79 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
index ec88b419..ff3bdfca 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.mobileads.CustomEventBanner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
index a392ad53..71760cdc 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.common.AdReport;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
index 2ca47147..60120d2b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.mobileads.CustomEventInterstitial;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
index 84c91fc5..1caa7a60 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
@@ -9,20 +13,18 @@
 
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 
 public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
     private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
     private CustomEventBannerListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
     private String latestClickthroughUrl;
     private AdReport latestAdReport;
 
     public TestHtmlBannerWebViewFactory() {
         WebSettings webSettings = mock(WebSettings.class);
-        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
-        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
+        when(mockHtmlBannerWebView.getSettings()).thenReturn(webSettings);
+        when(webSettings.getUserAgentString()).thenReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
     }
 
     public static HtmlBannerWebView getSingletonMock() {
@@ -38,12 +40,8 @@ public HtmlBannerWebView internalCreate(
             Context context,
             AdReport adReport,
             CustomEventBannerListener customEventBannerListener,
-            boolean isScrollable,
-            String redirectUrl,
             String clickthroughUrl) {
         latestListener = customEventBannerListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
         latestClickthroughUrl = clickthroughUrl;
         latestAdReport = adReport;
         return mockHtmlBannerWebView;
@@ -53,14 +51,6 @@ public static CustomEventBannerListener getLatestListener() {
         return getTestFactory().latestListener;
     }
 
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
     public static String getLatestClickthroughUrl() {
         return getTestFactory().latestClickthroughUrl;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
index c9dc4c47..ccf13570 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
@@ -13,8 +17,6 @@
     private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
 
     private CustomEventInterstitialListener latestListener;
-    private boolean latestIsScrollable;
-    private String latestRedirectUrl;
     private String latestClickthroughUrl;
 
     public static HtmlInterstitialWebView getSingletonMock() {
@@ -26,10 +28,8 @@ private static TestHtmlInterstitialWebViewFactory getTestFactory() {
     }
 
     @Override
-    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
+    public HtmlInterstitialWebView internalCreate(Context context, AdReport adReport, CustomEventInterstitialListener customEventInterstitialListener, String clickthroughUrl) {
         latestListener = customEventInterstitialListener;
-        latestIsScrollable = isScrollable;
-        latestRedirectUrl = redirectUrl;
         latestClickthroughUrl = clickthroughUrl;
         return getTestFactory().mockHtmlInterstitialWebView;
     }
@@ -38,13 +38,6 @@ public static CustomEventInterstitialListener getLatestListener() {
         return getTestFactory().latestListener;
     }
 
-    public static boolean getLatestIsScrollable() {
-        return getTestFactory().latestIsScrollable;
-    }
-    public static String getLatestRedirectUrl() {
-        return getTestFactory().latestRedirectUrl;
-    }
-
     public static String getLatestClickthroughUrl() {
         return getTestFactory().latestClickthroughUrl;
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
index 971b61b2..ef37eaf9 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
index 511499fe..b8884546 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidControllerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
index 9ccbb2c9..03b83d77 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestVastManagerFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import android.content.Context;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
index 5d143b2f..037550e4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/ThreadUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 // note: keep this in test/support folder. this is not intended to be of Utility usage
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
index 088d6f22..6c3541d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/VastUtils.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.test.support;
 
 import com.mopub.mobileads.VastTracker;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
index 51cea646..ec6ba6d4 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/WebViewsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.util;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
index 61ac31e0..f2941422 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/util/XmlUtilsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mobileads.util;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index 6de66a89..c010145f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
index fdc71bda..6a6be844 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBridgeTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index 2554fe80..bc551486 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
@@ -89,7 +93,7 @@ public void setUp() {
         activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
 
         rootView = new FrameLayout(activity);
-        when(mockBridge.isVisible()).thenReturn(true);
+        when(mockBridge.isViewable()).thenReturn(true);
 
         // By default, immediately fulfill a screen metrics wait request. Individual tests can
         // reset this, if desired.
@@ -135,7 +139,7 @@ public void bridgeOnReady_shouldSetStateToDefault_shouldCallListener() {
 
     @Test
     public void handlePageLoad_shouldNotifyBridgeOfVisibilityPlacementScreenSizeAndSupports() {
-        when(mockBridge.isVisible()).thenReturn(true);
+        when(mockBridge.isViewable()).thenReturn(true);
 
         subject.handlePageLoad();
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
index 2744dc6e..c0a66b7a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
index 0bc60261..1f219605 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidNativeCommandHandlerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.Manifest;
@@ -7,6 +11,7 @@
 import android.content.Intent;
 import android.content.pm.PackageManager;
 import android.content.pm.ResolveInfo;
+import android.graphics.Bitmap;
 import android.os.Environment;
 import android.provider.CalendarContract;
 import android.support.annotation.NonNull;
@@ -16,8 +21,11 @@
 import android.widget.LinearLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Drawables;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
+import com.mopub.common.util.test.support.TestDrawables;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.FileUtils;
 import com.mopub.mraid.MraidNativeCommandHandler.DownloadImageAsyncTask;
@@ -43,6 +51,7 @@
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
+import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
@@ -53,7 +62,6 @@
 import static android.content.DialogInterface.BUTTON_POSITIVE;
 import static android.os.Environment.MEDIA_MOUNTED;
 import static com.mopub.mraid.MraidNativeCommandHandler.ANDROID_CALENDAR_CONTENT_TYPE;
-import static com.mopub.mraid.MraidNativeCommandHandler.MIME_TYPE_HEADER;
 import static java.io.File.separator;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -62,7 +70,6 @@
 import static org.mockito.Mockito.doAnswer;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -91,7 +98,10 @@ public void setUp() throws Exception {
         subject = new MraidNativeCommandHandler();
         context = Robolectric.buildActivity(Activity.class).create().get();
 
-        FileUtils.copyFile("etc/expectedFile.jpg", "/tmp/expectedFile.jpg");
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        TestDrawables.EXPECTED_FILE.getBitmap().compress(Bitmap.CompressFormat.JPEG, 100, baos);
+        FileUtils.writeBytesToFile(baos.toByteArray(), "/tmp/expectedFile.jpg");
+
         expectedFile = new File(Environment.getExternalStorageDirectory(), "Pictures" + separator + "expectedFile.jpg");
         pictureDirectory = new File(Environment.getExternalStorageDirectory(), "Pictures");
         fileWithoutExtension = new File(pictureDirectory, "file");
@@ -174,7 +184,7 @@ public void showUserDownloadImageAlert_whenCancelClicked_shouldDismissDialog_sho
     @Test
     public void downloadImageAsyncTask_doInBackground_shouldReturnTrueAndCreateFile() throws Exception {
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+                createHeaders(new Pair<String, String>("content-type", "image/jpg")));
 
         final DownloadImageAsyncTask downloadImageAsyncTask =
                 new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
@@ -191,8 +201,8 @@ public void downloadImageAsyncTask_doInBackground_shouldReturnTrueAndCreateFile(
     public void downloadImageAsyncTask_doInBackground_withLocationHeaderSet_shouldUseLocationHeaderAsFilename() throws Exception {
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
                 createHeaders(
-                        new Pair<String, String>("Content-Type", "image/jpg"),
-                        new Pair<String, String>("Location", "https://www.newhost.com/images/blah/file.wow")
+                        new Pair<>("content-type", "image/jpg"),
+                        new Pair<>("location", "https://www.newhost.com/images/blah/file.wow")
                 )
         );
 
@@ -225,7 +235,7 @@ public void downloadImageAsyncTask_doInBackground_withMissingMimeTypeHeaders_sho
     @Test
     public void downloadImageAsyncTask_doInBackground_withNullArray_shouldReturnFalseAndNotCreateFile() throws Exception {
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+                createHeaders(new Pair<String, String>("content-type", "image/jpg")));
 
         final DownloadImageAsyncTask downloadImageAsyncTask =
                 new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
@@ -240,7 +250,7 @@ public void downloadImageAsyncTask_doInBackground_withNullArray_shouldReturnFals
     @Test
     public void downloadImageAsyncTask_doInBackground_withEmptyArray_shouldReturnFalseAndNotCreateFile() throws Exception {
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+                createHeaders(new Pair<String, String>("content-type", "image/jpg")));
 
         final DownloadImageAsyncTask downloadImageAsyncTask =
                 new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
@@ -255,7 +265,7 @@ public void downloadImageAsyncTask_doInBackground_withEmptyArray_shouldReturnFal
     @Test
     public void downloadImageAsyncTask_doInBackground_withArrayContainingNull_shouldReturnFalseAndNotCreateFile() throws Exception {
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>("Content-Type", "image/jpg")));
+                createHeaders(new Pair<String, String>("content-type", "image/jpg")));
 
         final DownloadImageAsyncTask downloadImageAsyncTask =
                 new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
@@ -709,7 +719,7 @@ private static Context createMockContextWithSpecificIntentData(final String sche
         List<ResolveInfo> resolveInfos = new ArrayList<ResolveInfo>();
         resolveInfos.add(new ResolveInfo());
 
-        stub(context.getPackageManager()).toReturn(packageManager);
+        when(context.getPackageManager()).thenReturn(packageManager);
 
         BaseMatcher intentWithSpecificData = new BaseMatcher() {
             // check that the specific intent has the special data, i.e. "tel:", or a component name, or string type, based on a particular data
@@ -753,7 +763,7 @@ public void describeTo(Description description) {
         };
 
         // It is okay to query with specific intent or nothing, because by default, none of the query would normally any resolveInfo anyways
-        stub(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).toReturn(resolveInfos);
+        when(packageManager.queryIntentActivities((Intent) argThat(intentWithSpecificData), eq(0))).thenReturn(resolveInfos);
         return context;
     }
 
@@ -777,7 +787,7 @@ private void assertThatMimeTypeWasAddedCorrectly(String originalFileName, String
         expectedFile = new File(pictureDirectory, expectedFileName);
 
         ShadowMoPubHttpUrlConnection.addPendingResponse(200, FAKE_IMAGE_DATA,
-                createHeaders(new Pair<String, String>(MIME_TYPE_HEADER, contentType)));
+                createHeaders(new Pair<String, String>(ResponseHeader.CONTENT_TYPE.getKey(), contentType)));
 
         final DownloadImageAsyncTask downloadImageAsyncTask =
                 new DownloadImageAsyncTask(context, mockDownloadImageAsyncTaskListener);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
index ba9c96b0..56ce4176 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidVideoViewControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
index b69bf424..112f0776 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidWebViewClientTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
index e7f52cc2..310b8fd3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
index fd400db3..5ddd582e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/RewardedMraidInterstitialTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.mraid;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
index aa358452..14a9b0e4 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdRendererRegistryTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -13,6 +17,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.util.Collections;
+
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -34,8 +40,8 @@
     public void setUp() {
         context = Robolectric.buildActivity(Activity.class).create().get();
         subject = new AdRendererRegistry();
-        mNativeAd = new NativeAd(context, "impression", "click", "adunit",
-                mock(BaseNativeAd.class), mockRenderer);
+        mNativeAd = new NativeAd(context, Collections.singletonList("impression"), "click",
+                "adunit", mock(BaseNativeAd.class), mockRenderer);
         when(mockRenderer.supports(mockNativeAd)).thenReturn(true);
     }
 
@@ -94,4 +100,4 @@ public void getRendererForViewType_shouldReturnRendererSupportingNativeAd() {
     @Test
     public void getRendererForViewType_withNoSupportingRenderer_shouldReturnNull() {
     }
-}
\ No newline at end of file
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
index 32c3c858..fda7818f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/AdapterHelperTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
index a697fbb0..44b32f80 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/BaseNativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
index c11abba5..147ea1c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/CustomEventNativeAdapterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -34,12 +38,14 @@
     private HashMap<String, String> serverExtras;
     private AdResponse testAdResponse;
 
+    private CustomEventNativeAdapter subject;
+
     @Before
     public void setUp() throws Exception {
         context = new Activity();
 
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
+        localExtras = new HashMap<>();
+        serverExtras = new HashMap<>();
         serverExtras.put("key", "value");
 
         testAdResponse = new AdResponse.Builder()
@@ -53,38 +59,44 @@ public void setUp() throws Exception {
         mCustomEventNativeListener = mock(CustomEventNative.CustomEventNativeListener.class);
 
         mCustomEventNative = TestCustomEventNativeFactory.getSingletonMock();
+
+        subject = new CustomEventNativeAdapter(mCustomEventNativeListener);
     }
 
     @Test
-    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() throws Exception {
-        Map<String, Object> expectedLocalExtras = new HashMap<String, Object>();
+    public void loadNativeAd_withValidInput_shouldCallLoadNativeAdOnTheCustomEvent() {
+        Map<String, Object> expectedLocalExtras = new HashMap<>();
         expectedLocalExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(context, mCustomEventNativeListener, expectedLocalExtras, serverExtras);
+
+        subject.loadNativeAd(context, localExtras, testAdResponse);
+
+        verify(mCustomEventNative).loadNativeAd(eq(context), any(CustomEventNative.CustomEventNativeListener.class), eq(expectedLocalExtras), eq(serverExtras));
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
     }
 
     @Test
-    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() throws Exception {
+    public void loadNativeAd_withInvalidClassName_shouldNotifyListenerOfOnNativeAdFailedAndReturn() {
         testAdResponse = testAdResponse.toBuilder()
                 .setCustomEventClassName("com.mopub.baaad.invalidinvalid123143")
                 .build();
 
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
+        subject.loadNativeAd(context, localExtras, testAdResponse);
+
         verify(mCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_NOT_FOUND);
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
         verify(mCustomEventNative, never()).loadNativeAd(context, mCustomEventNativeListener, localExtras, serverExtras);
     }
 
     @Test
-    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() throws Exception {
+    public void loadNativeAd_withInvalidCustomEventNativeData_shouldNotAddToServerExtras() {
         testAdResponse = testAdResponse.toBuilder()
                 .setServerExtras(null)
                 .build();
 
-        CustomEventNativeAdapter.loadNativeAd(context, localExtras, testAdResponse, mCustomEventNativeListener);
-        verify(mCustomEventNative).loadNativeAd(eq(context), eq(mCustomEventNativeListener), eq(localExtras), eq(new HashMap<String, String>()));
+        subject.loadNativeAd(context, localExtras, testAdResponse);
+
+        verify(mCustomEventNative).loadNativeAd(eq(context), any(CustomEventNative.CustomEventNativeListener.class), eq(localExtras), eq(new HashMap<String, String>()));
         verify(mCustomEventNativeListener, never()).onNativeAdFailed(any(NativeErrorCode.class));
         verify(mCustomEventNativeListener, never()).onNativeAdLoaded(any(BaseNativeAd.class));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
index 3c8b540f..c0735c2c 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/HttpDiskCompositeDataSourceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
index 0a0b0d71..47c05e36 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ImpressionTrackerTest.java
@@ -1,9 +1,15 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.os.Handler;
 import android.view.View;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.VisibilityTracker;
+import com.mopub.common.VisibilityTrackerTest;
 import com.mopub.mobileads.BuildConfig;
 
 import org.fest.util.Lists;
@@ -17,7 +23,7 @@
 
 import java.util.HashMap;
 
-import static com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
+import static com.mopub.common.VisibilityTracker.VisibilityChecker;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
index 9573d1f8..b83cb108 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MediaLayoutTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.annotation.SuppressLint;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
index 669006f8..c3367dcc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubAdAdapterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -12,6 +16,7 @@
 import android.widget.ListView;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
index 7339313b..399d7865 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubClientPositioningTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import com.mopub.common.Preconditions.NoThrow;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index 94dd5518..f0fa5cd7 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
index b27cfb92..48fa53fd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -59,12 +63,12 @@ public void setUp() throws Exception {
         localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
 
         serverExtras = new HashMap<String, String>();
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "100");
-        serverExtras.put("Max-Buffer-Ms", "20");
-        serverExtras.put("Video-Trackers", "{" +
+        serverExtras.put("play-visible-percent", "10");
+        serverExtras.put("pause-visible-percent", "5");
+        serverExtras.put("impression-min-visible-percent", "15");
+        serverExtras.put("impression-visible-ms", "100");
+        serverExtras.put("max-buffer-ms", "20");
+        serverExtras.put("video-trackers", "{" +
                 "urls: [" +
                     "\"http://mopub.com/%%VIDEO_EVENT%%/foo\"," +
                     "\"http://mopub.com/%%VIDEO_EVENT%%/bar\"" +
@@ -98,7 +102,7 @@ public void loadNativeAd_withJsonNotInstanceOfJSONObject_shouldNotifyListenerOnN
 
     @Test
     public void loadNativeAd_withInvalidHeaders_shouldNotifyListenerOnNativeAdFailed() {
-        serverExtras.put("Play-Visible-Percent", "not_a_number");
+        serverExtras.put("play-visible-percent", "not_a_number");
         subject.loadNativeAd(context, mockCustomEventNativeListener, localExtras, serverExtras);
 
         verify(mockCustomEventNativeListener).onNativeAdFailed(NativeErrorCode.INVALID_RESPONSE);
@@ -187,38 +191,38 @@ public void VideoResponseHeaders_constructor_withValidJson_shouldSetVideoTracker
 
     @Test
     public void VideoResponseHeaders_constructor_withInvalidNumberString_withInvalidJson_shouldSetHeadersAreValidToFalse() {
-        serverExtras.put("Play-Visible-Percent", "not_a_number");
+        serverExtras.put("play-visible-percent", "not_a_number");
         VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
 
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "not_a_number");
+        serverExtras.put("play-visible-percent", "10");
+        serverExtras.put("pause-visible-percent", "not_a_number");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
 
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "not_a_number");
+        serverExtras.put("pause-visible-percent", "5");
+        serverExtras.put("impression-min-visible-percent", "not_a_number");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
 
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "not_a_number");
+        serverExtras.put("impression-min-visible-percent", "15");
+        serverExtras.put("impression-visible-ms", "not_a_number");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
 
-        serverExtras.put("Impression-Visible-Ms", "100");
-        serverExtras.put("Max-Buffer-Ms", "not_a_number");
+        serverExtras.put("impression-visible-ms", "100");
+        serverExtras.put("max-buffer-ms", "not_a_number");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isFalse();
 
-        serverExtras.put("Max-Buffer-Ms", "20");
+        serverExtras.put("max-buffer-ms", "20");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
         assertThat(videoResponseHeaders.hasValidHeaders()).isTrue();
     }
 
     @Test
     public void VideoResponseHeaders_constructor_withInvalidJson_shouldSetVideoTrackersToNull() throws Exception {
-        serverExtras.put("Video-Trackers", "not_a_json_object");
+        serverExtras.put("video-trackers", "not_a_json_object");
         VideoResponseHeaders videoResponseHeaders = new VideoResponseHeaders(serverExtras);
 
         assertThat(videoResponseHeaders.getVideoTrackers()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 919a1cfc..31176dc6 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -7,8 +11,8 @@
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.Reflection;
-import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MoPubErrorCode;
@@ -29,8 +33,10 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLog;
+import org.robolectric.shadows.ShadowLooper;
 
 import java.net.MalformedURLException;
 import java.util.List;
@@ -51,7 +57,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {ShadowAsyncTasks.class})
+@Config(constants = BuildConfig.class)
 public class MoPubNativeTest {
     private MoPubNative subject;
     private MethodBuilder methodBuilder;
@@ -66,7 +72,10 @@
     @Before
     public void setup() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        AsyncTasks.setExecutor(new RoboExecutorService());
         MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit").build(), null);
+        ShadowLooper.runUiThreadTasks();
+
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(INTERNET);
@@ -115,15 +124,15 @@ public void loadNativeAd_shouldReturnFast() {
 
     @Test
     public void requestNativeAd_shouldFireNetworkRequest() {
-        subject.requestNativeAd("https://www.mopub.com");
+        subject.requestNativeAd("https://www.mopub.com", null);
 
         verify(mockNetworkListener, never()).onNativeFail(any(NativeErrorCode.class));
         verify(mockRequestQueue).add(argThat(isUrl("https://www.mopub.com")));
     }
 
     @Test
-    public void requestNativeAd_whenReqeustQueueDeliversUnknownError_shouldFireNativeFail() {
-
+    public void requestNativeAd_whenRequestQueueDeliversUnknownError_shouldFireNativeFail() {
+        reset(mockRequestQueue);
         when(mockRequestQueue.add(any(Request.class)))
                 .then(new Answer<Void>() {
                     @Override
@@ -132,7 +141,7 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
                         return null;
                     }
                 });
-        subject.requestNativeAd("//\\//\\::::");
+        subject.requestNativeAd("//\\//\\::::", null);
 
         verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
     }
@@ -141,7 +150,7 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
     public void requestNativeAd_withNullUrl_shouldFireNativeFail() {
         Robolectric.getForegroundThreadScheduler().pause();
 
-        subject.requestNativeAd(null);
+        subject.requestNativeAd(null, null);
 
         verify(mockNetworkListener).onNativeFail(any(NativeErrorCode.class));
         verify(mockRequestQueue, never()).add(any(Request.class));
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
index 444dd1f9..b40997fd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubRecyclerAdapterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -8,6 +12,7 @@
 import android.view.ViewGroup;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
index a7bae9ed..74357ecd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdRendererTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
@@ -29,7 +33,7 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -58,7 +62,7 @@
     public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+        when(mockImageContainer.getBitmap()).thenReturn(mock(Bitmap.class));
 
         when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index b6ed548e..3fcddac2 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -44,7 +48,7 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -77,7 +81,7 @@ public void setUp() throws Exception {
 
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+        when(mockImageContainer.getBitmap()).thenReturn(mock(Bitmap.class));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
index 92e3c62d..59112e1b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStreamAdPlacerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
index 02f53e1f..54e4543b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdRendererTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.graphics.Bitmap;
@@ -28,7 +32,7 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
+import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -57,7 +61,7 @@
     public void setUp() throws Exception {
         Networking.setRequestQueueForTesting(mockRequestQueue);
         Networking.setImageLoaderForTesting(mockImageLoader);
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+        when(mockImageContainer.getBitmap()).thenReturn(mock(Bitmap.class));
 
         when(relativeLayout.getId()).thenReturn((int) Utils.generateUniqueId());
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index c6daec57..5842a201 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -12,7 +16,9 @@
 import android.view.View;
 
 import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.VisibilityTracker;
 import com.mopub.mobileads.BaseVideoPlayerActivity;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.MraidVideoPlayerActivity;
@@ -66,9 +72,8 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -116,10 +121,10 @@ public void setUp() throws Exception {
         jsonObject.put("privacyclkurl", "piiclkurl");
 
         serverExtras = new HashMap<String, String>();
-        serverExtras.put("Play-Visible-Percent", "10");
-        serverExtras.put("Pause-Visible-Percent", "5");
-        serverExtras.put("Impression-Min-Visible-Percent", "15");
-        serverExtras.put("Impression-Visible-Ms", "100");
+        serverExtras.put(DataKeys.PLAY_VISIBLE_PERCENT, "10");
+        serverExtras.put(DataKeys.PAUSE_VISIBLE_PERCENT, "5");
+        serverExtras.put(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT, "15");
+        serverExtras.put(DataKeys.IMPRESSION_VISIBLE_MS, "100");
         serverExtras.put("Max-Buffer-Ms", "20");
         videoResponseHeaders = new VideoResponseHeaders(serverExtras);
 
@@ -153,7 +158,7 @@ public Void answer(final InvocationOnMock invocationOnMock) throws Throwable {
                 });
         when(mockMediaLayout.getTextureView()).thenReturn(mockTextureView);
 
-        stub(mockImageContainer.getBitmap()).toReturn(mock(Bitmap.class));
+        when(mockImageContainer.getBitmap()).thenReturn(mock(Bitmap.class));
         Networking.setImageLoaderForTesting(mockImageLoader);
         Networking.setRequestQueueForTesting(mockRequestQueue);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
index 413ef327..7611c852 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdSourceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.os.Handler;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
index bb12a011..b66536f3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -17,6 +21,8 @@
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -60,7 +66,7 @@ public void setUp() {
         when(mockBaseNativeAd.getClickTrackers()).thenReturn(clkUrls);
 
         subject = new NativeAd(activity,
-                "moPubImpressionTrackerUrl",
+                Arrays.asList("moPubImpressionTrackerUrl1", "moPubImpressionTrackerUrl2"),
                 "moPubClickTrackerUrl",
                 "adunit_id",
                 mockBaseNativeAd,
@@ -72,16 +78,16 @@ public void setUp() {
     @Test
     public void constructor_shouldSetNativeEventListener() {
         reset(mockBaseNativeAd);
-        subject = new NativeAd(activity, "moPubImpressionTrackerUrl", "moPubClickTrackerUrl",
-                "adunit_id", mockBaseNativeAd, mockRenderer);
+        subject = new NativeAd(activity, Collections.singletonList("moPubImpressionTrackerUrl"),
+                "moPubClickTrackerUrl", "adunit_id", mockBaseNativeAd, mockRenderer);
         verify(mockBaseNativeAd).setNativeEventListener(any(NativeEventListener.class));
     }
 
     @Test
     public void constructor_shouldMergeMoPubClickTrackerWithBaseNativeAdClickTrackers() {
         reset(mockRequestQueue);
-        subject = new NativeAd(activity, "", "moPubClickTrackerUrl", "", mockBaseNativeAd,
-                mockRenderer);
+        subject = new NativeAd(activity, Collections.singletonList(""), "moPubClickTrackerUrl", "",
+                mockBaseNativeAd, mockRenderer);
 
         subject.handleClick(null);
 
@@ -157,7 +163,8 @@ public void destroy_shouldCallIntoBaseNativeAdOnce() {
     @Test
     public void recordImpression_shouldRecordImpressionsOnce() {
         subject.recordImpression(mockView);
-        verify(mockRequestQueue).add(argThat(isUrl("moPubImpressionTrackerUrl")));
+        verify(mockRequestQueue).add(argThat(isUrl("moPubImpressionTrackerUrl1")));
+        verify(mockRequestQueue).add(argThat(isUrl("moPubImpressionTrackerUrl2")));
         verify(mockRequestQueue).add(argThat(isUrl("impUrl")));
         verify(mockEventListener).onImpression(mockView);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
index 4404ab8c..81d36c93 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeAdViewHelperTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
index 4de2593b..0c0ffadd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeClickHandlerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index b7590b34..b6ae889b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index ecc0fcf9..7e528afe 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -56,9 +60,9 @@
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class NativeUrlGeneratorTest {
-    public static final String AD_UNIT_ID = "1234";
-    private static final int TEST_SCREEN_WIDTH = 999;
-    private static final int TEST_SCREEN_HEIGHT = 888;
+    private static final String AD_UNIT_ID = "1234";
+    private static final int TEST_SCREEN_WIDTH = 320;
+    private static final int TEST_SCREEN_HEIGHT = 470;
     private static final float TEST_DENSITY = 1.0f;
     private Activity context;
     private NativeUrlGenerator subject;
@@ -96,7 +100,7 @@ public void setup() throws Exception {
             final Display mockDisplay = mock(Display.class);
             doAnswer(new Answer() {
                 @Override
-                public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
+                public Object answer(final InvocationOnMock invocationOnMock) {
                     final Point point = (Point) invocationOnMock.getArguments()[0];
                     point.x = TEST_SCREEN_WIDTH;
                     point.y = TEST_SCREEN_HEIGHT;
@@ -113,21 +117,25 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
         LocationService.clearLastKnownLocation();
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
     }
 
     @After
-    public void tearDown(){
+    public void tearDown() throws Exception {
         MoPubIdentifierTest.clearPreferences(context);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
-    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotSaveKeywords() throws Exception {
+    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotSaveKeywords() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         RequestParameters requestParameters = new RequestParameters.Builder()
                 .keywords("keywords")
@@ -139,13 +147,8 @@ public void requestParametersBuilder_whenKeywordsHaveBeenProvidedButNoUserConsen
     }
 
     @Test
-    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedAndUserConsent_shouldSaveKeywords() throws Exception {
+    public void requestParametersBuilder_whenKeywordsHaveBeenProvidedAndUserConsent_shouldSaveKeywords() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         RequestParameters requestParameters = new RequestParameters.Builder()
                 .keywords("keywords")
@@ -157,13 +160,8 @@ public void requestParametersBuilder_whenKeywordsHaveBeenProvidedAndUserConsent_
     }
 
     @Test
-    public void generateUrlString_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotUseKeywords() throws Exception {
+    public void generateUrlString_whenKeywordsHaveBeenProvidedButNoUserConsent_shouldNotUseKeywords() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         RequestParameters requestParameters = new RequestParameters.Builder()
                 .keywords("keywords")
@@ -178,13 +176,8 @@ public void generateUrlString_whenKeywordsHaveBeenProvidedButNoUserConsent_shoul
     }
 
     @Test
-    public void generateUrlString_whenKeywordsHaveBeenProvidedAndUserConsent_shouldUseKeywords() throws Exception {
+    public void generateUrlString_whenKeywordsHaveBeenProvidedAndUserConsent_shouldUseKeywords() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         RequestParameters requestParameters = new RequestParameters.Builder()
                 .keywords("keywords")
@@ -199,7 +192,7 @@ public void generateUrlString_whenKeywordsHaveBeenProvidedAndUserConsent_shouldU
     }
 
     @Test
-    public void generateUrlString_shouldIncludeDesiredAssetIfSet() throws Exception {
+    public void generateUrlString_shouldIncludeDesiredAssetIfSet() {
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
@@ -213,7 +206,7 @@ public void generateUrlString_shouldIncludeDesiredAssetIfSet() throws Exception
     }
 
     @Test
-    public void generateUrlString_shouldIncludeDesiredAssetsIfSet() throws Exception {
+    public void generateUrlString_shouldIncludeDesiredAssetsIfSet() {
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.of(RequestParameters.NativeAdAsset.TITLE, RequestParameters.NativeAdAsset.TEXT, RequestParameters.NativeAdAsset.ICON_IMAGE);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
@@ -227,15 +220,10 @@ public void generateUrlString_shouldIncludeDesiredAssetsIfSet() throws Exception
     }
 
     @Test
-    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNotSet() throws Exception {
+    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNotSet() {
         subject = new NativeUrlGenerator(context).withAdUnitId(AD_UNIT_ID);
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         String requestString = generateMinimumUrlString();
         List<String> desiredAssets = getDesiredAssetsListFromRequestUrlString(requestString);
@@ -244,7 +232,7 @@ public void generateUrlString_shouldNotIncludeDesiredAssetsIfNotSet() throws Exc
     }
 
     @Test
-    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() throws Exception {
+    public void generateUrlString_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() {
         EnumSet<RequestParameters.NativeAdAsset> assetsSet = EnumSet.noneOf(RequestParameters.NativeAdAsset.class);
         RequestParameters requestParameters = new RequestParameters.Builder().desiredAssets(assetsSet).build();
 
@@ -257,13 +245,8 @@ public void generateUrlString_shouldNotIncludeDesiredAssetsIfNoAssetsAreSet() th
     }
 
     @Test
-    public void generateUrlString_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() throws Exception {
+    public void generateUrlString_needsButDoesNotHaveReadPhoneState_shouldNotContainOperatorName() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         shadowTelephonyManager.setNeedsReadPhoneState(true);
         shadowTelephonyManager.setReadPhoneStatePermission(false);
@@ -300,13 +283,8 @@ public void generateUrlString_doesNotNeedReadPhoneState_shouldContainOperatorNam
     }
 
     @Test
-    public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+    public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
@@ -340,13 +318,8 @@ public void generateUrlString_whenLocationServiceGpsProviderHasMostRecentLocatio
     }
 
     @Test
-    public void generateUrlString_whenConsentIsFalse_shouldNotHaveLocationValue() throws Exception {
+    public void generateUrlString_whenConsentIsFalse_shouldNotHaveLocationValue() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
@@ -379,14 +352,9 @@ public void generateUrlString_whenConsentIsFalse_shouldNotHaveLocationValue() th
     }
 
     @Test
-    public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() throws Exception {
+    public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocationService_shouldUseDeveloperSuppliedLocation() {
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
@@ -421,13 +389,8 @@ public void generateUrlString_whenDeveloperSuppliesMoreRecentLocationThanLocatio
     }
 
     @Test
-    public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() throws Exception {
+    public void generateUrlString_whenLocationServiceNetworkProviderHasMostRecentLocation_shouldUseLocationServiceValue() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
-        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
-                .setStatic(MoPub.class)
-                .setAccessible()
-                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
-                .execute();
 
         Location locationFromDeveloper = new Location("");
         locationFromDeveloper.setLatitude(42);
@@ -470,10 +433,10 @@ public void generateUrlString_withOnlyAdUnitSet_shouldReturnMinimumUrl() {
                 "https://ads.mopub.com/m/ad?id=" +
                         AD_UNIT_ID +
                         "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
-                        "&dn=unknown%2Cunknown%2Cunknown" +
-                        "&bundle=testBundle" +
+                        "&dn=unknown%2Crobolectric%2Crobolectric" +
+                        "&bundle=com.mopub.mobileads" +
                         "&z=-0700" +
-                        "&o=u" +
+                        "&o=p" +
                         "&w=" +
                         TEST_SCREEN_WIDTH +
                         "&h=" +
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
index 7e41a369..7af0cb68 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
@@ -16,7 +20,9 @@
 import com.google.android.exoplayer2.ExoPlayer;
 import com.google.android.exoplayer2.ExoPlayer.ExoPlayerMessage;
 import com.google.android.exoplayer2.LoadControl;
+import com.google.android.exoplayer2.PlayerMessage;
 import com.google.android.exoplayer2.Renderer;
+import com.google.android.exoplayer2.Timeline;
 import com.google.android.exoplayer2.audio.MediaCodecAudioRenderer;
 import com.google.android.exoplayer2.source.MediaSource;
 import com.google.android.exoplayer2.trackselection.TrackSelector;
@@ -30,7 +36,7 @@
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable;
 import com.mopub.nativeads.NativeVideoController.NativeVideoProgressRunnable.ProgressListener;
 import com.mopub.nativeads.NativeVideoController.VisibilityTrackingEvent;
-import com.mopub.nativeads.VisibilityTracker.VisibilityChecker;
+import com.mopub.common.VisibilityTracker.VisibilityChecker;
 import com.mopub.network.MoPubRequestQueue;
 import com.mopub.network.Networking;
 import com.mopub.network.TrackingRequest;
@@ -234,15 +240,20 @@ public void getPlaybackState_withNonNullExoPlayer_shouldReturnExoPlayerState() {
     public void setAudioEnabled_withTrue_shouldSetVolumeOnExoPlayer() {
         subject.prepare(this);
         reset(mockExoPlayer);
+
+        PlayerMessage message = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(message);
+
         subject.setAudioEnabled(true);
 
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
+        ArgumentCaptor<MediaCodecAudioRenderer> captor = ArgumentCaptor.forClass(MediaCodecAudioRenderer.class);
+        verify(mockExoPlayer).createMessage(captor.capture());
 
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
-        assertThat(message.message).isEqualTo(1.0f);
+        PlayerMessage.Target target = captor.getValue();
+        assertThat(target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.getType()).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.getPayload()).isEqualTo(1.0f);
     }
 
     @Test
@@ -252,15 +263,19 @@ public void setAudioEnabled_withFalse_shouldDisableVolumeOnExoPlayer() {
         subject.setAudioEnabled(true);
         reset(mockExoPlayer);
 
+        PlayerMessage message = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(message);
+
         subject.setAudioEnabled(false);
 
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
+        ArgumentCaptor<MediaCodecAudioRenderer> captor = ArgumentCaptor.forClass(MediaCodecAudioRenderer.class);
+        verify(mockExoPlayer).createMessage(captor.capture());
 
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
-        assertThat(message.message).isEqualTo(0.0f);
+        PlayerMessage.Target target = captor.getValue();
+        assertThat(target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.getType()).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.getPayload()).isEqualTo(0.0f);
     }
 
     @Test
@@ -286,15 +301,19 @@ public void setAudioVolume_withAudioEnabled_shouldSetExoPlayerVolume() throws Ex
         subject.setAudioEnabled(true);
         reset(mockExoPlayer);
 
+        PlayerMessage message = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(message);
+
         subject.setAudioVolume(0.3f);
 
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
+        ArgumentCaptor<MediaCodecAudioRenderer> captor = ArgumentCaptor.forClass(MediaCodecAudioRenderer.class);
+        verify(mockExoPlayer).createMessage(captor.capture());
 
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecAudioRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_VOLUME);
-        assertThat(message.message).isEqualTo(0.3f);
+        MediaCodecAudioRenderer target = captor.getValue();
+        assertThat(target).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(message.getType()).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(message.getPayload()).isEqualTo(0.3f);
     }
 
     @Test
@@ -312,15 +331,19 @@ public void setTextureView_shouldSetTextureViewOnVideoProgressRunnable_shouldSet
         subject.prepare(this);
         reset(mockExoPlayer);
 
+        PlayerMessage message = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(message);
+
         subject.setTextureView(mockTextureView);
 
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
+        ArgumentCaptor<MediaCodecVideoRenderer> captor = ArgumentCaptor.forClass(MediaCodecVideoRenderer.class);
+        verify(mockExoPlayer).createMessage(captor.capture());
 
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
-        assertThat(message.message).isInstanceOf(Surface.class);
+        PlayerMessage.Target target = captor.getValue();
+        assertThat(target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.getType()).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.getPayload()).isInstanceOf(Surface.class);
     }
 
     @Test
@@ -332,20 +355,31 @@ public void prepare_shouldClearExistingPlayer() {
         reset(mockExoPlayer);
         reset(mockNativeVideoProgressRunnable);
         // This will clear the previous player
+
+        PlayerMessage.Sender mockSender = mock(PlayerMessage.Sender.class);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(new PlayerMessage(mockSender, null, Timeline.EMPTY, 0, null))
+                .thenReturn(new PlayerMessage(mockSender, null, Timeline.EMPTY, 0, null))
+                .thenReturn(new PlayerMessage(mockSender, null, Timeline.EMPTY, 0, null));
+
         subject.prepare(this);
 
         // Ensure the first two calls zero out the surface and disable audio
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer, atLeast(2)).sendMessages(captor.capture());
+        ArgumentCaptor<PlayerMessage.Target> targetCaptor = ArgumentCaptor.forClass(PlayerMessage.Target.class);
+        verify(mockExoPlayer, atLeast(2)).createMessage(targetCaptor.capture());
+
+        ArgumentCaptor<PlayerMessage> messageCaptor = ArgumentCaptor.forClass(PlayerMessage.class);
+        verify(mockSender, atLeast(2)).sendMessage(messageCaptor.capture());
 
-        List<ExoPlayerMessage> messages = captor.getAllValues();
+        List<PlayerMessage> messages = messageCaptor.getAllValues();
+        assertThat(messages.get(0).getType()).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(0).getPayload()).isNull();
+        assertThat(messages.get(1).getType()).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(1).getPayload()).isEqualTo(0f);
 
-        assertThat(messages.get(0).target).isInstanceOf(MediaCodecVideoRenderer.class);
-        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_SURFACE);
-        assertThat(messages.get(0).message).isNull();
-        assertThat(messages.get(1).target).isInstanceOf(MediaCodecAudioRenderer.class);
-        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_VOLUME);
-        assertThat(messages.get(1).message).isEqualTo(0f);
+        List<PlayerMessage.Target> targets = targetCaptor.getAllValues();
+        assertThat(targets.get(0)).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(targets.get(1)).isInstanceOf(MediaCodecAudioRenderer.class);
 
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
@@ -361,6 +395,12 @@ public void prepare_shouldPreparePlayer() {
                 any(TrackSelector.class),
                 any(LoadControl.class))
         ).thenReturn(mockExoPlayer);
+
+        PlayerMessage.Sender mockSender = mock(PlayerMessage.Sender.class);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(new PlayerMessage(mockSender, null, Timeline.EMPTY, 0, null))
+                .thenReturn(new PlayerMessage(mockSender, null, Timeline.EMPTY, 0, null));
+
         subject = createForId(123,
                 activity,
                 vastVideoConfig,
@@ -377,16 +417,21 @@ public void prepare_shouldPreparePlayer() {
         verify(mockExoPlayer).prepare(any(MediaSource.class));
 
         // set audio and surface
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer, times(2)).sendMessages(captor.capture());
+        ArgumentCaptor<PlayerMessage.Target> captor = ArgumentCaptor.forClass(PlayerMessage.Target.class);
+        verify(mockExoPlayer, times(2)).createMessage(captor.capture());
 
-        List<ExoPlayerMessage> messages = captor.getAllValues();
-        assertThat(messages.get(0).target).isInstanceOf(MediaCodecAudioRenderer.class);
-        assertThat(messages.get(0).messageType).isEqualTo(C.MSG_SET_VOLUME);
-        assertThat(messages.get(0).message).isEqualTo(0f);
-        assertThat(messages.get(1).target).isInstanceOf(MediaCodecVideoRenderer.class);
-        assertThat(messages.get(1).messageType).isEqualTo(C.MSG_SET_SURFACE);
-        assertThat(messages.get(1).message).isNull();
+        ArgumentCaptor<PlayerMessage> messageCaptor = ArgumentCaptor.forClass(PlayerMessage.class);
+        verify(mockSender, times(2)).sendMessage(messageCaptor.capture());
+
+        List<PlayerMessage> messages = messageCaptor.getAllValues();
+        assertThat(messages.get(0).getType()).isEqualTo(C.MSG_SET_VOLUME);
+        assertThat(messages.get(0).getPayload()).isEqualTo(0f);
+        assertThat(messages.get(1).getType()).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(messages.get(1).getPayload()).isNull();
+
+        List<PlayerMessage.Target> targets = captor.getAllValues();
+        assertThat(targets.get(0)).isInstanceOf(MediaCodecAudioRenderer.class);
+        assertThat(targets.get(1)).isInstanceOf(MediaCodecVideoRenderer.class);
 
         // play when ready
         verify(mockExoPlayer).setPlayWhenReady(false);
@@ -400,17 +445,23 @@ public void clear_shouldSetPlayWhenReadyFalse_shouldClearExistingPlayer() {
 
         reset(mockExoPlayer);
         reset(mockNativeVideoProgressRunnable);
+
+        PlayerMessage playerMessage = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(MediaCodecVideoRenderer.class)))
+                .thenReturn(playerMessage);
+
         subject.clear();
 
         verify(mockExoPlayer).setPlayWhenReady(false);
 
         // clear exo player
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
-        assertThat(message.message).isNull();
+        ArgumentCaptor<MediaCodecVideoRenderer> targetArgumentCaptor = ArgumentCaptor.forClass(MediaCodecVideoRenderer.class);
+        verify(mockExoPlayer).createMessage(targetArgumentCaptor.capture());
+        MediaCodecVideoRenderer messageTarget = targetArgumentCaptor.getValue();
+
+        assertThat(messageTarget).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(playerMessage.getType()).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(playerMessage.getPayload()).isNull();
 
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
@@ -423,15 +474,22 @@ public void release_withMatchingOwner_shouldClearExistingPlayer() {
 
         reset(mockExoPlayer);
         reset(mockNativeVideoProgressRunnable);
+
+        PlayerMessage message = new PlayerMessage(mock(PlayerMessage.Sender.class), null, Timeline.EMPTY, 0, null);
+        when(mockExoPlayer.createMessage(any(PlayerMessage.Target.class)))
+                .thenReturn(message);
+
+        // release should clear exo player here
         subject.release(this);
 
-        // clear exo player
-        ArgumentCaptor<ExoPlayerMessage> captor = ArgumentCaptor.forClass(ExoPlayerMessage.class);
-        verify(mockExoPlayer).sendMessages(captor.capture());
-        ExoPlayerMessage message = captor.getValue();
-        assertThat(message.target).isInstanceOf(MediaCodecVideoRenderer.class);
-        assertThat(message.messageType).isEqualTo(C.MSG_SET_SURFACE);
-        assertThat(message.message).isNull();
+        ArgumentCaptor<MediaCodecVideoRenderer> captor = ArgumentCaptor.forClass(MediaCodecVideoRenderer.class);
+        verify(mockExoPlayer).createMessage(captor.capture());
+        MediaCodecVideoRenderer target = captor.getValue();
+
+        assertThat(target).isInstanceOf(MediaCodecVideoRenderer.class);
+        assertThat(message.getType()).isEqualTo(C.MSG_SET_SURFACE);
+        assertThat(message.getPayload()).isNull();
+
         verify(mockExoPlayer).stop();
         verify(mockExoPlayer).release();
         verify(mockNativeVideoProgressRunnable).setExoPlayer(null);
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index f6580966..195db8cd 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
index 633d1c2b..f64e799a 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PlacementDataTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 
 
 package com.mopub.nativeads;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
index 79278d5d..fbb8194b 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/PositioningRequestTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
index bc5862a0..8dcdf12f 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/ServerPositioningSourceTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
index c4cf34fb..bd21e691 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
index 349dcf82..cabbb783 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/StaticNativeViewHolderTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
index 2b3eae82..0d6734dc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/VideoNativeAdTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
index 5db56a21..99860ed3 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/factories/CustomEventNativeFactoryTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads.factories;
 
 import com.mopub.common.test.support.SdkTestRunner;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
index 614254fc..ad212ad1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowBitmap.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads.test.support;
 
 import android.graphics.Bitmap;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
index 47ab9573..cb434f04 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/MoPubShadowDisplay.java
@@ -1,19 +1,28 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads.test.support;
 
 import android.graphics.Point;
+import android.hardware.display.DisplayManager;
+import android.util.DisplayMetrics;
 import android.view.Display;
 import android.view.Surface;
 
 import org.robolectric.annotation.Implementation;
 import org.robolectric.annotation.Implements;
 import org.robolectric.shadows.ShadowDisplay;
+import org.robolectric.shadows.ShadowDisplayManager;
 
 /* Our old version of Robolectric doesn't have the newer Display.class methods implemented. */
 @Implements(Display.class)
 public class MoPubShadowDisplay extends ShadowDisplay {
-
     public void getSize(Point size) {
-        size.set(getWidth(), getHeight());
+        Display display = getDefaultDisplay();
+        DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        size.set(metrics.widthPixels, metrics.heightPixels);
     }
 
     private static int sRotation = Surface.ROTATION_0;
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
index f8122bb9..1354ca69 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/test/support/TestCustomEventNativeFactory.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.nativeads.test.support;
 
 import android.support.annotation.NonNull;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
new file mode 100644
index 00000000..a71b9a17
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdLoaderTest.java
@@ -0,0 +1,295 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Request;
+import com.mopub.volley.RequestQueue;
+import com.mopub.volley.VolleyError;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.HashMap;
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class AdLoaderTest {
+    private static final String CONTENT_TYPE = "text/html; charset=UTF-8";
+    private static final String IMPTRACKER_URL = "imptracker_url";
+    private static final String BEFORE_LOAD_URL = "before_load_url";
+    private static final String AFTER_LOAD_URL = "after_load_url";
+    private static final String AFTER_LOAD_SUCCESS_URL = "after_load_success_url";
+    private static final String AFTER_LOAD_FAIL_URL = "after_load_fail_url";
+    private static final int REFRESH_TIME = 15;
+    private static final int HEIGHT = 50;
+    private static final int WIDTH = 320;
+
+    @Mock
+    private AdLoader.Listener mockListener;
+    @Mock
+    private MultiAdRequest mockMultiAdRequest;
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+
+    private Activity activity;
+    private final String adUnitId = "adUnitId";
+    private Map<String, String> headers;
+
+    private AdLoader subject;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        String url = "test-url";
+        subject = new AdLoader(url, AdFormat.BANNER, adUnitId, activity, mockListener);
+        headers = new HashMap<>();
+
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @After
+    public void teardown() {
+    }
+
+    @Test
+    public void constructor_initialStateValidation() throws NoSuchFieldException, IllegalAccessException {
+        assertThat(subject.isFailed()).isFalse();
+        assertThat(subject.isRunning()).isFalse();
+        assertThat(getPrivateField("mAdListener").get(subject)).isNotNull();
+        assertThat(getPrivateField("mContext").get(subject)).isNotNull();
+        assertThat(getPrivateField("mOriginalListener").get(subject)).isEqualTo(mockListener);
+        assertThat(getPrivateField("mMultiAdRequest").get(subject)).isNotNull();
+        assertThat(getPrivateField("mMultiAdResponse").get(subject)).isNull();
+        assertThat(getPrivateField("mLastDeliveredResponse").get(subject)).isNull();
+        assertThat(getPrivateField("mHandler").get(subject)).isNotNull();
+        assertThat(subject.hasMoreAds()).isTrue();
+    }
+
+    @Test
+    public void hasMoreAds_whenFailed_returnsFalse() throws NoSuchFieldException, IllegalAccessException {
+        // set AdLoader.failed=true;
+        Field field = getPrivateField("mFailed");
+        field.setBoolean(subject, true);
+
+        assertThat(subject.hasMoreAds()).isFalse();
+    }
+
+    @Test
+    public void hasMoreAds_makesCallsToMultiAdResponse() throws NoSuchFieldException, IllegalAccessException {
+        // set private AdLoader.mMultiAdResponse to mocked object
+        MultiAdResponse multiAdResponse = mock(MultiAdResponse.class);
+        Field fieldResponse = getPrivateField("mMultiAdResponse");
+        fieldResponse.set(subject, multiAdResponse);
+
+        subject.hasMoreAds();
+
+        verify(multiAdResponse).hasNext();
+        verify(multiAdResponse).isWaterfallFinished();
+    }
+
+    @Test
+    public void loadNextAd_whenRunning_returnsOldRequest() throws NoSuchFieldException, IllegalAccessException {
+        // set AdLoader.running = true;
+        Field field = getPrivateField("mRunning");
+        field.setBoolean(subject, true);
+        // get current subject.multiAdRequest
+        Field fieldRequest = getPrivateField("mMultiAdRequest");
+        MultiAdRequest origRequest = (MultiAdRequest) fieldRequest.get(subject);
+
+        MultiAdRequest request = (MultiAdRequest) subject.loadNextAd(null);
+        assertThat(origRequest == request).isTrue();
+    }
+
+    @Test
+    public void loadNextAd_whenFailed_callsHandler_OnErrorresponse() throws NoSuchFieldException, IllegalAccessException {
+        // set AdLoader.failed=true;
+        Field field = getPrivateField("mFailed");
+        field.setBoolean(subject, true);
+
+        subject.loadNextAd(null);
+
+        verify(mockListener).onErrorResponse(any(VolleyError.class));
+    }
+
+    @Test
+    public void deliverError_callsOriginalListenerOnErrorResponse() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+        // call private method AdLoader.deliverError()
+        Method methodDeliverError = getMethod("deliverError", new Class[]{VolleyError.class});
+        methodDeliverError.invoke(subject, mock(VolleyError.class));
+
+        verify(mockListener).onErrorResponse(any(VolleyError.class));
+    }
+
+    @Test
+    public void deliverResponse_callsOriginalListenerOnSuccess() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+        // call private method AdLoader.deliverResponse
+        Method deliverResponse = getMethod("deliverResponse", new Class[]{AdResponse.class});
+        deliverResponse.invoke(subject, mock(AdResponse.class));
+
+        verify(mockListener).onSuccess(any(AdResponse.class));
+    }
+
+    @Test
+    public void fetchAd_addsRequestToQueue() throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
+        // call private method AdLoader.fetchAd()
+        Method fetchMethod = getMethod("fetchAd", new Class[]{MultiAdRequest.class, Context.class});
+        Request<?> request = (Request<?>) fetchMethod.invoke(subject, mockMultiAdRequest, activity);
+
+        RequestQueue requestQueue = Networking.getRequestQueue();
+        verify(requestQueue).add(request);
+    }
+
+    @Test
+    public void oneAdResponseWaterfall_shouldSucceed() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject adResponseJson = createAdResponseJson("trackingUrl", "content_data");
+        byte[] body = createResponseBody(null, new JSONObject[]{adResponseJson});
+        NetworkResponse testResponse = new NetworkResponse(200, body, headers, false);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isFalse();
+    }
+
+    @Test
+    public void twoAdResponseWaterfall_shouldSucceed() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject adResponseJson1 = createAdResponseJson("trackingUrl1", "content_1");
+        JSONObject adResponseJson2 = createAdResponseJson("trackingUrl2", "content_2");
+        byte[] body = createResponseBody(null, new JSONObject[]{adResponseJson1, adResponseJson2});
+        NetworkResponse testResponse = new NetworkResponse(200, body, headers, false);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener, times(1)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        subject.loadNextAd(UNSPECIFIED);
+        verify(mockListener, times(2)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isFalse();
+    }
+
+    @Test
+    public void twoAdResponseWaterfall_validFailUrl_shouldSucceed() throws JSONException, MoPubNetworkError, NoSuchFieldException, IllegalAccessException {
+        JSONObject adResponseJson1 = createAdResponseJson("trackingUrl1", "content_1");
+        JSONObject adResponseJson2 = createAdResponseJson("trackingUrl2", "content_2");
+        byte[] body = createResponseBody("fail_url", new JSONObject[]{adResponseJson1, adResponseJson2});
+        NetworkResponse testResponse = new NetworkResponse(200, body, headers, false);
+        MultiAdResponse multiAdResponse = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        // set subject MultiAdResponse
+        Field field = getPrivateField("mMultiAdResponse");
+        field.set(subject, multiAdResponse);
+
+        // validation
+        assertThat(subject.hasMoreAds()).isTrue();
+        subject.loadNextAd(null);
+        verify(mockListener, times(1)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+
+        subject.loadNextAd(UNSPECIFIED);
+        verify(mockListener, times(2)).onSuccess(any(AdResponse.class));
+        assertThat(subject.hasMoreAds()).isTrue();
+    }
+
+    // -----------  utils  -----------
+    private static Field getPrivateField(final String name) throws NoSuchFieldException {
+        Field declaredField = AdLoader.class.getDeclaredField(name);
+        declaredField.setAccessible(true);
+        return declaredField;
+    }
+
+    private static Method getMethod(final String name, Class[] argClasses) throws NoSuchMethodException {
+        Method method = AdLoader.class.getDeclaredMethod(name, argClasses);
+        method.setAccessible(true);
+        return method;
+    }
+
+    // ----------- utils -------------
+    private static byte[] createResponseBody(String failURL, JSONObject[] adResponses) throws JSONException {
+        return createJsonBody(failURL, adResponses).toString().getBytes();
+    }
+
+    /**
+     * @param failURL     test value for failURL
+     * @param adRespArray ad response JSON for single creative
+     * @return JSON in the same format like it comes from the server
+     * @throws JSONException unlikely to happen
+     */
+    private static JSONObject createJsonBody(String failURL, JSONObject[] adRespArray) throws JSONException {
+        // array of JSON objects AdResponse
+        JSONArray adResponses = new JSONArray();
+        for (int i = 0; i < adRespArray.length; i++) {
+            adResponses.put(i, adRespArray[i]);
+        }
+
+        // whole response body
+        JSONObject jsonBody = new JSONObject();
+        jsonBody.put(ResponseHeader.FAIL_URL.getKey(), failURL);
+        jsonBody.put(ResponseHeader.AD_RESPONSES.getKey(), adResponses);
+        return jsonBody;
+    }
+
+    private static JSONObject createAdResponseJson(final String trackingUrl, final String content) throws JSONException {
+        JSONObject jsonAd = new JSONObject();
+        jsonAd.put(ResponseHeader.CONTENT.getKey(), content);
+        jsonAd.put(ResponseHeader.METADATA.getKey(), createMetadataJson(trackingUrl));
+        return jsonAd;
+    }
+
+    private static JSONObject createMetadataJson(final String trackingUrl) throws JSONException {
+        JSONObject metadata = new JSONObject();
+        metadata.put(ResponseHeader.CONTENT_TYPE.getKey(), CONTENT_TYPE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), "html");
+        metadata.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), trackingUrl);
+        metadata.put(ResponseHeader.IMPRESSION_URL.getKey(), IMPTRACKER_URL);
+        metadata.put(ResponseHeader.BEFORE_LOAD_URL.getKey(), BEFORE_LOAD_URL);
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), AFTER_LOAD_URL);
+        metadata.put(ResponseHeader.AFTER_LOAD_SUCCESS_URL.getKey(), AFTER_LOAD_SUCCESS_URL);
+        metadata.put(ResponseHeader.AFTER_LOAD_FAIL_URL.getKey(), AFTER_LOAD_FAIL_URL);
+        metadata.put(ResponseHeader.REFRESH_TIME.getKey(), REFRESH_TIME);
+        metadata.put(ResponseHeader.HEIGHT.getKey(), HEIGHT);
+        metadata.put(ResponseHeader.WIDTH.getKey(), WIDTH);
+        return metadata;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
deleted file mode 100644
index 8a774cc4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ /dev/null
@@ -1,734 +0,0 @@
-package com.mopub.network;
-
-import android.app.Activity;
-
-import com.mopub.common.AdFormat;
-import com.mopub.common.AdType;
-import com.mopub.common.DataKeys;
-import com.mopub.common.MoPub;
-import com.mopub.common.MoPub.BrowserAgent;
-import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.ResponseHeader;
-import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.NetworkResponse;
-import com.mopub.volley.Response;
-
-import org.json.JSONException;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.robolectric.Robolectric;
-import org.robolectric.annotation.Config;
-
-import java.nio.charset.Charset;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Locale;
-import java.util.Map;
-import java.util.TreeMap;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class AdRequestTest {
-
-    @Mock private AdRequest.Listener mockListener;
-    @Mock private AdResponse mockAdResponse;
-
-    private AdRequest subject;
-    private HashMap<String, String> defaultHeaders;
-    private Activity activity;
-    private String adUnitId;
-
-    @Before
-    public void setup() {
-        activity = Robolectric.buildActivity(Activity.class).create().get();
-        adUnitId = "testAdUnitId";
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, adUnitId, activity, mockListener);
-        defaultHeaders = new HashMap<String, String>();
-        defaultHeaders.put(ResponseHeader.SCROLLABLE.getKey(), "0");
-        defaultHeaders.put(ResponseHeader.REDIRECT_URL.getKey(), "redirect");
-        defaultHeaders.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "click_tracking");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_URL.getKey(), "impression");
-        defaultHeaders.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
-        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "30");
-        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "50%");
-        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "25");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "33%");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), "2000");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "1");
-        defaultHeaders.put(ResponseHeader.MAX_BUFFER_MS.getKey(), "1000");
-    }
-
-    @After
-    public void teardown() {
-        // Reset our locale for other tests.
-        Locale.setDefault(Locale.US);
-        MoPub.resetBrowserAgent();
-    }
-
-    @Test
-    public void parseNetworkResponse_stringBody_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-    }
-
-    @Test
-    public void parseNetworkResponse_withServerExtrasInResponseBody_shouldSucceed_shouldCombineServerExtras() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.HTML);
-        defaultHeaders.put(ResponseHeader.FULL_AD_TYPE.getKey(), "anything");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
-                "{customEventKey1: value1, customEventKey2: value2}");
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.SCROLLABLE_KEY)).isEqualToIgnoringCase("false");
-        assertThat(serverExtras.get(DataKeys.REDIRECT_URL_KEY)).isEqualToIgnoringCase("redirect");
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-
-        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
-        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
-    }
-
-    @Test
-    public void parseNetworkResponse_nonJsonStringBodyForNative_jsonParseShouldFail() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.BAD_BODY);
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeStatic_shouldSucceed() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_shouldCombineServerExtrasAndEventData() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_NAME.getKey(), "class name");
-        defaultHeaders.put(ResponseHeader.CUSTOM_EVENT_DATA.getKey(),
-                "{customEventKey1: value1, customEventKey2: value2}");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isEqualTo("50");
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isEqualTo("25");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("1");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-
-        assertThat(serverExtras.get("customEventKey1")).isEqualTo("value1");
-        assertThat(serverExtras.get("customEventKey2")).isEqualTo("value2");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNativeVideo_withInvalidValues_shouldSucceed_shouldParseNull() throws Exception {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
-        defaultHeaders.put(ResponseHeader.PLAY_VISIBLE_PERCENT.getKey(), "-1");
-        defaultHeaders.put(ResponseHeader.PAUSE_VISIBLE_PERCENT.getKey(), "101%");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PX.getKey(), "bob");
-        defaultHeaders.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), "XX%");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.PLAY_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.PAUSE_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isNull();
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("2000");
-        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PX)).isEqualTo("bob");
-        assertThat(serverExtras.get(DataKeys.MAX_BUFFER_MS)).isEqualTo("1000");
-    }
-
-
-    @Test
-    public void parseNetworkResponse_withWarmupHeaderTrue_shouldError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        defaultHeaders.put(ResponseHeader.WARMUP.getKey(), "1");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
-    }
-
-    @Test
-    public void parseNetworkResponse_withRefreshTime_shouldIncludeRefreshTimeInResult() {
-        defaultHeaders.put(ResponseHeader.REFRESH_TIME.getKey(), "13");
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getRefreshTimeMillis()).isEqualTo(13000);
-    }
-
-    @Test
-    public void parseNetworkResponse_withoutRefreshTime_shouldNotIncludeRefreshTime() {
-        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getRefreshTimeMillis()).isNull();
-    }
-    
-    @Test
-    public void parseNetworkResponse_withClearAdType_withRefreshTimeHeader_shouldErrorAndIncludeRefreshTime() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
-        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
-        assertThat(moPubNetworkError.getRefreshTimeMillis()).isEqualTo(30000);
-    }
-
-    @Test
-    public void parseNetworkResponse_withClearAdType_withNoRefreshTimeHeader_shouldErrorAndNotIncludeRefreshTime() {
-        defaultHeaders.remove(ResponseHeader.REFRESH_TIME.getKey());
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.CLEAR);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isInstanceOf(MoPubNetworkError.class);
-        final MoPubNetworkError moPubNetworkError = (MoPubNetworkError) response.error;
-        assertThat(moPubNetworkError.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
-        assertThat(moPubNetworkError.getRefreshTimeMillis()).isNull();
-    }
-
-    @Test
-    public void parseNetworkResponse_withBadJSON_shouldReturnError() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
-        NetworkResponse badNativeNetworkResponse = new NetworkResponse(200,
-                "{[abc}".getBytes(Charset.defaultCharset()),
-                defaultHeaders, false);
-        subject = new AdRequest("testUrl", AdFormat.NATIVE, "testAdUnitId", activity, mockListener);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(badNativeNetworkResponse);
-
-        assertThat(response.error).isNotNull();
-        assertThat(response.error.getCause()).isExactlyInstanceOf(JSONException.class);
-    }
-
-    @Test
-    public void parseNetworkResponse_forRewardedAds_shouldSucceed() {
-        defaultHeaders.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_NAME.getKey(), "currencyName");
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_CURRENCY_AMOUNT.getKey(), "25");
-
-        final String rewardedCurrenciesJson = "{\"rewards\": ["
-                + "{\"name\": \"Coins\", \"amount\": 8},"
-                + "{\"name\": \"Diamonds\", \"amount\": 1},"
-                + "{\"name\": \"Diamonds\", \"amount\": 10 },"
-                + "{\"name\": \"Energy\", \"amount\": 20}"
-                + "]}";
-        defaultHeaders.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), rewardedCurrenciesJson);
-
-        defaultHeaders.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
-                "http://completionUrl");
-        defaultHeaders.put(ResponseHeader.REWARDED_DURATION.getKey(), "15000");
-        defaultHeaders.put(ResponseHeader.SHOULD_REWARD_ON_CLICK.getKey(), "1");
-        NetworkResponse testResponse = new NetworkResponse(200,
-                "{\"abc\": \"def\"}".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
-        assertThat(response.result.getRewardedVideoCurrencyName()).isEqualTo("currencyName");
-        assertThat(response.result.getRewardedVideoCurrencyAmount()).isEqualTo("25");
-        assertThat(response.result.getRewardedCurrencies()).isEqualTo(rewardedCurrenciesJson);
-        assertThat(response.result.getRewardedVideoCompletionUrl()).isEqualTo(
-                "http://completionUrl");
-        assertThat(response.result.getRewardedDuration()).isEqualTo(15000);
-        assertThat(response.result.shouldRewardOnClick()).isTrue();
-    }
-
-    @Test
-    public void parseNetworkResponse_withInAppBrowserAgent_shouldSucceed() {
-        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "0");
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-    }
-
-    @Test
-    public void parseNetworkResponse_withNativeBrowserAgent_shouldSucceed() {
-        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "1");
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.NATIVE);
-    }
-
-    @Test
-    public void parseNetworkResponse_withNullBrowserAgent_shouldDefaultToInApp() {
-        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), null);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-    }
-
-    @Test
-    public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp() {
-        defaultHeaders.put(ResponseHeader.BROWSER_AGENT.getKey(), "foo");
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-    }
-
-    @Test
-    public void parseNetworkResponse_forBannerAdFormat_withoutImpTrackingHeaders_shouldSucceed() {
-        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
-    }
-
-    @Test
-    public void parseNetworkResponse_forBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldStoreHeadersInServerExtras() {
-        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
-        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
-
-        subject = new AdRequest("testUrl", AdFormat.BANNER, "testAdUnitId", activity, mockListener);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEqualTo("1");
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEqualTo("0");
-    }
-
-    @Test
-    public void parseNetworkResponse_forNonBannerAdFormat_withImpTrackingHeaders_shouldSucceed_shouldIgnoreHeaders() {
-        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), "1");
-        defaultHeaders.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), "0");
-
-        // Non-banner AdFormat
-        subject = new AdRequest("testUrl", AdFormat.INTERSTITIAL, "testAdUnitId", activity,
-                mockListener);
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, "abc".getBytes(Charset.defaultCharset()), defaultHeaders,
-                        false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-
-        assertThat(response.result).isNotNull();
-        assertThat(response.result.getStringBody()).isEqualTo("abc");
-
-        // Check the server extras
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras).isNotNull();
-        assertThat(serverExtras).isNotEmpty();
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isNull();
-        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isNull();
-    }
-
-    public void parsetNetworkResponse_withAdvancedBiddingBanner_shouldCreateAdResponse() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": [{\n" +
-                "\t\t\"adm\": \"adm\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"1320352438048021_1377881765628421\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
-                "\t\t\t\"X-Width\": 320,\n" +
-                "\t\t\t\"X-Height\": 50,\n" +
-                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
-                "\t\t}\n" +
-                "\t}]\n" +
-                "}";
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
-        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
-        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
-        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
-        assertThat(response.result.getHeight()).isEqualTo(50);
-        assertThat(response.result.getWidth()).isEqualTo(320);
-        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
-        assertThat(serverExtras.get("placement_id")).isEqualTo("1320352438048021_1377881765628421");
-    }
-
-    @Test
-    public void parsetNetworkResponse_withAdvancedBiddingInterstitial_shouldCreateAdResponse() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": [{\n" +
-                "\t\t\"adm\": \"adm\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"506317839546454_509738309204407\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
-                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl\",\n" +
-                "\t\t\t\"X-Orientation\": \"p\"\n" +
-                "\t\t}\n" +
-                "\t}]\n" +
-                "}";
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
-        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
-        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
-        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
-        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-        assertThat(serverExtras.get(DataKeys.CREATIVE_ORIENTATION_KEY)).isNull();
-        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
-        assertThat(serverExtras.get("placement_id")).isEqualTo("506317839546454_509738309204407");
-    }
-
-    @Test
-    public void parsetNetworkResponse_withAdvancedBiddingRewardedVideo_shouldCreateAdResponse() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": [{\n" +
-                "\t\t\"adm\": \"adm\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"921244177968627_1427142827378757\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
-                "\t\t\t\"X-Width\": 480,\n" +
-                "\t\t\t\"X-Height\": 320,\n" +
-                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl\",\n" +
-                "\t\t\t\"X-Rewarded-Currencies\": \"{\\\"rewards\\\":[{\\\"amount\\\":7,\\\"name\\\":\\\"Coins\\\"}]}\",\n" +
-                "\t\t\t\"X-Rewarded-Duration\": 33\n" +
-                "\t\t}\n" +
-                "\t}]\n" +
-                "}";
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
-        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
-        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
-        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
-        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
-        assertThat(response.result.getWidth()).isEqualTo(480);
-        assertThat(response.result.getHeight()).isEqualTo(320);
-        assertThat(response.result.shouldRewardOnClick()).isFalse();
-        assertThat(response.result.getRewardedCurrencies()).isEqualTo("{\"rewards\":[{\"amount\":7,\"name\":\"Coins\"}]}");
-        assertThat(response.result.getRewardedDuration()).isEqualTo(33);
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
-        assertThat(serverExtras.get("placement_id")).isEqualTo("921244177968627_1427142827378757");
-    }
-
-    @Test
-    public void parsetNetworkResponse_withAdvancedBiddingNative_shouldCreateAdResponse() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": [{\n" +
-                "\t\t\"adm\": \"adm\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"619633174799370_623762807719740\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
-                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
-                "\t\t}\n" +
-                "\t}]\n" +
-                "}";
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers, false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
-        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
-        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
-        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
-        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
-        assertThat(serverExtras.get("placement_id")).isEqualTo("619633174799370_623762807719740");
-    }
-
-    @Test
-    public void prepareNetworkResponse_withTwoAdResponses_shouldCreateAdResponseForFirstAd() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": [{\n" +
-                "\t\t\"adm\": \"adm\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"619633174799370_623762807719740\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking\",\n" +
-                "\t\t\t\"X-Imptracker\": \"impression\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl\"\n" +
-                "\t\t}\n" +
-                "\t}," +
-                "\t{" +
-                "\t\t\"adm\": \"adm2\",\n" +
-                "\t\t\"body\": \"custom selector:\",\n" +
-                "\t\t\"headers\": {\n" +
-                "\t\t\t\"X-Custom-Event-Class-Name\": \"class.name2\",\n" +
-                "\t\t\t\"X-Custom-Event-Class-Data\": \"{\\\"placement_id\\\":\\\"2\\\"}\",\n" +
-                "\t\t\t\"X-Adtype\": \"custom\",\n" +
-                "\t\t\t\"X-Clickthrough\": \"click_tracking2\",\n" +
-                "\t\t\t\"X-Imptracker\": \"impression2\",\n" +
-                "\t\t\t\"X-Failurl\": \"failurl2\"\n" +
-                "\t\t}\n" +
-                "}]" +
-                "}";
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers,
-                        false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.result.getBrowserAgent()).isEqualTo(BrowserAgent.IN_APP);
-        assertThat(response.result.getCustomEventClassName()).isEqualTo("class.name");
-        assertThat(response.result.getAdType()).isEqualTo(AdType.CUSTOM);
-        assertThat(response.result.getClickTrackingUrl()).isEqualTo("click_tracking");
-        assertThat(response.result.getFailoverUrl()).isEqualTo("failurl");
-        assertThat(response.result.getImpressionTrackingUrl()).isEqualTo("impression");
-        final Map<String, String> serverExtras = response.result.getServerExtras();
-        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase("click_tracking");
-        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualToIgnoringCase("adm");
-        assertThat(serverExtras.get("placement_id")).isEqualTo("619633174799370_623762807719740");
-    }
-
-    @Test
-    public void prepareNetworkResponse_withZeroAdResponses_shouldReturnFailureResponse() {
-        final Map<String, String> headers = new HashMap<String, String>();
-        headers.put(ResponseHeader.AD_RESPONSE_TYPE.getKey(), "multi");
-
-        String jsonResponse = "{\n" +
-                "\t\"ad-responses\": []\n" +
-                "}";
-
-        NetworkResponse testResponse =
-                new NetworkResponse(200, jsonResponse.getBytes(Charset.defaultCharset()), headers,
-                        false);
-
-        final Response<AdResponse> response = subject.parseNetworkResponse(testResponse);
-        assertThat(response.error).isNotNull();
-        assertThat(response.error).isExactlyInstanceOf(MoPubNetworkError.class);
-        assertThat(((MoPubNetworkError) response.error).getReason()).isEqualTo(
-                MoPubNetworkError.Reason.BAD_HEADER_DATA);
-    }
-
-    @Test
-    public void deliverResponse_shouldCallListenerOnSuccess() throws Exception {
-        subject.deliverResponse(mockAdResponse);
-        verify(mockListener).onSuccess(mockAdResponse);
-    }
-
-    @Test
-    public void getRequestId_shouldParseAndReturnRequestIdFromFailUrl() throws Exception {
-        String requestId = subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca&exclude=043fde1fe2f9470c9aa67fec262a0596&request_id=7fd6dd3bf1c84f87876b4740c1dd7baa&fail=1");
-
-        assertThat(requestId).isEqualTo("7fd6dd3bf1c84f87876b4740c1dd7baa");
-    }
-
-    @Test
-    public void getRequestId_withNullFailUrl_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId(null)).isNull();
-    }
-
-    @Test
-    public void getRequestId_withUrlWithNoRequestIdParam_shouldReturnNull() throws Exception {
-        assertThat(subject.getRequestId("https://ads.mopub.com/m/ad?id=8cf00598d3664adaaeccd800e46afaca")).isNull();
-    }
-
-    @Test
-    public void getHeaders_withDefaultLocale_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLocale_shouldReturnUserPreferredLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "fr");
-
-        // Assume user-preferred locale is fr_CA
-        activity.getResources().getConfiguration().locale = Locale.CANADA_FRENCH;
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLocaleAsNull_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        // Assume user-preferred locale is null
-        activity.getResources().getConfiguration().locale = null;
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withUserPreferredLanguageAsEmptyString_shouldReturnDefaultLanguageCode() throws Exception {
-        Map<String, String> expectedHeaders = new TreeMap<String, String>();
-        expectedHeaders.put(ResponseHeader.ACCEPT_LANGUAGE.getKey(), "en");
-
-        // Assume user-preferred locale's language code is empty string after trimming
-        activity.getResources().getConfiguration().locale = new Locale(" ");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-
-    @Test
-    public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeader() throws Exception {
-        Map<String, String> expectedHeaders = Collections.emptyMap();
-
-        // Assume default locale's language code is empty string
-        Locale.setDefault(new Locale(""));
-
-        // Assume user-preferred locale's language code is empty string after trimming
-        activity.getResources().getConfiguration().locale = new Locale(" ");
-
-        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java b/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java
new file mode 100644
index 00000000..91341329
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/ContentDownloadAnalyticsTest.java
@@ -0,0 +1,178 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+import android.app.Activity;
+
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MoPubErrorCode;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.List;
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.reset;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class ContentDownloadAnalyticsTest {
+    private static final List<String> AFTER_LOAD_URLS =
+            Arrays.asList("https://ads.mopub.com/m/load?load_duration_ms=%%LOAD_DURATION_MS%%&load_result=%%LOAD_RESULT%%");
+
+    private static final List<String> AFTER_LOAD_SUCCESS_URLS =
+            Arrays.asList("https://ads.mopub.com/m/load?load_duration_ms=%%LOAD_DURATION_MS%%&load_result=%%LOAD_RESULT%%");
+
+    private static final List<String> AFTER_LOAD_FAIL_URLS =
+            Arrays.asList("https://ads.mopub.com/m/load?load_duration_ms=%%LOAD_DURATION_MS%%&load_result=%%LOAD_RESULT%%");
+
+    @Mock
+    private MoPubRequestQueue mockRequestQueue;
+    @Mock
+    private AdResponse mockAdResponse;
+    @Mock
+    private AdResponse mockInvalidAdResponse;
+
+    private Activity activity;
+    private ContentDownloadAnalytics subject;
+
+    @Before
+    public void setup() {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        when(mockAdResponse.getBeforeLoadUrl()).thenReturn("before_load_url");
+        when(mockAdResponse.getAfterLoadUrls()).thenReturn(AFTER_LOAD_URLS);
+        when(mockAdResponse.getAfterLoadSuccessUrls()).thenReturn(AFTER_LOAD_SUCCESS_URLS);
+        when(mockAdResponse.getAfterLoadFailUrls()).thenReturn(AFTER_LOAD_FAIL_URLS);
+        Networking.setRequestQueueForTesting(mockRequestQueue);
+    }
+
+    @Test
+    public void reportBeforeLoad_withValidAdResponse_shouldAddRequestToNetworkQueue(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+
+        subject.reportBeforeLoad(activity);
+
+        assertThat(subject.mBeforeLoadTime).isNotZero();
+        ArgumentCaptor<MoPubRequest> reqeustCaptor = ArgumentCaptor.forClass(MoPubRequest.class);
+        verify(mockRequestQueue).add(reqeustCaptor.capture());
+        MoPubRequest moPubRequest = reqeustCaptor.getValue();
+        assertThat(moPubRequest.getOriginalUrl()).isEqualTo("before_load_url");
+    }
+
+    @Test
+    public void reportBeforeLoad_withEmptyUrl_shouldNotSendRequest(){
+        subject = new ContentDownloadAnalytics(mockInvalidAdResponse);
+
+        subject.reportBeforeLoad(activity);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+        assertThat(subject.mBeforeLoadTime).isNull();
+    }
+
+    @Test
+    public void reportAfterLoad_withValidAdResponse_withNoError_shouldSendNoErrorRequest(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+        subject.reportBeforeLoad(activity);
+        reset(mockRequestQueue);
+
+        subject.reportAfterLoad(activity, MoPubErrorCode.AD_SUCCESS);
+
+        ArgumentCaptor<MoPubRequest> reqeustCaptor = ArgumentCaptor.forClass(MoPubRequest.class);
+        verify(mockRequestQueue).add(reqeustCaptor.capture());
+        MoPubRequest moPubRequest = reqeustCaptor.getValue();
+        assertThat(moPubRequest.getOriginalUrl().indexOf("ad_loaded")).isNotNegative();
+    }
+
+    @Test
+    public void reportAfterLoad_withValidAdResponse_withTimeoutError_shouldSendTimeoutErrorRequest(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+        subject.reportBeforeLoad(activity);
+        reset(mockRequestQueue);
+
+        subject.reportAfterLoad(activity, MoPubErrorCode.NETWORK_TIMEOUT);
+
+        ArgumentCaptor<MoPubRequest> reqeustCaptor = ArgumentCaptor.forClass(MoPubRequest.class);
+        verify(mockRequestQueue).add(reqeustCaptor.capture());
+        MoPubRequest moPubRequest = reqeustCaptor.getValue();
+        assertThat(moPubRequest.getOriginalUrl().indexOf("ad_loaded")).isNegative();
+        assertThat(moPubRequest.getOriginalUrl().indexOf("timeout")).isNotNegative();
+    }
+
+    @Test
+    public void reportAfterLoad_withEmptyUrl_shouldNotSendRequest(){
+        when(mockInvalidAdResponse.getBeforeLoadUrl()).thenReturn("before_load_url");
+        subject = new ContentDownloadAnalytics(mockInvalidAdResponse);
+        subject.reportBeforeLoad(activity);
+        reset(mockRequestQueue);
+
+        subject.reportAfterLoad(activity, MoPubErrorCode.NETWORK_TIMEOUT);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+
+    @Test
+    public void reportAfterLoadSuccess_withEmptyUrl_shouldNotSendRequest(){
+        when(mockInvalidAdResponse.getBeforeLoadUrl()).thenReturn("before_load_url");
+        subject = new ContentDownloadAnalytics(mockInvalidAdResponse);
+        subject.reportBeforeLoad(activity);
+        reset(mockRequestQueue);
+
+        subject.reportAfterLoadSuccess(activity);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+
+    @Test
+    public void reportAfterLoadFail_withEmptyUrl_shouldNotSendRequest(){
+        when(mockInvalidAdResponse.getBeforeLoadUrl()).thenReturn("before_load_url");
+        subject = new ContentDownloadAnalytics(mockInvalidAdResponse);
+        subject.reportBeforeLoad(activity);
+        reset(mockRequestQueue);
+
+        subject.reportAfterLoadFail(activity, MoPubErrorCode.NETWORK_TIMEOUT);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+
+    @Test
+    public void reportAfterLoad_withoutCallingReportBeforeLoad_shouldNotSendRequest(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+
+        subject.reportAfterLoad(activity, MoPubErrorCode.NETWORK_TIMEOUT);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+
+    @Test
+    public void reportAfterLoadSuccess_withoutCallingReportBeforeLoad_shouldNotSendRequest(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+
+        subject.reportAfterLoadSuccess(activity);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+
+    @Test
+    public void reportAfterLoadFail_withoutCallingReportBeforeLoad_shouldNotSendRequest(){
+        subject = new ContentDownloadAnalytics(mockAdResponse);
+
+        subject.reportAfterLoadFail(activity, MoPubErrorCode.NETWORK_TIMEOUT);
+
+        verify(mockRequestQueue, never()).add(any(MoPubRequest.class));
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
index 0395851f..d545d4c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.annotation.SuppressLint;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
index 6b2d011e..d811ba59 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/HeaderUtilsTest.java
@@ -1,104 +1,98 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
 import com.mopub.mobileads.BuildConfig;
-import com.mopub.volley.Header;
-import com.mopub.volley.toolbox.HttpResponse;
 
+import org.json.JSONException;
+import org.json.JSONObject;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.annotation.Config;
 
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.mopub.common.util.ResponseHeader.AD_TIMEOUT;
-import static com.mopub.common.util.ResponseHeader.SCROLLABLE;
 import static org.fest.assertions.api.Assertions.assertThat;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class HeaderUtilsTest {
-    private HttpResponse response;
-    private List<Header> headers;
+    private JSONObject subject;
 
     @Before
     public void setup() {
-        headers = new ArrayList<Header>();
-        response = new HttpResponse(200, headers);
+        subject = new JSONObject();
     }
 
     @Test
-    public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
-        headers.add(new Header(SCROLLABLE.getKey(), "0"));
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
+    public void extractIntegerHeader_shouldReturnIntegerValue() throws JSONException {
+        subject.remove(ResponseHeader.HEIGHT.getKey());
+        assertThat(HeaderUtils.extractIntegerHeader(null, ResponseHeader.HEIGHT)).isNull();
 
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isFalse();
-    }
+        subject.put(ResponseHeader.HEIGHT.getKey(), "100");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(100);
 
-    @Test
-    public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
-        headers.add(new Header(SCROLLABLE.getKey(), "1"));
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isTrue();
+        subject.put(ResponseHeader.HEIGHT.getKey(), "1");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(1);
 
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
-    }
+        subject.put(ResponseHeader.HEIGHT.getKey(), "0");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(0);
 
-    @Test
-    public void extractBooleanHeader_shouldReturnDefaultValue() throws Exception {
-        // no header added to response
+        subject.put(ResponseHeader.HEIGHT.getKey(), "-1");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(-1);
 
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, false)).isFalse();
-        assertThat(HeaderUtils.extractBooleanHeader(response, SCROLLABLE, true)).isTrue();
+        subject.put(ResponseHeader.HEIGHT.getKey(), "");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isNull();
+
+        subject.put(ResponseHeader.HEIGHT.getKey(), "a");
+        assertThat(HeaderUtils.extractIntegerHeader(subject, ResponseHeader.HEIGHT)).isNull();
     }
 
     @Test
-    public void extractIntegerHeader_shouldReturnIntegerValue() throws Exception {
-        headers.add(new Header(AD_TIMEOUT.getKey(), "10"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(10);
+    public void extractBooleanHeader_shouldReturnBooleanValue() throws JSONException {
+        subject.remove(ResponseHeader.HEIGHT.getKey());
+        assertThat(HeaderUtils.extractBooleanHeader(subject, ResponseHeader.HEIGHT, true)).isFalse();
 
-        headers.clear();
-        headers.add(new Header(AD_TIMEOUT.getKey(), "0"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(0);
+        subject.put(ResponseHeader.HEIGHT.getKey(), "1");
+        assertThat(HeaderUtils.extractBooleanHeader(subject, ResponseHeader.HEIGHT, false)).isTrue();
 
-        headers.clear();
-        headers.add(new Header(AD_TIMEOUT.getKey(), "-2"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-2);
-    }
+        subject.put(ResponseHeader.HEIGHT.getKey(), "0");
+        assertThat(HeaderUtils.extractBooleanHeader(subject, ResponseHeader.HEIGHT, true)).isFalse();
 
-    @Test
-    public void extractIntegerHeader_withDoubleValue_shouldTruncateValue() throws Exception {
-        headers.add(new Header(AD_TIMEOUT.getKey(), "3.14"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(3);
+        subject.put(ResponseHeader.HEIGHT.getKey(), "");
+        assertThat(HeaderUtils.extractBooleanHeader(subject, ResponseHeader.HEIGHT, true)).isFalse();
 
-        headers.clear();
-        headers.add(new Header(AD_TIMEOUT.getKey(), "-3.14"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isEqualTo(-3);
+        subject.put(ResponseHeader.HEIGHT.getKey(), "a");
+        assertThat(HeaderUtils.extractBooleanHeader(subject, ResponseHeader.HEIGHT, true)).isFalse();
     }
 
     @Test
-    public void extractIntegerHeader_whenNoHeaderPresent_shouldReturnNull() throws Exception {
-        // no header added to response
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
+    public void extractPercentHeader_shouldReturnPercentValue() throws JSONException {
+        subject.remove(ResponseHeader.HEIGHT.getKey());
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isNull();
 
-        headers.add(new Header(AD_TIMEOUT.getKey(), null));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
+        subject.put(ResponseHeader.HEIGHT.getKey(), "100%");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(100);
 
-    @Test
-    public void extractIntegerHeader_withNonsenseStringValue_shouldReturnNull() throws Exception {
-        headers.add(new Header(AD_TIMEOUT.getKey(), "llama!!guy"));
-        assertThat(HeaderUtils.extractIntegerHeader(response, AD_TIMEOUT)).isNull();
-    }
+        subject.put(ResponseHeader.HEIGHT.getKey(), "10");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(10);
 
-    @Test
-    public void extractIntHeader_withInvalidHeader_shouldUseDefaultValue() throws Exception {
-        headers.add(new Header(AD_TIMEOUT.getKey(), "5"));
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(5);
+        subject.put(ResponseHeader.HEIGHT.getKey(), "");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isNull();
+
+        subject.put(ResponseHeader.HEIGHT.getKey(), "0%");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(0);
+
+        subject.put(ResponseHeader.HEIGHT.getKey(), "-1%");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isNull();
+
+        subject.put(ResponseHeader.HEIGHT.getKey(), "0");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isEqualTo(0);
 
-        headers.clear();
-        headers.add(new Header(AD_TIMEOUT.getKey(), "five!"));
-        assertThat(HeaderUtils.extractIntHeader(response, AD_TIMEOUT, 10)).isEqualTo(10);
+        subject.put(ResponseHeader.HEIGHT.getKey(), "a%");
+        assertThat(HeaderUtils.extractPercentHeader(subject, ResponseHeader.HEIGHT)).isNull();
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
index ad2295bb..6b689455 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import com.mopub.volley.Cache;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
index f7558e8c..548070ee 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestUtilsTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java
new file mode 100644
index 00000000..17b7f414
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/MultiAdRequestTest.java
@@ -0,0 +1,233 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+
+import android.app.Activity;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.volley.NetworkResponse;
+import com.mopub.volley.Response;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MultiAdRequestTest {
+    private static final String ACCEPT_LANGUAGE = "accept-language";
+
+    @Mock private MultiAdRequest.Listener mockListener;
+    @Mock private MultiAdResponse mockAdResponse;
+
+    private MultiAdRequest subject;
+    private Activity activity;
+    private String adUnitId;
+    private JSONObject jsonBody;
+
+/*
+    {
+        "x-next-url": "fail_url",
+        "ad-responses": [
+        {
+            "content": "content_body",
+                "metadata": {
+                    "content-type": "text/html; charset=UTF-8",
+                    "x-adgroupid": "365cd2475e074026b93da14103a36b97",
+                    "x-adtype": "html",
+                    "x-backgroundcolor": "",
+                    "x-banner-impression-min-ms": "",
+                    "x-banner-impression-min-pixels": "",
+                    "x-browser-agent": -1,
+                    "x-clickthrough": "clickthrough_url",
+                    "x-creativeid": "d06f9bde98134f76931cdf04951b60dd",
+                    "x-custom-event-class-data": "",
+                    "x-custom-event-class-name": "",
+                    "x-disable-viewability": 3,
+                    "x-dspcreativeid": "",
+                    "x-format": "",
+                    "x-fulladtype": "",
+                    "x-height": 50,
+                    "x-imptracker": "imptracker_url",
+                    "x-before-load-url": "before_load_url",
+                    "x-after-load-url": "after_load_url",
+                    "x-interceptlinks": "",
+                    "x-nativeparams": "",
+                    "x-networktype": "",
+                    "x-orientation": "",
+                    "x-precacherequired": "",
+                    "x-refreshtime": 15,
+                    "x-rewarded-currencies": "",
+                    "x-rewarded-video-completion-url": "",
+                    "x-rewarded-video-currency-amount": -1,
+                    "x-rewarded-video-currency-name": "",
+                    "x-vastvideoplayer": "",
+                    "x-video-trackers": "",
+                    "x-video-viewability-trackers": "",
+                    "x-width": 320
+                }
+            }
+        ]
+    }
+*/
+
+    @Before
+    public void setup() throws JSONException {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        adUnitId = "testAdUnitId";
+        subject = new MultiAdRequest("testUrl", AdFormat.BANNER, adUnitId, activity, mockListener);
+        JSONObject metadata = new JSONObject();
+        metadata.put(ResponseHeader.CONTENT_TYPE.getKey(), "text/html; charset=UTF-8");
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), "html");
+        metadata.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), "clickthrough_url");
+        metadata.put(ResponseHeader.IMPRESSION_URL.getKey(), "imptracker_url");
+        metadata.put(ResponseHeader.BEFORE_LOAD_URL.getKey(), "before_load_url");
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), "after_load_url");
+        metadata.put(ResponseHeader.REFRESH_TIME.getKey(), 15);
+        metadata.put(ResponseHeader.HEIGHT.getKey(), 50);
+        metadata.put(ResponseHeader.WIDTH.getKey(), 320);
+
+        JSONObject singleAdResponse = new JSONObject();
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), "content_text");
+        singleAdResponse.put(ResponseHeader.METADATA.getKey(), metadata);
+
+        // array of JSON objects AdResponse
+        JSONArray adResponses = new JSONArray();
+        adResponses.put(singleAdResponse);
+
+        // whole response body
+        jsonBody = new JSONObject();
+        jsonBody.put(ResponseHeader.FAIL_URL.getKey(), "fail_url");
+        jsonBody.put(ResponseHeader.AD_RESPONSES.getKey(), adResponses);
+
+    }
+
+    @After
+    public void teardown() {
+        // Reset our locale for other tests.
+        Locale.setDefault(Locale.US);
+        //noinspection deprecation
+        MoPub.resetBrowserAgent();
+    }
+
+    @Test
+    public void deliverResponse_shouldCallListenerOnSuccess() {
+        subject.deliverResponse(mockAdResponse);
+        verify(mockListener).onSuccessResponse(mockAdResponse);
+    }
+
+    @Test
+    public void deliverResponse_afterCancel_shouldNotCallListener(){
+        subject.cancel();
+        subject.deliverResponse(mockAdResponse);
+        verify(mockListener, never()).onSuccessResponse(mockAdResponse);
+    }
+
+    @Test
+    public void parseNetworkResponse_withValidData_shouldReturnNonErrorResponse() {
+        NetworkResponse testResponse = new NetworkResponse(jsonBody.toString().getBytes());
+        final Response<MultiAdResponse> response = subject.parseNetworkResponse(testResponse);
+        assert response != null;
+        assertThat(response.error).isNull();
+        assertThat(response.result).isNotNull();
+        assertThat(response.result.hasNext()).isEqualTo(true);
+    }
+
+    @Test
+    public void parseNetworkResponse_withInvalidData_shouldReturnErrorResponse() {
+        NetworkResponse testResponse = new NetworkResponse("invalid_json".getBytes());
+        final Response<MultiAdResponse> response = subject.parseNetworkResponse(testResponse);
+        assert response != null;
+        assertThat(response.error).isNotNull();
+        assertThat(response.result).isNull();
+    }
+
+    @Test
+    public void equals_shouldReturnTrue(){
+        MultiAdRequest that = new MultiAdRequest("testUrl", AdFormat.BANNER, adUnitId, activity, mockListener);
+        assert(subject.equals(that));
+    }
+
+    @Test
+    public void equals_shouldReturnFalse(){
+        MultiAdRequest that = new MultiAdRequest("testUrl", AdFormat.INTERSTITIAL, adUnitId, activity, mockListener);
+        assert(!subject.equals(that));
+    }
+
+    @Test
+    public void getHeaders_withDefaultLocale_shouldReturnDefaultLanguageCode() {
+        Map<String, String> expectedHeaders = new HashMap<>();
+        expectedHeaders.put(ACCEPT_LANGUAGE, "en-us");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLocale_shouldReturnUserPreferredLanguageCode() {
+        Map<String, String> expectedHeaders = new HashMap<>();
+        expectedHeaders.put(ACCEPT_LANGUAGE, "fr-ca");
+
+        // Assume user-preferred locale is fr_CA
+        activity.getResources().getConfiguration().locale = Locale.CANADA_FRENCH;
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLocaleAsNull_shouldReturnDefaultLanguageCode() {
+        Map<String, String> expectedHeaders = new HashMap<>();
+        expectedHeaders.put(ACCEPT_LANGUAGE, "en-us");
+
+        // Assume user-preferred locale is null
+        activity.getResources().getConfiguration().locale = null;
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withUserPreferredLanguageAsEmptyString_shouldReturnDefaultLanguageCode() {
+        Map<String, String> expectedHeaders = new HashMap<>();
+        expectedHeaders.put(ACCEPT_LANGUAGE, "en-us");
+
+        // Assume user-preferred locale's language code is empty string after trimming
+        activity.getResources().getConfiguration().locale = new Locale(" ");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+
+    @Test
+    public void getHeaders_withLocaleLanguageAsEmptyString_shouldNotAddLanguageHeader() {
+        Map<String, String> expectedHeaders = Collections.emptyMap();
+
+        // Assume default locale's language code is empty string
+        Locale.setDefault(new Locale(""));
+
+        // Assume user-preferred locale's language code is empty string after trimming
+        activity.getResources().getConfiguration().locale = new Locale(" ");
+
+        assertThat(subject.getHeaders()).isEqualTo(expectedHeaders);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
new file mode 100644
index 00000000..8c8c955d
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/MultiAdResponseTest.java
@@ -0,0 +1,999 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
+package com.mopub.network;
+
+/*
+    {
+        "x-next-url": "fail_url",
+        "ad-responses": [
+        {
+            "content": "content_body",
+             "metadata": {
+                    "content-type": "text/html; charset=UTF-8",
+                    "x-adgroupid": "365cd2475e074026b93da14103a36b97",
+                    "x-adtype": "html",
+                    "x-backgroundcolor": "",
+                    "x-banner-impression-min-ms": "",
+                    "x-banner-impression-min-pixels": "",
+                    "x-browser-agent": -1,
+                    "x-clickthrough": "clickthrough_url",
+                    "x-creativeid": "d06f9bde98134f76931cdf04951b60dd",
+                    "x-custom-event-class-data": "",
+                    "x-custom-event-class-name": "",
+                    "x-disable-viewability": 3,
+                    "x-dspcreativeid": "",
+                    "x-format": "",
+                    "x-fulladtype": "",
+                    "x-height": 50,
+                    "x-imptracker": "imptracker_url",
+                    "x-before-load-url": "before_load_url",
+                    "x-after-load-url": "after_load_url",
+                    "x-after-load-success-url": "after_load_success_url",
+                    "x-after-load-fail-url": "after_load_fail_url",
+                    "x-interceptlinks": "",
+                    "x-nativeparams": "",
+                    "x-networktype": "",
+                    "x-orientation": "",
+                    "x-precacherequired": "",
+                    "x-refreshtime": 15,
+                    "x-rewarded-currencies": "",
+                    "x-rewarded-video-completion-url": "",
+                    "x-rewarded-video-currency-amount": -1,
+                    "x-rewarded-video-currency-name": "",
+                    "x-vastvideoplayer": "",
+                    "x-video-trackers": "",
+                    "x-video-viewability-trackers": "",
+                    "x-width": 320
+                }
+            }
+        ]
+    }
+*/
+
+import android.app.Activity;
+
+import com.mopub.common.AdFormat;
+import com.mopub.common.AdType;
+import com.mopub.common.Constants;
+import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.ResponseHeader;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.HtmlBanner;
+import com.mopub.mobileads.MoPubRewardedVideo;
+import com.mopub.nativeads.MoPubCustomEventNative;
+import com.mopub.nativeads.MoPubCustomEventVideoNative;
+import com.mopub.network.MultiAdResponse.ServerOverrideListener;
+import com.mopub.volley.NetworkResponse;
+
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+public class MultiAdResponseTest {
+    private static final String CONTENT_TYPE = "text/html; charset=UTF-8";
+    private static final String FAIL_URL = "fail_url";
+    private static final String CLICKTTRACKING_URL = "clickthrough_url";
+    private static final String IMPTRACKER_URL = "imptracker_url";
+    private static final JSONArray IMPTRACKER_URLS = new JSONArray().put("imptracker_url1").put(
+            "imptracker_url2");
+    private static final List<String> IMPTRACKER_URLS_LIST =
+            Arrays.asList("imptracker_url1", "imptracker_url2");
+    private static final String BEFORE_LOAD_URL = "before_load_url";
+    private static final String AFTER_LOAD_URL = "after_load_url";
+    private static final JSONArray AFTER_LOAD_URLS = new JSONArray().put("after_load_url1").put(
+            "after_load_url2");
+    private static final List<String> AFTER_LOAD_URLS_LIST =
+            Arrays.asList("after_load_url1", "after_load_url2");
+
+    private static final String AFTER_LOAD_SUCCESS_URL = "after_load_success_url";
+    private static final JSONArray AFTER_LOAD_SUCCESS_URLS = new JSONArray().put("after_load_success_url1").put(
+            "after_load_success_url2");
+    private static final List<String> AFTER_LOAD_SUCCESS_URLS_LIST =
+            Arrays.asList("after_load_success_url1", "after_load_success_url2");
+
+    private static final String AFTER_LOAD_FAIL_URL = "after_load_fail_url";
+    private static final JSONArray AFTER_LOAD_FAIL_URLS = new JSONArray().put("after_load_fail_url1").put(
+            "after_load_fail_url2");
+    private static final List<String> AFTER_LOAD_FAIL_URLS_LIST =
+            Arrays.asList("after_load_fail_url1", "after_load_fail_url2");
+
+    private static final String ADM_VALUE = "adm_value";
+    private static final String REQUEST_ID_VALUE = "request_id_value";
+    private static final int REFRESH_TIME = 15;
+    private static final int HEIGHT = 50;
+    private static final int WIDTH = 320;
+
+
+    private Activity activity;
+    private String adUnitId;
+    private JSONObject singleAdResponse;
+
+    @Before
+    public void setup() throws JSONException {
+        activity = Robolectric.buildActivity(Activity.class).create().get();
+        adUnitId = "testAdUnitId";
+
+        JSONObject metadata = new JSONObject();
+        metadata.put(ResponseHeader.CONTENT_TYPE.getKey(), CONTENT_TYPE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), "html");
+        metadata.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), CLICKTTRACKING_URL);
+        metadata.put(ResponseHeader.IMPRESSION_URLS.getKey(), IMPTRACKER_URLS);
+        metadata.put(ResponseHeader.BEFORE_LOAD_URL.getKey(), BEFORE_LOAD_URL);
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), AFTER_LOAD_URLS);
+        metadata.put(ResponseHeader.AFTER_LOAD_SUCCESS_URL.getKey(), AFTER_LOAD_SUCCESS_URLS);
+        metadata.put(ResponseHeader.AFTER_LOAD_FAIL_URL.getKey(), AFTER_LOAD_FAIL_URLS);
+        metadata.put(ResponseHeader.REFRESH_TIME.getKey(), REFRESH_TIME);
+        metadata.put(ResponseHeader.HEIGHT.getKey(), HEIGHT);
+        metadata.put(ResponseHeader.WIDTH.getKey(), WIDTH);
+
+        singleAdResponse = new JSONObject();
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), "content_text");
+        singleAdResponse.put(ResponseHeader.METADATA.getKey(), metadata);
+    }
+
+    @After
+    public void teardown() {
+        Locale.setDefault(Locale.US);
+    }
+
+    @Test
+    public void constructor_withSingleAdResponse_shouldSucceed() throws Exception {
+        byte[] body = createResponseBody(FAIL_URL, singleAdResponse);
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        assertThat(subject.hasNext()).isTrue();
+        assertThat(subject.next()).isNotNull();
+        assertThat(subject.getFailURL()).isEqualTo(FAIL_URL);
+    }
+
+    @Test
+    public void constructor_withForceGdprSet_shouldCallListener() throws Exception {
+        ServerOverrideListener mockOverrideListener = mock(ServerOverrideListener.class);
+        MultiAdResponse.setServerOverrideListener(mockOverrideListener);
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        jsonObject.put(ResponseHeader.FORCE_GDPR_APPLIES.getKey(), 1);
+
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        verify(mockOverrideListener).onForceGdprApplies();
+
+        assertTrue(subject.hasNext());
+        assertNotNull(subject.next());
+        assertThat(subject.getFailURL()).isEqualTo(FAIL_URL);
+    }
+
+    @Test
+    public void constructor_withForceExplicitNoSet_shouldCallListener() throws Exception {
+        ServerOverrideListener mockOverrideListener = mock(ServerOverrideListener.class);
+        MultiAdResponse.setServerOverrideListener(mockOverrideListener);
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        jsonObject.put(ResponseHeader.FORCE_EXPLICIT_NO.getKey(), 1);
+        jsonObject.put(ResponseHeader.CONSENT_CHANGE_REASON.getKey(), "change_reason");
+
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        verify(mockOverrideListener).onForceExplicitNo("change_reason");
+    }
+
+    @Test
+    public void constructor_withInvalidateConsentSet_shouldCallListener() throws Exception {
+        ServerOverrideListener mockOverrideListener = mock(ServerOverrideListener.class);
+        MultiAdResponse.setServerOverrideListener(mockOverrideListener);
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        jsonObject.put(ResponseHeader.INVALIDATE_CONSENT.getKey(), 1);
+        jsonObject.put(ResponseHeader.CONSENT_CHANGE_REASON.getKey(), "change_reason");
+
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        verify(mockOverrideListener).onInvalidateConsent("change_reason");
+    }
+
+    @Test
+    public void constructor_withReaquireConsentSet_shouldCallListener() throws Exception {
+        ServerOverrideListener mockOverrideListener = mock(ServerOverrideListener.class);
+        MultiAdResponse.setServerOverrideListener(mockOverrideListener);
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        jsonObject.put(ResponseHeader.REACQUIRE_CONSENT.getKey(), 1);
+        jsonObject.put(ResponseHeader.CONSENT_CHANGE_REASON.getKey(), "change_reason");
+
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        verify(mockOverrideListener).onReacquireConsent("change_reason");
+    }
+
+    @Test(expected = JSONException.class)
+    public void constructor_NonJsonBodyShouldThrowException() throws Exception {
+        NetworkResponse testResponse = new NetworkResponse("abc".getBytes());
+        new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+    }
+
+    @Test
+    public void constructor_withResponseClear_shouldThrowNoFill() throws JSONException {
+        JSONObject jsonClear = createClearAdResponse();
+        byte[] body = createResponseBody(FAIL_URL, jsonClear);
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ex) {
+            if (ex instanceof MoPubNetworkError) {
+                MoPubNetworkError error = (MoPubNetworkError) ex;
+                assertThat(error.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+                assertThat(error.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+                return; // success
+            }
+        }
+        assert false;
+    }
+
+    @Test
+    public void constructor_withResponseClear_withNoRefreshTime_shouldThrowNoFill() throws JSONException {
+        JSONObject jsonClear = createClearAdResponse();
+        jsonClear.getJSONObject(ResponseHeader.METADATA.getKey()).remove(ResponseHeader.REFRESH_TIME.getKey());
+        byte[] body = createResponseBody(FAIL_URL, jsonClear);
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ex) {
+            if (ex instanceof MoPubNetworkError) {
+                MoPubNetworkError error = (MoPubNetworkError) ex;
+                assertThat(error.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+                assertNull(error.getRefreshTimeMillis());
+                return; // success
+            }
+        }
+        assert false;
+    }
+
+    @Test
+    public void constructor_withResponseWarmup_shouldThrowException() throws JSONException {
+        JSONObject jsonClear = createWarmupAdResponse();
+        byte[] body = createResponseBody(FAIL_URL, jsonClear);
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ex) {
+            if (ex instanceof MoPubNetworkError) {
+                MoPubNetworkError error = (MoPubNetworkError) ex;
+                assertThat(error.getReason()).isEqualTo(MoPubNetworkError.Reason.WARMING_UP);
+                assertThat(error.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+                return; // success
+            }
+        }
+        assert false;
+    }
+
+    @Test
+    public void constructor_withEmptyResponseArray_shouldThrowError_shouldUseDefaultTimeout() throws JSONException {
+        byte[] body = createResponseBody(FAIL_URL, null);
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        try {
+            new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+        } catch (Exception ex) {
+            if (ex instanceof MoPubNetworkError) {
+                MoPubNetworkError error = (MoPubNetworkError) ex;
+                assertThat(error.getReason()).isEqualTo(MoPubNetworkError.Reason.NO_FILL);
+                assertThat(error.getRefreshTimeMillis()).isEqualTo(Constants.THIRTY_SECONDS_MILLIS);
+                return; // success
+            }
+        }
+        assert false;
+    }
+
+    @Test
+    public void constructor_withTwoAdResponses_withNonEmptyFailUrl_fullTest() throws MoPubNetworkError, JSONException {
+        JSONObject secondResponse = new JSONObject(singleAdResponse.toString());
+        JSONObject metadata = secondResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), CLICKTTRACKING_URL+"_2");
+        metadata.put(ResponseHeader.IMPRESSION_URLS.getKey(), new JSONArray().put("imptracker_url3"));
+        metadata.put(ResponseHeader.BEFORE_LOAD_URL.getKey(), BEFORE_LOAD_URL+"_2");
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_2"));
+        metadata.put(ResponseHeader.AFTER_LOAD_SUCCESS_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_success_2"));
+        metadata.put(ResponseHeader.AFTER_LOAD_FAIL_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_fail_2"));
+
+        JSONObject jsonObject = createJsonBody(FAIL_URL, singleAdResponse);
+        jsonObject.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).put(secondResponse);
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        assertThat(subject.hasNext()).isTrue();
+        assertThat(subject.getFailURL()).isEqualTo(FAIL_URL);
+        AdResponse first = subject.next();
+        assertNotNull(first);
+        assertThat(first.getAdType()).isEqualTo("html");
+        assertThat(first.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(first.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(first.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(first.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(first.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(first.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertTrue(subject.hasNext());
+        AdResponse second = subject.next();
+        assertThat(second.getAdType()).isEqualTo("html");
+        assertThat(second.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL+"_2");
+        assertThat(second.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL+"_2");
+        assertThat(second.getAfterLoadUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_2"));
+        assertThat(second.getAfterLoadSuccessUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_success_2"));
+        assertThat(second.getAfterLoadFailUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_fail_2"));
+        assertThat(second.getImpressionTrackingUrls()).isEqualTo(Collections.singletonList("imptracker_url3"));
+        assertThat(subject.getFailURL()).isEqualTo(FAIL_URL);
+        assertFalse(subject.hasNext());
+        assertFalse(subject.isWaterfallFinished());
+    }
+
+    @Test
+    public void constructor_withTwoAdResponses_withEmptyFailUrl_fullTest() throws MoPubNetworkError, JSONException {
+        JSONObject secondResponse = new JSONObject(singleAdResponse.toString());
+        JSONObject metadata = secondResponse.getJSONObject(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.CLICK_TRACKING_URL.getKey(), CLICKTTRACKING_URL+"_2");
+        metadata.put(ResponseHeader.IMPRESSION_URLS.getKey(), new JSONArray().put("imptracker_url3"));
+        metadata.put(ResponseHeader.BEFORE_LOAD_URL.getKey(), BEFORE_LOAD_URL+"_2");
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_2"));
+        metadata.put(ResponseHeader.AFTER_LOAD_SUCCESS_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_success_2"));
+        metadata.put(ResponseHeader.AFTER_LOAD_FAIL_URL.getKey(), new JSONArray().put(AFTER_LOAD_URL+"_fail_2"));
+
+        JSONObject jsonObject = createJsonBody("", singleAdResponse);
+        jsonObject.getJSONArray(ResponseHeader.AD_RESPONSES.getKey()).put(secondResponse);
+        byte[] body = jsonObject.toString().getBytes();
+        NetworkResponse testResponse = new NetworkResponse(body);
+
+        MultiAdResponse subject = new MultiAdResponse(activity, testResponse, AdFormat.BANNER, adUnitId);
+
+        assertThat(subject.hasNext()).isTrue();
+        assertThat(subject.getFailURL()).isEqualTo("");
+        AdResponse first = subject.next();
+        assertNotNull(first);
+        assertThat(first.getAdType()).isEqualTo("html");
+        assertThat(first.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(first.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(first.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(first.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(first.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(first.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertTrue(subject.hasNext());
+        AdResponse second = subject.next();
+        assertThat(second.getAdType()).isEqualTo("html");
+        assertThat(second.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL+"_2");
+        assertThat(second.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL+"_2");
+        assertThat(second.getAfterLoadUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_2"));
+        assertThat(second.getAfterLoadSuccessUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_success_2"));
+        assertThat(second.getAfterLoadFailUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_fail_2"));
+        assertThat(second.getImpressionTrackingUrls()).isEqualTo(Collections.singletonList("imptracker_url3"));
+        assertThat(subject.getFailURL()).isEqualTo("");
+        assertFalse(subject.hasNext());
+        assertTrue(subject.isWaterfallFinished());
+    }
+
+    @Test
+    public void parseNetworkResponse_forBanner_withoutImpTrackingHeaders_shouldSucceed() throws MoPubNetworkError, JSONException {
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.HTML);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getHeight()).isEqualTo(HEIGHT);
+        assertThat(subject.getWidth()).isEqualTo(WIDTH);
+        assertThat(subject.getStringBody()).isEqualTo("content_text");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(HtmlBanner.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY)).isEqualToIgnoringCase("content_text");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEmpty();
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEmpty();
+    }
+
+    @Test
+    public void parseNetworkResponse_forBanner_withImpTrackingHeaders_shouldSucceed() throws MoPubNetworkError, JSONException {
+        // add impression tracking values
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_DIPS.getKey(), 1);
+        metadata.put(ResponseHeader.BANNER_IMPRESSION_MIN_VISIBLE_MS.getKey(), 2);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.HTML);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getHeight()).isEqualTo(HEIGHT);
+        assertThat(subject.getWidth()).isEqualTo(WIDTH);
+        assertThat(subject.getStringBody()).isEqualTo("content_text");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(HtmlBanner.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY)).isEqualToIgnoringCase("content_text");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS)).isEqualTo("1");
+        assertThat(serverExtras.get(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS)).isEqualTo("2");
+    }
+
+    @Test
+    public void parseNetworkResponse_forBanner_withAdvancedBidding_shouldSucceed() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                FAIL_URL);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.HTML);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getHeight()).isEqualTo(HEIGHT);
+        assertThat(subject.getWidth()).isEqualTo(WIDTH);
+        assertThat(subject.getStringBody()).isEqualTo("content_text");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(HtmlBanner.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY)).isEqualToIgnoringCase("content_text");
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test(expected = MoPubNetworkError.class)
+    public void parseNetworkResponse_forNatvieStatic_withInvalidContent_throwsException() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_forNatvieStatic_shouldSucceed() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), 33);
+        metadata.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), 900);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("900");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNatvieStatic_withAdvancedBidding_shouldSucceed() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_forNatvieVideo_shouldSucceed() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.IMPRESSION_MIN_VISIBLE_PERCENT.getKey(), 33);
+        metadata.put(ResponseHeader.IMPRESSION_VISIBLE_MS.getKey(), 900);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.VIDEO_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventVideoNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_MIN_VISIBLE_PERCENT)).isEqualTo("33");
+        assertThat(serverExtras.get(DataKeys.IMPRESSION_VISIBLE_MS)).isEqualTo("900");
+    }
+
+    @Test
+    public void parseNetworkResponse_forNatvieVideo_withAdvancedBidding_shouldSucceed() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.VIDEO_NATIVE);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.VIDEO_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventVideoNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_forRewardedVideo_withAdvancedBidding_shouldSucceed() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.REWARDED_VIDEO);
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        final String rewardedCurrenciesJson = "{\"rewards\": ["
+                + "{\"name\": \"Coins\", \"amount\": 8},"
+                + "{\"name\": \"Diamonds\", \"amount\": 1},"
+                + "{\"name\": \"Diamonds\", \"amount\": 10 },"
+                + "{\"name\": \"Energy\", \"amount\": 20}"
+                + "]}";
+        metadata.put(ResponseHeader.REWARDED_CURRENCIES.getKey(), rewardedCurrenciesJson);
+
+        metadata.put(ResponseHeader.REWARDED_VIDEO_COMPLETION_URL.getKey(),
+                "http://completionUrl");
+        metadata.put(ResponseHeader.REWARDED_DURATION.getKey(), "15000");
+        metadata.put(ResponseHeader.SHOULD_REWARD_ON_CLICK.getKey(), "1");
+
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.REWARDED_VIDEO);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getHeight()).isEqualTo(HEIGHT);
+        assertThat(subject.getWidth()).isEqualTo(WIDTH);
+        assertThat(subject.getStringBody()).isEqualTo("content_text");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubRewardedVideo.class.getName());
+        assertThat(subject.getRewardedCurrencies()).isEqualTo(rewardedCurrenciesJson);
+        assertThat(subject.getRewardedVideoCompletionUrl()).isEqualTo(
+                "http://completionUrl");
+        assertThat(subject.getRewardedDuration()).isEqualTo(15000);
+        assertThat(subject.shouldRewardOnClick()).isTrue();
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualToIgnoringCase(CLICKTTRACKING_URL);
+        assertNull(serverExtras.get(DataKeys.HTML_RESPONSE_BODY_KEY));
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+
+    @Test
+    public void parseNetworkResponse_withInAppBrowserAgent_shouldSucceed() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.BROWSER_AGENT.getKey(), MoPub.BrowserAgent.IN_APP.ordinal());
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getBrowserAgent()).isEqualTo(MoPub.BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNativeBrowserAgent_shouldSucceed() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.BROWSER_AGENT.getKey(), MoPub.BrowserAgent.NATIVE.ordinal());
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getBrowserAgent()).isEqualTo(MoPub.BrowserAgent.NATIVE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withNullBrowserAgent_shouldDefaultToInApp() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(ResponseHeader.BROWSER_AGENT.getKey(), null);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getBrowserAgent()).isEqualTo(MoPub.BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withUndefinedBrowserAgent_shouldDefaultToInApp() throws MoPubNetworkError, JSONException {
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getBrowserAgent()).isEqualTo(MoPub.BrowserAgent.IN_APP);
+    }
+
+    @Test
+    public void parseNetworkResponse_withoutRefreshTime_shouldNotIncludeRefreshTime() throws MoPubNetworkError, JSONException {
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.remove(ResponseHeader.REFRESH_TIME.getKey());
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertNull(subject.getRefreshTimeMillis());
+    }
+
+    @Test
+    public void parseNetworkResponse_withOnlyLegacyImpressionTracker_shouldPopulateImpressionTrackersList() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        metadata.remove(ResponseHeader.IMPRESSION_URLS.getKey());
+        metadata.put(ResponseHeader.IMPRESSION_URL.getKey(), IMPTRACKER_URL);
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(Collections.singletonList(IMPTRACKER_URL));
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withSingleAfterLoadUrl_shouldPopulateAfterLoadUrlsList() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        metadata.put(ResponseHeader.AFTER_LOAD_URL.getKey(), AFTER_LOAD_URL+"_1");
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_URL+"_1"));
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withSingleAfterLoadSuccessUrl_shouldPopulateAfterLoadSuccessUrlsList() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        metadata.put(ResponseHeader.AFTER_LOAD_SUCCESS_URL.getKey(), AFTER_LOAD_SUCCESS_URL+"_1");
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_SUCCESS_URL+"_1"));
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(AFTER_LOAD_FAIL_URLS_LIST);
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+    @Test
+    public void parseNetworkResponse_withSingleAfterLoadFailUrl_shouldPopulateAfterLoadFailUrlsList() throws MoPubNetworkError, JSONException {
+        singleAdResponse.put(ResponseHeader.CONTENT.getKey(), new JSONObject());
+        JSONObject metadata = (JSONObject) singleAdResponse.get(ResponseHeader.METADATA.getKey());
+        metadata.put(DataKeys.ADM_KEY, ADM_VALUE);
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), AdType.STATIC_NATIVE);
+        metadata.put(ResponseHeader.AFTER_LOAD_FAIL_URL.getKey(), AFTER_LOAD_FAIL_URL+"_1");
+        NetworkResponse networkResponse = new NetworkResponse(singleAdResponse.toString().getBytes());
+
+        AdResponse subject = MultiAdResponse.parseSingleAdResponse(activity.getApplicationContext(),
+                networkResponse,
+                singleAdResponse,
+                adUnitId,
+                AdFormat.BANNER,
+                REQUEST_ID_VALUE);
+
+        assertThat(subject.getAdType()).isEqualTo(AdType.STATIC_NATIVE);
+        assertThat(subject.getAdUnitId()).isEqualTo(adUnitId);
+        assertThat(subject.getClickTrackingUrl()).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(subject.getImpressionTrackingUrls()).isEqualTo(IMPTRACKER_URLS_LIST);
+        assertThat(subject.getBeforeLoadUrl()).isEqualTo(BEFORE_LOAD_URL);
+        assertThat(subject.getAfterLoadUrls()).isEqualTo(AFTER_LOAD_URLS_LIST);
+        assertThat(subject.getAfterLoadSuccessUrls()).isEqualTo(AFTER_LOAD_SUCCESS_URLS_LIST);
+        assertThat(subject.getAfterLoadFailUrls()).isEqualTo(Collections.singletonList(AFTER_LOAD_FAIL_URL+"_1"));
+        assertThat(subject.getRefreshTimeMillis()).isEqualTo(REFRESH_TIME * 1000);
+        assertThat(subject.getStringBody()).isEqualTo("{}");
+        assertThat(subject.getCustomEventClassName()).isEqualTo(MoPubCustomEventNative.class.getName());
+        final Map<String, String> serverExtras = subject.getServerExtras();
+        assertNotNull(serverExtras);
+        assertThat(serverExtras).isNotEmpty();
+        assertThat(serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY)).isEqualTo(CLICKTTRACKING_URL);
+        assertThat(serverExtras.get(DataKeys.ADM_KEY)).isEqualTo(ADM_VALUE);
+    }
+
+
+    // Utility functions
+    private static byte[] createResponseBody(String failURL, JSONObject adResponse) throws JSONException {
+        return createJsonBody(failURL, adResponse).toString().getBytes();
+    }
+
+    /**
+     * @param failURL    test value for failURL
+     * @param adResponse ad response JSON for single creative
+     * @return JSONObject in the same format like it comes from the server
+     * @throws JSONException unlikely to happen
+     */
+    private static JSONObject createJsonBody(String failURL, JSONObject adResponse) throws JSONException {
+        // array of JSON objects AdResponse
+        JSONArray adResponses = new JSONArray();
+        if (adResponse != null)
+            adResponses.put(adResponse);
+
+        // whole response body
+        JSONObject jsonBody = new JSONObject();
+        jsonBody.put(ResponseHeader.FAIL_URL.getKey(), failURL);
+        jsonBody.put(ResponseHeader.AD_RESPONSES.getKey(), adResponses);
+        return jsonBody;
+    }
+
+    //    {
+    //        "metadata": {
+    //          "x-adtype": "clear",
+    //          "x-backfill": "clear",
+    //          "x-refreshtime": 30
+    //        }
+    //    }
+    private static JSONObject createClearAdResponse() throws JSONException {
+        JSONObject metadata = new JSONObject();
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), "clear");
+        metadata.put(ResponseHeader.BACKFILL.getKey(), "clear");
+        metadata.put(ResponseHeader.REFRESH_TIME.getKey(), REFRESH_TIME);
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put(ResponseHeader.METADATA.getKey(), metadata);
+        return jsonObject;
+    }
+
+    //    {
+    //        "metadata": {
+    //          "x-adtype": "clear",
+    //          "x-backfill": "clear",
+    //          "x-refreshtime": 30
+    //          "x-warmup": "1",
+    //        }
+    //    }
+    private static JSONObject createWarmupAdResponse() throws JSONException {
+        JSONObject metadata = new JSONObject();
+        metadata.put(ResponseHeader.AD_TYPE.getKey(), "clear");
+        metadata.put(ResponseHeader.BACKFILL.getKey(), "clear");
+        metadata.put(ResponseHeader.REFRESH_TIME.getKey(), REFRESH_TIME);
+        metadata.put(ResponseHeader.WARMUP.getKey(), 1);
+        JSONObject jsonObject = new JSONObject();
+        jsonObject.put(ResponseHeader.METADATA.getKey(), metadata);
+        return jsonObject;
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
index ba472d52..b8a4149e 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/NetworkingTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.annotation.TargetApi;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
index 0bc13acf..62337ce1 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
index 62838f9e..ffd356c6 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/TrackingRequestTest.java
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 package com.mopub.network;
 
 import android.app.Activity;
diff --git a/mopub-sdk/src/test/resources/com/mopub/robolectric.properties b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
index d6c29dbf..1daa5925 100644
--- a/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
+++ b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
@@ -1,2 +1,6 @@
-sdk=26
+# Copyright 2018 Twitter, Inc.
+# Licensed under the MoPub SDK License Agreement
+# http://www.mopub.com/legal/sdk-license-agreement/
+
+sdk=27
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
diff --git a/settings.gradle b/settings.gradle
index e0667c15..3e096305 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1,3 +1,7 @@
+// Copyright 2018 Twitter, Inc.
+// Licensed under the MoPub SDK License Agreement
+// http://www.mopub.com/legal/sdk-license-agreement/
+
 rootProject.name = 'mopub-android'
 include ':mopub-sdk', ':mopub-sample', ':mopub-sdk:mopub-sdk-base', ':mopub-sdk:mopub-sdk-banner',
         ':mopub-sdk:mopub-sdk-interstitial', ':mopub-sdk:mopub-sdk-rewardedvideo',
