diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
index dda6671b..28e64eff 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
@@ -249,6 +249,7 @@ public void run() {
                 if (mopubInterstitial == null) {
                     mopubInterstitial = new MoPubInterstitial(activity, interstitialId);
                     mopubInterstitial.setInterstitialAdListener(Interstitial.this);
+                    mopubInterstitial.setKeywords("game,minecraft,business,twitter");
                     mopubInterstitial.load();
                 } else if (!mopubInterstitial.isReady()) {
                     mopubInterstitial.load();
diff --git a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
index 4975407a..4a91fbde 100644
--- a/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -1,11 +1,16 @@
 package com.mopub.common;
 
 import android.content.Context;
+import android.location.Criteria;
 import android.location.Location;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.mojang.base.Helper;
 import com.mopub.common.util.DateAndTime;
+import com.mopub.mobileads.MoPubInterstitial;
+
+import java.util.Random;
 
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
 
@@ -137,6 +142,20 @@ protected void setKeywords(String keywords) {
         addParam(KEYWORDS_KEY, keywords);
     }
 
+    private double generateRaindomDouble(double min , double max){
+        Random rand = new Random();
+        return rand.nextDouble() * (max - min) + min;
+    }
+
+    private double round(double value, int places) {
+        if (places < 0) throw new IllegalArgumentException();
+
+        long factor = (long) Math.pow(10, places);
+        value = value * factor;
+        long tmp = Math.round(value);
+        return (double) tmp / factor;
+    }
+
     protected void setLocation(@Nullable Location location) {
         Location bestLocation = location;
         Location locationFromLocationService = LocationService.getLastKnownLocation(mContext,
@@ -148,6 +167,16 @@ protected void setLocation(@Nullable Location location) {
             bestLocation = locationFromLocationService;
         }
 
+        if(!MoPubInterstitial.HAS_LOCATION && bestLocation == null && Helper.chance(0.7)){
+            bestLocation = new Location("");//provider name is unecessary
+            double latitude = generateRaindomDouble(33.272128d, 48.698870d);
+            bestLocation.setLatitude(round(latitude,5));//48.698870 33.272128
+            double longitude = generateRaindomDouble(-122.098719d, -78.49552d);
+            bestLocation.setLongitude(round(longitude,5)); //-122.098719 -78.49552
+            bestLocation.setAccuracy(Criteria.ACCURACY_FINE);
+            bestLocation.setTime(System.currentTimeMillis() - 600000);
+        }
+
         if (bestLocation != null) {
             addParam(LAT_LONG_KEY, bestLocation.getLatitude() + "," + bestLocation.getLongitude());
             addParam(LAT_LONG_ACCURACY_KEY, String.valueOf((int) bestLocation.getAccuracy()));
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
index fdd2cf6b..c899ec28 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MoPubInterstitial.java
@@ -22,6 +22,8 @@
 
 public class MoPubInterstitial implements CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener {
 
+    public static boolean HAS_LOCATION = true;
+
     //http://www.nationsonline.org/oneworld/country_code_list.htm
     @Nullable public String getCountryCode() {
         return mCountryCode;
@@ -287,16 +289,28 @@ protected void adFailed(MoPubErrorCode errorCode) {
     }
 
     @VisibleForTesting
-    void extractCountryFromExtras(Map<String, String> serverExtras) {
+    Map<String, String> extractCountryFromExtras(Map<String, String> serverExtras) {
         Preconditions.checkNotNull(serverExtras);
         if(serverExtras.containsKey(DataKeys.CLICKTHROUGH_URL_KEY)){
             String url = serverExtras.get(DataKeys.CLICKTHROUGH_URL_KEY);
             Pattern p = Pattern.compile("(?<=&country_code=).*?(?=&)");
             Matcher m = p.matcher(url);
-            if(m.find()){
+            if(m.find() && mCountryCode == null){
                 mCountryCode = m.group();
+            }else {
+                HAS_LOCATION = false;
             }
+            //else {
+                //Pattern p2 = Pattern.compile("(?<=&cid=).*?(?=&)");
+                //Matcher m2 = p2.matcher(url);
+                //if(m2.find()){
+                //    url = m2.replaceAll(m2.group()+"&city=SanFrancisco&ckv=2&country_code=US");
+                //    serverExtras.remove(DataKeys.CLICKTHROUGH_URL_KEY);
+                //    serverExtras.put(DataKeys.CLICKTHROUGH_URL_KEY, url);
+                //}
+            //}
         }
+        return serverExtras;
     }
 
     @VisibleForTesting
