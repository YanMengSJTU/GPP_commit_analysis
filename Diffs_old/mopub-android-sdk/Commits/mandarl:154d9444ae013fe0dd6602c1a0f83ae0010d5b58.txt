diff --git a/mopub-sdk/src/main/AndroidManifest.xml b/mopub-sdk/AndroidManifest.xml
similarity index 100%
rename from mopub-sdk/src/main/AndroidManifest.xml
rename to mopub-sdk/AndroidManifest.xml
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index b0fea303..d583d72c 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -11,14 +11,20 @@ group = 'com.mopub'
 description = '''MoPub SDK'''
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion '19.1.0'
+    compileSdkVersion rootProject.compileSdkVersion
+    buildToolsVersion rootProject.buildToolsVersion
 
     defaultConfig {
         versionCode 1
+<<<<<<< HEAD
         versionName "3.2.2"
         minSdkVersion 9
         targetSdkVersion 19
+=======
+        versionName "3.2.1"
+        minSdkVersion rootProject.minSdkVersion
+        targetSdkVersion rootProject.targetSdkVersion
+>>>>>>> 7e5037ee8a37e1b6ed2fb57fca42ad9fd02bb0c7
         consumerProguardFiles 'proguard.txt'
     }
 
@@ -48,10 +54,15 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:19.1.+'
+    compile rootProject.supportV4
+    compile rootProject.playServices
+    compile files('libs/MMSDK-5.3.0.jar')
 }
 
 // Don't run the Robolectric Unit Tests. They don't build properly in Gradle or Android Studio in this version.
 check.dependsOn.remove("test")
 check.dependsOn.remove("testDebug")
+<<<<<<< HEAD
 
+=======
+>>>>>>> 7e5037ee8a37e1b6ed2fb57fca42ad9fd02bb0c7
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
new file mode 100644
index 00000000..6b8156e6
--- /dev/null
+++ b/mopub-sdk/pom.xml
@@ -0,0 +1,115 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>com.mopub.mobileads</groupId>
+        <artifactId>mopub-android</artifactId>
+        <version>1.0</version>
+    </parent>
+
+    <artifactId>mopub-sdk</artifactId>
+    <version>1.0.0-SNAPSHOT</version>
+    <packaging>jar</packaging>
+    <name>MoPub SDK</name>
+    <description>The SDK for MoPub developers.</description>
+
+    <properties>
+        <robolectric.version>2.1</robolectric.version>
+    </properties>
+
+    <dependencies>
+
+        <!--main-->
+        <dependency>
+            <groupId>com.android.support</groupId>
+            <artifactId>support-v4</artifactId>
+            <version>19.1.0</version>
+        </dependency>
+
+        <!--test-->
+        <dependency>
+            <groupId>org.apache.httpcomponents</groupId>
+            <artifactId>httpclient</artifactId>
+            <version>4.0.3</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.squareup</groupId>
+            <artifactId>fest-android</artifactId>
+            <version>1.0.7</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit-dep</artifactId>
+            <version>4.10</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <version>1.9.5</version>
+            <scope>test</scope>
+        </dependency>
+
+        <!--android & robolectric-->
+        <dependency>
+            <groupId>org.robolectric</groupId>
+            <artifactId>robolectric</artifactId>
+            <version>${robolectric.version}</version>
+            <scope>test</scope>
+        </dependency>
+
+        <dependency>
+            <groupId>com.google.android</groupId>
+            <artifactId>android</artifactId>
+            <version>4.4.2</version>
+            <scope>provided</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <finalName>${project.artifactId}</finalName>
+
+        <plugins>
+            <plugin>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>2.3.2</version>
+                <configuration>
+                    <source>1.6</source>
+                    <target>1.6</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
+                <artifactId>android-maven-plugin</artifactId>
+                <version>3.8.2</version>
+                <configuration>
+                    <sdk>
+                        <!-- platform or api level (api level 4 = platform 1.6)-->
+                        <platform>19</platform>
+                    </sdk>
+                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
+                </configuration>
+                <extensions>true</extensions>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-surefire-plugin</artifactId>
+                <version>2.6</version>
+                <configuration>
+                    <argLine>-Xms512m -Xmx1024m -XX:MaxPermSize=256m</argLine>
+                    <excludes>
+                        <exclude>**/Test*.java</exclude>
+                    </excludes>
+                    <parallel>classesAndMethods</parallel>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+</project>
diff --git a/mopub-sdk/project.properties b/mopub-sdk/project.properties
new file mode 100644
index 00000000..8e4bc5fd
--- /dev/null
+++ b/mopub-sdk/project.properties
@@ -0,0 +1,12 @@
+# This file is automatically generated by Android Tools.
+# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
+#
+# This file must be checked in Version Control Systems.
+#
+# To customize properties used by the Ant build system use,
+# "ant.properties", and override values to adapt the script to your
+# project structure.
+
+# Project target.
+target=android-19
+android.library=true
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
index f5a26c6a..a71e120c 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesBanner.java
@@ -19,7 +19,7 @@
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
 
 /*
- * Compatible with version 5.0.77 of the Google Play Services SDK.
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
  */
 
 // Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
@@ -43,7 +43,6 @@ protected void loadBanner(
             final Map<String, Object> localExtras,
             final Map<String, String> serverExtras) {
         mBannerListener = customEventBannerListener;
-
         final String adUnitId;
         final int adWidth;
         final int adHeight;
@@ -71,7 +70,12 @@ protected void loadBanner(
 
         final AdRequest adRequest = new AdRequest.Builder().build();
 
-        mGoogleAdView.loadAd(adRequest);
+        try {
+            mGoogleAdView.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mBannerListener.onBannerFailed(NETWORK_NO_FILL);
+        }
     }
 
     @Override
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
new file mode 100644
index 00000000..24146033
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -0,0 +1,130 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.util.Log;
+
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/*
+ * Compatible with version 5.0.89 of the Google Play Services SDK.
+ */
+
+// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
+
+public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
+    /*
+     * These keys are intended for MoPub internal use. Do not modify.
+     */
+    private static final String AD_UNIT_ID_KEY = "adUnitID";
+    private static final String LOCATION_KEY = "location";
+
+    private CustomEventInterstitialListener mInterstitialListener;
+    private InterstitialAd mGoogleInterstitialAd;
+
+    @Override
+    protected void loadInterstitial(
+            final Context context,
+            final CustomEventInterstitialListener customEventInterstitialListener,
+            final Map<String, Object> localExtras,
+            final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+        final String adUnitId;
+
+        if (extrasAreValid(serverExtras)) {
+            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        mGoogleInterstitialAd = new InterstitialAd(context);
+        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
+        mGoogleInterstitialAd.setAdUnitId(adUnitId);
+
+        final AdRequest adRequest = new AdRequest.Builder().build();
+
+        try {
+            mGoogleInterstitialAd.loadAd(adRequest);
+        } catch (NoClassDefFoundError e) {
+            // This can be thrown by Play Services on Honeycomb.
+            mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+        }
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mGoogleInterstitialAd.isLoaded()) {
+            mGoogleInterstitialAd.show();
+        } else {
+            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        if (mGoogleInterstitialAd != null) {
+            mGoogleInterstitialAd.setAdListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(AD_UNIT_ID_KEY);
+    }
+
+    private class InterstitialAdListener extends AdListener {
+        /*
+    	 * Google Play Services AdListener implementation
+    	 */
+        @Override
+        public void onAdClosed() {
+            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialDismissed();
+            }
+        }
+
+        @Override
+        public void onAdFailedToLoad(int errorCode) {
+            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onAdLeftApplication() {
+            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialClicked();
+            }
+        }
+
+        @Override
+        public void onAdLoaded() {
+            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialLoaded();
+            }
+        }
+
+        @Override
+        public void onAdOpened() {
+            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
+            if (mInterstitialListener != null) {
+                mInterstitialListener.onInterstitialShown();
+            }
+        }
+    }
+
+    @Deprecated // for testing
+    InterstitialAd getGoogleInterstitialAd() {
+        return mGoogleInterstitialAd;
+    }
+}
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
index cd49d93f..ac1c4fe6 100644
--- a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialBanner.java
@@ -1,35 +1,3 @@
-/*
- * Copyright (c) 2011, MoPub Inc.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions are
- * met:
- *
- * * Redistributions of source code must retain the above copyright
- *   notice, this list of conditions and the following disclaimer.
- *
- * * Redistributions in binary form must reproduce the above copyright
- *   notice, this list of conditions and the following disclaimer in the
- *   documentation and/or other materials provided with the distribution.
- *
- * * Neither the name of 'MoPub Inc.' nor the names of its contributors
- *   may be used to endorse or promote products derived from this software
- *   without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
- * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
 package com.mopub.mobileads;
 
 import android.content.Context;
@@ -98,7 +66,11 @@ protected void loadBanner(final Context context, final CustomEventBannerListener
 
     @Override
     protected void onInvalidate() {
-        mMillennialAdView.setListener(null);
+        // mMillennialAdView can be null if loadBanner terminated prematurely (i.e. the associated
+        // serverExtras are invalid).
+        if (mMillennialAdView != null) {
+            mMillennialAdView.setListener(null);
+        }
     }
 
     private boolean extrasAreValid(final Map<String, String> serverExtras) {
diff --git a/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
new file mode 100644
index 00000000..474d2203
--- /dev/null
+++ b/mopub-sdk/src/main/java/com/mopub/mobileads/MillennialInterstitial.java
@@ -0,0 +1,124 @@
+package com.mopub.mobileads;
+
+import android.content.Context;
+import android.location.Location;
+import android.util.Log;
+
+import com.millennialmedia.android.MMAd;
+import com.millennialmedia.android.MMException;
+import com.millennialmedia.android.MMInterstitial;
+import com.millennialmedia.android.MMRequest;
+import com.millennialmedia.android.MMSDK;
+import com.millennialmedia.android.RequestListener;
+
+import java.util.Map;
+
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
+import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
+
+/**
+ * Compatible with version 5.3.0 of the Millennial Media SDK.
+ */
+
+class MillennialInterstitial extends CustomEventInterstitial {
+    private MMInterstitial mMillennialInterstitial;
+    private CustomEventInterstitialListener mInterstitialListener;
+    public static final String APID_KEY = "adUnitID";
+
+    @Override
+    protected void loadInterstitial(final Context context, final CustomEventInterstitialListener customEventInterstitialListener,
+                                    final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
+        mInterstitialListener = customEventInterstitialListener;
+
+        final String apid;
+        if (extrasAreValid(serverExtras)) {
+            apid = serverExtras.get(APID_KEY);
+        } else {
+            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+            return;
+        }
+
+        MMSDK.initialize(context);
+
+        final Location location = (Location) localExtras.get("location");
+        if (location != null) {
+            MMRequest.setUserLocation(location);
+        }
+
+        mMillennialInterstitial = new MMInterstitial(context);
+        mMillennialInterstitial.setListener(new MillennialInterstitialRequestListener());
+        mMillennialInterstitial.setMMRequest(new MMRequest());
+        mMillennialInterstitial.setApid(apid);
+        mMillennialInterstitial.fetch();
+    }
+
+    @Override
+    protected void showInterstitial() {
+        if (mMillennialInterstitial.isAdAvailable()) {
+            mMillennialInterstitial.display();
+        } else {
+            Log.d("MoPub", "Tried to show a Millennial interstitial ad before it finished loading. Please try again.");
+        }
+    }
+
+    @Override
+    protected void onInvalidate() {
+        // mMillennialInterstitial can be null if loadInterstitial terminated prematurely (i.e.
+        // the associated serverExtras are invalid).
+        if (mMillennialInterstitial != null) {
+            mMillennialInterstitial.setListener(null);
+        }
+    }
+
+    private boolean extrasAreValid(Map<String, String> serverExtras) {
+        return serverExtras.containsKey(APID_KEY);
+    }
+
+    class MillennialInterstitialRequestListener implements RequestListener {
+        @Override
+        public void MMAdOverlayLaunched(final MMAd mmAd) {
+            Log.d("MoPub", "Showing Millennial interstitial ad.");
+            mInterstitialListener.onInterstitialShown();
+        }
+
+        @Override
+        public void MMAdOverlayClosed(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial interstitial ad dismissed.");
+            mInterstitialListener.onInterstitialDismissed();
+        }
+
+        @Override public void MMAdRequestIsCaching(final MMAd mmAd) {}
+
+        @Override
+        public void requestCompleted(final MMAd mmAd) {
+            if (mMillennialInterstitial.isAdAvailable()) {
+                Log.d("MoPub", "Millennial interstitial ad loaded successfully.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial request completed, but no ad was available.");
+                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            }
+        }
+
+        @Override
+        public void requestFailed(final MMAd mmAd, final MMException e) {
+            if (mMillennialInterstitial == null || e == null) {
+                mInterstitialListener.onInterstitialFailed(NETWORK_INVALID_STATE);
+            } else if (e.getCode() == MMException.CACHE_NOT_EMPTY && mMillennialInterstitial.isAdAvailable()) {
+                // requestFailed can be due to an ad already loaded or an ad failed to load.
+                Log.d("MoPub", "Millennial interstitial loaded successfully from cache.");
+                mInterstitialListener.onInterstitialLoaded();
+            } else {
+                Log.d("MoPub", "Millennial interstitial ad failed to load.");
+                mInterstitialListener.onInterstitialFailed(NETWORK_NO_FILL);
+            }
+        }
+
+        @Override
+        public void onSingleTap(final MMAd mmAd) {
+            Log.d("MoPub", "Millennial interstitial clicked.");
+            mInterstitialListener.onInterstitialClicked();
+        }
+
+    }
+}
