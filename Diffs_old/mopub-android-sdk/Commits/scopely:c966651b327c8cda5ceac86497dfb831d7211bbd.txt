diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
deleted file mode 100644
index d3ad9e6b..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdFetcherTest.java
+++ /dev/null
@@ -1,83 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.*;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class AdFetcherTest {
-    private AdFetcher subject;
-    private AdViewController adViewController;
-    private MoPubView moPubView;
-    private HttpResponse response;
-
-    @Before
-    public void setup() {
-        adViewController = mock(AdViewController.class);
-        moPubView = mock(MoPubView.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
-
-        subject = new AdFetcher(adViewController, "expected userAgent");
-        response = new TestHttpResponseWithHeaders(200, "yahoo!!!");
-    }
-
-    @Test
-    public void shouldSendResponseToAdView() {
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("url");
-
-        verify(adViewController).configureUsingHttpResponse(eq(response));
-    }
-
-    @Test
-    public void fetchAdForUrl_shouldRouteMillennialBannerToCustomEventHandling() throws Exception {
-        String json = "{\"adWidth\": 320, \"adHeight\": 50, \"adUnitID\": \"44310\"}";
-        response.addHeader(AD_TYPE_HEADER, "millennial_native");
-        response.addHeader(NATIVE_PARAMS_HEADER, json);
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("ignored_url");
-
-        Map<String, String> paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME_HEADER, "com.mopub.mobileads.MillennialBanner");
-        paramsMap.put(CUSTOM_EVENT_DATA_HEADER, json);
-
-        verify(moPubView).loadCustomEvent(eq(paramsMap));
-    }
-
-    @Test
-    public void fetchAdForUrl_shouldRouteMillennialInterstitialToCustomEventHandling() throws Exception {
-        AdViewController interstitialAdViewController = mock(AdViewController.class);
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-        stub(interstitialAdViewController.getMoPubView()).toReturn(moPubInterstitialView);
-        subject = new AdFetcher(interstitialAdViewController, "expected userAgent");
-
-        String json = "{\"adWidth\": 320, \"adHeight\": 480, \"adUnitID\": \"44310\"}";
-        response.addHeader(AD_TYPE_HEADER, "interstitial");
-        response.addHeader(FULL_AD_TYPE_HEADER, "millennial_full");
-        response.addHeader(NATIVE_PARAMS_HEADER, json);
-        Robolectric.addPendingHttpResponse(response);
-
-        subject.fetchAdForUrl("ignored_url");
-
-        Map<String, String> paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME_HEADER, "com.mopub.mobileads.MillennialInterstitial");
-        paramsMap.put(CUSTOM_EVENT_DATA_HEADER, json);
-
-        verify(moPubInterstitialView).loadCustomEvent(eq(paramsMap));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
deleted file mode 100644
index f91b412f..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdLoadTaskTest.java
+++ /dev/null
@@ -1,162 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.apache.http.Header;
-import org.apache.http.HttpEntity;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.AdFetcher.*;
-import static com.mopub.mobileads.AdTypeTranslator.*;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-@RunWith(SdkTestRunner.class)
-public class AdLoadTaskTest {
-
-    private AdViewController adViewController;
-    private HttpResponse response;
-    private String standardExpectedJson;
-
-    @Before
-    public void setup() {
-        adViewController = mock(AdViewController.class);
-        response = new TestHttpResponseWithHeaders(200, "");
-        standardExpectedJson = "{\"Scrollable\":\"false\",\"Redirect-Url\":\"redirect\",\"Clickthrough-Url\":\"clickthrough\",\"Html-Response-Body\":\"%3Chtml%3E%3C%2Fhtml%3E\"}";
-    }
-
-    @Test
-    public void fromHttpResponse_whenCustomEvent_shouldGetNameAndData() throws Exception {
-        String expectedCustomData = "Custom data";
-        response.addHeader(AD_TYPE_HEADER, "custom");
-        String expectedCustomEventName = "custom event name";
-        response.addHeader(CUSTOM_EVENT_NAME_HEADER, expectedCustomEventName);
-        response.addHeader(CUSTOM_EVENT_DATA_HEADER, expectedCustomData);
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(expectedCustomEventName);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedCustomData);
-    }
-
-    @Test
-    public void fromHttpResponse_whenNoCustomEventName_shouldCreateLegacyCustomEventAdLoadTaskWithAHeader() throws Exception {
-        String expectedCustomData = "Custom data";
-        String expectedHeaderValue = "some stuff";
-        response.addHeader(AD_TYPE_HEADER, "custom");
-        response.addHeader(CUSTOM_EVENT_DATA_HEADER, expectedCustomData);
-        response.addHeader(CUSTOM_SELECTOR_HEADER, expectedHeaderValue);
-
-        AdLoadTask.LegacyCustomEventAdLoadTask customEventTask = (AdLoadTask.LegacyCustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        Header taskHeader = customEventTask.getHeader();
-        assertThat(taskHeader).isNotNull();
-        assertThat(taskHeader.getName()).isEqualTo(CUSTOM_SELECTOR_HEADER);
-        assertThat(taskHeader.getValue()).isEqualTo(expectedHeaderValue);
-    }
-
-    @Test
-    public void fromHttpResponse_whenMraidBanner_shouldCreateAnEncodedJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("mraid");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(MRAID_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenMraidInterstitial_shouldCreateAnEncodedJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("mraid");
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(MRAID_INTERSTITIAL);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenCustomEventDelegate_shouldConvertAdMobToCustomEvent() throws Exception {
-        String expectedNativeParams = "{\"this is a json\":\"map\",\"whee\":\"look at me\"}";
-        response.addHeader(AD_TYPE_HEADER, "admob_native");
-        response.addHeader(NATIVE_PARAMS_HEADER, expectedNativeParams);
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(ADMOB_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedNativeParams);
-    }
-
-    @Test
-    public void fromHttpResponse_whenHtmlBanner_shouldConvertToCustomEventBanner() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenHtmlInterstitial_shouldConvertToCustomEventInterstitial() throws Exception {
-        String htmlData = "<html></html>";
-        response = new TestHttpResponseWithHeaders(200, htmlData);
-        addExpectedResponseHeaders("html");
-        stub(adViewController.getMoPubView()).toReturn(mock(MoPubInterstitial.MoPubInterstitialView.class));
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_INTERSTITIAL);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(standardExpectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenEntityIsNull_shouldCreateMinimumJsonString() throws Exception {
-        String htmlData = "<html></html>";
-        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
-        response = new TestHttpResponseWithHeaders(200, htmlData) {
-            @Override
-            public HttpEntity getEntity() {
-                return null;
-            }
-        };
-        response.addHeader(AD_TYPE_HEADER, "html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenScrollableIsOne_shouldBeReflectedInJson() throws Exception {
-        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
-        response.addHeader(SCROLLABLE_HEADER, "1");
-        response.addHeader(AD_TYPE_HEADER, "html");
-
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void fromHttpResponse_whenScrollableIsNotSpecified_shouldDefaultToTrueInJson() throws Exception {
-        String expectedJson = "{\"Scrollable\":\"true\",\"Html-Response-Body\":\"\"}";
-        response.addHeader(AD_TYPE_HEADER, "html");
-
-        AdLoadTask.CustomEventAdLoadTask customEventTask = (AdLoadTask.CustomEventAdLoadTask) AdLoadTask.fromHttpResponse(response, adViewController);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_NAME_HEADER)).isEqualTo(HTML_BANNER);
-        assertThat(customEventTask.getParamsMap().get(CUSTOM_EVENT_DATA_HEADER)).isEqualTo(expectedJson);
-    }
-
-    private void addExpectedResponseHeaders(String adType) {
-        response.addHeader(SCROLLABLE_HEADER, "0");
-        response.addHeader(AD_TYPE_HEADER, adType);
-        response.addHeader(REDIRECT_URL_HEADER, "redirect");
-        response.addHeader(CLICKTHROUGH_URL_HEADER, "clickthrough");
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
deleted file mode 100644
index 07a8caa5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdTypeTranslatorTest.java
+++ /dev/null
@@ -1,87 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class AdTypeTranslatorTest {
-    private AdTypeTranslator subject;
-    private String customEventName;
-    private MoPubView moPubView;
-    private MoPubInterstitial.MoPubInterstitialView moPubInterstitialView;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new AdTypeTranslator();
-        moPubView = mock(MoPubView.class);
-        moPubInterstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-    }
-
-    @Test
-    public void getAdMobBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "admob_native", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_BANNER);
-    }
-
-    @Test
-    public void getAdMobInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "admob_full");
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.ADMOB_INTERSTITIAL);
-    }
-
-    @Test
-    public void getMillennialBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "millennial_native", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_BANNER);
-    }
-
-    @Test
-    public void getMillennnialInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "interstitial", "millennial_full");
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MILLENNIAL_INTERSTITIAL);
-    }
-
-    @Test
-    public void getMraidBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "mraid", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_BANNER);
-    }
-
-    @Test
-    public void getMraidInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "mraid", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.MRAID_INTERSTITIAL);
-    }
-
-    @Test
-    public void getHtmlBanner() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubView, "html", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_BANNER);
-    }
-
-    @Test
-    public void getHtmlInterstitial() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(moPubInterstitialView, "html", null);
-
-        assertThat(customEventName).isEqualTo(AdTypeTranslator.HTML_INTERSTITIAL);
-    }
-
-    @Test
-    public void getCustomEventNameForAdType_whenSendingNonsense_shouldReturnNull() throws Exception {
-        customEventName = AdTypeTranslator.getCustomEventNameForAdType(null, null, null);
-
-        assertThat(customEventName).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
deleted file mode 100644
index b602765a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdUrlGeneratorTest.java
+++ /dev/null
@@ -1,313 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.res.Configuration;
-import android.location.Location;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-import android.provider.Settings;
-import android.telephony.TelephonyManager;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowConnectivityManager;
-import org.robolectric.shadows.ShadowNetworkInfo;
-import org.robolectric.shadows.ShadowTelephonyManager;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static android.net.ConnectivityManager.*;
-import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
-import static com.mopub.mobileads.AdUrlGenerator.MoPubNetworkType;
-import static com.mopub.mobileads.util.Strings.isEmpty;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class AdUrlGeneratorTest {
-
-    private AdUrlGenerator subject;
-    private static final String TEST_UDID = "20b013c721c";
-    private String expectedUdidSha;
-    private Configuration configuration;
-    private ShadowTelephonyManager shadowTelephonyManager;
-    private ShadowConnectivityManager shadowConnectivityManager;
-    private Activity context;
-
-    @Before
-    public void setup() {
-        context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        subject = new AdUrlGenerator(context);
-        Settings.Secure.putString(application.getContentResolver(), Settings.Secure.ANDROID_ID, TEST_UDID);
-        expectedUdidSha = Utils.sha1(TEST_UDID);
-        configuration = application.getResources().getConfiguration();
-        shadowTelephonyManager = shadowOf((TelephonyManager) application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = shadowOf((ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE));
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeMinimumFields() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdidSha).build();
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldRunMultipleTimes() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdidSha).build();
-
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeAllFields() throws Exception {
-        String expectedAdUrl = new AdUrlBuilder(expectedUdidSha)
-                .withAdUnitId("adUnitId")
-                .withQuery("key%3Avalue")
-                .withLatLon("20.1%2C30.0", "1")
-                .withMcc("123")
-                .withMnc("456")
-                .withCountryIso("expected%20country")
-                .withCarrierName("expected%20carrier")
-                .build();
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setNetworkCountryIso("expected country");
-        shadowTelephonyManager.setNetworkOperatorName("expected carrier");
-
-        Location location = new Location("");
-        location.setLatitude(20.1);
-        location.setLongitude(30.0);
-        location.setAccuracy(1.23f); // should get rounded to "1"
-
-        String adUrl = subject
-                .withAdUnitId("adUnitId")
-                .withKeywords("key:value")
-                .withLocation(location)
-                .generateUrlString("ads.mopub.com");
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void generateAdUrl_shouldRecognizeOrientation() throws Exception {
-        configuration.orientation = Configuration.ORIENTATION_LANDSCAPE;
-        assertThat(generateMinimumUrlString()).contains("&o=l");
-        configuration.orientation = Configuration.ORIENTATION_PORTRAIT;
-        assertThat(generateMinimumUrlString()).contains("&o=p");
-        configuration.orientation = Configuration.ORIENTATION_SQUARE;
-        assertThat(generateMinimumUrlString()).contains("&o=s");
-    }
-
-    @Test
-    public void generateAdUrl_shouldHandleFunkyNetworkOperatorCodes() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-
-        shadowTelephonyManager.setNetworkOperator("123456");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-
-        shadowTelephonyManager.setNetworkOperator("12345");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("45").build());
-
-        shadowTelephonyManager.setNetworkOperator("1234");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("4").build());
-
-        shadowTelephonyManager.setNetworkOperator("123");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("").build());
-
-        shadowTelephonyManager.setNetworkOperator("12");
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("12").withMnc("").build());
-    }
-
-    @Test
-    public void generateAdurl_whenOnCDMA_shouldGetOwnerStringFromSimCard() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_READY);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("789").withMnc("012").build());
-    }
-
-    @Test
-    public void generateAdurl_whenSimNotReady_shouldDefaultToNetworkOperator() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-        shadowTelephonyManager.setPhoneType(TelephonyManager.PHONE_TYPE_CDMA);
-        shadowTelephonyManager.setSimState(TelephonyManager.SIM_STATE_ABSENT);
-        shadowTelephonyManager.setNetworkOperator("123456");
-        shadowTelephonyManager.setSimOperator("789012");
-        String adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withMcc("123").withMnc("456").build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldSetNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-        String adUrl;
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_ETHERNET));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.ETHERNET).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_WIFI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.WIFI).build());
-
-        // bunch of random mobile types just to make life more interesting
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_DUN));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_HIPRI));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_MMS));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_SUPL));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
-    }
-
-    @Test
-    public void generateAdUrl_whenNoNetworkPermission_shouldGenerateUnknownNetworkType() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-
-        shadowOf(context).denyPermissions(ACCESS_NETWORK_STATE);
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-    @Test
-    public void generateAdUrl_shouldTolerateNullActiveNetwork() throws Exception {
-        AdUrlBuilder urlBuilder = new AdUrlBuilder(expectedUdidSha);
-        shadowConnectivityManager.setActiveNetworkInfo(null);
-
-        String adUrl = generateMinimumUrlString();
-
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
-    }
-
-    private NetworkInfo createNetworkInfo(int type) {
-        return ShadowNetworkInfo.newInstance(null,
-                type,
-                NETWORK_TYPE_UNKNOWN, true, true);
-    }
-
-    private String generateMinimumUrlString() {
-        return subject.generateUrlString("ads.mopub.com");
-    }
-
-    private static class AdUrlBuilder {
-        private String expectedUdidSha;
-        private String adUnitId = "";
-        private String query = "";
-        private String latLon = "";
-        private String locationAccuracy = "";
-        private String mnc = "";
-        private String mcc = "";
-        private String countryIso = "";
-        private String carrierName = "";
-        private MoPubNetworkType networkType = MoPubNetworkType.MOBILE;
-
-        public AdUrlBuilder(String expectedUdidSha) {
-            this.expectedUdidSha = expectedUdidSha;
-        }
-
-        public String build() {
-            return "http://ads.mopub.com/m/ad" +
-                    "?v=6" +
-                    paramIfNotEmpty("id", adUnitId) +
-                    "&nv=" + MoPub.SDK_VERSION +
-                    "&udid=sha%3A" + expectedUdidSha +
-                    paramIfNotEmpty("q", query) +
-                    (isEmpty(latLon) ? "" : "&ll=" + latLon + "&lla=" + locationAccuracy) +
-                    "&z=-0700" +
-                    "&o=u" +
-                    "&sc_a=1.0" +
-                    "&mr=1" +
-                    paramIfNotEmpty("mcc", mcc) +
-                    paramIfNotEmpty("mnc", mnc) +
-                    paramIfNotEmpty("iso", countryIso) +
-                    paramIfNotEmpty("cn", carrierName) +
-                    "&ct=" + networkType +
-                    "&av=1.0";
-        }
-
-        public AdUrlBuilder withAdUnitId(String adUnitId) {
-            this.adUnitId = adUnitId;
-            return this;
-        }
-
-        public AdUrlBuilder withQuery(String query) {
-            this.query = query;
-            return this;
-        }
-
-        public AdUrlBuilder withLatLon(String latLon, String locationAccuracy) {
-            this.latLon = latLon;
-            this.locationAccuracy = locationAccuracy;
-            return this;
-        }
-
-        public AdUrlBuilder withMcc(String mcc) {
-            this.mcc = mcc;
-            return this;
-        }
-
-        public AdUrlBuilder withMnc(String mnc) {
-            this.mnc = mnc;
-            return this;
-        }
-
-        public AdUrlBuilder withCountryIso(String countryIso) {
-            this.countryIso = countryIso;
-            return this;
-        }
-
-        public AdUrlBuilder withCarrierName(String carrierName) {
-            this.carrierName = carrierName;
-            return this;
-        }
-
-        public AdUrlBuilder withNetworkType(MoPubNetworkType networkType) {
-            this.networkType = networkType;
-            return this;
-        }
-
-        private String paramIfNotEmpty(String key, String value) {
-            if (isEmpty(value)) {
-                return "";
-            } else {
-                return "&" + key + "=" + value;
-            }
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
deleted file mode 100644
index dbd049bc..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ /dev/null
@@ -1,432 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.view.Gravity;
-import android.view.View;
-import android.webkit.WebView;
-import android.widget.FrameLayout;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.factories.HttpClientFactory;
-import com.mopub.mobileads.test.support.*;
-import org.apache.http.HttpRequest;
-import org.apache.http.HttpResponse;
-import org.apache.http.client.HttpClient;
-import org.apache.http.conn.ClientConnectionManager;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-
-import java.lang.reflect.InvocationTargetException;
-
-import static android.Manifest.permission.ACCESS_NETWORK_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NO_FILL;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.fest.assertions.api.Fail.fail;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.application;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class AdViewControllerTest {
-    private AdViewController subject;
-    private MoPubView moPubView;
-    private HttpResponse response;
-    private HttpClient httpClient;
-    private AdFetcher adFetcher;
-
-    @Before
-    public void setup() {
-        moPubView = mock(MoPubView.class);
-        httpClient = HttpClientFactory.create();
-        Activity context = new Activity();
-        shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
-        subject = new AdViewController(context, moPubView);
-        response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        adFetcher = TestAdFetcherFactory.getSingletonMock();
-    }
-
-    @Test
-    public void initialization_shouldInitializeWebViewFactories() throws Exception {
-        new HtmlBannerWebViewFactory().internalCreate(null, false, "", "");
-        new HtmlInterstitialWebViewFactory().internalCreate(null, false, "", "");
-
-        // pass
-    }
-
-    @Test
-    public void configureUsingHttpResponse_shouldSetFields() throws Exception {
-        response.addHeader("X-Launchpage", "redirect url");
-        response.addHeader("X-Clickthrough", "clickthrough url");
-        response.addHeader("X-Width", "320  ");
-        response.addHeader("X-Height", "  50");
-        response.addHeader("X-Refreshtime", "70");
-
-        subject.configureUsingHttpResponse(response);
-
-        assertThat(subject.getRedirectUrl()).isEqualTo("redirect url");
-        assertThat(subject.getClickthroughUrl()).isEqualTo("clickthrough url");
-        assertThat(subject.getAdWidth()).isEqualTo(320);
-        assertThat(subject.getAdHeight()).isEqualTo(50);
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(70000);
-    }
-
-    @Test
-    public void configureUsingHttpResponse_shouldSetRefreshTimeToMinimumOf10Seconds() throws Exception {
-        response.addHeader("X-Refreshtime", "0");
-
-        subject.configureUsingHttpResponse(response);
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(10000);
-    }
-
-    @Test
-    public void configureUsingHttpResponse_whenRefreshTimeNotSpecified_shouldResetRefreshTimeTo0Seconds() throws Exception {
-        response.addHeader("X-Refreshtime", "5");
-        subject.configureUsingHttpResponse(response);
-
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(10000);
-        response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        // no X-Refreshtime header
-        subject.configureUsingHttpResponse(response);
-
-        assertThat(subject.getRefreshTimeMilliseconds()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutorefreshIsOff() throws Exception {
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
-        Robolectric.pauseMainLooper();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.setAutorefreshEnabled(false);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfRefreshTimeIsZero() throws Exception {
-//        response.addHeader("X-Refreshtime", "0");
-        subject.configureUsingHttpResponse(response);
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.scheduleRefreshTimerIfEnabled();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void trackImpression_shouldHttpGetTheImpressionUrl() throws Exception {
-        response.addHeader("X-Imptracker", "http://trackingUrl");
-        subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = new WebView(subject.getContext()).getSettings().getUserAgentString();
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        assertThat(expectedUserAgent).isNotNull();
-
-        subject.trackImpression();
-        Thread.sleep(300); // does this make the test flaky?
-
-        HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
-        assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
-        assertThat(request.getRequestLine().getUri()).isEqualTo("http://trackingUrl");
-
-        ClientConnectionManager connectionManager = httpClient.getConnectionManager();
-        try {
-            Utils.invokeInstanceMethod(connectionManager, "assertStillUp");
-            fail("should have thrown an exception");
-        } catch (InvocationTargetException expected) {
-            assertThat(expected.getCause()).isInstanceOf(IllegalStateException.class);
-        }
-    }
-
-    @Test
-    public void trackImpression_shouldDoNothingIfImpressionUrlNotSpecified() throws Exception {
-        subject.configureUsingHttpResponse(response);
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        subject.trackImpression();
-        Thread.sleep(300); // does this make the test flaky?
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
-    @Test
-    public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
-        response.addHeader("X-Clickthrough", "http://clickUrl");
-        subject.configureUsingHttpResponse(response);
-        String expectedUserAgent = new WebView(subject.getContext()).getSettings().getUserAgentString();
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        assertThat(expectedUserAgent).isNotNull();
-
-        subject.registerClick();
-        Thread.sleep(200); // does this make the test flaky?
-
-        HttpRequest request = fakeHttpLayer.getLastSentHttpRequestInfo().getHttpRequest();
-        assertThat(request.getFirstHeader("User-Agent").getValue()).isEqualTo(expectedUserAgent);
-        assertThat(request.getRequestLine().getUri()).isEqualTo("http://clickUrl");
-
-        ClientConnectionManager connectionManager = httpClient.getConnectionManager();
-        try {
-            Utils.invokeInstanceMethod(connectionManager, "assertStillUp");
-            fail("should have thrown an exception");
-        } catch (InvocationTargetException expected) {
-            assertThat(expected.getCause()).isInstanceOf(IllegalStateException.class);
-        }
-    }
-
-    @Test
-    public void trackImpression_shouldDoNothingIfClickthroughUrlNotSpecified() throws Exception {
-        subject.configureUsingHttpResponse(response);
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-
-        subject.registerClick();
-        Thread.sleep(50); // does this make the test flaky?
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
-    @Test
-    public void generateAdUrl_shouldIncludeMinFields() throws Exception {
-        String expectedAdUrl = "http://ads.mopub.com/m/ad" +
-                "?v=6" +
-                "&nv=" + MoPub.SDK_VERSION +
-                "&udid=sha%3A" +
-                "&z=-0700" +
-                "&o=u" +
-                "&sc_a=1.0" +
-                "&mr=1" +
-                "&ct=3" +
-                "&av=1.0";
-
-        String adUrl = subject.generateAdUrl();
-
-        assertThat(adUrl).isEqualTo(expectedAdUrl);
-    }
-
-    @Test
-    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-
-        subject.loadAd();
-
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
-    @Test
-    public void loadAd_shouldScheduleRefreshIfNoNetworkConnectivity() throws Exception {
-        FakeHttpLayer fakeHttpLayer = Robolectric.getFakeHttpLayer();
-        Robolectric.pauseMainLooper();
-        ConnectivityManager connectivityManager = (ConnectivityManager) application.getSystemService(Context.CONNECTIVITY_SERVICE);
-        shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
-        response.addHeader("X-Refreshtime", "30");
-        subject.configureUsingHttpResponse(response);
-        subject.setAdUnitId("adUnitId");
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-        assertThat(fakeHttpLayer.getLastSentHttpRequestInfo()).isNull();
-    }
-
-    @Test
-    public void loadNonJavascript_shouldFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-
-        verify(adFetcher).fetchAdForUrl(eq(url));
-    }
-
-    @Test
-    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-        reset(adFetcher);
-        subject.loadNonJavascript(url);
-
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
-    }
-
-    @Test
-    public void loadNonJavascript_shouldClearTheFailUrl() throws Exception {
-        subject.setFailUrl("blarg:");
-        subject.loadNonJavascript("http://www.goodness.com");
-        reset(adFetcher);
-        subject.loadFailUrl(null);
-
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
-        verify(moPubView).adFailed(eq(NO_FILL));
-    }
-
-    @Test
-    public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
-        subject.loadNonJavascript(null);
-        // pass
-    }
-
-    @Test
-    public void reload_shouldReuseOldUrl() throws Exception {
-        String url = "http://www.guy.com";
-        subject.loadNonJavascript(url);
-        subject.setNotLoading();
-        reset(adFetcher);
-        subject.reload();
-
-        verify(adFetcher).fetchAdForUrl(eq(url));
-    }
-
-    @Test
-    public void loadFailUrl_shouldLoadFailUrl() throws Exception {
-        String failUrl = "http://www.bad.man";
-        subject.setFailUrl(failUrl);
-        subject.loadFailUrl(INTERNAL_ERROR);
-
-        verify(adFetcher).fetchAdForUrl(eq(failUrl));
-        verify(moPubView, never()).adFailed(any(MoPubErrorCode.class));
-    }
-
-    @Test
-    public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
-        subject.loadFailUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
-        subject.setFailUrl(null);
-        subject.loadFailUrl(INTERNAL_ERROR);
-
-        verify(moPubView).adFailed(eq(NO_FILL));
-        verify(adFetcher, never()).fetchAdForUrl(anyString());
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void cleanup_shouldCleanupHtmlBannerWebViewFactory() throws Exception {
-        subject.cleanup();
-
-        new HtmlBannerWebViewFactory().internalCreate(null, false, "", "");
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void cleanup_shouldCleanupHtmlInterstitialWebViewFactory() throws Exception {
-        subject.cleanup();
-
-        new HtmlInterstitialWebViewFactory().internalCreate(null, false, "", "");
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
-        subject.setAdContentView(view);
-
-        verify(moPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
-        View view = mock(View.class);
-        AdViewController.setShouldHonorServerDimensions(view);
-        subject.configureUsingHttpResponse(response);
-        subject.setAdContentView(view);
-
-        verify(moPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
-        subject.configureUsingHttpResponse(response);
-        View view = mock(View.class);
-        subject.setAdContentView(view);
-
-        verify(moPubView).removeAllViews();
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(view), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.height).isEqualTo(FrameLayout.LayoutParams.WRAP_CONTENT);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-
-    @Test
-    public void cleanup_whenOtherAdViewControllersAreActive_shouldNotDisableTheWebViewPool() throws Exception {
-        AdViewController anotherAdViewController = new AdViewController(new Activity(), moPubView);
-        subject.cleanup();
-
-        assertThat(TestHtmlBannerWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "")).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "")).isNotNull();
-
-        anotherAdViewController.cleanup();
-        try {
-            TestHtmlBannerWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "");
-            fail("Expected getNextHtmlWebView to fail");
-        } catch(NullPointerException e) {
-            // success!
-        }
-        try {
-            TestHtmlInterstitialWebViewFactory.getWebViewPool().getNextHtmlWebView(null, true, "", "");
-            fail("Expected getNextHtmlWebView to fail");
-        } catch(NullPointerException e) {
-            // success!
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
deleted file mode 100644
index f58c4d5a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseHtmlWebViewTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowWebView;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class BaseHtmlWebViewTest {
-
-    private BaseHtmlWebView subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new BaseHtmlWebView(new Activity());
-    }
-
-    @Test
-    public void init_shouldSetWebViewScrollability() throws Exception {
-        ShadowWebView shadowSubject = shadowOf(subject);
-
-        subject.init(false);
-        assertThat(shadowSubject.getOnTouchListener()).isNotNull();
-
-        subject.init(true);
-        assertThat(shadowSubject.getOnTouchListener()).isNull();
-    }
-
-    @Test
-    public void loadUrl_shouldAcceptNullParameter() throws Exception {
-        subject.loadUrl(null);
-        // pass
-    }
-
-    @Test
-    public void loadUrl_whenUrlIsJavascript_shouldCallSuperLoadUrl() throws Exception {
-        String javascriptUrl = "javascript:function() {alert(\"guy\")};";
-        subject.loadUrl(javascriptUrl);
-
-        assertThat(shadowOf(subject).getLastLoadedUrl()).isEqualTo(javascriptUrl);
-    }
-
-    @Test
-    public void loadHtmlResponse_shouldCallLoadDataWithBaseURL() throws Exception {
-        String htmlResponse = "some random html response";
-        subject.loadHtmlResponse(htmlResponse);
-
-        ShadowWebView.LoadDataWithBaseURL lastLoadData = shadowOf(subject).getLastLoadDataWithBaseURL();
-        assertThat(lastLoadData.baseUrl).isEqualTo("http://ads.mopub.com/");
-        assertThat(lastLoadData.data).isEqualTo(htmlResponse);
-        assertThat(lastLoadData.mimeType).isEqualTo("text/html");
-        assertThat(lastLoadData.encoding).isEqualTo("utf-8");
-        assertThat(lastLoadData.historyUrl).isNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
deleted file mode 100644
index aa10b7a5..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ /dev/null
@@ -1,127 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Intent;
-import android.graphics.drawable.StateListDrawable;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageButton;
-import android.widget.RelativeLayout;
-import org.fest.assertions.api.ANDROID;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
-import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_NORMAL;
-import static com.mopub.mobileads.resource.Drawables.INTERSTITIAL_CLOSE_BUTTON_PRESSED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@Ignore
-public class BaseInterstitialActivityTest {
-    public static final String EXPECTED_SOURCE = "expected source";
-
-    protected BaseInterstitialActivity subject;
-    protected BroadcastReceiver broadcastReceiver;
-
-    public void setup() {
-        broadcastReceiver = mock(BroadcastReceiver.class);
-    }
-
-    @Test
-    public void onCreate_shouldSetContentView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(2);
-    }
-
-    @Test
-    public void onCreate_shouldCreateView() throws Exception {
-        subject.onCreate(null);
-
-        View adView = getContentView(subject).getChildAt(0);
-
-        assertThat(adView).isNotNull();
-    }
-
-    @Test
-    public void onCreate_shouldShowInterstitialCloseButton() throws Exception {
-        subject.onCreate(null);
-
-        ImageButton closeButton = getCloseButton();
-
-        Robolectric.clickOn(closeButton);
-
-        ANDROID.assertThat(subject).isFinishing();
-    }
-
-    @Test
-    public void onCreate_shouldMakeCloseButtonVisible() throws Exception {
-        subject.onCreate(null);
-
-        ImageButton closeButton = getCloseButton();
-
-        ANDROID.assertThat(closeButton).isVisible();
-        StateListDrawable states = (StateListDrawable) closeButton.getDrawable();
-
-        int[] unpressedState = new int[] {-android.R.attr.state_pressed};
-        assertThat(shadowOf(states).getDrawableForState(unpressedState))
-                .isEqualTo(INTERSTITIAL_CLOSE_BUTTON_NORMAL.decodeImage(new Activity()));
-        int[] pressedState = new int[] {android.R.attr.state_pressed};
-        assertThat(shadowOf(states).getDrawableForState(pressedState))
-                .isEqualTo(INTERSTITIAL_CLOSE_BUTTON_PRESSED.decodeImage(new Activity()));
-    }
-
-    @Test
-    public void canShowAndHideTheCloseButton() throws Exception {
-        subject.onCreate(null);
-        ANDROID.assertThat(getCloseButton()).isVisible();
-
-        subject.hideInterstitialCloseButton();
-        ANDROID.assertThat(getCloseButton()).isInvisible();
-
-        subject.showInterstitialCloseButton();
-        ANDROID.assertThat(getCloseButton()).isVisible();
-    }
-
-    @Test
-    public void onDestroy_shouldCleanUpContentView() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
-    }
-
-    protected ImageButton getCloseButton() {
-        return (ImageButton) getContentView(subject).getChildAt(1);
-    }
-
-    protected RelativeLayout getContentView(BaseInterstitialActivity subject) {
-        return (RelativeLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
-    }
-
-    protected void resetMockedView(View view) {
-        reset(view);
-        stub(view.getLayoutParams()).toReturn(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
deleted file mode 100644
index 1cc6d53c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventAdLoadTaskTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventAdLoadTaskTest {
-
-    private AdViewController adViewController;
-    private AdLoadTask.CustomEventAdLoadTask subject;
-    private Map<String, String> paramsMap;
-    private MoPubView moPubView;
-
-    @Before
-    public void setup() {
-        moPubView = mock(MoPubView.class);
-        adViewController = mock(AdViewController.class);
-        stub(adViewController.getMoPubView()).toReturn(moPubView);
-        paramsMap = new HashMap<String, String>();
-        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, paramsMap);
-    }
-
-    @Test
-    public void execute_shouldCallLoadCustomEvent() throws Exception {
-        subject.execute();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent(eq(paramsMap));
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsNull_shouldDoNothing() throws Exception {
-        subject = new AdLoadTask.CustomEventAdLoadTask(null, paramsMap);
-
-        subject.execute();
-        // pass
-    }
-
-    @Test
-    public void execute_whenAdViewControllerIsDestroyed_shouldDoNothing() throws Exception {
-        stub(adViewController.isDestroyed()).toReturn(true);
-
-        subject.execute();
-
-        verify(adViewController, never()).setNotLoading();
-        verify(moPubView, never()).loadCustomEvent(eq(paramsMap));
-    }
-
-    @Test
-    public void execute_whenParamsMapIsNull_shouldLoadNullParamsMap() throws Exception {
-        subject = new AdLoadTask.CustomEventAdLoadTask(adViewController, null);
-
-        subject.execute();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
-    }
-
-    @Test
-    public void execute_afterCleanup_shouldLoadNullParamsMap() throws Exception {
-        subject.cleanup();
-        subject.execute();
-
-        verify(adViewController).setNotLoading();
-        verify(moPubView).loadCustomEvent((Map<String, String>) eq(null));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
deleted file mode 100644
index ebe6a09a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ /dev/null
@@ -1,250 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.location.Location;
-import android.view.View;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
-
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventBannerAdapterTest {
-    private CustomEventBannerAdapter subject;
-    private MoPubView moPubView;
-    private static final String CLASS_NAME = "arbitrary_banner_adapter_class_name";
-    private static final String JSON_PARAMS = "{\"key\":\"value\",\"a different key\":\"a different value\"}";
-    private CustomEventBanner banner;
-    private Map<String,Object> expectedLocalExtras;
-    private HashMap<String,String> expectedServerExtras;
-
-    @Before
-    public void setUp() throws Exception {
-        moPubView = mock(MoPubView.class);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, JSON_PARAMS);
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedServerExtras = new HashMap<String, String>();
-
-        banner = CustomEventBannerFactory.create(CLASS_NAME);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidate() throws Exception {
-        subject.loadAd();
-
-        Robolectric.idleMainLooper(CustomEventBannerAdapter.TIMEOUT_DELAY - 1);
-        verify(moPubView, never()).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(moPubView).loadFailUrl(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void loadAd_shouldHaveEmptyServerExtrasOnInvalidJsonParams() throws Exception {
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{this is terrible JSON");
-        subject.loadAd();
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-
-        stub(moPubView.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, null);
-        subject.loadAd();
-
-        expectedLocalExtras.put("location", moPubView.getLocation());
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldPropagateJsonParamsInServerExtras() throws Exception {
-        subject.loadAd();
-
-        expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("a different key", "a different value");
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadAd_shouldScheduleTimeout_bannerLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onBannerLoaded(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadAd();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onBannerFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void onBannerLoaded_shouldSignalMoPubView() throws Exception {
-        View view = new View(new Activity());
-        subject.onBannerLoaded(view);
-        
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(view));
-        verify(moPubView).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerLoaded_whenViewIsHtmlBannerWebView_shouldNotTrackImpression() throws Exception {
-        View mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-        subject.onBannerLoaded(mockHtmlBannerWebView);
-
-        verify(moPubView).nativeAdLoaded();
-        verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
-        verify(moPubView, never()).trackNativeImpression();
-    }
-
-    @Test
-    public void onBannerFailed_shouldLoadFailUrl() throws Exception {
-        subject.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(moPubView).loadFailUrl(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onBannerFailed(null);
-
-        verify(moPubView).loadFailUrl(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws Exception {
-        subject.onBannerExpanded();
-
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adPresentedOverlay();
-    }
-
-    @Test
-    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
-        stub(moPubView.getAutorefreshEnabled()).toReturn(true);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(true));
-        verify(moPubView).adClosed();
-
-        stub(moPubView.getAutorefreshEnabled()).toReturn(false);
-        subject.onBannerExpanded();
-        reset(moPubView);
-        subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(false));
-        verify(moPubView).adClosed();
-    }
-
-    @Test
-    public void onBannerClicked_shouldRegisterClick() throws Exception {
-        subject.onBannerClicked();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldRegisterClick() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(moPubView).registerClick();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadAdToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadAd();
-
-        verify(banner, never()).loadBanner(
-                any(Context.class),
-                any(CustomEventBannerListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseBannerListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onBannerLoaded(null);
-        subject.onBannerFailed(null);
-        subject.onBannerExpanded();
-        subject.onBannerCollapsed();
-        subject.onBannerClicked();
-        subject.onLeaveApplication();
-
-        verify(moPubView, never()).nativeAdLoaded();
-        verify(moPubView, never()).setAdContentView(any(View.class));
-        verify(moPubView, never()).trackNativeImpression();
-        verify(moPubView, never()).loadFailUrl(any(MoPubErrorCode.class));
-        verify(moPubView, never()).setAutorefreshEnabled(any(boolean.class));
-        verify(moPubView, never()).adClosed();
-        verify(moPubView, never()).registerClick();
-    }
-
-    @Test
-    public void init_whenPassedHtmlData_shouldPutItInLocalExtras() throws Exception {
-        String expectedHtmlData = "expected html data";
-        expectedServerExtras.put(HTML_RESPONSE_BODY_KEY, expectedHtmlData);
-        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, "{\"Html-Response-Body\":\"expected html data\"}");
-        subject.loadAd();
-
-        verify(banner).loadBanner(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
deleted file mode 100644
index 050d3c5e..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventInterstitialAdapterTest.java
+++ /dev/null
@@ -1,238 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.location.Location;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.stub;
-import static org.mockito.Mockito.verify;
-
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventInterstitialAdapterTest {
-    private CustomEventInterstitialAdapter subject;
-    private MoPubInterstitial moPubInterstitial;
-    private CustomEventInterstitial interstitial;
-    private Map<String, Object> expectedLocalExtras;
-    private HashMap<String, String> expectedServerExtras;
-    private static final String CLASS_NAME = "arbitrary_interstitial_adapter_class_name";
-    private static final String JSON_PARAMS = "{\"key\":\"value\",\"a different key\":\"a different value\"}";
-    private CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener interstitialAdapterListener;
-
-    @Before
-    public void setUp() throws Exception {
-        moPubInterstitial = mock(MoPubInterstitial.class);
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, JSON_PARAMS);
-
-        expectedLocalExtras = new HashMap<String, Object>();
-        expectedServerExtras = new HashMap<String, String>();
-
-        interstitial = CustomEventInterstitialFactory.create(CLASS_NAME);
-
-        interstitialAdapterListener = mock(CustomEventInterstitialAdapter.CustomEventInterstitialAdapterListener.class);
-        subject.setAdapterListener(interstitialAdapterListener);
-    }
-
-    @Test
-    public void timeout_shouldSignalFailureAndInvalidate() throws Exception {
-        subject.loadInterstitial();
-        Robolectric.idleMainLooper(CustomEventInterstitialAdapter.TIMEOUT_DELAY - 1);
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isFalse();
-
-        Robolectric.idleMainLooper(1);
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(NETWORK_TIMEOUT));
-        assertThat(subject.isInvalidated()).isTrue();
-    }
-
-    @Test
-    public void loadInterstitial_shouldHaveEmptyServerExtrasOnInvalidJsonParams() throws Exception {
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, "{this is terrible JSON");
-        subject.loadInterstitial();
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateLocationInLocalExtras() throws Exception {
-        Location expectedLocation = new Location("");
-        expectedLocation.setLongitude(10.0);
-        expectedLocation.setLongitude(20.1);
-        stub(moPubInterstitial.getLocation()).toReturn(expectedLocation);
-        subject = new CustomEventInterstitialAdapter(moPubInterstitial, CLASS_NAME, null);
-        subject.loadInterstitial();
-
-        expectedLocalExtras.put("location", moPubInterstitial.getLocation());
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldPropagateJsonParamsInServerExtras() throws Exception {
-        subject.loadInterstitial();
-        expectedServerExtras.put("key", "value");
-        expectedServerExtras.put("a different key", "a different value");
-
-        verify(interstitial).loadInterstitial(
-                any(Context.class),
-                eq(subject),
-                eq(expectedLocalExtras),
-                eq(expectedServerExtras)
-        );
-    }
-
-    @Test
-    public void loadInterstitial_shouldScheduleTimeout_interstitialLoadedAndFailed_shouldCancelTimeout() throws Exception {
-        Robolectric.pauseMainLooper();
-
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onInterstitialLoaded();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-
-        subject.loadInterstitial();
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(1);
-
-        subject.onInterstitialFailed(null);
-        assertThat(Robolectric.getUiThreadScheduler().enqueuedTaskCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void showInterstitial_shouldCallCustomEventInterstitialShowInterstitial() throws Exception {
-        subject.showInterstitial();
-
-        verify(interstitial).showInterstitial();
-    }
-
-    @Test
-    public void onInterstitialLoaded_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialLoaded();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialLoaded();
-    }
-
-    @Test
-    public void onInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(ADAPTER_CONFIGURATION_ERROR));
-    }
-
-    @Test
-    public void onInterstitialFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() throws Exception {
-        subject.onInterstitialFailed(null);
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialFailed(eq(UNSPECIFIED));
-    }
-
-    @Test
-    public void onInterstitialShown_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialShown();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown(true);
-    }
-
-    @Test
-    public void onInterstitialClicked_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialClicked();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onLeaveApplication_shouldSignalAdapterListener() throws Exception {
-        subject.onLeaveApplication();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialClicked();
-    }
-
-    @Test
-    public void onInterstitialDismissed_shouldSignalAdapterListener() throws Exception {
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener).onCustomEventInterstitialDismissed();
-    }
-
-    @Test
-    public void invalidate_shouldCauseLoadInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.loadInterstitial();
-
-        verify(interstitial, never()).loadInterstitial(
-                any(Context.class),
-                any(CustomEventInterstitialListener.class),
-                any(Map.class),
-                any(Map.class)
-        );
-    }
-
-    @Test
-    public void invalidate_shouldCauseShowInterstitialToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.showInterstitial();
-
-        verify(interstitial, never()).showInterstitial();
-    }
-
-    @Test
-    public void invalidate_shouldCauseInterstitialListenerMethodsToDoNothing() throws Exception {
-        subject.invalidate();
-
-        subject.onInterstitialLoaded();
-        subject.onInterstitialFailed(null);
-        subject.onInterstitialShown();
-        subject.onInterstitialClicked();
-        subject.onLeaveApplication();
-        subject.onInterstitialDismissed();
-
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialLoaded();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialFailed(any(MoPubErrorCode.class));
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialShown(anyBoolean());
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialClicked();
-        verify(interstitialAdapterListener, never()).onCustomEventInterstitialDismissed();
-    }
-
-    @Test
-    public void shouldNotTrackImpressionsWhenHoldingAnHtmlInterstitial() throws Exception {
-        subject.onInterstitialShown();
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown(eq(true));
-
-        subject.setCustomEventInterstitial(mock(HtmlInterstitial.class));
-
-        subject.onInterstitialShown();
-        verify(interstitialAdapterListener).onCustomEventInterstitialShown(eq(false));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
deleted file mode 100644
index d6fda46c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ /dev/null
@@ -1,124 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.support.v4.content.LocalBroadcastManager;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class EventForwardingBroadcastReceiverTest {
-
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private EventForwardingBroadcastReceiver subject;
-    private Activity context;
-
-    @Before
-    public void setUp() throws Exception {
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener);
-        context = new Activity();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialFail_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialShow_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_FAIL);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
-    }
-
-
-    @Test
-    public void onReceive_whenActionInterstitialDismiss_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onReceive_whenActionInterstitialClick_shouldNotifyListener() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_CLICK);
-
-        subject.onReceive(context, intent);
-
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void onReceiver_whenCustomEventInterstitialListenerIsNull_shouldNotBlowUp() throws Exception {
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-
-        subject = new EventForwardingBroadcastReceiver(null);
-        subject.onReceive(context, intent);
-
-        // pass
-    }
-
-    @Test
-    public void register_shouldEnableReceivingBroadcasts() throws Exception {
-        subject.register(context);
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_shouldDisableReceivingBroadcasts() throws Exception {
-        subject.register(context);
-
-        subject.unregister();
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-    }
-
-    @Test
-    public void unregister_whenNotRegistered_shouldNotBlowUp() throws Exception {
-        subject.unregister();
-
-        // pass
-    }
-
-    @Test
-    public void unregister_shouldNotLeakTheContext() throws Exception {
-        subject.register(context);
-        subject.unregister();
-
-        LocalBroadcastManager.getInstance(context).registerReceiver(subject, BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER);
-        subject.unregister();
-
-        // Unregister shouldn't know the context any more and so should not have worked
-        Intent intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
deleted file mode 100644
index 01e02187..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ /dev/null
@@ -1,121 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.net.Uri;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import com.mopub.mobileads.test.support.TestMoPubViewFactory;
-import org.apache.http.HttpResponse;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
-public class HtmlBannerTest {
-
-    private HtmlBanner subject;
-    private HtmlBannerWebView htmlBannerWebView;
-    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private Activity context;
-    private String responseBody;
-
-    @Before
-    public void setup() {
-        subject = new HtmlBanner();
-        htmlBannerWebView = TestHtmlBannerWebViewFactory.getSingletonMock();
-        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        context = new Activity();
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        responseBody = "expected response body";
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(responseBody));
-        serverExtras.put(SCROLLABLE_KEY, "false");
-    }
-
-    @Test
-    public void loadBanner_shouldPopulateTheHtmlWebViewWithHtml() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void loadBanner_whenNoHtmlResponse_shouldNotifyBannerFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(htmlBannerWebView, never()).loadHtmlResponse(anyString());
-    }
-
-    @Test
-    public void loadBanner_shouldPassParametersThrough() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlBannerWebViewFactory.getLatestListener()).isSameAs(customEventBannerListener);
-        assertThat(TestHtmlBannerWebViewFactory.getLatestIsScrollable()).isTrue();
-        assertThat(TestHtmlBannerWebViewFactory.getLatestRedirectUrl()).isEqualTo("redirectUrl");
-        assertThat(TestHtmlBannerWebViewFactory.getLatestClickthroughUrl()).isEqualTo("clickthroughUrl");
-        verify(htmlBannerWebView).loadHtmlResponse(responseBody);
-    }
-
-    @Test
-    public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(htmlBannerWebView).destroy();
-    }
-
-    @Test
-    public void loadBanner_shouldCauseServerDimensionsToBeHonoredWhenLayingOutView() throws Exception {
-        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
-        MoPubView moPubView = TestMoPubViewFactory.getSingletonMock();
-        AdViewController adViewController = new AdViewController(context, moPubView);
-
-        HttpResponse response = new TestHttpResponseWithHeaders(200, "I ain't got no-body");
-        response.addHeader("X-Width", "320");
-        response.addHeader("X-Height", "50");
-        adViewController.configureUsingHttpResponse(response);
-
-        adViewController.setAdContentView(htmlBannerWebView);
-        ArgumentCaptor<FrameLayout.LayoutParams> layoutParamsCaptor = ArgumentCaptor.forClass(FrameLayout.LayoutParams.class);
-        verify(moPubView).addView(eq(htmlBannerWebView), layoutParamsCaptor.capture());
-        FrameLayout.LayoutParams layoutParams = layoutParamsCaptor.getValue();
-
-        assertThat(layoutParams.width).isEqualTo(320);
-        assertThat(layoutParams.height).isEqualTo(50);
-        assertThat(layoutParams.gravity).isEqualTo(Gravity.CENTER);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
deleted file mode 100644
index 2b182414..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerWebViewTest.java
+++ /dev/null
@@ -1,58 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlBannerWebViewTest {
-
-    private HtmlBannerWebView subject;
-    private CustomEventBannerListener customEventBannerListener;
-    private String clickthroughUrl;
-    private String redirectUrl;
-
-    @Before
-    public void setup() throws Exception {
-        subject = new HtmlBannerWebView(new Activity());
-        customEventBannerListener = mock(CustomEventBannerListener.class);
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventBannerListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlBannerWebView.HtmlBannerWebViewListener listenerSubject = new HtmlBannerWebView.HtmlBannerWebViewListener(customEventBannerListener);
-
-        listenerSubject.onClicked();
-        verify(customEventBannerListener).onBannerClicked();
-
-        listenerSubject.onLoaded(subject);
-        verify(customEventBannerListener).onBannerLoaded(eq(subject));
-
-        listenerSubject.onCollapsed();
-        verify(customEventBannerListener).onBannerCollapsed();
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventBannerListener).onBannerFailed(eq(NETWORK_INVALID_STATE));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
deleted file mode 100644
index 47522fe1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ /dev/null
@@ -1,140 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.net.Uri;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.anyString;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialTest {
-    private HtmlInterstitial subject;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Activity context;
-    private Map<String,Object> localExtras;
-    private Map<String,String> serverExtras;
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-    private String expectedResponse;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitial();
-
-        expectedResponse = "this is the response";
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, Uri.encode(expectedResponse));
-    }
-
-    @Test
-    public void loadInterstitial_shouldNotifyCustomEventInterstitialListenerOnLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_whenNoHtmlResponsePassedIn_shouldCallLoadFailUrl() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isFalse();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isNull();
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(htmlInterstitialWebView, never()).loadHtmlResponse(anyString());
-    }
-
-
-    @Test
-    public void showInterstitial_withMinimumExtras_shouldStartMoPubActivityWithDefaults() throws Exception {
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isFalse();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isNull();
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void showInterstitial_shouldStartMoPubActivityWithAllExtras() throws Exception {
-        serverExtras.put(SCROLLABLE_KEY, "true");
-        serverExtras.put(REDIRECT_URL_KEY, "redirectUrl");
-        serverExtras.put(CLICKTHROUGH_URL_KEY, "clickthroughUrl");
-
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo(expectedResponse);
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
deleted file mode 100644
index 5170ec78..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialWebViewTest.java
+++ /dev/null
@@ -1,79 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.webkit.WebViewClient;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import java.lang.reflect.Method;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.HtmlInterstitialWebView.HtmlInterstitialWebViewListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialWebViewTest {
-
-    private HtmlInterstitialWebView subject;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private String clickthroughUrl;
-    private boolean isScrollable;
-    private String redirectUrl;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlInterstitialWebView(new Activity());
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        isScrollable = false;
-        clickthroughUrl = "clickthroughUrl";
-        redirectUrl = "redirectUrl";
-    }
-
-    @Test
-    public void init_shouldSetupWebViewClient() throws Exception {
-        subject.init(customEventInterstitialListener, false, clickthroughUrl, redirectUrl);
-        WebViewClient webViewClient = shadowOf(subject).getWebViewClient();
-        assertThat(webViewClient).isNotNull();
-        assertThat(webViewClient).isInstanceOf(HtmlWebViewClient.class);
-    }
-
-    @Test
-    public void htmlBannerWebViewListener_shouldForwardCalls() throws Exception {
-        HtmlInterstitialWebViewListener listenerSubject = new HtmlInterstitialWebViewListener(customEventInterstitialListener);
-
-        listenerSubject.onLoaded(subject);
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        listenerSubject.onFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener).onInterstitialFailed(eq(NETWORK_INVALID_STATE));
-
-        listenerSubject.onClicked();
-        verify(customEventInterstitialListener).onInterstitialClicked();
-    }
-
-    @Test
-    public void init_shouldAddJavascriptInterface() throws Exception {
-        subject.init(customEventInterstitialListener, isScrollable, clickthroughUrl, redirectUrl);
-
-        Object javascriptInterface = shadowOf(subject).getJavascriptInterface("mopubUriInterface");
-        assertThat(javascriptInterface).isNotNull();
-
-        Method fireFinishLoad = javascriptInterface.getClass().getDeclaredMethod("fireFinishLoad");
-        Robolectric.pauseMainLooper();
-        boolean returnValue = (Boolean) fireFinishLoad.invoke(javascriptInterface);
-        assertThat(returnValue).isTrue();
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        Robolectric.unPauseMainLooper();
-        verify(customEventInterstitialListener).onInterstitialShown();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
deleted file mode 100644
index b63ab232..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ /dev/null
@@ -1,216 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Intent;
-import android.content.pm.ResolveInfo;
-import android.net.Uri;
-import android.webkit.WebView;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static com.mopub.mobileads.MraidBrowser.URL_EXTRA;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.*;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlWebViewClientTest {
-
-    private HtmlWebViewClient subject;
-    private HtmlWebViewListener htmlWebViewListener;
-    private BaseHtmlWebView htmlWebView;
-
-    @Before
-    public void setUp() throws Exception {
-        htmlWebViewListener = mock(HtmlWebViewListener.class);
-        htmlWebView = mock(BaseHtmlWebView.class);
-        stub(htmlWebView.getContext()).toReturn(new Activity());
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, "clickthrough", "redirect");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFinishLoad_shouldCallAdDidLoad() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://finishLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onLoaded(eq(htmlWebView));
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubClose_shouldCallAdDidClose() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://close");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onCollapsed();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubFailLoad_shouldCallLoadFailUrl() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://failLoad");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onFailed(UNSPECIFIED);
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustom_shouldStartCustomIntent() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc&data=myData");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getAction()).isEqualTo("myFnc");
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isEqualTo("myData");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withMoPubCustomAndNullData_shouldStartCustomIntent() throws Exception {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, "mopub://custom?fnc=myFnc");
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getAction()).isEqualTo("myFnc");
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(startedActivity.getStringExtra(HtmlBannerWebView.EXTRA_AD_CLICK_DATA)).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withPhoneIntent_shouldStartDefaultIntent() throws Exception {
-        assertPhoneUrlStartedCorrectIntent("tel:");
-        assertPhoneUrlStartedCorrectIntent("voicemail:");
-        assertPhoneUrlStartedCorrectIntent("sms:");
-        assertPhoneUrlStartedCorrectIntent("mailto:");
-        assertPhoneUrlStartedCorrectIntent("geo:");
-        assertPhoneUrlStartedCorrectIntent("google.streetview:");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withValidMarketIntent_shouldOpenBrowser() throws Exception {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validMarketUrl = "market://somethingValid";
-        Robolectric.packageManager.addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(validMarketUrl)), new ResolveInfo());
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validMarketUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-
-        Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
-        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo(validMarketUrl);
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withUnhandleableMarketIntent_shouldNotOpenBrowser() throws Exception {
-        String validMarketUrl = "market://somethingValid";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validMarketUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener, never()).onClicked();
-
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withHttpUrl_shouldOpenBrowser() throws Exception {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        String validUrl = "http://www.mopub.com";
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        assertThat(didOverrideUrl).isTrue();
-        verify(htmlWebViewListener).onClicked();
-
-        Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
-        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo(validUrl);
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withClickTrackingRedirect_shouldChangeUrl() throws Exception {
-        String validUrl = "http://www.mopub.com";
-        subject.shouldOverrideUrlLoading(htmlWebView, validUrl);
-
-        Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo("clickthrough&r=http%3A%2F%2Fwww.mopub.com");
-    }
-
-    @Test
-    public void shouldOverrideUrlLoading_withEmptyUrl_shouldLoadAboutBlank() throws Exception {
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null);
-        subject.shouldOverrideUrlLoading(htmlWebView, "");
-
-        Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
-        assertThat(startedActivity.getStringExtra(URL_EXTRA)).isEqualTo("about:blank");
-        assertThat(startedActivity.getData()).isNull();
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirect_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, "redirect");
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo(url);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlStartsWithRedirectAndHasClickthrough_shouldOpenInBrowser() throws Exception {
-        String url = "redirectUrlToLoad";
-        String expectedTrackingUrl = "clickthrough" + "&r=" + url;
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, url, null);
-
-        verify(view).stopLoading();
-
-        Intent intent = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(intent.getStringExtra(MraidBrowser.URL_EXTRA)).isEqualTo(expectedTrackingUrl);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidBrowser");
-    }
-
-    @Test
-    public void onPageStarted_whenLoadedUrlDoesntStartWithRedirect_shouldDoNothing() throws Exception {
-        WebView view = mock(WebView.class);
-        subject.onPageStarted(view, "this doesn't start with redirect", null);
-
-        verify(view, never()).stopLoading();
-
-        assertThat(Robolectric.getShadowApplication().getNextStartedActivity()).isNull();
-    }
-
-    private void assertPhoneUrlStartedCorrectIntent(String url) {
-        boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, url);
-
-        assertThat(didOverrideUrl).isTrue();
-
-        Intent startedActivity = assertActivityStarted();
-        assertThat(startedActivity.getAction()).isEqualTo(Intent.ACTION_VIEW);
-        assertThat(startedActivity.getData().toString()).isEqualTo(url);
-
-        verify(htmlWebViewListener).onClicked();
-        reset(htmlWebViewListener);
-    }
-
-    private Intent assertActivityStarted() {
-        Intent startedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(startedActivity).isNotNull();
-        assertThat(startedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        return startedActivity;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
deleted file mode 100644
index 56495389..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ /dev/null
@@ -1,172 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.BroadcastReceiver;
-import android.content.Intent;
-import android.view.View;
-import android.widget.RelativeLayout;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestHtmlInterstitialWebViewFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static android.widget.RelativeLayout.LayoutParams;
-import static com.mopub.mobileads.AdFetcher.CLICKTHROUGH_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.AdFetcher.REDIRECT_URL_KEY;
-import static com.mopub.mobileads.AdFetcher.SCROLLABLE_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_FAIL;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubActivityTest extends BaseInterstitialActivityTest {
-    public static final String EXPECTED_HTML_DATA = "htmlData";
-    public static final boolean EXPECTED_IS_SCROLLABLE = true;
-    public static final String EXPECTED_REDIRECT_URL = "redirectUrl";
-    public static final String EXPECTED_CLICKTHROUGH_URL = "http://expected_url";
-
-    private HtmlInterstitialWebView htmlInterstitialWebView;
-
-    @Before
-    public void setUp() throws Exception {
-        super.setup();
-        Intent moPubActivityIntent = createMoPubActivityIntent(EXPECTED_HTML_DATA, EXPECTED_IS_SCROLLABLE, EXPECTED_REDIRECT_URL, EXPECTED_CLICKTHROUGH_URL);
-        htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        resetMockedView(htmlInterstitialWebView);
-        subject = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent).create().get();
-        reset(htmlInterstitialWebView);
-        resetMockedView(htmlInterstitialWebView);
-    }
-
-    @Test
-    public void onCreate_shouldLayoutWebView() throws Exception {
-        subject.onCreate(null);
-
-        ArgumentCaptor<RelativeLayout.LayoutParams> captor = ArgumentCaptor.forClass(RelativeLayout.LayoutParams.class);
-        verify(htmlInterstitialWebView).setLayoutParams(captor.capture());
-        RelativeLayout.LayoutParams actualLayoutParams = captor.getValue();
-
-        assertThat(actualLayoutParams.width).isEqualTo(RelativeLayout.LayoutParams.FILL_PARENT);
-        assertThat(actualLayoutParams.height).isEqualTo(RelativeLayout.LayoutParams.WRAP_CONTENT);
-        assertOnlyOneRuleSet(actualLayoutParams, RelativeLayout.CENTER_IN_PARENT);
-    }
-
-    @Test
-    public void getAdView_shouldReturnPopulatedHtmlWebView() throws Exception {
-        View adView = subject.getAdView();
-
-        assertThat(adView).isSameAs(htmlInterstitialWebView);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void onDestroy_shouldDestroyMoPubView() throws Exception {
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(htmlInterstitialWebView).destroy();
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void start_shouldStartMoPubActivityWithCorrectParameters() throws Exception {
-        MoPubActivity.start(subject, "expectedResponse", true, "redirectUrl", "clickthroughUrl");
-
-        Intent nextStartedActivity = Robolectric.getShadowApplication().getNextStartedActivity();
-        assertThat(nextStartedActivity.getStringExtra(HTML_RESPONSE_BODY_KEY)).isEqualTo("expectedResponse");
-        assertThat(nextStartedActivity.getBooleanExtra(SCROLLABLE_KEY, false)).isTrue();
-        assertThat(nextStartedActivity.getStringExtra(REDIRECT_URL_KEY)).isEqualTo("redirectUrl");
-        assertThat(nextStartedActivity.getStringExtra(CLICKTHROUGH_URL_KEY)).isEqualTo("clickthroughUrl");
-        assertThat(nextStartedActivity.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-        assertThat(nextStartedActivity.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MoPubActivity");
-    }
-
-    @Test
-    public void getAdView_shouldCreateHtmlInterstitialWebViewAndLoadResponse() throws Exception {
-        subject.getAdView();
-
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestListener()).isNotNull();
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestIsScrollable()).isEqualTo(EXPECTED_IS_SCROLLABLE);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestRedirectUrl()).isEqualTo(EXPECTED_REDIRECT_URL);
-        assertThat(TestHtmlInterstitialWebViewFactory.getLatestClickthroughUrl()).isEqualTo(EXPECTED_CLICKTHROUGH_URL);
-        verify(htmlInterstitialWebView).loadHtmlResponse(EXPECTED_HTML_DATA);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingClicks() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialClicked();
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(BaseInterstitialActivity.ACTION_INTERSTITIAL_CLICK);
-    }
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingFail() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialFailed(UNSPECIFIED);
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_FAIL);
-
-        assertThat(shadowOf(subject).isFinishing()).isTrue();
-    }
-
-
-    @Test
-    public void getAdView_shouldSetUpForBroadcastingShow() throws Exception {
-        subject.getAdView();
-        BroadcastReceiver broadcastReceiver = mock(BroadcastReceiver.class);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        TestHtmlInterstitialWebViewFactory.getLatestListener().onInterstitialShown();
-
-        ArgumentCaptor<Intent> intentCaptor = ArgumentCaptor.forClass(Intent.class);
-        verify(broadcastReceiver).onReceive(eq(subject), intentCaptor.capture());
-        Intent intent = intentCaptor.getValue();
-        assertThat(intent.getAction()).isEqualTo(ACTION_INTERSTITIAL_SHOW);
-    }
-
-    private Intent createMoPubActivityIntent(String htmlData, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        return MoPubActivity.createIntent(new Activity(), htmlData, isScrollable, redirectUrl, clickthroughUrl);
-    }
-
-    private void assertOnlyOneRuleSet(LayoutParams layoutParams, int desiredRule) {
-        int[] rules = layoutParams.getRules();
-        for (int ruleIndex = 0; ruleIndex < rules.length; ruleIndex++) {
-            int currentRule = rules[ruleIndex];
-            if (ruleIndex == desiredRule) {
-                assertThat(currentRule).isNotEqualTo(0);
-            } else {
-                assertThat(currentRule).isEqualTo(0);
-            }
-        }
-    }
-}
-
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
deleted file mode 100644
index 3caf23a2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ /dev/null
@@ -1,78 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.apache.http.HttpRequest;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.Robolectric;
-import org.robolectric.tester.org.apache.http.FakeHttpLayer;
-import org.robolectric.tester.org.apache.http.HttpRequestInfo;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubConversionTrackerTest {
-    private MoPubConversionTracker subject;
-    private Activity context;
-    private FakeHttpLayer fakeHttpLayer;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MoPubConversionTracker();
-        context = new Activity();
-        fakeHttpLayer = Robolectric.getFakeHttpLayer();
-    }
-
-    @Test
-    public void reportAppOpen_onValidHttpResponse_isIdempotent() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
-
-        fakeHttpLayer.addPendingHttpResponse(200, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isFalse();
-    }
-
-    @Test
-    public void reportAppOpen_onInvalidStatusCode_shouldMakeSecondRequest() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
-
-        fakeHttpLayer.addPendingHttpResponse(404, "doesn't matter what this is as long as it's not nothing");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
-    }
-
-    @Test
-    public void reportAppOpen_onEmptyResponse_shouldMakeSecondRequest() throws Exception {
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
-
-        fakeHttpLayer.addPendingHttpResponse(200, "");
-        subject.reportAppOpen(context);
-        assertThat(requestWasMade()).isTrue();
-    }
-
-    private boolean requestWasMade() throws Exception {
-        String expectedUrl = new StringBuilder("http://ads.mopub.com/m/open")
-                .append("?v=6")
-                .append("&id=").append("com.mopub.mobileads")
-                .append("&udid=sha%3A").append("")
-                .append("&av=").append("1.0")
-                .toString();
-
-        Thread.sleep(500);
-        HttpRequestInfo lastSentHttpRequestInfo = fakeHttpLayer.getLastSentHttpRequestInfo();
-        if (lastSentHttpRequestInfo == null) {
-            return false;
-        }
-        HttpRequest request = lastSentHttpRequestInfo.getHttpRequest();
-        fakeHttpLayer.clearRequestInfos();
-        return request.getRequestLine().getUri().equals(expectedUrl);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
deleted file mode 100644
index 090873c4..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubInterstitialTest.java
+++ /dev/null
@@ -1,396 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-import com.mopub.mobileads.test.support.TestCustomEventInterstitialAdapterFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.math.BigDecimal;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_DATA_HEADER;
-import static com.mopub.mobileads.AdFetcher.CUSTOM_EVENT_NAME_HEADER;
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static com.mopub.mobileads.MoPubErrorCode.CANCELLED;
-import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-import static com.mopub.mobileads.MoPubView.LocationAwareness.LOCATION_AWARENESS_NORMAL;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(com.mopub.mobileads.test.support.SdkTestRunner.class)
-public class MoPubInterstitialTest {
-
-    private static final String KEYWORDS_VALUE = "expected_keywords";
-    private static final String AD_UNIT_ID_VALUE = "expected_adunitid";
-    private static final String SOURCE_VALUE = "expected_source";
-    private static final String CLICKTHROUGH_URL_VALUE = "expected_clickthrough_url";
-    private Activity activity;
-    private MoPubInterstitial subject;
-    private Map<String, String> paramsMap;
-    private CustomEventInterstitialAdapter customEventInterstitialAdapter;
-    private MoPubInterstitial.InterstitialAdListener interstitialAdListener;
-    private MoPubInterstitial.MoPubInterstitialView interstitialView;
-    private AdViewController adViewController;
-
-    @Before
-    public void setUp() throws Exception {
-        activity = new Activity();
-        subject = new MoPubInterstitial(activity, AD_UNIT_ID_VALUE);
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-
-        interstitialView = mock(MoPubInterstitial.MoPubInterstitialView.class);
-
-        paramsMap = new HashMap<String, String>();
-        paramsMap.put(CUSTOM_EVENT_NAME_HEADER, "class name");
-        paramsMap.put(CUSTOM_EVENT_DATA_HEADER, "class data");
-
-        customEventInterstitialAdapter = TestCustomEventInterstitialAdapterFactory.getSingletonMock();
-        reset(customEventInterstitialAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @Test
-    public void forceRefresh_shouldResetInterstitialViewAndMarkNotDestroyed() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialLoaded();
-        subject.forceRefresh();
-
-        assertThat(subject.isReady()).isFalse();
-        assertThat(subject.isDestroyed()).isFalse();
-        verify(interstitialView).forceRefresh();
-    }
-
-    @Test
-    public void setKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        String keywords = "these_are_keywords";
-
-        subject.setKeywords(keywords);
-        verify(interstitialView).setKeywords(eq(keywords));
-    }
-    @Test
-    public void getKeywordsTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.getKeywords();
-        verify(interstitialView).getKeywords();
-    }
-
-    @Test
-    public void getInterstitialAdListenerTest() throws Exception {
-        interstitialAdListener = mock(MoPubInterstitial.InterstitialAdListener.class);
-        subject.setInterstitialAdListener(interstitialAdListener);
-        assertThat(subject.getInterstitialAdListener()).isSameAs(interstitialAdListener);
-    }
-
-    @Test
-    public void setLocationAwarenessTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setLocationAwareness(LOCATION_AWARENESS_NORMAL);
-        verify(interstitialView).setLocationAwareness(eq(LOCATION_AWARENESS_NORMAL));
-    }
-
-    @Test
-    public void getLocationAwarenessTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getLocationAwareness();
-        verify(interstitialView).getLocationAwareness();
-    }
-
-    @Test
-    public void setLocationPrecisionTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setLocationPrecision(10);
-        verify(interstitialView).setLocationPrecision(eq(10));
-    }
-
-    @Test
-    public void getLocationPrecisionTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getLocationPrecision();
-        verify(interstitialView).getLocationPrecision();
-    }
-
-
-    @Test
-    public void setTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setTesting(true);
-        verify(interstitialView).setTesting(eq(true));
-    }
-
-    @Test
-    public void getTestingTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.getTesting();
-        verify(interstitialView).getTesting();
-    }
-
-    @Test
-    public void setLocalExtrasTest() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        Map<String,Object> localExtras = new HashMap<String, Object>();
-        localExtras.put("guy", new Activity());
-        localExtras.put("other guy", new BigDecimal(27f));
-
-        subject.setLocalExtras(localExtras);
-        verify(interstitialView).setLocalExtras(eq(localExtras));
-    }
-
-    @Test
-    public void loadCustomEvent_shouldCreateAndLoadCustomEventInterstitialAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(paramsMap);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isSameAs(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("class name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassData()).isEqualTo("class data");
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_shouldNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialLoaded();
-        verify(interstitialAdListener).onInterstitialLoaded(eq(subject));
-
-        verify(interstitialView, never()).trackImpression();
-    }
-
-    @Test
-    public void onCustomEventInterstitialLoaded_whenInterstitialAdListenerIsNull_shouldNotNotifyListenerOrTrackImpression() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialView, never()).trackImpression();
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialFailed_shouldLoadFailUrl() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialFailed(INTERNAL_ERROR);
-
-        verify(interstitialView).loadFailUrl(INTERNAL_ERROR);
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_shouldTrackImpressionAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialShown(true);
-
-        verify(interstitialView).trackImpression();
-        verify(interstitialAdListener).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_whenShouldntTrackImpression_shouldNotTrackImpressionButStillNotifyListener() throws Exception {
-        loadCustomEvent();
-
-        subject.setInterstitialView(interstitialView);
-        subject.onCustomEventInterstitialShown(false);
-
-        verify(interstitialView, never()).trackImpression();
-        verify(interstitialAdListener).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialShown_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialShown(true);
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_shouldRegisterClickAndNotifyListener() throws Exception {
-        subject.setInterstitialView(interstitialView);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView).registerClick();
-        verify(interstitialAdListener).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialClicked_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialAdListener, never()).onInterstitialClicked(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_shouldNotifyListener() throws Exception {
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void onCustomEventInterstitialDismissed_whenInterstitialAdListenerIsNull_shouldNotNotifyListener() throws Exception {
-        subject.setInterstitialAdListener(null);
-        subject.onCustomEventInterstitialDismissed();
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialLoadedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialLoaded();
-
-        verify(interstitialAdListener, never()).onInterstitialLoaded(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialFailedNotification() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialFailed(UNSPECIFIED);
-
-        verify(interstitialView, never()).loadFailUrl(UNSPECIFIED);
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialClickedFromRegisteringClick() throws Exception {
-        subject.setInterstitialView(interstitialView);
-        subject.destroy();
-
-        subject.onCustomEventInterstitialClicked();
-
-        verify(interstitialView, never()).registerClick();
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventShownNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialShown(true);
-
-        verify(interstitialAdListener, never()).onInterstitialShown(eq(subject));
-    }
-
-    @Test
-    public void destroy_shouldPreventOnCustomEventInterstitialDismissedNotification() throws Exception {
-        subject.destroy();
-
-        subject.onCustomEventInterstitialDismissed();
-
-        verify(interstitialAdListener, never()).onInterstitialDismissed(eq(subject));
-    }
-
-    @Test
-    public void newlyCreated_shouldNotBeReadyAndNotShow() throws Exception {
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadingCustomEventInterstitial_shouldBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-
-        assertShowsCustomEventInterstitial(true);
-    }
-
-    @Test
-    public void dismissingHtmlInterstitial_shouldNotBecomeReadyToShowHtmlAd() throws Exception {
-//        EventForwardingBroadcastReceiver broadcastReceiver = new EventForwardingBroadcastReceiver(subject.mInterstitialAdListener);
-//
-//        subject.onCustomEventInterstitialLoaded();
-//        broadcastReceiver.onHtmlInterstitialDismissed();
-//
-//        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void failingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialFailed(CANCELLED);
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void dismissingCustomEventInterstitial_shouldNotBecomeReadyToShowCustomEventAd() throws Exception {
-        subject.onCustomEventInterstitialLoaded();
-        subject.onCustomEventInterstitialDismissed();
-
-        assertShowsCustomEventInterstitial(false);
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_NAME_HEADER, "name");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_DATA_HEADER, "data");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_HTML_DATA, "html");
-        TestCustomEventBannerAdapterFactory.reset();
-        moPubInterstitialView.loadCustomEvent(paramsMap);
-
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestMoPubInterstitial()).isEqualTo(subject);
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventInterstitialAdapterFactory.getLatestClassData()).isEqualTo("data");
-
-        verify(customEventInterstitialAdapter).setAdapterListener(eq(subject));
-        verify(customEventInterstitialAdapter).loadInterstitial();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        moPubInterstitialView.loadCustomEvent(null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventInterstitialAdapter, never()).invalidate();
-        verify(customEventInterstitialAdapter, never()).loadInterstitial();
-    }
-
-    @Test
-    public void adFailed_shouldNotifyInterstitialAdListener() throws Exception {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.adFailed(CANCELLED);
-
-        verify(interstitialAdListener).onInterstitialFailed(eq(subject), eq(CANCELLED));
-    }
-
-    private void loadCustomEvent() {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_NAME_HEADER, "name");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_DATA_HEADER, "data");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_HTML_DATA, "html");
-        TestCustomEventBannerAdapterFactory.reset();
-        moPubInterstitialView.loadCustomEvent(paramsMap);
-    }
-
-    private void assertShowsCustomEventInterstitial(boolean shouldBeReady) {
-        MoPubInterstitial.MoPubInterstitialView moPubInterstitialView = subject.new MoPubInterstitialView(activity);
-        moPubInterstitialView.loadCustomEvent(paramsMap);
-
-        assertThat(subject.isReady()).isEqualTo(shouldBeReady);
-        assertThat(subject.show()).isEqualTo(shouldBeReady);
-
-        if (shouldBeReady) {
-            verify(customEventInterstitialAdapter).showInterstitial();
-        } else {
-            verify(customEventInterstitialAdapter, never()).showInterstitial();
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
deleted file mode 100644
index 8aad6342..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubViewTest.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestAdViewControllerFactory;
-import com.mopub.mobileads.test.support.TestCustomEventBannerAdapterFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MoPubViewTest {
-    private MoPubView subject;
-    private Map<String,String> paramsMap = new HashMap<String, String>();
-    private CustomEventBannerAdapter customEventBannerAdapter;
-    private AdViewController adViewController;
-
-    @Before
-    public void setup() {
-        subject = new MoPubView(new Activity());
-        customEventBannerAdapter = TestCustomEventBannerAdapterFactory.getSingletonMock();
-        reset(customEventBannerAdapter);
-        adViewController = TestAdViewControllerFactory.getSingletonMock();
-    }
-
-    @Test
-    public void loadCustomEvent_shouldInitializeCustomEventBannerAdapter() throws Exception {
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_NAME_HEADER, "name");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_DATA_HEADER, "data");
-        paramsMap.put(AdFetcher.CUSTOM_EVENT_HTML_DATA, "html");
-        TestCustomEventBannerAdapterFactory.reset();
-        subject.loadCustomEvent(paramsMap);
-
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestMoPubView()).isEqualTo(subject);
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassName()).isEqualTo("name");
-        assertThat(TestCustomEventBannerAdapterFactory.getLatestClassData()).isEqualTo("data");
-
-        verify(customEventBannerAdapter).loadAd();
-    }
-
-    @Test
-    public void loadCustomEvent_whenParamsMapIsNull_shouldCallLoadFailUrl() throws Exception {
-        subject.loadCustomEvent(null);
-
-        verify(adViewController).loadFailUrl(eq(ADAPTER_NOT_FOUND));
-        verify(customEventBannerAdapter, never()).invalidate();
-        verify(customEventBannerAdapter, never()).loadAd();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
deleted file mode 100644
index fd6ed577..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ /dev/null
@@ -1,160 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.ComponentName;
-import android.content.Intent;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.ImageButton;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-import org.fest.assertions.api.ANDROID;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.ArgumentCaptor;
-import org.robolectric.Robolectric;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.BaseInterstitialActivity.HTML_INTERSTITIAL_INTENT_FILTER;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class MraidActivityTest extends BaseInterstitialActivityTest {
-
-    private MraidView mraidView;
-
-    @Before
-    public void setUp() throws Exception {
-        super.setup();
-        Intent mraidActivityIntent = createMraidActivityIntent(EXPECTED_SOURCE);
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        resetMockedView(mraidView);
-        subject = Robolectric.buildActivity(MraidActivity.class).withIntent(mraidActivityIntent).create().get();
-        resetMockedView(mraidView);
-    }
-
-    @Test
-    public void onCreate_shouldSetupAnMraidView() throws Exception {
-        subject.onCreate(null);
-
-        assertThat(getContentView(subject).getChildAt(0)).isSameAs(mraidView);
-        verify(mraidView).setOnReadyListener(any(MraidView.OnReadyListener.class));
-        verify(mraidView).setOnCloseButtonStateChange(any(MraidView.OnCloseButtonStateChangeListener.class));
-        verify(mraidView).setOnCloseListener(any(MraidView.OnCloseListener.class));
-
-        verify(mraidView).loadHtmlData(EXPECTED_SOURCE);
-    }
-
-    @Test
-    public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        subject.onCreate(null);
-
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
-    }
-
-    @Test
-    public void onCreate_shouldSetHardwareAcceleratedFlag() throws Exception {
-        subject.onCreate(null);
-
-        boolean hardwareAccelerated = shadowOf(subject.getWindow()).getFlag(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);
-        assertThat(hardwareAccelerated).isTrue();
-    }
-
-    @Test
-    public void onDestroy_DestroyMraidView() throws Exception {
-        Intent expectedIntent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver, HTML_INTERSTITIAL_INTENT_FILTER);
-
-        subject.onCreate(null);
-        subject.onDestroy();
-
-        verify(broadcastReceiver).onReceive(eq(subject), eq(expectedIntent));
-        verify(mraidView).destroy();
-        assertThat(getContentView(subject).getChildCount()).isEqualTo(0);
-    }
-
-    @Test
-    public void getAdView_shouldSetupOnReadyListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
-        ArgumentCaptor<MraidView.OnReadyListener> captor = ArgumentCaptor.forClass(MraidView.OnReadyListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setOnReadyListener(captor.capture());
-
-        subject.hideInterstitialCloseButton();
-        captor.getValue().onReady(null);
-        ImageButton closeButton = (ImageButton) getContentView(subject).getChildAt(1);
-        assertThat(closeButton).isNotNull();
-    }
-
-    @Test
-    public void getAdView_shouldSetupOnCloseButtonStateChangeListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
-        ArgumentCaptor<MraidView.OnCloseButtonStateChangeListener> captor = ArgumentCaptor.forClass(MraidView.OnCloseButtonStateChangeListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setOnCloseButtonStateChange(captor.capture());
-        MraidView.OnCloseButtonStateChangeListener listener = captor.getValue();
-
-        ANDROID.assertThat(getCloseButton()).isVisible();
-
-        listener.onCloseButtonStateChange(null, false);
-        ANDROID.assertThat(getCloseButton()).isNotVisible();
-
-        listener.onCloseButtonStateChange(null, true);
-        ANDROID.assertThat(getCloseButton()).isVisible();
-    }
-
-    @Test
-    public void getAdView_shouldSetupOnCloseListener() throws Exception {
-        subject.onCreate(null);
-        resetMockedView(mraidView);
-        ArgumentCaptor<MraidView.OnCloseListener> captor = ArgumentCaptor.forClass(MraidView.OnCloseListener.class);
-        View actualAdView = subject.getAdView();
-
-        assertThat(actualAdView).isSameAs(mraidView);
-        verify(mraidView).setOnCloseListener(captor.capture());
-
-        captor.getValue().onClose(null, null);
-
-        ANDROID.assertThat(subject).isFinishing();
-    }
-
-    @Test
-    public void onPause_shouldOnPauseMraidView() throws Exception {
-        subject.onCreate(null);
-        ((MraidActivity)subject).onPause();
-
-        verify(mraidView).onPause();
-    }
-
-    @Test
-    public void onResume_shouldResumeMraidView() throws Exception {
-        subject.onCreate(null);
-        ((MraidActivity)subject).onPause();
-        ((MraidActivity)subject).onResume();
-
-        verify(mraidView).onResume();
-    }
-
-    private Intent createMraidActivityIntent(String expectedSource) {
-        Intent mraidActivityIntent = new Intent();
-        mraidActivityIntent.setComponent(new ComponentName("", ""));
-        mraidActivityIntent.putExtra(HTML_RESPONSE_BODY_KEY, expectedSource);
-        return mraidActivityIntent;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
deleted file mode 100644
index 74eba2b7..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidBannerTest.java
+++ /dev/null
@@ -1,119 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
-import static com.mopub.mobileads.MraidView.OnCloseListener;
-import static com.mopub.mobileads.MraidView.OnExpandListener;
-import static com.mopub.mobileads.MraidView.OnFailureListener;
-import static com.mopub.mobileads.MraidView.OnReadyListener;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Matchers.notNull;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.reset;
-import static org.mockito.Mockito.verify;
-
-@RunWith(SdkTestRunner.class)
-public class MraidBannerTest {
-    private MraidBanner subject;
-    private MraidView mraidView;
-    private Activity context;
-    private Map<String, Object> localExtras;
-    private Map<String, String> serverExtras;
-    private CustomEventBannerListener bannerListener;
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidBanner();
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        reset(mraidView);
-
-        context = new Activity();
-        bannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerAndReturn() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-
-        verify(bannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-
-        verify(mraidView, never()).loadHtmlData(any(String.class));
-
-        verify(mraidView, never()).setOnReadyListener(notNull(OnReadyListener.class));
-        verify(mraidView, never()).setOnExpandListener(notNull(OnExpandListener.class));
-        verify(mraidView, never()).setOnCloseListener(notNull(OnCloseListener.class));
-        verify(mraidView, never()).setOnFailureListener(notNull(OnFailureListener.class));
-    }
-
-    @Test
-    public void loadBanner_shouldLoadHtmlDataAndInitializeListeners() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-
-        verify(mraidView).loadHtmlData(EXPECTED_HTML_DATA);
-
-        verify(mraidView).setOnReadyListener(notNull(OnReadyListener.class));
-        verify(mraidView).setOnExpandListener(notNull(OnExpandListener.class));
-        verify(mraidView).setOnCloseListener(notNull(OnCloseListener.class));
-        verify(mraidView).setOnFailureListener(notNull(OnFailureListener.class));
-    }
-
-    @Test
-    public void invalidate_shouldDestroyMraidView() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        verify(mraidView).destroy();
-    }
-
-    @Test
-    public void onReady_shouldNotifyBannerLoaded() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onReady();
-
-        verify(bannerListener).onBannerLoaded(eq(mraidView));
-    }
-
-    @Test
-    public void onFail_shouldNotifyBannerFailed() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onFail();
-
-        verify(bannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
-    }
-
-    @Test
-    public void onExpand_shouldNotifyBannerExpandedAndClicked() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onExpand();
-
-        verify(bannerListener).onBannerExpanded();
-        verify(bannerListener).onBannerClicked();
-    }
-
-    @Test
-    public void onClose_shouldNotifyBannerCollapsed() throws Exception {
-        subject.loadBanner(context, bannerListener, localExtras, serverExtras);
-        subject.onClose();
-
-        verify(bannerListener).onBannerCollapsed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
deleted file mode 100644
index ad02b75c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidDisplayControllerTest.java
+++ /dev/null
@@ -1,102 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import com.mopub.mobileads.test.support.TestMraidViewFactory;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.eq;
-import static org.mockito.Mockito.*;
-
-@RunWith(SdkTestRunner.class)
-public class MraidDisplayControllerTest {
-
-    private MraidView mraidView;
-    private MraidDisplayController subject;
-    private View rootView;
-    private FrameLayout contentView;
-    private MoPubView moPubView;
-    private FrameLayout adContainerLayout;
-    private RelativeLayout expansionLayout;
-    private FrameLayout placeholderView;
-
-    @Before
-    public void setup() {
-        mraidView = TestMraidViewFactory.getSingletonMock();
-        moPubView = mock(MoPubView.class);
-        rootView = mock(View.class);
-        contentView = mock(FrameLayout.class);
-        adContainerLayout = mock(FrameLayout.class);
-        expansionLayout = mock(RelativeLayout.class);
-        placeholderView = mock(FrameLayout.class);
-
-        stub(mraidView.getContext()).toReturn(new Activity());
-        when(mraidView.getParent()).thenReturn(moPubView).thenReturn(null);
-        stub(mraidView.getRootView()).toReturn(rootView);
-        stub(rootView.findViewById(eq(android.R.id.content))).toReturn(contentView);
-        stub(contentView.getContext()).toReturn(new Activity());
-
-        subject = new TestMraidDisplayController(mraidView, null, null);
-    }
-
-    @Test
-    public void initialization_shouldSetupStartingState() throws Exception {
-        assertThat(subject.getMraidView()).isSameAs(mraidView);
-    }
-
-    @Test
-    public void expand_shouldSwapWithPlaceholderView() throws Exception {
-        stub(moPubView.getChildAt(eq(0))).toReturn(mraidView);
-        subject.expand(null, 320, 50, false, false);
-
-        verify(moPubView).addView(any(FrameLayout.class), eq(0), any(ViewGroup.LayoutParams.class));
-        verify(moPubView).removeView(eq(mraidView));
-        verify(adContainerLayout, times(2)).addView(any(ImageView.class), any(FrameLayout.LayoutParams.class));
-    }
-
-    @Test
-    public void close_shouldUnexpandView() throws Exception {
-        subject.expand(null, 320, 50, false, false);
-        stub(placeholderView.getParent()).toReturn(moPubView);
-
-        subject.close();
-
-        verify(adContainerLayout).removeAllViewsInLayout();
-        verify(expansionLayout).removeAllViewsInLayout();
-        verify(contentView).removeView(eq(expansionLayout));
-        verify(moPubView).addView(eq(mraidView), any(int.class));
-        verify(moPubView).removeView(eq(placeholderView));
-        verify(moPubView).invalidate();
-    }
-
-    private class TestMraidDisplayController extends MraidDisplayController {
-        public TestMraidDisplayController(MraidView mraidView, MraidView.ExpansionStyle expStyle,
-                                          MraidView.NativeCloseButtonStyle buttonStyle) {
-            super(mraidView, expStyle, buttonStyle);
-        }
-
-        @Override
-        FrameLayout createAdContainerLayout() {
-            return adContainerLayout;
-        }
-
-        @Override
-        RelativeLayout createExpansionLayout() {
-            return expansionLayout;
-        }
-
-        @Override
-        FrameLayout createPlaceholderView() {
-            return placeholderView;
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
deleted file mode 100644
index 96ab74ec..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidInterstitialTest.java
+++ /dev/null
@@ -1,109 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.content.Intent;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.robolectric.shadows.ShadowActivity;
-import org.robolectric.shadows.ShadowLocalBroadcastManager;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.mopub.mobileads.AdFetcher.HTML_RESPONSE_BODY_KEY;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_DISMISS;
-import static com.mopub.mobileads.BaseInterstitialActivity.ACTION_INTERSTITIAL_SHOW;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.robolectric.Robolectric.shadowOf_;
-
-@RunWith(SdkTestRunner.class)
-public class MraidInterstitialTest {
-    private MraidInterstitial subject;
-    private CustomEventInterstitialListener customEventInterstitialListener;
-    private Map<String,Object> localExtras;
-    private Map<String,String> serverExtras;
-    private Context context;
-    private static final String INPUT_HTML_DATA = "%3Chtml%3E%3C%2Fhtml%3E";
-    private static final String EXPECTED_HTML_DATA = "<html></html>";
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidInterstitial();
-        context = new Activity();
-        customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
-        localExtras = new HashMap<String, Object>();
-        serverExtras = new HashMap<String, String>();
-        serverExtras.put(HTML_RESPONSE_BODY_KEY, INPUT_HTML_DATA);
-    }
-
-    @Test
-    public void loadBanner_withMalformedServerExtras_shouldNotifyInterstitialFailed() throws Exception {
-        serverExtras.remove(HTML_RESPONSE_BODY_KEY);
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialFailed(NETWORK_INVALID_STATE);
-        verify(customEventInterstitialListener, never()).onInterstitialLoaded();
-    }
-
-    @Test
-    public void loadInterstitial_shouldNotifyInterstitialLoaded() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        verify(customEventInterstitialListener).onInterstitialLoaded();
-    }
-
-    @Test
-    public void showInterstitial_shouldStartActivityWithIntent() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.showInterstitial();
-
-        ShadowActivity shadowActivity = shadowOf_(context);
-        Intent intent = shadowActivity.getNextStartedActivityForResult().intent;
-
-        assertThat(intent.getComponent().getPackageName()).isEqualTo("com.mopub.mobileads");
-        assertThat(intent.getComponent().getClassName()).isEqualTo("com.mopub.mobileads.MraidActivity");
-        assertThat(intent.getExtras().get(HTML_RESPONSE_BODY_KEY)).isEqualTo(EXPECTED_HTML_DATA);
-        assertThat(intent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK).isNotEqualTo(0);
-    }
-
-    @Test
-    public void loadInterstitial_shouldConnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener).onInterstitialDismissed();
-    }
-
-    @Test
-    public void onInvalidate_shouldDisconnectListenerToBroadcastReceiver() throws Exception {
-        subject.loadInterstitial(context, customEventInterstitialListener, localExtras, serverExtras);
-        subject.onInvalidate();
-
-        Intent intent;
-        intent = new Intent(ACTION_INTERSTITIAL_SHOW);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialShown();
-
-        intent = new Intent(ACTION_INTERSTITIAL_DISMISS);
-        ShadowLocalBroadcastManager.getInstance(context).sendBroadcast(intent);
-
-        verify(customEventInterstitialListener, never()).onInterstitialDismissed();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
deleted file mode 100644
index 9985ecd2..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidViewTest.java
+++ /dev/null
@@ -1,24 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-@RunWith(SdkTestRunner.class)
-public class MraidViewTest {
-
-    private MraidView subject;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new MraidView(new Activity());
-    }
-
-    @Test
-    public void loadHtmlData_whenDataIsNull_shouldNotBlowUp() throws Exception {
-        subject.loadHtmlData(null);
-        // pass
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java
deleted file mode 100644
index 604fed40..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/TaskTrackerTest.java
+++ /dev/null
@@ -1,66 +0,0 @@
-package com.mopub.mobileads;
-
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class TaskTrackerTest {
-
-    private TaskTracker taskTracker;
-
-    @Before
-    public void setUp() throws Exception {
-        taskTracker = new TaskTracker();
-    }
-
-    @Test
-    public void newTaskStarted_shouldIncrementIdsFromNegativeOne() throws Exception {
-        assertThat(taskTracker.getCurrentTaskId()).isEqualTo(-1);
-
-        taskTracker.newTaskStarted();
-
-        assertThat(taskTracker.getCurrentTaskId()).isEqualTo(0);
-    }
-
-    @Test
-    public void isMostCurrentTask_onFirstTask_whenSecondTaskIsCompleted_shouldBeFalse() throws Exception {
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-        taskTracker.markTaskCompleted(taskTracker.getCurrentTaskId());
-
-        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
-    }
-
-    @Test
-    public void isMostCurrentTask_onFirstTask_whenSecondTaskIsNotCompleted_shouldBeTrue() throws Exception {
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-
-        assertThat(taskTracker.isMostCurrentTask(0)).isTrue();
-    }
-
-    @Test
-    public void mostCurrentTaskIsLastCompletedTaskOrLater() throws Exception {
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-        taskTracker.markTaskCompleted(1);
-
-        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
-        assertThat(taskTracker.isMostCurrentTask(1)).isTrue();
-        assertThat(taskTracker.isMostCurrentTask(2)).isTrue();
-    }
-
-    @Test
-    public void markTaskCompleted_shouldKeepTrackOfMostCurrentTaskRegardlessOfCompletionOrder() throws Exception {
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-        taskTracker.newTaskStarted();
-        taskTracker.markTaskCompleted(1);
-        taskTracker.markTaskCompleted(0);
-
-        assertThat(taskTracker.isMostCurrentTask(0)).isFalse();
-        assertThat(taskTracker.isMostCurrentTask(1)).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java
deleted file mode 100644
index 330dcddd..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/UtilsTest.java
+++ /dev/null
@@ -1,76 +0,0 @@
-package com.mopub.mobileads;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class UtilsTest {
-
-    private Map<String,String> expectedMap;
-
-    @Before
-    public void setup() {
-        expectedMap = new HashMap<String, String>();
-    }
-
-    @Test
-    public void jsonStringToMap_shouldParseJson() throws Exception {
-        expectedMap.put("key", "value");
-        expectedMap.put("other_key", "other_value");
-
-        String json = "{\"key\":\"value\",\"other_key\":\"other_value\"}";
-        Map map = Utils.jsonStringToMap(json);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsNull_shouldReturnEmptyMap() throws Exception {
-        Map map = Utils.jsonStringToMap(null);
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void jsonStringToMap_whenStringIsEmpty_shouldReturnEmptyMap() throws Exception {
-        Map map = Utils.jsonStringToMap("");
-        assertThat(map).isEqualTo(expectedMap);
-    }
-
-    @Test
-    public void mapToJsonString_followedByJsonStringToMap_shouldReturnSameMap() throws Exception {
-        Map<String, String> inputMap = new HashMap<String, String>();
-        inputMap.put("key", "value");
-        inputMap.put("other_key", "other_value");
-
-        Map<String, String> outputMap = Utils.jsonStringToMap(Utils.mapToJsonString(inputMap));
-        assertThat(outputMap).isEqualTo(inputMap);
-    }
-
-    @Test
-    public void mapToJsonString_shouldReturnValidMap() throws Exception {
-        Map<String, String> map = new HashMap<String, String>();
-        map.put("key", "value");
-
-        String expectedJson = "{\"key\":\"value\"}";
-        String actualJson = Utils.mapToJsonString(map);
-        assertThat(actualJson).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsEmpty_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Utils.mapToJsonString(new HashMap<String, String>())).isEqualTo(expectedJson);
-    }
-
-    @Test
-    public void mapToJsonString_whenMapIsNull_shouldReturnEmptyJson() throws Exception {
-        String expectedJson = "{}";
-        assertThat(Utils.mapToJsonString(null)).isEqualTo(expectedJson);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
deleted file mode 100644
index adfb3962..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventBannerFactoryTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.AdTypeTranslator.HTML_BANNER;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_BANNER;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventBannerFactoryTest {
-
-    private CustomEventBannerFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventBannerFactory();
-    }
-
-    @Test
-    public void create_shouldCreateBanners() throws Exception {
-        assertCustomEventClassCreated(MRAID_BANNER);
-        assertCustomEventClassCreated(HTML_BANNER);
-    }
-
-    private void assertCustomEventClassCreated(String customEventName) throws Exception {
-        CustomEventBanner customEventBanner = subject.internalCreate(customEventName);
-        assertThat(customEventBanner.getClass().getName()).isEqualTo(customEventName);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
deleted file mode 100644
index c9519525..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/CustomEventInterstitialFactoryTest.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.AdTypeTranslator.HTML_INTERSTITIAL;
-import static com.mopub.mobileads.AdTypeTranslator.MRAID_INTERSTITIAL;
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class CustomEventInterstitialFactoryTest {
-
-    private CustomEventInterstitialFactory subject;
-
-    @Before
-    public void setup() {
-        subject = new CustomEventInterstitialFactory();
-    }
-
-    @Test
-    public void create_shouldCreateInterstitials() throws Exception {
-        assertCustomEventClassCreated(MRAID_INTERSTITIAL);
-        assertCustomEventClassCreated(HTML_INTERSTITIAL);
-    }
-
-    private void assertCustomEventClassCreated(String customEventName) throws Exception {
-        CustomEventInterstitial customEventInterstitial = subject.internalCreate(customEventName);
-        assertThat(customEventInterstitial.getClass().getName()).isEqualTo(customEventName);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java
deleted file mode 100644
index efdb8df1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactoryTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.app.Activity;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlBannerWebViewFactoryTest {
-
-    private HtmlBannerWebViewFactory subject;
-    private CustomEventBannerListener customEventBannerListener;
-
-    @Before
-    public void setUp() throws Exception {
-        subject = new HtmlBannerWebViewFactory();
-        Activity context = new Activity();
-        HtmlBannerWebViewFactory.initialize(context);
-        customEventBannerListener = mock(CustomEventBannerListener.class);
-    }
-
-    @Test
-    public void internalCreate_shouldCreateHtmlWebView() throws Exception {
-        HtmlBannerWebView htmlBannerWebView = subject.internalCreate(customEventBannerListener, false, null, null);
-        assertThat(htmlBannerWebView).isNotNull();
-    }
-
-    @Test
-    public void shouldBeAbleToReinitialize() throws Exception {
-        HtmlBannerWebViewFactory.setInstance(subject);
-        HtmlBannerWebViewFactory.initialize(new Activity());
-
-        assertThat(HtmlBannerWebViewFactory.create(null, false, "", "")).isNotNull();
-
-        HtmlBannerWebViewFactory.cleanup();
-        HtmlBannerWebViewFactory.initialize(new Activity());
-
-        assertThat(HtmlBannerWebViewFactory.create(null, false, "", "")).isNotNull();
-    }
-
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java
deleted file mode 100644
index 88f40e23..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlBannerWebViewPoolTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.app.Activity;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlBannerWebViewPoolTest {
-    private HtmlBannerWebViewPool subject;
-    private Activity context;
-    private CustomEventBanner.CustomEventBannerListener customEventBannerListener;
-    private boolean isScrollable;
-    private String redirectUrl;
-    private String clickthroughUrl;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        subject = new HtmlBannerWebViewPool(context);
-        customEventBannerListener = mock(CustomEventBanner.CustomEventBannerListener.class);
-        isScrollable = false;
-        redirectUrl = "redirectUrl";
-        clickthroughUrl = "clickthroughUrl";
-    }
-
-    @Test
-    public void getNextHtmlWebView_shouldReturnHtmlWebView() throws Exception {
-        HtmlBannerWebView returnValue = subject.getNextHtmlWebView(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
-
-        assertThat(returnValue).isNotNull();
-        assertThat(returnValue).isInstanceOf(HtmlBannerWebView.class);
-        assertThat(shadowOf(returnValue).getWebViewClient()).isNotNull();
-    }
-
-    @Test
-    public void getNextHtmlWebView_shouldContinuouslyReturnUniqueHtmlWebViews() throws Exception {
-        Set<HtmlBannerWebView> htmlBannerWebViews = new HashSet<HtmlBannerWebView>();
-        int expectedNewHtmlWebViewCount = HtmlBannerWebViewPool.POOL_SIZE * 2;
-
-        for (int i = 0; i < expectedNewHtmlWebViewCount; i++) {
-            htmlBannerWebViews.add(subject.getNextHtmlWebView(customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl));
-        }
-
-        assertThat(htmlBannerWebViews.size()).isEqualTo(expectedNewHtmlWebViewCount);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java
deleted file mode 100644
index db62b555..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewFactoryTest.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialWebViewFactoryTest {
-    @Before
-    public void setup() {
-        HtmlInterstitialWebViewFactory.setInstance(new HtmlInterstitialWebViewFactory());
-    }
-
-    @Test
-    public void shouldBeAbleToReinitialize() throws Exception {
-        HtmlInterstitialWebViewFactory.initialize(new Activity());
-
-        assertThat(HtmlInterstitialWebViewFactory.create(null, false, "", "")).isNotNull();
-
-        HtmlInterstitialWebViewFactory.cleanup();
-        HtmlInterstitialWebViewFactory.initialize(new Activity());
-
-        assertThat(HtmlInterstitialWebViewFactory.create(null, false, "", "")).isNotNull();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java
deleted file mode 100644
index d64bbb29..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/factories/HtmlInterstitialWebViewPoolTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.mopub.mobileads.factories;
-
-import android.app.Activity;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.HtmlInterstitialWebView;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-import static org.mockito.Mockito.mock;
-import static org.robolectric.Robolectric.shadowOf;
-
-@RunWith(SdkTestRunner.class)
-public class HtmlInterstitialWebViewPoolTest {
-    private HtmlInterstitialWebViewPool subject;
-    private Activity context;
-    private CustomEventInterstitial.CustomEventInterstitialListener customEventInterstitialListener;
-    private boolean isScrollable;
-    private String redirectUrl;
-    private String clickthroughUrl;
-
-    @Before
-    public void setUp() throws Exception {
-        context = new Activity();
-        subject = new HtmlInterstitialWebViewPool(context);
-        customEventInterstitialListener = mock(CustomEventInterstitial.CustomEventInterstitialListener.class);
-        isScrollable = false;
-        redirectUrl = "redirectUrl";
-        clickthroughUrl = "clickthroughUrl";
-    }
-
-    @Test
-    public void getNextHtmlWebView_shouldReturnHtmlWebView() throws Exception {
-        HtmlInterstitialWebView returnValue = subject.getNextHtmlWebView(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl);
-
-        assertThat(returnValue).isNotNull();
-        assertThat(returnValue).isInstanceOf(HtmlInterstitialWebView.class);
-        assertThat(shadowOf(returnValue).getWebViewClient()).isNotNull();
-    }
-
-    @Test
-    public void getNextHtmlWebView_shouldContinuouslyReturnUniqueHtmlWebViews() throws Exception {
-        Set<HtmlInterstitialWebView> htmlInterstitialWebViews = new HashSet<HtmlInterstitialWebView>();
-        int expectedNewHtmlWebViewCount = HtmlInterstitialWebViewPool.POOL_SIZE * 2;
-
-        for (int i = 0; i < expectedNewHtmlWebViewCount; i++) {
-            htmlInterstitialWebViews.add(subject.getNextHtmlWebView(customEventInterstitialListener, isScrollable, redirectUrl, clickthroughUrl));
-        }
-
-        assertThat(htmlInterstitialWebViews.size()).isEqualTo(expectedNewHtmlWebViewCount);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/resource/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/resource/DrawablesTest.java
deleted file mode 100644
index 5d28cf24..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/resource/DrawablesTest.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.mopub.mobileads.resource;
-
-import android.app.Activity;
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class DrawablesTest {
-    @Test
-    public void decodeImage_shouldCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.decodeImage(new Activity()))
-                .isSameAs(Drawables.BACKGROUND.decodeImage(new Activity()));
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
deleted file mode 100644
index 6fcd3ed1..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/SdkTestRunner.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.factories.*;
-import com.mopub.mobileads.util.DateAndTime;
-import org.junit.runners.model.InitializationError;
-import org.mockito.MockitoAnnotations;
-import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.TestLifecycle;
-
-public class SdkTestRunner extends RobolectricTestRunner {
-
-    public SdkTestRunner(Class<?> testClass) throws InitializationError {
-        super(testClass);
-    }
-
-    @Override
-    protected Class<? extends TestLifecycle> getTestLifecycleClass() {
-        return TestLifeCycleWithInjection.class;
-    }
-
-    public static class TestLifeCycleWithInjection extends DefaultTestLifecycle {
-        @Override
-        public void prepareTest(Object test) {
-            AdFetcherFactory.setInstance(new TestAdFetcherFactory());
-            HttpClientFactory.setInstance(new TestHttpClientFactory());
-            DateAndTime.setInstance(new TestDateAndTime());
-            CustomEventBannerFactory.setInstance(new TestCustomEventBannerFactory());
-            CustomEventInterstitialFactory.setInstance(new TestCustomEventInterstitialFactory());
-            CustomEventBannerAdapterFactory.setInstance(new TestCustomEventBannerAdapterFactory());
-            MraidViewFactory.setInstance(new TestMraidViewFactory());
-            MoPubViewFactory.setInstance(new TestMoPubViewFactory());
-            CustomEventInterstitialAdapterFactory.setInstance(new TestCustomEventInterstitialAdapterFactory());
-            HtmlBannerWebViewFactory.setInstance(new TestHtmlBannerWebViewFactory());
-            HtmlInterstitialWebViewFactory.setInstance(new TestHtmlInterstitialWebViewFactory());
-            AdViewControllerFactory.setInstance(new TestAdViewControllerFactory());
-
-            MockitoAnnotations.initMocks(test);
-        }
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
deleted file mode 100644
index dd7b5f34..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdFetcherFactory.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.AdFetcher;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.factories.AdFetcherFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdFetcherFactory extends AdFetcherFactory {
-    private AdFetcher mockAdFetcher = mock(AdFetcher.class);
-
-    public static AdFetcher getSingletonMock() {
-        return ((TestAdFetcherFactory)AdFetcherFactory.instance).mockAdFetcher;
-    }
-
-    @Override
-    public AdFetcher internalCreate(AdViewController adViewController, String userAgent) {
-        return mockAdFetcher;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
deleted file mode 100644
index 6d79fd27..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestAdViewControllerFactory.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import com.mopub.mobileads.AdViewController;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.AdViewControllerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestAdViewControllerFactory extends AdViewControllerFactory {
-    private AdViewController mockAdViewController = mock(AdViewController.class);
-
-    public static AdViewController getSingletonMock() {
-        return ((TestAdViewControllerFactory) AdViewControllerFactory.instance).mockAdViewController;
-    }
-
-    @Override
-    protected AdViewController internalCreate(Context context, MoPubView moPubView) {
-        return mockAdViewController;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
deleted file mode 100644
index bbcf17d8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerAdapterFactory.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventBannerAdapter;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.CustomEventBannerAdapterFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerAdapterFactory extends CustomEventBannerAdapterFactory {
-    private static CustomEventBannerAdapter instance = mock(CustomEventBannerAdapter.class);
-    private static MoPubView moPubView;
-    private static String className;
-    private static String classData;
-
-    public static CustomEventBannerAdapter getSingletonMock() {
-        return instance;
-    }
-
-    @Override
-    protected CustomEventBannerAdapter internalCreate(MoPubView moPubView, String className, String classData) {
-        this.moPubView = moPubView;
-        this.className = className;
-        this.classData = classData;
-        return instance;
-    }
-
-    public static MoPubView getLatestMoPubView() {
-        return moPubView;
-    }
-
-    public static String getLatestClassName() {
-        return className;
-    }
-
-    public static String getLatestClassData() {
-        return classData;
-    }
-
-    public static void reset() {
-        moPubView = null;
-        className = null;
-        classData = null;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
deleted file mode 100644
index ec88b419..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventBannerFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.factories.CustomEventBannerFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventBannerFactory extends CustomEventBannerFactory{
-    private CustomEventBanner instance = mock(CustomEventBanner.class);
-
-    @Override
-    protected CustomEventBanner internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
deleted file mode 100644
index 0d4804fa..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialAdapterFactory.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventInterstitialAdapter;
-import com.mopub.mobileads.MoPubInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialAdapterFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialAdapterFactory extends CustomEventInterstitialAdapterFactory{
-    private static CustomEventInterstitialAdapter instance = mock(CustomEventInterstitialAdapter.class);
-    private static MoPubInterstitial latestMoPubInterstitial;
-    private static String latestClassName;
-    private static String latestClassData;
-
-    public static CustomEventInterstitialAdapter getSingletonMock() {
-        return instance;
-    }
-
-    public static MoPubInterstitial getLatestMoPubInterstitial() {
-        return latestMoPubInterstitial;
-    }
-
-    public static String getLatestClassName() {
-        return latestClassName;
-    }
-
-    public static String getLatestClassData() {
-        return latestClassData;
-    }
-
-    @Override
-    protected CustomEventInterstitialAdapter internalCreate(MoPubInterstitial moPubInterstitial, String className, String classData) {
-        latestMoPubInterstitial = moPubInterstitial;
-        latestClassName = className;
-        latestClassData = classData;
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
deleted file mode 100644
index 2ca47147..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestCustomEventInterstitialFactory.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.factories.CustomEventInterstitialFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestCustomEventInterstitialFactory extends CustomEventInterstitialFactory {
-    private CustomEventInterstitial instance = mock(CustomEventInterstitial.class);
-
-    @Override
-    protected CustomEventInterstitial internalCreate(String className) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestDateAndTime.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestDateAndTime.java
deleted file mode 100644
index ad91ae99..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestDateAndTime.java
+++ /dev/null
@@ -1,33 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.util.DateAndTime;
-
-import java.util.Date;
-import java.util.TimeZone;
-
-public class TestDateAndTime extends DateAndTime {
-    private TimeZone timeZone = TimeZone.getTimeZone("GMT-7");
-    private Date now = new Date(1365553573L);
-
-    public static TestDateAndTime getInstance() {
-        return (TestDateAndTime) instance;
-    }
-
-    public void setNow(Date now) {
-        this.now = now;
-    }
-
-    public void setTimeZone(TimeZone timeZone) {
-        this.timeZone = timeZone;
-    }
-
-    @Override
-    public TimeZone internalLocalTimeZone() {
-        return timeZone;
-    }
-
-    @Override
-    public Date internalNow() {
-        return now;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
deleted file mode 100644
index aa081ef8..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlBannerWebViewFactory.java
+++ /dev/null
@@ -1,61 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.webkit.WebSettings;
-import com.mopub.mobileads.HtmlBannerWebView;
-import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
-import com.mopub.mobileads.factories.HtmlBannerWebViewPool;
-
-import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.stub;
-
-public class TestHtmlBannerWebViewFactory extends HtmlBannerWebViewFactory {
-    private HtmlBannerWebView mockHtmlBannerWebView = mock(HtmlBannerWebView.class);
-    private CustomEventBannerListener mLatestListener;
-    private boolean mLatestIsScrollable;
-    private String mLatestRedirectUrl;
-    private String mLatestClickthroughUrl;
-
-    public TestHtmlBannerWebViewFactory() {
-        WebSettings webSettings = mock(WebSettings.class);
-        stub(mockHtmlBannerWebView.getSettings()).toReturn(webSettings);
-        stub(webSettings.getUserAgentString()).toReturn("Mozilla/5.0 (Linux; U; Android 4.0.3; ko-kr; LG-L160L Build/IML74K) AppleWebkit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
-    }
-
-    public static HtmlBannerWebView getSingletonMock() {
-        return getInstance().mockHtmlBannerWebView;
-    }
-
-    public static CustomEventBannerListener getLatestListener() {
-        return getInstance().mLatestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getInstance().mLatestIsScrollable;
-    }
-
-    public static String getLatestRedirectUrl() {
-        return getInstance().mLatestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getInstance().mLatestClickthroughUrl;
-    }
-
-    private static TestHtmlBannerWebViewFactory getInstance() {
-        return (TestHtmlBannerWebViewFactory) instance;
-    }
-
-    @Override
-    public HtmlBannerWebView internalCreate(CustomEventBannerListener customEventBannerListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        mLatestListener = customEventBannerListener;
-        mLatestIsScrollable = isScrollable;
-        mLatestRedirectUrl = redirectUrl;
-        mLatestClickthroughUrl = clickthroughUrl;
-        return getSingletonMock();
-    }
-
-    public static HtmlBannerWebViewPool getWebViewPool() {
-        return getInstance().mHtmlBannerWebViewPool;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
deleted file mode 100644
index 62a904ee..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHtmlInterstitialWebViewFactory.java
+++ /dev/null
@@ -1,54 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.HtmlInterstitialWebView;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewFactory;
-import com.mopub.mobileads.factories.HtmlInterstitialWebViewPool;
-
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import static org.mockito.Mockito.mock;
-
-public class TestHtmlInterstitialWebViewFactory extends HtmlInterstitialWebViewFactory {
-    private HtmlInterstitialWebView mockHtmlInterstitialWebView = mock(HtmlInterstitialWebView.class);
-
-    private CustomEventInterstitialListener mLatestListener;
-    private boolean mLatestIsScrollable;
-    private String mLatestRedirectUrl;
-    private String mLatestClickthroughUrl;
-
-
-    @Override
-    public HtmlInterstitialWebView internalCreate(CustomEventInterstitialListener customEventInterstitialListener, boolean isScrollable, String redirectUrl, String clickthroughUrl) {
-        mLatestListener = customEventInterstitialListener;
-        mLatestIsScrollable = isScrollable;
-        mLatestRedirectUrl = redirectUrl;
-        mLatestClickthroughUrl = clickthroughUrl;
-        return getInstance().mockHtmlInterstitialWebView;
-    }
-
-    private static TestHtmlInterstitialWebViewFactory getInstance() {
-        return (TestHtmlInterstitialWebViewFactory) instance;
-    }
-
-    public static HtmlInterstitialWebView getSingletonMock() {
-        return getInstance().mockHtmlInterstitialWebView;
-    }
-
-    public static CustomEventInterstitialListener getLatestListener() {
-        return getInstance().mLatestListener;
-    }
-
-    public static boolean getLatestIsScrollable() {
-        return getInstance().mLatestIsScrollable;
-    }
-    public static String getLatestRedirectUrl() {
-        return getInstance().mLatestRedirectUrl;
-    }
-
-    public static String getLatestClickthroughUrl() {
-        return getInstance().mLatestClickthroughUrl;
-    }
-
-    public static HtmlInterstitialWebViewPool getWebViewPool() {
-        return getInstance().mHtmlInterstitialWebViewPool;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
deleted file mode 100644
index e1170b56..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpClientFactory.java
+++ /dev/null
@@ -1,13 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import com.mopub.mobileads.factories.HttpClientFactory;
-import org.apache.http.impl.client.DefaultHttpClient;
-
-public class TestHttpClientFactory extends HttpClientFactory {
-    private DefaultHttpClient instance = new DefaultHttpClient();
-
-    @Override
-    protected DefaultHttpClient internalCreate() {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
deleted file mode 100644
index 33ace13c..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestHttpResponseWithHeaders.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import org.apache.http.Header;
-import org.apache.http.message.BasicHeader;
-import org.robolectric.tester.org.apache.http.TestHttpResponse;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public class TestHttpResponseWithHeaders extends TestHttpResponse {
-    private Map<String, Header> headers;
-
-    public TestHttpResponseWithHeaders(int statusCode, String responseBody) {
-        super(statusCode, responseBody);
-        headers = new HashMap<String, Header>();
-    }
-
-    @Override
-    public void addHeader(String name, String value) {
-        headers.put(name, new BasicHeader(name, value));
-    }
-
-    @Override
-    public Header getFirstHeader(String name) {
-        return headers.get(name);
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
deleted file mode 100644
index 2dfea019..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMoPubViewFactory.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import com.mopub.mobileads.MoPubView;
-import com.mopub.mobileads.factories.MoPubViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMoPubViewFactory extends MoPubViewFactory {
-    private static MoPubView instance = mock(MoPubView.class);
-
-    public static MoPubView getSingletonMock() {
-        return instance;
-    }
-
-    @Override
-    protected MoPubView internalCreate(Context context) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java
deleted file mode 100644
index 2dab074d..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/TestMraidViewFactory.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.mopub.mobileads.test.support;
-
-import android.content.Context;
-import com.mopub.mobileads.MraidActivity;
-import com.mopub.mobileads.MraidView;
-import com.mopub.mobileads.factories.MraidViewFactory;
-
-import static org.mockito.Mockito.mock;
-
-public class TestMraidViewFactory extends MraidViewFactory{
-
-    public static final MraidView instance = mock(MraidView.class);
-
-    public static MraidView getSingletonMock() {
-        return instance;
-    }
-
-    @Override
-    protected MraidView internalCreate(Context context) {
-        return instance;
-    }
-
-    @Override
-    protected MraidView internalCreate(MraidActivity mraidActivity, MraidView.ExpansionStyle expansionStyle, MraidView.NativeCloseButtonStyle buttonStyle, MraidView.PlacementType placementType) {
-        return instance;
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
deleted file mode 100644
index f33e2f26..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/HttpResponsesTest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.test.support.TestHttpResponseWithHeaders;
-import org.junit.Before;
-import org.junit.Test;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-public class HttpResponsesTest {
-
-    private TestHttpResponseWithHeaders response;
-
-    @Before
-    public void setup() {
-        response = new TestHttpResponseWithHeaders(200, "all is well");
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsZero_shouldReturnFalse() throws Exception {
-        response.addHeader("name", "0");
-
-        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isFalse();
-    }
-
-    @Test
-    public void extractBooleanHeader_whenValueIsOne_shouldReturnTrue() throws Exception {
-        response.addHeader("name", "1");
-
-        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isTrue();
-    }
-
-    @Test
-    public void extractBooleanHeader_shouldDefaultToTrue() throws Exception {
-        // no header added to response
-
-        assertThat(HttpResponses.extractBooleanHeader(response, "name")).isTrue();
-    }
-}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java
deleted file mode 100644
index 8b03f02a..00000000
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/util/StringsTest.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package com.mopub.mobileads.util;
-
-import com.mopub.mobileads.test.support.SdkTestRunner;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-
-import static org.fest.assertions.api.Assertions.assertThat;
-
-@RunWith(SdkTestRunner.class)
-public class StringsTest {
-    @Test
-    public void isEmpty_shouldReturnValidResponse() throws Exception {
-        assertThat(Strings.isEmpty("")).isTrue();
-
-        assertThat(Strings.isEmpty("test")).isFalse();
-
-        assertThat(Strings.isEmpty(null)).isFalse();
-    }
-}
