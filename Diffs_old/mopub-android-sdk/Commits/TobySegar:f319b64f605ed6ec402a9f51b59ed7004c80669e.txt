diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
index 8a6127a3..8dc647ca 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Ads.java
@@ -5,31 +5,29 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Handler;
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
 import android.view.KeyCharacterMap;
 import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.widget.Toast;
-
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 import com.google.android.gms.ads.MobileAds;
+import com.jni.ge;
 import com.mojang.base.*;
 import com.mojang.base.events.AppEvent;
 import com.mojang.base.events.GameEvent;
-
 import com.mojang.base.events.InterstitialEvent;
 import com.mojang.base.json.Data;
-import com.jni.ge;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.GooglePlayServicesInterstitial;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
 import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SdkInitializationListener;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.ConsentDialogListener;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.mobileads.AdViewController;
+import com.mopub.mobileads.GooglePlayServicesInterstitial;
 import com.mopub.mobileads.MoPubErrorCode;
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
@@ -37,12 +35,7 @@
 
 import java.lang.reflect.Method;
 
-import static com.mojang.base.events.AppEvent.Destroy;
-import static com.mojang.base.events.AppEvent.OfflineAccepted;
-import static com.mojang.base.events.AppEvent.OnlineAccepted;
-import static com.mojang.base.events.AppEvent.Pause;
-import static com.mojang.base.events.AppEvent.Resume;
-import static com.mojang.base.events.AppEvent.Stop;
+import static com.mojang.base.events.AppEvent.*;
 import static com.mojang.base.events.GameEvent.*;
 import static com.mojang.base.events.InterstitialEvent.*;
 import static com.mopub.ads.Interstitial.DEBUG_MOPUB_INTERSTITIAL_ID;
@@ -225,7 +218,8 @@ private static void initializeMoPub(Activity activity, final Runnable runAfter)
                     new SdkInitializationListener() {
                         @Override
                         public void onInitializationFinished() {
-                            Ads.showMoPubConsentDialog(runAfter);
+                            runAfter.run();
+                            //Ads.showMoPubConsentDialog(runAfter);
                         }
                     });
         } else {
@@ -235,6 +229,7 @@ public void onInitializationFinished() {
         }
     }
 
+    //deprecated
     private static void showMoPubConsentDialog(final Runnable doAfterDialog) {
         if (MoPub.isSdkInitialized()) {
             // CONSENT DIALOG FOR MOPUB
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
index 6ab705d2..fb9e5e89 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Interstitial.java
@@ -2,10 +2,14 @@
 
 
 import android.app.Activity;
-
 import android.content.Context;
 import android.content.Intent;
-import com.mojang.base.*;
+import com.google.android.gms.ads.AdListener;
+import com.google.android.gms.ads.AdRequest;
+import com.google.android.gms.ads.InterstitialAd;
+import com.mojang.base.Analytics;
+import com.mojang.base.Helper;
+import com.mojang.base.Logger;
 import com.mojang.base.events.GameEvent;
 import com.mojang.base.events.InterstitialEvent;
 import com.mojang.base.json.Data;
@@ -17,8 +21,8 @@
 import org.greenrobot.eventbus.ThreadMode;
 
 import static com.mojang.base.events.GameEvent.*;
-import static com.mojang.base.events.InterstitialEvent.Dismissed;
-import static com.mojang.base.events.InterstitialEvent.Loaded;
+import static com.mojang.base.events.InterstitialEvent.*;
+import static com.mopub.mobileads.GooglePlayServicesInterstitial.DEBUG_INTERSTITIAL_ID;
 
 /**
  * Intertitial functionality for showing ads
@@ -34,9 +38,12 @@
     public final Lock lock;
     boolean pauseScreenShowed;
     private Runnable loadRunnable;
+    private Runnable AdmobloadRunnable;
     private Runnable gapLockRunnable;
     private Runnable periodicShowRunnable;
     private Runnable proxyFinishRunnable;
+    static boolean Mop_intestitialFailedtoLoad;
+    InterstitialAd Admob_InterstitialAd;
     private int timesBlockChanged;
     Proxy prxy;
     Intent i;
@@ -49,6 +56,7 @@ public Interstitial(final Activity activity) {
         EventBus.getDefault().register(this);
         //prxy = new Proxy();
         i = new Intent(activity, Proxy.class);
+
     }
 
     public void init() {
@@ -63,7 +71,6 @@ public void run() {
                     String mopubId = Helper.isDebugPackage(activity) ? DEBUG_MOPUB_INTERSTITIAL_ID : Data.Ads.Interstitial.mopubId;
                     mopubInterstitial = new MoPubInterstitial(activity, mopubId);
                     mopubInterstitial.setInterstitialAdListener(Interstitial.this);
-                    mopubInterstitial.setKeywords("game,minecraft,kids,casual");
                     mopubInterstitial.load();
                 } else if (!mopubInterstitial.isReady()) {
                     Logger.Log("::Mopub Forcing Refresh");
@@ -103,26 +110,20 @@ public void onGameEvent(GameEvent gameEvent) {
     public void onInterstitialEvent(InterstitialEvent intEvent) {
         switch (intEvent.event) {
             case Loaded:
+                changePeriodicShowForHighEcpmCountry();
                 schedulePeriodicShows();
                 break;
-        }
-    }
-
-    //<editor-fold desc="Overide Methods Interstitial">
-    @Override
-    public void onInterstitialDismissed(MoPubInterstitial interstitial) {
-        Logger.Log("::called -- onInterstitialDismissed");
-        EventBus.getDefault().post(new InterstitialEvent(Dismissed));
-        Logger.Log("::onInterstitialDismissed");
-
-        //todo info: no gap for developers
-        if (Helper.isDebugPackage(context))
-            Data.Ads.Interstitial.minimalGapMills = 10;
-
-        gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
-        load(1000);
-        //Old code if proxy usage
-       /* if (Proxy.isProxyBeingUsed) {
+            case Failed:
+                load(10000);
+                break;
+            case Dismissed:
+                //todo info: no gap for developers
+                if (Helper.isDebugPackage(context))
+                    Data.Ads.Interstitial.minimalGapMills = 10;
+                gapLockForTime(Data.Ads.Interstitial.minimalGapMills);
+                load(1000);
+                //Old code if proxy usage
+                /* if (Proxy.isProxyBeingUsed) {
 
             proxyFinishRunnable = new Runnable() {
                 @Override
@@ -135,22 +136,29 @@ public void run() {
             };
             Helper.runOnWorkerThread(proxyFinishRunnable, 600);
         }*/
+                break;
+        }
+    }
+
+    //<editor-fold desc="Overide Methods Interstitial">
+    @Override
+    public void onInterstitialDismissed(MoPubInterstitial interstitial) {
+        Logger.Log("::called -- onInterstitialDismissed");
+        EventBus.getDefault().post(new InterstitialEvent(Dismissed));
     }
 
     @Override
     public void onInterstitialLoaded(MoPubInterstitial interstitial) {
         EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Loaded));
         Logger.Log("::::Interstitial: onInterstitialLoaded");
-
-        changePeriodicShowForHighEcpmCountry();
-        schedulePeriodicShows();
     }
 
     @Override
     public void onInterstitialFailed(MoPubInterstitial interstitial, MoPubErrorCode errorCode) {
+        Mop_intestitialFailedtoLoad = true;
+        loadRunnable=null;
         EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Failed));
         Logger.Log("::onInterstitialFailed: " + errorCode);
-        load(10000);
     }
 
     @Override
@@ -175,10 +183,14 @@ public void run() {
                 boolean isMopubReady = !isMopubNull && mopubInterstitial.isReady();
                 Logger.Log("::I", "::isLocked: " + "::multiplayerLocalOnline [" + lock.localMultiplayer + ":: " + lock.onlineMultiplayer + "::]" + ":: " + "::internet [" + lock.internet + "::]" + ":: " + "::gap [" + lock.gap + "::]" + ":: " + "::stop [" + lock.stop + "::] " + "::game [" + lock.game + "::]");
                 Logger.Log("::[isMopubNull(false) = " + isMopubNull + "::] " + "::[isSoftLocked(false) = " + lock.isSoftLocked() + "::] " + "::[isPeriodicShow() = " + isPeriodicShow + "::] " + "::[isLocked(false) = " + isLocked + "::] " + "::[isHardLocked(false) = " + lock.isHardLocked() + "::] " + "::[isMopubReady(true) = " + isMopubReady + "::]" + "::[areAdsEnabled(true) = " + Data.Ads.enabled + "::]");
-                if (!isMopubNull && !isLocked && isMopubReady && Data.Ads.enabled) {
-                    if (mopubInterstitial.isReady()) {
-                        mopubInterstitial.show();
-                        //<editor-fold desc="Deprecated Proxy Activity">
+                if (!isLocked && Data.Ads.enabled) {
+                    //Skusam admob first ak bol fail v mopube
+                    if (Mop_intestitialFailedtoLoad && Admob_InterstitialAd.isLoaded()) {
+                        Admob_InterstitialAd.show();
+                    } else if (!isMopubNull && isMopubReady && !Mop_intestitialFailedtoLoad) {
+                        if (mopubInterstitial.isReady()) {
+                            mopubInterstitial.show();
+                            //<editor-fold desc="Deprecated Proxy Activity code">
                         /* Deprecated Proxy Activity Watch out for Analytics Session because its a second activity
                         else {
                             Runnable proxyStartRunnable = new Runnable() {
@@ -189,10 +201,11 @@ public void run() {
                             };
                             Helper.runOnWorkerThread(proxyStartRunnable);
                         }*/
-                        //</editor-fold>
-                    } else {
-                        Logger.Log("::InterstitialAd not available");
-                        Analytics.report("Ads", "InterstitialAdNotAvailable");
+                            //</editor-fold>
+                        } else {
+                            Logger.Log("::InterstitialAd not available");
+                            Analytics.report("Ads", "InterstitialAdNotAvailable");
+                        }
                     }
                 }
             }
@@ -207,10 +220,15 @@ public void destroy() {
     }
 
     private void load(long delay) {
-        if (loadRunnable == null) {
+        if (Mop_intestitialFailedtoLoad && Admob_InterstitialAd != null) {
+            loadUpAdmob((int) delay);
+        } else if (loadRunnable == null) {
             loadRunnable = new Runnable() {
                 @Override
                 public void run() {
+                    if (Mop_intestitialFailedtoLoad) {
+                        readyUpAdmob();
+                    }
                     if (mopubInterstitial != null) {
                         mopubInterstitial.load();
                     }
@@ -221,6 +239,50 @@ public void run() {
         Helper.runOnWorkerThread(loadRunnable, delay);
     }
 
+    private void readyUpAdmob() {
+        if (Mop_intestitialFailedtoLoad && Admob_InterstitialAd == null) {
+            String adUnitId = Helper.isDebugPackage(context) ? DEBUG_INTERSTITIAL_ID : Data.Ads.Interstitial.admobId;
+            Admob_InterstitialAd = new InterstitialAd(context);
+            Admob_InterstitialAd.setAdUnitId(adUnitId);
+            Admob_InterstitialAd.setAdListener(new AdListener() {
+                @Override
+                public void onAdLoaded() {
+                    EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Loaded));
+                    Logger.Log("::onInterstitialLoaded: " + "Admob");
+                }
+
+                @Override
+                public void onAdFailedToLoad(int errorCode) {
+                    EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Failed));
+                    Logger.Log("::onInterstitialFailed: " + errorCode);
+                }
+
+                @Override
+                public void onAdClicked() {
+                    EventBus.getDefault().post(new InterstitialEvent(InterstitialEvent.Clicked));
+                    Logger.Log("::onInterstitialClicked");
+                }
+
+                @Override
+                public void onAdClosed() {
+                    EventBus.getDefault().post(new InterstitialEvent(Dismissed));
+                    Logger.Log("::onInterstitialDismissed");
+                }
+            });
+        }
+    }
+
+    private void loadUpAdmob(int delay) {
+        if (Mop_intestitialFailedtoLoad) {
+            AdmobloadRunnable = new Runnable() {
+                @Override
+                public void run() {
+                    Admob_InterstitialAd.loadAd(new AdRequest.Builder().build());
+                }
+            };
+            Helper.runOnUiThread(AdmobloadRunnable, delay);
+        }
+    }
 
     private void schedulePeriodicShows() {
         if (!periodicScheduled) { // Needs to be call only once pretoze sa to same schedulne dokola.
@@ -243,7 +305,7 @@ public void run() {
     }
 
     private void changePeriodicShowForHighEcpmCountry() {
-        if (Data.country != null && Data.Ads.Interstitial.highEcpmCountries != null) {
+        if (Data.country != null && Data.Ads.Interstitial.highEcpmCountries != null && MoPub.isSdkInitialized() && !Mop_intestitialFailedtoLoad) {
             for (String highEcpmCountry : Data.Ads.Interstitial.highEcpmCountries) {
                 if (highEcpmCountry.equals(Data.country)) {
                     periodicMills = Data.Ads.Interstitial.periodicShowMillsHigh;
@@ -268,7 +330,6 @@ public void run() {
     }
 
 
-
     //<editor-fold desc="Random Ass Lock class">
     //Tato klasa preventuje aby sa ti neshowla ad ked nieco robis.
     public class Lock {
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
index e1fa7f6b..111bff5e 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
@@ -6,8 +6,6 @@
 
 import android.content.Context;
 
-import com.mopub.ads.Proxy;
-
 import java.util.Map;
 
 /*
@@ -37,6 +35,8 @@
          * The serverExtras parameter is a Map containing additional custom data configurable on the
          * MoPub website that you want to associate with a given custom event request. This data may be
          * used to pass dynamic information, such as publisher IDs, without changes in application code.
+         *
+         * loadInterstitial used to be protected keyword
          */
     protected abstract void loadInterstitial(Context context,
             CustomEventInterstitialListener customEventInterstitialListener,
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
index c4e8bb95..9a908aa7 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/GooglePlayServicesInterstitial.java
@@ -3,7 +3,6 @@
 import android.content.Context;
 import android.os.Bundle;
 import android.util.Log;
-
 import com.google.ads.mediation.admob.AdMobAdapter;
 import com.google.android.gms.ads.AdListener;
 import com.google.android.gms.ads.AdRequest;
@@ -12,8 +11,6 @@
 import com.mojang.base.Logger;
 import com.mojang.base.json.Data;
 import com.mopub.common.MediationSettings;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
 
 import java.util.Map;
 
@@ -46,6 +43,7 @@ private static boolean shouldUseDebug(Context context) {
         String s1 = "com.mma"; String s2 = "rcel.g4";
         return context.getPackageName().equals(Logger.String("::"+ s1 + s2))
                 || context.getPackageName().equals("com.mojang.minecraftpe.debug")
+                || context.getPackageName().equals("com.mmezonet.g2")
                 || context.getPackageName().equals("com.mojang.minecraftpe");
     }
 
