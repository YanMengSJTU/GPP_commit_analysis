diff --git a/.github/ISSUE_TEMPLATE.md b/.github/ISSUE_TEMPLATE.md
new file mode 100644
index 00000000..80426a58
--- /dev/null
+++ b/.github/ISSUE_TEMPLATE.md
@@ -0,0 +1,24 @@
+One line summary of the issue here
+
+- [ ] I am submitting a bug report for existing functionality
+- [ ] I visited https://developers.mopub.com/ and found no answer
+- [ ] I checked https://twittercommunity.com/c/advertiser-api/mopub to make sure that this issue has not already been filed
+- [ ] I checked to make sure that this issue has not already been filed
+
+#### MoPub SDK Version:
+
+#### Device model and OS Version:
+
+#### Ad Unit IDs used in reproducing the issue:
+
+#### Steps to reproduce the behavior:
+Please list all relevant steps to reproduce the observed behavior.
+
+#### Expected behavior:
+As concisely as possible, describe the expected behavior.
+
+#### Observed behavior:
+As concisely as possible, describe the observed behavior.
+
+#### Evidence:
+Device log files, Network log file, etc.
diff --git a/CHANGELOG.md b/CHANGELOG.md
index 2a34f068..68b76eab 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,13 @@
+## Version 5.4.1 (November 28, 2018)
+- **Bug Fixes**
+  - Fixed bug with the internal state of rewarded video when the video fails to play.
+  - Fixed bug where initialization complete is called multiple times.
+  - Fixed Google Advertising ID fetching logic.
+  - Marked `gdprApplies` as nullable
+  - Added cleartextTrafficPermitted="true" to Android Sample App.
+  - Fixed bug where `rewardedAdsLoaders.markPlayed()` was fired before `onRewardedVideoClosed()`.
+  - Added `adDidFail` callback to `!isNetworkAvailable()` in `AdViewController`.
+
 ## Version 5.4.0 (October 3, 2018)
 - Upgraded target SDK version to 28 and support libraries to 28.0.0.
 - Upgraded ExoPlayer dependency to 2.8.3.
diff --git a/README.md b/README.md
index 60f3334f..ec660255 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.4.1@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.4.1@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.4.1@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.4.1@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.4.1@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.4.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.4.1@aar') {
             transitive = true
         }
     }
@@ -109,10 +109,14 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Upgraded target SDK version to 28 and support libraries to 28.0.0.
-- Upgraded ExoPlayer dependency to 2.8.3.
-- Moved `AdvancedBiddingInitializationAsyncTask` and `RefreshAdvertisingInfoAsyncTask` to the parallel executor.
-- MRAID `isViewable` now more closely follows our impression tracking instead of the ad being marked viewable as soon as it loads.
+- **Bug Fixes**
+  - Fixed bug with the internal state of rewarded video when the video fails to play.
+  - Fixed bug where initialization complete is called multiple times.
+  - Fixed Google Advertising ID fetching logic.
+  - Marked `gdprApplies` as nullable
+  - Added cleartextTrafficPermitted="true" to Android Sample App.
+  - Fixed bug where `rewardedAdsLoaders.markPlayed()` was fired before `onRewardedVideoClosed()`.
+  - Added `adDidFail` callback to `!isNetworkAvailable()` in `AdViewController`.
 
 ## Requirements
 
@@ -141,7 +145,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.4.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.4.1@aar') {
         transitive = true
     }
 }
@@ -150,7 +154,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.4.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.4.1@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 17fe7212..d67cfd2c 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="64"
-      android:versionName="5.4.0">
+      android:versionCode="65"
+      android:versionName="5.4.1">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index ae25b151..1ad8bcf7 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -15,14 +15,14 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.4.0'
+project.version = '5.4.1'
 
 android {
     compileSdkVersion 28
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 64
+        versionCode 65
         versionName version
         minSdkVersion 16
         targetSdkVersion 28
@@ -62,7 +62,7 @@ android {
 dependencies {
     implementation 'com.android.support:customtabs:28.0.0'
     implementation 'com.android.support:support-v4:28.0.0'
-    implementation 'com.google.android.gms:play-services-ads:15.0.1'
+    implementation 'com.google.android.gms:play-services-ads-identifier:15.0.1'
     implementation 'com.google.android.gms:play-services-base:15.0.1'
     implementation 'com.android.support:recyclerview-v7:28.0.0'
     implementation project(':mopub-sdk')
diff --git a/mopub-sample/proguard.cfg b/mopub-sample/proguard.cfg
index bff255cd..77a5fd54 100644
--- a/mopub-sample/proguard.cfg
+++ b/mopub-sample/proguard.cfg
@@ -10,8 +10,8 @@
 # Explicitly keep any custom event classes in any package.
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
+-keep class * extends com.mopub.mobileads.CustomEventRewardedAd {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
--keep class * extends com.mopub.nativeads.CustomEventRewardedAd {}
 
 # Keep methods that are accessed via reflection
 -keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
diff --git a/mopub-sample/res/values/strings.xml b/mopub-sample/res/values/strings.xml
index 290904ee..44afbbb6 100644
--- a/mopub-sample/res/values/strings.xml
+++ b/mopub-sample/res/values/strings.xml
@@ -25,7 +25,7 @@
     <string name="ad_unit_id_leaderboard">a8919cca19784497872ae69d48f678e1</string>
     <string name="ad_unit_id_interstitial">24534e1901884e398f1253216226017e</string>
     <string name="ad_unit_id_rewarded_video">920b6145fb1546cf8b5cf2ac34638bb7</string>
-    <string name="ad_unit_id_rewarded_rich_media">15173ac6d3e54c9389b9a5ddca69b34b</string>
+    <string name="ad_unit_id_rewarded_rich_media">a96ae2ef41d44822af45c6328c4e1eb1</string>
     <string name="ad_unit_id_native">11a17b188668469fb0412708c3d16813</string>
     <string name="swipe_text"><![CDATA[< Swipe Left & Right >]]></string>
 </resources>
diff --git a/mopub-sample/res/xml/network_security_config.xml b/mopub-sample/res/xml/network_security_config.xml
index ed36e236..f231b334 100644
--- a/mopub-sample/res/xml/network_security_config.xml
+++ b/mopub-sample/res/xml/network_security_config.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="utf-8"?>
 <network-security-config>
-    <base-config>
+    <base-config cleartextTrafficPermitted="true">
         <trust-anchors>
             <certificates src="system"/>
         </trust-anchors>
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
index e839adef..4b8efac6 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/GpsHelper.java
@@ -19,10 +19,7 @@
 
 public class GpsHelper {
     static public final int GOOGLE_PLAY_SUCCESS_CODE = 0;
-    static public final int SERVICE_VERSION_UPDATE_REQUIRED = 2;
-    static public final String ADVERTISING_ID_KEY = "advertisingId";
     static public final String IS_LIMIT_AD_TRACKING_ENABLED_KEY = "isLimitAdTrackingEnabled";
-    private static String sPlayServicesUtilClassName = "com.google.android.gms.common.GooglePlayServicesUtil";
     private static String sAdvertisingIdClientClassName = "com.google.android.gms.ads.identifier.AdvertisingIdClient";
 
     public static class AdvertisingInfo {
@@ -39,48 +36,13 @@ public AdvertisingInfo(String adId, boolean limitAdTrackingEnabled) {
         void onFetchAdInfoCompleted();
     }
 
-    public static boolean isPlayServicesAvailable(final Context context) {
-        try {
-            MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "isGooglePlayServicesAvailable")
-                    .setStatic(Class.forName(sPlayServicesUtilClassName))
-                    .addParam(Context.class, context);
-
-            Object result = methodBuilder.execute();
-
-            Integer intResult = (Integer) result;
-            return (intResult != null && (intResult == GOOGLE_PLAY_SUCCESS_CODE || intResult == SERVICE_VERSION_UPDATE_REQUIRED));
-        } catch (Exception exception) {
-            return false;
-        }
-    }
-
     static public boolean isLimitAdTrackingEnabled(Context context) {
-        final boolean defaultValue = false;
-        if (isPlayServicesAvailable(context)) {
-            return SharedPreferencesHelper.getSharedPreferences(context)
-                    .getBoolean(IS_LIMIT_AD_TRACKING_ENABLED_KEY, defaultValue);
-        } else {
-            return defaultValue;
-        }
+        return SharedPreferencesHelper.getSharedPreferences(context)
+                .getBoolean(IS_LIMIT_AD_TRACKING_ENABLED_KEY, false); // default to disabled
     }
 
     static public void fetchAdvertisingInfoAsync(final Context context, final GpsHelperListener gpsHelperListener) {
-        // This method guarantees that the Google Play Services (GPS) advertising info will
-        // be populated if GPS is available and the ad info is not already cached
-        // The above will happen before the callback is run
-        boolean playServicesIsAvailable = isPlayServicesAvailable(context);
-        if (playServicesIsAvailable ) {
-            internalFetchAdvertisingInfoAsync(context, gpsHelperListener);
-        }
-        else {
-            if (gpsHelperListener != null) {
-                gpsHelperListener.onFetchAdInfoCompleted();
-            }
-            if (playServicesIsAvailable) {
-                // Kick off a request to update the ad information in the background.
-                internalFetchAdvertisingInfoAsync(context, null);
-            }
-        }
+        internalFetchAdvertisingInfoAsync(context, gpsHelperListener);
     }
 
     @Nullable
@@ -89,20 +51,22 @@ static public AdvertisingInfo fetchAdvertisingInfoSync(final Context context) {
             return null;
         }
         Object adInfo = null;
+        String advertisingId = null;
+        boolean isLimitAdTrackingEnabled = false;
+
         try {
             MethodBuilder methodBuilder = MethodBuilderFactory.create(null, "getAdvertisingIdInfo")
                     .setStatic(Class.forName(sAdvertisingIdClientClassName))
                     .addParam(Context.class, context);
 
             adInfo = methodBuilder.execute();
+            advertisingId = reflectedGetAdvertisingId(adInfo, advertisingId);
+            isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, isLimitAdTrackingEnabled);
         } catch (Exception e) {
             MoPubLog.d("Unable to obtain Google AdvertisingIdClient.Info via reflection.");
             return null;
         }
 
-        String advertisingId = reflectedGetAdvertisingId(adInfo, null);
-        boolean isLimitAdTrackingEnabled = reflectedIsLimitAdTrackingEnabled(adInfo, false);
-
         return new AdvertisingInfo(advertisingId, isLimitAdTrackingEnabled);
     }
 
@@ -183,15 +147,5 @@ static boolean reflectedIsLimitAdTrackingEnabled(final Object adInfo, final bool
             return defaultValue;
         }
     }
-
-    @Deprecated
-    static public void setClassNamesForTesting() {
-        // This method is used for testing only to help alleviate pain with testing
-        // unlinked libraries via reflection
-        // Set class names to something that is linked so Class.forName method doesn't throw
-        String className = "java.lang.Class";
-        sPlayServicesUtilClassName = className;
-        sAdvertisingIdClientClassName = className;
-    }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index cc07ffd1..ddff44d2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -21,7 +21,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.4.0";
+    public static final String SDK_VERSION = "5.4.1";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -164,7 +164,7 @@ public static void initializeSdk(@NonNull final Context context,
         // This also initializes MoPubLog
         MoPubLog.d("Initializing MoPub with ad unit: " + sdkConfiguration.getAdUnitId());
 
-        if (context instanceof Activity && Reflection.classFound(MOPUB_REWARDED_VIDEO_MANAGER)) {
+        if (context instanceof Activity) {
             final Activity activity = (Activity) context;
             initializeRewardedVideo(activity, sdkConfiguration);
         }
@@ -375,6 +375,7 @@ static void clearAdvancedBidders() {
         sAdvancedBiddingTokens = null;
         sPersonalInfoManager = null;
         sSdkInitialized = false;
+        sSdkInitializing = false;
     }
 
     @Deprecated
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index bbeb5ffc..0eebc8da 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -50,7 +50,7 @@
     private boolean initialized;
 
     @Nullable
-    private SdkInitializationListener mInitializationListener;
+    private volatile SdkInitializationListener mInitializationListener;
 
     public MoPubIdentifier(@NonNull final Context appContext) {
         this(appContext, null);
@@ -92,34 +92,24 @@ private void refreshAdvertisingInfo() {
     }
 
     void refreshAdvertisingInfoBackgroundThread() {
-        long time = Calendar.getInstance().getTimeInMillis();
+        final long time = Calendar.getInstance().getTimeInMillis();
+
+        final AdvertisingId oldInfo = mAdInfo;
+        AdvertisingId newInfo;
 
         // try google
-        if (isPlayServicesAvailable()) {
-            GpsHelper.AdvertisingInfo info = GpsHelper.fetchAdvertisingInfoSync(mAppContext);
-            if (info != null && !TextUtils.isEmpty(info.advertisingId)) {
-                final AdvertisingId oldId = mAdInfo;
-                if (oldId.isRotationRequired()) {
-                    setAdvertisingInfo(info.advertisingId, AdvertisingId.generateIdString(), info.limitAdTracking, time);
-                } else {
-                    setAdvertisingInfo(info.advertisingId, oldId.mMopubId, info.limitAdTracking, oldId.mLastRotation.getTimeInMillis());
-                }
-                return;
-            } else {
-                MoPubLog.w("Call to 'getAdvertisingIdInfo' returned invalid value.");
-            }
+        final GpsHelper.AdvertisingInfo googleAdInfo = GpsHelper.fetchAdvertisingInfoSync(mAppContext);
+        if (googleAdInfo != null && !TextUtils.isEmpty(googleAdInfo.advertisingId)) {
+            newInfo = new AdvertisingId(googleAdInfo.advertisingId, oldInfo.mMopubId, googleAdInfo.limitAdTracking, oldInfo.mLastRotation.getTimeInMillis());
+        } else {
+            newInfo = getAmazonAdvertisingInfo(mAppContext);
         }
 
-        // try amazon
-        final AdvertisingId info = getAmazonAdvertisingInfo(mAppContext);
-        if (info != null && !TextUtils.isEmpty(info.mAdvertisingId)) {
-            final AdvertisingId oldId = mAdInfo;
-            if (oldId.isRotationRequired()) {
-                setAdvertisingInfo(info.mAdvertisingId, AdvertisingId.generateIdString(), info.mDoNotTrack, time);
-            } else {
-                setAdvertisingInfo(info.mAdvertisingId, oldId.mMopubId, info.mDoNotTrack, oldId.mLastRotation.getTimeInMillis());
-            }
-            return;
+        if (newInfo != null) {
+            final String newMoPubId = oldInfo.isRotationRequired() ? AdvertisingId.generateIdString() : oldInfo.mMopubId;
+            final long newRotationTime = oldInfo.isRotationRequired() ? time : oldInfo.mLastRotation.getTimeInMillis();
+
+            setAdvertisingInfo(newInfo.mAdvertisingId, newMoPubId, newInfo.mDoNotTrack, newRotationTime);
         }
 
         // MoPub
@@ -216,10 +206,11 @@ void setInitializationListener(@Nullable final SdkInitializationListener initial
         }
     }
 
-    private void reportInitializationComplete() {
-        if (mInitializationListener != null) {
-            mInitializationListener.onInitializationFinished();
+    private synchronized void reportInitializationComplete() {
+        final SdkInitializationListener listener = mInitializationListener;
+        if (listener != null) {
             mInitializationListener = null;
+            listener.onInitializationFinished();
         }
     }
 
@@ -231,10 +222,6 @@ private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull
         }
     }
 
-    boolean isPlayServicesAvailable() {
-        return GpsHelper.isPlayServicesAvailable(mAppContext);
-    }
-
     // For Amazon tablets running Fire OS 5.1+ and TV devices running Fire OS 5.2.1.1+, the
     // advertising info is available as System Settings.
     // See https://developer.amazon.com/public/solutions/devices/fire-tv/docs/fire-tv-advertising-id
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index b7c1699f..3fb62383 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -238,6 +238,7 @@ public boolean canCollectPersonalInformation() {
      *
      * @return true for in GDPR region, false for not in GDPR region, null for unknown
      */
+    @Nullable
     public Boolean gdprApplies() {
         if (mPersonalInfoData.isForceGdprApplies()) {
             return true;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
index 0f17e025..35ebf375 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidBridge.java
@@ -258,6 +258,13 @@ private void fireNativeCommandCompleteEvent(@NonNull MraidJavascriptCommand comm
         public MraidWebView(Context context) {
             super(context);
 
+            if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.LOLLIPOP_MR1) {
+                // Android 22 and lower has a bug where onVisibilityChanged is not called all
+                // the time when views are attached.
+                mMraidViewable = getVisibility() == View.VISIBLE;
+                return;
+            }
+
             mVisibilityTracker = new VisibilityTracker(context);
             final VisibilityTracker.VisibilityTrackerListener visibilityTrackerListener = new VisibilityTracker.VisibilityTrackerListener() {
                 @Override
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index 88866a61..39827747 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -762,7 +762,6 @@ public void run() {
                     onRewardedVideoPlaybackErrorAction(currentlyShowingAdUnitId, errorCode);
                 }
             });
-            sInstance.rewardedAdsLoaders.markFail(currentlyShowingAdUnitId);
         }
         sInstance.mRewardedAdData.setCurrentlyShowingAdUnitId(null);
     }
@@ -770,6 +769,7 @@ public void run() {
     private static void onRewardedVideoPlaybackErrorAction(@NonNull final String adUnitId, @NonNull final MoPubErrorCode errorCode) {
         Preconditions.checkNotNull(adUnitId);
         Preconditions.checkNotNull(errorCode);
+        sInstance.rewardedAdsLoaders.markFail(adUnitId);
         if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoPlaybackError(adUnitId, errorCode);
         }
@@ -830,11 +830,11 @@ public void run() {
 
     private static void onRewardedVideoClosedAction(@NonNull final String adUnitId) {
         Preconditions.checkNotNull(adUnitId);
+        // remove adloader from map
+        sInstance.rewardedAdsLoaders.markPlayed(adUnitId);
         if (sInstance.mVideoListener != null) {
             sInstance.mVideoListener.onRewardedVideoClosed(adUnitId);
         }
-        // remove adloader from map
-        sInstance.rewardedAdsLoaders.markPlayed(adUnitId);
     }
 
     public static <T extends CustomEventRewardedAd>
@@ -940,9 +940,8 @@ private static void postToInstance(@NonNull Runnable runnable) {
     }
 
     private static void logErrorNotInitialized() {
-        MoPubLog.e("MoPub rewarded ad was not initialized. You must call " +
-                "MoPub.initializeRewardedVideo() before loading or attempting " +
-                "to play rewarded ads.");
+        MoPubLog.e("MoPub rewarded ads must be initialized with an Activity Context " +
+                "before calling rewarded ads methods.");
     }
 
     /**
diff --git a/mopub-sdk/proguard.txt b/mopub-sdk/proguard.txt
index 21b8b752..4aa3f962 100644
--- a/mopub-sdk/proguard.txt
+++ b/mopub-sdk/proguard.txt
@@ -10,8 +10,8 @@
 # Explicitly keep any custom event classes in any package.
 -keep class * extends com.mopub.mobileads.CustomEventBanner {}
 -keep class * extends com.mopub.mobileads.CustomEventInterstitial {}
+-keep class * extends com.mopub.mobileads.CustomEventRewardedAd {}
 -keep class * extends com.mopub.nativeads.CustomEventNative {}
--keep class * extends com.mopub.nativeads.CustomEventRewardedAd {}
 
 # Keep methods that are accessed via reflection
 -keepclassmembers class ** { @com.mopub.common.util.ReflectionTarget *; }
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 6dc3a804..08d512f1 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -13,7 +13,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '5.4.0'
+project.version = '5.4.1'
 
 android {
     compileSdkVersion rootProject.ext.compileSdkVersion
@@ -21,7 +21,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 64
+        versionCode 65
         versionName version
         minSdkVersion 16
         targetSdkVersion rootProject.ext.targetSdkVersion
diff --git a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
index 2f20265b..40bcf6dc 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/GpsHelperTest.java
@@ -83,35 +83,8 @@ public void tearDown() throws Exception {
         reset(methodBuilder);
     }
 
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsLinked_shouldReturnTrue() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isTrue();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNonSuccessCode_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE + 1);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesReturnsNull_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
-        when(methodBuilder.execute()).thenReturn(null);
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
-    @Test
-    public void isPlayServicesAvailable_whenGooglePlayServicesIsNotLinked_shouldReturnFalse() throws Exception {
-        assertThat(GpsHelper.isPlayServicesAvailable(context)).isFalse();
-    }
-
     @Test
     public void fetchAdvertisingInfoAsync_whenGooglePlayServicesIsLinked_shouldInvokeCallbackOnMainLooper() throws Exception {
-        GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(
                 adInfo,
                 adInfo.mAdId,
@@ -165,7 +138,6 @@ public void reflectedGetAdvertisingId_whenReflectedMethodCallThrows_shouldReturn
 
     @Test
     public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTrackingIsCached_shouldReturnLimitAdTracking() throws Exception {
-        GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
         SharedPreferencesHelper.getSharedPreferences(context)
                 .edit()
@@ -176,7 +148,6 @@ public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndLimitAdTra
 
     @Test
     public void isLimitAdTrackingEnabled_whenGooglePlayServicesIsLinkedAndAdInfoIsNotCached_shouldReturnFalse() throws Exception {
-        GpsHelper.setClassNamesForTesting();
         when(methodBuilder.execute()).thenReturn(GpsHelper.GOOGLE_PLAY_SUCCESS_CODE);
         assertThat(GpsHelper.isLimitAdTrackingEnabled(context)).isFalse();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index 89e6ee5b..ac5d8acb 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -265,18 +265,6 @@ public void sharedPreferences_WriteAndReadAdvertisingId_shouldMatch() throws Exc
         assertThat(adConfig2.mLastRotation.getTimeInMillis()).isEqualTo(time);
     }
 
-    @Test
-    public void isPlayServiceAvailable_whenGoogleAvailable_shouldCallGpsHelper_shouldReturnTrue() {
-        subject = new MoPubIdentifier(context, idChangeListener);
-        assertThat(subject.isPlayServicesAvailable()).isFalse();
-
-        setupGooglePlayService(context, false);
-
-        assertThat(subject.isPlayServicesAvailable()).isTrue();
-        verifyStatic();
-        GpsHelper.isPlayServicesAvailable(any(Context.class));
-    }
-
     @Test
     public void setAdvertisingInfo_whenCalledTwice_shouldCallInitializationListenerOnce_validateSavedAdvertisingIds() throws Exception {
         final AdvertisingId adId1 = new AdvertisingId("ifa1", "mopub1", false, Calendar.getInstance().getTimeInMillis());
@@ -449,7 +437,6 @@ public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withAmazon_w
     // Unit tests utility functions
     public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
         PowerMockito.mockStatic(GpsHelper.class);
-        PowerMockito.when(GpsHelper.isPlayServicesAvailable(context)).thenReturn(true);
         PowerMockito.when(GpsHelper.isLimitAdTrackingEnabled(context)).thenReturn(limitAdTracking);
         PowerMockito.when(GpsHelper.fetchAdvertisingInfoSync(context)).thenReturn(new GpsHelper.AdvertisingInfo(GOOGLE_AD_ID, limitAdTracking));
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 10a4ab9c..de1e3ccd 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -95,6 +95,7 @@ public void setup() throws Exception {
         Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
         MoPub.initializeSdk(activity, new SdkConfiguration.Builder("adunit").build(), null);
+        Reflection.getPrivateField(MoPub.class, "sSdkInitialized").setBoolean(null, true);
 
         mockPersonalInfoManager = mock(PersonalInfoManager.class);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
@@ -144,7 +145,7 @@ public void cleanup_shouldNotHoldViewOrUrlGenerator() {
     }
 
     @Test
-    public void setUserDataKeywords_shouldNotSetKeywordIfNoUserConsent() throws Exception {
+    public void setUserDataKeywords_shouldNotSetKeywordIfNoUserConsent() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
 
         subject.setUserDataKeywords("user_data_keywords");
@@ -153,7 +154,7 @@ public void setUserDataKeywords_shouldNotSetKeywordIfNoUserConsent() throws Exce
     }
 
     @Test
-    public void setUserDataKeywords_shouldSetUserDataKeywordsIfUserConsent() throws Exception {
+    public void setUserDataKeywords_shouldSetUserDataKeywordsIfUserConsent() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
         subject.setUserDataKeywords("user_data_keywords");
@@ -163,7 +164,7 @@ public void setUserDataKeywords_shouldSetUserDataKeywordsIfUserConsent() throws
 
 
     @Test
-    public void generateAdUrl_shouldNotSetUserDataKeywordsIfNoUserConsent() throws Exception {
+    public void generateAdUrl_shouldNotSetUserDataKeywordsIfNoUserConsent() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
 
         subject.setAdUnitId("abc123");
@@ -178,7 +179,7 @@ public void generateAdUrl_shouldNotSetUserDataKeywordsIfNoUserConsent() throws E
     }
 
     @Test
-    public void generateAdUrl_shouldSetUserDataKeywordsIfUserConsent() throws Exception {
+    public void generateAdUrl_shouldSetUserDataKeywordsIfUserConsent() {
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(
                 ConsentStatus.EXPLICIT_YES);
@@ -195,7 +196,7 @@ public void generateAdUrl_shouldSetUserDataKeywordsIfUserConsent() throws Except
     }
 
     @Test
-    public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() throws Exception {
+    public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() {
         ShadowLooper.pauseMainLooper();
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
@@ -206,7 +207,7 @@ public void adDidFail_shouldScheduleRefreshTimer_shouldCallMoPubViewAdFailed() t
     }
 
     @Test
-    public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() throws Exception {
+    public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotCallMoPubViewAdFailed() {
         ShadowLooper.pauseMainLooper();
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
@@ -220,7 +221,7 @@ public void adDidFail_withNullMoPubView_shouldNotScheduleRefreshTimer_shouldNotC
 
 
     @Test
-    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() throws Exception {
+    public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsNull() {
         response = response.toBuilder().setRefreshTimeMilliseconds(null).build();
         subject.onAdLoadSuccess(response);
         ShadowLooper.pauseMainLooper();
@@ -244,7 +245,7 @@ public void scheduleRefreshTimer_shouldNotScheduleIfRefreshTimeIsZero() {
     }
 
     @Test
-    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() throws Exception {
+    public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewOne() {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
         ShadowLooper.pauseMainLooper();
@@ -260,7 +261,7 @@ public void scheduleRefreshTimerIfEnabled_shouldCancelOldRefreshAndScheduleANewO
     }
 
     @Test
-    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutoRefreshIsOff() throws Exception {
+    public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutoRefreshIsOff() {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
 
@@ -275,7 +276,7 @@ public void scheduleRefreshTimer_shouldNotScheduleRefreshIfAutoRefreshIsOff() th
     }
 
     @Test
-    public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_shouldHaveDefaultRefreshTime() throws Exception {
+    public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_shouldHaveDefaultRefreshTime() {
         ShadowLooper.pauseMainLooper();
         assertThat(Robolectric.getForegroundThreadScheduler().size()).isEqualTo(0);
 
@@ -290,7 +291,7 @@ public void scheduleRefreshTimer_whenAdViewControllerNotConfiguredByResponse_sho
     }
 
     @Test
-    public void setShouldAllowAutoRefresh_shouldSetCurrentAutoRefreshStatus() throws Exception {
+    public void setShouldAllowAutoRefresh_shouldSetCurrentAutoRefreshStatus() {
         assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
 
         subject.setShouldAllowAutoRefresh(false);
@@ -301,7 +302,7 @@ public void setShouldAllowAutoRefresh_shouldSetCurrentAutoRefreshStatus() throws
     }
 
     @Test
-    public void pauseRefresh_shouldDisableAutoRefresh() throws Exception {
+    public void pauseRefresh_shouldDisableAutoRefresh() {
         assertThat(subject.getCurrentAutoRefreshStatus()).isTrue();
 
         subject.pauseRefresh();
@@ -309,7 +310,7 @@ public void pauseRefresh_shouldDisableAutoRefresh() throws Exception {
     }
 
     @Test
-    public void resumeRefresh_afterPauseRefresh_shouldEnableRefresh() throws Exception {
+    public void resumeRefresh_afterPauseRefresh_shouldEnableRefresh() {
         subject.pauseRefresh();
 
         subject.resumeRefresh();
@@ -317,7 +318,7 @@ public void resumeRefresh_afterPauseRefresh_shouldEnableRefresh() throws Excepti
     }
 
     @Test
-    public void pauseAndResumeRefresh_withShouldAllowAutoRefreshFalse_shouldAlwaysHaveRefreshFalse() throws Exception {
+    public void pauseAndResumeRefresh_withShouldAllowAutoRefreshFalse_shouldAlwaysHaveRefreshFalse() {
         subject.setShouldAllowAutoRefresh(false);
         assertThat(subject.getCurrentAutoRefreshStatus()).isFalse();
 
@@ -340,7 +341,7 @@ public void multiplePausesBeforeResumeRefresh_shouldEnableAutoRefresh() {
     }
 
     @Test
-    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() throws Exception {
+    public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() {
 
         final AdViewController adViewControllerSpy = spy(subject);
 
@@ -350,7 +351,7 @@ public void enablingAutoRefresh_afterLoadAd_shouldScheduleNewRefreshTimer() thro
     }
 
     @Test
-    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() throws Exception {
+    public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefreshTimer() {
         final AdViewController adViewControllerSpy = spy(subject);
 
         adViewControllerSpy.setShouldAllowAutoRefresh(true);
@@ -358,7 +359,7 @@ public void enablingAutoRefresh_withoutCallingLoadAd_shouldNotScheduleNewRefresh
     }
 
     @Test
-    public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
+    public void disablingAutoRefresh_shouldCancelRefreshTimers() {
         response = response.toBuilder().setRefreshTimeMilliseconds(30).build();
         subject.onAdLoadSuccess(response);
         ShadowLooper.pauseMainLooper();
@@ -372,7 +373,7 @@ public void disablingAutoRefresh_shouldCancelRefreshTimers() throws Exception {
     }
 
     @Test
-    public void trackImpression_shouldAddToRequestQueue() throws Exception {
+    public void trackImpression_shouldAddToRequestQueue() {
         subject.onAdLoadSuccess(response);
         subject.trackImpression();
 
@@ -388,7 +389,7 @@ public void trackImpression_noAdResponse_shouldNotAddToQueue() {
     }
 
     @Test
-    public void registerClick_shouldHttpGetTheClickthroughUrl() throws Exception {
+    public void registerClick_shouldHttpGetTheClickthroughUrl() {
         subject.onAdLoadSuccess(response);
 
         subject.registerClick();
@@ -402,14 +403,14 @@ public void registerClick_NoAdResponse_shouldNotAddToQueue() {
     }
 
     @Test
-    public void fetchAd_withNullMoPubView_shouldNotMakeRequest() throws Exception {
+    public void fetchAd_withNullMoPubView_shouldNotMakeRequest() {
         subject.cleanup();
         subject.fetchAd("adUrl", null);
         verify(mockRequestQueue, never()).add(any(MultiAdRequest.class));
     }
 
     @Test
-    public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
+    public void loadAd_shouldNotLoadWithoutConnectivity() {
         ConnectivityManager connectivityManager = (ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE);
         Shadows.shadowOf(connectivityManager.getActiveNetworkInfo()).setConnectionStatus(false);
         subject.setAdUnitId("adunit");
@@ -419,22 +420,23 @@ public void loadAd_shouldNotLoadWithoutConnectivity() throws Exception {
     }
 
     @Test
-    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() throws Exception {
+    public void loadAd_shouldNotLoadUrlIfAdUnitIdIsNull() {
         subject.loadAd();
 
         verifyZeroInteractions(mockRequestQueue);
     }
 
     @Test
-    public void loadNonJavascript_shouldFetchAd() throws Exception {
+    public void loadNonJavascript_shouldFetchAd() {
         String url = "https://www.guy.com";
+        reset(mockRequestQueue);
         subject.loadNonJavascript(url, null);
 
         verify(mockRequestQueue).add(argThat(isUrl(url)));
     }
 
     @Test
-    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Exception {
+    public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() {
         String url = "https://www.guy.com";
         subject.loadNonJavascript(url, null);
         reset(mockRequestQueue);
@@ -444,7 +446,7 @@ public void loadNonJavascript_whenAlreadyLoading_shouldNotFetchAd() throws Excep
     }
 
     @Test
-    public void loadNonJavascript_shouldAcceptNullParameter() throws Exception {
+    public void loadNonJavascript_shouldAcceptNullParameter() {
         subject.loadNonJavascript(null, null);
         // pass
     }
@@ -461,13 +463,13 @@ public void loadFailUrl_shouldLoadFailUrl() {
     }
 
     @Test
-    public void loadFailUrl_shouldAcceptNullErrorCode() throws Exception {
+    public void loadFailUrl_shouldAcceptNullErrorCode() {
         subject.loadFailUrl(null);
         // pass
     }
 
     @Test
-    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception {
+    public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() {
         response.toBuilder().setFailoverUrl(null).build();
         subject.loadFailUrl(MoPubErrorCode.INTERNAL_ERROR);
 
@@ -476,7 +478,7 @@ public void loadFailUrl_whenFailUrlIsNull_shouldCallAdDidFail() throws Exception
     }
 
     @Test
-    public void setAdContentView_whenCalledFromWrongUiThread_shouldStillSetContentView() throws Exception {
+    public void setAdContentView_whenCalledFromWrongUiThread_shouldStillSetContentView() {
         final View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
         subject.onAdLoadSuccess(response);
@@ -501,7 +503,7 @@ public void run() {
     }
 
     @Test
-    public void setAdContentView_whenCalledAfterCleanUp_shouldNotRemoveViewsAndAddView() throws Exception {
+    public void setAdContentView_whenCalledAfterCleanUp_shouldNotRemoveViewsAndAddView() {
         final View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
         subject.onAdLoadSuccess(response);
@@ -521,7 +523,7 @@ public void run() {
     }
 
     @Test
-    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() throws Exception {
+    public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSizeAndCenterView() {
         View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
         subject.onAdLoadSuccess(response);
@@ -539,7 +541,7 @@ public void setAdContentView_whenHonorServerDimensionsAndHasDimensions_shouldSiz
     }
 
     @Test
-    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() throws Exception {
+    public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_shouldWrapAndCenterView() {
         response = response.toBuilder().setDimensions(null, null).build();
         View view = mock(View.class);
         AdViewController.setShouldHonorServerDimensions(view);
@@ -558,7 +560,7 @@ public void setAdContentView_whenHonorServerDimensionsAndDoesntHaveDimensions_sh
     }
 
     @Test
-    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() throws Exception {
+    public void setAdContentView_whenNotServerDimensions_shouldWrapAndCenterView() {
         subject.onAdLoadSuccess(response);
         View view = mock(View.class);
 
@@ -661,7 +663,7 @@ public void onAdLoadError_withInvalidServerResponse_shouldReturnErrorCodeServerE
     }
 
     @Test
-    public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() throws Exception {
+    public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() {
         Map serverExtras = mock(Map.class);
         String customEventClassName = "customEventClassName";
         subject.loadCustomEvent(mockMoPubView, customEventClassName, serverExtras);
@@ -670,7 +672,7 @@ public void loadCustomEvent_shouldCallMoPubViewLoadCustomEvent() throws Exceptio
     }
 
     @Test
-    public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEvent() throws Exception {
+    public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEvent() {
         Map serverExtras = mock(Map.class);
         String customEventClassName = "customEventClassName";
         subject.loadCustomEvent(null, customEventClassName, serverExtras);
@@ -679,7 +681,7 @@ public void loadCustomEvent_withNullMoPubView_shouldNotCallMoPubViewLoadCustomEv
     }
 
     @Test
-    public void loadCustomEvent_withNullCustomEventClassName_shouldCallMoPubViewLoadCustomEvent() throws Exception {
+    public void loadCustomEvent_withNullCustomEventClassName_shouldCallMoPubViewLoadCustomEvent() {
         Map serverExtras = mock(Map.class);
         subject.loadCustomEvent(mockMoPubView, null, serverExtras);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index fb5944e3..d72b6499 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -116,6 +116,7 @@ public void setup() throws Exception {
                 .setAccessible()
                 .execute();
         MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder("adunit").build(), null);
+        Reflection.getPrivateField(MoPub.class, "sSdkInitialized").setBoolean(null, true);
 
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
         MoPubRewardedVideoManager.init(mActivity);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 45282c81..d0319029 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -277,6 +277,7 @@ public void generateAdUrl_shouldNotLocationFieldsWhenConsentIsFalse() throws Exc
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(
                 INIT_ADUNIT).withAdvancedBidder(WebViewAdvancedBidder.class).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
+        ShadowLooper.runUiThreadTasks();
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
                 .setAccessible()
@@ -321,6 +322,7 @@ public void generateAdUrl_withAdvancedBiddingDisabled_shouldNotIncludeAbt() thro
                 INIT_ADUNIT).withAdvancedBidder(
                 WebViewAdvancedBidder.class).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
+        ShadowLooper.runUiThreadTasks();
         MoPub.setAdvancedBiddingEnabled(false);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
@@ -345,6 +347,7 @@ public void generateAdUrl_withCollectUserDataDisabled_shouldNotIncludeKeywords()
         SdkConfiguration sdkConfiguration = new SdkConfiguration.Builder(INIT_ADUNIT)
                 .withAdvancedBidder(WebViewAdvancedBidder.class).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
+        ShadowLooper.runUiThreadTasks();
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
                 .setAccessible()
@@ -397,6 +400,7 @@ public void generateAdUrl_withAdvancedBiddingEnabled_shouldIncludeAbt() throws E
                 "b195f8dd8ded45fe847ad89ed1d016da").withAdvancedBidder(
                 WebViewAdvancedBidder.class).build();
         MoPub.initializeSdk(context, sdkConfiguration, null);
+        ShadowLooper.runUiThreadTasks();
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 31176dc6..1f50bb52 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -75,6 +75,7 @@ public void setup() throws Exception {
         AsyncTasks.setExecutor(new RoboExecutorService());
         MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit").build(), null);
         ShadowLooper.runUiThreadTasks();
+        Reflection.getPrivateField(MoPub.class, "sSdkInitialized").setBoolean(null, true);
 
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
diff --git a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
index 62337ce1..6b39aa35 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/PlayServicesUrlRewriterTest.java
@@ -55,7 +55,6 @@ public void setUp() throws Exception {
                 .execute();
 
         ClientMetadata.getInstance(context);
-        GpsHelper.setClassNamesForTesting();
         subject = new PlayServicesUrlRewriter();
     }
 
