diff --git a/CHANGELOG.md b/CHANGELOG.md
index ea2384c5..a5de7bb2 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,15 @@
+## Version 5.2.0 (July 9, 2018)
+- SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
+- `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
+- Bug fixes.
+
+## Version 5.1.0 (June 5, 2018)
+- Upgraded Moat dependency to 2.4.5.
+- Banners now only refresh after an impression is made.
+- Added `PersonalInfoManager.forceGdprApplies()` in order to let MoPub know that this app should always apply GDPR rules.
+- Loading MoPub's consent dialog is only possible when GDPR rules applies to the app.
+- Bug fixes.
+
 ## Version 5.0.0 (May 14, 2018)
 - General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
 - New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
diff --git a/README.md b/README.md
index 62e335df..9bc5b523 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        implementation('com.mopub:mopub-sdk:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk:5.2.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        implementation('com.mopub:mopub-sdk-banner:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:5.2.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        implementation('com.mopub:mopub-sdk-interstitial:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:5.2.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        implementation('com.mopub:mopub-sdk-rewardedvideo:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:5.2.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        implementation('com.mopub:mopub-sdk-native-static:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:5.2.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        implementation('com.mopub:mopub-sdk-native-video:5.0.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:5.2.0@aar') {
             transitive = true
         }
     }
@@ -109,11 +109,8 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- General Data Protection Regulation (GDPR) update to support a way for publishers to determine GDPR applicability and to obtain and manage consent from users in European Economic Area, the United Kingdom, or Switzerland to serve personalized ads.
-- New SDK initialization method to initialize consent management and rewarded video ad networks. Required for receiving personalized ads. In future versions of the SDK, initialization will be required to receive ads.
-- Updated network stack to MoPub-Volley-2.0.0.
-- Updated ad requests to use POST instead of GET.
-- All communication with MoPub servers is now made via HTTPS.
+- SDK initialization is required for ads to load. Ad requests will fail unless MoPub is initialized.
+- `MoPub#isSdkInitialized()` now more accurately reflects whether or not MoPub is initialized. This method now returns true after the `SdkInitializationListener#onInitializationFinished()` callback instead of immediately.
 
 ## Requirements
 
@@ -128,7 +125,7 @@ Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/mast
 
 Please see the [Getting Started Guide](https://developers.mopub.com/docs/android/getting-started/) for instructions on upgrading from SDK 4.X to SDK 5.0.
 
-For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr-guide/).
+For GDPR-specific upgrading instructions, also see the [GDPR Integration Guide](https://developers.mopub.com/docs/publisher/gdpr).
 
 ## <a name="upgradeRepositoryViewability"></a>Upgrading from 4.15.0 and Prior
 In 4.16.0, dependencies were added to viewability libraries provided by AVID and Moat. Apps upgrading from previous versions must add
@@ -142,7 +139,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    implementation('com.mopub:mopub-sdk:5.0.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
         transitive = true
     }
 }
@@ -151,7 +148,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
+    implementation('com.mopub:mopub-sdk:5.2.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index 4fcc6995..62e69f6b 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,6 +1,5 @@
 buildscript {
     repositories {
-        mavenCentral()
         jcenter()
         google()
     }
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 87e3681b..c3945025 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,8 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="59"
-      android:versionName="5.0.0">
+      android:versionCode="62"
+      android:versionName="5.2.0">
     <uses-sdk android:minSdkVersion="16"
               android:targetSdkVersion="26"/>
 
@@ -17,7 +17,7 @@
                  android:networkSecurityConfig="@xml/network_security_config">
 	    <activity android:name="com.mopub.simpleadsdemo.MoPubSampleActivity"
 	            android:label="@string/app_name"
-                android:launchMode="singleInstance"
+                android:launchMode="singleTask"
                 android:configChanges="orientation|screenSize">
 	        <intent-filter>
 	            <action android:name="android.intent.action.MAIN" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index ab305e15..37348eaa 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -1,17 +1,17 @@
 repositories {
+    google()
     jcenter()
     flatDir {
         dirs '../libs'
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
-    maven { url 'https://maven.google.com' }
 }
 
 apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '5.0.0'
+project.version = '5.2.0'
 
 android {
     compileSdkVersion 26
@@ -19,7 +19,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 59
+        versionCode 62
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sample/pom.xml b/mopub-sample/pom.xml
deleted file mode 100644
index 8a283c4d..00000000
--- a/mopub-sample/pom.xml
+++ /dev/null
@@ -1,103 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>mopub-sample</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>apk</packaging>
-    <name>MoPub Simple Ads Demo</name>
-    <description>Sample application that demonstrates how to use the MoPub SDK.</description>
-
-    <properties>
-        <robolectric.version>2.1</robolectric.version>
-    </properties>
-
-    <dependencies>
-
-        <!--main-->
-
-        <dependency>
-            <groupId>com.mopub.mobileads</groupId>
-            <artifactId>mopub-sdk</artifactId>
-            <version>1.0.0-SNAPSHOT</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-v4</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>recyclerview-v7</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-        
-        <dependency>
-            <groupId>com.google.android.gms</groupId>
-            <artifactId>play-services-ads</artifactId>
-            <version>7.0.0</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency> <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <!-- Skip tests. We use Gradle to build and run tests. -->
-                <executions>
-                    <execution>
-                        <id>default-testCompile</id>
-                        <phase>test-compile</phase>
-                        <goals>
-                            <goal>testCompile</goal>
-                        </goals>
-                        <configuration>
-                            <skip>true</skip>
-                        </configuration>
-                    </execution>
-                </executions>
-                <configuration>
-                    <source>7</source>
-                    <target>7</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
index 28dd1893..c7cad1ac 100644
--- a/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
+++ b/mopub-sample/src/main/java/com/mopub/simpleadsdemo/LoggingUtils.java
@@ -34,6 +34,7 @@ static void enableCanaryLogging(@NonNull final Context context) {
         }
 
         final Handler handler = new SampleAppLogHandler(context.getApplicationContext());
+        MoPubLog.c("Setting up MoPubLog");
         final Logger logger = getLogger();
         logger.addHandler(handler);
 
diff --git a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
index 6faa4eab..3e785403 100644
--- a/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
+++ b/mopub-sdk/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Mon Jun 20 17:19:29 PDT 2016
+#Mon Nov 13 15:46:01 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 9b5eb50f..5b24ec80 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -40,7 +40,6 @@
 
     private final Handler mHandler;
     private final Runnable mTimeout;
-    private boolean mStoredAutorefresh;
 
     private int mImpressionMinVisibleDips = Integer.MIN_VALUE;
     private int mImpressionMinVisibleMs = Integer.MIN_VALUE;
@@ -226,6 +225,8 @@ public void onBannerLoaded(View bannerView) {
             // Else, retain old behavior of firing AdServer impression tracking URL if and only if
             // banner is not HTML.
             if (mIsVisibilityImpressionTrackingEnabled) {
+                // Disable autorefresh temporarily until an impression happens.
+                mMoPubView.pauseAutorefresh();
                 // Set up visibility tracker and listener if in experiment
                 mVisibilityTracker = new BannerVisibilityTracker(mContext, mMoPubView, bannerView,
                         mImpressionMinVisibleDips, mImpressionMinVisibleMs);
@@ -237,6 +238,7 @@ public void onVisibilityChanged() {
                         if (mCustomEventBanner != null) {
                             mCustomEventBanner.trackMpxAndThirdPartyImpressions();
                         }
+                        mMoPubView.resumeAutorefresh();
                     }
                 });
             }
@@ -273,8 +275,7 @@ public void onBannerExpanded() {
             return;
         }
 
-        mStoredAutorefresh = mMoPubView.getAutorefreshEnabled();
-        mMoPubView.setAutorefreshEnabled(false);
+        mMoPubView.expand();
         mMoPubView.adPresentedOverlay();
     }
 
@@ -284,7 +285,7 @@ public void onBannerCollapsed() {
             return;
         }
 
-        mMoPubView.setAutorefreshEnabled(mStoredAutorefresh);
+        mMoPubView.collapse();
         mMoPubView.adClosed();
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index 17217bb5..400d6467 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -12,11 +12,11 @@ dependencies {
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
-        compile('com.mopub:libAvid-mopub:3.6.4')
+        implementation('com.mopub:libAvid-mopub:3.6.4')
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.1'
+        implementation 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.5'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
index 8b4c4b0a..a4e42464 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AdUrlGenerator.java
@@ -109,14 +109,6 @@
      */
     private static final String ADVANCED_BIDDING_TOKENS_KEY = "abt";
 
-    private static final String GDPR_APPLIES = "gdpr_applies";
-
-    private static final String CURRENT_CONSENT_STATUS = "current_consent_status";
-
-    private static final String CONSENTED_PRIVACY_POLICY_VERSION = "consented_privacy_policy_version";
-
-    private static final String CONSENTED_VENDOR_LIST_VERSION = "consented_vendor_list_version";
-
     protected Context mContext;
     protected String mAdUnitId;
     protected String mKeywords;
@@ -124,6 +116,7 @@
     protected Location mLocation;
     @Nullable private final PersonalInfoManager mPersonalInfoManager;
     @Nullable private final ConsentData mConsentData;
+    protected Boolean mForceGdprApplies;
 
     public AdUrlGenerator(Context context) {
         mContext = context;
@@ -269,23 +262,29 @@ protected void setGdprApplies() {
         }
     }
 
+    protected void setForceGdprApplies() {
+        if (mConsentData != null) {
+            addParam(FORCE_GDPR_APPLIES, mConsentData.isForceGdprApplies());
+        }
+    }
+
     protected void setCurrentConsentStatus() {
         if (mPersonalInfoManager != null) {
-            addParam(CURRENT_CONSENT_STATUS, mPersonalInfoManager.getPersonalInfoConsentStatus()
+            addParam(CURRENT_CONSENT_STATUS_KEY, mPersonalInfoManager.getPersonalInfoConsentStatus()
                     .getValue());
         }
     }
 
     protected void setConsentedPrivacyPolicyVersion() {
         if (mConsentData != null) {
-            addParam(CONSENTED_PRIVACY_POLICY_VERSION,
+            addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY,
                     mConsentData.getConsentedPrivacyPolicyVersion());
         }
     }
 
     protected void setConsentedVendorListVersion() {
         if (mConsentData != null) {
-            addParam(CONSENTED_VENDOR_LIST_VERSION, mConsentData.getConsentedVendorListVersion());
+            addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentData.getConsentedVendorListVersion());
         }
     }
 
@@ -328,6 +327,8 @@ protected void addBaseParams(final ClientMetadata clientMetadata) {
 
         setGdprApplies();
 
+        setForceGdprApplies();
+
         setCurrentConsentStatus();
 
         setConsentedPrivacyPolicyVersion();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
index 7fe99df6..45b8b764 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/BaseUrlGenerator.java
@@ -56,6 +56,11 @@
      */
     protected static final String GDPR_APPLIES = "gdpr_applies";
 
+    /**
+     * "1" if the publisher has forced GDPR rules to apply to this app. "0" if this is not set.
+     */
+    protected static final String FORCE_GDPR_APPLIES = "force_gdpr_applies";
+
     private static final String WIDTH_KEY = "w";
     private static final String HEIGHT_KEY = "h";
 
@@ -130,16 +135,6 @@ protected void setDeviceInfo(String... info) {
         addParam("dn", result.toString());
     }
 
-    protected void setDoNotTrack(boolean dnt) {
-        if (dnt) {
-            addParam(DNT_KEY, "1");
-        }
-    }
-
-    protected void setUdid(String udid) {
-        addParam(UDID_KEY, udid);
-    }
-
     /**
      * Appends special keys/values for advertising id and do-not-track. PlayServicesUrlRewriter will
      * replace these templates with the correct values when the request is processed.
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
index 010d8b59..0cd8abe8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ClientMetadata.java
@@ -1,5 +1,6 @@
 package com.mopub.common;
 
+import android.annotation.SuppressLint;
 import android.content.Context;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageInfo;
@@ -7,6 +8,8 @@
 import android.content.res.Configuration;
 import android.graphics.Point;
 import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkCapabilities;
 import android.net.NetworkInfo;
 import android.os.Build;
 import android.support.annotation.NonNull;
@@ -27,17 +30,14 @@
  * Singleton that caches Client objects so they will be available to background threads.
  */
 public class ClientMetadata {
-    // Network type constant defined after API 9:
-    private static final int TYPE_ETHERNET = 9;
 
     private static final String DEVICE_ORIENTATION_PORTRAIT = "p";
     private static final String DEVICE_ORIENTATION_LANDSCAPE = "l";
     private static final String DEVICE_ORIENTATION_SQUARE = "s";
     private static final String DEVICE_ORIENTATION_UNKNOWN = "u";
-    private static final int UNKNOWN_NETWORK = -1;
 
     private String mNetworkOperatorForUrl;
-    private final String mNetworkOperator;
+    private String mNetworkOperator;
     private String mSimOperator;
     private String mIsoCountryCode;
     private String mSimIsoCountryCode;
@@ -47,11 +47,17 @@
     @NonNull
     private final MoPubIdentifier moPubIdentifier;
 
+    /**
+     * MoPubNetworkType - network connection type enumeration
+     */
     public enum MoPubNetworkType {
         UNKNOWN(0),
         ETHERNET(1),
         WIFI(2),
-        MOBILE(3);
+        MOBILE(3),
+        GG(4),      // connected to 2G network
+        GGG(5),     // connected to 3G network
+        GGGG(6);    // connected to 4G network
 
         private final int mId;
         MoPubNetworkType(int id) {
@@ -63,23 +69,6 @@ public String toString() {
             return Integer.toString(mId);
         }
 
-        private static MoPubNetworkType fromAndroidNetworkType(int type) {
-            switch(type) {
-                case TYPE_ETHERNET:
-                    return ETHERNET;
-                case ConnectivityManager.TYPE_WIFI:
-                    return WIFI;
-                case ConnectivityManager.TYPE_MOBILE:
-                case ConnectivityManager.TYPE_MOBILE_DUN:
-                case ConnectivityManager.TYPE_MOBILE_HIPRI:
-                case ConnectivityManager.TYPE_MOBILE_MMS:
-                case ConnectivityManager.TYPE_MOBILE_SUPL:
-                    return MOBILE;
-                default:
-                    return UNKNOWN;
-            }
-        }
-
         public int getId() {
             return mId;
         }
@@ -164,33 +153,34 @@ public ClientMetadata(Context context) {
 
         final TelephonyManager telephonyManager =
                 (TelephonyManager) mContext.getSystemService(Context.TELEPHONY_SERVICE);
-        mNetworkOperatorForUrl = telephonyManager.getNetworkOperator();
-        mNetworkOperator = telephonyManager.getNetworkOperator();
-        if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
-                telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-            mNetworkOperatorForUrl = telephonyManager.getSimOperator();
-            mSimOperator = telephonyManager.getSimOperator();
-        }
+        if(telephonyManager!=null) {
+            mNetworkOperatorForUrl = telephonyManager.getNetworkOperator();
+            mNetworkOperator = telephonyManager.getNetworkOperator();
+            if (telephonyManager.getPhoneType() == TelephonyManager.PHONE_TYPE_CDMA &&
+                    telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                mNetworkOperatorForUrl = telephonyManager.getSimOperator();
+                mSimOperator = telephonyManager.getSimOperator();
+            }
 
-        if (MoPub.canCollectPersonalInformation()) {
-            mIsoCountryCode = telephonyManager.getNetworkCountryIso();
-            mSimIsoCountryCode = telephonyManager.getSimCountryIso();
-        } else {
-            mIsoCountryCode = "";
-            mSimIsoCountryCode = "";
-        }
+            if (MoPub.canCollectPersonalInformation()) {
+                mIsoCountryCode = telephonyManager.getNetworkCountryIso();
+                mSimIsoCountryCode = telephonyManager.getSimCountryIso();
+            } else {
+                mIsoCountryCode = "";
+                mSimIsoCountryCode = "";
+            }
 
-        try {
-            // Some Lenovo devices require READ_PHONE_STATE here.
-            mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
-            if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
-                mSimOperatorName = telephonyManager.getSimOperatorName();
+            try {
+                // Some Lenovo devices require READ_PHONE_STATE here.
+                mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
+                if (telephonyManager.getSimState() == TelephonyManager.SIM_STATE_READY) {
+                    mSimOperatorName = telephonyManager.getSimOperatorName();
+                }
+            } catch (SecurityException e) {
+                mNetworkOperatorName = null;
+                mSimOperatorName = null;
             }
-        } catch (SecurityException e) {
-            mNetworkOperatorName = null;
-            mSimOperatorName = null;
         }
-
         moPubIdentifier = new MoPubIdentifier(mContext);
     }
 
@@ -231,17 +221,64 @@ public String getOrientationString() {
         return orientation;
     }
 
-
+    @SuppressLint("MissingPermission")
     public MoPubNetworkType getActiveNetworkType() {
-        int networkType = UNKNOWN_NETWORK;
-        if (DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
-            NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
-            networkType = activeNetworkInfo != null
-                    ? activeNetworkInfo.getType() : UNKNOWN_NETWORK;
+        if (!DeviceUtils.isPermissionGranted(mContext, ACCESS_NETWORK_STATE)) {
+            return MoPubNetworkType.UNKNOWN;
+        }
+
+        NetworkInfo activeNetworkInfo = mConnectivityManager.getActiveNetworkInfo();
+        if (activeNetworkInfo == null || !activeNetworkInfo.isConnected()) {
+            return MoPubNetworkType.UNKNOWN;
+        }
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+            if (activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET) {
+                return MoPubNetworkType.ETHERNET;
+            }
+        } else {
+            Network[] networks = mConnectivityManager.getAllNetworks();
+            for (Network network : networks) {
+                NetworkCapabilities capabilities = mConnectivityManager.getNetworkCapabilities(network);
+                if (capabilities != null && capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET))
+                    return MoPubNetworkType.ETHERNET;
+            }
+        }
+
+        NetworkInfo networkInfo = mConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
+        if (networkInfo != null && networkInfo.isConnected()) {
+            return MoPubNetworkType.WIFI;
+        }
+
+        networkInfo = mConnectivityManager.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
+        if (networkInfo != null && networkInfo.isConnected()) {
+            int netType = networkInfo.getSubtype();
+            switch (netType) {
+                case TelephonyManager.NETWORK_TYPE_GPRS:
+                case TelephonyManager.NETWORK_TYPE_EDGE:
+                case TelephonyManager.NETWORK_TYPE_CDMA:
+                case TelephonyManager.NETWORK_TYPE_1xRTT:
+                case TelephonyManager.NETWORK_TYPE_IDEN:
+                    return MoPubNetworkType.GG; // 2G
+                case TelephonyManager.NETWORK_TYPE_UMTS:
+                case TelephonyManager.NETWORK_TYPE_EVDO_0:
+                case TelephonyManager.NETWORK_TYPE_EVDO_A:
+                case TelephonyManager.NETWORK_TYPE_HSDPA:
+                case TelephonyManager.NETWORK_TYPE_HSUPA:
+                case TelephonyManager.NETWORK_TYPE_HSPA:
+                case TelephonyManager.NETWORK_TYPE_EVDO_B:
+                case TelephonyManager.NETWORK_TYPE_EHRPD:
+                    return MoPubNetworkType.GGG; // 3G
+                case TelephonyManager.NETWORK_TYPE_HSPAP:
+                case TelephonyManager.NETWORK_TYPE_LTE:
+                    return MoPubNetworkType.GGGG; // 4G
+                default:
+                    return MoPubNetworkType.MOBILE;
+            }
         }
-        return MoPubNetworkType.fromAndroidNetworkType(networkType);
-    }
 
+        return MoPubNetworkType.UNKNOWN;
+    }
 
     /**
      * Get the logical density of the display as in {@link android.util.DisplayMetrics#density}
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index ffeabcf0..bf9f691f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -2,14 +2,13 @@
 
 import android.app.Activity;
 import android.content.Context;
+import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.PersonalInfoManager;
-import com.mopub.common.util.ManifestUtils;
 import com.mopub.common.util.Reflection;
-import com.mopub.mobileads.MoPubConversionTracker;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
@@ -17,7 +16,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "5.0.0";
+    public static final String SDK_VERSION = "5.2.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
@@ -69,6 +68,7 @@ public static BrowserAgent fromHeader(@Nullable final Integer browserAgent) {
     @Nullable private static Method sUpdateActivityMethod;
     private static boolean sAdvancedBiddingEnabled = true;
     private static boolean sSdkInitialized = false;
+    private static boolean sSdkInitializing = false;
     private static AdvancedBiddingTokens sAdvancedBiddingTokens;
     private static PersonalInfoManager sPersonalInfoManager;
 
@@ -157,7 +157,7 @@ public static void initializeSdk(@NonNull final Context context,
         Preconditions.checkNotNull(sdkConfiguration);
 
         // This also initializes MoPubLog
-        MoPubLog.d("Initializing MoPub");
+        MoPubLog.d("Initializing MoPub with ad unit: " + sdkConfiguration.getAdUnitId());
 
         if (context instanceof Activity && Reflection.classFound(MOPUB_REWARDED_VIDEO_MANAGER)) {
             final Activity activity = (Activity) context;
@@ -168,16 +168,31 @@ public static void initializeSdk(@NonNull final Context context,
             MoPubLog.d("MoPub SDK is already initialized");
             return;
         }
-        sSdkInitialized = true;
+        if (sSdkInitializing) {
+            MoPubLog.d("MoPub SDK is currently initializing.");
+            return;
+        }
 
-        final SdkInitializationListener compositeSdkInitializationListener;
-        if (sdkInitializationListener == null) {
-            compositeSdkInitializationListener = null;
-        } else {
-            compositeSdkInitializationListener = new CompositeSdkInitializationListener(
-                    sdkInitializationListener, 2);
+        if (Looper.getMainLooper() != Looper.myLooper()) {
+            MoPubLog.e("MoPub can only be initialized on the main thread.");
+            return;
         }
 
+        sSdkInitializing = true;
+
+        final SdkInitializationListener internalSdkInitializationListener = new SdkInitializationListener() {
+            @Override
+            public void onInitializationFinished() {
+                sSdkInitializing = false;
+                sSdkInitialized = true;
+                if (sdkInitializationListener != null) {
+                    sdkInitializationListener.onInitializationFinished();
+                }
+            }
+        };
+        final SdkInitializationListener compositeSdkInitializationListener =
+                new CompositeSdkInitializationListener(internalSdkInitializationListener, 2);
+
         sPersonalInfoManager = new PersonalInfoManager(context, sdkConfiguration.getAdUnitId(),
                 compositeSdkInitializationListener);
 
@@ -185,8 +200,6 @@ public static void initializeSdk(@NonNull final Context context,
 
         sAdvancedBiddingTokens = new AdvancedBiddingTokens(compositeSdkInitializationListener);
         sAdvancedBiddingTokens.addAdvancedBidders(sdkConfiguration.getAdvancedBidders());
-
-        ManifestUtils.checkSdkActivitiesDeclared(context);
     }
 
     /**
@@ -335,7 +348,6 @@ static void clearAdvancedBidders() {
         sAdvancedBiddingTokens = null;
         sPersonalInfoManager = null;
         sSdkInitialized = false;
-        sPersonalInfoManager = null;
     }
 
     @Deprecated
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
index 10a5aa81..eab380af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/AdvertisingId.java
@@ -42,8 +42,8 @@
                   @NonNull String mopubId,
                   boolean limitAdTrackingEnabled,
                   long rotationTime) {
-        Preconditions.NoThrow.checkNotNull(ifaId);
-        Preconditions.NoThrow.checkNotNull(ifaId);
+        Preconditions.checkNotNull(ifaId);
+        Preconditions.checkNotNull(ifaId);
 
         mAdvertisingId = ifaId;
         mMopubId = mopubId;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
index cb958630..df1509ab 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentData.java
@@ -8,33 +8,78 @@
  * privacy policies.
  */
 public interface ConsentData {
+    /**
+     * Returns the current vendor list version.
+     */
     @Nullable
     String getCurrentVendorListVersion();
 
+    /**
+     * Returns a link for the current vendor list with the system default language.
+     */
     @NonNull
     String getCurrentVendorListLink();
 
+    /**
+     * Returns a link for the current vendor list in a specific language. If the language is not a
+     * valid language, this will return the link with the system default language.
+     *
+     * @param language ISO 639-1 2-letter language code
+     */
     @NonNull
     String getCurrentVendorListLink(@Nullable final String language);
 
+    /**
+     * Returns the current privacy policy version.
+     */
     @Nullable
     String getCurrentPrivacyPolicyVersion();
 
+    /**
+     * Returns a link for the current privacy policy with the system default language.
+     */
     @NonNull
     String getCurrentPrivacyPolicyLink();
 
+    /**
+     * Returns a link for the current privacy policy in a specific language. If the language is not
+     * a valid language, this will return the link with the system default language.
+     *
+     * @param language ISO 639-1 2-letter language code
+     */
     @NonNull
     String getCurrentPrivacyPolicyLink(@Nullable final String language);
 
+    /**
+     * Returns the current vendor list in IAB's global vendor list format.
+     */
     @Nullable
     String getCurrentVendorListIabFormat();
 
+    /**
+     * Returns the version of the privacy policy that the user has consented to.
+     */
     @Nullable
     String getConsentedPrivacyPolicyVersion();
 
+    /**
+     * Returns the version of the vendor list that the user has consented to.
+     */
     @Nullable
     String getConsentedVendorListVersion();
 
+    /**
+     * Returns the consented vendor list in IAB's global vendor list format.
+     */
     @Nullable
     String getConsentedVendorListIabFormat();
+
+    /**
+     * Whether GDPR rules have been forced to apply by either the publisher or by MoPub. In
+     * general, publishers should not need to directly access this.
+     *
+     * @return True means GDPR rules will be applied, false means respect MoPub's geofencing when
+     * determining whether or not GDPR rules apply.
+     */
+    boolean isForceGdprApplies();
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
index 2e1d2f2f..9888af19 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogActivity.java
@@ -23,18 +23,17 @@
     private static final String KEY_HTML_PAGE = "html-page-content";
 
     @Nullable
-    private ConsentDialogLayout mView;
+    ConsentDialogLayout mView;
     @Nullable
     private Runnable mEnableCloseButtonRunnable;
     @Nullable
-    private Handler mCloseButtonHandler;
+    Handler mCloseButtonHandler;
 
     @Nullable
-    private ConsentStatus mConsentStatus;
+    ConsentStatus mConsentStatus;
 
     static void start(@NonNull final Context context, @NonNull String htmlData) {
         Preconditions.checkNotNull(context);
-        Preconditions.checkNotNull(htmlData);
 
         if (TextUtils.isEmpty(htmlData)) {
             MoPubLog.e("ConsentDialogActivity htmlData can't be empty string.");
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
index e7051f94..d8b34bc8 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogController.java
@@ -20,8 +20,8 @@
 
     @Nullable private String mHtmlBody;
     @Nullable private ConsentDialogListener mExtListener;
-    private boolean mReady;
-    private boolean mRequestInFlight;
+    volatile boolean mReady;
+    volatile boolean mRequestInFlight;
     private final Handler mHandler;
 
     ConsentDialogController(@NonNull final Context appContext) {
@@ -57,22 +57,24 @@ public void onErrorResponse(final VolleyError volleyError) {
         if (loadListener == null) {
             return;
         }
+
         if (volleyError instanceof MoPubNetworkError) {
             switch(((MoPubNetworkError) volleyError).getReason()) {
                 case BAD_BODY:
                     loadListener.onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
-                    break;
+                    return;
                 default:
-                    loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
                     break;
             }
         }
-    }
 
-    void loadConsentDialog(@Nullable final ConsentDialogListener listener,
-            @NonNull final String adUnitId) {
-        Preconditions.checkNotNull(adUnitId);
+        loadListener.onConsentDialogLoadFailed(MoPubErrorCode.UNSPECIFIED);
+    }
 
+    synchronized void loadConsentDialog(@Nullable final ConsentDialogListener listener,
+            @Nullable final Boolean gdprApplies,
+            @NonNull final PersonalInfoData personalInfoData) {
+        Preconditions.checkNotNull(personalInfoData);
 
         if (mReady) {
             if (listener != null) {
@@ -89,12 +91,16 @@ public void run() {
             return;
         }
 
-
         mExtListener = listener;
         mRequestInFlight = true;
 
         ConsentDialogRequest consentDialogRequest = new ConsentDialogRequest(mAppContext,
-                new ConsentDialogUrlGenerator(mAppContext, adUnitId)
+                new ConsentDialogUrlGenerator(mAppContext, personalInfoData.getAdUnitId(),
+                        personalInfoData.getConsentStatus().getValue())
+                        .withGdprApplies(gdprApplies)
+                        .withConsentedPrivacyPolicyVersion(personalInfoData.getConsentedPrivacyPolicyVersion())
+                        .withConsentedVendorListVersion(personalInfoData.getConsentedVendorListVersion())
+                        .withForceGdprApplies(personalInfoData.isForceGdprApplies())
                         .generateUrlString(Constants.HOST), this);
         Networking.getRequestQueue(mAppContext).add(consentDialogRequest);
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
index 93eb62df..a19bb3ff 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/ConsentDialogUrlGenerator.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import com.mopub.common.BaseUrlGenerator;
 import com.mopub.common.ClientMetadata;
@@ -20,14 +21,48 @@
     private final Context mContext;
     @NonNull
     private final String mAdUnitId;
+    @NonNull
+    private final String mCurrentConsentStatus;
+    @Nullable
+    private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
+    @Nullable
+    private String mConsentedVendorListVersion;
+    @Nullable
+    private String mConsentedPrivacyPolicyVersion;
 
     ConsentDialogUrlGenerator(@NonNull final Context context,
-                              @NonNull final String adUnitId) {
+            @NonNull final String adUnitId,
+            @NonNull final String currentConsentStatus) {
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(adUnitId);
+        Preconditions.checkNotNull(currentConsentStatus);
 
         mContext = context.getApplicationContext();
         mAdUnitId = adUnitId;
+        mCurrentConsentStatus = currentConsentStatus;
+    }
+
+    protected ConsentDialogUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
+        mGdprApplies = gdprApplies;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withConsentedVendorListVersion(
+            @Nullable final String consentedVendorListVersion) {
+        mConsentedVendorListVersion = consentedVendorListVersion;
+        return this;
+    }
+
+    protected ConsentDialogUrlGenerator withConsentedPrivacyPolicyVersion(
+            @Nullable final String consentedPrivacyPolicyVersion) {
+        mConsentedPrivacyPolicyVersion = consentedPrivacyPolicyVersion;
+        return this;
     }
 
     @Override
@@ -35,8 +70,15 @@ public String generateUrlString(String serverHostname) {
         initUrlString(serverHostname, GDPR_CONSENT_HANDLER);
 
         addParam(AD_UNIT_ID_KEY, mAdUnitId);
+        addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
         addParam(SDK_VERSION_KEY, MoPub.SDK_VERSION);
         addParam(LANGUAGE_KEY, ClientMetadata.getCurrentLanguage(mContext));
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
+        addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
+        addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
+        addParam(BUNDLE_ID_KEY, ClientMetadata.getInstance(mContext).getAppPackageName());
+
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
index 5984a3bd..c2ffb928 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/MoPubIdentifier.java
@@ -33,6 +33,7 @@
 
     @NonNull
     private AdvertisingId mAdInfo;
+
     @NonNull
     private final Context mAppContext;
 
@@ -42,6 +43,7 @@
     private boolean mRefreshingAdvertisingInfo;
 
     private boolean initialized;
+
     @Nullable
     private SdkInitializationListener mInitializationListener;
 
@@ -51,8 +53,8 @@ public MoPubIdentifier(@NonNull final Context appContext) {
 
     @VisibleForTesting
     MoPubIdentifier(@NonNull final Context appContext,
-            @Nullable final AdvertisingIdChangeListener idChangeListener) {
-        Preconditions.NoThrow.checkNotNull(appContext);
+                    @Nullable final AdvertisingIdChangeListener idChangeListener) {
+        Preconditions.checkNotNull(appContext);
 
         mAppContext = appContext;
         mIdChangeListener = idChangeListener;
@@ -90,22 +92,24 @@ void refreshAdvertisingInfoBackgroundThread() {
         // try google
         if (isPlayServicesAvailable()) {
             GpsHelper.AdvertisingInfo info = GpsHelper.fetchAdvertisingInfoSync(mAppContext);
-            if (info != null) {
+            if (info != null && !TextUtils.isEmpty(info.advertisingId)) {
                 final AdvertisingId oldId = mAdInfo;
-                if (info.limitAdTracking && oldId.isRotationRequired()) {
+                if (oldId.isRotationRequired()) {
                     setAdvertisingInfo(info.advertisingId, AdvertisingId.generateIdString(), info.limitAdTracking, time);
                 } else {
                     setAdvertisingInfo(info.advertisingId, oldId.mMopubId, info.limitAdTracking, oldId.mLastRotation.getTimeInMillis());
                 }
                 return;
+            } else {
+                MoPubLog.w("Call to 'getAdvertisingIdInfo' returned invalid value.");
             }
         }
 
         // try amazon
         final AdvertisingId info = getAmazonAdvertisingInfo(mAppContext);
-        if (info != null) {
+        if (info != null && !TextUtils.isEmpty(info.mAdvertisingId)) {
             final AdvertisingId oldId = mAdInfo;
-            if (info.isDoNotTrack() && oldId.isRotationRequired()) {
+            if (oldId.isRotationRequired()) {
                 setAdvertisingInfo(info.mAdvertisingId, AdvertisingId.generateIdString(), info.mDoNotTrack, time);
             } else {
                 setAdvertisingInfo(info.mAdvertisingId, oldId.mMopubId, info.mDoNotTrack, oldId.mLastRotation.getTimeInMillis());
@@ -118,7 +122,7 @@ void refreshAdvertisingInfoBackgroundThread() {
     }
 
     @Nullable
-    private static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appContext) {
+    static synchronized AdvertisingId readIdFromStorage(@NonNull final Context appContext) {
         Preconditions.checkNotNull(appContext);
 
         Calendar now = Calendar.getInstance();
@@ -163,7 +167,7 @@ static synchronized void clearStorage(@NonNull final Context context) {
         editor.apply();
     }
 
-    private void rotateMopubId() {
+    void rotateMopubId() {
         if (!mAdInfo.isRotationRequired()) {
             setAdvertisingInfo(mAdInfo);
             return;
@@ -173,13 +177,13 @@ private void rotateMopubId() {
     }
 
     private void setAdvertisingInfo(@NonNull String advertisingId, @NonNull String mopubId, boolean limitAdTracking, long rotationTime) {
-        Preconditions.NoThrow.checkNotNull(advertisingId);
-        Preconditions.NoThrow.checkNotNull(mopubId);
+        Preconditions.checkNotNull(advertisingId);
+        Preconditions.checkNotNull(mopubId);
 
         setAdvertisingInfo(new AdvertisingId(advertisingId, mopubId, limitAdTracking, rotationTime));
     }
 
-    private void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
+    void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
         AdvertisingId oldId = mAdInfo;
         mAdInfo = newId;
         writeIdToStorage(mAppContext, mAdInfo);
@@ -187,10 +191,9 @@ private void setAdvertisingInfo(@NonNull final AdvertisingId newId) {
         if (!mAdInfo.equals(oldId) || !initialized) {
             notifyIdChangeListener(oldId, mAdInfo);
         }
+        initialized = true;
 
-        if (!initialized) {
-            reportInitializationComplete();
-        }
+        reportInitializationComplete();
     }
 
     /**
@@ -213,7 +216,6 @@ private void reportInitializationComplete() {
             mInitializationListener.onInitializationFinished();
             mInitializationListener = null;
         }
-        initialized = true;
     }
 
     private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull final AdvertisingId newId) {
@@ -224,7 +226,7 @@ private void notifyIdChangeListener(@NonNull final AdvertisingId oldId, @NonNull
         }
     }
 
-    private boolean isPlayServicesAvailable() {
+    boolean isPlayServicesAvailable() {
         return GpsHelper.isPlayServicesAvailable(mAppContext);
     }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
index 4def20e6..7960e5f2 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoData.java
@@ -35,6 +35,7 @@
     private static final String CONSENT_CHANGE_REASON_SP_KEY = PERSONAL_INFO_PREFIX + "consent_change_reason";
     private static final String REACQUIRE_CONSENT_SP_KEY = PERSONAL_INFO_PREFIX + "reacquire_consent";
     private static final String GDPR_APPLIES_SP_KEY = PERSONAL_INFO_PREFIX + "gdpr_applies";
+    private static final String FORCE_GDPR_APPLIES_SP_KEY = PERSONAL_INFO_PREFIX + "force_gdpr_applies";
     private static final String UDID_SP_KEY = PERSONAL_INFO_PREFIX + "udid";
     private static final String LAST_CHANGED_MS_SP_KEY = PERSONAL_INFO_PREFIX + "last_changed_ms";
     private static final String CONSENT_STATUS_BEFORE_DNT_SP_KEY = PERSONAL_INFO_PREFIX + "consent_status_before_dnt";
@@ -51,6 +52,7 @@
     @NonNull private ConsentStatus mConsentStatus;
     @Nullable private ConsentStatus mLastSuccessfullySyncedConsentStatus;
     @Nullable private String mConsentChangeReason;
+    private boolean mForceGdprApplies;
     @Nullable private String mUdid;
     @Nullable private String mLastChangedMs;
     @Nullable private ConsentStatus mConsentStatusBeforeDnt;
@@ -121,6 +123,7 @@ private void getStateFromDisk() {
         } else {
             mGdprApplies = Boolean.parseBoolean(gdprAppliesString);
         }
+        mForceGdprApplies = sharedPreferences.getBoolean(FORCE_GDPR_APPLIES_SP_KEY, false);
         mUdid = sharedPreferences.getString(UDID_SP_KEY, null);
         mLastChangedMs = sharedPreferences.getString(LAST_CHANGED_MS_SP_KEY, null);
         final String consentStatusBeforeDnt = sharedPreferences.getString(
@@ -154,6 +157,7 @@ void writeToDisk() {
         editor.putBoolean(REACQUIRE_CONSENT_SP_KEY, mReacquireConsent);
         editor.putString(GDPR_APPLIES_SP_KEY,
                 mGdprApplies == null ? null : mGdprApplies.toString());
+        editor.putBoolean(FORCE_GDPR_APPLIES_SP_KEY, mForceGdprApplies);
         editor.putString(UDID_SP_KEY, mUdid);
         editor.putString(LAST_CHANGED_MS_SP_KEY, mLastChangedMs);
         editor.putString(CONSENT_STATUS_BEFORE_DNT_SP_KEY,
@@ -319,10 +323,18 @@ Boolean getGdprApplies() {
         return mGdprApplies;
     }
 
-    void setGdprApplies(final boolean gdprApplies) {
+    void setGdprApplies(@Nullable final Boolean gdprApplies) {
         mGdprApplies = gdprApplies;
     }
 
+    public boolean isForceGdprApplies() {
+        return mForceGdprApplies;
+    }
+
+    void setForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+    }
+
     @Nullable
     String getUdid() {
         return mUdid;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
index d047a189..67ff4c0a 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PersonalInfoManager.java
@@ -15,8 +15,10 @@
 import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
+import com.mopub.common.util.ManifestUtils;
 import com.mopub.mobileads.MoPubConversionTracker;
 import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.AdRequest;
 import com.mopub.network.MoPubNetworkError;
 import com.mopub.network.Networking;
 import com.mopub.volley.VolleyError;
@@ -30,7 +32,7 @@
  * The manager handling personal information. If the user is in a GDPR region, MoPub must get
  * user consent to handle and store user data.
  */
-public class PersonalInfoManager implements SyncRequest.Listener {
+public class PersonalInfoManager {
 
     /**
      * Default minimum sync delay of 5 minutes.
@@ -42,6 +44,8 @@
     @NonNull private final PersonalInfoData mPersonalInfoData;
     @NonNull private final ConsentDialogController mConsentDialogController;
     @NonNull private final MoPubConversionTracker mConversionTracker;
+    @NonNull private final SyncRequest.Listener mSyncRequestListener;
+    @NonNull private AdRequest.ServerOverrideListener mServerOverrideListener;
     @Nullable private SdkInitializationListener mSdkInitializationListener;
 
     private long mSyncDelayMs = MINIMUM_SYNC_DELAY;
@@ -49,6 +53,8 @@
     @Nullable private ConsentStatus mSyncRequestConsentStatus;
     private long mSyncRequestEpochTime;
     private boolean mSyncRequestInFlight;
+    private boolean mForceGdprAppliesChanged;
+    private boolean mForceGdprAppliesChangedSending;
 
     public PersonalInfoManager(@NonNull final Context context, @NonNull final String adUnitId,
             @Nullable SdkInitializationListener sdkInitializationListener) {
@@ -58,6 +64,9 @@ public PersonalInfoManager(@NonNull final Context context, @NonNull final String
         mAppContext = context.getApplicationContext();
         mConsentStatusChangeListeners = Collections.synchronizedSet(
                 new HashSet<ConsentStatusChangeListener>());
+        mSyncRequestListener = new PersonalInfoSyncRequestListener();
+        mServerOverrideListener = new PersonalInfoServerOverrideListener();
+        AdRequest.setServerOverrideListener(mServerOverrideListener);
 
         mConsentDialogController = new ConsentDialogController(mAppContext);
 
@@ -106,7 +115,8 @@ public void onIdChanged(@NonNull final AdvertisingId oldId,
                 };
         mSdkInitializationListener = sdkInitializationListener;
 
-        final MoPubIdentifier moPubIdentifier = ClientMetadata.getInstance(mAppContext).getMoPubIdentifier();
+        final MoPubIdentifier moPubIdentifier = ClientMetadata.getInstance(
+                mAppContext).getMoPubIdentifier();
         moPubIdentifier.setIdChangeListener(advertisingIdChangeListener);
         moPubIdentifier.setInitializationListener(createInitializationListener());
     }
@@ -151,6 +161,8 @@ public boolean isConsentDialogReady() {
      */
     public void loadConsentDialog(
             @Nullable final ConsentDialogListener consentDialogListener) {
+        ManifestUtils.checkGdprActivitiesDeclared(mAppContext);
+
         if (ClientMetadata.getInstance(
                 mAppContext).getMoPubIdentifier().getAdvertisingInfo().isDoNotTrack()) {
             if (consentDialogListener != null) {
@@ -164,8 +176,21 @@ public void run() {
             }
             return;
         }
-        mConsentDialogController.loadConsentDialog(consentDialogListener,
-                mPersonalInfoData.getAdUnitId());
+        final Boolean gdprApplies = gdprApplies();
+        if (gdprApplies != null && !gdprApplies) {
+            if (consentDialogListener != null) {
+                new Handler().post(new Runnable() {
+                    @Override
+                    public void run() {
+                        consentDialogListener.onConsentDialogLoadFailed(
+                                MoPubErrorCode.GDPR_DOES_NOT_APPLY);
+                    }
+                });
+            }
+            return;
+        }
+        mConsentDialogController.loadConsentDialog(consentDialogListener, gdprApplies,
+                mPersonalInfoData);
     }
 
     /**
@@ -203,51 +228,36 @@ public boolean canCollectPersonalInformation() {
 
     /**
      * Returns whether or not the SDK thinks the user is in a GDPR region or not. Returns true for
-     * in a GDPR region, no for not in a GDPR region, and null for unknown.
+     * in a GDPR region, false for not in a GDPR region, and null for unknown. This value can be
+     * overwritten to true by setting forceGdprApplies().
      *
      * @return true for in GDPR region, false for not in GDPR region, null for unknown
      */
     public Boolean gdprApplies() {
-        return mPersonalInfoData.getGdprApplies();
-    }
-
-    /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
-     */
-    public void invalidateConsent(@Nullable final String consentChangeReason) {
-        if (TextUtils.isEmpty(consentChangeReason)) {
-            attemptStateTransition(ConsentStatus.UNKNOWN, ConsentChangeReason.REACQUIRE_BY_SERVER);
-            return;
+        if (mPersonalInfoData.isForceGdprApplies()) {
+            return true;
         }
-        attemptStateTransition(ConsentStatus.UNKNOWN, consentChangeReason);
+        return mPersonalInfoData.getGdprApplies();
     }
 
     /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
+     * Forces the SDK to treat this app as in a GDPR region. Setting this will permanently force
+     * GDPR rules for this user unless this app is uninstalled or the data for this app is cleared.
      */
-    public void forceExplicitNo(@Nullable final String consentChangeReason) {
-        if (TextUtils.isEmpty(consentChangeReason)) {
-            attemptStateTransition(ConsentStatus.EXPLICIT_NO,
-                    ConsentChangeReason.REVOKED_BY_SERVER);
+    public void forceGdprApplies() {
+        if (mPersonalInfoData.isForceGdprApplies()) {
             return;
         }
-        attemptStateTransition(ConsentStatus.EXPLICIT_NO, consentChangeReason);
-    }
-
-    /**
-     * Don't call this.
-     *
-     * @param consentChangeReason
-     */
-    public void reacquireConsent(@Nullable final String consentChangeReason) {
-        if (!TextUtils.isEmpty(consentChangeReason)) {
-            mPersonalInfoData.setConsentChangeReason(consentChangeReason);
+        final boolean oldCanCollectPersonalInformation = canCollectPersonalInformation();
+        mPersonalInfoData.setForceGdprApplies(true);
+        mForceGdprAppliesChanged = true;
+        mPersonalInfoData.writeToDisk();
+        final boolean newCanCollectPersonalInformation = canCollectPersonalInformation();
+        if (oldCanCollectPersonalInformation != newCanCollectPersonalInformation) {
+            fireOnConsentStateChangeListeners(mPersonalInfoData.getConsentStatus(),
+                    mPersonalInfoData.getConsentStatus(), newCanCollectPersonalInformation);
         }
-        mPersonalInfoData.setShouldReacquireConsent(true);
+        requestSync(true);
     }
 
     /**
@@ -262,7 +272,7 @@ public ConsentStatus getPersonalInfoConsentStatus() {
     }
 
     /**
-     * For use from whitelisted publishers only. Grants consent to collect personally identifiable
+     * For use by whitelisted publishers only. Grants consent to collect personally identifiable
      * information for the current user.
      */
     public void grantConsent() {
@@ -276,6 +286,8 @@ public void grantConsent() {
             attemptStateTransition(ConsentStatus.EXPLICIT_YES,
                     ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
         } else {
+            MoPubLog.w("You do not have approval to use the grantConsent API. Please reach out " +
+                    "to your account teams or support@mopub.com for more information.");
             attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST,
                     ConsentChangeReason.GRANTED_BY_NOT_WHITELISTED_PUB);
         }
@@ -364,7 +376,7 @@ static boolean shouldMakeSyncRequest(final boolean syncRequestInFlight,
     }
 
     /**
-     * Called internally to request a sync to ad server about consent status and other metadata
+     * Called internally to request a sync to ad server about consent status and other metadata.
      *
      * @param force Call sync even if it has not been mSyncDelayMs. Still won't happen if not in
      *              a GDPR region or if a request is already in flight.
@@ -399,92 +411,27 @@ public void requestSync(final boolean force) {
                         mPersonalInfoData.getConsentedPrivacyPolicyVersion())
                 .withCachedVendorListIabHash(mPersonalInfoData.getCurrentVendorListIabHash())
                 .withExtras(mPersonalInfoData.getExtras())
-                .withGdprApplies(gdprApplies());
-
+                .withGdprApplies(gdprApplies())
+                .withForceGdprApplies(mPersonalInfoData.isForceGdprApplies());
+        if (mForceGdprAppliesChanged) {
+            mForceGdprAppliesChangedSending = true;
+            syncUrlGenerator.withForceGdprAppliesChanged(true);
+        }
 
         final SyncRequest syncRequest = new SyncRequest(mAppContext,
                 syncUrlGenerator.generateUrlString(
-                        Constants.HOST), this);
+                        Constants.HOST), mSyncRequestListener);
         Networking.getRequestQueue(mAppContext).add(syncRequest);
     }
 
-    public ConsentData getConsentData() {
-        return new PersonalInfoData(mAppContext, mPersonalInfoData.getAdUnitId());
-    }
-
     /**
-     * Do not call this. This is used internally.
+     * For use by whitelisted publishers only. Gets a copy of the current and consented vendor
+     * list and privacy policy and their versions.
+     *
+     * @return ConsentData which is a snapshot of the underlying data store.
      */
-    @Deprecated
-    @Override
-    public void onSuccess(final SyncResponse response) {
-        if (mPersonalInfoData.getGdprApplies() == null) {
-            mPersonalInfoData.setGdprApplies(response.isGdprRegion());
-        }
-        mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
-        mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
-        mPersonalInfoData.setWhitelisted(response.isWhitelisted());
-        mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
-        mPersonalInfoData.setCurrentVendorListLink(response.getCurrentVendorListLink());
-        mPersonalInfoData.setCurrentPrivacyPolicyVersion(response.getCurrentPrivacyPolicyVersion());
-        mPersonalInfoData.setCurrentPrivacyPolicyLink(response.getCurrentPrivacyPolicyLink());
-        final String iabHash = response.getCurrentVendorListIabHash();
-        final String iabFormat = response.getCurrentVendorListIabFormat();
-        if (!TextUtils.isEmpty(iabHash) && !iabHash.equals(
-                mPersonalInfoData.getCurrentVendorListIabHash()) && !TextUtils.isEmpty(iabFormat)) {
-            mPersonalInfoData.setCurrentVendorListIabFormat(iabFormat);
-            mPersonalInfoData.setCurrentVendorListIabHash(iabHash);
-        }
-        final String extras = response.getExtras();
-        if (!TextUtils.isEmpty(extras)) {
-            mPersonalInfoData.setExtras(extras);
-        }
-        final String consentChangeReason = response.getConsentChangeReason();
-
-        // Only one of these should happen. Prioritize no.
-        if (response.isForceExplicitNo()) {
-            forceExplicitNo(consentChangeReason);
-        } else if (response.isInvalidateConsent()) {
-            invalidateConsent(consentChangeReason);
-        } else if (response.isReacquireConsent()) {
-            reacquireConsent(consentChangeReason);
-        }
-
-        final String callAgainAfterSecs = response.getCallAgainAfterSecs();
-        if (!TextUtils.isEmpty(callAgainAfterSecs)) {
-            try {
-                final long callAgainAfterSecsLong = Long.parseLong(callAgainAfterSecs);
-                if (callAgainAfterSecsLong > 0) {
-                    mSyncDelayMs = callAgainAfterSecsLong * 1000;
-                } else {
-                    MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
-                }
-            } catch (NumberFormatException e) {
-                MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
-            }
-        }
-
-        // Clear out our cached udid if we have sent it one last time in case limit ad tracking
-        // is turned on.
-        if (!ConsentStatus.EXPLICIT_YES.equals(mSyncRequestConsentStatus)) {
-            mPersonalInfoData.setUdid(null);
-        }
-
-        mPersonalInfoData.writeToDisk();
-
-        mSyncRequestInFlight = false;
-
-        if (ConsentStatus.POTENTIAL_WHITELIST.equals(
-                mSyncRequestConsentStatus) && mPersonalInfoData.isWhitelisted()) {
-            attemptStateTransition(ConsentStatus.EXPLICIT_YES,
-                    ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
-            requestSync(true);
-        }
-
-        if (mSdkInitializationListener != null) {
-            mSdkInitializationListener.onInitializationFinished();
-            mSdkInitializationListener = null;
-        }
+    public ConsentData getConsentData() {
+        return new PersonalInfoData(mAppContext, mPersonalInfoData.getAdUnitId());
     }
 
     /**
@@ -505,13 +452,19 @@ private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatu
      * @param newConsentStatus    The new consent status we want to transition to.
      * @param consentChangeReason Why the state changed.
      */
-    private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
+    @VisibleForTesting
+    void attemptStateTransition(@NonNull final ConsentStatus newConsentStatus,
             @NonNull final String consentChangeReason) {
         Preconditions.checkNotNull(newConsentStatus);
         Preconditions.checkNotNull(consentChangeReason);
 
-
         final ConsentStatus oldConsentStatus = mPersonalInfoData.getConsentStatus();
+        if (oldConsentStatus.equals(newConsentStatus)) {
+            MoPubLog.d("Consent status is already " + oldConsentStatus +
+                    ". Not doing a state transition.");
+            return;
+        }
+
         MoPubLog.d("Changing consent status from " + oldConsentStatus + "to " + newConsentStatus +
                 " because " + consentChangeReason);
         mPersonalInfoData.setConsentChangeReason(consentChangeReason);
@@ -554,6 +507,13 @@ private void attemptStateTransition(@NonNull final ConsentStatus newConsentStatu
             }
         }
 
+        fireOnConsentStateChangeListeners(oldConsentStatus, newConsentStatus,
+                canCollectPersonalInformation);
+    }
+
+    private void fireOnConsentStateChangeListeners(@NonNull final ConsentStatus oldConsentStatus,
+            @NonNull final ConsentStatus newConsentStatus,
+            final boolean canCollectPersonalInformation) {
         synchronized (mConsentStatusChangeListeners) {
             for (final ConsentStatusChangeListener stateChangeListener : mConsentStatusChangeListeners) {
                 new Handler(Looper.getMainLooper()).post(new Runnable() {
@@ -567,22 +527,6 @@ public void run() {
         }
     }
 
-    /**
-     * Do not call this. This is used internally.
-     */
-    @Deprecated
-    @Override
-    public void onErrorResponse(final VolleyError volleyError) {
-        MoPubLog.d("Failed sync request because of " + ((volleyError instanceof MoPubNetworkError) ?
-                ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
-        mSyncRequestInFlight = false;
-        if (mSdkInitializationListener != null) {
-            MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
-            mSdkInitializationListener.onInitializationFinished();
-            mSdkInitializationListener = null;
-        }
-    }
-
     private SdkInitializationListener createInitializationListener() {
         return new SdkInitializationListener() {
 
@@ -609,4 +553,159 @@ public void onInitializationFinished() {
             }
         };
     }
+
+    private class PersonalInfoSyncRequestListener implements SyncRequest.Listener {
+
+        @Override
+        public void onSuccess(final SyncResponse response) {
+            final boolean oldCanCollectPersonalInformation = canCollectPersonalInformation();
+            if (mPersonalInfoData.getGdprApplies() == null) {
+                mPersonalInfoData.setGdprApplies(response.isGdprRegion());
+            }
+            if (response.isForceGdprApplies()) {
+                mForceGdprAppliesChanged = true;
+                mPersonalInfoData.setForceGdprApplies(true);
+                final boolean newCanCollectPersonalInformation = canCollectPersonalInformation();
+                if (oldCanCollectPersonalInformation != newCanCollectPersonalInformation) {
+                    fireOnConsentStateChangeListeners(mPersonalInfoData.getConsentStatus(),
+                            mPersonalInfoData.getConsentStatus(), newCanCollectPersonalInformation);
+                }
+            }
+
+            mPersonalInfoData.setLastChangedMs("" + mSyncRequestEpochTime);
+            mPersonalInfoData.setLastSuccessfullySyncedConsentStatus(mSyncRequestConsentStatus);
+            mPersonalInfoData.setWhitelisted(response.isWhitelisted());
+            mPersonalInfoData.setCurrentVendorListVersion(response.getCurrentVendorListVersion());
+            mPersonalInfoData.setCurrentVendorListLink(response.getCurrentVendorListLink());
+            mPersonalInfoData.setCurrentPrivacyPolicyVersion(
+                    response.getCurrentPrivacyPolicyVersion());
+            mPersonalInfoData.setCurrentPrivacyPolicyLink(response.getCurrentPrivacyPolicyLink());
+            final String iabHash = response.getCurrentVendorListIabHash();
+            final String iabFormat = response.getCurrentVendorListIabFormat();
+            if (!TextUtils.isEmpty(iabHash) && !iabHash.equals(
+                    mPersonalInfoData.getCurrentVendorListIabHash()) && !TextUtils.isEmpty(
+                    iabFormat)) {
+                mPersonalInfoData.setCurrentVendorListIabFormat(iabFormat);
+                mPersonalInfoData.setCurrentVendorListIabHash(iabHash);
+            }
+            final String extras = response.getExtras();
+            if (!TextUtils.isEmpty(extras)) {
+                mPersonalInfoData.setExtras(extras);
+            }
+            final String consentChangeReason = response.getConsentChangeReason();
+
+            // Only one of these should happen. Prioritize no.
+            if (response.isForceExplicitNo()) {
+                mServerOverrideListener.onForceExplicitNo(consentChangeReason);
+            } else if (response.isInvalidateConsent()) {
+                mServerOverrideListener.onInvalidateConsent(consentChangeReason);
+            } else if (response.isReacquireConsent()) {
+                mServerOverrideListener.onReacquireConsent(consentChangeReason);
+            }
+
+            final String callAgainAfterSecs = response.getCallAgainAfterSecs();
+            if (!TextUtils.isEmpty(callAgainAfterSecs)) {
+                try {
+                    final long callAgainAfterSecsLong = Long.parseLong(callAgainAfterSecs);
+                    if (callAgainAfterSecsLong > 0) {
+                        mSyncDelayMs = callAgainAfterSecsLong * 1000;
+                    } else {
+                        MoPubLog.d("callAgainAfterSecs is not positive: " + callAgainAfterSecs);
+                    }
+                } catch (NumberFormatException e) {
+                    MoPubLog.d("Unable to parse callAgainAfterSecs. Ignoring value");
+                }
+            }
+
+            // Clear out our cached udid if we have sent it one last time in case limit ad tracking
+            // is turned on.
+            if (!ConsentStatus.EXPLICIT_YES.equals(mSyncRequestConsentStatus)) {
+                mPersonalInfoData.setUdid(null);
+            }
+
+            if (mForceGdprAppliesChangedSending) {
+                mForceGdprAppliesChanged = false;
+                mForceGdprAppliesChangedSending = false;
+            }
+
+            mPersonalInfoData.writeToDisk();
+
+            mSyncRequestInFlight = false;
+
+            if (ConsentStatus.POTENTIAL_WHITELIST.equals(
+                    mSyncRequestConsentStatus) && mPersonalInfoData.isWhitelisted()) {
+                attemptStateTransition(ConsentStatus.EXPLICIT_YES,
+                        ConsentChangeReason.GRANTED_BY_WHITELISTED_PUB);
+                requestSync(true);
+            }
+
+            if (mSdkInitializationListener != null) {
+                mSdkInitializationListener.onInitializationFinished();
+                mSdkInitializationListener = null;
+            }
+        }
+
+        @Override
+        public void onErrorResponse(final VolleyError volleyError) {
+            MoPubLog.d("Failed sync request because of " +
+                    ((volleyError instanceof MoPubNetworkError) ?
+                            ((MoPubNetworkError) volleyError).getReason() : volleyError.getMessage()));
+            mSyncRequestInFlight = false;
+            if (mSdkInitializationListener != null) {
+                MoPubLog.d("Personal Info Manager initialization finished but ran into errors.");
+                mSdkInitializationListener.onInitializationFinished();
+                mSdkInitializationListener = null;
+            }
+        }
+    }
+
+    private class PersonalInfoServerOverrideListener implements AdRequest.ServerOverrideListener {
+        @Override
+        public void onForceExplicitNo(@Nullable final String consentChangeReason) {
+            if (TextUtils.isEmpty(consentChangeReason)) {
+                attemptStateTransition(ConsentStatus.EXPLICIT_NO,
+                        ConsentChangeReason.REVOKED_BY_SERVER);
+                return;
+            }
+            attemptStateTransition(ConsentStatus.EXPLICIT_NO, consentChangeReason);
+        }
+
+        @Override
+        public void onInvalidateConsent(@Nullable final String consentChangeReason) {
+            if (TextUtils.isEmpty(consentChangeReason)) {
+                attemptStateTransition(ConsentStatus.UNKNOWN,
+                        ConsentChangeReason.REACQUIRE_BY_SERVER);
+                return;
+            }
+            attemptStateTransition(ConsentStatus.UNKNOWN, consentChangeReason);
+        }
+
+        @Override
+        public void onReacquireConsent(@Nullable final String consentChangeReason) {
+            if (!TextUtils.isEmpty(consentChangeReason)) {
+                mPersonalInfoData.setConsentChangeReason(consentChangeReason);
+            }
+            mPersonalInfoData.setShouldReacquireConsent(true);
+            mPersonalInfoData.writeToDisk();
+        }
+
+        @Override
+        public void onForceGdprApplies() {
+            forceGdprApplies();
+        }
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    PersonalInfoData getPersonalInfoData() {
+        return mPersonalInfoData;
+    }
+
+    @NonNull
+    @Deprecated
+    @VisibleForTesting
+    AdRequest.ServerOverrideListener getServerOverrideListener() {
+        return mServerOverrideListener;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
index 7f163a74..62d6e69f 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/PrivacyKey.java
@@ -8,6 +8,7 @@
 public enum PrivacyKey {
     IS_GDPR_REGION("is_gdpr_region"),
     IS_WHITELISTED("is_whitelisted"),
+    FORCE_GDPR_APPLIES("force_gdpr_applies"),
     FORCE_EXPLICIT_NO("force_explicit_no"),
     INVALIDATE_CONSENT("invalidate_consent"),
     REACQUIRE_CONSENT("reacquire_consent"),
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
index 09901e0e..3c99e15b 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncRequest.java
@@ -50,6 +50,7 @@ public SyncRequest(@NonNull final Context context,
                             jsonBody.optString(PrivacyKey.INVALIDATE_CONSENT.getKey()))
                     .setReacquireConsent(jsonBody.optString(PrivacyKey.REACQUIRE_CONSENT.getKey()))
                     .setIsWhitelisted(jsonBody.getString(PrivacyKey.IS_WHITELISTED.getKey()))
+                    .setForceGdprApplies(jsonBody.optString(PrivacyKey.FORCE_GDPR_APPLIES.getKey()))
                     .setCurrentVendorListVersion(
                             jsonBody.getString(PrivacyKey.CURRENT_VENDOR_LIST_VERSION.getKey()))
                     .setCurrentVendorListLink(
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
index f23bb8f6..31b88fed 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncResponse.java
@@ -12,6 +12,7 @@
     private final boolean mInvalidateConsent;
     private final boolean mReacquireConsent;
     private final boolean mIsWhitelisted;
+    private final boolean mForceGdprApplies;
     @NonNull private final String mCurrentVendorListVersion;
     @NonNull private final String mCurrentVendorListLink;
     @NonNull private final String mCurrentPrivacyPolicyVersion;
@@ -42,6 +43,10 @@ public boolean isWhitelisted() {
         return mIsWhitelisted;
     }
 
+    public boolean isForceGdprApplies() {
+        return mForceGdprApplies;
+    }
+
     @NonNull
     public String getCurrentVendorListVersion() {
         return mCurrentVendorListVersion;
@@ -92,6 +97,7 @@ private SyncResponse(@NonNull final String isGdprRegion,
             @Nullable final String invalidateConsent,
             @Nullable final String reacquireConsent,
             @NonNull final String isWhitelisted,
+            @Nullable final String forceGdprApplies,
             @NonNull final String currentVendorListVersion,
             @NonNull final String currentVendorListLink,
             @NonNull final String currentPrivacyPolicyVersion,
@@ -112,11 +118,12 @@ private SyncResponse(@NonNull final String isGdprRegion,
         // Default for this is true
         mIsGdprRegion = !"0".equals(isGdprRegion);
 
-        // Default for the next four is false
+        // Default for the next five is false
         mForceExplicitNo = "1".equals(forceExplicitNo);
         mInvalidateConsent = "1".equals(invalidateConsent);
         mReacquireConsent = "1".equals(reacquireConsent);
         mIsWhitelisted = "1".equals(isWhitelisted);
+        mForceGdprApplies = "1".equals(forceGdprApplies);
 
         mCurrentVendorListVersion = currentVendorListVersion;
         mCurrentVendorListLink = currentVendorListLink;
@@ -135,6 +142,7 @@ private SyncResponse(@NonNull final String isGdprRegion,
         private String invalidateConsent;
         private String reacquireConsent;
         private String isWhitelisted;
+        private String forceGdprApplies;
         private String currentVendorListVersion;
         private String currentVendorListLink;
         private String currentPrivacyPolicyVersion;
@@ -173,6 +181,11 @@ public Builder setIsWhitelisted(@NonNull final String isWhitelisted) {
             return this;
         }
 
+        public Builder setForceGdprApplies(@Nullable final String forceGdprApplies) {
+            this.forceGdprApplies = forceGdprApplies;
+            return this;
+        }
+
         public Builder setCurrentVendorListVersion(@NonNull final String currentVendorListVersion) {
             this.currentVendorListVersion = currentVendorListVersion;
             return this;
@@ -222,7 +235,7 @@ public Builder setConsentChangeReason(@Nullable final String consentChangeReason
 
         public SyncResponse build() {
             return new SyncResponse(isGdprRegion, forceExplicitNo, invalidateConsent,
-                    reacquireConsent, isWhitelisted, currentVendorListVersion,
+                    reacquireConsent, isWhitelisted, forceGdprApplies, currentVendorListVersion,
                     currentVendorListLink, currentPrivacyPolicyVersion, currentPrivacyPolicyLink,
                     currentVendorListIabFormat, currentVendorListIabHash, callAgainAfterSecs,
                     extras, consentChangeReason);
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
index ba462001..966453af 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/privacy/SyncUrlGenerator.java
@@ -38,6 +38,11 @@
      */
     private static final String EXTRAS_KEY = "extras";
 
+    /**
+     * "1" when the publisher just forced gdpr applies. Otherwise, this is not sent.
+     */
+    private static final String FORCED_GDPR_APPLIES_CHANGED = "forced_gdpr_applies_changed";
+
     @NonNull private final Context mContext;
     @Nullable private String mAdUnitId;
     @Nullable private String mUdid;
@@ -50,6 +55,8 @@
     @Nullable private String mCachedVendorListIabHash;
     @Nullable private String mExtras;
     @Nullable private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
+    @Nullable private Boolean mForceGdprAppliesChanged;
 
     public SyncUrlGenerator(@NonNull final Context context,
             @NonNull final String currentConsentStatus) {
@@ -75,6 +82,17 @@ public SyncUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplies) {
         return this;
     }
 
+    public SyncUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
+    public SyncUrlGenerator withForceGdprAppliesChanged(
+            @Nullable final Boolean forceGdprAppliesChanged) {
+        mForceGdprAppliesChanged = forceGdprAppliesChanged;
+        return this;
+    }
+
     public SyncUrlGenerator withLastChangedMs(@Nullable final String lastChangedMs) {
         mLastChangedMs = lastChangedMs;
         return this;
@@ -128,9 +146,9 @@ public String generateUrlString(@NonNull final String serverHostname) {
         addParam(CACHED_VENDOR_LIST_IAB_HASH_KEY, mCachedVendorListIabHash);
         addParam(EXTRAS_KEY, mExtras);
         addParam(UDID_KEY, mUdid);
-        if (mGdprApplies != null) {
-            addParam(GDPR_APPLIES, mGdprApplies ? "1" : "0");
-        }
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
+        addParam(FORCED_GDPR_APPLIES_CHANGED, mForceGdprAppliesChanged);
         addParam(BUNDLE_ID_KEY, ClientMetadata.getInstance(mContext).getAppPackageName());
         addParam(DNT_KEY, PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
index c4395a46..be7cbf45 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/DeviceUtils.java
@@ -248,8 +248,14 @@ public static boolean isPermissionGranted(@NonNull final Context context,
         Preconditions.checkNotNull(context);
         Preconditions.checkNotNull(permission);
 
-        return ContextCompat.checkSelfPermission(context, permission) ==
-                PackageManager.PERMISSION_GRANTED;
+        // Bug in ContextCompat where it can return a RuntimeException in rare circumstances.
+        // If this happens, then we return false.
+        try {
+            return ContextCompat.checkSelfPermission(context, permission) ==
+                    PackageManager.PERMISSION_GRANTED;
+        } catch (Exception e) {
+            return false;
+        }
     }
 
     /**
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
index be03be19..b373e756 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ManifestUtils.java
@@ -60,19 +60,19 @@ private ManifestUtils() {}
         REQUIRED_NATIVE_SDK_ACTIVITIES.add(com.mopub.common.MoPubBrowser.class);
     }
 
-    private static final List<Class<? extends Activity>> REQUIRED_SDK_ACTIVITIES;
+    private static final List<Class<? extends Activity>> REQUIRED_GDPR_ACTIVITIES;
     static {
-        REQUIRED_SDK_ACTIVITIES = new ArrayList<>(1);
-        REQUIRED_SDK_ACTIVITIES.add(com.mopub.common.privacy.ConsentDialogActivity.class);
+        REQUIRED_GDPR_ACTIVITIES = new ArrayList<>(1);
+        REQUIRED_GDPR_ACTIVITIES.add(com.mopub.common.privacy.ConsentDialogActivity.class);
     }
 
-    public static void checkSdkActivitiesDeclared(@NonNull final Context context) {
+    public static void checkGdprActivitiesDeclared(@NonNull final Context context) {
         if (!Preconditions.NoThrow.checkNotNull(context, "context is not allowed to be null")) {
             return;
         }
 
-        displayWarningForMissingActivities(context, REQUIRED_SDK_ACTIVITIES);
-        displayWarningForMisconfiguredActivities(context, REQUIRED_SDK_ACTIVITIES);
+        displayWarningForMissingActivities(context, REQUIRED_GDPR_ACTIVITIES);
+        displayWarningForMisconfiguredActivities(context, REQUIRED_GDPR_ACTIVITIES);
     }
 
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
index aa26b4f0..e1bf56f4 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/util/ResponseHeader.java
@@ -64,6 +64,8 @@
     FORCE_EXPLICIT_NO("force_explicit_no"),
     REACQUIRE_CONSENT("reacquire_consent"),
     CONSENT_CHANGE_REASON("consent_change_reason"),
+    FORCE_GDPR_APPLIES("force_gdpr_applies"),
+
 
     @Deprecated CUSTOM_SELECTOR("X-Customselector");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
index 71f37d64..a97f8e42 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/AdViewController.java
@@ -66,6 +66,7 @@
     private Handler mHandler;
     private boolean mIsLoading;
     private String mUrl;
+    private boolean mExpanded;
 
     // This is the power of the exponential term in the exponential backoff calculation.
     @VisibleForTesting
@@ -397,7 +398,7 @@ void pauseRefresh() {
     }
 
     void resumeRefresh() {
-        if (mShouldAllowAutoRefresh) {
+        if (mShouldAllowAutoRefresh && !mExpanded) {
             setAutoRefreshStatus(true);
         }
     }
@@ -423,6 +424,16 @@ private void setAutoRefreshStatus(final boolean newAutoRefreshStatus) {
         }
     }
 
+    void expand() {
+        mExpanded = true;
+        pauseRefresh();
+    }
+
+    void collapse() {
+        mExpanded = false;
+        resumeRefresh();
+    }
+
     @Nullable
     public AdReport getAdReport() {
         if (mAdUnitId != null && mAdResponse != null) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
index d59b6da2..d667ea73 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/ConversionUrlGenerator.java
@@ -23,6 +23,7 @@
     private String mConsentedPrivacyPolicyVersion;
     @Nullable
     private Boolean mGdprApplies;
+    private boolean mForceGdprApplies;
 
     private boolean mSt;
 
@@ -41,6 +42,11 @@ public ConversionUrlGenerator withGdprApplies(@Nullable final Boolean gdprApplie
         return this;
     }
 
+    public ConversionUrlGenerator withForceGdprApplies(final boolean forceGdprApplies) {
+        mForceGdprApplies = forceGdprApplies;
+        return this;
+    }
+
     public ConversionUrlGenerator withConsentedVendorListVersion(@Nullable final String consentedVendorListVersion) {
         mConsentedVendorListVersion = consentedVendorListVersion;
         return this;
@@ -73,9 +79,8 @@ public String generateUrlString(String serverHostname) {
         addParam(CURRENT_CONSENT_STATUS_KEY, mCurrentConsentStatus);
         addParam(CONSENTED_VENDOR_LIST_VERSION_KEY, mConsentedVendorListVersion);
         addParam(CONSENTED_PRIVACY_POLICY_VERSION_KEY, mConsentedPrivacyPolicyVersion);
-        if (mGdprApplies != null) {
-            addParam(GDPR_APPLIES, mGdprApplies);
-        }
+        addParam(GDPR_APPLIES, mGdprApplies);
+        addParam(FORCE_GDPR_APPLIES, mForceGdprApplies);
         return getFinalUrlString();
     }
 }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
index 1772be75..490ba301 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubConversionTracker.java
@@ -72,6 +72,7 @@ public void reportAppOpen(boolean sessionTracker) {
         final ConsentData consentData = infoManager.getConsentData();
         final String url = new ConversionUrlGenerator(mContext)
                 .withGdprApplies(infoManager.gdprApplies())
+                .withForceGdprApplies(consentData.isForceGdprApplies())
                 .withCurrentConsentStatus(infoManager.getPersonalInfoConsentStatus().getValue())
                 .withConsentedPrivacyPolicyVersion(consentData.getConsentedPrivacyPolicyVersion())
                 .withConsentedVendorListVersion(consentData.getConsentedVendorListVersion())
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
index 27eda319..cc74ef2c 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubErrorCode.java
@@ -27,6 +27,7 @@
     REWARD_NOT_SELECTED("Reward not selected for rewarded ad."),
 
     DO_NOT_TRACK("Do not track is enabled."),
+    GDPR_DOES_NOT_APPLY("GDPR does not apply. Ignoring consent-related actions."),
 
     UNSPECIFIED("Unspecified error.");
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 97942314..4f6fd25e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -332,6 +332,30 @@ public void setAutorefreshEnabled(boolean enabled) {
         }
     }
 
+    void pauseAutorefresh() {
+        if (mAdViewController != null) {
+            mAdViewController.pauseRefresh();
+        }
+    }
+
+    void resumeAutorefresh() {
+        if (mAdViewController != null) {
+            mAdViewController.resumeRefresh();
+        }
+    }
+
+    void expand() {
+        if (mAdViewController != null) {
+            mAdViewController.expand();
+        }
+    }
+
+    void collapse() {
+        if (mAdViewController != null) {
+            mAdViewController.collapse();
+        }
+    }
+
     public boolean getAutorefreshEnabled() {
         if (mAdViewController != null) return mAdViewController.getCurrentAutoRefreshStatus();
         else {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
index 77a8d5f4..c845fd9d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoConfig.java
@@ -72,6 +72,8 @@
 
     // MoPub-specific metadata
     private String mDspCreativeId;
+    private String mPrivacyInformationIconImageUrl;
+    private String mPrivacyInformationIconClickthroughUrl;
 
     /**
      * Flag to indicate if the VAST xml document has explicitly set the orientation as opposed to
@@ -339,6 +341,16 @@ public void setIsRewardedVideo(final boolean isRewardedVideo) {
         mIsRewardedVideo = isRewardedVideo;
     }
 
+    public void setPrivacyInformationIconImageUrl(
+            @Nullable final String privacyInformationIconImageUrl) {
+        mPrivacyInformationIconImageUrl = privacyInformationIconImageUrl;
+    }
+
+    public void setPrivacyInformationIconClickthroughUrl(
+            @Nullable final String privacyInformationIconClickthroughUrl) {
+        mPrivacyInformationIconClickthroughUrl = privacyInformationIconClickthroughUrl;
+    }
+
     /**
      * Getters
      */
@@ -513,6 +525,16 @@ public boolean isRewardedVideo() {
         return mIsRewardedVideo;
     }
 
+    @Nullable
+    public String getPrivacyInformationIconImageUrl() {
+        return mPrivacyInformationIconImageUrl;
+    }
+
+    @Nullable
+    public String getPrivacyInformationIconClickthroughUrl() {
+        return mPrivacyInformationIconClickthroughUrl;
+    }
+
     /**
      * Called when the video starts playing.
      *
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
index d9e9e993..23aa9f40 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/AdRequest.java
@@ -13,7 +13,6 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.Preconditions;
-import com.mopub.common.SdkConfiguration;
 import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.PersonalInfoManager;
@@ -52,17 +51,25 @@
     @NonNull private final AdFormat mAdFormat;
     @Nullable private final String mAdUnitId;
     @NonNull private final Context mContext;
+    @Nullable private static ServerOverrideListener sServerOverrideListener;
 
     public interface Listener extends Response.ErrorListener {
         void onSuccess(AdResponse response);
     }
 
+    public interface ServerOverrideListener {
+        void onForceExplicitNo(@Nullable final String consentChangeReason);
+        void onInvalidateConsent(@Nullable final String consentChangeReason);
+        void onReacquireConsent(@Nullable final String consentChangeReason);
+        void onForceGdprApplies();
+    }
+
     public AdRequest(@NonNull final String url,
             @NonNull final AdFormat adFormat,
             @Nullable final String adUnitId,
             @NonNull Context context,
             @NonNull final Listener listener) {
-        super(context, url, listener);
+        super(context, clearUrlIfSdkNotInitialized(url), listener);
         Preconditions.checkNotNull(adFormat);
         Preconditions.checkNotNull(listener);
         mAdUnitId = adUnitId;
@@ -77,23 +84,36 @@ public AdRequest(@NonNull final String url,
         setShouldCache(false);
 
         final PersonalInfoManager personalInfoManager = MoPub.getPersonalInformationManager();
-        if (personalInfoManager == null) {
-            MoPubLog.e("Make sure you initialize the SDK before loading an ad. For now, the SDK " +
-                    "will be automatically initialized on your behalf. Starting from release " +
-                    "5.2.0, initialization will be a strict requirement, and ad requests " +
-                    "made with an uninitialized SDK will begin to fail.");
-            MoPub.initializeSdk(context,
-                    new SdkConfiguration.Builder(adUnitId == null ? "" : adUnitId).build(), null);
-        } else {
+        if (personalInfoManager != null) {
             personalInfoManager.requestSync(false);
         }
     }
 
+    /**
+     * For 5.2 and onwards, disable load when the sdk is not initialized.
+     *
+     * @param url The original url
+     * @return The original url if the sdk is initialized. Otherwise, returns an empty url.
+     */
+    @NonNull
+    private static String clearUrlIfSdkNotInitialized(@NonNull final String url) {
+        if (MoPub.getPersonalInformationManager() == null || !MoPub.isSdkInitialized()) {
+            MoPubLog.e("Make sure to call MoPub#initializeSdk before loading an ad.");
+            return "";
+        }
+        return url;
+    }
+
     @NonNull
     public Listener getListener() {
         return mListener;
     }
 
+    public static void setServerOverrideListener(
+            @NonNull final ServerOverrideListener serverOverrideListener) {
+        sServerOverrideListener = serverOverrideListener;
+    }
+
     @Override
     public Map<String, String> getHeaders() {
         TreeMap<String, String> headers = new TreeMap<String, String>();
@@ -365,18 +385,27 @@ public Listener getListener() {
             builder.setShouldRewardOnClick(shouldRewardOnClick);
         }
 
-        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.INVALIDATE_CONSENT, false);
-        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders, ResponseHeader.FORCE_EXPLICIT_NO, false);
-        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders, ResponseHeader.REACQUIRE_CONSENT, false);
-        String consentChangeReason = extractHeader(jsonHeaders, ResponseHeader.CONSENT_CHANGE_REASON);
-
-        if (MoPub.getPersonalInformationManager() != null) {
+        final boolean invalidateConsent = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.INVALIDATE_CONSENT, false);
+        final boolean forceExplicitNo = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.FORCE_EXPLICIT_NO, false);
+        final boolean reacquireConsent = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.REACQUIRE_CONSENT, false);
+        String consentChangeReason = extractHeader(jsonHeaders,
+                ResponseHeader.CONSENT_CHANGE_REASON);
+        final boolean forceGdprApplies = extractBooleanHeader(jsonHeaders,
+                ResponseHeader.FORCE_GDPR_APPLIES, false);
+
+        if (sServerOverrideListener != null) {
+            if (forceGdprApplies) {
+                sServerOverrideListener.onForceGdprApplies();
+            }
             if (forceExplicitNo) {
-                MoPub.getPersonalInformationManager().forceExplicitNo(consentChangeReason);
+                sServerOverrideListener.onForceExplicitNo(consentChangeReason);
             } else if (invalidateConsent) {
-                MoPub.getPersonalInformationManager().invalidateConsent(consentChangeReason);
+                sServerOverrideListener.onInvalidateConsent(consentChangeReason);
             } else if (reacquireConsent) {
-                MoPub.getPersonalInformationManager().reacquireConsent(consentChangeReason);
+                sServerOverrideListener.onReacquireConsent(consentChangeReason);
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
index b888c4a0..44c910a5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/network/MoPubRequest.java
@@ -5,6 +5,7 @@
 import android.support.annotation.Nullable;
 
 import com.mopub.common.Preconditions;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.volley.NetworkResponse;
 import com.mopub.volley.Request;
 import com.mopub.volley.Response;
@@ -26,8 +27,8 @@
     @NonNull private final Context mContext;
 
     public MoPubRequest(@NonNull final Context context,
-            @NonNull final String url,
-            @Nullable final Response.ErrorListener listener) {
+                        @NonNull final String url,
+                        @Nullable final Response.ErrorListener listener) {
         super(MoPubRequestUtils.chooseMethod(url), MoPubRequestUtils.truncateQueryParamsIfPost(url),
                 listener);
 
@@ -73,4 +74,10 @@ protected String parseStringBody(@NonNull final NetworkResponse response) {
         }
         return parsed;
     }
+
+    @VisibleForTesting
+    @NonNull
+    public String getOriginalUrl() {
+        return mOriginalUrl;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
index 68209727..d5174d12 100644
--- a/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
+++ b/mopub-sdk/mopub-sdk-native-static/src/main/java/com/mopub/nativeads/MoPubCustomEventNative.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.View;
 
 import com.mopub.common.DataKeys;
@@ -97,7 +98,10 @@ protected void loadNativeAd(@NonNull final Context context,
             CLICK_DESTINATION("clk", false),
             FALLBACK("fallback", false),
             CALL_TO_ACTION("ctatext", false),
-            STAR_RATING("starrating", false);
+            STAR_RATING("starrating", false),
+
+            PRIVACY_INFORMATION_ICON_IMAGE_URL("privacyicon", false),
+            PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL("privacyclkurl", false);
 
             @NonNull final String name;
             final boolean required;
@@ -171,7 +175,9 @@ void loadAd() throws IllegalArgumentException {
                     addExtra(key, mJsonObject.opt(key));
                 }
             }
-            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            if (TextUtils.isEmpty(getPrivacyInformationIconClickThroughUrl())) {
+                setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            }
 
             preCacheImages(mContext, getAllImageUrls(), new ImageListener() {
                 @Override
@@ -227,6 +233,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                     case STAR_RATING:
                         setStarRating(parseDouble(value));
                         break;
+                    case PRIVACY_INFORMATION_ICON_IMAGE_URL:
+                        setPrivacyInformationIconImageUrl((String) value);
+                        break;
+                    case PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL:
+                        setPrivacyInformationIconClickThroughUrl((String) value);
+                        break;
                     default:
                         MoPubLog.d("Unable to add JSON key to internal mapping: " + key.name);
                         break;
@@ -267,13 +279,15 @@ private boolean isImageKey(@Nullable final String name) {
         @NonNull
         List<String> getAllImageUrls() {
             final List<String> imageUrls = new ArrayList<String>();
-            if (getMainImageUrl() != null) {
+            if (!TextUtils.isEmpty(getMainImageUrl())) {
                 imageUrls.add(getMainImageUrl());
             }
-            if (getIconImageUrl() != null) {
+            if (!TextUtils.isEmpty(getIconImageUrl())) {
                 imageUrls.add(getIconImageUrl());
             }
-
+            if (!TextUtils.isEmpty(getPrivacyInformationIconImageUrl())) {
+                imageUrls.add(getPrivacyInformationIconImageUrl());
+            }
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
         }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
index f8d96697..fa9b3ee3 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/MoPubCustomEventVideoNative.java
@@ -101,7 +101,9 @@ protected void loadNativeAd(@NonNull final Context context,
             CLICK_DESTINATION("clk", false),
             FALLBACK("fallback", false),
             CALL_TO_ACTION("ctatext", false),
-            VAST_VIDEO("video", false);
+            VAST_VIDEO("video", false),
+            PRIVACY_INFORMATION_ICON_IMAGE_URL("privacyicon", false),
+            PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL("privacyclkurl", false);
 
             @NonNull final String mName;
             final boolean mRequired;
@@ -256,7 +258,9 @@ void loadAd() throws IllegalArgumentException {
                     addExtra(key, mJsonObject.opt(key));
                 }
             }
-            setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            if (TextUtils.isEmpty(getPrivacyInformationIconClickThroughUrl())) {
+                setPrivacyInformationIconClickThroughUrl(PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+            }
 
             preCacheImages(mContext, getAllImageUrls(), new NativeImageHelper.ImageListener() {
                 @Override
@@ -327,6 +331,10 @@ public void onVastVideoConfigurationPrepared(@Nullable VastVideoConfig vastVideo
                 visibilityTrackingEvents.add(vastVisibilityTrackingEvent);
             }
 
+            mVastVideoConfig.setPrivacyInformationIconImageUrl(getPrivacyInformationIconImageUrl());
+            mVastVideoConfig.setPrivacyInformationIconClickthroughUrl(
+                    getPrivacyInformationIconClickThroughUrl());
+
             Set<String> clickTrackers = new HashSet<String>();
             clickTrackers.add(mMoPubClickTrackingUrl);
             clickTrackers.addAll(getClickTrackers());
@@ -398,6 +406,12 @@ private void addInstanceVariable(@NonNull final Parameter key,
                     case VAST_VIDEO:
                         setVastVideo((String) value);
                         break;
+                    case PRIVACY_INFORMATION_ICON_IMAGE_URL:
+                        setPrivacyInformationIconImageUrl((String) value);
+                        break;
+                    case PRIVACY_INFORMATION_ICON_CLICKTHROUGH_URL:
+                        setPrivacyInformationIconClickThroughUrl((String) value);
+                        break;
                     default:
                         MoPubLog.d("Unable to add JSON key to internal mapping: " + key.mName);
                         break;
@@ -767,12 +781,15 @@ private boolean isImageKey(@Nullable final String name) {
         @NonNull
         private List<String> getAllImageUrls() {
             final List<String> imageUrls = new ArrayList<String>();
-            if (getMainImageUrl() != null) {
+            if (!TextUtils.isEmpty(getMainImageUrl())) {
                 imageUrls.add(getMainImageUrl());
             }
-            if (getIconImageUrl() != null) {
+            if (!TextUtils.isEmpty(getIconImageUrl())) {
                 imageUrls.add(getIconImageUrl());
             }
+            if (!TextUtils.isEmpty(getPrivacyInformationIconImageUrl())) {
+                imageUrls.add(getPrivacyInformationIconImageUrl());
+            }
 
             imageUrls.addAll(getExtrasImageUrls());
             return imageUrls;
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
index eb3a94ff..9b23cb26 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeFullScreenVideoView.java
@@ -65,7 +65,8 @@
     @VisibleForTesting final int mPlayControlSizePx;
     @VisibleForTesting final int mGradientStripHeightPx;
 
-    public NativeFullScreenVideoView(@NonNull final Context context, int orientation, @Nullable String ctaText) {
+    public NativeFullScreenVideoView(@NonNull final Context context, int orientation,
+            @Nullable String ctaText) {
         this(context, orientation, ctaText,
                 new ImageView(context),
                 new TextureView(context), new ProgressBar(context), new ImageView(context),
@@ -185,8 +186,6 @@ public NativeFullScreenVideoView(@NonNull final Context context, int orientation
 
         mPrivacyInformationIcon = privacyInformationIcon;
         mPrivacyInformationIcon.setId((int) Utils.generateUniqueId());
-        mPrivacyInformationIcon.setImageDrawable(
-                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
         mPrivacyInformationIcon.setPadding(mClosePaddingPx, mClosePaddingPx, mClosePaddingPx * 2,
                 mClosePaddingPx * 2);
         addView(mPrivacyInformationIcon);
@@ -256,6 +255,15 @@ public void setPrivacyInformationClickListener(
         mPrivacyInformationIcon.setOnClickListener(privacyInformationListener);
     }
 
+    public void setPrivacyInformationIconImageUrl(@Nullable final String privacyInformationIconImageUrl) {
+        if (TextUtils.isEmpty(privacyInformationIconImageUrl)) {
+            mPrivacyInformationIcon.setImageDrawable(
+                    Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(mPrivacyInformationIcon.getContext()));
+        } else {
+            NativeImageHelper.loadImageView(privacyInformationIconImageUrl, mPrivacyInformationIcon);
+        }
+    }
+
     public void setCtaClickListener(@Nullable OnClickListener ctaListener) {
         mCtaButton.setOnClickListener(ctaListener);
     }
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
index e98c9b1f..eb4684a3 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/NativeVideoViewController.java
@@ -9,6 +9,7 @@
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.text.TextUtils;
 import android.view.TextureView;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
@@ -124,11 +125,16 @@ public void onClick(View v) {
             public void onClick(View v) {
                 mNativeVideoController.setPlayWhenReady(false);
                 mCachedVideoFrame = mFullScreenVideoView.getTextureView().getBitmap();
+                String url = mVastVideoConfig.getPrivacyInformationIconClickthroughUrl();
+                if (TextUtils.isEmpty(url)) {
+                    url = MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL;
+                }
                 new UrlHandler.Builder().withSupportedUrlActions(UrlAction.OPEN_IN_APP_BROWSER)
-                        .build().handleUrl(getContext(),
-                        MoPubVideoNativeAd.PRIVACY_INFORMATION_CLICKTHROUGH_URL);
+                        .build().handleUrl(getContext(), url);
             }
         });
+        mFullScreenVideoView.setPrivacyInformationIconImageUrl(
+                mVastVideoConfig.getPrivacyInformationIconImageUrl());
 
         final LayoutParams adViewLayout =
                 new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
diff --git a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
index 97d19869..acd46822 100644
--- a/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
+++ b/mopub-sdk/mopub-sdk-native-video/src/main/java/com/mopub/nativeads/VideoNativeAd.java
@@ -66,6 +66,12 @@ public String getCallToAction() {
         return mCallToAction;
     }
 
+    /**
+     * Returns the Privacy Information clickthrough url
+     *
+     * @return String representing the Privacy Information Icon clickthrough url, or {@code null}
+     * if not set.
+     */
     @Nullable
     public String getPrivacyInformationIconClickThroughUrl() {
         return mPrivacyInformationIconClickThroughUrl;
diff --git a/mopub-sdk/pom.xml b/mopub-sdk/pom.xml
deleted file mode 100644
index 011a3234..00000000
--- a/mopub-sdk/pom.xml
+++ /dev/null
@@ -1,105 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>com.mopub.mobileads</groupId>
-        <artifactId>mopub-android</artifactId>
-        <version>1.0</version>
-    </parent>
-
-    <artifactId>mopub-sdk</artifactId>
-    <version>1.0.0-SNAPSHOT</version>
-    <packaging>aar</packaging>
-    <name>MoPub SDK</name>
-    <description>The SDK for MoPub developers.</description>
-
-    <dependencies>
-
-        <!--main-->
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-annotations</artifactId>
-            <version>23.1.1</version>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>support-v4</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-
-        <dependency>
-            <groupId>com.android.support</groupId>
-            <artifactId>recyclerview-v7</artifactId>
-            <version>23.1.1</version>
-            <type>aar</type>
-        </dependency>
-        
-        <dependency>
-            <groupId>com.mopub.volley</groupId>
-            <artifactId>mopub-volley</artifactId>
-            <version>1.1.0</version>
-        </dependency>
-
-        <dependency>
-            <groupId>com.google.android.exoplayer</groupId>
-            <artifactId>exoplayer</artifactId>
-            <version>r1.5.6</version>
-            <type>aar</type>
-        </dependency>
-
-        <!--android & oobolectric-->
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>4.4.2</version>
-            <scope>provided</scope>
-        </dependency>
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>
-
-        <plugins>
-            <plugin>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <version>2.3.2</version>
-                <!-- Skip tests. We use Gradle to build and run tests. -->
-                <executions>
-                    <execution>
-                        <id>default-testCompile</id>
-                        <phase>test-compile</phase>
-                        <goals>
-                            <goal>testCompile</goal>
-                        </goals>
-                        <configuration>
-                            <skip>true</skip>
-                        </configuration>
-                    </execution>
-                </executions>
-                <configuration>
-                    <source>7</source>
-                    <target>7</target>
-                </configuration>
-            </plugin>
-            <plugin>
-                <groupId>com.simpligility.maven.plugins</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.2.0</version>
-                <configuration>
-                    <androidManifestFile>AndroidManifest.xml</androidManifestFile>
-                    <resourceDirectory>res</resourceDirectory>
-                    <sdk>
-                        <!-- platform or api level (api level 4 = platform 1.6)-->
-                        <platform>22</platform>
-                    </sdk>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-                </configuration>
-                <extensions>true</extensions>
-            </plugin>
-        </plugins>
-    </build>
-</project>
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index b987d831..d808ee9b 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,17 +1,16 @@
 apply plugin: 'com.android.library'
 
 repositories {
-    mavenCentral()
+    google()
     jcenter()
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
     maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
-    maven { url 'https://maven.google.com' }
 }
 
 project.group = 'com.mopub'
-project.version = '5.0.0'
+project.version = '5.2.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +19,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 59
+        versionCode 62
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 47005228..d6608042 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=5.0.0+kit
+fabric-version=5.2.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index b932194d..d0b8e502 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -97,7 +97,7 @@ public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withSuccessfulPrimaryUr
     @Test
     public void shouldOverrideUrlLoading_withDeeplinkPlusUrl_withFailedPrimaryUrl_withHTTPFallbackUrl_shouldReturnTrue_shouldLoadFallbackUrl_shouldNotFinish() {
         final String primaryUrl = "missingApp://somePath";
-        final String fallbackUrl = "https://twitter.com/";
+        final String fallbackUrl = "https://mobile.twitter.com/";
         final String url = "deeplink+://navigate?primaryUrl=" + Uri.encode(primaryUrl)
                 + "&fallbackUrl=" + Uri.encode(fallbackUrl);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 0bab926e..8d0a3f25 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -40,6 +40,7 @@
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.powermock.api.mockito.PowerMockito.mock;
 import static org.powermock.api.mockito.PowerMockito.mockStatic;
@@ -153,7 +154,7 @@ public void initializeSdk_withRewardedVideo_shouldCallMoPubRewardedVideoManager(
                 new SdkConfiguration.Builder(INIT_ADUNIT).build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
@@ -164,7 +165,7 @@ public void initializeSdk_withRewardedVideo_withMediationSettings_shouldCallMoPu
                 new SdkConfiguration.Builder(INIT_ADUNIT).withMediationSettings(mMediationSettings).build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         verifyStatic();
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
     }
@@ -188,7 +189,7 @@ public void initializeSdk_withRewardedVideo_withNetworksToInit_shouldCallMoPubRe
                         .build(),
                 mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
         List<Class<? extends CustomEventRewardedVideo>> classList = new ArrayList<>();
         classList.add(TestCustomEventRewardedVideo.class);
         classList.add(TestInheritedCustomEventRewardedVideo.class);
@@ -217,6 +218,7 @@ public void initializeSdk_withRewardedVideo_withoutActivity_shouldNotCallMoPubRe
 
         verifyStatic(times(2));
         MoPubRewardedVideoManager.init(mActivity, mMediationSettings);
+        verify(mockInitializationListener);
     }
 
     @Test
@@ -292,7 +294,7 @@ public void initializeSdk_withCallbackSet_shouldCallCallback() throws Exception
         MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder(
                 INIT_ADUNIT).build(), mockInitializationListener);
 
-        org.mockito.Mockito.verify(mockInitializationListener).onInitializationFinished();
+        verify(mockInitializationListener).onInitializationFinished();
     }
 
     private static class AdvancedBidderTestClass implements MoPubAdvancedBidder {
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
index 2040d0f8..47440e0a 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/AdvertisingIdTest.java
@@ -38,6 +38,11 @@ public void constructor_shouldInitializeCorrectly() {
         assertThat(subject.mMopubId).isEqualTo(MOPUB_ID);
         assertThat(subject.mDoNotTrack).isFalse();
         assertThat(subject.mLastRotation).isEqualTo(time);
+
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+        assertThat(subject.mDoNotTrack).isTrue();
+        // return IFA even when DoNotTrack is true
+        assertThat(subject.getIfaWithPrefix()).isEqualTo("ifa:" + ANDROID_ID);
     }
 
     @Test
@@ -77,4 +82,46 @@ public void getIdWithPrefix_whenUserConsentTrue_shouldReturnIfaString() {
         subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
         assertThat(subject.getIdWithPrefix(true)).isEqualTo("ifa:" + ANDROID_ID);
     }
+
+    @Test
+    public void getIdWithPrefix_whenLimitAdTrackingIsTrue_shouldNotDependOnConsent() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+
+        assertThat(subject.getIdWithPrefix(true)).isEqualTo("mopub:" + MOPUB_ID);
+        assertThat(subject.getIdWithPrefix(false)).isEqualTo("mopub:" + MOPUB_ID);
+    }
+
+    @Test
+    public void getIdentifier_whenDoNotTrackIsTrue_shouldReturnMoPubid() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, true, now);
+
+        assertThat(subject.getIdentifier(true)).isEqualTo(MOPUB_ID);
+        assertThat(subject.getIdentifier(false)).isEqualTo(MOPUB_ID);
+    }
+
+    @Test
+    public void getIdentifier_whenDoNotTrackIsFalse_shouldAnalyzeConsent() {
+        subject = new AdvertisingId(ANDROID_ID, MOPUB_ID, false, now);
+        
+        assertThat(subject.getIdentifier(true)).isEqualTo(ANDROID_ID);
+        assertThat(subject.getIdentifier(false)).isEqualTo(MOPUB_ID);
+    }
+
+    @Test
+    public void generateExpiredAdvertisingId_shouldGenerateExpiredAdvertisingId() {
+        subject = AdvertisingId.generateExpiredAdvertisingId();
+        assertThat(subject.isRotationRequired()).isTrue();
+    }
+
+    @Test
+    public void generateFreshAdvertisingId_shouldGenerateNonExpiredAdvertisingId() {
+        subject = AdvertisingId.generateFreshAdvertisingId();
+        assertThat(subject.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void generateIdString_lengthIs16x2plus4() {
+        String uuid = AdvertisingId.generateIdString();
+        assertThat(uuid.length()).isEqualTo(36);
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
index 51b2048d..857c5370 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogActivityTest.java
@@ -1,6 +1,7 @@
 package com.mopub.common.privacy;
 
 import android.app.Activity;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.os.Handler;
@@ -8,7 +9,6 @@
 import android.widget.FrameLayout;
 
 import com.mopub.common.test.support.SdkTestRunner;
-import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
 import org.junit.Before;
@@ -18,12 +18,11 @@
 import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 
-import java.lang.reflect.Field;
-
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
 @RunWith(SdkTestRunner.class)
@@ -31,29 +30,36 @@
 public class ConsentDialogActivityTest {
     private static final String HTML = "some_html";
 
-    private Context context;
+    private Context mContext;
 
     private ActivityController<ConsentDialogActivity> activityController;
     private ConsentDialogActivity subject;
-    private Intent intent;
 
     @Before
     public void setUp() throws Exception {
-        context = Robolectric.buildActivity(Activity.class).create().get();
-        intent = ConsentDialogActivity.createIntent(context, HTML);
+        mContext = Robolectric.buildActivity(Activity.class).create().get();
         activityController = Robolectric.buildActivity(ConsentDialogActivity.class);
     }
 
+    @Test
+    public void start_withValidParameters_shouldStartActivity() {
+        Context context = spy(mContext);
+        ConsentDialogActivity.start(context, HTML);
+        verify(context).startActivity(any(Intent.class));
+    }
+
     @Test
     public void createIntent_correctParameters_shouldCreateValidIntent() {
-        intent = ConsentDialogActivity.createIntent(context, HTML);
+        Intent intent = ConsentDialogActivity.createIntent(mContext, HTML);
         assertThat(intent.getStringExtra("html-page-content")).isEqualTo(HTML);
-        assertThat(intent.getComponent()).isNotNull();
-        assertThat(intent.getComponent().getClassName()).isEqualTo(ConsentDialogActivity.class.getCanonicalName());
+        ComponentName componentName = intent.getComponent();
+        assertNotNull(componentName);
+        assertThat(componentName.getClassName()).isEqualTo(ConsentDialogActivity.class.getCanonicalName());
     }
 
     @Test
     public void onCreate_shouldSetContentView() {
+        Intent intent = ConsentDialogActivity.createIntent(mContext, HTML);
         subject = activityController.get();
         subject.setIntent(intent);
         subject.onCreate(null);
@@ -63,44 +69,39 @@ public void onCreate_shouldSetContentView() {
     }
 
     @Test
-    public void setCloseButtonVisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+    public void setCloseButtonVisible_shouldCallViewAndClearHandler() {
         subject = activityController.create().get();
 
         Handler handler = mock(Handler.class);
         ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
 
-        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
-        fieldHandler.set(subject, handler);
-
-        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
-        fieldLayout.set(subject, dialogLayout);
+        subject.mCloseButtonHandler = handler;
+        subject.mView = dialogLayout;
 
         subject.setCloseButtonVisibility(true);
 
-        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
-        verify(dialogLayout, times(1)).setCloseVisible(true);
+        verify(handler).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout).setCloseVisible(true);
     }
 
     @Test
-    public void setCloseButtonInvisible_shouldCallViewAndClearHandler() throws NoSuchFieldException, IllegalAccessException {
+    public void setCloseButtonInvisible_shouldCallViewAndClearHandler() {
         subject = activityController.create().get();
 
         Handler handler = mock(Handler.class);
         ConsentDialogLayout dialogLayout = mock(ConsentDialogLayout.class);
 
-        Field fieldHandler = Reflection.getPrivateField(ConsentDialogActivity.class, "mCloseButtonHandler");
-        fieldHandler.set(subject, handler);
-
-        Field fieldLayout = Reflection.getPrivateField(ConsentDialogActivity.class, "mView");
-        fieldLayout.set(subject, dialogLayout);
+        subject.mCloseButtonHandler = handler;
+        subject.mView = dialogLayout;
 
         subject.setCloseButtonVisibility(false);
 
-        verify(handler, times(1)).removeCallbacks(any(Runnable.class));
-        verify(dialogLayout, times(1)).setCloseVisible(false);
+        verify(handler).removeCallbacks(any(Runnable.class));
+        verify(dialogLayout).setCloseVisible(false);
     }
 
     private FrameLayout getContentView() {
         return (FrameLayout) ((ViewGroup) subject.findViewById(android.R.id.content)).getChildAt(0);
     }
+
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
new file mode 100644
index 00000000..3555f355
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogControllerTest.java
@@ -0,0 +1,205 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+import android.content.Intent;
+import android.net.Uri;
+
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Intents;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.MoPubErrorCode;
+import com.mopub.network.MoPubNetworkError;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MoPubRequestQueueTest;
+import com.mopub.network.Networking;
+import com.mopub.volley.VolleyError;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mockito;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static com.mopub.network.MoPubNetworkError.Reason.BAD_BODY;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest({Networking.class, Intents.class})
+public class ConsentDialogControllerTest {
+    private static final String AD_UNIT_ID = "ad_unit_id";
+    private static final String HTML_TEXT = "html_text";
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private ConsentDialogResponse dialogResponse;
+    private ConsentDialogController subject;
+    private PersonalInfoData personalInfoData;
+
+    // mock objects
+    private MoPubRequestQueue mockRequestQueue;
+    private ConsentDialogListener mockDialogListener;
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(Activity.class).get();
+        Context context = activity.getApplicationContext();
+        mockRequestQueue = Mockito.mock(MoPubRequestQueueTest.TestMoPubRequestQueue.class);
+        mockDialogListener = Mockito.mock(ConsentDialogListener.class);
+        dialogResponse = new ConsentDialogResponse(HTML_TEXT);
+        personalInfoData = new PersonalInfoData(context, AD_UNIT_ID);
+
+        PowerMockito.mockStatic(Networking.class);
+        when(Networking.getRequestQueue(context)).thenReturn(mockRequestQueue);
+        when(Networking.getScheme()).thenReturn(Constants.HTTPS);
+
+        PowerMockito.mockStatic(Intents.class);
+
+        subject = new ConsentDialogController(context);
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsFalse_whenRequestInFlightIsFalse_shouldAddRequestToNetworkQueue() {
+        ArgumentCaptor<ConsentDialogRequest> requestCaptor = ArgumentCaptor.forClass(ConsentDialogRequest.class);
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        assertThat(subject.mRequestInFlight).isTrue();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockRequestQueue).add(requestCaptor.capture());
+        ConsentDialogRequest request = requestCaptor.getValue();
+        String originalUrl = request.getOriginalUrl();
+        String minUrl = generateTestUrl();
+        assertThat(minUrl).isEqualTo(originalUrl);
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsTrue_whenRequestInFlightIsFalse_shouldNotAddRequestToNetworkQueue() {
+        subject.mReady = true;
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockDialogListener).onConsentDialogLoaded(); // should call listener immediately
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void loadConsentDialog_whenReadyIsTrue_withListenerNotSet_shouldNotCrash() {
+        subject.mReady = true;
+
+        subject.loadConsentDialog(null, true, personalInfoData);
+
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void loadConsentDialog_whenRequestInFlightIsTrue_shouldNotCreateNewRequest_shouldNotCallListener() {
+        subject.mRequestInFlight = true;
+
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockRequestQueue, never()).add(any(ConsentDialogRequest.class));
+    }
+
+    @Test
+    public void onSuccess_withValidResponse_shouldCallConsentDialogLoaded() {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(dialogResponse);
+
+        assertThat(subject.mReady).isTrue();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockDialogListener).onConsentDialogLoaded();
+        verify(mockDialogListener, never()).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onSuccess_withEmptyResponse_shouldNotCallConsentDialogLoaded() {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(new ConsentDialogResponse(""));
+
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onErrorResponse_shouldResetState_shouldCallDialogFailed() {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new VolleyError());
+
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(any(MoPubErrorCode.class));
+    }
+
+    @Test
+    public void onErrorResponse_withErrorBadBody_shouldResetState_shouldCallDialogFailed() {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new MoPubNetworkError(BAD_BODY));
+
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verify(mockDialogListener, never()).onConsentDialogLoaded();
+        verify(mockDialogListener).onConsentDialogLoadFailed(MoPubErrorCode.INTERNAL_ERROR);
+    }
+
+    @Test
+    public void showConsentDialog_whenDataIsReady_shouldStartActivity_shouldResetControllerState() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onSuccess(dialogResponse);
+
+        subject.showConsentDialog();
+
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verifyStatic();
+        Intents.startActivity(any(Context.class), any(Intent.class));
+    }
+
+    @Test
+    public void showConsentDialog_whenDataIsNotReady_shouldNotStartActivity() throws Exception {
+        subject.loadConsentDialog(mockDialogListener, true, personalInfoData);
+        subject.onErrorResponse(new MoPubNetworkError(BAD_BODY));
+
+        subject.showConsentDialog();
+
+        assertThat(subject.mReady).isFalse();
+        assertThat(subject.mRequestInFlight).isFalse();
+        verifyStatic(never());
+        Intents.startActivity(any(Context.class), any(Intent.class));
+    }
+
+    // test utils
+    private String generateTestUrl() {
+        return "https://" + Constants.HOST + "/m/gdpr_consent_dialog" +
+                "?id=" + Uri.encode(AD_UNIT_ID) +
+                "&current_consent_status=unknown" +
+                "&nv=" + Uri.encode(MoPub.SDK_VERSION) +
+                "&language=en" +
+                "&gdpr_applies=1" +
+                "&force_gdpr_applies=0" +
+                "&bundle=com.mopub.mobileads";
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
index f3907ced..9d49474d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogRequestTest.java
@@ -29,7 +29,7 @@
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
 public class ConsentDialogRequestTest {
-    private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?adunit_id=testAdUnitId&nv=5.0.0&language=en";
+    private static final String URL = "https://"+ Constants.HOST+"/m/gdpr_consent_dialog?id=testAdUnitId&nv=5.0.0&language=en";
     private static final String HTML = "html-body-text";
     private static final String BODY = "{ dialog_html : '" + HTML + "' }";
 
@@ -56,7 +56,7 @@ public void constructor_shouldSetParametersCorrectly() {
     }
 
     @Test
-    public void parseNetworkResponse_validBody_shouldSucceed() {
+    public void parseNetworkResponse_withValidBody_shouldSucceed() {
         NetworkResponse testResponse = new NetworkResponse(BODY.getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -65,7 +65,7 @@ public void parseNetworkResponse_validBody_shouldSucceed() {
     }
 
     @Test
-    public void parseNetworkResponse_emptyBody_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withEmptyBody_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -75,7 +75,7 @@ public void parseNetworkResponse_emptyBody_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void parseNetworkResponse_bodyBrokenJson_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withBrokenJsonBody_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("{ html - 'body' }".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -85,7 +85,7 @@ public void parseNetworkResponse_bodyBrokenJson_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void parseNetworkResponse_jsonNoHtmlTag_shouldReturnErrorBadBody() {
+    public void parseNetworkResponse_withJsonNoHtmlTag_shouldReturnErrorBadBody() {
         NetworkResponse testResponse = new NetworkResponse("{ k: 1 }".getBytes(Charset.defaultCharset()));
         final Response<ConsentDialogResponse> response = subject.parseNetworkResponse(testResponse);
 
@@ -95,7 +95,7 @@ public void parseNetworkResponse_jsonNoHtmlTag_shouldReturnErrorBadBody() {
     }
 
     @Test
-    public void deliverResponse_validListener_callsListener() {
+    public void deliverResponse_withValidListener_shouldCallListener() {
         ConsentDialogResponse response = new ConsentDialogResponse("html-text");
         subject.deliverResponse(response);
 
@@ -103,7 +103,7 @@ public void deliverResponse_validListener_callsListener() {
     }
 
     @Test
-    public void deliverResponse_nullListener_doesntCrash() {
+    public void deliverResponse_withNullListener_shouldNotCrash() {
         subject = new ConsentDialogRequest(activity, URL, null);
         ConsentDialogResponse response = new ConsentDialogResponse("html-text");
         subject.deliverResponse(response);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
new file mode 100644
index 00000000..dd507068
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/ConsentDialogUrlGeneratorTest.java
@@ -0,0 +1,152 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.mobileads.BuildConfig;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.annotation.Config;
+
+import java.util.Map;
+
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_NO;
+import static com.mopub.common.privacy.ConsentStatus.EXPLICIT_YES;
+import static com.mopub.common.privacy.ConsentStatus.UNKNOWN;
+import static com.mopub.common.test.support.UrlSupport.HOST_KEY;
+import static com.mopub.common.test.support.UrlSupport.PATH_KEY;
+import static com.mopub.common.test.support.UrlSupport.SCHEME_KEY;
+import static com.mopub.common.test.support.UrlSupport.urlToMap;
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+
+@SuppressWarnings("ConstantConditions")
+@RunWith(RobolectricTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(ClientMetadata.class)
+public class ConsentDialogUrlGeneratorTest {
+    private static final String AD_UNIT_ID = "ad_unit_id";
+    private static final String CURRENT_LANGUAGE = "current_language";
+    private static final String BUNDLE = "test.bundle";
+    private static final String POLICY_VERSION = "policy.version";
+    private static final String VENDOR_LIST_VERSION = "vendor.list.version";
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    private Context context;
+    private ConsentDialogUrlGenerator subject;
+
+    @Before
+    public void setup() {
+        Activity activity = Robolectric.buildActivity(Activity.class).get();
+        context = activity.getApplicationContext();
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        PowerMockito.when(ClientMetadata.getCurrentLanguage(context)).thenReturn(CURRENT_LANGUAGE);
+        ClientMetadata mockClientMetadata = PowerMockito.mock(ClientMetadata.class);
+        PowerMockito.when(mockClientMetadata.getAppPackageName()).thenReturn(BUNDLE);
+        PowerMockito.when(ClientMetadata.getInstance(any(Context.class))).thenReturn(
+                mockClientMetadata);
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withContextNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(null, AD_UNIT_ID, UNKNOWN.getValue());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withAdUnitIdlNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(context, null, UNKNOWN.getValue());
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void constructor_withConsentStatusNull_shouldThrowException() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, null);
+    }
+
+    @Test
+    public void generateUrlString_withMinimumParametersSet_shouldGenerateValidUrl() {
+        String validUrl = createTestUrl();
+
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, UNKNOWN.getValue());
+        String url = subject.generateUrlString(Constants.HOST);
+        assertThat(url).isEqualTo(validUrl);
+    }
+
+    @Test
+    public void generateUrlString_withAllParameters_shouldGenerateValidUrl() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, EXPLICIT_YES.getValue());
+        subject.withConsentedPrivacyPolicyVersion(POLICY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withForceGdprApplies(true)
+                .withGdprApplies(true);
+
+        String url = subject.generateUrlString(Constants.HOST);
+        Map<String, String> map = urlToMap(url);
+
+        assertThat(map.get(HOST_KEY)).isEqualTo(Constants.HOST);
+        assertThat(map.get(SCHEME_KEY)).isEqualTo(Constants.HTTPS);
+        assertThat(map.get(PATH_KEY)).isEqualTo(Constants.GDPR_CONSENT_HANDLER);
+        assertThat(map.get("id")).isEqualTo(AD_UNIT_ID);
+        assertThat(map.get("current_consent_status")).isEqualTo(EXPLICIT_YES.getValue());
+        assertThat(map.get("nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(map.get("language")).isEqualTo(CURRENT_LANGUAGE);
+        assertThat(map.get("gdpr_applies")).isEqualTo("1");
+        assertThat(map.get("force_gdpr_applies")).isEqualTo("1");
+        assertThat(map.get("consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(map.get("consented_privacy_policy_version")).isEqualTo(POLICY_VERSION);
+        assertThat(map.get("bundle")).isEqualTo(BUNDLE);
+        assertThat(map.size()).isEqualTo(12);
+    }
+
+    @Test
+    public void generateUrlString_withGdprAppliesNotSet_shouldNotIncludeGdprParam() {
+        subject = new ConsentDialogUrlGenerator(context, AD_UNIT_ID, EXPLICIT_NO.getValue());
+        subject.withConsentedPrivacyPolicyVersion(POLICY_VERSION)
+                .withConsentedVendorListVersion(VENDOR_LIST_VERSION)
+                .withForceGdprApplies(false);
+
+        String url = subject.generateUrlString(Constants.HOST);
+        Map<String, String> map = urlToMap(url);
+
+        assertThat(map.get(HOST_KEY)).isEqualTo(Constants.HOST);
+        assertThat(map.get(SCHEME_KEY)).isEqualTo(Constants.HTTPS);
+        assertThat(map.get(PATH_KEY)).isEqualTo(Constants.GDPR_CONSENT_HANDLER);
+        assertThat(map.get("id")).isEqualTo(AD_UNIT_ID);
+        assertThat(map.get("current_consent_status")).isEqualTo(EXPLICIT_NO.getValue());
+        assertThat(map.get("nv")).isEqualTo(MoPub.SDK_VERSION);
+        assertThat(map.get("language")).isEqualTo(CURRENT_LANGUAGE);
+        assertThat(map.get("gdpr_applies")).isEqualTo(null);
+        assertThat(map.get("force_gdpr_applies")).isEqualTo("0");
+        assertThat(map.get("consented_vendor_list_version")).isEqualTo(VENDOR_LIST_VERSION);
+        assertThat(map.get("consented_privacy_policy_version")).isEqualTo(POLICY_VERSION);
+        assertThat(map.get("bundle")).isEqualTo(BUNDLE);
+        assertThat(map.size()).isEqualTo(11);
+    }
+
+    // unit test utils
+    private String createTestUrl() {
+        return "https://" + Constants.HOST + "/m/gdpr_consent_dialog" +
+                "?id=" + AD_UNIT_ID +
+                "&current_consent_status=" + UNKNOWN.getValue() +
+                "&nv=" + MoPub.SDK_VERSION +
+                "&language=" + CURRENT_LANGUAGE +
+                "&force_gdpr_applies=" + "0" +
+                "&bundle=" + BUNDLE;
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
index 71d84100..fcddfac4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/MoPubIdentifierTest.java
@@ -7,6 +7,7 @@
 import android.support.annotation.NonNull;
 
 import com.mopub.common.GpsHelper;
+import com.mopub.common.SdkInitializationListener;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
 
@@ -19,7 +20,6 @@
 import org.powermock.api.mockito.PowerMockito;
 import org.powermock.core.classloader.annotations.PowerMockIgnore;
 import org.powermock.core.classloader.annotations.PrepareForTest;
-
 import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
@@ -34,6 +34,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.verify;
+import static org.powermock.api.mockito.PowerMockito.verifyStatic;
 
 @RunWith(RobolectricTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -44,6 +45,7 @@
     public PowerMockRule rule = new PowerMockRule();
 
     private MoPubIdentifier.AdvertisingIdChangeListener idChangeListener;
+    private SdkInitializationListener initializationListener;
 
     private Context context;
     private MoPubIdentifier subject;
@@ -58,6 +60,7 @@ public void setup() {
         Activity activity = Robolectric.buildActivity(Activity.class).get();
         context = activity.getApplicationContext();
         idChangeListener = mock(MoPubIdentifier.AdvertisingIdChangeListener.class);
+        initializationListener = mock(SdkInitializationListener.class);
     }
 
     @After
@@ -71,7 +74,7 @@ public void tearDown() {
     }
 
     @Test
-    public void constructor_nonFirstStart_shouldNotStartRefreshThread_shouldReadSharedPref() throws Exception {
+    public void constructor_withNotExpiredOldId_withNoAmazon_withNoGoogle_shouldReadSharedPref() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, true);
 
         subject = new MoPubIdentifier(context);
@@ -84,7 +87,7 @@ public void constructor_nonFirstStart_shouldNotStartRefreshThread_shouldReadShar
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_expiredId_shouldCallListener() throws Exception {
+    public void constructor_withExpiredOldId_withNoAmazon_withNoGoogle_shouldCallOnIdChanged() throws Exception {
         AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -106,23 +109,7 @@ public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_expiredId_sh
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_expiredId_listenerNotSet_shouldNotCrash() throws Exception {
-        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
-
-        subject = new MoPubIdentifier(context);
-        subject.setIdChangeListener(null);
-        subject.refreshAdvertisingInfoBackgroundThread();
-        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
-
-        AdvertisingId newId = subject.getAdvertisingInfo();
-
-        assertThat(newId.mMopubId).isNotEqualTo(savedId.mMopubId);
-        assertThat(newId.mAdvertisingId).isNotEqualTo(savedId.mAdvertisingId);
-        assertThat(newId.isDoNotTrack()).isFalse();
-    }
-
-    @Test
-    public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_nonExpiredId_shouldCallListenerOnlyOnce() throws Exception {
+    public void constructor_withNotExpiredOldid_withNoAmazon_withNoGoogle_shouldCallOnIdChanngedOnlyOnce() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
 
         subject = new MoPubIdentifier(context, idChangeListener);
@@ -140,9 +127,23 @@ public void refreshAdvertisingInfoBackgroundThread_noAmazonNoGoogle_nonExpiredId
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_amazonNoGoogle_shoulUseAmazonId() throws Exception {
+    public void constructor_withExpiredId_withNoListenerSet_shouldNotCrash_shouldRotateMopubId() throws Exception {
+        AdvertisingId savedId = writeExpiredAdvertisingInfoToSharedPreferences(context, true);
+
+        subject = new MoPubIdentifier(context);
+        subject.setIdChangeListener(null);
+        AdvertisingId newId = subject.getAdvertisingInfo();
+
+        assertThat(newId.mMopubId).isNotEqualTo(savedId.mMopubId);
+        assertThat(newId.mAdvertisingId).isNotEqualTo(savedId.mAdvertisingId);
+        assertThat(newId.isDoNotTrack()).isFalse();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void constructor_withGoogle_withNoAmazon_withDoNotTrackTrue_shoulUseGoogleId() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupAmazonAdvertisingInfo(false);
+        setupGooglePlayService(context, true);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -158,15 +159,16 @@ public void refreshAdvertisingInfoBackgroundThread_amazonNoGoogle_shoulUseAmazon
         assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
 
-        assertThat(newId.isDoNotTrack()).isFalse();
-        assertThat(newId.mAdvertisingId).isEqualTo(AMAZON_AD_ID);
+        assertThat(newId.isDoNotTrack()).isTrue();
+        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("mopub:" + savedId.mMopubId);
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackFalse_shoulUseGoogleId() throws Exception {
+    public void constructor_withAmazon_withNoGoogle_shoulUseAmazonId() throws Exception {
         AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupGooglePlayService(context, false);
+        setupAmazonAdvertisingInfo(false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -183,15 +185,14 @@ public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackFals
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
 
         assertThat(newId.isDoNotTrack()).isFalse();
-        assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
+        assertThat(newId.mAdvertisingId).isEqualTo(AMAZON_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
-        assertThat(newId.getIdWithPrefix(true)).isEqualTo("ifa:" + GOOGLE_AD_ID);
     }
 
     @Test
-    public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackTrue_shoulUseGoogleId() throws Exception {
-        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, false);
-        setupGooglePlayService(context, true);
+    public void constructor_withGoogle_withNoAmazon_withDoNotTrackFalse_shoulUseGoogleId() throws Exception {
+        AdvertisingId savedId = writeAdvertisingInfoToSharedPreferences(context, true);
+        setupGooglePlayService(context, false);
 
         ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
         ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
@@ -202,19 +203,21 @@ public void refreshAdvertisingInfoBackgroundThread_googleNoAmazon_doNotTrackTrue
         AdvertisingId oldId = oldIdClientCaptor.getValue();
         AdvertisingId newId = newIdClientCaptor.getValue();
 
+        // verify that oldId is from SharedPreferences
         assertThat(oldId.mMopubId).isEqualTo(savedId.mMopubId);
         assertThat(oldId.mAdvertisingId).isEqualTo(savedId.mAdvertisingId);
+        assertThat(oldId.isDoNotTrack()).isTrue();
         assertThat(oldId.isDoNotTrack()).isEqualTo(savedId.isDoNotTrack());
         assertThat(oldId.getIdWithPrefix(true)).isEqualTo(savedId.getIdWithPrefix(true));
-
-        assertThat(newId.isDoNotTrack()).isTrue();
+        // verify that newId is from Google Play Services
+        assertThat(newId.isDoNotTrack()).isFalse();
         assertThat(newId.mAdvertisingId).isEqualTo(GOOGLE_AD_ID);
         assertThat(newId.mMopubId).isEqualTo(savedId.mMopubId);
-        assertThat(newId.getIdWithPrefix(true)).isEqualTo("mopub:" + savedId.mMopubId);
+        assertThat(newId.getIdWithPrefix(true)).isEqualTo("ifa:" + GOOGLE_AD_ID);
     }
 
     @Test
-    public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
+    public void sharedPreferences_WriteAndReadAdvertisingId_shouldMatch() throws Exception {
         final long time = Calendar.getInstance().getTimeInMillis();
         AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
                 TEST_MOPUB_ID,
@@ -230,7 +233,7 @@ public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
                 .execute();
 
         // read from shared preferences
-        AdvertisingId adConfig2 = (AdvertisingId)  new Reflection.MethodBuilder(null, "readIdFromStorage")
+        AdvertisingId adConfig2 = (AdvertisingId) new Reflection.MethodBuilder(null, "readIdFromStorage")
                 .setAccessible()
                 .setStatic(MoPubIdentifier.class)
                 .addParam(Context.class, context)
@@ -243,6 +246,186 @@ public void sharedPreferences_WriteAndRead_ShouldMatch() throws Exception {
         assertThat(adConfig2.mLastRotation.getTimeInMillis()).isEqualTo(time);
     }
 
+    @Test
+    public void isPlayServiceAvailable_whenGoogleAvailable_shouldCallGpsHelper_shouldReturnTrue() {
+        subject = new MoPubIdentifier(context, idChangeListener);
+        assertThat(subject.isPlayServicesAvailable()).isFalse();
+
+        setupGooglePlayService(context, false);
+
+        assertThat(subject.isPlayServicesAvailable()).isTrue();
+        verifyStatic();
+        GpsHelper.isPlayServicesAvailable(any(Context.class));
+    }
+
+    @Test
+    public void setAdvertisingInfo_whenCalledTwice_shouldCallInitializationListenerOnce_validateSavedAdvertisingIds() throws Exception {
+        final AdvertisingId adId1 = new AdvertisingId("ifa1", "mopub1", false, Calendar.getInstance().getTimeInMillis());
+        final AdvertisingId adId2 = new AdvertisingId("ifa2", "mopub2", false, Calendar.getInstance().getTimeInMillis());
+
+        writeAdvertisingInfoToSharedPreferences(context, false);
+        subject = new MoPubIdentifier(context);
+        subject.setIdChangeListener(idChangeListener);
+        subject.setInitializationListener(initializationListener);
+
+        subject.setAdvertisingInfo(adId1);
+
+        verify(idChangeListener).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+        verify(initializationListener).onInitializationFinished();
+        AdvertisingId storedId = MoPubIdentifier.readIdFromStorage(context);
+        assertThat(adId1.equals(storedId)).isTrue();
+
+        reset(initializationListener);
+        reset(idChangeListener);
+
+        // call setAdvertisingInfo second time
+        subject.setAdvertisingInfo(adId2);
+
+        verify(idChangeListener).onIdChanged(adId1, adId2);
+        verify(initializationListener, never()).onInitializationFinished();
+        assertThat(adId2.equals(MoPubIdentifier.readIdFromStorage(context))).isTrue();
+    }
+
+    @Test
+    public void rotateMopubId_withExpiredOldId_shouldRotateMoPubId() {
+        subject = new MoPubIdentifier(context);
+        AdvertisingId originalId = AdvertisingId.generateExpiredAdvertisingId();
+        subject.setAdvertisingInfo(originalId);
+        subject.setIdChangeListener(idChangeListener);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject.rotateMopubId();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(originalId.equals(oldId)).isTrue();
+    }
+
+    @Test
+    public void rotateMopubId_withNotExpiredOldId_shouldNotRotateMoPubId() {
+        subject = new MoPubIdentifier(context);
+        AdvertisingId oldId = AdvertisingId.generateFreshAdvertisingId();
+        subject.setAdvertisingInfo(oldId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.rotateMopubId();
+
+        verify(idChangeListener, never()).onIdChanged(any(AdvertisingId.class), any(AdvertisingId.class));
+        AdvertisingId newId = subject.getAdvertisingInfo();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(oldId.equals(newId)).isTrue();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withGoogle_withNoAmazon_shouldRotateMoPubId() {
+        AdvertisingId expiredId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupGooglePlayService(context, true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(expiredId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(expiredId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isFalse(); // rotation
+        assertThat(newId.mAdvertisingId.equals(GOOGLE_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withNoGoogle_withNoAmazon_shouldRotateMoPubId() {
+        AdvertisingId originalId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        subject.setAdvertisingInfo(originalId);
+        subject.setIdChangeListener(idChangeListener);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(newId.isRotationRequired()).isFalse();
+        assertThat(originalId.equals(oldId)).isTrue();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withGoogle_withNoAmazon_shouldNotRotateMoPubId() {
+        AdvertisingId freshId = AdvertisingId.generateFreshAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupGooglePlayService(context, true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(freshId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(freshId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isTrue(); // no rotation
+        assertThat(newId.mAdvertisingId.equals(GOOGLE_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withExpiredId_withAmazon_withNoGoogle_shouldRotateMoPubId() {
+        AdvertisingId expiredId = AdvertisingId.generateExpiredAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupAmazonAdvertisingInfo(true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(expiredId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(expiredId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isFalse(); // rotation
+        assertThat(newId.mAdvertisingId.equals(AMAZON_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    @Test
+    public void refreshAdvertisingInfoBackgroundThread_withNotExpiredId_withAmazon_withNoGoogle_shouldNotRotateMoPubId() {
+        AdvertisingId freshId = AdvertisingId.generateFreshAdvertisingId();
+        subject = new MoPubIdentifier(context);
+        setupAmazonAdvertisingInfo(true);
+        ArgumentCaptor<AdvertisingId> oldIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        ArgumentCaptor<AdvertisingId> newIdClientCaptor = ArgumentCaptor.forClass(AdvertisingId.class);
+        subject.setAdvertisingInfo(freshId);
+        subject.setIdChangeListener(idChangeListener);
+
+        subject.refreshAdvertisingInfoBackgroundThread();
+
+        verify(idChangeListener).onIdChanged(oldIdClientCaptor.capture(), newIdClientCaptor.capture());
+        AdvertisingId oldId = oldIdClientCaptor.getValue();
+        AdvertisingId newId = newIdClientCaptor.getValue();
+        assertThat(oldId.equals(freshId)).isTrue();
+        assertThat(oldId.mMopubId.equals(newId.mMopubId)).isTrue(); // no rotation
+        assertThat(newId.mAdvertisingId.equals(AMAZON_AD_ID)).isTrue();
+        assertThat(newId.mDoNotTrack).isTrue();
+        assertThat(newId.isRotationRequired()).isFalse();
+    }
+
+    // Unit tests utility functions
     public static void setupGooglePlayService(Context context, boolean limitAdTracking) {
         PowerMockito.mockStatic(GpsHelper.class);
         PowerMockito.when(GpsHelper.isPlayServicesAvailable(context)).thenReturn(true);
@@ -274,10 +457,12 @@ public static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context cont
         final long time = Calendar.getInstance().getTimeInMillis();
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
+
     private static AdvertisingId writeExpiredAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack) throws Exception {
-        final long time = Calendar.getInstance().getTimeInMillis()-AdvertisingId.ROTATION_TIME_MS;
+        final long time = Calendar.getInstance().getTimeInMillis() - AdvertisingId.ROTATION_TIME_MS;
         return writeAdvertisingInfoToSharedPreferences(context, doNotTrack, time);
     }
+
     private static AdvertisingId writeAdvertisingInfoToSharedPreferences(Context context, boolean doNotTrack, long time) throws Exception {
         AdvertisingId adConfig = new AdvertisingId(TEST_IFA_ID,
                 TEST_MOPUB_ID,
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
index 7533b233..86a3fa65 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/PersonalInfoManagerTest.java
@@ -1,35 +1,822 @@
 package com.mopub.common.privacy;
 
 import android.app.Activity;
+import android.content.Context;
+import android.os.SystemClock;
 
+import com.mopub.common.ClientMetadata;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.network.MoPubRequestQueue;
+import com.mopub.network.MoPubRequestQueueTest;
+import com.mopub.network.Networking;
+import com.mopub.volley.Request;
 
+import org.junit.After;
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
 @Config(constants = BuildConfig.class)
+@PrepareForTest({ClientMetadata.class, Networking.class, AdvertisingId.class})
 public class PersonalInfoManagerTest {
 
-    Activity activity;
-    PersonalInfoManager subject;
+    private static int DEFAULT_TIME_MS = 300000;
+    private static int SHORT_TIME_MS = 150000;
+    private static int LONG_TIME_MS = 310000;
+
+    private Activity activity;
+    private PersonalInfoManager subject;
+    private PersonalInfoData personalInfoData;
+    private ConsentStatusChangeListener mockConsentStatusChangeListener;
+    private ClientMetadata mockClientMetadata;
+    private MoPubIdentifier mockMoPubIdentifier;
+    private AdvertisingId mockAdvertisingId;
+    private MoPubRequestQueue mockRequestQueue;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
 
     @Before
     public void setUp() {
         activity = Robolectric.buildActivity(Activity.class).get();
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        mockClientMetadata = PowerMockito.mock(ClientMetadata.class);
+        mockMoPubIdentifier = mock(MoPubIdentifier.class);
+        mockAdvertisingId = PowerMockito.mock(AdvertisingId.class);
+        PowerMockito.when(mockAdvertisingId.getIfaWithPrefix()).thenReturn("udid");
+
+        PowerMockito.when(ClientMetadata.getInstance(any(Context.class))).thenReturn(
+                mockClientMetadata);
+        PowerMockito.when(mockClientMetadata.getMoPubIdentifier()).thenReturn(mockMoPubIdentifier);
+        when(mockMoPubIdentifier.getAdvertisingInfo()).thenReturn(mockAdvertisingId);
+
+        PowerMockito.mockStatic(Networking.class);
+        mockRequestQueue = mock(MoPubRequestQueueTest.TestMoPubRequestQueue2.class);
+        when(Networking.getRequestQueue(any(Context.class))).thenReturn(mockRequestQueue);
+        when(Networking.getScheme()).thenReturn("https");
+
+        subject = new PersonalInfoManager(activity, "adunit", null);
+        personalInfoData = subject.getPersonalInfoData();
+        mockConsentStatusChangeListener = mock(ConsentStatusChangeListener.class);
+        subject.subscribeConsentStatusChangeListener(mockConsentStatusChangeListener);
+    }
+
+    @After
+    public void tearDown() {
+        final PersonalInfoData personalInfoData = subject.getPersonalInfoData();
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        personalInfoData.setLastSuccessfullySyncedConsentStatus(null);
+        personalInfoData.setConsentChangeReason(null);
+        personalInfoData.setForceGdprApplies(false);
+        personalInfoData.setUdid(null);
+        personalInfoData.setLastChangedMs(null);
+        personalInfoData.setConsentStatusBeforeDnt(null);
+        personalInfoData.setWhitelisted(false);
+        personalInfoData.setCurrentVendorListVersion(null);
+        personalInfoData.setCurrentVendorListLink(null);
+        personalInfoData.setCurrentPrivacyPolicyVersion(null);
+        personalInfoData.setCurrentPrivacyPolicyLink(null);
+        personalInfoData.setCurrentVendorListIabFormat(null);
+        personalInfoData.setCurrentVendorListIabHash(null);
+        personalInfoData.setConsentedVendorListVersion(null);
+        personalInfoData.setConsentedPrivacyPolicyVersion(null);
+        personalInfoData.setConsentedVendorListIabFormat(null);
+        personalInfoData.setExtras(null);
+        personalInfoData.setShouldReacquireConsent(false);
+        personalInfoData.setGdprApplies(null);
+        personalInfoData.writeToDisk();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesNull_shouldReturnFalse() {
+        subject.getPersonalInfoData().setGdprApplies(null);
+
+        final boolean actual = subject.shouldShowConsentDialog();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesFalse_shouldReturnFalse() {
+        subject.getPersonalInfoData().setGdprApplies(false);
+
+        final boolean actual = subject.shouldShowConsentDialog();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withVariousConsentStatuses_shouldReturnCorrectValue() {
+        personalInfoData.setGdprApplies(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withShouldReacquireConsentTrue_withConsentStatusYes_withConsentStatusUnknown_shouldReturnTrue() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setShouldReacquireConsent(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.UNKNOWN);
+        assertThat(subject.shouldShowConsentDialog()).isTrue();
+    }
+
+    @Test
+    public void shouldShowConsentDialog_withGdprAppliesTrue_withShouldReacquireConsentTrue_withConsentStatusNotYesOrUnknown_shouldReturnFalse() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setShouldReacquireConsent(true);
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.shouldShowConsentDialog()).isFalse();
+    }
+
+    @Test
+    public void canCollectPersonalInformation_withGdprAppliesNull_shouldReturnFalse() {
+        personalInfoData.setGdprApplies(null);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        final boolean actual = subject.canCollectPersonalInformation();
+
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void canCollectPersonalInformation_withGdprAppliesFalse_shouldReturnTrue() {
+        personalInfoData.setGdprApplies(false);
+
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_NO);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        personalInfoData.setWhitelisted(true);
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        // It should not matter what is set. GdprApplies false means can collect personal information
+        personalInfoData.setConsentedVendorListIabFormat("abc");
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
     }
 
     @Test
-    public void shouldMakeSyncRequest_withGdprAppliesNull_shouldReturnTrue() {
-        boolean actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, 300000,
+    public void gdprApplies_withForceGdprAppliesTrue_shouldReturnTrue() {
+        personalInfoData.setForceGdprApplies(true);
+
+        personalInfoData.setGdprApplies(null);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setGdprApplies(true);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setGdprApplies(false);
+        assertThat(subject.gdprApplies()).isTrue();
+
+        personalInfoData.setConsentStatus(ConsentStatus.DNT);
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void gdprApplies_withForceGdprAppliesFalse_shouldRespectGdprApplies() {
+        personalInfoData.setForceGdprApplies(false);
+
+        personalInfoData.setGdprApplies(null);
+        assertThat(subject.gdprApplies()).isNull();
+
+        personalInfoData.setGdprApplies(false);
+        assertThat(subject.gdprApplies()).isFalse();
+
+        personalInfoData.setGdprApplies(true);
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void forceGdprApplies_withGdprAppliesFalse_shouldForceGdprToTrue_shouldFiresOnConsentStatusChangeListeners() {
+        personalInfoData.setGdprApplies(false);
+        // Precondition just to verify gdprApplies is actually false for now
+        assertThat(subject.gdprApplies()).isFalse();
+        assertThat(subject.canCollectPersonalInformation()).isTrue();
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.UNKNOWN, false);
+    }
+
+    @Test
+    public void forceGdprApplies_withForceGdprAppliesAlreadySet_shouldDoNothing() {
+        personalInfoData.setGdprApplies(false);
+        personalInfoData.setForceGdprApplies(true);
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+    }
+
+    @Test
+    public void forceGdprApplies_withGdprAppliesTrue_shouldSetForceGdprApplies_shouldNotFireOnConsentStatusChangeListeners() {
+        personalInfoData.setGdprApplies(true);
+        // Precondition just to verify gdprApplies is actually true for now
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(subject.canCollectPersonalInformation()).isFalse();
+
+        subject.forceGdprApplies();
+
+        assertThat(subject.gdprApplies()).isTrue();
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+    }
+
+    @Test
+    public void grantConsent_withWhitelistedApp_shouldTransitionToExplicitYes() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setWhitelisted(true);
+
+        subject.grantConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+    }
+
+    @Test
+    public void grantConsent_withNonWhitelistedApp_shouldTransitionToPotentialWhitelist() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setWhitelisted(false);
+
+        subject.grantConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.POTENTIAL_WHITELIST, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.POTENTIAL_WHITELIST);
+    }
+
+    @Test
+    public void grantConsent_withDnt_shouldDoNothing() {
+        when(mockAdvertisingId.isDoNotTrack()).thenReturn(true);
+
+        subject.grantConsent();
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+    }
+
+    @Test
+    public void revokeConsent_shouldSetConsentStatusToNo() {
+        subject.revokeConsent();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+    }
+
+    @Test
+    public void revokeConsent_withDnt_shouldDoNothing() {
+        when(mockAdvertisingId.isDoNotTrack()).thenReturn(true);
+
+        subject.revokeConsent();
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+    }
+
+    @Test
+    public void changeConsentStateFromDialog_withYes_shouldChangeStatusToExplicitYes() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.changeConsentStateFromDialog(ConsentStatus.EXPLICIT_YES);
+
+        verify(mockRequestQueue).add(any(Request.class));
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.GRANTED_BY_USER.getReason());
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void changeConsentStateFromDialog_withNo_shouldChangeStatusToExplicitNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.changeConsentStateFromDialog(ConsentStatus.EXPLICIT_NO);
+
+        verify(mockRequestQueue).add(any(Request.class));
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.DENIED_BY_USER.getReason());
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+    }
+
+    @Test
+    public void shouldMakeSyncRequest_withMostMajorCases_shouldReturnCorrectBoolean() {
+        boolean actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
                 null, false);
+        assertThat(actual).isTrue();
 
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                null, false);
         assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, null, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, false, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, false,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                "udid", false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true, null, DEFAULT_TIME_MS,
+                "udid", true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(false, true, true,
+                SystemClock.uptimeMillis() - SHORT_TIME_MS, DEFAULT_TIME_MS,
+                null, true);
+        assertThat(actual).isTrue();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(true, true, false,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+
+        actual = PersonalInfoManager.shouldMakeSyncRequest(true, true, true,
+                SystemClock.uptimeMillis() - LONG_TIME_MS, DEFAULT_TIME_MS,
+                null, false);
+        assertThat(actual).isFalse();
+    }
+
+    @Test
+    public void serverOverrideListener_onForceExplicitNo_withNullMessage_shouldChangeStatusToNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.getServerOverrideListener().onForceExplicitNo(null);
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.REVOKED_BY_SERVER.getReason());
+    }
+
+    @Test
+    public void serverOverrideListener_onForceExplicitNo_withAMessage_shouldChangeStatusToNo() {
+        personalInfoData.setGdprApplies(true);
+
+        subject.getServerOverrideListener().onForceExplicitNo("message");
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_NO, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.EXPLICIT_NO);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onInvalidateConsent_withNullMessage_shouldChangeStatusToUnknown() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onInvalidateConsent(null);
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo(
+                ConsentChangeReason.REACQUIRE_BY_SERVER.getReason());
+    }
+
+    @Test
+    public void serverOverrideListener_onInvalidateConsent_withAMessage_shouldChangeStatusToUnknown() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onInvalidateConsent("message");
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onReacquireConsent_withNullMessage_shouldSetReacquireConsentFlag() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onReacquireConsent(null);
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.shouldReacquireConsent()).isTrue();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isNull();
+    }
+
+    @Test
+    public void serverOverrideListener_onReacquireConsent_withAMessage_shouldSetReacquireConsentFlag_shouldSetConsentChangeReason() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+
+        subject.getServerOverrideListener().onReacquireConsent("message");
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.shouldReacquireConsent()).isTrue();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("message");
+    }
+
+    @Test
+    public void serverOverrideListener_onForceGdprApplies_shouldForceGdprApplies() {
+        personalInfoData.setGdprApplies(false);
+
+        subject.getServerOverrideListener().onForceGdprApplies();
+
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.UNKNOWN, false);
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.UNKNOWN);
+        assertThat(personalInfoData.isForceGdprApplies()).isTrue();
+        assertThat(subject.gdprApplies()).isTrue();
+    }
+
+    @Test
+    public void attemptStateTransition_withSameConsentStatus_shouldDoNothing() {
+        subject.attemptStateTransition(ConsentStatus.UNKNOWN, "no reason");
+
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+
+        personalInfoData.setCurrentPrivacyPolicyVersion("2");
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "no reason");
+        verifyZeroInteractions(mockConsentStatusChangeListener);
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToYes_shouldSetConsentedVersions_shouldSetUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo("2");
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo("3");
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void attemptStateTransition_withPotentialWhitelistToYes_shouldNotSetConsentedVersions() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.POTENTIAL_WHITELIST);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_YES, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_YES);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(
+                ConsentStatus.POTENTIAL_WHITELIST,
+                ConsentStatus.EXPLICIT_YES, true);
+    }
+
+    @Test
+    public void attemptStateTransition_withYesToDnt_shouldClearPersonalDataExceptUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentedVendorListVersion("2");
+        personalInfoData.setConsentedVendorListIabFormat("3");
+        personalInfoData.setUdid("udid");
+
+        subject.attemptStateTransition(ConsentStatus.DNT, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.DNT, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToDnt() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.DNT, "reason");
+
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isNull();
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.DNT);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.DNT, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withYesToNo_shouldClearPersonalDataExceptUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setConsentStatus(ConsentStatus.EXPLICIT_YES);
+        personalInfoData.setConsentedPrivacyPolicyVersion("1");
+        personalInfoData.setConsentedVendorListVersion("2");
+        personalInfoData.setConsentedVendorListIabFormat("3");
+        personalInfoData.setUdid("udid");
+
+        subject.attemptStateTransition(ConsentStatus.EXPLICIT_NO, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo(null);
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo(null);
+        assertThat(personalInfoData.getUdid()).isEqualTo("udid");
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(ConsentStatus.EXPLICIT_NO);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.EXPLICIT_YES,
+                ConsentStatus.EXPLICIT_NO, false);
+    }
+
+    @Test
+    public void attemptStateTransition_withUnknownToPotentialWhitelist_shouldSetConsentedVersions_shouldSetUdid() {
+        personalInfoData.setGdprApplies(true);
+        personalInfoData.setCurrentPrivacyPolicyVersion("1");
+        personalInfoData.setCurrentVendorListVersion("2");
+        personalInfoData.setCurrentVendorListIabFormat("3");
+
+        subject.attemptStateTransition(ConsentStatus.POTENTIAL_WHITELIST, "reason");
+
+        assertThat(personalInfoData.getConsentedPrivacyPolicyVersion()).isEqualTo("1");
+        assertThat(personalInfoData.getConsentedVendorListVersion()).isEqualTo("2");
+        assertThat(personalInfoData.getConsentedVendorListIabFormat()).isEqualTo("3");
+        assertThat(personalInfoData.getUdid()).isNull();
+        assertThat(personalInfoData.getConsentChangeReason()).isEqualTo("reason");
+        assertThat(subject.getPersonalInfoConsentStatus()).isEqualTo(
+                ConsentStatus.POTENTIAL_WHITELIST);
+        verify(mockConsentStatusChangeListener).onConsentStateChange(ConsentStatus.UNKNOWN,
+                ConsentStatus.POTENTIAL_WHITELIST, false);
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
new file mode 100644
index 00000000..abd1f3e7
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/privacy/SyncUrlGeneratorTest.java
@@ -0,0 +1,133 @@
+package com.mopub.common.privacy;
+
+import android.app.Activity;
+import android.content.Context;
+
+import com.mopub.common.ClientMetadata;
+import com.mopub.common.Constants;
+import com.mopub.common.MoPub;
+import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.mobileads.BuildConfig;
+import com.mopub.nativeads.NativeUrlGeneratorTest;
+import com.mopub.network.PlayServicesUrlRewriter;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
+import org.robolectric.Robolectric;
+import org.robolectric.annotation.Config;
+
+import static org.fest.assertions.api.Assertions.assertThat;
+import static org.mockito.Matchers.any;
+import static org.powermock.api.mockito.PowerMockito.mock;
+import static org.powermock.api.mockito.PowerMockito.when;
+
+@RunWith(SdkTestRunner.class)
+@Config(constants = BuildConfig.class)
+@PowerMockIgnore({"org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(ClientMetadata.class)
+public class SyncUrlGeneratorTest {
+    private static final String APP_VERSION = "appVersion";
+    private static final String AD_UNIT = "adUnit";
+    private static final String UDID = "udid";
+    private static final String LAST_CHANGED_MS = "lastChangedMs";
+    private static final String CONSENT_CHANGE_REASON = "consentChangeReason";
+    private static final String CONSENTED_VENDOR_LIST_VERSION = "consentedVendorListVersion";
+    private static final String CONSENTED_PRIVACY_POLICY_VERSION = "consentedPrivacyPolicyVersion";
+    private static final String IAB_HASH = "iabHash";
+    private static final String EXTRAS = "extras";
+
+    private Context context;
+    private SyncUrlGenerator subject;
+
+    @Rule
+    public PowerMockRule rule = new PowerMockRule();
+
+    @Before
+    public void setUp() {
+        context = Robolectric.buildActivity(Activity.class).get();
+        subject = new SyncUrlGenerator(context, ConsentStatus.UNKNOWN.getValue());
+
+        ClientMetadata clientMetadata = mock(ClientMetadata.class);
+        when(clientMetadata.getAppVersion()).thenReturn(APP_VERSION);
+
+        PowerMockito.mockStatic(ClientMetadata.class);
+        when(ClientMetadata.getInstance(any(Context.class))).thenReturn(clientMetadata);
+    }
+
+    @Test
+    public void generateUrlString_withAllParams_shouldGenerateFullUrl() {
+        subject.withAdUnitId(AD_UNIT);
+        subject.withUdid(UDID);
+        subject.withGdprApplies(true);
+        subject.withForceGdprApplies(true);
+        subject.withForceGdprAppliesChanged(true);
+        subject.withLastChangedMs(LAST_CHANGED_MS);
+        subject.withLastConsentStatus(ConsentStatus.UNKNOWN);
+        subject.withConsentChangeReason(CONSENT_CHANGE_REASON);
+        subject.withConsentedVendorListVersion(CONSENTED_VENDOR_LIST_VERSION);
+        subject.withConsentedPrivacyPolicyVersion(CONSENTED_PRIVACY_POLICY_VERSION);
+        subject.withCachedVendorListIabHash(IAB_HASH);
+        subject.withExtras(EXTRAS);
+
+        final String url = subject.generateUrlString("hostname");
+
+        assertThat(url).startsWith(
+                Constants.HTTPS + "://" + "hostname" + Constants.GDPR_SYNC_HANDLER);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "id")).isEqualTo(AD_UNIT);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "nv")).isEqualTo(
+                MoPub.SDK_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url, "udid")).isEqualTo(
+                UDID);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "current_consent_status")).isEqualTo(ConsentStatus.UNKNOWN.getValue());
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "gdpr_applies")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "force_gdpr_applies")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "forced_gdpr_applies_changed")).isEqualTo("1");
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "last_changed_ms")).isEqualTo(LAST_CHANGED_MS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consent_change_reason")).isEqualTo(CONSENT_CHANGE_REASON);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consented_vendor_list_version")).isEqualTo(CONSENTED_VENDOR_LIST_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "consented_privacy_policy_version")).isEqualTo(CONSENTED_PRIVACY_POLICY_VERSION);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "cached_vendor_list_iab_hash")).isEqualTo(IAB_HASH);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "extras")).isEqualTo(EXTRAS);
+        assertThat(NativeUrlGeneratorTest.getParameterFromRequestUrl(url,
+                "dnt")).isEqualTo(PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE);
+    }
+
+    @Test
+    public void generateUrlString_withMinimumParams_shouldGenerateValidUrl() {
+        final String url = subject.generateUrlString("minurl");
+
+        assertThat(url).isEqualTo("https://minurl/m/gdpr_sync?nv=" + MoPub.SDK_VERSION +
+        "&current_consent_status=unknown&force_gdpr_applies=0&dnt=mp_tmpl_do_not_track");
+    }
+
+    @Test
+    public void generateUrlString_withExtrasThatShouldBeUrlEncoded_shouldGenerateValidUrl() {
+        subject = new SyncUrlGenerator(context, ConsentStatus.EXPLICIT_YES.getValue());
+        subject.withExtras("!@#$%^&*()_;'[]{}|\\");
+
+        final String url = subject.generateUrlString("host");
+
+        assertThat(url).isEqualTo("https://host/m/gdpr_sync?nv=" + MoPub.SDK_VERSION +
+                "&current_consent_status=explicit_yes" +
+                "&extras=!%40%23%24%25%5E%26*()_%3B'%5B%5D%7B%7D%7C%5C" +
+                "&force_gdpr_applies=0&dnt=mp_tmpl_do_not_track");
+    }
+
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
new file mode 100644
index 00000000..49df0663
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/UrlSupport.java
@@ -0,0 +1,46 @@
+package com.mopub.common.test.support;
+
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class UrlSupport {
+    public static final String SCHEME_KEY = "$scheme_key";
+    public static final String USER_INFO_KEY = "$user_info_key";
+    public static final String HOST_KEY = "$host_key";
+    public static final String PORT_KEY = "$port_key";
+    public static final String PATH_KEY = "$path_key";
+    public static final String FRAGMENT_KEY = "$fragment_key";
+
+    public static Map<String, String> urlToMap(final String url) {
+        Map<String, String> map = new HashMap<>();
+        if (TextUtils.isEmpty(url)) {
+            return map;
+        }
+
+        final Uri uri = Uri.parse(url);
+        addPair(map, SCHEME_KEY, uri.getScheme());
+        addPair(map, USER_INFO_KEY, uri.getUserInfo());
+        addPair(map, HOST_KEY, uri.getHost());
+        addPair(map, PORT_KEY, uri.getPort() != -1 ? String.valueOf(uri.getPort()) : "");
+        addPair(map, PATH_KEY, uri.getPath());
+        addPair(map, FRAGMENT_KEY, uri.getFragment());
+
+        for (final String queryParam : uri.getQueryParameterNames()) {
+            map.put(queryParam, TextUtils.join(",", uri.getQueryParameters(queryParam)));
+        }
+        return map;
+    }
+
+    private static void addPair(@NonNull Map<String, String> map, @Nullable String key, @Nullable String value) {
+        if (TextUtils.isEmpty(key) || TextUtils.isEmpty(value)) {
+            return;
+        }
+
+        map.put(key, value);
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index 055bc8cc..26a4300f 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -98,7 +98,7 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
     public void checSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration() throws Exception {
         ShadowLog.setupLogging();
 
-        ManifestUtils.checkSdkActivitiesDeclared(context);
+        ManifestUtils.checkGdprActivitiesDeclared(context);
 
         assertLogIncludes("com.mopub.common.privacy.ConsentDialogActivity");
         assertLogDoesntInclude(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
index 5e1751d7..886f0441 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/AdViewControllerTest.java
@@ -6,6 +6,7 @@
 import android.location.Location;
 import android.net.ConnectivityManager;
 import android.net.Uri;
+import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.view.Gravity;
 import android.view.View;
@@ -13,11 +14,14 @@
 
 import com.mopub.common.AdFormat;
 import com.mopub.common.MoPub;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
+import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mobileads.test.support.ThreadUtils;
 import com.mopub.network.AdRequest;
 import com.mopub.network.AdResponse;
@@ -62,7 +66,7 @@
 
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class)
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class AdViewControllerTest {
 
     private static final int[] HTML_ERROR_CODES = new int[]{400, 401, 402, 403, 404, 405, 407, 408,
@@ -72,6 +76,8 @@
     @Mock private MoPubView mockMoPubView;
     @Mock private MoPubRequestQueue mockRequestQueue;
     private Reflection.MethodBuilder methodBuilder;
+    private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
 
     private AdResponse response;
     private Activity activity;
@@ -83,6 +89,8 @@ public void setup() throws Exception {
         activity = Robolectric.buildActivity(Activity.class).create().get();
         Shadows.shadowOf(activity).grantPermissions(android.Manifest.permission.ACCESS_NETWORK_STATE);
 
+        MoPub.initializeSdk(activity, new SdkConfiguration.Builder("adunit").build(), null);
+
         mockPersonalInfoManager = mock(PersonalInfoManager.class);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
@@ -111,11 +119,17 @@ public void setup() throws Exception {
                 .setResponseBody("testResponseBody")
                 .setServerExtras(Collections.<String, String>emptyMap())
                 .build();
+        shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager) Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
     }
 
     @After
     public void tearDown() throws Exception {
         reset(methodBuilder);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index a06edf16..13c6c4ae 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -307,6 +307,7 @@ public void onBannerLoaded_whenViewIsHtmlBannerWebView_withVisibilityImpressionT
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(mockHtmlBannerWebView));
         verify(moPubView, never()).trackNativeImpression();
+        verify(moPubView).pauseAutorefresh();
     }
 
     @Test
@@ -328,6 +329,7 @@ public void onBannerLoaded_whenViewIsNotHtmlBannerWebView_withVisibilityImpressi
         verify(moPubView).nativeAdLoaded();
         verify(moPubView).setAdContentView(eq(view));
         verify(moPubView, never()).trackNativeImpression();
+        verify(moPubView).pauseAutorefresh();
     }
 
     @Test
@@ -345,27 +347,27 @@ public void onBannerFailed_whenErrorCodeIsNull_shouldPassUnspecifiedError() thro
     }
 
     @Test
-    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay() throws Exception {
+    public void onBannerExpanded_shouldPauseRefreshAndCallAdPresentOverlay_shouldCallExpand() throws Exception {
         subject.onBannerExpanded();
 
-        verify(moPubView).setAutorefreshEnabled(eq(false));
+        verify(moPubView).expand();
         verify(moPubView).adPresentedOverlay();
     }
 
     @Test
-    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed() throws Exception {
+    public void onBannerCollapsed_shouldRestoreRefreshSettingAndCallAdClosed_shouldCallCollapse() throws Exception {
         when(moPubView.getAutorefreshEnabled()).thenReturn(true);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(true));
+        verify(moPubView).collapse();
         verify(moPubView).adClosed();
 
         when(moPubView.getAutorefreshEnabled()).thenReturn(false);
         subject.onBannerExpanded();
         reset(moPubView);
         subject.onBannerCollapsed();
-        verify(moPubView).setAutorefreshEnabled(eq(false));
+        verify(moPubView).collapse();
         verify(moPubView).adClosed();
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index f2dde7ce..2a4f862f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -10,6 +10,7 @@
 import com.mopub.common.LifecycleListener;
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubReward;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.SharedPreferencesHelper;
 import com.mopub.common.privacy.ConsentStatus;
 import com.mopub.common.privacy.MoPubIdentifierTest;
@@ -96,6 +97,13 @@
     @Before
     public void setup() throws Exception {
         mActivity = Robolectric.buildActivity(Activity.class).create().get();
+
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
+        MoPub.initializeSdk(mActivity, new SdkConfiguration.Builder("adunit").build(), null);
+
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(mActivity, false);
         MoPubRewardedVideoManager.init(mActivity);
         // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
@@ -110,6 +118,11 @@ public void setup() throws Exception {
 
         mockPersonalInfoManager = mock(PersonalInfoManager.class);
         when(mockPersonalInfoManager.getPersonalInfoConsentStatus()).thenReturn(ConsentStatus.UNKNOWN);
+        new Reflection.MethodBuilder(null, "setPersonalInfoManager")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
+                .execute();
 
         when(mockRequestQueue.add(any(Request.class))).then(new Answer<Object>() {
             @Override
@@ -136,14 +149,17 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
     }
 
     @After
-    public void tearDown() {
+    public void tearDown() throws Exception {
         // Unpause the main looper in case a test terminated while the looper was paused.
         ShadowLooper.unPauseMainLooper();
         MoPubRewardedVideoManager.getRewardedAdData().clear();
         MoPubRewardedVideoManager.getAdRequestStatusMapping().clearMapping();
         mTestCustomEventSharedPrefs.edit().clear().commit();
         MoPubIdentifierTest.clearPreferences(mActivity);
-
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
@@ -300,9 +316,6 @@ public void loadVideo_withRequestParameters_shouldGenerateUrlWithKeywords() thro
 
     @Test
     public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() throws Exception {
-        // Robolectric executes its handlers immediately, so if we want the async behavior we see
-        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
-        ShadowLooper.pauseMainLooper();
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(false);
         new Reflection.MethodBuilder(null, "setPersonalInfoManager")
                 .setStatic(MoPub.class)
@@ -310,6 +323,10 @@ public void loadVideo_withCustomerIdInRequestParameters_shouldSetCustomerId() th
                 .addParam(PersonalInfoManager.class, mockPersonalInfoManager)
                 .execute();
 
+        // Robolectric executes its handlers immediately, so if we want the async behavior we see
+        // in an actual app we have to pause the main looper until we're done successfully loading the ad.
+        ShadowLooper.pauseMainLooper();
+
         MoPubRewardedVideoManager.loadVideo("testAdUnit", new MoPubRewardedVideoManager.RequestParameters("keywords", "user_data_keywords",null, "testCustomerId"));
 
         assertThat(MoPubRewardedVideoManager.getRewardedAdData().getCustomerId()).isEqualTo("testCustomerId");
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
index 5109e309..7ab409d2 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/WebViewAdUrlGeneratorTest.java
@@ -25,17 +25,18 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPubAdvancedBidder;
 import com.mopub.common.SdkConfiguration;
+import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.common.privacy.ConsentData;
 import com.mopub.common.privacy.ConsentStatus;
-import com.mopub.common.privacy.PersonalInfoManager;
-import com.mopub.common.privacy.AdvertisingId;
 import com.mopub.common.privacy.MoPubIdentifier;
 import com.mopub.common.privacy.MoPubIdentifierTest;
+import com.mopub.common.privacy.PersonalInfoManager;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.common.util.Reflection.MethodBuilder;
 import com.mopub.common.util.Utils;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 import com.mopub.mraid.MraidNativeCommandHandler;
 import com.mopub.network.PlayServicesUrlRewriter;
@@ -50,20 +51,16 @@
 import org.robolectric.RuntimeEnvironment;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConnectivityManager;
 import org.robolectric.shadows.ShadowLocationManager;
 import org.robolectric.shadows.ShadowNetworkInfo;
 
 import static android.Manifest.permission.ACCESS_COARSE_LOCATION;
 import static android.Manifest.permission.ACCESS_FINE_LOCATION;
 import static android.Manifest.permission.ACCESS_NETWORK_STATE;
+import static android.Manifest.permission.READ_PHONE_STATE;
 import static android.net.ConnectivityManager.TYPE_DUMMY;
 import static android.net.ConnectivityManager.TYPE_ETHERNET;
 import static android.net.ConnectivityManager.TYPE_MOBILE;
-import static android.net.ConnectivityManager.TYPE_MOBILE_DUN;
-import static android.net.ConnectivityManager.TYPE_MOBILE_HIPRI;
-import static android.net.ConnectivityManager.TYPE_MOBILE_MMS;
-import static android.net.ConnectivityManager.TYPE_MOBILE_SUPL;
 import static android.net.ConnectivityManager.TYPE_WIFI;
 import static android.telephony.TelephonyManager.NETWORK_TYPE_UNKNOWN;
 import static com.mopub.common.ClientMetadata.MoPubNetworkType;
@@ -78,7 +75,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class WebViewAdUrlGeneratorTest {
 
     private static final String TEST_UDID = "20b013c721c";
@@ -90,7 +87,7 @@
     private String expectedUdid;
     private Configuration configuration;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
-    private ShadowConnectivityManager shadowConnectivityManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
     private Activity context;
     private MethodBuilder methodBuilder;
     private PersonalInfoManager mockPersonalInfoManager;
@@ -102,6 +99,7 @@ public void setup() throws Exception {
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(ACCESS_FINE_LOCATION);
         Shadows.shadowOf(context).grantPermissions(ACCESS_COARSE_LOCATION);
+        Shadows.shadowOf(context).grantPermissions(READ_PHONE_STATE);
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
@@ -157,7 +155,9 @@ public Object answer(final InvocationOnMock invocationOnMock) throws Throwable {
         expectedUdid = "sha%3A" + Utils.sha1(TEST_UDID);
         configuration = RuntimeEnvironment.application.getResources().getConfiguration();
         shadowTelephonyManager = (MoPubShadowTelephonyManager) Shadows.shadowOf((TelephonyManager) RuntimeEnvironment.application.getSystemService(Context.TELEPHONY_SERVICE));
-        shadowConnectivityManager = Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager) Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager.clearAllNetworks();
+        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
         methodBuilder = TestMethodBuilderFactory.getSingletonMock();
 
         LocationService.clearLastKnownLocation();
@@ -562,6 +562,7 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
 
         when(mockPersonalInfoManager.canCollectPersonalInformation()).thenReturn(true);
 
+        shadowConnectivityManager.setActiveNetworkInfo(null);
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_DUMMY));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.UNKNOWN).build());
@@ -569,31 +570,36 @@ public void generateAdUrl_shouldSetNetworkType() throws Exception {
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_ETHERNET));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.ETHERNET).build());
+        shadowConnectivityManager.clearAllNetworks();
 
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_WIFI));
         adUrl = generateMinimumUrlString();
         assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.WIFI).build());
 
-        // bunch of random mobile types just to make life more interesting
+        shadowConnectivityManager.setNetworkInfo(TYPE_WIFI, null);
+        shadowConnectivityManager.clearAllNetworks();
         shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE));
-        adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_DUN));
+        // bunch of random mobile types just to make life more interesting
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_GPRS));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_HIPRI));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_HSPA));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_MMS));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_EVDO_0));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGG).build());
 
-        shadowConnectivityManager.setActiveNetworkInfo(createNetworkInfo(TYPE_MOBILE_SUPL));
+        shadowConnectivityManager.setActiveNetworkInfo(
+                createNetworkInfo(TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_LTE));
         adUrl = generateMinimumUrlString();
-        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.MOBILE).build());
+        assertThat(adUrl).isEqualTo(urlBuilder.withNetworkType(MoPubNetworkType.GGGG).build());
     }
 
     @Test
@@ -991,10 +997,14 @@ private String getParameterFromRequestUrl(String requestString, String key) {
         return parameter;
     }
 
-    private NetworkInfo createNetworkInfo(int type) {
+    private NetworkInfo createNetworkInfo(int type, int subtype) {
         return ShadowNetworkInfo.newInstance(null,
                 type,
-                NETWORK_TYPE_UNKNOWN, true, true);
+                subtype, true, true);
+    }
+
+    private NetworkInfo createNetworkInfo(int type) {
+       return createNetworkInfo(type, NETWORK_TYPE_UNKNOWN);
     }
 
     private String generateMinimumUrlString() {
@@ -1019,6 +1029,7 @@ private String generateMinimumUrlString() {
         private String abt = "";
         private String currentConsentStatus = "";
         private String gdprApplies = "0";
+        private String forceGdprApplies = "0";
         private String consentedPrivacyPolicyVersion = "";
         private String consentedVendorListVersion = "";
 
@@ -1054,6 +1065,7 @@ public String build() {
                     "&udid=" + PlayServicesUrlRewriter.UDID_TEMPLATE +
                     "&dnt=" + PlayServicesUrlRewriter.DO_NOT_TRACK_TEMPLATE +
                     paramIfNotEmpty("gdpr_applies", gdprApplies) +
+                    paramIfNotEmpty("force_gdpr_applies", forceGdprApplies) +
                     paramIfNotEmpty("current_consent_status", currentConsentStatus) +
                     paramIfNotEmpty("consented_privacy_policy_version", consentedPrivacyPolicyVersion) +
                     paramIfNotEmpty("consented_vendor_list_version", consentedVendorListVersion) +
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
new file mode 100644
index 00000000..b480d308
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/test/support/MoPubShadowConnectivityManager.java
@@ -0,0 +1,38 @@
+package com.mopub.mobileads.test.support;
+
+import android.net.ConnectivityManager;
+import android.net.Network;
+import android.net.NetworkCapabilities;
+
+import org.robolectric.Shadows;
+import org.robolectric.annotation.Implementation;
+import org.robolectric.annotation.Implements;
+import org.robolectric.shadows.ShadowConnectivityManager;
+import org.robolectric.shadows.ShadowNetwork;
+
+import static android.net.ConnectivityManager.TYPE_ETHERNET;
+import static android.net.ConnectivityManager.TYPE_WIFI;
+import static android.os.Build.VERSION_CODES.LOLLIPOP;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@Implements(ConnectivityManager.class)
+public class MoPubShadowConnectivityManager extends ShadowConnectivityManager {
+
+    private final NetworkCapabilities capabilitiesEthernet;
+
+    public MoPubShadowConnectivityManager() {
+        super();
+        capabilitiesEthernet = mock(NetworkCapabilities.class);
+        when(capabilitiesEthernet.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)).thenReturn(true);
+    }
+
+    @Implementation(minSdk = LOLLIPOP)
+    public NetworkCapabilities getNetworkCapabilities(Network network) {
+        ShadowNetwork shadowNetwork = Shadows.shadowOf(network);
+        if (shadowNetwork.getNetId() == TYPE_ETHERNET) {
+            return capabilitiesEthernet;
+        }
+        return null;
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
index a4273408..94dd5518 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventNativeTest.java
@@ -49,6 +49,8 @@ public void setUp() throws Exception {
         fakeJsonObject.put("mainimage", "mainimageurl");
         fakeJsonObject.put("iconimage", "iconimageurl");
         fakeJsonObject.put("extraimage", "extraimageurl");
+        fakeJsonObject.put("privacyicon", "privacyiconurl");
+        fakeJsonObject.put("privacyclkurl", "privacyiconclickthroughurl");
 
         localExtras.put(DataKeys.JSON_BODY_KEY, fakeJsonObject);
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
index df3fb4de..b27cfb92 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubCustomEventVideoNativeTest.java
@@ -53,6 +53,8 @@ public void setUp() throws Exception {
         jsonObject.put("mainimage", "mainimageurl");
         jsonObject.put("iconimage", "iconimageurl");
         jsonObject.put("extraimage", "extraimageurl");
+        jsonObject.put("privacyicon", "privacyiconurl");
+        jsonObject.put("privacyclkurl", "privacyiconclickthroughurl");
         localExtras.put(DataKeys.JSON_BODY_KEY, jsonObject);
         localExtras.put(DataKeys.CLICK_TRACKING_URL_KEY, "clicktrackingurl");
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
index 54fef6ae..919a1cfc 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubNativeTest.java
@@ -2,9 +2,12 @@
 
 import android.app.Activity;
 
+import com.mopub.common.MoPub;
+import com.mopub.common.SdkConfiguration;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.privacy.MoPubIdentifierTest;
 import com.mopub.common.test.support.SdkTestRunner;
+import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.TestMethodBuilderFactory;
 import com.mopub.mobileads.BuildConfig;
@@ -63,6 +66,7 @@
     @Before
     public void setup() throws Exception {
         context = Robolectric.buildActivity(Activity.class).create().get();
+        MoPub.initializeSdk(context, new SdkConfiguration.Builder("adunit").build(), null);
         MoPubIdentifierTest.writeAdvertisingInfoToSharedPreferences(context, false);
         Shadows.shadowOf(context).grantPermissions(ACCESS_NETWORK_STATE);
         Shadows.shadowOf(context).grantPermissions(INTERNET);
@@ -72,9 +76,13 @@ public void setup() throws Exception {
     }
 
     @After
-    public void tearDown() {
+    public void tearDown() throws Exception {
         MoPubIdentifierTest.clearPreferences(context);
         reset(methodBuilder);
+        new Reflection.MethodBuilder(null, "clearAdvancedBidders")
+                .setStatic(MoPub.class)
+                .setAccessible()
+                .execute();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
index eb145575..b6ed548e 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubStaticNativeAdTest.java
@@ -143,6 +143,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         fakeJsonObject.put("text", "expected text");
         fakeJsonObject.put("mainimage", "expected mainimage");
         fakeJsonObject.put("iconimage", "expected iconimage");
+        fakeJsonObject.put("privacyicon", "piiimageurl");
+        fakeJsonObject.put("privacyclkurl", "piiclkurl");
 
         fakeJsonObject.put("clk", "expected clk");
 
@@ -164,6 +166,8 @@ public void loadAd_shouldSetOptionalExpectedFields() throws Exception {
         assertThat(subject.getImpressionTrackers()).containsOnly("url1", "url2");
         assertThat(subject.getCallToAction()).isEqualTo("expected ctatext");
         assertThat(subject.getStarRating()).isEqualTo(5.0);
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo("piiimageurl");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo("piiclkurl");
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
index 50f87dc8..c6daec57 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/MoPubVideoNativeAdTest.java
@@ -112,6 +112,8 @@ public void setUp() throws Exception {
         jsonObject.put("ctatext", "ctatext");
         jsonObject.put("video", "video");
         jsonObject.put("extraimage", "extraimageurl");
+        jsonObject.put("privacyicon", "piiimageurl");
+        jsonObject.put("privacyclkurl", "piiclkurl");
 
         serverExtras = new HashMap<String, String>();
         serverExtras.put("Play-Visible-Percent", "10");
@@ -197,9 +199,9 @@ public void loadAd_shouldInitializeAssetValues() {
         assertThat(subject.getIconImageUrl()).isEqualTo("iconimageurl");
         assertThat(subject.getClickDestinationUrl()).isEqualTo("clk");
         assertThat(subject.getCallToAction()).isEqualTo("ctatext");
-        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo(
-                "https://www.mopub.com/optout/");
         assertThat(subject.getVastVideo()).isEqualTo("video");
+        assertThat(subject.getPrivacyInformationIconImageUrl()).isEqualTo("piiimageurl");
+        assertThat(subject.getPrivacyInformationIconClickThroughUrl()).isEqualTo("piiclkurl");
         assertThat(subject.getExtra("extraimage")).isEqualTo("extraimageurl");
         assertThat(subject.getExtras()).hasSize(1);
     }
@@ -253,6 +255,8 @@ public void onVastVideoConfigurationPrepared_shouldConstructNativeVideoControlle
         verify(mockVastVideoConfig).getImpressionTrackers();
         verify(mockVastVideoConfig).addClickTrackers(any(List.class));
         verify(mockVastVideoConfig).setClickThroughUrl("clk");
+        verify(mockVastVideoConfig).setPrivacyInformationIconImageUrl("piiimageurl");
+        verify(mockVastVideoConfig).setPrivacyInformationIconClickthroughUrl("piiclkurl");
         verify(mockCustomEventNativeListener).onNativeAdLoaded(subject);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index 55e6d9f1..b7590b34 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -8,6 +8,7 @@
 import android.graphics.RectF;
 import android.graphics.SurfaceTexture;
 import android.graphics.drawable.GradientDrawable;
+import android.support.annotation.NonNull;
 import android.view.TextureView;
 import android.view.View;
 import android.widget.ImageView;
@@ -25,23 +26,31 @@
 import com.mopub.nativeads.NativeFullScreenVideoView.Mode;
 
 import org.junit.Before;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.mockito.Mock;
+import org.powermock.api.mockito.PowerMockito;
+import org.powermock.core.classloader.annotations.PowerMockIgnore;
+import org.powermock.core.classloader.annotations.PrepareForTest;
+import org.powermock.modules.junit4.rule.PowerMockRule;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyInt;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.reset;
 import static org.mockito.Mockito.spy;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
+@PowerMockIgnore({ "org.mockito.*", "org.robolectric.*", "android.*", "org.json.*"})
+@PrepareForTest(NativeImageHelper.class)
 public class NativeFullScreenVideoViewTest {
 
     private NativeFullScreenVideoView subject;
@@ -66,10 +75,12 @@
     private ImageView spyCtaButton;
     private ImageView spyCloseControl;
 
-    @Mock TextureView.SurfaceTextureListener mockSurfaceTextureListener;
-    @Mock SurfaceTexture mockSurfaceTexture;
-    @Mock RectF mockRectF;
-    @Mock Paint mockPaint;
+    @Rule public PowerMockRule rule = new PowerMockRule();
+
+    private TextureView.SurfaceTextureListener mockSurfaceTextureListener;
+    private SurfaceTexture mockSurfaceTexture;
+    private RectF mockRectF;
+    private Paint mockPaint;
     private Configuration configuration;
 
     @Before
@@ -90,19 +101,25 @@ public void setUp() {
         spyLoadingSpinner = spy(new ProgressBar(context));
         spyBottomGradient = spy(new ImageView(context));
         spyTopGradient = spy(new ImageView(context));
-        spyVideoProgress = spy(new VastVideoProgressBarWidget(context));
+        spyVideoProgress = spy(new VastVideoProgressBarWidgetMock(context));
         spyOverlay = spy(new View(context));
         spyPlayButton = spy(new ImageView(context));
         spyPrivacyInformationIcon = spy(new ImageView(context));
         spyCtaButton = spy(new ImageView(context));
         spyCloseControl = spy(new ImageView(context));
 
+        mockSurfaceTextureListener = mock(TextureView.SurfaceTextureListener.class);
+        mockSurfaceTexture = mock(SurfaceTexture.class);
+        mockRectF = mock(RectF.class);
+        mockPaint = mock(Paint.class);
+
         subject = new NativeFullScreenVideoView(context, Configuration.ORIENTATION_LANDSCAPE, "Learn More",
                 spyCachedImage,
                 spyVideoTexture, spyLoadingSpinner, spyBottomGradient, spyTopGradient,
                 spyVideoProgress, spyOverlay, spyPlayButton, spyPrivacyInformationIcon, spyCtaButton,
                 spyCloseControl);
 
+        PowerMockito.mockStatic(NativeImageHelper.class);
     }
 
     @Test
@@ -214,10 +231,10 @@ public void constructor_shouldAddPlayButtonToLayout() throws Exception {
     }
 
     @Test
-    public void constructor_shouldAddPrivacyInformationIconToLayout() throws Exception {
+    public void constructor_shouldSetUpPrivacyInformationIconToLayout() throws Exception {
         assertThat(subject.findViewById(spyPrivacyInformationIcon.getId())).isEqualTo(
                 spyPrivacyInformationIcon);
-        verify(spyPrivacyInformationIcon).setImageDrawable(
+        verify(spyPrivacyInformationIcon, times(0)).setImageDrawable(
                 Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
         assertThat(spyPrivacyInformationIcon.getPaddingLeft()).isEqualTo(subject.mClosePaddingPx);
         assertThat(spyPrivacyInformationIcon.getPaddingTop()).isEqualTo(subject.mClosePaddingPx);
@@ -275,6 +292,22 @@ public void constructor_shouldAddCloseControlToLayout() throws Exception {
                 .isEqualTo(spyVideoTexture.getId());
     }
 
+    @Test
+    public void setPrivacyInformationIconImageUrl_withNullUrl_shouldUseDefaultIcon() {
+        subject.setPrivacyInformationIconImageUrl(null);
+
+        verify(spyPrivacyInformationIcon).setImageDrawable(
+                Drawables.NATIVE_PRIVACY_INFORMATION_ICON.createDrawable(context));
+    }
+
+    @Test
+    public void setPrivacyInformationIconImageUrl_withUrl_shouldSetIconImageToUrl() {
+        subject.setPrivacyInformationIconImageUrl("imageurl");
+
+        PowerMockito.verifyStatic();
+        NativeImageHelper.loadImageView("imageurl", spyPrivacyInformationIcon);
+    }
+
     @Test
     public void resetProgress_shouldCallVideoProgressReset() throws Exception {
         subject.resetProgress();
@@ -489,4 +522,13 @@ public void LoadingBackground_getOpacity_shouldReturn0() throws Exception {
         assertThat(new LoadingBackground(context, mockRectF, mockPaint).getOpacity())
                 .isEqualTo(0);
     }
+
+    // To get around objenesis errors
+    class VastVideoProgressBarWidgetMock extends VastVideoProgressBarWidget {
+
+        public VastVideoProgressBarWidgetMock(
+                @NonNull final Context context) {
+            super(context);
+        }
+    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
index f8923c83..ecc0fcf9 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeUrlGeneratorTest.java
@@ -6,6 +6,7 @@
 import android.graphics.Point;
 import android.location.Location;
 import android.location.LocationManager;
+import android.net.ConnectivityManager;
 import android.net.Uri;
 import android.os.Build;
 import android.telephony.TelephonyManager;
@@ -22,6 +23,7 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.common.util.Reflection;
 import com.mopub.mobileads.BuildConfig;
+import com.mopub.mobileads.test.support.MoPubShadowConnectivityManager;
 import com.mopub.mobileads.test.support.MoPubShadowTelephonyManager;
 
 import org.junit.After;
@@ -35,6 +37,7 @@
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowLocationManager;
+import org.robolectric.shadows.ShadowNetworkInfo;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -51,7 +54,7 @@
 import static org.mockito.Mockito.when;
 
 @RunWith(SdkTestRunner.class)
-@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class})
+@Config(constants = BuildConfig.class, shadows = {MoPubShadowTelephonyManager.class, MoPubShadowConnectivityManager.class})
 public class NativeUrlGeneratorTest {
     public static final String AD_UNIT_ID = "1234";
     private static final int TEST_SCREEN_WIDTH = 999;
@@ -60,6 +63,7 @@
     private Activity context;
     private NativeUrlGenerator subject;
     private MoPubShadowTelephonyManager shadowTelephonyManager;
+    private MoPubShadowConnectivityManager shadowConnectivityManager;
     private PersonalInfoManager mockPersonalInfoManager;
 
     @Before
@@ -70,6 +74,11 @@ public void setup() throws Exception {
         when(context.getPackageName()).thenReturn("testBundle");
         shadowTelephonyManager = (MoPubShadowTelephonyManager)
                 Shadows.shadowOf((TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE));
+        shadowConnectivityManager = (MoPubShadowConnectivityManager)
+                Shadows.shadowOf((ConnectivityManager) RuntimeEnvironment.application.getSystemService(Context.CONNECTIVITY_SERVICE));
+        shadowConnectivityManager.setActiveNetworkInfo(ShadowNetworkInfo.newInstance(null,
+                ConnectivityManager.TYPE_MOBILE, TelephonyManager.NETWORK_TYPE_UNKNOWN, true,
+                true));
 
         // Set the expected screen dimensions to arbitrary numbers
         final Resources spyResources = spy(context.getResources());
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
index 6204075d..f6580966 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeVideoViewControllerTest.java
@@ -65,6 +65,7 @@ public void setUp() {
         NativeVideoController.setForId(123, mockVideoController);
 
         when(mockVastVideoConfig.getCustomCtaText()).thenReturn("Learn More");
+        when(mockVastVideoConfig.getPrivacyInformationIconImageUrl()).thenReturn("piiimageurl");
         when(mockFullScreenVideoView.getTextureView()).thenReturn(mockTextureView);
         when(mockTextureView.getBitmap()).thenReturn(mockBitmap);
         intentExtras.putSerializable(Constants.NATIVE_VAST_VIDEO_CONFIG, mockVastVideoConfig);
@@ -114,6 +115,7 @@ public void onCreate_shouldSetupVideoView() {
         verify(mockFullScreenVideoView).setCtaClickListener(any(View.OnClickListener.class));
         verify(mockFullScreenVideoView).setPrivacyInformationClickListener(
                 any(View.OnClickListener.class));
+        verify(mockFullScreenVideoView).setPrivacyInformationIconImageUrl("piiimageurl");
         verify(mockFullScreenVideoView).setLayoutParams(any(LayoutParams.class));
         verify(mockBaseVideoViewControllerListener).onSetContentView(mockFullScreenVideoView);
         verify(mockBaseVideoViewControllerListener, never()).onFinish();
diff --git a/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
new file mode 100644
index 00000000..ad2295bb
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/network/MoPubRequestQueueTest.java
@@ -0,0 +1,21 @@
+package com.mopub.network;
+
+import com.mopub.volley.Cache;
+import com.mopub.volley.Network;
+
+public class MoPubRequestQueueTest {
+
+    public static class TestMoPubRequestQueue extends MoPubRequestQueue {
+
+        TestMoPubRequestQueue(Cache cache, Network network) {
+            super(cache, network);
+        }
+    }
+
+    public static class TestMoPubRequestQueue2 extends MoPubRequestQueue {
+
+        TestMoPubRequestQueue2(Cache cache, Network network) {
+            super(cache, network);
+        }
+    }
+}
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index be233e50..00000000
--- a/pom.xml
+++ /dev/null
@@ -1,42 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
-                      http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-
-    <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>5</version>
-    </parent>
-
-    <groupId>com.mopub.mobileads</groupId>
-    <artifactId>mopub-android</artifactId>
-    <version>1.0</version>
-    <packaging>pom</packaging>
-
-    <repositories>
-        <repository>
-            <id>jcenter</id>
-            <name>JCenter</name>
-            <url>http://jcenter.bintray.com</url>
-        </repository>
-
-        <repository>
-            <id>andsupport</id>
-            <name>Android Support</name>
-            <url>file:///${env.ANDROID_HOME}/extras/android/m2repository</url>
-        </repository>
-
-        <repository>
-            <id>playservices</id>
-            <name>Android Play Services</name>
-            <url>file:///${env.ANDROID_HOME}/extras/google/m2repository</url>
-        </repository>
-    </repositories>
-
-    <modules>
-        <module>mopub-sdk</module>
-        <module>mopub-sample</module>
-    </modules>
-</project>
