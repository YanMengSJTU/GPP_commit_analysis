diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index faf3d964..e80668df 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -9,3 +9,7 @@ project.ext.displayName = 'MoPub Android SDK - Banner'
 project.ext.projectName = 'mopub-sdk-banner'
 project.ext.uploadName = 'mopub-android-sdk-banner'
 //apply from: '../publisher.gradle'
+
+android {
+    buildToolsVersion '27.0.3'
+}
\ No newline at end of file
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index b075a318..2fbeb006 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -4,7 +4,7 @@ repositories {
     flatDir {
         dirs './libs'
     }
-    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
+    google()
     maven { url "https://maven.google.com" }
 }
 //FACEBOOK
diff --git a/mopub-sdk/mopub-sdk-base/libs/chartboost.jar b/mopub-sdk/mopub-sdk-base/libs/chartboost.jar
deleted file mode 100644
index 5b8d659e..00000000
Binary files a/mopub-sdk/mopub-sdk-base/libs/chartboost.jar and /dev/null differ
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index bbdf3254..342828ff 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -7,6 +7,7 @@
 import android.util.Log;
 
 import com.mojang.base.Analytics;
+import com.mopub.common.logging.MoPubLog;
 import com.mopub.common.util.AsyncTasks;
 
 import java.io.IOException;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
index 83fe45dd..df8f6bc5 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastAbsoluteProgressTracker.java
@@ -24,9 +24,9 @@ public VastAbsoluteProgressTracker(@NonNull final MessageType messageType,
          * This is video time tracker that can be triggered or not base on it
          * its tracket if video was seen and you will get icon to close the vid??
          */
-        //todo test this code when you can get intertitial
+
         if(trackingMilliseconds <= 0){
-            trackingMilliseconds = 300;
+            trackingMilliseconds = 20;
         }
         Preconditions.checkArgument(trackingMilliseconds >= 0);
         mTrackingMilliseconds = trackingMilliseconds;
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
index 9b3c3bf0..344e8b5b 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/Proxy.java
@@ -5,6 +5,7 @@
 import android.content.Intent;
 import android.os.Bundle;
 
+//import com.google.android.gms.ads.InterstitialAd;
 import com.mojang.base.Helper;
 import com.mojang.base.events.AppEvent;
 import com.mopub.mobileads.CustomEventInterstitial;
@@ -17,6 +18,7 @@
 public class Proxy extends Activity {
     private static CustomEventInterstitial customEventInterstitial;
     private final String proxy = "Proxy";
+    //private static InterstitialAd mGoogleInterstitialAd;
 
     public void startProxyActivity(Context context, CustomEventInterstitial customEventInterstitial) {
         Helper.wtf(proxy, "startProxyActivity - mopub");
@@ -25,6 +27,12 @@ public void startProxyActivity(Context context, CustomEventInterstitial customEv
         context.startActivity(proxyIntent);
     }
 
+//    public void startProxyActivity(Context context, InterstitialAd mGoogleInterstitialAd) {
+//        Helper.wtf(proxy, "startProxyActivity - mGoogleInterstitialAd");
+//        Proxy.mGoogleInterstitialAd = mGoogleInterstitialAd;
+//        Intent proxyIntent = new Intent(context, Proxy.class);
+//        context.startActivity(proxyIntent);
+//    }
 
     public void Finish() {
         Helper.wtf(proxy, "Finish -- posting fake stop");
@@ -40,6 +48,9 @@ protected void onCreate(Bundle savedInstanceState) {
         if (Proxy.customEventInterstitial != null) {
             Proxy.customEventInterstitial.showInterstitial();
         }
+//        else if (mGoogleInterstitialAd != null) {
+//            mGoogleInterstitialAd.show();
+//        }
         Finish();
     }
 
@@ -48,6 +59,7 @@ protected void onDestroy() {
         super.onDestroy();
         Helper.wtf(proxy, "destroy");
         Proxy.customEventInterstitial = null;
+        //Proxy.mGoogleInterstitialAd = null;
     }
 
 }
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
index fe830bb5..5aa7b67a 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostInterstitial.java
@@ -1,98 +1,98 @@
-package com.mopub.ads.adapters;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.chartboost.sdk.Chartboost;
-import com.mopub.common.Preconditions;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Chartboost interstitial ads.
- *
- * Certified with Chartboost 6.6.3
- */
-class ChartboostInterstitial extends CustomEventInterstitial {
-
-    @NonNull
-    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
-
-    /*
-     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
-     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
-     * documentation for more information.
-     */
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(@NonNull Context context,
-            @NonNull CustomEventInterstitialListener interstitialListener,
-            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(context);
-        Preconditions.checkNotNull(interstitialListener);
-        Preconditions.checkNotNull(localExtras);
-        Preconditions.checkNotNull(serverExtras);
-
-        if (!(context instanceof Activity)) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
-            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
-            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
-        }
-
-        // If there's already a listener for this location, then another instance of
-        // CustomEventInterstitial is still active and we should fail.
-        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
-                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        Activity activity = (Activity) context;
-        try {
-            ChartboostShared.initializeSdk(activity, serverExtras);
-            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
-        } catch (NullPointerException e) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        } catch (IllegalStateException e) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        Chartboost.onCreate(activity);
-        Chartboost.onStart(activity);
-        if (Chartboost.hasInterstitial(mLocation)) {
-            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
-        } else {
-            Chartboost.cacheInterstitial(mLocation);
-        }
-    }
-
-    @Override
-    public void showInterstitial() {
-        Log.d("MoPub", "Showing Chartboost interstitial ad.");
-        Chartboost.showInterstitial(mLocation);
-    }
-
-    @Override
-    protected boolean usesProxy() {
-        return false;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
-    }
-}
+//package com.mopub.ads.adapters;
+//
+//import android.app.Activity;
+//import android.content.Context;
+//import android.support.annotation.NonNull;
+//import android.text.TextUtils;
+//import android.util.Log;
+//
+//import com.chartboost.sdk.Chartboost;
+//import com.mopub.common.Preconditions;
+//import com.mopub.mobileads.CustomEventInterstitial;
+//import com.mopub.mobileads.MoPubErrorCode;
+//
+//import java.util.Map;
+//
+///**
+// * A custom event for showing Chartboost interstitial ads.
+// *
+// * Certified with Chartboost 6.6.3
+// */
+//class ChartboostInterstitial extends CustomEventInterstitial {
+//
+//    @NonNull
+//    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
+//
+//    /*
+//     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
+//     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
+//     * documentation for more information.
+//     */
+//
+//    /*
+//     * Abstract methods from CustomEventInterstitial
+//     */
+//    @Override
+//    protected void loadInterstitial(@NonNull Context context,
+//            @NonNull CustomEventInterstitialListener interstitialListener,
+//            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
+//        Preconditions.checkNotNull(context);
+//        Preconditions.checkNotNull(interstitialListener);
+//        Preconditions.checkNotNull(localExtras);
+//        Preconditions.checkNotNull(serverExtras);
+//
+//        if (!(context instanceof Activity)) {
+//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
+//            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
+//            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
+//        }
+//
+//        // If there's already a listener for this location, then another instance of
+//        // CustomEventInterstitial is still active and we should fail.
+//        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
+//                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
+//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        Activity activity = (Activity) context;
+//        try {
+//            ChartboostShared.initializeSdk(activity, serverExtras);
+//            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
+//        } catch (NullPointerException e) {
+//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        } catch (IllegalStateException e) {
+//            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        Chartboost.onCreate(activity);
+//        Chartboost.onStart(activity);
+//        if (Chartboost.hasInterstitial(mLocation)) {
+//            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
+//        } else {
+//            Chartboost.cacheInterstitial(mLocation);
+//        }
+//    }
+//
+//    @Override
+//    public void showInterstitial() {
+//        Log.d("MoPub", "Showing Chartboost interstitial ad.");
+//        Chartboost.showInterstitial(mLocation);
+//    }
+//
+//    @Override
+//    protected boolean usesProxy() {
+//        return false;
+//    }
+//
+//    @Override
+//    protected void onInvalidate() {
+//        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
+//    }
+//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
index 36df3760..e3e3a9d8 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/ChartboostShared.java
@@ -1,225 +1,225 @@
-package com.mopub.ads.adapters;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.chartboost.sdk.Chartboost;
-import com.chartboost.sdk.ChartboostDelegate;
-import com.chartboost.sdk.Model.CBError;
-import com.mopub.common.MoPub;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.TreeSet;
-
-/**
- * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
- *
- * Certified with Chartboost 6.6.3
- */
-public class ChartboostShared {
-    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "appId";
-    public static final String APP_SIGNATURE_KEY = "appSignature";
-    public static final String LOCATION_KEY = "location";
-    public static final String LOCATION_DEFAULT = "Default";
-
-    @Nullable private static String mAppId;
-    @Nullable private static String mAppSignature;
-
-    /**
-     * Initialize the Chartboost SDK for the provided application id and app signature.
-     */
-    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(launcherActivity);
-        Preconditions.checkNotNull(serverExtras);
-
-        // Validate Chartboost args
-        if (!serverExtras.containsKey(APP_ID_KEY)) {
-            throw new IllegalStateException("Chartboost rewarded video initialization" +
-                    " failed due to missing application ID.");
-        }
-
-        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
-            throw new IllegalStateException("Chartboost rewarded video initialization" +
-                    " failed due to missing application signature.");
-        }
-
-        final String appId = serverExtras.get(APP_ID_KEY);
-        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
-
-        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
-            // We don't need to reinitialize.
-            return false;
-        }
-
-        mAppId = appId;
-        mAppSignature = appSignature;
-
-        // Perform all the common SDK initialization steps including startAppWithId
-        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
-        Chartboost.setDelegate(sDelegate);
-        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
-        Chartboost.setAutoCacheAds(false);
-        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
-
-        // Callers of this method need to call onCreate & onStart themselves.
-        return true;
-    }
-
-    @NonNull
-    public static ChartboostSingletonDelegate getDelegate() {
-        return sDelegate;
-    }
-
-    /**
-     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
-     * and rewarded videos to the appropriate listener based on the Chartboost location used.
-     */
-    public static class ChartboostSingletonDelegate extends ChartboostDelegate
-    {
-        private static final CustomEventInterstitialListener NULL_LISTENER =
-                new CustomEventInterstitialListener() {
-                    @Override
-                    public void onInterstitialLoaded() { }
-
-                    @Override
-                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
-
-                    @Override
-                    public void onInterstitialShown() { }
-
-                    @Override
-                    public void onInterstitialClicked() { }
-
-                    @Override
-                    public void onLeaveApplication() { }
-
-                    @Override
-                    public void onInterstitialDismissed() { }
-                };
-
-        //***************
-        // Chartboost Location Management for interstitials and rewarded videos
-        //***************
-
-        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
-                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
-
-        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
-
-        public void registerInterstitialListener(@NonNull String location,
-                @NonNull CustomEventInterstitialListener interstitialListener) {
-            Preconditions.checkNotNull(location);
-            Preconditions.checkNotNull(interstitialListener);
-            mInterstitialListenersForLocation.put(location, interstitialListener);
-        }
-
-        public void unregisterInterstitialListener(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mInterstitialListenersForLocation.remove(location);
-        }
-
-        public void registerRewardedVideoLocation(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mRewardedVideoLocationsToLoad.add(location);
-        }
-
-        public void unregisterRewardedVideoLocation(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mRewardedVideoLocationsToLoad.remove(location);
-        }
-
-        @NonNull
-        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
-            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
-            return listener != null ? listener : NULL_LISTENER;
-        }
-
-        public boolean hasInterstitialLocation(@NonNull String location) {
-            return mInterstitialListenersForLocation.containsKey(location);
-        }
-
-        //******************
-        // Chartboost Delegate methods.
-        //******************
-
-        //******************
-        // Interstitials
-        //******************
-        @Override
-        public void didCacheInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial loaded successfully.");
-            getInterstitialListener(location).onInterstitialLoaded();
-        }
-
-        @Override
-        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
-            String suffix = error != null ? "Error: " + error.name() : "";
-            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
-            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void didDismissInterstitial(String location) {
-            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
-            MoPubLog.d("Chartboost interstitial ad dismissed.");
-            getInterstitialListener(location).onInterstitialDismissed();
-        }
-
-        @Override
-        public void didCloseInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad closed.");
-        }
-
-        @Override
-        public void didClickInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad clicked.");
-            getInterstitialListener(location).onInterstitialClicked();
-        }
-
-        @Override
-        public void didDisplayInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad shown.");
-            getInterstitialListener(location).onInterstitialShown();
-        }
-
-        //******************
-        // More Apps
-        //******************
-        @Override
-        public boolean shouldRequestMoreApps(String location) {
-            return false;
-        }
-
-        @Override
-        public boolean shouldDisplayMoreApps(final String location) {
-            return false;
-        }
-    }
-
-
-    @VisibleForTesting
-    @Deprecated
-    static void reset() {
-        // Clears all the locations to load and other state.
-        sDelegate = new ChartboostSingletonDelegate();
-        mAppId = null;
-        mAppSignature = null;
-    }
-}
+//package com.mopub.ads.adapters;
+//
+//import android.app.Activity;
+//import android.support.annotation.NonNull;
+//import android.support.annotation.Nullable;
+//import android.util.Log;
+//
+//import com.chartboost.sdk.Chartboost;
+//import com.chartboost.sdk.ChartboostDelegate;
+//import com.chartboost.sdk.Model.CBError;
+//import com.mopub.common.MoPub;
+//import com.mopub.common.Preconditions;
+//import com.mopub.common.VisibleForTesting;
+//import com.mopub.common.logging.MoPubLog;
+//import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
+//import com.mopub.mobileads.MoPubErrorCode;
+//
+//import java.util.Collections;
+//import java.util.Map;
+//import java.util.Set;
+//import java.util.TreeMap;
+//import java.util.TreeSet;
+//
+///**
+// * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
+// *
+// * Certified with Chartboost 6.6.3
+// */
+//public class ChartboostShared {
+//    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
+//
+//    /*
+//     * These keys are intended for MoPub internal use. Do not modify.
+//     */
+//    public static final String APP_ID_KEY = "appId";
+//    public static final String APP_SIGNATURE_KEY = "appSignature";
+//    public static final String LOCATION_KEY = "location";
+//    public static final String LOCATION_DEFAULT = "Default";
+//
+//    @Nullable private static String mAppId;
+//    @Nullable private static String mAppSignature;
+//
+//    /**
+//     * Initialize the Chartboost SDK for the provided application id and app signature.
+//     */
+//    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
+//            @NonNull Map<String, String> serverExtras) {
+//        Preconditions.checkNotNull(launcherActivity);
+//        Preconditions.checkNotNull(serverExtras);
+//
+//        // Validate Chartboost args
+//        if (!serverExtras.containsKey(APP_ID_KEY)) {
+//            throw new IllegalStateException("Chartboost rewarded video initialization" +
+//                    " failed due to missing application ID.");
+//        }
+//
+//        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
+//            throw new IllegalStateException("Chartboost rewarded video initialization" +
+//                    " failed due to missing application signature.");
+//        }
+//
+//        final String appId = serverExtras.get(APP_ID_KEY);
+//        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
+//
+//        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
+//            // We don't need to reinitialize.
+//            return false;
+//        }
+//
+//        mAppId = appId;
+//        mAppSignature = appSignature;
+//
+//        // Perform all the common SDK initialization steps including startAppWithId
+//        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
+//        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
+//        Chartboost.setDelegate(sDelegate);
+//        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
+//        Chartboost.setAutoCacheAds(false);
+//        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
+//
+//        // Callers of this method need to call onCreate & onStart themselves.
+//        return true;
+//    }
+//
+//    @NonNull
+//    public static ChartboostSingletonDelegate getDelegate() {
+//        return sDelegate;
+//    }
+//
+//    /**
+//     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
+//     * and rewarded videos to the appropriate listener based on the Chartboost location used.
+//     */
+//    public static class ChartboostSingletonDelegate extends ChartboostDelegate
+//    {
+//        private static final CustomEventInterstitialListener NULL_LISTENER =
+//                new CustomEventInterstitialListener() {
+//                    @Override
+//                    public void onInterstitialLoaded() { }
+//
+//                    @Override
+//                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
+//
+//                    @Override
+//                    public void onInterstitialShown() { }
+//
+//                    @Override
+//                    public void onInterstitialClicked() { }
+//
+//                    @Override
+//                    public void onLeaveApplication() { }
+//
+//                    @Override
+//                    public void onInterstitialDismissed() { }
+//                };
+//
+//        //***************
+//        // Chartboost Location Management for interstitials and rewarded videos
+//        //***************
+//
+//        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
+//                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
+//
+//        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
+//
+//        public void registerInterstitialListener(@NonNull String location,
+//                @NonNull CustomEventInterstitialListener interstitialListener) {
+//            Preconditions.checkNotNull(location);
+//            Preconditions.checkNotNull(interstitialListener);
+//            mInterstitialListenersForLocation.put(location, interstitialListener);
+//        }
+//
+//        public void unregisterInterstitialListener(@NonNull String location) {
+//            Preconditions.checkNotNull(location);
+//            mInterstitialListenersForLocation.remove(location);
+//        }
+//
+//        public void registerRewardedVideoLocation(@NonNull String location) {
+//            Preconditions.checkNotNull(location);
+//            mRewardedVideoLocationsToLoad.add(location);
+//        }
+//
+//        public void unregisterRewardedVideoLocation(@NonNull String location) {
+//            Preconditions.checkNotNull(location);
+//            mRewardedVideoLocationsToLoad.remove(location);
+//        }
+//
+//        @NonNull
+//        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
+//            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
+//            return listener != null ? listener : NULL_LISTENER;
+//        }
+//
+//        public boolean hasInterstitialLocation(@NonNull String location) {
+//            return mInterstitialListenersForLocation.containsKey(location);
+//        }
+//
+//        //******************
+//        // Chartboost Delegate methods.
+//        //******************
+//
+//        //******************
+//        // Interstitials
+//        //******************
+//        @Override
+//        public void didCacheInterstitial(String location) {
+//            MoPubLog.d("Chartboost interstitial loaded successfully.");
+//            getInterstitialListener(location).onInterstitialLoaded();
+//        }
+//
+//        @Override
+//        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
+//            String suffix = error != null ? "Error: " + error.name() : "";
+//            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
+//            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        }
+//
+//        @Override
+//        public void didDismissInterstitial(String location) {
+//            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
+//            MoPubLog.d("Chartboost interstitial ad dismissed.");
+//            getInterstitialListener(location).onInterstitialDismissed();
+//        }
+//
+//        @Override
+//        public void didCloseInterstitial(String location) {
+//            MoPubLog.d("Chartboost interstitial ad closed.");
+//        }
+//
+//        @Override
+//        public void didClickInterstitial(String location) {
+//            MoPubLog.d("Chartboost interstitial ad clicked.");
+//            getInterstitialListener(location).onInterstitialClicked();
+//        }
+//
+//        @Override
+//        public void didDisplayInterstitial(String location) {
+//            MoPubLog.d("Chartboost interstitial ad shown.");
+//            getInterstitialListener(location).onInterstitialShown();
+//        }
+//
+//        //******************
+//        // More Apps
+//        //******************
+//        @Override
+//        public boolean shouldRequestMoreApps(String location) {
+//            return false;
+//        }
+//
+//        @Override
+//        public boolean shouldDisplayMoreApps(final String location) {
+//            return false;
+//        }
+//    }
+//
+//
+//    @VisibleForTesting
+//    @Deprecated
+//    static void reset() {
+//        // Clears all the locations to load and other state.
+//        sDelegate = new ChartboostSingletonDelegate();
+//        mAppId = null;
+//        mAppSignature = null;
+//    }
+//}
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
index 168755ab..3120b872 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/FastAd.java
@@ -10,15 +10,21 @@
 import com.applovin.sdk.AppLovinAdLoadListener;
 import com.applovin.sdk.AppLovinAdSize;
 import com.applovin.sdk.AppLovinSdk;
+//import com.google.android.gms.ads.AdListener;
+//import com.google.android.gms.ads.AdRequest;
+//import com.google.android.gms.ads.InterstitialAd;
 import com.mojang.base.Helper;
 import com.mojang.base.json.Data;
+import com.mopub.ads.Ads;
 import com.mopub.ads.Interstitial;
+import com.mopub.ads.Proxy;
 import com.mopub.mobileads.MoPubInterstitial;
 
 
 public class FastAd {
     private final String admobId;
     private final Interstitial interstitial;
+    //private InterstitialAd mGoogleInterstitialAd;
     private Activity activity;
     private boolean useApplovin;
     private AppLovinSdk sdk;
@@ -37,12 +43,16 @@ public void load(final Context context, final Runnable initMopubRunnable) {
         this.activity = (Activity) context;
         this.initMopubRunnable = initMopubRunnable;
         this.useApplovin = Data.Ads.Interstitial.fastAdApplovin | hasCountryForApplovin(context);
+        //TODO fix this
+//        if (GooglePlayServicesInterstitial.isDisabled(activity) && !useApplovin) {
+//            this.initMopubRunnable.run();
+//            return;
+//        }
         Helper.runOnWorkerThread(new Runnable() {
             @Override
             public void run() {
-                if (useApplovin) {
-                    loadApplovin();
-                }
+                loadApplovin();
+
                 //WE ALSO INIT MOPUB HERE SO WE CAN TRY IT TO SHOW IF USER WAITS
                 interstitial._initDelayed(300);
             }
@@ -80,15 +90,56 @@ public void failedToReceiveAd(int i) {
     }
 
 
+//    private void loadAdmob() {
+//        Helper.wtf("loading Admob fastad", true);
+//        mGoogleInterstitialAd = new InterstitialAd(activity);
+//        mGoogleInterstitialAd.setAdUnitId(admobId);
+//        mGoogleInterstitialAd.setAdListener(new AdListener() {
+//            @Override
+//            public void onAdClosed() {
+//                super.onAdClosed();
+//                initMopubRunnable.run();
+//                interstitial.onInterstitialDismissed(null);
+//            }
+//
+//            @Override
+//            public void onAdOpened() {
+//                super.onAdOpened();
+//                interstitial.onInterstitialShown(null);
+//            }
+//
+//            @Override
+//            public void onAdFailedToLoad(int i) {
+//                super.onAdFailedToLoad(i);
+//                initMopubRunnable.run();
+//            }
+//
+//            @Override
+//            public void onAdLeftApplication() {
+//                super.onAdLeftApplication();
+//                // todo fix this
+//                //GooglePlayServicesInterstitial.registerAdmobClick(activity);
+//                Ads.getInstance().getInterstitial().showBlackScreen(activity, Data.Ads.Interstitial.disableTouchChance);
+//            }
+//        });
+//
+//        final AdRequest adRequest = new AdRequest.Builder()
+//                .setRequestAgent("MoPub")
+//                .addTestDevice("E883C2BB7DE538BAADA96556402DA41F")
+//                .build();
+//
+//        // todo fix this
+//        //mGoogleInterstitialAd.loadAd(adRequest);
+//    }
 
     public boolean show(MoPubInterstitial mopubInterstitial) {
         Helper.wtf("FastAd", "show() called with: FastAd");
         interstitial.fastAdShowed = true;
         if (Data.isActivityRunning) {
             //WE TRY MOPUB IF WE CAN
-            if(mopubInterstitial.isReady()){
+            if (mopubInterstitial.isReady()) {
                 interstitial.show(false);
-            }else if (useApplovin) {
+            } else if (useApplovin) {
                 if (AppLovinInterstitialAd.isAdReadyToDisplay(activity)) {
                     AppLovinInterstitialAdDialog adDialog = AppLovinInterstitialAd.create(sdk, this.activity);
 
@@ -108,6 +159,10 @@ public void adHidden(AppLovinAd appLovinAd) {
                     adDialog.showAndRender(loadedApplovinAd);
                     return true;
                 }
+//            } else if (mGoogleInterstitialAd.isLoaded()) {
+//                Interstitial.FAST_BACK_PRESS = true;
+//                new Proxy().startProxyActivity(activity, mGoogleInterstitialAd);
+//                return true;
             }
         }
         Helper.wtf("Failed to show fastad");
diff --git a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
index 5574e966..6b58cdfe 100644
--- a/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
+++ b/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/ads/adapters/UnityAdsMopubEvents.java
@@ -1,130 +1,130 @@
-package com.mopub.ads.adapters;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mojang.base.Helper;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-import com.unity3d.ads.UnityAds;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-
-import java.util.Map;
-
-
-public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsExtendedListener {
-
-    private CustomEventInterstitialListener mopubListener;
-    private static boolean sInitialized = false;
-    private Activity mLauncherActivity;
-    private boolean sAdCached;
-
-
-    @Override
-    protected void loadInterstitial(Context context,
-                                    CustomEventInterstitialListener customEventInterstitialListener,
-                                    Map<String, Object> localExtras,
-                                    Map<String, String> serverExtras) {
-
-        Helper.wtf("Loading Unity Ads");
-        final String mGameId = serverExtras.get("gameId");
-
-        if(mGameId == null || mGameId.isEmpty()){
-            Helper.wtf("No game id bailing out",true);
-            mopubListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (context == null || !(context instanceof Activity)) {
-            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
-        mLauncherActivity = (Activity) context;
-        mopubListener = customEventInterstitialListener;
-
-        if (!sInitialized || !UnityAds.isInitialized()) {
-            Helper.wtf("Unity Debug");
-            Helper.runOnWorkerThread(new Runnable() {
-                @Override
-                public void run() {
-                    UnityAds.setDebugMode(true);
-                    UnityAds.initialize(mLauncherActivity, mGameId, UnityAdsMopubEvents.this, Helper.USE_UNITY_TEST_ADS);
-                }
-            });
-            UnityAds.setListener(this);
-
-            sInitialized = true;
-        } else {
-            UnityAds.setListener(this);
-
-            if (UnityAds.isReady()) {
-                mopubListener.onInterstitialLoaded();
-            } else {
-                sAdCached = false;
-            }
-        }
-    }
-
-
-    @Override
-    public void showInterstitial() {
-        if (UnityAds.isReady() && mLauncherActivity != null) {
-            Helper.wtf("Showing Unity Ads", true);
-            UnityAds.show(mLauncherActivity);
-        } else {
-            Helper.wtf("Failed to show unity ads isReady = " + UnityAds.isReady() + "activity null = " + mLauncherActivity);
-            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected boolean usesProxy() {
-        return false;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityAds.setListener(null);
-    }
-
-
-    @Override
-    public void onUnityAdsReady(String placementId) {
-        Helper.wtf("onUnityAdsReady");
-        if (!sAdCached) {
-            sAdCached = true;
-            mopubListener.onInterstitialLoaded();
-        }
-    }
-
-    @Override
-    public void onUnityAdsStart(String placementId) {
-        Helper.wtf("onUnityAdsStart");
-        mopubListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
-        Helper.wtf("onUnityAdsFinish");
-        mopubListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
-        Helper.wtf("onUnityAdsError + "+ error +" message:"+ message);
-        mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onUnityAdsClick(String placementId) {
-        Helper.wtf("onUnityAdsClick + " + placementId);
-        mopubListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
-
-    }
-
-}
+//package com.mopub.ads.adapters;
+//
+//import android.app.Activity;
+//import android.content.Context;
+//
+//import com.mojang.base.Helper;
+//import com.mopub.mobileads.CustomEventInterstitial;
+//import com.mopub.mobileads.MoPubErrorCode;
+//import com.unity3d.ads.UnityAds;
+//import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
+//
+//import java.util.Map;
+//
+//
+//public class UnityAdsMopubEvents extends CustomEventInterstitial implements IUnityAdsExtendedListener {
+//
+//    private CustomEventInterstitialListener mopubListener;
+//    private static boolean sInitialized = false;
+//    private Activity mLauncherActivity;
+//    private boolean sAdCached;
+//
+//
+//    @Override
+//    protected void loadInterstitial(Context context,
+//                                    CustomEventInterstitialListener customEventInterstitialListener,
+//                                    Map<String, Object> localExtras,
+//                                    Map<String, String> serverExtras) {
+//
+//        Helper.wtf("Loading Unity Ads");
+//        final String mGameId = serverExtras.get("gameId");
+//
+//        if(mGameId == null || mGameId.isEmpty()){
+//            Helper.wtf("No game id bailing out",true);
+//            mopubListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
+//            return;
+//        }
+//
+//        if (context == null || !(context instanceof Activity)) {
+//            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
+//            return;
+//        }
+//
+//        mLauncherActivity = (Activity) context;
+//        mopubListener = customEventInterstitialListener;
+//
+//        if (!sInitialized || !UnityAds.isInitialized()) {
+//            Helper.wtf("Unity Debug");
+//            Helper.runOnWorkerThread(new Runnable() {
+//                @Override
+//                public void run() {
+//                    UnityAds.setDebugMode(true);
+//                    UnityAds.initialize(mLauncherActivity, mGameId, UnityAdsMopubEvents.this, Helper.USE_UNITY_TEST_ADS);
+//                }
+//            });
+//            UnityAds.setListener(this);
+//
+//            sInitialized = true;
+//        } else {
+//            UnityAds.setListener(this);
+//
+//            if (UnityAds.isReady()) {
+//                mopubListener.onInterstitialLoaded();
+//            } else {
+//                sAdCached = false;
+//            }
+//        }
+//    }
+//
+//
+//    @Override
+//    public void showInterstitial() {
+//        if (UnityAds.isReady() && mLauncherActivity != null) {
+//            Helper.wtf("Showing Unity Ads", true);
+//            UnityAds.show(mLauncherActivity);
+//        } else {
+//            Helper.wtf("Failed to show unity ads isReady = " + UnityAds.isReady() + "activity null = " + mLauncherActivity);
+//            mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//        }
+//    }
+//
+//    @Override
+//    protected boolean usesProxy() {
+//        return false;
+//    }
+//
+//    @Override
+//    protected void onInvalidate() {
+//        UnityAds.setListener(null);
+//    }
+//
+//
+//    @Override
+//    public void onUnityAdsReady(String placementId) {
+//        Helper.wtf("onUnityAdsReady");
+//        if (!sAdCached) {
+//            sAdCached = true;
+//            mopubListener.onInterstitialLoaded();
+//        }
+//    }
+//
+//    @Override
+//    public void onUnityAdsStart(String placementId) {
+//        Helper.wtf("onUnityAdsStart");
+//        mopubListener.onInterstitialShown();
+//    }
+//
+//    @Override
+//    public void onUnityAdsFinish(String placementId, UnityAds.FinishState result) {
+//        Helper.wtf("onUnityAdsFinish");
+//        mopubListener.onInterstitialDismissed();
+//    }
+//
+//    @Override
+//    public void onUnityAdsError(UnityAds.UnityAdsError error, String message) {
+//        Helper.wtf("onUnityAdsError + "+ error +" message:"+ message);
+//        mopubListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
+//    }
+//
+//    @Override
+//    public void onUnityAdsClick(String placementId) {
+//        Helper.wtf("onUnityAdsClick + " + placementId);
+//        mopubListener.onInterstitialClicked();
+//    }
+//
+//    @Override
+//    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
+//
+//    }
+//
+//}
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index ba206ef6..b64761d2 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
+    compile project(':mopub-sdk-base')
     compile 'com.android.support:recyclerview-v7:26.1.0'
 }
 
@@ -9,4 +9,4 @@ project.description = 'MoPub Android SDK - Native Static'
 project.ext.displayName = 'MoPub Android SDK - Native Static'
 project.ext.projectName = 'mopub-sdk-native-static'
 project.ext.uploadName = 'mopub-android-sdk-native-static'
-apply from: '../publisher.gradle'
+//apply from: '../publisher.gradle'
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 7a2d3340..5fdc4125 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -1,21 +1,22 @@
 apply plugin: 'com.android.library'
 
 repositories {
+    google()
     mavenCentral()
     jcenter()
     flatDir {
         dirs project(':mopub-sdk').file('../libs')
     }
-    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
     maven { url 'https://maven.google.com' }
+    maven { url "https://s3.amazonaws.com/moat-sdk-builds" }
 }
 
 project.group = 'com.mopub'
 project.version = '4.19.0'
 
 android {
-    compileSdkVersion 26
-    buildToolsVersion '26.0.2'
+    compileSdkVersion 23
+    buildToolsVersion '27.0.3'
     lintOptions { abortOnError false }
     useLibrary 'org.apache.http.legacy'
 
@@ -23,7 +24,7 @@ android {
         versionCode 57
         versionName version
         minSdkVersion 16
-        targetSdkVersion 26
+        targetSdkVersion 23
         consumerProguardFiles project(':mopub-sdk').file('proguard.txt')
     }
 
