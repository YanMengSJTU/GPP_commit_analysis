diff --git a/mopub-sdk/maven-publishing.gradle b/mopub-sdk/maven-publishing.gradle
index 1982c8e8..9ff9f3f3 100644
--- a/mopub-sdk/maven-publishing.gradle
+++ b/mopub-sdk/maven-publishing.gradle
@@ -1,6 +1,46 @@
 apply plugin: 'maven-publish'
 
-import org.gradle.api.publish.maven.MavenPublication
+if (JavaVersion.current().isJava8Compatible()) {
+    allprojects {
+        tasks.withType(Javadoc) {
+            // The javadoc task in Java 8 is too strict and throws unnecessary syntax errors
+            // if our comments fail to abide by the new standard.
+            options.addStringOption('Xdoclint:none', '-quiet')
+        }
+    }
+}
+
+android.libraryVariants.all { variant ->
+    def name = variant.buildType.name
+    def task = project.tasks.create "jar${name.capitalize()}", Jar
+
+    task.dependsOn variant.javaCompile
+    task.from variant.javaCompile.destinationDir
+    artifacts.add('archives', task)
+}
+
+android.libraryVariants.all { variant ->
+    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
+        title = project.ext.displayName
+        description "Generates Javadoc for $variant.name."
+        source = variant.javaCompile.source
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+        classpath += configurations.compile
+
+        options {
+            links "http://docs.oracle.com/javase/7/docs/api/"
+            linksOffline "https://developer.android.com/reference","${android.sdkDirectory}/docs/reference"
+        }
+
+        exclude '**/BuildConfig.java'
+        exclude '**/R.java'
+    }
+
+    task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
+        classifier = 'javadoc'
+        from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
+    }
+}
 
 task androidJavadocs(type: Javadoc) {
     source = android.sourceSets.main.java.srcDirs
@@ -48,22 +88,22 @@ publishing {
                 final dependenciesNode = asNode().appendNode('dependencies')
 
                 ext.addDependency = { Dependency dep, String scope ->
-                    if (dep instanceof ProjectDependency) {
-                        def depGroup = dep.dependencyProject.group
-                        def depName = dep.dependencyProject.name
-                        def depVersion = dep.dependencyProject.version
-                    } else if (dep instanceof ModuleDependency) {
-                        def depGroup = dep.group
-                        def depName = dep.name
-                        def depVersion = dep.version
-                    } else {
+//                    if (dep instanceof ProjectDependency) {
+//                        def depGroup = dep.dependencyProject.group
+//                        def depName = dep.dependencyProject.name
+//                        def depVersion = dep.dependencyProject.version
+//                    } else if (dep instanceof ModuleDependency) {
+//                        def depGroup = dep.group
+//                        def depName = dep.name
+//                        def depVersion = dep.version
+//                    } else {
                         if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                             return // ignore invalid dependencies
 
                         def depGroup = dep.group
                         def depName = dep.name
                         def depVersion = dep.version
-                    }
+                    //}
 
                     final dependencyNode = dependenciesNode.appendNode('dependency')
                     dependencyNode.appendNode('groupId', depGroup)
