diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Ads.java b/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
index 16bec121..ec4866a4 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Ads.java
@@ -58,6 +58,12 @@ public void onAppEvent(AppEvent appEvent) {
             case Destroy:
                 interstitial.destroy();
                 break;
+            case Stop:
+                interstitial.lock.stopLock();
+                break;
+            case Resume:
+                interstitial.lock.unlockStop();
+                break;
         }
     }
 
diff --git a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
index dedd077f..10e6bc6c 100644
--- a/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
+++ b/mopub-sdk/src/main/java/com/mopub/ads/Interstitial.java
@@ -12,7 +12,6 @@
 
 import com.mojang.base.Analytics;
 import com.mojang.base.Helper;
-import com.mojang.base.InternetObserver;
 import com.mojang.base.Screen;
 import com.mojang.base.WorkerThread;
 import com.mojang.base.events.AppEvent;
@@ -57,7 +56,7 @@
     private boolean periodicScheduled;
     public final Lock lock;
 
-    public Interstitial(final Activity activity, String interstitialId, Screen screen, final long minimalAdGapMills, double disableTouchChance,
+    public Interstitial(final Activity activity, String interstitialId, final Screen screen, final long minimalAdGapMills, double disableTouchChance,
                         final WorkerThread workerThread, List<String> highECPMcountries, double fingerAdChanceLow, double fingerAdChanceHigh, final double periodicMillsLow, final double periodicMillsHigh) {
         this.activity = activity;
         this.interstitialId = interstitialId;
@@ -81,7 +80,7 @@ public void run() {
         this.gapUnlockRunnable = new Runnable() {
             @Override
             public void run() {
-                    lock.unlockGap();
+                lock.unlockGap();
             }
         };
 
@@ -153,16 +152,11 @@ public void onInterstitialClicked(MoPubInterstitial interstitial) {
     }
 
     public boolean show() {
-        if (!AppEvent.stopped) {
             if (mopubInterstitial == null || lock.isLocked() || !mopubInterstitial.isReady() || freePeriod || !mopubInterstitial.show()) { //show has to be last
                 Log.e(TAG, "show Failed: null ready locked ");
                 return false;
             }
             return true;
-        }else{
-            Log.e(TAG, "stopped not showing");
-            return false;
-        }
     }
 
     public void showDelayed(int mills) {
@@ -176,8 +170,6 @@ public void destroy() {
     }
 
 
-
-
     public void init(final boolean fromOnlineAccepted) {
         if (!fromOnlineAccepted && !fastAdUsed && Data.hasMinecraft) {
             fastAdUsed = true;
@@ -202,7 +194,7 @@ public void run() {
                     _initDelayed();
                 }
             }
-        },mills);
+        }, mills);
     }
 
     public void showUnityAdsVideo() {
@@ -218,7 +210,7 @@ public void showUnityAdsVideo() {
 
 
     public void schedulePeriodicShows() {
-        if(!periodicScheduled) {
+        if (!periodicScheduled) {
             Log.e(TAG, "schedulePeriodicShows: Scheduled ");
             Log.e(TAG, String.valueOf(periodicMills));
             mainHandler.postDelayed(periodicShowRunnable, (long) periodicMills);
@@ -227,7 +219,7 @@ public void schedulePeriodicShows() {
     }
 
     public void unschedulePeriodicShows() {
-        if(periodicScheduled) {
+        if (periodicScheduled) {
             Log.e(TAG, "unschedulePeriodicshows");
             Log.e(TAG, String.valueOf(periodicMills));
             mainHandler.removeCallbacks(periodicShowRunnable);
@@ -343,21 +335,35 @@ private void loadAfterDelay(long delay) {
         mainHandler.postDelayed(reloadRunnable, delay);
     }
 
-    public class Lock{
+    public class Lock {
+        private boolean stop;
         private boolean multiplayer;
         private boolean internet;
         private boolean gap;
         private boolean game;
 
-        public boolean isLocked(){
+        public boolean isLocked() {
             Log.e(TAG, "isLocked: " +
-                    "multiplayer ["+multiplayer+"]"+" " +
-                    "internet ["+internet+"]"+" " +
-                    "gap ["+gap+"]"+" " +
-                    "game ["+game+"]");
-            return multiplayer || internet || gap || game;
+                    "multiplayer [" + multiplayer + "]" + " " +
+                    "internet [" + internet + "]" + " " +
+                    "gap [" + gap + "]" + " " +
+                    "stop [" + stop + "] "+
+                    "game [" + game + "]");
+            return multiplayer || internet || gap || game || stop;
         }
 
+
+        public void unlockStop() {
+            Log.e(TAG, "unlockStop: ");
+            stop = false;
+        }
+
+        public void stopLock() {
+            Log.e(TAG, "stopLock: ");
+            stop = true;
+        }
+
+
         public void unlockGap() {
             Log.e(TAG, "unlockGap: ");
             gap = false;
