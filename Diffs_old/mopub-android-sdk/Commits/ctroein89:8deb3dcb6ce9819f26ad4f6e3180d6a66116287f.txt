diff --git a/CHANGELOG.md b/CHANGELOG.md
index 5add0cbc..1a7eb766 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,3 +1,11 @@
+## Version 4.20.0 (February 20, 2018)
+- Upgraded Gradle dependency to 4.3.1.
+- Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
+- Fixed a viewability bug for video ads where ViewGroups were not being properly added to the list of known obstructions.
+- We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
+- Bug fixes.
+
 ## Version 4.19.0 (December 11, 2017)
 - Updated Facebook Audience Network adapters to 4.26.1.
 - Updated Flurry adapters to 8.1.0.
diff --git a/Jenkinsfile b/Jenkinsfile
index 0f179eab..6b5523bc 100644
--- a/Jenkinsfile
+++ b/Jenkinsfile
@@ -13,10 +13,10 @@ pipeline {
     }
     post {
         success {
-            hipchatSend message: "${env.JOB_NAME} #${env.BUILD_NUMBER} has succeeded.", color: 'GREEN'
+            slackSend color: 'GREEN', message: "<${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}> has succeeded."
         }
         failure {
-            hipchatSend message: "Attention @here ${env.JOB_NAME} #${env.BUILD_NUMBER} has failed.", color: 'RED'
+            slackSend color: 'RED', message: "Attention @here <${env.BUILD_URL}|${env.JOB_NAME} #${env.BUILD_NUMBER}> has failed."
         }
     }
 }
diff --git a/README.md b/README.md
index a262d86f..e866608d 100644
--- a/README.md
+++ b/README.md
@@ -39,7 +39,7 @@ The MoPub SDK is available via:
     }
 
     dependencies {
-        compile('com.mopub:mopub-sdk:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk:4.20.0@aar') {
             transitive = true
         }
     }
@@ -61,27 +61,27 @@ The MoPub SDK is available via:
         // ... other project dependencies
 
         // For banners
-        compile('com.mopub:mopub-sdk-banner:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk-banner:4.20.0@aar') {
             transitive = true
         }
         
         // For interstitials
-        compile('com.mopub:mopub-sdk-interstitial:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk-interstitial:4.20.0@aar') {
             transitive = true
         }
 
         // For rewarded videos. This will automatically also include interstitials
-        compile('com.mopub:mopub-sdk-rewardedvideo:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk-rewardedvideo:4.20.0@aar') {
             transitive = true
         }
 
         // For native static (images).
-        compile('com.mopub:mopub-sdk-native-static:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-static:4.20.0@aar') {
             transitive = true
         }
 
         // For native video. This will automatically also include native static
-        compile('com.mopub:mopub-sdk-native-video:4.19.0@aar') {
+        implementation('com.mopub:mopub-sdk-native-video:4.20.0@aar') {
             transitive = true
         }
     }
@@ -109,9 +109,11 @@ The MoPub SDK is available via:
 ## New in this Version
 Please view the [changelog](https://github.com/mopub/mopub-android-sdk/blob/master/CHANGELOG.md) for a complete list of additions, fixes, and enhancements in the latest release.
 
-- Updated Facebook Audience Network adapters to 4.26.1.
-- Updated Flurry adapters to 8.1.0.
-- Updated Millennial rewarded ads adapters to 6.6.1.
+- Upgraded Gradle dependency to 4.3.1.
+- Upgraded Moat dependency to 2.4.1. This fixes the AAPT2 manifest merge error.
+- Fixed a viewability bug for video ads where ViewGroups were not being properly added to the list of known obstructions.
+- We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
 
 ## Requirements
 
@@ -134,7 +136,7 @@ Normally, to add the MoPub SDK to your app via JCenter, your `build.gradle` woul
 
 ```	
 dependencies {
-    compile('com.mopub:mopub-sdk:4.18.0@aar') {
+    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
         transitive = true
     }
 }
@@ -143,7 +145,7 @@ Update to the following to exclude one or both viewability vendors:
 
 ```
 dependencies {
-    compile('com.mopub:mopub-sdk:4.19.0@aar') {
+    implementation('com.mopub:mopub-sdk:4.20.0@aar') {
         transitive = true
         exclude module: 'libAvid-mopub' // To exclude AVID
         exclude module: 'moat-mobile-app-kit' // To exclude Moat
diff --git a/build.gradle b/build.gradle
index de4bac44..9abd30bf 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,6 +2,7 @@ buildscript {
     repositories {
         mavenCentral()
         jcenter()
+        google()
     }
 
     dependencies {
@@ -11,5 +12,5 @@ buildscript {
 }
 
 task wrapper(type: Wrapper) {
-    gradleVersion = '2.10'
+    gradleVersion = '4.3.1'
 }
diff --git a/extras/README.md b/extras/README.md
new file mode 100644
index 00000000..dae4df22
--- /dev/null
+++ b/extras/README.md
@@ -0,0 +1,5 @@
+# MoPub Android SDK
+
+We are formally separating network adapters from our MoPub SDK. This is to enable an independent release cadence resulting in faster updates and certification cycles. New mediation location is accessible [here](https://github.com/mopub/mopub-android-mediation).  
+
+We have also added an additional tool, making it easy for publishers to get up and running with the mediation integration. Check out https://developers.mopub.com/docs/mediation/integrate/ and integration instructions at https://developers.mopub.com/docs/android/integrating-networks/.
diff --git a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java b/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
deleted file mode 100644
index f0b08021..00000000
--- a/extras/src/com/mopub/mobileads/AdColonyInterstitial.java
+++ /dev/null
@@ -1,222 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.adcolony.sdk.AdColony;
-import com.adcolony.sdk.AdColonyAppOptions;
-import com.adcolony.sdk.AdColonyInterstitialListener;
-import com.adcolony.sdk.AdColonyZone;
-import com.mopub.common.util.Json;
-
-import java.util.Arrays;
-import java.util.Map;
-
-/**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
- */
-public class AdColonyInterstitial extends CustomEventInterstitial {
-    private static final String TAG = "AdColonyInterstitial";
-    /*
-     * We recommend passing the AdColony client options, app ID, all zone IDs, and current zone ID
-     * in the serverExtras Map by specifying Custom Event Data in MoPub's web interface.
-     *
-     * Please see AdColony's documentation for more information:
-     * https://github.com/AdColony/AdColony-Android-SDK-3
-     */
-    private static final String DEFAULT_CLIENT_OPTIONS = "version=YOUR_APP_VERSION_HERE,store:google";
-    private static final String DEFAULT_APP_ID = "YOUR_AD_COLONY_APP_ID_HERE";
-    private static final String[] DEFAULT_ALL_ZONE_IDS = {"ZONE_ID_1", "ZONE_ID_2", "..."};
-    private static final String DEFAULT_ZONE_ID = "YOUR_CURRENT_ZONE_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String CLIENT_OPTIONS_KEY = "clientOptions";
-    public static final String APP_ID_KEY = "appId";
-    public static final String ALL_ZONE_IDS_KEY = "allZoneIds";
-    public static final String ZONE_ID_KEY = "zoneId";
-
-    private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private AdColonyInterstitialListener mAdColonyInterstitialListener;
-    private final Handler mHandler;
-    private com.adcolony.sdk.AdColonyInterstitial mAdColonyInterstitial;
-    private static String[] previousAdColonyAllZoneIds;
-
-    public AdColonyInterstitial() {
-        mHandler = new Handler();
-    }
-
-    @Override
-    protected void loadInterstitial(@NonNull Context context,
-            @NonNull CustomEventInterstitialListener customEventInterstitialListener,
-            @Nullable Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) {
-        if (context == null
-                || !(context instanceof Activity)
-                || customEventInterstitialListener == null
-                || serverExtras == null) {
-            customEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        String clientOptions = DEFAULT_CLIENT_OPTIONS;
-        String appId = DEFAULT_APP_ID;
-        String[] allZoneIds = DEFAULT_ALL_ZONE_IDS;
-        String zoneId = DEFAULT_ZONE_ID;
-
-        mCustomEventInterstitialListener = customEventInterstitialListener;
-
-        if (extrasAreValid(serverExtras)) {
-            clientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
-            appId = serverExtras.get(APP_ID_KEY);
-            allZoneIds = extractAllZoneIds(serverExtras);
-            zoneId = serverExtras.get(ZONE_ID_KEY);
-        }
-        AdColonyAppOptions adColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(clientOptions);
-        mAdColonyInterstitialListener = getAdColonyInterstitialListener();
-        if (!isAdColonyConfigured()) {
-            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
-        } else if ((shouldReconfigure(previousAdColonyAllZoneIds, allZoneIds))) {
-            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
-            // different than the zones we initially called AdColony.configure() with
-            AdColony.configure((Activity) context, adColonyAppOptions, appId, allZoneIds);
-            previousAdColonyAllZoneIds = allZoneIds;
-        }
-
-        AdColony.requestInterstitial(zoneId, mAdColonyInterstitialListener);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mAdColonyInterstitial == null || mAdColonyInterstitial.isExpired()) {
-            Log.e(TAG, "AdColony interstitial ad is null or has expired");
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-                }
-            });
-        } else {
-            mAdColonyInterstitial.show();
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mAdColonyInterstitial != null) {
-            mAdColonyInterstitialListener = null;
-            mAdColonyInterstitial.setListener(null);
-            mAdColonyInterstitial.destroy();
-            mAdColonyInterstitial = null;
-        }
-    }
-
-    private boolean isAdColonyConfigured() {
-        return !AdColony.getSDKVersion().isEmpty();
-    }
-
-    private AdColonyInterstitialListener getAdColonyInterstitialListener() {
-        if (mAdColonyInterstitialListener != null) {
-            return mAdColonyInterstitialListener;
-        } else {
-            return new AdColonyInterstitialListener() {
-                @Override
-                public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
-                    mAdColonyInterstitial = adColonyInterstitial;
-                    Log.d(TAG, "AdColony interstitial ad has been successfully loaded.");
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            mCustomEventInterstitialListener.onInterstitialLoaded();
-                        }
-                    });
-                }
-
-                @Override
-                public void onRequestNotFilled(@NonNull AdColonyZone zone) {
-                    Log.d(TAG, "AdColony interstitial ad has no fill.");
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                        }
-                    });
-                }
-
-                @Override
-                public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-                    Log.d(TAG, "AdColony interstitial ad has been dismissed.");
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            mCustomEventInterstitialListener.onInterstitialDismissed();
-                        }
-                    });
-                }
-
-                @Override
-                public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-                    Log.d(TAG, "AdColony interstitial ad shown: " + ad.getZoneID());
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            mCustomEventInterstitialListener.onInterstitialShown();
-                        }
-                    });
-                }
-
-                @Override
-                public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-                    Log.d(TAG, "AdColony interstitial ad is expiring; requesting new ad");
-                    AdColony.requestInterstitial(ad.getZoneID(), mAdColonyInterstitialListener);
-                }
-
-                @Override
-                public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-                    mCustomEventInterstitialListener.onInterstitialClicked();
-                }
-            };
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras != null
-                && extras.containsKey(CLIENT_OPTIONS_KEY)
-                && extras.containsKey(APP_ID_KEY)
-                && extras.containsKey(ALL_ZONE_IDS_KEY)
-                && extras.containsKey(ZONE_ID_KEY);
-    }
-
-    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
-        // If AdColony is configured already, but previousZones is null, then that means AdColony
-        // was configured with the AdColonyRewardedVideo adapter so attempt to configure with
-        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
-        // the same as the zones that the other adapter called AdColony.configure() with.
-        if (previousZones == null) {
-            return true;
-        } else if (newZones == null) {
-            return false;
-        } else if (previousZones.length != newZones.length) {
-            return true;
-        }
-        Arrays.sort(previousZones);
-        Arrays.sort(newZones);
-        return !Arrays.equals(previousZones, newZones);
-    }
-
-    private String[] extractAllZoneIds(Map<String, String> serverExtras) {
-        String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
-
-        // AdColony requires at least one valid String in the allZoneIds array.
-        if (result.length == 0) {
-            result = new String[]{""};
-        }
-
-        return result;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java b/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
deleted file mode 100644
index accb01f2..00000000
--- a/extras/src/com/mopub/mobileads/AdColonyRewardedVideo.java
+++ /dev/null
@@ -1,401 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.adcolony.sdk.AdColony;
-import com.adcolony.sdk.AdColonyAdOptions;
-import com.adcolony.sdk.AdColonyAppOptions;
-import com.adcolony.sdk.AdColonyInterstitial;
-import com.adcolony.sdk.AdColonyInterstitialListener;
-import com.adcolony.sdk.AdColonyReward;
-import com.adcolony.sdk.AdColonyRewardListener;
-import com.adcolony.sdk.AdColonyZone;
-
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MediationSettings;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.util.Json;
-
-import java.util.Arrays;
-import java.util.Map;
-import java.util.WeakHashMap;
-import java.util.concurrent.ScheduledThreadPoolExecutor;
-import java.util.concurrent.TimeUnit;
-
-/**
- * Please reference the Supported Mediation Partner page at http://bit.ly/2mqsuFH for the latest version and ad format certifications.
- */
-public class AdColonyRewardedVideo extends CustomEventRewardedVideo {
-    private static final String TAG = "AdColonyRewardedVideo";
-    /*
-     * We recommend passing the AdColony client options, app ID, all zone IDs, and current zone ID
-     * in the serverExtras Map by specifying Custom Event Data in MoPub's web interface.
-     *
-     * Please see AdColony's documentation for more information:
-     * https://github.com/AdColony/AdColony-Android-SDK-3
-     */
-    private static final String DEFAULT_CLIENT_OPTIONS = "version=YOUR_APP_VERSION_HERE,store:google";
-    private static final String DEFAULT_APP_ID = "YOUR_AD_COLONY_APP_ID_HERE";
-    private static final String[] DEFAULT_ALL_ZONE_IDS = {"ZONE_ID_1", "ZONE_ID_2", "..."};
-    private static final String DEFAULT_ZONE_ID = "YOUR_CURRENT_ZONE_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String CLIENT_OPTIONS_KEY = "clientOptions";
-    public static final String APP_ID_KEY = "appId";
-    public static final String ALL_ZONE_IDS_KEY = "allZoneIds";
-    public static final String ZONE_ID_KEY = "zoneId";
-
-    private static boolean sInitialized = false;
-    private static LifecycleListener sLifecycleListener = new BaseLifecycleListener();
-    private static String[] previousAdColonyAllZoneIds;
-
-    AdColonyInterstitial mAd;
-    private String mZoneId;
-    private AdColonyListener mAdColonyListener;
-    private AdColonyAdOptions mAdColonyAdOptions = new AdColonyAdOptions();
-    private AdColonyAppOptions mAdColonyAppOptions = new AdColonyAppOptions();
-    private static WeakHashMap<String, AdColonyInterstitial> sZoneIdToAdMap = new WeakHashMap<>();
-
-
-    @Nullable
-    private String mAdUnitId;
-    private boolean mIsLoading = false;
-
-    // For waiting and notifying the SDK:
-    private final Handler mHandler;
-    private final ScheduledThreadPoolExecutor mScheduledThreadPoolExecutor;
-
-    public AdColonyRewardedVideo() {
-        mScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
-        mHandler = new Handler();
-    }
-
-    @Nullable
-    @Override
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return mAdColonyListener;
-    }
-
-    @Nullable
-    @Override
-    public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
-    }
-
-    @NonNull
-    @Override
-    public String getAdNetworkId() {
-        return mZoneId;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mScheduledThreadPoolExecutor.shutdownNow();
-        AdColonyInterstitial ad = sZoneIdToAdMap.get(mZoneId);
-        if (ad != null) {
-            ad.setListener(null);
-            ad.destroy();
-            sZoneIdToAdMap.remove(mZoneId);
-            Log.d(TAG, "AdColony rewarded video destroyed");
-        }
-    }
-
-    @Override
-    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        synchronized (AdColonyRewardedVideo.class) {
-            if (sInitialized) {
-                return false;
-            }
-
-            String adColonyClientOptions = DEFAULT_CLIENT_OPTIONS;
-            String adColonyAppId = DEFAULT_APP_ID;
-            String[] adColonyAllZoneIds = DEFAULT_ALL_ZONE_IDS;
-
-            // Set up serverExtras
-            if (extrasAreValid(serverExtras)) {
-                adColonyClientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
-                adColonyAppId = serverExtras.get(APP_ID_KEY);
-                adColonyAllZoneIds = extractAllZoneIds(serverExtras);
-            }
-
-            setUpGlobalSettings();
-            mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
-            if (!isAdColonyConfigured()) {
-                previousAdColonyAllZoneIds = adColonyAllZoneIds;
-                AdColony.configure(launcherActivity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
-            }
-
-            sInitialized = true;
-            return true;
-        }
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull final Activity activity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        mZoneId = DEFAULT_ZONE_ID;
-        if (extrasAreValid(serverExtras)) {
-            mZoneId = serverExtras.get(ZONE_ID_KEY);
-            String adColonyClientOptions = serverExtras.get(CLIENT_OPTIONS_KEY);
-            String adColonyAppId = serverExtras.get(APP_ID_KEY);
-            String[] adColonyAllZoneIds = extractAllZoneIds(serverExtras);
-
-            // Need to check the zone IDs sent from the MoPub portal and reconfigure if they are
-            // different than the zones we initially called AdColony.configure() with
-            if (shouldReconfigure(previousAdColonyAllZoneIds, adColonyAllZoneIds)) {
-                mAdColonyAppOptions = AdColonyAppOptions.getMoPubAppOptions(adColonyClientOptions);
-                AdColony.configure(activity, mAdColonyAppOptions, adColonyAppId, adColonyAllZoneIds);
-                previousAdColonyAllZoneIds = adColonyAllZoneIds;
-            }
-        }
-
-        Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
-        if (adUnitObject != null && adUnitObject instanceof String) {
-            mAdUnitId = (String) adUnitObject;
-        }
-
-        sZoneIdToAdMap.put(mZoneId, null);
-        setUpAdOptions();
-        mAdColonyListener = new AdColonyListener(mAdColonyAdOptions);
-        AdColony.setRewardListener(mAdColonyListener);
-        AdColony.requestInterstitial(mZoneId, mAdColonyListener, mAdColonyAdOptions);
-        scheduleOnVideoReady();
-    }
-
-    private static boolean shouldReconfigure(String[] previousZones, String[] newZones) {
-        // If AdColony is configured already, but previousZones is null, then that means AdColony
-        // was configured with the AdColonyInterstitial adapter so attempt to configure with
-        // the ids in newZones. They will be ignored within the AdColony SDK if the zones are
-        // the same as the zones that the other adapter called AdColony.configure() with.
-        if (previousZones == null) {
-            return true;
-        } else if (newZones == null) {
-            return false;
-        } else if (previousZones.length != newZones.length) {
-            return true;
-        }
-        Arrays.sort(previousZones);
-        Arrays.sort(newZones);
-        return !Arrays.equals(previousZones, newZones);
-    }
-
-    private void setUpAdOptions() {
-        mAdColonyAdOptions.enableConfirmationDialog(getConfirmationDialogFromSettings());
-        mAdColonyAdOptions.enableResultsDialog(getResultsDialogFromSettings());
-    }
-
-    private boolean isAdColonyConfigured() {
-        return !AdColony.getSDKVersion().isEmpty();
-    }
-
-    @Override
-    public boolean hasVideoAvailable() {
-        return mAd != null && !mAd.isExpired();
-    }
-
-    @Override
-    public void showVideo() {
-        if (this.hasVideoAvailable()) {
-            mAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
-                    AdColonyRewardedVideo.class,
-                    mZoneId,
-                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras != null
-                && extras.containsKey(CLIENT_OPTIONS_KEY)
-                && extras.containsKey(APP_ID_KEY)
-                && extras.containsKey(ALL_ZONE_IDS_KEY)
-                && extras.containsKey(ZONE_ID_KEY);
-    }
-
-    private String[] extractAllZoneIds(Map<String, String> serverExtras) {
-        String[] result = Json.jsonArrayToStringArray(serverExtras.get(ALL_ZONE_IDS_KEY));
-
-        // AdColony requires at least one valid String in the allZoneIds array.
-        if (result.length == 0) {
-            result = new String[]{""};
-        }
-
-        return result;
-    }
-
-    private void setUpGlobalSettings() {
-        final AdColonyGlobalMediationSettings globalMediationSettings =
-                MoPubRewardedVideoManager.getGlobalMediationSettings(AdColonyGlobalMediationSettings.class);
-        if (globalMediationSettings != null) {
-            if (globalMediationSettings.getUserId() != null) {
-                mAdColonyAppOptions.setUserID(globalMediationSettings.getUserId());
-            }
-        }
-    }
-
-    private boolean getConfirmationDialogFromSettings() {
-        final AdColonyInstanceMediationSettings settings =
-                MoPubRewardedVideoManager.getInstanceMediationSettings(AdColonyInstanceMediationSettings.class, mAdUnitId);
-        return settings != null && settings.withConfirmationDialog();
-    }
-
-    private boolean getResultsDialogFromSettings() {
-        final AdColonyInstanceMediationSettings settings =
-                MoPubRewardedVideoManager.getInstanceMediationSettings(AdColonyInstanceMediationSettings.class, mAdUnitId);
-        return settings != null && settings.withResultsDialog();
-    }
-
-    private void scheduleOnVideoReady() {
-        Runnable runnable = new Runnable() {
-            @Override
-            public void run() {
-                if (isAdAvailable(mZoneId)) {
-                    mAd = sZoneIdToAdMap.get(mZoneId);
-                    mIsLoading = false;
-                    mScheduledThreadPoolExecutor.shutdownNow();
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (hasVideoAvailable()) {
-                                Log.d(TAG, "AdColony rewarded ad has been successfully loaded.");
-                                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
-                                        AdColonyRewardedVideo.class,
-                                        mZoneId);
-                            } else {
-                                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                                        AdColonyRewardedVideo.class,
-                                        mZoneId,
-                                        MoPubErrorCode.NETWORK_NO_FILL);
-                            }
-                        }
-                    });
-                }
-            }
-        };
-
-        if (!mIsLoading) {
-            mScheduledThreadPoolExecutor.scheduleAtFixedRate(runnable, 1, 1, TimeUnit.SECONDS);
-            mIsLoading = true;
-        }
-    }
-
-    private boolean isAdAvailable(String zoneId) {
-        return sZoneIdToAdMap.get(zoneId) != null;
-    }
-
-    private static class AdColonyListener extends AdColonyInterstitialListener
-            implements AdColonyRewardListener, CustomEventRewardedVideoListener {
-        private static final String TAG = "AdColonyListener";
-        private AdColonyAdOptions mAdOptions;
-
-        AdColonyListener(AdColonyAdOptions adOptions) {
-            mAdOptions = adOptions;
-        }
-
-        @Override
-        public void onReward(@NonNull AdColonyReward a) {
-            MoPubReward reward;
-            if (a.success()) {
-                Log.d(TAG, "AdColonyReward name: " + a.getRewardName());
-                Log.d(TAG, "AdColonyReward amount: " + a.getRewardAmount());
-                reward = MoPubReward.success(a.getRewardName(), a.getRewardAmount());
-            } else {
-                Log.d(TAG, "AdColonyReward failed");
-                reward = MoPubReward.failure();
-            }
-
-            MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                    AdColonyRewardedVideo.class,
-                    a.getZoneID(),
-                    reward);
-        }
-
-        @Override
-        public void onRequestFilled(@NonNull com.adcolony.sdk.AdColonyInterstitial adColonyInterstitial) {
-            sZoneIdToAdMap.put(adColonyInterstitial.getZoneID(), adColonyInterstitial);
-        }
-
-        @Override
-        public void onRequestNotFilled(@NonNull AdColonyZone zone) {
-            Log.d(TAG, "AdColony rewarded ad has no fill.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                    AdColonyRewardedVideo.class,
-                    zone.getZoneID(),
-                    MoPubErrorCode.NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void onClosed(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-            Log.d(TAG, "AdColony rewarded ad has been dismissed.");
-            MoPubRewardedVideoManager.onRewardedVideoClosed(
-                    AdColonyRewardedVideo.class,
-                    ad.getZoneID());
-        }
-
-        @Override
-        public void onOpened(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-            Log.d(TAG, "AdColony rewarded ad shown: " + ad.getZoneID());
-            MoPubRewardedVideoManager.onRewardedVideoStarted(
-                    AdColonyRewardedVideo.class,
-                    ad.getZoneID());
-        }
-
-        @Override
-        public void onExpiring(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-            Log.d(TAG, "AdColony rewarded ad is expiring; requesting new ad");
-            AdColony.requestInterstitial(ad.getZoneID(), ad.getListener(), mAdOptions);
-        }
-
-        @Override
-        public void onClicked(@NonNull com.adcolony.sdk.AdColonyInterstitial ad) {
-            MoPubRewardedVideoManager.onRewardedVideoClicked(
-                    AdColonyRewardedVideo.class,
-                    ad.getZoneID());
-        }
-    }
-
-    public static final class AdColonyGlobalMediationSettings implements MediationSettings {
-        @Nullable
-        private final String mUserId;
-
-        public AdColonyGlobalMediationSettings(@Nullable String userId) {
-            mUserId = userId;
-        }
-
-        @Nullable
-        public String getUserId() {
-            return mUserId;
-        }
-    }
-
-    public static final class AdColonyInstanceMediationSettings implements MediationSettings {
-        private final boolean mWithConfirmationDialog;
-        private final boolean mWithResultsDialog;
-
-        public AdColonyInstanceMediationSettings(
-                boolean withConfirmationDialog, boolean withResultsDialog) {
-            mWithConfirmationDialog = withConfirmationDialog;
-            mWithResultsDialog = withResultsDialog;
-        }
-
-        public boolean withConfirmationDialog() {
-            return mWithConfirmationDialog;
-        }
-
-        public boolean withResultsDialog() {
-            return mWithResultsDialog;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java b/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
deleted file mode 100644
index 0201a1aa..00000000
--- a/extras/src/com/mopub/mobileads/ChartboostInterstitial.java
+++ /dev/null
@@ -1,91 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.chartboost.sdk.Chartboost;
-import com.mopub.common.Preconditions;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Chartboost interstitial ads.
- *
- * Certified with Chartboost 7.0.1
- */
-class ChartboostInterstitial extends CustomEventInterstitial {
-
-    @NonNull
-    private String mLocation = ChartboostShared.LOCATION_DEFAULT;
-
-    /*
-     * Note: Chartboost recommends implementing their specific Activity lifecycle callbacks in your
-     * Activity's onStart(), onStop(), onBackPressed() methods for proper results. Please see their
-     * documentation for more information.
-     */
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(@NonNull Context context,
-            @NonNull CustomEventInterstitialListener interstitialListener,
-            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(context);
-        Preconditions.checkNotNull(interstitialListener);
-        Preconditions.checkNotNull(localExtras);
-        Preconditions.checkNotNull(serverExtras);
-
-        if (!(context instanceof Activity)) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
-            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
-            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
-        }
-
-        // If there's already a listener for this location, then another instance of
-        // CustomEventInterstitial is still active and we should fail.
-        if (ChartboostShared.getDelegate().hasInterstitialLocation(mLocation) &&
-                ChartboostShared.getDelegate().getInterstitialListener(mLocation) != interstitialListener) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        Activity activity = (Activity) context;
-        try {
-            ChartboostShared.initializeSdk(activity, serverExtras);
-            ChartboostShared.getDelegate().registerInterstitialListener(mLocation, interstitialListener);
-        } catch (NullPointerException e) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        } catch (IllegalStateException e) {
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        Chartboost.onCreate(activity);
-        Chartboost.onStart(activity);
-        if (Chartboost.hasInterstitial(mLocation)) {
-            ChartboostShared.getDelegate().didCacheInterstitial(mLocation);
-        } else {
-            Chartboost.cacheInterstitial(mLocation);
-        }
-    }
-
-    @Override
-    protected void showInterstitial() {
-        Log.d("MoPub", "Showing Chartboost interstitial ad.");
-        Chartboost.showInterstitial(mLocation);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        ChartboostShared.getDelegate().unregisterInterstitialListener(mLocation);
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java b/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
deleted file mode 100644
index bc994411..00000000
--- a/extras/src/com/mopub/mobileads/ChartboostRewardedVideo.java
+++ /dev/null
@@ -1,176 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.os.Handler;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-
-import com.chartboost.sdk.Chartboost;
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MediationSettings;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Chartboost rewarded videos.
- *
- * Certified with Chartboost 7.0.1
- */
-public class ChartboostRewardedVideo extends CustomEventRewardedVideo {
-    @NonNull private static final LifecycleListener sLifecycleListener =
-            new ChartboostLifecycleListener();
-
-    @NonNull private String mLocation = ChartboostShared.LOCATION_DEFAULT;
-    @NonNull private final Handler mHandler;
-
-    public ChartboostRewardedVideo() {
-        mHandler = new Handler();
-    }
-
-    @Override
-    @NonNull
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return ChartboostShared.getDelegate();
-    }
-
-    @Override
-    @NonNull
-    public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
-    }
-
-    @Override
-    @NonNull
-    public String getAdNetworkId() {
-        return mLocation;
-    }
-
-    @Override
-    public boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) throws Exception {
-        // We need to attempt to reinitialize Chartboost on each request, in case an interstitial has been
-        // loaded and used since then.
-        ChartboostShared.initializeSdk(launcherActivity, serverExtras);  // throws IllegalStateException
-
-        // Always return true so that the lifecycle listener is registered even if an interstitial
-        // did the initialization.
-        return true;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras)
-            throws Exception {
-
-        if (serverExtras.containsKey(ChartboostShared.LOCATION_KEY)) {
-            String location = serverExtras.get(ChartboostShared.LOCATION_KEY);
-            mLocation = TextUtils.isEmpty(location) ? mLocation : location;
-        }
-
-        ChartboostShared.getDelegate().registerRewardedVideoLocation(mLocation);
-        setUpMediationSettingsForRequest((String) localExtras.get(DataKeys.AD_UNIT_ID_KEY));
-
-        // We do this to ensure that the custom event manager has a chance to get the listener
-        // and ad unit ID before any delegate callbacks are made.
-        mHandler.post(new Runnable() {
-            public void run() {
-                if (Chartboost.hasRewardedVideo(mLocation)) {
-                    ChartboostShared.getDelegate().didCacheRewardedVideo(mLocation);
-                } else {
-                    Chartboost.cacheRewardedVideo(mLocation);
-                }
-            }
-        });
-    }
-
-    private void setUpMediationSettingsForRequest(String moPubId) {
-        final ChartboostMediationSettings globalSettings =
-                MoPubRewardedVideoManager.getGlobalMediationSettings(ChartboostMediationSettings.class);
-        final ChartboostMediationSettings instanceSettings =
-                MoPubRewardedVideoManager.getInstanceMediationSettings(ChartboostMediationSettings.class, moPubId);
-
-        // Instance settings override global settings.
-        if (instanceSettings != null) {
-            Chartboost.setCustomId(instanceSettings.getCustomId());
-        } else if (globalSettings != null) {
-            Chartboost.setCustomId(globalSettings.getCustomId());
-        }
-    }
-
-    @Override
-    public boolean hasVideoAvailable() {
-        return Chartboost.hasRewardedVideo(mLocation);
-    }
-
-    @Override
-    public void showVideo() {
-        if (hasVideoAvailable()) {
-            Chartboost.showRewardedVideo(mLocation);
-        } else {
-            MoPubLog.d("Attempted to show Chartboost rewarded video before it was available.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        // This prevents sending didCache or didFailToCache callbacks.
-        ChartboostShared.getDelegate().unregisterRewardedVideoLocation(mLocation);
-    }
-
-    private static final class ChartboostLifecycleListener implements LifecycleListener {
-        @Override
-        public void onCreate(@NonNull Activity activity) {
-            Chartboost.onCreate(activity);
-        }
-
-        @Override
-        public void onStart(@NonNull Activity activity) {
-            Chartboost.onStart(activity);
-        }
-
-        @Override
-        public void onPause(@NonNull Activity activity) {
-            Chartboost.onPause(activity);
-        }
-
-        @Override
-        public void onResume(@NonNull Activity activity) {
-            Chartboost.onResume(activity);
-        }
-
-        @Override
-        public void onRestart(@NonNull Activity activity) {
-        }
-
-        @Override
-        public void onStop(@NonNull Activity activity) {
-            Chartboost.onStop(activity);
-        }
-
-        @Override
-        public void onDestroy(@NonNull Activity activity) {
-            Chartboost.onDestroy(activity);
-        }
-
-        @Override
-        public void onBackPressed(@NonNull Activity activity) {
-            Chartboost.onBackPressed();
-        }
-    }
-
-    public static final class ChartboostMediationSettings implements MediationSettings {
-        @NonNull private final String mCustomId;
-
-        public ChartboostMediationSettings(@NonNull final String customId) {
-            mCustomId = customId;
-        }
-
-        @NonNull
-        public String getCustomId() {
-            return mCustomId;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/ChartboostShared.java b/extras/src/com/mopub/mobileads/ChartboostShared.java
deleted file mode 100644
index d70fb7ed..00000000
--- a/extras/src/com/mopub/mobileads/ChartboostShared.java
+++ /dev/null
@@ -1,296 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.chartboost.sdk.Chartboost;
-import com.chartboost.sdk.ChartboostDelegate;
-import com.chartboost.sdk.Model.CBError;
-import com.mopub.common.MoPub;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.Preconditions;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
-
-import java.util.Collections;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.TreeSet;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.VIDEO_DOWNLOAD_ERROR;
-
-/**
- * Shared infrastructure for initializing the Chartboost SDK when mediated by MoPub
- *
- * Certified with Chartboost 7.0.1
- */
-public class ChartboostShared {
-    private static volatile ChartboostSingletonDelegate sDelegate = new ChartboostSingletonDelegate();
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "appId";
-    public static final String APP_SIGNATURE_KEY = "appSignature";
-    public static final String LOCATION_KEY = "location";
-    public static final String LOCATION_DEFAULT = "Default";
-
-    @Nullable private static String mAppId;
-    @Nullable private static String mAppSignature;
-
-    /**
-     * Initialize the Chartboost SDK for the provided application id and app signature.
-     */
-    public static synchronized boolean initializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, String> serverExtras) {
-        Preconditions.checkNotNull(launcherActivity);
-        Preconditions.checkNotNull(serverExtras);
-
-        // Validate Chartboost args
-        if (!serverExtras.containsKey(APP_ID_KEY)) {
-            throw new IllegalStateException("Chartboost rewarded video initialization" +
-                    " failed due to missing application ID.");
-        }
-
-        if (!serverExtras.containsKey(APP_SIGNATURE_KEY)) {
-            throw new IllegalStateException("Chartboost rewarded video initialization" +
-                    " failed due to missing application signature.");
-        }
-
-        final String appId = serverExtras.get(APP_ID_KEY);
-        final String appSignature = serverExtras.get(APP_SIGNATURE_KEY);
-
-        if (appId.equals(mAppId) && appSignature.equals(mAppSignature)) {
-            // We don't need to reinitialize.
-            return false;
-        }
-
-        mAppId = appId;
-        mAppSignature = appSignature;
-
-        // Perform all the common SDK initialization steps including startAppWithId
-        Chartboost.startWithAppId(launcherActivity, mAppId, mAppSignature);
-        Chartboost.setMediation(Chartboost.CBMediation.CBMediationMoPub, MoPub.SDK_VERSION);
-        Chartboost.setDelegate(sDelegate);
-        Chartboost.setShouldRequestInterstitialsInFirstSession(true);
-        Chartboost.setAutoCacheAds(false);
-        Chartboost.setShouldDisplayLoadingViewForMoreApps(false);
-
-        // Callers of this method need to call onCreate & onStart themselves.
-        return true;
-    }
-
-    @NonNull
-    public static ChartboostSingletonDelegate getDelegate() {
-        return sDelegate;
-    }
-
-    /**
-     * A {@link ChartboostDelegate} that can forward events for Chartboost interstitials
-     * and rewarded videos to the appropriate listener based on the Chartboost location used.
-     */
-    public static class ChartboostSingletonDelegate extends ChartboostDelegate
-            implements CustomEventRewardedVideo.CustomEventRewardedVideoListener {
-        private static final CustomEventInterstitialListener NULL_LISTENER =
-                new CustomEventInterstitialListener() {
-                    @Override
-                    public void onInterstitialLoaded() { }
-
-                    @Override
-                    public void onInterstitialFailed(MoPubErrorCode errorCode) { }
-
-                    @Override
-                    public void onInterstitialShown() { }
-
-                    @Override
-                    public void onInterstitialClicked() { }
-
-                    @Override
-                    public void onLeaveApplication() { }
-
-                    @Override
-                    public void onInterstitialDismissed() { }
-                };
-
-        //***************
-        // Chartboost Location Management for interstitials and rewarded videos
-        //***************
-
-        private Map<String, CustomEventInterstitialListener> mInterstitialListenersForLocation
-                = Collections.synchronizedMap(new TreeMap<String, CustomEventInterstitialListener>());
-
-        private Set<String> mRewardedVideoLocationsToLoad = Collections.synchronizedSet(new TreeSet<String>());
-
-        public void registerInterstitialListener(@NonNull String location,
-                @NonNull CustomEventInterstitialListener interstitialListener) {
-            Preconditions.checkNotNull(location);
-            Preconditions.checkNotNull(interstitialListener);
-            mInterstitialListenersForLocation.put(location, interstitialListener);
-        }
-
-        public void unregisterInterstitialListener(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mInterstitialListenersForLocation.remove(location);
-        }
-
-        public void registerRewardedVideoLocation(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mRewardedVideoLocationsToLoad.add(location);
-        }
-
-        public void unregisterRewardedVideoLocation(@NonNull String location) {
-            Preconditions.checkNotNull(location);
-            mRewardedVideoLocationsToLoad.remove(location);
-        }
-
-        @NonNull
-        public CustomEventInterstitialListener getInterstitialListener(@NonNull String location) {
-            final CustomEventInterstitialListener listener = mInterstitialListenersForLocation.get(location);
-            return listener != null ? listener : NULL_LISTENER;
-        }
-
-        public boolean hasInterstitialLocation(@NonNull String location) {
-            return mInterstitialListenersForLocation.containsKey(location);
-        }
-
-        //******************
-        // Chartboost Delegate methods.
-        //******************
-
-        //******************
-        // Interstitials
-        //******************
-        @Override
-        public void didCacheInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial loaded successfully.");
-            getInterstitialListener(location).onInterstitialLoaded();
-        }
-
-        @Override
-        public void didFailToLoadInterstitial(String location, CBError.CBImpressionError error) {
-            String suffix = error != null ? "Error: " + error.name() : "";
-            Log.d("MoPub", "Chartboost interstitial ad failed to load." + suffix);
-            getInterstitialListener(location).onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void didDismissInterstitial(String location) {
-            // Note that this method is fired before didCloseInterstitial and didClickInterstitial.
-            MoPubLog.d("Chartboost interstitial ad dismissed.");
-            getInterstitialListener(location).onInterstitialDismissed();
-        }
-
-        @Override
-        public void didCloseInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad closed.");
-        }
-
-        @Override
-        public void didClickInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad clicked.");
-            getInterstitialListener(location).onInterstitialClicked();
-        }
-
-        @Override
-        public void didDisplayInterstitial(String location) {
-            MoPubLog.d("Chartboost interstitial ad shown.");
-            getInterstitialListener(location).onInterstitialShown();
-        }
-
-        //******************
-        // Rewarded Videos
-        //******************
-        @Override
-        public void didCacheRewardedVideo(String location) {
-            super.didCacheRewardedVideo(location);
-
-            if (mRewardedVideoLocationsToLoad.contains(location)) {
-                MoPubLog.d("Chartboost rewarded video cached for location " + location + ".");
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(ChartboostRewardedVideo.class, location);
-                mRewardedVideoLocationsToLoad.remove(location);
-            }
-        }
-
-        @Override
-        public void didFailToLoadRewardedVideo(String location, CBError.CBImpressionError error) {
-            super.didFailToLoadRewardedVideo(location, error);
-            String suffix = error != null ? " with error: " + error.name() : "";
-            if (mRewardedVideoLocationsToLoad.contains(location)) {
-                MoPubErrorCode errorCode = VIDEO_DOWNLOAD_ERROR;
-                MoPubLog.d("Chartboost rewarded video cache failed for location " + location + suffix);
-                if (CBError.CBImpressionError.INVALID_LOCATION.equals(error)) {
-                    errorCode = ADAPTER_CONFIGURATION_ERROR;
-                }
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(ChartboostRewardedVideo.class, location, errorCode);
-                mRewardedVideoLocationsToLoad.remove(location);
-            }
-        }
-
-        @Override
-        public void didDismissRewardedVideo(String location) {
-            // This is called before didCloseRewardedVideo and didClickRewardedVideo
-            super.didDismissRewardedVideo(location);
-            MoPubRewardedVideoManager.onRewardedVideoClosed(ChartboostRewardedVideo.class, location);
-            MoPubLog.d("Chartboost rewarded video dismissed for location " + location + ".");
-        }
-
-        @Override
-        public void didCloseRewardedVideo(String location) {
-            super.didCloseRewardedVideo(location);
-            MoPubLog.d("Chartboost rewarded video closed for location " + location + ".");
-        }
-
-        @Override
-        public void didClickRewardedVideo(String location) {
-            super.didClickRewardedVideo(location);
-            MoPubRewardedVideoManager.onRewardedVideoClicked(ChartboostRewardedVideo.class, location);
-            MoPubLog.d("Chartboost rewarded video clicked for location " + location + ".");
-        }
-
-        @Override
-        public void didCompleteRewardedVideo(String location, int reward) {
-            super.didCompleteRewardedVideo(location, reward);
-            MoPubLog.d("Chartboost rewarded video completed for location " + location + " with "
-                    + "reward amount " + reward);
-            MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                    ChartboostRewardedVideo.class,
-                    location,
-                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, reward));
-        }
-
-        @Override
-        public void didDisplayRewardedVideo(String location) {
-            super.didDisplayRewardedVideo(location);
-            MoPubLog.d("Chartboost rewarded video displayed for location " + location + ".");
-            MoPubRewardedVideoManager.onRewardedVideoStarted(ChartboostRewardedVideo.class, location);
-        }
-
-        //******************
-        // More Apps
-        //******************
-        @Override
-        public boolean shouldRequestMoreApps(String location) {
-            return false;
-        }
-
-        @Override
-        public boolean shouldDisplayMoreApps(final String location) {
-            return false;
-        }
-    }
-
-
-    @VisibleForTesting
-    @Deprecated
-    static void reset() {
-        // Clears all the locations to load and other state.
-        sDelegate = new ChartboostSingletonDelegate();
-        mAppId = null;
-        mAppSignature = null;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FacebookBanner.java b/extras/src/com/mopub/mobileads/FacebookBanner.java
deleted file mode 100644
index 4eccbad5..00000000
--- a/extras/src/com/mopub/mobileads/FacebookBanner.java
+++ /dev/null
@@ -1,138 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdListener;
-import com.facebook.ads.AdSize;
-import com.facebook.ads.AdView;
-import com.mopub.common.DataKeys;
-import com.mopub.common.util.Views;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookBanner extends CustomEventBanner implements AdListener {
-    public static final String PLACEMENT_ID_KEY = "placement_id";
-
-    private AdView mFacebookBanner;
-    private CustomEventBannerListener mBannerListener;
-
-    /**
-     * CustomEventBanner implementation
-     */
-
-    @Override
-    protected void loadBanner(final Context context,
-            final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-
-        final String placementId;
-        if (serverExtrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        int width;
-        int height;
-        if (localExtrasAreValid(localExtras)) {
-            width = (Integer) localExtras.get(DataKeys.AD_WIDTH);
-            height = (Integer) localExtras.get(DataKeys.AD_HEIGHT);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        AdSize adSize = calculateAdSize(width, height);
-        if (adSize == null) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mFacebookBanner = new AdView(context, placementId, adSize);
-        mFacebookBanner.setAdListener(this);
-        mFacebookBanner.disableAutoRefresh();
-        mFacebookBanner.loadAd();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mFacebookBanner != null) {
-            Views.removeFromParent(mFacebookBanner);
-            mFacebookBanner.destroy();
-            mFacebookBanner = null;
-        }
-    }
-
-    /**
-     * AdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad loaded successfully. Showing ad...");
-        mBannerListener.onBannerLoaded(mFacebookBanner);
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        Log.d("MoPub", "Facebook banner ad failed to load.");
-        if (error == AdError.NO_FILL) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad clicked.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        Log.d("MoPub", "Facebook banner ad logged impression.");
-    }
-
-    private boolean serverExtrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private boolean localExtrasAreValid(@NonNull final Map<String, Object> localExtras) {
-        return localExtras.get(DataKeys.AD_WIDTH) instanceof Integer
-                && localExtras.get(DataKeys.AD_HEIGHT) instanceof Integer;
-    }
-
-    @Nullable
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdSize that will properly contain the adView
-        if (height <= AdSize.BANNER_320_50.getHeight()) {
-            return AdSize.BANNER_320_50;
-        } else if (height <= AdSize.BANNER_HEIGHT_90.getHeight()) {
-            return AdSize.BANNER_HEIGHT_90;
-        } else if (height <= AdSize.RECTANGLE_HEIGHT_250.getHeight()) {
-            return AdSize.RECTANGLE_HEIGHT_250;
-        } else {
-            return null;
-        }
-    }
-
-    @Deprecated // for testing
-    AdView getAdView() {
-        return mFacebookBanner;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FacebookInterstitial.java b/extras/src/com/mopub/mobileads/FacebookInterstitial.java
deleted file mode 100644
index 1b24c584..00000000
--- a/extras/src/com/mopub/mobileads/FacebookInterstitial.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.InterstitialAd;
-import com.facebook.ads.InterstitialAdListener;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookInterstitial extends CustomEventInterstitial implements InterstitialAdListener {
-    public static final String PLACEMENT_ID_KEY = "placement_id";
-
-    private InterstitialAd mFacebookInterstitial;
-    private CustomEventInterstitialListener mInterstitialListener;
-
-    /**
-     * CustomEventInterstitial implementation
-     */
-
-    @Override
-    protected void loadInterstitial(final Context context,
-            final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mFacebookInterstitial = new InterstitialAd(context, placementId);
-        mFacebookInterstitial.setAdListener(this);
-        mFacebookInterstitial.loadAd();
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mFacebookInterstitial != null && mFacebookInterstitial.isAdLoaded()) {
-            mFacebookInterstitial.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Facebook interstitial ad before it finished loading. Please try again.");
-            if (mInterstitialListener != null) {
-                onError(mFacebookInterstitial, AdError.INTERNAL_ERROR);
-            } else {
-                Log.d("MoPub", "Interstitial listener not instantiated. Please load interstitial again.");
-            }
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mFacebookInterstitial != null) {
-            mFacebookInterstitial.destroy();
-            mFacebookInterstitial = null;
-        }
-    }
-
-    /**
-     * InterstitialAdListener implementation
-     */
-
-    @Override
-    public void onAdLoaded(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad loaded successfully.");
-        mInterstitialListener.onInterstitialLoaded();
-    }
-
-    @Override
-    public void onError(final Ad ad, final AdError error) {
-        Log.d("MoPub", "Facebook interstitial ad failed to load.");
-        if (error == AdError.NO_FILL) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        } else if (error == AdError.INTERNAL_ERROR) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.UNSPECIFIED);
-        }
-    }
-
-    @Override
-    public void onInterstitialDisplayed(final Ad ad) {
-        Log.d("MoPub", "Showing Facebook interstitial ad.");
-        mInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onAdClicked(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad clicked.");
-        mInterstitialListener.onInterstitialClicked();
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad logged impression.");
-    }
-
-    @Override
-    public void onInterstitialDismissed(final Ad ad) {
-        Log.d("MoPub", "Facebook interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getInterstitialAd() {
-        return mFacebookInterstitial;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java b/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
deleted file mode 100644
index c3c4a318..00000000
--- a/extras/src/com/mopub/mobileads/FacebookRewardedVideo.java
+++ /dev/null
@@ -1,158 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.facebook.ads.AdError;
-import com.facebook.ads.RewardedVideoAd;
-import com.facebook.ads.RewardedVideoAdListener;
-import com.mopub.common.LifecycleListener;
-import com.facebook.ads.Ad;
-import com.mopub.common.MoPubReward;
-
-import java.util.Map;
-
-/**
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookRewardedVideo extends CustomEventRewardedVideo implements RewardedVideoAdListener {
-
-    @Nullable
-    private RewardedVideoAd mRewardedVideoAd;
-    @Nullable
-    private String mPlacementId;
-    private String TAG = "mopub";
-
-    /**
-     * CustomEventRewardedVideo implementation
-     */
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return null;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        // Facebook doesn't have a dedicated initialization call, so we return false and do nothing.
-        return false;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-        if (!serverExtras.isEmpty()) {
-            mPlacementId = serverExtras.get("placement_id");
-
-            if (!TextUtils.isEmpty(mPlacementId)) {
-                if (mRewardedVideoAd != null) {
-                    mRewardedVideoAd.destroy();
-                    mRewardedVideoAd = null;
-                }
-                Log.d(TAG, "Creating a Facebook Rewarded Video instance, and registering callbacks.");
-                mRewardedVideoAd = new RewardedVideoAd(activity, mPlacementId);
-                mRewardedVideoAd.setAdListener(this);
-            } else {
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, getAdNetworkId(), MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                Log.d(TAG, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR.toString());
-                Log.d(TAG, "Placement ID is null or empty.");
-                return;
-            }
-        }
-
-        if (mRewardedVideoAd.isAdLoaded()) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-            return;
-        }
-
-        if (mRewardedVideoAd != null) {
-            Log.d(TAG, "Sending Facebook an ad request.");
-            mRewardedVideoAd.loadAd();
-        }
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        return (mRewardedVideoAd != null) ? (mRewardedVideoAd.getPlacementId()) : ("");
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mRewardedVideoAd != null) {
-            Log.d(TAG, "Performing cleanup tasks...");
-            mRewardedVideoAd.setAdListener(null);
-            mRewardedVideoAd.destroy();
-            mRewardedVideoAd = null;
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mRewardedVideoAd != null && mRewardedVideoAd.isAdLoaded();
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
-            Log.d(TAG, "Facebook Rewarded Video creative is available. Showing...");
-            mRewardedVideoAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, MoPubErrorCode.VIDEO_NOT_AVAILABLE);
-            Log.d(TAG, "Facebook Rewarded Video creative is not available. Try re-requesting.");
-        }
-    }
-
-    @Override
-    public void onRewardedVideoCompleted() {
-        Log.d(TAG, "Facebook Rewarded Video creative is completed. Awarding the user.");
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(FacebookRewardedVideo.class, mPlacementId, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
-    }
-
-    @Override
-    public void onLoggingImpression(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoStarted(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative started playing.");
-    }
-
-    @Override
-    public void onRewardedVideoClosed() {
-        MoPubRewardedVideoManager.onRewardedVideoClosed(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative closed.");
-    }
-
-    @Override
-    public void onAdLoaded(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative cached.");
-    }
-
-    @Override
-    public void onAdClicked(Ad ad) {
-        MoPubRewardedVideoManager.onRewardedVideoClicked(FacebookRewardedVideo.class, mPlacementId);
-        Log.d(TAG, "Facebook Rewarded Video creative clicked.");
-    }
-
-    @Override
-    public void onError(Ad ad, AdError adError) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(FacebookRewardedVideo.class, mPlacementId, mapErrorCode(adError.getErrorCode()));
-        Log.d(TAG, "Loading/Playing Facebook Rewarded Video creative encountered an error: " + mapErrorCode(adError.getErrorCode()).toString());
-    }
-
-    @NonNull
-    private static MoPubErrorCode mapErrorCode(int error) {
-        switch (error) {
-            case AdError.NO_FILL_ERROR_CODE:
-                return MoPubErrorCode.NETWORK_NO_FILL;
-            case AdError.INTERNAL_ERROR_CODE:
-                return MoPubErrorCode.INTERNAL_ERROR;
-            case AdError.NETWORK_ERROR_CODE:
-                return MoPubErrorCode.NO_CONNECTION;
-            default:
-                return MoPubErrorCode.UNSPECIFIED;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java b/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
deleted file mode 100644
index 38ebcd8d..00000000
--- a/extras/src/com/mopub/mobileads/FlurryAgentWrapper.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.flurry.android.FlurryAgent;
-import com.flurry.android.FlurryAgentListener;
-
-/**
- * Certified with Flurry 8.1.0
- */
-public final class FlurryAgentWrapper {
-    public static final String PARAM_API_KEY = "apiKey";
-    public static final String PARAM_AD_SPACE_NAME = "adSpaceName";
-
-    private static final String ORIGIN_IDENTIFIER = "Flurry_Mopub_Android";
-    private static final String ORIGIN_VERSION = "6.5.0";
-
-    private FlurryAgent.Builder mAgentBuilder;
-
-    public static FlurryAgentWrapper getInstance() {
-        return FlurryAgentLoader.INSTANCE;
-    }
-
-    private FlurryAgentWrapper() {
-        mAgentBuilder = new FlurryAgent.Builder()
-                .withLogEnabled(false)
-                .withLogLevel(Log.INFO);
-
-        FlurryAgent.addOrigin(ORIGIN_IDENTIFIER, ORIGIN_VERSION);
-    }
-
-    public synchronized void startSession(@NonNull final Context context,
-            final String apiKey,
-            @Nullable FlurryAgentListener flurryAgentListener) {
-        // validate parameters
-        if (TextUtils.isEmpty(apiKey)) {
-            return;
-        }
-
-        // init
-        if (!FlurryAgent.isSessionActive()) {
-            mAgentBuilder.withListener(flurryAgentListener) // withListener allows nulls
-                    .build(context, apiKey);
-
-            // sessions are automatic on ICS+
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-                return;
-            }
-
-            FlurryAgent.onStartSession(context);
-        }
-    }
-
-    public synchronized void endSession(final Context context) {
-        // validate parameters
-        if (context == null) {
-            return;
-        }
-
-        if (FlurryAgent.isSessionActive()) {
-            // sessions are automatic on ICS+
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-                return;
-            }
-
-            FlurryAgent.onEndSession(context);
-        }
-    }
-
-    public synchronized boolean isSessionActive() {
-        return FlurryAgent.isSessionActive();
-    }
-
-    private static class FlurryAgentLoader {
-        private static final FlurryAgentWrapper INSTANCE = new FlurryAgentWrapper();
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java b/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
deleted file mode 100644
index 8a31a9d7..00000000
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventBanner.java
+++ /dev/null
@@ -1,196 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.text.TextUtils;
-import android.util.Log;
-import android.widget.FrameLayout;
-
-import com.flurry.android.ads.FlurryAdBanner;
-import com.flurry.android.ads.FlurryAdBannerListener;
-import com.flurry.android.ads.FlurryAdErrorType;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-
-/**
- * Certified with Flurry 8.1.0
- */
-class FlurryCustomEventBanner extends com.mopub.mobileads.CustomEventBanner {
-    private static final String LOG_TAG = FlurryCustomEventBanner.class.getSimpleName();
-
-    private Context mContext;
-    private CustomEventBannerListener mListener;
-    private FrameLayout mLayout;
-
-    private String mAdSpaceName;
-
-    private FlurryAdBanner mBanner;
-
-    // CustomEventBanner
-    @Override
-    protected void loadBanner(Context context,
-            CustomEventBannerListener listener,
-            Map<String, Object> localExtras, Map<String, String> serverExtras) {
-        if (context == null) {
-            Log.e(LOG_TAG, "Context cannot be null.");
-            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (listener == null) {
-            Log.e(LOG_TAG, "CustomEventBannerListener cannot be null.");
-            return;
-        }
-
-        if (!(context instanceof Activity)) {
-            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
-            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (!validateExtras(serverExtras)) {
-            Log.e(LOG_TAG, "Failed banner ad fetch: Missing required server extras" +
-                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
-            listener.onBannerFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mContext = context;
-        mListener = listener;
-        mLayout = new FrameLayout(context);
-
-        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-
-        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
-
-        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
-        mBanner = new FlurryAdBanner(mContext, mLayout, mAdSpaceName);
-        mBanner.setListener(new FlurryMopubBannerListener());
-        mBanner.fetchAd();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mContext == null) {
-            return;
-        }
-
-        Log.d(LOG_TAG, "MoPub issued onInvalidate. Flurry ad unit: " + mAdSpaceName);
-
-        if (mBanner != null) {
-            mBanner.destroy();
-            mBanner = null;
-        }
-
-        FlurryAgentWrapper.getInstance().endSession(mContext);
-
-        mContext = null;
-        mListener = null;
-        mLayout = null;
-    }
-
-    private boolean validateExtras(final Map<String, String> serverExtras) {
-        if (serverExtras == null) {
-            return false;
-        }
-
-        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
-                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
-                flurryAdSpace);
-
-        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
-    }
-
-    // FlurryAdListener
-    private class FlurryMopubBannerListener implements FlurryAdBannerListener {
-        private final String LOG_TAG = getClass().getSimpleName();
-
-        @Override
-        public void onFetched(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onFetched: Flurry banner ad fetched successfully!");
-
-            if (mBanner != null) {
-                mBanner.displayAd();
-            }
-        }
-
-        @Override
-        public void onRendered(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onRendered: Flurry banner ad rendered");
-
-            if (mListener != null) {
-                mListener.onBannerLoaded(mLayout);
-            }
-        }
-
-        @Override
-        public void onShowFullscreen(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onFetched: Flurry banner ad in full-screen");
-
-            if (mListener != null) {
-                mListener.onBannerExpanded();
-            }
-        }
-
-        @Override
-        public void onCloseFullscreen(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onCloseFullscreen: Flurry banner ad full-screen closed");
-
-            if (mListener != null) {
-                mListener.onBannerCollapsed();
-            }
-        }
-
-        @Override
-        public void onAppExit(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onAppExit: Flurry banner ad exited app");
-        }
-
-        @Override
-        public void onClicked(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onClicked: Flurry banner ad clicked");
-
-            if (mListener != null) {
-                mListener.onBannerClicked();
-            }
-        }
-
-        @Override
-        public void onVideoCompleted(FlurryAdBanner adBanner) {
-            Log.d(LOG_TAG, "onVideoCompleted: Flurry banner ad video completed");
-
-            // no-op
-        }
-
-        @Override
-        public void onError(FlurryAdBanner adBanner, FlurryAdErrorType adErrorType,
-                int errorCode) {
-            Log.d(LOG_TAG, String.format("onError: Flurry banner ad not available. " +
-                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
-
-            if (mListener != null) {
-                switch (adErrorType) {
-                    case FETCH:
-                        mListener.onBannerFailed(NETWORK_NO_FILL);
-                        return;
-                    case RENDER:
-                        mListener.onBannerFailed(NETWORK_INVALID_STATE);
-                        return;
-                    case CLICK:
-                        // Don't call onBannerFailed in this case.
-                        return;
-                    default:
-                        mListener.onBannerFailed(UNSPECIFIED);
-                }
-            }
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java b/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
deleted file mode 100644
index c912b75a..00000000
--- a/extras/src/com/mopub/mobileads/FlurryCustomEventInterstitial.java
+++ /dev/null
@@ -1,200 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.flurry.android.ads.FlurryAdErrorType;
-import com.flurry.android.ads.FlurryAdInterstitial;
-import com.flurry.android.ads.FlurryAdInterstitialListener;
-
-import java.util.Map;
-
-import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
-import static com.mopub.mobileads.MoPubErrorCode.NETWORK_NO_FILL;
-import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
-
-/**
- * Certified with Flurry 8.1.0
- */
-class FlurryCustomEventInterstitial extends com.mopub.mobileads.CustomEventInterstitial {
-    private static final String LOG_TAG = FlurryCustomEventInterstitial.class.getSimpleName();
-
-    private Context mContext;
-    private CustomEventInterstitialListener mListener;
-
-    private String mAdSpaceName;
-
-    private FlurryAdInterstitial mInterstitial;
-
-    // CustomEventInterstitial
-    @Override
-    protected void loadInterstitial(Context context,
-            CustomEventInterstitialListener listener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        if (context == null) {
-            Log.e(LOG_TAG, "Context cannot be null.");
-            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (listener == null) {
-            Log.e(LOG_TAG, "CustomEventInterstitialListener cannot be null.");
-            return;
-        }
-
-        if (!(context instanceof Activity)) {
-            Log.e(LOG_TAG, "Ad can be rendered only in Activity context.");
-            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        if (!validateExtras(serverExtras)) {
-            Log.e(LOG_TAG, "Failed interstitial ad fetch: Missing required server extras" +
-                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
-            listener.onInterstitialFailed(ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mContext = context;
-        mListener = listener;
-
-        String apiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-        mAdSpaceName = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-
-        FlurryAgentWrapper.getInstance().startSession(context, apiKey, null);
-
-        Log.d(LOG_TAG, "Fetching Flurry ad, ad unit name:" + mAdSpaceName);
-        mInterstitial = new FlurryAdInterstitial(mContext, mAdSpaceName);
-        mInterstitial.setListener(new FlurryMopubInterstitialListener());
-        mInterstitial.fetchAd();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mContext == null) {
-            return;
-        }
-
-        Log.d(LOG_TAG, "MoPub issued onInvalidate (" + mAdSpaceName + ")");
-
-        if (mInterstitial != null) {
-            mInterstitial.destroy();
-            mInterstitial = null;
-        }
-
-        FlurryAgentWrapper.getInstance().endSession(mContext);
-
-        mContext = null;
-        mListener = null;
-    }
-
-    @Override
-    protected void showInterstitial() {
-        Log.d(LOG_TAG, "MoPub issued showInterstitial (" + mAdSpaceName + ")");
-
-        if (mInterstitial != null) {
-            mInterstitial.displayAd();
-        }
-    }
-
-    private boolean validateExtras(final Map<String, String> serverExtras) {
-        if (serverExtras == null) {
-            return false;
-        }
-
-        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
-                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
-                flurryAdSpace);
-
-        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
-    }
-
-    // FlurryAdListener
-    private class FlurryMopubInterstitialListener implements FlurryAdInterstitialListener {
-        private final String LOG_TAG = getClass().getSimpleName();
-
-        @Override
-        public void onFetched(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onFetched: Flurry interstitial ad fetched successfully!");
-
-            if (mListener != null) {
-                mListener.onInterstitialLoaded();
-            }
-        }
-
-        @Override
-        public void onRendered(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onRendered: Flurry interstitial ad rendered");
-
-            if (mListener != null) {
-                mListener.onInterstitialShown();
-            }
-        }
-
-        @Override
-        public void onDisplay(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onDisplay: Flurry interstitial ad displayed");
-
-            // no-op
-        }
-
-        @Override
-        public void onClose(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onClose: Flurry interstitial ad closed");
-
-            if (mListener != null) {
-                mListener.onInterstitialDismissed();
-            }
-        }
-
-        @Override
-        public void onAppExit(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onAppExit: Flurry interstitial ad exited app");
-        }
-
-        @Override
-        public void onClicked(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onClicked: Flurry interstitial ad clicked");
-
-            if (mListener != null) {
-                mListener.onInterstitialClicked();
-            }
-        }
-
-        @Override
-        public void onVideoCompleted(FlurryAdInterstitial adInterstitial) {
-            Log.d(LOG_TAG, "onVideoCompleted: Flurry interstitial ad video completed");
-
-            // no-op
-        }
-
-        @Override
-        public void onError(FlurryAdInterstitial adInterstitial, FlurryAdErrorType adErrorType,
-                int errorCode) {
-            Log.d(LOG_TAG, String.format("onError: Flurry interstitial ad not available. " +
-                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
-
-            if (mListener != null) {
-                switch (adErrorType) {
-                    case FETCH:
-                        mListener.onInterstitialFailed(NETWORK_NO_FILL);
-                        return;
-                    case RENDER:
-                        mListener.onInterstitialFailed(NETWORK_INVALID_STATE);
-                        return;
-                    case CLICK:
-                        // Don't call onInterstitialFailed in this case.
-                        return;
-                    default:
-                        mListener.onInterstitialFailed(UNSPECIFIED);
-                }
-            }
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java b/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
deleted file mode 100644
index 46d18c56..00000000
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesBanner.java
+++ /dev/null
@@ -1,187 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.AdSize;
-import com.google.android.gms.ads.AdView;
-import com.mopub.common.util.Views;
-
-import java.util.Map;
-
-import static com.google.android.gms.ads.AdSize.BANNER;
-import static com.google.android.gms.ads.AdSize.FULL_BANNER;
-import static com.google.android.gms.ads.AdSize.LEADERBOARD;
-import static com.google.android.gms.ads.AdSize.MEDIUM_RECTANGLE;
-
-/*
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-
-// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
-
-class GooglePlayServicesBanner extends CustomEventBanner {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String AD_WIDTH_KEY = "adWidth";
-    public static final String AD_HEIGHT_KEY = "adHeight";
-    public static final String LOCATION_KEY = "location";
-
-    private CustomEventBannerListener mBannerListener;
-    private AdView mGoogleAdView;
-
-    @Override
-    protected void loadBanner(
-            final Context context,
-            final CustomEventBannerListener customEventBannerListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mBannerListener = customEventBannerListener;
-        final String adUnitId;
-        final int adWidth;
-        final int adHeight;
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-            adWidth = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            adHeight = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleAdView = new AdView(context);
-        mGoogleAdView.setAdListener(new AdViewListener());
-        mGoogleAdView.setAdUnitId(adUnitId);
-
-        final AdSize adSize = calculateAdSize(adWidth, adHeight);
-        if (adSize == null) {
-            mBannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleAdView.setAdSize(adSize);
-
-        final AdRequest adRequest = new AdRequest.Builder()
-                .setRequestAgent("MoPub")
-                .build();
-
-        try {
-            mGoogleAdView.loadAd(adRequest);
-        } catch (NoClassDefFoundError e) {
-            // This can be thrown by Play Services on Honeycomb.
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        Views.removeFromParent(mGoogleAdView);
-        if (mGoogleAdView != null) {
-            mGoogleAdView.setAdListener(null);
-            mGoogleAdView.destroy();
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        try {
-            Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-            Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-        } catch (NumberFormatException e) {
-            return false;
-        }
-
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    private AdSize calculateAdSize(int width, int height) {
-        // Use the smallest AdSize that will properly contain the adView
-        if (width <= BANNER.getWidth() && height <= BANNER.getHeight()) {
-            return BANNER;
-        } else if (width <= MEDIUM_RECTANGLE.getWidth() && height <= MEDIUM_RECTANGLE.getHeight()) {
-            return MEDIUM_RECTANGLE;
-        } else if (width <= FULL_BANNER.getWidth() && height <= FULL_BANNER.getHeight()) {
-            return FULL_BANNER;
-        } else if (width <= LEADERBOARD.getWidth() && height <= LEADERBOARD.getHeight()) {
-            return LEADERBOARD;
-        } else {
-            return null;
-        }
-    }
-
-    private class AdViewListener extends AdListener {
-        /*
-         * Google Play Services AdListener implementation
-         */
-        @Override
-        public void onAdClosed() {
-
-        }
-
-        @Override
-        public void onAdFailedToLoad(int errorCode) {
-            Log.d("MoPub", "Google Play Services banner ad failed to load.");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerFailed(getMoPubErrorCode(errorCode));
-            }
-        }
-
-        @Override
-        public void onAdLeftApplication() {
-
-        }
-
-        @Override
-        public void onAdLoaded() {
-            Log.d("MoPub", "Google Play Services banner ad loaded successfully. Showing ad...");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerLoaded(mGoogleAdView);
-            }
-        }
-
-        @Override
-        public void onAdOpened() {
-            Log.d("MoPub", "Google Play Services banner ad clicked.");
-            if (mBannerListener != null) {
-                mBannerListener.onBannerClicked();
-            }
-        }
-
-        /**
-         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-         *
-         * @param error Google Mobile Ads SDK error code.
-         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-         * code.
-         */
-        private MoPubErrorCode getMoPubErrorCode(int error) {
-            MoPubErrorCode errorCode;
-            switch (error) {
-                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                    errorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case AdRequest.ERROR_CODE_NO_FILL:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-            }
-            return errorCode;
-        }
-    }
-
-    @Deprecated // for testing
-    AdView getGoogleAdView() {
-        return mGoogleAdView;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java b/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
deleted file mode 100644
index a91ab2fc..00000000
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesInterstitial.java
+++ /dev/null
@@ -1,157 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.InterstitialAd;
-
-import java.util.Map;
-
-/*
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-
-// Note: AdMob ads will now use this class as Google has deprecated the AdMob SDK.
-
-public class GooglePlayServicesInterstitial extends CustomEventInterstitial {
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String AD_UNIT_ID_KEY = "adUnitID";
-    public static final String LOCATION_KEY = "location";
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private InterstitialAd mGoogleInterstitialAd;
-
-    @Override
-    protected void loadInterstitial(
-            final Context context,
-            final CustomEventInterstitialListener customEventInterstitialListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-        mInterstitialListener = customEventInterstitialListener;
-        final String adUnitId;
-
-        if (extrasAreValid(serverExtras)) {
-            adUnitId = serverExtras.get(AD_UNIT_ID_KEY);
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        mGoogleInterstitialAd = new InterstitialAd(context);
-        mGoogleInterstitialAd.setAdListener(new InterstitialAdListener());
-        mGoogleInterstitialAd.setAdUnitId(adUnitId);
-
-        final AdRequest adRequest = new AdRequest.Builder()
-                .setRequestAgent("MoPub")
-                .build();
-
-        try {
-            mGoogleInterstitialAd.loadAd(adRequest);
-        } catch (NoClassDefFoundError e) {
-            // This can be thrown by Play Services on Honeycomb.
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (mGoogleInterstitialAd.isLoaded()) {
-            mGoogleInterstitialAd.show();
-        } else {
-            Log.d("MoPub", "Tried to show a Google Play Services interstitial ad before it finished loading. Please try again.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mGoogleInterstitialAd != null) {
-            mGoogleInterstitialAd.setAdListener(null);
-        }
-    }
-
-    private boolean extrasAreValid(Map<String, String> serverExtras) {
-        return serverExtras.containsKey(AD_UNIT_ID_KEY);
-    }
-
-    private class InterstitialAdListener extends AdListener {
-        /*
-    	 * Google Play Services AdListener implementation
-    	 */
-        @Override
-        public void onAdClosed() {
-            Log.d("MoPub", "Google Play Services interstitial ad dismissed.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialDismissed();
-            }
-        }
-
-        @Override
-        public void onAdFailedToLoad(int errorCode) {
-            Log.d("MoPub", "Google Play Services interstitial ad failed to load.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialFailed(getMoPubErrorCode(errorCode));
-            }
-        }
-
-        @Override
-        public void onAdLeftApplication() {
-            Log.d("MoPub", "Google Play Services interstitial ad clicked.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialClicked();
-            }
-        }
-
-        @Override
-        public void onAdLoaded() {
-            Log.d("MoPub", "Google Play Services interstitial ad loaded successfully.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialLoaded();
-            }
-        }
-
-        @Override
-        public void onAdOpened() {
-            Log.d("MoPub", "Showing Google Play Services interstitial ad.");
-            if (mInterstitialListener != null) {
-                mInterstitialListener.onInterstitialShown();
-            }
-        }
-
-        /**
-         * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-         *
-         * @param error Google Mobile Ads SDK error code.
-         * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-         * code.
-         */
-        private MoPubErrorCode getMoPubErrorCode(int error) {
-            MoPubErrorCode errorCode;
-            switch (error) {
-                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                    errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                    errorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case AdRequest.ERROR_CODE_NO_FILL:
-                    errorCode = MoPubErrorCode.NO_FILL;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.UNSPECIFIED;
-            }
-            return errorCode;
-        }
-    }
-
-    @Deprecated // for testing
-    InterstitialAd getGoogleInterstitialAd() {
-        return mGoogleInterstitialAd;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java b/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
deleted file mode 100644
index e5629cba..00000000
--- a/extras/src/com/mopub/mobileads/GooglePlayServicesRewardedVideo.java
+++ /dev/null
@@ -1,265 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.MobileAds;
-import com.google.android.gms.ads.reward.RewardItem;
-import com.google.android.gms.ads.reward.RewardedVideoAd;
-import com.google.android.gms.ads.reward.RewardedVideoAdListener;
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubReward;
-
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * A {@link CustomEventRewardedVideo} used to load rewarded video Google rewarded video ads.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesRewardedVideo extends CustomEventRewardedVideo implements
-        RewardedVideoAdListener {
-    private static final String TAG = "MoPubToAdMobRewarded";
-
-    /**
-     * The current version of the adapter.
-     */
-    private static final String ADAPTER_VERSION = "0.1.0";
-
-    /**
-     * Key to obtain AdMob application ID from the server extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
-
-    /**
-     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
-
-    /**
-     * Flag to determine whether or not the adapter has been initialized.
-     */
-    private static AtomicBoolean sIsInitialized;
-
-    /**
-     * Google Mobile Ads rewarded video ad unit ID.
-     */
-    private String mAdUnitId;
-
-    /**
-     * The Google Rewarded Video Ad instance.
-     */
-    private RewardedVideoAd mRewardedVideoAd;
-
-    /**
-     * A {@link LifecycleListener} used to forward the activity lifecycle events from MoPub SDK to
-     * Google Mobile Ads SDK.
-     */
-    private LifecycleListener mLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull Activity activity) {
-            super.onPause(activity);
-            if (mRewardedVideoAd != null) {
-                mRewardedVideoAd.pause(activity);
-            }
-        }
-
-        @Override
-        public void onResume(@NonNull Activity activity) {
-            super.onResume(activity);
-            if (mRewardedVideoAd != null) {
-                mRewardedVideoAd.resume(activity);
-            }
-        }
-    };
-
-    public GooglePlayServicesRewardedVideo() {
-        sIsInitialized = new AtomicBoolean(false);
-    }
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return mLifecycleListener;
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        // Google rewarded videos do not have a unique identifier for each ad; using ad unit ID as
-        // an identifier for all ads.
-        return mAdUnitId;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        if (mRewardedVideoAd != null) {
-            mRewardedVideoAd.setRewardedVideoAdListener(null);
-            mRewardedVideoAd = null;
-        }
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-        if (!sIsInitialized.getAndSet(true)) {
-            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
-
-            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
-                MobileAds.initialize(launcherActivity);
-            } else {
-                MobileAds.initialize(launcherActivity, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
-            }
-
-            if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
-                // Using class name as the network ID for this callback since the ad unit ID is
-                // invalid.
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                        GooglePlayServicesRewardedVideo.class,
-                        GooglePlayServicesRewardedVideo.class.getSimpleName(),
-                        MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                return false;
-            }
-
-            mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-
-            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(launcherActivity);
-            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
-            return true;
-        }
-
-        return false;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-        if (TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_AD_UNIT_ID))) {
-            // Using class name as the network ID for this callback since the ad unit ID is
-            // invalid.
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                    GooglePlayServicesRewardedVideo.class,
-                    GooglePlayServicesRewardedVideo.class.getSimpleName(),
-                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-        mAdUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-
-        if (mRewardedVideoAd == null) {
-            mRewardedVideoAd = MobileAds.getRewardedVideoAdInstance(activity);
-            mRewardedVideoAd.setRewardedVideoAdListener(GooglePlayServicesRewardedVideo.this);
-        }
-
-        if (mRewardedVideoAd.isLoaded()) {
-            MoPubRewardedVideoManager
-                    .onRewardedVideoLoadSuccess(GooglePlayServicesRewardedVideo.class, mAdUnitId);
-        } else {
-            mRewardedVideoAd
-                    .loadAd(mAdUnitId, new AdRequest.Builder().setRequestAgent("MoPub").build());
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return mRewardedVideoAd != null && mRewardedVideoAd.isLoaded();
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
-            mRewardedVideoAd.show();
-        } else {
-            MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
-                    GooglePlayServicesRewardedVideo.class,
-                    mAdUnitId,
-                    getMoPubErrorCode(AdRequest.ERROR_CODE_INTERNAL_ERROR));
-        }
-    }
-
-    @Override
-    public void onRewardedVideoAdLoaded() {
-        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdOpened() {
-        // MoPub SDK does not have an equivalent callback for an ad opened event. Do nothing.
-    }
-
-    @Override
-    public void onRewardedVideoStarted() {
-        MoPubRewardedVideoManager.onRewardedVideoStarted(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdClosed() {
-        MoPubRewardedVideoManager.onRewardedVideoClosed(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewarded(RewardItem rewardItem) {
-        MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId,
-                MoPubReward.success(rewardItem.getType(), rewardItem.getAmount()));
-    }
-
-    @Override
-    public void onRewardedVideoAdLeftApplication() {
-        MoPubRewardedVideoManager.onRewardedVideoClicked(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId);
-    }
-
-    @Override
-    public void onRewardedVideoAdFailedToLoad(int error) {
-        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(
-                GooglePlayServicesRewardedVideo.class,
-                mAdUnitId,
-                getMoPubErrorCode(error));
-    }
-
-    /**
-     * Converts a given Google Mobile Ads SDK error code into {@link MoPubErrorCode}.
-     *
-     * @param error Google Mobile Ads SDK error code.
-     * @return an equivalent MoPub SDK error code for the given Google Mobile Ads SDK error
-     * code.
-     */
-    private MoPubErrorCode getMoPubErrorCode(int error) {
-        MoPubErrorCode errorCode;
-        switch (error) {
-            case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                errorCode = MoPubErrorCode.INTERNAL_ERROR;
-                break;
-            case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                break;
-            case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                errorCode = MoPubErrorCode.NO_CONNECTION;
-                break;
-            case AdRequest.ERROR_CODE_NO_FILL:
-                errorCode = MoPubErrorCode.NO_FILL;
-                break;
-            default:
-                errorCode = MoPubErrorCode.UNSPECIFIED;
-        }
-        return errorCode;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/MillennialBanner.java b/extras/src/com/mopub/mobileads/MillennialBanner.java
deleted file mode 100644
index 0a329984..00000000
--- a/extras/src/com/mopub/mobileads/MillennialBanner.java
+++ /dev/null
@@ -1,254 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-import android.view.Gravity;
-import android.widget.FrameLayout;
-import android.widget.FrameLayout.LayoutParams;
-
-import com.millennialmedia.AppInfo;
-import com.millennialmedia.CreativeInfo;
-import com.millennialmedia.InlineAd;
-import com.millennialmedia.InlineAd.AdSize;
-import com.millennialmedia.InlineAd.InlineAdMetadata;
-import com.millennialmedia.InlineAd.InlineErrorStatus;
-import com.millennialmedia.MMException;
-import com.millennialmedia.MMLog;
-import com.millennialmedia.MMSDK;
-import com.mopub.common.MoPub;
-
-import java.util.Map;
-
-
-/**
- * Compatible with version 6.6 of the Millennial Media SDK.
- */
-
-final class MillennialBanner extends CustomEventBanner {
-
-    private static final String TAG = MillennialBanner.class.getSimpleName();
-
-    private static final String DCN_KEY = "dcn";
-    private static final String APID_KEY = "adUnitID";
-    private static final String AD_WIDTH_KEY = "adWidth";
-    private static final String AD_HEIGHT_KEY = "adHeight";
-
-    private InlineAd inlineAd;
-    private CustomEventBannerListener bannerListener;
-    private FrameLayout internalView;
-
-    static {
-        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
-    }
-
-
-    public CreativeInfo getCreativeInfo() {
-
-        if (inlineAd == null) {
-            return null;
-        }
-
-        return inlineAd.getCreativeInfo();
-    }
-
-    
-    @Override
-    protected void loadBanner(final Context context, final CustomEventBannerListener customEventBannerListener,
-                              final Map<String, Object> localExtras, final Map<String, String> serverExtras) {
-
-        bannerListener = customEventBannerListener;
-        if (!MillennialUtils.initSdk(context)) {
-            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
-            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-            return;
-        }
-
-        String apid = serverExtras.get(APID_KEY);
-        int width = Integer.parseInt(serverExtras.get(AD_WIDTH_KEY));
-        int height = Integer.parseInt(serverExtras.get(AD_HEIGHT_KEY));
-
-        if (MillennialUtils.isEmpty(apid) || (width < 0) || (height < 0)) {
-            Log.e(TAG, "We were given invalid extras! Make sure placement ID, width, and height are specified.");
-            bannerListener.onBannerFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        // Set DCN on the AppInfo if provided
-        String dcn = serverExtras.get(DCN_KEY);
-        AppInfo ai = new AppInfo().setMediator("mopubsdk");
-        if (!MillennialUtils.isEmpty(dcn)) {
-            ai.setSiteId(dcn);
-        }
-
-        try {
-
-            MMSDK.setAppInfo(ai);
-
-            internalView = new FrameLayout(context);
-
-            LayoutParams lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
-            lp.gravity = Gravity.CENTER_HORIZONTAL;
-            internalView.setLayoutParams(lp);
-
-            inlineAd = InlineAd.createInstance(apid, internalView);
-            InlineAdMetadata mInlineAdMetadata = new InlineAdMetadata().setAdSize(new AdSize(width, height));
-
-            inlineAd.setListener(new MillennialInlineListener());
-
-            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
-
-            AdViewController.setShouldHonorServerDimensions(internalView);
-
-            inlineAd.request(mInlineAdMetadata);
-
-        } catch (MMException e) {
-            Log.e(TAG, "MM SDK exception occurred obtaining an inline ad unit.", e);
-            bannerListener.onBannerFailed(MoPubErrorCode.INTERNAL_ERROR);
-        }
-    }
-
-
-    @Override
-    protected void onInvalidate() {
-        // Destroy any hanging references.
-        if (inlineAd != null) {
-            inlineAd.destroy();
-            inlineAd = null;
-        }
-    }
-
-
-    class MillennialInlineListener implements InlineAd.InlineListener {
-
-        @Override
-        public void onAdLeftApplication(InlineAd inlineAd) {
-            // onLeaveApplication is an alias to on clicked. We are not required to call this.
-
-            // @formatter:off
-            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
-            // @formatter:on
-            Log.d(TAG, "Millennial Inline Ad - Leaving application");
-        }
-
-
-        @Override
-        public void onClicked(InlineAd inlineAd) {
-
-            Log.d(TAG, "Millennial Inline Ad - Ad clicked");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    bannerListener.onBannerClicked();
-                }
-            });
-        }
-
-
-        @Override
-        public void onCollapsed(InlineAd inlineAd) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner collapsed");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    bannerListener.onBannerCollapsed();
-                }
-            });
-
-        }
-
-
-        @Override
-        public void onExpanded(InlineAd inlineAd) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner expanded");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    bannerListener.onBannerExpanded();
-                }
-            });
-        }
-
-
-        @Override
-        public void onRequestFailed(InlineAd inlineAd, InlineErrorStatus inlineErrorStatus) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner failed (" + inlineErrorStatus.getErrorCode() + "): " +
-                    inlineErrorStatus.getDescription());
-
-            MoPubErrorCode mopubErrorCode;
-
-            switch (inlineErrorStatus.getErrorCode()) {
-                case InlineErrorStatus.ADAPTER_NOT_FOUND:
-                    mopubErrorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case InlineErrorStatus.DISPLAY_FAILED:
-                    mopubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case InlineErrorStatus.INIT_FAILED:
-                    mopubErrorCode = MoPubErrorCode.WARMUP;
-                    break;
-                case InlineErrorStatus.NO_NETWORK:
-                    mopubErrorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case InlineErrorStatus.UNKNOWN:
-                    mopubErrorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-                case InlineErrorStatus.LOAD_FAILED:
-                default:
-                    mopubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
-            }
-
-            final MoPubErrorCode fErrorCode = mopubErrorCode;
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    bannerListener.onBannerFailed(fErrorCode);
-                }
-            });
-
-        }
-
-
-        @Override
-        public void onRequestSucceeded(InlineAd inlineAd) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner request succeeded");
-
-            CreativeInfo creativeInfo = getCreativeInfo();
-
-            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
-                MMLog.d(TAG, "Banner Creative Info: " + creativeInfo);
-            }
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    bannerListener.onBannerLoaded(internalView);
-                }
-            });
-        }
-
-
-        @Override
-        public void onResize(InlineAd inlineAd, int w, int h) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner about to resize (width: " + w + ", height: " + h + ")");
-        }
-
-
-        @Override
-        public void onResized(InlineAd inlineAd, int w, int h, boolean isClosed) {
-
-            Log.d(TAG, "Millennial Inline Ad - Banner resized (width: " + w + ", height: " + h + "). " +
-                    (isClosed ? "Returned to original placement." : "Got a fresh, new place."));
-
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/MillennialInterstitial.java b/extras/src/com/mopub/mobileads/MillennialInterstitial.java
deleted file mode 100644
index cbb6c879..00000000
--- a/extras/src/com/mopub/mobileads/MillennialInterstitial.java
+++ /dev/null
@@ -1,266 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.millennialmedia.AppInfo;
-import com.millennialmedia.CreativeInfo;
-import com.millennialmedia.InterstitialAd;
-import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
-import com.millennialmedia.InterstitialAd.InterstitialListener;
-import com.millennialmedia.MMException;
-import com.millennialmedia.MMLog;
-import com.millennialmedia.MMSDK;
-import com.mopub.common.MoPub;
-
-import java.util.Map;
-
-
-/**
- * Compatible with version 6.6 of the Millennial Media SDK.
- */
-
-final class MillennialInterstitial extends CustomEventInterstitial {
-
-    private static final String TAG = MillennialInterstitial.class.getSimpleName();
-    private static final String DCN_KEY = "dcn";
-    private static final String APID_KEY = "adUnitID";
-
-    private InterstitialAd millennialInterstitial;
-    private Context context;
-    private CustomEventInterstitialListener interstitialListener;
-
-    static {
-        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
-    }
-
-
-    public CreativeInfo getCreativeInfo() {
-
-        if (millennialInterstitial == null) {
-            return null;
-        }
-
-        return millennialInterstitial.getCreativeInfo();
-    }
-
-
-    @Override
-    protected void loadInterstitial(final Context context,
-                                    final CustomEventInterstitialListener customEventInterstitialListener,
-                                    final Map<String, Object> localExtras,
-                                    final Map<String, String> serverExtras) {
-
-        interstitialListener = customEventInterstitialListener;
-        this.context = context;
-
-        if (!MillennialUtils.initSdk(context)) {
-            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-            return;
-        }
-
-        String apid = serverExtras.get(APID_KEY);
-
-        if (MillennialUtils.isEmpty(apid)) {
-            Log.e(TAG, "Invalid extras-- Be sure you have an placement ID specified.");
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-            return;
-        }
-
-        // Add DCN support
-        String dcn = serverExtras.get(DCN_KEY);
-
-        AppInfo ai = new AppInfo().setMediator("mopubsdk");
-        if (!MillennialUtils.isEmpty(dcn)) {
-            ai.setSiteId(dcn);
-        }
-
-        try {
-            MMSDK.setAppInfo(ai);
-            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
-            millennialInterstitial = InterstitialAd.createInstance(apid);
-            millennialInterstitial.setListener(new MillennialInterstitialListener());
-            millennialInterstitial.load(context, null);
-        } catch (MMException e) {
-            Log.e(TAG, "Exception occurred while obtaining an interstitial from MM SDK.", e);
-            interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-        }
-    }
-
-
-    @Override
-    protected void showInterstitial() {
-
-        if (millennialInterstitial.isReady()) {
-            try {
-                millennialInterstitial.show(context);
-            } catch (MMException e) {
-                MMLog.e(TAG, "An exception occurred while attempting to show interstitial.", e);
-                interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-            }
-        } else {
-            Log.w(TAG, "showInterstitial called but interstitial is not ready.");
-        }
-    }
-
-
-    @Override
-    protected void onInvalidate() {
-
-        if (millennialInterstitial != null) {
-            millennialInterstitial.destroy();
-            millennialInterstitial = null;
-        }
-    }
-
-
-    class MillennialInterstitialListener implements InterstitialListener {
-
-        @Override
-        public void onAdLeftApplication(InterstitialAd interstitialAd) {
-            // onLeaveApplication is an alias to on clicked. We are not required to call this.
-
-            // @formatter:off
-            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
-            // @formatter:on
-            Log.d(TAG, "Millennial Interstitial Ad - Leaving application");
-        }
-
-
-        @Override
-        public void onClicked(InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - Ad was clicked");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialClicked();
-                }
-            });
-        }
-
-
-        @Override
-        public void onClosed(InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - Ad was closed");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialDismissed();
-                }
-            });
-        }
-
-
-        @Override
-        public void onExpired(InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - Ad expired");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialFailed(MoPubErrorCode.NO_FILL);
-                }
-            });
-        }
-
-
-        @Override
-        public void onLoadFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
-                    interstitialErrorStatus.getDescription());
-
-            final MoPubErrorCode moPubErrorCode;
-
-            switch (interstitialErrorStatus.getErrorCode()) {
-                case InterstitialErrorStatus.ALREADY_LOADED:
-                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    interstitialListener.onInterstitialLoaded();
-                    Log.w(TAG, "Millennial Interstitial Ad - Attempted to load ads when ads are already loaded.");
-                    return;
-                case InterstitialErrorStatus.EXPIRED:
-                case InterstitialErrorStatus.DISPLAY_FAILED:
-                case InterstitialErrorStatus.INIT_FAILED:
-                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
-                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case InterstitialErrorStatus.NO_NETWORK:
-                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case InterstitialErrorStatus.UNKNOWN:
-                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-                case InterstitialErrorStatus.NOT_LOADED:
-                case InterstitialErrorStatus.LOAD_FAILED:
-                default:
-                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
-            }
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialFailed(moPubErrorCode);
-                }
-            });
-        }
-
-
-        @Override
-        public void onLoaded(InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - Ad loaded splendidly");
-
-            CreativeInfo creativeInfo = getCreativeInfo();
-
-            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
-                MMLog.d(TAG, "Interstitial Creative Info: " + creativeInfo);
-            }
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialLoaded();
-                }
-            });
-        }
-
-
-        @Override
-        public void onShowFailed(InterstitialAd interstitialAd, InterstitialErrorStatus interstitialErrorStatus) {
-
-            Log.e(TAG, "Millennial Interstitial Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
-                    interstitialErrorStatus.getDescription());
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialFailed(MoPubErrorCode.INTERNAL_ERROR);
-                }
-            });
-        }
-
-
-        @Override
-        public void onShown(InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Interstitial Ad - Ad shown");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    interstitialListener.onInterstitialShown();
-                }
-            });
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java b/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
deleted file mode 100644
index ca906ba1..00000000
--- a/extras/src/com/mopub/mobileads/MillennialRewardedVideo.java
+++ /dev/null
@@ -1,361 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-
-import com.millennialmedia.AppInfo;
-import com.millennialmedia.CreativeInfo;
-import com.millennialmedia.InterstitialAd;
-import com.millennialmedia.InterstitialAd.InterstitialErrorStatus;
-import com.millennialmedia.InterstitialAd.InterstitialListener;
-import com.millennialmedia.MMException;
-import com.millennialmedia.MMLog;
-import com.millennialmedia.MMSDK;
-import com.millennialmedia.XIncentivizedEventListener;
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPub;
-import com.mopub.common.MoPubReward;
-
-import java.util.Map;
-
-
-/**
- * Compatible with version 6.6 of the Millennial Media SDK.
- */
-
-@SuppressWarnings("unused")
-final class MillennialRewardedVideo extends CustomEventRewardedVideo {
-
-    private static final String TAG = MillennialRewardedVideo.class.getSimpleName();
-    public static final String DCN_KEY = "dcn";
-    public static final String APID_KEY = "adUnitID";
-
-    private InterstitialAd millennialInterstitial;
-    private MillennialRewardedVideoListener millennialRewardedVideoListener = new MillennialRewardedVideoListener();
-    private Context context;
-    private String apid = null;
-
-    static {
-        Log.i(TAG, "Millennial Media Adapter Version: " + MillennialUtils.VERSION);
-    }
-
-
-    public CreativeInfo getCreativeInfo() {
-
-        if (millennialInterstitial == null) {
-            return null;
-        }
-
-        return millennialInterstitial.getCreativeInfo();
-    }
-
-
-    @Nullable
-    @Override
-    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-
-        return millennialRewardedVideoListener;
-    }
-
-
-    @Nullable
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-
-        return new BaseLifecycleListener();
-    }
-
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-
-        return (apid == null) ? "" : apid;
-    }
-
-
-    @Override
-    protected void onInvalidate() {
-
-        if (millennialInterstitial != null) {
-            millennialInterstitial.destroy();
-            millennialInterstitial = null;
-            apid = null;
-        }
-    }
-
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras, @NonNull Map<String, String> serverExtras) throws Exception {
-
-        if (!MillennialUtils.initSdk(launcherActivity)) {
-            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
-
-            return false;
-        }
-
-        return true;
-    }
-
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity, @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) throws Exception {
-
-        this.context = activity.getApplicationContext();
-        apid = serverExtras.get(APID_KEY);
-        String dcn = serverExtras.get(DCN_KEY);
-
-        if (MillennialUtils.isEmpty(apid)) {
-            Log.e(TAG, "Invalid extras-- Be sure you have a placement ID specified.");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(MillennialRewardedVideo.class, "",
-                    MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-            return;
-        }
-
-        // Add DCN support
-        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(dcn);
-        try {
-            MMSDK.setAppInfo(ai);
-			/* If MoPub gets location, so do we. */
-            MMSDK.setLocationEnabled(MoPub.getLocationAwareness() != MoPub.LocationAwareness.DISABLED);
-
-            millennialInterstitial = InterstitialAd.createInstance(apid);
-            millennialInterstitial.setListener(millennialRewardedVideoListener);
-            millennialInterstitial.xSetIncentivizedListener(millennialRewardedVideoListener);
-            millennialInterstitial.load(activity, null);
-
-        } catch (MMException e) {
-            Log.e(TAG, "An exception occurred loading an InterstitialAd", e);
-            MoPubRewardedVideoManager
-                    .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, apid, MoPubErrorCode.INTERNAL_ERROR);
-        }
-    }
-
-
-    @Override
-    protected boolean hasVideoAvailable() {
-
-        return ((millennialInterstitial != null) && millennialInterstitial.isReady());
-    }
-
-
-    @Override
-    protected void showVideo() {
-
-        if ((millennialInterstitial != null) && millennialInterstitial.isReady()) {
-            try {
-                millennialInterstitial.show(context);
-            } catch (MMException e) {
-                Log.e(TAG, "An exception occurred showing the MM SDK interstitial.", e);
-                MoPubRewardedVideoManager
-                        .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, millennialInterstitial.placementId,
-                                MoPubErrorCode.INTERNAL_ERROR);
-            }
-        } else {
-            Log.w(TAG, "showVideo called before MillennialInterstitial ad was loaded.");
-        }
-    }
-
-
-    class MillennialRewardedVideoListener
-            implements InterstitialListener, XIncentivizedEventListener, CustomEventRewardedVideoListener {
-
-        @Override
-        public void onAdLeftApplication(InterstitialAd interstitialAd) {
-            // onLeaveApplication is an alias to on clicked. We are not required to call this.
-
-            // @formatter:off
-            // https://github.com/mopub/mopub-android-sdk/blob/940eee70fe1980b4869d61cb5d668ccbab75c0ee/mopub-sdk/mopub-sdk-interstitial/src/main/java/com/mopub/mobileads/CustomEventInterstitial.java
-            // @formatter:on
-            Log.d(TAG, "Millennial Rewarded Video Ad - Leaving application");
-        }
-
-
-        @Override
-        public void onClicked(final InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was clicked");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoClicked(MillennialRewardedVideo.class, interstitialAd.placementId);
-                }
-            });
-        }
-
-
-        @Override
-        public void onClosed(final InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Ad was closed");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoClosed(MillennialRewardedVideo.class, interstitialAd.placementId);
-                }
-            });
-        }
-
-
-        @Override
-        public void onExpired(final InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Ad expired");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
-                                    MoPubErrorCode.VIDEO_NOT_AVAILABLE);
-                }
-            });
-        }
-
-
-        @Override
-        public void onLoadFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
-                interstitialErrorStatus) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - load failed (" + interstitialErrorStatus.getErrorCode() + "): " +
-                    interstitialErrorStatus.getDescription());
-
-            final MoPubErrorCode moPubErrorCode;
-
-            switch (interstitialErrorStatus.getErrorCode()) {
-                case InterstitialErrorStatus.ALREADY_LOADED:
-                    // This will generate discrepancies, as requests will NOT be sent to Millennial.
-                    MillennialUtils.postOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-
-                            MoPubRewardedVideoManager
-                                    .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
-                        }
-                    });
-                    Log.w(TAG, "Millennial Rewarded Video Ad - Attempted to load ads when ads are already loaded.");
-                    return;
-                case InterstitialErrorStatus.EXPIRED:
-                case InterstitialErrorStatus.DISPLAY_FAILED:
-                case InterstitialErrorStatus.INIT_FAILED:
-                case InterstitialErrorStatus.ADAPTER_NOT_FOUND:
-                    moPubErrorCode = MoPubErrorCode.INTERNAL_ERROR;
-                    break;
-                case InterstitialErrorStatus.NO_NETWORK:
-                    moPubErrorCode = MoPubErrorCode.NO_CONNECTION;
-                    break;
-                case InterstitialErrorStatus.UNKNOWN:
-                    moPubErrorCode = MoPubErrorCode.UNSPECIFIED;
-                    break;
-                case InterstitialErrorStatus.NOT_LOADED:
-                case InterstitialErrorStatus.LOAD_FAILED:
-                default:
-                    moPubErrorCode = MoPubErrorCode.NETWORK_NO_FILL;
-            }
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoLoadFailure(MillennialRewardedVideo.class, interstitialAd.placementId,
-                                    moPubErrorCode);
-                }
-            });
-        }
-
-
-        @Override
-        public void onLoaded(final InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Ad loaded splendidly");
-
-            CreativeInfo creativeInfo = getCreativeInfo();
-
-            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
-                MMLog.d(TAG, "Rewarded Video Creative Info: " + creativeInfo);
-            }
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoLoadSuccess(MillennialRewardedVideo.class, interstitialAd.placementId);
-                }
-            });
-        }
-
-
-        @Override
-        public void onShowFailed(final InterstitialAd interstitialAd, InterstitialErrorStatus
-                interstitialErrorStatus) {
-
-            Log.e(TAG, "Millennial Rewarded Video Ad - Show failed (" + interstitialErrorStatus.getErrorCode() + "): " +
-                    interstitialErrorStatus.getDescription());
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoPlaybackError(MillennialRewardedVideo.class, interstitialAd.placementId,
-                                    MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-                }
-            });
-        }
-
-
-        @Override
-        public void onShown(final InterstitialAd interstitialAd) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Ad shown");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoStarted(MillennialRewardedVideo.class, interstitialAd.placementId);
-                }
-            });
-        }
-
-
-        @Override
-        public boolean onVideoComplete() {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Video completed");
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    MoPubRewardedVideoManager
-                            .onRewardedVideoCompleted(MillennialRewardedVideo.class, millennialInterstitial.placementId,
-                                    MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.DEFAULT_REWARD_AMOUNT));
-                }
-            });
-            return false;
-        }
-
-
-        @Override
-        public boolean onCustomEvent(XIncentiveEvent xIncentiveEvent) {
-
-            Log.d(TAG, "Millennial Rewarded Video Ad - Custom event received: " + xIncentiveEvent.eventId + ", " +
-                    xIncentiveEvent.args);
-
-            return false;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/MillennialUtils.java b/extras/src/com/mopub/mobileads/MillennialUtils.java
deleted file mode 100644
index 0417e7ee..00000000
--- a/extras/src/com/mopub/mobileads/MillennialUtils.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Application;
-import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.NonNull;
-import android.util.Log;
-
-import com.millennialmedia.MMException;
-import com.millennialmedia.MMSDK;
-import com.mopub.common.Preconditions;
-
-
-final public class MillennialUtils {
-    private static final String LOG_TAG = MillennialUtils.class.getSimpleName();
-
-    private static final Handler handler = new Handler(Looper.getMainLooper());
-
-    public static final String VERSION = "1.2.0";
-
-    private static volatile boolean sIsInitialized = false;
-
-    public static void postOnUiThread(Runnable runnable) {
-        handler.post(runnable);
-    }
-
-    public static boolean isEmpty(String s) {
-        return (s == null || s.trim().isEmpty());
-    }
-
-    /**
-     * @param context - application or activity context
-     * @return {@code true} successfully initialized
-     */
-    public static boolean initSdk(@NonNull Context context) {
-        if (sIsInitialized) {
-            return true;
-        }
-
-        synchronized (MillennialUtils.class) {
-            if (sIsInitialized) {
-                return true;
-            }
-            Preconditions.checkNotNull(context);
-
-            final Application application;
-            if (context instanceof Application) {
-                application = (Application) context;
-            } else {
-                application = (Application) context.getApplicationContext();
-            }
-
-            try {
-                MMSDK.initialize(application);
-            } catch (MMException e) {
-                Log.e(LOG_TAG, "Exception occurred initializing the MM SDK.", e);
-                return false;
-            }
-
-            sIsInitialized = true;
-        }
-        return true;
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java b/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
deleted file mode 100644
index 9a87ee6a..00000000
--- a/extras/src/com/mopub/mobileads/TapjoyInterstitial.java
+++ /dev/null
@@ -1,182 +0,0 @@
-// Copyright (C) 2015 by Tapjoy Inc.
-//
-// This file is part of the Tapjoy SDK.
-//
-// By using the Tapjoy SDK in your software, you agree to the terms of the Tapjoy SDK License Agreement.
-//
-// The Tapjoy SDK is bound by the Tapjoy SDK License Agreement and can be found here: https://www.tapjoy.com/sdk/license
-
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
-import android.text.TextUtils;
-
-import com.mopub.common.logging.MoPubLog;
-import com.tapjoy.TJActionRequest;
-import com.tapjoy.TJConnectListener;
-import com.tapjoy.TJError;
-import com.tapjoy.TJPlacement;
-import com.tapjoy.TJPlacementListener;
-import com.tapjoy.Tapjoy;
-import com.tapjoy.TapjoyLog;
-
-import java.util.Map;
-
-// Tested with Tapjoy SDK 11.11.0
-public class TapjoyInterstitial extends CustomEventInterstitial implements TJPlacementListener {
-    private static final String TAG = TapjoyInterstitial.class.getSimpleName();
-    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
-
-    // Configuration keys
-    public static final String SDK_KEY = "sdkKey";
-    public static final String DEBUG_ENABLED = "debugEnabled";
-    public static final String PLACEMENT_NAME = "name";
-
-    private TJPlacement tjPlacement;
-    private CustomEventInterstitialListener mInterstitialListener;
-    private Handler mHandler;
-
-    static {
-        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-    }
-
-    @Override
-    protected void loadInterstitial(final Context context,
-            CustomEventInterstitialListener customEventInterstitialListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        MoPubLog.d("Requesting Tapjoy interstitial");
-
-        mInterstitialListener = customEventInterstitialListener;
-        mHandler = new Handler(Looper.getMainLooper());
-
-        final String placementName = serverExtras.get(PLACEMENT_NAME);
-        if (TextUtils.isEmpty(placementName)) {
-            MoPubLog.d("Tapjoy interstitial loaded with empty 'name' field. Request will fail.");
-        }
-
-        boolean canRequestPlacement = true;
-        if (!Tapjoy.isConnected()) {
-            // Check if configuration data is available
-            boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
-            Tapjoy.setDebugEnabled(enableDebug);
-
-            String sdkKey = serverExtras.get(SDK_KEY);
-            if (!TextUtils.isEmpty(sdkKey)) {
-                MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
-                Tapjoy.connect(context, sdkKey, null, new TJConnectListener() {
-                    @Override
-                    public void onConnectSuccess() {
-                        MoPubLog.d("Tapjoy connected successfully");
-                        createPlacement(context, placementName);
-                    }
-
-                    @Override
-                    public void onConnectFailure() {
-                        MoPubLog.d("Tapjoy connect failed");
-                    }
-                });
-
-                // If sdkKey is present via MoPub dashboard, we only want to request placement
-                // after auto-connect succeeds
-                canRequestPlacement = false;
-            } else {
-                MoPubLog.d("Tapjoy interstitial is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
-            }
-        }
-
-        if (canRequestPlacement) {
-            createPlacement(context, placementName);
-        }
-    }
-
-    private void createPlacement(Context context, String placementName) {
-        tjPlacement = new TJPlacement(context, placementName, this);
-        tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
-        tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-        tjPlacement.requestContent();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        // No custom cleanup to do here.
-    }
-
-    @Override
-    protected void showInterstitial() {
-        MoPubLog.d("Tapjoy interstitial will be shown");
-        tjPlacement.showContent();
-    }
-
-    // Tapjoy
-
-    @Override
-    public void onRequestSuccess(final TJPlacement placement) {
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (placement.isContentAvailable()) {
-                    MoPubLog.d("Tapjoy interstitial request successful");
-                    mInterstitialListener.onInterstitialLoaded();
-                } else {
-                    MoPubLog.d("No Tapjoy interstitials available");
-                    mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                }
-            }
-        });
-    }
-
-    @Override
-    public void onRequestFailure(TJPlacement placement, TJError error) {
-        MoPubLog.d("Tapjoy interstitial request failed");
-
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-            }
-        });
-    }
-
-    @Override
-    public void onContentShow(TJPlacement placement) {
-        MoPubLog.d("Tapjoy interstitial shown");
-
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mInterstitialListener.onInterstitialShown();
-            }
-        });
-    }
-
-    @Override
-    public void onContentDismiss(TJPlacement placement) {
-        MoPubLog.d("Tapjoy interstitial dismissed");
-
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                mInterstitialListener.onInterstitialDismissed();
-            }
-        });
-    }
-
-    @Override
-    public void onContentReady(TJPlacement placement) {
-    }
-
-    @Override
-    public void onPurchaseRequest(TJPlacement placement, TJActionRequest request,
-            String productId) {
-    }
-
-    @Override
-    public void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId,
-            int quantity) {
-    }
-
-}
diff --git a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java b/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
deleted file mode 100644
index 8613c441..00000000
--- a/extras/src/com/mopub/mobileads/TapjoyRewardedVideo.java
+++ /dev/null
@@ -1,273 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MediationSettings;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.logging.MoPubLog;
-import com.tapjoy.TJActionRequest;
-import com.tapjoy.TJConnectListener;
-import com.tapjoy.TJError;
-import com.tapjoy.TJPlacement;
-import com.tapjoy.TJPlacementListener;
-import com.tapjoy.TJVideoListener;
-import com.tapjoy.Tapjoy;
-import com.tapjoy.TapjoyLog;
-
-import java.util.Hashtable;
-import java.util.Map;
-
-// Tested with Tapjoy SDK 11.11.0
-public class TapjoyRewardedVideo extends CustomEventRewardedVideo {
-    private static final String TAG = TapjoyRewardedVideo.class.getSimpleName();
-    private static final String TJC_MOPUB_NETWORK_CONSTANT = "mopub";
-    private static final String TJC_MOPUB_ADAPTER_VERSION_NUMBER = "4.1.0";
-    private static final String TAPJOY_AD_NETWORK_CONSTANT = "tapjoy_id";
-
-    // Configuration keys
-    public static final String SDK_KEY = "sdkKey";
-    public static final String DEBUG_ENABLED = "debugEnabled";
-    public static final String PLACEMENT_NAME = "name";
-
-    private String sdkKey;
-    private String placementName;
-    private Hashtable<String, Object> connectFlags;
-    private TJPlacement tjPlacement;
-    private boolean isAutoConnect = false;
-    private static TapjoyRewardedVideoListener sTapjoyListener = new TapjoyRewardedVideoListener();
-
-    static {
-        TapjoyLog.i(TAG, "Class initialized with network adapter version " + TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-    }
-
-    @Override
-    protected CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sTapjoyListener;
-    }
-
-    @Override
-    protected LifecycleListener getLifecycleListener() {
-        return null;
-    }
-
-    @Override
-    protected String getAdNetworkId() {
-        return TAPJOY_AD_NETWORK_CONSTANT;
-    }
-
-    @Override
-    protected void onInvalidate() {
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull Activity launcherActivity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-
-        placementName = serverExtras.get(PLACEMENT_NAME);
-        if (TextUtils.isEmpty(placementName)) {
-            MoPubLog.d("Tapjoy rewarded video loaded with empty 'name' field. Request will fail.");
-        }
-
-        if (!Tapjoy.isConnected()) {
-            if (checkAndInitMediationSettings()) {
-                MoPubLog.d("Connecting to Tapjoy via MoPub mediation settings...");
-                connectToTapjoy(launcherActivity);
-
-                isAutoConnect = true;
-                return true;
-            } else {
-                boolean enableDebug = Boolean.valueOf(serverExtras.get(DEBUG_ENABLED));
-                Tapjoy.setDebugEnabled(enableDebug);
-
-                sdkKey = serverExtras.get(SDK_KEY);
-                if (!TextUtils.isEmpty(sdkKey)) {
-                    MoPubLog.d("Connecting to Tapjoy via MoPub dashboard settings...");
-                    connectToTapjoy(launcherActivity);
-
-                    isAutoConnect = true;
-                    return true;
-                } else {
-                    MoPubLog.d("Tapjoy rewarded video is initialized with empty 'sdkKey'. You must call Tapjoy.connect()");
-                    isAutoConnect = false;
-                }
-            }
-        }
-
-        return false;
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras)
-            throws Exception {
-        MoPubLog.d("Requesting Tapjoy rewarded video");
-        createPlacement(activity);
-    }
-
-    private void connectToTapjoy(final Activity launcherActivity) {
-        Tapjoy.connect(launcherActivity, sdkKey, connectFlags, new TJConnectListener() {
-            @Override
-            public void onConnectSuccess() {
-                MoPubLog.d("Tapjoy connected successfully");
-                createPlacement(launcherActivity);
-            }
-
-            @Override
-            public void onConnectFailure() {
-                MoPubLog.d("Tapjoy connect failed");
-            }
-        });
-    }
-
-    private void createPlacement(Activity activity) {
-        if (!TextUtils.isEmpty(placementName)) {
-            if (isAutoConnect && !Tapjoy.isConnected()) {
-                // If adapter is making the Tapjoy.connect() call on behalf of the pub, wait for it to
-                // succeed before making a placement request.
-                MoPubLog.d("Tapjoy is still connecting. Please wait for this to finish before making a placement request");
-                return;
-            }
-
-            tjPlacement = new TJPlacement(activity, placementName, sTapjoyListener);
-            tjPlacement.setMediationName(TJC_MOPUB_NETWORK_CONSTANT);
-            tjPlacement.setAdapterVersion(TJC_MOPUB_ADAPTER_VERSION_NUMBER);
-            tjPlacement.requestContent();
-        } else {
-            MoPubLog.d("Tapjoy placementName is empty. Unable to create TJPlacement.");
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return tjPlacement.isContentAvailable();
-    }
-
-    @Override
-    protected void showVideo() {
-        if (hasVideoAvailable()) {
-            MoPubLog.d("Tapjoy rewarded video will be shown.");
-            tjPlacement.showContent();
-        } else {
-            MoPubLog.d("Failed to show Tapjoy rewarded video.");
-        }
-    }
-
-    private boolean checkAndInitMediationSettings() {
-        final TapjoyMediationSettings globalMediationSettings =
-                MoPubRewardedVideoManager.getGlobalMediationSettings(TapjoyMediationSettings.class);
-
-        if (globalMediationSettings != null) {
-            MoPubLog.d("Initializing Tapjoy mediation settings");
-
-            if (!TextUtils.isEmpty(globalMediationSettings.getSdkKey())) {
-                sdkKey = globalMediationSettings.getSdkKey();
-            } else {
-                MoPubLog.d("Cannot initialize Tapjoy -- 'sdkkey' is empty");
-                return false;
-            }
-
-            if (globalMediationSettings.getConnectFlags() != null) {
-                connectFlags = globalMediationSettings.getConnectFlags();
-            }
-
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    private static class TapjoyRewardedVideoListener implements TJPlacementListener, CustomEventRewardedVideoListener, TJVideoListener {
-        @Override
-        public void onRequestSuccess(TJPlacement placement) {
-            if (!placement.isContentAvailable()) {
-                MoPubLog.d("No Tapjoy rewarded videos available");
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
-            }
-        }
-
-        @Override
-        public void onContentReady(TJPlacement placement) {
-            MoPubLog.d("Tapjoy rewarded video content is ready");
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
-        }
-
-        @Override
-        public void onRequestFailure(TJPlacement placement, TJError error) {
-            MoPubLog.d("Tapjoy rewarded video request failed");
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubErrorCode.NETWORK_NO_FILL);
-        }
-
-        @Override
-        public void onContentShow(TJPlacement placement) {
-            Tapjoy.setVideoListener(this);
-            MoPubLog.d("Tapjoy rewarded video content shown");
-            MoPubRewardedVideoManager.onRewardedVideoStarted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
-        }
-
-        @Override
-        public void onContentDismiss(TJPlacement placement) {
-            Tapjoy.setVideoListener(null);
-            MoPubLog.d("Tapjoy rewarded video content dismissed");
-            MoPubRewardedVideoManager.onRewardedVideoClosed(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT);
-        }
-
-        @Override
-        public void onPurchaseRequest(TJPlacement placement, TJActionRequest request,
-                String productId) {
-        }
-
-        @Override
-        public void onRewardRequest(TJPlacement placement, TJActionRequest request, String itemId,
-                int quantity) {
-        }
-
-        @Override
-        public void onVideoStart() {
-
-        }
-
-        @Override
-        public void onVideoError(int statusCode) {
-        }
-
-        @Override
-        public void onVideoComplete() {
-            MoPubLog.d("Tapjoy rewarded video completed");
-            MoPubRewardedVideoManager.onRewardedVideoCompleted(TapjoyRewardedVideo.class, TAPJOY_AD_NETWORK_CONSTANT, MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
-        }
-    }
-
-    public static final class TapjoyMediationSettings implements MediationSettings {
-        @Nullable
-        private final String mSdkKey;
-        @Nullable
-        Hashtable<String, Object> mConnectFlags;
-
-        public TapjoyMediationSettings(String sdkKey) {
-            this.mSdkKey = sdkKey;
-        }
-
-        public TapjoyMediationSettings(String sdkKey, Hashtable<String, Object> connectFlags) {
-            this.mSdkKey = sdkKey;
-            this.mConnectFlags = connectFlags;
-        }
-
-        @NonNull
-        public String getSdkKey() {
-            return mSdkKey;
-        }
-
-        @NonNull
-        public Hashtable<String, Object> getConnectFlags() {
-            return mConnectFlags;
-        }
-    }
-
-}
diff --git a/extras/src/com/mopub/mobileads/UnityInterstitial.java b/extras/src/com/mopub/mobileads/UnityInterstitial.java
deleted file mode 100644
index 37b31b27..00000000
--- a/extras/src/com/mopub/mobileads/UnityInterstitial.java
+++ /dev/null
@@ -1,112 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-
-import com.mopub.common.logging.MoPubLog;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.UnityAds;
-
-import java.util.Map;
-
-/**
- * Certified with Unity Ads 2.1.1
- */
-public class UnityInterstitial extends CustomEventInterstitial implements IUnityAdsExtendedListener {
-
-    private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private Context mContext;
-    private String mPlacementId = "video";
-    private boolean loadRequested = false;
-
-    @Override
-    protected void loadInterstitial(Context context,
-            CustomEventInterstitialListener customEventInterstitialListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-
-        mPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, mPlacementId);
-        mCustomEventInterstitialListener = customEventInterstitialListener;
-        mContext = context;
-        loadRequested = true;
-
-        try {
-            UnityRouter.addListener(mPlacementId, this);
-            initializeUnityAdsSdk(serverExtras);
-            if (UnityAds.isReady()) {
-                mCustomEventInterstitialListener.onInterstitialLoaded();
-                loadRequested = false;
-            }
-        } catch (UnityRouter.UnityAdsException e) {
-            mCustomEventInterstitialListener.onInterstitialFailed(UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
-        }
-    }
-
-    private void initializeUnityAdsSdk(Map<String, String> serverExtras) {
-        if (!UnityAds.isInitialized()) {
-            if (!(mContext instanceof Activity)) {
-                throw new UnityRouter.UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Context is null or is not an instanceof Activity.");
-            }
-            UnityRouter.initUnityAds(serverExtras, (Activity) mContext);
-        }
-    }
-
-
-    @Override
-    protected void showInterstitial() {
-        if (UnityAds.isReady(mPlacementId) && mContext != null) {
-            UnityAds.show((Activity) mContext, mPlacementId);
-        } else {
-            MoPubLog.d("Attempted to show Unity interstitial video before it was available.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityRouter.removeListener(mPlacementId);
-    }
-
-    @Override
-    public void onUnityAdsReady(String placementId) {
-        if (loadRequested) {
-            mCustomEventInterstitialListener.onInterstitialLoaded();
-            loadRequested = false;
-        }
-    }
-
-    @Override
-    public void onUnityAdsStart(String placementId) {
-        mCustomEventInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
-        if (finishState == UnityAds.FinishState.ERROR) {
-            MoPubLog.d("Unity interstitial video encountered a playback error for placement " + placementId);
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-        } else {
-            MoPubLog.d("Unity interstitial video completed for placement " + placementId);
-            mCustomEventInterstitialListener.onInterstitialDismissed();
-        }
-
-        UnityRouter.removeListener(placementId);
-    }
-
-    @Override
-    public void onUnityAdsClick(String placementId) {
-        mCustomEventInterstitialListener.onInterstitialClicked();
-    }
-
-
-    // @Override
-    public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
-
-    }
-
-    @Override
-    public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
-        MoPubLog.d("Unity interstitial video cache failed for placement " + mPlacementId + ".");
-        MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
-        mCustomEventInterstitialListener.onInterstitialFailed(errorCode);
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java b/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
deleted file mode 100644
index 24636be9..00000000
--- a/extras/src/com/mopub/mobileads/UnityRewardedVideo.java
+++ /dev/null
@@ -1,177 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.VisibleForTesting;
-import com.mopub.common.logging.MoPubLog;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.UnityAds;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Unity rewarded videos.
- *
- * Certified with Unity Ads 2.1.1
- */
-public class UnityRewardedVideo extends CustomEventRewardedVideo {
-    private static final String GAME_ID_KEY = "gameId";
-    private static final LifecycleListener sLifecycleListener = new UnityLifecycleListener();
-    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-    private static String sPlacementId = "";
-
-    @Nullable
-    private Activity mLauncherActivity;
-
-    @Override
-    @NonNull
-    public CustomEventRewardedVideoListener getVideoListenerForSdk() {
-        return sUnityAdsListener;
-    }
-
-    @Override
-    @NonNull
-    public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
-    }
-
-    @Override
-    @NonNull
-    public String getAdNetworkId() {
-        return sPlacementId;
-    }
-
-    @Override
-    public boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        synchronized (UnityRewardedVideo.class) {
-            if (UnityAds.isInitialized()) {
-                return false;
-            }
-
-            try {
-                UnityRouter.initUnityAds(serverExtras, launcherActivity);
-                UnityRouter.addListener(sPlacementId, sUnityAdsListener);
-            } catch (UnityRouter.UnityAdsException e) {
-                MoPubLog.e("Failed to initialize Unity Ads.", e);
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, UnityRouter.UnityAdsUtils.getMoPubErrorCode(e.getErrorCode()));
-            }
-
-            return true;
-        }
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull Activity activity,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) throws Exception {
-
-        sPlacementId = UnityRouter.placementIdForServerExtras(serverExtras, sPlacementId);
-        mLauncherActivity = activity;
-
-        UnityRouter.addListener(sPlacementId, sUnityAdsListener);
-        if (UnityAds.isReady()) {
-            MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, sPlacementId);
-        }
-    }
-
-    @Override
-    public boolean hasVideoAvailable() {
-        return UnityAds.isReady(sPlacementId);
-    }
-
-    @Override
-    public void showVideo() {
-        if (hasVideoAvailable()) {
-            UnityAds.show(mLauncherActivity, sPlacementId);
-        } else {
-            MoPubLog.d("Attempted to show Unity rewarded video before it was available.");
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        UnityRouter.removeListener(sPlacementId);
-    }
-
-    private static final class UnityLifecycleListener extends BaseLifecycleListener {
-        @Override
-        public void onCreate(@NonNull final Activity activity) {
-            super.onCreate(activity);
-        }
-
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-        }
-
-    }
-
-    private static class UnityAdsListener implements IUnityAdsExtendedListener,
-            CustomEventRewardedVideoListener {
-        @Override
-        public void onUnityAdsReady(String placementId) {
-            if (placementId.equals(sPlacementId)) {
-                MoPubLog.d("Unity rewarded video cached for placement " + placementId + ".");
-                MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(UnityRewardedVideo.class, placementId);
-            }
-        }
-
-        @Override
-        public void onUnityAdsStart(String placementId) {
-            MoPubRewardedVideoManager.onRewardedVideoStarted(UnityRewardedVideo.class, placementId);
-            MoPubLog.d("Unity rewarded video started for placement " + placementId + ".");
-        }
-
-        @Override
-        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
-            MoPubLog.d("Unity Ad finished with finish state = " + finishState);
-            if (finishState == UnityAds.FinishState.ERROR) {
-                MoPubRewardedVideoManager.onRewardedVideoPlaybackError(
-                        UnityRewardedVideo.class,
-                        sPlacementId,
-                        MoPubErrorCode.VIDEO_PLAYBACK_ERROR);
-                MoPubLog.d("Unity rewarded video encountered a playback error for placement " + placementId);
-            } else if (finishState == UnityAds.FinishState.COMPLETED) {
-                MoPubRewardedVideoManager.onRewardedVideoCompleted(
-                        UnityRewardedVideo.class,
-                        sPlacementId,
-                        MoPubReward.success(MoPubReward.NO_REWARD_LABEL, MoPubReward.NO_REWARD_AMOUNT));
-                MoPubLog.d("Unity rewarded video completed for placement " + placementId);
-            } else if (finishState == UnityAds.FinishState.SKIPPED) {
-                MoPubLog.d("Unity ad was skipped, no reward will be given.");
-            }
-            MoPubRewardedVideoManager.onRewardedVideoClosed(UnityRewardedVideo.class, sPlacementId);
-            UnityRouter.removeListener(placementId);
-        }
-
-        @Override
-        public void onUnityAdsClick(String placementId) {
-            MoPubRewardedVideoManager.onRewardedVideoClicked(UnityRewardedVideo.class, placementId);
-            MoPubLog.d("Unity rewarded video clicked for placement " + placementId + ".");
-        }
-
-        // @Override
-        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
-
-        }
-
-        @Override
-        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
-            MoPubLog.d("Unity rewarded video cache failed for placement " + sPlacementId + ".");
-            MoPubErrorCode errorCode = UnityRouter.UnityAdsUtils.getMoPubErrorCode(unityAdsError);
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(UnityRewardedVideo.class, sPlacementId, errorCode);
-        }
-    }
-
-    @VisibleForTesting
-    void reset() {
-        sPlacementId = "";
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/UnityRouter.java b/extras/src/com/mopub/mobileads/UnityRouter.java
deleted file mode 100644
index a7358947..00000000
--- a/extras/src/com/mopub/mobileads/UnityRouter.java
+++ /dev/null
@@ -1,147 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.text.TextUtils;
-
-import com.mopub.common.MoPub;
-import com.unity3d.ads.UnityAds;
-import com.unity3d.ads.mediation.IUnityAdsExtendedListener;
-import com.unity3d.ads.metadata.MediationMetaData;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Certified with Unity Ads 2.1.1
- */
-public class UnityRouter {
-    private static String sCurrentPlacementId;
-    private static final String GAME_ID_KEY = "gameId";
-    private static final String ZONE_ID_KEY = "zoneId";
-    private static final String PLACEMENT_ID_KEY = "placementId";
-    private static final UnityAdsListener sUnityAdsListener = new UnityAdsListener();
-    private static Map<String, IUnityAdsExtendedListener> mUnityAdsListeners = new HashMap<>();
-
-    static boolean initUnityAds(Map<String, String> serverExtras, Activity launcherActivity) {
-        String gameId = serverExtras.get(GAME_ID_KEY);
-        if (gameId == null || gameId.isEmpty()) {
-            throw new UnityAdsException(UnityAds.UnityAdsError.INVALID_ARGUMENT, "Sever extras is missing \"%s\" or is empty.", GAME_ID_KEY);
-        }
-
-        MediationMetaData mediationMetaData = new MediationMetaData(launcherActivity);
-        mediationMetaData.setName("MoPub");
-        mediationMetaData.setVersion(MoPub.SDK_VERSION);
-        mediationMetaData.commit();
-
-        UnityAds.initialize(launcherActivity, gameId, sUnityAdsListener);
-        return true;
-    }
-
-    static String placementIdForServerExtras(Map<String, String> serverExtras, String defaultPlacementId) {
-        String placementId = null;
-        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else if (serverExtras.containsKey(ZONE_ID_KEY)) {
-            placementId = serverExtras.get(ZONE_ID_KEY);
-        }
-        return TextUtils.isEmpty(placementId) ? defaultPlacementId : placementId;
-    }
-
-    static void showAd(Activity activity, String placementId) {
-        sCurrentPlacementId = placementId;
-        UnityAds.show(activity, placementId);
-    }
-
-    static void addListener(String placementId, IUnityAdsExtendedListener unityListener) {
-        mUnityAdsListeners.put(placementId, unityListener);
-    }
-
-    static void removeListener(String placementId) {
-        mUnityAdsListeners.remove(placementId);
-    }
-
-    private static class UnityAdsListener implements IUnityAdsExtendedListener {
-        @Override
-        public void onUnityAdsReady(String placementId) {
-            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
-            if (listener != null) {
-                listener.onUnityAdsReady(placementId);
-            }
-        }
-
-        @Override
-        public void onUnityAdsStart(String placementId) {
-            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
-            if (listener != null) {
-                listener.onUnityAdsStart(placementId);
-            }
-        }
-
-        @Override
-        public void onUnityAdsFinish(String placementId, UnityAds.FinishState finishState) {
-            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
-            if (listener != null) {
-                listener.onUnityAdsFinish(placementId, finishState);
-            }
-        }
-
-        @Override
-        public void onUnityAdsClick(String placementId) {
-            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(placementId);
-            if (listener != null) {
-                listener.onUnityAdsClick(placementId);
-            }
-        }
-
-        // @Override
-        public void onUnityAdsPlacementStateChanged(String placementId, UnityAds.PlacementState oldState, UnityAds.PlacementState newState) {
-
-        }
-
-        @Override
-        public void onUnityAdsError(UnityAds.UnityAdsError unityAdsError, String message) {
-            IUnityAdsExtendedListener listener = mUnityAdsListeners.get(sCurrentPlacementId);
-            if (listener != null) {
-                listener.onUnityAdsError(unityAdsError, message);
-            }
-        }
-    }
-
-    static final class UnityAdsUtils {
-        static MoPubErrorCode getMoPubErrorCode(UnityAds.UnityAdsError unityAdsError) {
-            MoPubErrorCode errorCode;
-            switch (unityAdsError) {
-                case VIDEO_PLAYER_ERROR:
-                    errorCode = MoPubErrorCode.VIDEO_PLAYBACK_ERROR;
-                    break;
-                case INVALID_ARGUMENT:
-                    errorCode = MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case INTERNAL_ERROR:
-                    errorCode = MoPubErrorCode.NETWORK_INVALID_STATE;
-                    break;
-                default:
-                    errorCode = MoPubErrorCode.NETWORK_NO_FILL;
-                    break;
-            }
-            return errorCode;
-        }
-    }
-
-    static class UnityAdsException extends RuntimeException {
-        private final UnityAds.UnityAdsError errorCode;
-
-        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailFormat, Object... args) {
-            this(errorCode, String.format(detailFormat, args));
-        }
-
-        public UnityAdsException(UnityAds.UnityAdsError errorCode, String detailMessage) {
-            super(detailMessage);
-            this.errorCode = errorCode;
-        }
-
-        public UnityAds.UnityAdsError getErrorCode() {
-            return errorCode;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/VungleInterstitial.java b/extras/src/com/mopub/mobileads/VungleInterstitial.java
deleted file mode 100644
index ba140085..00000000
--- a/extras/src/com/mopub/mobileads/VungleInterstitial.java
+++ /dev/null
@@ -1,237 +0,0 @@
-package com.mopub.mobileads;
-
-import android.content.Context;
-import android.os.Handler;
-import android.os.Looper;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Vungle Interstitial.
- * <p>
- * Certified with Vungle SDK 5.3.0
- */
-public class VungleInterstitial extends CustomEventInterstitial {
-
-    private static final String INTERSTITIAL_TAG = "Vungle Interstitial: ";
-
-    /*
-     * APP_ID_KEY is intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "appId";
-    public static final String PLACEMENT_ID_KEY = "pid";
-    public static final String PLACEMENT_IDS_KEY = "pids";
-
-    private static VungleRouter sVungleRouter;
-    private final Handler mHandler;
-    private CustomEventInterstitialListener mCustomEventInterstitialListener;
-    private VungleInterstitialRouterListener mVungleRouterListener;
-    private String mAppId;
-    private String mPlacementId;
-    private String[] mPlacementIds;
-    private boolean mIsPlaying;
-
-
-    public VungleInterstitial() {
-        mHandler = new Handler(Looper.getMainLooper());
-        sVungleRouter = VungleRouter.getInstance();
-    }
-
-    @Override
-    protected void loadInterstitial(Context context,
-            CustomEventInterstitialListener customEventInterstitialListener,
-            Map<String, Object> localExtras,
-            Map<String, String> serverExtras) {
-        mCustomEventInterstitialListener = customEventInterstitialListener;
-        mIsPlaying = false;
-
-        if (context == null) {
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-                }
-            });
-
-            return;
-        }
-
-        if (!validateIdsInServerExtras(serverExtras)) {
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-                }
-            });
-
-            return;
-        }
-
-        if (mVungleRouterListener == null) {
-            mVungleRouterListener = new VungleInterstitialRouterListener();
-        }
-
-        if (!sVungleRouter.isVungleInitialized()) {
-            sVungleRouter.initVungle(context, mAppId, mPlacementIds);
-        }
-
-        sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRouterListener);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (sVungleRouter.isAdPlayableForPlacement(mPlacementId)) {
-            sVungleRouter.playAdForPlacement(mPlacementId, null);
-            mIsPlaying = true;
-        } else {
-            MoPubLog.d(INTERSTITIAL_TAG + "SDK tried to show a Vungle interstitial ad before it finished loading. Please try again.");
-            mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-        }
-    }
-
-    @Override
-    protected void onInvalidate() {
-        MoPubLog.d(INTERSTITIAL_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
-        sVungleRouter.removeRouterListener(mPlacementId);
-        mVungleRouterListener = null;
-    }
-
-    // private functions
-    private boolean validateIdsInServerExtras(Map<String, String> serverExtras) {
-        boolean isAllDataValid = true;
-
-        if (serverExtras.containsKey(APP_ID_KEY)) {
-            mAppId = serverExtras.get(APP_ID_KEY);
-            if (mAppId.isEmpty()) {
-                MoPubLog.w(INTERSTITIAL_TAG + "App ID is empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(INTERSTITIAL_TAG + "AppID is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
-            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
-            if (mPlacementId.isEmpty()) {
-                MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(INTERSTITIAL_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
-            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
-            if (mPlacementIds.length == 0) {
-                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs are empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (isAllDataValid) {
-            boolean foundInList = false;
-            for (String pid : mPlacementIds) {
-                if (pid.equals(mPlacementId)) {
-                    foundInList = true;
-                }
-            }
-            if (!foundInList) {
-                MoPubLog.w(INTERSTITIAL_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
-                isAllDataValid = false;
-            }
-        }
-
-        return isAllDataValid;
-    }
-
-
-    /*
-     * VungleRouterListener
-     */
-    private class VungleInterstitialRouterListener implements VungleRouterListener {
-        @Override
-        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(INTERSTITIAL_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
-                mIsPlaying = false;
-
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (wasCallToActionClicked) {
-                            mCustomEventInterstitialListener.onInterstitialClicked();
-                        }
-                        mCustomEventInterstitialListener.onInterstitialDismissed();
-                    }
-                });
-
-                sVungleRouter.removeRouterListener(mPlacementId);
-            }
-        }
-
-        @Override
-        public void onAdStart(@NonNull String placementReferenceId) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(INTERSTITIAL_TAG + "onAdStart - Placement ID: " + placementReferenceId);
-                mIsPlaying = true;
-
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mCustomEventInterstitialListener.onInterstitialShown();
-                    }
-                });
-            }
-        }
-
-        @Override
-        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(INTERSTITIAL_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
-                mIsPlaying = false;
-
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                    }
-                });
-            }
-        }
-
-        @Override
-        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                if (!mIsPlaying) {
-                    if (isAdAvailable) {
-                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad successfully loaded - Placement ID: " + placementReferenceId);
-
-                        mHandler.post(new Runnable() {
-                            @Override
-                            public void run() {
-                                mCustomEventInterstitialListener.onInterstitialLoaded();
-                            }
-                        });
-                    } else {
-                        MoPubLog.d(INTERSTITIAL_TAG + "interstitial ad is not loaded - Placement ID: " + placementReferenceId);
-
-                        mHandler.post(new Runnable() {
-                            @Override
-                            public void run() {
-                                mCustomEventInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-                            }
-                        });
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java b/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
deleted file mode 100644
index 6a44e429..00000000
--- a/extras/src/com/mopub/mobileads/VungleRewardedVideo.java
+++ /dev/null
@@ -1,364 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.mopub.common.DataKeys;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.MediationSettings;
-import com.mopub.common.MoPubReward;
-import com.mopub.common.logging.MoPubLog;
-
-import com.vungle.publisher.AdConfig;
-
-import java.util.Map;
-
-/**
- * A custom event for showing Vungle rewarded videos.
- *
- * Certified with Vungle SDK 5.3.0
- */
-public class VungleRewardedVideo extends CustomEventRewardedVideo {
-
-    private static final String REWARDED_TAG = "Vungle Rewarded: ";
-
-    /*
-     * These constants are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "appId";
-    public static final String PLACEMENT_ID_KEY = "pid";
-    public static final String PLACEMENT_IDS_KEY = "pids";
-
-    public static final String VUNGLE_NETWORK_ID_DEFAULT = "vngl_id";
-    private static final String VUNGLE_DEFAULT_APP_ID = "YOUR_APP_ID_HERE";
-    private static final String[] VUNGLE_DEFAULT_ALL_PLACEMENT_IDS = {"PLACEMENT_ID_1", "PLACEMENT_ID_2", "..."};
-
-    private static VungleRouter sVungleRouter;
-    private VungleRewardedRouterListener mVungleRewardedRouterListener;
-    private static boolean sInitialized;
-    private String mAppId;
-    private String mPlacementId;
-    private String[] mPlacementIds;
-    private boolean mIsPlaying;
-
-    private String mAdUnitId;
-    private String mCustomerId;
-
-
-    public VungleRewardedVideo() {
-        sVungleRouter = VungleRouter.getInstance();
-
-        if (mVungleRewardedRouterListener == null) {
-            mVungleRewardedRouterListener = new VungleRewardedRouterListener();
-        }
-    }
-
-    @Nullable
-    @Override
-    public LifecycleListener getLifecycleListener() {
-        return sVungleRouter.getLifecycleListener();
-    }
-
-    @NonNull
-    @Override
-    protected String getAdNetworkId() {
-        return mPlacementId;
-    }
-
-    @Override
-    protected boolean checkAndInitializeSdk(@NonNull final Activity launcherActivity,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) throws Exception {
-        synchronized (VungleRewardedVideo.class) {
-            if (sInitialized) {
-                return false;
-            }
-
-            if (!validateIdsInServerExtras(serverExtras)) {
-                mAppId = VUNGLE_DEFAULT_APP_ID;
-                mPlacementIds = VUNGLE_DEFAULT_ALL_PLACEMENT_IDS;
-            }
-
-            if (!sVungleRouter.isVungleInitialized()) {
-                sVungleRouter.initVungle(launcherActivity, mAppId, mPlacementIds);
-            }
-
-            sInitialized = true;
-
-            return true;
-        }
-    }
-
-    @Override
-    protected void loadWithSdkInitialized(@NonNull final Activity activity, @NonNull final Map<String, Object> localExtras, @NonNull final Map<String, String> serverExtras) throws Exception {
-        mIsPlaying = false;
-
-        if (!validateIdsInServerExtras(serverExtras)) {
-            mPlacementId = VUNGLE_NETWORK_ID_DEFAULT;
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-
-            return;
-        }
-
-        Object adUnitObject = localExtras.get(DataKeys.AD_UNIT_ID_KEY);
-        if (adUnitObject instanceof String) {
-            mAdUnitId = (String) adUnitObject;
-        }
-
-        Object customerIdObject = localExtras.get(DataKeys.REWARDED_AD_CUSTOMER_ID_KEY);
-        if (customerIdObject instanceof String && !TextUtils.isEmpty((String) customerIdObject)) {
-            mCustomerId = (String) customerIdObject;
-        }
-
-        if (sVungleRouter.isVungleInitialized()) {
-            sVungleRouter.loadAdForPlacement(mPlacementId, mVungleRewardedRouterListener);
-        }
-        else {
-            MoPubLog.d(REWARDED_TAG + "There should not be this case. loadWithSdkInitialized is called before the SDK starts initialization for Placement ID: " + mPlacementId);
-            MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class, mPlacementId, MoPubErrorCode.ADAPTER_CONFIGURATION_ERROR);
-        }
-    }
-
-    @Override
-    protected boolean hasVideoAvailable() {
-        return sVungleRouter.isAdPlayableForPlacement(mPlacementId);
-    }
-
-    @Override
-    protected void showVideo() {
-        final AdConfig adConfig = new AdConfig();
-        setUpMediationSettingsForRequest(adConfig);
-
-        sVungleRouter.playAdForPlacement(mPlacementId, adConfig);
-        mIsPlaying = true;
-    }
-
-    @Override
-    protected void onInvalidate() {
-        MoPubLog.d(REWARDED_TAG + "onInvalidate is called for Placement ID:" + mPlacementId);
-
-        sVungleRouter.removeRouterListener(mPlacementId);
-        mVungleRewardedRouterListener = null;
-    }
-
-
-    //private functions
-    private boolean validateIdsInServerExtras (Map<String, String> serverExtras) {
-        boolean isAllDataValid = true;
-
-        if (serverExtras.containsKey(APP_ID_KEY)) {
-            mAppId = serverExtras.get(APP_ID_KEY);
-            if (mAppId.isEmpty()) {
-                MoPubLog.w(REWARDED_TAG + "App ID is empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(REWARDED_TAG + "AppID is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (serverExtras.containsKey(PLACEMENT_ID_KEY)) {
-            mPlacementId = serverExtras.get(PLACEMENT_ID_KEY);
-            if (mPlacementId.isEmpty()) {
-                MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(REWARDED_TAG + "Placement ID for this Ad Unit is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (serverExtras.containsKey(PLACEMENT_IDS_KEY)) {
-            mPlacementIds = serverExtras.get(PLACEMENT_IDS_KEY).replace(" ", "").split(",", 0);
-            if (mPlacementIds.length == 0) {
-                MoPubLog.w(REWARDED_TAG + "Placement IDs are empty.");
-                isAllDataValid = false;
-            }
-        } else {
-            MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in serverExtras.");
-            isAllDataValid = false;
-        }
-
-        if (isAllDataValid) {
-            boolean foundInList = false;
-            for (String pid:  mPlacementIds) {
-                if(pid.equals(mPlacementId)) {
-                    foundInList = true;
-                }
-            }
-            if(!foundInList) {
-                MoPubLog.w(REWARDED_TAG + "Placement IDs for this Ad Unit is not in the array of Placement IDs");
-                isAllDataValid = false;
-            }
-        }
-
-        return isAllDataValid;
-    }
-
-    private void setUpMediationSettingsForRequest(AdConfig adConfig) {
-        final VungleMediationSettings globalMediationSettings =
-                MoPubRewardedVideoManager.getGlobalMediationSettings(VungleMediationSettings.class);
-        final VungleMediationSettings instanceMediationSettings =
-                MoPubRewardedVideoManager.getInstanceMediationSettings(VungleMediationSettings.class, mAdUnitId);
-
-        // Local options override global options.
-        // The two objects are not merged.
-        if (instanceMediationSettings != null) {
-            modifyAdConfig(adConfig, instanceMediationSettings);
-        } else if (globalMediationSettings != null) {
-            modifyAdConfig(adConfig, globalMediationSettings);
-        }
-    }
-
-    private void modifyAdConfig(AdConfig adConfig, VungleMediationSettings mediationSettings) {
-        if (!TextUtils.isEmpty(mediationSettings.body)) {
-            adConfig.setIncentivizedCancelDialogBodyText(mediationSettings.body);
-        }
-        if (!TextUtils.isEmpty(mediationSettings.closeButtonText)) {
-            adConfig.setIncentivizedCancelDialogCloseButtonText(mediationSettings.closeButtonText);
-        }
-        if (!TextUtils.isEmpty(mediationSettings.keepWatchingButtonText)) {
-            adConfig.setIncentivizedCancelDialogKeepWatchingButtonText(mediationSettings.keepWatchingButtonText);
-        }
-        if (!TextUtils.isEmpty(mediationSettings.title)) {
-            adConfig.setIncentivizedCancelDialogTitle(mediationSettings.title);
-        }
-        if (!TextUtils.isEmpty(mCustomerId)) {
-            adConfig.setIncentivizedUserId(mCustomerId);
-        } else if (!TextUtils.isEmpty(mediationSettings.userId)) {
-            adConfig.setIncentivizedUserId(mediationSettings.userId);
-        }
-    }
-
-
-    /*
-     * VungleRewardedRouterListener
-     */
-    private class VungleRewardedRouterListener implements VungleRouterListener {
-        @Override
-        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(REWARDED_TAG + "onAdEnd - Placement ID: " + placementReferenceId + ", wasSuccessfulView: " + wasSuccessfulView + ", wasCallToActionClicked: " + wasCallToActionClicked);
-
-                mIsPlaying = false;
-
-                if (wasSuccessfulView) {
-                    // Vungle does not provide a callback when a user should be rewarded.
-                    // You will need to provide your own reward logic if you receive a reward with
-                    // "NO_REWARD_LABEL" && "NO_REWARD_AMOUNT"
-                    MoPubRewardedVideoManager.onRewardedVideoCompleted(VungleRewardedVideo.class,
-                            mPlacementId,
-                            MoPubReward.success(MoPubReward.NO_REWARD_LABEL,
-                                    MoPubReward.NO_REWARD_AMOUNT));
-                }
-
-                if (wasCallToActionClicked) {
-                    MoPubRewardedVideoManager.onRewardedVideoClicked(VungleRewardedVideo.class,
-                            mPlacementId);
-                }
-
-                MoPubRewardedVideoManager.onRewardedVideoClosed(VungleRewardedVideo.class,
-                        mPlacementId);
-
-                sVungleRouter.removeRouterListener(mPlacementId);
-            }
-        }
-
-        @Override
-        public void onAdStart(@NonNull String placementReferenceId) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(REWARDED_TAG + "onAdStart - Placement ID: " + placementReferenceId);
-
-                mIsPlaying = true;
-
-                MoPubRewardedVideoManager.onRewardedVideoStarted(VungleRewardedVideo.class,
-                        mPlacementId);
-            }
-        }
-
-        @Override
-        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                MoPubLog.d(REWARDED_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId + ", reason: " + reason);
-
-                mIsPlaying = false;
-                MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                        mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
-            }
-        }
-
-        @Override
-        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
-            if (mPlacementId.equals(placementReferenceId)) {
-                if (!mIsPlaying) {
-                    if (isAdAvailable) {
-                        MoPubLog.d(REWARDED_TAG + "rewarded video ad successfully loaded - Placement ID: " + placementReferenceId);
-                        MoPubRewardedVideoManager.onRewardedVideoLoadSuccess(VungleRewardedVideo.class,
-                                mPlacementId);
-                    }
-                    else {
-                        MoPubLog.d(REWARDED_TAG + "rewarded video ad is not loaded - Placement ID: " + placementReferenceId);
-                        MoPubRewardedVideoManager.onRewardedVideoLoadFailure(VungleRewardedVideo.class,
-                                mPlacementId, MoPubErrorCode.NETWORK_NO_FILL);
-                    }
-                }
-            }
-        }
-    }
-
-
-    public static class VungleMediationSettings implements MediationSettings {
-        @Nullable private final String userId;
-        @Nullable private final String title;
-        @Nullable private final String body;
-        @Nullable private final String closeButtonText;
-        @Nullable private final String keepWatchingButtonText;
-
-        public static class Builder {
-            @Nullable private String userId;
-            @Nullable private String title;
-            @Nullable private String body;
-            @Nullable private String closeButtonText;
-            @Nullable private String keepWatchingButtonText;
-
-            public Builder withUserId(@NonNull final String userId) {
-                this.userId = userId;
-                return this;
-            }
-
-            public Builder withCancelDialogTitle(@NonNull final String title) {
-                this.title = title;
-                return this;
-            }
-
-            public Builder withCancelDialogBody(@NonNull final String body) {
-                this.body = body;
-                return this;
-            }
-
-            public Builder withCancelDialogCloseButton(@NonNull final String buttonText) {
-                this.closeButtonText = buttonText;
-                return this;
-            }
-
-            public Builder withCancelDialogKeepWatchingButton(@NonNull final String buttonText) {
-                this.keepWatchingButtonText = buttonText;
-                return this;
-            }
-
-            public VungleMediationSettings build() {
-                return new VungleMediationSettings(this);
-            }
-        }
-
-        private VungleMediationSettings(@NonNull final Builder builder) {
-            this.userId = builder.userId;
-            this.title = builder.title;
-            this.body = builder.body;
-            this.closeButtonText = builder.closeButtonText;
-            this.keepWatchingButtonText = builder.keepWatchingButtonText;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/mobileads/VungleRouter.java b/extras/src/com/mopub/mobileads/VungleRouter.java
deleted file mode 100644
index 46a499f7..00000000
--- a/extras/src/com/mopub/mobileads/VungleRouter.java
+++ /dev/null
@@ -1,211 +0,0 @@
-package com.mopub.mobileads;
-
-import android.app.Activity;
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import com.mopub.common.BaseLifecycleListener;
-import com.mopub.common.LifecycleListener;
-import com.mopub.common.logging.MoPubLog;
-
-import com.vungle.publisher.AdConfig;
-import com.vungle.publisher.VungleAdEventListener;
-import com.vungle.publisher.VungleInitListener;
-import com.vungle.publisher.VunglePub;
-import com.vungle.publisher.env.WrapperFramework;
-import com.vungle.publisher.inject.Injector;
-
-import java.util.HashMap;
-import java.util.Map;
-
-
-/**
- * Certified with Vungle SDK 5.3.0
- */
-public class VungleRouter {
-
-    private static final String ROUTER_TAG = "Vungle Router: ";
-
-    // Version of the adapter, intended for Vungle internal use.
-    private static final String VERSION = "5.3.0";
-
-    private static VungleRouter instance = new VungleRouter();
-    private enum SDKInitState {
-        NOTINITIALIZED,
-        INITIALIZING,
-        INITIALIZED;
-    }
-
-    private static SDKInitState sInitState = SDKInitState.NOTINITIALIZED;
-    private static VunglePub sVunglePub;
-    private static Map<String, VungleRouterListener> sVungleRouterListeners = new HashMap<>();
-    private static Map<String, VungleRouterListener> sWaitingList = new HashMap<>();
-
-    private static final LifecycleListener sLifecycleListener = new BaseLifecycleListener() {
-        @Override
-        public void onPause(@NonNull final Activity activity) {
-            super.onPause(activity);
-            sVunglePub.onPause();
-        }
-
-        @Override
-        public void onResume(@NonNull final Activity activity) {
-            super.onResume(activity);
-            sVunglePub.onResume();
-        }
-    };
-
-
-    private VungleRouter() {
-        Injector injector = Injector.getInstance();
-        injector.setWrapperFramework(WrapperFramework.mopub);
-        injector.setWrapperFrameworkVersion(VERSION.replace('.', '_'));
-
-        sVunglePub = VunglePub.getInstance();
-    }
-
-    public static VungleRouter getInstance() {
-        return instance;
-    }
-
-    public LifecycleListener getLifecycleListener() {
-        return sLifecycleListener;
-    }
-
-
-    public void initVungle(Context context, String vungleAppId, String[] placementReferenceIds) {
-        sVunglePub.init(context, vungleAppId, placementReferenceIds, new VungleInitListener() {
-            @Override
-            public void onSuccess() {
-                MoPubLog.d(ROUTER_TAG + "SDK is initialized successfully.");
-
-                sInitState = SDKInitState.INITIALIZED;
-
-                sVunglePub.clearAndSetEventListeners(vungleDefaultListener);
-                clearWaitingList();
-            }
-
-            @Override
-            public void onFailure(Throwable throwable) {
-                MoPubLog.w(ROUTER_TAG + "Initialization is failed.");
-
-                sInitState = SDKInitState.NOTINITIALIZED;
-            }
-        });
-
-        sInitState = SDKInitState.INITIALIZING;
-    }
-
-    public boolean isVungleInitialized() {
-        if (sInitState == SDKInitState.NOTINITIALIZED) {
-            return false;
-        } else if (sInitState == SDKInitState.INITIALIZING) {
-            return true;
-        } else if (sInitState == SDKInitState.INITIALIZED) {
-            return true;
-        }
-
-        return sVunglePub.isInitialized();
-    }
-
-    public void loadAdForPlacement(String placementId, VungleRouterListener routerListener) {
-        switch (sInitState) {
-            case NOTINITIALIZED:
-                MoPubLog.w(ROUTER_TAG + "There should not be this case. loadAdForPlacement is called before initialization starts.");
-                break;
-
-            case INITIALIZING:
-                sWaitingList.put(placementId, routerListener);
-                break;
-
-            case INITIALIZED:
-                addRouterListener(placementId, routerListener);
-                sVunglePub.loadAd(placementId);
-                break;
-        }
-    }
-
-    private void addRouterListener(String placementId, VungleRouterListener routerListener) {
-        sVungleRouterListeners.put(placementId, routerListener);
-    }
-
-    public void removeRouterListener(String placementId) {
-        sVungleRouterListeners.remove(placementId);
-    }
-
-    public boolean isAdPlayableForPlacement(String placementId) {
-        return sVunglePub.isAdPlayable(placementId);
-    }
-
-    public void playAdForPlacement(String placementId, AdConfig adConfig) {
-        if (sVunglePub.isAdPlayable(placementId)) {
-            sVunglePub.playAd(placementId, adConfig);
-        }
-        else {
-            MoPubLog.w(ROUTER_TAG + "There should not be this case. playAdForPlacement is called before an ad is loaded for Placement ID: " + placementId);
-        }
-    }
-
-    private void clearWaitingList() {
-        for (Map.Entry<String, VungleRouterListener> entry : sWaitingList.entrySet()) {
-            sVunglePub.loadAd(entry.getKey());
-            sVungleRouterListeners.put(entry.getKey(),entry.getValue());
-        }
-
-        sWaitingList.clear();
-    }
-
-
-    /*
-     * VungleAdEventListener
-     */
-    private final VungleAdEventListener vungleDefaultListener = new VungleAdEventListener() {
-        @Override
-        public void onAdEnd(@NonNull String placementReferenceId, final boolean wasSuccessfulView, final boolean wasCallToActionClicked) {
-            MoPubLog.d(ROUTER_TAG + "onAdEnd - Placement ID: " + placementReferenceId);
-
-            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
-            if (targetListener != null) {
-                targetListener.onAdEnd(placementReferenceId, wasSuccessfulView, wasCallToActionClicked);
-            } else {
-                MoPubLog.w(ROUTER_TAG + "onAdEnd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
-            }
-        }
-
-        @Override
-        public void onAdStart(@NonNull String placementReferenceId) {
-            MoPubLog.d(ROUTER_TAG + "onAdStart - Placement ID: " + placementReferenceId);
-
-            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
-            if (targetListener != null) {
-                targetListener.onAdStart(placementReferenceId);
-            } else {
-                MoPubLog.w(ROUTER_TAG + "onAdStart - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
-            }
-        }
-
-        @Override
-        public void onUnableToPlayAd(@NonNull String placementReferenceId, String reason) {
-            MoPubLog.d(ROUTER_TAG + "onUnableToPlayAd - Placement ID: " + placementReferenceId);
-
-            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
-            if (targetListener != null) {
-                targetListener.onUnableToPlayAd(placementReferenceId, reason);
-            } else {
-                MoPubLog.w(ROUTER_TAG + "onUnableToPlayAd - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
-            }
-        }
-
-        @Override
-        public void onAdAvailabilityUpdate(@NonNull String placementReferenceId, boolean isAdAvailable) {
-            MoPubLog.d(ROUTER_TAG + "onAdAvailabilityUpdate - Placement ID: " + placementReferenceId);
-
-            VungleRouterListener targetListener = sVungleRouterListeners.get(placementReferenceId);
-            if (targetListener != null) {
-                targetListener.onAdAvailabilityUpdate(placementReferenceId, isAdAvailable);
-            } else {
-                MoPubLog.w(ROUTER_TAG + "onAdAvailabilityUpdate - VungleRouterListener is not found for Placement ID: " + placementReferenceId);
-            }
-        }
-    };
-}
diff --git a/extras/src/com/mopub/mobileads/VungleRouterListener.java b/extras/src/com/mopub/mobileads/VungleRouterListener.java
deleted file mode 100644
index 057a8af4..00000000
--- a/extras/src/com/mopub/mobileads/VungleRouterListener.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.mopub.mobileads;
-
-import android.support.annotation.NonNull;
-
-/**
- * Certified with Vungle SDK 5.3.0
- */
-public interface VungleRouterListener {
-    void onAdEnd(@NonNull String var1, boolean var2, boolean var3);
-
-    void onAdStart(@NonNull String var1);
-
-    void onUnableToPlayAd(@NonNull String var1, String var2);
-
-    void onAdAvailabilityUpdate(@NonNull String var1, boolean var2);
-}
diff --git a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java b/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
deleted file mode 100644
index 1429555d..00000000
--- a/extras/src/com/mopub/nativeads/FacebookAdRenderer.java
+++ /dev/null
@@ -1,209 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.RelativeLayout;
-import android.widget.TextView;
-
-import com.facebook.ads.MediaView;
-import com.mopub.common.Preconditions;
-
-import java.util.WeakHashMap;
-
-import static android.view.View.VISIBLE;
-
-/**
- * Include this class if you want to use Facebook native video ads. This renderer handles Facebook
- * static and video native ads. This will automatically replace the main image view with the
- * Facebook MediaView that handles showing the main asset.
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookAdRenderer implements MoPubAdRenderer<FacebookNative.FacebookVideoEnabledNativeAd> {
-    private final ViewBinder mViewBinder;
-
-    // This is used instead of View.setTag, which causes a memory leak in 2.3
-    // and earlier: https://code.google.com/p/android/issues/detail?id=18273
-    final WeakHashMap<View, FacebookNativeViewHolder> mViewHolderMap;
-
-    /**
-     * Constructs a native ad renderer with a view binder.
-     *
-     * @param viewBinder The view binder to use when inflating and rendering an ad.
-     */
-    public FacebookAdRenderer(final ViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<View, FacebookNativeViewHolder>();
-    }
-
-    @Override
-    public View createAdView(final Context context, final ViewGroup parent) {
-        final View adView = LayoutInflater
-                .from(context)
-                .inflate(mViewBinder.layoutId, parent, false);
-        final View mainImageView = adView.findViewById(mViewBinder.mainImageId);
-        if (mainImageView == null) {
-            return adView;
-        }
-
-        final ViewGroup.LayoutParams mainImageViewLayoutParams = mainImageView.getLayoutParams();
-        final MediaView.LayoutParams mediaViewLayoutParams = new MediaView.LayoutParams(
-                mainImageViewLayoutParams.width, mainImageViewLayoutParams.height);
-
-        if (mainImageViewLayoutParams instanceof ViewGroup.MarginLayoutParams) {
-            final ViewGroup.MarginLayoutParams marginParams =
-                    (ViewGroup.MarginLayoutParams) mainImageViewLayoutParams;
-            mediaViewLayoutParams.setMargins(marginParams.leftMargin,
-                    marginParams.topMargin,
-                    marginParams.rightMargin,
-                    marginParams.bottomMargin);
-        }
-
-        if (mainImageViewLayoutParams instanceof RelativeLayout.LayoutParams) {
-            final RelativeLayout.LayoutParams mainImageViewRelativeLayoutParams =
-                    (RelativeLayout.LayoutParams) mainImageViewLayoutParams;
-            final int[] rules = mainImageViewRelativeLayoutParams.getRules();
-            for (int i = 0; i < rules.length; i++) {
-                mediaViewLayoutParams.addRule(i, rules[i]);
-            }
-            mainImageView.setVisibility(View.INVISIBLE);
-        } else {
-            mainImageView.setVisibility(View.GONE);
-        }
-
-        final MediaView mediaView = new MediaView(context);
-        ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
-        int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
-        mainImageParent.addView(mediaView, mainImageIndex + 1, mediaViewLayoutParams);
-        return adView;
-    }
-
-    @Override
-    public void renderAdView(final View view,
-            final FacebookNative.FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd) {
-        FacebookNativeViewHolder facebookNativeViewHolder = mViewHolderMap.get(view);
-        if (facebookNativeViewHolder == null) {
-            facebookNativeViewHolder = FacebookNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, facebookNativeViewHolder);
-        }
-
-        update(facebookNativeViewHolder, facebookVideoEnabledNativeAd);
-        NativeRendererHelper.updateExtras(facebookNativeViewHolder.getMainView(),
-                mViewBinder.extras,
-                facebookVideoEnabledNativeAd.getExtras());
-        setViewVisibility(facebookNativeViewHolder, VISIBLE);
-    }
-
-    @Override
-    public boolean supports(final BaseNativeAd nativeAd) {
-        Preconditions.checkNotNull(nativeAd);
-        return nativeAd instanceof FacebookNative.FacebookVideoEnabledNativeAd;
-    }
-
-    private void update(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final FacebookNative.FacebookVideoEnabledNativeAd nativeAd) {
-        final ImageView mainImageView = facebookNativeViewHolder.getMainImageView();
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTitleView(),
-                nativeAd.getTitle());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getTextView(), nativeAd.getText());
-        NativeRendererHelper.addTextView(facebookNativeViewHolder.getCallToActionView(),
-                nativeAd.getCallToAction());
-        NativeImageHelper.loadImageView(nativeAd.getMainImageUrl(), mainImageView);
-        NativeImageHelper.loadImageView(nativeAd.getIconImageUrl(),
-                facebookNativeViewHolder.getIconImageView());
-        NativeRendererHelper.addPrivacyInformationIcon(
-                facebookNativeViewHolder.getPrivacyInformationIconImageView(),
-                nativeAd.getPrivacyInformationIconImageUrl(),
-                nativeAd.getPrivacyInformationIconClickThroughUrl());
-        final MediaView mediaView = facebookNativeViewHolder.getMediaView();
-        if (mediaView != null && mainImageView != null) {
-            nativeAd.updateMediaView(mediaView);
-            mediaView.setVisibility(View.VISIBLE);
-            if (facebookNativeViewHolder.isMainImageViewInRelativeView()) {
-                mainImageView.setVisibility(View.INVISIBLE);
-            } else {
-                mainImageView.setVisibility(View.GONE);
-            }
-
-        }
-    }
-
-    private static void setViewVisibility(final FacebookNativeViewHolder facebookNativeViewHolder,
-            final int visibility) {
-        if (facebookNativeViewHolder.getMainView() != null) {
-            facebookNativeViewHolder.getMainView().setVisibility(visibility);
-        }
-    }
-
-    static class FacebookNativeViewHolder {
-        private final StaticNativeViewHolder mStaticNativeViewHolder;
-        private final MediaView mMediaView;
-        private final boolean isMainImageViewInRelativeView;
-
-        // Use fromViewBinder instead of a constructor
-        private FacebookNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
-                final MediaView mediaView, final boolean mainImageViewInRelativeView) {
-            mStaticNativeViewHolder = staticNativeViewHolder;
-            mMediaView = mediaView;
-            isMainImageViewInRelativeView = mainImageViewInRelativeView;
-        }
-
-        static FacebookNativeViewHolder fromViewBinder(final View view,
-                final ViewBinder viewBinder) {
-            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder.fromViewBinder(view, viewBinder);
-            final View mainImageView = staticNativeViewHolder.mainImageView;
-            boolean mainImageViewInRelativeView = false;
-            MediaView mediaView = null;
-            if (mainImageView != null) {
-                final ViewGroup mainImageParent = (ViewGroup) mainImageView.getParent();
-                if (mainImageParent instanceof RelativeLayout) {
-                    mainImageViewInRelativeView = true;
-                }
-                final int mainImageIndex = mainImageParent.indexOfChild(mainImageView);
-                final View viewAfterImageView = mainImageParent.getChildAt(mainImageIndex + 1);
-                if (viewAfterImageView instanceof MediaView) {
-                    mediaView = (MediaView) viewAfterImageView;
-                }
-            }
-            return new FacebookNativeViewHolder(staticNativeViewHolder, mediaView, mainImageViewInRelativeView);
-        }
-
-        public View getMainView() {
-            return mStaticNativeViewHolder.mainView;
-        }
-
-        public TextView getTitleView() {
-            return mStaticNativeViewHolder.titleView;
-        }
-
-        public TextView getTextView() {
-            return mStaticNativeViewHolder.textView;
-        }
-
-        public TextView getCallToActionView() {
-            return mStaticNativeViewHolder.callToActionView;
-        }
-
-        public ImageView getMainImageView() {
-            return mStaticNativeViewHolder.mainImageView;
-        }
-
-        public ImageView getIconImageView() {
-            return mStaticNativeViewHolder.iconImageView;
-        }
-
-        public ImageView getPrivacyInformationIconImageView() {
-            return mStaticNativeViewHolder.privacyInformationIconImageView;
-        }
-
-        public MediaView getMediaView() {
-            return mMediaView;
-        }
-
-        public boolean isMainImageViewInRelativeView() {
-            return isMainImageViewInRelativeView;
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/FacebookNative.java b/extras/src/com/mopub/nativeads/FacebookNative.java
deleted file mode 100644
index 4eb9d55f..00000000
--- a/extras/src/com/mopub/nativeads/FacebookNative.java
+++ /dev/null
@@ -1,526 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.facebook.ads.Ad;
-import com.facebook.ads.AdError;
-import com.facebook.ads.AdListener;
-import com.facebook.ads.MediaView;
-import com.facebook.ads.NativeAd;
-import com.facebook.ads.NativeAd.Rating;
-import com.mopub.common.Preconditions;
-import com.mopub.common.logging.MoPubLog;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-
-/**
- * FacebookAdRenderer is also necessary in order to show video ads.
- * Video ads will only be shown if VIDEO_ENABLED is set to true or a server configuration
- * "video_enabled" flag is set to true. The server configuration will override the local
- * configuration.
- * Certified with Facebook Audience Network 4.26.1
- */
-public class FacebookNative extends CustomEventNative {
-    private static final String PLACEMENT_ID_KEY = "placement_id";
-    private static final String VIDEO_ENABLED_KEY = "video_enabled";
-
-    /**
-     * Sets whether or not Facebook native video ads will be shown. This value is overridden with
-     * server extras.
-     */
-    private static boolean VIDEO_ENABLED = false;
-
-    /**
-     * Sets whether or not there is a video renderer available. This class will check for the
-     * default Facebook video renderer. This value can be overridden with {@link
-     * FacebookNative#setVideoRendererAvailable} if there already is a custom Facebook video
-     * renderer.
-     */
-    private static Boolean sIsVideoRendererAvailable = null;
-
-    // CustomEventNative implementation
-    @Override
-    protected void loadNativeAd(final Context context,
-            final CustomEventNativeListener customEventNativeListener,
-            final Map<String, Object> localExtras,
-            final Map<String, String> serverExtras) {
-
-        final String placementId;
-        if (extrasAreValid(serverExtras)) {
-            placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        } else {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        final String videoEnabledString = serverExtras.get(VIDEO_ENABLED_KEY);
-        boolean videoEnabledFromServer = Boolean.parseBoolean(videoEnabledString);
-
-        if (sIsVideoRendererAvailable == null) {
-            try {
-                Class.forName("com.mopub.nativeads.FacebookAdRenderer");
-                sIsVideoRendererAvailable = true;
-            } catch (ClassNotFoundException e) {
-                sIsVideoRendererAvailable = false;
-            }
-        }
-
-        if (shouldUseVideoEnabledNativeAd(sIsVideoRendererAvailable, videoEnabledString,
-                videoEnabledFromServer)) {
-            final FacebookVideoEnabledNativeAd facebookVideoEnabledNativeAd =
-                    new FacebookVideoEnabledNativeAd(context,
-                            new NativeAd(context, placementId), customEventNativeListener);
-            facebookVideoEnabledNativeAd.loadAd();
-        } else {
-            final FacebookStaticNativeAd facebookStaticNativeAd = new FacebookStaticNativeAd(
-                    context, new NativeAd(context, placementId), customEventNativeListener);
-            facebookStaticNativeAd.loadAd();
-        }
-    }
-
-    /**
-     * Sets whether Facebook native video ads may be shown. This value is overridden by the value of
-     * the "video_enabled" key that may be sent from the MoPub ad server.
-     * com.mopub.nativeads.FacebookAdRenderer must also be used to display video-enabled ads.
-     *
-     * @param videoEnabled True if you want to enable Facebook native video.
-     */
-    public static void setVideoEnabled(final boolean videoEnabled) {
-        VIDEO_ENABLED = videoEnabled;
-    }
-
-    /**
-     * Sets whether a renderer is available that supports Facebook video ads.
-     * <p/>
-     * If you use a custom renderer class that is not com.mopub.nativeads.FacebookAdRenderer to show
-     * video-enabled native ads, you should set this to true.
-     *
-     * @param videoRendererAvailable Whether or not there is a renderer available for video-enabled
-     *                               Facebook native ads.
-     */
-    public static void setVideoRendererAvailable(final boolean videoRendererAvailable) {
-        sIsVideoRendererAvailable = videoRendererAvailable;
-    }
-
-    static boolean shouldUseVideoEnabledNativeAd(final boolean isVideoRendererAvailable,
-            final String videoEnabledString, final boolean videoEnabledFromServer) {
-        if (!isVideoRendererAvailable) {
-            return false;
-        }
-        return (videoEnabledString != null && videoEnabledFromServer) ||
-                (videoEnabledString == null && VIDEO_ENABLED);
-    }
-
-    static Boolean isVideoRendererAvailable() {
-        return sIsVideoRendererAvailable;
-    }
-
-    private boolean extrasAreValid(final Map<String, String> serverExtras) {
-        final String placementId = serverExtras.get(PLACEMENT_ID_KEY);
-        return (placementId != null && placementId.length() > 0);
-    }
-
-    private static void registerChildViewsForInteraction(final View view, final NativeAd nativeAd) {
-        if (nativeAd == null) {
-            return;
-        }
-
-        final List<View> clickableViews = new ArrayList<>();
-        assembleChildViewsWithLimit(view, clickableViews, 10);
-
-        if (clickableViews.size() == 1) {
-            nativeAd.registerViewForInteraction(view);
-        } else {
-            nativeAd.registerViewForInteraction(view, clickableViews);
-        }
-    }
-
-    private static void assembleChildViewsWithLimit(final View view,
-            final List<View> clickableViews, final int limit) {
-        if (view == null) {
-            MoPubLog.d("View given is null. Ignoring");
-            return;
-        }
-
-        if (limit <= 0) {
-            MoPubLog.d("Depth limit reached; adding this view regardless of its type.");
-            clickableViews.add(view);
-            return;
-        }
-
-        if (view instanceof ViewGroup && ((ViewGroup) view).getChildCount() > 0) {
-            final ViewGroup vg = (ViewGroup) view;
-            for (int i = 0; i < vg.getChildCount(); i++) {
-                assembleChildViewsWithLimit(vg.getChildAt(i), clickableViews, limit - 1);
-            }
-            return;
-        }
-
-        clickableViews.add(view);
-    }
-
-    static class FacebookStaticNativeAd extends StaticNativeAd implements AdListener {
-        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-
-        private final Context mContext;
-        private final NativeAd mNativeAd;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        FacebookStaticNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        void loadAd() {
-            mNativeAd.setAdListener(this);
-            mNativeAd.loadAd();
-        }
-
-        // AdListener
-        @Override
-        public void onAdLoaded(final Ad ad) {
-            // This identity check is from Facebook's Native API sample code:
-            // https://developers.facebook.com/docs/audience-network/android/native-api
-            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            setTitle(mNativeAd.getAdTitle());
-            setText(mNativeAd.getAdBody());
-
-            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
-            setMainImageUrl(coverImage == null ? null : coverImage.getUrl());
-
-            final NativeAd.Image icon = mNativeAd.getAdIcon();
-            setIconImageUrl(icon == null ? null : icon.getUrl());
-
-            setCallToAction(mNativeAd.getAdCallToAction());
-            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
-
-            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
-
-            final NativeAd.Image adChoicesIconImage = mNativeAd.getAdChoicesIcon();
-            setPrivacyInformationIconImageUrl(adChoicesIconImage == null ? null : adChoicesIconImage
-                    .getUrl());
-            setPrivacyInformationIconClickThroughUrl(mNativeAd.getAdChoicesLinkUrl());
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(getMainImageUrl());
-            }
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(getIconImageUrl());
-            }
-            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
-            if (privacyInformationIconImageUrl != null) {
-                imageUrls.add(privacyInformationIconImageUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(FacebookStaticNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onError(final Ad ad, final AdError adError) {
-            if (adError == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        @Override
-        public void onAdClicked(final Ad ad) {
-            notifyAdClicked();
-        }
-
-        @Override
-        public void onLoggingImpression(final Ad ad) {
-            notifyAdImpressed();
-        }
-
-        // BaseForwardingNativeAd
-        @Override
-        public void prepare(final View view) {
-            registerChildViewsForInteraction(view, mNativeAd);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mNativeAd.unregisterView();
-        }
-
-        @Override
-        public void destroy() {
-            mNativeAd.destroy();
-        }
-
-        private Double getDoubleRating(final Rating rating) {
-            if (rating == null) {
-                return null;
-            }
-
-            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
-        }
-    }
-
-
-    static class FacebookVideoEnabledNativeAd extends BaseNativeAd implements AdListener {
-        private static final String SOCIAL_CONTEXT_FOR_AD = "socialContextForAd";
-
-        static final double MIN_STAR_RATING = 0;
-        static final double MAX_STAR_RATING = 5;
-
-        private final Context mContext;
-        private final NativeAd mNativeAd;
-        private final CustomEventNativeListener mCustomEventNativeListener;
-
-        private Double mStarRating;
-
-        private final Map<String, Object> mExtras;
-
-        FacebookVideoEnabledNativeAd(final Context context,
-                final NativeAd nativeAd,
-                final CustomEventNativeListener customEventNativeListener) {
-            mContext = context.getApplicationContext();
-            mNativeAd = nativeAd;
-            mCustomEventNativeListener = customEventNativeListener;
-            mExtras = new HashMap<String, Object>();
-        }
-
-        void loadAd() {
-            mNativeAd.setAdListener(this);
-            mNativeAd.loadAd();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's title.
-         */
-        final public String getTitle() {
-            return mNativeAd.getAdTitle();
-        }
-
-        /**
-         * Returns the String corresponding to the ad's body text. May be null.
-         */
-        final public String getText() {
-            return mNativeAd.getAdBody();
-        }
-
-        /**
-         * Returns the String url corresponding to the ad's main image. May be null.
-         */
-        final public String getMainImageUrl() {
-            final NativeAd.Image coverImage = mNativeAd.getAdCoverImage();
-            return coverImage == null ? null : coverImage.getUrl();
-        }
-
-        /**
-         * Returns the String url corresponding to the ad's icon image. May be null.
-         */
-        final public String getIconImageUrl() {
-            final NativeAd.Image icon = mNativeAd.getAdIcon();
-            return icon == null ? null : icon.getUrl();
-        }
-
-        /**
-         * Returns the Call To Action String (i.e. "Download" or "Learn More") associated with this ad.
-         */
-        final public String getCallToAction() {
-            return mNativeAd.getAdCallToAction();
-        }
-
-        /**
-         * For app install ads, this returns the associated star rating (on a 5 star scale) for the
-         * advertised app. Note that this method may return null if the star rating was either never set
-         * or invalid.
-         */
-        final public Double getStarRating() {
-            return mStarRating;
-        }
-
-        /**
-         * Returns the Privacy Information click through url.
-         *
-         * @return String representing the Privacy Information Icon click through url, or {@code null}
-         * if not set.
-         */
-        final public String getPrivacyInformationIconClickThroughUrl() {
-            return mNativeAd.getAdChoicesLinkUrl();
-        }
-
-        /**
-         * Returns the Privacy Information image url.
-         *
-         * @return String representing the Privacy Information Icon click through url, or {@code
-         * null} if not set.
-         */
-        final public String getPrivacyInformationIconImageUrl() {
-            return mNativeAd.getAdChoicesIcon() == null ? null : mNativeAd.getAdChoicesIcon().getUrl();
-        }
-
-        // AdListener
-        @Override
-        public void onAdLoaded(final Ad ad) {
-            // This identity check is from Facebook's Native API sample code:
-            // https://developers.facebook.com/docs/audience-network/android/native-api
-            if (!mNativeAd.equals(ad) || !mNativeAd.isAdLoaded()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-                return;
-            }
-
-            setStarRating(getDoubleRating(mNativeAd.getAdStarRating()));
-
-            addExtra(SOCIAL_CONTEXT_FOR_AD, mNativeAd.getAdSocialContext());
-
-            final List<String> imageUrls = new ArrayList<String>();
-            final String mainImageUrl = getMainImageUrl();
-            if (mainImageUrl != null) {
-                imageUrls.add(mainImageUrl);
-            }
-            final String iconImageUrl = getIconImageUrl();
-            if (iconImageUrl != null) {
-                imageUrls.add(iconImageUrl);
-            }
-            final String privacyInformationIconImageUrl = getPrivacyInformationIconImageUrl();
-            if (privacyInformationIconImageUrl != null) {
-                imageUrls.add(privacyInformationIconImageUrl);
-            }
-
-            preCacheImages(mContext, imageUrls, new NativeImageHelper.ImageListener() {
-                @Override
-                public void onImagesCached() {
-                    mCustomEventNativeListener.onNativeAdLoaded(FacebookVideoEnabledNativeAd.this);
-                }
-
-                @Override
-                public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                    mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                }
-            });
-        }
-
-        @Override
-        public void onError(final Ad ad, final AdError adError) {
-            if (adError == null) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            } else if (adError.getErrorCode() == AdError.NO_FILL.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            } else if (adError.getErrorCode() == AdError.INTERNAL_ERROR.getErrorCode()) {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_STATE);
-            } else {
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.UNSPECIFIED);
-            }
-        }
-
-        @Override
-        public void onAdClicked(final Ad ad) {
-            notifyAdClicked();
-        }
-
-        @Override
-        public void onLoggingImpression(final Ad ad) {
-            notifyAdImpressed();
-        }
-
-        // BaseForwardingNativeAd
-        @Override
-        public void prepare(final View view) {
-            registerChildViewsForInteraction(view, mNativeAd);
-        }
-
-        @Override
-        public void clear(final View view) {
-            mNativeAd.unregisterView();
-        }
-
-        @Override
-        public void destroy() {
-            mNativeAd.destroy();
-        }
-
-        /**
-         * Given a particular String key, return the associated Object value from the ad's extras map.
-         * See {@link StaticNativeAd#getExtras()} for more information.
-         */
-        final public Object getExtra(final String key) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "getExtra key is not allowed to be null")) {
-                return null;
-            }
-            return mExtras.get(key);
-        }
-
-        /**
-         * Returns a copy of the extras map, reflecting additional ad content not reflected in any
-         * of the above hardcoded setters. This is particularly useful for passing down custom fields
-         * with MoPub's direct-sold native ads or from mediated networks that pass back additional
-         * fields.
-         */
-        final public Map<String, Object> getExtras() {
-            return new HashMap<String, Object>(mExtras);
-        }
-
-        final public void addExtra(final String key, final Object value) {
-            if (!Preconditions.NoThrow.checkNotNull(key, "addExtra key is not allowed to be null")) {
-                return;
-            }
-            mExtras.put(key, value);
-        }
-
-        /**
-         * Attaches the native ad to the MediaView, if it exists.
-         *
-         * @param mediaView The View that holds the main media.
-         */
-        public void updateMediaView(final MediaView mediaView) {
-            if (mediaView != null) {
-                mediaView.setNativeAd(mNativeAd);
-            }
-        }
-
-        private void setStarRating(final Double starRating) {
-            if (starRating == null) {
-                mStarRating = null;
-            } else if (starRating >= MIN_STAR_RATING && starRating <= MAX_STAR_RATING) {
-                mStarRating = starRating;
-            } else {
-                MoPubLog.d("Ignoring attempt to set invalid star rating (" + starRating + "). Must be "
-                        + "between " + MIN_STAR_RATING + " and " + MAX_STAR_RATING + ".");
-            }
-        }
-
-        private Double getDoubleRating(final Rating rating) {
-            if (rating == null) {
-                return null;
-            }
-
-            return MAX_STAR_RATING * rating.getValue() / rating.getScale();
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java b/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
deleted file mode 100644
index 3e24799b..00000000
--- a/extras/src/com/mopub/nativeads/FlurryBaseNativeAd.java
+++ /dev/null
@@ -1,37 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * Certified with Flurry 8.1.0
- */
-public interface FlurryBaseNativeAd {
-
-    void fetchAd();
-    @NonNull List<String> getImageUrls();
-    boolean isAppInstallAd();
-    void precacheImages();
-
-    @Nullable String getTitle();
-    @Nullable String getText();
-    @Nullable String getCallToAction();
-    @Nullable String getMainImageUrl();
-    @Nullable String getIconImageUrl();
-    @Nullable Double getStarRating();
-    @Nullable Map<String, Object> getExtras();
-
-
-    void setTitle(@Nullable final String title);
-    void setText(@Nullable final String text);
-    void setCallToAction(@Nullable final String callToAction);
-    void setMainImageUrl(@Nullable final String mainImageUrl);
-    void setIconImageUrl(@Nullable final String iconImageUrl);
-    void setStarRating(@Nullable final Double starRating);
-    void addExtra(@NonNull final String key, @Nullable final Object value);
-
-    void onNativeAdLoaded();
-}
diff --git a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java b/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
deleted file mode 100644
index 1fd7d61f..00000000
--- a/extras/src/com/mopub/nativeads/FlurryCustomEventNative.java
+++ /dev/null
@@ -1,636 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-import android.view.ViewGroup;
-
-import com.flurry.android.FlurryAgentListener;
-import com.flurry.android.ads.FlurryAdErrorType;
-import com.flurry.android.ads.FlurryAdNative;
-import com.flurry.android.ads.FlurryAdNativeAsset;
-import com.flurry.android.ads.FlurryAdNativeListener;
-import com.flurry.android.ads.FlurryAdTargeting;
-import com.mopub.mobileads.FlurryAgentWrapper;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-/**
- * Certified with Flurry 8.1.0
- */
-public final class FlurryCustomEventNative extends CustomEventNative {
-
-    /**
-     * Extra image asset for the star-rating of app-install ads.
-     */
-    public static final String EXTRA_STAR_RATING_IMG = "flurry_starratingimage";
-    /**
-     * Extra text asset specifying the category for app-install ads.
-     */
-    public static final String EXTRA_APP_CATEGORY = "flurry_appcategorytext";
-    /**
-     * Extra image asset for the Flurry native ad branding logo.
-     */
-    public static final String EXTRA_SEC_BRANDING_LOGO = "flurry_brandingimage";
-    /**
-     * Key for enabling Flurry debug logging. After manually creating a {@link MoPubNative} object,
-     * pass in <code>true</code> as a value for this key in the map passed to
-     * {@link MoPubNative#setLocalExtras(Map)}.
-     *
-     * E.g.
-     *
-     * <blockquote><pre>
-     * {@code
-     * Map<String, Object> adapterExtras = new TreeMap<String, Object>();
-     * adapterExtras.put(FlurryCustomEventNative.LOCAL_EXTRA_TEST_MODE, true);
-     * mMoPubNative.setLocalExtras(adapterExtras);
-     * }
-     * </pre></blockquote>
-     *
-     * Debug logging is disabled on the Flurry SDK by default.
-     */
-    public static final String LOCAL_EXTRA_TEST_MODE = "enableTestMode";
-    private static final String LOG_TAG = FlurryCustomEventNative.class.getSimpleName();
-    private static final String ASSET_SEC_HQ_IMAGE = "secHqImage";
-    private static final String ASSET_SEC_IMAGE = "secImage";
-    private static final String ASSET_SEC_HQ_RATING_IMG = "secHqRatingImg";
-    private static final String ASSET_SEC_HQ_BRANDING_LOGO = "secHqBrandingLogo";
-    private static final String ASSET_SEC_RATING_IMG = "secRatingImg";
-    private static final String ASSET_APP_RATING = "appRating";
-    private static final String ASSET_APP_CATEGORY = "appCategory";
-    private static final String ASSET_HEADLINE = "headline";
-    private static final String ASSET_SUMMARY = "summary";
-    private static final String ASSET_CALL_TO_ACTION = "callToAction";
-    private static final String ASSET_VIDEO = "videoUrl";
-    private static final double MOPUB_STAR_RATING_SCALE = StaticNativeAd.MAX_STAR_RATING;
-
-    private FlurryAgentListener mFlurryAgentListener;
-
-    /* Static reference of the ads to ensure they don't get garbage collected */
-    private final static List<FlurryAdNative> sFlurryNativeAds = new ArrayList<>();
-
-    @Override
-    protected void loadNativeAd(@NonNull final Context context,
-            @NonNull final CustomEventNativeListener customEventNativeListener,
-            @NonNull final Map<String, Object> localExtras,
-            @NonNull final Map<String, String> serverExtras) {
-
-        final String flurryApiKey;
-        final String flurryAdSpace;
-
-        //Get the FLURRY_APIKEY and FLURRY_ADSPACE from the server.
-        if (validateExtras(serverExtras)) {
-            flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-            flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-
-            if (FlurryAgentWrapper.getInstance().isSessionActive() || mFlurryAgentListener != null) {
-                fetchFlurryAd(context, flurryAdSpace, localExtras, customEventNativeListener);
-            } else {
-                mFlurryAgentListener = new FlurryAgentListener() {
-                    @Override
-                    public void onSessionStarted() {
-                        fetchFlurryAd(context, flurryAdSpace, localExtras,
-                                customEventNativeListener);
-                    }
-                };
-
-                FlurryAgentWrapper.getInstance().startSession(context, flurryApiKey,
-                        mFlurryAgentListener);
-            }
-        } else {
-            customEventNativeListener.onNativeAdFailed(
-                    NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            Log.i(LOG_TAG, "Failed Native AdFetch: Missing required server extras" +
-                    " [FLURRY_APIKEY and/or FLURRY_ADSPACE].");
-        }
-    }
-
-    private static synchronized void mapNativeAd(@NonNull final FlurryBaseNativeAd mopubSupportedAd,
-            @NonNull final FlurryAdNative flurryAdNative) {
-        FlurryAdNativeAsset coverImageAsset = flurryAdNative.getAsset(ASSET_SEC_HQ_IMAGE);
-        FlurryAdNativeAsset iconImageAsset = flurryAdNative.getAsset(ASSET_SEC_IMAGE);
-
-        if (coverImageAsset != null && !TextUtils.isEmpty(coverImageAsset.getValue())) {
-            mopubSupportedAd.setMainImageUrl(coverImageAsset.getValue());
-        }
-        if (iconImageAsset != null && !TextUtils.isEmpty(iconImageAsset.getValue())) {
-            mopubSupportedAd.setIconImageUrl(iconImageAsset.getValue());
-        }
-
-        mopubSupportedAd.setTitle(flurryAdNative.getAsset(ASSET_HEADLINE).getValue());
-        mopubSupportedAd.setText(flurryAdNative.getAsset(ASSET_SUMMARY).getValue());
-        mopubSupportedAd.addExtra(EXTRA_SEC_BRANDING_LOGO,
-                flurryAdNative.getAsset(ASSET_SEC_HQ_BRANDING_LOGO).getValue());
-
-        if (mopubSupportedAd.isAppInstallAd()) {
-            // App rating image URL may be null
-            FlurryAdNativeAsset ratingHqImageAsset = flurryAdNative
-                    .getAsset(ASSET_SEC_HQ_RATING_IMG);
-            if (ratingHqImageAsset != null && !TextUtils.isEmpty(ratingHqImageAsset.getValue())) {
-                mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingHqImageAsset.getValue());
-            } else {
-                FlurryAdNativeAsset ratingImageAsset = flurryAdNative
-                        .getAsset(ASSET_SEC_RATING_IMG);
-                if (ratingImageAsset != null && !TextUtils.isEmpty(ratingImageAsset.getValue())) {
-                    mopubSupportedAd.addExtra(EXTRA_STAR_RATING_IMG, ratingImageAsset.getValue());
-                }
-            }
-
-            FlurryAdNativeAsset appCategoryAsset = flurryAdNative.getAsset(ASSET_APP_CATEGORY);
-            if (appCategoryAsset != null) {
-                mopubSupportedAd.addExtra(EXTRA_APP_CATEGORY, appCategoryAsset.getValue());
-            }
-            FlurryAdNativeAsset appRatingAsset = flurryAdNative.getAsset(ASSET_APP_RATING);
-            if (appRatingAsset != null) {
-                mopubSupportedAd.setStarRating(getStarRatingValue(appRatingAsset.getValue()));
-            }
-        }
-
-        FlurryAdNativeAsset ctaAsset = flurryAdNative.getAsset(ASSET_CALL_TO_ACTION);
-        if (ctaAsset != null) {
-            mopubSupportedAd.setCallToAction(ctaAsset.getValue());
-        }
-
-        if (mopubSupportedAd.getImageUrls().isEmpty()) {
-            Log.d(LOG_TAG, "preCacheImages: No images to cache for Flurry Native Ad: " +
-                    flurryAdNative.toString());
-            mopubSupportedAd.onNativeAdLoaded();
-        } else {
-            mopubSupportedAd.precacheImages();
-        }
-    }
-
-    @Nullable
-    private static Double getStarRatingValue(@Nullable final String appRatingString) {
-        // App rating String should be of the form X/Y. E.g. 80/100
-        Double rating = null;
-        if (appRatingString != null) {
-            String[] ratingParts = appRatingString.split("/");
-            if (ratingParts.length == 2) {
-                try {
-                    float numer = Integer.valueOf(ratingParts[0]);
-                    float denom = Integer.valueOf(ratingParts[1]);
-                    rating = (numer / denom) * MOPUB_STAR_RATING_SCALE;
-                } catch (NumberFormatException e) { /*Ignore and return null*/ }
-            }
-        }
-        return rating;
-    }
-
-    private boolean validateExtras(final Map<String, String> serverExtras) {
-        final String flurryApiKey = serverExtras.get(FlurryAgentWrapper.PARAM_API_KEY);
-        final String flurryAdSpace = serverExtras.get(FlurryAgentWrapper.PARAM_AD_SPACE_NAME);
-        Log.i(LOG_TAG, "ServerInfo fetched from Mopub " + FlurryAgentWrapper.PARAM_API_KEY + " : "
-                + flurryApiKey + " and " + FlurryAgentWrapper.PARAM_AD_SPACE_NAME + " :" +
-                flurryAdSpace);
-        return (!TextUtils.isEmpty(flurryApiKey) && !TextUtils.isEmpty(flurryAdSpace));
-    }
-
-    private void fetchFlurryAd(@NonNull Context context, String flurryAdSpace,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull CustomEventNativeListener customEventNativeListener) {
-        final FlurryAdNative flurryAdNative = new FlurryAdNative(context, flurryAdSpace);
-
-        if (localExtras.containsKey(LOCAL_EXTRA_TEST_MODE) &&
-                localExtras.get(LOCAL_EXTRA_TEST_MODE) instanceof Boolean) {
-            final FlurryAdTargeting targeting = new FlurryAdTargeting();
-            targeting.setEnableTestAds((Boolean) localExtras.get(LOCAL_EXTRA_TEST_MODE));
-        }
-
-        final FlurryBaseNativeAd flurryNativeAd;
-        if (shouldAllowVideoNativeAds()) {
-            flurryNativeAd = new FlurryVideoEnabledNativeAd(context, flurryAdNative,
-                    customEventNativeListener);
-        } else {
-            flurryNativeAd = new FlurryStaticNativeAd(context, flurryAdNative,
-                    customEventNativeListener);
-        }
-
-        // Add to requested ad list
-        sFlurryNativeAds.add(flurryAdNative);
-
-        flurryNativeAd.fetchAd();
-    }
-
-    private boolean shouldAllowVideoNativeAds() {
-        try {
-            Class.forName("com.mopub.nativeads.FlurryNativeAdRenderer");
-        } catch (ClassNotFoundException e) {
-            return false;
-        }
-
-        return true;
-    }
-
-    /**
-     * Class that supports Flurry static native ads with the help of the
-     * {@link MoPubStaticNativeAdRenderer}.
-     *
-     * @see FlurryVideoEnabledNativeAd
-     */
-    private static class FlurryStaticNativeAd extends StaticNativeAd implements FlurryBaseNativeAd {
-
-        @NonNull private final Context mContext;
-        @NonNull private final CustomEventNativeListener mCustomEventNativeListener;
-        @NonNull private final FlurryAdNative mFlurryAdNative;
-        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
-            @Override
-            public void onClicked(final FlurryAdNative flurryAdNative) {
-                super.onClicked(flurryAdNative);
-                notifyAdClicked();
-            }
-
-            @Override
-            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
-                super.onImpressionLogged(flurryAdNative);
-                notifyAdImpressed();
-            }
-
-            @Override
-            public void onError(final FlurryAdNative adNative,
-                    final FlurryAdErrorType adErrorType,
-                    final int errorCode) {
-                super.onError(adNative, adErrorType, errorCode);
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            }
-        };
-
-        FlurryStaticNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
-                @NonNull CustomEventNativeListener customEventNativeListener) {
-            mContext = context;
-            mFlurryAdNative = adNative;
-            mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        // region StaticNativeAd
-
-        @Override
-        public void prepare(@NonNull final View view) {
-            mFlurryAdNative.setTrackingView(view);
-            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
-        }
-
-        @Override
-        public void clear(@NonNull final View view) {
-            mFlurryAdNative.removeTrackingView();
-            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
-        }
-
-        @Override
-        public void destroy() {
-            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
-            mFlurryAdNative.destroy();
-
-            FlurryAgentWrapper.getInstance().endSession(mContext);
-        }
-
-        //endregion
-
-        // region FlurryBaseNativeAd
-
-        @Override
-        public synchronized void fetchAd() {
-            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
-            mFlurryAdNative.setListener(mFlurryNativelistener);
-            mFlurryAdNative.fetchAd();
-        }
-
-        @NonNull
-        public List<String> getImageUrls() {
-            final List<String> imageUrls = new ArrayList<>(2);
-            final String mainImageUrl = getMainImageUrl();
-
-            if (mainImageUrl != null) {
-                imageUrls.add(getMainImageUrl());
-                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
-            }
-
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(this.getIconImageUrl());
-                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
-            }
-            return imageUrls;
-        }
-
-        public boolean isAppInstallAd() {
-            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
-                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
-                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
-        }
-
-        @Override
-        public void onNativeAdLoaded() {
-            mCustomEventNativeListener.onNativeAdLoaded(this);
-        }
-
-        @Override
-        public void precacheImages() {
-            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
-                    new NativeImageHelper.ImageListener() {
-                        @Override
-                        public void onImagesCached() {
-                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
-                            mCustomEventNativeListener.onNativeAdLoaded(FlurryStaticNativeAd.this);
-                        }
-
-                        @Override
-                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
-                                    + errorCode.toString() + "]");
-                        }
-                    });
-        }
-
-        //endregion
-    }
-
-    /**
-     * Class that supports both Flurry static and video native ads with the help of
-     * {@link FlurryNativeAdRenderer}. This class does not need to be included if you
-     * are fetching only static ads. Use {@link FlurryStaticNativeAd} instead.
-     */
-    static class FlurryVideoEnabledNativeAd extends BaseNativeAd implements FlurryBaseNativeAd {
-        private @NonNull final Context mContext;
-        private @NonNull final CustomEventNativeListener mCustomEventNativeListener;
-        private @NonNull final FlurryAdNative mFlurryAdNative;
-        private final FlurryAdNativeListener mFlurryNativelistener = new FlurryBaseAdListener(this) {
-            @Override
-            public void onClicked(final FlurryAdNative flurryAdNative) {
-                super.onClicked(flurryAdNative);
-                notifyAdClicked();
-            }
-
-            @Override
-            public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
-                super.onImpressionLogged(flurryAdNative);
-                notifyAdImpressed();
-            }
-
-            @Override
-            public void onError(final FlurryAdNative adNative,
-                    final FlurryAdErrorType adErrorType,
-                    final int errorCode) {
-                super.onError(adNative, adErrorType, errorCode);
-                mCustomEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_NO_FILL);
-            }
-        };
-
-        // Basic fields
-        @Nullable private String mTitle;
-        @Nullable private String mText;
-        @Nullable private String mCallToAction;
-        @Nullable private String mMainImageUrl;
-        @Nullable private String mIconImageUrl;
-        @Nullable private Double mStarRating;
-
-        // Extras
-        @NonNull private final Map<String, Object> mExtras;
-
-
-        FlurryVideoEnabledNativeAd(@NonNull Context context, @NonNull FlurryAdNative adNative,
-                @NonNull CustomEventNativeListener customEventNativeListener) {
-            mContext = context;
-            mFlurryAdNative = adNative;
-            mCustomEventNativeListener = customEventNativeListener;
-            mExtras = new HashMap<>();
-        }
-
-        // region StaticNativeAd
-
-        @Override
-        public void prepare(@NonNull View view) {
-            mFlurryAdNative.setTrackingView(view);
-            Log.d(LOG_TAG, "prepare(" + mFlurryAdNative.toString() + " " + view.toString() + ")");
-        }
-
-        @Override
-        public void clear(@NonNull View view) {
-            mFlurryAdNative.removeTrackingView();
-            Log.d(LOG_TAG, "clear(" + mFlurryAdNative.toString() + ")");
-        }
-
-        @Override
-        public void destroy() {
-            Log.d(LOG_TAG, "destroy(" + mFlurryAdNative.toString() + ") started.");
-            mFlurryAdNative.destroy();
-
-            FlurryAgentWrapper.getInstance().endSession(mContext);
-        }
-
-        // endregion
-
-        // region FlurryBaseNativeAd
-
-        @Override
-        public synchronized void fetchAd() {
-            Log.d(LOG_TAG, "Fetching Flurry Native Ad now.");
-            mFlurryAdNative.setListener(mFlurryNativelistener);
-            mFlurryAdNative.fetchAd();
-        }
-
-        @Override
-        public boolean isAppInstallAd() {
-            return mFlurryAdNative.getAsset(ASSET_SEC_RATING_IMG) != null ||
-                    mFlurryAdNative.getAsset(ASSET_SEC_HQ_RATING_IMG) != null ||
-                    mFlurryAdNative.getAsset(ASSET_APP_CATEGORY) != null;
-        }
-
-        @Override
-        public void precacheImages() {
-            NativeImageHelper.preCacheImages(mContext, getImageUrls(),
-                    new NativeImageHelper.ImageListener() {
-                        @Override
-                        public void onImagesCached() {
-                            Log.d(LOG_TAG, "preCacheImages: Ad image cached.");
-                            mCustomEventNativeListener.onNativeAdLoaded(
-                                    FlurryVideoEnabledNativeAd.this);
-                        }
-
-                        @Override
-                        public void onImagesFailedToCache(final NativeErrorCode errorCode) {
-                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                            Log.d(LOG_TAG, "preCacheImages: Unable to cache Ad image. Error["
-                                    + errorCode.toString() + "]");
-                        }
-                    });
-        }
-
-        @NonNull
-        @Override
-        public List<String> getImageUrls() {
-            final List<String> imageUrls = new ArrayList<>(2);
-            final String mainImageUrl = getMainImageUrl();
-
-            if (mainImageUrl != null) {
-                imageUrls.add(getMainImageUrl());
-                Log.d(LOG_TAG, "Flurry Native Ad main image found.");
-            }
-
-            final String iconUrl = getIconImageUrl();
-            if (iconUrl != null) {
-                imageUrls.add(this.getIconImageUrl());
-                Log.d(LOG_TAG, "Flurry Native Ad icon image found.");
-            }
-            return imageUrls;
-        }
-
-        @Nullable
-        @Override
-        public String getTitle() {
-            return mTitle;
-        }
-
-        @Nullable
-        @Override
-        public String getText() {
-            return mText;
-        }
-
-        @Nullable
-        @Override
-        public String getCallToAction() {
-            return mCallToAction;
-        }
-
-        @Nullable
-        @Override
-        public String getMainImageUrl() {
-            return mMainImageUrl;
-        }
-
-        @Nullable
-        @Override
-        public String getIconImageUrl() {
-            return mIconImageUrl;
-        }
-
-        @Nullable
-        @Override
-        public Double getStarRating() {
-            return mStarRating;
-        }
-
-        @NonNull
-        @Override
-        public Map<String, Object> getExtras() {
-            return mExtras;
-        }
-
-        @Override
-        public void setTitle(@Nullable String title) {
-            mTitle = title;
-        }
-
-        @Override
-        public void setText(@Nullable String text) {
-            mText = text;
-        }
-
-        @Override
-        public void setCallToAction(@Nullable String callToAction) {
-            mCallToAction = callToAction;
-        }
-
-        @Override
-        public void setMainImageUrl(@Nullable String mainImageUrl) {
-            mMainImageUrl = mainImageUrl;
-        }
-
-        @Override
-        public void setIconImageUrl(@Nullable String iconImageUrl) {
-            mIconImageUrl = iconImageUrl;
-        }
-
-        @Override
-        public void setStarRating(@Nullable Double starRating) {
-            mStarRating = starRating;
-        }
-
-        @Override
-        public void addExtra(@NonNull String key, @Nullable Object value) {
-            mExtras.put(key, value);
-        }
-
-        @Override
-        public void onNativeAdLoaded() {
-            mCustomEventNativeListener.onNativeAdLoaded(this);
-        }
-
-        // endregion
-
-        boolean isVideoAd() {
-            return mFlurryAdNative.isVideoAd();
-        }
-
-        void loadVideoIntoView(@NonNull ViewGroup videoView) {
-            mFlurryAdNative.getAsset(ASSET_VIDEO).loadAssetIntoView(videoView);
-        }
-    }
-
-    static abstract class FlurryBaseAdListener implements FlurryAdNativeListener {
-        private final @NonNull FlurryBaseNativeAd mBaseNativeAd;
-
-        FlurryBaseAdListener(@NonNull FlurryBaseNativeAd baseNativeAd) {
-            mBaseNativeAd = baseNativeAd;
-        }
-
-        @Override
-        public void onFetched(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onFetched: Flurry native ad fetched successfully!");
-            mapNativeAd(mBaseNativeAd, flurryAdNative);
-            sFlurryNativeAds.remove(flurryAdNative);
-        }
-
-        @Override
-        public void onShowFullscreen(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onShowFullscreen: Flurry native ad in full-screen");
-        }
-
-        @Override
-        public void onCloseFullscreen(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onCloseFullscreen: Flurry native ad full-screen closed");
-        }
-
-        @Override
-        public void onAppExit(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onAppExit: Flurry native ad exited app");
-        }
-
-        @Override
-        public void onClicked(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onClicked: Flurry native ad clicked");
-        }
-
-        @Override
-        public void onImpressionLogged(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onImpressionLogged: Flurry native ad impression logged");
-        }
-
-        @Override
-        public void onExpanded(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onExpanded: Flurry native ad expanded");
-        }
-
-        @Override
-        public void onCollapsed(final FlurryAdNative flurryAdNative) {
-            Log.d(LOG_TAG, "onCollapsed: Flurry native ad collapsed");
-        }
-
-        @Override
-        public void onError(final FlurryAdNative flurryAdNative,
-                final FlurryAdErrorType adErrorType,
-                final int errorCode) {
-            Log.d(LOG_TAG, String.format("onError: Flurry native ad not available. " +
-                    "Error type: %s. Error code: %s", adErrorType.toString(), errorCode));
-            sFlurryNativeAds.remove(flurryAdNative);
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java b/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
deleted file mode 100644
index 4f1e362d..00000000
--- a/extras/src/com/mopub/nativeads/FlurryNativeAdRenderer.java
+++ /dev/null
@@ -1,103 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import java.util.WeakHashMap;
-
-/**
- * Include this class if you want to use Flurry native video ads. This will use the FrameLayout
- * specified in the FlurryNativeViewHolder.videoView to show a video. If a video is not available,
- * this will still use the mainImageView.
- *
- *
- * Certified with Flurry 8.1.0
- */
-public class FlurryNativeAdRenderer implements
-        MoPubAdRenderer<FlurryCustomEventNative.FlurryVideoEnabledNativeAd> {
-    @NonNull private final FlurryViewBinder mViewBinder;
-    @NonNull private final WeakHashMap<View, FlurryNativeViewHolder> mViewHolderMap;
-
-    public FlurryNativeAdRenderer(@NonNull final FlurryViewBinder viewBinder) {
-        mViewBinder = viewBinder;
-        mViewHolderMap = new WeakHashMap<>();
-    }
-
-    @NonNull
-    @Override
-    public View createAdView(@NonNull final Context context, @Nullable final ViewGroup parent) {
-        return LayoutInflater.from(context).inflate(
-                mViewBinder.staticViewBinder.layoutId, parent, false);
-    }
-
-    @Override
-    public void renderAdView(@NonNull View view,
-            @NonNull FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
-        FlurryNativeViewHolder flurryNativeViewHolder = mViewHolderMap.get(view);
-        if (flurryNativeViewHolder == null) {
-            flurryNativeViewHolder = FlurryNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, flurryNativeViewHolder);
-        }
-
-        update(flurryNativeViewHolder, ad);
-        NativeRendererHelper.updateExtras(flurryNativeViewHolder.staticNativeViewHolder.mainView,
-                mViewBinder.staticViewBinder.extras, ad.getExtras());
-        setViewVisibility(flurryNativeViewHolder, View.VISIBLE);
-    }
-
-    @Override
-    public boolean supports(@NonNull BaseNativeAd nativeAd) {
-        return nativeAd instanceof FlurryCustomEventNative.FlurryVideoEnabledNativeAd;
-    }
-
-    private void update(final FlurryNativeViewHolder viewHolder,
-            final FlurryCustomEventNative.FlurryVideoEnabledNativeAd ad) {
-        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.titleView,
-                ad.getTitle());
-        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.textView, ad.getText());
-        NativeRendererHelper.addTextView(viewHolder.staticNativeViewHolder.callToActionView,
-                ad.getCallToAction());
-        NativeImageHelper.loadImageView(ad.getIconImageUrl(),
-                viewHolder.staticNativeViewHolder.iconImageView);
-
-        if (ad.isVideoAd()) {
-            ad.loadVideoIntoView(viewHolder.videoView);
-        } else {
-            NativeImageHelper.loadImageView(ad.getMainImageUrl(),
-                    viewHolder.staticNativeViewHolder.mainImageView);
-        }
-    }
-
-    private void setViewVisibility(@NonNull final FlurryNativeViewHolder viewHolder,
-            final int visibility) {
-        if (viewHolder.staticNativeViewHolder.mainView != null) {
-            viewHolder.staticNativeViewHolder.mainView.setVisibility(visibility);
-        }
-    }
-
-    private static class FlurryNativeViewHolder {
-        private final StaticNativeViewHolder staticNativeViewHolder;
-        private final ViewGroup videoView;
-
-        private FlurryNativeViewHolder(final StaticNativeViewHolder staticNativeViewHolder,
-                final ViewGroup videoView) {
-            this.staticNativeViewHolder = staticNativeViewHolder;
-            this.videoView = videoView;
-        }
-
-        static FlurryNativeViewHolder fromViewBinder(
-                final View view,
-                final FlurryViewBinder viewBinder) {
-            StaticNativeViewHolder staticNativeViewHolder = StaticNativeViewHolder
-                    .fromViewBinder(view, viewBinder.staticViewBinder);
-
-            ViewGroup videoView = (ViewGroup) view.findViewById(viewBinder.videoViewId);
-
-            return new FlurryNativeViewHolder(staticNativeViewHolder, videoView);
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/FlurryViewBinder.java b/extras/src/com/mopub/nativeads/FlurryViewBinder.java
deleted file mode 100644
index b6885793..00000000
--- a/extras/src/com/mopub/nativeads/FlurryViewBinder.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.mopub.nativeads;
-
-import android.support.annotation.NonNull;
-
-/**
- * Certified with Flurry 8.1.0
- */
-public class FlurryViewBinder {
-    ViewBinder staticViewBinder;
-    int videoViewId;
-
-    private FlurryViewBinder(@NonNull Builder builder) {
-        this.staticViewBinder = builder.staticViewBinder;
-        this.videoViewId = builder.videoViewId;
-    }
-
-    public final static class Builder {
-        ViewBinder staticViewBinder;
-        int videoViewId;
-
-        public Builder(final ViewBinder staticViewBinder) {
-            this.staticViewBinder = staticViewBinder;
-        }
-
-        @NonNull
-        public final Builder videoViewId(final int videoViewId) {
-            this.videoViewId = videoViewId;
-            return this;
-        }
-
-        @NonNull
-        public final FlurryViewBinder build() {
-            return new FlurryViewBinder(this);
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java b/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
deleted file mode 100644
index 3887c33d..00000000
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesAdRenderer.java
+++ /dev/null
@@ -1,408 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.IdRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Log;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.FrameLayout;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import com.google.android.gms.ads.formats.AdChoicesView;
-import com.google.android.gms.ads.formats.NativeAdView;
-import com.google.android.gms.ads.formats.NativeAppInstallAdView;
-import com.google.android.gms.ads.formats.NativeContentAdView;
-import com.mopub.common.logging.MoPubLog;
-import com.mopub.nativeads.GooglePlayServicesNative.GooglePlayServicesNativeAd;
-
-import java.util.Locale;
-import java.util.Map;
-import java.util.WeakHashMap;
-
-/**
- * The {@link GooglePlayServicesAdRenderer} class is used to render
- * GooglePlayServicesStaticNativeAds.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesAdRenderer implements MoPubAdRenderer<GooglePlayServicesNativeAd> {
-
-    /**
-     * Key to set and get star rating text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_STAR_RATING = "key_star_rating";
-
-    /**
-     * Key to set and get advertiser text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_ADVERTISER = "key_advertiser";
-
-    /**
-     * Key to set and get store text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_STORE = "key_store";
-
-    /**
-     * Key to set and get price text view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_PRICE = "key_price";
-
-    /**
-     * Key to set and get the AdChoices icon view as an extra in the view binder.
-     */
-    public static final String VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER = "ad_choices_container";
-
-    /**
-     * ID for the frame layout that wraps the Google ad view.
-     */
-    @IdRes
-    private static final int ID_WRAPPING_FRAME = 1001;
-
-    /**
-     * ID for the Google native ad view.
-     */
-    @IdRes
-    private static final int ID_GOOGLE_NATIVE_VIEW = 1002;
-
-    /**
-     * A view binder containing the layout resource and views to be rendered by the renderer.
-     */
-    private final ViewBinder mViewBinder;
-
-    /**
-     * A weak hash map used to keep track of view holder so that the views can be properly recycled.
-     */
-    private final WeakHashMap<View, GoogleStaticNativeViewHolder> mViewHolderMap;
-
-    public GooglePlayServicesAdRenderer(ViewBinder viewBinder) {
-        this.mViewBinder = viewBinder;
-        this.mViewHolderMap = new WeakHashMap<>();
-    }
-
-    @NonNull
-    @Override
-    public View createAdView(@NonNull Context context, @Nullable ViewGroup parent) {
-        View view = LayoutInflater.from(context).inflate(mViewBinder.layoutId, parent, false);
-        // Create a frame layout and add the inflated view as a child. This will allow us to add
-        // the Google native ad view into the view hierarchy at render time.
-        FrameLayout wrappingView = new FrameLayout(context);
-        wrappingView.setId(ID_WRAPPING_FRAME);
-        wrappingView.addView(view);
-        Log.i(GooglePlayServicesNative.TAG, "Ad view created.");
-        return wrappingView;
-    }
-
-    @Override
-    public void renderAdView(@NonNull View view,
-            @NonNull GooglePlayServicesNativeAd nativeAd) {
-        GoogleStaticNativeViewHolder viewHolder = mViewHolderMap.get(view);
-        if (viewHolder == null) {
-            viewHolder = GoogleStaticNativeViewHolder.fromViewBinder(view, mViewBinder);
-            mViewHolderMap.put(view, viewHolder);
-        }
-
-        removeGoogleNativeAdView(view, nativeAd.shouldSwapMargins());
-
-        NativeAdView nativeAdView = null;
-        if (nativeAd.isNativeAppInstallAd()) {
-            nativeAdView = new NativeAppInstallAdView(view.getContext());
-            updateAppInstallAdView(nativeAd, viewHolder, (NativeAppInstallAdView) nativeAdView);
-        } else if (nativeAd.isNativeContentAd()) {
-            nativeAdView = new NativeContentAdView(view.getContext());
-            updateContentAdView(nativeAd, viewHolder, (NativeContentAdView) nativeAdView);
-        }
-
-        if (nativeAdView != null) {
-            insertGoogleNativeAdView(nativeAdView, view, nativeAd.shouldSwapMargins());
-        } else {
-            Log.w(GooglePlayServicesNative.TAG,
-                    "Couldn't add Google native ad view. NativeAdView is null.");
-        }
-    }
-
-    /**
-     * This method will add the given Google native ad view into the view hierarchy of the given
-     * MoPub native ad view.
-     *
-     * @param googleNativeAdView Google's native ad view to be added as a parent to the MoPub's
-     *                           view.
-     * @param moPubNativeAdView  MoPub's native ad view created by this renderer.
-     * @param swapMargins        {@code true} if the margins need to be swapped, {@code false}
-     *                           otherwise.
-     */
-    private static void insertGoogleNativeAdView(NativeAdView googleNativeAdView,
-            View moPubNativeAdView,
-            boolean swapMargins) {
-        if (moPubNativeAdView instanceof FrameLayout
-                && moPubNativeAdView.getId() == ID_WRAPPING_FRAME) {
-            googleNativeAdView.setId(ID_GOOGLE_NATIVE_VIEW);
-            FrameLayout outerFrame = (FrameLayout) moPubNativeAdView;
-            View actualView = outerFrame.getChildAt(0);
-
-            if (swapMargins) {
-                // Google native ad view renders the AdChoices icon in one of the four corners of
-                // its view. If a margin is specified on the actual ad view, the AdChoices view
-                // might be rendered outside the actual ad view. Moving the margins from the
-                // actual ad view to Google native ad view will make sure that the AdChoices icon
-                // is being rendered within the bounds of the actual ad view.
-                FrameLayout.LayoutParams googleNativeAdViewParams = new FrameLayout.LayoutParams(
-                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT);
-                FrameLayout.LayoutParams actualViewParams =
-                        (FrameLayout.LayoutParams) actualView.getLayoutParams();
-                googleNativeAdViewParams.setMargins(actualViewParams.leftMargin,
-                        actualViewParams.topMargin,
-                        actualViewParams.rightMargin,
-                        actualViewParams.bottomMargin);
-                googleNativeAdView.setLayoutParams(googleNativeAdViewParams);
-                actualViewParams.setMargins(0, 0, 0, 0);
-            } else {
-                googleNativeAdView.setLayoutParams(new ViewGroup.LayoutParams(
-                        ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
-            }
-
-            outerFrame.removeView(actualView);
-            googleNativeAdView.addView(actualView);
-            outerFrame.addView(googleNativeAdView);
-        } else {
-            Log.w(GooglePlayServicesNative.TAG,
-                    "Couldn't add Google native ad view. Wrapping view not found.");
-        }
-    }
-
-    /**
-     * This method will remove the Google native ad view from the view hierarchy if one is present.
-     *
-     * @param view        the view from which to remove the Google native ad view.
-     * @param swapMargins {@code true} if the margins need to be swapped before removing the
-     *                    Google native ad view, {@code false} otherwise.
-     */
-    protected static void removeGoogleNativeAdView(@NonNull View view, boolean swapMargins) {
-        if (view instanceof FrameLayout && view.getId() == ID_WRAPPING_FRAME) {
-            View adView = view.findViewById(ID_GOOGLE_NATIVE_VIEW);
-            if (adView != null) {
-                ViewGroup outerView = (ViewGroup) view;
-                int index = outerView.indexOfChild(adView);
-                outerView.removeView(adView);
-                View actualNativeView = ((ViewGroup) adView).getChildAt(0);
-                if (actualNativeView != null) {
-                    if (swapMargins) {
-                        FrameLayout.LayoutParams actualViewParams =
-                                (FrameLayout.LayoutParams) actualNativeView.getLayoutParams();
-                        FrameLayout.LayoutParams googleNativeViewParams =
-                                (FrameLayout.LayoutParams) adView.getLayoutParams();
-                        actualViewParams.setMargins(
-                                googleNativeViewParams.leftMargin,
-                                googleNativeViewParams.topMargin,
-                                googleNativeViewParams.rightMargin,
-                                googleNativeViewParams.bottomMargin);
-                    }
-                    ((ViewGroup) adView).removeView(actualNativeView);
-                    outerView.addView(actualNativeView, index);
-                }
-
-                if (adView instanceof NativeAdView) {
-                    ((NativeAdView) adView).destroy();
-                }
-            }
-        }
-    }
-
-    /**
-     * This method will render the given native ad view using the native ad and set the views to
-     * Google's native content ad view.
-     *
-     * @param staticNativeAd         a static native ad object containing the required assets to
-     *                               set to the native ad view.
-     * @param staticNativeViewHolder a static native view holder object containing the mapped
-     *                               views from the view binder.
-     * @param contentAdView          the Google native content ad view in the view hierarchy.
-     */
-    private void updateContentAdView(GooglePlayServicesNativeAd staticNativeAd,
-            GoogleStaticNativeViewHolder staticNativeViewHolder,
-            NativeContentAdView contentAdView) {
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
-        contentAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTextView, staticNativeAd.getText());
-        contentAdView.setBodyView(staticNativeViewHolder.mTextView);
-        NativeRendererHelper.addTextView(staticNativeViewHolder.mCallToActionView,
-                staticNativeAd.getCallToAction());
-        contentAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
-        NativeImageHelper.loadImageView(staticNativeAd.getMainImageUrl(),
-                staticNativeViewHolder.mMainImageView);
-        contentAdView.setImageView(staticNativeViewHolder.mMainImageView);
-        NativeImageHelper.loadImageView(staticNativeAd.getIconImageUrl(),
-                staticNativeViewHolder.mIconImageView);
-        contentAdView.setLogoView(staticNativeViewHolder.mIconImageView);
-        if (staticNativeAd.getAdvertiser() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mAdvertiserTextView, staticNativeAd.getAdvertiser());
-            contentAdView.setAdvertiserView(staticNativeViewHolder.mAdvertiserTextView);
-        }
-
-        // Add the AdChoices icon to the container if one is provided by the publisher.
-        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
-            AdChoicesView adChoicesView = new AdChoicesView(contentAdView.getContext());
-            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
-            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
-            contentAdView.setAdChoicesView(adChoicesView);
-        }
-
-        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
-        // renders the AdChoices icon.
-        NativeRendererHelper.addPrivacyInformationIcon(
-                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
-
-        contentAdView.setNativeAd(staticNativeAd.getContentAd());
-    }
-
-    /**
-     * This method will render the given native ad view using the native ad and set the views to
-     * Google's native app install ad view.
-     *
-     * @param staticNativeAd         a static native ad object containing the required assets to set
-     *                               to the native ad view.
-     * @param staticNativeViewHolder a static native view holder object containing the mapped
-     *                               views from the view binder.
-     * @param appInstallAdView       the Google native app install ad view in the view hierarchy.
-     */
-    private void updateAppInstallAdView(GooglePlayServicesNativeAd staticNativeAd,
-            GoogleStaticNativeViewHolder staticNativeViewHolder,
-            NativeAppInstallAdView appInstallAdView) {
-
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTitleView, staticNativeAd.getTitle());
-        appInstallAdView.setHeadlineView(staticNativeViewHolder.mTitleView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mTextView, staticNativeAd.getText());
-        appInstallAdView.setBodyView(staticNativeViewHolder.mTextView);
-        NativeRendererHelper.addTextView(
-                staticNativeViewHolder.mCallToActionView, staticNativeAd.getCallToAction());
-        appInstallAdView.setCallToActionView(staticNativeViewHolder.mCallToActionView);
-        NativeImageHelper.loadImageView(
-                staticNativeAd.getMainImageUrl(), staticNativeViewHolder.mMainImageView);
-        appInstallAdView.setImageView(staticNativeViewHolder.mMainImageView);
-        NativeImageHelper.loadImageView(
-                staticNativeAd.getIconImageUrl(), staticNativeViewHolder.mIconImageView);
-        appInstallAdView.setIconView(staticNativeViewHolder.mIconImageView);
-        if (staticNativeAd.getStarRating() != null) {
-            NativeRendererHelper.addTextView(staticNativeViewHolder.mStarRatingTextView,
-                    String.format(
-                            Locale.getDefault(), "%.1f/5 Stars", staticNativeAd.getStarRating()));
-            appInstallAdView.setStarRatingView(staticNativeViewHolder.mStarRatingTextView);
-        }
-        if (staticNativeAd.getPrice() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mPriceTextView, staticNativeAd.getPrice());
-            appInstallAdView.setPriceView(staticNativeViewHolder.mPriceTextView);
-        }
-        if (staticNativeAd.getStore() != null) {
-            NativeRendererHelper.addTextView(
-                    staticNativeViewHolder.mStoreTextView, staticNativeAd.getStore());
-            appInstallAdView.setStoreView(staticNativeViewHolder.mStoreTextView);
-        }
-
-        // Set the privacy information icon to null as the Google Mobile Ads SDK automatically
-        // renders the AdChoices icon.
-        NativeRendererHelper.addPrivacyInformationIcon(
-                staticNativeViewHolder.mPrivacyInformationIconImageView, null, null);
-
-        // Add the AdChoices icon to the container if one is provided by the publisher.
-        if (staticNativeViewHolder.mAdChoicesIconContainer != null) {
-            AdChoicesView adChoicesView = new AdChoicesView(appInstallAdView.getContext());
-            staticNativeViewHolder.mAdChoicesIconContainer.removeAllViews();
-            staticNativeViewHolder.mAdChoicesIconContainer.addView(adChoicesView);
-            appInstallAdView.setAdChoicesView(adChoicesView);
-        }
-
-        appInstallAdView.setNativeAd(staticNativeAd.getAppInstallAd());
-    }
-
-    @Override
-    public boolean supports(@NonNull BaseNativeAd nativeAd) {
-        return nativeAd instanceof GooglePlayServicesNativeAd;
-    }
-
-    private static class GoogleStaticNativeViewHolder {
-        @Nullable
-        View mMainView;
-        @Nullable
-        TextView mTitleView;
-        @Nullable
-        TextView mTextView;
-        @Nullable
-        TextView mCallToActionView;
-        @Nullable
-        ImageView mMainImageView;
-        @Nullable
-        ImageView mIconImageView;
-        @Nullable
-        ImageView mPrivacyInformationIconImageView;
-        @Nullable
-        TextView mStarRatingTextView;
-        @Nullable
-        TextView mAdvertiserTextView;
-        @Nullable
-        TextView mStoreTextView;
-        @Nullable
-        TextView mPriceTextView;
-        @Nullable
-        FrameLayout mAdChoicesIconContainer;
-
-        private static final GoogleStaticNativeViewHolder EMPTY_VIEW_HOLDER =
-                new GoogleStaticNativeViewHolder();
-
-        @NonNull
-        public static GoogleStaticNativeViewHolder fromViewBinder(@NonNull View view,
-                @NonNull ViewBinder viewBinder) {
-            final GoogleStaticNativeViewHolder viewHolder = new GoogleStaticNativeViewHolder();
-            viewHolder.mMainView = view;
-            try {
-                viewHolder.mTitleView = (TextView) view.findViewById(viewBinder.titleId);
-                viewHolder.mTextView = (TextView) view.findViewById(viewBinder.textId);
-                viewHolder.mCallToActionView =
-                        (TextView) view.findViewById(viewBinder.callToActionId);
-                viewHolder.mMainImageView =
-                        (ImageView) view.findViewById(viewBinder.mainImageId);
-                viewHolder.mIconImageView =
-                        (ImageView) view.findViewById(viewBinder.iconImageId);
-                viewHolder.mPrivacyInformationIconImageView =
-                        (ImageView) view.findViewById(viewBinder.privacyInformationIconImageId);
-                Map<String, Integer> extraViews = viewBinder.extras;
-                Integer starRatingTextViewId = extraViews.get(VIEW_BINDER_KEY_STAR_RATING);
-                if (starRatingTextViewId != null) {
-                    viewHolder.mStarRatingTextView =
-                            (TextView) view.findViewById(starRatingTextViewId);
-                }
-                Integer advertiserTextViewId = extraViews.get(VIEW_BINDER_KEY_ADVERTISER);
-                if (advertiserTextViewId != null) {
-                    viewHolder.mAdvertiserTextView =
-                            (TextView) view.findViewById(advertiserTextViewId);
-                }
-                Integer storeTextViewId = extraViews.get(VIEW_BINDER_KEY_STORE);
-                if (storeTextViewId != null) {
-                    viewHolder.mStoreTextView = (TextView) view.findViewById(storeTextViewId);
-                }
-                Integer priceTextViewId = extraViews.get(VIEW_BINDER_KEY_PRICE);
-                if (priceTextViewId != null) {
-                    viewHolder.mPriceTextView = (TextView) view.findViewById(priceTextViewId);
-                }
-                Integer adChoicesIconViewId =
-                        extraViews.get(VIEW_BINDER_KEY_AD_CHOICES_ICON_CONTAINER);
-                if (adChoicesIconViewId != null) {
-                    viewHolder.mAdChoicesIconContainer =
-                            (FrameLayout) view.findViewById(adChoicesIconViewId);
-                }
-                return viewHolder;
-            } catch (ClassCastException exception) {
-                MoPubLog.w("Could not cast from id in ViewBinder to expected View type", exception);
-                return EMPTY_VIEW_HOLDER;
-            }
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java b/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
deleted file mode 100644
index 7797c08c..00000000
--- a/extras/src/com/mopub/nativeads/GooglePlayServicesNative.java
+++ /dev/null
@@ -1,615 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.text.TextUtils;
-import android.util.Log;
-import android.view.View;
-
-import com.google.android.gms.ads.AdListener;
-import com.google.android.gms.ads.AdLoader;
-import com.google.android.gms.ads.AdRequest;
-import com.google.android.gms.ads.MobileAds;
-import com.google.android.gms.ads.formats.NativeAdOptions;
-import com.google.android.gms.ads.formats.NativeAppInstallAd;
-import com.google.android.gms.ads.formats.NativeContentAd;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.atomic.AtomicBoolean;
-
-/**
- * The {@link GooglePlayServicesNative} class is used to load native Google mobile ads.
- *
- * Compatible with version 11.4.0 of the Google Play Services SDK.
- */
-public class GooglePlayServicesNative extends CustomEventNative {
-    protected static final String TAG = "MoPubToAdMobNative";
-
-    /**
-     * The current version of the adapter.
-     */
-    private static final String ADAPTER_VERSION = "0.3.1";
-
-    /**
-     * Key to obtain AdMob application ID from the server extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_APPLICATION_ID = "appid";
-
-    /**
-     * Key to obtain AdMob ad unit ID from the extras provided by MoPub.
-     */
-    private static final String KEY_EXTRA_AD_UNIT_ID = "adunit";
-
-    /**
-     * Key to set and obtain the image orientation preference.
-     */
-    public static final String KEY_EXTRA_ORIENTATION_PREFERENCE = "orientation_preference";
-
-    /**
-     * Key to set and obtain the AdChoices icon placement preference.
-     */
-    public static final String KEY_EXTRA_AD_CHOICES_PLACEMENT = "ad_choices_placement";
-
-    /**
-     * Key to set and obtain the experimental swap margins flag.
-     */
-    public static final String KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS = "swap_margins";
-
-    /**
-     * Flag to determine whether or not the adapter has been initialized.
-     */
-    private static AtomicBoolean sIsInitialized = new AtomicBoolean(false);
-
-    @Override
-    protected void loadNativeAd(@NonNull final Context context,
-            @NonNull final CustomEventNativeListener customEventNativeListener,
-            @NonNull Map<String, Object> localExtras,
-            @NonNull Map<String, String> serverExtras) {
-        if (!sIsInitialized.getAndSet(true)) {
-            Log.i(TAG, "Adapter version - " + ADAPTER_VERSION);
-            if (serverExtras.containsKey(KEY_EXTRA_APPLICATION_ID)
-                    && !TextUtils.isEmpty(serverExtras.get(KEY_EXTRA_APPLICATION_ID))) {
-                MobileAds.initialize(context, serverExtras.get(KEY_EXTRA_APPLICATION_ID));
-            } else {
-                MobileAds.initialize(context);
-            }
-        }
-
-        String adUnitId = serverExtras.get(KEY_EXTRA_AD_UNIT_ID);
-        if (TextUtils.isEmpty(adUnitId)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NETWORK_INVALID_REQUEST);
-            return;
-        }
-        GooglePlayServicesNativeAd nativeAd =
-                new GooglePlayServicesNativeAd(customEventNativeListener);
-        nativeAd.loadAd(context, adUnitId, localExtras);
-    }
-
-    /**
-     * The {@link GooglePlayServicesNativeAd} class is used to load and map Google native
-     * ads to MoPub native ads.
-     */
-    static class GooglePlayServicesNativeAd extends BaseNativeAd {
-
-        // Native ad assets.
-        private String mTitle;
-        private String mText;
-        private String mMainImageUrl;
-        private String mIconImageUrl;
-        private String mCallToAction;
-        private Double mStarRating;
-        private String mAdvertiser;
-        private String mStore;
-        private String mPrice;
-
-        /**
-         * Flag to determine whether or not to swap margins from actual ad view to Google native ad
-         * view.
-         */
-        private boolean mSwapMargins;
-
-        /**
-         * A custom event native listener used to forward Google Mobile Ads SDK events to MoPub.
-         */
-        private CustomEventNativeListener mCustomEventNativeListener;
-
-        /**
-         * A Google native ad of type content.
-         */
-        private NativeContentAd mNativeContentAd;
-
-        /**
-         * A Google native ad of type app install.
-         */
-        private NativeAppInstallAd mNativeAppInstallAd;
-
-        public GooglePlayServicesNativeAd(
-                CustomEventNativeListener customEventNativeListener) {
-            this.mCustomEventNativeListener = customEventNativeListener;
-        }
-
-        /**
-         * @return the title string associated with this native ad.
-         */
-        public String getTitle() {
-            return mTitle;
-        }
-
-        /**
-         * @return the text/body string associated with the native ad.
-         */
-        public String getText() {
-            return mText;
-        }
-
-        /**
-         * @return the main image URL associated with the native ad.
-         */
-        public String getMainImageUrl() {
-            return mMainImageUrl;
-        }
-
-        /**
-         * @return the icon image URL associated with the native ad.
-         */
-        public String getIconImageUrl() {
-            return mIconImageUrl;
-        }
-
-        /**
-         * @return the call to action string associated with the native ad.
-         */
-        public String getCallToAction() {
-            return mCallToAction;
-        }
-
-        /**
-         * @return the star rating associated with the native ad.
-         */
-        public Double getStarRating() {
-            return mStarRating;
-        }
-
-        /**
-         * @return the advertiser string associated with the native ad.
-         */
-        public String getAdvertiser() {
-            return mAdvertiser;
-        }
-
-        /**
-         * @return the store string associated with the native ad.
-         */
-        public String getStore() {
-            return mStore;
-        }
-
-        /**
-         * @return the price string associated with the native ad.
-         */
-        public String getPrice() {
-            return mPrice;
-        }
-
-        /**
-         * @param title the title to be set.
-         */
-        public void setTitle(String title) {
-            this.mTitle = title;
-        }
-
-        /**
-         * @param text the text/body to be set.
-         */
-        public void setText(String text) {
-            this.mText = text;
-        }
-
-        /**
-         * @param mainImageUrl the main image URL to be set.
-         */
-        public void setMainImageUrl(String mainImageUrl) {
-            this.mMainImageUrl = mainImageUrl;
-        }
-
-        /**
-         * @param iconImageUrl the icon image URL to be set.
-         */
-        public void setIconImageUrl(String iconImageUrl) {
-            this.mIconImageUrl = iconImageUrl;
-        }
-
-        /**
-         * @param callToAction the call to action string to be set.
-         */
-        public void setCallToAction(String callToAction) {
-            this.mCallToAction = callToAction;
-        }
-
-        /**
-         * @param starRating the star rating value to be set.
-         */
-        public void setStarRating(Double starRating) {
-            this.mStarRating = starRating;
-        }
-
-        /**
-         * @param advertiser the advertiser string to be set.
-         */
-        public void setAdvertiser(String advertiser) {
-            this.mAdvertiser = advertiser;
-        }
-
-        /**
-         * @param store the store string to be set.
-         */
-        public void setStore(String store) {
-            this.mStore = store;
-        }
-
-        /**
-         * @param price the price string to be set.
-         */
-        public void setPrice(String price) {
-            this.mPrice = price;
-        }
-
-        /**
-         * @return whether or not this ad is native content ad.
-         */
-        public boolean isNativeContentAd() {
-            return mNativeContentAd != null;
-        }
-
-        /**
-         * @return whether or not to swap margins when rendering the ad.
-         */
-        public boolean shouldSwapMargins() {
-            return this.mSwapMargins;
-        }
-
-        /**
-         * @return whether or not this ad is native app install ad.
-         */
-        public boolean isNativeAppInstallAd() {
-            return mNativeAppInstallAd != null;
-        }
-
-        /**
-         * @return {@link #mNativeContentAd}.
-         */
-        public NativeContentAd getContentAd() {
-            return mNativeContentAd;
-        }
-
-        /**
-         * @return {@link #mNativeAppInstallAd}.
-         */
-        public NativeAppInstallAd getAppInstallAd() {
-            return mNativeAppInstallAd;
-        }
-
-        /**
-         * This method will load native ads from Google for the given ad unit ID.
-         *
-         * @param context  required to request a Google native ad.
-         * @param adUnitId Google's AdMob Ad Unit ID.
-         */
-        public void loadAd(final Context context, String adUnitId,
-                Map<String, Object> localExtras) {
-            AdLoader.Builder builder = new AdLoader.Builder(context, adUnitId);
-
-            // Get the experimental swap margins extra.
-            if (localExtras.containsKey(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS)) {
-                Object swapMarginExtra = localExtras.get(KEY_EXPERIMENTAL_EXTRA_SWAP_MARGINS);
-                if (swapMarginExtra instanceof Boolean) {
-                    mSwapMargins = (boolean) swapMarginExtra;
-                }
-            }
-
-            NativeAdOptions.Builder optionsBuilder = new NativeAdOptions.Builder();
-
-            // MoPub requires the images to be pre-cached using their APIs, so we do not want
-            // Google to download the image assets.
-            optionsBuilder.setReturnUrlsForImageAssets(true);
-
-            // MoPub allows for only one image, so only request for one image.
-            optionsBuilder.setRequestMultipleImages(false);
-
-            // Get the preferred image orientation from the local extras.
-            if (localExtras.containsKey(KEY_EXTRA_ORIENTATION_PREFERENCE)
-                    && isValidOrientationExtra(localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE))) {
-                optionsBuilder.setImageOrientation(
-                        (int) localExtras.get(KEY_EXTRA_ORIENTATION_PREFERENCE));
-            }
-
-            // Get the preferred AdChoices icon placement from the local extras.
-            if (localExtras.containsKey(KEY_EXTRA_AD_CHOICES_PLACEMENT)
-                    && isValidAdChoicesPlacementExtra(
-                    localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT))) {
-                optionsBuilder.setAdChoicesPlacement(
-                        (int) localExtras.get(KEY_EXTRA_AD_CHOICES_PLACEMENT));
-            }
-            NativeAdOptions adOptions = optionsBuilder.build();
-
-            AdLoader adLoader =
-                    builder.forContentAd(new NativeContentAd.OnContentAdLoadedListener() {
-                        @Override
-                        public void onContentAdLoaded(final NativeContentAd nativeContentAd) {
-                            if (!isValidContentAd(nativeContentAd)) {
-                                Log.i(TAG, "The Google native content ad is missing one or more "
-                                        + "required assets, failing request.");
-                                mCustomEventNativeListener.onNativeAdFailed(
-                                        NativeErrorCode.INVALID_RESPONSE);
-                                return;
-                            }
-
-                            mNativeContentAd = nativeContentAd;
-                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                                    nativeContentAd.getImages();
-                            List<String> imageUrls = new ArrayList<>();
-                            // Only one image should be in the the list as we turned off request
-                            // for multiple images.
-                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
-                                    images.get(0);
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(mainImage.getUri().toString());
-
-                            com.google.android.gms.ads.formats.NativeAd.Image logoImage =
-                                    nativeContentAd.getLogo();
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(logoImage.getUri().toString());
-                            preCacheImages(context, imageUrls);
-                        }
-                    }).forAppInstallAd(new NativeAppInstallAd.OnAppInstallAdLoadedListener() {
-                        @Override
-                        public void onAppInstallAdLoaded(
-                                final NativeAppInstallAd nativeAppInstallAd) {
-                            if (!isValidAppInstallAd(nativeAppInstallAd)) {
-                                Log.i(TAG, "The Google native app install ad is missing one or "
-                                        + "more required assets, failing request.");
-                                mCustomEventNativeListener.onNativeAdFailed(
-                                        NativeErrorCode.INVALID_RESPONSE);
-                                return;
-                            }
-                            mNativeAppInstallAd = nativeAppInstallAd;
-                            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                                    nativeAppInstallAd.getImages();
-                            List<String> imageUrls = new ArrayList<>();
-                            // Only one image should be in the the list as we turned off request
-                            // for multiple images.
-                            com.google.android.gms.ads.formats.NativeAd.Image mainImage =
-                                    images.get(0);
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(mainImage.getUri().toString());
-
-                            com.google.android.gms.ads.formats.NativeAd.Image iconImage =
-                                    nativeAppInstallAd.getIcon();
-                            // Assuming that the URI provided is an URL.
-                            imageUrls.add(iconImage.getUri().toString());
-                            preCacheImages(context, imageUrls);
-                        }
-                    }).withAdListener(new AdListener() {
-                        @Override
-                        public void onAdClicked() {
-                            super.onAdClicked();
-                            GooglePlayServicesNativeAd.this.notifyAdClicked();
-                        }
-
-                        @Override
-                        public void onAdImpression() {
-                            super.onAdImpression();
-                            GooglePlayServicesNativeAd.this.notifyAdImpressed();
-                        }
-
-                        @Override
-                        public void onAdFailedToLoad(int errorCode) {
-                            super.onAdFailedToLoad(errorCode);
-                            switch (errorCode) {
-                                case AdRequest.ERROR_CODE_INTERNAL_ERROR:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                                    break;
-                                case AdRequest.ERROR_CODE_INVALID_REQUEST:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NETWORK_INVALID_REQUEST);
-                                    break;
-                                case AdRequest.ERROR_CODE_NETWORK_ERROR:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.CONNECTION_ERROR);
-                                    break;
-                                case AdRequest.ERROR_CODE_NO_FILL:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.NETWORK_NO_FILL);
-                                    break;
-                                default:
-                                    mCustomEventNativeListener.onNativeAdFailed(
-                                            NativeErrorCode.UNSPECIFIED);
-                            }
-                        }
-                    }).withNativeAdOptions(adOptions).build();
-            adLoader.loadAd(new AdRequest.Builder().setRequestAgent("MoPub").build());
-        }
-
-        /**
-         * This method will check whether or not the provided extra value can be mapped to
-         * NativeAdOptions' orientation constants.
-         *
-         * @param extra to be checked if it is valid.
-         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
-         * orientation constants, {@code false} otherwise.
-         */
-        private boolean isValidOrientationExtra(Object extra) {
-            if (extra == null || !(extra instanceof Integer)) {
-                return false;
-            }
-            Integer preference = (Integer) extra;
-            return (preference == NativeAdOptions.ORIENTATION_ANY
-                    || preference == NativeAdOptions.ORIENTATION_LANDSCAPE
-                    || preference == NativeAdOptions.ORIENTATION_PORTRAIT);
-        }
-
-        /**
-         * Checks whether or not the provided extra value can be mapped to NativeAdOptions'
-         * AdChoices icon placement constants.
-         *
-         * @param extra to be checked if it is valid.
-         * @return {@code true} if the extra can be mapped to one of {@link NativeAdOptions}
-         * AdChoices icon placement constants, {@code false} otherwise.
-         */
-        private boolean isValidAdChoicesPlacementExtra(Object extra) {
-            if (extra == null || !(extra instanceof Integer)) {
-                return false;
-            }
-            Integer placement = (Integer) extra;
-            return (placement == NativeAdOptions.ADCHOICES_TOP_LEFT
-                    || placement == NativeAdOptions.ADCHOICES_TOP_RIGHT
-                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_LEFT
-                    || placement == NativeAdOptions.ADCHOICES_BOTTOM_RIGHT);
-        }
-
-        /**
-         * This method will check whether or not the given content ad has all the required assets
-         * (title, text, main image url, icon url and call to action) for it to be correctly
-         * mapped to a {@link GooglePlayServicesNativeAd}.
-         *
-         * @param contentAd to be checked if it is valid.
-         * @return {@code true} if the given native content ad has all the necessary assets to
-         * create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
-         */
-        private boolean isValidContentAd(NativeContentAd contentAd) {
-            return (contentAd.getHeadline() != null && contentAd.getBody() != null
-                    && contentAd.getImages() != null && contentAd.getImages().size() > 0
-                    && contentAd.getImages().get(0) != null && contentAd.getLogo() != null
-                    && contentAd.getCallToAction() != null);
-        }
-
-        /**
-         * This method will check whether or not the given native app install ad has all the
-         * required assets (title, text, main image url, icon url and call to action) for it to
-         * be correctly mapped to a {@link GooglePlayServicesNativeAd}.
-         *
-         * @param appInstallAd to checked if it is valid.
-         * @return {@code true} if the given native app install ad has all the necessary assets to
-         * to create a {@link GooglePlayServicesNativeAd}, {@code false} otherwise.
-         */
-        private boolean isValidAppInstallAd(NativeAppInstallAd appInstallAd) {
-            return (appInstallAd.getHeadline() != null && appInstallAd.getBody() != null
-                    && appInstallAd.getImages() != null && appInstallAd.getImages().size() > 0
-                    && appInstallAd.getImages().get(0) != null && appInstallAd.getIcon() != null
-                    && appInstallAd.getCallToAction() != null);
-        }
-
-        @Override
-        public void prepare(@NonNull View view) {
-            // Adding click and impression trackers is handled by the GooglePlayServicesRenderer,
-            // do nothing here.
-        }
-
-        @Override
-        public void clear(@NonNull View view) {
-            // Called when an ad is no longer displayed to a user.
-            GooglePlayServicesAdRenderer.removeGoogleNativeAdView(view, shouldSwapMargins());
-        }
-
-        @Override
-        public void destroy() {
-            // Called when the ad will never be displayed again.
-            if (mNativeContentAd != null) {
-                mNativeContentAd.destroy();
-            }
-            if (mNativeAppInstallAd != null) {
-                mNativeAppInstallAd.destroy();
-            }
-        }
-
-        /**
-         * This method will try to cache images and send success/failure callbacks based on
-         * whether or not the image caching succeeded.
-         *
-         * @param context   required to pre-cache images.
-         * @param imageUrls the urls of images that need to be cached.
-         */
-        private void preCacheImages(Context context, List<String> imageUrls) {
-            NativeImageHelper.preCacheImages(context, imageUrls,
-                    new NativeImageHelper.ImageListener() {
-                        @Override
-                        public void onImagesCached() {
-                            if (mNativeContentAd != null) {
-                                prepareNativeContentAd(mNativeContentAd);
-                                mCustomEventNativeListener.onNativeAdLoaded(
-                                        GooglePlayServicesNativeAd.this);
-                            } else if (mNativeAppInstallAd != null) {
-                                prepareNativeAppInstallAd(mNativeAppInstallAd);
-                                mCustomEventNativeListener.onNativeAdLoaded(
-                                        GooglePlayServicesNativeAd.this);
-                            }
-                        }
-
-                        @Override
-                        public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            mCustomEventNativeListener.onNativeAdFailed(errorCode);
-                        }
-                    });
-        }
-
-        /**
-         * This method will map the Google native content ad loaded to this
-         * {@link GooglePlayServicesNativeAd}.
-         *
-         * @param contentAd that needs to be mapped to this native ad.
-         */
-        private void prepareNativeContentAd(NativeContentAd contentAd) {
-            List<com.google.android.gms.ads.formats.NativeAd.Image> images = contentAd.getImages();
-            setMainImageUrl(images.get(0).getUri().toString());
-
-            com.google.android.gms.ads.formats.NativeAd.Image logo = contentAd.getLogo();
-            setIconImageUrl(logo.getUri().toString());
-
-            setCallToAction(contentAd.getCallToAction().toString());
-
-            setTitle(contentAd.getHeadline().toString());
-
-            setText(contentAd.getBody().toString());
-
-            setAdvertiser(contentAd.getAdvertiser().toString());
-        }
-
-        /**
-         * This method will map the Google native app install ad loaded to this
-         * {@link GooglePlayServicesNativeAd}.
-         *
-         * @param appInstallAd that needs to be mapped to this native ad.
-         */
-        private void prepareNativeAppInstallAd(NativeAppInstallAd appInstallAd) {
-            List<com.google.android.gms.ads.formats.NativeAd.Image> images =
-                    appInstallAd.getImages();
-            setMainImageUrl(images.get(0).getUri().toString());
-
-            com.google.android.gms.ads.formats.NativeAd.Image icon = appInstallAd.getIcon();
-            setIconImageUrl(icon.getUri().toString());
-
-            setCallToAction(appInstallAd.getCallToAction().toString());
-
-            setTitle(appInstallAd.getHeadline().toString());
-
-            setText(appInstallAd.getBody().toString());
-
-            if (appInstallAd.getStarRating() != null) {
-                setStarRating(appInstallAd.getStarRating());
-            }
-
-            // Add store asset if available.
-            if (appInstallAd.getStore() != null) {
-                setStore(appInstallAd.getStore().toString());
-            }
-
-            // Add price asset if available.
-            if (appInstallAd.getPrice() != null) {
-                setPrice(appInstallAd.getPrice().toString());
-            }
-        }
-    }
-}
diff --git a/extras/src/com/mopub/nativeads/MillennialNative.java b/extras/src/com/mopub/nativeads/MillennialNative.java
deleted file mode 100644
index 5055e47d..00000000
--- a/extras/src/com/mopub/nativeads/MillennialNative.java
+++ /dev/null
@@ -1,303 +0,0 @@
-package com.mopub.nativeads;
-
-import android.content.Context;
-import android.util.Log;
-import android.view.View;
-
-import com.millennialmedia.AppInfo;
-import com.millennialmedia.CreativeInfo;
-import com.millennialmedia.MMException;
-import com.millennialmedia.MMLog;
-import com.millennialmedia.MMSDK;
-import com.millennialmedia.NativeAd;
-import com.mopub.mobileads.MillennialUtils;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-import static com.mopub.nativeads.NativeImageHelper.preCacheImages;
-
-/**
- * Compatible with version 6.6 of the Millennial Media SDK.
- */
-
-public class MillennialNative extends CustomEventNative {
-    private static final String DCN_KEY = "dcn";
-    private static final String APID_KEY = "adUnitID";
-    private final static String TAG = MillennialNative.class.getSimpleName();
-
-    MillennialStaticNativeAd staticNativeAd;
-
-    public CreativeInfo getCreativeInfo() {
-
-        if (staticNativeAd == null) {
-            return null;
-        }
-
-        return staticNativeAd.getCreativeInfo();
-    }
-
-
-    @Override
-    protected void loadNativeAd(final Context context, final CustomEventNativeListener customEventNativeListener,
-                                Map<String, Object> localExtras, Map<String, String> serverExtras) {
-
-        if (!MillennialUtils.initSdk(context)) {
-            Log.e(TAG, "MM SDK must be initialized with an Activity or Application context.");
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-            return;
-        }
-
-        String placementId = serverExtras.get(APID_KEY);
-        String siteId = serverExtras.get(DCN_KEY);
-
-        if (MillennialUtils.isEmpty(placementId)) {
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-
-            return;
-        }
-
-        AppInfo ai = new AppInfo().setMediator("mopubsdk").setSiteId(siteId);
-
-        try {
-            MMSDK.setAppInfo(ai);
-
-            NativeAd nativeAd = NativeAd.createInstance(placementId, NativeAd.NATIVE_TYPE_INLINE);
-            staticNativeAd = new MillennialStaticNativeAd(context, nativeAd, new ImpressionTracker(context),
-                    new NativeClickHandler(context), customEventNativeListener);
-
-            staticNativeAd.loadAd();
-
-        } catch (MMException e) {
-            Log.e(TAG, "An exception occurred loading a native ad from MM SDK", e);
-            customEventNativeListener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-        }
-    }
-
-
-    static class MillennialStaticNativeAd extends StaticNativeAd implements NativeAd.NativeListener {
-
-        private final Context context;
-        private NativeAd nativeAd;
-        private final ImpressionTracker impressionTracker;
-        private final NativeClickHandler nativeClickHandler;
-        private final CustomEventNativeListener listener;
-
-
-        public MillennialStaticNativeAd(final Context context, final NativeAd nativeAd,
-                                        final ImpressionTracker impressionTracker, final NativeClickHandler nativeClickHandler,
-                                        final CustomEventNativeListener customEventNativeListener) {
-
-            this.context = context.getApplicationContext();
-            this.nativeAd = nativeAd;
-            this.impressionTracker = impressionTracker;
-            this.nativeClickHandler = nativeClickHandler;
-            listener = customEventNativeListener;
-
-            nativeAd.setListener(this);
-        }
-
-
-        void loadAd() throws MMException {
-
-            Log.d(TAG, "Millennial native ad loading.");
-
-            nativeAd.load(context, null);
-        }
-
-
-        CreativeInfo getCreativeInfo() {
-
-            if (nativeAd == null) {
-                return null;
-            }
-
-            return nativeAd.getCreativeInfo();
-        }
-
-
-        // Lifecycle Handlers
-        @Override
-        public void prepare(final View view) {
-            // Must access these methods directly to get impressions to fire.
-            nativeAd.getIconImage();
-            nativeAd.getDisclaimer();
-            impressionTracker.addView(view, this);
-            nativeClickHandler.setOnClickListener(view, this);
-        }
-
-
-        @Override
-        public void clear(final View view) {
-
-            impressionTracker.removeView(view);
-            nativeClickHandler.clearOnClickListener(view);
-        }
-
-
-        @Override
-        public void destroy() {
-
-            impressionTracker.destroy();
-            nativeAd.destroy();
-            nativeAd = null;
-        }
-
-
-        // Event Handlers
-        @Override
-        public void recordImpression(final View view) {
-
-            notifyAdImpressed();
-
-            try {
-                nativeAd.fireImpression();
-                Log.d(TAG, "Millennial native ad impression recorded.");
-            } catch (MMException e) {
-                Log.e(TAG, "Error tracking Millennial native ad impression", e);
-            }
-        }
-
-
-        @Override
-        public void handleClick(final View view) {
-
-            notifyAdClicked();
-
-            nativeClickHandler.openClickDestinationUrl(getClickDestinationUrl(), view);
-            nativeAd.fireCallToActionClicked();
-            Log.d(TAG, "Millennial native ad clicked.");
-        }
-
-
-        // MM'S Native listener
-        @Override
-        public void onLoaded(NativeAd nativeAd) {
-
-            CreativeInfo creativeInfo = getCreativeInfo();
-            if ((creativeInfo != null) && MMLog.isDebugEnabled()) {
-
-                MMLog.d(TAG, "Native Creative Info: " + creativeInfo);
-            }
-
-            // Set assets
-            String iconImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.ICON_IMAGE, 1);
-            String mainImageUrl = nativeAd.getImageUrl(NativeAd.ComponentName.MAIN_IMAGE, 1);
-
-            setTitle(nativeAd.getTitle().getText().toString());
-            setText(nativeAd.getBody().getText().toString());
-            setCallToAction(nativeAd.getCallToActionButton().getText().toString());
-
-            final String clickDestinationUrl = nativeAd.getCallToActionUrl();
-            if (clickDestinationUrl == null) {
-                MillennialUtils.postOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-
-                        Log.d(TAG, "Millennial native ad encountered null destination url.");
-                        listener.onNativeAdFailed(NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR);
-                    }
-                });
-                return;
-            }
-
-            setClickDestinationUrl(clickDestinationUrl);
-            setIconImageUrl(iconImageUrl);
-            setMainImageUrl(mainImageUrl);
-
-            final List<String> urls = new ArrayList<>();
-            if (iconImageUrl != null) {
-                urls.add(iconImageUrl);
-            }
-            if (mainImageUrl != null) {
-                urls.add(mainImageUrl);
-            }
-
-            addExtra("disclaimer", nativeAd.getDisclaimer().getText());
-
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    // This has to be run on the main thread:
-                    preCacheImages(context, urls, new NativeImageHelper.ImageListener() {
-                        @Override
-                        public void onImagesCached() {
-                            listener.onNativeAdLoaded(MillennialStaticNativeAd.this);
-                            Log.d(TAG, "Millennial native ad loaded.");
-                        }
-
-
-                        @Override
-                        public void onImagesFailedToCache(NativeErrorCode errorCode) {
-                            listener.onNativeAdFailed(errorCode);
-                        }
-                    });
-
-                }
-            });
-        }
-
-
-        @Override
-        public void onLoadFailed(NativeAd nativeAd, NativeAd.NativeErrorStatus nativeErrorStatus) {
-
-            final NativeErrorCode error;
-            switch (nativeErrorStatus.getErrorCode()) {
-                case NativeAd.NativeErrorStatus.LOAD_TIMED_OUT:
-                    error = NativeErrorCode.NETWORK_TIMEOUT;
-                    break;
-                case NativeAd.NativeErrorStatus.NO_NETWORK:
-                    error = NativeErrorCode.CONNECTION_ERROR;
-                    break;
-                case NativeAd.NativeErrorStatus.UNKNOWN:
-                    error = NativeErrorCode.UNSPECIFIED;
-                    break;
-                case NativeAd.NativeErrorStatus.LOAD_FAILED:
-                case NativeAd.NativeErrorStatus.INIT_FAILED:
-                    error = NativeErrorCode.UNEXPECTED_RESPONSE_CODE;
-                    break;
-                case NativeAd.NativeErrorStatus.ADAPTER_NOT_FOUND:
-                    error = NativeErrorCode.NATIVE_ADAPTER_CONFIGURATION_ERROR;
-                    break;
-                case NativeAd.NativeErrorStatus.DISPLAY_FAILED:
-                case NativeAd.NativeErrorStatus.EXPIRED:
-                    error = NativeErrorCode.UNSPECIFIED;
-                    break;
-                default:
-                    error = NativeErrorCode.NETWORK_NO_FILL;
-            }
-            MillennialUtils.postOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-
-                    listener.onNativeAdFailed(error);
-                }
-            });
-            Log.i(TAG, "Millennial native ad failed: " + nativeErrorStatus.getDescription());
-        }
-
-
-        @Override
-        public void onClicked(NativeAd nativeAd, NativeAd.ComponentName componentName, int i) {
-
-            Log.d(TAG, "Millennial native ad click tracker fired.");
-        }
-
-
-        @Override
-        public void onAdLeftApplication(NativeAd nativeAd) {
-
-            Log.d(TAG, "Millennial native ad has left the application.");
-
-        }
-
-
-        @Override
-        public void onExpired(NativeAd nativeAd) {
-
-            Log.d(TAG, "Millennial native ad has expired!");
-        }
-
-    }
-}
diff --git a/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java b/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
deleted file mode 100644
index 07311691..00000000
--- a/extras/src/com/mopub/simpleadsdemo/GreystripeBanner.java
+++ /dev/null
@@ -1,106 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.greystripe.sdk.AdPosition;
-import com.greystripe.sdk.GSAd;
-import com.greystripe.sdk.GSAdErrorCode;
-import com.greystripe.sdk.GSAdListener;
-import com.greystripe.sdk.GSMobileBannerAdView;
-import com.mopub.mobileads.CustomEventBanner;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Map;
-
-/*
- * Tested with Greystripe SDK 2.4.0.
- */
-class GreystripeBanner extends CustomEventBanner implements GSAdListener {
-
-    private static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "GUID";
-
-    private CustomEventBannerListener mBannerListener;
-    private GSMobileBannerAdView mGreystripeAd;
-
-    /*
-     * Abstract methods from CustomEventBanner
-     */
-    @Override
-    protected void loadBanner(final Context context,
-                              final CustomEventBannerListener bannerListener,
-                              final Map<String, Object> localExtras,
-                              final Map<String, String> serverExtras) {
-        mBannerListener = bannerListener;
-
-        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            greystripeAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        mGreystripeAd = new GSMobileBannerAdView(context, greystripeAppId);
-        mGreystripeAd.addListener(this);
-
-        mGreystripeAd.refresh();
-    }
-
-    private boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mGreystripeAd.removeListener(this);
-    }
-
-    /*
-     * GSAdListener implementation
-     */
-    @Override
-    public void onAdClickthrough(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad clicked.");
-        mBannerListener.onBannerClicked();
-    }
-
-    @Override
-    public void onAdDismissal(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad modal dismissed.");
-    }
-
-    @Override
-    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
-        Log.d("MoPub", "Greystripe banner ad failed to load.");
-        mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onFetchedAd(final GSAd greystripeAd) {
-        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
-            Log.d("MoPub", "Greystripe banner ad loaded successfully. Showing ad...");
-            mBannerListener.onBannerLoaded(mGreystripeAd);
-        } else {
-            mBannerListener.onBannerFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        }
-    }
-
-    @Override
-    public void onAdCollapse(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad collapsed.");
-        mBannerListener.onBannerCollapsed();
-    }
-
-    @Override
-    public void onAdExpansion(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe banner ad expanded.");
-        mBannerListener.onBannerExpanded();
-    }
-
-    @Override
-    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
-    }
-}
diff --git a/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java b/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
deleted file mode 100644
index 6540db04..00000000
--- a/extras/src/com/mopub/simpleadsdemo/GreystripeInterstitial.java
+++ /dev/null
@@ -1,122 +0,0 @@
-package com.mopub.simpleadsdemo;
-
-import android.content.Context;
-import android.util.Log;
-
-import com.greystripe.sdk.AdPosition;
-import com.greystripe.sdk.GSAd;
-import com.greystripe.sdk.GSAdErrorCode;
-import com.greystripe.sdk.GSAdListener;
-import com.greystripe.sdk.GSFullscreenAd;
-import com.mopub.mobileads.CustomEventInterstitial;
-import com.mopub.mobileads.MoPubErrorCode;
-
-import java.util.Map;
-
-/*
- * Tested with Greystripe SDK 2.4.0.
- */
-class GreystripeInterstitial extends CustomEventInterstitial implements GSAdListener {
-
-    private static final String DEFAULT_GREYSTRIPE_APP_ID = "YOUR_GREYSTRIPE_APP_ID";
-
-    /*
-     * These keys are intended for MoPub internal use. Do not modify.
-     */
-    public static final String APP_ID_KEY = "GUID";
-
-    private CustomEventInterstitialListener mInterstitialListener;
-    private GSFullscreenAd mGreystripeAd;
-
-    /*
-     * Abstract methods from CustomEventInterstitial
-     */
-    @Override
-    protected void loadInterstitial(final Context context,
-                                    final CustomEventInterstitialListener interstitialListener,
-                                    final Map<String, Object> localExtras,
-                                    final Map<String, String> serverExtras) {
-        mInterstitialListener = interstitialListener;
-
-        String greystripeAppId = DEFAULT_GREYSTRIPE_APP_ID;
-        if (extrasAreValid(serverExtras)) {
-            greystripeAppId = serverExtras.get(APP_ID_KEY);
-        }
-
-        mGreystripeAd = new GSFullscreenAd(context, greystripeAppId);
-        mGreystripeAd.addListener(this);
-
-        mGreystripeAd.fetch();
-    }
-
-    private static boolean extrasAreValid(Map<String, String> extras) {
-        return extras.containsKey(APP_ID_KEY);
-    }
-
-    @Override
-    protected void showInterstitial() {
-        if (!mGreystripeAd.isAdReady()) {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-            return;
-        }
-
-        Log.d("MoPub", "Showing Greystripe interstitial ad.");
-        mGreystripeAd.display();
-        mInterstitialListener.onInterstitialShown();
-    }
-
-    @Override
-    protected void onInvalidate() {
-        mGreystripeAd.removeListener(this);
-    }
-
-    /*
-     * GSAdListener implementation
-     */
-    @Override
-    public void onAdClickthrough(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe interstitial ad clicked.");
-        mInterstitialListener.onInterstitialClicked();
-
-        /*
-         * XXX: When a Greystripe interstitial is dismissed as a result of a user click, the
-         * onAdDismissal callback does not get fired. This call ensures that the custom event
-         * listener is informed of all dismissals.
-         */
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onAdDismissal(final GSAd greystripeAd) {
-        Log.d("MoPub", "Greystripe interstitial ad dismissed.");
-        mInterstitialListener.onInterstitialDismissed();
-    }
-
-    @Override
-    public void onFailedToFetchAd(final GSAd greystripeAd, final GSAdErrorCode errorCode) {
-        Log.d("MoPub", "Greystripe interstitial ad failed to load.");
-        mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_NO_FILL);
-    }
-
-    @Override
-    public void onFetchedAd(final GSAd greystripeAd) {
-        if (mGreystripeAd != null && mGreystripeAd.isAdReady()) {
-            Log.d("MoPub", "Greysripe interstitial ad loaded successfully.");
-            mInterstitialListener.onInterstitialLoaded();
-        } else {
-            mInterstitialListener.onInterstitialFailed(MoPubErrorCode.NETWORK_INVALID_STATE);
-        }
-    }
-
-    @Override
-    public void onAdCollapse(final GSAd greystripeAd) {
-    }
-
-    @Override
-    public void onAdExpansion(final GSAd greystripeAd) {
-    }
-
-    @Override
-    public void onAdResize(final GSAd gsAd, final AdPosition adPosition) {
-    }
-}
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 8b60e124..3e785403 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Tue Sep 06 11:08:36 PDT 2016
+#Mon Nov 13 15:46:01 PST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.3.1-all.zip
diff --git a/mopub-sample/AndroidManifest.xml b/mopub-sample/AndroidManifest.xml
index 814b58ea..93dfd86c 100644
--- a/mopub-sample/AndroidManifest.xml
+++ b/mopub-sample/AndroidManifest.xml
@@ -1,10 +1,10 @@
 <?xml version="1.0" encoding="utf-8"?>
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.mopub.simpleadsdemo"
-      android:versionCode="57"
-      android:versionName="4.19.0">
+      android:versionCode="58"
+      android:versionName="4.20.0">
     <uses-sdk android:minSdkVersion="16"
-              android:targetSdkVersion="24"/>
+              android:targetSdkVersion="26"/>
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
diff --git a/mopub-sample/build.gradle b/mopub-sample/build.gradle
index 453e08cc..4ba75bc0 100644
--- a/mopub-sample/build.gradle
+++ b/mopub-sample/build.gradle
@@ -18,7 +18,7 @@ apply plugin: 'com.android.application'
 
 project.group = 'com.mopub'
 project.description = '''MoPub Sample App'''
-project.version = '4.19.0'
+project.version = '4.20.0'
 
 android {
     compileSdkVersion 26
@@ -26,7 +26,7 @@ android {
     lintOptions { abortOnError false }
 
     defaultConfig {
-        versionCode 57
+        versionCode 58
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
diff --git a/mopub-sample/src/test/resources/robolectric.properties b/mopub-sample/src/test/resources/com/mopub/robolectric.properties
similarity index 100%
rename from mopub-sample/src/test/resources/robolectric.properties
rename to mopub-sample/src/test/resources/com/mopub/robolectric.properties
diff --git a/mopub-sdk/build.gradle b/mopub-sdk/build.gradle
index dc087560..ca18f0b2 100644
--- a/mopub-sdk/build.gradle
+++ b/mopub-sdk/build.gradle
@@ -1,23 +1,31 @@
 apply from: 'shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
-    compile project(':mopub-sdk:mopub-sdk-banner')
-    compile project(':mopub-sdk:mopub-sdk-interstitial')
-    compile project(':mopub-sdk:mopub-sdk-rewardedvideo')
-    compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile project(':mopub-sdk:mopub-sdk-native-video')
+    api project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-banner')
+    api project(':mopub-sdk:mopub-sdk-interstitial')
+    api project(':mopub-sdk:mopub-sdk-rewardedvideo')
+    api project(':mopub-sdk:mopub-sdk-native-static')
+    api project(':mopub-sdk:mopub-sdk-native-video')
 
-    testCompile 'junit:junit:4.10'
-    testCompile 'org.robolectric:robolectric:3.0'
-    testCompile 'org.robolectric:shadows-support-v4:3.0'
-    testCompile 'org.robolectric:shadows-httpclient:3.0'
-    testCompile 'com.squareup:fest-android:1.0.7'
-    testCompile 'org.mockito:mockito-core:1.9.5'
-    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
-    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.5'
-    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
-    testCompile 'org.powermock:powermock-classloading-xstream:1.6.5'
+    testImplementation 'junit:junit:4.12'
+    testImplementation 'org.robolectric:robolectric:3.5.1'
+    testImplementation 'org.robolectric:shadows-support-v4:3.3.2'
+    testImplementation 'org.robolectric:shadows-httpclient:3.5.1'
+    testImplementation 'com.squareup:fest-android:1.0.7'
+    testImplementation 'org.mockito:mockito-core:1.9.5'
+    testImplementation 'org.powermock:powermock-module-junit4:1.6.5'
+    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.5'
+    testImplementation 'org.powermock:powermock-api-mockito:1.6.5'
+    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.5'
+}
+
+android {
+    testOptions {
+        unitTests {
+            includeAndroidResources = true
+        }
+    }
 }
 
 project.description = 'MoPub Android SDK'
diff --git a/mopub-sdk/mopub-sdk-banner/build.gradle b/mopub-sdk/mopub-sdk-banner/build.gradle
index 011a0db8..843d709e 100644
--- a/mopub-sdk/mopub-sdk-banner/build.gradle
+++ b/mopub-sdk/mopub-sdk-banner/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Banner'
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
index 9ae515fd..9b5eb50f 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/CustomEventBannerAdapter.java
@@ -23,6 +23,7 @@
 import static com.mopub.common.DataKeys.AD_HEIGHT;
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
 import static com.mopub.common.DataKeys.AD_WIDTH;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.mobileads.MoPubErrorCode.ADAPTER_NOT_FOUND;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_TIMEOUT;
@@ -87,6 +88,7 @@ public void run() {
         mLocalExtras.put(AD_REPORT_KEY, adReport);
         mLocalExtras.put(AD_WIDTH, mMoPubView.getAdWidth());
         mLocalExtras.put(AD_HEIGHT, mMoPubView.getAdHeight());
+        mLocalExtras.put(BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, mIsVisibilityImpressionTrackingEnabled);
     }
 
     @ReflectionTarget
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
index 1cf274fb..884f10a5 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/HtmlBanner.java
@@ -7,19 +7,24 @@
 import com.mopub.common.AdReport;
 import com.mopub.common.DataKeys;
 import com.mopub.common.ExternalViewabilitySessionManager;
+import com.mopub.common.VisibleForTesting;
 import com.mopub.common.logging.MoPubLog;
 import com.mopub.mobileads.factories.HtmlBannerWebViewFactory;
 
+import java.lang.ref.WeakReference;
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.INTERNAL_ERROR;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 
 public class HtmlBanner extends CustomEventBanner {
-    private HtmlBannerWebView mHtmlBannerWebView;
+    @Nullable private HtmlBannerWebView mHtmlBannerWebView;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    private boolean mBannerImpressionPixelCountEnabled = false;
+    @Nullable private WeakReference<Activity> mWeakActivity;
 
     @Override
     protected void loadBanner(
@@ -27,6 +32,11 @@ protected void loadBanner(
             CustomEventBannerListener customEventBannerListener,
             Map<String, Object> localExtras,
             Map<String, String> serverExtras) {
+        final Object bannerImpressionPixelCountEnabledObject = localExtras.get(
+                BANNER_IMPRESSION_PIXEL_COUNT_ENABLED);
+        if (bannerImpressionPixelCountEnabledObject instanceof Boolean) {
+            mBannerImpressionPixelCountEnabled = (boolean) bannerImpressionPixelCountEnabledObject;
+        }
 
         String htmlData;
         String redirectUrl;
@@ -54,10 +64,15 @@ protected void loadBanner(
         mHtmlBannerWebView = HtmlBannerWebViewFactory.create(context, adReport, customEventBannerListener, isScrollable, redirectUrl, clickthroughUrl);
         AdViewController.setShouldHonorServerDimensions(mHtmlBannerWebView);
 
+        // We only measure viewability when we have an activity context. This sets up a delayed
+        // viewability session if we have the new pixel-counting banner impression tracking enabled.
+        // Otherwise, set up a regular display session.
         if (context instanceof Activity) {
             final Activity activity = (Activity) context;
+            mWeakActivity = new WeakReference<Activity>(activity);
             mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
-            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView);
+            mExternalViewabilitySessionManager.createDisplaySession(activity, mHtmlBannerWebView,
+                    mBannerImpressionPixelCountEnabled);
         } else {
             MoPubLog.d("Unable to start viewability session for HTML banner: Context provided was not an Activity.");
         }
@@ -79,10 +94,33 @@ protected void onInvalidate() {
 
     @Override
     protected void trackMpxAndThirdPartyImpressions() {
+        if (mHtmlBannerWebView == null) {
+            return;
+        }
+
         mHtmlBannerWebView.loadUrl(WEB_VIEW_DID_APPEAR.getUrl());
+
+        // mExternalViewabilitySessionManager is usually only null if the original Context given
+        // to loadBanner() was not an Activity Context. We don't need to start the deferred
+        // viewability tracker since it wasn't created, and if it was, and the activity reference
+        // was lost, something bad has happened, so we should drop the request.
+        if (mBannerImpressionPixelCountEnabled && mExternalViewabilitySessionManager != null &&
+                mWeakActivity != null) {
+            final Activity activity = mWeakActivity.get();
+            if (activity != null) {
+                mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
+            } else {
+                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+            }
+        }
     }
 
     private boolean extrasAreValid(Map<String, String> serverExtras) {
         return serverExtras.containsKey(DataKeys.HTML_RESPONSE_BODY_KEY);
     }
+
+    @VisibleForTesting
+    boolean isBannerImpressionPixelCountEnabled() {
+        return mBannerImpressionPixelCountEnabled;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
index 9c0c92c9..f7be2625 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mobileads/factories/HtmlBannerWebViewFactory.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads.factories;
 
 import android.content.Context;
+import android.support.annotation.NonNull;
 
 import com.mopub.common.AdReport;
 import com.mopub.mobileads.HtmlBannerWebView;
@@ -10,6 +11,7 @@
 public class HtmlBannerWebViewFactory {
     protected static HtmlBannerWebViewFactory instance = new HtmlBannerWebViewFactory();
 
+    @NonNull
     public static HtmlBannerWebView create(
             Context context,
             AdReport adReport,
diff --git a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
index 5e13128f..99b7eedb 100644
--- a/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
+++ b/mopub-sdk/mopub-sdk-banner/src/main/java/com/mopub/mraid/MraidBanner.java
@@ -1,5 +1,6 @@
 package com.mopub.mraid;
 
+import android.app.Activity;
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -17,6 +18,7 @@
 import java.util.Map;
 
 import static com.mopub.common.DataKeys.AD_REPORT_KEY;
+import static com.mopub.common.DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.util.JavaScriptWebViewCallbacks.WEB_VIEW_DID_APPEAR;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
@@ -26,6 +28,7 @@
     @Nullable private CustomEventBannerListener mBannerListener;
     @Nullable private MraidWebViewDebugListener mDebugListener;
     @Nullable private ExternalViewabilitySessionManager mExternalViewabilitySessionManager;
+    private boolean mBannerImpressionPixelCountEnabled = false;
 
     @Override
     protected void loadBanner(@NonNull final Context context,
@@ -42,6 +45,12 @@ protected void loadBanner(@NonNull final Context context,
             return;
         }
 
+        final Object bannerImpressionPixelCountEnabledObject = localExtras.get(
+                BANNER_IMPRESSION_PIXEL_COUNT_ENABLED);
+        if (bannerImpressionPixelCountEnabledObject instanceof Boolean) {
+            mBannerImpressionPixelCountEnabled = (boolean) bannerImpressionPixelCountEnabledObject;
+        }
+
         try {
             AdReport adReport = (AdReport) localExtras.get(AD_REPORT_KEY);
             mMraidController = MraidControllerFactory.create(
@@ -88,8 +97,16 @@ public void onClose() {
             public void onReady(final @NonNull MraidBridge.MraidWebView webView,
                     final @Nullable ExternalViewabilitySessionManager viewabilityManager) {
                 webView.getSettings().setJavaScriptEnabled(true);
-                mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(context);
-                mExternalViewabilitySessionManager.createDisplaySession(context, webView);
+
+                // We only measure viewability when we have an activity context. This sets up a delayed
+                // viewability session if we have the new pixel-counting banner impression tracking enabled.
+                // Otherwise, set up a regular display session.
+                if (context instanceof Activity) {
+                    mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(
+                            context);
+                    mExternalViewabilitySessionManager.createDisplaySession(context, webView,
+                            mBannerImpressionPixelCountEnabled);
+                }
             }
         });
     }
@@ -108,7 +125,25 @@ protected void onInvalidate() {
 
     @Override
     protected void trackMpxAndThirdPartyImpressions() {
+        if (mMraidController == null) {
+            return;
+        }
+
         mMraidController.loadJavascript(WEB_VIEW_DID_APPEAR.getJavascript());
+
+        // mExternalViewabilitySessionManager is usually only null if the original Context given
+        // to mMraidController was not an Activity Context. We don't need to start the deferred
+        // viewability tracker since it wasn't created, and if it was, and the activity reference
+        // was lost, something bad has happened, so we should drop the request.
+        if (mBannerImpressionPixelCountEnabled &&
+                mExternalViewabilitySessionManager != null) {
+            final Activity activity = mMraidController.getWeakActivity().get();
+            if (activity != null) {
+                mExternalViewabilitySessionManager.startDeferredDisplaySession(activity);
+            } else {
+                MoPubLog.d("Lost the activity for deferred Viewability tracking. Dropping session.");
+            }
+        }
     }
 
     private boolean extrasAreValid(@NonNull final Map<String, String> serverExtras) {
@@ -122,4 +157,9 @@ public void setDebugListener(@Nullable MraidWebViewDebugListener debugListener)
             mMraidController.setDebugListener(debugListener);
         }
     }
+
+    @VisibleForTesting
+    boolean isBannerImpressionPixelCountEnabled() {
+        return mBannerImpressionPixelCountEnabled;
+    }
 }
diff --git a/mopub-sdk/mopub-sdk-base/build.gradle b/mopub-sdk/mopub-sdk-base/build.gradle
index f039998a..d1969c03 100644
--- a/mopub-sdk/mopub-sdk-base/build.gradle
+++ b/mopub-sdk/mopub-sdk-base/build.gradle
@@ -8,7 +8,7 @@ repositories {
 }
 
 dependencies {
-    compile 'com.mopub.volley:mopub-volley:1.1.0'
+    api 'com.mopub.volley:mopub-volley:1.1.0'
 
     def avidEnabled = project.hasProperty("mopub.avidEnabled") ? project.getProperty("mopub.avidEnabled").toBoolean() : true
     if (avidEnabled) {
@@ -16,7 +16,7 @@ dependencies {
     }
     def moatEnabled = project.hasProperty("mopub.moatEnabled") ? project.getProperty("mopub.moatEnabled").toBoolean() : true
     if (moatEnabled) {
-        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.1.0'
+        compile 'com.moat.analytics.mobile.mpub:moat-mobile-app-kit:2.4.1'
     }
 }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
index 2a65e249..4583112e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/AvidViewabilitySession.java
@@ -301,8 +301,8 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
     @Override
     @Nullable
-    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public Boolean registerVideoObstruction(@NonNull final View view) {
+        Preconditions.checkNotNull(view);
 
         if (!isEnabled()) {
             return null;
@@ -314,16 +314,12 @@ public Boolean registerVideoObstructions(@NonNull final List<View> views) {
         }
 
         try {
-            for (final View view : views) {
-                if (view != null) {
-                    // Pre-reflection code:
-                    // mAvidVideoAdSession.registerFriendlyObstruction(view);
+            // Pre-reflection code:
+            // mAvidVideoAdSession.registerFriendlyObstruction(view);
 
-                    new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
-                            .addParam(View.class, view)
-                            .execute();
-                }
-            }
+            new Reflection.MethodBuilder(mAvidVideoAdSession, "registerFriendlyObstruction")
+                    .addParam(View.class, view)
+                    .execute();
 
             return true;
         } catch (Exception e) {
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
index 1de41b77..f4b0e73d 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/DataKeys.java
@@ -20,6 +20,7 @@
     // Banner imp tracking fields
     public static final String BANNER_IMPRESSION_MIN_VISIBLE_DIPS = "Banner-Impression-Min-Pixels";
     public static final String BANNER_IMPRESSION_MIN_VISIBLE_MS = "Banner-Impression-Min-Ms";
+    public static final String BANNER_IMPRESSION_PIXEL_COUNT_ENABLED = "Banner-Impression-Pixel-Count-Enabled";
 
     // Native fields
     public static final String IMPRESSION_MIN_VISIBLE_PERCENT = "Impression-Min-Visible-Percent";
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
index 258836f5..36423f9e 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySession.java
@@ -36,7 +36,7 @@
     @Nullable Boolean createVideoSession(@NonNull final Activity activity, @NonNull final View view,
             @NonNull final Set<String> buyerResources,
             @NonNull final Map<String, String> videoViewabilityTrackers);
-    @Nullable Boolean registerVideoObstructions(@NonNull final List<View> views);
+    @Nullable Boolean registerVideoObstruction(@NonNull final View view);
     @Nullable Boolean onVideoPrepared(@NonNull final View playerView, final int duration);
     @Nullable Boolean recordVideoEvent(@NonNull final VideoEvent event, final int playheadMillis);
     @Nullable Boolean endVideoSession();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
index 439a96d3..cf24e521 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/ExternalViewabilitySessionManager.java
@@ -11,7 +11,6 @@
 import com.mopub.mobileads.VastVideoConfig;
 
 import java.util.HashSet;
-import java.util.List;
 import java.util.Locale;
 import java.util.Set;
 
@@ -194,13 +193,13 @@ public void createVideoSession(@NonNull final Activity activity, @NonNull final
     /**
      * Prevents friendly obstructions from affecting viewability scores.
      *
-     * @param views Views in the same Window and a higher z-index as the video playing.
+     * @param view View in the same Window and a higher z-index as the video playing.
      */
-    public void registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public void registerVideoObstruction(@NonNull View view) {
+        Preconditions.checkNotNull(view);
 
         for (final ExternalViewabilitySession session : mViewabilitySessions) {
-            final Boolean successful = session.registerVideoObstructions(views);
+            final Boolean successful = session.registerVideoObstruction(view);
             logEvent(session, "register friendly obstruction", successful, true);
         }
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
index e4b96b6e..7a3c6152 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPub.java
@@ -13,7 +13,7 @@
 import static com.mopub.common.ExternalViewabilitySessionManager.ViewabilityVendor;
 
 public class MoPub {
-    public static final String SDK_VERSION = "4.19.0";
+    public static final String SDK_VERSION = "4.20.0";
 
     public enum LocationAwareness { NORMAL, TRUNCATED, DISABLED }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
index c60702bf..1f9d2d27 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoPubBrowser.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.graphics.Color;
 import android.graphics.drawable.Drawable;
+import android.os.Build;
 import android.os.Bundle;
 import android.support.annotation.NonNull;
 import android.view.Gravity;
@@ -48,6 +49,8 @@
     private DoubleTimeTracker dwellTimeTracker;
     private String mDspCreativeId;
 
+    private boolean mProgressBarAvailable;
+
     @NonNull
     public ImageButton getBackButton() {
         return mBackButton;
@@ -79,8 +82,10 @@ public void onCreate(Bundle savedInstanceState) {
 
         setResult(Activity.RESULT_OK);
 
-        getWindow().requestFeature(Window.FEATURE_PROGRESS);
-        getWindow().setFeatureInt(Window.FEATURE_PROGRESS, Window.PROGRESS_VISIBILITY_ON);
+        mProgressBarAvailable = getWindow().requestFeature(Window.FEATURE_PROGRESS);
+        if (mProgressBarAvailable) {
+            getWindow().setFeatureInt(Window.FEATURE_PROGRESS, Window.PROGRESS_VISIBILITY_ON);
+        }
 
         setContentView(getMoPubBrowserView());
 
@@ -96,7 +101,7 @@ private void initializeWebView() {
 
         webSettings.setJavaScriptEnabled(true);
 
-        /**
+        /*
          * Pinch to zoom is apparently not enabled by default on all devices, so
          * declare zoom support explicitly.
          * https://stackoverflow.com/questions/5125851/enable-disable-zoom-in-android-webview
@@ -110,16 +115,6 @@ private void initializeWebView() {
         mWebView.loadUrl(getIntent().getStringExtra(DESTINATION_URL_KEY));
 
         mWebView.setWebViewClient(new BrowserWebViewClient(this));
-
-        mWebView.setWebChromeClient(new WebChromeClient() {
-            public void onProgressChanged(WebView webView, int progress) {
-                setTitle("Loading...");
-                setProgress(progress * 100);
-                if (progress == 100) {
-                    setTitle(webView.getUrl());
-                }
-            }
-        });
     }
 
     private void initializeButtons() {
@@ -165,6 +160,7 @@ private void enableCookies() {
     protected void onPause() {
         super.onPause();
         CookieSyncManager.getInstance().stopSync();
+        mWebView.setWebChromeClient(null);
         WebViews.onPause(mWebView, isFinishing());
         // Pause dwell time counting.
         dwellTimeTracker.pause();
@@ -174,6 +170,20 @@ protected void onPause() {
     protected void onResume() {
         super.onResume();
         CookieSyncManager.getInstance().startSync();
+        mWebView.setWebChromeClient(new WebChromeClient() {
+            public void onProgressChanged(WebView webView, int progress) {
+                if (progress == 100) {
+                    setTitle(webView.getUrl());
+                } else {
+                    setTitle("Loading...");
+                }
+
+                if (mProgressBarAvailable && Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
+                    setProgress(progress * 100);
+                }
+            }
+        });
+
         mWebView.onResume();
 
         dwellTimeTracker.start();
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
index 8a3b6e9e..24450868 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/MoatViewabilitySession.java
@@ -107,6 +107,7 @@ public Boolean initialize(@NonNull final Context context) {
         // Pre-reflection code:
         // final MoatOptions options = new MoatOptions();
         // options.disableAdIdCollection = true;
+        // options.disableLocationServices = true;
         // MoatAnalytics.getInstance().start(options, application);
 
         try {
@@ -116,6 +117,9 @@ public Boolean initialize(@NonNull final Context context) {
             moatOptions.getClass().getField("disableAdIdCollection")
                     .setBoolean(moatOptions, true);
 
+            moatOptions.getClass().getField("disableLocationServices")
+                    .setBoolean(moatOptions, true);
+
             Object moatAnalytics = new Reflection.MethodBuilder(null, "getInstance")
                     .setStatic(MOAT_ANALYTICS_PATH)
                     .execute();
@@ -285,8 +289,8 @@ public Boolean createVideoSession(@NonNull final Activity activity, @NonNull fin
 
     @Override
     @Nullable
-    public Boolean registerVideoObstructions(@NonNull final List<View> views) {
-        Preconditions.checkNotNull(views);
+    public Boolean registerVideoObstruction(@NonNull final View view) {
+        Preconditions.checkNotNull(view);
 
         if (!isEnabled()) {
             return null;
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
index f9ac664f..02668325 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/common/UrlResolutionTask.java
@@ -74,6 +74,8 @@ protected String doInBackground(@Nullable String... urls) {
             return null;
         } catch (URISyntaxException e) {
             return null;
+        } catch (NullPointerException e) {
+            return null;
         }
 
         return previousUrl;
@@ -121,7 +123,11 @@ static String resolveRedirectLocation(@NonNull final String baseUrl,
                 result =  baseUri.resolve(redirectUrl).toString();
             } catch (IllegalArgumentException e) {
                 // Ensure the request is cancelled instead of resolving an intermediary URL
+                MoPubLog.e("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
                 throw new URISyntaxException(redirectUrl, "Unable to parse invalid URL");
+            } catch (NullPointerException e) {
+                MoPubLog.e("Invalid URL redirection. baseUrl=" + baseUrl + "\n redirectUrl=" + redirectUrl);
+                throw e;
             }
         }
 
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
index 4b26ded7..07081110 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/MoPubView.java
@@ -11,7 +11,6 @@
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.View;
-import android.webkit.WebViewDatabase;
 import android.widget.FrameLayout;
 
 import com.mopub.common.AdFormat;
@@ -65,25 +64,6 @@ public MoPubView(Context context, AttributeSet attrs) {
         setHorizontalScrollBarEnabled(false);
         setVerticalScrollBarEnabled(false);
 
-        try {
-            // There is a rare bug in Froyo/2.2 where creation of a WebView causes a
-            // NullPointerException. (https://code.google.com/p/android/issues/detail?id=10789)
-            // It happens when the WebView can't access the local file store to make a cache file.
-            // Here, we'll work around it by trying to create a file store and then just go inert
-            // if it's not accessible.
-            if (WebViewDatabase.getInstance(context) == null) {
-                MoPubLog.e("Disabling MoPub. Local cache file is inaccessible so MoPub will " +
-                        "fail if we try to create a WebView. Details of this Android bug found at:" +
-                        "https://code.google.com/p/android/issues/detail?id=10789");
-                return;
-            }
-        } catch (Exception e) {
-            // If anything goes wrong here, it's most likely due to not having a WebView at all.
-            // This happens when Android updates WebView.
-            MoPubLog.e("Disabling MoPub due to no WebView, or it's being updated", e);
-            return;
-        }
-
         mAdViewController = AdViewControllerFactory.create(context, this);
         registerScreenStateBroadcastReceiver();
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
index 128282f9..a1e67198 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mobileads/VastVideoViewController.java
@@ -33,7 +33,6 @@
 import com.mopub.mobileads.resource.DrawableConstants;
 
 import java.io.Serializable;
-import java.util.Arrays;
 import java.util.Map;
 
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
@@ -172,6 +171,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
         mExternalViewabilitySessionManager = new ExternalViewabilitySessionManager(activity);
         mExternalViewabilitySessionManager.createVideoSession(activity, mVideoView,
                 mVastVideoConfig);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mBlurredLastVideoFrameImageView);
 
         // Companion ad view, set to invisible initially to have it be drawn to calculate size
         mLandscapeCompanionAdView = createCompanionAdView(activity,
@@ -221,10 +221,6 @@ public void onGlobalLayout() {
         // Always add last to layout since it must be visible above all other views
         addCloseButtonWidget(activity, View.GONE);
 
-        mExternalViewabilitySessionManager.registerVideoObstructions(Arrays.asList(
-                mTopGradientStripWidget, mProgressBarWidget, mBottomGradientStripWidget,
-                mRadialCountdownWidget, mCtaButtonWidget, mSocialActionsView, mCloseButtonWidget));
-
         Handler mainHandler = new Handler(Looper.getMainLooper());
         mProgressCheckerRunnable = new VastVideoViewProgressRunnable(this, mVastVideoConfig,
                 mainHandler);
@@ -504,6 +500,7 @@ private void addTopGradientStripWidget(@NonNull final Context context) {
                 RelativeLayout.ALIGN_TOP,
                 getLayout().getId());
         getLayout().addView(mTopGradientStripWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mTopGradientStripWidget);
     }
 
     private void addBottomGradientStripWidget(@NonNull final Context context) {
@@ -517,6 +514,7 @@ private void addBottomGradientStripWidget(@NonNull final Context context) {
                 RelativeLayout.ABOVE,
                 mProgressBarWidget.getId());
         getLayout().addView(mBottomGradientStripWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mBottomGradientStripWidget);
     }
 
     private void addProgressBarWidget(@NonNull final Context context, int initialVisibility) {
@@ -524,12 +522,14 @@ private void addProgressBarWidget(@NonNull final Context context, int initialVis
         mProgressBarWidget.setAnchorId(mVideoView.getId());
         mProgressBarWidget.setVisibility(initialVisibility);
         getLayout().addView(mProgressBarWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mProgressBarWidget);
     }
 
     private void addRadialCountdownWidget(@NonNull final Context context, int initialVisibility) {
         mRadialCountdownWidget = new VastVideoRadialCountdownWidget(context);
         mRadialCountdownWidget.setVisibility(initialVisibility);
         getLayout().addView(mRadialCountdownWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mRadialCountdownWidget);
     }
 
     private void addCtaButtonWidget(@NonNull final Context context) {
@@ -541,6 +541,7 @@ private void addCtaButtonWidget(@NonNull final Context context) {
                 hasClickthroughUrl);
 
         getLayout().addView(mCtaButtonWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mCtaButtonWidget);
 
         mCtaButtonWidget.setOnTouchListener(mClickThroughListener);
 
@@ -556,6 +557,7 @@ private void addCloseButtonWidget(@NonNull final Context context, int initialVis
         mCloseButtonWidget.setVisibility(initialVisibility);
 
         getLayout().addView(mCloseButtonWidget);
+        mExternalViewabilitySessionManager.registerVideoObstruction(mCloseButtonWidget);
 
         final View.OnTouchListener closeOnTouchListener = new View.OnTouchListener() {
             @Override
@@ -632,6 +634,7 @@ View createCompanionAdView(@NonNull final Context context,
                         RelativeLayout.LayoutParams.MATCH_PARENT,
                         RelativeLayout.LayoutParams.MATCH_PARENT);
         getLayout().addView(relativeLayout, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(relativeLayout);
 
         VastWebView companionView = createCompanionVastWebView(context, vastCompanionAdConfig);
 
@@ -644,6 +647,8 @@ View createCompanionAdView(@NonNull final Context context,
         companionAdLayout.addRule(RelativeLayout.CENTER_IN_PARENT, RelativeLayout.TRUE);
 
         relativeLayout.addView(companionView, companionAdLayout);
+        mExternalViewabilitySessionManager.registerVideoObstruction(companionView);
+
         return companionView;
     }
 
@@ -695,9 +700,12 @@ View createSocialActionsView(@NonNull final Context context,
                 new RelativeLayout.LayoutParams(
                         RelativeLayout.LayoutParams.WRAP_CONTENT,
                         RelativeLayout.LayoutParams.WRAP_CONTENT);
+
         relativeLayout.addView(companionView, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(companionView);
 
         getLayout().addView(relativeLayout, companionAdLayout);
+        mExternalViewabilitySessionManager.registerVideoObstruction(relativeLayout);
 
         companionView.setVisibility(initialVisibility);
         return companionView;
@@ -753,6 +761,7 @@ public boolean shouldOverrideUrlLoading(WebView view, String url) {
         layoutParams.setMargins(leftMargin, topMargin, 0, 0);
 
         getLayout().addView(iconView, layoutParams);
+        mExternalViewabilitySessionManager.registerVideoObstruction(iconView);
 
         return iconView;
     }
diff --git a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
index 834483a9..ef3c6834 100644
--- a/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
+++ b/mopub-sdk/mopub-sdk-base/src/main/java/com/mopub/mraid/MraidController.java
@@ -1076,6 +1076,11 @@ public Context getContext() {
         return mContext;
     }
 
+    @NonNull
+    WeakReference<Activity> getWeakActivity() {
+        return mWeakActivity;
+    }
+
     @VisibleForTesting
     void handleSetOrientationProperties(final boolean allowOrientationChange,
             final MraidOrientation forceOrientation) throws MraidCommandException {
diff --git a/mopub-sdk/mopub-sdk-interstitial/build.gradle b/mopub-sdk/mopub-sdk-interstitial/build.gradle
index fe56e07f..9cddd85f 100644
--- a/mopub-sdk/mopub-sdk-interstitial/build.gradle
+++ b/mopub-sdk/mopub-sdk-interstitial/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
+    api project(':mopub-sdk:mopub-sdk-base')
 }
 
 project.description = 'MoPub Android SDK - Interstitial'
diff --git a/mopub-sdk/mopub-sdk-native-static/build.gradle b/mopub-sdk/mopub-sdk-native-static/build.gradle
index ba206ef6..191c33a9 100644
--- a/mopub-sdk/mopub-sdk-native-static/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-static/build.gradle
@@ -1,8 +1,8 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-base')
-    compile 'com.android.support:recyclerview-v7:26.1.0'
+    api project(':mopub-sdk:mopub-sdk-base')
+    api 'com.android.support:recyclerview-v7:26.1.0'
 }
 
 project.description = 'MoPub Android SDK - Native Static'
diff --git a/mopub-sdk/mopub-sdk-native-video/build.gradle b/mopub-sdk/mopub-sdk-native-video/build.gradle
index 6e83c328..885bf2e7 100644
--- a/mopub-sdk/mopub-sdk-native-video/build.gradle
+++ b/mopub-sdk/mopub-sdk-native-video/build.gradle
@@ -1,8 +1,8 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-native-static')
-    compile 'com.google.android.exoplayer:exoplayer:r2.4.4'
+    api project(':mopub-sdk:mopub-sdk-native-static')
+    api 'com.google.android.exoplayer:exoplayer:r2.4.4'
 }
 
 project.description = 'MoPub Android SDK - Native Video'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
index f9ad623a..c9fdc4fa 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/build.gradle
@@ -1,7 +1,7 @@
 apply from: '../shared-build.gradle'
 
 dependencies {
-    compile project(':mopub-sdk:mopub-sdk-interstitial')
+    api project(':mopub-sdk:mopub-sdk-interstitial')
 }
 
 project.description = 'MoPub Android SDK - Rewarded Video'
diff --git a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
index c7228b7c..73b1d9ed 100644
--- a/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
+++ b/mopub-sdk/mopub-sdk-rewardedvideo/src/main/java/com/mopub/mobileads/MoPubRewardedVideoManager.java
@@ -594,10 +594,11 @@ public void run() {
                         "Updating init settings for custom event %s with params %s",
                         customEventClassName, serverExtrasJsonString));
 
+                // https://github.com/robolectric/robolectric/issues/3641
                 sCustomEventSharedPrefs
                         .edit()
                         .putString(customEventClassName, serverExtrasJsonString)
-                        .apply();
+                        .commit();
             }
 
             // Load custom event
diff --git a/mopub-sdk/publisher.gradle b/mopub-sdk/publisher.gradle
index 9c40f84a..1fd54c43 100644
--- a/mopub-sdk/publisher.gradle
+++ b/mopub-sdk/publisher.gradle
@@ -31,8 +31,8 @@ android.libraryVariants.all { variant ->
         title = project.ext.displayName
         description "Generates Javadoc for $variant.name."
         source = variant.javaCompile.source
-        classpath += files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
-        classpath += project.configurations.compile
+        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+        classpath += configurations.compile
 
         options {
             links "http://docs.oracle.com/javase/7/docs/api/"
diff --git a/mopub-sdk/shared-build.gradle b/mopub-sdk/shared-build.gradle
index 7a2d3340..bc9e05c3 100644
--- a/mopub-sdk/shared-build.gradle
+++ b/mopub-sdk/shared-build.gradle
@@ -11,7 +11,7 @@ repositories {
 }
 
 project.group = 'com.mopub'
-project.version = '4.19.0'
+project.version = '4.20.0'
 
 android {
     compileSdkVersion 26
@@ -20,7 +20,7 @@ android {
     useLibrary 'org.apache.http.legacy'
 
     defaultConfig {
-        versionCode 57
+        versionCode 58
         versionName version
         minSdkVersion 16
         targetSdkVersion 26
@@ -76,6 +76,6 @@ android {
 }
 
 dependencies {
-    compile 'com.android.support:support-v4:26.1.0'
-    compile 'com.android.support:support-annotations:26.1.0'
+    api 'com.android.support:support-v4:26.1.0'
+    api 'com.android.support:support-annotations:26.1.0'
 }
diff --git a/mopub-sdk/src/main/AndroidManifest.xml b/mopub-sdk/src/main/AndroidManifest.xml
index 144e231e..438e00cd 100644
--- a/mopub-sdk/src/main/AndroidManifest.xml
+++ b/mopub-sdk/src/main/AndroidManifest.xml
@@ -5,7 +5,7 @@
     android:versionName="1.0">
     <uses-sdk
         android:minSdkVersion="9"
-        android:targetSdkVersion="23"/>
+        android:targetSdkVersion="26"/>
     <application/>
 </manifest>
 
diff --git a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
index 208a5002..636753a9 100644
--- a/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
+++ b/mopub-sdk/src/main/resources/fabric/com.mopub.sdk.android.mopub.properties
@@ -1,3 +1,3 @@
 fabric-identifier=com.mopub.sdk.android:mopub
-fabric-version=4.19.0+kit
+fabric-version=4.20.0+kit
 fabric-build-type=source
diff --git a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
index a9f91333..b932194d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/BrowserWebViewClientTest.java
@@ -15,7 +15,6 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -26,6 +25,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -171,7 +171,7 @@ public void shouldOverrideUrlLoading_withoutMatchingSupporedUrl_shouldReturnFals
     }
 
     private void makeDeeplinkResolvable(String deeplink) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
index 27a9597a..791acaac 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/MoPubTest.java
@@ -10,6 +10,7 @@
 import com.mopub.mobileads.MoPubRewardedVideoManager;
 import com.mopub.mobileads.MoPubRewardedVideos;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -58,6 +59,11 @@ public void setup() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void setBrowserAgent_withDefaultValue_shouldNotChangeBrowserAgent_shouldSetOverriddenFlag() {
         MoPub.setBrowserAgent(BrowserAgent.IN_APP);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
index dadf0efa..0331d892 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlActionTest.java
@@ -8,6 +8,7 @@
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -33,6 +34,11 @@ public void setUp() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void handleMopubScheme_shouldBeCaseInsensitive() throws Exception {
         assertUrlActionMatching(HANDLE_MOPUB_SCHEME, "mopub:", true);
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
index 909292e8..dd493629 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlHandlerTest.java
@@ -17,7 +17,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
@@ -39,6 +38,7 @@
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -941,12 +941,12 @@ private void verifyNoStartedActivity() {
     }
 
     private void makeDeeplinkResolvable(String deeplink) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW,
                 Uri.parse(deeplink)), new ResolveInfo());
     }
 
     private void makeIntentUrlResolvable(String intentUrl) throws URISyntaxException {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(
                 Intent.parseUri(intentUrl, Intent.URI_INTENT_SCHEME), new ResolveInfo());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
index 509175ed..a11feb12 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/UrlResolutionTaskTest.java
@@ -10,6 +10,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.mockito.internal.matchers.Null;
 import org.robolectric.annotation.Config;
 
 import java.io.IOException;
@@ -35,7 +36,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() {
-        MoPub.setBrowserAgent(MoPub.BrowserAgent.IN_APP);
+        MoPub.resetBrowserAgent();
     }
 
     @Test
@@ -134,12 +135,11 @@ public void resolveRedirectLocation_withResponseCode200_shouldReturnNull() throw
                 .isNull();
     }
 
-    @Test
-    public void resolveRedirectLocation_withoutLocation_shouldReturnNull() throws Exception {
-        setupMockHttpUrlConnection(200, null);
+    @Test(expected = NullPointerException.class)
+    public void resolveRedirectLocation_withResponseCode302_withoutLocation_shouldThrowException() throws Exception {
+        when(mockHttpUrlConnection.getResponseCode()).thenReturn(302);
 
-        assertThat(UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection))
-                .isNull();
+        UrlResolutionTask.resolveRedirectLocation(BASE_URL, mockHttpUrlConnection);
     }
 
     @Test(expected = URISyntaxException.class)
diff --git a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
index 7a5f2917..4eb764b4 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/test/support/SdkTestRunner.java
@@ -3,14 +3,12 @@
 import com.mopub.common.CacheService;
 import com.mopub.common.ClientMetadata;
 import com.mopub.common.MoPub;
-import com.mopub.common.MoPubHttpUrlConnection;
 import com.mopub.common.Preconditions;
 import com.mopub.common.event.EventDispatcher;
 import com.mopub.common.event.MoPubEvents;
 import com.mopub.common.factories.MethodBuilderFactory;
 import com.mopub.common.util.AsyncTasks;
 import com.mopub.common.util.DateAndTime;
-import com.mopub.common.util.Reflection;
 import com.mopub.common.util.test.support.ShadowAsyncTasks;
 import com.mopub.common.util.test.support.ShadowMoPubHttpUrlConnection;
 import com.mopub.common.util.test.support.ShadowReflection;
@@ -42,35 +40,19 @@
 import org.junit.runners.model.InitializationError;
 import org.mockito.MockitoAnnotations;
 import org.robolectric.DefaultTestLifecycle;
-import org.robolectric.RobolectricGradleTestRunner;
+import org.robolectric.RobolectricTestRunner;
 import org.robolectric.TestLifecycle;
-import org.robolectric.annotation.Config;
-import org.robolectric.internal.bytecode.InstrumentationConfiguration;
-import org.robolectric.manifest.AndroidManifest;
-import org.robolectric.res.FileFsFile;
-import org.robolectric.res.FsFile;
-import org.robolectric.util.concurrent.RoboExecutorService;
+import org.robolectric.android.util.concurrent.RoboExecutorService;
 
 import static com.mopub.common.MoPub.LocationAwareness;
 import static org.mockito.Mockito.mock;
 
-public class SdkTestRunner extends RobolectricGradleTestRunner {
+public class SdkTestRunner extends RobolectricTestRunner {
 
     public SdkTestRunner(Class<?> testClass) throws InitializationError {
         super(testClass);
     }
 
-    @Override
-    public InstrumentationConfiguration createClassLoaderConfig() {
-        InstrumentationConfiguration.Builder builder = InstrumentationConfiguration.newBuilder();
-        builder.addInstrumentedClass(AsyncTasks.class.getName());
-        builder.addInstrumentedClass(MoPubHttpUrlConnection.class.getName());
-        builder.addInstrumentedClass(Reflection.class.getName());
-        // To mitigate: https://github.com/robolectric/robolectric/issues/2129
-        builder.addInstrumentedPackage("org.xyz.testMp");
-        return builder.build();
-    }
-
     @Override
     protected Class<? extends TestLifecycle> getTestLifecycleClass() {
         return TestLifeCycleWithInjection.class;
@@ -112,26 +94,4 @@ public void prepareTest(Object test) {
             CacheService.clearAndNullCaches();
         }
     }
-
-    // custom AppManifest logic adapted from:
-    // https://gist.github.com/venator85/282df3677af9ecac56e5e4b91471cd8f
-    @Override
-    protected AndroidManifest getAppManifest(Config config) {
-        final AndroidManifest appManifest = super.getAppManifest(config);
-
-        if (appManifest.getAndroidManifestFile().exists()) {
-            return appManifest;
-        }
-
-        final FsFile androidManifestFile = FileFsFile.from(getModuleRootPath(config),
-                appManifest.getAndroidManifestFile().getPath()
-                        .replace("manifests/full", "manifests/aapt"));
-        return new AndroidManifest(androidManifestFile, appManifest.getResDirectory(),
-                appManifest.getAssetsDirectory());
-    }
-
-    private String getModuleRootPath(Config config) {
-        final String moduleRoot = config.constants().getResource("").toString().replace("file:", "");
-        return moduleRoot.substring(0, moduleRoot.indexOf("/build"));
-    }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
index 3c8af8cd..fa129c0d 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/DrawablesTest.java
@@ -2,18 +2,22 @@
 
 import android.app.Activity;
 
+import com.mopub.common.test.support.SdkTestRunner;
+
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.robolectric.RobolectricTestRunner;
+import org.robolectric.Robolectric;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class DrawablesTest {
     @Test
     public void createDrawable_shouldNotCacheDrawables() throws Exception {
-        assertThat(Drawables.BACKGROUND.createDrawable(new Activity()))
-                .isNotSameAs(Drawables.BACKGROUND.createDrawable(new Activity()));
+        assertThat(Drawables.BACKGROUND.createDrawable(
+                Robolectric.buildActivity(Activity.class).create().get())).isNotSameAs(
+                Drawables.BACKGROUND.createDrawable(
+                        Robolectric.buildActivity(Activity.class).create().get()));
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
index dd4a3ea5..52737211 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/IntentsTest.java
@@ -11,15 +11,15 @@
 import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.MoPubBrowser;
+import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.exceptions.IntentNotResolvableException;
 import com.mopub.exceptions.UrlParseException;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.robolectric.Robolectric;
-import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowApplication;
 
 import java.util.ArrayList;
@@ -30,8 +30,9 @@
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.stub;
+import static org.robolectric.Shadows.shadowOf;
 
-@RunWith(RobolectricTestRunner.class)
+@RunWith(SdkTestRunner.class)
 public class IntentsTest {
     private Activity activityContext;
     private Context applicationContext;
@@ -43,6 +44,11 @@ public void setUp() {
         MoPub.resetBrowserAgent();
     }
 
+    @After
+    public void tearDown() {
+        MoPub.resetBrowserAgent();
+    }
+
     @Test
     public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags() throws IntentNotResolvableException {
         Intents.startActivity(activityContext, new Intent());
@@ -53,7 +59,7 @@ public void startActivity_withActivityContext_shouldStartActivityWithNoNewFlags(
 
     @Test
     public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithoutNewTaskFlag() throws Exception {
-        Context context = new Activity();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
 
         final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
@@ -64,7 +70,8 @@ public void getStartActivityIntent_withActivityContext_shouldReturnIntentWithout
 
     @Test
     public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWithNewTaskFlag() throws Exception {
-        Context context = new Activity().getApplicationContext();
+        Context context = Robolectric.buildActivity(Activity.class)
+                .create().get().getApplicationContext();
 
         final Intent intent = Intents.getStartActivityIntent(context, MoPubBrowser.class, null);
 
@@ -75,7 +82,7 @@ public void getStartActivityIntent_withApplicationContext_shouldReturnIntentWith
 
     @Test
     public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() throws Exception {
-        Context context = new Activity();
+        Context context = Robolectric.buildActivity(Activity.class).create().get();
         Bundle bundle = new Bundle();
         bundle.putString("arbitrary key", "even more arbitrary value");
 
@@ -83,7 +90,8 @@ public void getStartActivityIntent_withBundle_shouldReturnIntentWithExtras() thr
 
         assertThat(intent.getComponent().getClassName()).isEqualTo(MoPubBrowser.class.getName());
         assertThat(Utils.bitMaskContainsFlag(intent.getFlags(), FLAG_ACTIVITY_NEW_TASK)).isFalse();
-        assertThat(intent.getExtras()).isEqualTo(bundle);
+        assertThat(intent.getExtras().size()).isEqualTo(1);
+        assertThat(intent.getExtras().get("arbitrary key")).isEqualTo("even more arbitrary value");
     }
 
     @Test
@@ -293,7 +301,7 @@ public void getPlayStoreUri_shouldNotBlowUpWithEmptyPackage() throws Exception {
     }
 
     private void makeUrlResolvable(String url) {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(
+        shadowOf(activityContext.getPackageManager()).addResolveInfoForIntent(
                 new Intent(Intent.ACTION_VIEW, Uri.parse(url)), new ResolveInfo());
     }
 }
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
index cfaa764b..a3d8cce8 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/ManifestUtilsTest.java
@@ -23,7 +23,6 @@
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
 import org.robolectric.RobolectricTestRunner;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.shadows.ShadowLog;
 import org.robolectric.shadows.ShadowToast;
 
@@ -37,6 +36,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(RobolectricTestRunner.class)
 public class ManifestUtilsTest {
@@ -96,11 +96,11 @@ public void checkNativeSdkActivitiesDeclared_shouldIncludeOneActivityDeclaration
 
     @Test
     public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -114,8 +114,8 @@ public void displayWarningForMissingActivities_withAllActivitiesDeclared_shouldN
     @Test
     public void displayWarningForMissingActivities_withoutInterstitialModule_withoutInterstitialActivitiesDeclared_shouldNotShowLogOrToast() throws Exception {
         removeInterstitialModule();
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -128,10 +128,10 @@ public void displayWarningForMissingActivities_withoutInterstitialModule_without
 
     @Test
      public void displayWarningForMissingActivities_withOneMissingActivity_shouldLogOnlyThatOne() throws Exception {
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
         // Here, we leave out MoPubBrowser on purpose
 
         ShadowLog.setupLogging();
@@ -194,11 +194,11 @@ public void displayWarningForMisconfiguredActivities_withAllActivitiesConfigured
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
         setDebugMode(true);
@@ -228,11 +228,11 @@ public Object answer(InvocationOnMock invocationOnMock) throws Throwable {
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(true);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, RewardedMraidActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MraidVideoPlayerActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubBrowser.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
 
@@ -260,7 +260,7 @@ public void displayWarningForMisconfiguredActivities_withOneMisconfiguredActivit
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         ShadowLog.setupLogging();
 
@@ -280,7 +280,7 @@ public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         setDebugMode(true);
 
@@ -300,7 +300,7 @@ public void displayWarningForMisconfiguredActivities_withMisconfiguredActivities
         when(mockActivitiyConfigCheck.hasFlag(any(Class.class), anyInt(), eq(ActivityInfo.CONFIG_SCREEN_SIZE))).thenReturn(false);
         ManifestUtils.setFlagCheckUtil(mockActivitiyConfigCheck);
 
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(context, MoPubActivity.class), mockResolveInfo);
 
         setDebugMode(false);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
index a2971b0f..651f0990 100644
--- a/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
+++ b/mopub-sdk/src/test/java/com/mopub/common/util/test/support/ShadowReflection.java
@@ -8,7 +8,8 @@
 import org.robolectric.annotation.Implements;
 import org.robolectric.util.ReflectionHelpers;
 
-import static org.robolectric.internal.Shadow.directlyOn;
+import static org.robolectric.shadow.api.Shadow.directlyOn;
+
 
 @Implements(Reflection.class)
 public class ShadowReflection {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
index 73423b79..0fc42a7f 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BannerVisibilityTrackerTest.java
@@ -274,7 +274,7 @@ public void isVisible_whenViewIsNull_shouldReturnFalse() throws Exception {
         assertThat(visibilityChecker.isVisible(null, null)).isFalse();
     }
 
-    static View createViewMock(final int visibility,
+    View createViewMock(final int visibility,
             final int visibleWidth,
             final int visibleHeight,
             final int viewWidth,
@@ -282,7 +282,7 @@ static View createViewMock(final int visibility,
             final boolean isParentSet,
             final boolean isOnScreen) {
         View view = mock(View.class);
-        when(view.getContext()).thenReturn(new Activity());
+        when(view.getContext()).thenReturn(activity);
         when(view.getVisibility()).thenReturn(visibility);
 
         when(view.getGlobalVisibleRect(any(Rect.class)))
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
index fa3edbba..5a5fff27 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/BaseInterstitialActivityTest.java
@@ -62,8 +62,7 @@ public void getBroadcastIdentifier_shouldReturnBroadcastIdFromIntent() throws Ex
         Intent intent = new Intent(context, TestInterstitialActivity.class);
         intent.putExtra(BROADCAST_IDENTIFIER_KEY, broadcastIdentifier);
 
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
                 .create().get();
         assertThat(subject.getBroadcastIdentifier()).isEqualTo(2222L);
     }
@@ -74,8 +73,7 @@ public void getBroadcastIdentifier_withMissingBroadCastId_shouldReturnNull() thr
         Intent intent = new Intent(context, TestInterstitialActivity.class);
         // This intent is missing a broadcastidentifier extra.
 
-        subject = Robolectric.buildActivity(TestInterstitialActivity.class)
-                .withIntent(intent)
+        subject = Robolectric.buildActivity(TestInterstitialActivity.class, intent)
                 .create().get();
 
         assertThat(subject.getBroadcastIdentifier()).isNull();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
index 18dd5961..a06edf16 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/CustomEventBannerAdapterTest.java
@@ -63,8 +63,6 @@ public void setUp() throws Exception {
         when(moPubView.getLocalExtras()).thenReturn(localExtras);
 
         serverExtras = new HashMap<String, String>();
-        serverExtras.put("key", "value");
-        serverExtras.put("another_key", "another_value");
         subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
 
         expectedLocalExtras = new HashMap<String, Object>();
@@ -72,6 +70,7 @@ public void setUp() throws Exception {
         expectedLocalExtras.put("broadcastIdentifier", BROADCAST_IDENTIFIER);
         expectedLocalExtras.put(DataKeys.AD_WIDTH, 320);
         expectedLocalExtras.put(DataKeys.AD_HEIGHT, 50);
+        expectedLocalExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, false);
 
         expectedServerExtras = new HashMap<String, String>();
 
@@ -149,11 +148,33 @@ public void loadAd_shouldPropagateLocationInLocalExtras() throws Exception {
 
     @Test
     public void loadAd_shouldPropagateServerExtrasToLoadBanner() throws Exception {
+        serverExtras.put("key", "value");
+        serverExtras.put("another_key", "another_value");
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
         subject.loadAd();
 
         expectedServerExtras.put("key", "value");
         expectedServerExtras.put("another_key", "another_value");
+        verify(banner).loadBanner(
+                any(Context.class),
+                eq(subject),
+                eq(expectedLocalExtras),
+                eq(expectedServerExtras)
+        );
+    }
+
+    @Test
+    public void loadAd_withVisibilityImpressionTrackingEnabled_shouldPropagateVisibilityImpressionTrackingEnabledFlagInLocalExtras() {
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        serverExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
+        subject = new CustomEventBannerAdapter(moPubView, CLASS_NAME, serverExtras, BROADCAST_IDENTIFIER, mockAdReport);
+
+        subject.loadAd();
 
+        expectedLocalExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, true);
+        expectedServerExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_DIPS, "1");
+        expectedServerExtras.put(DataKeys.BANNER_IMPRESSION_MIN_VISIBLE_MS, "0");
         verify(banner).loadBanner(
                 any(Context.class),
                 eq(subject),
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
index e5f40f61..9f190751 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/EventForwardingBroadcastReceiverTest.java
@@ -14,6 +14,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
 
@@ -22,11 +23,11 @@
 import java.util.Map;
 import java.util.Set;
 
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.MoPubInterstitial.InterstitialAdListener;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -49,7 +50,7 @@ public void setUp() throws Exception {
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         broadcastIdentifier = 27027027;
         subject = new EventForwardingBroadcastReceiver(customEventInterstitialListener, broadcastIdentifier);
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
     }
 
     @Ignore("Difficult with the number of test factories and mocking involved.")
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
index f824f149..90e7c77a 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlBannerTest.java
@@ -4,6 +4,7 @@
 import android.view.Gravity;
 import android.widget.FrameLayout;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.test.support.TestHtmlBannerWebViewFactory;
 import com.mopub.mobileads.test.support.TestMoPubViewFactory;
@@ -95,6 +96,28 @@ public void loadBanner_shouldPassParametersThrough() throws Exception {
         verify(htmlBannerWebView).loadHtmlResponse(responseBody);
     }
 
+    @Test
+    public void loadBanner_withTrueFlag_shouldSetBannerImpressionPixelCountEnabledTrue() {
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+
+        localExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, true);
+
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isTrue();
+    }
+
+    @Test
+    public void loadBanner_withFalseFlag_shouldSetBannerImpressionPixelCountEnabledFalse() {
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+
+        localExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, false);
+
+        subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
+
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+    }
+
     @Test
     public void onInvalidate_shouldDestroyTheHtmlWebView() throws Exception {
         subject.loadBanner(context, customEventBannerListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
index d641f19c..851b090d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlInterstitialTest.java
@@ -10,6 +10,7 @@
 import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
@@ -22,9 +23,9 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.NETWORK_INVALID_STATE;
 import static org.fest.assertions.api.Assertions.assertThat;
@@ -50,7 +51,7 @@ public void setUp() throws Exception {
 
         expectedResponse = "this is the response";
         htmlInterstitialWebView = TestHtmlInterstitialWebViewFactory.getSingletonMock();
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         customEventInterstitialListener = mock(CustomEventInterstitialListener.class);
         localExtras = new HashMap<String, Object>();
         serverExtras = new HashMap<String, String>();
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
index c0bee0bb..a41437c3 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/HtmlWebViewClientTest.java
@@ -1,6 +1,7 @@
 package com.mopub.mobileads;
 
 import android.app.Activity;
+import android.app.Application;
 import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
@@ -16,7 +17,6 @@
 import org.junit.runner.RunWith;
 import org.mockito.ArgumentCaptor;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
@@ -31,6 +31,7 @@
 import static org.mockito.Mockito.stub;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -52,6 +53,7 @@ public void setUp() throws Exception {
         when(htmlWebView.wasClicked()).thenReturn(true);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, CLICKTHROUGH_URL,
                 "redirect", "dsp_creative_id");
+        while(shadowOf((Application) context).getNextStartedActivity() != null) {}
     }
 
     @Test
@@ -94,7 +96,7 @@ public void shouldOverrideUrlLoading_withCustomApplicationIntent_withUserClick_a
         String customUrl = "myintent://something";
         stub(htmlWebView.wasClicked()).toReturn(true);
         subject = new HtmlWebViewClient(htmlWebViewListener, htmlWebView, null, null, null);
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
+        shadowOf(context.getPackageManager()).addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri.parse(customUrl)), new ResolveInfo());
 
         boolean didOverrideUrl = subject.shouldOverrideUrlLoading(htmlWebView, customUrl);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
new file mode 100644
index 00000000..318911ba
--- /dev/null
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/IntentIsEqual.java
@@ -0,0 +1,65 @@
+package com.mopub.mobileads;
+
+import android.content.Intent;
+
+import org.hamcrest.BaseMatcher;
+import org.hamcrest.Description;
+
+/**
+ * Matcher to compare Intents by components of the Intent.
+ */
+public class IntentIsEqual extends BaseMatcher<Intent> {
+
+    private Intent intent;
+
+    public IntentIsEqual(final Intent intent) {
+        this.intent = intent;
+    }
+
+    @Override
+    public boolean matches(final Object item) {
+        if (!(item instanceof Intent)) {
+            return false;
+        }
+        Intent otherIntent = (Intent) item;
+        if (intent.getExtras() == null && otherIntent.getExtras() != null) {
+            return false;
+        } else if (intent.getExtras() != null && otherIntent.getExtras() == null) {
+            return false;
+        } else if (intent.getExtras() != null && otherIntent.getExtras() != null) {
+            if (intent.getExtras().size() != otherIntent.getExtras().size()) {
+                return false;
+            }
+            for(String key : intent.getExtras().keySet()) {
+                if (!intent.getExtras().get(key).equals(otherIntent.getExtras().get(key))) {
+                    return false;
+                }
+            }
+        }
+
+        if (intent.getAction() != null && !intent.getAction().equals(otherIntent.getAction())) {
+            return false;
+        } else if (intent.getAction() == null && otherIntent.getAction() != null) {
+            return false;
+        }
+
+        if (intent.getComponent() != null && !intent.getComponent().equals(otherIntent.getComponent())) {
+            return false;
+        } else if (intent.getComponent() == null && otherIntent.getComponent() != null) {
+            return false;
+        }
+
+        if (intent.getData() != null && !intent.getData().equals(otherIntent.getData())) {
+            return false;
+        } else if (intent.getData() == null && otherIntent.getData() != null) {
+            return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public void describeTo(final Description description) {
+        description.appendText(intent.toString() + " extras: " + intent.getExtras());
+    }
+}
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
index b4422c18..d2b0381c 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubActivityTest.java
@@ -21,27 +21,28 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
+import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
-import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowActivity;
 import org.robolectric.shadows.ShadowApplication;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-import org.robolectric.util.ActivityController;
 
 import static com.mopub.common.DataKeys.CLICKTHROUGH_URL_KEY;
 import static com.mopub.common.DataKeys.CREATIVE_ORIENTATION_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.common.DataKeys.REDIRECT_URL_KEY;
 import static com.mopub.common.DataKeys.SCROLLABLE_KEY;
-import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_CLICK;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
+import static com.mopub.mobileads.CustomEventInterstitial.CustomEventInterstitialListener;
 import static com.mopub.mobileads.EventForwardingBroadcastReceiverTest.getIntentForActionAndIdentifier;
 import static com.mopub.mobileads.MoPubErrorCode.UNSPECIFIED;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.argThat;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
@@ -79,7 +80,8 @@ public void setUp() throws Exception {
                 EXPECTED_REDIRECT_URL,
                 EXPECTED_CLICKTHROUGH_URL, EXPECTED_ORIENTATION, testBroadcastIdentifier);
 
-        final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(MoPubActivity.class).withIntent(moPubActivityIntent);
+        final ActivityController<MoPubActivity> subjectController = Robolectric.buildActivity(
+                MoPubActivity.class, moPubActivityIntent);
         subject = subjectController.get();
         ShadowLocalBroadcastManager.getInstance(subject).registerReceiver(broadcastReceiver,
                 new EventForwardingBroadcastReceiver(customEventInterstitialListener,
@@ -264,8 +266,8 @@ public void broadcastingInterstitialListener_onInterstitialFailed_shouldBroadcas
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialFailed(null);
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
-        assertThat(((ShadowActivity) ShadowExtractor.extract(subject)).isFinishing()).isTrue();
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
+        assertThat(((ShadowActivity) Shadow.extract(subject)).isFinishing()).isTrue();
     }
 
     @Test
@@ -275,14 +277,14 @@ public void broadcastingInterstitialListener_onInterstitialClicked_shouldBroadca
         MoPubActivity.BroadcastingInterstitialListener broadcastingInterstitialListener = ((MoPubActivity) subject).new BroadcastingInterstitialListener();
         broadcastingInterstitialListener.onInterstitialClicked();
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
     public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
         Intent expectedIntent = getIntentForActionAndIdentifier(ACTION_INTERSTITIAL_SHOW, testBroadcastIdentifier);
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
@@ -291,7 +293,7 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
 
         subject.onDestroy();
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class), argThat(new IntentIsEqual(expectedIntent)));
     }
 
     private FrameLayout getContentView() {
@@ -304,5 +306,6 @@ protected void resetMockedView(View view) {
                 new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
                         FrameLayout.LayoutParams.WRAP_CONTENT));
     }
+
 }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
index 8e0af80a..4a5d95a8 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubConversionTrackerTest.java
@@ -14,6 +14,7 @@
 import org.mockito.ArgumentCaptor;
 import org.mockito.Captor;
 import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
 
 import static org.mockito.Matchers.any;
@@ -38,7 +39,7 @@
     @Before
     public void setUp() throws Exception {
         subject = new MoPubConversionTracker();
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         Networking.setRequestQueueForTesting(mockRequestQueue);
     }
 
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
index a0f28b9a..44a7051d 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MoPubRewardedVideoManagerTest.java
@@ -90,6 +90,10 @@
     public void setup() {
         mActivity = Robolectric.buildActivity(Activity.class).create().get();
         MoPubRewardedVideoManager.init(mActivity);
+        // The fact that next call fixes issues in multiple tests proves that Robolectric doesn't
+        // teardown singletons properly between tests.
+        MoPubRewardedVideoManager.updateActivity(mActivity);
+
         MoPubRewardedVideoManager.setVideoListener(mockVideoListener);
 
         mTestCustomEventSharedPrefs = SharedPreferencesHelper.getSharedPreferences(
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
index a12135a7..0985504b 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidActivityTest.java
@@ -26,9 +26,9 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
+import org.robolectric.android.controller.ActivityController;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.support.v4.ShadowLocalBroadcastManager;
-import org.robolectric.util.ActivityController;
 
 import static com.mopub.common.DataKeys.BROADCAST_IDENTIFIER_KEY;
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
@@ -331,7 +331,8 @@ public void onPause_shouldOnPauseMraidView() throws Exception {
     @Test
     public void onResume_shouldResumeMraidView() throws Exception {
         subject.onCreate(null);
-        Shadows.shadowOf(subject).pauseAndThenResume();
+        activityController.pause();
+        activityController.resume();
 
         verify(mockMraidWebView).onResume();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
index 49eea165..9db1e540 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/MraidVideoPlayerActivityTest.java
@@ -171,7 +171,8 @@ public void onStartActivityForResult_shouldStartAnActivityWithRelevantRequestCod
         final ShadowActivity.IntentForResult intentForResult = Shadows.shadowOf(subject).getNextStartedActivityForResult();
 
         assertThat(intentForResult.intent.getComponent().getClassName()).isEqualTo("com.mopub.common.MoPubBrowser");
-        assertThat(intentForResult.intent.getExtras()).isEqualTo(expectedExtras);
+        assertThat(intentForResult.intent.getExtras().getString("hello")).isEqualTo(expectedExtras.getString("hello"));
+        assertThat(intentForResult.intent.getExtras().size()).isEqualTo(expectedExtras.size());
         assertThat(intentForResult.requestCode).isEqualTo(100);
     }
 
@@ -198,8 +199,7 @@ public void createVideoViewController_withNativeVideoViewControllerReflectionCon
     private void initializeSubjectForMraid() {
         intent.putExtra(BaseVideoPlayerActivity.VIDEO_CLASS_EXTRAS_KEY, "mraid");
 
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class, intent)
                 .create()
                 .get();
     }
@@ -210,8 +210,7 @@ private void initializeSubjectForVast() {
         vastVideoConfig.setDiskMediaFileUrl("video_path");
         intent.putExtra(VastVideoViewController.VAST_VIDEO_CONFIG, vastVideoConfig);
 
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class, intent)
                 .create()
                 .get();
     }
@@ -235,8 +234,7 @@ private void initializeSubjectForNative() {
         NativeVideoController.setForId(123, mockVideoController);
         intent.putExtras(additionalExtras);
 
-        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class)
-                .withIntent(intent)
+        subject = Robolectric.buildActivity(MraidVideoPlayerActivity.class, intent)
                 .create()
                 .get();
     }
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
index 540e6e2b..65c07b52 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/RewardedMraidActivityTest.java
@@ -43,8 +43,8 @@ public void setup() {
         Context context = Robolectric.buildActivity(Activity.class).create().get();
         Intent intent = RewardedMraidActivity.createIntent(context, mockAdReport, HTML_DATA,
                 broadcastIdentifier, REWARDED_DURATION_IN_SECONDS, shouldRewardOnClick);
-        subject = Robolectric.buildActivity(RewardedMraidActivity.class)
-                .withIntent(intent).create().get();
+        subject = Robolectric.buildActivity(RewardedMraidActivity.class, intent)
+                .create().get();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
index 8ff23e7a..0c9de71e 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastCompanionAdConfigTest.java
@@ -17,13 +17,13 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -81,13 +81,12 @@ public void handleClick_shouldNotTrackClick() throws Exception {
         verifyNoMoreInteractions(mockRequestQueue);
     }
 
-
     @Test
     public void handleClick_shouldOpenMoPubBrowser() throws Exception {
         subject.handleClick(context, 1, null, "dsp_creative_id");
 
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
+        Robolectric.flushBackgroundThreadScheduler();
+        Intent startedActivity = shadowOf((Activity) context).getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
index 3a636ccb..b6375b96 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastIconConfigTest.java
@@ -16,13 +16,13 @@
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowApplication;
 
 import static com.mopub.common.VolleyRequestMatcher.isUrl;
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.argThat;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -97,8 +97,8 @@ public void handleClick_shouldNotTrackClick() throws Exception {
     public void handleClick_shouldOpenMoPubBrowser() throws Exception {
         subject.handleClick(context, null, dspCreativeId);
 
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedActivity = ShadowApplication.getInstance().getNextStartedActivity();
+        Robolectric.flushBackgroundThreadScheduler();
+        Intent startedActivity = shadowOf((Activity) context).getNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo("com.mopub.common.MoPubBrowser");
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY))
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
index 461d72a4..80435168 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/VastVideoViewControllerTest.java
@@ -38,14 +38,13 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.internal.ShadowExtractor;
+import org.robolectric.shadow.api.Shadow;
 import org.robolectric.shadows.ShadowApplication;
-import org.robolectric.shadows.ShadowImageView;
 import org.robolectric.shadows.ShadowRelativeLayout;
 import org.robolectric.shadows.ShadowTextView;
 import org.robolectric.shadows.ShadowVideoView;
+import org.robolectric.shadows.ShadowView;
 import org.robolectric.shadows.httpclient.FakeHttp;
 import org.robolectric.shadows.httpclient.RequestMatcher;
 import org.robolectric.shadows.httpclient.TestHttpResponse;
@@ -57,8 +56,8 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
 import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;
+import static android.content.pm.ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_DISMISS;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_FAIL;
 import static com.mopub.common.IntentActions.ACTION_INTERSTITIAL_SHOW;
@@ -90,6 +89,7 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class, shadows = {ShadowVastVideoView.class})
@@ -252,7 +252,7 @@ public void constructor_shouldAddCtaButtonWidgetToLayoutAndSetInvisibleWithOnTou
         VastVideoCtaButtonWidget ctaButtonWidget = subject.getCtaButtonWidget();
         assertThat(ctaButtonWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(ctaButtonWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView ctaButtonWidgetShadow = Shadows.shadowOf(ctaButtonWidget);
+        ShadowView ctaButtonWidgetShadow = shadowOf(ctaButtonWidget);
         assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isNotNull();
         assertThat(ctaButtonWidgetShadow.getOnTouchListener()).isEqualTo(
                 getShadowVideoView().getOnTouchListener());
@@ -265,7 +265,7 @@ public void constructor_shouldAddProgressBarWidgetToLayoutAndSetInvisibleWithNoL
         VastVideoProgressBarWidget progressBarWidget = subject.getProgressBarWidget();
         assertThat(progressBarWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(progressBarWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView progressBarWidgetShadow = Shadows.shadowOf(progressBarWidget);
+        ShadowView progressBarWidgetShadow = shadowOf(progressBarWidget);
         assertThat(progressBarWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -276,7 +276,7 @@ public void constructor_shouldAddRadialCountdownWidgetToLayoutAndSetInvisibleWit
         VastVideoRadialCountdownWidget radialCountdownWidget = subject.getRadialCountdownWidget();
         assertThat(radialCountdownWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(radialCountdownWidget.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView radialCountdownWidgetShadow = Shadows.shadowOf(radialCountdownWidget);
+        ShadowView radialCountdownWidgetShadow = shadowOf(radialCountdownWidget);
         assertThat(radialCountdownWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -320,13 +320,13 @@ public void constructor_shouldAddCloseButtonWidgetToLayoutAndSetToGoneWithOnTouc
         assertThat(closeButtonWidget.getParent()).isEqualTo(subject.getLayout());
         assertThat(closeButtonWidget.getVisibility()).isEqualTo(View.GONE);
 
-        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) Shadows.shadowOf(closeButtonWidget);
+        ShadowRelativeLayout closeButtonWidgetShadow = (ShadowRelativeLayout) shadowOf(closeButtonWidget);
         assertThat(closeButtonWidgetShadow.getOnTouchListener()).isNull();
 
-        ShadowImageView closeButtonImageViewShadow = Shadows.shadowOf(closeButtonWidget.getImageView());
+        ShadowView closeButtonImageViewShadow = shadowOf(closeButtonWidget.getImageView());
         assertThat(closeButtonImageViewShadow.getOnTouchListener()).isNotNull();
 
-        ShadowTextView closeButtonTextViewShadow = Shadows.shadowOf(closeButtonWidget.getTextView());
+        ShadowTextView closeButtonTextViewShadow = shadowOf(closeButtonWidget.getTextView());
         assertThat(closeButtonTextViewShadow.getOnTouchListener()).isNotNull();
     }
 
@@ -337,7 +337,7 @@ public void constructor_shouldAddTopGradientStripWidgetToLayoutWithNoListeners()
         VastVideoGradientStripWidget topGradientStripWidget = subject.getTopGradientStripWidget();
         assertThat(topGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
 
-        ShadowImageView topGradientStripWidgetShadow = Shadows.shadowOf(topGradientStripWidget);
+        ShadowView topGradientStripWidgetShadow = shadowOf(topGradientStripWidget);
         assertThat(topGradientStripWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -348,7 +348,7 @@ public void constructor_shouldAddBottomGradientStripWidgetToLayoutWithNoListener
         VastVideoGradientStripWidget bottomGradientStripWidget = subject.getBottomGradientStripWidget();
         assertThat(bottomGradientStripWidget.getParent()).isEqualTo(subject.getLayout());
 
-        ShadowImageView bottomGradientStripWidgetShadow = Shadows.shadowOf(bottomGradientStripWidget);
+        ShadowView bottomGradientStripWidgetShadow = shadowOf(bottomGradientStripWidget);
         assertThat(bottomGradientStripWidgetShadow.getOnTouchListener()).isNull();
     }
 
@@ -359,14 +359,14 @@ public void constructor_shouldAddBlurredLastVideoFrameWidgetToLayoutAndSetInvisi
         ImageView blurredLastVideoFrameImageView = subject.getBlurredLastVideoFrameImageView();
         assertThat(blurredLastVideoFrameImageView.getParent()).isEqualTo(subject.getLayout());
         assertThat(blurredLastVideoFrameImageView.getVisibility()).isEqualTo(View.INVISIBLE);
-        ShadowImageView blurredLastVideoFrameImageViewShadow = Shadows.shadowOf(blurredLastVideoFrameImageView);
+        ShadowView blurredLastVideoFrameImageViewShadow = shadowOf(blurredLastVideoFrameImageView);
         assertThat(blurredLastVideoFrameImageViewShadow.getOnTouchListener()).isNull();
     }
 
     @Test
     public void constructor_shouldSetVideoListenersAndVideoPath() throws Exception {
         initializeSubject();
-        ShadowVideoView videoView = Shadows.shadowOf(subject.getVideoView());
+        ShadowVideoView videoView = shadowOf(subject.getVideoView());
 
         assertThat(videoView.getOnCompletionListener()).isNotNull();
         assertThat(videoView.getOnErrorListener()).isNotNull();
@@ -551,7 +551,8 @@ public void onCreate_shouldBroadcastInterstitialShow() throws Exception {
 
         Robolectric.getForegroundThreadScheduler().unPause();
         subject.onCreate();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class),
+                argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
@@ -665,7 +666,8 @@ public void onDestroy_shouldBroadcastInterstitialDismiss() throws Exception {
         subject.onDestroy();
         Robolectric.getForegroundThreadScheduler().unPause();
 
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class),
+                argThat(new IntentIsEqual(expectedIntent)));
     }
 
     @Test
@@ -784,7 +786,7 @@ public void onTouch_withTouchUp_whenVideoLessThan16Seconds_andClickAfterEnd_shou
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
         Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+        final Intent startedActivity = shadowOf((Activity) context).peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
@@ -824,7 +826,7 @@ public void onTouch_withTouchUp_whenVideoLongerThan16Seconds_andClickAfter5Secon
         getShadowVideoView().getOnTouchListener().onTouch(null, GestureUtils.createActionUp(0, 0));
 
         Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        final Intent startedActivity = ShadowApplication.getInstance().peekNextStartedActivity();
+        final Intent startedActivity = shadowOf((Activity) context).peekNextStartedActivity();
         assertThat(startedActivity.getComponent().getClassName())
                 .isEqualTo(MoPubBrowser.class.getName());
         assertThat(startedActivity.getStringExtra(MoPubBrowser.DESTINATION_URL_KEY)).isEqualTo(
@@ -1197,7 +1199,7 @@ public void onPrepared_shouldSetBlurredLastVideoFrame() throws Exception {
         assertThat(
                 ((BitmapDrawable) blurredLastVideoFrameImageView.getDrawable()).getBitmap()).isNotNull();
 
-        ShadowImageView imageView = Shadows.shadowOf(subject.getBlurredLastVideoFrameImageView());
+        ShadowView imageView = shadowOf(subject.getBlurredLastVideoFrameImageView());
         assertThat(imageView.getOnTouchListener()).isNull();
     }
 
@@ -1486,7 +1488,8 @@ public void onError_shouldFireVideoErrorAndReturnFalse() throws Exception {
         Robolectric.getForegroundThreadScheduler().unPause();
 
         assertThat(result).isFalse();
-        verify(broadcastReceiver).onReceive(any(Context.class), eq(expectedIntent));
+        verify(broadcastReceiver).onReceive(any(Context.class),
+                argThat(new IntentIsEqual(expectedIntent)));
         assertThat(subject.getVideoError()).isTrue();
     }
 
@@ -2084,7 +2087,7 @@ public void onClickCloseButtonImageView_whenCloseButtonIsVisible_shouldFireClose
         // We don't have direct access to the CloseButtonWidget icon's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
         View.OnTouchListener closeButtonImageViewOnTouchListener =
-                Shadows.shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
+                shadowOf(subject.getCloseButtonWidget().getImageView()).getOnTouchListener();
         closeButtonImageViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
 
         verify(mockRequestQueue).add(
@@ -2107,7 +2110,7 @@ public void onClickCloseButtonTextView_whenCloseButtonIsVisible_shouldFireCloseT
         // We don't have direct access to the CloseButtonWidget text's close event, so we manually
         // invoke its onTouchListener's onTouch callback with a fake MotionEvent.ACTION_UP action.
         View.OnTouchListener closeButtonTextViewOnTouchListener =
-                Shadows.shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
+                shadowOf(subject.getCloseButtonWidget().getTextView()).getOnTouchListener();
         closeButtonTextViewOnTouchListener.onTouch(null, GestureUtils.createActionUp(0, 0));
 
         verify(mockRequestQueue).add(
@@ -2239,7 +2242,7 @@ private void setVideoViewParams(int currentPosition, int duration) throws Illega
     }
 
     private ShadowVastVideoView getShadowVideoView() {
-        return (ShadowVastVideoView) ShadowExtractor.extract(subject.getVastVideoView());
+        return (ShadowVastVideoView) Shadow.extract(subject.getVastVideoView());
     }
 
     private void setViewabilityTrackersTracked(VastVideoConfig vastVideoConfig) {
diff --git a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
index feb326a2..a284e863 100644
--- a/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mobileads/ViewGestureDetectorTest.java
@@ -11,6 +11,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
+import org.robolectric.Robolectric;
 import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowGestureDetector;
@@ -34,7 +35,7 @@
 
     @Before
     public void setUp() throws Exception {
-        context = new Activity();
+        context = Robolectric.buildActivity(Activity.class).create().get();
         view = mock(View.class);
         stub(view.getWidth()).toReturn(320);
         stub(view.getHeight()).toReturn(50);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
index ff0c47be..6de66a89 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidBannerTest.java
@@ -4,6 +4,7 @@
 import android.content.Context;
 import android.view.View;
 
+import com.mopub.common.DataKeys;
 import com.mopub.common.test.support.SdkTestRunner;
 import com.mopub.mobileads.BuildConfig;
 import com.mopub.mobileads.test.support.TestMraidControllerFactory;
@@ -22,6 +23,7 @@
 import static com.mopub.common.DataKeys.HTML_RESPONSE_BODY_KEY;
 import static com.mopub.mobileads.CustomEventBanner.CustomEventBannerListener;
 import static com.mopub.mobileads.MoPubErrorCode.MRAID_LOAD_ERROR;
+import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.eq;
 import static org.mockito.Mockito.verify;
@@ -61,6 +63,28 @@ public void loadBanner_whenExtrasAreMalformed_shouldNotifyBannerListenerFailureA
         verify(mockBannerListener).onBannerFailed(eq(MRAID_LOAD_ERROR));
     }
 
+    @Test
+    public void loadBanner_withTrueFlag_shouldSetBannerImpressionPixelCountEnabledTrue() {
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+
+        localExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, true);
+
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isTrue();
+    }
+
+    @Test
+    public void loadBanner_withFalseFlag_shouldSetBannerImpressionPixelCountEnabledFalse() {
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+
+        localExtras.put(DataKeys.BANNER_IMPRESSION_PIXEL_COUNT_ENABLED, false);
+
+        subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
+
+        assertThat(subject.isBannerImpressionPixelCountEnabled()).isFalse();
+    }
+
     @Test
     public void invalidate_shouldDestroyMraidController() {
         subject.loadBanner(context, mockBannerListener, localExtras, serverExtras);
diff --git a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
index f439272b..2554fe80 100644
--- a/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/mraid/MraidControllerTest.java
@@ -38,7 +38,6 @@
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.stubbing.Answer;
 import org.robolectric.Robolectric;
-import org.robolectric.RuntimeEnvironment;
 import org.robolectric.annotation.Config;
 import org.robolectric.shadows.ShadowApplication;
 
@@ -57,6 +56,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.robolectric.Shadows.shadowOf;
 
 @RunWith(SdkTestRunner.class)
 @Config(constants = BuildConfig.class)
@@ -508,7 +508,7 @@ public void handleOpen_withMalformedMoPubNativeBrowserUrl_shouldNotStartNewActiv
     @Test
     public void handleOpen_withApplicationUrl_shouldStartNewIntent() {
         String applicationUrl = "amzn://blah";
-        RuntimeEnvironment.getRobolectricPackageManager().addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
+        shadowOf(activity.getPackageManager()).addResolveInfoForIntent(new Intent(Intent.ACTION_VIEW, Uri
                 .parse(applicationUrl)), new ResolveInfo());
 
         subject.handleOpen(applicationUrl);
@@ -529,8 +529,8 @@ public void handleOpen_withHttpApplicationUrl_shouldStartMoPubBrowser() {
 
         subject.handleOpen(applicationUrl);
 
-        Robolectric.getBackgroundThreadScheduler().advanceBy(0);
-        Intent startedIntent = ShadowApplication.getInstance().getNextStartedActivity();
+        Robolectric.flushBackgroundThreadScheduler();
+        Intent startedIntent = shadowOf(activity).getNextStartedActivity();
         assertThat(startedIntent).isNotNull();
         // Since we are not using an Activity context, we should have FLAG_ACTIVITY_NEW_TASK
         assertThat(Utils.bitMaskContainsFlag(startedIntent.getFlags(),
diff --git a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
index 9b484696..55e6d9f1 100644
--- a/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/nativeads/NativeFullScreenVideoViewTest.java
@@ -29,9 +29,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.robolectric.Robolectric;
-import org.robolectric.Shadows;
 import org.robolectric.annotation.Config;
-import org.robolectric.shadows.ShadowConfiguration;
 
 import static org.fest.assertions.api.Assertions.assertThat;
 import static org.mockito.Matchers.any;
@@ -72,17 +70,15 @@
     @Mock SurfaceTexture mockSurfaceTexture;
     @Mock RectF mockRectF;
     @Mock Paint mockPaint;
-    private ShadowConfiguration shadowConfiguration;
+    private Configuration configuration;
 
     @Before
     public void setUp() {
         context = Robolectric.buildActivity(Activity.class).create().get();
 
-        shadowConfiguration = Shadows.shadowOf(context.getResources().getConfiguration());
-        Configuration configuration = new Configuration();
+        configuration = context.getResources().getConfiguration();
         configuration.screenWidthDp = screenWidthDp;
         configuration.screenHeightDp = screenHeightDp;
-        shadowConfiguration.setTo(configuration);
 
         videoWidthLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp, context);
         videoHeightLandscapePx = Dips.dipsToIntPixels((float) screenWidthDp * 9 / 16, context);
@@ -341,10 +337,8 @@ public void setMode_withModeFinished_shouldUpdateVisibilityAppropriately() throw
 
     @Test
     public void setOrientation_withLandscape_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
-        Configuration configuration = new Configuration();
         configuration.screenWidthDp = screenWidthDp;
         configuration.screenHeightDp = screenHeightDp;
-        shadowConfiguration.setTo(configuration);
 
         subject.setOrientation(Configuration.ORIENTATION_LANDSCAPE);
 
@@ -358,10 +352,8 @@ public void setOrientation_withLandscape_shouldSetWidthAndHeightOfVideoTextureAp
 
     @Test
     public void setOrientation_withPortrait_shouldSetWidthAndHeightOfVideoTextureAppropriately() throws Exception {
-        Configuration configuration = new Configuration();
         configuration.screenWidthDp = screenHeightDp;
         configuration.screenHeightDp = screenWidthDp;
-        shadowConfiguration.setTo(configuration);
 
         subject.setOrientation(Configuration.ORIENTATION_PORTRAIT);
 
diff --git a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
index 094878e1..80aa77fc 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/AdRequestTest.java
@@ -6,6 +6,7 @@
 import com.mopub.common.AdFormat;
 import com.mopub.common.AdType;
 import com.mopub.common.DataKeys;
+import com.mopub.common.MoPub;
 import com.mopub.common.MoPub.BrowserAgent;
 import com.mopub.common.event.BaseEvent;
 import com.mopub.common.event.EventDispatcher;
@@ -82,6 +83,7 @@ public void teardown() {
         // Reset our locale for other tests.
         Locale.setDefault(Locale.US);
         MoPubEvents.setEventDispatcher(null);
+        MoPub.resetBrowserAgent();
     }
 
     @Test
diff --git a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
index 01ba66f4..0395851f 100644
--- a/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
+++ b/mopub-sdk/src/test/java/com/mopub/network/CustomSSLSocketFactoryTest.java
@@ -9,6 +9,7 @@
 import com.mopub.TestSdkHelper;
 import com.mopub.mobileads.BuildConfig;
 
+import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -45,6 +46,7 @@
     private CustomSSLSocketFactory subject;
     private SSLCertificateSocketFactory mockSSLCertificateSocketFactory;
     private SSLSocketWithSetHostname mockSSLSocket;
+    private int previousSdkVersion;
 
     @SuppressLint("SSLCertificateSocketFactoryCreateSocket")
     @Before
@@ -59,6 +61,12 @@ public void setUp() throws Exception {
                 mockInetAddress);
         subject = CustomSSLSocketFactory.getDefault(0);
         subject.setCertificateSocketFactory(mockSSLCertificateSocketFactory);
+        previousSdkVersion = Build.VERSION.SDK_INT;
+    }
+
+    @After
+    public void tearDown() {
+        TestSdkHelper.setReportedSdkLevel(previousSdkVersion);
     }
 
     @Test
@@ -71,6 +79,11 @@ public void createSocket_withSocketParam_withAutoCloseTrue_shouldCloseOriginalSo
         subject.createSocket(mockSocket, "hostname", 443, true);
 
         verify(mockSocket).close();
+        verify(mockSSLSocket).getSupportedProtocols();
+        verify(mockSSLSocket).setEnabledProtocols(any(String[].class));
+        verify(mockSSLSocket).startHandshake();
+        verify(mockSSLSocket).getSession();
+        verify(mockSSLSocket).setHostname(any(String.class));
         verifyNoMoreInteractions(mockSocket);
     }
 
diff --git a/mopub-sdk/src/test/resources/robolectric.properties b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
similarity index 82%
rename from mopub-sdk/src/test/resources/robolectric.properties
rename to mopub-sdk/src/test/resources/com/mopub/robolectric.properties
index f339de43..d6c29dbf 100644
--- a/mopub-sdk/src/test/resources/robolectric.properties
+++ b/mopub-sdk/src/test/resources/com/mopub/robolectric.properties
@@ -1,3 +1,2 @@
-sdk=21
+sdk=26
 shadows=com.mopub.nativeads.test.support.MoPubShadowDisplay,com.mopub.nativeads.test.support.MoPubShadowBitmap,com.mopub.mobileads.test.support.ShadowVastVideoView,com.mopub.common.util.test.support.ShadowReflection
-manifest=src/main/AndroidManifest.xml
